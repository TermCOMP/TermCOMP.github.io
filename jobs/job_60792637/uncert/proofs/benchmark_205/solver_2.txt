YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/D9mT7.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

gopher(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) PiDPToQDPProof [SOUND, 0 ms]
(10) QDP
(11) MRRProof [EQUIVALENT, 0 ms]
(12) QDP
(13) PisEmptyProof [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
Clauses:

gopher(nil, nil).
gopher(cons(nil, Y), cons(nil, Y)).
gopher(cons(cons(U, V), W), X) :- gopher(cons(U, cons(V, W)), X).


Query: gopher(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

gopher_in_2: (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   gopher_in_ga(nil, nil) -> gopher_out_ga(nil, nil)
   gopher_in_ga(cons(nil, Y), cons(nil, Y)) -> gopher_out_ga(cons(nil, Y), cons(nil, Y))
   gopher_in_ga(cons(cons(U, V), W), X) -> U1_ga(U, V, W, X, gopher_in_ga(cons(U, cons(V, W)), X))
   U1_ga(U, V, W, X, gopher_out_ga(cons(U, cons(V, W)), X)) -> gopher_out_ga(cons(cons(U, V), W), X)

The argument filtering Pi contains the following mapping:
gopher_in_ga(x1, x2)  =  gopher_in_ga(x1)

nil  =  nil

gopher_out_ga(x1, x2)  =  gopher_out_ga(x1, x2)

cons(x1, x2)  =  cons(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   gopher_in_ga(nil, nil) -> gopher_out_ga(nil, nil)
   gopher_in_ga(cons(nil, Y), cons(nil, Y)) -> gopher_out_ga(cons(nil, Y), cons(nil, Y))
   gopher_in_ga(cons(cons(U, V), W), X) -> U1_ga(U, V, W, X, gopher_in_ga(cons(U, cons(V, W)), X))
   U1_ga(U, V, W, X, gopher_out_ga(cons(U, cons(V, W)), X)) -> gopher_out_ga(cons(cons(U, V), W), X)

The argument filtering Pi contains the following mapping:
gopher_in_ga(x1, x2)  =  gopher_in_ga(x1)

nil  =  nil

gopher_out_ga(x1, x2)  =  gopher_out_ga(x1, x2)

cons(x1, x2)  =  cons(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   GOPHER_IN_GA(cons(cons(U, V), W), X) -> U1_GA(U, V, W, X, gopher_in_ga(cons(U, cons(V, W)), X))
   GOPHER_IN_GA(cons(cons(U, V), W), X) -> GOPHER_IN_GA(cons(U, cons(V, W)), X)

The TRS R consists of the following rules:

   gopher_in_ga(nil, nil) -> gopher_out_ga(nil, nil)
   gopher_in_ga(cons(nil, Y), cons(nil, Y)) -> gopher_out_ga(cons(nil, Y), cons(nil, Y))
   gopher_in_ga(cons(cons(U, V), W), X) -> U1_ga(U, V, W, X, gopher_in_ga(cons(U, cons(V, W)), X))
   U1_ga(U, V, W, X, gopher_out_ga(cons(U, cons(V, W)), X)) -> gopher_out_ga(cons(cons(U, V), W), X)

The argument filtering Pi contains the following mapping:
gopher_in_ga(x1, x2)  =  gopher_in_ga(x1)

nil  =  nil

gopher_out_ga(x1, x2)  =  gopher_out_ga(x1, x2)

cons(x1, x2)  =  cons(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

GOPHER_IN_GA(x1, x2)  =  GOPHER_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x1, x2, x3, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GOPHER_IN_GA(cons(cons(U, V), W), X) -> U1_GA(U, V, W, X, gopher_in_ga(cons(U, cons(V, W)), X))
   GOPHER_IN_GA(cons(cons(U, V), W), X) -> GOPHER_IN_GA(cons(U, cons(V, W)), X)

The TRS R consists of the following rules:

   gopher_in_ga(nil, nil) -> gopher_out_ga(nil, nil)
   gopher_in_ga(cons(nil, Y), cons(nil, Y)) -> gopher_out_ga(cons(nil, Y), cons(nil, Y))
   gopher_in_ga(cons(cons(U, V), W), X) -> U1_ga(U, V, W, X, gopher_in_ga(cons(U, cons(V, W)), X))
   U1_ga(U, V, W, X, gopher_out_ga(cons(U, cons(V, W)), X)) -> gopher_out_ga(cons(cons(U, V), W), X)

The argument filtering Pi contains the following mapping:
gopher_in_ga(x1, x2)  =  gopher_in_ga(x1)

nil  =  nil

gopher_out_ga(x1, x2)  =  gopher_out_ga(x1, x2)

cons(x1, x2)  =  cons(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

GOPHER_IN_GA(x1, x2)  =  GOPHER_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x1, x2, x3, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GOPHER_IN_GA(cons(cons(U, V), W), X) -> GOPHER_IN_GA(cons(U, cons(V, W)), X)

The TRS R consists of the following rules:

   gopher_in_ga(nil, nil) -> gopher_out_ga(nil, nil)
   gopher_in_ga(cons(nil, Y), cons(nil, Y)) -> gopher_out_ga(cons(nil, Y), cons(nil, Y))
   gopher_in_ga(cons(cons(U, V), W), X) -> U1_ga(U, V, W, X, gopher_in_ga(cons(U, cons(V, W)), X))
   U1_ga(U, V, W, X, gopher_out_ga(cons(U, cons(V, W)), X)) -> gopher_out_ga(cons(cons(U, V), W), X)

The argument filtering Pi contains the following mapping:
gopher_in_ga(x1, x2)  =  gopher_in_ga(x1)

nil  =  nil

gopher_out_ga(x1, x2)  =  gopher_out_ga(x1, x2)

cons(x1, x2)  =  cons(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

GOPHER_IN_GA(x1, x2)  =  GOPHER_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GOPHER_IN_GA(cons(cons(U, V), W), X) -> GOPHER_IN_GA(cons(U, cons(V, W)), X)

R is empty.
The argument filtering Pi contains the following mapping:
cons(x1, x2)  =  cons(x1, x2)

GOPHER_IN_GA(x1, x2)  =  GOPHER_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GOPHER_IN_GA(cons(cons(U, V), W)) -> GOPHER_IN_GA(cons(U, cons(V, W)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   GOPHER_IN_GA(cons(cons(U, V), W)) -> GOPHER_IN_GA(cons(U, cons(V, W)))


Used ordering: Knuth-Bendix order [KBO] with precedence:cons_2 > GOPHER_IN_GA_1

and weight map:

   GOPHER_IN_GA_1=1
   cons_2=0

The variable weight is 1

----------------------------------------

(12)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(14)
YES
