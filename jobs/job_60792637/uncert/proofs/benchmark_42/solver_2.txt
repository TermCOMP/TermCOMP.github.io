MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/yCMnV.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

member(g,a)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) PiDP
    (7) UsableRulesProof [EQUIVALENT, 0 ms]
    (8) PiDP
    (9) PiDPToQDPProof [SOUND, 0 ms]
    (10) QDP
(11) PrologToPiTRSProof [SOUND, 0 ms]
(12) PiTRS
    (13) DependencyPairsProof [EQUIVALENT, 0 ms]
    (14) PiDP
    (15) DependencyGraphProof [EQUIVALENT, 0 ms]
    (16) PiDP
    (17) UsableRulesProof [EQUIVALENT, 0 ms]
    (18) PiDP
    (19) PiDPToQDPProof [SOUND, 0 ms]
    (20) QDP
(21) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(22) IRSwT
    (23) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (24) IRSwT
    (25) IntTRSCompressionProof [EQUIVALENT, 15 ms]
    (26) IRSwT
    (27) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (28) IRSwT
    (29) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
    (30) IRSwT
    (31) FilterProof [EQUIVALENT, 0 ms]
    (32) IntTRS
    (33) IntTRSPeriodicNontermProof [COMPLETE, 3 ms]
    (34) NO
(35) PrologToTRSTransformerProof [SOUND, 0 ms]
(36) QTRS
    (37) DependencyPairsProof [EQUIVALENT, 0 ms]
    (38) QDP
    (39) DependencyGraphProof [EQUIVALENT, 0 ms]
    (40) QDP
    (41) MNOCProof [EQUIVALENT, 0 ms]
    (42) QDP
    (43) UsableRulesProof [EQUIVALENT, 0 ms]
    (44) QDP
    (45) QReductionProof [EQUIVALENT, 0 ms]
    (46) QDP
(47) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(48) TRIPLES
    (49) TriplesToPiDPProof [SOUND, 0 ms]
    (50) PiDP
    (51) DependencyGraphProof [EQUIVALENT, 0 ms]
    (52) PiDP
    (53) PiDPToQDPProof [SOUND, 0 ms]
    (54) QDP


----------------------------------------

(0)
Obligation:
Clauses:

member(X, .(X, X1)).
member(X, .(X2, Xs)) :- member(X, Xs).


Query: member(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

member_in_2: (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   member_in_ga(X, .(X, X1)) -> member_out_ga(X, .(X, X1))
   member_in_ga(X, .(X2, Xs)) -> U1_ga(X, X2, Xs, member_in_ga(X, Xs))
   U1_ga(X, X2, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga(x1)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   member_in_ga(X, .(X, X1)) -> member_out_ga(X, .(X, X1))
   member_in_ga(X, .(X2, Xs)) -> U1_ga(X, X2, Xs, member_in_ga(X, Xs))
   U1_ga(X, X2, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga(x1)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GA(X, .(X2, Xs)) -> U1_GA(X, X2, Xs, member_in_ga(X, Xs))
   MEMBER_IN_GA(X, .(X2, Xs)) -> MEMBER_IN_GA(X, Xs)

The TRS R consists of the following rules:

   member_in_ga(X, .(X, X1)) -> member_out_ga(X, .(X, X1))
   member_in_ga(X, .(X2, Xs)) -> U1_ga(X, X2, Xs, member_in_ga(X, Xs))
   U1_ga(X, X2, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga(x1)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)

MEMBER_IN_GA(x1, x2)  =  MEMBER_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GA(X, .(X2, Xs)) -> U1_GA(X, X2, Xs, member_in_ga(X, Xs))
   MEMBER_IN_GA(X, .(X2, Xs)) -> MEMBER_IN_GA(X, Xs)

The TRS R consists of the following rules:

   member_in_ga(X, .(X, X1)) -> member_out_ga(X, .(X, X1))
   member_in_ga(X, .(X2, Xs)) -> U1_ga(X, X2, Xs, member_in_ga(X, Xs))
   U1_ga(X, X2, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga(x1)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)

MEMBER_IN_GA(x1, x2)  =  MEMBER_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GA(X, .(X2, Xs)) -> MEMBER_IN_GA(X, Xs)

The TRS R consists of the following rules:

   member_in_ga(X, .(X, X1)) -> member_out_ga(X, .(X, X1))
   member_in_ga(X, .(X2, Xs)) -> U1_ga(X, X2, Xs, member_in_ga(X, Xs))
   U1_ga(X, X2, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga(x1)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)

MEMBER_IN_GA(x1, x2)  =  MEMBER_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GA(X, .(X2, Xs)) -> MEMBER_IN_GA(X, Xs)

R is empty.
The argument filtering Pi contains the following mapping:
MEMBER_IN_GA(x1, x2)  =  MEMBER_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GA(X) -> MEMBER_IN_GA(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

member_in_2: (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   member_in_ga(X, .(X, X1)) -> member_out_ga(X, .(X, X1))
   member_in_ga(X, .(X2, Xs)) -> U1_ga(X, X2, Xs, member_in_ga(X, Xs))
   U1_ga(X, X2, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(12)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   member_in_ga(X, .(X, X1)) -> member_out_ga(X, .(X, X1))
   member_in_ga(X, .(X2, Xs)) -> U1_ga(X, X2, Xs, member_in_ga(X, Xs))
   U1_ga(X, X2, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)



----------------------------------------

(13) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GA(X, .(X2, Xs)) -> U1_GA(X, X2, Xs, member_in_ga(X, Xs))
   MEMBER_IN_GA(X, .(X2, Xs)) -> MEMBER_IN_GA(X, Xs)

The TRS R consists of the following rules:

   member_in_ga(X, .(X, X1)) -> member_out_ga(X, .(X, X1))
   member_in_ga(X, .(X2, Xs)) -> U1_ga(X, X2, Xs, member_in_ga(X, Xs))
   U1_ga(X, X2, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

MEMBER_IN_GA(x1, x2)  =  MEMBER_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GA(X, .(X2, Xs)) -> U1_GA(X, X2, Xs, member_in_ga(X, Xs))
   MEMBER_IN_GA(X, .(X2, Xs)) -> MEMBER_IN_GA(X, Xs)

The TRS R consists of the following rules:

   member_in_ga(X, .(X, X1)) -> member_out_ga(X, .(X, X1))
   member_in_ga(X, .(X2, Xs)) -> U1_ga(X, X2, Xs, member_in_ga(X, Xs))
   U1_ga(X, X2, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

MEMBER_IN_GA(x1, x2)  =  MEMBER_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GA(X, .(X2, Xs)) -> MEMBER_IN_GA(X, Xs)

The TRS R consists of the following rules:

   member_in_ga(X, .(X, X1)) -> member_out_ga(X, .(X, X1))
   member_in_ga(X, .(X2, Xs)) -> U1_ga(X, X2, Xs, member_in_ga(X, Xs))
   U1_ga(X, X2, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

MEMBER_IN_GA(x1, x2)  =  MEMBER_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(18)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GA(X, .(X2, Xs)) -> MEMBER_IN_GA(X, Xs)

R is empty.
The argument filtering Pi contains the following mapping:
MEMBER_IN_GA(x1, x2)  =  MEMBER_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(19) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GA(X) -> MEMBER_IN_GA(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(member X (. X X1))",
                null
            ],
            [
                "(member X (. X2 Xs))",
                "(member X Xs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(member T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(member T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(member T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(member T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "90": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T19 T22)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T19"],
                    "free": [],
                    "exprvars": []
                }
            },
            "91": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "73": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "74": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "75": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 2,
                "label": "CASE"
            },
            {
                "from": 2,
                "to": 5,
                "label": "PARALLEL"
            },
            {
                "from": 2,
                "to": 6,
                "label": "PARALLEL"
            },
            {
                "from": 5,
                "to": 73,
                "label": "EVAL with clause\nmember(X11, .(X11, X12)).\nand substitutionT1 -> T11,\nX11 -> T11,\nX12 -> T12,\nT2 -> .(T11, T12)"
            },
            {
                "from": 5,
                "to": 74,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 6,
                "to": 90,
                "label": "EVAL with clause\nmember(X19, .(X20, X21)) :- member(X19, X21).\nand substitutionT1 -> T19,\nX19 -> T19,\nX20 -> T20,\nX21 -> T22,\nT2 -> .(T20, T22),\nT21 -> T22"
            },
            {
                "from": 6,
                "to": 91,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 73,
                "to": 75,
                "label": "SUCCESS"
            },
            {
                "from": 90,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T19\nT2 -> T22"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(22)
Obligation:
Rules:
f1_out(T19) -> f90_out(T19) :|: TRUE
f90_in(x) -> f1_in(x) :|: TRUE
f2_out(T1) -> f1_out(T1) :|: TRUE
f1_in(x1) -> f2_in(x1) :|: TRUE
f91_out -> f6_out(x2) :|: TRUE
f6_in(x3) -> f90_in(x3) :|: TRUE
f90_out(x4) -> f6_out(x4) :|: TRUE
f6_in(x5) -> f91_in :|: TRUE
f5_out(x6) -> f2_out(x6) :|: TRUE
f2_in(x7) -> f6_in(x7) :|: TRUE
f6_out(x8) -> f2_out(x8) :|: TRUE
f2_in(x9) -> f5_in(x9) :|: TRUE
Start term: f1_in(T1)

----------------------------------------

(23) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f90_in(x) -> f1_in(x) :|: TRUE
f1_in(x1) -> f2_in(x1) :|: TRUE
f6_in(x3) -> f90_in(x3) :|: TRUE
f2_in(x7) -> f6_in(x7) :|: TRUE


----------------------------------------

(24)
Obligation:
Rules:
f90_in(x) -> f1_in(x) :|: TRUE
f1_in(x1) -> f2_in(x1) :|: TRUE
f6_in(x3) -> f90_in(x3) :|: TRUE
f2_in(x7) -> f6_in(x7) :|: TRUE

----------------------------------------

(25) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(26)
Obligation:
Rules:
f6_in(x3:0) -> f6_in(x3:0) :|: TRUE

----------------------------------------

(27) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(28)
Obligation:
Rules:
f6_in(x3:0) -> f6_in(x3:0) :|: TRUE

----------------------------------------

(29) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f6_in(x3:0) -> f6_in(x3:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(30)
Obligation:

Termination digraph:
Nodes:
(1) f6_in(x3:0) -> f6_in(x3:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(31) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f6_in(VARIABLE)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(32)
Obligation:
Rules:
f6_in(x3:0) -> f6_in(x3:0) :|: TRUE

----------------------------------------

(33) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, x3:0) -> f(1, x3:0) :|: pc = 1 && TRUE
Witness term starting non-terminating reduction: f(1, -8)
----------------------------------------

(34)
NO

----------------------------------------

(35) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 57,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(member X (. X X1))",
                null
            ],
            [
                "(member X (. X2 Xs))",
                "(member X Xs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "88": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(member T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "89": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(member T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "57": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "58": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(member T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(member T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "92": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "93": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "94": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "95": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T19 T22)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T19"],
                    "free": [],
                    "exprvars": []
                }
            },
            "96": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 57,
                "to": 58,
                "label": "CASE"
            },
            {
                "from": 58,
                "to": 88,
                "label": "PARALLEL"
            },
            {
                "from": 58,
                "to": 89,
                "label": "PARALLEL"
            },
            {
                "from": 88,
                "to": 92,
                "label": "EVAL with clause\nmember(X11, .(X11, X12)).\nand substitutionT1 -> T11,\nX11 -> T11,\nX12 -> T12,\nT2 -> .(T11, T12)"
            },
            {
                "from": 88,
                "to": 93,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 89,
                "to": 95,
                "label": "EVAL with clause\nmember(X19, .(X20, X21)) :- member(X19, X21).\nand substitutionT1 -> T19,\nX19 -> T19,\nX20 -> T20,\nX21 -> T22,\nT2 -> .(T20, T22),\nT21 -> T22"
            },
            {
                "from": 89,
                "to": 96,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 92,
                "to": 94,
                "label": "SUCCESS"
            },
            {
                "from": 95,
                "to": 57,
                "label": "INSTANCE with matching:\nT1 -> T19\nT2 -> T22"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(36)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f57_in(T11) -> f57_out1
   f57_in(T19) -> U1(f57_in(T19), T19)
   U1(f57_out1, T19) -> f57_out1

Q is empty.

----------------------------------------

(37) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F57_IN(T19) -> U1^1(f57_in(T19), T19)
   F57_IN(T19) -> F57_IN(T19)

The TRS R consists of the following rules:

   f57_in(T11) -> f57_out1
   f57_in(T19) -> U1(f57_in(T19), T19)
   U1(f57_out1, T19) -> f57_out1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F57_IN(T19) -> F57_IN(T19)

The TRS R consists of the following rules:

   f57_in(T11) -> f57_out1
   f57_in(T19) -> U1(f57_in(T19), T19)
   U1(f57_out1, T19) -> f57_out1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F57_IN(T19) -> F57_IN(T19)

The TRS R consists of the following rules:

   f57_in(T11) -> f57_out1
   f57_in(T19) -> U1(f57_in(T19), T19)
   U1(f57_out1, T19) -> f57_out1

The set Q consists of the following terms:

   f57_in(x0)
   U1(f57_out1, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F57_IN(T19) -> F57_IN(T19)

R is empty.
The set Q consists of the following terms:

   f57_in(x0)
   U1(f57_out1, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f57_in(x0)
   U1(f57_out1, x0)


----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F57_IN(T19) -> F57_IN(T19)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(47) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(member X (. X X1))",
                null
            ],
            [
                "(member X (. X2 Xs))",
                "(member X Xs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "68": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(member T5 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [],
                    "exprvars": []
                }
            },
            "69": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(member T1 T2)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(member T1 T2)",
                        "(member X5 (. X5 X6))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [
                        "X5",
                        "X6"
                    ],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "112": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "113": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 3,
                        "term": "(member T41 T44)"
                    },
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(member T41 T44)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(member T41 T2)",
                        "(member X5 (. X5 X6))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T41"],
                    "free": [
                        "X5",
                        "X6"
                    ],
                    "exprvars": []
                }
            },
            "114": {
                "goal": [{
                    "clause": 0,
                    "scope": 3,
                    "term": "(member T41 T44)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(member T41 T2)",
                        "(member X5 (. X5 X6))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T41"],
                    "free": [
                        "X5",
                        "X6"
                    ],
                    "exprvars": []
                }
            },
            "115": {
                "goal": [{
                    "clause": 1,
                    "scope": 3,
                    "term": "(member T41 T44)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(member T41 T2)",
                        "(member X5 (. X5 X6))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T41"],
                    "free": [
                        "X5",
                        "X6"
                    ],
                    "exprvars": []
                }
            },
            "116": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "117": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "118": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "70": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(member T5 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [],
                    "exprvars": []
                }
            },
            "119": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T61 T64)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(member T61 T2)",
                        "(member X5 (. X5 X6))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T61"],
                    "free": [
                        "X5",
                        "X6"
                    ],
                    "exprvars": []
                }
            },
            "78": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T10 T13)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": [],
                    "exprvars": []
                }
            },
            "79": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "120": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "102": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T41 T44)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(member T41 T2)",
                        "(member X5 (. X5 X6))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T41"],
                    "free": [
                        "X5",
                        "X6"
                    ],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(member T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(member T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "80": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(member T10 T13)"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(member T10 T13)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": [],
                    "exprvars": []
                }
            },
            "81": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(member T10 T13)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": [],
                    "exprvars": []
                }
            },
            "82": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(member T10 T13)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": [],
                    "exprvars": []
                }
            },
            "83": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "84": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "85": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "86": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T30 T33)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T30"],
                    "free": [],
                    "exprvars": []
                }
            },
            "87": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 68,
                "label": "EVAL with clause\nmember(X5, .(X5, X6)).\nand substitutionT1 -> T5,\nX5 -> T5,\nX6 -> T6,\nT2 -> .(T5, T6)"
            },
            {
                "from": 4,
                "to": 69,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 68,
                "to": 70,
                "label": "SUCCESS"
            },
            {
                "from": 69,
                "to": 102,
                "label": "EVAL with clause\nmember(X39, .(X40, X41)) :- member(X39, X41).\nand substitutionT1 -> T41,\nX39 -> T41,\nX40 -> T42,\nX41 -> T44,\nT2 -> .(T42, T44),\nT43 -> T44"
            },
            {
                "from": 69,
                "to": 112,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 70,
                "to": 78,
                "label": "EVAL with clause\nmember(X10, .(X11, X12)) :- member(X10, X12).\nand substitutionT5 -> T10,\nX10 -> T10,\nX11 -> T11,\nX12 -> T13,\nT2 -> .(T11, T13),\nT12 -> T13"
            },
            {
                "from": 70,
                "to": 79,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 78,
                "to": 80,
                "label": "CASE"
            },
            {
                "from": 80,
                "to": 81,
                "label": "PARALLEL"
            },
            {
                "from": 80,
                "to": 82,
                "label": "PARALLEL"
            },
            {
                "from": 81,
                "to": 83,
                "label": "EVAL with clause\nmember(X21, .(X21, X22)).\nand substitutionT10 -> T22,\nX21 -> T22,\nX22 -> T23,\nT13 -> .(T22, T23)"
            },
            {
                "from": 81,
                "to": 84,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 82,
                "to": 86,
                "label": "EVAL with clause\nmember(X29, .(X30, X31)) :- member(X29, X31).\nand substitutionT10 -> T30,\nX29 -> T30,\nX30 -> T31,\nX31 -> T33,\nT13 -> .(T31, T33),\nT32 -> T33"
            },
            {
                "from": 82,
                "to": 87,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 83,
                "to": 85,
                "label": "SUCCESS"
            },
            {
                "from": 86,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T30\nT2 -> T33"
            },
            {
                "from": 102,
                "to": 113,
                "label": "CASE"
            },
            {
                "from": 113,
                "to": 114,
                "label": "PARALLEL"
            },
            {
                "from": 113,
                "to": 115,
                "label": "PARALLEL"
            },
            {
                "from": 114,
                "to": 116,
                "label": "EVAL with clause\nmember(X50, .(X50, X51)).\nand substitutionT41 -> T53,\nX50 -> T53,\nX51 -> T54,\nT44 -> .(T53, T54)"
            },
            {
                "from": 114,
                "to": 117,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 115,
                "to": 119,
                "label": "EVAL with clause\nmember(X58, .(X59, X60)) :- member(X58, X60).\nand substitutionT41 -> T61,\nX58 -> T61,\nX59 -> T62,\nX60 -> T64,\nT44 -> .(T62, T64),\nT63 -> T64"
            },
            {
                "from": 115,
                "to": 120,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 116,
                "to": 118,
                "label": "SUCCESS"
            },
            {
                "from": 119,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T61\nT2 -> T64"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(48)
Obligation:
Triples:

memberA(X1, .(X2, .(X3, X4))) :- memberA(X1, X4).
memberA(X1, .(X2, .(X3, X4))) :- memberA(X1, X4).

Clauses:

membercA(X1, .(X1, X2)).
membercA(X1, .(X2, .(X1, X3))).
membercA(X1, .(X2, .(X3, X4))) :- membercA(X1, X4).
membercA(X1, .(X2, .(X1, X3))).
membercA(X1, .(X2, .(X3, X4))) :- membercA(X1, X4).

Afs:

memberA(x1, x2)  =  memberA(x1)


----------------------------------------

(49) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

memberA_in_2: (b,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   MEMBERA_IN_GA(X1, .(X2, .(X3, X4))) -> U1_GA(X1, X2, X3, X4, memberA_in_ga(X1, X4))
   MEMBERA_IN_GA(X1, .(X2, .(X3, X4))) -> MEMBERA_IN_GA(X1, X4)

R is empty.
The argument filtering Pi contains the following mapping:
memberA_in_ga(x1, x2)  =  memberA_in_ga(x1)

.(x1, x2)  =  .(x2)

MEMBERA_IN_GA(x1, x2)  =  MEMBERA_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x1, x5)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(50)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERA_IN_GA(X1, .(X2, .(X3, X4))) -> U1_GA(X1, X2, X3, X4, memberA_in_ga(X1, X4))
   MEMBERA_IN_GA(X1, .(X2, .(X3, X4))) -> MEMBERA_IN_GA(X1, X4)

R is empty.
The argument filtering Pi contains the following mapping:
memberA_in_ga(x1, x2)  =  memberA_in_ga(x1)

.(x1, x2)  =  .(x2)

MEMBERA_IN_GA(x1, x2)  =  MEMBERA_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x1, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(51) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(52)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERA_IN_GA(X1, .(X2, .(X3, X4))) -> MEMBERA_IN_GA(X1, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

MEMBERA_IN_GA(x1, x2)  =  MEMBERA_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(53) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERA_IN_GA(X1) -> MEMBERA_IN_GA(X1)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.