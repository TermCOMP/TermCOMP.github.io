YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/6uWGi.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

reverse(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) PiDPToQDPProof [SOUND, 0 ms]
(10) QDP
(11) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Clauses:

reverse(L, LR) :- revacc(L, LR, []).
revacc([], L, L).
revacc(.(EL, T), R, A) :- revacc(T, R, .(EL, A)).


Query: reverse(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

reverse_in_2: (b,f)

revacc_in_3: (b,f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   reverse_in_ga(L, LR) -> U1_ga(L, LR, revacc_in_gag(L, LR, []))
   revacc_in_gag([], L, L) -> revacc_out_gag([], L, L)
   revacc_in_gag(.(EL, T), R, A) -> U2_gag(EL, T, R, A, revacc_in_gag(T, R, .(EL, A)))
   U2_gag(EL, T, R, A, revacc_out_gag(T, R, .(EL, A))) -> revacc_out_gag(.(EL, T), R, A)
   U1_ga(L, LR, revacc_out_gag(L, LR, [])) -> reverse_out_ga(L, LR)

The argument filtering Pi contains the following mapping:
reverse_in_ga(x1, x2)  =  reverse_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

revacc_in_gag(x1, x2, x3)  =  revacc_in_gag(x1, x3)

[]  =  []

revacc_out_gag(x1, x2, x3)  =  revacc_out_gag(x2)

.(x1, x2)  =  .(x1, x2)

U2_gag(x1, x2, x3, x4, x5)  =  U2_gag(x5)

reverse_out_ga(x1, x2)  =  reverse_out_ga(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   reverse_in_ga(L, LR) -> U1_ga(L, LR, revacc_in_gag(L, LR, []))
   revacc_in_gag([], L, L) -> revacc_out_gag([], L, L)
   revacc_in_gag(.(EL, T), R, A) -> U2_gag(EL, T, R, A, revacc_in_gag(T, R, .(EL, A)))
   U2_gag(EL, T, R, A, revacc_out_gag(T, R, .(EL, A))) -> revacc_out_gag(.(EL, T), R, A)
   U1_ga(L, LR, revacc_out_gag(L, LR, [])) -> reverse_out_ga(L, LR)

The argument filtering Pi contains the following mapping:
reverse_in_ga(x1, x2)  =  reverse_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

revacc_in_gag(x1, x2, x3)  =  revacc_in_gag(x1, x3)

[]  =  []

revacc_out_gag(x1, x2, x3)  =  revacc_out_gag(x2)

.(x1, x2)  =  .(x1, x2)

U2_gag(x1, x2, x3, x4, x5)  =  U2_gag(x5)

reverse_out_ga(x1, x2)  =  reverse_out_ga(x2)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   REVERSE_IN_GA(L, LR) -> U1_GA(L, LR, revacc_in_gag(L, LR, []))
   REVERSE_IN_GA(L, LR) -> REVACC_IN_GAG(L, LR, [])
   REVACC_IN_GAG(.(EL, T), R, A) -> U2_GAG(EL, T, R, A, revacc_in_gag(T, R, .(EL, A)))
   REVACC_IN_GAG(.(EL, T), R, A) -> REVACC_IN_GAG(T, R, .(EL, A))

The TRS R consists of the following rules:

   reverse_in_ga(L, LR) -> U1_ga(L, LR, revacc_in_gag(L, LR, []))
   revacc_in_gag([], L, L) -> revacc_out_gag([], L, L)
   revacc_in_gag(.(EL, T), R, A) -> U2_gag(EL, T, R, A, revacc_in_gag(T, R, .(EL, A)))
   U2_gag(EL, T, R, A, revacc_out_gag(T, R, .(EL, A))) -> revacc_out_gag(.(EL, T), R, A)
   U1_ga(L, LR, revacc_out_gag(L, LR, [])) -> reverse_out_ga(L, LR)

The argument filtering Pi contains the following mapping:
reverse_in_ga(x1, x2)  =  reverse_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

revacc_in_gag(x1, x2, x3)  =  revacc_in_gag(x1, x3)

[]  =  []

revacc_out_gag(x1, x2, x3)  =  revacc_out_gag(x2)

.(x1, x2)  =  .(x1, x2)

U2_gag(x1, x2, x3, x4, x5)  =  U2_gag(x5)

reverse_out_ga(x1, x2)  =  reverse_out_ga(x2)

REVERSE_IN_GA(x1, x2)  =  REVERSE_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

REVACC_IN_GAG(x1, x2, x3)  =  REVACC_IN_GAG(x1, x3)

U2_GAG(x1, x2, x3, x4, x5)  =  U2_GAG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REVERSE_IN_GA(L, LR) -> U1_GA(L, LR, revacc_in_gag(L, LR, []))
   REVERSE_IN_GA(L, LR) -> REVACC_IN_GAG(L, LR, [])
   REVACC_IN_GAG(.(EL, T), R, A) -> U2_GAG(EL, T, R, A, revacc_in_gag(T, R, .(EL, A)))
   REVACC_IN_GAG(.(EL, T), R, A) -> REVACC_IN_GAG(T, R, .(EL, A))

The TRS R consists of the following rules:

   reverse_in_ga(L, LR) -> U1_ga(L, LR, revacc_in_gag(L, LR, []))
   revacc_in_gag([], L, L) -> revacc_out_gag([], L, L)
   revacc_in_gag(.(EL, T), R, A) -> U2_gag(EL, T, R, A, revacc_in_gag(T, R, .(EL, A)))
   U2_gag(EL, T, R, A, revacc_out_gag(T, R, .(EL, A))) -> revacc_out_gag(.(EL, T), R, A)
   U1_ga(L, LR, revacc_out_gag(L, LR, [])) -> reverse_out_ga(L, LR)

The argument filtering Pi contains the following mapping:
reverse_in_ga(x1, x2)  =  reverse_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

revacc_in_gag(x1, x2, x3)  =  revacc_in_gag(x1, x3)

[]  =  []

revacc_out_gag(x1, x2, x3)  =  revacc_out_gag(x2)

.(x1, x2)  =  .(x1, x2)

U2_gag(x1, x2, x3, x4, x5)  =  U2_gag(x5)

reverse_out_ga(x1, x2)  =  reverse_out_ga(x2)

REVERSE_IN_GA(x1, x2)  =  REVERSE_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

REVACC_IN_GAG(x1, x2, x3)  =  REVACC_IN_GAG(x1, x3)

U2_GAG(x1, x2, x3, x4, x5)  =  U2_GAG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REVACC_IN_GAG(.(EL, T), R, A) -> REVACC_IN_GAG(T, R, .(EL, A))

The TRS R consists of the following rules:

   reverse_in_ga(L, LR) -> U1_ga(L, LR, revacc_in_gag(L, LR, []))
   revacc_in_gag([], L, L) -> revacc_out_gag([], L, L)
   revacc_in_gag(.(EL, T), R, A) -> U2_gag(EL, T, R, A, revacc_in_gag(T, R, .(EL, A)))
   U2_gag(EL, T, R, A, revacc_out_gag(T, R, .(EL, A))) -> revacc_out_gag(.(EL, T), R, A)
   U1_ga(L, LR, revacc_out_gag(L, LR, [])) -> reverse_out_ga(L, LR)

The argument filtering Pi contains the following mapping:
reverse_in_ga(x1, x2)  =  reverse_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

revacc_in_gag(x1, x2, x3)  =  revacc_in_gag(x1, x3)

[]  =  []

revacc_out_gag(x1, x2, x3)  =  revacc_out_gag(x2)

.(x1, x2)  =  .(x1, x2)

U2_gag(x1, x2, x3, x4, x5)  =  U2_gag(x5)

reverse_out_ga(x1, x2)  =  reverse_out_ga(x2)

REVACC_IN_GAG(x1, x2, x3)  =  REVACC_IN_GAG(x1, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REVACC_IN_GAG(.(EL, T), R, A) -> REVACC_IN_GAG(T, R, .(EL, A))

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

REVACC_IN_GAG(x1, x2, x3)  =  REVACC_IN_GAG(x1, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVACC_IN_GAG(.(EL, T), A) -> REVACC_IN_GAG(T, .(EL, A))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*REVACC_IN_GAG(.(EL, T), A) -> REVACC_IN_GAG(T, .(EL, A))
The graph contains the following edges 1 > 1


----------------------------------------

(12)
YES
