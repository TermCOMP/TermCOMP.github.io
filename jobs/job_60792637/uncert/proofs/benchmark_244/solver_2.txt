YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/gaX3O.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

goal()

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Clauses:

even(s(s(X))) :- even(X).
even(0).
lte(s(X), s(Y)) :- lte(X, Y).
lte(0, Y).
goal :- ','(lte(X, s(s(s(s(0))))), even(X)).


Query: goal()
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

lte_in_2: (f,b)

even_in_1: (b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   goal_in_ -> U3_(lte_in_ag(X, s(s(s(s(0))))))
   lte_in_ag(s(X), s(Y)) -> U2_ag(X, Y, lte_in_ag(X, Y))
   lte_in_ag(0, Y) -> lte_out_ag(0, Y)
   U2_ag(X, Y, lte_out_ag(X, Y)) -> lte_out_ag(s(X), s(Y))
   U3_(lte_out_ag(X, s(s(s(s(0)))))) -> U4_(even_in_g(X))
   even_in_g(s(s(X))) -> U1_g(X, even_in_g(X))
   even_in_g(0) -> even_out_g(0)
   U1_g(X, even_out_g(X)) -> even_out_g(s(s(X)))
   U4_(even_out_g(X)) -> goal_out_

The argument filtering Pi contains the following mapping:
goal_in_  =  goal_in_

U3_(x1)  =  U3_(x1)

lte_in_ag(x1, x2)  =  lte_in_ag(x2)

s(x1)  =  s(x1)

U2_ag(x1, x2, x3)  =  U2_ag(x2, x3)

lte_out_ag(x1, x2)  =  lte_out_ag(x1, x2)

0  =  0

U4_(x1)  =  U4_(x1)

even_in_g(x1)  =  even_in_g(x1)

U1_g(x1, x2)  =  U1_g(x1, x2)

even_out_g(x1)  =  even_out_g(x1)

goal_out_  =  goal_out_





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   goal_in_ -> U3_(lte_in_ag(X, s(s(s(s(0))))))
   lte_in_ag(s(X), s(Y)) -> U2_ag(X, Y, lte_in_ag(X, Y))
   lte_in_ag(0, Y) -> lte_out_ag(0, Y)
   U2_ag(X, Y, lte_out_ag(X, Y)) -> lte_out_ag(s(X), s(Y))
   U3_(lte_out_ag(X, s(s(s(s(0)))))) -> U4_(even_in_g(X))
   even_in_g(s(s(X))) -> U1_g(X, even_in_g(X))
   even_in_g(0) -> even_out_g(0)
   U1_g(X, even_out_g(X)) -> even_out_g(s(s(X)))
   U4_(even_out_g(X)) -> goal_out_

The argument filtering Pi contains the following mapping:
goal_in_  =  goal_in_

U3_(x1)  =  U3_(x1)

lte_in_ag(x1, x2)  =  lte_in_ag(x2)

s(x1)  =  s(x1)

U2_ag(x1, x2, x3)  =  U2_ag(x2, x3)

lte_out_ag(x1, x2)  =  lte_out_ag(x1, x2)

0  =  0

U4_(x1)  =  U4_(x1)

even_in_g(x1)  =  even_in_g(x1)

U1_g(x1, x2)  =  U1_g(x1, x2)

even_out_g(x1)  =  even_out_g(x1)

goal_out_  =  goal_out_



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   GOAL_IN_ -> U3_^1(lte_in_ag(X, s(s(s(s(0))))))
   GOAL_IN_ -> LTE_IN_AG(X, s(s(s(s(0)))))
   LTE_IN_AG(s(X), s(Y)) -> U2_AG(X, Y, lte_in_ag(X, Y))
   LTE_IN_AG(s(X), s(Y)) -> LTE_IN_AG(X, Y)
   U3_^1(lte_out_ag(X, s(s(s(s(0)))))) -> U4_^1(even_in_g(X))
   U3_^1(lte_out_ag(X, s(s(s(s(0)))))) -> EVEN_IN_G(X)
   EVEN_IN_G(s(s(X))) -> U1_G(X, even_in_g(X))
   EVEN_IN_G(s(s(X))) -> EVEN_IN_G(X)

The TRS R consists of the following rules:

   goal_in_ -> U3_(lte_in_ag(X, s(s(s(s(0))))))
   lte_in_ag(s(X), s(Y)) -> U2_ag(X, Y, lte_in_ag(X, Y))
   lte_in_ag(0, Y) -> lte_out_ag(0, Y)
   U2_ag(X, Y, lte_out_ag(X, Y)) -> lte_out_ag(s(X), s(Y))
   U3_(lte_out_ag(X, s(s(s(s(0)))))) -> U4_(even_in_g(X))
   even_in_g(s(s(X))) -> U1_g(X, even_in_g(X))
   even_in_g(0) -> even_out_g(0)
   U1_g(X, even_out_g(X)) -> even_out_g(s(s(X)))
   U4_(even_out_g(X)) -> goal_out_

The argument filtering Pi contains the following mapping:
goal_in_  =  goal_in_

U3_(x1)  =  U3_(x1)

lte_in_ag(x1, x2)  =  lte_in_ag(x2)

s(x1)  =  s(x1)

U2_ag(x1, x2, x3)  =  U2_ag(x2, x3)

lte_out_ag(x1, x2)  =  lte_out_ag(x1, x2)

0  =  0

U4_(x1)  =  U4_(x1)

even_in_g(x1)  =  even_in_g(x1)

U1_g(x1, x2)  =  U1_g(x1, x2)

even_out_g(x1)  =  even_out_g(x1)

goal_out_  =  goal_out_

GOAL_IN_  =  GOAL_IN_

U3_^1(x1)  =  U3_^1(x1)

LTE_IN_AG(x1, x2)  =  LTE_IN_AG(x2)

U2_AG(x1, x2, x3)  =  U2_AG(x2, x3)

U4_^1(x1)  =  U4_^1(x1)

EVEN_IN_G(x1)  =  EVEN_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GOAL_IN_ -> U3_^1(lte_in_ag(X, s(s(s(s(0))))))
   GOAL_IN_ -> LTE_IN_AG(X, s(s(s(s(0)))))
   LTE_IN_AG(s(X), s(Y)) -> U2_AG(X, Y, lte_in_ag(X, Y))
   LTE_IN_AG(s(X), s(Y)) -> LTE_IN_AG(X, Y)
   U3_^1(lte_out_ag(X, s(s(s(s(0)))))) -> U4_^1(even_in_g(X))
   U3_^1(lte_out_ag(X, s(s(s(s(0)))))) -> EVEN_IN_G(X)
   EVEN_IN_G(s(s(X))) -> U1_G(X, even_in_g(X))
   EVEN_IN_G(s(s(X))) -> EVEN_IN_G(X)

The TRS R consists of the following rules:

   goal_in_ -> U3_(lte_in_ag(X, s(s(s(s(0))))))
   lte_in_ag(s(X), s(Y)) -> U2_ag(X, Y, lte_in_ag(X, Y))
   lte_in_ag(0, Y) -> lte_out_ag(0, Y)
   U2_ag(X, Y, lte_out_ag(X, Y)) -> lte_out_ag(s(X), s(Y))
   U3_(lte_out_ag(X, s(s(s(s(0)))))) -> U4_(even_in_g(X))
   even_in_g(s(s(X))) -> U1_g(X, even_in_g(X))
   even_in_g(0) -> even_out_g(0)
   U1_g(X, even_out_g(X)) -> even_out_g(s(s(X)))
   U4_(even_out_g(X)) -> goal_out_

The argument filtering Pi contains the following mapping:
goal_in_  =  goal_in_

U3_(x1)  =  U3_(x1)

lte_in_ag(x1, x2)  =  lte_in_ag(x2)

s(x1)  =  s(x1)

U2_ag(x1, x2, x3)  =  U2_ag(x2, x3)

lte_out_ag(x1, x2)  =  lte_out_ag(x1, x2)

0  =  0

U4_(x1)  =  U4_(x1)

even_in_g(x1)  =  even_in_g(x1)

U1_g(x1, x2)  =  U1_g(x1, x2)

even_out_g(x1)  =  even_out_g(x1)

goal_out_  =  goal_out_

GOAL_IN_  =  GOAL_IN_

U3_^1(x1)  =  U3_^1(x1)

LTE_IN_AG(x1, x2)  =  LTE_IN_AG(x2)

U2_AG(x1, x2, x3)  =  U2_AG(x2, x3)

U4_^1(x1)  =  U4_^1(x1)

EVEN_IN_G(x1)  =  EVEN_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   EVEN_IN_G(s(s(X))) -> EVEN_IN_G(X)

The TRS R consists of the following rules:

   goal_in_ -> U3_(lte_in_ag(X, s(s(s(s(0))))))
   lte_in_ag(s(X), s(Y)) -> U2_ag(X, Y, lte_in_ag(X, Y))
   lte_in_ag(0, Y) -> lte_out_ag(0, Y)
   U2_ag(X, Y, lte_out_ag(X, Y)) -> lte_out_ag(s(X), s(Y))
   U3_(lte_out_ag(X, s(s(s(s(0)))))) -> U4_(even_in_g(X))
   even_in_g(s(s(X))) -> U1_g(X, even_in_g(X))
   even_in_g(0) -> even_out_g(0)
   U1_g(X, even_out_g(X)) -> even_out_g(s(s(X)))
   U4_(even_out_g(X)) -> goal_out_

The argument filtering Pi contains the following mapping:
goal_in_  =  goal_in_

U3_(x1)  =  U3_(x1)

lte_in_ag(x1, x2)  =  lte_in_ag(x2)

s(x1)  =  s(x1)

U2_ag(x1, x2, x3)  =  U2_ag(x2, x3)

lte_out_ag(x1, x2)  =  lte_out_ag(x1, x2)

0  =  0

U4_(x1)  =  U4_(x1)

even_in_g(x1)  =  even_in_g(x1)

U1_g(x1, x2)  =  U1_g(x1, x2)

even_out_g(x1)  =  even_out_g(x1)

goal_out_  =  goal_out_

EVEN_IN_G(x1)  =  EVEN_IN_G(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   EVEN_IN_G(s(s(X))) -> EVEN_IN_G(X)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EVEN_IN_G(s(s(X))) -> EVEN_IN_G(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*EVEN_IN_G(s(s(X))) -> EVEN_IN_G(X)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LTE_IN_AG(s(X), s(Y)) -> LTE_IN_AG(X, Y)

The TRS R consists of the following rules:

   goal_in_ -> U3_(lte_in_ag(X, s(s(s(s(0))))))
   lte_in_ag(s(X), s(Y)) -> U2_ag(X, Y, lte_in_ag(X, Y))
   lte_in_ag(0, Y) -> lte_out_ag(0, Y)
   U2_ag(X, Y, lte_out_ag(X, Y)) -> lte_out_ag(s(X), s(Y))
   U3_(lte_out_ag(X, s(s(s(s(0)))))) -> U4_(even_in_g(X))
   even_in_g(s(s(X))) -> U1_g(X, even_in_g(X))
   even_in_g(0) -> even_out_g(0)
   U1_g(X, even_out_g(X)) -> even_out_g(s(s(X)))
   U4_(even_out_g(X)) -> goal_out_

The argument filtering Pi contains the following mapping:
goal_in_  =  goal_in_

U3_(x1)  =  U3_(x1)

lte_in_ag(x1, x2)  =  lte_in_ag(x2)

s(x1)  =  s(x1)

U2_ag(x1, x2, x3)  =  U2_ag(x2, x3)

lte_out_ag(x1, x2)  =  lte_out_ag(x1, x2)

0  =  0

U4_(x1)  =  U4_(x1)

even_in_g(x1)  =  even_in_g(x1)

U1_g(x1, x2)  =  U1_g(x1, x2)

even_out_g(x1)  =  even_out_g(x1)

goal_out_  =  goal_out_

LTE_IN_AG(x1, x2)  =  LTE_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LTE_IN_AG(s(X), s(Y)) -> LTE_IN_AG(X, Y)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

LTE_IN_AG(x1, x2)  =  LTE_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LTE_IN_AG(s(Y)) -> LTE_IN_AG(Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LTE_IN_AG(s(Y)) -> LTE_IN_AG(Y)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES
