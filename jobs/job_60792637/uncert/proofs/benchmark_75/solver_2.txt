MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/zgYKs.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

subset(a,g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) AND
        (7) PiDP
            (8) UsableRulesProof [EQUIVALENT, 0 ms]
            (9) PiDP
            (10) PiDPToQDPProof [SOUND, 0 ms]
            (11) QDP
            (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (13) YES
        (14) PiDP
            (15) UsableRulesProof [EQUIVALENT, 0 ms]
            (16) PiDP
            (17) PiDPToQDPProof [SOUND, 0 ms]
            (18) QDP
            (19) TransformationProof [SOUND, 0 ms]
            (20) QDP
            (21) TransformationProof [EQUIVALENT, 0 ms]
            (22) QDP
(23) PrologToPiTRSProof [SOUND, 0 ms]
(24) PiTRS
    (25) DependencyPairsProof [EQUIVALENT, 0 ms]
    (26) PiDP
    (27) DependencyGraphProof [EQUIVALENT, 0 ms]
    (28) AND
        (29) PiDP
            (30) UsableRulesProof [EQUIVALENT, 0 ms]
            (31) PiDP
            (32) PiDPToQDPProof [SOUND, 0 ms]
            (33) QDP
            (34) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (35) YES
        (36) PiDP
            (37) UsableRulesProof [EQUIVALENT, 0 ms]
            (38) PiDP
            (39) PiDPToQDPProof [SOUND, 0 ms]
            (40) QDP
            (41) TransformationProof [SOUND, 0 ms]
            (42) QDP
            (43) TransformationProof [EQUIVALENT, 0 ms]
            (44) QDP
(45) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(46) AND
    (47) IRSwT
        (48) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (49) IRSwT
        (50) IntTRSCompressionProof [EQUIVALENT, 17 ms]
        (51) IRSwT
        (52) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (53) IRSwT
        (54) IRSwTTerminationDigraphProof [EQUIVALENT, 2 ms]
        (55) IRSwT
        (56) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 11 ms]
        (57) IRSwT
        (58) TempFilterProof [SOUND, 2 ms]
        (59) IRSwT
        (60) IRSwTToQDPProof [SOUND, 0 ms]
        (61) QDP
        (62) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (63) YES
    (64) IRSwT
        (65) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (66) IRSwT
        (67) IntTRSCompressionProof [EQUIVALENT, 3 ms]
        (68) IRSwT
        (69) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (70) IRSwT
(71) PrologToTRSTransformerProof [SOUND, 0 ms]
(72) QTRS
    (73) DependencyPairsProof [EQUIVALENT, 0 ms]
    (74) QDP
    (75) DependencyGraphProof [EQUIVALENT, 0 ms]
    (76) AND
        (77) QDP
            (78) UsableRulesProof [EQUIVALENT, 0 ms]
            (79) QDP
            (80) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (81) YES
        (82) QDP
            (83) NonTerminationLoopProof [COMPLETE, 0 ms]
            (84) NO
(85) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(86) TRIPLES
    (87) TriplesToPiDPProof [SOUND, 0 ms]
    (88) PiDP
    (89) DependencyGraphProof [EQUIVALENT, 0 ms]
    (90) AND
        (91) PiDP
            (92) UsableRulesProof [EQUIVALENT, 0 ms]
            (93) PiDP
            (94) PiDPToQDPProof [SOUND, 0 ms]
            (95) QDP
            (96) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (97) YES
        (98) PiDP
            (99) PiDPToQDPProof [SOUND, 0 ms]
            (100) QDP
            (101) TransformationProof [SOUND, 0 ms]
            (102) QDP
            (103) TransformationProof [EQUIVALENT, 0 ms]
            (104) QDP
            (105) TransformationProof [EQUIVALENT, 0 ms]
            (106) QDP


----------------------------------------

(0)
Obligation:
Clauses:

subset([], X1).
subset(.(X, Xs), Ys) :- ','(member(X, Ys), subset(Xs, Ys)).
member(X, .(X, X2)).
member(X, .(X3, Xs)) :- member(X, Xs).


Query: subset(a,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

subset_in_2: (f,b)

member_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   subset_in_ag([], X1) -> subset_out_ag([], X1)
   subset_in_ag(.(X, Xs), Ys) -> U1_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X2)) -> member_out_ag(X, .(X, X2))
   member_in_ag(X, .(X3, Xs)) -> U3_ag(X, X3, Xs, member_in_ag(X, Xs))
   U3_ag(X, X3, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X3, Xs))
   U1_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U2_ag(X, Xs, Ys, subset_in_ag(Xs, Ys))
   U2_ag(X, Xs, Ys, subset_out_ag(Xs, Ys)) -> subset_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ag(x1, x2)  =  subset_in_ag(x2)

subset_out_ag(x1, x2)  =  subset_out_ag(x1)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x4)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   subset_in_ag([], X1) -> subset_out_ag([], X1)
   subset_in_ag(.(X, Xs), Ys) -> U1_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X2)) -> member_out_ag(X, .(X, X2))
   member_in_ag(X, .(X3, Xs)) -> U3_ag(X, X3, Xs, member_in_ag(X, Xs))
   U3_ag(X, X3, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X3, Xs))
   U1_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U2_ag(X, Xs, Ys, subset_in_ag(Xs, Ys))
   U2_ag(X, Xs, Ys, subset_out_ag(Xs, Ys)) -> subset_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ag(x1, x2)  =  subset_in_ag(x2)

subset_out_ag(x1, x2)  =  subset_out_ag(x1)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x4)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSET_IN_AG(.(X, Xs), Ys) -> U1_AG(X, Xs, Ys, member_in_ag(X, Ys))
   SUBSET_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X3, Xs)) -> U3_AG(X, X3, Xs, member_in_ag(X, Xs))
   MEMBER_IN_AG(X, .(X3, Xs)) -> MEMBER_IN_AG(X, Xs)
   U1_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U2_AG(X, Xs, Ys, subset_in_ag(Xs, Ys))
   U1_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> SUBSET_IN_AG(Xs, Ys)

The TRS R consists of the following rules:

   subset_in_ag([], X1) -> subset_out_ag([], X1)
   subset_in_ag(.(X, Xs), Ys) -> U1_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X2)) -> member_out_ag(X, .(X, X2))
   member_in_ag(X, .(X3, Xs)) -> U3_ag(X, X3, Xs, member_in_ag(X, Xs))
   U3_ag(X, X3, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X3, Xs))
   U1_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U2_ag(X, Xs, Ys, subset_in_ag(Xs, Ys))
   U2_ag(X, Xs, Ys, subset_out_ag(Xs, Ys)) -> subset_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ag(x1, x2)  =  subset_in_ag(x2)

subset_out_ag(x1, x2)  =  subset_out_ag(x1)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x4)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

SUBSET_IN_AG(x1, x2)  =  SUBSET_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSET_IN_AG(.(X, Xs), Ys) -> U1_AG(X, Xs, Ys, member_in_ag(X, Ys))
   SUBSET_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X3, Xs)) -> U3_AG(X, X3, Xs, member_in_ag(X, Xs))
   MEMBER_IN_AG(X, .(X3, Xs)) -> MEMBER_IN_AG(X, Xs)
   U1_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U2_AG(X, Xs, Ys, subset_in_ag(Xs, Ys))
   U1_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> SUBSET_IN_AG(Xs, Ys)

The TRS R consists of the following rules:

   subset_in_ag([], X1) -> subset_out_ag([], X1)
   subset_in_ag(.(X, Xs), Ys) -> U1_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X2)) -> member_out_ag(X, .(X, X2))
   member_in_ag(X, .(X3, Xs)) -> U3_ag(X, X3, Xs, member_in_ag(X, Xs))
   U3_ag(X, X3, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X3, Xs))
   U1_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U2_ag(X, Xs, Ys, subset_in_ag(Xs, Ys))
   U2_ag(X, Xs, Ys, subset_out_ag(Xs, Ys)) -> subset_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ag(x1, x2)  =  subset_in_ag(x2)

subset_out_ag(x1, x2)  =  subset_out_ag(x1)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x4)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

SUBSET_IN_AG(x1, x2)  =  SUBSET_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X3, Xs)) -> MEMBER_IN_AG(X, Xs)

The TRS R consists of the following rules:

   subset_in_ag([], X1) -> subset_out_ag([], X1)
   subset_in_ag(.(X, Xs), Ys) -> U1_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X2)) -> member_out_ag(X, .(X, X2))
   member_in_ag(X, .(X3, Xs)) -> U3_ag(X, X3, Xs, member_in_ag(X, Xs))
   U3_ag(X, X3, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X3, Xs))
   U1_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U2_ag(X, Xs, Ys, subset_in_ag(Xs, Ys))
   U2_ag(X, Xs, Ys, subset_out_ag(Xs, Ys)) -> subset_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ag(x1, x2)  =  subset_in_ag(x2)

subset_out_ag(x1, x2)  =  subset_out_ag(x1)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x4)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X3, Xs)) -> MEMBER_IN_AG(X, Xs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(.(X3, Xs)) -> MEMBER_IN_AG(Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER_IN_AG(.(X3, Xs)) -> MEMBER_IN_AG(Xs)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> SUBSET_IN_AG(Xs, Ys)
   SUBSET_IN_AG(.(X, Xs), Ys) -> U1_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   subset_in_ag([], X1) -> subset_out_ag([], X1)
   subset_in_ag(.(X, Xs), Ys) -> U1_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X2)) -> member_out_ag(X, .(X, X2))
   member_in_ag(X, .(X3, Xs)) -> U3_ag(X, X3, Xs, member_in_ag(X, Xs))
   U3_ag(X, X3, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X3, Xs))
   U1_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U2_ag(X, Xs, Ys, subset_in_ag(Xs, Ys))
   U2_ag(X, Xs, Ys, subset_out_ag(Xs, Ys)) -> subset_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ag(x1, x2)  =  subset_in_ag(x2)

subset_out_ag(x1, x2)  =  subset_out_ag(x1)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x4)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

SUBSET_IN_AG(x1, x2)  =  SUBSET_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> SUBSET_IN_AG(Xs, Ys)
   SUBSET_IN_AG(.(X, Xs), Ys) -> U1_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   member_in_ag(X, .(X, X2)) -> member_out_ag(X, .(X, X2))
   member_in_ag(X, .(X3, Xs)) -> U3_ag(X, X3, Xs, member_in_ag(X, Xs))
   U3_ag(X, X3, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X3, Xs))

The argument filtering Pi contains the following mapping:
member_in_ag(x1, x2)  =  member_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x4)

SUBSET_IN_AG(x1, x2)  =  SUBSET_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_AG(Ys, member_out_ag(X)) -> SUBSET_IN_AG(Ys)
   SUBSET_IN_AG(Ys) -> U1_AG(Ys, member_in_ag(Ys))

The TRS R consists of the following rules:

   member_in_ag(.(X, X2)) -> member_out_ag(X)
   member_in_ag(.(X3, Xs)) -> U3_ag(member_in_ag(Xs))
   U3_ag(member_out_ag(X)) -> member_out_ag(X)

The set Q consists of the following terms:

   member_in_ag(x0)
   U3_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) TransformationProof (SOUND)
By narrowing [LPAR04] the rule SUBSET_IN_AG(Ys) -> U1_AG(Ys, member_in_ag(Ys)) at position [1] we obtained the following new rules [LPAR04]:

   (SUBSET_IN_AG(.(x0, x1)) -> U1_AG(.(x0, x1), member_out_ag(x0)),SUBSET_IN_AG(.(x0, x1)) -> U1_AG(.(x0, x1), member_out_ag(x0)))
   (SUBSET_IN_AG(.(x0, x1)) -> U1_AG(.(x0, x1), U3_ag(member_in_ag(x1))),SUBSET_IN_AG(.(x0, x1)) -> U1_AG(.(x0, x1), U3_ag(member_in_ag(x1))))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_AG(Ys, member_out_ag(X)) -> SUBSET_IN_AG(Ys)
   SUBSET_IN_AG(.(x0, x1)) -> U1_AG(.(x0, x1), member_out_ag(x0))
   SUBSET_IN_AG(.(x0, x1)) -> U1_AG(.(x0, x1), U3_ag(member_in_ag(x1)))

The TRS R consists of the following rules:

   member_in_ag(.(X, X2)) -> member_out_ag(X)
   member_in_ag(.(X3, Xs)) -> U3_ag(member_in_ag(Xs))
   U3_ag(member_out_ag(X)) -> member_out_ag(X)

The set Q consists of the following terms:

   member_in_ag(x0)
   U3_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U1_AG(Ys, member_out_ag(X)) -> SUBSET_IN_AG(Ys) we obtained the following new rules [LPAR04]:

   (U1_AG(.(z0, z1), member_out_ag(z0)) -> SUBSET_IN_AG(.(z0, z1)),U1_AG(.(z0, z1), member_out_ag(z0)) -> SUBSET_IN_AG(.(z0, z1)))
   (U1_AG(.(z0, z1), member_out_ag(x1)) -> SUBSET_IN_AG(.(z0, z1)),U1_AG(.(z0, z1), member_out_ag(x1)) -> SUBSET_IN_AG(.(z0, z1)))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUBSET_IN_AG(.(x0, x1)) -> U1_AG(.(x0, x1), member_out_ag(x0))
   SUBSET_IN_AG(.(x0, x1)) -> U1_AG(.(x0, x1), U3_ag(member_in_ag(x1)))
   U1_AG(.(z0, z1), member_out_ag(z0)) -> SUBSET_IN_AG(.(z0, z1))
   U1_AG(.(z0, z1), member_out_ag(x1)) -> SUBSET_IN_AG(.(z0, z1))

The TRS R consists of the following rules:

   member_in_ag(.(X, X2)) -> member_out_ag(X)
   member_in_ag(.(X3, Xs)) -> U3_ag(member_in_ag(Xs))
   U3_ag(member_out_ag(X)) -> member_out_ag(X)

The set Q consists of the following terms:

   member_in_ag(x0)
   U3_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

subset_in_2: (f,b)

member_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   subset_in_ag([], X1) -> subset_out_ag([], X1)
   subset_in_ag(.(X, Xs), Ys) -> U1_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X2)) -> member_out_ag(X, .(X, X2))
   member_in_ag(X, .(X3, Xs)) -> U3_ag(X, X3, Xs, member_in_ag(X, Xs))
   U3_ag(X, X3, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X3, Xs))
   U1_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U2_ag(X, Xs, Ys, subset_in_ag(Xs, Ys))
   U2_ag(X, Xs, Ys, subset_out_ag(Xs, Ys)) -> subset_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ag(x1, x2)  =  subset_in_ag(x2)

subset_out_ag(x1, x2)  =  subset_out_ag(x1, x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x3, x4)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(24)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   subset_in_ag([], X1) -> subset_out_ag([], X1)
   subset_in_ag(.(X, Xs), Ys) -> U1_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X2)) -> member_out_ag(X, .(X, X2))
   member_in_ag(X, .(X3, Xs)) -> U3_ag(X, X3, Xs, member_in_ag(X, Xs))
   U3_ag(X, X3, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X3, Xs))
   U1_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U2_ag(X, Xs, Ys, subset_in_ag(Xs, Ys))
   U2_ag(X, Xs, Ys, subset_out_ag(Xs, Ys)) -> subset_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ag(x1, x2)  =  subset_in_ag(x2)

subset_out_ag(x1, x2)  =  subset_out_ag(x1, x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x3, x4)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)



----------------------------------------

(25) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSET_IN_AG(.(X, Xs), Ys) -> U1_AG(X, Xs, Ys, member_in_ag(X, Ys))
   SUBSET_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X3, Xs)) -> U3_AG(X, X3, Xs, member_in_ag(X, Xs))
   MEMBER_IN_AG(X, .(X3, Xs)) -> MEMBER_IN_AG(X, Xs)
   U1_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U2_AG(X, Xs, Ys, subset_in_ag(Xs, Ys))
   U1_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> SUBSET_IN_AG(Xs, Ys)

The TRS R consists of the following rules:

   subset_in_ag([], X1) -> subset_out_ag([], X1)
   subset_in_ag(.(X, Xs), Ys) -> U1_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X2)) -> member_out_ag(X, .(X, X2))
   member_in_ag(X, .(X3, Xs)) -> U3_ag(X, X3, Xs, member_in_ag(X, Xs))
   U3_ag(X, X3, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X3, Xs))
   U1_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U2_ag(X, Xs, Ys, subset_in_ag(Xs, Ys))
   U2_ag(X, Xs, Ys, subset_out_ag(Xs, Ys)) -> subset_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ag(x1, x2)  =  subset_in_ag(x2)

subset_out_ag(x1, x2)  =  subset_out_ag(x1, x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x3, x4)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

SUBSET_IN_AG(x1, x2)  =  SUBSET_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x2, x3, x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(26)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSET_IN_AG(.(X, Xs), Ys) -> U1_AG(X, Xs, Ys, member_in_ag(X, Ys))
   SUBSET_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X3, Xs)) -> U3_AG(X, X3, Xs, member_in_ag(X, Xs))
   MEMBER_IN_AG(X, .(X3, Xs)) -> MEMBER_IN_AG(X, Xs)
   U1_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U2_AG(X, Xs, Ys, subset_in_ag(Xs, Ys))
   U1_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> SUBSET_IN_AG(Xs, Ys)

The TRS R consists of the following rules:

   subset_in_ag([], X1) -> subset_out_ag([], X1)
   subset_in_ag(.(X, Xs), Ys) -> U1_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X2)) -> member_out_ag(X, .(X, X2))
   member_in_ag(X, .(X3, Xs)) -> U3_ag(X, X3, Xs, member_in_ag(X, Xs))
   U3_ag(X, X3, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X3, Xs))
   U1_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U2_ag(X, Xs, Ys, subset_in_ag(Xs, Ys))
   U2_ag(X, Xs, Ys, subset_out_ag(Xs, Ys)) -> subset_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ag(x1, x2)  =  subset_in_ag(x2)

subset_out_ag(x1, x2)  =  subset_out_ag(x1, x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x3, x4)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

SUBSET_IN_AG(x1, x2)  =  SUBSET_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x2, x3, x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(27) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(28)
Complex Obligation (AND)

----------------------------------------

(29)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X3, Xs)) -> MEMBER_IN_AG(X, Xs)

The TRS R consists of the following rules:

   subset_in_ag([], X1) -> subset_out_ag([], X1)
   subset_in_ag(.(X, Xs), Ys) -> U1_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X2)) -> member_out_ag(X, .(X, X2))
   member_in_ag(X, .(X3, Xs)) -> U3_ag(X, X3, Xs, member_in_ag(X, Xs))
   U3_ag(X, X3, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X3, Xs))
   U1_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U2_ag(X, Xs, Ys, subset_in_ag(Xs, Ys))
   U2_ag(X, Xs, Ys, subset_out_ag(Xs, Ys)) -> subset_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ag(x1, x2)  =  subset_in_ag(x2)

subset_out_ag(x1, x2)  =  subset_out_ag(x1, x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x3, x4)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(30) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(31)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X3, Xs)) -> MEMBER_IN_AG(X, Xs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(32) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(.(X3, Xs)) -> MEMBER_IN_AG(Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(34) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER_IN_AG(.(X3, Xs)) -> MEMBER_IN_AG(Xs)
The graph contains the following edges 1 > 1


----------------------------------------

(35)
YES

----------------------------------------

(36)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> SUBSET_IN_AG(Xs, Ys)
   SUBSET_IN_AG(.(X, Xs), Ys) -> U1_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   subset_in_ag([], X1) -> subset_out_ag([], X1)
   subset_in_ag(.(X, Xs), Ys) -> U1_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X2)) -> member_out_ag(X, .(X, X2))
   member_in_ag(X, .(X3, Xs)) -> U3_ag(X, X3, Xs, member_in_ag(X, Xs))
   U3_ag(X, X3, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X3, Xs))
   U1_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U2_ag(X, Xs, Ys, subset_in_ag(Xs, Ys))
   U2_ag(X, Xs, Ys, subset_out_ag(Xs, Ys)) -> subset_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ag(x1, x2)  =  subset_in_ag(x2)

subset_out_ag(x1, x2)  =  subset_out_ag(x1, x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x3, x4)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

SUBSET_IN_AG(x1, x2)  =  SUBSET_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(37) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(38)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> SUBSET_IN_AG(Xs, Ys)
   SUBSET_IN_AG(.(X, Xs), Ys) -> U1_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   member_in_ag(X, .(X, X2)) -> member_out_ag(X, .(X, X2))
   member_in_ag(X, .(X3, Xs)) -> U3_ag(X, X3, Xs, member_in_ag(X, Xs))
   U3_ag(X, X3, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X3, Xs))

The argument filtering Pi contains the following mapping:
member_in_ag(x1, x2)  =  member_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x3, x4)

SUBSET_IN_AG(x1, x2)  =  SUBSET_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(39) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_AG(Ys, member_out_ag(X, Ys)) -> SUBSET_IN_AG(Ys)
   SUBSET_IN_AG(Ys) -> U1_AG(Ys, member_in_ag(Ys))

The TRS R consists of the following rules:

   member_in_ag(.(X, X2)) -> member_out_ag(X, .(X, X2))
   member_in_ag(.(X3, Xs)) -> U3_ag(X3, Xs, member_in_ag(Xs))
   U3_ag(X3, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X3, Xs))

The set Q consists of the following terms:

   member_in_ag(x0)
   U3_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(41) TransformationProof (SOUND)
By narrowing [LPAR04] the rule SUBSET_IN_AG(Ys) -> U1_AG(Ys, member_in_ag(Ys)) at position [1] we obtained the following new rules [LPAR04]:

   (SUBSET_IN_AG(.(x0, x1)) -> U1_AG(.(x0, x1), member_out_ag(x0, .(x0, x1))),SUBSET_IN_AG(.(x0, x1)) -> U1_AG(.(x0, x1), member_out_ag(x0, .(x0, x1))))
   (SUBSET_IN_AG(.(x0, x1)) -> U1_AG(.(x0, x1), U3_ag(x0, x1, member_in_ag(x1))),SUBSET_IN_AG(.(x0, x1)) -> U1_AG(.(x0, x1), U3_ag(x0, x1, member_in_ag(x1))))


----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_AG(Ys, member_out_ag(X, Ys)) -> SUBSET_IN_AG(Ys)
   SUBSET_IN_AG(.(x0, x1)) -> U1_AG(.(x0, x1), member_out_ag(x0, .(x0, x1)))
   SUBSET_IN_AG(.(x0, x1)) -> U1_AG(.(x0, x1), U3_ag(x0, x1, member_in_ag(x1)))

The TRS R consists of the following rules:

   member_in_ag(.(X, X2)) -> member_out_ag(X, .(X, X2))
   member_in_ag(.(X3, Xs)) -> U3_ag(X3, Xs, member_in_ag(Xs))
   U3_ag(X3, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X3, Xs))

The set Q consists of the following terms:

   member_in_ag(x0)
   U3_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(43) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U1_AG(Ys, member_out_ag(X, Ys)) -> SUBSET_IN_AG(Ys) we obtained the following new rules [LPAR04]:

   (U1_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) -> SUBSET_IN_AG(.(z0, z1)),U1_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) -> SUBSET_IN_AG(.(z0, z1)))
   (U1_AG(.(z0, z1), member_out_ag(x1, .(z0, z1))) -> SUBSET_IN_AG(.(z0, z1)),U1_AG(.(z0, z1), member_out_ag(x1, .(z0, z1))) -> SUBSET_IN_AG(.(z0, z1)))


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUBSET_IN_AG(.(x0, x1)) -> U1_AG(.(x0, x1), member_out_ag(x0, .(x0, x1)))
   SUBSET_IN_AG(.(x0, x1)) -> U1_AG(.(x0, x1), U3_ag(x0, x1, member_in_ag(x1)))
   U1_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) -> SUBSET_IN_AG(.(z0, z1))
   U1_AG(.(z0, z1), member_out_ag(x1, .(z0, z1))) -> SUBSET_IN_AG(.(z0, z1))

The TRS R consists of the following rules:

   member_in_ag(.(X, X2)) -> member_out_ag(X, .(X, X2))
   member_in_ag(.(X3, Xs)) -> U3_ag(X3, Xs, member_in_ag(Xs))
   U3_ag(X3, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X3, Xs))

The set Q consists of the following terms:

   member_in_ag(x0)
   U3_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(45) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(subset ([]) X1)",
                null
            ],
            [
                "(subset (. X Xs) Ys)",
                "(',' (member X Ys) (subset Xs Ys))"
            ],
            [
                "(member X (. X X2))",
                null
            ],
            [
                "(member X (. X3 Xs))",
                "(member X Xs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "44": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(member T17 T16)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(member T17 T16)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T16"],
                    "free": [],
                    "exprvars": []
                }
            },
            "35": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T17 T16) (subset T18 T16))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T16"],
                    "free": [],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(subset T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "36": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "47": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(member T17 T16)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T16"],
                    "free": [],
                    "exprvars": []
                }
            },
            "29": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(subset T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(subset T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(subset T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "93": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "50": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(member T17 T16)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T16"],
                    "free": [],
                    "exprvars": []
                }
            },
            "94": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "40": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T17 T16)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T16"],
                    "free": [],
                    "exprvars": []
                }
            },
            "95": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "30": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "31": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "42": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset T23 T16)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T16"],
                    "free": [],
                    "exprvars": []
                }
            },
            "97": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T47 T46)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T46"],
                    "free": [],
                    "exprvars": []
                }
            },
            "32": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "98": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 25,
                "label": "PARALLEL"
            },
            {
                "from": 5,
                "to": 29,
                "label": "PARALLEL"
            },
            {
                "from": 25,
                "to": 30,
                "label": "EVAL with clause\nsubset([], X8).\nand substitutionT1 -> [],\nT2 -> T7,\nX8 -> T7"
            },
            {
                "from": 25,
                "to": 31,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 29,
                "to": 35,
                "label": "EVAL with clause\nsubset(.(X15, X16), X17) :- ','(member(X15, X17), subset(X16, X17)).\nand substitutionX15 -> T17,\nX16 -> T18,\nT1 -> .(T17, T18),\nT2 -> T16,\nX17 -> T16,\nT14 -> T17,\nT15 -> T18"
            },
            {
                "from": 29,
                "to": 36,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 30,
                "to": 32,
                "label": "SUCCESS"
            },
            {
                "from": 35,
                "to": 40,
                "label": "SPLIT 1"
            },
            {
                "from": 35,
                "to": 42,
                "label": "SPLIT 2\nnew knowledge:\nT17 is ground\nT16 is ground\nreplacements:T18 -> T23"
            },
            {
                "from": 40,
                "to": 44,
                "label": "CASE"
            },
            {
                "from": 42,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T23\nT2 -> T16"
            },
            {
                "from": 44,
                "to": 47,
                "label": "PARALLEL"
            },
            {
                "from": 44,
                "to": 50,
                "label": "PARALLEL"
            },
            {
                "from": 47,
                "to": 93,
                "label": "EVAL with clause\nmember(X34, .(X34, X35)).\nand substitutionT17 -> T36,\nX34 -> T36,\nX35 -> T37,\nT16 -> .(T36, T37)"
            },
            {
                "from": 47,
                "to": 94,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 50,
                "to": 97,
                "label": "EVAL with clause\nmember(X42, .(X43, X44)) :- member(X42, X44).\nand substitutionT17 -> T47,\nX42 -> T47,\nX43 -> T45,\nX44 -> T46,\nT16 -> .(T45, T46),\nT44 -> T47"
            },
            {
                "from": 50,
                "to": 98,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 93,
                "to": 95,
                "label": "SUCCESS"
            },
            {
                "from": 97,
                "to": 40,
                "label": "INSTANCE with matching:\nT17 -> T47\nT16 -> T46"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(46)
Complex Obligation (AND)

----------------------------------------

(47)
Obligation:
Rules:
f44_in(T16) -> f47_in(T16) :|: TRUE
f47_out(x) -> f44_out(x) :|: TRUE
f50_out(x1) -> f44_out(x1) :|: TRUE
f44_in(x2) -> f50_in(x2) :|: TRUE
f98_out -> f50_out(x3) :|: TRUE
f50_in(.(T45, T46)) -> f97_in(T46) :|: TRUE
f50_in(x4) -> f98_in :|: TRUE
f97_out(x5) -> f50_out(.(x6, x5)) :|: TRUE
f97_in(x7) -> f40_in(x7) :|: TRUE
f40_out(x8) -> f97_out(x8) :|: TRUE
f44_out(x9) -> f40_out(x9) :|: TRUE
f40_in(x10) -> f44_in(x10) :|: TRUE
f5_out(T2) -> f3_out(T2) :|: TRUE
f3_in(x11) -> f5_in(x11) :|: TRUE
f5_in(x12) -> f25_in(x12) :|: TRUE
f5_in(x13) -> f29_in(x13) :|: TRUE
f29_out(x14) -> f5_out(x14) :|: TRUE
f25_out(x15) -> f5_out(x15) :|: TRUE
f29_in(x16) -> f35_in(x16) :|: TRUE
f35_out(x17) -> f29_out(x17) :|: TRUE
f29_in(x18) -> f36_in :|: TRUE
f36_out -> f29_out(x19) :|: TRUE
f42_out(x20) -> f35_out(x20) :|: TRUE
f40_out(x21) -> f42_in(x21) :|: TRUE
f35_in(x22) -> f40_in(x22) :|: TRUE
Start term: f3_in(T2)

----------------------------------------

(48) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f44_in(x2) -> f50_in(x2) :|: TRUE
f50_in(.(T45, T46)) -> f97_in(T46) :|: TRUE
f97_in(x7) -> f40_in(x7) :|: TRUE
f40_in(x10) -> f44_in(x10) :|: TRUE


----------------------------------------

(49)
Obligation:
Rules:
f44_in(x2) -> f50_in(x2) :|: TRUE
f50_in(.(T45, T46)) -> f97_in(T46) :|: TRUE
f97_in(x7) -> f40_in(x7) :|: TRUE
f40_in(x10) -> f44_in(x10) :|: TRUE

----------------------------------------

(50) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(51)
Obligation:
Rules:
f44_in(.(T45:0, T46:0)) -> f44_in(T46:0) :|: TRUE

----------------------------------------

(52) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(53)
Obligation:
Rules:
f44_in(.(T45:0, T46:0)) -> f44_in(T46:0) :|: TRUE

----------------------------------------

(54) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f44_in(.(T45:0, T46:0)) -> f44_in(T46:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(55)
Obligation:

Termination digraph:
Nodes:
(1) f44_in(.(T45:0, T46:0)) -> f44_in(T46:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(56) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   .(x1, x2) -> .(x2)

----------------------------------------

(57)
Obligation:
Rules:
f44_in(.(T46:0)) -> f44_in(T46:0) :|: TRUE

----------------------------------------

(58) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f44_in(VARIABLE)
.(VARIABLE)
Removed predefined arithmetic.
----------------------------------------

(59)
Obligation:
Rules:
f44_in(.(T46:0)) -> f44_in(T46:0)

----------------------------------------

(60) IRSwTToQDPProof (SOUND)
Removed the integers and created a QDP-Problem.
----------------------------------------

(61)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f44_in(.(T46:0)) -> f44_in(T46:0)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(62) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*f44_in(.(T46:0)) -> f44_in(T46:0)
The graph contains the following edges 1 > 1


----------------------------------------

(63)
YES

----------------------------------------

(64)
Obligation:
Rules:
f44_in(T16) -> f47_in(T16) :|: TRUE
f47_out(x) -> f44_out(x) :|: TRUE
f50_out(x1) -> f44_out(x1) :|: TRUE
f44_in(x2) -> f50_in(x2) :|: TRUE
f98_out -> f50_out(x3) :|: TRUE
f50_in(.(T45, T46)) -> f97_in(T46) :|: TRUE
f50_in(x4) -> f98_in :|: TRUE
f97_out(x5) -> f50_out(.(x6, x5)) :|: TRUE
f3_out(x7) -> f42_out(x7) :|: TRUE
f42_in(x8) -> f3_in(x8) :|: TRUE
f5_out(T2) -> f3_out(T2) :|: TRUE
f3_in(x9) -> f5_in(x9) :|: TRUE
f93_out -> f47_out(.(T36, T37)) :|: TRUE
f47_in(x10) -> f94_in :|: TRUE
f94_out -> f47_out(x11) :|: TRUE
f47_in(.(x12, x13)) -> f93_in :|: TRUE
f93_in -> f93_out :|: TRUE
f97_in(x14) -> f40_in(x14) :|: TRUE
f40_out(x15) -> f97_out(x15) :|: TRUE
f5_in(x16) -> f25_in(x16) :|: TRUE
f5_in(x17) -> f29_in(x17) :|: TRUE
f29_out(x18) -> f5_out(x18) :|: TRUE
f25_out(x19) -> f5_out(x19) :|: TRUE
f29_in(x20) -> f35_in(x20) :|: TRUE
f35_out(x21) -> f29_out(x21) :|: TRUE
f29_in(x22) -> f36_in :|: TRUE
f36_out -> f29_out(x23) :|: TRUE
f42_out(x24) -> f35_out(x24) :|: TRUE
f40_out(x25) -> f42_in(x25) :|: TRUE
f35_in(x26) -> f40_in(x26) :|: TRUE
f44_out(x27) -> f40_out(x27) :|: TRUE
f40_in(x28) -> f44_in(x28) :|: TRUE
Start term: f3_in(T2)

----------------------------------------

(65) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f44_in(T16) -> f47_in(T16) :|: TRUE
f47_out(x) -> f44_out(x) :|: TRUE
f50_out(x1) -> f44_out(x1) :|: TRUE
f44_in(x2) -> f50_in(x2) :|: TRUE
f50_in(.(T45, T46)) -> f97_in(T46) :|: TRUE
f97_out(x5) -> f50_out(.(x6, x5)) :|: TRUE
f42_in(x8) -> f3_in(x8) :|: TRUE
f3_in(x9) -> f5_in(x9) :|: TRUE
f93_out -> f47_out(.(T36, T37)) :|: TRUE
f47_in(.(x12, x13)) -> f93_in :|: TRUE
f93_in -> f93_out :|: TRUE
f97_in(x14) -> f40_in(x14) :|: TRUE
f40_out(x15) -> f97_out(x15) :|: TRUE
f5_in(x17) -> f29_in(x17) :|: TRUE
f29_in(x20) -> f35_in(x20) :|: TRUE
f40_out(x25) -> f42_in(x25) :|: TRUE
f35_in(x26) -> f40_in(x26) :|: TRUE
f44_out(x27) -> f40_out(x27) :|: TRUE
f40_in(x28) -> f44_in(x28) :|: TRUE


----------------------------------------

(66)
Obligation:
Rules:
f44_in(T16) -> f47_in(T16) :|: TRUE
f47_out(x) -> f44_out(x) :|: TRUE
f50_out(x1) -> f44_out(x1) :|: TRUE
f44_in(x2) -> f50_in(x2) :|: TRUE
f50_in(.(T45, T46)) -> f97_in(T46) :|: TRUE
f97_out(x5) -> f50_out(.(x6, x5)) :|: TRUE
f42_in(x8) -> f3_in(x8) :|: TRUE
f3_in(x9) -> f5_in(x9) :|: TRUE
f93_out -> f47_out(.(T36, T37)) :|: TRUE
f47_in(.(x12, x13)) -> f93_in :|: TRUE
f93_in -> f93_out :|: TRUE
f97_in(x14) -> f40_in(x14) :|: TRUE
f40_out(x15) -> f97_out(x15) :|: TRUE
f5_in(x17) -> f29_in(x17) :|: TRUE
f29_in(x20) -> f35_in(x20) :|: TRUE
f40_out(x25) -> f42_in(x25) :|: TRUE
f35_in(x26) -> f40_in(x26) :|: TRUE
f44_out(x27) -> f40_out(x27) :|: TRUE
f40_in(x28) -> f44_in(x28) :|: TRUE

----------------------------------------

(67) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(68)
Obligation:
Rules:
f44_in(.(x12:0, x13:0)) -> f40_out(.(T36:0, T37:0)) :|: TRUE
f40_out(x15:0) -> f40_out(.(x6:0, x15:0)) :|: TRUE
f44_in(.(T45:0, T46:0)) -> f44_in(T46:0) :|: TRUE
f40_out(x25:0) -> f44_in(x25:0) :|: TRUE

----------------------------------------

(69) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(70)
Obligation:
Rules:
f44_in(.(x12:0, x13:0)) -> f40_out(.(T36:0, T37:0)) :|: TRUE
f40_out(x15:0) -> f40_out(.(x6:0, x15:0)) :|: TRUE
f44_in(.(T45:0, T46:0)) -> f44_in(T46:0) :|: TRUE
f40_out(x25:0) -> f44_in(x25:0) :|: TRUE

----------------------------------------

(71) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(subset ([]) X1)",
                null
            ],
            [
                "(subset (. X Xs) Ys)",
                "(',' (member X Ys) (subset Xs Ys))"
            ],
            [
                "(member X (. X X2))",
                null
            ],
            [
                "(member X (. X3 Xs))",
                "(member X Xs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "11": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(subset T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "33": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T17 T16) (subset T18 T16))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T16"],
                    "free": [],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(subset T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "34": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "26": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "28": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "180": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T47 T46)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T46"],
                    "free": [],
                    "exprvars": []
                }
            },
            "181": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "174": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(member T17 T16)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(member T17 T16)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T16"],
                    "free": [],
                    "exprvars": []
                }
            },
            "175": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(member T17 T16)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T16"],
                    "free": [],
                    "exprvars": []
                }
            },
            "176": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(member T17 T16)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T16"],
                    "free": [],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "177": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "178": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "179": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(subset T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(subset T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "41": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T17 T16)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T16"],
                    "free": [],
                    "exprvars": []
                }
            },
            "43": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset T23 T16)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T16"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 11,
                "label": "PARALLEL"
            },
            {
                "from": 4,
                "to": 12,
                "label": "PARALLEL"
            },
            {
                "from": 11,
                "to": 26,
                "label": "EVAL with clause\nsubset([], X8).\nand substitutionT1 -> [],\nT2 -> T7,\nX8 -> T7"
            },
            {
                "from": 11,
                "to": 27,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 12,
                "to": 33,
                "label": "EVAL with clause\nsubset(.(X15, X16), X17) :- ','(member(X15, X17), subset(X16, X17)).\nand substitutionX15 -> T17,\nX16 -> T18,\nT1 -> .(T17, T18),\nT2 -> T16,\nX17 -> T16,\nT14 -> T17,\nT15 -> T18"
            },
            {
                "from": 12,
                "to": 34,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 26,
                "to": 28,
                "label": "SUCCESS"
            },
            {
                "from": 33,
                "to": 41,
                "label": "SPLIT 1"
            },
            {
                "from": 33,
                "to": 43,
                "label": "SPLIT 2\nnew knowledge:\nT17 is ground\nT16 is ground\nreplacements:T18 -> T23"
            },
            {
                "from": 41,
                "to": 174,
                "label": "CASE"
            },
            {
                "from": 43,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T23\nT2 -> T16"
            },
            {
                "from": 174,
                "to": 175,
                "label": "PARALLEL"
            },
            {
                "from": 174,
                "to": 176,
                "label": "PARALLEL"
            },
            {
                "from": 175,
                "to": 177,
                "label": "EVAL with clause\nmember(X34, .(X34, X35)).\nand substitutionT17 -> T36,\nX34 -> T36,\nX35 -> T37,\nT16 -> .(T36, T37)"
            },
            {
                "from": 175,
                "to": 178,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 176,
                "to": 180,
                "label": "EVAL with clause\nmember(X42, .(X43, X44)) :- member(X42, X44).\nand substitutionT17 -> T47,\nX42 -> T47,\nX43 -> T45,\nX44 -> T46,\nT16 -> .(T45, T46),\nT44 -> T47"
            },
            {
                "from": 176,
                "to": 181,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 177,
                "to": 179,
                "label": "SUCCESS"
            },
            {
                "from": 180,
                "to": 41,
                "label": "INSTANCE with matching:\nT17 -> T47\nT16 -> T46"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(72)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f1_in(T7) -> f1_out1([])
   f1_in(T16) -> U1(f33_in(T16), T16)
   U1(f33_out1(T17, T18), T16) -> f1_out1(.(T17, T18))
   f41_in(.(T36, T37)) -> f41_out1(T36)
   f41_in(.(T45, T46)) -> U2(f41_in(T46), .(T45, T46))
   U2(f41_out1(T47), .(T45, T46)) -> f41_out1(T47)
   f33_in(T16) -> U3(f41_in(T16), T16)
   U3(f41_out1(T17), T16) -> U4(f1_in(T16), T16, T17)
   U4(f1_out1(T23), T16, T17) -> f33_out1(T17, T23)

Q is empty.

----------------------------------------

(73) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(74)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(T16) -> U1^1(f33_in(T16), T16)
   F1_IN(T16) -> F33_IN(T16)
   F41_IN(.(T45, T46)) -> U2^1(f41_in(T46), .(T45, T46))
   F41_IN(.(T45, T46)) -> F41_IN(T46)
   F33_IN(T16) -> U3^1(f41_in(T16), T16)
   F33_IN(T16) -> F41_IN(T16)
   U3^1(f41_out1(T17), T16) -> U4^1(f1_in(T16), T16, T17)
   U3^1(f41_out1(T17), T16) -> F1_IN(T16)

The TRS R consists of the following rules:

   f1_in(T7) -> f1_out1([])
   f1_in(T16) -> U1(f33_in(T16), T16)
   U1(f33_out1(T17, T18), T16) -> f1_out1(.(T17, T18))
   f41_in(.(T36, T37)) -> f41_out1(T36)
   f41_in(.(T45, T46)) -> U2(f41_in(T46), .(T45, T46))
   U2(f41_out1(T47), .(T45, T46)) -> f41_out1(T47)
   f33_in(T16) -> U3(f41_in(T16), T16)
   U3(f41_out1(T17), T16) -> U4(f1_in(T16), T16, T17)
   U4(f1_out1(T23), T16, T17) -> f33_out1(T17, T23)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(75) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 4 less nodes.
----------------------------------------

(76)
Complex Obligation (AND)

----------------------------------------

(77)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F41_IN(.(T45, T46)) -> F41_IN(T46)

The TRS R consists of the following rules:

   f1_in(T7) -> f1_out1([])
   f1_in(T16) -> U1(f33_in(T16), T16)
   U1(f33_out1(T17, T18), T16) -> f1_out1(.(T17, T18))
   f41_in(.(T36, T37)) -> f41_out1(T36)
   f41_in(.(T45, T46)) -> U2(f41_in(T46), .(T45, T46))
   U2(f41_out1(T47), .(T45, T46)) -> f41_out1(T47)
   f33_in(T16) -> U3(f41_in(T16), T16)
   U3(f41_out1(T17), T16) -> U4(f1_in(T16), T16, T17)
   U4(f1_out1(T23), T16, T17) -> f33_out1(T17, T23)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(78) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(79)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F41_IN(.(T45, T46)) -> F41_IN(T46)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(80) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F41_IN(.(T45, T46)) -> F41_IN(T46)
The graph contains the following edges 1 > 1


----------------------------------------

(81)
YES

----------------------------------------

(82)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(T16) -> F33_IN(T16)
   F33_IN(T16) -> U3^1(f41_in(T16), T16)
   U3^1(f41_out1(T17), T16) -> F1_IN(T16)

The TRS R consists of the following rules:

   f1_in(T7) -> f1_out1([])
   f1_in(T16) -> U1(f33_in(T16), T16)
   U1(f33_out1(T17, T18), T16) -> f1_out1(.(T17, T18))
   f41_in(.(T36, T37)) -> f41_out1(T36)
   f41_in(.(T45, T46)) -> U2(f41_in(T46), .(T45, T46))
   U2(f41_out1(T47), .(T45, T46)) -> f41_out1(T47)
   f33_in(T16) -> U3(f41_in(T16), T16)
   U3(f41_out1(T17), T16) -> U4(f1_in(T16), T16, T17)
   U4(f1_out1(T23), T16, T17) -> f33_out1(T17, T23)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(83) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F33_IN(.(T36, T37)) evaluates to  t =F33_IN(.(T36, T37))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

F33_IN(.(T36, T37)) -> U3^1(f41_in(.(T36, T37)), .(T36, T37))
with rule F33_IN(T16) -> U3^1(f41_in(T16), T16) at position [] and matcher [T16 / .(T36, T37)]

U3^1(f41_in(.(T36, T37)), .(T36, T37)) -> U3^1(f41_out1(T36), .(T36, T37))
with rule f41_in(.(T36', T37')) -> f41_out1(T36') at position [0] and matcher [T36' / T36, T37' / T37]

U3^1(f41_out1(T36), .(T36, T37)) -> F1_IN(.(T36, T37))
with rule U3^1(f41_out1(T17), T16') -> F1_IN(T16') at position [] and matcher [T17 / T36, T16' / .(T36, T37)]

F1_IN(.(T36, T37)) -> F33_IN(.(T36, T37))
with rule F1_IN(T16) -> F33_IN(T16)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(84)
NO

----------------------------------------

(85) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(subset ([]) X1)",
                null
            ],
            [
                "(subset (. X Xs) Ys)",
                "(',' (member X Ys) (subset Xs Ys))"
            ],
            [
                "(member X (. X X2))",
                null
            ],
            [
                "(member X (. X3 Xs))",
                "(member X Xs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "192": {
                "goal": [{
                    "clause": 2,
                    "scope": 3,
                    "term": "(member T37 T36)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T36"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "198": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(member T37 T36)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T36"],
                    "free": [],
                    "exprvars": []
                }
            },
            "199": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "210": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "112": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T11 T10) (subset T12 T10))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": [],
                    "exprvars": []
                }
            },
            "211": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T108 T107) (subset T109 (. T106 T107)))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(subset T1 (. T106 T107))",
                        "(subset ([]) X5)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T106",
                        "T107"
                    ],
                    "free": ["X5"],
                    "exprvars": []
                }
            },
            "113": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "212": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "114": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(',' (member T11 T10) (subset T12 T10))"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(',' (member T11 T10) (subset T12 T10))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": [],
                    "exprvars": []
                }
            },
            "115": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(',' (member T11 T10) (subset T12 T10))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": [],
                    "exprvars": []
                }
            },
            "116": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(',' (member T11 T10) (subset T12 T10))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": [],
                    "exprvars": []
                }
            },
            "117": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset T23 (. T21 T22))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T21",
                        "T22"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "118": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "119": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T37 T36) (subset T38 (. T35 T36)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T35",
                        "T36"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "37": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(subset T1 T4)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T4"],
                    "free": [],
                    "exprvars": []
                }
            },
            "38": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(subset T1 T2)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(subset T1 T2)",
                        "(subset ([]) X5)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": ["X5"],
                    "exprvars": []
                }
            },
            "39": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(subset T1 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T4"],
                    "free": [],
                    "exprvars": []
                }
            },
            "182": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T37 T36)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T36"],
                    "free": [],
                    "exprvars": []
                }
            },
            "183": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset T43 (. T35 T36))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T35",
                        "T36"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "184": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 3,
                        "term": "(member T37 T36)"
                    },
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(member T37 T36)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T36"],
                    "free": [],
                    "exprvars": []
                }
            },
            "120": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "200": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "201": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "202": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T67 T66)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T66"],
                    "free": [],
                    "exprvars": []
                }
            },
            "203": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(subset T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(subset T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "204": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T82 T81) (subset T83 T81))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(subset T1 T81)",
                        "(subset ([]) X5)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T81"],
                    "free": ["X5"],
                    "exprvars": []
                }
            },
            "205": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "206": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 4,
                        "term": "(',' (member T82 T81) (subset T83 T81))"
                    },
                    {
                        "clause": 3,
                        "scope": 4,
                        "term": "(',' (member T82 T81) (subset T83 T81))"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(subset T1 T81)",
                        "(subset ([]) X5)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T81"],
                    "free": ["X5"],
                    "exprvars": []
                }
            },
            "207": {
                "goal": [{
                    "clause": 2,
                    "scope": 4,
                    "term": "(',' (member T82 T81) (subset T83 T81))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(subset T1 T81)",
                        "(subset ([]) X5)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T81"],
                    "free": ["X5"],
                    "exprvars": []
                }
            },
            "208": {
                "goal": [{
                    "clause": 3,
                    "scope": 4,
                    "term": "(',' (member T82 T81) (subset T83 T81))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(subset T1 T81)",
                        "(subset ([]) X5)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T81"],
                    "free": ["X5"],
                    "exprvars": []
                }
            },
            "209": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset T94 (. T92 T93))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(subset T1 (. T92 T93))",
                        "(subset ([]) X5)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T92",
                        "T93"
                    ],
                    "free": ["X5"],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 37,
                "label": "EVAL with clause\nsubset([], X5).\nand substitutionT1 -> [],\nT2 -> T4,\nX5 -> T4"
            },
            {
                "from": 6,
                "to": 38,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 37,
                "to": 39,
                "label": "SUCCESS"
            },
            {
                "from": 38,
                "to": 204,
                "label": "EVAL with clause\nsubset(.(X69, X70), X71) :- ','(member(X69, X71), subset(X70, X71)).\nand substitutionX69 -> T82,\nX70 -> T83,\nT1 -> .(T82, T83),\nT2 -> T81,\nX71 -> T81,\nT79 -> T82,\nT80 -> T83"
            },
            {
                "from": 38,
                "to": 205,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 39,
                "to": 112,
                "label": "EVAL with clause\nsubset(.(X9, X10), X11) :- ','(member(X9, X11), subset(X10, X11)).\nand substitutionX9 -> T11,\nX10 -> T12,\nT1 -> .(T11, T12),\nT4 -> T10,\nX11 -> T10,\nT8 -> T11,\nT9 -> T12"
            },
            {
                "from": 39,
                "to": 113,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 112,
                "to": 114,
                "label": "CASE"
            },
            {
                "from": 114,
                "to": 115,
                "label": "PARALLEL"
            },
            {
                "from": 114,
                "to": 116,
                "label": "PARALLEL"
            },
            {
                "from": 115,
                "to": 117,
                "label": "EVAL with clause\nmember(X20, .(X20, X21)).\nand substitutionT11 -> T21,\nX20 -> T21,\nX21 -> T22,\nT10 -> .(T21, T22),\nT12 -> T23"
            },
            {
                "from": 115,
                "to": 118,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 116,
                "to": 119,
                "label": "EVAL with clause\nmember(X30, .(X31, X32)) :- member(X30, X32).\nand substitutionT11 -> T37,\nX30 -> T37,\nX31 -> T35,\nX32 -> T36,\nT10 -> .(T35, T36),\nT34 -> T37,\nT12 -> T38"
            },
            {
                "from": 116,
                "to": 120,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 117,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T23\nT2 -> .(T21, T22)"
            },
            {
                "from": 119,
                "to": 182,
                "label": "SPLIT 1"
            },
            {
                "from": 119,
                "to": 183,
                "label": "SPLIT 2\nnew knowledge:\nT37 is ground\nT36 is ground\nreplacements:T38 -> T43"
            },
            {
                "from": 182,
                "to": 184,
                "label": "CASE"
            },
            {
                "from": 183,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T43\nT2 -> .(T35, T36)"
            },
            {
                "from": 184,
                "to": 192,
                "label": "PARALLEL"
            },
            {
                "from": 184,
                "to": 198,
                "label": "PARALLEL"
            },
            {
                "from": 192,
                "to": 199,
                "label": "EVAL with clause\nmember(X49, .(X49, X50)).\nand substitutionT37 -> T56,\nX49 -> T56,\nX50 -> T57,\nT36 -> .(T56, T57)"
            },
            {
                "from": 192,
                "to": 200,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 198,
                "to": 202,
                "label": "EVAL with clause\nmember(X57, .(X58, X59)) :- member(X57, X59).\nand substitutionT37 -> T67,\nX57 -> T67,\nX58 -> T65,\nX59 -> T66,\nT36 -> .(T65, T66),\nT64 -> T67"
            },
            {
                "from": 198,
                "to": 203,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 199,
                "to": 201,
                "label": "SUCCESS"
            },
            {
                "from": 202,
                "to": 182,
                "label": "INSTANCE with matching:\nT37 -> T67\nT36 -> T66"
            },
            {
                "from": 204,
                "to": 206,
                "label": "CASE"
            },
            {
                "from": 206,
                "to": 207,
                "label": "PARALLEL"
            },
            {
                "from": 206,
                "to": 208,
                "label": "PARALLEL"
            },
            {
                "from": 207,
                "to": 209,
                "label": "EVAL with clause\nmember(X80, .(X80, X81)).\nand substitutionT82 -> T92,\nX80 -> T92,\nX81 -> T93,\nT81 -> .(T92, T93),\nT83 -> T94"
            },
            {
                "from": 207,
                "to": 210,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 208,
                "to": 211,
                "label": "EVAL with clause\nmember(X90, .(X91, X92)) :- member(X90, X92).\nand substitutionT82 -> T108,\nX90 -> T108,\nX91 -> T106,\nX92 -> T107,\nT81 -> .(T106, T107),\nT105 -> T108,\nT83 -> T109"
            },
            {
                "from": 208,
                "to": 212,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 209,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T94\nT2 -> .(T92, T93)"
            },
            {
                "from": 211,
                "to": 119,
                "label": "INSTANCE with matching:\nT37 -> T108\nT36 -> T107\nT38 -> T109\nT35 -> T106"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(86)
Obligation:
Triples:

memberC(X1, .(X2, X3)) :- memberC(X1, X3).
pB(X1, X2, X3, X4) :- memberC(X1, X2).
pB(X1, X2, X3, X4) :- ','(membercC(X1, X2), subsetA(X3, .(X4, X2))).
subsetA(.(X1, X2), .(X1, X3)) :- subsetA(X2, .(X1, X3)).
subsetA(.(X1, X2), .(X3, X4)) :- pB(X1, X4, X2, X3).
subsetA(.(X1, X2), .(X1, X3)) :- subsetA(X2, .(X1, X3)).
subsetA(.(X1, X2), .(X3, X4)) :- pB(X1, X4, X2, X3).

Clauses:

subsetcA([], X1).
subsetcA(.(X1, X2), .(X1, X3)) :- subsetcA(X2, .(X1, X3)).
subsetcA(.(X1, X2), .(X3, X4)) :- qcB(X1, X4, X2, X3).
subsetcA(.(X1, X2), .(X1, X3)) :- subsetcA(X2, .(X1, X3)).
subsetcA(.(X1, X2), .(X3, X4)) :- qcB(X1, X4, X2, X3).
membercC(X1, .(X1, X2)).
membercC(X1, .(X2, X3)) :- membercC(X1, X3).
qcB(X1, X2, X3, X4) :- ','(membercC(X1, X2), subsetcA(X3, .(X4, X2))).

Afs:

subsetA(x1, x2)  =  subsetA(x2)


----------------------------------------

(87) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

subsetA_in_2: (f,b)

pB_in_4: (f,b,f,b)

memberC_in_2: (f,b)

membercC_in_2: (f,b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   SUBSETA_IN_AG(.(X1, X2), .(X1, X3)) -> U5_AG(X1, X2, X3, subsetA_in_ag(X2, .(X1, X3)))
   SUBSETA_IN_AG(.(X1, X2), .(X1, X3)) -> SUBSETA_IN_AG(X2, .(X1, X3))
   SUBSETA_IN_AG(.(X1, X2), .(X3, X4)) -> U6_AG(X1, X2, X3, X4, pB_in_agag(X1, X4, X2, X3))
   SUBSETA_IN_AG(.(X1, X2), .(X3, X4)) -> PB_IN_AGAG(X1, X4, X2, X3)
   PB_IN_AGAG(X1, X2, X3, X4) -> U2_AGAG(X1, X2, X3, X4, memberC_in_ag(X1, X2))
   PB_IN_AGAG(X1, X2, X3, X4) -> MEMBERC_IN_AG(X1, X2)
   MEMBERC_IN_AG(X1, .(X2, X3)) -> U1_AG(X1, X2, X3, memberC_in_ag(X1, X3))
   MEMBERC_IN_AG(X1, .(X2, X3)) -> MEMBERC_IN_AG(X1, X3)
   PB_IN_AGAG(X1, X2, X3, X4) -> U3_AGAG(X1, X2, X3, X4, membercC_in_ag(X1, X2))
   U3_AGAG(X1, X2, X3, X4, membercC_out_ag(X1, X2)) -> U4_AGAG(X1, X2, X3, X4, subsetA_in_ag(X3, .(X4, X2)))
   U3_AGAG(X1, X2, X3, X4, membercC_out_ag(X1, X2)) -> SUBSETA_IN_AG(X3, .(X4, X2))

The TRS R consists of the following rules:

   membercC_in_ag(X1, .(X1, X2)) -> membercC_out_ag(X1, .(X1, X2))
   membercC_in_ag(X1, .(X2, X3)) -> U10_ag(X1, X2, X3, membercC_in_ag(X1, X3))
   U10_ag(X1, X2, X3, membercC_out_ag(X1, X3)) -> membercC_out_ag(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
subsetA_in_ag(x1, x2)  =  subsetA_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

pB_in_agag(x1, x2, x3, x4)  =  pB_in_agag(x2, x4)

memberC_in_ag(x1, x2)  =  memberC_in_ag(x2)

membercC_in_ag(x1, x2)  =  membercC_in_ag(x2)

membercC_out_ag(x1, x2)  =  membercC_out_ag(x1, x2)

U10_ag(x1, x2, x3, x4)  =  U10_ag(x2, x3, x4)

SUBSETA_IN_AG(x1, x2)  =  SUBSETA_IN_AG(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x1, x3, x4)

U6_AG(x1, x2, x3, x4, x5)  =  U6_AG(x3, x4, x5)

PB_IN_AGAG(x1, x2, x3, x4)  =  PB_IN_AGAG(x2, x4)

U2_AGAG(x1, x2, x3, x4, x5)  =  U2_AGAG(x2, x4, x5)

MEMBERC_IN_AG(x1, x2)  =  MEMBERC_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x2, x3, x4)

U3_AGAG(x1, x2, x3, x4, x5)  =  U3_AGAG(x2, x4, x5)

U4_AGAG(x1, x2, x3, x4, x5)  =  U4_AGAG(x1, x2, x4, x5)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(88)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSETA_IN_AG(.(X1, X2), .(X1, X3)) -> U5_AG(X1, X2, X3, subsetA_in_ag(X2, .(X1, X3)))
   SUBSETA_IN_AG(.(X1, X2), .(X1, X3)) -> SUBSETA_IN_AG(X2, .(X1, X3))
   SUBSETA_IN_AG(.(X1, X2), .(X3, X4)) -> U6_AG(X1, X2, X3, X4, pB_in_agag(X1, X4, X2, X3))
   SUBSETA_IN_AG(.(X1, X2), .(X3, X4)) -> PB_IN_AGAG(X1, X4, X2, X3)
   PB_IN_AGAG(X1, X2, X3, X4) -> U2_AGAG(X1, X2, X3, X4, memberC_in_ag(X1, X2))
   PB_IN_AGAG(X1, X2, X3, X4) -> MEMBERC_IN_AG(X1, X2)
   MEMBERC_IN_AG(X1, .(X2, X3)) -> U1_AG(X1, X2, X3, memberC_in_ag(X1, X3))
   MEMBERC_IN_AG(X1, .(X2, X3)) -> MEMBERC_IN_AG(X1, X3)
   PB_IN_AGAG(X1, X2, X3, X4) -> U3_AGAG(X1, X2, X3, X4, membercC_in_ag(X1, X2))
   U3_AGAG(X1, X2, X3, X4, membercC_out_ag(X1, X2)) -> U4_AGAG(X1, X2, X3, X4, subsetA_in_ag(X3, .(X4, X2)))
   U3_AGAG(X1, X2, X3, X4, membercC_out_ag(X1, X2)) -> SUBSETA_IN_AG(X3, .(X4, X2))

The TRS R consists of the following rules:

   membercC_in_ag(X1, .(X1, X2)) -> membercC_out_ag(X1, .(X1, X2))
   membercC_in_ag(X1, .(X2, X3)) -> U10_ag(X1, X2, X3, membercC_in_ag(X1, X3))
   U10_ag(X1, X2, X3, membercC_out_ag(X1, X3)) -> membercC_out_ag(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
subsetA_in_ag(x1, x2)  =  subsetA_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

pB_in_agag(x1, x2, x3, x4)  =  pB_in_agag(x2, x4)

memberC_in_ag(x1, x2)  =  memberC_in_ag(x2)

membercC_in_ag(x1, x2)  =  membercC_in_ag(x2)

membercC_out_ag(x1, x2)  =  membercC_out_ag(x1, x2)

U10_ag(x1, x2, x3, x4)  =  U10_ag(x2, x3, x4)

SUBSETA_IN_AG(x1, x2)  =  SUBSETA_IN_AG(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x1, x3, x4)

U6_AG(x1, x2, x3, x4, x5)  =  U6_AG(x3, x4, x5)

PB_IN_AGAG(x1, x2, x3, x4)  =  PB_IN_AGAG(x2, x4)

U2_AGAG(x1, x2, x3, x4, x5)  =  U2_AGAG(x2, x4, x5)

MEMBERC_IN_AG(x1, x2)  =  MEMBERC_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x2, x3, x4)

U3_AGAG(x1, x2, x3, x4, x5)  =  U3_AGAG(x2, x4, x5)

U4_AGAG(x1, x2, x3, x4, x5)  =  U4_AGAG(x1, x2, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(89) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(90)
Complex Obligation (AND)

----------------------------------------

(91)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERC_IN_AG(X1, .(X2, X3)) -> MEMBERC_IN_AG(X1, X3)

The TRS R consists of the following rules:

   membercC_in_ag(X1, .(X1, X2)) -> membercC_out_ag(X1, .(X1, X2))
   membercC_in_ag(X1, .(X2, X3)) -> U10_ag(X1, X2, X3, membercC_in_ag(X1, X3))
   U10_ag(X1, X2, X3, membercC_out_ag(X1, X3)) -> membercC_out_ag(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

membercC_in_ag(x1, x2)  =  membercC_in_ag(x2)

membercC_out_ag(x1, x2)  =  membercC_out_ag(x1, x2)

U10_ag(x1, x2, x3, x4)  =  U10_ag(x2, x3, x4)

MEMBERC_IN_AG(x1, x2)  =  MEMBERC_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(92) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(93)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERC_IN_AG(X1, .(X2, X3)) -> MEMBERC_IN_AG(X1, X3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBERC_IN_AG(x1, x2)  =  MEMBERC_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(94) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(95)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERC_IN_AG(.(X2, X3)) -> MEMBERC_IN_AG(X3)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(96) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBERC_IN_AG(.(X2, X3)) -> MEMBERC_IN_AG(X3)
The graph contains the following edges 1 > 1


----------------------------------------

(97)
YES

----------------------------------------

(98)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSETA_IN_AG(.(X1, X2), .(X3, X4)) -> PB_IN_AGAG(X1, X4, X2, X3)
   PB_IN_AGAG(X1, X2, X3, X4) -> U3_AGAG(X1, X2, X3, X4, membercC_in_ag(X1, X2))
   U3_AGAG(X1, X2, X3, X4, membercC_out_ag(X1, X2)) -> SUBSETA_IN_AG(X3, .(X4, X2))
   SUBSETA_IN_AG(.(X1, X2), .(X1, X3)) -> SUBSETA_IN_AG(X2, .(X1, X3))

The TRS R consists of the following rules:

   membercC_in_ag(X1, .(X1, X2)) -> membercC_out_ag(X1, .(X1, X2))
   membercC_in_ag(X1, .(X2, X3)) -> U10_ag(X1, X2, X3, membercC_in_ag(X1, X3))
   U10_ag(X1, X2, X3, membercC_out_ag(X1, X3)) -> membercC_out_ag(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

membercC_in_ag(x1, x2)  =  membercC_in_ag(x2)

membercC_out_ag(x1, x2)  =  membercC_out_ag(x1, x2)

U10_ag(x1, x2, x3, x4)  =  U10_ag(x2, x3, x4)

SUBSETA_IN_AG(x1, x2)  =  SUBSETA_IN_AG(x2)

PB_IN_AGAG(x1, x2, x3, x4)  =  PB_IN_AGAG(x2, x4)

U3_AGAG(x1, x2, x3, x4, x5)  =  U3_AGAG(x2, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(99) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(100)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUBSETA_IN_AG(.(X3, X4)) -> PB_IN_AGAG(X4, X3)
   PB_IN_AGAG(X2, X4) -> U3_AGAG(X2, X4, membercC_in_ag(X2))
   U3_AGAG(X2, X4, membercC_out_ag(X1, X2)) -> SUBSETA_IN_AG(.(X4, X2))
   SUBSETA_IN_AG(.(X1, X3)) -> SUBSETA_IN_AG(.(X1, X3))

The TRS R consists of the following rules:

   membercC_in_ag(.(X1, X2)) -> membercC_out_ag(X1, .(X1, X2))
   membercC_in_ag(.(X2, X3)) -> U10_ag(X2, X3, membercC_in_ag(X3))
   U10_ag(X2, X3, membercC_out_ag(X1, X3)) -> membercC_out_ag(X1, .(X2, X3))

The set Q consists of the following terms:

   membercC_in_ag(x0)
   U10_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(101) TransformationProof (SOUND)
By narrowing [LPAR04] the rule PB_IN_AGAG(X2, X4) -> U3_AGAG(X2, X4, membercC_in_ag(X2)) at position [2] we obtained the following new rules [LPAR04]:

   (PB_IN_AGAG(.(x0, x1), y1) -> U3_AGAG(.(x0, x1), y1, membercC_out_ag(x0, .(x0, x1))),PB_IN_AGAG(.(x0, x1), y1) -> U3_AGAG(.(x0, x1), y1, membercC_out_ag(x0, .(x0, x1))))
   (PB_IN_AGAG(.(x0, x1), y1) -> U3_AGAG(.(x0, x1), y1, U10_ag(x0, x1, membercC_in_ag(x1))),PB_IN_AGAG(.(x0, x1), y1) -> U3_AGAG(.(x0, x1), y1, U10_ag(x0, x1, membercC_in_ag(x1))))


----------------------------------------

(102)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUBSETA_IN_AG(.(X3, X4)) -> PB_IN_AGAG(X4, X3)
   U3_AGAG(X2, X4, membercC_out_ag(X1, X2)) -> SUBSETA_IN_AG(.(X4, X2))
   SUBSETA_IN_AG(.(X1, X3)) -> SUBSETA_IN_AG(.(X1, X3))
   PB_IN_AGAG(.(x0, x1), y1) -> U3_AGAG(.(x0, x1), y1, membercC_out_ag(x0, .(x0, x1)))
   PB_IN_AGAG(.(x0, x1), y1) -> U3_AGAG(.(x0, x1), y1, U10_ag(x0, x1, membercC_in_ag(x1)))

The TRS R consists of the following rules:

   membercC_in_ag(.(X1, X2)) -> membercC_out_ag(X1, .(X1, X2))
   membercC_in_ag(.(X2, X3)) -> U10_ag(X2, X3, membercC_in_ag(X3))
   U10_ag(X2, X3, membercC_out_ag(X1, X3)) -> membercC_out_ag(X1, .(X2, X3))

The set Q consists of the following terms:

   membercC_in_ag(x0)
   U10_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(103) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U3_AGAG(X2, X4, membercC_out_ag(X1, X2)) -> SUBSETA_IN_AG(.(X4, X2)) we obtained the following new rules [LPAR04]:

   (U3_AGAG(.(z0, z1), z2, membercC_out_ag(z0, .(z0, z1))) -> SUBSETA_IN_AG(.(z2, .(z0, z1))),U3_AGAG(.(z0, z1), z2, membercC_out_ag(z0, .(z0, z1))) -> SUBSETA_IN_AG(.(z2, .(z0, z1))))
   (U3_AGAG(.(z0, z1), z2, membercC_out_ag(x2, .(z0, z1))) -> SUBSETA_IN_AG(.(z2, .(z0, z1))),U3_AGAG(.(z0, z1), z2, membercC_out_ag(x2, .(z0, z1))) -> SUBSETA_IN_AG(.(z2, .(z0, z1))))


----------------------------------------

(104)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUBSETA_IN_AG(.(X3, X4)) -> PB_IN_AGAG(X4, X3)
   SUBSETA_IN_AG(.(X1, X3)) -> SUBSETA_IN_AG(.(X1, X3))
   PB_IN_AGAG(.(x0, x1), y1) -> U3_AGAG(.(x0, x1), y1, membercC_out_ag(x0, .(x0, x1)))
   PB_IN_AGAG(.(x0, x1), y1) -> U3_AGAG(.(x0, x1), y1, U10_ag(x0, x1, membercC_in_ag(x1)))
   U3_AGAG(.(z0, z1), z2, membercC_out_ag(z0, .(z0, z1))) -> SUBSETA_IN_AG(.(z2, .(z0, z1)))
   U3_AGAG(.(z0, z1), z2, membercC_out_ag(x2, .(z0, z1))) -> SUBSETA_IN_AG(.(z2, .(z0, z1)))

The TRS R consists of the following rules:

   membercC_in_ag(.(X1, X2)) -> membercC_out_ag(X1, .(X1, X2))
   membercC_in_ag(.(X2, X3)) -> U10_ag(X2, X3, membercC_in_ag(X3))
   U10_ag(X2, X3, membercC_out_ag(X1, X3)) -> membercC_out_ag(X1, .(X2, X3))

The set Q consists of the following terms:

   membercC_in_ag(x0)
   U10_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(105) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule SUBSETA_IN_AG(.(X3, X4)) -> PB_IN_AGAG(X4, X3) we obtained the following new rules [LPAR04]:

   (SUBSETA_IN_AG(.(x0, .(y_0, y_1))) -> PB_IN_AGAG(.(y_0, y_1), x0),SUBSETA_IN_AG(.(x0, .(y_0, y_1))) -> PB_IN_AGAG(.(y_0, y_1), x0))


----------------------------------------

(106)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUBSETA_IN_AG(.(X1, X3)) -> SUBSETA_IN_AG(.(X1, X3))
   PB_IN_AGAG(.(x0, x1), y1) -> U3_AGAG(.(x0, x1), y1, membercC_out_ag(x0, .(x0, x1)))
   PB_IN_AGAG(.(x0, x1), y1) -> U3_AGAG(.(x0, x1), y1, U10_ag(x0, x1, membercC_in_ag(x1)))
   U3_AGAG(.(z0, z1), z2, membercC_out_ag(z0, .(z0, z1))) -> SUBSETA_IN_AG(.(z2, .(z0, z1)))
   U3_AGAG(.(z0, z1), z2, membercC_out_ag(x2, .(z0, z1))) -> SUBSETA_IN_AG(.(z2, .(z0, z1)))
   SUBSETA_IN_AG(.(x0, .(y_0, y_1))) -> PB_IN_AGAG(.(y_0, y_1), x0)

The TRS R consists of the following rules:

   membercC_in_ag(.(X1, X2)) -> membercC_out_ag(X1, .(X1, X2))
   membercC_in_ag(.(X2, X3)) -> U10_ag(X2, X3, membercC_in_ag(X3))
   U10_ag(X2, X3, membercC_out_ag(X1, X3)) -> membercC_out_ag(X1, .(X2, X3))

The set Q consists of the following terms:

   membercC_in_ag(x0)
   U10_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.