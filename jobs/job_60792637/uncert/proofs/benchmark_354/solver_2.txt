YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/G7Eye.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

p(g,g,g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) PiDPToQDPProof [SOUND, 0 ms]
(10) QDP
(11) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Clauses:

p(M, N, s(R), RES) :- p(M, R, N, RES).
p(M, s(N), R, RES) :- p(R, N, M, RES).
p(M, X1, X2, M).


Query: p(g,g,g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

p_in_4: (b,b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_ggga(M, N, s(R), RES) -> U1_ggga(M, N, R, RES, p_in_ggga(M, R, N, RES))
   p_in_ggga(M, s(N), R, RES) -> U2_ggga(M, N, R, RES, p_in_ggga(R, N, M, RES))
   p_in_ggga(M, X1, X2, M) -> p_out_ggga(M, X1, X2, M)
   U2_ggga(M, N, R, RES, p_out_ggga(R, N, M, RES)) -> p_out_ggga(M, s(N), R, RES)
   U1_ggga(M, N, R, RES, p_out_ggga(M, R, N, RES)) -> p_out_ggga(M, N, s(R), RES)

The argument filtering Pi contains the following mapping:
p_in_ggga(x1, x2, x3, x4)  =  p_in_ggga(x1, x2, x3)

s(x1)  =  s(x1)

U1_ggga(x1, x2, x3, x4, x5)  =  U1_ggga(x5)

U2_ggga(x1, x2, x3, x4, x5)  =  U2_ggga(x5)

p_out_ggga(x1, x2, x3, x4)  =  p_out_ggga(x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_ggga(M, N, s(R), RES) -> U1_ggga(M, N, R, RES, p_in_ggga(M, R, N, RES))
   p_in_ggga(M, s(N), R, RES) -> U2_ggga(M, N, R, RES, p_in_ggga(R, N, M, RES))
   p_in_ggga(M, X1, X2, M) -> p_out_ggga(M, X1, X2, M)
   U2_ggga(M, N, R, RES, p_out_ggga(R, N, M, RES)) -> p_out_ggga(M, s(N), R, RES)
   U1_ggga(M, N, R, RES, p_out_ggga(M, R, N, RES)) -> p_out_ggga(M, N, s(R), RES)

The argument filtering Pi contains the following mapping:
p_in_ggga(x1, x2, x3, x4)  =  p_in_ggga(x1, x2, x3)

s(x1)  =  s(x1)

U1_ggga(x1, x2, x3, x4, x5)  =  U1_ggga(x5)

U2_ggga(x1, x2, x3, x4, x5)  =  U2_ggga(x5)

p_out_ggga(x1, x2, x3, x4)  =  p_out_ggga(x4)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GGGA(M, N, s(R), RES) -> U1_GGGA(M, N, R, RES, p_in_ggga(M, R, N, RES))
   P_IN_GGGA(M, N, s(R), RES) -> P_IN_GGGA(M, R, N, RES)
   P_IN_GGGA(M, s(N), R, RES) -> U2_GGGA(M, N, R, RES, p_in_ggga(R, N, M, RES))
   P_IN_GGGA(M, s(N), R, RES) -> P_IN_GGGA(R, N, M, RES)

The TRS R consists of the following rules:

   p_in_ggga(M, N, s(R), RES) -> U1_ggga(M, N, R, RES, p_in_ggga(M, R, N, RES))
   p_in_ggga(M, s(N), R, RES) -> U2_ggga(M, N, R, RES, p_in_ggga(R, N, M, RES))
   p_in_ggga(M, X1, X2, M) -> p_out_ggga(M, X1, X2, M)
   U2_ggga(M, N, R, RES, p_out_ggga(R, N, M, RES)) -> p_out_ggga(M, s(N), R, RES)
   U1_ggga(M, N, R, RES, p_out_ggga(M, R, N, RES)) -> p_out_ggga(M, N, s(R), RES)

The argument filtering Pi contains the following mapping:
p_in_ggga(x1, x2, x3, x4)  =  p_in_ggga(x1, x2, x3)

s(x1)  =  s(x1)

U1_ggga(x1, x2, x3, x4, x5)  =  U1_ggga(x5)

U2_ggga(x1, x2, x3, x4, x5)  =  U2_ggga(x5)

p_out_ggga(x1, x2, x3, x4)  =  p_out_ggga(x4)

P_IN_GGGA(x1, x2, x3, x4)  =  P_IN_GGGA(x1, x2, x3)

U1_GGGA(x1, x2, x3, x4, x5)  =  U1_GGGA(x5)

U2_GGGA(x1, x2, x3, x4, x5)  =  U2_GGGA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GGGA(M, N, s(R), RES) -> U1_GGGA(M, N, R, RES, p_in_ggga(M, R, N, RES))
   P_IN_GGGA(M, N, s(R), RES) -> P_IN_GGGA(M, R, N, RES)
   P_IN_GGGA(M, s(N), R, RES) -> U2_GGGA(M, N, R, RES, p_in_ggga(R, N, M, RES))
   P_IN_GGGA(M, s(N), R, RES) -> P_IN_GGGA(R, N, M, RES)

The TRS R consists of the following rules:

   p_in_ggga(M, N, s(R), RES) -> U1_ggga(M, N, R, RES, p_in_ggga(M, R, N, RES))
   p_in_ggga(M, s(N), R, RES) -> U2_ggga(M, N, R, RES, p_in_ggga(R, N, M, RES))
   p_in_ggga(M, X1, X2, M) -> p_out_ggga(M, X1, X2, M)
   U2_ggga(M, N, R, RES, p_out_ggga(R, N, M, RES)) -> p_out_ggga(M, s(N), R, RES)
   U1_ggga(M, N, R, RES, p_out_ggga(M, R, N, RES)) -> p_out_ggga(M, N, s(R), RES)

The argument filtering Pi contains the following mapping:
p_in_ggga(x1, x2, x3, x4)  =  p_in_ggga(x1, x2, x3)

s(x1)  =  s(x1)

U1_ggga(x1, x2, x3, x4, x5)  =  U1_ggga(x5)

U2_ggga(x1, x2, x3, x4, x5)  =  U2_ggga(x5)

p_out_ggga(x1, x2, x3, x4)  =  p_out_ggga(x4)

P_IN_GGGA(x1, x2, x3, x4)  =  P_IN_GGGA(x1, x2, x3)

U1_GGGA(x1, x2, x3, x4, x5)  =  U1_GGGA(x5)

U2_GGGA(x1, x2, x3, x4, x5)  =  U2_GGGA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GGGA(M, s(N), R, RES) -> P_IN_GGGA(R, N, M, RES)
   P_IN_GGGA(M, N, s(R), RES) -> P_IN_GGGA(M, R, N, RES)

The TRS R consists of the following rules:

   p_in_ggga(M, N, s(R), RES) -> U1_ggga(M, N, R, RES, p_in_ggga(M, R, N, RES))
   p_in_ggga(M, s(N), R, RES) -> U2_ggga(M, N, R, RES, p_in_ggga(R, N, M, RES))
   p_in_ggga(M, X1, X2, M) -> p_out_ggga(M, X1, X2, M)
   U2_ggga(M, N, R, RES, p_out_ggga(R, N, M, RES)) -> p_out_ggga(M, s(N), R, RES)
   U1_ggga(M, N, R, RES, p_out_ggga(M, R, N, RES)) -> p_out_ggga(M, N, s(R), RES)

The argument filtering Pi contains the following mapping:
p_in_ggga(x1, x2, x3, x4)  =  p_in_ggga(x1, x2, x3)

s(x1)  =  s(x1)

U1_ggga(x1, x2, x3, x4, x5)  =  U1_ggga(x5)

U2_ggga(x1, x2, x3, x4, x5)  =  U2_ggga(x5)

p_out_ggga(x1, x2, x3, x4)  =  p_out_ggga(x4)

P_IN_GGGA(x1, x2, x3, x4)  =  P_IN_GGGA(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GGGA(M, s(N), R, RES) -> P_IN_GGGA(R, N, M, RES)
   P_IN_GGGA(M, N, s(R), RES) -> P_IN_GGGA(M, R, N, RES)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

P_IN_GGGA(x1, x2, x3, x4)  =  P_IN_GGGA(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGA(M, s(N), R) -> P_IN_GGGA(R, N, M)
   P_IN_GGGA(M, N, s(R)) -> P_IN_GGGA(M, R, N)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*P_IN_GGGA(M, s(N), R) -> P_IN_GGGA(R, N, M)
The graph contains the following edges 3 >= 1, 2 > 2, 1 >= 3


*P_IN_GGGA(M, N, s(R)) -> P_IN_GGGA(M, R, N)
The graph contains the following edges 1 >= 1, 3 > 2, 2 >= 3


----------------------------------------

(12)
YES
