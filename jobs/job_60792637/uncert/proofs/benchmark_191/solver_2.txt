YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/hK2yO.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

goal(g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 5 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Clauses:

tree(nil).
tree(node(L, X, R)) :- ','(tree(L), tree(R)).
s2t(s(X), node(T, Y, T)) :- s2t(X, T).
s2t(s(X), node(nil, Y, T)) :- s2t(X, T).
s2t(s(X), node(T, Y, nil)) :- s2t(X, T).
s2t(s(X), node(nil, Y, nil)).
s2t(0, nil).
goal(X) :- ','(s2t(X, T), tree(T)).


Query: goal(g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

goal_in_1: (b)

s2t_in_2: (b,f)

tree_in_1: (b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   goal_in_g(X) -> U6_g(X, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, T)) -> U3_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, T)) -> U4_ga(X, Y, T, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, nil)) -> U5_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, nil)) -> s2t_out_ga(s(X), node(nil, Y, nil))
   s2t_in_ga(0, nil) -> s2t_out_ga(0, nil)
   U5_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, nil))
   U4_ga(X, Y, T, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(nil, Y, T))
   U3_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, T))
   U6_g(X, s2t_out_ga(X, T)) -> U7_g(X, tree_in_g(T))
   tree_in_g(nil) -> tree_out_g(nil)
   tree_in_g(node(L, X, R)) -> U1_g(L, X, R, tree_in_g(L))
   U1_g(L, X, R, tree_out_g(L)) -> U2_g(L, X, R, tree_in_g(R))
   U2_g(L, X, R, tree_out_g(R)) -> tree_out_g(node(L, X, R))
   U7_g(X, tree_out_g(T)) -> goal_out_g(X)

The argument filtering Pi contains the following mapping:
goal_in_g(x1)  =  goal_in_g(x1)

U6_g(x1, x2)  =  U6_g(x2)

s2t_in_ga(x1, x2)  =  s2t_in_ga(x1)

s(x1)  =  s(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

s2t_out_ga(x1, x2)  =  s2t_out_ga(x2)

node(x1, x2, x3)  =  node(x1, x3)

0  =  0

U7_g(x1, x2)  =  U7_g(x2)

tree_in_g(x1)  =  tree_in_g(x1)

nil  =  nil

tree_out_g(x1)  =  tree_out_g

U1_g(x1, x2, x3, x4)  =  U1_g(x3, x4)

U2_g(x1, x2, x3, x4)  =  U2_g(x4)

goal_out_g(x1)  =  goal_out_g





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   goal_in_g(X) -> U6_g(X, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, T)) -> U3_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, T)) -> U4_ga(X, Y, T, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, nil)) -> U5_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, nil)) -> s2t_out_ga(s(X), node(nil, Y, nil))
   s2t_in_ga(0, nil) -> s2t_out_ga(0, nil)
   U5_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, nil))
   U4_ga(X, Y, T, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(nil, Y, T))
   U3_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, T))
   U6_g(X, s2t_out_ga(X, T)) -> U7_g(X, tree_in_g(T))
   tree_in_g(nil) -> tree_out_g(nil)
   tree_in_g(node(L, X, R)) -> U1_g(L, X, R, tree_in_g(L))
   U1_g(L, X, R, tree_out_g(L)) -> U2_g(L, X, R, tree_in_g(R))
   U2_g(L, X, R, tree_out_g(R)) -> tree_out_g(node(L, X, R))
   U7_g(X, tree_out_g(T)) -> goal_out_g(X)

The argument filtering Pi contains the following mapping:
goal_in_g(x1)  =  goal_in_g(x1)

U6_g(x1, x2)  =  U6_g(x2)

s2t_in_ga(x1, x2)  =  s2t_in_ga(x1)

s(x1)  =  s(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

s2t_out_ga(x1, x2)  =  s2t_out_ga(x2)

node(x1, x2, x3)  =  node(x1, x3)

0  =  0

U7_g(x1, x2)  =  U7_g(x2)

tree_in_g(x1)  =  tree_in_g(x1)

nil  =  nil

tree_out_g(x1)  =  tree_out_g

U1_g(x1, x2, x3, x4)  =  U1_g(x3, x4)

U2_g(x1, x2, x3, x4)  =  U2_g(x4)

goal_out_g(x1)  =  goal_out_g



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   GOAL_IN_G(X) -> U6_G(X, s2t_in_ga(X, T))
   GOAL_IN_G(X) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, T)) -> U3_GA(X, T, Y, s2t_in_ga(X, T))
   S2T_IN_GA(s(X), node(T, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(nil, Y, T)) -> U4_GA(X, Y, T, s2t_in_ga(X, T))
   S2T_IN_GA(s(X), node(nil, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, nil)) -> U5_GA(X, T, Y, s2t_in_ga(X, T))
   S2T_IN_GA(s(X), node(T, Y, nil)) -> S2T_IN_GA(X, T)
   U6_G(X, s2t_out_ga(X, T)) -> U7_G(X, tree_in_g(T))
   U6_G(X, s2t_out_ga(X, T)) -> TREE_IN_G(T)
   TREE_IN_G(node(L, X, R)) -> U1_G(L, X, R, tree_in_g(L))
   TREE_IN_G(node(L, X, R)) -> TREE_IN_G(L)
   U1_G(L, X, R, tree_out_g(L)) -> U2_G(L, X, R, tree_in_g(R))
   U1_G(L, X, R, tree_out_g(L)) -> TREE_IN_G(R)

The TRS R consists of the following rules:

   goal_in_g(X) -> U6_g(X, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, T)) -> U3_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, T)) -> U4_ga(X, Y, T, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, nil)) -> U5_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, nil)) -> s2t_out_ga(s(X), node(nil, Y, nil))
   s2t_in_ga(0, nil) -> s2t_out_ga(0, nil)
   U5_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, nil))
   U4_ga(X, Y, T, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(nil, Y, T))
   U3_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, T))
   U6_g(X, s2t_out_ga(X, T)) -> U7_g(X, tree_in_g(T))
   tree_in_g(nil) -> tree_out_g(nil)
   tree_in_g(node(L, X, R)) -> U1_g(L, X, R, tree_in_g(L))
   U1_g(L, X, R, tree_out_g(L)) -> U2_g(L, X, R, tree_in_g(R))
   U2_g(L, X, R, tree_out_g(R)) -> tree_out_g(node(L, X, R))
   U7_g(X, tree_out_g(T)) -> goal_out_g(X)

The argument filtering Pi contains the following mapping:
goal_in_g(x1)  =  goal_in_g(x1)

U6_g(x1, x2)  =  U6_g(x2)

s2t_in_ga(x1, x2)  =  s2t_in_ga(x1)

s(x1)  =  s(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

s2t_out_ga(x1, x2)  =  s2t_out_ga(x2)

node(x1, x2, x3)  =  node(x1, x3)

0  =  0

U7_g(x1, x2)  =  U7_g(x2)

tree_in_g(x1)  =  tree_in_g(x1)

nil  =  nil

tree_out_g(x1)  =  tree_out_g

U1_g(x1, x2, x3, x4)  =  U1_g(x3, x4)

U2_g(x1, x2, x3, x4)  =  U2_g(x4)

goal_out_g(x1)  =  goal_out_g

GOAL_IN_G(x1)  =  GOAL_IN_G(x1)

U6_G(x1, x2)  =  U6_G(x2)

S2T_IN_GA(x1, x2)  =  S2T_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

U4_GA(x1, x2, x3, x4)  =  U4_GA(x4)

U5_GA(x1, x2, x3, x4)  =  U5_GA(x4)

U7_G(x1, x2)  =  U7_G(x2)

TREE_IN_G(x1)  =  TREE_IN_G(x1)

U1_G(x1, x2, x3, x4)  =  U1_G(x3, x4)

U2_G(x1, x2, x3, x4)  =  U2_G(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GOAL_IN_G(X) -> U6_G(X, s2t_in_ga(X, T))
   GOAL_IN_G(X) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, T)) -> U3_GA(X, T, Y, s2t_in_ga(X, T))
   S2T_IN_GA(s(X), node(T, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(nil, Y, T)) -> U4_GA(X, Y, T, s2t_in_ga(X, T))
   S2T_IN_GA(s(X), node(nil, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, nil)) -> U5_GA(X, T, Y, s2t_in_ga(X, T))
   S2T_IN_GA(s(X), node(T, Y, nil)) -> S2T_IN_GA(X, T)
   U6_G(X, s2t_out_ga(X, T)) -> U7_G(X, tree_in_g(T))
   U6_G(X, s2t_out_ga(X, T)) -> TREE_IN_G(T)
   TREE_IN_G(node(L, X, R)) -> U1_G(L, X, R, tree_in_g(L))
   TREE_IN_G(node(L, X, R)) -> TREE_IN_G(L)
   U1_G(L, X, R, tree_out_g(L)) -> U2_G(L, X, R, tree_in_g(R))
   U1_G(L, X, R, tree_out_g(L)) -> TREE_IN_G(R)

The TRS R consists of the following rules:

   goal_in_g(X) -> U6_g(X, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, T)) -> U3_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, T)) -> U4_ga(X, Y, T, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, nil)) -> U5_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, nil)) -> s2t_out_ga(s(X), node(nil, Y, nil))
   s2t_in_ga(0, nil) -> s2t_out_ga(0, nil)
   U5_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, nil))
   U4_ga(X, Y, T, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(nil, Y, T))
   U3_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, T))
   U6_g(X, s2t_out_ga(X, T)) -> U7_g(X, tree_in_g(T))
   tree_in_g(nil) -> tree_out_g(nil)
   tree_in_g(node(L, X, R)) -> U1_g(L, X, R, tree_in_g(L))
   U1_g(L, X, R, tree_out_g(L)) -> U2_g(L, X, R, tree_in_g(R))
   U2_g(L, X, R, tree_out_g(R)) -> tree_out_g(node(L, X, R))
   U7_g(X, tree_out_g(T)) -> goal_out_g(X)

The argument filtering Pi contains the following mapping:
goal_in_g(x1)  =  goal_in_g(x1)

U6_g(x1, x2)  =  U6_g(x2)

s2t_in_ga(x1, x2)  =  s2t_in_ga(x1)

s(x1)  =  s(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

s2t_out_ga(x1, x2)  =  s2t_out_ga(x2)

node(x1, x2, x3)  =  node(x1, x3)

0  =  0

U7_g(x1, x2)  =  U7_g(x2)

tree_in_g(x1)  =  tree_in_g(x1)

nil  =  nil

tree_out_g(x1)  =  tree_out_g

U1_g(x1, x2, x3, x4)  =  U1_g(x3, x4)

U2_g(x1, x2, x3, x4)  =  U2_g(x4)

goal_out_g(x1)  =  goal_out_g

GOAL_IN_G(x1)  =  GOAL_IN_G(x1)

U6_G(x1, x2)  =  U6_G(x2)

S2T_IN_GA(x1, x2)  =  S2T_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

U4_GA(x1, x2, x3, x4)  =  U4_GA(x4)

U5_GA(x1, x2, x3, x4)  =  U5_GA(x4)

U7_G(x1, x2)  =  U7_G(x2)

TREE_IN_G(x1)  =  TREE_IN_G(x1)

U1_G(x1, x2, x3, x4)  =  U1_G(x3, x4)

U2_G(x1, x2, x3, x4)  =  U2_G(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 8 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_G(L, X, R, tree_out_g(L)) -> TREE_IN_G(R)
   TREE_IN_G(node(L, X, R)) -> U1_G(L, X, R, tree_in_g(L))
   TREE_IN_G(node(L, X, R)) -> TREE_IN_G(L)

The TRS R consists of the following rules:

   goal_in_g(X) -> U6_g(X, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, T)) -> U3_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, T)) -> U4_ga(X, Y, T, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, nil)) -> U5_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, nil)) -> s2t_out_ga(s(X), node(nil, Y, nil))
   s2t_in_ga(0, nil) -> s2t_out_ga(0, nil)
   U5_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, nil))
   U4_ga(X, Y, T, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(nil, Y, T))
   U3_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, T))
   U6_g(X, s2t_out_ga(X, T)) -> U7_g(X, tree_in_g(T))
   tree_in_g(nil) -> tree_out_g(nil)
   tree_in_g(node(L, X, R)) -> U1_g(L, X, R, tree_in_g(L))
   U1_g(L, X, R, tree_out_g(L)) -> U2_g(L, X, R, tree_in_g(R))
   U2_g(L, X, R, tree_out_g(R)) -> tree_out_g(node(L, X, R))
   U7_g(X, tree_out_g(T)) -> goal_out_g(X)

The argument filtering Pi contains the following mapping:
goal_in_g(x1)  =  goal_in_g(x1)

U6_g(x1, x2)  =  U6_g(x2)

s2t_in_ga(x1, x2)  =  s2t_in_ga(x1)

s(x1)  =  s(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

s2t_out_ga(x1, x2)  =  s2t_out_ga(x2)

node(x1, x2, x3)  =  node(x1, x3)

0  =  0

U7_g(x1, x2)  =  U7_g(x2)

tree_in_g(x1)  =  tree_in_g(x1)

nil  =  nil

tree_out_g(x1)  =  tree_out_g

U1_g(x1, x2, x3, x4)  =  U1_g(x3, x4)

U2_g(x1, x2, x3, x4)  =  U2_g(x4)

goal_out_g(x1)  =  goal_out_g

TREE_IN_G(x1)  =  TREE_IN_G(x1)

U1_G(x1, x2, x3, x4)  =  U1_G(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_G(L, X, R, tree_out_g(L)) -> TREE_IN_G(R)
   TREE_IN_G(node(L, X, R)) -> U1_G(L, X, R, tree_in_g(L))
   TREE_IN_G(node(L, X, R)) -> TREE_IN_G(L)

The TRS R consists of the following rules:

   tree_in_g(nil) -> tree_out_g(nil)
   tree_in_g(node(L, X, R)) -> U1_g(L, X, R, tree_in_g(L))
   U1_g(L, X, R, tree_out_g(L)) -> U2_g(L, X, R, tree_in_g(R))
   U2_g(L, X, R, tree_out_g(R)) -> tree_out_g(node(L, X, R))

The argument filtering Pi contains the following mapping:
node(x1, x2, x3)  =  node(x1, x3)

tree_in_g(x1)  =  tree_in_g(x1)

nil  =  nil

tree_out_g(x1)  =  tree_out_g

U1_g(x1, x2, x3, x4)  =  U1_g(x3, x4)

U2_g(x1, x2, x3, x4)  =  U2_g(x4)

TREE_IN_G(x1)  =  TREE_IN_G(x1)

U1_G(x1, x2, x3, x4)  =  U1_G(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_G(R, tree_out_g) -> TREE_IN_G(R)
   TREE_IN_G(node(L, R)) -> U1_G(R, tree_in_g(L))
   TREE_IN_G(node(L, R)) -> TREE_IN_G(L)

The TRS R consists of the following rules:

   tree_in_g(nil) -> tree_out_g
   tree_in_g(node(L, R)) -> U1_g(R, tree_in_g(L))
   U1_g(R, tree_out_g) -> U2_g(tree_in_g(R))
   U2_g(tree_out_g) -> tree_out_g

The set Q consists of the following terms:

   tree_in_g(x0)
   U1_g(x0, x1)
   U2_g(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TREE_IN_G(node(L, R)) -> U1_G(R, tree_in_g(L))
The graph contains the following edges 1 > 1


*TREE_IN_G(node(L, R)) -> TREE_IN_G(L)
The graph contains the following edges 1 > 1


*U1_G(R, tree_out_g) -> TREE_IN_G(R)
The graph contains the following edges 1 >= 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   S2T_IN_GA(s(X), node(nil, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, nil)) -> S2T_IN_GA(X, T)

The TRS R consists of the following rules:

   goal_in_g(X) -> U6_g(X, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, T)) -> U3_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, T)) -> U4_ga(X, Y, T, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, nil)) -> U5_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, nil)) -> s2t_out_ga(s(X), node(nil, Y, nil))
   s2t_in_ga(0, nil) -> s2t_out_ga(0, nil)
   U5_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, nil))
   U4_ga(X, Y, T, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(nil, Y, T))
   U3_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, T))
   U6_g(X, s2t_out_ga(X, T)) -> U7_g(X, tree_in_g(T))
   tree_in_g(nil) -> tree_out_g(nil)
   tree_in_g(node(L, X, R)) -> U1_g(L, X, R, tree_in_g(L))
   U1_g(L, X, R, tree_out_g(L)) -> U2_g(L, X, R, tree_in_g(R))
   U2_g(L, X, R, tree_out_g(R)) -> tree_out_g(node(L, X, R))
   U7_g(X, tree_out_g(T)) -> goal_out_g(X)

The argument filtering Pi contains the following mapping:
goal_in_g(x1)  =  goal_in_g(x1)

U6_g(x1, x2)  =  U6_g(x2)

s2t_in_ga(x1, x2)  =  s2t_in_ga(x1)

s(x1)  =  s(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

s2t_out_ga(x1, x2)  =  s2t_out_ga(x2)

node(x1, x2, x3)  =  node(x1, x3)

0  =  0

U7_g(x1, x2)  =  U7_g(x2)

tree_in_g(x1)  =  tree_in_g(x1)

nil  =  nil

tree_out_g(x1)  =  tree_out_g

U1_g(x1, x2, x3, x4)  =  U1_g(x3, x4)

U2_g(x1, x2, x3, x4)  =  U2_g(x4)

goal_out_g(x1)  =  goal_out_g

S2T_IN_GA(x1, x2)  =  S2T_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   S2T_IN_GA(s(X), node(nil, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, nil)) -> S2T_IN_GA(X, T)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

node(x1, x2, x3)  =  node(x1, x3)

nil  =  nil

S2T_IN_GA(x1, x2)  =  S2T_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2T_IN_GA(s(X)) -> S2T_IN_GA(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*S2T_IN_GA(s(X)) -> S2T_IN_GA(X)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES
