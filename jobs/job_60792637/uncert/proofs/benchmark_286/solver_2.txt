YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/REbj5.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

queens(a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 20 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) PiDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) PiDP
        (24) PiDPToQDPProof [SOUND, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) PiDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) PiDP
        (31) PiDPToQDPProof [SOUND, 0 ms]
        (32) QDP
        (33) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) PiDP
        (36) UsableRulesProof [EQUIVALENT, 0 ms]
        (37) PiDP
        (38) PiDPToQDPProof [SOUND, 0 ms]
        (39) QDP
        (40) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (41) YES
    (42) PiDP
        (43) UsableRulesProof [EQUIVALENT, 0 ms]
        (44) PiDP
        (45) PiDPToQDPProof [SOUND, 0 ms]
        (46) QDP
        (47) MRRProof [EQUIVALENT, 10 ms]
        (48) QDP
        (49) PisEmptyProof [EQUIVALENT, 0 ms]
        (50) YES


----------------------------------------

(0)
Obligation:
Clauses:

queens(Y) :- ','(perm(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y), safe(Y)).
perm([], []).
perm(.(X, Y), .(V, Res)) :- ','(delete(V, .(X, Y), Rest), perm(Rest, Res)).
delete(X, .(X, Y), Y).
delete(X, .(F, T), .(F, R)) :- delete(X, T, R).
safe([]).
safe(.(X, Y)) :- ','(noattack(X, Y, s(0)), safe(Y)).
noattack(X, [], N).
noattack(X, .(F, T), N) :- ','(notEq(X, F), ','(add(F, N, FplusN), ','(notEq(X, FplusN), ','(add(X, N, XplusN), ','(notEq(F, XplusN), noattack(X, T, s(N))))))).
add(0, X, X).
add(s(X), Y, s(Z)) :- add(X, Y, Z).
notEq(0, s(X)).
notEq(s(X), 0).
notEq(s(X), s(Y)) :- notEq(X, Y).


Query: queens(a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

queens_in_1: (f)

perm_in_2: (b,f)

delete_in_3: (f,b,f)

safe_in_1: (b)

noattack_in_3: (b,b,b)

notEq_in_2: (b,b)

add_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   queens_in_a(Y) -> U1_a(Y, perm_in_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_a(Y, perm_out_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y)) -> U2_a(Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, s(0)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, notEq_in_gg(X, F))
   notEq_in_gg(0, s(X)) -> notEq_out_gg(0, s(X))
   notEq_in_gg(s(X), 0) -> notEq_out_gg(s(X), 0)
   notEq_in_gg(s(X), s(Y)) -> U15_gg(X, Y, notEq_in_gg(X, Y))
   U15_gg(X, Y, notEq_out_gg(X, Y)) -> notEq_out_gg(s(X), s(Y))
   U8_ggg(X, F, T, N, notEq_out_gg(X, F)) -> U9_ggg(X, F, T, N, add_in_gga(F, N, FplusN))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   add_in_gga(s(X), Y, s(Z)) -> U14_gga(X, Y, Z, add_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U9_ggg(X, F, T, N, add_out_gga(F, N, FplusN)) -> U10_ggg(X, F, T, N, FplusN, notEq_in_gg(X, FplusN))
   U10_ggg(X, F, T, N, FplusN, notEq_out_gg(X, FplusN)) -> U11_ggg(X, F, T, N, FplusN, add_in_gga(X, N, XplusN))
   U11_ggg(X, F, T, N, FplusN, add_out_gga(X, N, XplusN)) -> U12_ggg(X, F, T, N, notEq_in_gg(F, XplusN))
   U12_ggg(X, F, T, N, notEq_out_gg(F, XplusN)) -> U13_ggg(X, F, T, N, noattack_in_ggg(X, T, s(N)))
   U13_ggg(X, F, T, N, noattack_out_ggg(X, T, s(N))) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, s(0))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_a(Y, safe_out_g(Y)) -> queens_out_a(Y)

The argument filtering Pi contains the following mapping:
queens_in_a(x1)  =  queens_in_a

U1_a(x1, x2)  =  U1_a(x2)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

s(x1)  =  s(x1)

0  =  0

U2_a(x1, x2)  =  U2_a(x1, x2)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

notEq_in_gg(x1, x2)  =  notEq_in_gg(x1, x2)

notEq_out_gg(x1, x2)  =  notEq_out_gg

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U9_ggg(x1, x2, x3, x4, x5)  =  U9_ggg(x1, x2, x3, x4, x5)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U10_ggg(x1, x2, x3, x4, x5, x6)  =  U10_ggg(x1, x2, x3, x4, x6)

U11_ggg(x1, x2, x3, x4, x5, x6)  =  U11_ggg(x1, x2, x3, x4, x6)

U12_ggg(x1, x2, x3, x4, x5)  =  U12_ggg(x1, x3, x4, x5)

U13_ggg(x1, x2, x3, x4, x5)  =  U13_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_a(x1)  =  queens_out_a(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   queens_in_a(Y) -> U1_a(Y, perm_in_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_a(Y, perm_out_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y)) -> U2_a(Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, s(0)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, notEq_in_gg(X, F))
   notEq_in_gg(0, s(X)) -> notEq_out_gg(0, s(X))
   notEq_in_gg(s(X), 0) -> notEq_out_gg(s(X), 0)
   notEq_in_gg(s(X), s(Y)) -> U15_gg(X, Y, notEq_in_gg(X, Y))
   U15_gg(X, Y, notEq_out_gg(X, Y)) -> notEq_out_gg(s(X), s(Y))
   U8_ggg(X, F, T, N, notEq_out_gg(X, F)) -> U9_ggg(X, F, T, N, add_in_gga(F, N, FplusN))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   add_in_gga(s(X), Y, s(Z)) -> U14_gga(X, Y, Z, add_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U9_ggg(X, F, T, N, add_out_gga(F, N, FplusN)) -> U10_ggg(X, F, T, N, FplusN, notEq_in_gg(X, FplusN))
   U10_ggg(X, F, T, N, FplusN, notEq_out_gg(X, FplusN)) -> U11_ggg(X, F, T, N, FplusN, add_in_gga(X, N, XplusN))
   U11_ggg(X, F, T, N, FplusN, add_out_gga(X, N, XplusN)) -> U12_ggg(X, F, T, N, notEq_in_gg(F, XplusN))
   U12_ggg(X, F, T, N, notEq_out_gg(F, XplusN)) -> U13_ggg(X, F, T, N, noattack_in_ggg(X, T, s(N)))
   U13_ggg(X, F, T, N, noattack_out_ggg(X, T, s(N))) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, s(0))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_a(Y, safe_out_g(Y)) -> queens_out_a(Y)

The argument filtering Pi contains the following mapping:
queens_in_a(x1)  =  queens_in_a

U1_a(x1, x2)  =  U1_a(x2)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

s(x1)  =  s(x1)

0  =  0

U2_a(x1, x2)  =  U2_a(x1, x2)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

notEq_in_gg(x1, x2)  =  notEq_in_gg(x1, x2)

notEq_out_gg(x1, x2)  =  notEq_out_gg

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U9_ggg(x1, x2, x3, x4, x5)  =  U9_ggg(x1, x2, x3, x4, x5)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U10_ggg(x1, x2, x3, x4, x5, x6)  =  U10_ggg(x1, x2, x3, x4, x6)

U11_ggg(x1, x2, x3, x4, x5, x6)  =  U11_ggg(x1, x2, x3, x4, x6)

U12_ggg(x1, x2, x3, x4, x5)  =  U12_ggg(x1, x3, x4, x5)

U13_ggg(x1, x2, x3, x4, x5)  =  U13_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_a(x1)  =  queens_out_a(x1)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   QUEENS_IN_A(Y) -> U1_A(Y, perm_in_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y))
   QUEENS_IN_A(Y) -> PERM_IN_GA(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y)
   PERM_IN_GA(.(X, Y), .(V, Res)) -> U3_GA(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   PERM_IN_GA(.(X, Y), .(V, Res)) -> DELETE_IN_AGA(V, .(X, Y), Rest)
   DELETE_IN_AGA(X, .(F, T), .(F, R)) -> U5_AGA(X, F, T, R, delete_in_aga(X, T, R))
   DELETE_IN_AGA(X, .(F, T), .(F, R)) -> DELETE_IN_AGA(X, T, R)
   U3_GA(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_GA(X, Y, V, Res, perm_in_ga(Rest, Res))
   U3_GA(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> PERM_IN_GA(Rest, Res)
   U1_A(Y, perm_out_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y)) -> U2_A(Y, safe_in_g(Y))
   U1_A(Y, perm_out_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y)) -> SAFE_IN_G(Y)
   SAFE_IN_G(.(X, Y)) -> U6_G(X, Y, noattack_in_ggg(X, Y, s(0)))
   SAFE_IN_G(.(X, Y)) -> NOATTACK_IN_GGG(X, Y, s(0))
   NOATTACK_IN_GGG(X, .(F, T), N) -> U8_GGG(X, F, T, N, notEq_in_gg(X, F))
   NOATTACK_IN_GGG(X, .(F, T), N) -> NOTEQ_IN_GG(X, F)
   NOTEQ_IN_GG(s(X), s(Y)) -> U15_GG(X, Y, notEq_in_gg(X, Y))
   NOTEQ_IN_GG(s(X), s(Y)) -> NOTEQ_IN_GG(X, Y)
   U8_GGG(X, F, T, N, notEq_out_gg(X, F)) -> U9_GGG(X, F, T, N, add_in_gga(F, N, FplusN))
   U8_GGG(X, F, T, N, notEq_out_gg(X, F)) -> ADD_IN_GGA(F, N, FplusN)
   ADD_IN_GGA(s(X), Y, s(Z)) -> U14_GGA(X, Y, Z, add_in_gga(X, Y, Z))
   ADD_IN_GGA(s(X), Y, s(Z)) -> ADD_IN_GGA(X, Y, Z)
   U9_GGG(X, F, T, N, add_out_gga(F, N, FplusN)) -> U10_GGG(X, F, T, N, FplusN, notEq_in_gg(X, FplusN))
   U9_GGG(X, F, T, N, add_out_gga(F, N, FplusN)) -> NOTEQ_IN_GG(X, FplusN)
   U10_GGG(X, F, T, N, FplusN, notEq_out_gg(X, FplusN)) -> U11_GGG(X, F, T, N, FplusN, add_in_gga(X, N, XplusN))
   U10_GGG(X, F, T, N, FplusN, notEq_out_gg(X, FplusN)) -> ADD_IN_GGA(X, N, XplusN)
   U11_GGG(X, F, T, N, FplusN, add_out_gga(X, N, XplusN)) -> U12_GGG(X, F, T, N, notEq_in_gg(F, XplusN))
   U11_GGG(X, F, T, N, FplusN, add_out_gga(X, N, XplusN)) -> NOTEQ_IN_GG(F, XplusN)
   U12_GGG(X, F, T, N, notEq_out_gg(F, XplusN)) -> U13_GGG(X, F, T, N, noattack_in_ggg(X, T, s(N)))
   U12_GGG(X, F, T, N, notEq_out_gg(F, XplusN)) -> NOATTACK_IN_GGG(X, T, s(N))
   U6_G(X, Y, noattack_out_ggg(X, Y, s(0))) -> U7_G(X, Y, safe_in_g(Y))
   U6_G(X, Y, noattack_out_ggg(X, Y, s(0))) -> SAFE_IN_G(Y)

The TRS R consists of the following rules:

   queens_in_a(Y) -> U1_a(Y, perm_in_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_a(Y, perm_out_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y)) -> U2_a(Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, s(0)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, notEq_in_gg(X, F))
   notEq_in_gg(0, s(X)) -> notEq_out_gg(0, s(X))
   notEq_in_gg(s(X), 0) -> notEq_out_gg(s(X), 0)
   notEq_in_gg(s(X), s(Y)) -> U15_gg(X, Y, notEq_in_gg(X, Y))
   U15_gg(X, Y, notEq_out_gg(X, Y)) -> notEq_out_gg(s(X), s(Y))
   U8_ggg(X, F, T, N, notEq_out_gg(X, F)) -> U9_ggg(X, F, T, N, add_in_gga(F, N, FplusN))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   add_in_gga(s(X), Y, s(Z)) -> U14_gga(X, Y, Z, add_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U9_ggg(X, F, T, N, add_out_gga(F, N, FplusN)) -> U10_ggg(X, F, T, N, FplusN, notEq_in_gg(X, FplusN))
   U10_ggg(X, F, T, N, FplusN, notEq_out_gg(X, FplusN)) -> U11_ggg(X, F, T, N, FplusN, add_in_gga(X, N, XplusN))
   U11_ggg(X, F, T, N, FplusN, add_out_gga(X, N, XplusN)) -> U12_ggg(X, F, T, N, notEq_in_gg(F, XplusN))
   U12_ggg(X, F, T, N, notEq_out_gg(F, XplusN)) -> U13_ggg(X, F, T, N, noattack_in_ggg(X, T, s(N)))
   U13_ggg(X, F, T, N, noattack_out_ggg(X, T, s(N))) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, s(0))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_a(Y, safe_out_g(Y)) -> queens_out_a(Y)

The argument filtering Pi contains the following mapping:
queens_in_a(x1)  =  queens_in_a

U1_a(x1, x2)  =  U1_a(x2)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

s(x1)  =  s(x1)

0  =  0

U2_a(x1, x2)  =  U2_a(x1, x2)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

notEq_in_gg(x1, x2)  =  notEq_in_gg(x1, x2)

notEq_out_gg(x1, x2)  =  notEq_out_gg

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U9_ggg(x1, x2, x3, x4, x5)  =  U9_ggg(x1, x2, x3, x4, x5)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U10_ggg(x1, x2, x3, x4, x5, x6)  =  U10_ggg(x1, x2, x3, x4, x6)

U11_ggg(x1, x2, x3, x4, x5, x6)  =  U11_ggg(x1, x2, x3, x4, x6)

U12_ggg(x1, x2, x3, x4, x5)  =  U12_ggg(x1, x3, x4, x5)

U13_ggg(x1, x2, x3, x4, x5)  =  U13_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_a(x1)  =  queens_out_a(x1)

QUEENS_IN_A(x1)  =  QUEENS_IN_A

U1_A(x1, x2)  =  U1_A(x2)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x5)

DELETE_IN_AGA(x1, x2, x3)  =  DELETE_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x5)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x3, x5)

U2_A(x1, x2)  =  U2_A(x1, x2)

SAFE_IN_G(x1)  =  SAFE_IN_G(x1)

U6_G(x1, x2, x3)  =  U6_G(x2, x3)

NOATTACK_IN_GGG(x1, x2, x3)  =  NOATTACK_IN_GGG(x1, x2, x3)

U8_GGG(x1, x2, x3, x4, x5)  =  U8_GGG(x1, x2, x3, x4, x5)

NOTEQ_IN_GG(x1, x2)  =  NOTEQ_IN_GG(x1, x2)

U15_GG(x1, x2, x3)  =  U15_GG(x3)

U9_GGG(x1, x2, x3, x4, x5)  =  U9_GGG(x1, x2, x3, x4, x5)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)

U14_GGA(x1, x2, x3, x4)  =  U14_GGA(x4)

U10_GGG(x1, x2, x3, x4, x5, x6)  =  U10_GGG(x1, x2, x3, x4, x6)

U11_GGG(x1, x2, x3, x4, x5, x6)  =  U11_GGG(x1, x2, x3, x4, x6)

U12_GGG(x1, x2, x3, x4, x5)  =  U12_GGG(x1, x3, x4, x5)

U13_GGG(x1, x2, x3, x4, x5)  =  U13_GGG(x5)

U7_G(x1, x2, x3)  =  U7_G(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   QUEENS_IN_A(Y) -> U1_A(Y, perm_in_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y))
   QUEENS_IN_A(Y) -> PERM_IN_GA(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y)
   PERM_IN_GA(.(X, Y), .(V, Res)) -> U3_GA(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   PERM_IN_GA(.(X, Y), .(V, Res)) -> DELETE_IN_AGA(V, .(X, Y), Rest)
   DELETE_IN_AGA(X, .(F, T), .(F, R)) -> U5_AGA(X, F, T, R, delete_in_aga(X, T, R))
   DELETE_IN_AGA(X, .(F, T), .(F, R)) -> DELETE_IN_AGA(X, T, R)
   U3_GA(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_GA(X, Y, V, Res, perm_in_ga(Rest, Res))
   U3_GA(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> PERM_IN_GA(Rest, Res)
   U1_A(Y, perm_out_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y)) -> U2_A(Y, safe_in_g(Y))
   U1_A(Y, perm_out_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y)) -> SAFE_IN_G(Y)
   SAFE_IN_G(.(X, Y)) -> U6_G(X, Y, noattack_in_ggg(X, Y, s(0)))
   SAFE_IN_G(.(X, Y)) -> NOATTACK_IN_GGG(X, Y, s(0))
   NOATTACK_IN_GGG(X, .(F, T), N) -> U8_GGG(X, F, T, N, notEq_in_gg(X, F))
   NOATTACK_IN_GGG(X, .(F, T), N) -> NOTEQ_IN_GG(X, F)
   NOTEQ_IN_GG(s(X), s(Y)) -> U15_GG(X, Y, notEq_in_gg(X, Y))
   NOTEQ_IN_GG(s(X), s(Y)) -> NOTEQ_IN_GG(X, Y)
   U8_GGG(X, F, T, N, notEq_out_gg(X, F)) -> U9_GGG(X, F, T, N, add_in_gga(F, N, FplusN))
   U8_GGG(X, F, T, N, notEq_out_gg(X, F)) -> ADD_IN_GGA(F, N, FplusN)
   ADD_IN_GGA(s(X), Y, s(Z)) -> U14_GGA(X, Y, Z, add_in_gga(X, Y, Z))
   ADD_IN_GGA(s(X), Y, s(Z)) -> ADD_IN_GGA(X, Y, Z)
   U9_GGG(X, F, T, N, add_out_gga(F, N, FplusN)) -> U10_GGG(X, F, T, N, FplusN, notEq_in_gg(X, FplusN))
   U9_GGG(X, F, T, N, add_out_gga(F, N, FplusN)) -> NOTEQ_IN_GG(X, FplusN)
   U10_GGG(X, F, T, N, FplusN, notEq_out_gg(X, FplusN)) -> U11_GGG(X, F, T, N, FplusN, add_in_gga(X, N, XplusN))
   U10_GGG(X, F, T, N, FplusN, notEq_out_gg(X, FplusN)) -> ADD_IN_GGA(X, N, XplusN)
   U11_GGG(X, F, T, N, FplusN, add_out_gga(X, N, XplusN)) -> U12_GGG(X, F, T, N, notEq_in_gg(F, XplusN))
   U11_GGG(X, F, T, N, FplusN, add_out_gga(X, N, XplusN)) -> NOTEQ_IN_GG(F, XplusN)
   U12_GGG(X, F, T, N, notEq_out_gg(F, XplusN)) -> U13_GGG(X, F, T, N, noattack_in_ggg(X, T, s(N)))
   U12_GGG(X, F, T, N, notEq_out_gg(F, XplusN)) -> NOATTACK_IN_GGG(X, T, s(N))
   U6_G(X, Y, noattack_out_ggg(X, Y, s(0))) -> U7_G(X, Y, safe_in_g(Y))
   U6_G(X, Y, noattack_out_ggg(X, Y, s(0))) -> SAFE_IN_G(Y)

The TRS R consists of the following rules:

   queens_in_a(Y) -> U1_a(Y, perm_in_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_a(Y, perm_out_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y)) -> U2_a(Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, s(0)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, notEq_in_gg(X, F))
   notEq_in_gg(0, s(X)) -> notEq_out_gg(0, s(X))
   notEq_in_gg(s(X), 0) -> notEq_out_gg(s(X), 0)
   notEq_in_gg(s(X), s(Y)) -> U15_gg(X, Y, notEq_in_gg(X, Y))
   U15_gg(X, Y, notEq_out_gg(X, Y)) -> notEq_out_gg(s(X), s(Y))
   U8_ggg(X, F, T, N, notEq_out_gg(X, F)) -> U9_ggg(X, F, T, N, add_in_gga(F, N, FplusN))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   add_in_gga(s(X), Y, s(Z)) -> U14_gga(X, Y, Z, add_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U9_ggg(X, F, T, N, add_out_gga(F, N, FplusN)) -> U10_ggg(X, F, T, N, FplusN, notEq_in_gg(X, FplusN))
   U10_ggg(X, F, T, N, FplusN, notEq_out_gg(X, FplusN)) -> U11_ggg(X, F, T, N, FplusN, add_in_gga(X, N, XplusN))
   U11_ggg(X, F, T, N, FplusN, add_out_gga(X, N, XplusN)) -> U12_ggg(X, F, T, N, notEq_in_gg(F, XplusN))
   U12_ggg(X, F, T, N, notEq_out_gg(F, XplusN)) -> U13_ggg(X, F, T, N, noattack_in_ggg(X, T, s(N)))
   U13_ggg(X, F, T, N, noattack_out_ggg(X, T, s(N))) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, s(0))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_a(Y, safe_out_g(Y)) -> queens_out_a(Y)

The argument filtering Pi contains the following mapping:
queens_in_a(x1)  =  queens_in_a

U1_a(x1, x2)  =  U1_a(x2)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

s(x1)  =  s(x1)

0  =  0

U2_a(x1, x2)  =  U2_a(x1, x2)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

notEq_in_gg(x1, x2)  =  notEq_in_gg(x1, x2)

notEq_out_gg(x1, x2)  =  notEq_out_gg

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U9_ggg(x1, x2, x3, x4, x5)  =  U9_ggg(x1, x2, x3, x4, x5)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U10_ggg(x1, x2, x3, x4, x5, x6)  =  U10_ggg(x1, x2, x3, x4, x6)

U11_ggg(x1, x2, x3, x4, x5, x6)  =  U11_ggg(x1, x2, x3, x4, x6)

U12_ggg(x1, x2, x3, x4, x5)  =  U12_ggg(x1, x3, x4, x5)

U13_ggg(x1, x2, x3, x4, x5)  =  U13_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_a(x1)  =  queens_out_a(x1)

QUEENS_IN_A(x1)  =  QUEENS_IN_A

U1_A(x1, x2)  =  U1_A(x2)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x5)

DELETE_IN_AGA(x1, x2, x3)  =  DELETE_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x5)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x3, x5)

U2_A(x1, x2)  =  U2_A(x1, x2)

SAFE_IN_G(x1)  =  SAFE_IN_G(x1)

U6_G(x1, x2, x3)  =  U6_G(x2, x3)

NOATTACK_IN_GGG(x1, x2, x3)  =  NOATTACK_IN_GGG(x1, x2, x3)

U8_GGG(x1, x2, x3, x4, x5)  =  U8_GGG(x1, x2, x3, x4, x5)

NOTEQ_IN_GG(x1, x2)  =  NOTEQ_IN_GG(x1, x2)

U15_GG(x1, x2, x3)  =  U15_GG(x3)

U9_GGG(x1, x2, x3, x4, x5)  =  U9_GGG(x1, x2, x3, x4, x5)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)

U14_GGA(x1, x2, x3, x4)  =  U14_GGA(x4)

U10_GGG(x1, x2, x3, x4, x5, x6)  =  U10_GGG(x1, x2, x3, x4, x6)

U11_GGG(x1, x2, x3, x4, x5, x6)  =  U11_GGG(x1, x2, x3, x4, x6)

U12_GGG(x1, x2, x3, x4, x5)  =  U12_GGG(x1, x3, x4, x5)

U13_GGG(x1, x2, x3, x4, x5)  =  U13_GGG(x5)

U7_G(x1, x2, x3)  =  U7_G(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 6 SCCs with 17 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ADD_IN_GGA(s(X), Y, s(Z)) -> ADD_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   queens_in_a(Y) -> U1_a(Y, perm_in_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_a(Y, perm_out_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y)) -> U2_a(Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, s(0)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, notEq_in_gg(X, F))
   notEq_in_gg(0, s(X)) -> notEq_out_gg(0, s(X))
   notEq_in_gg(s(X), 0) -> notEq_out_gg(s(X), 0)
   notEq_in_gg(s(X), s(Y)) -> U15_gg(X, Y, notEq_in_gg(X, Y))
   U15_gg(X, Y, notEq_out_gg(X, Y)) -> notEq_out_gg(s(X), s(Y))
   U8_ggg(X, F, T, N, notEq_out_gg(X, F)) -> U9_ggg(X, F, T, N, add_in_gga(F, N, FplusN))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   add_in_gga(s(X), Y, s(Z)) -> U14_gga(X, Y, Z, add_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U9_ggg(X, F, T, N, add_out_gga(F, N, FplusN)) -> U10_ggg(X, F, T, N, FplusN, notEq_in_gg(X, FplusN))
   U10_ggg(X, F, T, N, FplusN, notEq_out_gg(X, FplusN)) -> U11_ggg(X, F, T, N, FplusN, add_in_gga(X, N, XplusN))
   U11_ggg(X, F, T, N, FplusN, add_out_gga(X, N, XplusN)) -> U12_ggg(X, F, T, N, notEq_in_gg(F, XplusN))
   U12_ggg(X, F, T, N, notEq_out_gg(F, XplusN)) -> U13_ggg(X, F, T, N, noattack_in_ggg(X, T, s(N)))
   U13_ggg(X, F, T, N, noattack_out_ggg(X, T, s(N))) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, s(0))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_a(Y, safe_out_g(Y)) -> queens_out_a(Y)

The argument filtering Pi contains the following mapping:
queens_in_a(x1)  =  queens_in_a

U1_a(x1, x2)  =  U1_a(x2)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

s(x1)  =  s(x1)

0  =  0

U2_a(x1, x2)  =  U2_a(x1, x2)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

notEq_in_gg(x1, x2)  =  notEq_in_gg(x1, x2)

notEq_out_gg(x1, x2)  =  notEq_out_gg

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U9_ggg(x1, x2, x3, x4, x5)  =  U9_ggg(x1, x2, x3, x4, x5)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U10_ggg(x1, x2, x3, x4, x5, x6)  =  U10_ggg(x1, x2, x3, x4, x6)

U11_ggg(x1, x2, x3, x4, x5, x6)  =  U11_ggg(x1, x2, x3, x4, x6)

U12_ggg(x1, x2, x3, x4, x5)  =  U12_ggg(x1, x3, x4, x5)

U13_ggg(x1, x2, x3, x4, x5)  =  U13_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_a(x1)  =  queens_out_a(x1)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ADD_IN_GGA(s(X), Y, s(Z)) -> ADD_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD_IN_GGA(s(X), Y) -> ADD_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ADD_IN_GGA(s(X), Y) -> ADD_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   NOTEQ_IN_GG(s(X), s(Y)) -> NOTEQ_IN_GG(X, Y)

The TRS R consists of the following rules:

   queens_in_a(Y) -> U1_a(Y, perm_in_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_a(Y, perm_out_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y)) -> U2_a(Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, s(0)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, notEq_in_gg(X, F))
   notEq_in_gg(0, s(X)) -> notEq_out_gg(0, s(X))
   notEq_in_gg(s(X), 0) -> notEq_out_gg(s(X), 0)
   notEq_in_gg(s(X), s(Y)) -> U15_gg(X, Y, notEq_in_gg(X, Y))
   U15_gg(X, Y, notEq_out_gg(X, Y)) -> notEq_out_gg(s(X), s(Y))
   U8_ggg(X, F, T, N, notEq_out_gg(X, F)) -> U9_ggg(X, F, T, N, add_in_gga(F, N, FplusN))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   add_in_gga(s(X), Y, s(Z)) -> U14_gga(X, Y, Z, add_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U9_ggg(X, F, T, N, add_out_gga(F, N, FplusN)) -> U10_ggg(X, F, T, N, FplusN, notEq_in_gg(X, FplusN))
   U10_ggg(X, F, T, N, FplusN, notEq_out_gg(X, FplusN)) -> U11_ggg(X, F, T, N, FplusN, add_in_gga(X, N, XplusN))
   U11_ggg(X, F, T, N, FplusN, add_out_gga(X, N, XplusN)) -> U12_ggg(X, F, T, N, notEq_in_gg(F, XplusN))
   U12_ggg(X, F, T, N, notEq_out_gg(F, XplusN)) -> U13_ggg(X, F, T, N, noattack_in_ggg(X, T, s(N)))
   U13_ggg(X, F, T, N, noattack_out_ggg(X, T, s(N))) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, s(0))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_a(Y, safe_out_g(Y)) -> queens_out_a(Y)

The argument filtering Pi contains the following mapping:
queens_in_a(x1)  =  queens_in_a

U1_a(x1, x2)  =  U1_a(x2)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

s(x1)  =  s(x1)

0  =  0

U2_a(x1, x2)  =  U2_a(x1, x2)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

notEq_in_gg(x1, x2)  =  notEq_in_gg(x1, x2)

notEq_out_gg(x1, x2)  =  notEq_out_gg

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U9_ggg(x1, x2, x3, x4, x5)  =  U9_ggg(x1, x2, x3, x4, x5)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U10_ggg(x1, x2, x3, x4, x5, x6)  =  U10_ggg(x1, x2, x3, x4, x6)

U11_ggg(x1, x2, x3, x4, x5, x6)  =  U11_ggg(x1, x2, x3, x4, x6)

U12_ggg(x1, x2, x3, x4, x5)  =  U12_ggg(x1, x3, x4, x5)

U13_ggg(x1, x2, x3, x4, x5)  =  U13_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_a(x1)  =  queens_out_a(x1)

NOTEQ_IN_GG(x1, x2)  =  NOTEQ_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   NOTEQ_IN_GG(s(X), s(Y)) -> NOTEQ_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   NOTEQ_IN_GG(s(X), s(Y)) -> NOTEQ_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*NOTEQ_IN_GG(s(X), s(Y)) -> NOTEQ_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U8_GGG(X, F, T, N, notEq_out_gg(X, F)) -> U9_GGG(X, F, T, N, add_in_gga(F, N, FplusN))
   U9_GGG(X, F, T, N, add_out_gga(F, N, FplusN)) -> U10_GGG(X, F, T, N, FplusN, notEq_in_gg(X, FplusN))
   U10_GGG(X, F, T, N, FplusN, notEq_out_gg(X, FplusN)) -> U11_GGG(X, F, T, N, FplusN, add_in_gga(X, N, XplusN))
   U11_GGG(X, F, T, N, FplusN, add_out_gga(X, N, XplusN)) -> U12_GGG(X, F, T, N, notEq_in_gg(F, XplusN))
   U12_GGG(X, F, T, N, notEq_out_gg(F, XplusN)) -> NOATTACK_IN_GGG(X, T, s(N))
   NOATTACK_IN_GGG(X, .(F, T), N) -> U8_GGG(X, F, T, N, notEq_in_gg(X, F))

The TRS R consists of the following rules:

   queens_in_a(Y) -> U1_a(Y, perm_in_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_a(Y, perm_out_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y)) -> U2_a(Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, s(0)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, notEq_in_gg(X, F))
   notEq_in_gg(0, s(X)) -> notEq_out_gg(0, s(X))
   notEq_in_gg(s(X), 0) -> notEq_out_gg(s(X), 0)
   notEq_in_gg(s(X), s(Y)) -> U15_gg(X, Y, notEq_in_gg(X, Y))
   U15_gg(X, Y, notEq_out_gg(X, Y)) -> notEq_out_gg(s(X), s(Y))
   U8_ggg(X, F, T, N, notEq_out_gg(X, F)) -> U9_ggg(X, F, T, N, add_in_gga(F, N, FplusN))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   add_in_gga(s(X), Y, s(Z)) -> U14_gga(X, Y, Z, add_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U9_ggg(X, F, T, N, add_out_gga(F, N, FplusN)) -> U10_ggg(X, F, T, N, FplusN, notEq_in_gg(X, FplusN))
   U10_ggg(X, F, T, N, FplusN, notEq_out_gg(X, FplusN)) -> U11_ggg(X, F, T, N, FplusN, add_in_gga(X, N, XplusN))
   U11_ggg(X, F, T, N, FplusN, add_out_gga(X, N, XplusN)) -> U12_ggg(X, F, T, N, notEq_in_gg(F, XplusN))
   U12_ggg(X, F, T, N, notEq_out_gg(F, XplusN)) -> U13_ggg(X, F, T, N, noattack_in_ggg(X, T, s(N)))
   U13_ggg(X, F, T, N, noattack_out_ggg(X, T, s(N))) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, s(0))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_a(Y, safe_out_g(Y)) -> queens_out_a(Y)

The argument filtering Pi contains the following mapping:
queens_in_a(x1)  =  queens_in_a

U1_a(x1, x2)  =  U1_a(x2)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

s(x1)  =  s(x1)

0  =  0

U2_a(x1, x2)  =  U2_a(x1, x2)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

notEq_in_gg(x1, x2)  =  notEq_in_gg(x1, x2)

notEq_out_gg(x1, x2)  =  notEq_out_gg

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U9_ggg(x1, x2, x3, x4, x5)  =  U9_ggg(x1, x2, x3, x4, x5)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U10_ggg(x1, x2, x3, x4, x5, x6)  =  U10_ggg(x1, x2, x3, x4, x6)

U11_ggg(x1, x2, x3, x4, x5, x6)  =  U11_ggg(x1, x2, x3, x4, x6)

U12_ggg(x1, x2, x3, x4, x5)  =  U12_ggg(x1, x3, x4, x5)

U13_ggg(x1, x2, x3, x4, x5)  =  U13_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_a(x1)  =  queens_out_a(x1)

NOATTACK_IN_GGG(x1, x2, x3)  =  NOATTACK_IN_GGG(x1, x2, x3)

U8_GGG(x1, x2, x3, x4, x5)  =  U8_GGG(x1, x2, x3, x4, x5)

U9_GGG(x1, x2, x3, x4, x5)  =  U9_GGG(x1, x2, x3, x4, x5)

U10_GGG(x1, x2, x3, x4, x5, x6)  =  U10_GGG(x1, x2, x3, x4, x6)

U11_GGG(x1, x2, x3, x4, x5, x6)  =  U11_GGG(x1, x2, x3, x4, x6)

U12_GGG(x1, x2, x3, x4, x5)  =  U12_GGG(x1, x3, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(23)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U8_GGG(X, F, T, N, notEq_out_gg(X, F)) -> U9_GGG(X, F, T, N, add_in_gga(F, N, FplusN))
   U9_GGG(X, F, T, N, add_out_gga(F, N, FplusN)) -> U10_GGG(X, F, T, N, FplusN, notEq_in_gg(X, FplusN))
   U10_GGG(X, F, T, N, FplusN, notEq_out_gg(X, FplusN)) -> U11_GGG(X, F, T, N, FplusN, add_in_gga(X, N, XplusN))
   U11_GGG(X, F, T, N, FplusN, add_out_gga(X, N, XplusN)) -> U12_GGG(X, F, T, N, notEq_in_gg(F, XplusN))
   U12_GGG(X, F, T, N, notEq_out_gg(F, XplusN)) -> NOATTACK_IN_GGG(X, T, s(N))
   NOATTACK_IN_GGG(X, .(F, T), N) -> U8_GGG(X, F, T, N, notEq_in_gg(X, F))

The TRS R consists of the following rules:

   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   add_in_gga(s(X), Y, s(Z)) -> U14_gga(X, Y, Z, add_in_gga(X, Y, Z))
   notEq_in_gg(0, s(X)) -> notEq_out_gg(0, s(X))
   notEq_in_gg(s(X), 0) -> notEq_out_gg(s(X), 0)
   notEq_in_gg(s(X), s(Y)) -> U15_gg(X, Y, notEq_in_gg(X, Y))
   U14_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U15_gg(X, Y, notEq_out_gg(X, Y)) -> notEq_out_gg(s(X), s(Y))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

s(x1)  =  s(x1)

0  =  0

notEq_in_gg(x1, x2)  =  notEq_in_gg(x1, x2)

notEq_out_gg(x1, x2)  =  notEq_out_gg

U15_gg(x1, x2, x3)  =  U15_gg(x3)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

NOATTACK_IN_GGG(x1, x2, x3)  =  NOATTACK_IN_GGG(x1, x2, x3)

U8_GGG(x1, x2, x3, x4, x5)  =  U8_GGG(x1, x2, x3, x4, x5)

U9_GGG(x1, x2, x3, x4, x5)  =  U9_GGG(x1, x2, x3, x4, x5)

U10_GGG(x1, x2, x3, x4, x5, x6)  =  U10_GGG(x1, x2, x3, x4, x6)

U11_GGG(x1, x2, x3, x4, x5, x6)  =  U11_GGG(x1, x2, x3, x4, x6)

U12_GGG(x1, x2, x3, x4, x5)  =  U12_GGG(x1, x3, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(24) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGG(X, F, T, N, notEq_out_gg) -> U9_GGG(X, F, T, N, add_in_gga(F, N))
   U9_GGG(X, F, T, N, add_out_gga(FplusN)) -> U10_GGG(X, F, T, N, notEq_in_gg(X, FplusN))
   U10_GGG(X, F, T, N, notEq_out_gg) -> U11_GGG(X, F, T, N, add_in_gga(X, N))
   U11_GGG(X, F, T, N, add_out_gga(XplusN)) -> U12_GGG(X, T, N, notEq_in_gg(F, XplusN))
   U12_GGG(X, T, N, notEq_out_gg) -> NOATTACK_IN_GGG(X, T, s(N))
   NOATTACK_IN_GGG(X, .(F, T), N) -> U8_GGG(X, F, T, N, notEq_in_gg(X, F))

The TRS R consists of the following rules:

   add_in_gga(0, X) -> add_out_gga(X)
   add_in_gga(s(X), Y) -> U14_gga(add_in_gga(X, Y))
   notEq_in_gg(0, s(X)) -> notEq_out_gg
   notEq_in_gg(s(X), 0) -> notEq_out_gg
   notEq_in_gg(s(X), s(Y)) -> U15_gg(notEq_in_gg(X, Y))
   U14_gga(add_out_gga(Z)) -> add_out_gga(s(Z))
   U15_gg(notEq_out_gg) -> notEq_out_gg

The set Q consists of the following terms:

   add_in_gga(x0, x1)
   notEq_in_gg(x0, x1)
   U14_gga(x0)
   U15_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U9_GGG(X, F, T, N, add_out_gga(FplusN)) -> U10_GGG(X, F, T, N, notEq_in_gg(X, FplusN))
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 >= 4


*NOATTACK_IN_GGG(X, .(F, T), N) -> U8_GGG(X, F, T, N, notEq_in_gg(X, F))
The graph contains the following edges 1 >= 1, 2 > 2, 2 > 3, 3 >= 4


*U10_GGG(X, F, T, N, notEq_out_gg) -> U11_GGG(X, F, T, N, add_in_gga(X, N))
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 >= 4


*U8_GGG(X, F, T, N, notEq_out_gg) -> U9_GGG(X, F, T, N, add_in_gga(F, N))
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 >= 4


*U11_GGG(X, F, T, N, add_out_gga(XplusN)) -> U12_GGG(X, T, N, notEq_in_gg(F, XplusN))
The graph contains the following edges 1 >= 1, 3 >= 2, 4 >= 3


*U12_GGG(X, T, N, notEq_out_gg) -> NOATTACK_IN_GGG(X, T, s(N))
The graph contains the following edges 1 >= 1, 2 >= 2


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_G(X, Y, noattack_out_ggg(X, Y, s(0))) -> SAFE_IN_G(Y)
   SAFE_IN_G(.(X, Y)) -> U6_G(X, Y, noattack_in_ggg(X, Y, s(0)))

The TRS R consists of the following rules:

   queens_in_a(Y) -> U1_a(Y, perm_in_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_a(Y, perm_out_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y)) -> U2_a(Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, s(0)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, notEq_in_gg(X, F))
   notEq_in_gg(0, s(X)) -> notEq_out_gg(0, s(X))
   notEq_in_gg(s(X), 0) -> notEq_out_gg(s(X), 0)
   notEq_in_gg(s(X), s(Y)) -> U15_gg(X, Y, notEq_in_gg(X, Y))
   U15_gg(X, Y, notEq_out_gg(X, Y)) -> notEq_out_gg(s(X), s(Y))
   U8_ggg(X, F, T, N, notEq_out_gg(X, F)) -> U9_ggg(X, F, T, N, add_in_gga(F, N, FplusN))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   add_in_gga(s(X), Y, s(Z)) -> U14_gga(X, Y, Z, add_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U9_ggg(X, F, T, N, add_out_gga(F, N, FplusN)) -> U10_ggg(X, F, T, N, FplusN, notEq_in_gg(X, FplusN))
   U10_ggg(X, F, T, N, FplusN, notEq_out_gg(X, FplusN)) -> U11_ggg(X, F, T, N, FplusN, add_in_gga(X, N, XplusN))
   U11_ggg(X, F, T, N, FplusN, add_out_gga(X, N, XplusN)) -> U12_ggg(X, F, T, N, notEq_in_gg(F, XplusN))
   U12_ggg(X, F, T, N, notEq_out_gg(F, XplusN)) -> U13_ggg(X, F, T, N, noattack_in_ggg(X, T, s(N)))
   U13_ggg(X, F, T, N, noattack_out_ggg(X, T, s(N))) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, s(0))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_a(Y, safe_out_g(Y)) -> queens_out_a(Y)

The argument filtering Pi contains the following mapping:
queens_in_a(x1)  =  queens_in_a

U1_a(x1, x2)  =  U1_a(x2)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

s(x1)  =  s(x1)

0  =  0

U2_a(x1, x2)  =  U2_a(x1, x2)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

notEq_in_gg(x1, x2)  =  notEq_in_gg(x1, x2)

notEq_out_gg(x1, x2)  =  notEq_out_gg

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U9_ggg(x1, x2, x3, x4, x5)  =  U9_ggg(x1, x2, x3, x4, x5)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U10_ggg(x1, x2, x3, x4, x5, x6)  =  U10_ggg(x1, x2, x3, x4, x6)

U11_ggg(x1, x2, x3, x4, x5, x6)  =  U11_ggg(x1, x2, x3, x4, x6)

U12_ggg(x1, x2, x3, x4, x5)  =  U12_ggg(x1, x3, x4, x5)

U13_ggg(x1, x2, x3, x4, x5)  =  U13_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_a(x1)  =  queens_out_a(x1)

SAFE_IN_G(x1)  =  SAFE_IN_G(x1)

U6_G(x1, x2, x3)  =  U6_G(x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(30)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_G(X, Y, noattack_out_ggg(X, Y, s(0))) -> SAFE_IN_G(Y)
   SAFE_IN_G(.(X, Y)) -> U6_G(X, Y, noattack_in_ggg(X, Y, s(0)))

The TRS R consists of the following rules:

   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, notEq_in_gg(X, F))
   U8_ggg(X, F, T, N, notEq_out_gg(X, F)) -> U9_ggg(X, F, T, N, add_in_gga(F, N, FplusN))
   notEq_in_gg(0, s(X)) -> notEq_out_gg(0, s(X))
   notEq_in_gg(s(X), 0) -> notEq_out_gg(s(X), 0)
   notEq_in_gg(s(X), s(Y)) -> U15_gg(X, Y, notEq_in_gg(X, Y))
   U9_ggg(X, F, T, N, add_out_gga(F, N, FplusN)) -> U10_ggg(X, F, T, N, FplusN, notEq_in_gg(X, FplusN))
   U15_gg(X, Y, notEq_out_gg(X, Y)) -> notEq_out_gg(s(X), s(Y))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   add_in_gga(s(X), Y, s(Z)) -> U14_gga(X, Y, Z, add_in_gga(X, Y, Z))
   U10_ggg(X, F, T, N, FplusN, notEq_out_gg(X, FplusN)) -> U11_ggg(X, F, T, N, FplusN, add_in_gga(X, N, XplusN))
   U14_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U11_ggg(X, F, T, N, FplusN, add_out_gga(X, N, XplusN)) -> U12_ggg(X, F, T, N, notEq_in_gg(F, XplusN))
   U12_ggg(X, F, T, N, notEq_out_gg(F, XplusN)) -> U13_ggg(X, F, T, N, noattack_in_ggg(X, T, s(N)))
   U13_ggg(X, F, T, N, noattack_out_ggg(X, T, s(N))) -> noattack_out_ggg(X, .(F, T), N)

The argument filtering Pi contains the following mapping:
[]  =  []

.(x1, x2)  =  .(x1, x2)

s(x1)  =  s(x1)

0  =  0

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

notEq_in_gg(x1, x2)  =  notEq_in_gg(x1, x2)

notEq_out_gg(x1, x2)  =  notEq_out_gg

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U9_ggg(x1, x2, x3, x4, x5)  =  U9_ggg(x1, x2, x3, x4, x5)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U10_ggg(x1, x2, x3, x4, x5, x6)  =  U10_ggg(x1, x2, x3, x4, x6)

U11_ggg(x1, x2, x3, x4, x5, x6)  =  U11_ggg(x1, x2, x3, x4, x6)

U12_ggg(x1, x2, x3, x4, x5)  =  U12_ggg(x1, x3, x4, x5)

U13_ggg(x1, x2, x3, x4, x5)  =  U13_ggg(x5)

SAFE_IN_G(x1)  =  SAFE_IN_G(x1)

U6_G(x1, x2, x3)  =  U6_G(x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(31) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_G(Y, noattack_out_ggg) -> SAFE_IN_G(Y)
   SAFE_IN_G(.(X, Y)) -> U6_G(Y, noattack_in_ggg(X, Y, s(0)))

The TRS R consists of the following rules:

   noattack_in_ggg(X, [], N) -> noattack_out_ggg
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, notEq_in_gg(X, F))
   U8_ggg(X, F, T, N, notEq_out_gg) -> U9_ggg(X, F, T, N, add_in_gga(F, N))
   notEq_in_gg(0, s(X)) -> notEq_out_gg
   notEq_in_gg(s(X), 0) -> notEq_out_gg
   notEq_in_gg(s(X), s(Y)) -> U15_gg(notEq_in_gg(X, Y))
   U9_ggg(X, F, T, N, add_out_gga(FplusN)) -> U10_ggg(X, F, T, N, notEq_in_gg(X, FplusN))
   U15_gg(notEq_out_gg) -> notEq_out_gg
   add_in_gga(0, X) -> add_out_gga(X)
   add_in_gga(s(X), Y) -> U14_gga(add_in_gga(X, Y))
   U10_ggg(X, F, T, N, notEq_out_gg) -> U11_ggg(X, F, T, N, add_in_gga(X, N))
   U14_gga(add_out_gga(Z)) -> add_out_gga(s(Z))
   U11_ggg(X, F, T, N, add_out_gga(XplusN)) -> U12_ggg(X, T, N, notEq_in_gg(F, XplusN))
   U12_ggg(X, T, N, notEq_out_gg) -> U13_ggg(noattack_in_ggg(X, T, s(N)))
   U13_ggg(noattack_out_ggg) -> noattack_out_ggg

The set Q consists of the following terms:

   noattack_in_ggg(x0, x1, x2)
   U8_ggg(x0, x1, x2, x3, x4)
   notEq_in_gg(x0, x1)
   U9_ggg(x0, x1, x2, x3, x4)
   U15_gg(x0)
   add_in_gga(x0, x1)
   U10_ggg(x0, x1, x2, x3, x4)
   U14_gga(x0)
   U11_ggg(x0, x1, x2, x3, x4)
   U12_ggg(x0, x1, x2, x3)
   U13_ggg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(33) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SAFE_IN_G(.(X, Y)) -> U6_G(Y, noattack_in_ggg(X, Y, s(0)))
The graph contains the following edges 1 > 1


*U6_G(Y, noattack_out_ggg) -> SAFE_IN_G(Y)
The graph contains the following edges 1 >= 1


----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DELETE_IN_AGA(X, .(F, T), .(F, R)) -> DELETE_IN_AGA(X, T, R)

The TRS R consists of the following rules:

   queens_in_a(Y) -> U1_a(Y, perm_in_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_a(Y, perm_out_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y)) -> U2_a(Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, s(0)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, notEq_in_gg(X, F))
   notEq_in_gg(0, s(X)) -> notEq_out_gg(0, s(X))
   notEq_in_gg(s(X), 0) -> notEq_out_gg(s(X), 0)
   notEq_in_gg(s(X), s(Y)) -> U15_gg(X, Y, notEq_in_gg(X, Y))
   U15_gg(X, Y, notEq_out_gg(X, Y)) -> notEq_out_gg(s(X), s(Y))
   U8_ggg(X, F, T, N, notEq_out_gg(X, F)) -> U9_ggg(X, F, T, N, add_in_gga(F, N, FplusN))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   add_in_gga(s(X), Y, s(Z)) -> U14_gga(X, Y, Z, add_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U9_ggg(X, F, T, N, add_out_gga(F, N, FplusN)) -> U10_ggg(X, F, T, N, FplusN, notEq_in_gg(X, FplusN))
   U10_ggg(X, F, T, N, FplusN, notEq_out_gg(X, FplusN)) -> U11_ggg(X, F, T, N, FplusN, add_in_gga(X, N, XplusN))
   U11_ggg(X, F, T, N, FplusN, add_out_gga(X, N, XplusN)) -> U12_ggg(X, F, T, N, notEq_in_gg(F, XplusN))
   U12_ggg(X, F, T, N, notEq_out_gg(F, XplusN)) -> U13_ggg(X, F, T, N, noattack_in_ggg(X, T, s(N)))
   U13_ggg(X, F, T, N, noattack_out_ggg(X, T, s(N))) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, s(0))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_a(Y, safe_out_g(Y)) -> queens_out_a(Y)

The argument filtering Pi contains the following mapping:
queens_in_a(x1)  =  queens_in_a

U1_a(x1, x2)  =  U1_a(x2)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

s(x1)  =  s(x1)

0  =  0

U2_a(x1, x2)  =  U2_a(x1, x2)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

notEq_in_gg(x1, x2)  =  notEq_in_gg(x1, x2)

notEq_out_gg(x1, x2)  =  notEq_out_gg

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U9_ggg(x1, x2, x3, x4, x5)  =  U9_ggg(x1, x2, x3, x4, x5)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U10_ggg(x1, x2, x3, x4, x5, x6)  =  U10_ggg(x1, x2, x3, x4, x6)

U11_ggg(x1, x2, x3, x4, x5, x6)  =  U11_ggg(x1, x2, x3, x4, x6)

U12_ggg(x1, x2, x3, x4, x5)  =  U12_ggg(x1, x3, x4, x5)

U13_ggg(x1, x2, x3, x4, x5)  =  U13_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_a(x1)  =  queens_out_a(x1)

DELETE_IN_AGA(x1, x2, x3)  =  DELETE_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(36) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(37)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DELETE_IN_AGA(X, .(F, T), .(F, R)) -> DELETE_IN_AGA(X, T, R)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

DELETE_IN_AGA(x1, x2, x3)  =  DELETE_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(38) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DELETE_IN_AGA(.(F, T)) -> DELETE_IN_AGA(T)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(40) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DELETE_IN_AGA(.(F, T)) -> DELETE_IN_AGA(T)
The graph contains the following edges 1 > 1


----------------------------------------

(41)
YES

----------------------------------------

(42)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U3_GA(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> PERM_IN_GA(Rest, Res)
   PERM_IN_GA(.(X, Y), .(V, Res)) -> U3_GA(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))

The TRS R consists of the following rules:

   queens_in_a(Y) -> U1_a(Y, perm_in_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_a(Y, perm_out_ga(.(s(0), .(s(s(0)), .(s(s(s(0))), .(s(s(s(s(0)))), .(s(s(s(s(s(0))))), .(s(s(s(s(s(s(0)))))), .(s(s(s(s(s(s(s(0))))))), .(s(s(s(s(s(s(s(s(0)))))))), [])))))))), Y)) -> U2_a(Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, s(0)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, notEq_in_gg(X, F))
   notEq_in_gg(0, s(X)) -> notEq_out_gg(0, s(X))
   notEq_in_gg(s(X), 0) -> notEq_out_gg(s(X), 0)
   notEq_in_gg(s(X), s(Y)) -> U15_gg(X, Y, notEq_in_gg(X, Y))
   U15_gg(X, Y, notEq_out_gg(X, Y)) -> notEq_out_gg(s(X), s(Y))
   U8_ggg(X, F, T, N, notEq_out_gg(X, F)) -> U9_ggg(X, F, T, N, add_in_gga(F, N, FplusN))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   add_in_gga(s(X), Y, s(Z)) -> U14_gga(X, Y, Z, add_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U9_ggg(X, F, T, N, add_out_gga(F, N, FplusN)) -> U10_ggg(X, F, T, N, FplusN, notEq_in_gg(X, FplusN))
   U10_ggg(X, F, T, N, FplusN, notEq_out_gg(X, FplusN)) -> U11_ggg(X, F, T, N, FplusN, add_in_gga(X, N, XplusN))
   U11_ggg(X, F, T, N, FplusN, add_out_gga(X, N, XplusN)) -> U12_ggg(X, F, T, N, notEq_in_gg(F, XplusN))
   U12_ggg(X, F, T, N, notEq_out_gg(F, XplusN)) -> U13_ggg(X, F, T, N, noattack_in_ggg(X, T, s(N)))
   U13_ggg(X, F, T, N, noattack_out_ggg(X, T, s(N))) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, s(0))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_a(Y, safe_out_g(Y)) -> queens_out_a(Y)

The argument filtering Pi contains the following mapping:
queens_in_a(x1)  =  queens_in_a

U1_a(x1, x2)  =  U1_a(x2)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

s(x1)  =  s(x1)

0  =  0

U2_a(x1, x2)  =  U2_a(x1, x2)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

notEq_in_gg(x1, x2)  =  notEq_in_gg(x1, x2)

notEq_out_gg(x1, x2)  =  notEq_out_gg

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U9_ggg(x1, x2, x3, x4, x5)  =  U9_ggg(x1, x2, x3, x4, x5)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U10_ggg(x1, x2, x3, x4, x5, x6)  =  U10_ggg(x1, x2, x3, x4, x6)

U11_ggg(x1, x2, x3, x4, x5, x6)  =  U11_ggg(x1, x2, x3, x4, x6)

U12_ggg(x1, x2, x3, x4, x5)  =  U12_ggg(x1, x3, x4, x5)

U13_ggg(x1, x2, x3, x4, x5)  =  U13_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_a(x1)  =  queens_out_a(x1)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(43) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(44)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U3_GA(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> PERM_IN_GA(Rest, Res)
   PERM_IN_GA(.(X, Y), .(V, Res)) -> U3_GA(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))

The TRS R consists of the following rules:

   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(45) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GA(delete_out_aga(V, Rest)) -> PERM_IN_GA(Rest)
   PERM_IN_GA(.(X, Y)) -> U3_GA(delete_in_aga(.(X, Y)))

The TRS R consists of the following rules:

   delete_in_aga(.(X, Y)) -> delete_out_aga(X, Y)
   delete_in_aga(.(F, T)) -> U5_aga(F, delete_in_aga(T))
   U5_aga(F, delete_out_aga(X, R)) -> delete_out_aga(X, .(F, R))

The set Q consists of the following terms:

   delete_in_aga(x0)
   U5_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(47) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U3_GA(delete_out_aga(V, Rest)) -> PERM_IN_GA(Rest)
   PERM_IN_GA(.(X, Y)) -> U3_GA(delete_in_aga(.(X, Y)))

Strictly oriented rules of the TRS R:

   delete_in_aga(.(X, Y)) -> delete_out_aga(X, Y)
   delete_in_aga(.(F, T)) -> U5_aga(F, delete_in_aga(T))
   U5_aga(F, delete_out_aga(X, R)) -> delete_out_aga(X, .(F, R))

Used ordering: Knuth-Bendix order [KBO] with precedence:._2 > delete_in_aga_1 > U5_aga_2 > U3_GA_1 > PERM_IN_GA_1 > delete_out_aga_2

and weight map:

   delete_in_aga_1=1
   U3_GA_1=1
   PERM_IN_GA_1=3
   ._2=0
   delete_out_aga_2=1
   U5_aga_2=0

The variable weight is 1

----------------------------------------

(48)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   delete_in_aga(x0)
   U5_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(49) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(50)
YES
