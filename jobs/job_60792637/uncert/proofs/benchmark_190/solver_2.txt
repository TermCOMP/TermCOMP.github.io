YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/igTQl.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

goal(g,a,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) PiDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) PiDP
        (24) PiDPToQDPProof [SOUND, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
Clauses:

goal(A, B, C) :- ','(s2t(A, T), tapplast(T, B, C)).
tapplast(L, X, Last) :- ','(tappend(L, node(nil, X, nil), LX), tlast(Last, LX)).
tlast(X, node(nil, X, nil)).
tlast(X, node(L, H, R)) :- tlast(X, L).
tlast(X, node(L, H, R)) :- tlast(X, R).
tappend(nil, T, T).
tappend(node(nil, X, T2), T1, node(T1, X, T2)).
tappend(node(T1, X, nil), T2, node(T1, X, T2)).
tappend(node(T1, X, T2), T3, node(U, X, T2)) :- tappend(T1, T3, U).
tappend(node(T1, X, T2), T3, node(T1, X, U)) :- tappend(T2, T3, U).
s2t(s(X), node(T, Y, T)) :- s2t(X, T).
s2t(s(X), node(nil, Y, T)) :- s2t(X, T).
s2t(s(X), node(T, Y, nil)) :- s2t(X, T).
s2t(s(X), node(nil, Y, nil)).
s2t(0, nil).


Query: goal(g,a,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

goal_in_3: (b,f,f)

s2t_in_2: (b,f)

tapplast_in_3: (b,f,f)

tappend_in_3: (b,b,f)

tlast_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   goal_in_gaa(A, B, C) -> U1_gaa(A, B, C, s2t_in_ga(A, T))
   s2t_in_ga(s(X), node(T, Y, T)) -> U9_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, T)) -> U10_ga(X, Y, T, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, nil)) -> U11_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, nil)) -> s2t_out_ga(s(X), node(nil, Y, nil))
   s2t_in_ga(0, nil) -> s2t_out_ga(0, nil)
   U11_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, nil))
   U10_ga(X, Y, T, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(nil, Y, T))
   U9_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, T))
   U1_gaa(A, B, C, s2t_out_ga(A, T)) -> U2_gaa(A, B, C, tapplast_in_gaa(T, B, C))
   tapplast_in_gaa(L, X, Last) -> U3_gaa(L, X, Last, tappend_in_gga(L, node(nil, X, nil), LX))
   tappend_in_gga(nil, T, T) -> tappend_out_gga(nil, T, T)
   tappend_in_gga(node(nil, X, T2), T1, node(T1, X, T2)) -> tappend_out_gga(node(nil, X, T2), T1, node(T1, X, T2))
   tappend_in_gga(node(T1, X, nil), T2, node(T1, X, T2)) -> tappend_out_gga(node(T1, X, nil), T2, node(T1, X, T2))
   tappend_in_gga(node(T1, X, T2), T3, node(U, X, T2)) -> U7_gga(T1, X, T2, T3, U, tappend_in_gga(T1, T3, U))
   tappend_in_gga(node(T1, X, T2), T3, node(T1, X, U)) -> U8_gga(T1, X, T2, T3, U, tappend_in_gga(T2, T3, U))
   U8_gga(T1, X, T2, T3, U, tappend_out_gga(T2, T3, U)) -> tappend_out_gga(node(T1, X, T2), T3, node(T1, X, U))
   U7_gga(T1, X, T2, T3, U, tappend_out_gga(T1, T3, U)) -> tappend_out_gga(node(T1, X, T2), T3, node(U, X, T2))
   U3_gaa(L, X, Last, tappend_out_gga(L, node(nil, X, nil), LX)) -> U4_gaa(L, X, Last, tlast_in_ag(Last, LX))
   tlast_in_ag(X, node(nil, X, nil)) -> tlast_out_ag(X, node(nil, X, nil))
   tlast_in_ag(X, node(L, H, R)) -> U5_ag(X, L, H, R, tlast_in_ag(X, L))
   tlast_in_ag(X, node(L, H, R)) -> U6_ag(X, L, H, R, tlast_in_ag(X, R))
   U6_ag(X, L, H, R, tlast_out_ag(X, R)) -> tlast_out_ag(X, node(L, H, R))
   U5_ag(X, L, H, R, tlast_out_ag(X, L)) -> tlast_out_ag(X, node(L, H, R))
   U4_gaa(L, X, Last, tlast_out_ag(Last, LX)) -> tapplast_out_gaa(L, X, Last)
   U2_gaa(A, B, C, tapplast_out_gaa(T, B, C)) -> goal_out_gaa(A, B, C)

The argument filtering Pi contains the following mapping:
goal_in_gaa(x1, x2, x3)  =  goal_in_gaa(x1)

U1_gaa(x1, x2, x3, x4)  =  U1_gaa(x1, x4)

s2t_in_ga(x1, x2)  =  s2t_in_ga(x1)

s(x1)  =  s(x1)

U9_ga(x1, x2, x3, x4)  =  U9_ga(x1, x4)

U10_ga(x1, x2, x3, x4)  =  U10_ga(x1, x4)

U11_ga(x1, x2, x3, x4)  =  U11_ga(x1, x4)

s2t_out_ga(x1, x2)  =  s2t_out_ga(x1, x2)

node(x1, x2, x3)  =  node(x1, x3)

0  =  0

U2_gaa(x1, x2, x3, x4)  =  U2_gaa(x1, x4)

tapplast_in_gaa(x1, x2, x3)  =  tapplast_in_gaa(x1)

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x1, x4)

tappend_in_gga(x1, x2, x3)  =  tappend_in_gga(x1, x2)

nil  =  nil

tappend_out_gga(x1, x2, x3)  =  tappend_out_gga(x1, x2, x3)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x3, x4, x6)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x3, x4, x6)

U4_gaa(x1, x2, x3, x4)  =  U4_gaa(x1, x4)

tlast_in_ag(x1, x2)  =  tlast_in_ag(x2)

tlast_out_ag(x1, x2)  =  tlast_out_ag(x2)

U5_ag(x1, x2, x3, x4, x5)  =  U5_ag(x2, x4, x5)

U6_ag(x1, x2, x3, x4, x5)  =  U6_ag(x2, x4, x5)

tapplast_out_gaa(x1, x2, x3)  =  tapplast_out_gaa(x1)

goal_out_gaa(x1, x2, x3)  =  goal_out_gaa(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   goal_in_gaa(A, B, C) -> U1_gaa(A, B, C, s2t_in_ga(A, T))
   s2t_in_ga(s(X), node(T, Y, T)) -> U9_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, T)) -> U10_ga(X, Y, T, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, nil)) -> U11_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, nil)) -> s2t_out_ga(s(X), node(nil, Y, nil))
   s2t_in_ga(0, nil) -> s2t_out_ga(0, nil)
   U11_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, nil))
   U10_ga(X, Y, T, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(nil, Y, T))
   U9_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, T))
   U1_gaa(A, B, C, s2t_out_ga(A, T)) -> U2_gaa(A, B, C, tapplast_in_gaa(T, B, C))
   tapplast_in_gaa(L, X, Last) -> U3_gaa(L, X, Last, tappend_in_gga(L, node(nil, X, nil), LX))
   tappend_in_gga(nil, T, T) -> tappend_out_gga(nil, T, T)
   tappend_in_gga(node(nil, X, T2), T1, node(T1, X, T2)) -> tappend_out_gga(node(nil, X, T2), T1, node(T1, X, T2))
   tappend_in_gga(node(T1, X, nil), T2, node(T1, X, T2)) -> tappend_out_gga(node(T1, X, nil), T2, node(T1, X, T2))
   tappend_in_gga(node(T1, X, T2), T3, node(U, X, T2)) -> U7_gga(T1, X, T2, T3, U, tappend_in_gga(T1, T3, U))
   tappend_in_gga(node(T1, X, T2), T3, node(T1, X, U)) -> U8_gga(T1, X, T2, T3, U, tappend_in_gga(T2, T3, U))
   U8_gga(T1, X, T2, T3, U, tappend_out_gga(T2, T3, U)) -> tappend_out_gga(node(T1, X, T2), T3, node(T1, X, U))
   U7_gga(T1, X, T2, T3, U, tappend_out_gga(T1, T3, U)) -> tappend_out_gga(node(T1, X, T2), T3, node(U, X, T2))
   U3_gaa(L, X, Last, tappend_out_gga(L, node(nil, X, nil), LX)) -> U4_gaa(L, X, Last, tlast_in_ag(Last, LX))
   tlast_in_ag(X, node(nil, X, nil)) -> tlast_out_ag(X, node(nil, X, nil))
   tlast_in_ag(X, node(L, H, R)) -> U5_ag(X, L, H, R, tlast_in_ag(X, L))
   tlast_in_ag(X, node(L, H, R)) -> U6_ag(X, L, H, R, tlast_in_ag(X, R))
   U6_ag(X, L, H, R, tlast_out_ag(X, R)) -> tlast_out_ag(X, node(L, H, R))
   U5_ag(X, L, H, R, tlast_out_ag(X, L)) -> tlast_out_ag(X, node(L, H, R))
   U4_gaa(L, X, Last, tlast_out_ag(Last, LX)) -> tapplast_out_gaa(L, X, Last)
   U2_gaa(A, B, C, tapplast_out_gaa(T, B, C)) -> goal_out_gaa(A, B, C)

The argument filtering Pi contains the following mapping:
goal_in_gaa(x1, x2, x3)  =  goal_in_gaa(x1)

U1_gaa(x1, x2, x3, x4)  =  U1_gaa(x1, x4)

s2t_in_ga(x1, x2)  =  s2t_in_ga(x1)

s(x1)  =  s(x1)

U9_ga(x1, x2, x3, x4)  =  U9_ga(x1, x4)

U10_ga(x1, x2, x3, x4)  =  U10_ga(x1, x4)

U11_ga(x1, x2, x3, x4)  =  U11_ga(x1, x4)

s2t_out_ga(x1, x2)  =  s2t_out_ga(x1, x2)

node(x1, x2, x3)  =  node(x1, x3)

0  =  0

U2_gaa(x1, x2, x3, x4)  =  U2_gaa(x1, x4)

tapplast_in_gaa(x1, x2, x3)  =  tapplast_in_gaa(x1)

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x1, x4)

tappend_in_gga(x1, x2, x3)  =  tappend_in_gga(x1, x2)

nil  =  nil

tappend_out_gga(x1, x2, x3)  =  tappend_out_gga(x1, x2, x3)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x3, x4, x6)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x3, x4, x6)

U4_gaa(x1, x2, x3, x4)  =  U4_gaa(x1, x4)

tlast_in_ag(x1, x2)  =  tlast_in_ag(x2)

tlast_out_ag(x1, x2)  =  tlast_out_ag(x2)

U5_ag(x1, x2, x3, x4, x5)  =  U5_ag(x2, x4, x5)

U6_ag(x1, x2, x3, x4, x5)  =  U6_ag(x2, x4, x5)

tapplast_out_gaa(x1, x2, x3)  =  tapplast_out_gaa(x1)

goal_out_gaa(x1, x2, x3)  =  goal_out_gaa(x1)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   GOAL_IN_GAA(A, B, C) -> U1_GAA(A, B, C, s2t_in_ga(A, T))
   GOAL_IN_GAA(A, B, C) -> S2T_IN_GA(A, T)
   S2T_IN_GA(s(X), node(T, Y, T)) -> U9_GA(X, T, Y, s2t_in_ga(X, T))
   S2T_IN_GA(s(X), node(T, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(nil, Y, T)) -> U10_GA(X, Y, T, s2t_in_ga(X, T))
   S2T_IN_GA(s(X), node(nil, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, nil)) -> U11_GA(X, T, Y, s2t_in_ga(X, T))
   S2T_IN_GA(s(X), node(T, Y, nil)) -> S2T_IN_GA(X, T)
   U1_GAA(A, B, C, s2t_out_ga(A, T)) -> U2_GAA(A, B, C, tapplast_in_gaa(T, B, C))
   U1_GAA(A, B, C, s2t_out_ga(A, T)) -> TAPPLAST_IN_GAA(T, B, C)
   TAPPLAST_IN_GAA(L, X, Last) -> U3_GAA(L, X, Last, tappend_in_gga(L, node(nil, X, nil), LX))
   TAPPLAST_IN_GAA(L, X, Last) -> TAPPEND_IN_GGA(L, node(nil, X, nil), LX)
   TAPPEND_IN_GGA(node(T1, X, T2), T3, node(U, X, T2)) -> U7_GGA(T1, X, T2, T3, U, tappend_in_gga(T1, T3, U))
   TAPPEND_IN_GGA(node(T1, X, T2), T3, node(U, X, T2)) -> TAPPEND_IN_GGA(T1, T3, U)
   TAPPEND_IN_GGA(node(T1, X, T2), T3, node(T1, X, U)) -> U8_GGA(T1, X, T2, T3, U, tappend_in_gga(T2, T3, U))
   TAPPEND_IN_GGA(node(T1, X, T2), T3, node(T1, X, U)) -> TAPPEND_IN_GGA(T2, T3, U)
   U3_GAA(L, X, Last, tappend_out_gga(L, node(nil, X, nil), LX)) -> U4_GAA(L, X, Last, tlast_in_ag(Last, LX))
   U3_GAA(L, X, Last, tappend_out_gga(L, node(nil, X, nil), LX)) -> TLAST_IN_AG(Last, LX)
   TLAST_IN_AG(X, node(L, H, R)) -> U5_AG(X, L, H, R, tlast_in_ag(X, L))
   TLAST_IN_AG(X, node(L, H, R)) -> TLAST_IN_AG(X, L)
   TLAST_IN_AG(X, node(L, H, R)) -> U6_AG(X, L, H, R, tlast_in_ag(X, R))
   TLAST_IN_AG(X, node(L, H, R)) -> TLAST_IN_AG(X, R)

The TRS R consists of the following rules:

   goal_in_gaa(A, B, C) -> U1_gaa(A, B, C, s2t_in_ga(A, T))
   s2t_in_ga(s(X), node(T, Y, T)) -> U9_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, T)) -> U10_ga(X, Y, T, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, nil)) -> U11_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, nil)) -> s2t_out_ga(s(X), node(nil, Y, nil))
   s2t_in_ga(0, nil) -> s2t_out_ga(0, nil)
   U11_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, nil))
   U10_ga(X, Y, T, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(nil, Y, T))
   U9_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, T))
   U1_gaa(A, B, C, s2t_out_ga(A, T)) -> U2_gaa(A, B, C, tapplast_in_gaa(T, B, C))
   tapplast_in_gaa(L, X, Last) -> U3_gaa(L, X, Last, tappend_in_gga(L, node(nil, X, nil), LX))
   tappend_in_gga(nil, T, T) -> tappend_out_gga(nil, T, T)
   tappend_in_gga(node(nil, X, T2), T1, node(T1, X, T2)) -> tappend_out_gga(node(nil, X, T2), T1, node(T1, X, T2))
   tappend_in_gga(node(T1, X, nil), T2, node(T1, X, T2)) -> tappend_out_gga(node(T1, X, nil), T2, node(T1, X, T2))
   tappend_in_gga(node(T1, X, T2), T3, node(U, X, T2)) -> U7_gga(T1, X, T2, T3, U, tappend_in_gga(T1, T3, U))
   tappend_in_gga(node(T1, X, T2), T3, node(T1, X, U)) -> U8_gga(T1, X, T2, T3, U, tappend_in_gga(T2, T3, U))
   U8_gga(T1, X, T2, T3, U, tappend_out_gga(T2, T3, U)) -> tappend_out_gga(node(T1, X, T2), T3, node(T1, X, U))
   U7_gga(T1, X, T2, T3, U, tappend_out_gga(T1, T3, U)) -> tappend_out_gga(node(T1, X, T2), T3, node(U, X, T2))
   U3_gaa(L, X, Last, tappend_out_gga(L, node(nil, X, nil), LX)) -> U4_gaa(L, X, Last, tlast_in_ag(Last, LX))
   tlast_in_ag(X, node(nil, X, nil)) -> tlast_out_ag(X, node(nil, X, nil))
   tlast_in_ag(X, node(L, H, R)) -> U5_ag(X, L, H, R, tlast_in_ag(X, L))
   tlast_in_ag(X, node(L, H, R)) -> U6_ag(X, L, H, R, tlast_in_ag(X, R))
   U6_ag(X, L, H, R, tlast_out_ag(X, R)) -> tlast_out_ag(X, node(L, H, R))
   U5_ag(X, L, H, R, tlast_out_ag(X, L)) -> tlast_out_ag(X, node(L, H, R))
   U4_gaa(L, X, Last, tlast_out_ag(Last, LX)) -> tapplast_out_gaa(L, X, Last)
   U2_gaa(A, B, C, tapplast_out_gaa(T, B, C)) -> goal_out_gaa(A, B, C)

The argument filtering Pi contains the following mapping:
goal_in_gaa(x1, x2, x3)  =  goal_in_gaa(x1)

U1_gaa(x1, x2, x3, x4)  =  U1_gaa(x1, x4)

s2t_in_ga(x1, x2)  =  s2t_in_ga(x1)

s(x1)  =  s(x1)

U9_ga(x1, x2, x3, x4)  =  U9_ga(x1, x4)

U10_ga(x1, x2, x3, x4)  =  U10_ga(x1, x4)

U11_ga(x1, x2, x3, x4)  =  U11_ga(x1, x4)

s2t_out_ga(x1, x2)  =  s2t_out_ga(x1, x2)

node(x1, x2, x3)  =  node(x1, x3)

0  =  0

U2_gaa(x1, x2, x3, x4)  =  U2_gaa(x1, x4)

tapplast_in_gaa(x1, x2, x3)  =  tapplast_in_gaa(x1)

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x1, x4)

tappend_in_gga(x1, x2, x3)  =  tappend_in_gga(x1, x2)

nil  =  nil

tappend_out_gga(x1, x2, x3)  =  tappend_out_gga(x1, x2, x3)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x3, x4, x6)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x3, x4, x6)

U4_gaa(x1, x2, x3, x4)  =  U4_gaa(x1, x4)

tlast_in_ag(x1, x2)  =  tlast_in_ag(x2)

tlast_out_ag(x1, x2)  =  tlast_out_ag(x2)

U5_ag(x1, x2, x3, x4, x5)  =  U5_ag(x2, x4, x5)

U6_ag(x1, x2, x3, x4, x5)  =  U6_ag(x2, x4, x5)

tapplast_out_gaa(x1, x2, x3)  =  tapplast_out_gaa(x1)

goal_out_gaa(x1, x2, x3)  =  goal_out_gaa(x1)

GOAL_IN_GAA(x1, x2, x3)  =  GOAL_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4)  =  U1_GAA(x1, x4)

S2T_IN_GA(x1, x2)  =  S2T_IN_GA(x1)

U9_GA(x1, x2, x3, x4)  =  U9_GA(x1, x4)

U10_GA(x1, x2, x3, x4)  =  U10_GA(x1, x4)

U11_GA(x1, x2, x3, x4)  =  U11_GA(x1, x4)

U2_GAA(x1, x2, x3, x4)  =  U2_GAA(x1, x4)

TAPPLAST_IN_GAA(x1, x2, x3)  =  TAPPLAST_IN_GAA(x1)

U3_GAA(x1, x2, x3, x4)  =  U3_GAA(x1, x4)

TAPPEND_IN_GGA(x1, x2, x3)  =  TAPPEND_IN_GGA(x1, x2)

U7_GGA(x1, x2, x3, x4, x5, x6)  =  U7_GGA(x1, x3, x4, x6)

U8_GGA(x1, x2, x3, x4, x5, x6)  =  U8_GGA(x1, x3, x4, x6)

U4_GAA(x1, x2, x3, x4)  =  U4_GAA(x1, x4)

TLAST_IN_AG(x1, x2)  =  TLAST_IN_AG(x2)

U5_AG(x1, x2, x3, x4, x5)  =  U5_AG(x2, x4, x5)

U6_AG(x1, x2, x3, x4, x5)  =  U6_AG(x2, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GOAL_IN_GAA(A, B, C) -> U1_GAA(A, B, C, s2t_in_ga(A, T))
   GOAL_IN_GAA(A, B, C) -> S2T_IN_GA(A, T)
   S2T_IN_GA(s(X), node(T, Y, T)) -> U9_GA(X, T, Y, s2t_in_ga(X, T))
   S2T_IN_GA(s(X), node(T, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(nil, Y, T)) -> U10_GA(X, Y, T, s2t_in_ga(X, T))
   S2T_IN_GA(s(X), node(nil, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, nil)) -> U11_GA(X, T, Y, s2t_in_ga(X, T))
   S2T_IN_GA(s(X), node(T, Y, nil)) -> S2T_IN_GA(X, T)
   U1_GAA(A, B, C, s2t_out_ga(A, T)) -> U2_GAA(A, B, C, tapplast_in_gaa(T, B, C))
   U1_GAA(A, B, C, s2t_out_ga(A, T)) -> TAPPLAST_IN_GAA(T, B, C)
   TAPPLAST_IN_GAA(L, X, Last) -> U3_GAA(L, X, Last, tappend_in_gga(L, node(nil, X, nil), LX))
   TAPPLAST_IN_GAA(L, X, Last) -> TAPPEND_IN_GGA(L, node(nil, X, nil), LX)
   TAPPEND_IN_GGA(node(T1, X, T2), T3, node(U, X, T2)) -> U7_GGA(T1, X, T2, T3, U, tappend_in_gga(T1, T3, U))
   TAPPEND_IN_GGA(node(T1, X, T2), T3, node(U, X, T2)) -> TAPPEND_IN_GGA(T1, T3, U)
   TAPPEND_IN_GGA(node(T1, X, T2), T3, node(T1, X, U)) -> U8_GGA(T1, X, T2, T3, U, tappend_in_gga(T2, T3, U))
   TAPPEND_IN_GGA(node(T1, X, T2), T3, node(T1, X, U)) -> TAPPEND_IN_GGA(T2, T3, U)
   U3_GAA(L, X, Last, tappend_out_gga(L, node(nil, X, nil), LX)) -> U4_GAA(L, X, Last, tlast_in_ag(Last, LX))
   U3_GAA(L, X, Last, tappend_out_gga(L, node(nil, X, nil), LX)) -> TLAST_IN_AG(Last, LX)
   TLAST_IN_AG(X, node(L, H, R)) -> U5_AG(X, L, H, R, tlast_in_ag(X, L))
   TLAST_IN_AG(X, node(L, H, R)) -> TLAST_IN_AG(X, L)
   TLAST_IN_AG(X, node(L, H, R)) -> U6_AG(X, L, H, R, tlast_in_ag(X, R))
   TLAST_IN_AG(X, node(L, H, R)) -> TLAST_IN_AG(X, R)

The TRS R consists of the following rules:

   goal_in_gaa(A, B, C) -> U1_gaa(A, B, C, s2t_in_ga(A, T))
   s2t_in_ga(s(X), node(T, Y, T)) -> U9_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, T)) -> U10_ga(X, Y, T, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, nil)) -> U11_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, nil)) -> s2t_out_ga(s(X), node(nil, Y, nil))
   s2t_in_ga(0, nil) -> s2t_out_ga(0, nil)
   U11_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, nil))
   U10_ga(X, Y, T, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(nil, Y, T))
   U9_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, T))
   U1_gaa(A, B, C, s2t_out_ga(A, T)) -> U2_gaa(A, B, C, tapplast_in_gaa(T, B, C))
   tapplast_in_gaa(L, X, Last) -> U3_gaa(L, X, Last, tappend_in_gga(L, node(nil, X, nil), LX))
   tappend_in_gga(nil, T, T) -> tappend_out_gga(nil, T, T)
   tappend_in_gga(node(nil, X, T2), T1, node(T1, X, T2)) -> tappend_out_gga(node(nil, X, T2), T1, node(T1, X, T2))
   tappend_in_gga(node(T1, X, nil), T2, node(T1, X, T2)) -> tappend_out_gga(node(T1, X, nil), T2, node(T1, X, T2))
   tappend_in_gga(node(T1, X, T2), T3, node(U, X, T2)) -> U7_gga(T1, X, T2, T3, U, tappend_in_gga(T1, T3, U))
   tappend_in_gga(node(T1, X, T2), T3, node(T1, X, U)) -> U8_gga(T1, X, T2, T3, U, tappend_in_gga(T2, T3, U))
   U8_gga(T1, X, T2, T3, U, tappend_out_gga(T2, T3, U)) -> tappend_out_gga(node(T1, X, T2), T3, node(T1, X, U))
   U7_gga(T1, X, T2, T3, U, tappend_out_gga(T1, T3, U)) -> tappend_out_gga(node(T1, X, T2), T3, node(U, X, T2))
   U3_gaa(L, X, Last, tappend_out_gga(L, node(nil, X, nil), LX)) -> U4_gaa(L, X, Last, tlast_in_ag(Last, LX))
   tlast_in_ag(X, node(nil, X, nil)) -> tlast_out_ag(X, node(nil, X, nil))
   tlast_in_ag(X, node(L, H, R)) -> U5_ag(X, L, H, R, tlast_in_ag(X, L))
   tlast_in_ag(X, node(L, H, R)) -> U6_ag(X, L, H, R, tlast_in_ag(X, R))
   U6_ag(X, L, H, R, tlast_out_ag(X, R)) -> tlast_out_ag(X, node(L, H, R))
   U5_ag(X, L, H, R, tlast_out_ag(X, L)) -> tlast_out_ag(X, node(L, H, R))
   U4_gaa(L, X, Last, tlast_out_ag(Last, LX)) -> tapplast_out_gaa(L, X, Last)
   U2_gaa(A, B, C, tapplast_out_gaa(T, B, C)) -> goal_out_gaa(A, B, C)

The argument filtering Pi contains the following mapping:
goal_in_gaa(x1, x2, x3)  =  goal_in_gaa(x1)

U1_gaa(x1, x2, x3, x4)  =  U1_gaa(x1, x4)

s2t_in_ga(x1, x2)  =  s2t_in_ga(x1)

s(x1)  =  s(x1)

U9_ga(x1, x2, x3, x4)  =  U9_ga(x1, x4)

U10_ga(x1, x2, x3, x4)  =  U10_ga(x1, x4)

U11_ga(x1, x2, x3, x4)  =  U11_ga(x1, x4)

s2t_out_ga(x1, x2)  =  s2t_out_ga(x1, x2)

node(x1, x2, x3)  =  node(x1, x3)

0  =  0

U2_gaa(x1, x2, x3, x4)  =  U2_gaa(x1, x4)

tapplast_in_gaa(x1, x2, x3)  =  tapplast_in_gaa(x1)

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x1, x4)

tappend_in_gga(x1, x2, x3)  =  tappend_in_gga(x1, x2)

nil  =  nil

tappend_out_gga(x1, x2, x3)  =  tappend_out_gga(x1, x2, x3)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x3, x4, x6)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x3, x4, x6)

U4_gaa(x1, x2, x3, x4)  =  U4_gaa(x1, x4)

tlast_in_ag(x1, x2)  =  tlast_in_ag(x2)

tlast_out_ag(x1, x2)  =  tlast_out_ag(x2)

U5_ag(x1, x2, x3, x4, x5)  =  U5_ag(x2, x4, x5)

U6_ag(x1, x2, x3, x4, x5)  =  U6_ag(x2, x4, x5)

tapplast_out_gaa(x1, x2, x3)  =  tapplast_out_gaa(x1)

goal_out_gaa(x1, x2, x3)  =  goal_out_gaa(x1)

GOAL_IN_GAA(x1, x2, x3)  =  GOAL_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4)  =  U1_GAA(x1, x4)

S2T_IN_GA(x1, x2)  =  S2T_IN_GA(x1)

U9_GA(x1, x2, x3, x4)  =  U9_GA(x1, x4)

U10_GA(x1, x2, x3, x4)  =  U10_GA(x1, x4)

U11_GA(x1, x2, x3, x4)  =  U11_GA(x1, x4)

U2_GAA(x1, x2, x3, x4)  =  U2_GAA(x1, x4)

TAPPLAST_IN_GAA(x1, x2, x3)  =  TAPPLAST_IN_GAA(x1)

U3_GAA(x1, x2, x3, x4)  =  U3_GAA(x1, x4)

TAPPEND_IN_GGA(x1, x2, x3)  =  TAPPEND_IN_GGA(x1, x2)

U7_GGA(x1, x2, x3, x4, x5, x6)  =  U7_GGA(x1, x3, x4, x6)

U8_GGA(x1, x2, x3, x4, x5, x6)  =  U8_GGA(x1, x3, x4, x6)

U4_GAA(x1, x2, x3, x4)  =  U4_GAA(x1, x4)

TLAST_IN_AG(x1, x2)  =  TLAST_IN_AG(x2)

U5_AG(x1, x2, x3, x4, x5)  =  U5_AG(x2, x4, x5)

U6_AG(x1, x2, x3, x4, x5)  =  U6_AG(x2, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 15 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TLAST_IN_AG(X, node(L, H, R)) -> TLAST_IN_AG(X, R)
   TLAST_IN_AG(X, node(L, H, R)) -> TLAST_IN_AG(X, L)

The TRS R consists of the following rules:

   goal_in_gaa(A, B, C) -> U1_gaa(A, B, C, s2t_in_ga(A, T))
   s2t_in_ga(s(X), node(T, Y, T)) -> U9_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, T)) -> U10_ga(X, Y, T, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, nil)) -> U11_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, nil)) -> s2t_out_ga(s(X), node(nil, Y, nil))
   s2t_in_ga(0, nil) -> s2t_out_ga(0, nil)
   U11_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, nil))
   U10_ga(X, Y, T, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(nil, Y, T))
   U9_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, T))
   U1_gaa(A, B, C, s2t_out_ga(A, T)) -> U2_gaa(A, B, C, tapplast_in_gaa(T, B, C))
   tapplast_in_gaa(L, X, Last) -> U3_gaa(L, X, Last, tappend_in_gga(L, node(nil, X, nil), LX))
   tappend_in_gga(nil, T, T) -> tappend_out_gga(nil, T, T)
   tappend_in_gga(node(nil, X, T2), T1, node(T1, X, T2)) -> tappend_out_gga(node(nil, X, T2), T1, node(T1, X, T2))
   tappend_in_gga(node(T1, X, nil), T2, node(T1, X, T2)) -> tappend_out_gga(node(T1, X, nil), T2, node(T1, X, T2))
   tappend_in_gga(node(T1, X, T2), T3, node(U, X, T2)) -> U7_gga(T1, X, T2, T3, U, tappend_in_gga(T1, T3, U))
   tappend_in_gga(node(T1, X, T2), T3, node(T1, X, U)) -> U8_gga(T1, X, T2, T3, U, tappend_in_gga(T2, T3, U))
   U8_gga(T1, X, T2, T3, U, tappend_out_gga(T2, T3, U)) -> tappend_out_gga(node(T1, X, T2), T3, node(T1, X, U))
   U7_gga(T1, X, T2, T3, U, tappend_out_gga(T1, T3, U)) -> tappend_out_gga(node(T1, X, T2), T3, node(U, X, T2))
   U3_gaa(L, X, Last, tappend_out_gga(L, node(nil, X, nil), LX)) -> U4_gaa(L, X, Last, tlast_in_ag(Last, LX))
   tlast_in_ag(X, node(nil, X, nil)) -> tlast_out_ag(X, node(nil, X, nil))
   tlast_in_ag(X, node(L, H, R)) -> U5_ag(X, L, H, R, tlast_in_ag(X, L))
   tlast_in_ag(X, node(L, H, R)) -> U6_ag(X, L, H, R, tlast_in_ag(X, R))
   U6_ag(X, L, H, R, tlast_out_ag(X, R)) -> tlast_out_ag(X, node(L, H, R))
   U5_ag(X, L, H, R, tlast_out_ag(X, L)) -> tlast_out_ag(X, node(L, H, R))
   U4_gaa(L, X, Last, tlast_out_ag(Last, LX)) -> tapplast_out_gaa(L, X, Last)
   U2_gaa(A, B, C, tapplast_out_gaa(T, B, C)) -> goal_out_gaa(A, B, C)

The argument filtering Pi contains the following mapping:
goal_in_gaa(x1, x2, x3)  =  goal_in_gaa(x1)

U1_gaa(x1, x2, x3, x4)  =  U1_gaa(x1, x4)

s2t_in_ga(x1, x2)  =  s2t_in_ga(x1)

s(x1)  =  s(x1)

U9_ga(x1, x2, x3, x4)  =  U9_ga(x1, x4)

U10_ga(x1, x2, x3, x4)  =  U10_ga(x1, x4)

U11_ga(x1, x2, x3, x4)  =  U11_ga(x1, x4)

s2t_out_ga(x1, x2)  =  s2t_out_ga(x1, x2)

node(x1, x2, x3)  =  node(x1, x3)

0  =  0

U2_gaa(x1, x2, x3, x4)  =  U2_gaa(x1, x4)

tapplast_in_gaa(x1, x2, x3)  =  tapplast_in_gaa(x1)

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x1, x4)

tappend_in_gga(x1, x2, x3)  =  tappend_in_gga(x1, x2)

nil  =  nil

tappend_out_gga(x1, x2, x3)  =  tappend_out_gga(x1, x2, x3)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x3, x4, x6)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x3, x4, x6)

U4_gaa(x1, x2, x3, x4)  =  U4_gaa(x1, x4)

tlast_in_ag(x1, x2)  =  tlast_in_ag(x2)

tlast_out_ag(x1, x2)  =  tlast_out_ag(x2)

U5_ag(x1, x2, x3, x4, x5)  =  U5_ag(x2, x4, x5)

U6_ag(x1, x2, x3, x4, x5)  =  U6_ag(x2, x4, x5)

tapplast_out_gaa(x1, x2, x3)  =  tapplast_out_gaa(x1)

goal_out_gaa(x1, x2, x3)  =  goal_out_gaa(x1)

TLAST_IN_AG(x1, x2)  =  TLAST_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TLAST_IN_AG(X, node(L, H, R)) -> TLAST_IN_AG(X, R)
   TLAST_IN_AG(X, node(L, H, R)) -> TLAST_IN_AG(X, L)

R is empty.
The argument filtering Pi contains the following mapping:
node(x1, x2, x3)  =  node(x1, x3)

TLAST_IN_AG(x1, x2)  =  TLAST_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TLAST_IN_AG(node(L, R)) -> TLAST_IN_AG(R)
   TLAST_IN_AG(node(L, R)) -> TLAST_IN_AG(L)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TLAST_IN_AG(node(L, R)) -> TLAST_IN_AG(R)
The graph contains the following edges 1 > 1


*TLAST_IN_AG(node(L, R)) -> TLAST_IN_AG(L)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TAPPEND_IN_GGA(node(T1, X, T2), T3, node(T1, X, U)) -> TAPPEND_IN_GGA(T2, T3, U)
   TAPPEND_IN_GGA(node(T1, X, T2), T3, node(U, X, T2)) -> TAPPEND_IN_GGA(T1, T3, U)

The TRS R consists of the following rules:

   goal_in_gaa(A, B, C) -> U1_gaa(A, B, C, s2t_in_ga(A, T))
   s2t_in_ga(s(X), node(T, Y, T)) -> U9_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, T)) -> U10_ga(X, Y, T, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, nil)) -> U11_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, nil)) -> s2t_out_ga(s(X), node(nil, Y, nil))
   s2t_in_ga(0, nil) -> s2t_out_ga(0, nil)
   U11_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, nil))
   U10_ga(X, Y, T, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(nil, Y, T))
   U9_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, T))
   U1_gaa(A, B, C, s2t_out_ga(A, T)) -> U2_gaa(A, B, C, tapplast_in_gaa(T, B, C))
   tapplast_in_gaa(L, X, Last) -> U3_gaa(L, X, Last, tappend_in_gga(L, node(nil, X, nil), LX))
   tappend_in_gga(nil, T, T) -> tappend_out_gga(nil, T, T)
   tappend_in_gga(node(nil, X, T2), T1, node(T1, X, T2)) -> tappend_out_gga(node(nil, X, T2), T1, node(T1, X, T2))
   tappend_in_gga(node(T1, X, nil), T2, node(T1, X, T2)) -> tappend_out_gga(node(T1, X, nil), T2, node(T1, X, T2))
   tappend_in_gga(node(T1, X, T2), T3, node(U, X, T2)) -> U7_gga(T1, X, T2, T3, U, tappend_in_gga(T1, T3, U))
   tappend_in_gga(node(T1, X, T2), T3, node(T1, X, U)) -> U8_gga(T1, X, T2, T3, U, tappend_in_gga(T2, T3, U))
   U8_gga(T1, X, T2, T3, U, tappend_out_gga(T2, T3, U)) -> tappend_out_gga(node(T1, X, T2), T3, node(T1, X, U))
   U7_gga(T1, X, T2, T3, U, tappend_out_gga(T1, T3, U)) -> tappend_out_gga(node(T1, X, T2), T3, node(U, X, T2))
   U3_gaa(L, X, Last, tappend_out_gga(L, node(nil, X, nil), LX)) -> U4_gaa(L, X, Last, tlast_in_ag(Last, LX))
   tlast_in_ag(X, node(nil, X, nil)) -> tlast_out_ag(X, node(nil, X, nil))
   tlast_in_ag(X, node(L, H, R)) -> U5_ag(X, L, H, R, tlast_in_ag(X, L))
   tlast_in_ag(X, node(L, H, R)) -> U6_ag(X, L, H, R, tlast_in_ag(X, R))
   U6_ag(X, L, H, R, tlast_out_ag(X, R)) -> tlast_out_ag(X, node(L, H, R))
   U5_ag(X, L, H, R, tlast_out_ag(X, L)) -> tlast_out_ag(X, node(L, H, R))
   U4_gaa(L, X, Last, tlast_out_ag(Last, LX)) -> tapplast_out_gaa(L, X, Last)
   U2_gaa(A, B, C, tapplast_out_gaa(T, B, C)) -> goal_out_gaa(A, B, C)

The argument filtering Pi contains the following mapping:
goal_in_gaa(x1, x2, x3)  =  goal_in_gaa(x1)

U1_gaa(x1, x2, x3, x4)  =  U1_gaa(x1, x4)

s2t_in_ga(x1, x2)  =  s2t_in_ga(x1)

s(x1)  =  s(x1)

U9_ga(x1, x2, x3, x4)  =  U9_ga(x1, x4)

U10_ga(x1, x2, x3, x4)  =  U10_ga(x1, x4)

U11_ga(x1, x2, x3, x4)  =  U11_ga(x1, x4)

s2t_out_ga(x1, x2)  =  s2t_out_ga(x1, x2)

node(x1, x2, x3)  =  node(x1, x3)

0  =  0

U2_gaa(x1, x2, x3, x4)  =  U2_gaa(x1, x4)

tapplast_in_gaa(x1, x2, x3)  =  tapplast_in_gaa(x1)

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x1, x4)

tappend_in_gga(x1, x2, x3)  =  tappend_in_gga(x1, x2)

nil  =  nil

tappend_out_gga(x1, x2, x3)  =  tappend_out_gga(x1, x2, x3)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x3, x4, x6)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x3, x4, x6)

U4_gaa(x1, x2, x3, x4)  =  U4_gaa(x1, x4)

tlast_in_ag(x1, x2)  =  tlast_in_ag(x2)

tlast_out_ag(x1, x2)  =  tlast_out_ag(x2)

U5_ag(x1, x2, x3, x4, x5)  =  U5_ag(x2, x4, x5)

U6_ag(x1, x2, x3, x4, x5)  =  U6_ag(x2, x4, x5)

tapplast_out_gaa(x1, x2, x3)  =  tapplast_out_gaa(x1)

goal_out_gaa(x1, x2, x3)  =  goal_out_gaa(x1)

TAPPEND_IN_GGA(x1, x2, x3)  =  TAPPEND_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TAPPEND_IN_GGA(node(T1, X, T2), T3, node(T1, X, U)) -> TAPPEND_IN_GGA(T2, T3, U)
   TAPPEND_IN_GGA(node(T1, X, T2), T3, node(U, X, T2)) -> TAPPEND_IN_GGA(T1, T3, U)

R is empty.
The argument filtering Pi contains the following mapping:
node(x1, x2, x3)  =  node(x1, x3)

TAPPEND_IN_GGA(x1, x2, x3)  =  TAPPEND_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TAPPEND_IN_GGA(node(T1, T2), T3) -> TAPPEND_IN_GGA(T2, T3)
   TAPPEND_IN_GGA(node(T1, T2), T3) -> TAPPEND_IN_GGA(T1, T3)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TAPPEND_IN_GGA(node(T1, T2), T3) -> TAPPEND_IN_GGA(T2, T3)
The graph contains the following edges 1 > 1, 2 >= 2


*TAPPEND_IN_GGA(node(T1, T2), T3) -> TAPPEND_IN_GGA(T1, T3)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   S2T_IN_GA(s(X), node(nil, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, nil)) -> S2T_IN_GA(X, T)

The TRS R consists of the following rules:

   goal_in_gaa(A, B, C) -> U1_gaa(A, B, C, s2t_in_ga(A, T))
   s2t_in_ga(s(X), node(T, Y, T)) -> U9_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, T)) -> U10_ga(X, Y, T, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, nil)) -> U11_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, nil)) -> s2t_out_ga(s(X), node(nil, Y, nil))
   s2t_in_ga(0, nil) -> s2t_out_ga(0, nil)
   U11_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, nil))
   U10_ga(X, Y, T, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(nil, Y, T))
   U9_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, T))
   U1_gaa(A, B, C, s2t_out_ga(A, T)) -> U2_gaa(A, B, C, tapplast_in_gaa(T, B, C))
   tapplast_in_gaa(L, X, Last) -> U3_gaa(L, X, Last, tappend_in_gga(L, node(nil, X, nil), LX))
   tappend_in_gga(nil, T, T) -> tappend_out_gga(nil, T, T)
   tappend_in_gga(node(nil, X, T2), T1, node(T1, X, T2)) -> tappend_out_gga(node(nil, X, T2), T1, node(T1, X, T2))
   tappend_in_gga(node(T1, X, nil), T2, node(T1, X, T2)) -> tappend_out_gga(node(T1, X, nil), T2, node(T1, X, T2))
   tappend_in_gga(node(T1, X, T2), T3, node(U, X, T2)) -> U7_gga(T1, X, T2, T3, U, tappend_in_gga(T1, T3, U))
   tappend_in_gga(node(T1, X, T2), T3, node(T1, X, U)) -> U8_gga(T1, X, T2, T3, U, tappend_in_gga(T2, T3, U))
   U8_gga(T1, X, T2, T3, U, tappend_out_gga(T2, T3, U)) -> tappend_out_gga(node(T1, X, T2), T3, node(T1, X, U))
   U7_gga(T1, X, T2, T3, U, tappend_out_gga(T1, T3, U)) -> tappend_out_gga(node(T1, X, T2), T3, node(U, X, T2))
   U3_gaa(L, X, Last, tappend_out_gga(L, node(nil, X, nil), LX)) -> U4_gaa(L, X, Last, tlast_in_ag(Last, LX))
   tlast_in_ag(X, node(nil, X, nil)) -> tlast_out_ag(X, node(nil, X, nil))
   tlast_in_ag(X, node(L, H, R)) -> U5_ag(X, L, H, R, tlast_in_ag(X, L))
   tlast_in_ag(X, node(L, H, R)) -> U6_ag(X, L, H, R, tlast_in_ag(X, R))
   U6_ag(X, L, H, R, tlast_out_ag(X, R)) -> tlast_out_ag(X, node(L, H, R))
   U5_ag(X, L, H, R, tlast_out_ag(X, L)) -> tlast_out_ag(X, node(L, H, R))
   U4_gaa(L, X, Last, tlast_out_ag(Last, LX)) -> tapplast_out_gaa(L, X, Last)
   U2_gaa(A, B, C, tapplast_out_gaa(T, B, C)) -> goal_out_gaa(A, B, C)

The argument filtering Pi contains the following mapping:
goal_in_gaa(x1, x2, x3)  =  goal_in_gaa(x1)

U1_gaa(x1, x2, x3, x4)  =  U1_gaa(x1, x4)

s2t_in_ga(x1, x2)  =  s2t_in_ga(x1)

s(x1)  =  s(x1)

U9_ga(x1, x2, x3, x4)  =  U9_ga(x1, x4)

U10_ga(x1, x2, x3, x4)  =  U10_ga(x1, x4)

U11_ga(x1, x2, x3, x4)  =  U11_ga(x1, x4)

s2t_out_ga(x1, x2)  =  s2t_out_ga(x1, x2)

node(x1, x2, x3)  =  node(x1, x3)

0  =  0

U2_gaa(x1, x2, x3, x4)  =  U2_gaa(x1, x4)

tapplast_in_gaa(x1, x2, x3)  =  tapplast_in_gaa(x1)

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x1, x4)

tappend_in_gga(x1, x2, x3)  =  tappend_in_gga(x1, x2)

nil  =  nil

tappend_out_gga(x1, x2, x3)  =  tappend_out_gga(x1, x2, x3)

U7_gga(x1, x2, x3, x4, x5, x6)  =  U7_gga(x1, x3, x4, x6)

U8_gga(x1, x2, x3, x4, x5, x6)  =  U8_gga(x1, x3, x4, x6)

U4_gaa(x1, x2, x3, x4)  =  U4_gaa(x1, x4)

tlast_in_ag(x1, x2)  =  tlast_in_ag(x2)

tlast_out_ag(x1, x2)  =  tlast_out_ag(x2)

U5_ag(x1, x2, x3, x4, x5)  =  U5_ag(x2, x4, x5)

U6_ag(x1, x2, x3, x4, x5)  =  U6_ag(x2, x4, x5)

tapplast_out_gaa(x1, x2, x3)  =  tapplast_out_gaa(x1)

goal_out_gaa(x1, x2, x3)  =  goal_out_gaa(x1)

S2T_IN_GA(x1, x2)  =  S2T_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(23)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   S2T_IN_GA(s(X), node(nil, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, nil)) -> S2T_IN_GA(X, T)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

node(x1, x2, x3)  =  node(x1, x3)

nil  =  nil

S2T_IN_GA(x1, x2)  =  S2T_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(24) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2T_IN_GA(s(X)) -> S2T_IN_GA(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*S2T_IN_GA(s(X)) -> S2T_IN_GA(X)
The graph contains the following edges 1 > 1


----------------------------------------

(27)
YES
