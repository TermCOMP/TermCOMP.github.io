MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/1iztx.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

color_map(a,g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) AND
        (7) PiDP
            (8) UsableRulesProof [EQUIVALENT, 0 ms]
            (9) PiDP
            (10) PiDPToQDPProof [SOUND, 0 ms]
            (11) QDP
            (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (13) YES
        (14) PiDP
            (15) UsableRulesProof [EQUIVALENT, 0 ms]
            (16) PiDP
            (17) PiDPToQDPProof [SOUND, 1 ms]
            (18) QDP
            (19) TransformationProof [SOUND, 0 ms]
            (20) QDP
            (21) TransformationProof [EQUIVALENT, 0 ms]
            (22) QDP
            (23) NonTerminationLoopProof [COMPLETE, 0 ms]
            (24) NO
        (25) PiDP
            (26) UsableRulesProof [EQUIVALENT, 0 ms]
            (27) PiDP
            (28) PiDPToQDPProof [SOUND, 0 ms]
            (29) QDP
            (30) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (31) YES
        (32) PiDP
            (33) UsableRulesProof [EQUIVALENT, 0 ms]
            (34) PiDP
            (35) PiDPToQDPProof [SOUND, 0 ms]
            (36) QDP
(37) PrologToPiTRSProof [SOUND, 0 ms]
(38) PiTRS
    (39) DependencyPairsProof [EQUIVALENT, 0 ms]
    (40) PiDP
    (41) DependencyGraphProof [EQUIVALENT, 0 ms]
    (42) AND
        (43) PiDP
            (44) UsableRulesProof [EQUIVALENT, 0 ms]
            (45) PiDP
            (46) PiDPToQDPProof [SOUND, 0 ms]
            (47) QDP
            (48) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (49) YES
        (50) PiDP
            (51) UsableRulesProof [EQUIVALENT, 0 ms]
            (52) PiDP
            (53) PiDPToQDPProof [SOUND, 0 ms]
            (54) QDP
            (55) TransformationProof [SOUND, 0 ms]
            (56) QDP
            (57) TransformationProof [EQUIVALENT, 0 ms]
            (58) QDP
            (59) NonTerminationLoopProof [COMPLETE, 0 ms]
            (60) NO
        (61) PiDP
            (62) UsableRulesProof [EQUIVALENT, 0 ms]
            (63) PiDP
            (64) PiDPToQDPProof [SOUND, 0 ms]
            (65) QDP
            (66) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (67) YES
        (68) PiDP
            (69) UsableRulesProof [EQUIVALENT, 0 ms]
            (70) PiDP
            (71) PiDPToQDPProof [SOUND, 0 ms]
            (72) QDP
(73) PrologToTRSTransformerProof [SOUND, 0 ms]
(74) QTRS
    (75) DependencyPairsProof [EQUIVALENT, 0 ms]
    (76) QDP
    (77) DependencyGraphProof [EQUIVALENT, 0 ms]
    (78) AND
        (79) QDP
            (80) UsableRulesProof [EQUIVALENT, 0 ms]
            (81) QDP
            (82) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (83) YES
        (84) QDP
            (85) NonTerminationLoopProof [COMPLETE, 0 ms]
            (86) NO
        (87) QDP
            (88) UsableRulesProof [EQUIVALENT, 0 ms]
            (89) QDP
            (90) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (91) YES
        (92) QDP
            (93) NonTerminationLoopProof [COMPLETE, 0 ms]
            (94) NO
(95) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(96) TRIPLES
    (97) TriplesToPiDPProof [SOUND, 6 ms]
    (98) PiDP
    (99) DependencyGraphProof [EQUIVALENT, 0 ms]
    (100) AND
        (101) PiDP
            (102) UsableRulesProof [EQUIVALENT, 0 ms]
            (103) PiDP
            (104) PiDPToQDPProof [SOUND, 0 ms]
            (105) QDP
            (106) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (107) YES
        (108) PiDP
            (109) UsableRulesProof [EQUIVALENT, 0 ms]
            (110) PiDP
            (111) PiDPToQDPProof [SOUND, 0 ms]
            (112) QDP
            (113) TransformationProof [SOUND, 0 ms]
            (114) QDP
            (115) TransformationProof [EQUIVALENT, 0 ms]
            (116) QDP
            (117) NonTerminationLoopProof [COMPLETE, 0 ms]
            (118) NO
        (119) PiDP
            (120) UsableRulesProof [EQUIVALENT, 0 ms]
            (121) PiDP
            (122) PiDPToQDPProof [SOUND, 0 ms]
            (123) QDP
            (124) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (125) YES
        (126) PiDP
            (127) PiDPToQDPProof [SOUND, 0 ms]
            (128) QDP
(129) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(130) AND
    (131) IRSwT
        (132) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (133) TRUE
    (134) IRSwT
        (135) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (136) TRUE
    (137) IRSwT
        (138) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (139) IRSwT
        (140) IntTRSCompressionProof [EQUIVALENT, 8 ms]
        (141) IRSwT
        (142) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (143) IRSwT
        (144) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
        (145) IRSwT
        (146) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (147) IRSwT
        (148) TempFilterProof [SOUND, 1 ms]
        (149) IRSwT
        (150) IRSwTToQDPProof [SOUND, 0 ms]
        (151) QDP
        (152) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (153) YES
    (154) IRSwT
        (155) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (156) IRSwT
        (157) IntTRSCompressionProof [EQUIVALENT, 12 ms]
        (158) IRSwT
        (159) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (160) IRSwT
        (161) IRSwTTerminationDigraphProof [EQUIVALENT, 41 ms]
        (162) IRSwT
        (163) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (164) IRSwT
        (165) IRSwTToIntTRSProof [SOUND, 14 ms]
        (166) IRSwT


----------------------------------------

(0)
Obligation:
Clauses:

color_map(.(Region, Regions), Colors) :- ','(color_region(Region, Colors), color_map(Regions, Colors)).
color_map([], Colors).
color_region(region(Name, Color, Neighbors), Colors) :- ','(select(Color, Colors, Colors1), members(Neighbors, Colors1)).
select(X, .(X, Xs), Xs).
select(X, .(Y, Ys), .(Y, Zs)) :- select(X, Ys, Zs).
members(.(X, Xs), Ys) :- ','(member(X, Ys), members(Xs, Ys)).
members([], Ys).
member(X, .(X, X1)).
member(X, .(X2, T)) :- member(X, T).
test_color(Name, Map) :- ','(map(Name, Map), ','(colors(Name, Colors), color_map(Map, Colors))).
map(test, .(region(a, A, .(B, .(C, .(D, [])))), .(region(b, B, .(A, .(C, .(E, [])))), .(region(c, C, .(A, .(B, .(D, .(E, .(F, [])))))), .(region(d, D, .(A, .(C, .(F, [])))), .(region(e, E, .(B, .(C, .(F, [])))), .(region(f, F, .(C, .(D, .(E, [])))), []))))))).
map(west_europe, .(region(portugal, P, .(E, [])), .(region(spain, E, .(F, .(P, []))), .(region(france, F, .(E, .(I, .(S, .(B, .(WG, .(L, []))))))), .(region(belgium, B, .(F, .(H, .(L, .(WG, []))))), .(region(holland, H, .(B, .(WG, []))), .(region(west_germany, WG, .(F, .(A, .(S, .(H, .(B, .(L, []))))))), .(region(luxembourg, L, .(F, .(B, .(WG, [])))), .(region(italy, I, .(F, .(A, .(S, [])))), .(region(switzerland, S, .(F, .(I, .(A, .(WG, []))))), .(region(austria, A, .(I, .(S, .(WG, [])))), []))))))))))).
colors(X, .(red, .(yellow, .(blue, .(white, []))))).


Query: color_map(a,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

color_map_in_2: (f,b)

color_region_in_2: (f,b)

select_in_3: (f,b,f)

members_in_2: (f,b)

member_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> COLOR_REGION_IN_AG(Region, Colors)
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> U3_AG(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> SELECT_IN_AGA(Color, Colors, Colors1)
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> U5_AGA(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_AG(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> MEMBERS_IN_AG(Neighbors, Colors1)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))
   MEMBERS_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X2, T)) -> U8_AG(X, X2, T, member_in_ag(X, T))
   MEMBER_IN_AG(X, .(X2, T)) -> MEMBER_IN_AG(X, T)
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_AG(X, Xs, Ys, members_in_ag(Xs, Ys))
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_AG(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

COLOR_REGION_IN_AG(x1, x2)  =  COLOR_REGION_IN_AG(x2)

U3_AG(x1, x2, x3, x4, x5)  =  U3_AG(x4, x5)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x3, x5)

U4_AG(x1, x2, x3, x4, x5)  =  U4_AG(x2, x4, x5)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U8_AG(x1, x2, x3, x4)  =  U8_AG(x2, x3, x4)

U7_AG(x1, x2, x3, x4)  =  U7_AG(x1, x3, x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> COLOR_REGION_IN_AG(Region, Colors)
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> U3_AG(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> SELECT_IN_AGA(Color, Colors, Colors1)
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> U5_AGA(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_AG(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> MEMBERS_IN_AG(Neighbors, Colors1)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))
   MEMBERS_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X2, T)) -> U8_AG(X, X2, T, member_in_ag(X, T))
   MEMBER_IN_AG(X, .(X2, T)) -> MEMBER_IN_AG(X, T)
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_AG(X, Xs, Ys, members_in_ag(Xs, Ys))
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_AG(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

COLOR_REGION_IN_AG(x1, x2)  =  COLOR_REGION_IN_AG(x2)

U3_AG(x1, x2, x3, x4, x5)  =  U3_AG(x4, x5)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x3, x5)

U4_AG(x1, x2, x3, x4, x5)  =  U4_AG(x2, x4, x5)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U8_AG(x1, x2, x3, x4)  =  U8_AG(x2, x3, x4)

U7_AG(x1, x2, x3, x4)  =  U7_AG(x1, x3, x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 4 SCCs with 10 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, T)) -> MEMBER_IN_AG(X, T)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, T)) -> MEMBER_IN_AG(X, T)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(.(X2, T)) -> MEMBER_IN_AG(T)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER_IN_AG(.(X2, T)) -> MEMBER_IN_AG(T)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_AG(Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Ys)
   MEMBERS_IN_AG(Ys) -> U6_AG(Ys, member_in_ag(Ys))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(.(X2, T)) -> U8_ag(X2, T, member_in_ag(T))
   U8_ag(X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) TransformationProof (SOUND)
By narrowing [LPAR04] the rule MEMBERS_IN_AG(Ys) -> U6_AG(Ys, member_in_ag(Ys)) at position [1] we obtained the following new rules [LPAR04]:

   (MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0, .(x0, x1))),MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0, .(x0, x1))))
   (MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(x0, x1, member_in_ag(x1))),MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(x0, x1, member_in_ag(x1))))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_AG(Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Ys)
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0, .(x0, x1)))
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(x0, x1, member_in_ag(x1)))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(.(X2, T)) -> U8_ag(X2, T, member_in_ag(T))
   U8_ag(X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_AG(Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Ys) we obtained the following new rules [LPAR04]:

   (U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1)),U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1)))
   (U6_AG(.(z0, z1), member_out_ag(x1, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1)),U6_AG(.(z0, z1), member_out_ag(x1, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1)))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0, .(x0, x1)))
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(x0, x1, member_in_ag(x1)))
   U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1))
   U6_AG(.(z0, z1), member_out_ag(x1, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(.(X2, T)) -> U8_ag(X2, T, member_in_ag(T))
   U8_ag(X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) evaluates to  t =U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1)))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1))
with rule U6_AG(.(z0', z1'), member_out_ag(z0', .(z0', z1'))) -> MEMBERS_IN_AG(.(z0', z1')) at position [] and matcher [z0' / z0, z1' / z1]

MEMBERS_IN_AG(.(z0, z1)) -> U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1)))
with rule MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0, .(x0, x1)))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(24)
NO

----------------------------------------

(25)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(27)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(28) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(.(Y, Ys)) -> SELECT_IN_AGA(Ys)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SELECT_IN_AGA(.(Y, Ys)) -> SELECT_IN_AGA(Ys)
The graph contains the following edges 1 > 1


----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(33) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(34)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))

The TRS R consists of the following rules:

   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))

The argument filtering Pi contains the following mapping:
color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(35) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_AG(Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Colors)
   COLOR_MAP_IN_AG(Colors) -> U1_AG(Colors, color_region_in_ag(Colors))

The TRS R consists of the following rules:

   color_region_in_ag(Colors) -> U3_ag(Colors, select_in_aga(Colors))
   U3_ag(Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Colors, members_in_ag(Colors1))
   select_in_aga(.(X, Xs)) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(.(Y, Ys)) -> U5_aga(Y, Ys, select_in_aga(Ys))
   U4_ag(Color, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U5_aga(Y, Ys, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   members_in_ag(Ys) -> U6_ag(Ys, member_in_ag(Ys))
   members_in_ag(Ys) -> members_out_ag([], Ys)
   U6_ag(Ys, member_out_ag(X, Ys)) -> U7_ag(X, Ys, members_in_ag(Ys))
   member_in_ag(.(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(.(X2, T)) -> U8_ag(X2, T, member_in_ag(T))
   U7_ag(X, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U8_ag(X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))

The set Q consists of the following terms:

   color_region_in_ag(x0)
   U3_ag(x0, x1)
   select_in_aga(x0)
   U4_ag(x0, x1, x2)
   U5_aga(x0, x1, x2)
   members_in_ag(x0)
   U6_ag(x0, x1)
   member_in_ag(x0)
   U7_ag(x0, x1, x2)
   U8_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(37) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

color_map_in_2: (f,b)

color_region_in_2: (f,b)

select_in_3: (f,b,f)

members_in_2: (f,b)

member_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(38)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)



----------------------------------------

(39) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> COLOR_REGION_IN_AG(Region, Colors)
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> U3_AG(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> SELECT_IN_AGA(Color, Colors, Colors1)
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> U5_AGA(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_AG(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> MEMBERS_IN_AG(Neighbors, Colors1)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))
   MEMBERS_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X2, T)) -> U8_AG(X, X2, T, member_in_ag(X, T))
   MEMBER_IN_AG(X, .(X2, T)) -> MEMBER_IN_AG(X, T)
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_AG(X, Xs, Ys, members_in_ag(Xs, Ys))
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_AG(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

COLOR_REGION_IN_AG(x1, x2)  =  COLOR_REGION_IN_AG(x2)

U3_AG(x1, x2, x3, x4, x5)  =  U3_AG(x5)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x5)

U4_AG(x1, x2, x3, x4, x5)  =  U4_AG(x2, x5)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U8_AG(x1, x2, x3, x4)  =  U8_AG(x4)

U7_AG(x1, x2, x3, x4)  =  U7_AG(x1, x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(40)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> COLOR_REGION_IN_AG(Region, Colors)
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> U3_AG(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> SELECT_IN_AGA(Color, Colors, Colors1)
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> U5_AGA(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_AG(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> MEMBERS_IN_AG(Neighbors, Colors1)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))
   MEMBERS_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X2, T)) -> U8_AG(X, X2, T, member_in_ag(X, T))
   MEMBER_IN_AG(X, .(X2, T)) -> MEMBER_IN_AG(X, T)
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_AG(X, Xs, Ys, members_in_ag(Xs, Ys))
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_AG(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

COLOR_REGION_IN_AG(x1, x2)  =  COLOR_REGION_IN_AG(x2)

U3_AG(x1, x2, x3, x4, x5)  =  U3_AG(x5)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x5)

U4_AG(x1, x2, x3, x4, x5)  =  U4_AG(x2, x5)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U8_AG(x1, x2, x3, x4)  =  U8_AG(x4)

U7_AG(x1, x2, x3, x4)  =  U7_AG(x1, x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(41) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 4 SCCs with 10 less nodes.
----------------------------------------

(42)
Complex Obligation (AND)

----------------------------------------

(43)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, T)) -> MEMBER_IN_AG(X, T)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(44) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(45)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, T)) -> MEMBER_IN_AG(X, T)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(46) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(.(X2, T)) -> MEMBER_IN_AG(T)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(48) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER_IN_AG(.(X2, T)) -> MEMBER_IN_AG(T)
The graph contains the following edges 1 > 1


----------------------------------------

(49)
YES

----------------------------------------

(50)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(51) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(52)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(53) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_AG(Ys, member_out_ag(X)) -> MEMBERS_IN_AG(Ys)
   MEMBERS_IN_AG(Ys) -> U6_AG(Ys, member_in_ag(Ys))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X)
   member_in_ag(.(X2, T)) -> U8_ag(member_in_ag(T))
   U8_ag(member_out_ag(X)) -> member_out_ag(X)

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(55) TransformationProof (SOUND)
By narrowing [LPAR04] the rule MEMBERS_IN_AG(Ys) -> U6_AG(Ys, member_in_ag(Ys)) at position [1] we obtained the following new rules [LPAR04]:

   (MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0)),MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0)))
   (MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(member_in_ag(x1))),MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(member_in_ag(x1))))


----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_AG(Ys, member_out_ag(X)) -> MEMBERS_IN_AG(Ys)
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0))
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(member_in_ag(x1)))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X)
   member_in_ag(.(X2, T)) -> U8_ag(member_in_ag(T))
   U8_ag(member_out_ag(X)) -> member_out_ag(X)

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(57) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_AG(Ys, member_out_ag(X)) -> MEMBERS_IN_AG(Ys) we obtained the following new rules [LPAR04]:

   (U6_AG(.(z0, z1), member_out_ag(z0)) -> MEMBERS_IN_AG(.(z0, z1)),U6_AG(.(z0, z1), member_out_ag(z0)) -> MEMBERS_IN_AG(.(z0, z1)))
   (U6_AG(.(z0, z1), member_out_ag(x1)) -> MEMBERS_IN_AG(.(z0, z1)),U6_AG(.(z0, z1), member_out_ag(x1)) -> MEMBERS_IN_AG(.(z0, z1)))


----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0))
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(member_in_ag(x1)))
   U6_AG(.(z0, z1), member_out_ag(z0)) -> MEMBERS_IN_AG(.(z0, z1))
   U6_AG(.(z0, z1), member_out_ag(x1)) -> MEMBERS_IN_AG(.(z0, z1))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X)
   member_in_ag(.(X2, T)) -> U8_ag(member_in_ag(T))
   U8_ag(member_out_ag(X)) -> member_out_ag(X)

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(59) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = U6_AG(.(z0, z1), member_out_ag(z0)) evaluates to  t =U6_AG(.(z0, z1), member_out_ag(z0))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

U6_AG(.(z0, z1), member_out_ag(z0)) -> MEMBERS_IN_AG(.(z0, z1))
with rule U6_AG(.(z0', z1'), member_out_ag(z0')) -> MEMBERS_IN_AG(.(z0', z1')) at position [] and matcher [z0' / z0, z1' / z1]

MEMBERS_IN_AG(.(z0, z1)) -> U6_AG(.(z0, z1), member_out_ag(z0))
with rule MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(60)
NO

----------------------------------------

(61)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(62) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(63)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(64) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(65)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(.(Y, Ys)) -> SELECT_IN_AGA(Ys)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(66) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SELECT_IN_AGA(.(Y, Ys)) -> SELECT_IN_AGA(Ys)
The graph contains the following edges 1 > 1


----------------------------------------

(67)
YES

----------------------------------------

(68)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(69) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(70)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))

The TRS R consists of the following rules:

   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))

The argument filtering Pi contains the following mapping:
color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(71) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(72)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_AG(Colors, color_region_out_ag(Region)) -> COLOR_MAP_IN_AG(Colors)
   COLOR_MAP_IN_AG(Colors) -> U1_AG(Colors, color_region_in_ag(Colors))

The TRS R consists of the following rules:

   color_region_in_ag(Colors) -> U3_ag(select_in_aga(Colors))
   U3_ag(select_out_aga(Color, Colors1)) -> U4_ag(Color, members_in_ag(Colors1))
   select_in_aga(.(X, Xs)) -> select_out_aga(X, Xs)
   select_in_aga(.(Y, Ys)) -> U5_aga(Y, select_in_aga(Ys))
   U4_ag(Color, members_out_ag(Neighbors)) -> color_region_out_ag(region(Color, Neighbors))
   U5_aga(Y, select_out_aga(X, Zs)) -> select_out_aga(X, .(Y, Zs))
   members_in_ag(Ys) -> U6_ag(Ys, member_in_ag(Ys))
   members_in_ag(Ys) -> members_out_ag([])
   U6_ag(Ys, member_out_ag(X)) -> U7_ag(X, members_in_ag(Ys))
   member_in_ag(.(X, X1)) -> member_out_ag(X)
   member_in_ag(.(X2, T)) -> U8_ag(member_in_ag(T))
   U7_ag(X, members_out_ag(Xs)) -> members_out_ag(.(X, Xs))
   U8_ag(member_out_ag(X)) -> member_out_ag(X)

The set Q consists of the following terms:

   color_region_in_ag(x0)
   U3_ag(x0)
   select_in_aga(x0)
   U4_ag(x0, x1)
   U5_aga(x0, x1)
   members_in_ag(x0)
   U6_ag(x0, x1)
   member_in_ag(x0)
   U7_ag(x0, x1)
   U8_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(73) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 59,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(color_map (. Region Regions) Colors)",
                "(',' (color_region Region Colors) (color_map Regions Colors))"
            ],
            [
                "(color_map ([]) Colors)",
                null
            ],
            [
                "(color_region (region Name Color Neighbors) Colors)",
                "(',' (select Color Colors Colors1) (members Neighbors Colors1))"
            ],
            [
                "(select X (. X Xs) Xs)",
                null
            ],
            [
                "(select X (. Y Ys) (. Y Zs))",
                "(select X Ys Zs)"
            ],
            [
                "(members (. X Xs) Ys)",
                "(',' (member X Ys) (members Xs Ys))"
            ],
            [
                "(members ([]) Ys)",
                null
            ],
            [
                "(member X (. X X1))",
                null
            ],
            [
                "(member X (. X2 T))",
                "(member X T)"
            ],
            [
                "(test_color Name Map)",
                "(',' (map Name Map) (',' (colors Name Colors) (color_map Map Colors)))"
            ],
            [
                "(map (test) (. (region (a) A (. B (. C (. D ([]))))) (. (region (b) B (. A (. C (. E ([]))))) (. (region (c) C (. A (. B (. D (. E (. F ([]))))))) (. (region (d) D (. A (. C (. F ([]))))) (. (region (e) E (. B (. C (. F ([]))))) (. (region (f) F (. C (. D (. E ([]))))) ([]))))))))",
                null
            ],
            [
                "(map (west_europe) (. (region (portugal) P (. E ([]))) (. (region (spain) E (. F (. P ([])))) (. (region (france) F (. E (. I (. S (. B (. WG (. L ([])))))))) (. (region (belgium) B (. F (. H (. L (. WG ([])))))) (. (region (holland) H (. B (. WG ([])))) (. (region (west_germany) WG (. F (. A (. S (. H (. B (. L ([])))))))) (. (region (luxembourg) L (. F (. B (. WG ([]))))) (. (region (italy) I (. F (. A (. S ([]))))) (. (region (switzerland) S (. F (. I (. A (. WG ([])))))) (. (region (austria) A (. I (. S (. WG ([]))))) ([]))))))))))))",
                null
            ],
            [
                "(colors X (. (red) (. (yellow) (. (blue) (. (white) ([]))))))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "type": "Nodes",
            "590": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "594": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T41 T40 X41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "595": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T48 T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "651": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "597": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(select T41 T40 X41)"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(select T41 T40 X41)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "630": {
                "goal": [{
                    "clause": 8,
                    "scope": 5,
                    "term": "(member T95 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "652": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "653": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "599": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(select T41 T40 X41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "610": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "633": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "634": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "613": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(members T48 T47)"
                    },
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(members T48 T47)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "635": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "614": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(members T48 T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "636": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T125 T124)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T124"],
                    "free": [],
                    "exprvars": []
                }
            },
            "615": {
                "goal": [{
                    "clause": 6,
                    "scope": 4,
                    "term": "(members T48 T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "637": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "619": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T95 T94) (members T96 T94))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "59": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "561": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "562": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "563": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (color_region T18 T17) (color_map T19 T17))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "564": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "565": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_region T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "620": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "566": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T24 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "643": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "567": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(color_region T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "589": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (select T41 T40 X41) (members T42 X41))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "600": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(select T41 T40 X41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "601": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "623": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T95 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "645": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "602": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "624": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T101 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "603": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "647": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "61": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "628": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(member T95 T94)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(member T95 T94)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "607": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T72 T71 X74)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T71"],
                    "free": ["X74"],
                    "exprvars": []
                }
            },
            "629": {
                "goal": [{
                    "clause": 7,
                    "scope": 5,
                    "term": "(member T95 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 59,
                "to": 61,
                "label": "CASE"
            },
            {
                "from": 61,
                "to": 561,
                "label": "PARALLEL"
            },
            {
                "from": 61,
                "to": 562,
                "label": "PARALLEL"
            },
            {
                "from": 561,
                "to": 563,
                "label": "EVAL with clause\ncolor_map(.(X15, X16), X17) :- ','(color_region(X15, X17), color_map(X16, X17)).\nand substitutionX15 -> T18,\nX16 -> T19,\nT1 -> .(T18, T19),\nT2 -> T17,\nX17 -> T17,\nT15 -> T18,\nT16 -> T19"
            },
            {
                "from": 561,
                "to": 564,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 562,
                "to": 651,
                "label": "EVAL with clause\ncolor_map([], X139).\nand substitutionT1 -> [],\nT2 -> T141,\nX139 -> T141"
            },
            {
                "from": 562,
                "to": 652,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 563,
                "to": 565,
                "label": "SPLIT 1"
            },
            {
                "from": 563,
                "to": 566,
                "label": "SPLIT 2\nnew knowledge:\nT17 is ground\nreplacements:T19 -> T24"
            },
            {
                "from": 565,
                "to": 567,
                "label": "CASE"
            },
            {
                "from": 566,
                "to": 59,
                "label": "INSTANCE with matching:\nT1 -> T24\nT2 -> T17"
            },
            {
                "from": 567,
                "to": 589,
                "label": "EVAL with clause\ncolor_region(region(X37, X38, X39), X40) :- ','(select(X38, X40, X41), members(X39, X41)).\nand substitutionX37 -> T37,\nX38 -> T41,\nX39 -> T42,\nT18 -> region(T37, T41, T42),\nT17 -> T40,\nX40 -> T40,\nT38 -> T41,\nT39 -> T42"
            },
            {
                "from": 567,
                "to": 590,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 589,
                "to": 594,
                "label": "SPLIT 1"
            },
            {
                "from": 589,
                "to": 595,
                "label": "SPLIT 2\nnew knowledge:\nT41 is ground\nT40 is ground\nT47 is ground\nreplacements:X41 -> T47,\nT42 -> T48"
            },
            {
                "from": 594,
                "to": 597,
                "label": "CASE"
            },
            {
                "from": 595,
                "to": 613,
                "label": "CASE"
            },
            {
                "from": 597,
                "to": 599,
                "label": "PARALLEL"
            },
            {
                "from": 597,
                "to": 600,
                "label": "PARALLEL"
            },
            {
                "from": 599,
                "to": 601,
                "label": "EVAL with clause\nselect(X58, .(X58, X59), X59).\nand substitutionT41 -> T61,\nX58 -> T61,\nX59 -> T62,\nT40 -> .(T61, T62),\nX41 -> T62"
            },
            {
                "from": 599,
                "to": 602,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 600,
                "to": 607,
                "label": "EVAL with clause\nselect(X70, .(X71, X72), .(X71, X73)) :- select(X70, X72, X73).\nand substitutionT41 -> T72,\nX70 -> T72,\nX71 -> T70,\nX72 -> T71,\nT40 -> .(T70, T71),\nX73 -> X74,\nX41 -> .(T70, X74),\nT69 -> T72"
            },
            {
                "from": 600,
                "to": 610,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 601,
                "to": 603,
                "label": "SUCCESS"
            },
            {
                "from": 607,
                "to": 594,
                "label": "INSTANCE with matching:\nT41 -> T72\nT40 -> T71\nX41 -> X74"
            },
            {
                "from": 613,
                "to": 614,
                "label": "PARALLEL"
            },
            {
                "from": 613,
                "to": 615,
                "label": "PARALLEL"
            },
            {
                "from": 614,
                "to": 619,
                "label": "EVAL with clause\nmembers(.(X94, X95), X96) :- ','(member(X94, X96), members(X95, X96)).\nand substitutionX94 -> T95,\nX95 -> T96,\nT48 -> .(T95, T96),\nT47 -> T94,\nX96 -> T94,\nT92 -> T95,\nT93 -> T96"
            },
            {
                "from": 614,
                "to": 620,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 615,
                "to": 643,
                "label": "EVAL with clause\nmembers([], X133).\nand substitutionT48 -> [],\nT47 -> T135,\nX133 -> T135"
            },
            {
                "from": 615,
                "to": 645,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 619,
                "to": 623,
                "label": "SPLIT 1"
            },
            {
                "from": 619,
                "to": 624,
                "label": "SPLIT 2\nnew knowledge:\nT95 is ground\nT94 is ground\nreplacements:T96 -> T101"
            },
            {
                "from": 623,
                "to": 628,
                "label": "CASE"
            },
            {
                "from": 624,
                "to": 595,
                "label": "INSTANCE with matching:\nT48 -> T101\nT47 -> T94"
            },
            {
                "from": 628,
                "to": 629,
                "label": "PARALLEL"
            },
            {
                "from": 628,
                "to": 630,
                "label": "PARALLEL"
            },
            {
                "from": 629,
                "to": 633,
                "label": "EVAL with clause\nmember(X113, .(X113, X114)).\nand substitutionT95 -> T114,\nX113 -> T114,\nX114 -> T115,\nT94 -> .(T114, T115)"
            },
            {
                "from": 629,
                "to": 634,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 630,
                "to": 636,
                "label": "EVAL with clause\nmember(X121, .(X122, X123)) :- member(X121, X123).\nand substitutionT95 -> T125,\nX121 -> T125,\nX122 -> T123,\nX123 -> T124,\nT94 -> .(T123, T124),\nT122 -> T125"
            },
            {
                "from": 630,
                "to": 637,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 633,
                "to": 635,
                "label": "SUCCESS"
            },
            {
                "from": 636,
                "to": 623,
                "label": "INSTANCE with matching:\nT95 -> T125\nT94 -> T124"
            },
            {
                "from": 643,
                "to": 647,
                "label": "SUCCESS"
            },
            {
                "from": 651,
                "to": 653,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(74)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f59_in(T17) -> U1(f563_in(T17), T17)
   U1(f563_out1, T17) -> f59_out1
   f59_in(T141) -> f59_out1
   f594_in(.(T61, T62)) -> f594_out1(T61, T62)
   f594_in(.(T70, T71)) -> U2(f594_in(T71), .(T70, T71))
   U2(f594_out1(T72, X74), .(T70, T71)) -> f594_out1(T72, .(T70, X74))
   f595_in(T94) -> U3(f619_in(T94), T94)
   U3(f619_out1(T95, T96), T94) -> f595_out1(.(T95, T96))
   f595_in(T135) -> f595_out1([])
   f623_in(.(T114, T115)) -> f623_out1(T114)
   f623_in(.(T123, T124)) -> U4(f623_in(T124), .(T123, T124))
   U4(f623_out1(T125), .(T123, T124)) -> f623_out1(T125)
   f565_in(T40) -> U5(f589_in(T40), T40)
   U5(f589_out1(T41, X41, T42), T40) -> f565_out1
   f563_in(T17) -> U6(f565_in(T17), T17)
   U6(f565_out1, T17) -> U7(f59_in(T17), T17)
   U7(f59_out1, T17) -> f563_out1
   f589_in(T40) -> U8(f594_in(T40), T40)
   U8(f594_out1(T41, T47), T40) -> U9(f595_in(T47), T40, T41, T47)
   U9(f595_out1(T48), T40, T41, T47) -> f589_out1(T41, T47, T48)
   f619_in(T94) -> U10(f623_in(T94), T94)
   U10(f623_out1(T95), T94) -> U11(f595_in(T94), T94, T95)
   U11(f595_out1(T101), T94, T95) -> f619_out1(T95, T101)

Q is empty.

----------------------------------------

(75) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(76)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F59_IN(T17) -> U1^1(f563_in(T17), T17)
   F59_IN(T17) -> F563_IN(T17)
   F594_IN(.(T70, T71)) -> U2^1(f594_in(T71), .(T70, T71))
   F594_IN(.(T70, T71)) -> F594_IN(T71)
   F595_IN(T94) -> U3^1(f619_in(T94), T94)
   F595_IN(T94) -> F619_IN(T94)
   F623_IN(.(T123, T124)) -> U4^1(f623_in(T124), .(T123, T124))
   F623_IN(.(T123, T124)) -> F623_IN(T124)
   F565_IN(T40) -> U5^1(f589_in(T40), T40)
   F565_IN(T40) -> F589_IN(T40)
   F563_IN(T17) -> U6^1(f565_in(T17), T17)
   F563_IN(T17) -> F565_IN(T17)
   U6^1(f565_out1, T17) -> U7^1(f59_in(T17), T17)
   U6^1(f565_out1, T17) -> F59_IN(T17)
   F589_IN(T40) -> U8^1(f594_in(T40), T40)
   F589_IN(T40) -> F594_IN(T40)
   U8^1(f594_out1(T41, T47), T40) -> U9^1(f595_in(T47), T40, T41, T47)
   U8^1(f594_out1(T41, T47), T40) -> F595_IN(T47)
   F619_IN(T94) -> U10^1(f623_in(T94), T94)
   F619_IN(T94) -> F623_IN(T94)
   U10^1(f623_out1(T95), T94) -> U11^1(f595_in(T94), T94, T95)
   U10^1(f623_out1(T95), T94) -> F595_IN(T94)

The TRS R consists of the following rules:

   f59_in(T17) -> U1(f563_in(T17), T17)
   U1(f563_out1, T17) -> f59_out1
   f59_in(T141) -> f59_out1
   f594_in(.(T61, T62)) -> f594_out1(T61, T62)
   f594_in(.(T70, T71)) -> U2(f594_in(T71), .(T70, T71))
   U2(f594_out1(T72, X74), .(T70, T71)) -> f594_out1(T72, .(T70, X74))
   f595_in(T94) -> U3(f619_in(T94), T94)
   U3(f619_out1(T95, T96), T94) -> f595_out1(.(T95, T96))
   f595_in(T135) -> f595_out1([])
   f623_in(.(T114, T115)) -> f623_out1(T114)
   f623_in(.(T123, T124)) -> U4(f623_in(T124), .(T123, T124))
   U4(f623_out1(T125), .(T123, T124)) -> f623_out1(T125)
   f565_in(T40) -> U5(f589_in(T40), T40)
   U5(f589_out1(T41, X41, T42), T40) -> f565_out1
   f563_in(T17) -> U6(f565_in(T17), T17)
   U6(f565_out1, T17) -> U7(f59_in(T17), T17)
   U7(f59_out1, T17) -> f563_out1
   f589_in(T40) -> U8(f594_in(T40), T40)
   U8(f594_out1(T41, T47), T40) -> U9(f595_in(T47), T40, T41, T47)
   U9(f595_out1(T48), T40, T41, T47) -> f589_out1(T41, T47, T48)
   f619_in(T94) -> U10(f623_in(T94), T94)
   U10(f623_out1(T95), T94) -> U11(f595_in(T94), T94, T95)
   U11(f595_out1(T101), T94, T95) -> f619_out1(T95, T101)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(77) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 14 less nodes.
----------------------------------------

(78)
Complex Obligation (AND)

----------------------------------------

(79)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F623_IN(.(T123, T124)) -> F623_IN(T124)

The TRS R consists of the following rules:

   f59_in(T17) -> U1(f563_in(T17), T17)
   U1(f563_out1, T17) -> f59_out1
   f59_in(T141) -> f59_out1
   f594_in(.(T61, T62)) -> f594_out1(T61, T62)
   f594_in(.(T70, T71)) -> U2(f594_in(T71), .(T70, T71))
   U2(f594_out1(T72, X74), .(T70, T71)) -> f594_out1(T72, .(T70, X74))
   f595_in(T94) -> U3(f619_in(T94), T94)
   U3(f619_out1(T95, T96), T94) -> f595_out1(.(T95, T96))
   f595_in(T135) -> f595_out1([])
   f623_in(.(T114, T115)) -> f623_out1(T114)
   f623_in(.(T123, T124)) -> U4(f623_in(T124), .(T123, T124))
   U4(f623_out1(T125), .(T123, T124)) -> f623_out1(T125)
   f565_in(T40) -> U5(f589_in(T40), T40)
   U5(f589_out1(T41, X41, T42), T40) -> f565_out1
   f563_in(T17) -> U6(f565_in(T17), T17)
   U6(f565_out1, T17) -> U7(f59_in(T17), T17)
   U7(f59_out1, T17) -> f563_out1
   f589_in(T40) -> U8(f594_in(T40), T40)
   U8(f594_out1(T41, T47), T40) -> U9(f595_in(T47), T40, T41, T47)
   U9(f595_out1(T48), T40, T41, T47) -> f589_out1(T41, T47, T48)
   f619_in(T94) -> U10(f623_in(T94), T94)
   U10(f623_out1(T95), T94) -> U11(f595_in(T94), T94, T95)
   U11(f595_out1(T101), T94, T95) -> f619_out1(T95, T101)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(80) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(81)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F623_IN(.(T123, T124)) -> F623_IN(T124)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(82) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F623_IN(.(T123, T124)) -> F623_IN(T124)
The graph contains the following edges 1 > 1


----------------------------------------

(83)
YES

----------------------------------------

(84)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F595_IN(T94) -> F619_IN(T94)
   F619_IN(T94) -> U10^1(f623_in(T94), T94)
   U10^1(f623_out1(T95), T94) -> F595_IN(T94)

The TRS R consists of the following rules:

   f59_in(T17) -> U1(f563_in(T17), T17)
   U1(f563_out1, T17) -> f59_out1
   f59_in(T141) -> f59_out1
   f594_in(.(T61, T62)) -> f594_out1(T61, T62)
   f594_in(.(T70, T71)) -> U2(f594_in(T71), .(T70, T71))
   U2(f594_out1(T72, X74), .(T70, T71)) -> f594_out1(T72, .(T70, X74))
   f595_in(T94) -> U3(f619_in(T94), T94)
   U3(f619_out1(T95, T96), T94) -> f595_out1(.(T95, T96))
   f595_in(T135) -> f595_out1([])
   f623_in(.(T114, T115)) -> f623_out1(T114)
   f623_in(.(T123, T124)) -> U4(f623_in(T124), .(T123, T124))
   U4(f623_out1(T125), .(T123, T124)) -> f623_out1(T125)
   f565_in(T40) -> U5(f589_in(T40), T40)
   U5(f589_out1(T41, X41, T42), T40) -> f565_out1
   f563_in(T17) -> U6(f565_in(T17), T17)
   U6(f565_out1, T17) -> U7(f59_in(T17), T17)
   U7(f59_out1, T17) -> f563_out1
   f589_in(T40) -> U8(f594_in(T40), T40)
   U8(f594_out1(T41, T47), T40) -> U9(f595_in(T47), T40, T41, T47)
   U9(f595_out1(T48), T40, T41, T47) -> f589_out1(T41, T47, T48)
   f619_in(T94) -> U10(f623_in(T94), T94)
   U10(f623_out1(T95), T94) -> U11(f595_in(T94), T94, T95)
   U11(f595_out1(T101), T94, T95) -> f619_out1(T95, T101)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(85) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F619_IN(.(T114, T115)) evaluates to  t =F619_IN(.(T114, T115))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

F619_IN(.(T114, T115)) -> U10^1(f623_in(.(T114, T115)), .(T114, T115))
with rule F619_IN(T94) -> U10^1(f623_in(T94), T94) at position [] and matcher [T94 / .(T114, T115)]

U10^1(f623_in(.(T114, T115)), .(T114, T115)) -> U10^1(f623_out1(T114), .(T114, T115))
with rule f623_in(.(T114', T115')) -> f623_out1(T114') at position [0] and matcher [T114' / T114, T115' / T115]

U10^1(f623_out1(T114), .(T114, T115)) -> F595_IN(.(T114, T115))
with rule U10^1(f623_out1(T95), T94') -> F595_IN(T94') at position [] and matcher [T95 / T114, T94' / .(T114, T115)]

F595_IN(.(T114, T115)) -> F619_IN(.(T114, T115))
with rule F595_IN(T94) -> F619_IN(T94)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(86)
NO

----------------------------------------

(87)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F594_IN(.(T70, T71)) -> F594_IN(T71)

The TRS R consists of the following rules:

   f59_in(T17) -> U1(f563_in(T17), T17)
   U1(f563_out1, T17) -> f59_out1
   f59_in(T141) -> f59_out1
   f594_in(.(T61, T62)) -> f594_out1(T61, T62)
   f594_in(.(T70, T71)) -> U2(f594_in(T71), .(T70, T71))
   U2(f594_out1(T72, X74), .(T70, T71)) -> f594_out1(T72, .(T70, X74))
   f595_in(T94) -> U3(f619_in(T94), T94)
   U3(f619_out1(T95, T96), T94) -> f595_out1(.(T95, T96))
   f595_in(T135) -> f595_out1([])
   f623_in(.(T114, T115)) -> f623_out1(T114)
   f623_in(.(T123, T124)) -> U4(f623_in(T124), .(T123, T124))
   U4(f623_out1(T125), .(T123, T124)) -> f623_out1(T125)
   f565_in(T40) -> U5(f589_in(T40), T40)
   U5(f589_out1(T41, X41, T42), T40) -> f565_out1
   f563_in(T17) -> U6(f565_in(T17), T17)
   U6(f565_out1, T17) -> U7(f59_in(T17), T17)
   U7(f59_out1, T17) -> f563_out1
   f589_in(T40) -> U8(f594_in(T40), T40)
   U8(f594_out1(T41, T47), T40) -> U9(f595_in(T47), T40, T41, T47)
   U9(f595_out1(T48), T40, T41, T47) -> f589_out1(T41, T47, T48)
   f619_in(T94) -> U10(f623_in(T94), T94)
   U10(f623_out1(T95), T94) -> U11(f595_in(T94), T94, T95)
   U11(f595_out1(T101), T94, T95) -> f619_out1(T95, T101)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(88) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(89)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F594_IN(.(T70, T71)) -> F594_IN(T71)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(90) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F594_IN(.(T70, T71)) -> F594_IN(T71)
The graph contains the following edges 1 > 1


----------------------------------------

(91)
YES

----------------------------------------

(92)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F59_IN(T17) -> F563_IN(T17)
   F563_IN(T17) -> U6^1(f565_in(T17), T17)
   U6^1(f565_out1, T17) -> F59_IN(T17)

The TRS R consists of the following rules:

   f59_in(T17) -> U1(f563_in(T17), T17)
   U1(f563_out1, T17) -> f59_out1
   f59_in(T141) -> f59_out1
   f594_in(.(T61, T62)) -> f594_out1(T61, T62)
   f594_in(.(T70, T71)) -> U2(f594_in(T71), .(T70, T71))
   U2(f594_out1(T72, X74), .(T70, T71)) -> f594_out1(T72, .(T70, X74))
   f595_in(T94) -> U3(f619_in(T94), T94)
   U3(f619_out1(T95, T96), T94) -> f595_out1(.(T95, T96))
   f595_in(T135) -> f595_out1([])
   f623_in(.(T114, T115)) -> f623_out1(T114)
   f623_in(.(T123, T124)) -> U4(f623_in(T124), .(T123, T124))
   U4(f623_out1(T125), .(T123, T124)) -> f623_out1(T125)
   f565_in(T40) -> U5(f589_in(T40), T40)
   U5(f589_out1(T41, X41, T42), T40) -> f565_out1
   f563_in(T17) -> U6(f565_in(T17), T17)
   U6(f565_out1, T17) -> U7(f59_in(T17), T17)
   U7(f59_out1, T17) -> f563_out1
   f589_in(T40) -> U8(f594_in(T40), T40)
   U8(f594_out1(T41, T47), T40) -> U9(f595_in(T47), T40, T41, T47)
   U9(f595_out1(T48), T40, T41, T47) -> f589_out1(T41, T47, T48)
   f619_in(T94) -> U10(f623_in(T94), T94)
   U10(f623_out1(T95), T94) -> U11(f595_in(T94), T94, T95)
   U11(f595_out1(T101), T94, T95) -> f619_out1(T95, T101)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(93) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F563_IN(.(T61, T62)) evaluates to  t =F563_IN(.(T61, T62))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

F563_IN(.(T61, T62)) -> U6^1(f565_in(.(T61, T62)), .(T61, T62))
with rule F563_IN(T17) -> U6^1(f565_in(T17), T17) at position [] and matcher [T17 / .(T61, T62)]

U6^1(f565_in(.(T61, T62)), .(T61, T62)) -> U6^1(U5(f589_in(.(T61, T62)), .(T61, T62)), .(T61, T62))
with rule f565_in(T40') -> U5(f589_in(T40'), T40') at position [0] and matcher [T40' / .(T61, T62)]

U6^1(U5(f589_in(.(T61, T62)), .(T61, T62)), .(T61, T62)) -> U6^1(U5(U8(f594_in(.(T61, T62)), .(T61, T62)), .(T61, T62)), .(T61, T62))
with rule f589_in(T40') -> U8(f594_in(T40'), T40') at position [0,0] and matcher [T40' / .(T61, T62)]

U6^1(U5(U8(f594_in(.(T61, T62)), .(T61, T62)), .(T61, T62)), .(T61, T62)) -> U6^1(U5(U8(f594_out1(T61, T62), .(T61, T62)), .(T61, T62)), .(T61, T62))
with rule f594_in(.(T61', T62')) -> f594_out1(T61', T62') at position [0,0,0] and matcher [T61' / T61, T62' / T62]

U6^1(U5(U8(f594_out1(T61, T62), .(T61, T62)), .(T61, T62)), .(T61, T62)) -> U6^1(U5(U9(f595_in(T62), .(T61, T62), T61, T62), .(T61, T62)), .(T61, T62))
with rule U8(f594_out1(T41, T47'), T40'') -> U9(f595_in(T47'), T40'', T41, T47') at position [0,0] and matcher [T41 / T61, T47' / T62, T40'' / .(T61, T62)]

U6^1(U5(U9(f595_in(T62), .(T61, T62), T61, T62), .(T61, T62)), .(T61, T62)) -> U6^1(U5(U9(f595_out1([]), .(T61, T62), T61, T62), .(T61, T62)), .(T61, T62))
with rule f595_in(T135) -> f595_out1([]) at position [0,0,0] and matcher [T135 / T62]

U6^1(U5(U9(f595_out1([]), .(T61, T62), T61, T62), .(T61, T62)), .(T61, T62)) -> U6^1(U5(f589_out1(T61, T62, []), .(T61, T62)), .(T61, T62))
with rule U9(f595_out1(T48), T40', T41', T47) -> f589_out1(T41', T47, T48) at position [0,0] and matcher [T48 / [], T40' / .(T61, T62), T41' / T61, T47 / T62]

U6^1(U5(f589_out1(T61, T62, []), .(T61, T62)), .(T61, T62)) -> U6^1(f565_out1, .(T61, T62))
with rule U5(f589_out1(T41, X41, T42), T40) -> f565_out1 at position [0] and matcher [T41 / T61, X41 / T62, T42 / [], T40 / .(T61, T62)]

U6^1(f565_out1, .(T61, T62)) -> F59_IN(.(T61, T62))
with rule U6^1(f565_out1, T17') -> F59_IN(T17') at position [] and matcher [T17' / .(T61, T62)]

F59_IN(.(T61, T62)) -> F563_IN(.(T61, T62))
with rule F59_IN(T17) -> F563_IN(T17)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(94)
NO

----------------------------------------

(95) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(color_map (. Region Regions) Colors)",
                "(',' (color_region Region Colors) (color_map Regions Colors))"
            ],
            [
                "(color_map ([]) Colors)",
                null
            ],
            [
                "(color_region (region Name Color Neighbors) Colors)",
                "(',' (select Color Colors Colors1) (members Neighbors Colors1))"
            ],
            [
                "(select X (. X Xs) Xs)",
                null
            ],
            [
                "(select X (. Y Ys) (. Y Zs))",
                "(select X Ys Zs)"
            ],
            [
                "(members (. X Xs) Ys)",
                "(',' (member X Ys) (members Xs Ys))"
            ],
            [
                "(members ([]) Ys)",
                null
            ],
            [
                "(member X (. X X1))",
                null
            ],
            [
                "(member X (. X2 T))",
                "(member X T)"
            ],
            [
                "(test_color Name Map)",
                "(',' (map Name Map) (',' (colors Name Colors) (color_map Map Colors)))"
            ],
            [
                "(map (test) (. (region (a) A (. B (. C (. D ([]))))) (. (region (b) B (. A (. C (. E ([]))))) (. (region (c) C (. A (. B (. D (. E (. F ([]))))))) (. (region (d) D (. A (. C (. F ([]))))) (. (region (e) E (. B (. C (. F ([]))))) (. (region (f) F (. C (. D (. E ([]))))) ([]))))))))",
                null
            ],
            [
                "(map (west_europe) (. (region (portugal) P (. E ([]))) (. (region (spain) E (. F (. P ([])))) (. (region (france) F (. E (. I (. S (. B (. WG (. L ([])))))))) (. (region (belgium) B (. F (. H (. L (. WG ([])))))) (. (region (holland) H (. B (. WG ([])))) (. (region (west_germany) WG (. F (. A (. S (. H (. B (. L ([])))))))) (. (region (luxembourg) L (. F (. B (. WG ([]))))) (. (region (italy) I (. F (. A (. S ([]))))) (. (region (switzerland) S (. F (. I (. A (. WG ([])))))) (. (region (austria) A (. I (. S (. WG ([]))))) ([]))))))))))))",
                null
            ],
            [
                "(colors X (. (red) (. (yellow) (. (blue) (. (white) ([]))))))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "type": "Nodes",
            "591": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "592": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "593": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "650": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "596": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T64 T63 X64)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T63"],
                    "free": ["X64"],
                    "exprvars": []
                }
            },
            "598": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "631": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T121 T120)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T120"],
                    "free": [],
                    "exprvars": []
                }
            },
            "632": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "611": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T91 T90) (members T92 T90))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T90"],
                    "free": [],
                    "exprvars": []
                }
            },
            "612": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "459": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (',' (select T31 T30 X31) (members T32 X31)) (color_map T33 T30))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T30"],
                    "free": ["X31"],
                    "exprvars": []
                }
            },
            "616": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T91 T90)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T90"],
                    "free": [],
                    "exprvars": []
                }
            },
            "638": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "617": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T97 T90)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T90"],
                    "free": [],
                    "exprvars": []
                }
            },
            "639": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "618": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(member T91 T90)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(member T91 T90)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T90"],
                    "free": [],
                    "exprvars": []
                }
            },
            "460": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "461": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T31 T30 X31)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T30"],
                    "free": ["X31"],
                    "exprvars": []
                }
            },
            "462": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (members T39 T38) (color_map T40 T30))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T30",
                        "T38"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "640": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "586": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(select T31 T30 X31)"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(select T31 T30 X31)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T30"],
                    "free": ["X31"],
                    "exprvars": []
                }
            },
            "641": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(color_map T1 T8)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "587": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(select T31 T30 X31)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T30"],
                    "free": ["X31"],
                    "exprvars": []
                }
            },
            "642": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "588": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(select T31 T30 X31)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T30"],
                    "free": ["X31"],
                    "exprvars": []
                }
            },
            "621": {
                "goal": [{
                    "clause": 7,
                    "scope": 5,
                    "term": "(member T91 T90)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T90"],
                    "free": [],
                    "exprvars": []
                }
            },
            "622": {
                "goal": [{
                    "clause": 8,
                    "scope": 5,
                    "term": "(member T91 T90)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T90"],
                    "free": [],
                    "exprvars": []
                }
            },
            "644": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "447": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(',' (color_region T9 T8) (color_map T10 T8))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "448": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "646": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "625": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "60": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (color_region T9 T8) (color_map T10 T8))"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "604": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T39 T38)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T38"],
                    "free": [],
                    "exprvars": []
                }
            },
            "626": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "648": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "605": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T72 T30)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T30"],
                    "free": [],
                    "exprvars": []
                }
            },
            "627": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "649": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "62": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(color_map T1 T2)",
                        "(color_map (. X6 X7) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "606": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(members T39 T38)"
                    },
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(members T39 T38)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T38"],
                    "free": [],
                    "exprvars": []
                }
            },
            "63": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(',' (color_region T9 T8) (color_map T10 T8))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "608": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(members T39 T38)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T38"],
                    "free": [],
                    "exprvars": []
                }
            },
            "609": {
                "goal": [{
                    "clause": 6,
                    "scope": 4,
                    "term": "(members T39 T38)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T38"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 2,
                "label": "CASE"
            },
            {
                "from": 2,
                "to": 60,
                "label": "EVAL with clause\ncolor_map(.(X6, X7), X8) :- ','(color_region(X6, X8), color_map(X7, X8)).\nand substitutionX6 -> T9,\nX7 -> T10,\nT1 -> .(T9, T10),\nT2 -> T8,\nX8 -> T8,\nT6 -> T9,\nT7 -> T10"
            },
            {
                "from": 2,
                "to": 62,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 60,
                "to": 63,
                "label": "CASE"
            },
            {
                "from": 62,
                "to": 648,
                "label": "EVAL with clause\ncolor_map([], X134).\nand substitutionT1 -> [],\nT2 -> T139,\nX134 -> T139"
            },
            {
                "from": 62,
                "to": 649,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 63,
                "to": 447,
                "label": "PARALLEL"
            },
            {
                "from": 63,
                "to": 448,
                "label": "PARALLEL"
            },
            {
                "from": 447,
                "to": 459,
                "label": "EVAL with clause\ncolor_region(region(X27, X28, X29), X30) :- ','(select(X28, X30, X31), members(X29, X31)).\nand substitutionX27 -> T27,\nX28 -> T31,\nX29 -> T32,\nT9 -> region(T27, T31, T32),\nT8 -> T30,\nX30 -> T30,\nT28 -> T31,\nT29 -> T32,\nT10 -> T33"
            },
            {
                "from": 447,
                "to": 460,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 448,
                "to": 641,
                "label": "FAILURE"
            },
            {
                "from": 459,
                "to": 461,
                "label": "SPLIT 1"
            },
            {
                "from": 459,
                "to": 462,
                "label": "SPLIT 2\nnew knowledge:\nT31 is ground\nT30 is ground\nT38 is ground\nreplacements:X31 -> T38,\nT32 -> T39,\nT33 -> T40"
            },
            {
                "from": 461,
                "to": 586,
                "label": "CASE"
            },
            {
                "from": 462,
                "to": 604,
                "label": "SPLIT 1"
            },
            {
                "from": 462,
                "to": 605,
                "label": "SPLIT 2\nnew knowledge:\nT39 is ground\nT38 is ground\nreplacements:T40 -> T72"
            },
            {
                "from": 586,
                "to": 587,
                "label": "PARALLEL"
            },
            {
                "from": 586,
                "to": 588,
                "label": "PARALLEL"
            },
            {
                "from": 587,
                "to": 591,
                "label": "EVAL with clause\nselect(X48, .(X48, X49), X49).\nand substitutionT31 -> T53,\nX48 -> T53,\nX49 -> T54,\nT30 -> .(T53, T54),\nX31 -> T54"
            },
            {
                "from": 587,
                "to": 592,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 588,
                "to": 596,
                "label": "EVAL with clause\nselect(X60, .(X61, X62), .(X61, X63)) :- select(X60, X62, X63).\nand substitutionT31 -> T64,\nX60 -> T64,\nX61 -> T62,\nX62 -> T63,\nT30 -> .(T62, T63),\nX63 -> X64,\nX31 -> .(T62, X64),\nT61 -> T64"
            },
            {
                "from": 588,
                "to": 598,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 591,
                "to": 593,
                "label": "SUCCESS"
            },
            {
                "from": 596,
                "to": 461,
                "label": "INSTANCE with matching:\nT31 -> T64\nT30 -> T63\nX31 -> X64"
            },
            {
                "from": 604,
                "to": 606,
                "label": "CASE"
            },
            {
                "from": 605,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T72\nT2 -> T30"
            },
            {
                "from": 606,
                "to": 608,
                "label": "PARALLEL"
            },
            {
                "from": 606,
                "to": 609,
                "label": "PARALLEL"
            },
            {
                "from": 608,
                "to": 611,
                "label": "EVAL with clause\nmembers(.(X87, X88), X89) :- ','(member(X87, X89), members(X88, X89)).\nand substitutionX87 -> T91,\nX88 -> T92,\nT39 -> .(T91, T92),\nT38 -> T90,\nX89 -> T90,\nT88 -> T91,\nT89 -> T92"
            },
            {
                "from": 608,
                "to": 612,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 609,
                "to": 638,
                "label": "EVAL with clause\nmembers([], X126).\nand substitutionT39 -> [],\nT38 -> T131,\nX126 -> T131"
            },
            {
                "from": 609,
                "to": 639,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 611,
                "to": 616,
                "label": "SPLIT 1"
            },
            {
                "from": 611,
                "to": 617,
                "label": "SPLIT 2\nnew knowledge:\nT91 is ground\nT90 is ground\nreplacements:T92 -> T97"
            },
            {
                "from": 616,
                "to": 618,
                "label": "CASE"
            },
            {
                "from": 617,
                "to": 604,
                "label": "INSTANCE with matching:\nT39 -> T97\nT38 -> T90"
            },
            {
                "from": 618,
                "to": 621,
                "label": "PARALLEL"
            },
            {
                "from": 618,
                "to": 622,
                "label": "PARALLEL"
            },
            {
                "from": 621,
                "to": 625,
                "label": "EVAL with clause\nmember(X106, .(X106, X107)).\nand substitutionT91 -> T110,\nX106 -> T110,\nX107 -> T111,\nT90 -> .(T110, T111)"
            },
            {
                "from": 621,
                "to": 626,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 622,
                "to": 631,
                "label": "EVAL with clause\nmember(X114, .(X115, X116)) :- member(X114, X116).\nand substitutionT91 -> T121,\nX114 -> T121,\nX115 -> T119,\nX116 -> T120,\nT90 -> .(T119, T120),\nT118 -> T121"
            },
            {
                "from": 622,
                "to": 632,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 625,
                "to": 627,
                "label": "SUCCESS"
            },
            {
                "from": 631,
                "to": 616,
                "label": "INSTANCE with matching:\nT91 -> T121\nT90 -> T120"
            },
            {
                "from": 638,
                "to": 640,
                "label": "SUCCESS"
            },
            {
                "from": 641,
                "to": 642,
                "label": "EVAL with clause\ncolor_map([], X132).\nand substitutionT1 -> [],\nT8 -> T137,\nX132 -> T137"
            },
            {
                "from": 641,
                "to": 644,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 642,
                "to": 646,
                "label": "SUCCESS"
            },
            {
                "from": 648,
                "to": 650,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(96)
Obligation:
Triples:

selectA(X1, .(X2, X3), .(X2, X4)) :- selectA(X1, X3, X4).
membersC(.(X1, X2), X3) :- memberD(X1, X3).
membersC(.(X1, X2), X3) :- ','(membercD(X1, X3), membersC(X2, X3)).
memberD(X1, .(X2, X3)) :- memberD(X1, X3).
color_mapB(.(region(X1, X2, X3), X4), X5) :- selectA(X2, X5, X6).
color_mapB(.(region(X1, X2, X3), X4), X5) :- ','(selectcA(X2, X5, X6), membersC(X3, X6)).
color_mapB(.(region(X1, X2, X3), X4), X5) :- ','(selectcA(X2, X5, X6), ','(memberscC(X3, X6), color_mapB(X4, X5))).

Clauses:

selectcA(X1, .(X1, X2), X2).
selectcA(X1, .(X2, X3), .(X2, X4)) :- selectcA(X1, X3, X4).
color_mapcB(.(region(X1, X2, X3), X4), X5) :- ','(selectcA(X2, X5, X6), ','(memberscC(X3, X6), color_mapcB(X4, X5))).
color_mapcB([], X1).
color_mapcB([], X1).
memberscC(.(X1, X2), X3) :- ','(membercD(X1, X3), memberscC(X2, X3)).
memberscC([], X1).
membercD(X1, .(X1, X2)).
membercD(X1, .(X2, X3)) :- membercD(X1, X3).

Afs:

color_mapB(x1, x2)  =  color_mapB(x2)


----------------------------------------

(97) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

color_mapB_in_2: (f,b)

selectA_in_3: (f,b,f)

selectcA_in_3: (f,b,f)

membersC_in_2: (f,b)

memberD_in_2: (f,b)

membercD_in_2: (f,b)

memberscC_in_2: (f,b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> U6_AG(X1, X2, X3, X4, X5, selectA_in_aga(X2, X5, X6))
   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> SELECTA_IN_AGA(X2, X5, X6)
   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> U1_AGA(X1, X2, X3, X4, selectA_in_aga(X1, X3, X4))
   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> SELECTA_IN_AGA(X1, X3, X4)
   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> U7_AG(X1, X2, X3, X4, X5, selectcA_in_aga(X2, X5, X6))
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> U8_AG(X1, X2, X3, X4, X5, membersC_in_ag(X3, X6))
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> MEMBERSC_IN_AG(X3, X6)
   MEMBERSC_IN_AG(.(X1, X2), X3) -> U2_AG(X1, X2, X3, memberD_in_ag(X1, X3))
   MEMBERSC_IN_AG(.(X1, X2), X3) -> MEMBERD_IN_AG(X1, X3)
   MEMBERD_IN_AG(X1, .(X2, X3)) -> U5_AG(X1, X2, X3, memberD_in_ag(X1, X3))
   MEMBERD_IN_AG(X1, .(X2, X3)) -> MEMBERD_IN_AG(X1, X3)
   MEMBERSC_IN_AG(.(X1, X2), X3) -> U3_AG(X1, X2, X3, membercD_in_ag(X1, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> U4_AG(X1, X2, X3, membersC_in_ag(X2, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X2, X3)
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> U9_AG(X1, X2, X3, X4, X5, memberscC_in_ag(X3, X6))
   U9_AG(X1, X2, X3, X4, X5, memberscC_out_ag(X3, X6)) -> U10_AG(X1, X2, X3, X4, X5, color_mapB_in_ag(X4, X5))
   U9_AG(X1, X2, X3, X4, X5, memberscC_out_ag(X3, X6)) -> COLOR_MAPB_IN_AG(X4, X5)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
color_mapB_in_ag(x1, x2)  =  color_mapB_in_ag(x2)

selectA_in_aga(x1, x2, x3)  =  selectA_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membersC_in_ag(x1, x2)  =  membersC_in_ag(x2)

memberD_in_ag(x1, x2)  =  memberD_in_ag(x2)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

COLOR_MAPB_IN_AG(x1, x2)  =  COLOR_MAPB_IN_AG(x2)

U6_AG(x1, x2, x3, x4, x5, x6)  =  U6_AG(x5, x6)

SELECTA_IN_AGA(x1, x2, x3)  =  SELECTA_IN_AGA(x2)

U1_AGA(x1, x2, x3, x4, x5)  =  U1_AGA(x2, x3, x5)

U7_AG(x1, x2, x3, x4, x5, x6)  =  U7_AG(x5, x6)

U8_AG(x1, x2, x3, x4, x5, x6)  =  U8_AG(x5, x6)

MEMBERSC_IN_AG(x1, x2)  =  MEMBERSC_IN_AG(x2)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x3, x4)

MEMBERD_IN_AG(x1, x2)  =  MEMBERD_IN_AG(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x2, x3, x4)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x3, x4)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x3, x4)

U9_AG(x1, x2, x3, x4, x5, x6)  =  U9_AG(x5, x6)

U10_AG(x1, x2, x3, x4, x5, x6)  =  U10_AG(x5, x6)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(98)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> U6_AG(X1, X2, X3, X4, X5, selectA_in_aga(X2, X5, X6))
   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> SELECTA_IN_AGA(X2, X5, X6)
   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> U1_AGA(X1, X2, X3, X4, selectA_in_aga(X1, X3, X4))
   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> SELECTA_IN_AGA(X1, X3, X4)
   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> U7_AG(X1, X2, X3, X4, X5, selectcA_in_aga(X2, X5, X6))
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> U8_AG(X1, X2, X3, X4, X5, membersC_in_ag(X3, X6))
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> MEMBERSC_IN_AG(X3, X6)
   MEMBERSC_IN_AG(.(X1, X2), X3) -> U2_AG(X1, X2, X3, memberD_in_ag(X1, X3))
   MEMBERSC_IN_AG(.(X1, X2), X3) -> MEMBERD_IN_AG(X1, X3)
   MEMBERD_IN_AG(X1, .(X2, X3)) -> U5_AG(X1, X2, X3, memberD_in_ag(X1, X3))
   MEMBERD_IN_AG(X1, .(X2, X3)) -> MEMBERD_IN_AG(X1, X3)
   MEMBERSC_IN_AG(.(X1, X2), X3) -> U3_AG(X1, X2, X3, membercD_in_ag(X1, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> U4_AG(X1, X2, X3, membersC_in_ag(X2, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X2, X3)
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> U9_AG(X1, X2, X3, X4, X5, memberscC_in_ag(X3, X6))
   U9_AG(X1, X2, X3, X4, X5, memberscC_out_ag(X3, X6)) -> U10_AG(X1, X2, X3, X4, X5, color_mapB_in_ag(X4, X5))
   U9_AG(X1, X2, X3, X4, X5, memberscC_out_ag(X3, X6)) -> COLOR_MAPB_IN_AG(X4, X5)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
color_mapB_in_ag(x1, x2)  =  color_mapB_in_ag(x2)

selectA_in_aga(x1, x2, x3)  =  selectA_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membersC_in_ag(x1, x2)  =  membersC_in_ag(x2)

memberD_in_ag(x1, x2)  =  memberD_in_ag(x2)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

COLOR_MAPB_IN_AG(x1, x2)  =  COLOR_MAPB_IN_AG(x2)

U6_AG(x1, x2, x3, x4, x5, x6)  =  U6_AG(x5, x6)

SELECTA_IN_AGA(x1, x2, x3)  =  SELECTA_IN_AGA(x2)

U1_AGA(x1, x2, x3, x4, x5)  =  U1_AGA(x2, x3, x5)

U7_AG(x1, x2, x3, x4, x5, x6)  =  U7_AG(x5, x6)

U8_AG(x1, x2, x3, x4, x5, x6)  =  U8_AG(x5, x6)

MEMBERSC_IN_AG(x1, x2)  =  MEMBERSC_IN_AG(x2)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x3, x4)

MEMBERD_IN_AG(x1, x2)  =  MEMBERD_IN_AG(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x2, x3, x4)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x3, x4)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x3, x4)

U9_AG(x1, x2, x3, x4, x5, x6)  =  U9_AG(x5, x6)

U10_AG(x1, x2, x3, x4, x5, x6)  =  U10_AG(x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(99) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 4 SCCs with 10 less nodes.
----------------------------------------

(100)
Complex Obligation (AND)

----------------------------------------

(101)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERD_IN_AG(X1, .(X2, X3)) -> MEMBERD_IN_AG(X1, X3)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

MEMBERD_IN_AG(x1, x2)  =  MEMBERD_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(102) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(103)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERD_IN_AG(X1, .(X2, X3)) -> MEMBERD_IN_AG(X1, X3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBERD_IN_AG(x1, x2)  =  MEMBERD_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(104) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(105)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERD_IN_AG(.(X2, X3)) -> MEMBERD_IN_AG(X3)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(106) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBERD_IN_AG(.(X2, X3)) -> MEMBERD_IN_AG(X3)
The graph contains the following edges 1 > 1


----------------------------------------

(107)
YES

----------------------------------------

(108)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERSC_IN_AG(.(X1, X2), X3) -> U3_AG(X1, X2, X3, membercD_in_ag(X1, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X2, X3)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

MEMBERSC_IN_AG(x1, x2)  =  MEMBERSC_IN_AG(x2)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(109) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(110)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERSC_IN_AG(.(X1, X2), X3) -> U3_AG(X1, X2, X3, membercD_in_ag(X1, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X2, X3)

The TRS R consists of the following rules:

   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

MEMBERSC_IN_AG(x1, x2)  =  MEMBERSC_IN_AG(x2)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(111) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(112)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERSC_IN_AG(X3) -> U3_AG(X3, membercD_in_ag(X3))
   U3_AG(X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X3)

The TRS R consists of the following rules:

   membercD_in_ag(.(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(.(X2, X3)) -> U18_ag(X2, X3, membercD_in_ag(X3))
   U18_ag(X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))

The set Q consists of the following terms:

   membercD_in_ag(x0)
   U18_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(113) TransformationProof (SOUND)
By narrowing [LPAR04] the rule MEMBERSC_IN_AG(X3) -> U3_AG(X3, membercD_in_ag(X3)) at position [1] we obtained the following new rules [LPAR04]:

   (MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), membercD_out_ag(x0, .(x0, x1))),MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), membercD_out_ag(x0, .(x0, x1))))
   (MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), U18_ag(x0, x1, membercD_in_ag(x1))),MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), U18_ag(x0, x1, membercD_in_ag(x1))))


----------------------------------------

(114)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_AG(X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X3)
   MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), membercD_out_ag(x0, .(x0, x1)))
   MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), U18_ag(x0, x1, membercD_in_ag(x1)))

The TRS R consists of the following rules:

   membercD_in_ag(.(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(.(X2, X3)) -> U18_ag(X2, X3, membercD_in_ag(X3))
   U18_ag(X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))

The set Q consists of the following terms:

   membercD_in_ag(x0)
   U18_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(115) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U3_AG(X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X3) we obtained the following new rules [LPAR04]:

   (U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1)),U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1)))
   (U3_AG(.(z0, z1), membercD_out_ag(x1, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1)),U3_AG(.(z0, z1), membercD_out_ag(x1, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1)))


----------------------------------------

(116)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), membercD_out_ag(x0, .(x0, x1)))
   MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), U18_ag(x0, x1, membercD_in_ag(x1)))
   U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1))
   U3_AG(.(z0, z1), membercD_out_ag(x1, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1))

The TRS R consists of the following rules:

   membercD_in_ag(.(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(.(X2, X3)) -> U18_ag(X2, X3, membercD_in_ag(X3))
   U18_ag(X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))

The set Q consists of the following terms:

   membercD_in_ag(x0)
   U18_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(117) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1))) evaluates to  t =U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1)))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1))
with rule U3_AG(.(z0', z1'), membercD_out_ag(z0', .(z0', z1'))) -> MEMBERSC_IN_AG(.(z0', z1')) at position [] and matcher [z0' / z0, z1' / z1]

MEMBERSC_IN_AG(.(z0, z1)) -> U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1)))
with rule MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), membercD_out_ag(x0, .(x0, x1)))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(118)
NO

----------------------------------------

(119)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> SELECTA_IN_AGA(X1, X3, X4)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

SELECTA_IN_AGA(x1, x2, x3)  =  SELECTA_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(120) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(121)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> SELECTA_IN_AGA(X1, X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

SELECTA_IN_AGA(x1, x2, x3)  =  SELECTA_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(122) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(123)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SELECTA_IN_AGA(.(X2, X3)) -> SELECTA_IN_AGA(X3)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(124) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SELECTA_IN_AGA(.(X2, X3)) -> SELECTA_IN_AGA(X3)
The graph contains the following edges 1 > 1


----------------------------------------

(125)
YES

----------------------------------------

(126)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> U7_AG(X1, X2, X3, X4, X5, selectcA_in_aga(X2, X5, X6))
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> U9_AG(X1, X2, X3, X4, X5, memberscC_in_ag(X3, X6))
   U9_AG(X1, X2, X3, X4, X5, memberscC_out_ag(X3, X6)) -> COLOR_MAPB_IN_AG(X4, X5)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

COLOR_MAPB_IN_AG(x1, x2)  =  COLOR_MAPB_IN_AG(x2)

U7_AG(x1, x2, x3, x4, x5, x6)  =  U7_AG(x5, x6)

U9_AG(x1, x2, x3, x4, x5, x6)  =  U9_AG(x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(127) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(128)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COLOR_MAPB_IN_AG(X5) -> U7_AG(X5, selectcA_in_aga(X5))
   U7_AG(X5, selectcA_out_aga(X2, X5, X6)) -> U9_AG(X5, memberscC_in_ag(X6))
   U9_AG(X5, memberscC_out_ag(X3, X6)) -> COLOR_MAPB_IN_AG(X5)

The TRS R consists of the following rules:

   selectcA_in_aga(.(X1, X2)) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(.(X2, X3)) -> U12_aga(X2, X3, selectcA_in_aga(X3))
   U12_aga(X2, X3, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(.(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(.(X2, X3)) -> U18_ag(X2, X3, membercD_in_ag(X3))
   U18_ag(X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(X3) -> U16_ag(X3, membercD_in_ag(X3))
   U16_ag(X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X3, memberscC_in_ag(X3))
   memberscC_in_ag(X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The set Q consists of the following terms:

   selectcA_in_aga(x0)
   U12_aga(x0, x1, x2)
   membercD_in_ag(x0)
   U18_ag(x0, x1, x2)
   memberscC_in_ag(x0)
   U16_ag(x0, x1)
   U17_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(129) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(color_map (. Region Regions) Colors)",
                "(',' (color_region Region Colors) (color_map Regions Colors))"
            ],
            [
                "(color_map ([]) Colors)",
                null
            ],
            [
                "(color_region (region Name Color Neighbors) Colors)",
                "(',' (select Color Colors Colors1) (members Neighbors Colors1))"
            ],
            [
                "(select X (. X Xs) Xs)",
                null
            ],
            [
                "(select X (. Y Ys) (. Y Zs))",
                "(select X Ys Zs)"
            ],
            [
                "(members (. X Xs) Ys)",
                "(',' (member X Ys) (members Xs Ys))"
            ],
            [
                "(members ([]) Ys)",
                null
            ],
            [
                "(member X (. X X1))",
                null
            ],
            [
                "(member X (. X2 T))",
                "(member X T)"
            ],
            [
                "(test_color Name Map)",
                "(',' (map Name Map) (',' (colors Name Colors) (color_map Map Colors)))"
            ],
            [
                "(map (test) (. (region (a) A (. B (. C (. D ([]))))) (. (region (b) B (. A (. C (. E ([]))))) (. (region (c) C (. A (. B (. D (. E (. F ([]))))))) (. (region (d) D (. A (. C (. F ([]))))) (. (region (e) E (. B (. C (. F ([]))))) (. (region (f) F (. C (. D (. E ([]))))) ([]))))))))",
                null
            ],
            [
                "(map (west_europe) (. (region (portugal) P (. E ([]))) (. (region (spain) E (. F (. P ([])))) (. (region (france) F (. E (. I (. S (. B (. WG (. L ([])))))))) (. (region (belgium) B (. F (. H (. L (. WG ([])))))) (. (region (holland) H (. B (. WG ([])))) (. (region (west_germany) WG (. F (. A (. S (. H (. B (. L ([])))))))) (. (region (luxembourg) L (. F (. B (. WG ([]))))) (. (region (italy) I (. F (. A (. S ([]))))) (. (region (switzerland) S (. F (. I (. A (. WG ([])))))) (. (region (austria) A (. I (. S (. WG ([]))))) ([]))))))))))))",
                null
            ],
            [
                "(colors X (. (red) (. (yellow) (. (blue) (. (white) ([]))))))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "type": "Nodes",
            "471": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_region T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "495": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T24 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "654": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T95 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "512": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T41 T40 X41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "655": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T101 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "513": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T48 T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "656": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(member T95 T94)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(member T95 T94)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "514": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(select T41 T40 X41)"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(select T41 T40 X41)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "657": {
                "goal": [{
                    "clause": 7,
                    "scope": 5,
                    "term": "(member T95 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "515": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(select T41 T40 X41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "658": {
                "goal": [{
                    "clause": 8,
                    "scope": 5,
                    "term": "(member T95 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "516": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(select T41 T40 X41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "659": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "517": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "518": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "519": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "660": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "584": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T95 T94) (members T96 T94))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "661": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "585": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "662": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T125 T124)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T124"],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "520": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T72 T71 X74)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T71"],
                    "free": ["X74"],
                    "exprvars": []
                }
            },
            "542": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(members T48 T47)"
                    },
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(members T48 T47)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "663": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "521": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "543": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(members T48 T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "664": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "544": {
                "goal": [{
                    "clause": 6,
                    "scope": 4,
                    "term": "(members T48 T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "665": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "666": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "667": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (color_region T18 T17) (color_map T19 T17))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "668": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "504": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(color_region T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "669": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "507": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (select T41 T40 X41) (members T42 X41))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "508": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 5,
                "label": "PARALLEL"
            },
            {
                "from": 4,
                "to": 6,
                "label": "PARALLEL"
            },
            {
                "from": 5,
                "to": 8,
                "label": "EVAL with clause\ncolor_map(.(X15, X16), X17) :- ','(color_region(X15, X17), color_map(X16, X17)).\nand substitutionX15 -> T18,\nX16 -> T19,\nT1 -> .(T18, T19),\nT2 -> T17,\nX17 -> T17,\nT15 -> T18,\nT16 -> T19"
            },
            {
                "from": 5,
                "to": 9,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 6,
                "to": 667,
                "label": "EVAL with clause\ncolor_map([], X139).\nand substitutionT1 -> [],\nT2 -> T141,\nX139 -> T141"
            },
            {
                "from": 6,
                "to": 668,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 8,
                "to": 471,
                "label": "SPLIT 1"
            },
            {
                "from": 8,
                "to": 495,
                "label": "SPLIT 2\nnew knowledge:\nT17 is ground\nreplacements:T19 -> T24"
            },
            {
                "from": 471,
                "to": 504,
                "label": "CASE"
            },
            {
                "from": 495,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T24\nT2 -> T17"
            },
            {
                "from": 504,
                "to": 507,
                "label": "EVAL with clause\ncolor_region(region(X37, X38, X39), X40) :- ','(select(X38, X40, X41), members(X39, X41)).\nand substitutionX37 -> T37,\nX38 -> T41,\nX39 -> T42,\nT18 -> region(T37, T41, T42),\nT17 -> T40,\nX40 -> T40,\nT38 -> T41,\nT39 -> T42"
            },
            {
                "from": 504,
                "to": 508,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 507,
                "to": 512,
                "label": "SPLIT 1"
            },
            {
                "from": 507,
                "to": 513,
                "label": "SPLIT 2\nnew knowledge:\nT41 is ground\nT40 is ground\nT47 is ground\nreplacements:X41 -> T47,\nT42 -> T48"
            },
            {
                "from": 512,
                "to": 514,
                "label": "CASE"
            },
            {
                "from": 513,
                "to": 542,
                "label": "CASE"
            },
            {
                "from": 514,
                "to": 515,
                "label": "PARALLEL"
            },
            {
                "from": 514,
                "to": 516,
                "label": "PARALLEL"
            },
            {
                "from": 515,
                "to": 517,
                "label": "EVAL with clause\nselect(X58, .(X58, X59), X59).\nand substitutionT41 -> T61,\nX58 -> T61,\nX59 -> T62,\nT40 -> .(T61, T62),\nX41 -> T62"
            },
            {
                "from": 515,
                "to": 518,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 516,
                "to": 520,
                "label": "EVAL with clause\nselect(X70, .(X71, X72), .(X71, X73)) :- select(X70, X72, X73).\nand substitutionT41 -> T72,\nX70 -> T72,\nX71 -> T70,\nX72 -> T71,\nT40 -> .(T70, T71),\nX73 -> X74,\nX41 -> .(T70, X74),\nT69 -> T72"
            },
            {
                "from": 516,
                "to": 521,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 517,
                "to": 519,
                "label": "SUCCESS"
            },
            {
                "from": 520,
                "to": 512,
                "label": "INSTANCE with matching:\nT41 -> T72\nT40 -> T71\nX41 -> X74"
            },
            {
                "from": 542,
                "to": 543,
                "label": "PARALLEL"
            },
            {
                "from": 542,
                "to": 544,
                "label": "PARALLEL"
            },
            {
                "from": 543,
                "to": 584,
                "label": "EVAL with clause\nmembers(.(X94, X95), X96) :- ','(member(X94, X96), members(X95, X96)).\nand substitutionX94 -> T95,\nX95 -> T96,\nT48 -> .(T95, T96),\nT47 -> T94,\nX96 -> T94,\nT92 -> T95,\nT93 -> T96"
            },
            {
                "from": 543,
                "to": 585,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 544,
                "to": 664,
                "label": "EVAL with clause\nmembers([], X133).\nand substitutionT48 -> [],\nT47 -> T135,\nX133 -> T135"
            },
            {
                "from": 544,
                "to": 665,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 584,
                "to": 654,
                "label": "SPLIT 1"
            },
            {
                "from": 584,
                "to": 655,
                "label": "SPLIT 2\nnew knowledge:\nT95 is ground\nT94 is ground\nreplacements:T96 -> T101"
            },
            {
                "from": 654,
                "to": 656,
                "label": "CASE"
            },
            {
                "from": 655,
                "to": 513,
                "label": "INSTANCE with matching:\nT48 -> T101\nT47 -> T94"
            },
            {
                "from": 656,
                "to": 657,
                "label": "PARALLEL"
            },
            {
                "from": 656,
                "to": 658,
                "label": "PARALLEL"
            },
            {
                "from": 657,
                "to": 659,
                "label": "EVAL with clause\nmember(X113, .(X113, X114)).\nand substitutionT95 -> T114,\nX113 -> T114,\nX114 -> T115,\nT94 -> .(T114, T115)"
            },
            {
                "from": 657,
                "to": 660,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 658,
                "to": 662,
                "label": "EVAL with clause\nmember(X121, .(X122, X123)) :- member(X121, X123).\nand substitutionT95 -> T125,\nX121 -> T125,\nX122 -> T123,\nX123 -> T124,\nT94 -> .(T123, T124),\nT122 -> T125"
            },
            {
                "from": 658,
                "to": 663,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 659,
                "to": 661,
                "label": "SUCCESS"
            },
            {
                "from": 662,
                "to": 654,
                "label": "INSTANCE with matching:\nT95 -> T125\nT94 -> T124"
            },
            {
                "from": 664,
                "to": 666,
                "label": "SUCCESS"
            },
            {
                "from": 667,
                "to": 669,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(130)
Complex Obligation (AND)

----------------------------------------

(131)
Obligation:
Rules:
f662_in(T124) -> f654_in(T124) :|: TRUE
f654_out(x) -> f662_out(x) :|: TRUE
f657_out(T94) -> f656_out(T94) :|: TRUE
f656_in(x1) -> f658_in(x1) :|: TRUE
f658_out(x2) -> f656_out(x2) :|: TRUE
f656_in(x3) -> f657_in(x3) :|: TRUE
f658_in(x4) -> f663_in :|: TRUE
f663_out -> f658_out(x5) :|: TRUE
f658_in(.(x6, x7)) -> f662_in(x7) :|: TRUE
f662_out(x8) -> f658_out(.(x9, x8)) :|: TRUE
f654_in(x10) -> f656_in(x10) :|: TRUE
f656_out(x11) -> f654_out(x11) :|: TRUE
f4_out(T2) -> f3_out(T2) :|: TRUE
f3_in(x12) -> f4_in(x12) :|: TRUE
f5_out(x13) -> f4_out(x13) :|: TRUE
f4_in(x14) -> f6_in(x14) :|: TRUE
f6_out(x15) -> f4_out(x15) :|: TRUE
f4_in(x16) -> f5_in(x16) :|: TRUE
f9_out -> f5_out(x17) :|: TRUE
f5_in(x18) -> f9_in :|: TRUE
f5_in(T17) -> f8_in(T17) :|: TRUE
f8_out(x19) -> f5_out(x19) :|: TRUE
f495_out(x20) -> f8_out(x20) :|: TRUE
f471_out(x21) -> f495_in(x21) :|: TRUE
f8_in(x22) -> f471_in(x22) :|: TRUE
f471_in(x23) -> f504_in(x23) :|: TRUE
f504_out(x24) -> f471_out(x24) :|: TRUE
f508_out -> f504_out(x25) :|: TRUE
f504_in(T40) -> f507_in(T40) :|: TRUE
f504_in(x26) -> f508_in :|: TRUE
f507_out(x27) -> f504_out(x27) :|: TRUE
f507_in(x28) -> f512_in(x28) :|: TRUE
f512_out(x29) -> f513_in(x30) :|: TRUE
f513_out(x31) -> f507_out(x32) :|: TRUE
f513_in(T47) -> f542_in(T47) :|: TRUE
f542_out(x33) -> f513_out(x33) :|: TRUE
f544_out(x34) -> f542_out(x34) :|: TRUE
f542_in(x35) -> f544_in(x35) :|: TRUE
f543_out(x36) -> f542_out(x36) :|: TRUE
f542_in(x37) -> f543_in(x37) :|: TRUE
f543_in(x38) -> f584_in(x38) :|: TRUE
f584_out(x39) -> f543_out(x39) :|: TRUE
f543_in(x40) -> f585_in :|: TRUE
f585_out -> f543_out(x41) :|: TRUE
f654_out(x42) -> f655_in(x42) :|: TRUE
f584_in(x43) -> f654_in(x43) :|: TRUE
f655_out(x44) -> f584_out(x44) :|: TRUE
Start term: f3_in(T2)

----------------------------------------

(132) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:


----------------------------------------

(133)
TRUE

----------------------------------------

(134)
Obligation:
Rules:
f662_in(T124) -> f654_in(T124) :|: TRUE
f654_out(x) -> f662_out(x) :|: TRUE
f513_in(T47) -> f542_in(T47) :|: TRUE
f542_out(x1) -> f513_out(x1) :|: TRUE
f654_out(T94) -> f655_in(T94) :|: TRUE
f584_in(x2) -> f654_in(x2) :|: TRUE
f655_out(x3) -> f584_out(x3) :|: TRUE
f658_in(x4) -> f663_in :|: TRUE
f663_out -> f658_out(x5) :|: TRUE
f658_in(.(x6, x7)) -> f662_in(x7) :|: TRUE
f662_out(x8) -> f658_out(.(x9, x8)) :|: TRUE
f659_in -> f659_out :|: TRUE
f543_in(x10) -> f584_in(x10) :|: TRUE
f584_out(x11) -> f543_out(x11) :|: TRUE
f543_in(x12) -> f585_in :|: TRUE
f585_out -> f543_out(x13) :|: TRUE
f513_out(x14) -> f655_out(x14) :|: TRUE
f655_in(x15) -> f513_in(x15) :|: TRUE
f544_out(x16) -> f542_out(x16) :|: TRUE
f542_in(x17) -> f544_in(x17) :|: TRUE
f543_out(x18) -> f542_out(x18) :|: TRUE
f542_in(x19) -> f543_in(x19) :|: TRUE
f657_out(x20) -> f656_out(x20) :|: TRUE
f656_in(x21) -> f658_in(x21) :|: TRUE
f658_out(x22) -> f656_out(x22) :|: TRUE
f656_in(x23) -> f657_in(x23) :|: TRUE
f657_in(.(T114, T115)) -> f659_in :|: TRUE
f660_out -> f657_out(x24) :|: TRUE
f657_in(x25) -> f660_in :|: TRUE
f659_out -> f657_out(.(x26, x27)) :|: TRUE
f654_in(x28) -> f656_in(x28) :|: TRUE
f656_out(x29) -> f654_out(x29) :|: TRUE
f4_out(T2) -> f3_out(T2) :|: TRUE
f3_in(x30) -> f4_in(x30) :|: TRUE
f5_out(x31) -> f4_out(x31) :|: TRUE
f4_in(x32) -> f6_in(x32) :|: TRUE
f6_out(x33) -> f4_out(x33) :|: TRUE
f4_in(x34) -> f5_in(x34) :|: TRUE
f9_out -> f5_out(x35) :|: TRUE
f5_in(x36) -> f9_in :|: TRUE
f5_in(T17) -> f8_in(T17) :|: TRUE
f8_out(x37) -> f5_out(x37) :|: TRUE
f495_out(x38) -> f8_out(x38) :|: TRUE
f471_out(x39) -> f495_in(x39) :|: TRUE
f8_in(x40) -> f471_in(x40) :|: TRUE
f471_in(x41) -> f504_in(x41) :|: TRUE
f504_out(x42) -> f471_out(x42) :|: TRUE
f508_out -> f504_out(x43) :|: TRUE
f504_in(T40) -> f507_in(T40) :|: TRUE
f504_in(x44) -> f508_in :|: TRUE
f507_out(x45) -> f504_out(x45) :|: TRUE
f507_in(x46) -> f512_in(x46) :|: TRUE
f512_out(x47) -> f513_in(x48) :|: TRUE
f513_out(x49) -> f507_out(x50) :|: TRUE
Start term: f3_in(T2)

----------------------------------------

(135) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:


----------------------------------------

(136)
TRUE

----------------------------------------

(137)
Obligation:
Rules:
f512_in(T40) -> f514_in(T40) :|: TRUE
f514_out(x) -> f512_out(x) :|: TRUE
f514_in(x1) -> f516_in(x1) :|: TRUE
f515_out(x2) -> f514_out(x2) :|: TRUE
f514_in(x3) -> f515_in(x3) :|: TRUE
f516_out(x4) -> f514_out(x4) :|: TRUE
f516_in(x5) -> f521_in :|: TRUE
f521_out -> f516_out(x6) :|: TRUE
f516_in(.(T70, T71)) -> f520_in(T71) :|: TRUE
f520_out(x7) -> f516_out(.(x8, x7)) :|: TRUE
f520_in(x9) -> f512_in(x9) :|: TRUE
f512_out(x10) -> f520_out(x10) :|: TRUE
f4_out(T2) -> f3_out(T2) :|: TRUE
f3_in(x11) -> f4_in(x11) :|: TRUE
f5_out(x12) -> f4_out(x12) :|: TRUE
f4_in(x13) -> f6_in(x13) :|: TRUE
f6_out(x14) -> f4_out(x14) :|: TRUE
f4_in(x15) -> f5_in(x15) :|: TRUE
f9_out -> f5_out(x16) :|: TRUE
f5_in(x17) -> f9_in :|: TRUE
f5_in(T17) -> f8_in(T17) :|: TRUE
f8_out(x18) -> f5_out(x18) :|: TRUE
f495_out(x19) -> f8_out(x19) :|: TRUE
f471_out(x20) -> f495_in(x20) :|: TRUE
f8_in(x21) -> f471_in(x21) :|: TRUE
f471_in(x22) -> f504_in(x22) :|: TRUE
f504_out(x23) -> f471_out(x23) :|: TRUE
f508_out -> f504_out(x24) :|: TRUE
f504_in(x25) -> f507_in(x25) :|: TRUE
f504_in(x26) -> f508_in :|: TRUE
f507_out(x27) -> f504_out(x27) :|: TRUE
f507_in(x28) -> f512_in(x28) :|: TRUE
f512_out(x29) -> f513_in(x30) :|: TRUE
f513_out(x31) -> f507_out(x32) :|: TRUE
Start term: f3_in(T2)

----------------------------------------

(138) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f512_in(T40) -> f514_in(T40) :|: TRUE
f514_in(x1) -> f516_in(x1) :|: TRUE
f516_in(.(T70, T71)) -> f520_in(T71) :|: TRUE
f520_in(x9) -> f512_in(x9) :|: TRUE


----------------------------------------

(139)
Obligation:
Rules:
f512_in(T40) -> f514_in(T40) :|: TRUE
f514_in(x1) -> f516_in(x1) :|: TRUE
f516_in(.(T70, T71)) -> f520_in(T71) :|: TRUE
f520_in(x9) -> f512_in(x9) :|: TRUE

----------------------------------------

(140) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(141)
Obligation:
Rules:
f512_in(.(T70:0, T71:0)) -> f512_in(T71:0) :|: TRUE

----------------------------------------

(142) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(143)
Obligation:
Rules:
f512_in(.(T70:0, T71:0)) -> f512_in(T71:0) :|: TRUE

----------------------------------------

(144) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f512_in(.(T70:0, T71:0)) -> f512_in(T71:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(145)
Obligation:

Termination digraph:
Nodes:
(1) f512_in(.(T70:0, T71:0)) -> f512_in(T71:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(146) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   .(x1, x2) -> .(x2)

----------------------------------------

(147)
Obligation:
Rules:
f512_in(.(T71:0)) -> f512_in(T71:0) :|: TRUE

----------------------------------------

(148) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f512_in(VARIABLE)
.(VARIABLE)
Removed predefined arithmetic.
----------------------------------------

(149)
Obligation:
Rules:
f512_in(.(T71:0)) -> f512_in(T71:0)

----------------------------------------

(150) IRSwTToQDPProof (SOUND)
Removed the integers and created a QDP-Problem.
----------------------------------------

(151)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f512_in(.(T71:0)) -> f512_in(T71:0)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(152) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*f512_in(.(T71:0)) -> f512_in(T71:0)
The graph contains the following edges 1 > 1


----------------------------------------

(153)
YES

----------------------------------------

(154)
Obligation:
Rules:
f662_in(T124) -> f654_in(T124) :|: TRUE
f654_out(x) -> f662_out(x) :|: TRUE
f513_in(T47) -> f542_in(T47) :|: TRUE
f542_out(x1) -> f513_out(x1) :|: TRUE
f654_out(T94) -> f655_in(T94) :|: TRUE
f584_in(x2) -> f654_in(x2) :|: TRUE
f655_out(x3) -> f584_out(x3) :|: TRUE
f543_in(x4) -> f584_in(x4) :|: TRUE
f584_out(x5) -> f543_out(x5) :|: TRUE
f543_in(x6) -> f585_in :|: TRUE
f585_out -> f543_out(x7) :|: TRUE
f514_in(T40) -> f516_in(T40) :|: TRUE
f515_out(x8) -> f514_out(x8) :|: TRUE
f514_in(x9) -> f515_in(x9) :|: TRUE
f516_out(x10) -> f514_out(x10) :|: TRUE
f520_in(T71) -> f512_in(T71) :|: TRUE
f512_out(x11) -> f520_out(x11) :|: TRUE
f544_out(x12) -> f542_out(x12) :|: TRUE
f542_in(x13) -> f544_in(x13) :|: TRUE
f543_out(x14) -> f542_out(x14) :|: TRUE
f542_in(x15) -> f543_in(x15) :|: TRUE
f512_in(x16) -> f514_in(x16) :|: TRUE
f514_out(x17) -> f512_out(x17) :|: TRUE
f495_in(T17) -> f3_in(T17) :|: TRUE
f3_out(x18) -> f495_out(x18) :|: TRUE
f4_out(T2) -> f3_out(T2) :|: TRUE
f3_in(x19) -> f4_in(x19) :|: TRUE
f5_out(x20) -> f4_out(x20) :|: TRUE
f4_in(x21) -> f6_in(x21) :|: TRUE
f6_out(x22) -> f4_out(x22) :|: TRUE
f4_in(x23) -> f5_in(x23) :|: TRUE
f657_in(.(T114, T115)) -> f659_in :|: TRUE
f660_out -> f657_out(x24) :|: TRUE
f657_in(x25) -> f660_in :|: TRUE
f659_out -> f657_out(.(x26, x27)) :|: TRUE
f517_in -> f517_out :|: TRUE
f654_in(x28) -> f656_in(x28) :|: TRUE
f656_out(x29) -> f654_out(x29) :|: TRUE
f507_in(x30) -> f512_in(x30) :|: TRUE
f512_out(x31) -> f513_in(x32) :|: TRUE
f513_out(x33) -> f507_out(x34) :|: TRUE
f495_out(x35) -> f8_out(x35) :|: TRUE
f471_out(x36) -> f495_in(x36) :|: TRUE
f8_in(x37) -> f471_in(x37) :|: TRUE
f658_in(x38) -> f663_in :|: TRUE
f663_out -> f658_out(x39) :|: TRUE
f658_in(.(x40, x41)) -> f662_in(x41) :|: TRUE
f662_out(x42) -> f658_out(.(x43, x42)) :|: TRUE
f659_in -> f659_out :|: TRUE
f516_in(x44) -> f521_in :|: TRUE
f521_out -> f516_out(x45) :|: TRUE
f516_in(.(x46, x47)) -> f520_in(x47) :|: TRUE
f520_out(x48) -> f516_out(.(x49, x48)) :|: TRUE
f513_out(x50) -> f655_out(x50) :|: TRUE
f655_in(x51) -> f513_in(x51) :|: TRUE
f508_out -> f504_out(x52) :|: TRUE
f504_in(x53) -> f507_in(x53) :|: TRUE
f504_in(x54) -> f508_in :|: TRUE
f507_out(x55) -> f504_out(x55) :|: TRUE
f515_in(x56) -> f518_in :|: TRUE
f515_in(.(T61, T62)) -> f517_in :|: TRUE
f517_out -> f515_out(.(x57, x58)) :|: TRUE
f518_out -> f515_out(x59) :|: TRUE
f544_in(T135) -> f664_in :|: TRUE
f665_out -> f544_out(x60) :|: TRUE
f664_out -> f544_out(x61) :|: TRUE
f544_in(x62) -> f665_in :|: TRUE
f657_out(x63) -> f656_out(x63) :|: TRUE
f656_in(x64) -> f658_in(x64) :|: TRUE
f658_out(x65) -> f656_out(x65) :|: TRUE
f656_in(x66) -> f657_in(x66) :|: TRUE
f9_out -> f5_out(x67) :|: TRUE
f5_in(x68) -> f9_in :|: TRUE
f5_in(x69) -> f8_in(x69) :|: TRUE
f8_out(x70) -> f5_out(x70) :|: TRUE
f471_in(x71) -> f504_in(x71) :|: TRUE
f504_out(x72) -> f471_out(x72) :|: TRUE
f664_in -> f664_out :|: TRUE
Start term: f3_in(T2)

----------------------------------------

(155) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f662_in(T124) -> f654_in(T124) :|: TRUE
f654_out(x) -> f662_out(x) :|: TRUE
f513_in(T47) -> f542_in(T47) :|: TRUE
f542_out(x1) -> f513_out(x1) :|: TRUE
f654_out(T94) -> f655_in(T94) :|: TRUE
f584_in(x2) -> f654_in(x2) :|: TRUE
f655_out(x3) -> f584_out(x3) :|: TRUE
f543_in(x4) -> f584_in(x4) :|: TRUE
f584_out(x5) -> f543_out(x5) :|: TRUE
f514_in(T40) -> f516_in(T40) :|: TRUE
f515_out(x8) -> f514_out(x8) :|: TRUE
f514_in(x9) -> f515_in(x9) :|: TRUE
f516_out(x10) -> f514_out(x10) :|: TRUE
f520_in(T71) -> f512_in(T71) :|: TRUE
f512_out(x11) -> f520_out(x11) :|: TRUE
f544_out(x12) -> f542_out(x12) :|: TRUE
f542_in(x13) -> f544_in(x13) :|: TRUE
f543_out(x14) -> f542_out(x14) :|: TRUE
f542_in(x15) -> f543_in(x15) :|: TRUE
f512_in(x16) -> f514_in(x16) :|: TRUE
f514_out(x17) -> f512_out(x17) :|: TRUE
f495_in(T17) -> f3_in(T17) :|: TRUE
f3_in(x19) -> f4_in(x19) :|: TRUE
f4_in(x23) -> f5_in(x23) :|: TRUE
f657_in(.(T114, T115)) -> f659_in :|: TRUE
f659_out -> f657_out(.(x26, x27)) :|: TRUE
f517_in -> f517_out :|: TRUE
f654_in(x28) -> f656_in(x28) :|: TRUE
f656_out(x29) -> f654_out(x29) :|: TRUE
f507_in(x30) -> f512_in(x30) :|: TRUE
f512_out(x31) -> f513_in(x32) :|: TRUE
f513_out(x33) -> f507_out(x34) :|: TRUE
f471_out(x36) -> f495_in(x36) :|: TRUE
f8_in(x37) -> f471_in(x37) :|: TRUE
f658_in(.(x40, x41)) -> f662_in(x41) :|: TRUE
f662_out(x42) -> f658_out(.(x43, x42)) :|: TRUE
f659_in -> f659_out :|: TRUE
f516_in(.(x46, x47)) -> f520_in(x47) :|: TRUE
f520_out(x48) -> f516_out(.(x49, x48)) :|: TRUE
f513_out(x50) -> f655_out(x50) :|: TRUE
f655_in(x51) -> f513_in(x51) :|: TRUE
f504_in(x53) -> f507_in(x53) :|: TRUE
f507_out(x55) -> f504_out(x55) :|: TRUE
f515_in(.(T61, T62)) -> f517_in :|: TRUE
f517_out -> f515_out(.(x57, x58)) :|: TRUE
f544_in(T135) -> f664_in :|: TRUE
f664_out -> f544_out(x61) :|: TRUE
f657_out(x63) -> f656_out(x63) :|: TRUE
f656_in(x64) -> f658_in(x64) :|: TRUE
f658_out(x65) -> f656_out(x65) :|: TRUE
f656_in(x66) -> f657_in(x66) :|: TRUE
f5_in(x69) -> f8_in(x69) :|: TRUE
f471_in(x71) -> f504_in(x71) :|: TRUE
f504_out(x72) -> f471_out(x72) :|: TRUE
f664_in -> f664_out :|: TRUE


----------------------------------------

(156)
Obligation:
Rules:
f662_in(T124) -> f654_in(T124) :|: TRUE
f654_out(x) -> f662_out(x) :|: TRUE
f513_in(T47) -> f542_in(T47) :|: TRUE
f542_out(x1) -> f513_out(x1) :|: TRUE
f654_out(T94) -> f655_in(T94) :|: TRUE
f584_in(x2) -> f654_in(x2) :|: TRUE
f655_out(x3) -> f584_out(x3) :|: TRUE
f543_in(x4) -> f584_in(x4) :|: TRUE
f584_out(x5) -> f543_out(x5) :|: TRUE
f514_in(T40) -> f516_in(T40) :|: TRUE
f515_out(x8) -> f514_out(x8) :|: TRUE
f514_in(x9) -> f515_in(x9) :|: TRUE
f516_out(x10) -> f514_out(x10) :|: TRUE
f520_in(T71) -> f512_in(T71) :|: TRUE
f512_out(x11) -> f520_out(x11) :|: TRUE
f544_out(x12) -> f542_out(x12) :|: TRUE
f542_in(x13) -> f544_in(x13) :|: TRUE
f543_out(x14) -> f542_out(x14) :|: TRUE
f542_in(x15) -> f543_in(x15) :|: TRUE
f512_in(x16) -> f514_in(x16) :|: TRUE
f514_out(x17) -> f512_out(x17) :|: TRUE
f495_in(T17) -> f3_in(T17) :|: TRUE
f3_in(x19) -> f4_in(x19) :|: TRUE
f4_in(x23) -> f5_in(x23) :|: TRUE
f657_in(.(T114, T115)) -> f659_in :|: TRUE
f659_out -> f657_out(.(x26, x27)) :|: TRUE
f517_in -> f517_out :|: TRUE
f654_in(x28) -> f656_in(x28) :|: TRUE
f656_out(x29) -> f654_out(x29) :|: TRUE
f507_in(x30) -> f512_in(x30) :|: TRUE
f512_out(x31) -> f513_in(x32) :|: TRUE
f513_out(x33) -> f507_out(x34) :|: TRUE
f471_out(x36) -> f495_in(x36) :|: TRUE
f8_in(x37) -> f471_in(x37) :|: TRUE
f658_in(.(x40, x41)) -> f662_in(x41) :|: TRUE
f662_out(x42) -> f658_out(.(x43, x42)) :|: TRUE
f659_in -> f659_out :|: TRUE
f516_in(.(x46, x47)) -> f520_in(x47) :|: TRUE
f520_out(x48) -> f516_out(.(x49, x48)) :|: TRUE
f513_out(x50) -> f655_out(x50) :|: TRUE
f655_in(x51) -> f513_in(x51) :|: TRUE
f504_in(x53) -> f507_in(x53) :|: TRUE
f507_out(x55) -> f504_out(x55) :|: TRUE
f515_in(.(T61, T62)) -> f517_in :|: TRUE
f517_out -> f515_out(.(x57, x58)) :|: TRUE
f544_in(T135) -> f664_in :|: TRUE
f664_out -> f544_out(x61) :|: TRUE
f657_out(x63) -> f656_out(x63) :|: TRUE
f656_in(x64) -> f658_in(x64) :|: TRUE
f658_out(x65) -> f656_out(x65) :|: TRUE
f656_in(x66) -> f657_in(x66) :|: TRUE
f5_in(x69) -> f8_in(x69) :|: TRUE
f471_in(x71) -> f504_in(x71) :|: TRUE
f504_out(x72) -> f471_out(x72) :|: TRUE
f664_in -> f664_out :|: TRUE

----------------------------------------

(157) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(158)
Obligation:
Rules:
f542_out(x1:0) -> f542_out(x1:0) :|: TRUE
f513_in(T47:0) -> f656_in(T47:0) :|: TRUE
f656_out(x29:0) -> f656_out(.(x43:0, x29:0)) :|: TRUE
f512_out(x31:0) -> f513_in(x32:0) :|: TRUE
f656_out(x) -> f513_in(x) :|: TRUE
f514_in(.(x46:0, x47:0)) -> f514_in(x47:0) :|: TRUE
f512_out(x11:0) -> f512_out(.(x49:0, x11:0)) :|: TRUE
f513_in(x1) -> f542_out(x2) :|: TRUE
f656_in(.(x40:0, x41:0)) -> f656_in(x41:0) :|: TRUE
f656_in(.(T114:0, T115:0)) -> f656_out(.(x26:0, x27:0)) :|: TRUE
f542_out(x3) -> f514_in(x4) :|: TRUE
f514_in(.(T61:0, T62:0)) -> f512_out(.(x57:0, x58:0)) :|: TRUE

----------------------------------------

(159) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(160)
Obligation:
Rules:
f542_out(x1:0) -> f542_out(x1:0) :|: TRUE
f513_in(T47:0) -> f656_in(T47:0) :|: TRUE
f656_out(x29:0) -> f656_out(.(x43:0, x29:0)) :|: TRUE
f512_out(x31:0) -> f513_in(x32:0) :|: TRUE
f656_out(x) -> f513_in(x) :|: TRUE
f514_in(.(x46:0, x47:0)) -> f514_in(x47:0) :|: TRUE
f512_out(x11:0) -> f512_out(.(x49:0, x11:0)) :|: TRUE
f513_in(x1) -> f542_out(x2) :|: TRUE
f656_in(.(x40:0, x41:0)) -> f656_in(x41:0) :|: TRUE
f656_in(.(T114:0, T115:0)) -> f656_out(.(x26:0, x27:0)) :|: TRUE
f542_out(x3) -> f514_in(x4) :|: TRUE
f514_in(.(T61:0, T62:0)) -> f512_out(.(x57:0, x58:0)) :|: TRUE

----------------------------------------

(161) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f542_out(x1:0) -> f542_out(x1:0) :|: TRUE
(2) f513_in(T47:0) -> f656_in(T47:0) :|: TRUE
(3) f656_out(x29:0) -> f656_out(.(x43:0, x29:0)) :|: TRUE
(4) f512_out(x31:0) -> f513_in(x32:0) :|: TRUE
(5) f656_out(x) -> f513_in(x) :|: TRUE
(6) f514_in(.(x46:0, x47:0)) -> f514_in(x47:0) :|: TRUE
(7) f512_out(x11:0) -> f512_out(.(x49:0, x11:0)) :|: TRUE
(8) f513_in(x1) -> f542_out(x2) :|: TRUE
(9) f656_in(.(x40:0, x41:0)) -> f656_in(x41:0) :|: TRUE
(10) f656_in(.(T114:0, T115:0)) -> f656_out(.(x26:0, x27:0)) :|: TRUE
(11) f542_out(x3) -> f514_in(x4) :|: TRUE
(12) f514_in(.(T61:0, T62:0)) -> f512_out(.(x57:0, x58:0)) :|: TRUE

Arcs:
(1) -> (1), (11)
(2) -> (9), (10)
(3) -> (3), (5)
(4) -> (2), (8)
(5) -> (2), (8)
(6) -> (6), (12)
(7) -> (4), (7)
(8) -> (1), (11)
(9) -> (9), (10)
(10) -> (3), (5)
(11) -> (6), (12)
(12) -> (4), (7)

This digraph is fully evaluated!
----------------------------------------

(162)
Obligation:

Termination digraph:
Nodes:
(1) f542_out(x1:0) -> f542_out(x1:0) :|: TRUE
(2) f513_in(x1) -> f542_out(x2) :|: TRUE
(3) f656_out(x) -> f513_in(x) :|: TRUE
(4) f656_out(x29:0) -> f656_out(.(x43:0, x29:0)) :|: TRUE
(5) f656_in(.(T114:0, T115:0)) -> f656_out(.(x26:0, x27:0)) :|: TRUE
(6) f656_in(.(x40:0, x41:0)) -> f656_in(x41:0) :|: TRUE
(7) f513_in(T47:0) -> f656_in(T47:0) :|: TRUE
(8) f512_out(x31:0) -> f513_in(x32:0) :|: TRUE
(9) f512_out(x11:0) -> f512_out(.(x49:0, x11:0)) :|: TRUE
(10) f514_in(.(T61:0, T62:0)) -> f512_out(.(x57:0, x58:0)) :|: TRUE
(11) f514_in(.(x46:0, x47:0)) -> f514_in(x47:0) :|: TRUE
(12) f542_out(x3) -> f514_in(x4) :|: TRUE

Arcs:
(1) -> (1), (12)
(2) -> (1), (12)
(3) -> (2), (7)
(4) -> (3), (4)
(5) -> (3), (4)
(6) -> (5), (6)
(7) -> (5), (6)
(8) -> (2), (7)
(9) -> (8), (9)
(10) -> (8), (9)
(11) -> (10), (11)
(12) -> (10), (11)

This digraph is fully evaluated!

----------------------------------------

(163) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   .(x1, x2) -> .(x2)

----------------------------------------

(164)
Obligation:
Rules:
f542_out(x1:0) -> f542_out(x1:0) :|: TRUE
f513_in(x1) -> f542_out(x2) :|: TRUE
f656_out(x) -> f513_in(x) :|: TRUE
f656_out(x29:0) -> f656_out(.(x29:0)) :|: TRUE
f656_in(.(T115:0)) -> f656_out(.(x27:0)) :|: TRUE
f656_in(.(x41:0)) -> f656_in(x41:0) :|: TRUE
f513_in(T47:0) -> f656_in(T47:0) :|: TRUE
f512_out(x31:0) -> f513_in(x32:0) :|: TRUE
f512_out(x11:0) -> f512_out(.(x11:0)) :|: TRUE
f514_in(.(T62:0)) -> f512_out(.(x58:0)) :|: TRUE
f514_in(.(x47:0)) -> f514_in(x47:0) :|: TRUE
f542_out(x3) -> f514_in(x4) :|: TRUE

----------------------------------------

(165) IRSwTToIntTRSProof (SOUND)
Applied path-length measure to transform intTRS with terms to intTRS.
----------------------------------------

(166)
Obligation:
Rules:
f542_out(x) -> f542_out(x) :|: TRUE
f513_in(x1) -> f542_out(x2) :|: TRUE
f656_out(x3) -> f513_in(x3) :|: TRUE
f656_out(x4) -> f656_out(.(x4)) :|: TRUE
f656_in(.(x5)) -> f656_out(.(x6)) :|: TRUE
f656_in(.(x7)) -> f656_in(x7) :|: TRUE
f513_in(x8) -> f656_in(x8) :|: TRUE
f512_out(x9) -> f513_in(x10) :|: TRUE
f512_out(x11) -> f512_out(.(x11)) :|: TRUE
f514_in(.(x12)) -> f512_out(.(x13)) :|: TRUE
f514_in(.(x14)) -> f514_in(x14) :|: TRUE
f542_out(x15) -> f514_in(x16) :|: TRUE
