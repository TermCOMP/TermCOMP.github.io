MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/uvEoF.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

reach(g,g,g,g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) AND
        (7) PiDP
            (8) UsableRulesProof [EQUIVALENT, 0 ms]
            (9) PiDP
            (10) PiDPToQDPProof [SOUND, 0 ms]
            (11) QDP
            (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (13) YES
        (14) PiDP
            (15) UsableRulesProof [EQUIVALENT, 0 ms]
            (16) PiDP
            (17) PiDPToQDPProof [EQUIVALENT, 0 ms]
            (18) QDP
            (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (20) YES
        (21) PiDP
            (22) UsableRulesProof [EQUIVALENT, 0 ms]
            (23) PiDP
            (24) PiDPToQDPProof [SOUND, 0 ms]
            (25) QDP
            (26) TransformationProof [SOUND, 0 ms]
            (27) QDP
            (28) TransformationProof [SOUND, 0 ms]
            (29) QDP
            (30) TransformationProof [EQUIVALENT, 0 ms]
            (31) QDP
            (32) TransformationProof [EQUIVALENT, 0 ms]
            (33) QDP
            (34) TransformationProof [EQUIVALENT, 0 ms]
            (35) QDP
            (36) TransformationProof [EQUIVALENT, 0 ms]
            (37) QDP
            (38) TransformationProof [EQUIVALENT, 0 ms]
            (39) QDP
            (40) TransformationProof [EQUIVALENT, 0 ms]
            (41) QDP
            (42) TransformationProof [EQUIVALENT, 0 ms]
            (43) QDP
            (44) TransformationProof [EQUIVALENT, 0 ms]
            (45) QDP
            (46) TransformationProof [EQUIVALENT, 0 ms]
            (47) QDP
            (48) TransformationProof [EQUIVALENT, 0 ms]
            (49) QDP
            (50) TransformationProof [EQUIVALENT, 0 ms]
            (51) QDP
            (52) TransformationProof [EQUIVALENT, 0 ms]
            (53) QDP
            (54) TransformationProof [EQUIVALENT, 0 ms]
            (55) QDP
            (56) TransformationProof [EQUIVALENT, 0 ms]
            (57) QDP
            (58) TransformationProof [EQUIVALENT, 0 ms]
            (59) QDP
            (60) TransformationProof [EQUIVALENT, 0 ms]
            (61) QDP
            (62) TransformationProof [EQUIVALENT, 5 ms]
            (63) QDP
            (64) TransformationProof [EQUIVALENT, 0 ms]
            (65) QDP
            (66) TransformationProof [EQUIVALENT, 7 ms]
            (67) QDP
            (68) TransformationProof [EQUIVALENT, 0 ms]
            (69) QDP
            (70) TransformationProof [EQUIVALENT, 0 ms]
            (71) QDP
            (72) TransformationProof [EQUIVALENT, 4 ms]
            (73) QDP
            (74) TransformationProof [EQUIVALENT, 0 ms]
            (75) QDP
(76) PrologToPiTRSProof [SOUND, 0 ms]
(77) PiTRS
    (78) DependencyPairsProof [EQUIVALENT, 0 ms]
    (79) PiDP
    (80) DependencyGraphProof [EQUIVALENT, 0 ms]
    (81) AND
        (82) PiDP
            (83) UsableRulesProof [EQUIVALENT, 0 ms]
            (84) PiDP
            (85) PiDPToQDPProof [SOUND, 0 ms]
            (86) QDP
            (87) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (88) YES
        (89) PiDP
            (90) UsableRulesProof [EQUIVALENT, 0 ms]
            (91) PiDP
            (92) PiDPToQDPProof [EQUIVALENT, 0 ms]
            (93) QDP
            (94) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (95) YES
        (96) PiDP
            (97) UsableRulesProof [EQUIVALENT, 0 ms]
            (98) PiDP
            (99) PiDPToQDPProof [SOUND, 0 ms]
            (100) QDP
            (101) TransformationProof [SOUND, 0 ms]
            (102) QDP
            (103) TransformationProof [SOUND, 0 ms]
            (104) QDP
            (105) TransformationProof [EQUIVALENT, 0 ms]
            (106) QDP
            (107) TransformationProof [EQUIVALENT, 0 ms]
            (108) QDP
            (109) TransformationProof [EQUIVALENT, 0 ms]
            (110) QDP
            (111) TransformationProof [EQUIVALENT, 0 ms]
            (112) QDP
            (113) TransformationProof [EQUIVALENT, 0 ms]
            (114) QDP
            (115) TransformationProof [EQUIVALENT, 0 ms]
            (116) QDP
            (117) TransformationProof [EQUIVALENT, 0 ms]
            (118) QDP
            (119) TransformationProof [EQUIVALENT, 0 ms]
            (120) QDP
            (121) TransformationProof [EQUIVALENT, 0 ms]
            (122) QDP
            (123) TransformationProof [EQUIVALENT, 0 ms]
            (124) QDP
            (125) TransformationProof [EQUIVALENT, 0 ms]
            (126) QDP
            (127) TransformationProof [EQUIVALENT, 0 ms]
            (128) QDP
            (129) TransformationProof [EQUIVALENT, 0 ms]
            (130) QDP
            (131) TransformationProof [EQUIVALENT, 0 ms]
            (132) QDP
            (133) TransformationProof [EQUIVALENT, 0 ms]
            (134) QDP
            (135) TransformationProof [EQUIVALENT, 0 ms]
            (136) QDP
            (137) TransformationProof [EQUIVALENT, 0 ms]
            (138) QDP
            (139) TransformationProof [EQUIVALENT, 0 ms]
            (140) QDP
            (141) TransformationProof [EQUIVALENT, 0 ms]
            (142) QDP
            (143) TransformationProof [EQUIVALENT, 0 ms]
            (144) QDP
            (145) TransformationProof [EQUIVALENT, 0 ms]
            (146) QDP
            (147) TransformationProof [EQUIVALENT, 0 ms]
            (148) QDP
            (149) TransformationProof [EQUIVALENT, 0 ms]
            (150) QDP
(151) PrologToTRSTransformerProof [SOUND, 25 ms]
(152) QTRS
    (153) DependencyPairsProof [EQUIVALENT, 0 ms]
    (154) QDP
    (155) DependencyGraphProof [EQUIVALENT, 0 ms]
    (156) AND
        (157) QDP
            (158) UsableRulesProof [EQUIVALENT, 0 ms]
            (159) QDP
            (160) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (161) YES
        (162) QDP
            (163) UsableRulesProof [EQUIVALENT, 0 ms]
            (164) QDP
            (165) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (166) YES
        (167) QDP
            (168) UsableRulesProof [EQUIVALENT, 0 ms]
            (169) QDP
            (170) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (171) YES
        (172) QDP
            (173) NonLoopProof [COMPLETE, 3755 ms]
            (174) NO
(175) PrologToDTProblemTransformerProof [SOUND, 25 ms]
(176) TRIPLES
    (177) TriplesToPiDPProof [SOUND, 0 ms]
    (178) PiDP
    (179) DependencyGraphProof [EQUIVALENT, 0 ms]
    (180) AND
        (181) PiDP
            (182) UsableRulesProof [EQUIVALENT, 0 ms]
            (183) PiDP
            (184) PiDPToQDPProof [EQUIVALENT, 0 ms]
            (185) QDP
            (186) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (187) YES
        (188) PiDP
            (189) UsableRulesProof [EQUIVALENT, 0 ms]
            (190) PiDP
            (191) PiDPToQDPProof [SOUND, 0 ms]
            (192) QDP
            (193) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (194) YES
        (195) PiDP
            (196) UsableRulesProof [EQUIVALENT, 0 ms]
            (197) PiDP
            (198) PiDPToQDPProof [EQUIVALENT, 0 ms]
            (199) QDP
            (200) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (201) YES
        (202) PiDP
            (203) PiDPToQDPProof [SOUND, 0 ms]
            (204) QDP
            (205) TransformationProof [SOUND, 0 ms]
            (206) QDP
            (207) TransformationProof [SOUND, 0 ms]
            (208) QDP
            (209) TransformationProof [EQUIVALENT, 0 ms]
            (210) QDP
            (211) TransformationProof [EQUIVALENT, 0 ms]
            (212) QDP
            (213) TransformationProof [EQUIVALENT, 0 ms]
            (214) QDP
            (215) TransformationProof [EQUIVALENT, 0 ms]
            (216) QDP
            (217) TransformationProof [EQUIVALENT, 0 ms]
            (218) QDP
            (219) TransformationProof [EQUIVALENT, 0 ms]
            (220) QDP
            (221) TransformationProof [EQUIVALENT, 0 ms]
            (222) QDP
            (223) TransformationProof [EQUIVALENT, 0 ms]
            (224) QDP
            (225) TransformationProof [EQUIVALENT, 0 ms]
            (226) QDP
            (227) TransformationProof [EQUIVALENT, 0 ms]
            (228) QDP
            (229) TransformationProof [EQUIVALENT, 0 ms]
            (230) QDP
            (231) TransformationProof [EQUIVALENT, 0 ms]
            (232) QDP
            (233) TransformationProof [EQUIVALENT, 0 ms]
            (234) QDP
            (235) TransformationProof [EQUIVALENT, 0 ms]
            (236) QDP
            (237) TransformationProof [EQUIVALENT, 0 ms]
            (238) QDP
            (239) TransformationProof [EQUIVALENT, 0 ms]
            (240) QDP
            (241) TransformationProof [EQUIVALENT, 0 ms]
            (242) QDP
            (243) TransformationProof [EQUIVALENT, 0 ms]
            (244) QDP
            (245) TransformationProof [EQUIVALENT, 0 ms]
            (246) QDP
(247) PrologToIRSwTTransformerProof [SOUND, 25 ms]
(248) AND
    (249) IRSwT
        (250) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (251) TRUE
    (252) IRSwT
        (253) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (254) IRSwT
        (255) IntTRSCompressionProof [EQUIVALENT, 11 ms]
        (256) IRSwT
        (257) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (258) IRSwT
        (259) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
        (260) IRSwT
        (261) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (262) IRSwT
        (263) TempFilterProof [SOUND, 1 ms]
        (264) IRSwT
        (265) IRSwTToQDPProof [SOUND, 0 ms]
        (266) QDP
        (267) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (268) YES
    (269) IRSwT
        (270) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (271) IRSwT
        (272) IntTRSCompressionProof [EQUIVALENT, 0 ms]
        (273) IRSwT
        (274) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (275) IRSwT
        (276) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
        (277) IRSwT
        (278) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (279) IRSwT
        (280) TempFilterProof [SOUND, 0 ms]
        (281) IRSwT
        (282) IRSwTToQDPProof [SOUND, 0 ms]
        (283) QDP
        (284) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (285) YES
    (286) IRSwT
        (287) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (288) IRSwT
        (289) IntTRSCompressionProof [EQUIVALENT, 9 ms]
        (290) IRSwT
        (291) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (292) IRSwT
        (293) IRSwTTerminationDigraphProof [EQUIVALENT, 23 ms]
        (294) IRSwT
        (295) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (296) IRSwT
        (297) IRSwTToIntTRSProof [SOUND, 11 ms]
        (298) IRSwT
        (299) IntTRSCompressionProof [EQUIVALENT, 3 ms]
        (300) IRSwT


----------------------------------------

(0)
Obligation:
Clauses:

reach(X, Y, Edges, Visited) :- member(.(X, .(Y, [])), Edges).
reach(X, Z, Edges, Visited) :- ','(member1(.(X, .(Y, [])), Edges), ','(member(Y, Visited), reach(Y, Z, Edges, .(Y, Visited)))).
member(H, .(H, L)).
member(X, .(H, L)) :- member(X, L).
member1(H, .(H, L)).
member1(X, .(H, L)) :- member1(X, L).


Query: reach(g,g,g,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

reach_in_4: (b,b,b,b)

member_in_2: (b,b)

member1_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   reach_in_gggg(X, Y, Edges, Visited) -> U1_gggg(X, Y, Edges, Visited, member_in_gg(.(X, .(Y, [])), Edges))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))
   U1_gggg(X, Y, Edges, Visited, member_out_gg(.(X, .(Y, [])), Edges)) -> reach_out_gggg(X, Y, Edges, Visited)
   reach_in_gggg(X, Z, Edges, Visited) -> U2_gggg(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   member1_in_ag(H, .(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(X, .(H, L)) -> U6_ag(X, H, L, member1_in_ag(X, L))
   U6_ag(X, H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U2_gggg(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_gggg(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_gggg(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> U4_gggg(X, Z, Edges, Visited, reach_in_gggg(Y, Z, Edges, .(Y, Visited)))
   U4_gggg(X, Z, Edges, Visited, reach_out_gggg(Y, Z, Edges, .(Y, Visited))) -> reach_out_gggg(X, Z, Edges, Visited)

The argument filtering Pi contains the following mapping:
reach_in_gggg(x1, x2, x3, x4)  =  reach_in_gggg(x1, x2, x3, x4)

U1_gggg(x1, x2, x3, x4, x5)  =  U1_gggg(x5)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

member_out_gg(x1, x2)  =  member_out_gg

U5_gg(x1, x2, x3, x4)  =  U5_gg(x4)

[]  =  []

reach_out_gggg(x1, x2, x3, x4)  =  reach_out_gggg

U2_gggg(x1, x2, x3, x4, x5)  =  U2_gggg(x2, x3, x4, x5)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

member1_out_ag(x1, x2)  =  member1_out_ag(x1)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x4)

U3_gggg(x1, x2, x3, x4, x5, x6)  =  U3_gggg(x2, x3, x4, x5, x6)

U4_gggg(x1, x2, x3, x4, x5)  =  U4_gggg(x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   reach_in_gggg(X, Y, Edges, Visited) -> U1_gggg(X, Y, Edges, Visited, member_in_gg(.(X, .(Y, [])), Edges))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))
   U1_gggg(X, Y, Edges, Visited, member_out_gg(.(X, .(Y, [])), Edges)) -> reach_out_gggg(X, Y, Edges, Visited)
   reach_in_gggg(X, Z, Edges, Visited) -> U2_gggg(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   member1_in_ag(H, .(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(X, .(H, L)) -> U6_ag(X, H, L, member1_in_ag(X, L))
   U6_ag(X, H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U2_gggg(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_gggg(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_gggg(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> U4_gggg(X, Z, Edges, Visited, reach_in_gggg(Y, Z, Edges, .(Y, Visited)))
   U4_gggg(X, Z, Edges, Visited, reach_out_gggg(Y, Z, Edges, .(Y, Visited))) -> reach_out_gggg(X, Z, Edges, Visited)

The argument filtering Pi contains the following mapping:
reach_in_gggg(x1, x2, x3, x4)  =  reach_in_gggg(x1, x2, x3, x4)

U1_gggg(x1, x2, x3, x4, x5)  =  U1_gggg(x5)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

member_out_gg(x1, x2)  =  member_out_gg

U5_gg(x1, x2, x3, x4)  =  U5_gg(x4)

[]  =  []

reach_out_gggg(x1, x2, x3, x4)  =  reach_out_gggg

U2_gggg(x1, x2, x3, x4, x5)  =  U2_gggg(x2, x3, x4, x5)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

member1_out_ag(x1, x2)  =  member1_out_ag(x1)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x4)

U3_gggg(x1, x2, x3, x4, x5, x6)  =  U3_gggg(x2, x3, x4, x5, x6)

U4_gggg(x1, x2, x3, x4, x5)  =  U4_gggg(x5)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(X, Y, Edges, Visited) -> U1_GGGG(X, Y, Edges, Visited, member_in_gg(.(X, .(Y, [])), Edges))
   REACH_IN_GGGG(X, Y, Edges, Visited) -> MEMBER_IN_GG(.(X, .(Y, [])), Edges)
   MEMBER_IN_GG(X, .(H, L)) -> U5_GG(X, H, L, member_in_gg(X, L))
   MEMBER_IN_GG(X, .(H, L)) -> MEMBER_IN_GG(X, L)
   REACH_IN_GGGG(X, Z, Edges, Visited) -> U2_GGGG(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   REACH_IN_GGGG(X, Z, Edges, Visited) -> MEMBER1_IN_AG(.(X, .(Y, [])), Edges)
   MEMBER1_IN_AG(X, .(H, L)) -> U6_AG(X, H, L, member1_in_ag(X, L))
   MEMBER1_IN_AG(X, .(H, L)) -> MEMBER1_IN_AG(X, L)
   U2_GGGG(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_GGGG(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U2_GGGG(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> MEMBER_IN_GG(Y, Visited)
   U3_GGGG(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> U4_GGGG(X, Z, Edges, Visited, reach_in_gggg(Y, Z, Edges, .(Y, Visited)))
   U3_GGGG(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> REACH_IN_GGGG(Y, Z, Edges, .(Y, Visited))

The TRS R consists of the following rules:

   reach_in_gggg(X, Y, Edges, Visited) -> U1_gggg(X, Y, Edges, Visited, member_in_gg(.(X, .(Y, [])), Edges))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))
   U1_gggg(X, Y, Edges, Visited, member_out_gg(.(X, .(Y, [])), Edges)) -> reach_out_gggg(X, Y, Edges, Visited)
   reach_in_gggg(X, Z, Edges, Visited) -> U2_gggg(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   member1_in_ag(H, .(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(X, .(H, L)) -> U6_ag(X, H, L, member1_in_ag(X, L))
   U6_ag(X, H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U2_gggg(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_gggg(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_gggg(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> U4_gggg(X, Z, Edges, Visited, reach_in_gggg(Y, Z, Edges, .(Y, Visited)))
   U4_gggg(X, Z, Edges, Visited, reach_out_gggg(Y, Z, Edges, .(Y, Visited))) -> reach_out_gggg(X, Z, Edges, Visited)

The argument filtering Pi contains the following mapping:
reach_in_gggg(x1, x2, x3, x4)  =  reach_in_gggg(x1, x2, x3, x4)

U1_gggg(x1, x2, x3, x4, x5)  =  U1_gggg(x5)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

member_out_gg(x1, x2)  =  member_out_gg

U5_gg(x1, x2, x3, x4)  =  U5_gg(x4)

[]  =  []

reach_out_gggg(x1, x2, x3, x4)  =  reach_out_gggg

U2_gggg(x1, x2, x3, x4, x5)  =  U2_gggg(x2, x3, x4, x5)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

member1_out_ag(x1, x2)  =  member1_out_ag(x1)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x4)

U3_gggg(x1, x2, x3, x4, x5, x6)  =  U3_gggg(x2, x3, x4, x5, x6)

U4_gggg(x1, x2, x3, x4, x5)  =  U4_gggg(x5)

REACH_IN_GGGG(x1, x2, x3, x4)  =  REACH_IN_GGGG(x1, x2, x3, x4)

U1_GGGG(x1, x2, x3, x4, x5)  =  U1_GGGG(x5)

MEMBER_IN_GG(x1, x2)  =  MEMBER_IN_GG(x1, x2)

U5_GG(x1, x2, x3, x4)  =  U5_GG(x4)

U2_GGGG(x1, x2, x3, x4, x5)  =  U2_GGGG(x2, x3, x4, x5)

MEMBER1_IN_AG(x1, x2)  =  MEMBER1_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x4)

U3_GGGG(x1, x2, x3, x4, x5, x6)  =  U3_GGGG(x2, x3, x4, x5, x6)

U4_GGGG(x1, x2, x3, x4, x5)  =  U4_GGGG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(X, Y, Edges, Visited) -> U1_GGGG(X, Y, Edges, Visited, member_in_gg(.(X, .(Y, [])), Edges))
   REACH_IN_GGGG(X, Y, Edges, Visited) -> MEMBER_IN_GG(.(X, .(Y, [])), Edges)
   MEMBER_IN_GG(X, .(H, L)) -> U5_GG(X, H, L, member_in_gg(X, L))
   MEMBER_IN_GG(X, .(H, L)) -> MEMBER_IN_GG(X, L)
   REACH_IN_GGGG(X, Z, Edges, Visited) -> U2_GGGG(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   REACH_IN_GGGG(X, Z, Edges, Visited) -> MEMBER1_IN_AG(.(X, .(Y, [])), Edges)
   MEMBER1_IN_AG(X, .(H, L)) -> U6_AG(X, H, L, member1_in_ag(X, L))
   MEMBER1_IN_AG(X, .(H, L)) -> MEMBER1_IN_AG(X, L)
   U2_GGGG(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_GGGG(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U2_GGGG(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> MEMBER_IN_GG(Y, Visited)
   U3_GGGG(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> U4_GGGG(X, Z, Edges, Visited, reach_in_gggg(Y, Z, Edges, .(Y, Visited)))
   U3_GGGG(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> REACH_IN_GGGG(Y, Z, Edges, .(Y, Visited))

The TRS R consists of the following rules:

   reach_in_gggg(X, Y, Edges, Visited) -> U1_gggg(X, Y, Edges, Visited, member_in_gg(.(X, .(Y, [])), Edges))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))
   U1_gggg(X, Y, Edges, Visited, member_out_gg(.(X, .(Y, [])), Edges)) -> reach_out_gggg(X, Y, Edges, Visited)
   reach_in_gggg(X, Z, Edges, Visited) -> U2_gggg(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   member1_in_ag(H, .(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(X, .(H, L)) -> U6_ag(X, H, L, member1_in_ag(X, L))
   U6_ag(X, H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U2_gggg(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_gggg(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_gggg(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> U4_gggg(X, Z, Edges, Visited, reach_in_gggg(Y, Z, Edges, .(Y, Visited)))
   U4_gggg(X, Z, Edges, Visited, reach_out_gggg(Y, Z, Edges, .(Y, Visited))) -> reach_out_gggg(X, Z, Edges, Visited)

The argument filtering Pi contains the following mapping:
reach_in_gggg(x1, x2, x3, x4)  =  reach_in_gggg(x1, x2, x3, x4)

U1_gggg(x1, x2, x3, x4, x5)  =  U1_gggg(x5)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

member_out_gg(x1, x2)  =  member_out_gg

U5_gg(x1, x2, x3, x4)  =  U5_gg(x4)

[]  =  []

reach_out_gggg(x1, x2, x3, x4)  =  reach_out_gggg

U2_gggg(x1, x2, x3, x4, x5)  =  U2_gggg(x2, x3, x4, x5)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

member1_out_ag(x1, x2)  =  member1_out_ag(x1)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x4)

U3_gggg(x1, x2, x3, x4, x5, x6)  =  U3_gggg(x2, x3, x4, x5, x6)

U4_gggg(x1, x2, x3, x4, x5)  =  U4_gggg(x5)

REACH_IN_GGGG(x1, x2, x3, x4)  =  REACH_IN_GGGG(x1, x2, x3, x4)

U1_GGGG(x1, x2, x3, x4, x5)  =  U1_GGGG(x5)

MEMBER_IN_GG(x1, x2)  =  MEMBER_IN_GG(x1, x2)

U5_GG(x1, x2, x3, x4)  =  U5_GG(x4)

U2_GGGG(x1, x2, x3, x4, x5)  =  U2_GGGG(x2, x3, x4, x5)

MEMBER1_IN_AG(x1, x2)  =  MEMBER1_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x4)

U3_GGGG(x1, x2, x3, x4, x5, x6)  =  U3_GGGG(x2, x3, x4, x5, x6)

U4_GGGG(x1, x2, x3, x4, x5)  =  U4_GGGG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 7 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER1_IN_AG(X, .(H, L)) -> MEMBER1_IN_AG(X, L)

The TRS R consists of the following rules:

   reach_in_gggg(X, Y, Edges, Visited) -> U1_gggg(X, Y, Edges, Visited, member_in_gg(.(X, .(Y, [])), Edges))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))
   U1_gggg(X, Y, Edges, Visited, member_out_gg(.(X, .(Y, [])), Edges)) -> reach_out_gggg(X, Y, Edges, Visited)
   reach_in_gggg(X, Z, Edges, Visited) -> U2_gggg(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   member1_in_ag(H, .(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(X, .(H, L)) -> U6_ag(X, H, L, member1_in_ag(X, L))
   U6_ag(X, H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U2_gggg(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_gggg(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_gggg(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> U4_gggg(X, Z, Edges, Visited, reach_in_gggg(Y, Z, Edges, .(Y, Visited)))
   U4_gggg(X, Z, Edges, Visited, reach_out_gggg(Y, Z, Edges, .(Y, Visited))) -> reach_out_gggg(X, Z, Edges, Visited)

The argument filtering Pi contains the following mapping:
reach_in_gggg(x1, x2, x3, x4)  =  reach_in_gggg(x1, x2, x3, x4)

U1_gggg(x1, x2, x3, x4, x5)  =  U1_gggg(x5)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

member_out_gg(x1, x2)  =  member_out_gg

U5_gg(x1, x2, x3, x4)  =  U5_gg(x4)

[]  =  []

reach_out_gggg(x1, x2, x3, x4)  =  reach_out_gggg

U2_gggg(x1, x2, x3, x4, x5)  =  U2_gggg(x2, x3, x4, x5)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

member1_out_ag(x1, x2)  =  member1_out_ag(x1)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x4)

U3_gggg(x1, x2, x3, x4, x5, x6)  =  U3_gggg(x2, x3, x4, x5, x6)

U4_gggg(x1, x2, x3, x4, x5)  =  U4_gggg(x5)

MEMBER1_IN_AG(x1, x2)  =  MEMBER1_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER1_IN_AG(X, .(H, L)) -> MEMBER1_IN_AG(X, L)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBER1_IN_AG(x1, x2)  =  MEMBER1_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER1_IN_AG(.(H, L)) -> MEMBER1_IN_AG(L)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER1_IN_AG(.(H, L)) -> MEMBER1_IN_AG(L)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GG(X, .(H, L)) -> MEMBER_IN_GG(X, L)

The TRS R consists of the following rules:

   reach_in_gggg(X, Y, Edges, Visited) -> U1_gggg(X, Y, Edges, Visited, member_in_gg(.(X, .(Y, [])), Edges))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))
   U1_gggg(X, Y, Edges, Visited, member_out_gg(.(X, .(Y, [])), Edges)) -> reach_out_gggg(X, Y, Edges, Visited)
   reach_in_gggg(X, Z, Edges, Visited) -> U2_gggg(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   member1_in_ag(H, .(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(X, .(H, L)) -> U6_ag(X, H, L, member1_in_ag(X, L))
   U6_ag(X, H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U2_gggg(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_gggg(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_gggg(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> U4_gggg(X, Z, Edges, Visited, reach_in_gggg(Y, Z, Edges, .(Y, Visited)))
   U4_gggg(X, Z, Edges, Visited, reach_out_gggg(Y, Z, Edges, .(Y, Visited))) -> reach_out_gggg(X, Z, Edges, Visited)

The argument filtering Pi contains the following mapping:
reach_in_gggg(x1, x2, x3, x4)  =  reach_in_gggg(x1, x2, x3, x4)

U1_gggg(x1, x2, x3, x4, x5)  =  U1_gggg(x5)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

member_out_gg(x1, x2)  =  member_out_gg

U5_gg(x1, x2, x3, x4)  =  U5_gg(x4)

[]  =  []

reach_out_gggg(x1, x2, x3, x4)  =  reach_out_gggg

U2_gggg(x1, x2, x3, x4, x5)  =  U2_gggg(x2, x3, x4, x5)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

member1_out_ag(x1, x2)  =  member1_out_ag(x1)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x4)

U3_gggg(x1, x2, x3, x4, x5, x6)  =  U3_gggg(x2, x3, x4, x5, x6)

U4_gggg(x1, x2, x3, x4, x5)  =  U4_gggg(x5)

MEMBER_IN_GG(x1, x2)  =  MEMBER_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GG(X, .(H, L)) -> MEMBER_IN_GG(X, L)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GG(X, .(H, L)) -> MEMBER_IN_GG(X, L)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER_IN_GG(X, .(H, L)) -> MEMBER_IN_GG(X, L)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(X, Z, Edges, Visited) -> U2_GGGG(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   U2_GGGG(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_GGGG(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_GGGG(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> REACH_IN_GGGG(Y, Z, Edges, .(Y, Visited))

The TRS R consists of the following rules:

   reach_in_gggg(X, Y, Edges, Visited) -> U1_gggg(X, Y, Edges, Visited, member_in_gg(.(X, .(Y, [])), Edges))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))
   U1_gggg(X, Y, Edges, Visited, member_out_gg(.(X, .(Y, [])), Edges)) -> reach_out_gggg(X, Y, Edges, Visited)
   reach_in_gggg(X, Z, Edges, Visited) -> U2_gggg(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   member1_in_ag(H, .(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(X, .(H, L)) -> U6_ag(X, H, L, member1_in_ag(X, L))
   U6_ag(X, H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U2_gggg(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_gggg(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_gggg(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> U4_gggg(X, Z, Edges, Visited, reach_in_gggg(Y, Z, Edges, .(Y, Visited)))
   U4_gggg(X, Z, Edges, Visited, reach_out_gggg(Y, Z, Edges, .(Y, Visited))) -> reach_out_gggg(X, Z, Edges, Visited)

The argument filtering Pi contains the following mapping:
reach_in_gggg(x1, x2, x3, x4)  =  reach_in_gggg(x1, x2, x3, x4)

U1_gggg(x1, x2, x3, x4, x5)  =  U1_gggg(x5)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

member_out_gg(x1, x2)  =  member_out_gg

U5_gg(x1, x2, x3, x4)  =  U5_gg(x4)

[]  =  []

reach_out_gggg(x1, x2, x3, x4)  =  reach_out_gggg

U2_gggg(x1, x2, x3, x4, x5)  =  U2_gggg(x2, x3, x4, x5)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

member1_out_ag(x1, x2)  =  member1_out_ag(x1)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x4)

U3_gggg(x1, x2, x3, x4, x5, x6)  =  U3_gggg(x2, x3, x4, x5, x6)

U4_gggg(x1, x2, x3, x4, x5)  =  U4_gggg(x5)

REACH_IN_GGGG(x1, x2, x3, x4)  =  REACH_IN_GGGG(x1, x2, x3, x4)

U2_GGGG(x1, x2, x3, x4, x5)  =  U2_GGGG(x2, x3, x4, x5)

U3_GGGG(x1, x2, x3, x4, x5, x6)  =  U3_GGGG(x2, x3, x4, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(23)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(X, Z, Edges, Visited) -> U2_GGGG(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   U2_GGGG(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_GGGG(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_GGGG(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> REACH_IN_GGGG(Y, Z, Edges, .(Y, Visited))

The TRS R consists of the following rules:

   member1_in_ag(H, .(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(X, .(H, L)) -> U6_ag(X, H, L, member1_in_ag(X, L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(X, H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The argument filtering Pi contains the following mapping:
member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

member_out_gg(x1, x2)  =  member_out_gg

U5_gg(x1, x2, x3, x4)  =  U5_gg(x4)

[]  =  []

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

member1_out_ag(x1, x2)  =  member1_out_ag(x1)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x4)

REACH_IN_GGGG(x1, x2, x3, x4)  =  REACH_IN_GGGG(x1, x2, x3, x4)

U2_GGGG(x1, x2, x3, x4, x5)  =  U2_GGGG(x2, x3, x4, x5)

U3_GGGG(x1, x2, x3, x4, x5, x6)  =  U3_GGGG(x2, x3, x4, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(24) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(X, Z, Edges, Visited) -> U2_GGGG(Z, Edges, Visited, member1_in_ag(Edges))
   U2_GGGG(Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])))) -> U3_GGGG(Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_GGGG(Z, Edges, Visited, Y, member_out_gg) -> REACH_IN_GGGG(Y, Z, Edges, .(Y, Visited))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) TransformationProof (SOUND)
By narrowing [LPAR04] the rule REACH_IN_GGGG(X, Z, Edges, Visited) -> U2_GGGG(Z, Edges, Visited, member1_in_ag(Edges)) at position [3] we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y1, .(x0, x1), y3, member1_out_ag(x0)),REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y1, .(x0, x1), y3, member1_out_ag(x0)))
   (REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y1, .(x0, x1), y3, U6_ag(member1_in_ag(x1))),REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y1, .(x0, x1), y3, U6_ag(member1_in_ag(x1))))


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])))) -> U3_GGGG(Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_GGGG(Z, Edges, Visited, Y, member_out_gg) -> REACH_IN_GGGG(Y, Z, Edges, .(Y, Visited))
   REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y1, .(x0, x1), y3, member1_out_ag(x0))
   REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y1, .(x0, x1), y3, U6_ag(member1_in_ag(x1)))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U2_GGGG(Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])))) -> U3_GGGG(Z, Edges, Visited, Y, member_in_gg(Y, Visited)) at position [4] we obtained the following new rules [LPAR04]:

   (U2_GGGG(y0, y1, .(x0, x1), member1_out_ag(.(y3, .(x0, [])))) -> U3_GGGG(y0, y1, .(x0, x1), x0, member_out_gg),U2_GGGG(y0, y1, .(x0, x1), member1_out_ag(.(y3, .(x0, [])))) -> U3_GGGG(y0, y1, .(x0, x1), x0, member_out_gg))
   (U2_GGGG(y0, y1, .(x1, x2), member1_out_ag(.(y3, .(x0, [])))) -> U3_GGGG(y0, y1, .(x1, x2), x0, U5_gg(member_in_gg(x0, x2))),U2_GGGG(y0, y1, .(x1, x2), member1_out_ag(.(y3, .(x0, [])))) -> U3_GGGG(y0, y1, .(x1, x2), x0, U5_gg(member_in_gg(x0, x2))))


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GGGG(Z, Edges, Visited, Y, member_out_gg) -> REACH_IN_GGGG(Y, Z, Edges, .(Y, Visited))
   REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y1, .(x0, x1), y3, member1_out_ag(x0))
   REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y1, .(x0, x1), y3, U6_ag(member1_in_ag(x1)))
   U2_GGGG(y0, y1, .(x0, x1), member1_out_ag(.(y3, .(x0, [])))) -> U3_GGGG(y0, y1, .(x0, x1), x0, member_out_gg)
   U2_GGGG(y0, y1, .(x1, x2), member1_out_ag(.(y3, .(x0, [])))) -> U3_GGGG(y0, y1, .(x1, x2), x0, U5_gg(member_in_gg(x0, x2)))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U3_GGGG(Z, Edges, Visited, Y, member_out_gg) -> REACH_IN_GGGG(Y, Z, Edges, .(Y, Visited)) we obtained the following new rules [LPAR04]:

   (U3_GGGG(z0, z1, .(z2, z3), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, z1, .(z2, .(z2, z3))),U3_GGGG(z0, z1, .(z2, z3), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, z1, .(z2, .(z2, z3))))
   (U3_GGGG(z0, z1, .(z2, z3), z5, member_out_gg) -> REACH_IN_GGGG(z5, z0, z1, .(z5, .(z2, z3))),U3_GGGG(z0, z1, .(z2, z3), z5, member_out_gg) -> REACH_IN_GGGG(z5, z0, z1, .(z5, .(z2, z3))))


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y1, .(x0, x1), y3, member1_out_ag(x0))
   REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y1, .(x0, x1), y3, U6_ag(member1_in_ag(x1)))
   U2_GGGG(y0, y1, .(x0, x1), member1_out_ag(.(y3, .(x0, [])))) -> U3_GGGG(y0, y1, .(x0, x1), x0, member_out_gg)
   U2_GGGG(y0, y1, .(x1, x2), member1_out_ag(.(y3, .(x0, [])))) -> U3_GGGG(y0, y1, .(x1, x2), x0, U5_gg(member_in_gg(x0, x2)))
   U3_GGGG(z0, z1, .(z2, z3), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, z1, .(z2, .(z2, z3)))
   U3_GGGG(z0, z1, .(z2, z3), z5, member_out_gg) -> REACH_IN_GGGG(z5, z0, z1, .(z5, .(z2, z3)))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(32) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y1, .(x0, x1), y3, member1_out_ag(x0)) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(z2, z0, .(x2, x3), .(z2, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z2, .(z2, z3)), member1_out_ag(x2)),REACH_IN_GGGG(z2, z0, .(x2, x3), .(z2, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z2, .(z2, z3)), member1_out_ag(x2)))
   (REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), member1_out_ag(x2)),REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), member1_out_ag(x2)))


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y1, .(x0, x1), y3, U6_ag(member1_in_ag(x1)))
   U2_GGGG(y0, y1, .(x0, x1), member1_out_ag(.(y3, .(x0, [])))) -> U3_GGGG(y0, y1, .(x0, x1), x0, member_out_gg)
   U2_GGGG(y0, y1, .(x1, x2), member1_out_ag(.(y3, .(x0, [])))) -> U3_GGGG(y0, y1, .(x1, x2), x0, U5_gg(member_in_gg(x0, x2)))
   U3_GGGG(z0, z1, .(z2, z3), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, z1, .(z2, .(z2, z3)))
   U3_GGGG(z0, z1, .(z2, z3), z5, member_out_gg) -> REACH_IN_GGGG(z5, z0, z1, .(z5, .(z2, z3)))
   REACH_IN_GGGG(z2, z0, .(x2, x3), .(z2, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z2, .(z2, z3)), member1_out_ag(x2))
   REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), member1_out_ag(x2))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(34) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y1, .(x0, x1), y3, U6_ag(member1_in_ag(x1))) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(z2, z0, .(x2, x3), .(z2, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z2, .(z2, z3)), U6_ag(member1_in_ag(x3))),REACH_IN_GGGG(z2, z0, .(x2, x3), .(z2, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z2, .(z2, z3)), U6_ag(member1_in_ag(x3))))
   (REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), U6_ag(member1_in_ag(x3))),REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), U6_ag(member1_in_ag(x3))))


----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(y0, y1, .(x0, x1), member1_out_ag(.(y3, .(x0, [])))) -> U3_GGGG(y0, y1, .(x0, x1), x0, member_out_gg)
   U2_GGGG(y0, y1, .(x1, x2), member1_out_ag(.(y3, .(x0, [])))) -> U3_GGGG(y0, y1, .(x1, x2), x0, U5_gg(member_in_gg(x0, x2)))
   U3_GGGG(z0, z1, .(z2, z3), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, z1, .(z2, .(z2, z3)))
   U3_GGGG(z0, z1, .(z2, z3), z5, member_out_gg) -> REACH_IN_GGGG(z5, z0, z1, .(z5, .(z2, z3)))
   REACH_IN_GGGG(z2, z0, .(x2, x3), .(z2, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z2, .(z2, z3)), member1_out_ag(x2))
   REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), member1_out_ag(x2))
   REACH_IN_GGGG(z2, z0, .(x2, x3), .(z2, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z2, .(z2, z3)), U6_ag(member1_in_ag(x3)))
   REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), U6_ag(member1_in_ag(x3)))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(36) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(y0, y1, .(x0, x1), member1_out_ag(.(y3, .(x0, [])))) -> U3_GGGG(y0, y1, .(x0, x1), x0, member_out_gg) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg),U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg))
   (U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg),U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg))
   (U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg),U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg))
   (U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg),U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg))


----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(y0, y1, .(x1, x2), member1_out_ag(.(y3, .(x0, [])))) -> U3_GGGG(y0, y1, .(x1, x2), x0, U5_gg(member_in_gg(x0, x2)))
   U3_GGGG(z0, z1, .(z2, z3), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, z1, .(z2, .(z2, z3)))
   U3_GGGG(z0, z1, .(z2, z3), z5, member_out_gg) -> REACH_IN_GGGG(z5, z0, z1, .(z5, .(z2, z3)))
   REACH_IN_GGGG(z2, z0, .(x2, x3), .(z2, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z2, .(z2, z3)), member1_out_ag(x2))
   REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), member1_out_ag(x2))
   REACH_IN_GGGG(z2, z0, .(x2, x3), .(z2, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z2, .(z2, z3)), U6_ag(member1_in_ag(x3)))
   REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), U6_ag(member1_in_ag(x3)))
   U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg)
   U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg)

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(38) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(y0, y1, .(x1, x2), member1_out_ag(.(y3, .(x0, [])))) -> U3_GGGG(y0, y1, .(x1, x2), x0, U5_gg(member_in_gg(x0, x2))) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4)))),U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4)))))
   (U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5)))),U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5)))))
   (U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4)))),U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4)))))
   (U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5)))),U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5)))))


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GGGG(z0, z1, .(z2, z3), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, z1, .(z2, .(z2, z3)))
   U3_GGGG(z0, z1, .(z2, z3), z5, member_out_gg) -> REACH_IN_GGGG(z5, z0, z1, .(z5, .(z2, z3)))
   REACH_IN_GGGG(z2, z0, .(x2, x3), .(z2, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z2, .(z2, z3)), member1_out_ag(x2))
   REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), member1_out_ag(x2))
   REACH_IN_GGGG(z2, z0, .(x2, x3), .(z2, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z2, .(z2, z3)), U6_ag(member1_in_ag(x3)))
   REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), U6_ag(member1_in_ag(x3)))
   U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg)
   U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg)
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(40) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U3_GGGG(z0, z1, .(z2, z3), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, z1, .(z2, .(z2, z3))) we obtained the following new rules [LPAR04]:

   (U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))),U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))))
   (U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))),U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))))
   (U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))),U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))))
   (U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))),U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))))


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GGGG(z0, z1, .(z2, z3), z5, member_out_gg) -> REACH_IN_GGGG(z5, z0, z1, .(z5, .(z2, z3)))
   REACH_IN_GGGG(z2, z0, .(x2, x3), .(z2, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z2, .(z2, z3)), member1_out_ag(x2))
   REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), member1_out_ag(x2))
   REACH_IN_GGGG(z2, z0, .(x2, x3), .(z2, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z2, .(z2, z3)), U6_ag(member1_in_ag(x3)))
   REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), U6_ag(member1_in_ag(x3)))
   U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg)
   U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg)
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(42) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U3_GGGG(z0, z1, .(z2, z3), z5, member_out_gg) -> REACH_IN_GGGG(z5, z0, z1, .(z5, .(z2, z3))) we obtained the following new rules [LPAR04]:

   (U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))),U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))))
   (U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))),U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))))
   (U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))),U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))))
   (U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))),U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))))
   (U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))),U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))))
   (U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z5, z6)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))),U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z5, z6)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))))
   (U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z6, member_out_gg) -> REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z3, z4)))),U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z6, member_out_gg) -> REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z3, z4)))))
   (U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z7, member_out_gg) -> REACH_IN_GGGG(z7, z0, .(z1, z2), .(z7, .(z3, .(z4, z5)))),U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z7, member_out_gg) -> REACH_IN_GGGG(z7, z0, .(z1, z2), .(z7, .(z3, .(z4, z5)))))


----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(z2, z0, .(x2, x3), .(z2, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z2, .(z2, z3)), member1_out_ag(x2))
   REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), member1_out_ag(x2))
   REACH_IN_GGGG(z2, z0, .(x2, x3), .(z2, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z2, .(z2, z3)), U6_ag(member1_in_ag(x3)))
   REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), U6_ag(member1_in_ag(x3)))
   U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg)
   U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg)
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z5, z6)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z6, member_out_gg) -> REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z7, member_out_gg) -> REACH_IN_GGGG(z7, z0, .(z1, z2), .(z7, .(z3, .(z4, z5))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(44) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule REACH_IN_GGGG(z2, z0, .(x2, x3), .(z2, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z2, .(z2, z3)), member1_out_ag(x2)) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, [])))),REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, [])))))
   (REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, [])))),REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, [])))))
   (REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), member1_out_ag(z1)),REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), member1_out_ag(z1)))
   (REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), member1_out_ag(z1)),REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), member1_out_ag(z1)))


----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), member1_out_ag(x2))
   REACH_IN_GGGG(z2, z0, .(x2, x3), .(z2, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z2, .(z2, z3)), U6_ag(member1_in_ag(x3)))
   REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), U6_ag(member1_in_ag(x3)))
   U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg)
   U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg)
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z5, z6)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z6, member_out_gg) -> REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z7, member_out_gg) -> REACH_IN_GGGG(z7, z0, .(z1, z2), .(z7, .(z3, .(z4, z5))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), member1_out_ag(z1))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(46) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), member1_out_ag(x2)) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, [])))),REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, [])))))
   (REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, [])))),REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, [])))))
   (REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), member1_out_ag(z1)),REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), member1_out_ag(z1)))
   (REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), member1_out_ag(z1)),REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), member1_out_ag(z1)))
   (REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), member1_out_ag(.(z1, .(z2, [])))),REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), member1_out_ag(.(z1, .(z2, [])))))
   (REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), member1_out_ag(.(z1, .(z2, [])))),REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), member1_out_ag(.(z1, .(z2, [])))))
   (REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), member1_out_ag(z1)),REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), member1_out_ag(z1)))
   (REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), member1_out_ag(z1)),REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), member1_out_ag(z1)))


----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(z2, z0, .(x2, x3), .(z2, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z2, .(z2, z3)), U6_ag(member1_in_ag(x3)))
   REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), U6_ag(member1_in_ag(x3)))
   U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg)
   U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg)
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z5, z6)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z6, member_out_gg) -> REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z7, member_out_gg) -> REACH_IN_GGGG(z7, z0, .(z1, z2), .(z7, .(z3, .(z4, z5))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), member1_out_ag(z1))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(48) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule REACH_IN_GGGG(z2, z0, .(x2, x3), .(z2, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z2, .(z2, z3)), U6_ag(member1_in_ag(x3))) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), U6_ag(member1_in_ag(z3))),REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), U6_ag(member1_in_ag(z3))))
   (REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), U6_ag(member1_in_ag(z3))),REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), U6_ag(member1_in_ag(z3))))
   (REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2))),REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2))))
   (REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2))),REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2))))


----------------------------------------

(49)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), U6_ag(member1_in_ag(x3)))
   U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg)
   U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg)
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z5, z6)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z6, member_out_gg) -> REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z7, member_out_gg) -> REACH_IN_GGGG(z7, z0, .(z1, z2), .(z7, .(z3, .(z4, z5))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(50) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule REACH_IN_GGGG(z4, z0, .(x2, x3), .(z4, .(z2, z3))) -> U2_GGGG(z0, .(x2, x3), .(z4, .(z2, z3)), U6_ag(member1_in_ag(x3))) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), U6_ag(member1_in_ag(z3))),REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), U6_ag(member1_in_ag(z3))))
   (REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), U6_ag(member1_in_ag(z3))),REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), U6_ag(member1_in_ag(z3))))
   (REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2))),REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2))))
   (REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2))),REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2))))
   (REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), U6_ag(member1_in_ag(z3))),REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), U6_ag(member1_in_ag(z3))))
   (REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), U6_ag(member1_in_ag(z3))),REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), U6_ag(member1_in_ag(z3))))
   (REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2))),REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2))))
   (REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2))),REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2))))


----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg)
   U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg)
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z5, z6)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z6, member_out_gg) -> REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z7, member_out_gg) -> REACH_IN_GGGG(z7, z0, .(z1, z2), .(z7, .(z3, .(z4, z5))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(52) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg))


----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg)
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z5, z6)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z6, member_out_gg) -> REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z7, member_out_gg) -> REACH_IN_GGGG(z7, z0, .(z1, z2), .(z7, .(z3, .(z4, z5))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(54) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(.(x4, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg))


----------------------------------------

(55)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg)
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z5, z6)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z6, member_out_gg) -> REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z7, member_out_gg) -> REACH_IN_GGGG(z7, z0, .(z1, z2), .(z7, .(z3, .(z4, z5))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(56) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg))
   (U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg),U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg))
   (U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg),U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg))


----------------------------------------

(57)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg)
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z5, z6)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z6, member_out_gg) -> REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z7, member_out_gg) -> REACH_IN_GGGG(z7, z0, .(z1, z2), .(z7, .(z3, .(z4, z5))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(58) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg))
   (U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg),U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg))
   (U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg),U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg))
   (U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg),U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg))
   (U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg),U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg))


----------------------------------------

(59)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z5, z6)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z6, member_out_gg) -> REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z7, member_out_gg) -> REACH_IN_GGGG(z7, z0, .(z1, z2), .(z7, .(z3, .(z4, z5))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(60) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4)))) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, U5_gg(member_in_gg(z0, .(z0, .(z0, z4))))),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, U5_gg(member_in_gg(z0, .(z0, .(z0, z4))))))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z0, .(z4, z5))))),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z0, .(z4, z5))))))
   (U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(member_in_gg(x2, .(z0, .(z0, z4))))),U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(member_in_gg(x2, .(z0, .(z0, z4))))))
   (U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z0, .(z4, z5))))),U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z0, .(z4, z5))))))


----------------------------------------

(61)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z5, z6)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z6, member_out_gg) -> REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z7, member_out_gg) -> REACH_IN_GGGG(z7, z0, .(z1, z2), .(z7, .(z3, .(z4, z5))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, U5_gg(member_in_gg(z0, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(member_in_gg(x2, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z0, .(z4, z5)))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(62) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(.(x4, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5)))) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, U5_gg(member_in_gg(z0, .(z0, .(z0, z4))))),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, U5_gg(member_in_gg(z0, .(z0, .(z0, z4))))))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z0, .(z4, z5))))),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z0, .(z4, z5))))))
   (U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(member_in_gg(x2, .(z0, .(z0, z4))))),U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(member_in_gg(x2, .(z0, .(z0, z4))))))
   (U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z0, .(z4, z5))))),U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z0, .(z4, z5))))))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z4, .(z4, z5))))),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z4, .(z4, z5))))))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, U5_gg(member_in_gg(z0, .(z4, .(z5, z6))))),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, U5_gg(member_in_gg(z0, .(z4, .(z5, z6))))))
   (U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z4, .(z4, z5))))),U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z4, .(z4, z5))))))
   (U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(member_in_gg(x2, .(z4, .(z5, z6))))),U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(member_in_gg(x2, .(z4, .(z5, z6))))))


----------------------------------------

(63)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z5, z6)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z6, member_out_gg) -> REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z7, member_out_gg) -> REACH_IN_GGGG(z7, z0, .(z1, z2), .(z7, .(z3, .(z4, z5))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, U5_gg(member_in_gg(z0, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(member_in_gg(x2, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, U5_gg(member_in_gg(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(member_in_gg(x2, .(z4, .(z5, z6)))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(64) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(member_in_gg(x5, .(z0, z4)))) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, U5_gg(member_in_gg(z0, .(z0, .(z0, z4))))),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, U5_gg(member_in_gg(z0, .(z0, .(z0, z4))))))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z0, .(z4, z5))))),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z0, .(z4, z5))))))
   (U2_GGGG(z1, .(.(x5, .(x6, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(x5, .(x6, [])), z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(member_in_gg(x6, .(z0, .(z0, z4))))),U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(member_in_gg(x2, .(z0, .(z0, z4))))))
   (U2_GGGG(z1, .(.(x5, .(x6, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(x5, .(x6, [])), z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(member_in_gg(x6, .(z0, .(z4, z5))))),U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z0, .(z4, z5))))))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(member_in_gg(x6, .(z0, .(z0, z4))))),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(member_in_gg(x6, .(z0, .(z0, z4))))))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(member_in_gg(x6, .(z0, .(z4, z5))))),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(member_in_gg(x6, .(z0, .(z4, z5))))))
   (U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(member_in_gg(x6, .(z0, .(z0, z4))))),U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(member_in_gg(x6, .(z0, .(z0, z4))))))
   (U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(member_in_gg(x6, .(z0, .(z4, z5))))),U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(member_in_gg(x6, .(z0, .(z4, z5))))))


----------------------------------------

(65)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z5, z6)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z6, member_out_gg) -> REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z7, member_out_gg) -> REACH_IN_GGGG(z7, z0, .(z1, z2), .(z7, .(z3, .(z4, z5))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, U5_gg(member_in_gg(z0, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(member_in_gg(x2, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, U5_gg(member_in_gg(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(member_in_gg(x2, .(z4, .(z5, z6)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(member_in_gg(x6, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(member_in_gg(x6, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(member_in_gg(x6, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(member_in_gg(x6, .(z0, .(z4, z5)))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(66) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(x4, .(x5, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(member_in_gg(x5, .(z4, z5)))) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, U5_gg(member_in_gg(z0, .(z0, .(z0, z4))))),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, U5_gg(member_in_gg(z0, .(z0, .(z0, z4))))))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z0, .(z4, z5))))),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z0, .(z4, z5))))))
   (U2_GGGG(z1, .(.(x6, .(x7, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(x6, .(x7, [])), z3), .(z0, .(z0, .(z0, z4))), x7, U5_gg(member_in_gg(x7, .(z0, .(z0, z4))))),U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(member_in_gg(x2, .(z0, .(z0, z4))))))
   (U2_GGGG(z1, .(.(x6, .(x7, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(x6, .(x7, [])), z3), .(z0, .(z0, .(z4, z5))), x7, U5_gg(member_in_gg(x7, .(z0, .(z4, z5))))),U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z0, .(z4, z5))))))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z4, .(z4, z5))))),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z4, .(z4, z5))))))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, U5_gg(member_in_gg(z0, .(z4, .(z5, z6))))),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, U5_gg(member_in_gg(z0, .(z4, .(z5, z6))))))
   (U2_GGGG(z1, .(.(x6, .(x7, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(x6, .(x7, [])), z3), .(z0, .(z4, .(z4, z5))), x7, U5_gg(member_in_gg(x7, .(z4, .(z4, z5))))),U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z4, .(z4, z5))))))
   (U2_GGGG(z1, .(.(x6, .(x7, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(x6, .(x7, [])), z3), .(z0, .(z4, .(z5, z6))), x7, U5_gg(member_in_gg(x7, .(z4, .(z5, z6))))),U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(member_in_gg(x2, .(z4, .(z5, z6))))))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), x7, U5_gg(member_in_gg(x7, .(z0, .(z0, z4))))),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(member_in_gg(x6, .(z0, .(z0, z4))))))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), x7, U5_gg(member_in_gg(x7, .(z0, .(z4, z5))))),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(member_in_gg(x6, .(z0, .(z4, z5))))))
   (U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x7, U5_gg(member_in_gg(x7, .(z0, .(z0, z4))))),U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(member_in_gg(x6, .(z0, .(z0, z4))))))
   (U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x7, U5_gg(member_in_gg(x7, .(z0, .(z4, z5))))),U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(member_in_gg(x6, .(z0, .(z4, z5))))))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), x7, U5_gg(member_in_gg(x7, .(z4, .(z4, z5))))),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), x7, U5_gg(member_in_gg(x7, .(z4, .(z4, z5))))))
   (U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), x7, U5_gg(member_in_gg(x7, .(z4, .(z5, z6))))),U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), x7, U5_gg(member_in_gg(x7, .(z4, .(z5, z6))))))
   (U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), x7, U5_gg(member_in_gg(x7, .(z4, .(z4, z5))))),U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), x7, U5_gg(member_in_gg(x7, .(z4, .(z4, z5))))))
   (U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), x7, U5_gg(member_in_gg(x7, .(z4, .(z5, z6))))),U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), x7, U5_gg(member_in_gg(x7, .(z4, .(z5, z6))))))


----------------------------------------

(67)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z5, z6)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z6, member_out_gg) -> REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z7, member_out_gg) -> REACH_IN_GGGG(z7, z0, .(z1, z2), .(z7, .(z3, .(z4, z5))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, U5_gg(member_in_gg(z0, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(member_in_gg(x2, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, U5_gg(member_in_gg(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(member_in_gg(x2, .(z4, .(z5, z6)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(member_in_gg(x6, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(member_in_gg(x6, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(member_in_gg(x6, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(member_in_gg(x6, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), x7, U5_gg(member_in_gg(x7, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), x7, U5_gg(member_in_gg(x7, .(z4, .(z5, z6)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), x7, U5_gg(member_in_gg(x7, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), x7, U5_gg(member_in_gg(x7, .(z4, .(z5, z6)))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(68) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), member1_out_ag(z1)) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(x0, x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x0, x4)))) -> U2_GGGG(x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x0, x4))), member1_out_ag(.(y_1, .(y_2, [])))),REACH_IN_GGGG(x0, x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x0, x4)))) -> U2_GGGG(x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x0, x4))), member1_out_ag(.(y_1, .(y_2, [])))))


----------------------------------------

(69)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z5, z6)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z6, member_out_gg) -> REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z7, member_out_gg) -> REACH_IN_GGGG(z7, z0, .(z1, z2), .(z7, .(z3, .(z4, z5))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, U5_gg(member_in_gg(z0, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(member_in_gg(x2, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, U5_gg(member_in_gg(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(member_in_gg(x2, .(z4, .(z5, z6)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(member_in_gg(x6, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(member_in_gg(x6, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(member_in_gg(x6, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(member_in_gg(x6, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), x7, U5_gg(member_in_gg(x7, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), x7, U5_gg(member_in_gg(x7, .(z4, .(z5, z6)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), x7, U5_gg(member_in_gg(x7, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), x7, U5_gg(member_in_gg(x7, .(z4, .(z5, z6)))))
   REACH_IN_GGGG(x0, x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x0, x4)))) -> U2_GGGG(x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x0, x4))), member1_out_ag(.(y_1, .(y_2, []))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(70) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), member1_out_ag(z1)) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(x0, x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x4, x5)))) -> U2_GGGG(x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x4, x5))), member1_out_ag(.(y_1, .(y_2, [])))),REACH_IN_GGGG(x0, x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x4, x5)))) -> U2_GGGG(x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x4, x5))), member1_out_ag(.(y_1, .(y_2, [])))))


----------------------------------------

(71)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z5, z6)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z6, member_out_gg) -> REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z7, member_out_gg) -> REACH_IN_GGGG(z7, z0, .(z1, z2), .(z7, .(z3, .(z4, z5))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), member1_out_ag(z1))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, U5_gg(member_in_gg(z0, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(member_in_gg(x2, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, U5_gg(member_in_gg(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(member_in_gg(x2, .(z4, .(z5, z6)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(member_in_gg(x6, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(member_in_gg(x6, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(member_in_gg(x6, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(member_in_gg(x6, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), x7, U5_gg(member_in_gg(x7, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), x7, U5_gg(member_in_gg(x7, .(z4, .(z5, z6)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), x7, U5_gg(member_in_gg(x7, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), x7, U5_gg(member_in_gg(x7, .(z4, .(z5, z6)))))
   REACH_IN_GGGG(x0, x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x0, x4)))) -> U2_GGGG(x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x0, x4))), member1_out_ag(.(y_1, .(y_2, []))))
   REACH_IN_GGGG(x0, x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x4, x5)))) -> U2_GGGG(x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x4, x5))), member1_out_ag(.(y_1, .(y_2, []))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(72) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), member1_out_ag(z1)) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(x0, x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x4, .(x4, x5)))) -> U2_GGGG(x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x4, .(x4, x5))), member1_out_ag(.(y_1, .(y_2, [])))),REACH_IN_GGGG(x0, x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x4, .(x4, x5)))) -> U2_GGGG(x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x4, .(x4, x5))), member1_out_ag(.(y_1, .(y_2, [])))))


----------------------------------------

(73)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z5, z6)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z6, member_out_gg) -> REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z7, member_out_gg) -> REACH_IN_GGGG(z7, z0, .(z1, z2), .(z7, .(z3, .(z4, z5))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), member1_out_ag(z1))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, U5_gg(member_in_gg(z0, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(member_in_gg(x2, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, U5_gg(member_in_gg(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(member_in_gg(x2, .(z4, .(z5, z6)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(member_in_gg(x6, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(member_in_gg(x6, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(member_in_gg(x6, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(member_in_gg(x6, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), x7, U5_gg(member_in_gg(x7, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), x7, U5_gg(member_in_gg(x7, .(z4, .(z5, z6)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), x7, U5_gg(member_in_gg(x7, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), x7, U5_gg(member_in_gg(x7, .(z4, .(z5, z6)))))
   REACH_IN_GGGG(x0, x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x0, x4)))) -> U2_GGGG(x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x0, x4))), member1_out_ag(.(y_1, .(y_2, []))))
   REACH_IN_GGGG(x0, x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x4, x5)))) -> U2_GGGG(x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x4, x5))), member1_out_ag(.(y_1, .(y_2, []))))
   REACH_IN_GGGG(x0, x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x4, .(x4, x5)))) -> U2_GGGG(x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x4, .(x4, x5))), member1_out_ag(.(y_1, .(y_2, []))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(74) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), member1_out_ag(z1)) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(x0, x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x4, .(x5, x6)))) -> U2_GGGG(x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x4, .(x5, x6))), member1_out_ag(.(y_1, .(y_2, [])))),REACH_IN_GGGG(x0, x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x4, .(x5, x6)))) -> U2_GGGG(x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x4, .(x5, x6))), member1_out_ag(.(y_1, .(y_2, [])))))


----------------------------------------

(75)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, z4)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z3, member_out_gg) -> REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z4, z5)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))))
   U3_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z4, .(z5, z6)), z2, member_out_gg) -> REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z3, z4)), z6, member_out_gg) -> REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z3, z4))))
   U3_GGGG(z0, .(z1, z2), .(z3, .(z4, z5)), z7, member_out_gg) -> REACH_IN_GGGG(z7, z0, .(z1, z2), .(z7, .(z3, .(z4, z5))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), member1_out_ag(.(z1, .(z2, []))))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z2, z4))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z2, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z3, z0, .(z1, z2), .(z3, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z3, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z4, z5))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6)))) -> U2_GGGG(z0, .(.(z1, .(z2, [])), z3), .(z2, .(z4, .(z5, z6))), U6_ag(member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z0, .(z1, z2), .(z5, .(z3, .(z3, z4)))) -> U2_GGGG(z0, .(z1, z2), .(z5, .(z3, .(z3, z4))), U6_ag(member1_in_ag(z2)))
   REACH_IN_GGGG(z6, z0, .(z1, z2), .(z6, .(z3, .(z4, z5)))) -> U2_GGGG(z0, .(z1, z2), .(z6, .(z3, .(z4, z5))), U6_ag(member1_in_ag(z2)))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg)
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(z0, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg)
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), z0, U5_gg(member_in_gg(z0, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(member_in_gg(x2, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, U5_gg(member_in_gg(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z2, .(z0, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, U5_gg(member_in_gg(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(member_in_gg(x2, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x1, .(x2, [])))) -> U3_GGGG(z1, .(.(x1, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(member_in_gg(x2, .(z4, .(z5, z6)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(member_in_gg(x6, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(member_in_gg(x6, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(member_in_gg(x6, .(z0, .(z0, z4)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(x5, .(x6, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(member_in_gg(x6, .(z0, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), x7, U5_gg(member_in_gg(x7, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(.(z2, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), x7, U5_gg(member_in_gg(x7, .(z4, .(z5, z6)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), x7, U5_gg(member_in_gg(x7, .(z4, .(z4, z5)))))
   U2_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(x6, .(x7, [])))) -> U3_GGGG(z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), x7, U5_gg(member_in_gg(x7, .(z4, .(z5, z6)))))
   REACH_IN_GGGG(x0, x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x0, x4)))) -> U2_GGGG(x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x0, x4))), member1_out_ag(.(y_1, .(y_2, []))))
   REACH_IN_GGGG(x0, x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x4, x5)))) -> U2_GGGG(x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x0, .(x4, x5))), member1_out_ag(.(y_1, .(y_2, []))))
   REACH_IN_GGGG(x0, x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x4, .(x4, x5)))) -> U2_GGGG(x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x4, .(x4, x5))), member1_out_ag(.(y_1, .(y_2, []))))
   REACH_IN_GGGG(x0, x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x4, .(x5, x6)))) -> U2_GGGG(x1, .(.(y_1, .(y_2, [])), x3), .(x0, .(x4, .(x5, x6))), member1_out_ag(.(y_1, .(y_2, []))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H)
   member1_in_ag(.(H, L)) -> U6_ag(member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg
   member_in_gg(X, .(H, L)) -> U5_gg(member_in_gg(X, L))
   U6_ag(member1_out_ag(X)) -> member1_out_ag(X)
   U5_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0)
   U5_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(76) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

reach_in_4: (b,b,b,b)

member_in_2: (b,b)

member1_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   reach_in_gggg(X, Y, Edges, Visited) -> U1_gggg(X, Y, Edges, Visited, member_in_gg(.(X, .(Y, [])), Edges))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))
   U1_gggg(X, Y, Edges, Visited, member_out_gg(.(X, .(Y, [])), Edges)) -> reach_out_gggg(X, Y, Edges, Visited)
   reach_in_gggg(X, Z, Edges, Visited) -> U2_gggg(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   member1_in_ag(H, .(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(X, .(H, L)) -> U6_ag(X, H, L, member1_in_ag(X, L))
   U6_ag(X, H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U2_gggg(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_gggg(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_gggg(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> U4_gggg(X, Z, Edges, Visited, reach_in_gggg(Y, Z, Edges, .(Y, Visited)))
   U4_gggg(X, Z, Edges, Visited, reach_out_gggg(Y, Z, Edges, .(Y, Visited))) -> reach_out_gggg(X, Z, Edges, Visited)

The argument filtering Pi contains the following mapping:
reach_in_gggg(x1, x2, x3, x4)  =  reach_in_gggg(x1, x2, x3, x4)

U1_gggg(x1, x2, x3, x4, x5)  =  U1_gggg(x1, x2, x3, x4, x5)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

member_out_gg(x1, x2)  =  member_out_gg(x1, x2)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

[]  =  []

reach_out_gggg(x1, x2, x3, x4)  =  reach_out_gggg(x1, x2, x3, x4)

U2_gggg(x1, x2, x3, x4, x5)  =  U2_gggg(x1, x2, x3, x4, x5)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

member1_out_ag(x1, x2)  =  member1_out_ag(x1, x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x2, x3, x4)

U3_gggg(x1, x2, x3, x4, x5, x6)  =  U3_gggg(x1, x2, x3, x4, x5, x6)

U4_gggg(x1, x2, x3, x4, x5)  =  U4_gggg(x1, x2, x3, x4, x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(77)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   reach_in_gggg(X, Y, Edges, Visited) -> U1_gggg(X, Y, Edges, Visited, member_in_gg(.(X, .(Y, [])), Edges))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))
   U1_gggg(X, Y, Edges, Visited, member_out_gg(.(X, .(Y, [])), Edges)) -> reach_out_gggg(X, Y, Edges, Visited)
   reach_in_gggg(X, Z, Edges, Visited) -> U2_gggg(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   member1_in_ag(H, .(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(X, .(H, L)) -> U6_ag(X, H, L, member1_in_ag(X, L))
   U6_ag(X, H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U2_gggg(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_gggg(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_gggg(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> U4_gggg(X, Z, Edges, Visited, reach_in_gggg(Y, Z, Edges, .(Y, Visited)))
   U4_gggg(X, Z, Edges, Visited, reach_out_gggg(Y, Z, Edges, .(Y, Visited))) -> reach_out_gggg(X, Z, Edges, Visited)

The argument filtering Pi contains the following mapping:
reach_in_gggg(x1, x2, x3, x4)  =  reach_in_gggg(x1, x2, x3, x4)

U1_gggg(x1, x2, x3, x4, x5)  =  U1_gggg(x1, x2, x3, x4, x5)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

member_out_gg(x1, x2)  =  member_out_gg(x1, x2)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

[]  =  []

reach_out_gggg(x1, x2, x3, x4)  =  reach_out_gggg(x1, x2, x3, x4)

U2_gggg(x1, x2, x3, x4, x5)  =  U2_gggg(x1, x2, x3, x4, x5)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

member1_out_ag(x1, x2)  =  member1_out_ag(x1, x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x2, x3, x4)

U3_gggg(x1, x2, x3, x4, x5, x6)  =  U3_gggg(x1, x2, x3, x4, x5, x6)

U4_gggg(x1, x2, x3, x4, x5)  =  U4_gggg(x1, x2, x3, x4, x5)



----------------------------------------

(78) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(X, Y, Edges, Visited) -> U1_GGGG(X, Y, Edges, Visited, member_in_gg(.(X, .(Y, [])), Edges))
   REACH_IN_GGGG(X, Y, Edges, Visited) -> MEMBER_IN_GG(.(X, .(Y, [])), Edges)
   MEMBER_IN_GG(X, .(H, L)) -> U5_GG(X, H, L, member_in_gg(X, L))
   MEMBER_IN_GG(X, .(H, L)) -> MEMBER_IN_GG(X, L)
   REACH_IN_GGGG(X, Z, Edges, Visited) -> U2_GGGG(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   REACH_IN_GGGG(X, Z, Edges, Visited) -> MEMBER1_IN_AG(.(X, .(Y, [])), Edges)
   MEMBER1_IN_AG(X, .(H, L)) -> U6_AG(X, H, L, member1_in_ag(X, L))
   MEMBER1_IN_AG(X, .(H, L)) -> MEMBER1_IN_AG(X, L)
   U2_GGGG(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_GGGG(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U2_GGGG(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> MEMBER_IN_GG(Y, Visited)
   U3_GGGG(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> U4_GGGG(X, Z, Edges, Visited, reach_in_gggg(Y, Z, Edges, .(Y, Visited)))
   U3_GGGG(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> REACH_IN_GGGG(Y, Z, Edges, .(Y, Visited))

The TRS R consists of the following rules:

   reach_in_gggg(X, Y, Edges, Visited) -> U1_gggg(X, Y, Edges, Visited, member_in_gg(.(X, .(Y, [])), Edges))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))
   U1_gggg(X, Y, Edges, Visited, member_out_gg(.(X, .(Y, [])), Edges)) -> reach_out_gggg(X, Y, Edges, Visited)
   reach_in_gggg(X, Z, Edges, Visited) -> U2_gggg(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   member1_in_ag(H, .(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(X, .(H, L)) -> U6_ag(X, H, L, member1_in_ag(X, L))
   U6_ag(X, H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U2_gggg(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_gggg(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_gggg(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> U4_gggg(X, Z, Edges, Visited, reach_in_gggg(Y, Z, Edges, .(Y, Visited)))
   U4_gggg(X, Z, Edges, Visited, reach_out_gggg(Y, Z, Edges, .(Y, Visited))) -> reach_out_gggg(X, Z, Edges, Visited)

The argument filtering Pi contains the following mapping:
reach_in_gggg(x1, x2, x3, x4)  =  reach_in_gggg(x1, x2, x3, x4)

U1_gggg(x1, x2, x3, x4, x5)  =  U1_gggg(x1, x2, x3, x4, x5)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

member_out_gg(x1, x2)  =  member_out_gg(x1, x2)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

[]  =  []

reach_out_gggg(x1, x2, x3, x4)  =  reach_out_gggg(x1, x2, x3, x4)

U2_gggg(x1, x2, x3, x4, x5)  =  U2_gggg(x1, x2, x3, x4, x5)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

member1_out_ag(x1, x2)  =  member1_out_ag(x1, x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x2, x3, x4)

U3_gggg(x1, x2, x3, x4, x5, x6)  =  U3_gggg(x1, x2, x3, x4, x5, x6)

U4_gggg(x1, x2, x3, x4, x5)  =  U4_gggg(x1, x2, x3, x4, x5)

REACH_IN_GGGG(x1, x2, x3, x4)  =  REACH_IN_GGGG(x1, x2, x3, x4)

U1_GGGG(x1, x2, x3, x4, x5)  =  U1_GGGG(x1, x2, x3, x4, x5)

MEMBER_IN_GG(x1, x2)  =  MEMBER_IN_GG(x1, x2)

U5_GG(x1, x2, x3, x4)  =  U5_GG(x1, x2, x3, x4)

U2_GGGG(x1, x2, x3, x4, x5)  =  U2_GGGG(x1, x2, x3, x4, x5)

MEMBER1_IN_AG(x1, x2)  =  MEMBER1_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x2, x3, x4)

U3_GGGG(x1, x2, x3, x4, x5, x6)  =  U3_GGGG(x1, x2, x3, x4, x5, x6)

U4_GGGG(x1, x2, x3, x4, x5)  =  U4_GGGG(x1, x2, x3, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(79)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(X, Y, Edges, Visited) -> U1_GGGG(X, Y, Edges, Visited, member_in_gg(.(X, .(Y, [])), Edges))
   REACH_IN_GGGG(X, Y, Edges, Visited) -> MEMBER_IN_GG(.(X, .(Y, [])), Edges)
   MEMBER_IN_GG(X, .(H, L)) -> U5_GG(X, H, L, member_in_gg(X, L))
   MEMBER_IN_GG(X, .(H, L)) -> MEMBER_IN_GG(X, L)
   REACH_IN_GGGG(X, Z, Edges, Visited) -> U2_GGGG(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   REACH_IN_GGGG(X, Z, Edges, Visited) -> MEMBER1_IN_AG(.(X, .(Y, [])), Edges)
   MEMBER1_IN_AG(X, .(H, L)) -> U6_AG(X, H, L, member1_in_ag(X, L))
   MEMBER1_IN_AG(X, .(H, L)) -> MEMBER1_IN_AG(X, L)
   U2_GGGG(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_GGGG(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U2_GGGG(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> MEMBER_IN_GG(Y, Visited)
   U3_GGGG(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> U4_GGGG(X, Z, Edges, Visited, reach_in_gggg(Y, Z, Edges, .(Y, Visited)))
   U3_GGGG(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> REACH_IN_GGGG(Y, Z, Edges, .(Y, Visited))

The TRS R consists of the following rules:

   reach_in_gggg(X, Y, Edges, Visited) -> U1_gggg(X, Y, Edges, Visited, member_in_gg(.(X, .(Y, [])), Edges))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))
   U1_gggg(X, Y, Edges, Visited, member_out_gg(.(X, .(Y, [])), Edges)) -> reach_out_gggg(X, Y, Edges, Visited)
   reach_in_gggg(X, Z, Edges, Visited) -> U2_gggg(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   member1_in_ag(H, .(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(X, .(H, L)) -> U6_ag(X, H, L, member1_in_ag(X, L))
   U6_ag(X, H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U2_gggg(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_gggg(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_gggg(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> U4_gggg(X, Z, Edges, Visited, reach_in_gggg(Y, Z, Edges, .(Y, Visited)))
   U4_gggg(X, Z, Edges, Visited, reach_out_gggg(Y, Z, Edges, .(Y, Visited))) -> reach_out_gggg(X, Z, Edges, Visited)

The argument filtering Pi contains the following mapping:
reach_in_gggg(x1, x2, x3, x4)  =  reach_in_gggg(x1, x2, x3, x4)

U1_gggg(x1, x2, x3, x4, x5)  =  U1_gggg(x1, x2, x3, x4, x5)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

member_out_gg(x1, x2)  =  member_out_gg(x1, x2)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

[]  =  []

reach_out_gggg(x1, x2, x3, x4)  =  reach_out_gggg(x1, x2, x3, x4)

U2_gggg(x1, x2, x3, x4, x5)  =  U2_gggg(x1, x2, x3, x4, x5)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

member1_out_ag(x1, x2)  =  member1_out_ag(x1, x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x2, x3, x4)

U3_gggg(x1, x2, x3, x4, x5, x6)  =  U3_gggg(x1, x2, x3, x4, x5, x6)

U4_gggg(x1, x2, x3, x4, x5)  =  U4_gggg(x1, x2, x3, x4, x5)

REACH_IN_GGGG(x1, x2, x3, x4)  =  REACH_IN_GGGG(x1, x2, x3, x4)

U1_GGGG(x1, x2, x3, x4, x5)  =  U1_GGGG(x1, x2, x3, x4, x5)

MEMBER_IN_GG(x1, x2)  =  MEMBER_IN_GG(x1, x2)

U5_GG(x1, x2, x3, x4)  =  U5_GG(x1, x2, x3, x4)

U2_GGGG(x1, x2, x3, x4, x5)  =  U2_GGGG(x1, x2, x3, x4, x5)

MEMBER1_IN_AG(x1, x2)  =  MEMBER1_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x2, x3, x4)

U3_GGGG(x1, x2, x3, x4, x5, x6)  =  U3_GGGG(x1, x2, x3, x4, x5, x6)

U4_GGGG(x1, x2, x3, x4, x5)  =  U4_GGGG(x1, x2, x3, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(80) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 7 less nodes.
----------------------------------------

(81)
Complex Obligation (AND)

----------------------------------------

(82)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER1_IN_AG(X, .(H, L)) -> MEMBER1_IN_AG(X, L)

The TRS R consists of the following rules:

   reach_in_gggg(X, Y, Edges, Visited) -> U1_gggg(X, Y, Edges, Visited, member_in_gg(.(X, .(Y, [])), Edges))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))
   U1_gggg(X, Y, Edges, Visited, member_out_gg(.(X, .(Y, [])), Edges)) -> reach_out_gggg(X, Y, Edges, Visited)
   reach_in_gggg(X, Z, Edges, Visited) -> U2_gggg(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   member1_in_ag(H, .(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(X, .(H, L)) -> U6_ag(X, H, L, member1_in_ag(X, L))
   U6_ag(X, H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U2_gggg(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_gggg(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_gggg(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> U4_gggg(X, Z, Edges, Visited, reach_in_gggg(Y, Z, Edges, .(Y, Visited)))
   U4_gggg(X, Z, Edges, Visited, reach_out_gggg(Y, Z, Edges, .(Y, Visited))) -> reach_out_gggg(X, Z, Edges, Visited)

The argument filtering Pi contains the following mapping:
reach_in_gggg(x1, x2, x3, x4)  =  reach_in_gggg(x1, x2, x3, x4)

U1_gggg(x1, x2, x3, x4, x5)  =  U1_gggg(x1, x2, x3, x4, x5)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

member_out_gg(x1, x2)  =  member_out_gg(x1, x2)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

[]  =  []

reach_out_gggg(x1, x2, x3, x4)  =  reach_out_gggg(x1, x2, x3, x4)

U2_gggg(x1, x2, x3, x4, x5)  =  U2_gggg(x1, x2, x3, x4, x5)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

member1_out_ag(x1, x2)  =  member1_out_ag(x1, x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x2, x3, x4)

U3_gggg(x1, x2, x3, x4, x5, x6)  =  U3_gggg(x1, x2, x3, x4, x5, x6)

U4_gggg(x1, x2, x3, x4, x5)  =  U4_gggg(x1, x2, x3, x4, x5)

MEMBER1_IN_AG(x1, x2)  =  MEMBER1_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(83) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(84)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER1_IN_AG(X, .(H, L)) -> MEMBER1_IN_AG(X, L)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBER1_IN_AG(x1, x2)  =  MEMBER1_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(85) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(86)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER1_IN_AG(.(H, L)) -> MEMBER1_IN_AG(L)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(87) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER1_IN_AG(.(H, L)) -> MEMBER1_IN_AG(L)
The graph contains the following edges 1 > 1


----------------------------------------

(88)
YES

----------------------------------------

(89)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GG(X, .(H, L)) -> MEMBER_IN_GG(X, L)

The TRS R consists of the following rules:

   reach_in_gggg(X, Y, Edges, Visited) -> U1_gggg(X, Y, Edges, Visited, member_in_gg(.(X, .(Y, [])), Edges))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))
   U1_gggg(X, Y, Edges, Visited, member_out_gg(.(X, .(Y, [])), Edges)) -> reach_out_gggg(X, Y, Edges, Visited)
   reach_in_gggg(X, Z, Edges, Visited) -> U2_gggg(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   member1_in_ag(H, .(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(X, .(H, L)) -> U6_ag(X, H, L, member1_in_ag(X, L))
   U6_ag(X, H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U2_gggg(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_gggg(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_gggg(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> U4_gggg(X, Z, Edges, Visited, reach_in_gggg(Y, Z, Edges, .(Y, Visited)))
   U4_gggg(X, Z, Edges, Visited, reach_out_gggg(Y, Z, Edges, .(Y, Visited))) -> reach_out_gggg(X, Z, Edges, Visited)

The argument filtering Pi contains the following mapping:
reach_in_gggg(x1, x2, x3, x4)  =  reach_in_gggg(x1, x2, x3, x4)

U1_gggg(x1, x2, x3, x4, x5)  =  U1_gggg(x1, x2, x3, x4, x5)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

member_out_gg(x1, x2)  =  member_out_gg(x1, x2)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

[]  =  []

reach_out_gggg(x1, x2, x3, x4)  =  reach_out_gggg(x1, x2, x3, x4)

U2_gggg(x1, x2, x3, x4, x5)  =  U2_gggg(x1, x2, x3, x4, x5)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

member1_out_ag(x1, x2)  =  member1_out_ag(x1, x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x2, x3, x4)

U3_gggg(x1, x2, x3, x4, x5, x6)  =  U3_gggg(x1, x2, x3, x4, x5, x6)

U4_gggg(x1, x2, x3, x4, x5)  =  U4_gggg(x1, x2, x3, x4, x5)

MEMBER_IN_GG(x1, x2)  =  MEMBER_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(90) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(91)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GG(X, .(H, L)) -> MEMBER_IN_GG(X, L)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(92) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(93)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GG(X, .(H, L)) -> MEMBER_IN_GG(X, L)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(94) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER_IN_GG(X, .(H, L)) -> MEMBER_IN_GG(X, L)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(95)
YES

----------------------------------------

(96)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(X, Z, Edges, Visited) -> U2_GGGG(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   U2_GGGG(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_GGGG(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_GGGG(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> REACH_IN_GGGG(Y, Z, Edges, .(Y, Visited))

The TRS R consists of the following rules:

   reach_in_gggg(X, Y, Edges, Visited) -> U1_gggg(X, Y, Edges, Visited, member_in_gg(.(X, .(Y, [])), Edges))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))
   U1_gggg(X, Y, Edges, Visited, member_out_gg(.(X, .(Y, [])), Edges)) -> reach_out_gggg(X, Y, Edges, Visited)
   reach_in_gggg(X, Z, Edges, Visited) -> U2_gggg(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   member1_in_ag(H, .(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(X, .(H, L)) -> U6_ag(X, H, L, member1_in_ag(X, L))
   U6_ag(X, H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U2_gggg(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_gggg(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_gggg(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> U4_gggg(X, Z, Edges, Visited, reach_in_gggg(Y, Z, Edges, .(Y, Visited)))
   U4_gggg(X, Z, Edges, Visited, reach_out_gggg(Y, Z, Edges, .(Y, Visited))) -> reach_out_gggg(X, Z, Edges, Visited)

The argument filtering Pi contains the following mapping:
reach_in_gggg(x1, x2, x3, x4)  =  reach_in_gggg(x1, x2, x3, x4)

U1_gggg(x1, x2, x3, x4, x5)  =  U1_gggg(x1, x2, x3, x4, x5)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

member_out_gg(x1, x2)  =  member_out_gg(x1, x2)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

[]  =  []

reach_out_gggg(x1, x2, x3, x4)  =  reach_out_gggg(x1, x2, x3, x4)

U2_gggg(x1, x2, x3, x4, x5)  =  U2_gggg(x1, x2, x3, x4, x5)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

member1_out_ag(x1, x2)  =  member1_out_ag(x1, x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x2, x3, x4)

U3_gggg(x1, x2, x3, x4, x5, x6)  =  U3_gggg(x1, x2, x3, x4, x5, x6)

U4_gggg(x1, x2, x3, x4, x5)  =  U4_gggg(x1, x2, x3, x4, x5)

REACH_IN_GGGG(x1, x2, x3, x4)  =  REACH_IN_GGGG(x1, x2, x3, x4)

U2_GGGG(x1, x2, x3, x4, x5)  =  U2_GGGG(x1, x2, x3, x4, x5)

U3_GGGG(x1, x2, x3, x4, x5, x6)  =  U3_GGGG(x1, x2, x3, x4, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(97) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(98)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(X, Z, Edges, Visited) -> U2_GGGG(X, Z, Edges, Visited, member1_in_ag(.(X, .(Y, [])), Edges))
   U2_GGGG(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_GGGG(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_GGGG(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> REACH_IN_GGGG(Y, Z, Edges, .(Y, Visited))

The TRS R consists of the following rules:

   member1_in_ag(H, .(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(X, .(H, L)) -> U6_ag(X, H, L, member1_in_ag(X, L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(X, H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The argument filtering Pi contains the following mapping:
member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

member_out_gg(x1, x2)  =  member_out_gg(x1, x2)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

[]  =  []

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

member1_out_ag(x1, x2)  =  member1_out_ag(x1, x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x2, x3, x4)

REACH_IN_GGGG(x1, x2, x3, x4)  =  REACH_IN_GGGG(x1, x2, x3, x4)

U2_GGGG(x1, x2, x3, x4, x5)  =  U2_GGGG(x1, x2, x3, x4, x5)

U3_GGGG(x1, x2, x3, x4, x5, x6)  =  U3_GGGG(x1, x2, x3, x4, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(99) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(100)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(X, Z, Edges, Visited) -> U2_GGGG(X, Z, Edges, Visited, member1_in_ag(Edges))
   U2_GGGG(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_GGGG(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_GGGG(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> REACH_IN_GGGG(Y, Z, Edges, .(Y, Visited))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(101) TransformationProof (SOUND)
By narrowing [LPAR04] the rule REACH_IN_GGGG(X, Z, Edges, Visited) -> U2_GGGG(X, Z, Edges, Visited, member1_in_ag(Edges)) at position [4] we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y0, y1, .(x0, x1), y3, member1_out_ag(x0, .(x0, x1))),REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y0, y1, .(x0, x1), y3, member1_out_ag(x0, .(x0, x1))))
   (REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y0, y1, .(x0, x1), y3, U6_ag(x0, x1, member1_in_ag(x1))),REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y0, y1, .(x0, x1), y3, U6_ag(x0, x1, member1_in_ag(x1))))


----------------------------------------

(102)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_GGGG(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited))
   U3_GGGG(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> REACH_IN_GGGG(Y, Z, Edges, .(Y, Visited))
   REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y0, y1, .(x0, x1), y3, member1_out_ag(x0, .(x0, x1)))
   REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y0, y1, .(x0, x1), y3, U6_ag(x0, x1, member1_in_ag(x1)))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(103) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U2_GGGG(X, Z, Edges, Visited, member1_out_ag(.(X, .(Y, [])), Edges)) -> U3_GGGG(X, Z, Edges, Visited, Y, member_in_gg(Y, Visited)) at position [5] we obtained the following new rules [LPAR04]:

   (U2_GGGG(y0, y1, y2, .(x0, x1), member1_out_ag(.(y0, .(x0, [])), y2)) -> U3_GGGG(y0, y1, y2, .(x0, x1), x0, member_out_gg(x0, .(x0, x1))),U2_GGGG(y0, y1, y2, .(x0, x1), member1_out_ag(.(y0, .(x0, [])), y2)) -> U3_GGGG(y0, y1, y2, .(x0, x1), x0, member_out_gg(x0, .(x0, x1))))
   (U2_GGGG(y0, y1, y2, .(x1, x2), member1_out_ag(.(y0, .(x0, [])), y2)) -> U3_GGGG(y0, y1, y2, .(x1, x2), x0, U5_gg(x0, x1, x2, member_in_gg(x0, x2))),U2_GGGG(y0, y1, y2, .(x1, x2), member1_out_ag(.(y0, .(x0, [])), y2)) -> U3_GGGG(y0, y1, y2, .(x1, x2), x0, U5_gg(x0, x1, x2, member_in_gg(x0, x2))))


----------------------------------------

(104)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GGGG(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> REACH_IN_GGGG(Y, Z, Edges, .(Y, Visited))
   REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y0, y1, .(x0, x1), y3, member1_out_ag(x0, .(x0, x1)))
   REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y0, y1, .(x0, x1), y3, U6_ag(x0, x1, member1_in_ag(x1)))
   U2_GGGG(y0, y1, y2, .(x0, x1), member1_out_ag(.(y0, .(x0, [])), y2)) -> U3_GGGG(y0, y1, y2, .(x0, x1), x0, member_out_gg(x0, .(x0, x1)))
   U2_GGGG(y0, y1, y2, .(x1, x2), member1_out_ag(.(y0, .(x0, [])), y2)) -> U3_GGGG(y0, y1, y2, .(x1, x2), x0, U5_gg(x0, x1, x2, member_in_gg(x0, x2)))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(105) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U3_GGGG(X, Z, Edges, Visited, Y, member_out_gg(Y, Visited)) -> REACH_IN_GGGG(Y, Z, Edges, .(Y, Visited)) we obtained the following new rules [LPAR04]:

   (U3_GGGG(z0, z1, z2, .(z3, z4), z3, member_out_gg(z3, .(z3, z4))) -> REACH_IN_GGGG(z3, z1, z2, .(z3, .(z3, z4))),U3_GGGG(z0, z1, z2, .(z3, z4), z3, member_out_gg(z3, .(z3, z4))) -> REACH_IN_GGGG(z3, z1, z2, .(z3, .(z3, z4))))
   (U3_GGGG(z0, z1, z2, .(z3, z4), z5, member_out_gg(z5, .(z3, z4))) -> REACH_IN_GGGG(z5, z1, z2, .(z5, .(z3, z4))),U3_GGGG(z0, z1, z2, .(z3, z4), z5, member_out_gg(z5, .(z3, z4))) -> REACH_IN_GGGG(z5, z1, z2, .(z5, .(z3, z4))))


----------------------------------------

(106)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y0, y1, .(x0, x1), y3, member1_out_ag(x0, .(x0, x1)))
   REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y0, y1, .(x0, x1), y3, U6_ag(x0, x1, member1_in_ag(x1)))
   U2_GGGG(y0, y1, y2, .(x0, x1), member1_out_ag(.(y0, .(x0, [])), y2)) -> U3_GGGG(y0, y1, y2, .(x0, x1), x0, member_out_gg(x0, .(x0, x1)))
   U2_GGGG(y0, y1, y2, .(x1, x2), member1_out_ag(.(y0, .(x0, [])), y2)) -> U3_GGGG(y0, y1, y2, .(x1, x2), x0, U5_gg(x0, x1, x2, member_in_gg(x0, x2)))
   U3_GGGG(z0, z1, z2, .(z3, z4), z3, member_out_gg(z3, .(z3, z4))) -> REACH_IN_GGGG(z3, z1, z2, .(z3, .(z3, z4)))
   U3_GGGG(z0, z1, z2, .(z3, z4), z5, member_out_gg(z5, .(z3, z4))) -> REACH_IN_GGGG(z5, z1, z2, .(z5, .(z3, z4)))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(107) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y0, y1, .(x0, x1), y3, member1_out_ag(x0, .(x0, x1))) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U2_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), member1_out_ag(x2, .(x2, x3))),REACH_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U2_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), member1_out_ag(x2, .(x2, x3))))
   (REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), member1_out_ag(x2, .(x2, x3))),REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), member1_out_ag(x2, .(x2, x3))))


----------------------------------------

(108)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y0, y1, .(x0, x1), y3, U6_ag(x0, x1, member1_in_ag(x1)))
   U2_GGGG(y0, y1, y2, .(x0, x1), member1_out_ag(.(y0, .(x0, [])), y2)) -> U3_GGGG(y0, y1, y2, .(x0, x1), x0, member_out_gg(x0, .(x0, x1)))
   U2_GGGG(y0, y1, y2, .(x1, x2), member1_out_ag(.(y0, .(x0, [])), y2)) -> U3_GGGG(y0, y1, y2, .(x1, x2), x0, U5_gg(x0, x1, x2, member_in_gg(x0, x2)))
   U3_GGGG(z0, z1, z2, .(z3, z4), z3, member_out_gg(z3, .(z3, z4))) -> REACH_IN_GGGG(z3, z1, z2, .(z3, .(z3, z4)))
   U3_GGGG(z0, z1, z2, .(z3, z4), z5, member_out_gg(z5, .(z3, z4))) -> REACH_IN_GGGG(z5, z1, z2, .(z5, .(z3, z4)))
   REACH_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U2_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), member1_out_ag(x2, .(x2, x3)))
   REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), member1_out_ag(x2, .(x2, x3)))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(109) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule REACH_IN_GGGG(y0, y1, .(x0, x1), y3) -> U2_GGGG(y0, y1, .(x0, x1), y3, U6_ag(x0, x1, member1_in_ag(x1))) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U2_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3))),REACH_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U2_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3))))
   (REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3))),REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3))))


----------------------------------------

(110)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(y0, y1, y2, .(x0, x1), member1_out_ag(.(y0, .(x0, [])), y2)) -> U3_GGGG(y0, y1, y2, .(x0, x1), x0, member_out_gg(x0, .(x0, x1)))
   U2_GGGG(y0, y1, y2, .(x1, x2), member1_out_ag(.(y0, .(x0, [])), y2)) -> U3_GGGG(y0, y1, y2, .(x1, x2), x0, U5_gg(x0, x1, x2, member_in_gg(x0, x2)))
   U3_GGGG(z0, z1, z2, .(z3, z4), z3, member_out_gg(z3, .(z3, z4))) -> REACH_IN_GGGG(z3, z1, z2, .(z3, .(z3, z4)))
   U3_GGGG(z0, z1, z2, .(z3, z4), z5, member_out_gg(z5, .(z3, z4))) -> REACH_IN_GGGG(z5, z1, z2, .(z5, .(z3, z4)))
   REACH_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U2_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), member1_out_ag(x2, .(x2, x3)))
   REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), member1_out_ag(x2, .(x2, x3)))
   REACH_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U2_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3)))
   REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3)))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(111) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(y0, y1, y2, .(x0, x1), member1_out_ag(.(y0, .(x0, [])), y2)) -> U3_GGGG(y0, y1, y2, .(x0, x1), x0, member_out_gg(x0, .(x0, x1))) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))))
   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))))
   (U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))),U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))))
   (U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))),U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))))


----------------------------------------

(112)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(y0, y1, y2, .(x1, x2), member1_out_ag(.(y0, .(x0, [])), y2)) -> U3_GGGG(y0, y1, y2, .(x1, x2), x0, U5_gg(x0, x1, x2, member_in_gg(x0, x2)))
   U3_GGGG(z0, z1, z2, .(z3, z4), z3, member_out_gg(z3, .(z3, z4))) -> REACH_IN_GGGG(z3, z1, z2, .(z3, .(z3, z4)))
   U3_GGGG(z0, z1, z2, .(z3, z4), z5, member_out_gg(z5, .(z3, z4))) -> REACH_IN_GGGG(z5, z1, z2, .(z5, .(z3, z4)))
   REACH_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U2_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), member1_out_ag(x2, .(x2, x3)))
   REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), member1_out_ag(x2, .(x2, x3)))
   REACH_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U2_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3)))
   REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3)))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(113) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(y0, y1, y2, .(x1, x2), member1_out_ag(.(y0, .(x0, [])), y2)) -> U3_GGGG(y0, y1, y2, .(x1, x2), x0, U5_gg(x0, x1, x2, member_in_gg(x0, x2))) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4)))),U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4)))))
   (U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5)))),U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5)))))
   (U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4)))),U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4)))))
   (U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5)))),U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5)))))


----------------------------------------

(114)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GGGG(z0, z1, z2, .(z3, z4), z3, member_out_gg(z3, .(z3, z4))) -> REACH_IN_GGGG(z3, z1, z2, .(z3, .(z3, z4)))
   U3_GGGG(z0, z1, z2, .(z3, z4), z5, member_out_gg(z5, .(z3, z4))) -> REACH_IN_GGGG(z5, z1, z2, .(z5, .(z3, z4)))
   REACH_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U2_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), member1_out_ag(x2, .(x2, x3)))
   REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), member1_out_ag(x2, .(x2, x3)))
   REACH_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U2_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3)))
   REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3)))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(115) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U3_GGGG(z0, z1, z2, .(z3, z4), z3, member_out_gg(z3, .(z3, z4))) -> REACH_IN_GGGG(z3, z1, z2, .(z3, .(z3, z4))) we obtained the following new rules [LPAR04]:

   (U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))),U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))))
   (U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))),U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))))
   (U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))),U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))))
   (U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))),U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))))


----------------------------------------

(116)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GGGG(z0, z1, z2, .(z3, z4), z5, member_out_gg(z5, .(z3, z4))) -> REACH_IN_GGGG(z5, z1, z2, .(z5, .(z3, z4)))
   REACH_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U2_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), member1_out_ag(x2, .(x2, x3)))
   REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), member1_out_ag(x2, .(x2, x3)))
   REACH_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U2_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3)))
   REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3)))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(117) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U3_GGGG(z0, z1, z2, .(z3, z4), z5, member_out_gg(z5, .(z3, z4))) -> REACH_IN_GGGG(z5, z1, z2, .(z5, .(z3, z4))) we obtained the following new rules [LPAR04]:

   (U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))),U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))))
   (U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))),U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))))
   (U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))),U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))))
   (U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))),U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))))
   (U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, member_out_gg(z2, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))),U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, member_out_gg(z2, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))))
   (U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, member_out_gg(z2, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))),U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, member_out_gg(z2, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))))
   (U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, member_out_gg(z5, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))),U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, member_out_gg(z5, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))))
   (U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, member_out_gg(z6, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))),U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, member_out_gg(z6, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))))


----------------------------------------

(118)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U2_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), member1_out_ag(x2, .(x2, x3)))
   REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), member1_out_ag(x2, .(x2, x3)))
   REACH_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U2_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3)))
   REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3)))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, member_out_gg(z2, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, member_out_gg(z2, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, member_out_gg(z5, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, member_out_gg(z6, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(119) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule REACH_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U2_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), member1_out_ag(x2, .(x2, x3))) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))),REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))))
   (REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))),REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))))
   (REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3))),REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3))))
   (REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3))),REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3))))


----------------------------------------

(120)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), member1_out_ag(x2, .(x2, x3)))
   REACH_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U2_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3)))
   REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3)))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, member_out_gg(z2, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, member_out_gg(z2, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, member_out_gg(z5, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, member_out_gg(z6, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(121) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), member1_out_ag(x2, .(x2, x3))) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))),REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))))
   (REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))),REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))))
   (REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3))),REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3))))
   (REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3))),REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3))))
   (REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3))),REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3))))
   (REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3))),REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3))))
   (REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3))),REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3))))
   (REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3))),REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3))))


----------------------------------------

(122)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U2_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3)))
   REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3)))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, member_out_gg(z2, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, member_out_gg(z2, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, member_out_gg(z5, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, member_out_gg(z6, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(123) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule REACH_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U2_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3))) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2))),REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2))))
   (REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2))),REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2))))
   (REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3))),REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3))))
   (REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3))),REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3))))


----------------------------------------

(124)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3)))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, member_out_gg(z2, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, member_out_gg(z2, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, member_out_gg(z5, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, member_out_gg(z6, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(125) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule REACH_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U2_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U6_ag(x2, x3, member1_in_ag(x3))) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2))),REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2))))
   (REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2))),REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2))))
   (REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3))),REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3))))
   (REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3))),REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3))))
   (REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3))),REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3))))
   (REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3))),REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3))))
   (REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3))),REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3))))
   (REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3))),REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3))))


----------------------------------------

(126)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, member_out_gg(z2, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, member_out_gg(z2, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, member_out_gg(z5, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, member_out_gg(z6, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(127) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3))))))
   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4))))))


----------------------------------------

(128)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, member_out_gg(z2, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, member_out_gg(z2, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, member_out_gg(z5, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, member_out_gg(z6, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4)))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(129) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3))))))
   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4))))))
   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5))))))
   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6))))))


----------------------------------------

(130)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, member_out_gg(z2, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, member_out_gg(z2, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, member_out_gg(z5, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, member_out_gg(z6, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(131) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3))))))
   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4))))))
   (U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z4))))),U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z4))))))
   (U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z0, .(z4, z5))))),U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z0, .(z4, z5))))))


----------------------------------------

(132)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, member_out_gg(z2, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, member_out_gg(z2, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, member_out_gg(z5, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, member_out_gg(z6, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z0, .(z4, z5)))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(133) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3))))))
   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4))))))
   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5))))))
   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6))))))
   (U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z4))))),U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z4))))))
   (U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z0, .(z4, z5))))),U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z0, .(z4, z5))))))
   (U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), z0, member_out_gg(z0, .(z0, .(z2, .(z2, z4))))),U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), z0, member_out_gg(z0, .(z0, .(z2, .(z2, z4))))))
   (U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z2, .(z4, z5))))),U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z2, .(z4, z5))))))
   (U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5))))),U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5))))))
   (U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6))))),U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6))))))


----------------------------------------

(134)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, member_out_gg(z2, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, member_out_gg(z2, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, member_out_gg(z5, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, member_out_gg(z6, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), z0, member_out_gg(z0, .(z0, .(z2, .(z2, z4)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z2, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(135) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4)))) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U5_gg(z0, z0, .(z0, .(z0, z3)), member_in_gg(z0, .(z0, .(z0, z3))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U5_gg(z0, z0, .(z0, .(z0, z3)), member_in_gg(z0, .(z0, .(z0, z3))))))
   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U5_gg(z0, z0, .(z0, .(z3, z4)), member_in_gg(z0, .(z0, .(z3, z4))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U5_gg(z0, z0, .(z0, .(z3, z4)), member_in_gg(z0, .(z0, .(z3, z4))))))
   (U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(x2, z0, .(z0, .(z0, z4)), member_in_gg(x2, .(z0, .(z0, z4))))),U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(x2, z0, .(z0, .(z0, z4)), member_in_gg(x2, .(z0, .(z0, z4))))))
   (U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(x2, z0, .(z0, .(z4, z5)), member_in_gg(x2, .(z0, .(z4, z5))))),U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(x2, z0, .(z0, .(z4, z5)), member_in_gg(x2, .(z0, .(z4, z5))))))


----------------------------------------

(136)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, member_out_gg(z2, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, member_out_gg(z2, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, member_out_gg(z5, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, member_out_gg(z6, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), z0, member_out_gg(z0, .(z0, .(z2, .(z2, z4)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z2, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U5_gg(z0, z0, .(z0, .(z0, z3)), member_in_gg(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U5_gg(z0, z0, .(z0, .(z3, z4)), member_in_gg(z0, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(x2, z0, .(z0, .(z0, z4)), member_in_gg(x2, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(x2, z0, .(z0, .(z4, z5)), member_in_gg(x2, .(z0, .(z4, z5)))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(137) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5)))) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U5_gg(z0, z0, .(z0, .(z0, z3)), member_in_gg(z0, .(z0, .(z0, z3))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U5_gg(z0, z0, .(z0, .(z0, z3)), member_in_gg(z0, .(z0, .(z0, z3))))))
   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U5_gg(z0, z0, .(z0, .(z3, z4)), member_in_gg(z0, .(z0, .(z3, z4))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U5_gg(z0, z0, .(z0, .(z3, z4)), member_in_gg(z0, .(z0, .(z3, z4))))))
   (U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(x2, z0, .(z0, .(z0, z4)), member_in_gg(x2, .(z0, .(z0, z4))))),U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(x2, z0, .(z0, .(z0, z4)), member_in_gg(x2, .(z0, .(z0, z4))))))
   (U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(x2, z0, .(z0, .(z4, z5)), member_in_gg(x2, .(z0, .(z4, z5))))),U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(x2, z0, .(z0, .(z4, z5)), member_in_gg(x2, .(z0, .(z4, z5))))))
   (U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(x2, z0, .(z4, .(z4, z5)), member_in_gg(x2, .(z4, .(z4, z5))))),U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(x2, z0, .(z4, .(z4, z5)), member_in_gg(x2, .(z4, .(z4, z5))))))
   (U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(x2, z0, .(z4, .(z5, z6)), member_in_gg(x2, .(z4, .(z5, z6))))),U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(x2, z0, .(z4, .(z5, z6)), member_in_gg(x2, .(z4, .(z5, z6))))))


----------------------------------------

(138)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, member_out_gg(z2, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, member_out_gg(z2, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, member_out_gg(z5, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, member_out_gg(z6, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), z0, member_out_gg(z0, .(z0, .(z2, .(z2, z4)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z2, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U5_gg(z0, z0, .(z0, .(z0, z3)), member_in_gg(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U5_gg(z0, z0, .(z0, .(z3, z4)), member_in_gg(z0, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(x2, z0, .(z0, .(z0, z4)), member_in_gg(x2, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(x2, z0, .(z0, .(z4, z5)), member_in_gg(x2, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(x2, z0, .(z4, .(z4, z5)), member_in_gg(x2, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(x2, z0, .(z4, .(z5, z6)), member_in_gg(x2, .(z4, .(z5, z6)))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(139) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U5_gg(x5, z0, .(z0, z4), member_in_gg(x5, .(z0, z4)))) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U5_gg(z0, z0, .(z0, .(z0, z3)), member_in_gg(z0, .(z0, .(z0, z3))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U5_gg(z0, z0, .(z0, .(z0, z3)), member_in_gg(z0, .(z0, .(z0, z3))))))
   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U5_gg(z0, z0, .(z0, .(z3, z4)), member_in_gg(z0, .(z0, .(z3, z4))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U5_gg(z0, z0, .(z0, .(z3, z4)), member_in_gg(z0, .(z0, .(z3, z4))))))
   (U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, .(z0, z4))), x5, U5_gg(x5, z0, .(z0, .(z0, z4)), member_in_gg(x5, .(z0, .(z0, z4))))),U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(x2, z0, .(z0, .(z0, z4)), member_in_gg(x2, .(z0, .(z0, z4))))))
   (U2_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(x5, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x5, [])), z3), .(z0, .(z0, .(z4, z5))), x5, U5_gg(x5, z0, .(z0, .(z4, z5)), member_in_gg(x5, .(z0, .(z4, z5))))),U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(x2, z0, .(z0, .(z4, z5)), member_in_gg(x2, .(z0, .(z4, z5))))))
   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), x5, U5_gg(x5, z0, .(z0, .(z0, z3)), member_in_gg(x5, .(z0, .(z0, z3))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), x5, U5_gg(x5, z0, .(z0, .(z0, z3)), member_in_gg(x5, .(z0, .(z0, z3))))))
   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), x5, U5_gg(x5, z0, .(z0, .(z3, z4)), member_in_gg(x5, .(z0, .(z3, z4))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), x5, U5_gg(x5, z0, .(z0, .(z3, z4)), member_in_gg(x5, .(z0, .(z3, z4))))))
   (U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x5, U5_gg(x5, z0, .(z0, .(z0, z4)), member_in_gg(x5, .(z0, .(z0, z4))))),U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x5, U5_gg(x5, z0, .(z0, .(z0, z4)), member_in_gg(x5, .(z0, .(z0, z4))))))
   (U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x5, U5_gg(x5, z0, .(z0, .(z4, z5)), member_in_gg(x5, .(z0, .(z4, z5))))),U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x5, U5_gg(x5, z0, .(z0, .(z4, z5)), member_in_gg(x5, .(z0, .(z4, z5))))))


----------------------------------------

(140)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, member_out_gg(z2, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, member_out_gg(z2, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, member_out_gg(z5, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, member_out_gg(z6, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), z0, member_out_gg(z0, .(z0, .(z2, .(z2, z4)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z2, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U5_gg(z0, z0, .(z0, .(z0, z3)), member_in_gg(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U5_gg(z0, z0, .(z0, .(z3, z4)), member_in_gg(z0, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(x2, z0, .(z0, .(z0, z4)), member_in_gg(x2, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(x2, z0, .(z0, .(z4, z5)), member_in_gg(x2, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(x2, z0, .(z4, .(z4, z5)), member_in_gg(x2, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(x2, z0, .(z4, .(z5, z6)), member_in_gg(x2, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), x5, U5_gg(x5, z0, .(z0, .(z0, z3)), member_in_gg(x5, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), x5, U5_gg(x5, z0, .(z0, .(z3, z4)), member_in_gg(x5, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x5, U5_gg(x5, z0, .(z0, .(z0, z4)), member_in_gg(x5, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x5, U5_gg(x5, z0, .(z0, .(z4, z5)), member_in_gg(x5, .(z0, .(z4, z5)))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(141) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U5_gg(x5, z0, .(z4, z5), member_in_gg(x5, .(z4, z5)))) we obtained the following new rules [LPAR04]:

   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U5_gg(z0, z0, .(z0, .(z0, z3)), member_in_gg(z0, .(z0, .(z0, z3))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U5_gg(z0, z0, .(z0, .(z0, z3)), member_in_gg(z0, .(z0, .(z0, z3))))))
   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U5_gg(z0, z0, .(z0, .(z3, z4)), member_in_gg(z0, .(z0, .(z3, z4))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U5_gg(z0, z0, .(z0, .(z3, z4)), member_in_gg(z0, .(z0, .(z3, z4))))))
   (U2_GGGG(z0, z1, .(.(z0, .(x6, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x6, [])), .(.(z0, .(x6, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x6, [])), z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(x6, z0, .(z0, .(z0, z4)), member_in_gg(x6, .(z0, .(z0, z4))))),U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(x2, z0, .(z0, .(z0, z4)), member_in_gg(x2, .(z0, .(z0, z4))))))
   (U2_GGGG(z0, z1, .(.(z0, .(x6, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x6, [])), .(.(z0, .(x6, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x6, [])), z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(x6, z0, .(z0, .(z4, z5)), member_in_gg(x6, .(z0, .(z4, z5))))),U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(x2, z0, .(z0, .(z4, z5)), member_in_gg(x2, .(z0, .(z4, z5))))))
   (U2_GGGG(z0, z1, .(.(z0, .(x6, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(x6, [])), .(.(z0, .(x6, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x6, [])), z3), .(z0, .(z4, .(z4, z5))), x6, U5_gg(x6, z0, .(z4, .(z4, z5)), member_in_gg(x6, .(z4, .(z4, z5))))),U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(x2, z0, .(z4, .(z4, z5)), member_in_gg(x2, .(z4, .(z4, z5))))))
   (U2_GGGG(z0, z1, .(.(z0, .(x6, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(x6, [])), .(.(z0, .(x6, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x6, [])), z3), .(z0, .(z4, .(z5, z6))), x6, U5_gg(x6, z0, .(z4, .(z5, z6)), member_in_gg(x6, .(z4, .(z5, z6))))),U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(x2, z0, .(z4, .(z5, z6)), member_in_gg(x2, .(z4, .(z5, z6))))))
   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(x6, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), x6, U5_gg(x6, z0, .(z0, .(z0, z3)), member_in_gg(x6, .(z0, .(z0, z3))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), x5, U5_gg(x5, z0, .(z0, .(z0, z3)), member_in_gg(x5, .(z0, .(z0, z3))))))
   (U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(x6, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), x6, U5_gg(x6, z0, .(z0, .(z3, z4)), member_in_gg(x6, .(z0, .(z3, z4))))),U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), x5, U5_gg(x5, z0, .(z0, .(z3, z4)), member_in_gg(x5, .(z0, .(z3, z4))))))
   (U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x6, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x6, U5_gg(x6, z0, .(z0, .(z0, z4)), member_in_gg(x6, .(z0, .(z0, z4))))),U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x5, U5_gg(x5, z0, .(z0, .(z0, z4)), member_in_gg(x5, .(z0, .(z0, z4))))))
   (U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x6, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x6, U5_gg(x6, z0, .(z0, .(z4, z5)), member_in_gg(x6, .(z0, .(z4, z5))))),U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x5, U5_gg(x5, z0, .(z0, .(z4, z5)), member_in_gg(x5, .(z0, .(z4, z5))))))
   (U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1_out_ag(.(z0, .(x6, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), x6, U5_gg(x6, z0, .(z2, .(z2, z4)), member_in_gg(x6, .(z2, .(z2, z4))))),U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1_out_ag(.(z0, .(x6, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), x6, U5_gg(x6, z0, .(z2, .(z2, z4)), member_in_gg(x6, .(z2, .(z2, z4))))))
   (U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1_out_ag(.(z0, .(x6, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), x6, U5_gg(x6, z0, .(z2, .(z4, z5)), member_in_gg(x6, .(z2, .(z4, z5))))),U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1_out_ag(.(z0, .(x6, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), x6, U5_gg(x6, z0, .(z2, .(z4, z5)), member_in_gg(x6, .(z2, .(z4, z5))))))
   (U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(x6, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), x6, U5_gg(x6, z0, .(z4, .(z4, z5)), member_in_gg(x6, .(z4, .(z4, z5))))),U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(x6, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), x6, U5_gg(x6, z0, .(z4, .(z4, z5)), member_in_gg(x6, .(z4, .(z4, z5))))))
   (U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(x6, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), x6, U5_gg(x6, z0, .(z4, .(z5, z6)), member_in_gg(x6, .(z4, .(z5, z6))))),U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(x6, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), x6, U5_gg(x6, z0, .(z4, .(z5, z6)), member_in_gg(x6, .(z4, .(z5, z6))))))


----------------------------------------

(142)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, member_out_gg(z2, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, member_out_gg(z2, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, member_out_gg(z5, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, member_out_gg(z6, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), z0, member_out_gg(z0, .(z0, .(z2, .(z2, z4)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z2, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U5_gg(z0, z0, .(z0, .(z0, z3)), member_in_gg(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U5_gg(z0, z0, .(z0, .(z3, z4)), member_in_gg(z0, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(x2, z0, .(z0, .(z0, z4)), member_in_gg(x2, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(x2, z0, .(z0, .(z4, z5)), member_in_gg(x2, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(x2, z0, .(z4, .(z4, z5)), member_in_gg(x2, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(x2, z0, .(z4, .(z5, z6)), member_in_gg(x2, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), x5, U5_gg(x5, z0, .(z0, .(z0, z3)), member_in_gg(x5, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), x5, U5_gg(x5, z0, .(z0, .(z3, z4)), member_in_gg(x5, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x5, U5_gg(x5, z0, .(z0, .(z0, z4)), member_in_gg(x5, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x5, U5_gg(x5, z0, .(z0, .(z4, z5)), member_in_gg(x5, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1_out_ag(.(z0, .(x6, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), x6, U5_gg(x6, z0, .(z2, .(z2, z4)), member_in_gg(x6, .(z2, .(z2, z4)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1_out_ag(.(z0, .(x6, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), x6, U5_gg(x6, z0, .(z2, .(z4, z5)), member_in_gg(x6, .(z2, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(x6, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), x6, U5_gg(x6, z0, .(z4, .(z4, z5)), member_in_gg(x6, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(x6, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), x6, U5_gg(x6, z0, .(z4, .(z5, z6)), member_in_gg(x6, .(z4, .(z5, z6)))))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(143) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3))) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x0, x4)))) -> U2_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x0, x4))), member1_out_ag(.(y_2, .(y_3, [])), .(.(y_2, .(y_3, [])), x3))),REACH_IN_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x0, x4)))) -> U2_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x0, x4))), member1_out_ag(.(y_2, .(y_3, [])), .(.(y_2, .(y_3, [])), x3))))


----------------------------------------

(144)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, member_out_gg(z2, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, member_out_gg(z2, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, member_out_gg(z5, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, member_out_gg(z6, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), z0, member_out_gg(z0, .(z0, .(z2, .(z2, z4)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z2, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U5_gg(z0, z0, .(z0, .(z0, z3)), member_in_gg(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U5_gg(z0, z0, .(z0, .(z3, z4)), member_in_gg(z0, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(x2, z0, .(z0, .(z0, z4)), member_in_gg(x2, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(x2, z0, .(z0, .(z4, z5)), member_in_gg(x2, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(x2, z0, .(z4, .(z4, z5)), member_in_gg(x2, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(x2, z0, .(z4, .(z5, z6)), member_in_gg(x2, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), x5, U5_gg(x5, z0, .(z0, .(z0, z3)), member_in_gg(x5, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), x5, U5_gg(x5, z0, .(z0, .(z3, z4)), member_in_gg(x5, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x5, U5_gg(x5, z0, .(z0, .(z0, z4)), member_in_gg(x5, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x5, U5_gg(x5, z0, .(z0, .(z4, z5)), member_in_gg(x5, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1_out_ag(.(z0, .(x6, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), x6, U5_gg(x6, z0, .(z2, .(z2, z4)), member_in_gg(x6, .(z2, .(z2, z4)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1_out_ag(.(z0, .(x6, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), x6, U5_gg(x6, z0, .(z2, .(z4, z5)), member_in_gg(x6, .(z2, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(x6, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), x6, U5_gg(x6, z0, .(z4, .(z4, z5)), member_in_gg(x6, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(x6, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), x6, U5_gg(x6, z0, .(z4, .(z5, z6)), member_in_gg(x6, .(z4, .(z5, z6)))))
   REACH_IN_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x0, x4)))) -> U2_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x0, x4))), member1_out_ag(.(y_2, .(y_3, [])), .(.(y_2, .(y_3, [])), x3)))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(145) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3))) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x4, x5)))) -> U2_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x4, x5))), member1_out_ag(.(y_2, .(y_3, [])), .(.(y_2, .(y_3, [])), x3))),REACH_IN_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x4, x5)))) -> U2_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x4, x5))), member1_out_ag(.(y_2, .(y_3, [])), .(.(y_2, .(y_3, [])), x3))))


----------------------------------------

(146)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, member_out_gg(z2, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, member_out_gg(z2, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, member_out_gg(z5, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, member_out_gg(z6, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), z0, member_out_gg(z0, .(z0, .(z2, .(z2, z4)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z2, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U5_gg(z0, z0, .(z0, .(z0, z3)), member_in_gg(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U5_gg(z0, z0, .(z0, .(z3, z4)), member_in_gg(z0, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(x2, z0, .(z0, .(z0, z4)), member_in_gg(x2, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(x2, z0, .(z0, .(z4, z5)), member_in_gg(x2, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(x2, z0, .(z4, .(z4, z5)), member_in_gg(x2, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(x2, z0, .(z4, .(z5, z6)), member_in_gg(x2, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), x5, U5_gg(x5, z0, .(z0, .(z0, z3)), member_in_gg(x5, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), x5, U5_gg(x5, z0, .(z0, .(z3, z4)), member_in_gg(x5, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x5, U5_gg(x5, z0, .(z0, .(z0, z4)), member_in_gg(x5, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x5, U5_gg(x5, z0, .(z0, .(z4, z5)), member_in_gg(x5, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1_out_ag(.(z0, .(x6, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), x6, U5_gg(x6, z0, .(z2, .(z2, z4)), member_in_gg(x6, .(z2, .(z2, z4)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1_out_ag(.(z0, .(x6, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), x6, U5_gg(x6, z0, .(z2, .(z4, z5)), member_in_gg(x6, .(z2, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(x6, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), x6, U5_gg(x6, z0, .(z4, .(z4, z5)), member_in_gg(x6, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(x6, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), x6, U5_gg(x6, z0, .(z4, .(z5, z6)), member_in_gg(x6, .(z4, .(z5, z6)))))
   REACH_IN_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x0, x4)))) -> U2_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x0, x4))), member1_out_ag(.(y_2, .(y_3, [])), .(.(y_2, .(y_3, [])), x3)))
   REACH_IN_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x4, x5)))) -> U2_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x4, x5))), member1_out_ag(.(y_2, .(y_3, [])), .(.(y_2, .(y_3, [])), x3)))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(147) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), member1_out_ag(z2, .(z2, z3))) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x4, .(x4, x5)))) -> U2_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x4, .(x4, x5))), member1_out_ag(.(y_2, .(y_3, [])), .(.(y_2, .(y_3, [])), x3))),REACH_IN_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x4, .(x4, x5)))) -> U2_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x4, .(x4, x5))), member1_out_ag(.(y_2, .(y_3, [])), .(.(y_2, .(y_3, [])), x3))))


----------------------------------------

(148)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, member_out_gg(z2, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, member_out_gg(z2, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, member_out_gg(z5, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, member_out_gg(z6, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), z0, member_out_gg(z0, .(z0, .(z2, .(z2, z4)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z2, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U5_gg(z0, z0, .(z0, .(z0, z3)), member_in_gg(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U5_gg(z0, z0, .(z0, .(z3, z4)), member_in_gg(z0, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(x2, z0, .(z0, .(z0, z4)), member_in_gg(x2, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(x2, z0, .(z0, .(z4, z5)), member_in_gg(x2, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(x2, z0, .(z4, .(z4, z5)), member_in_gg(x2, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(x2, z0, .(z4, .(z5, z6)), member_in_gg(x2, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), x5, U5_gg(x5, z0, .(z0, .(z0, z3)), member_in_gg(x5, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), x5, U5_gg(x5, z0, .(z0, .(z3, z4)), member_in_gg(x5, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x5, U5_gg(x5, z0, .(z0, .(z0, z4)), member_in_gg(x5, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x5, U5_gg(x5, z0, .(z0, .(z4, z5)), member_in_gg(x5, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1_out_ag(.(z0, .(x6, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), x6, U5_gg(x6, z0, .(z2, .(z2, z4)), member_in_gg(x6, .(z2, .(z2, z4)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1_out_ag(.(z0, .(x6, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), x6, U5_gg(x6, z0, .(z2, .(z4, z5)), member_in_gg(x6, .(z2, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(x6, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), x6, U5_gg(x6, z0, .(z4, .(z4, z5)), member_in_gg(x6, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(x6, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), x6, U5_gg(x6, z0, .(z4, .(z5, z6)), member_in_gg(x6, .(z4, .(z5, z6)))))
   REACH_IN_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x0, x4)))) -> U2_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x0, x4))), member1_out_ag(.(y_2, .(y_3, [])), .(.(y_2, .(y_3, [])), x3)))
   REACH_IN_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x4, x5)))) -> U2_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x4, x5))), member1_out_ag(.(y_2, .(y_3, [])), .(.(y_2, .(y_3, [])), x3)))
   REACH_IN_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x4, .(x4, x5)))) -> U2_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x4, .(x4, x5))), member1_out_ag(.(y_2, .(y_3, [])), .(.(y_2, .(y_3, [])), x3)))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(149) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), member1_out_ag(z2, .(z2, z3))) we obtained the following new rules [LPAR04]:

   (REACH_IN_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x4, .(x5, x6)))) -> U2_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x4, .(x5, x6))), member1_out_ag(.(y_2, .(y_3, [])), .(.(y_2, .(y_3, [])), x3))),REACH_IN_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x4, .(x5, x6)))) -> U2_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x4, .(x5, x6))), member1_out_ag(.(y_2, .(y_3, [])), .(.(y_2, .(y_3, [])), x3))))


----------------------------------------

(150)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, member_out_gg(z0, .(z0, .(z0, z3)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, member_out_gg(z0, .(z0, .(z3, z4)))) -> REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, member_out_gg(z0, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, member_out_gg(z0, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, member_out_gg(z2, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, member_out_gg(z2, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, member_out_gg(z5, .(z0, .(z0, z4)))) -> REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, member_out_gg(z6, .(z0, .(z4, z5)))) -> REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z2, [])), .(.(z0, .(z2, [])), z3)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U6_ag(.(z0, .(z0, [])), z2, member1_in_ag(z2)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U2_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U6_ag(.(z0, .(z2, [])), z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U2_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U6_ag(z2, z3, member1_in_ag(z3)))
   REACH_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U2_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U6_ag(z2, z3, member1_in_ag(z3)))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, member_out_gg(z0, .(z0, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), z0, member_out_gg(z0, .(z0, .(z2, .(z2, z4)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z2, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, member_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(z0, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, member_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U5_gg(z0, z0, .(z0, .(z0, z3)), member_in_gg(z0, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(z0, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U5_gg(z0, z0, .(z0, .(z3, z4)), member_in_gg(z0, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), x2, U5_gg(x2, z0, .(z0, .(z0, z4)), member_in_gg(x2, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), x2, U5_gg(x2, z0, .(z0, .(z4, z5)), member_in_gg(x2, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z4, z5))), x2, U5_gg(x2, z0, .(z4, .(z4, z5)), member_in_gg(x2, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(x2, [])), .(.(z0, .(x2, [])), z3))) -> U3_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z4, .(z5, z6))), x2, U5_gg(x2, z0, .(z4, .(z5, z6)), member_in_gg(x2, .(z4, .(z5, z6)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), x5, U5_gg(x5, z0, .(z0, .(z0, z3)), member_in_gg(x5, .(z0, .(z0, z3)))))
   U2_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1_out_ag(.(z0, .(x5, [])), .(.(z0, .(z0, [])), z2))) -> U3_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), x5, U5_gg(x5, z0, .(z0, .(z3, z4)), member_in_gg(x5, .(z0, .(z3, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x5, U5_gg(x5, z0, .(z0, .(z0, z4)), member_in_gg(x5, .(z0, .(z0, z4)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1_out_ag(.(z0, .(x5, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x5, U5_gg(x5, z0, .(z0, .(z4, z5)), member_in_gg(x5, .(z0, .(z4, z5)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1_out_ag(.(z0, .(x6, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), x6, U5_gg(x6, z0, .(z2, .(z2, z4)), member_in_gg(x6, .(z2, .(z2, z4)))))
   U2_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1_out_ag(.(z0, .(x6, [])), .(.(z2, .(z0, [])), z3))) -> U3_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), x6, U5_gg(x6, z0, .(z2, .(z4, z5)), member_in_gg(x6, .(z2, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1_out_ag(.(z0, .(x6, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), x6, U5_gg(x6, z0, .(z4, .(z4, z5)), member_in_gg(x6, .(z4, .(z4, z5)))))
   U2_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1_out_ag(.(z0, .(x6, [])), .(z2, z3))) -> U3_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), x6, U5_gg(x6, z0, .(z4, .(z5, z6)), member_in_gg(x6, .(z4, .(z5, z6)))))
   REACH_IN_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x0, x4)))) -> U2_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x0, x4))), member1_out_ag(.(y_2, .(y_3, [])), .(.(y_2, .(y_3, [])), x3)))
   REACH_IN_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x4, x5)))) -> U2_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x0, .(x4, x5))), member1_out_ag(.(y_2, .(y_3, [])), .(.(y_2, .(y_3, [])), x3)))
   REACH_IN_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x4, .(x4, x5)))) -> U2_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x4, .(x4, x5))), member1_out_ag(.(y_2, .(y_3, [])), .(.(y_2, .(y_3, [])), x3)))
   REACH_IN_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x4, .(x5, x6)))) -> U2_GGGG(x0, x1, .(.(y_2, .(y_3, [])), x3), .(x0, .(x4, .(x5, x6))), member1_out_ag(.(y_2, .(y_3, [])), .(.(y_2, .(y_3, [])), x3)))

The TRS R consists of the following rules:

   member1_in_ag(.(H, L)) -> member1_out_ag(H, .(H, L))
   member1_in_ag(.(H, L)) -> U6_ag(H, L, member1_in_ag(L))
   member_in_gg(H, .(H, L)) -> member_out_gg(H, .(H, L))
   member_in_gg(X, .(H, L)) -> U5_gg(X, H, L, member_in_gg(X, L))
   U6_ag(H, L, member1_out_ag(X, L)) -> member1_out_ag(X, .(H, L))
   U5_gg(X, H, L, member_out_gg(X, L)) -> member_out_gg(X, .(H, L))

The set Q consists of the following terms:

   member1_in_ag(x0)
   member_in_gg(x0, x1)
   U6_ag(x0, x1, x2)
   U5_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(151) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 5,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(reach X Y Edges Visited)",
                "(member (. X (. Y ([]))) Edges)"
            ],
            [
                "(reach X Z Edges Visited)",
                "(',' (member1 (. X (. Y ([]))) Edges) (',' (member Y Visited) (reach Y Z Edges (. Y Visited))))"
            ],
            [
                "(member H (. H L))",
                null
            ],
            [
                "(member X (. H L))",
                "(member X L)"
            ],
            [
                "(member1 H (. H L))",
                null
            ],
            [
                "(member1 X (. H L))",
                "(member1 X L)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "22": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(member (. T33 (. T34 ([]))) T35)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(member (. T33 (. T34 ([]))) T35)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T33",
                        "T34",
                        "T35"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "23": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(member (. T33 (. T34 ([]))) T35)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T33",
                        "T34",
                        "T35"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "24": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(member (. T33 (. T34 ([]))) T35)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T33",
                        "T34",
                        "T35"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "26": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "392": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member1 (. T128 (. X114 ([]))) T130)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T128",
                        "T130"
                    ],
                    "free": ["X114"],
                    "exprvars": []
                }
            },
            "350": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T100 T93) (reach T100 T91 T92 (. T100 T93)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T91",
                        "T92",
                        "T93",
                        "T100"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "351": {
                "goal": [
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(member1 (. T90 (. X75 ([]))) T92)"
                    },
                    {
                        "clause": 5,
                        "scope": 3,
                        "term": "(member1 (. T90 (. X75 ([]))) T92)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T90",
                        "T92"
                    ],
                    "free": ["X75"],
                    "exprvars": []
                }
            },
            "395": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "410": {
                "goal": [{
                    "clause": 3,
                    "scope": 4,
                    "term": "(member T100 T93)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T93",
                        "T100"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "411": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "412": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "358": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(member1 (. T90 (. X75 ([]))) T92)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T90",
                        "T92"
                    ],
                    "free": ["X75"],
                    "exprvars": []
                }
            },
            "413": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "359": {
                "goal": [{
                    "clause": 5,
                    "scope": 3,
                    "term": "(member1 (. T90 (. X75 ([]))) T92)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T90",
                        "T92"
                    ],
                    "free": ["X75"],
                    "exprvars": []
                }
            },
            "414": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T161 T163)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T161",
                        "T163"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "415": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "339": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member1 (. T90 (. X75 ([]))) T92) (',' (member X75 T93) (reach X75 T91 T92 (. X75 T93))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T90",
                        "T91",
                        "T92",
                        "T93"
                    ],
                    "free": ["X75"],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member (. T33 (. T34 ([]))) T35)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T33",
                        "T34",
                        "T35"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "360": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "361": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "362": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(reach T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(reach T1 T2 T3 T4)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(reach T1 T2 T3 T4)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "402": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T100 T93)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T93",
                        "T100"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(reach T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "403": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(reach T100 T91 T92 (. T100 T93))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T91",
                        "T92",
                        "T93",
                        "T100"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(reach T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "349": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member1 (. T90 (. X75 ([]))) T92)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T90",
                        "T92"
                    ],
                    "free": ["X75"],
                    "exprvars": []
                }
            },
            "406": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 4,
                        "term": "(member T100 T93)"
                    },
                    {
                        "clause": 3,
                        "scope": 4,
                        "term": "(member T100 T93)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T93",
                        "T100"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "41": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member (. T66 (. T67 ([]))) T69)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T66",
                        "T67",
                        "T69"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "409": {
                "goal": [{
                    "clause": 2,
                    "scope": 4,
                    "term": "(member T100 T93)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T93",
                        "T100"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "42": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 5,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 7,
                "label": "PARALLEL"
            },
            {
                "from": 6,
                "to": 8,
                "label": "PARALLEL"
            },
            {
                "from": 7,
                "to": 15,
                "label": "ONLY EVAL with clause\nreach(X25, X26, X27, X28) :- member(.(X25, .(X26, [])), X27).\nand substitutionT1 -> T33,\nX25 -> T33,\nT2 -> T34,\nX26 -> T34,\nT3 -> T35,\nX27 -> T35,\nT4 -> T36,\nX28 -> T36"
            },
            {
                "from": 8,
                "to": 339,
                "label": "ONLY EVAL with clause\nreach(X71, X72, X73, X74) :- ','(member1(.(X71, .(X75, [])), X73), ','(member(X75, X74), reach(X75, X72, X73, .(X75, X74)))).\nand substitutionT1 -> T90,\nX71 -> T90,\nT2 -> T91,\nX72 -> T91,\nT3 -> T92,\nX73 -> T92,\nT4 -> T93,\nX74 -> T93"
            },
            {
                "from": 15,
                "to": 22,
                "label": "CASE"
            },
            {
                "from": 22,
                "to": 23,
                "label": "PARALLEL"
            },
            {
                "from": 22,
                "to": 24,
                "label": "PARALLEL"
            },
            {
                "from": 23,
                "to": 25,
                "label": "EVAL with clause\nmember(X41, .(X41, X42)).\nand substitutionT33 -> T55,\nT34 -> T56,\nX41 -> .(T55, .(T56, [])),\nX42 -> T57,\nT35 -> .(.(T55, .(T56, [])), T57)"
            },
            {
                "from": 23,
                "to": 26,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 24,
                "to": 41,
                "label": "EVAL with clause\nmember(X49, .(X50, X51)) :- member(X49, X51).\nand substitutionT33 -> T66,\nT34 -> T67,\nX49 -> .(T66, .(T67, [])),\nX50 -> T68,\nX51 -> T69,\nT35 -> .(T68, T69)"
            },
            {
                "from": 24,
                "to": 42,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 25,
                "to": 27,
                "label": "SUCCESS"
            },
            {
                "from": 41,
                "to": 15,
                "label": "INSTANCE with matching:\nT33 -> T66\nT34 -> T67\nT35 -> T69"
            },
            {
                "from": 339,
                "to": 349,
                "label": "SPLIT 1"
            },
            {
                "from": 339,
                "to": 350,
                "label": "SPLIT 2\nnew knowledge:\nT90 is ground\nT100 is ground\nT92 is ground\nreplacements:X75 -> T100"
            },
            {
                "from": 349,
                "to": 351,
                "label": "CASE"
            },
            {
                "from": 350,
                "to": 402,
                "label": "SPLIT 1"
            },
            {
                "from": 350,
                "to": 403,
                "label": "SPLIT 2\nnew knowledge:\nT100 is ground\nT93 is ground"
            },
            {
                "from": 351,
                "to": 358,
                "label": "PARALLEL"
            },
            {
                "from": 351,
                "to": 359,
                "label": "PARALLEL"
            },
            {
                "from": 358,
                "to": 360,
                "label": "EVAL with clause\nmember1(X100, .(X100, X101)).\nand substitutionT90 -> T119,\nX75 -> T120,\nX100 -> .(T119, .(T120, [])),\nX102 -> T120,\nX101 -> T121,\nT92 -> .(.(T119, .(T120, [])), T121)"
            },
            {
                "from": 358,
                "to": 361,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 359,
                "to": 392,
                "label": "EVAL with clause\nmember1(X111, .(X112, X113)) :- member1(X111, X113).\nand substitutionT90 -> T128,\nX75 -> X114,\nX111 -> .(T128, .(X114, [])),\nX112 -> T129,\nX113 -> T130,\nT92 -> .(T129, T130)"
            },
            {
                "from": 359,
                "to": 395,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 360,
                "to": 362,
                "label": "SUCCESS"
            },
            {
                "from": 392,
                "to": 349,
                "label": "INSTANCE with matching:\nT90 -> T128\nX75 -> X114\nT92 -> T130"
            },
            {
                "from": 402,
                "to": 406,
                "label": "CASE"
            },
            {
                "from": 403,
                "to": 5,
                "label": "INSTANCE with matching:\nT1 -> T100\nT2 -> T91\nT3 -> T92\nT4 -> .(T100, T93)"
            },
            {
                "from": 406,
                "to": 409,
                "label": "PARALLEL"
            },
            {
                "from": 406,
                "to": 410,
                "label": "PARALLEL"
            },
            {
                "from": 409,
                "to": 411,
                "label": "EVAL with clause\nmember(X137, .(X137, X138)).\nand substitutionT100 -> T153,\nX137 -> T153,\nX138 -> T154,\nT93 -> .(T153, T154)"
            },
            {
                "from": 409,
                "to": 412,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 410,
                "to": 414,
                "label": "EVAL with clause\nmember(X145, .(X146, X147)) :- member(X145, X147).\nand substitutionT100 -> T161,\nX145 -> T161,\nX146 -> T162,\nX147 -> T163,\nT93 -> .(T162, T163)"
            },
            {
                "from": 410,
                "to": 415,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 411,
                "to": 413,
                "label": "SUCCESS"
            },
            {
                "from": 414,
                "to": 402,
                "label": "INSTANCE with matching:\nT100 -> T161\nT93 -> T163"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(152)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f5_in(T33, T34, T35, T36) -> U1(f15_in(T33, T34, T35), T33, T34, T35, T36)
   U1(f15_out1, T33, T34, T35, T36) -> f5_out1
   f5_in(T90, T91, T92, T93) -> U2(f339_in(T90, T92, T93, T91), T90, T91, T92, T93)
   U2(f339_out1(X75), T90, T91, T92, T93) -> f5_out1
   f15_in(T55, T56, .(.(T55, .(T56, [])), T57)) -> f15_out1
   f15_in(T66, T67, .(T68, T69)) -> U3(f15_in(T66, T67, T69), T66, T67, .(T68, T69))
   U3(f15_out1, T66, T67, .(T68, T69)) -> f15_out1
   f349_in(T119, .(.(T119, .(T120, [])), T121)) -> f349_out1(T120)
   f349_in(T128, .(T129, T130)) -> U4(f349_in(T128, T130), T128, .(T129, T130))
   U4(f349_out1(X114), T128, .(T129, T130)) -> f349_out1(X114)
   f402_in(T153, .(T153, T154)) -> f402_out1
   f402_in(T161, .(T162, T163)) -> U5(f402_in(T161, T163), T161, .(T162, T163))
   U5(f402_out1, T161, .(T162, T163)) -> f402_out1
   f339_in(T90, T92, T93, T91) -> U6(f349_in(T90, T92), T90, T92, T93, T91)
   U6(f349_out1(T100), T90, T92, T93, T91) -> U7(f350_in(T100, T93, T91, T92), T90, T92, T93, T91, T100)
   U7(f350_out1, T90, T92, T93, T91, T100) -> f339_out1(T100)
   f350_in(T100, T93, T91, T92) -> U8(f402_in(T100, T93), T100, T93, T91, T92)
   U8(f402_out1, T100, T93, T91, T92) -> U9(f5_in(T100, T91, T92, .(T100, T93)), T100, T93, T91, T92)
   U9(f5_out1, T100, T93, T91, T92) -> f350_out1

Q is empty.

----------------------------------------

(153) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(154)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F5_IN(T33, T34, T35, T36) -> U1^1(f15_in(T33, T34, T35), T33, T34, T35, T36)
   F5_IN(T33, T34, T35, T36) -> F15_IN(T33, T34, T35)
   F5_IN(T90, T91, T92, T93) -> U2^1(f339_in(T90, T92, T93, T91), T90, T91, T92, T93)
   F5_IN(T90, T91, T92, T93) -> F339_IN(T90, T92, T93, T91)
   F15_IN(T66, T67, .(T68, T69)) -> U3^1(f15_in(T66, T67, T69), T66, T67, .(T68, T69))
   F15_IN(T66, T67, .(T68, T69)) -> F15_IN(T66, T67, T69)
   F349_IN(T128, .(T129, T130)) -> U4^1(f349_in(T128, T130), T128, .(T129, T130))
   F349_IN(T128, .(T129, T130)) -> F349_IN(T128, T130)
   F402_IN(T161, .(T162, T163)) -> U5^1(f402_in(T161, T163), T161, .(T162, T163))
   F402_IN(T161, .(T162, T163)) -> F402_IN(T161, T163)
   F339_IN(T90, T92, T93, T91) -> U6^1(f349_in(T90, T92), T90, T92, T93, T91)
   F339_IN(T90, T92, T93, T91) -> F349_IN(T90, T92)
   U6^1(f349_out1(T100), T90, T92, T93, T91) -> U7^1(f350_in(T100, T93, T91, T92), T90, T92, T93, T91, T100)
   U6^1(f349_out1(T100), T90, T92, T93, T91) -> F350_IN(T100, T93, T91, T92)
   F350_IN(T100, T93, T91, T92) -> U8^1(f402_in(T100, T93), T100, T93, T91, T92)
   F350_IN(T100, T93, T91, T92) -> F402_IN(T100, T93)
   U8^1(f402_out1, T100, T93, T91, T92) -> U9^1(f5_in(T100, T91, T92, .(T100, T93)), T100, T93, T91, T92)
   U8^1(f402_out1, T100, T93, T91, T92) -> F5_IN(T100, T91, T92, .(T100, T93))

The TRS R consists of the following rules:

   f5_in(T33, T34, T35, T36) -> U1(f15_in(T33, T34, T35), T33, T34, T35, T36)
   U1(f15_out1, T33, T34, T35, T36) -> f5_out1
   f5_in(T90, T91, T92, T93) -> U2(f339_in(T90, T92, T93, T91), T90, T91, T92, T93)
   U2(f339_out1(X75), T90, T91, T92, T93) -> f5_out1
   f15_in(T55, T56, .(.(T55, .(T56, [])), T57)) -> f15_out1
   f15_in(T66, T67, .(T68, T69)) -> U3(f15_in(T66, T67, T69), T66, T67, .(T68, T69))
   U3(f15_out1, T66, T67, .(T68, T69)) -> f15_out1
   f349_in(T119, .(.(T119, .(T120, [])), T121)) -> f349_out1(T120)
   f349_in(T128, .(T129, T130)) -> U4(f349_in(T128, T130), T128, .(T129, T130))
   U4(f349_out1(X114), T128, .(T129, T130)) -> f349_out1(X114)
   f402_in(T153, .(T153, T154)) -> f402_out1
   f402_in(T161, .(T162, T163)) -> U5(f402_in(T161, T163), T161, .(T162, T163))
   U5(f402_out1, T161, .(T162, T163)) -> f402_out1
   f339_in(T90, T92, T93, T91) -> U6(f349_in(T90, T92), T90, T92, T93, T91)
   U6(f349_out1(T100), T90, T92, T93, T91) -> U7(f350_in(T100, T93, T91, T92), T90, T92, T93, T91, T100)
   U7(f350_out1, T90, T92, T93, T91, T100) -> f339_out1(T100)
   f350_in(T100, T93, T91, T92) -> U8(f402_in(T100, T93), T100, T93, T91, T92)
   U8(f402_out1, T100, T93, T91, T92) -> U9(f5_in(T100, T91, T92, .(T100, T93)), T100, T93, T91, T92)
   U9(f5_out1, T100, T93, T91, T92) -> f350_out1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(155) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 10 less nodes.
----------------------------------------

(156)
Complex Obligation (AND)

----------------------------------------

(157)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F402_IN(T161, .(T162, T163)) -> F402_IN(T161, T163)

The TRS R consists of the following rules:

   f5_in(T33, T34, T35, T36) -> U1(f15_in(T33, T34, T35), T33, T34, T35, T36)
   U1(f15_out1, T33, T34, T35, T36) -> f5_out1
   f5_in(T90, T91, T92, T93) -> U2(f339_in(T90, T92, T93, T91), T90, T91, T92, T93)
   U2(f339_out1(X75), T90, T91, T92, T93) -> f5_out1
   f15_in(T55, T56, .(.(T55, .(T56, [])), T57)) -> f15_out1
   f15_in(T66, T67, .(T68, T69)) -> U3(f15_in(T66, T67, T69), T66, T67, .(T68, T69))
   U3(f15_out1, T66, T67, .(T68, T69)) -> f15_out1
   f349_in(T119, .(.(T119, .(T120, [])), T121)) -> f349_out1(T120)
   f349_in(T128, .(T129, T130)) -> U4(f349_in(T128, T130), T128, .(T129, T130))
   U4(f349_out1(X114), T128, .(T129, T130)) -> f349_out1(X114)
   f402_in(T153, .(T153, T154)) -> f402_out1
   f402_in(T161, .(T162, T163)) -> U5(f402_in(T161, T163), T161, .(T162, T163))
   U5(f402_out1, T161, .(T162, T163)) -> f402_out1
   f339_in(T90, T92, T93, T91) -> U6(f349_in(T90, T92), T90, T92, T93, T91)
   U6(f349_out1(T100), T90, T92, T93, T91) -> U7(f350_in(T100, T93, T91, T92), T90, T92, T93, T91, T100)
   U7(f350_out1, T90, T92, T93, T91, T100) -> f339_out1(T100)
   f350_in(T100, T93, T91, T92) -> U8(f402_in(T100, T93), T100, T93, T91, T92)
   U8(f402_out1, T100, T93, T91, T92) -> U9(f5_in(T100, T91, T92, .(T100, T93)), T100, T93, T91, T92)
   U9(f5_out1, T100, T93, T91, T92) -> f350_out1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(158) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(159)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F402_IN(T161, .(T162, T163)) -> F402_IN(T161, T163)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(160) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F402_IN(T161, .(T162, T163)) -> F402_IN(T161, T163)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(161)
YES

----------------------------------------

(162)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F349_IN(T128, .(T129, T130)) -> F349_IN(T128, T130)

The TRS R consists of the following rules:

   f5_in(T33, T34, T35, T36) -> U1(f15_in(T33, T34, T35), T33, T34, T35, T36)
   U1(f15_out1, T33, T34, T35, T36) -> f5_out1
   f5_in(T90, T91, T92, T93) -> U2(f339_in(T90, T92, T93, T91), T90, T91, T92, T93)
   U2(f339_out1(X75), T90, T91, T92, T93) -> f5_out1
   f15_in(T55, T56, .(.(T55, .(T56, [])), T57)) -> f15_out1
   f15_in(T66, T67, .(T68, T69)) -> U3(f15_in(T66, T67, T69), T66, T67, .(T68, T69))
   U3(f15_out1, T66, T67, .(T68, T69)) -> f15_out1
   f349_in(T119, .(.(T119, .(T120, [])), T121)) -> f349_out1(T120)
   f349_in(T128, .(T129, T130)) -> U4(f349_in(T128, T130), T128, .(T129, T130))
   U4(f349_out1(X114), T128, .(T129, T130)) -> f349_out1(X114)
   f402_in(T153, .(T153, T154)) -> f402_out1
   f402_in(T161, .(T162, T163)) -> U5(f402_in(T161, T163), T161, .(T162, T163))
   U5(f402_out1, T161, .(T162, T163)) -> f402_out1
   f339_in(T90, T92, T93, T91) -> U6(f349_in(T90, T92), T90, T92, T93, T91)
   U6(f349_out1(T100), T90, T92, T93, T91) -> U7(f350_in(T100, T93, T91, T92), T90, T92, T93, T91, T100)
   U7(f350_out1, T90, T92, T93, T91, T100) -> f339_out1(T100)
   f350_in(T100, T93, T91, T92) -> U8(f402_in(T100, T93), T100, T93, T91, T92)
   U8(f402_out1, T100, T93, T91, T92) -> U9(f5_in(T100, T91, T92, .(T100, T93)), T100, T93, T91, T92)
   U9(f5_out1, T100, T93, T91, T92) -> f350_out1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(163) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(164)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F349_IN(T128, .(T129, T130)) -> F349_IN(T128, T130)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(165) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F349_IN(T128, .(T129, T130)) -> F349_IN(T128, T130)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(166)
YES

----------------------------------------

(167)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F15_IN(T66, T67, .(T68, T69)) -> F15_IN(T66, T67, T69)

The TRS R consists of the following rules:

   f5_in(T33, T34, T35, T36) -> U1(f15_in(T33, T34, T35), T33, T34, T35, T36)
   U1(f15_out1, T33, T34, T35, T36) -> f5_out1
   f5_in(T90, T91, T92, T93) -> U2(f339_in(T90, T92, T93, T91), T90, T91, T92, T93)
   U2(f339_out1(X75), T90, T91, T92, T93) -> f5_out1
   f15_in(T55, T56, .(.(T55, .(T56, [])), T57)) -> f15_out1
   f15_in(T66, T67, .(T68, T69)) -> U3(f15_in(T66, T67, T69), T66, T67, .(T68, T69))
   U3(f15_out1, T66, T67, .(T68, T69)) -> f15_out1
   f349_in(T119, .(.(T119, .(T120, [])), T121)) -> f349_out1(T120)
   f349_in(T128, .(T129, T130)) -> U4(f349_in(T128, T130), T128, .(T129, T130))
   U4(f349_out1(X114), T128, .(T129, T130)) -> f349_out1(X114)
   f402_in(T153, .(T153, T154)) -> f402_out1
   f402_in(T161, .(T162, T163)) -> U5(f402_in(T161, T163), T161, .(T162, T163))
   U5(f402_out1, T161, .(T162, T163)) -> f402_out1
   f339_in(T90, T92, T93, T91) -> U6(f349_in(T90, T92), T90, T92, T93, T91)
   U6(f349_out1(T100), T90, T92, T93, T91) -> U7(f350_in(T100, T93, T91, T92), T90, T92, T93, T91, T100)
   U7(f350_out1, T90, T92, T93, T91, T100) -> f339_out1(T100)
   f350_in(T100, T93, T91, T92) -> U8(f402_in(T100, T93), T100, T93, T91, T92)
   U8(f402_out1, T100, T93, T91, T92) -> U9(f5_in(T100, T91, T92, .(T100, T93)), T100, T93, T91, T92)
   U9(f5_out1, T100, T93, T91, T92) -> f350_out1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(168) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(169)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F15_IN(T66, T67, .(T68, T69)) -> F15_IN(T66, T67, T69)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(170) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F15_IN(T66, T67, .(T68, T69)) -> F15_IN(T66, T67, T69)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(171)
YES

----------------------------------------

(172)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F5_IN(T90, T91, T92, T93) -> F339_IN(T90, T92, T93, T91)
   F339_IN(T90, T92, T93, T91) -> U6^1(f349_in(T90, T92), T90, T92, T93, T91)
   U6^1(f349_out1(T100), T90, T92, T93, T91) -> F350_IN(T100, T93, T91, T92)
   F350_IN(T100, T93, T91, T92) -> U8^1(f402_in(T100, T93), T100, T93, T91, T92)
   U8^1(f402_out1, T100, T93, T91, T92) -> F5_IN(T100, T91, T92, .(T100, T93))

The TRS R consists of the following rules:

   f5_in(T33, T34, T35, T36) -> U1(f15_in(T33, T34, T35), T33, T34, T35, T36)
   U1(f15_out1, T33, T34, T35, T36) -> f5_out1
   f5_in(T90, T91, T92, T93) -> U2(f339_in(T90, T92, T93, T91), T90, T91, T92, T93)
   U2(f339_out1(X75), T90, T91, T92, T93) -> f5_out1
   f15_in(T55, T56, .(.(T55, .(T56, [])), T57)) -> f15_out1
   f15_in(T66, T67, .(T68, T69)) -> U3(f15_in(T66, T67, T69), T66, T67, .(T68, T69))
   U3(f15_out1, T66, T67, .(T68, T69)) -> f15_out1
   f349_in(T119, .(.(T119, .(T120, [])), T121)) -> f349_out1(T120)
   f349_in(T128, .(T129, T130)) -> U4(f349_in(T128, T130), T128, .(T129, T130))
   U4(f349_out1(X114), T128, .(T129, T130)) -> f349_out1(X114)
   f402_in(T153, .(T153, T154)) -> f402_out1
   f402_in(T161, .(T162, T163)) -> U5(f402_in(T161, T163), T161, .(T162, T163))
   U5(f402_out1, T161, .(T162, T163)) -> f402_out1
   f339_in(T90, T92, T93, T91) -> U6(f349_in(T90, T92), T90, T92, T93, T91)
   U6(f349_out1(T100), T90, T92, T93, T91) -> U7(f350_in(T100, T93, T91, T92), T90, T92, T93, T91, T100)
   U7(f350_out1, T90, T92, T93, T91, T100) -> f339_out1(T100)
   f350_in(T100, T93, T91, T92) -> U8(f402_in(T100, T93), T100, T93, T91, T92)
   U8(f402_out1, T100, T93, T91, T92) -> U9(f5_in(T100, T91, T92, .(T100, T93)), T100, T93, T91, T92)
   U9(f5_out1, T100, T93, T91, T92) -> f350_out1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(173) NonLoopProof (COMPLETE)
By Theorem 8 [NONLOOP] we deduce infiniteness of the QDP.
We apply the theorem with m = 1, b = 0, 
?' = [ ], and ?' = [x1 / .(x2, x1)] on the rule
U8^1(f402_out1, x2, .(x2, x1), x0, .(.(x2, .(x2, [])), x3))[ ]^n[ ] -> U8^1(f402_out1, x2, .(x2, x1), x0, .(.(x2, .(x2, [])), x3))[ ]^n[x1 / .(x2, x1)]
This rule is correct for the QDP as the following derivation shows:

U8^1(f402_out1, x2, .(x2, x1), x0, .(.(x2, .(x2, [])), x3))[ ]^n[ ] -> U8^1(f402_out1, x2, .(x2, x1), x0, .(.(x2, .(x2, [])), x3))[ ]^n[x1 / .(x2, x1)]
    by Equivalency by Simplifying Mu with mu1: [x1 / .(x2, x1)] mu2: [ ]
    intermediate steps: Instantiate mu - Instantiation
    U8^1(f402_out1, x1, x0, x3, .(.(x1, .(x1, [])), y2))[ ]^n[ ] -> U8^1(f402_out1, x1, .(x1, x0), x3, .(.(x1, .(x1, [])), y2))[ ]^n[ ]
        by Narrowing at position: []
        intermediate steps: Instantiation - Instantiation - Instantiation
        U8^1(f402_out1, T100, T93, T91, T92)[ ]^n[ ] -> F5_IN(T100, T91, T92, .(T100, T93))[ ]^n[ ]
            by Rule from TRS P

        intermediate steps: Instantiation - Instantiation - Instantiation - Instantiation - Instantiation - Instantiation
        F5_IN(x1, x0, .(.(x1, .(x4, [])), x2), .(x4, y0))[ ]^n[ ] -> U8^1(f402_out1, x4, .(x4, y0), x0, .(.(x1, .(x4, [])), x2))[ ]^n[ ]
            by Narrowing at position: [0]
            intermediate steps: Instantiation - Instantiation - Instantiation
            F5_IN(x3, x1, .(.(x3, .(x2, [])), x0), x4)[ ]^n[ ] -> U8^1(f402_in(x2, x4), x2, x4, x1, .(.(x3, .(x2, [])), x0))[ ]^n[ ]
                by Narrowing at position: []
                intermediate steps: Instantiation - Instantiation
                F5_IN(x4, x3, .(.(x4, .(x0, [])), x1), x2)[ ]^n[ ] -> F350_IN(x0, x2, x3, .(.(x4, .(x0, [])), x1))[ ]^n[ ]
                    by Narrowing at position: []
                    intermediate steps: Instantiation - Instantiation
                    F5_IN(x0, x3, .(.(x0, .(y0, [])), y1), x1)[ ]^n[ ] -> U6^1(f349_out1(y0), x0, .(.(x0, .(y0, [])), y1), x1, x3)[ ]^n[ ]
                        by Narrowing at position: [0]
                        intermediate steps: Instantiation - Instantiation - Instantiation
                        F5_IN(x0, x3, x2, x1)[ ]^n[ ] -> U6^1(f349_in(x0, x2), x0, x2, x1, x3)[ ]^n[ ]
                            by Narrowing at position: []
                            intermediate steps: Instantiation - Instantiation
                            F5_IN(T90, T91, T92, T93)[ ]^n[ ] -> F339_IN(T90, T92, T93, T91)[ ]^n[ ]
                                by Rule from TRS P

                            intermediate steps: Instantiation - Instantiation - Instantiation - Instantiation - Instantiation - Instantiation
                            F339_IN(T90, T92, T93, T91)[ ]^n[ ] -> U6^1(f349_in(T90, T92), T90, T92, T93, T91)[ ]^n[ ]
                                by Rule from TRS P

                        intermediate steps: Instantiation - Instantiation - Instantiation
                        f349_in(T119, .(.(T119, .(T120, [])), T121))[ ]^n[ ] -> f349_out1(T120)[ ]^n[ ]
                            by Rule from TRS R

                    intermediate steps: Instantiation - Instantiation - Instantiation - Instantiation - Instantiation - Instantiation - Instantiation
                    U6^1(f349_out1(T100), T90, T92, T93, T91)[ ]^n[ ] -> F350_IN(T100, T93, T91, T92)[ ]^n[ ]
                        by Rule from TRS P

                intermediate steps: Instantiation - Instantiation - Instantiation - Instantiation - Instantiation - Instantiation
                F350_IN(T100, T93, T91, T92)[ ]^n[ ] -> U8^1(f402_in(T100, T93), T100, T93, T91, T92)[ ]^n[ ]
                    by Rule from TRS P

            intermediate steps: Instantiation - Instantiation - Instantiation
            f402_in(T153, .(T153, T154))[ ]^n[ ] -> f402_out1[ ]^n[ ]
                by Rule from TRS R
----------------------------------------

(174)
NO

----------------------------------------

(175) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(reach X Y Edges Visited)",
                "(member (. X (. Y ([]))) Edges)"
            ],
            [
                "(reach X Z Edges Visited)",
                "(',' (member1 (. X (. Y ([]))) Edges) (',' (member Y Visited) (reach Y Z Edges (. Y Visited))))"
            ],
            [
                "(member H (. H L))",
                null
            ],
            [
                "(member X (. H L))",
                "(member X L)"
            ],
            [
                "(member1 H (. H L))",
                null
            ],
            [
                "(member1 X (. H L))",
                "(member1 X L)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "type": "Nodes",
            "370": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 5,
                        "term": "(member T111 T104)"
                    },
                    {
                        "clause": 3,
                        "scope": 5,
                        "term": "(member T111 T104)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T104",
                        "T111"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "371": {
                "goal": [{
                    "clause": 2,
                    "scope": 5,
                    "term": "(member T111 T104)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T104",
                        "T111"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "372": {
                "goal": [{
                    "clause": 3,
                    "scope": 5,
                    "term": "(member T111 T104)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T104",
                        "T111"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "373": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "330": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member (. T77 (. T78 ([]))) T80)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T77",
                        "T78",
                        "T80"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "374": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "298": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member (. T44 (. T45 ([]))) T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T44",
                        "T45",
                        "T47"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "331": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "375": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "299": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "332": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(reach T9 T10 T11 T12)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T9",
                        "T10",
                        "T11",
                        "T12"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "354": {
                "goal": [{
                    "clause": 4,
                    "scope": 4,
                    "term": "(member1 (. T101 (. X80 ([]))) T103)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T101",
                        "T103"
                    ],
                    "free": ["X80"],
                    "exprvars": []
                }
            },
            "376": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T172 T174)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T172",
                        "T174"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "355": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(member1 (. T101 (. X80 ([]))) T103)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T101",
                        "T103"
                    ],
                    "free": ["X80"],
                    "exprvars": []
                }
            },
            "377": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "312": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 3,
                        "term": "(member (. T44 (. T45 ([]))) T47)"
                    },
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(member (. T44 (. T45 ([]))) T47)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T44",
                        "T45",
                        "T47"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "334": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member1 (. T101 (. X80 ([]))) T103) (',' (member X80 T104) (reach X80 T102 T103 (. X80 T104))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T101",
                        "T102",
                        "T103",
                        "T104"
                    ],
                    "free": ["X80"],
                    "exprvars": []
                }
            },
            "313": {
                "goal": [{
                    "clause": 2,
                    "scope": 3,
                    "term": "(member (. T44 (. T45 ([]))) T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T44",
                        "T45",
                        "T47"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "335": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member1 (. T101 (. X80 ([]))) T103)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T101",
                        "T103"
                    ],
                    "free": ["X80"],
                    "exprvars": []
                }
            },
            "314": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(member (. T44 (. T45 ([]))) T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T44",
                        "T45",
                        "T47"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "336": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T111 T104) (reach T111 T102 T103 (. T111 T104)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T102",
                        "T103",
                        "T104",
                        "T111"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "315": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "316": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "317": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "11": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(member (. T9 (. T10 ([]))) T11)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(reach T9 T10 T11 T12)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T9",
                        "T10",
                        "T11",
                        "T12"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(member (. T9 (. T10 ([]))) T11)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(member (. T9 (. T10 ([]))) T11)"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(reach T9 T10 T11 T12)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T9",
                        "T10",
                        "T11",
                        "T12"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(member (. T9 (. T10 ([]))) T11)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T9",
                        "T10",
                        "T11"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(member (. T9 (. T10 ([]))) T11)"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(reach T9 T10 T11 T12)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T9",
                        "T10",
                        "T11",
                        "T12"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "18": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "363": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "364": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "365": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(reach T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "366": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member1 (. T139 (. X119 ([]))) T141)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T139",
                        "T141"
                    ],
                    "free": ["X119"],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(reach T1 T2 T3 T4)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(reach T1 T2 T3 T4)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "367": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "368": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T111 T104)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T104",
                        "T111"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "369": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(reach T111 T102 T103 (. T111 T104))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T102",
                        "T103",
                        "T104",
                        "T111"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "348": {
                "goal": [
                    {
                        "clause": 4,
                        "scope": 4,
                        "term": "(member1 (. T101 (. X80 ([]))) T103)"
                    },
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(member1 (. T101 (. X80 ([]))) T103)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T101",
                        "T103"
                    ],
                    "free": ["X80"],
                    "exprvars": []
                }
            },
            "20": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(member (. T9 (. T10 ([]))) T11)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T9",
                        "T10",
                        "T11"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "21": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(reach T9 T10 T11 T12)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T9",
                        "T10",
                        "T11",
                        "T12"
                    ],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 11,
                "label": "ONLY EVAL with clause\nreach(X5, X6, X7, X8) :- member(.(X5, .(X6, [])), X7).\nand substitutionT1 -> T9,\nX5 -> T9,\nT2 -> T10,\nX6 -> T10,\nT3 -> T11,\nX7 -> T11,\nT4 -> T12,\nX8 -> T12"
            },
            {
                "from": 11,
                "to": 12,
                "label": "CASE"
            },
            {
                "from": 12,
                "to": 13,
                "label": "PARALLEL"
            },
            {
                "from": 12,
                "to": 14,
                "label": "PARALLEL"
            },
            {
                "from": 13,
                "to": 17,
                "label": "EVAL with clause\nmember(X17, .(X17, X18)).\nand substitutionT9 -> T25,\nT10 -> T26,\nX17 -> .(T25, .(T26, [])),\nX18 -> T27,\nT11 -> .(.(T25, .(T26, [])), T27)"
            },
            {
                "from": 13,
                "to": 18,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 14,
                "to": 20,
                "label": "PARALLEL"
            },
            {
                "from": 14,
                "to": 21,
                "label": "PARALLEL"
            },
            {
                "from": 17,
                "to": 19,
                "label": "SUCCESS"
            },
            {
                "from": 20,
                "to": 298,
                "label": "EVAL with clause\nmember(X31, .(X32, X33)) :- member(X31, X33).\nand substitutionT9 -> T44,\nT10 -> T45,\nX31 -> .(T44, .(T45, [])),\nX32 -> T46,\nX33 -> T47,\nT11 -> .(T46, T47)"
            },
            {
                "from": 20,
                "to": 299,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 21,
                "to": 332,
                "label": "FAILURE"
            },
            {
                "from": 298,
                "to": 312,
                "label": "CASE"
            },
            {
                "from": 312,
                "to": 313,
                "label": "PARALLEL"
            },
            {
                "from": 312,
                "to": 314,
                "label": "PARALLEL"
            },
            {
                "from": 313,
                "to": 315,
                "label": "EVAL with clause\nmember(X46, .(X46, X47)).\nand substitutionT44 -> T66,\nT45 -> T67,\nX46 -> .(T66, .(T67, [])),\nX47 -> T68,\nT47 -> .(.(T66, .(T67, [])), T68)"
            },
            {
                "from": 313,
                "to": 316,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 314,
                "to": 330,
                "label": "EVAL with clause\nmember(X54, .(X55, X56)) :- member(X54, X56).\nand substitutionT44 -> T77,\nT45 -> T78,\nX54 -> .(T77, .(T78, [])),\nX55 -> T79,\nX56 -> T80,\nT47 -> .(T79, T80)"
            },
            {
                "from": 314,
                "to": 331,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 315,
                "to": 317,
                "label": "SUCCESS"
            },
            {
                "from": 330,
                "to": 298,
                "label": "INSTANCE with matching:\nT44 -> T77\nT45 -> T78\nT47 -> T80"
            },
            {
                "from": 332,
                "to": 334,
                "label": "ONLY EVAL with clause\nreach(X76, X77, X78, X79) :- ','(member1(.(X76, .(X80, [])), X78), ','(member(X80, X79), reach(X80, X77, X78, .(X80, X79)))).\nand substitutionT9 -> T101,\nX76 -> T101,\nT10 -> T102,\nX77 -> T102,\nT11 -> T103,\nX78 -> T103,\nT12 -> T104,\nX79 -> T104"
            },
            {
                "from": 334,
                "to": 335,
                "label": "SPLIT 1"
            },
            {
                "from": 334,
                "to": 336,
                "label": "SPLIT 2\nnew knowledge:\nT101 is ground\nT111 is ground\nT103 is ground\nreplacements:X80 -> T111"
            },
            {
                "from": 335,
                "to": 348,
                "label": "CASE"
            },
            {
                "from": 336,
                "to": 368,
                "label": "SPLIT 1"
            },
            {
                "from": 336,
                "to": 369,
                "label": "SPLIT 2\nnew knowledge:\nT111 is ground\nT104 is ground"
            },
            {
                "from": 348,
                "to": 354,
                "label": "PARALLEL"
            },
            {
                "from": 348,
                "to": 355,
                "label": "PARALLEL"
            },
            {
                "from": 354,
                "to": 363,
                "label": "EVAL with clause\nmember1(X105, .(X105, X106)).\nand substitutionT101 -> T130,\nX80 -> T131,\nX105 -> .(T130, .(T131, [])),\nX107 -> T131,\nX106 -> T132,\nT103 -> .(.(T130, .(T131, [])), T132)"
            },
            {
                "from": 354,
                "to": 364,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 355,
                "to": 366,
                "label": "EVAL with clause\nmember1(X116, .(X117, X118)) :- member1(X116, X118).\nand substitutionT101 -> T139,\nX80 -> X119,\nX116 -> .(T139, .(X119, [])),\nX117 -> T140,\nX118 -> T141,\nT103 -> .(T140, T141)"
            },
            {
                "from": 355,
                "to": 367,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 363,
                "to": 365,
                "label": "SUCCESS"
            },
            {
                "from": 366,
                "to": 335,
                "label": "INSTANCE with matching:\nT101 -> T139\nX80 -> X119\nT103 -> T141"
            },
            {
                "from": 368,
                "to": 370,
                "label": "CASE"
            },
            {
                "from": 369,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T111\nT2 -> T102\nT3 -> T103\nT4 -> .(T111, T104)"
            },
            {
                "from": 370,
                "to": 371,
                "label": "PARALLEL"
            },
            {
                "from": 370,
                "to": 372,
                "label": "PARALLEL"
            },
            {
                "from": 371,
                "to": 373,
                "label": "EVAL with clause\nmember(X142, .(X142, X143)).\nand substitutionT111 -> T164,\nX142 -> T164,\nX143 -> T165,\nT104 -> .(T164, T165)"
            },
            {
                "from": 371,
                "to": 374,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 372,
                "to": 376,
                "label": "EVAL with clause\nmember(X150, .(X151, X152)) :- member(X150, X152).\nand substitutionT111 -> T172,\nX150 -> T172,\nX151 -> T173,\nX152 -> T174,\nT104 -> .(T173, T174)"
            },
            {
                "from": 372,
                "to": 377,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 373,
                "to": 375,
                "label": "SUCCESS"
            },
            {
                "from": 376,
                "to": 368,
                "label": "INSTANCE with matching:\nT111 -> T172\nT104 -> T174"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(176)
Obligation:
Triples:

memberA(X1, X2, .(X3, X4)) :- memberA(X1, X2, X4).
member1B(X1, X2, .(X3, X4)) :- member1B(X1, X2, X4).
memberD(X1, .(X2, X3)) :- memberD(X1, X3).
reachC(X1, X2, .(X3, X4), X5) :- memberA(X1, X2, X4).
reachC(X1, X2, X3, X4) :- member1B(X1, X5, X3).
reachC(X1, X2, X3, X4) :- ','(member1cB(X1, X5, X3), memberD(X5, X4)).
reachC(X1, X2, X3, X4) :- ','(member1cB(X1, X5, X3), ','(membercD(X5, X4), reachC(X5, X2, X3, .(X5, X4)))).

Clauses:

membercA(X1, X2, .(.(X1, .(X2, [])), X3)).
membercA(X1, X2, .(X3, X4)) :- membercA(X1, X2, X4).
member1cB(X1, X2, .(.(X1, .(X2, [])), X3)).
member1cB(X1, X2, .(X3, X4)) :- member1cB(X1, X2, X4).
reachcC(X1, X2, .(.(X1, .(X2, [])), X3), X4).
reachcC(X1, X2, .(X3, X4), X5) :- membercA(X1, X2, X4).
reachcC(X1, X2, X3, X4) :- ','(member1cB(X1, X5, X3), ','(membercD(X5, X4), reachcC(X5, X2, X3, .(X5, X4)))).
membercD(X1, .(X1, X2)).
membercD(X1, .(X2, X3)) :- membercD(X1, X3).

Afs:

reachC(x1, x2, x3, x4)  =  reachC(x1, x2, x3, x4)


----------------------------------------

(177) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

reachC_in_4: (b,b,b,b)

memberA_in_3: (b,b,b)

member1B_in_3: (b,f,b)

member1cB_in_3: (b,f,b)

memberD_in_2: (b,b)

membercD_in_2: (b,b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   REACHC_IN_GGGG(X1, X2, .(X3, X4), X5) -> U4_GGGG(X1, X2, X3, X4, X5, memberA_in_ggg(X1, X2, X4))
   REACHC_IN_GGGG(X1, X2, .(X3, X4), X5) -> MEMBERA_IN_GGG(X1, X2, X4)
   MEMBERA_IN_GGG(X1, X2, .(X3, X4)) -> U1_GGG(X1, X2, X3, X4, memberA_in_ggg(X1, X2, X4))
   MEMBERA_IN_GGG(X1, X2, .(X3, X4)) -> MEMBERA_IN_GGG(X1, X2, X4)
   REACHC_IN_GGGG(X1, X2, X3, X4) -> U5_GGGG(X1, X2, X3, X4, member1B_in_gag(X1, X5, X3))
   REACHC_IN_GGGG(X1, X2, X3, X4) -> MEMBER1B_IN_GAG(X1, X5, X3)
   MEMBER1B_IN_GAG(X1, X2, .(X3, X4)) -> U2_GAG(X1, X2, X3, X4, member1B_in_gag(X1, X2, X4))
   MEMBER1B_IN_GAG(X1, X2, .(X3, X4)) -> MEMBER1B_IN_GAG(X1, X2, X4)
   REACHC_IN_GGGG(X1, X2, X3, X4) -> U6_GGGG(X1, X2, X3, X4, member1cB_in_gag(X1, X5, X3))
   U6_GGGG(X1, X2, X3, X4, member1cB_out_gag(X1, X5, X3)) -> U7_GGGG(X1, X2, X3, X4, memberD_in_gg(X5, X4))
   U6_GGGG(X1, X2, X3, X4, member1cB_out_gag(X1, X5, X3)) -> MEMBERD_IN_GG(X5, X4)
   MEMBERD_IN_GG(X1, .(X2, X3)) -> U3_GG(X1, X2, X3, memberD_in_gg(X1, X3))
   MEMBERD_IN_GG(X1, .(X2, X3)) -> MEMBERD_IN_GG(X1, X3)
   U6_GGGG(X1, X2, X3, X4, member1cB_out_gag(X1, X5, X3)) -> U8_GGGG(X1, X2, X3, X4, X5, membercD_in_gg(X5, X4))
   U8_GGGG(X1, X2, X3, X4, X5, membercD_out_gg(X5, X4)) -> U9_GGGG(X1, X2, X3, X4, reachC_in_gggg(X5, X2, X3, .(X5, X4)))
   U8_GGGG(X1, X2, X3, X4, X5, membercD_out_gg(X5, X4)) -> REACHC_IN_GGGG(X5, X2, X3, .(X5, X4))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, X2, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, X2, .(X3, X4)) -> U12_gag(X1, X2, X3, X4, member1cB_in_gag(X1, X2, X4))
   U12_gag(X1, X2, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
reachC_in_gggg(x1, x2, x3, x4)  =  reachC_in_gggg(x1, x2, x3, x4)

.(x1, x2)  =  .(x1, x2)

memberA_in_ggg(x1, x2, x3)  =  memberA_in_ggg(x1, x2, x3)

member1B_in_gag(x1, x2, x3)  =  member1B_in_gag(x1, x3)

member1cB_in_gag(x1, x2, x3)  =  member1cB_in_gag(x1, x3)

[]  =  []

member1cB_out_gag(x1, x2, x3)  =  member1cB_out_gag(x1, x2, x3)

U12_gag(x1, x2, x3, x4, x5)  =  U12_gag(x1, x3, x4, x5)

memberD_in_gg(x1, x2)  =  memberD_in_gg(x1, x2)

membercD_in_gg(x1, x2)  =  membercD_in_gg(x1, x2)

membercD_out_gg(x1, x2)  =  membercD_out_gg(x1, x2)

U17_gg(x1, x2, x3, x4)  =  U17_gg(x1, x2, x3, x4)

REACHC_IN_GGGG(x1, x2, x3, x4)  =  REACHC_IN_GGGG(x1, x2, x3, x4)

U4_GGGG(x1, x2, x3, x4, x5, x6)  =  U4_GGGG(x1, x2, x3, x4, x5, x6)

MEMBERA_IN_GGG(x1, x2, x3)  =  MEMBERA_IN_GGG(x1, x2, x3)

U1_GGG(x1, x2, x3, x4, x5)  =  U1_GGG(x1, x2, x3, x4, x5)

U5_GGGG(x1, x2, x3, x4, x5)  =  U5_GGGG(x1, x2, x3, x4, x5)

MEMBER1B_IN_GAG(x1, x2, x3)  =  MEMBER1B_IN_GAG(x1, x3)

U2_GAG(x1, x2, x3, x4, x5)  =  U2_GAG(x1, x3, x4, x5)

U6_GGGG(x1, x2, x3, x4, x5)  =  U6_GGGG(x1, x2, x3, x4, x5)

U7_GGGG(x1, x2, x3, x4, x5)  =  U7_GGGG(x1, x2, x3, x4, x5)

MEMBERD_IN_GG(x1, x2)  =  MEMBERD_IN_GG(x1, x2)

U3_GG(x1, x2, x3, x4)  =  U3_GG(x1, x2, x3, x4)

U8_GGGG(x1, x2, x3, x4, x5, x6)  =  U8_GGGG(x1, x2, x3, x4, x5, x6)

U9_GGGG(x1, x2, x3, x4, x5)  =  U9_GGGG(x1, x2, x3, x4, x5)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(178)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REACHC_IN_GGGG(X1, X2, .(X3, X4), X5) -> U4_GGGG(X1, X2, X3, X4, X5, memberA_in_ggg(X1, X2, X4))
   REACHC_IN_GGGG(X1, X2, .(X3, X4), X5) -> MEMBERA_IN_GGG(X1, X2, X4)
   MEMBERA_IN_GGG(X1, X2, .(X3, X4)) -> U1_GGG(X1, X2, X3, X4, memberA_in_ggg(X1, X2, X4))
   MEMBERA_IN_GGG(X1, X2, .(X3, X4)) -> MEMBERA_IN_GGG(X1, X2, X4)
   REACHC_IN_GGGG(X1, X2, X3, X4) -> U5_GGGG(X1, X2, X3, X4, member1B_in_gag(X1, X5, X3))
   REACHC_IN_GGGG(X1, X2, X3, X4) -> MEMBER1B_IN_GAG(X1, X5, X3)
   MEMBER1B_IN_GAG(X1, X2, .(X3, X4)) -> U2_GAG(X1, X2, X3, X4, member1B_in_gag(X1, X2, X4))
   MEMBER1B_IN_GAG(X1, X2, .(X3, X4)) -> MEMBER1B_IN_GAG(X1, X2, X4)
   REACHC_IN_GGGG(X1, X2, X3, X4) -> U6_GGGG(X1, X2, X3, X4, member1cB_in_gag(X1, X5, X3))
   U6_GGGG(X1, X2, X3, X4, member1cB_out_gag(X1, X5, X3)) -> U7_GGGG(X1, X2, X3, X4, memberD_in_gg(X5, X4))
   U6_GGGG(X1, X2, X3, X4, member1cB_out_gag(X1, X5, X3)) -> MEMBERD_IN_GG(X5, X4)
   MEMBERD_IN_GG(X1, .(X2, X3)) -> U3_GG(X1, X2, X3, memberD_in_gg(X1, X3))
   MEMBERD_IN_GG(X1, .(X2, X3)) -> MEMBERD_IN_GG(X1, X3)
   U6_GGGG(X1, X2, X3, X4, member1cB_out_gag(X1, X5, X3)) -> U8_GGGG(X1, X2, X3, X4, X5, membercD_in_gg(X5, X4))
   U8_GGGG(X1, X2, X3, X4, X5, membercD_out_gg(X5, X4)) -> U9_GGGG(X1, X2, X3, X4, reachC_in_gggg(X5, X2, X3, .(X5, X4)))
   U8_GGGG(X1, X2, X3, X4, X5, membercD_out_gg(X5, X4)) -> REACHC_IN_GGGG(X5, X2, X3, .(X5, X4))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, X2, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, X2, .(X3, X4)) -> U12_gag(X1, X2, X3, X4, member1cB_in_gag(X1, X2, X4))
   U12_gag(X1, X2, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
reachC_in_gggg(x1, x2, x3, x4)  =  reachC_in_gggg(x1, x2, x3, x4)

.(x1, x2)  =  .(x1, x2)

memberA_in_ggg(x1, x2, x3)  =  memberA_in_ggg(x1, x2, x3)

member1B_in_gag(x1, x2, x3)  =  member1B_in_gag(x1, x3)

member1cB_in_gag(x1, x2, x3)  =  member1cB_in_gag(x1, x3)

[]  =  []

member1cB_out_gag(x1, x2, x3)  =  member1cB_out_gag(x1, x2, x3)

U12_gag(x1, x2, x3, x4, x5)  =  U12_gag(x1, x3, x4, x5)

memberD_in_gg(x1, x2)  =  memberD_in_gg(x1, x2)

membercD_in_gg(x1, x2)  =  membercD_in_gg(x1, x2)

membercD_out_gg(x1, x2)  =  membercD_out_gg(x1, x2)

U17_gg(x1, x2, x3, x4)  =  U17_gg(x1, x2, x3, x4)

REACHC_IN_GGGG(x1, x2, x3, x4)  =  REACHC_IN_GGGG(x1, x2, x3, x4)

U4_GGGG(x1, x2, x3, x4, x5, x6)  =  U4_GGGG(x1, x2, x3, x4, x5, x6)

MEMBERA_IN_GGG(x1, x2, x3)  =  MEMBERA_IN_GGG(x1, x2, x3)

U1_GGG(x1, x2, x3, x4, x5)  =  U1_GGG(x1, x2, x3, x4, x5)

U5_GGGG(x1, x2, x3, x4, x5)  =  U5_GGGG(x1, x2, x3, x4, x5)

MEMBER1B_IN_GAG(x1, x2, x3)  =  MEMBER1B_IN_GAG(x1, x3)

U2_GAG(x1, x2, x3, x4, x5)  =  U2_GAG(x1, x3, x4, x5)

U6_GGGG(x1, x2, x3, x4, x5)  =  U6_GGGG(x1, x2, x3, x4, x5)

U7_GGGG(x1, x2, x3, x4, x5)  =  U7_GGGG(x1, x2, x3, x4, x5)

MEMBERD_IN_GG(x1, x2)  =  MEMBERD_IN_GG(x1, x2)

U3_GG(x1, x2, x3, x4)  =  U3_GG(x1, x2, x3, x4)

U8_GGGG(x1, x2, x3, x4, x5, x6)  =  U8_GGGG(x1, x2, x3, x4, x5, x6)

U9_GGGG(x1, x2, x3, x4, x5)  =  U9_GGGG(x1, x2, x3, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(179) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 4 SCCs with 10 less nodes.
----------------------------------------

(180)
Complex Obligation (AND)

----------------------------------------

(181)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERD_IN_GG(X1, .(X2, X3)) -> MEMBERD_IN_GG(X1, X3)

The TRS R consists of the following rules:

   member1cB_in_gag(X1, X2, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, X2, .(X3, X4)) -> U12_gag(X1, X2, X3, X4, member1cB_in_gag(X1, X2, X4))
   U12_gag(X1, X2, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

member1cB_in_gag(x1, x2, x3)  =  member1cB_in_gag(x1, x3)

[]  =  []

member1cB_out_gag(x1, x2, x3)  =  member1cB_out_gag(x1, x2, x3)

U12_gag(x1, x2, x3, x4, x5)  =  U12_gag(x1, x3, x4, x5)

membercD_in_gg(x1, x2)  =  membercD_in_gg(x1, x2)

membercD_out_gg(x1, x2)  =  membercD_out_gg(x1, x2)

U17_gg(x1, x2, x3, x4)  =  U17_gg(x1, x2, x3, x4)

MEMBERD_IN_GG(x1, x2)  =  MEMBERD_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(182) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(183)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERD_IN_GG(X1, .(X2, X3)) -> MEMBERD_IN_GG(X1, X3)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(184) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(185)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERD_IN_GG(X1, .(X2, X3)) -> MEMBERD_IN_GG(X1, X3)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(186) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBERD_IN_GG(X1, .(X2, X3)) -> MEMBERD_IN_GG(X1, X3)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(187)
YES

----------------------------------------

(188)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER1B_IN_GAG(X1, X2, .(X3, X4)) -> MEMBER1B_IN_GAG(X1, X2, X4)

The TRS R consists of the following rules:

   member1cB_in_gag(X1, X2, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, X2, .(X3, X4)) -> U12_gag(X1, X2, X3, X4, member1cB_in_gag(X1, X2, X4))
   U12_gag(X1, X2, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

member1cB_in_gag(x1, x2, x3)  =  member1cB_in_gag(x1, x3)

[]  =  []

member1cB_out_gag(x1, x2, x3)  =  member1cB_out_gag(x1, x2, x3)

U12_gag(x1, x2, x3, x4, x5)  =  U12_gag(x1, x3, x4, x5)

membercD_in_gg(x1, x2)  =  membercD_in_gg(x1, x2)

membercD_out_gg(x1, x2)  =  membercD_out_gg(x1, x2)

U17_gg(x1, x2, x3, x4)  =  U17_gg(x1, x2, x3, x4)

MEMBER1B_IN_GAG(x1, x2, x3)  =  MEMBER1B_IN_GAG(x1, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(189) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(190)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER1B_IN_GAG(X1, X2, .(X3, X4)) -> MEMBER1B_IN_GAG(X1, X2, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBER1B_IN_GAG(x1, x2, x3)  =  MEMBER1B_IN_GAG(x1, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(191) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(192)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER1B_IN_GAG(X1, .(X3, X4)) -> MEMBER1B_IN_GAG(X1, X4)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(193) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER1B_IN_GAG(X1, .(X3, X4)) -> MEMBER1B_IN_GAG(X1, X4)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(194)
YES

----------------------------------------

(195)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERA_IN_GGG(X1, X2, .(X3, X4)) -> MEMBERA_IN_GGG(X1, X2, X4)

The TRS R consists of the following rules:

   member1cB_in_gag(X1, X2, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, X2, .(X3, X4)) -> U12_gag(X1, X2, X3, X4, member1cB_in_gag(X1, X2, X4))
   U12_gag(X1, X2, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

member1cB_in_gag(x1, x2, x3)  =  member1cB_in_gag(x1, x3)

[]  =  []

member1cB_out_gag(x1, x2, x3)  =  member1cB_out_gag(x1, x2, x3)

U12_gag(x1, x2, x3, x4, x5)  =  U12_gag(x1, x3, x4, x5)

membercD_in_gg(x1, x2)  =  membercD_in_gg(x1, x2)

membercD_out_gg(x1, x2)  =  membercD_out_gg(x1, x2)

U17_gg(x1, x2, x3, x4)  =  U17_gg(x1, x2, x3, x4)

MEMBERA_IN_GGG(x1, x2, x3)  =  MEMBERA_IN_GGG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(196) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(197)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERA_IN_GGG(X1, X2, .(X3, X4)) -> MEMBERA_IN_GGG(X1, X2, X4)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(198) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(199)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERA_IN_GGG(X1, X2, .(X3, X4)) -> MEMBERA_IN_GGG(X1, X2, X4)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(200) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBERA_IN_GGG(X1, X2, .(X3, X4)) -> MEMBERA_IN_GGG(X1, X2, X4)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(201)
YES

----------------------------------------

(202)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REACHC_IN_GGGG(X1, X2, X3, X4) -> U6_GGGG(X1, X2, X3, X4, member1cB_in_gag(X1, X5, X3))
   U6_GGGG(X1, X2, X3, X4, member1cB_out_gag(X1, X5, X3)) -> U8_GGGG(X1, X2, X3, X4, X5, membercD_in_gg(X5, X4))
   U8_GGGG(X1, X2, X3, X4, X5, membercD_out_gg(X5, X4)) -> REACHC_IN_GGGG(X5, X2, X3, .(X5, X4))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, X2, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, X2, .(X3, X4)) -> U12_gag(X1, X2, X3, X4, member1cB_in_gag(X1, X2, X4))
   U12_gag(X1, X2, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

member1cB_in_gag(x1, x2, x3)  =  member1cB_in_gag(x1, x3)

[]  =  []

member1cB_out_gag(x1, x2, x3)  =  member1cB_out_gag(x1, x2, x3)

U12_gag(x1, x2, x3, x4, x5)  =  U12_gag(x1, x3, x4, x5)

membercD_in_gg(x1, x2)  =  membercD_in_gg(x1, x2)

membercD_out_gg(x1, x2)  =  membercD_out_gg(x1, x2)

U17_gg(x1, x2, x3, x4)  =  U17_gg(x1, x2, x3, x4)

REACHC_IN_GGGG(x1, x2, x3, x4)  =  REACHC_IN_GGGG(x1, x2, x3, x4)

U6_GGGG(x1, x2, x3, x4, x5)  =  U6_GGGG(x1, x2, x3, x4, x5)

U8_GGGG(x1, x2, x3, x4, x5, x6)  =  U8_GGGG(x1, x2, x3, x4, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(203) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(204)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACHC_IN_GGGG(X1, X2, X3, X4) -> U6_GGGG(X1, X2, X3, X4, member1cB_in_gag(X1, X3))
   U6_GGGG(X1, X2, X3, X4, member1cB_out_gag(X1, X5, X3)) -> U8_GGGG(X1, X2, X3, X4, X5, membercD_in_gg(X5, X4))
   U8_GGGG(X1, X2, X3, X4, X5, membercD_out_gg(X5, X4)) -> REACHC_IN_GGGG(X5, X2, X3, .(X5, X4))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(205) TransformationProof (SOUND)
By narrowing [LPAR04] the rule REACHC_IN_GGGG(X1, X2, X3, X4) -> U6_GGGG(X1, X2, X3, X4, member1cB_in_gag(X1, X3)) at position [4] we obtained the following new rules [LPAR04]:

   (REACHC_IN_GGGG(x0, y1, .(.(x0, .(x1, [])), x2), y3) -> U6_GGGG(x0, y1, .(.(x0, .(x1, [])), x2), y3, member1cB_out_gag(x0, x1, .(.(x0, .(x1, [])), x2))),REACHC_IN_GGGG(x0, y1, .(.(x0, .(x1, [])), x2), y3) -> U6_GGGG(x0, y1, .(.(x0, .(x1, [])), x2), y3, member1cB_out_gag(x0, x1, .(.(x0, .(x1, [])), x2))))
   (REACHC_IN_GGGG(x0, y1, .(x1, x2), y3) -> U6_GGGG(x0, y1, .(x1, x2), y3, U12_gag(x0, x1, x2, member1cB_in_gag(x0, x2))),REACHC_IN_GGGG(x0, y1, .(x1, x2), y3) -> U6_GGGG(x0, y1, .(x1, x2), y3, U12_gag(x0, x1, x2, member1cB_in_gag(x0, x2))))


----------------------------------------

(206)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGGG(X1, X2, X3, X4, member1cB_out_gag(X1, X5, X3)) -> U8_GGGG(X1, X2, X3, X4, X5, membercD_in_gg(X5, X4))
   U8_GGGG(X1, X2, X3, X4, X5, membercD_out_gg(X5, X4)) -> REACHC_IN_GGGG(X5, X2, X3, .(X5, X4))
   REACHC_IN_GGGG(x0, y1, .(.(x0, .(x1, [])), x2), y3) -> U6_GGGG(x0, y1, .(.(x0, .(x1, [])), x2), y3, member1cB_out_gag(x0, x1, .(.(x0, .(x1, [])), x2)))
   REACHC_IN_GGGG(x0, y1, .(x1, x2), y3) -> U6_GGGG(x0, y1, .(x1, x2), y3, U12_gag(x0, x1, x2, member1cB_in_gag(x0, x2)))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(207) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U6_GGGG(X1, X2, X3, X4, member1cB_out_gag(X1, X5, X3)) -> U8_GGGG(X1, X2, X3, X4, X5, membercD_in_gg(X5, X4)) at position [5] we obtained the following new rules [LPAR04]:

   (U6_GGGG(y0, y1, y2, .(x0, x1), member1cB_out_gag(y0, x0, y2)) -> U8_GGGG(y0, y1, y2, .(x0, x1), x0, membercD_out_gg(x0, .(x0, x1))),U6_GGGG(y0, y1, y2, .(x0, x1), member1cB_out_gag(y0, x0, y2)) -> U8_GGGG(y0, y1, y2, .(x0, x1), x0, membercD_out_gg(x0, .(x0, x1))))
   (U6_GGGG(y0, y1, y2, .(x1, x2), member1cB_out_gag(y0, x0, y2)) -> U8_GGGG(y0, y1, y2, .(x1, x2), x0, U17_gg(x0, x1, x2, membercD_in_gg(x0, x2))),U6_GGGG(y0, y1, y2, .(x1, x2), member1cB_out_gag(y0, x0, y2)) -> U8_GGGG(y0, y1, y2, .(x1, x2), x0, U17_gg(x0, x1, x2, membercD_in_gg(x0, x2))))


----------------------------------------

(208)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGGG(X1, X2, X3, X4, X5, membercD_out_gg(X5, X4)) -> REACHC_IN_GGGG(X5, X2, X3, .(X5, X4))
   REACHC_IN_GGGG(x0, y1, .(.(x0, .(x1, [])), x2), y3) -> U6_GGGG(x0, y1, .(.(x0, .(x1, [])), x2), y3, member1cB_out_gag(x0, x1, .(.(x0, .(x1, [])), x2)))
   REACHC_IN_GGGG(x0, y1, .(x1, x2), y3) -> U6_GGGG(x0, y1, .(x1, x2), y3, U12_gag(x0, x1, x2, member1cB_in_gag(x0, x2)))
   U6_GGGG(y0, y1, y2, .(x0, x1), member1cB_out_gag(y0, x0, y2)) -> U8_GGGG(y0, y1, y2, .(x0, x1), x0, membercD_out_gg(x0, .(x0, x1)))
   U6_GGGG(y0, y1, y2, .(x1, x2), member1cB_out_gag(y0, x0, y2)) -> U8_GGGG(y0, y1, y2, .(x1, x2), x0, U17_gg(x0, x1, x2, membercD_in_gg(x0, x2)))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(209) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U8_GGGG(X1, X2, X3, X4, X5, membercD_out_gg(X5, X4)) -> REACHC_IN_GGGG(X5, X2, X3, .(X5, X4)) we obtained the following new rules [LPAR04]:

   (U8_GGGG(z0, z1, z2, .(z3, z4), z3, membercD_out_gg(z3, .(z3, z4))) -> REACHC_IN_GGGG(z3, z1, z2, .(z3, .(z3, z4))),U8_GGGG(z0, z1, z2, .(z3, z4), z3, membercD_out_gg(z3, .(z3, z4))) -> REACHC_IN_GGGG(z3, z1, z2, .(z3, .(z3, z4))))
   (U8_GGGG(z0, z1, z2, .(z3, z4), z5, membercD_out_gg(z5, .(z3, z4))) -> REACHC_IN_GGGG(z5, z1, z2, .(z5, .(z3, z4))),U8_GGGG(z0, z1, z2, .(z3, z4), z5, membercD_out_gg(z5, .(z3, z4))) -> REACHC_IN_GGGG(z5, z1, z2, .(z5, .(z3, z4))))


----------------------------------------

(210)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACHC_IN_GGGG(x0, y1, .(.(x0, .(x1, [])), x2), y3) -> U6_GGGG(x0, y1, .(.(x0, .(x1, [])), x2), y3, member1cB_out_gag(x0, x1, .(.(x0, .(x1, [])), x2)))
   REACHC_IN_GGGG(x0, y1, .(x1, x2), y3) -> U6_GGGG(x0, y1, .(x1, x2), y3, U12_gag(x0, x1, x2, member1cB_in_gag(x0, x2)))
   U6_GGGG(y0, y1, y2, .(x0, x1), member1cB_out_gag(y0, x0, y2)) -> U8_GGGG(y0, y1, y2, .(x0, x1), x0, membercD_out_gg(x0, .(x0, x1)))
   U6_GGGG(y0, y1, y2, .(x1, x2), member1cB_out_gag(y0, x0, y2)) -> U8_GGGG(y0, y1, y2, .(x1, x2), x0, U17_gg(x0, x1, x2, membercD_in_gg(x0, x2)))
   U8_GGGG(z0, z1, z2, .(z3, z4), z3, membercD_out_gg(z3, .(z3, z4))) -> REACHC_IN_GGGG(z3, z1, z2, .(z3, .(z3, z4)))
   U8_GGGG(z0, z1, z2, .(z3, z4), z5, membercD_out_gg(z5, .(z3, z4))) -> REACHC_IN_GGGG(z5, z1, z2, .(z5, .(z3, z4)))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(211) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule REACHC_IN_GGGG(x0, y1, .(.(x0, .(x1, [])), x2), y3) -> U6_GGGG(x0, y1, .(.(x0, .(x1, [])), x2), y3, member1cB_out_gag(x0, x1, .(.(x0, .(x1, [])), x2))) we obtained the following new rules [LPAR04]:

   (REACHC_IN_GGGG(z3, z1, .(.(z3, .(x2, [])), x3), .(z3, .(z3, z4))) -> U6_GGGG(z3, z1, .(.(z3, .(x2, [])), x3), .(z3, .(z3, z4)), member1cB_out_gag(z3, x2, .(.(z3, .(x2, [])), x3))),REACHC_IN_GGGG(z3, z1, .(.(z3, .(x2, [])), x3), .(z3, .(z3, z4))) -> U6_GGGG(z3, z1, .(.(z3, .(x2, [])), x3), .(z3, .(z3, z4)), member1cB_out_gag(z3, x2, .(.(z3, .(x2, [])), x3))))
   (REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4)), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), x3))),REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4)), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), x3))))


----------------------------------------

(212)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACHC_IN_GGGG(x0, y1, .(x1, x2), y3) -> U6_GGGG(x0, y1, .(x1, x2), y3, U12_gag(x0, x1, x2, member1cB_in_gag(x0, x2)))
   U6_GGGG(y0, y1, y2, .(x0, x1), member1cB_out_gag(y0, x0, y2)) -> U8_GGGG(y0, y1, y2, .(x0, x1), x0, membercD_out_gg(x0, .(x0, x1)))
   U6_GGGG(y0, y1, y2, .(x1, x2), member1cB_out_gag(y0, x0, y2)) -> U8_GGGG(y0, y1, y2, .(x1, x2), x0, U17_gg(x0, x1, x2, membercD_in_gg(x0, x2)))
   U8_GGGG(z0, z1, z2, .(z3, z4), z3, membercD_out_gg(z3, .(z3, z4))) -> REACHC_IN_GGGG(z3, z1, z2, .(z3, .(z3, z4)))
   U8_GGGG(z0, z1, z2, .(z3, z4), z5, membercD_out_gg(z5, .(z3, z4))) -> REACHC_IN_GGGG(z5, z1, z2, .(z5, .(z3, z4)))
   REACHC_IN_GGGG(z3, z1, .(.(z3, .(x2, [])), x3), .(z3, .(z3, z4))) -> U6_GGGG(z3, z1, .(.(z3, .(x2, [])), x3), .(z3, .(z3, z4)), member1cB_out_gag(z3, x2, .(.(z3, .(x2, [])), x3)))
   REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4)), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), x3)))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(213) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule REACHC_IN_GGGG(x0, y1, .(x1, x2), y3) -> U6_GGGG(x0, y1, .(x1, x2), y3, U12_gag(x0, x1, x2, member1cB_in_gag(x0, x2))) we obtained the following new rules [LPAR04]:

   (REACHC_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U6_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U12_gag(z3, x2, x3, member1cB_in_gag(z3, x3))),REACHC_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U6_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U12_gag(z3, x2, x3, member1cB_in_gag(z3, x3))))
   (REACHC_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U12_gag(z5, x2, x3, member1cB_in_gag(z5, x3))),REACHC_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U12_gag(z5, x2, x3, member1cB_in_gag(z5, x3))))


----------------------------------------

(214)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGGG(y0, y1, y2, .(x0, x1), member1cB_out_gag(y0, x0, y2)) -> U8_GGGG(y0, y1, y2, .(x0, x1), x0, membercD_out_gg(x0, .(x0, x1)))
   U6_GGGG(y0, y1, y2, .(x1, x2), member1cB_out_gag(y0, x0, y2)) -> U8_GGGG(y0, y1, y2, .(x1, x2), x0, U17_gg(x0, x1, x2, membercD_in_gg(x0, x2)))
   U8_GGGG(z0, z1, z2, .(z3, z4), z3, membercD_out_gg(z3, .(z3, z4))) -> REACHC_IN_GGGG(z3, z1, z2, .(z3, .(z3, z4)))
   U8_GGGG(z0, z1, z2, .(z3, z4), z5, membercD_out_gg(z5, .(z3, z4))) -> REACHC_IN_GGGG(z5, z1, z2, .(z5, .(z3, z4)))
   REACHC_IN_GGGG(z3, z1, .(.(z3, .(x2, [])), x3), .(z3, .(z3, z4))) -> U6_GGGG(z3, z1, .(.(z3, .(x2, [])), x3), .(z3, .(z3, z4)), member1cB_out_gag(z3, x2, .(.(z3, .(x2, [])), x3)))
   REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4)), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), x3)))
   REACHC_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U6_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U12_gag(z3, x2, x3, member1cB_in_gag(z3, x3)))
   REACHC_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U12_gag(z5, x2, x3, member1cB_in_gag(z5, x3)))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(215) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_GGGG(y0, y1, y2, .(x0, x1), member1cB_out_gag(y0, x0, y2)) -> U8_GGGG(y0, y1, y2, .(x0, x1), x0, membercD_out_gg(x0, .(x0, x1))) we obtained the following new rules [LPAR04]:

   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))))
   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))))
   (U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))),U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))))
   (U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))),U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))))


----------------------------------------

(216)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGGG(y0, y1, y2, .(x1, x2), member1cB_out_gag(y0, x0, y2)) -> U8_GGGG(y0, y1, y2, .(x1, x2), x0, U17_gg(x0, x1, x2, membercD_in_gg(x0, x2)))
   U8_GGGG(z0, z1, z2, .(z3, z4), z3, membercD_out_gg(z3, .(z3, z4))) -> REACHC_IN_GGGG(z3, z1, z2, .(z3, .(z3, z4)))
   U8_GGGG(z0, z1, z2, .(z3, z4), z5, membercD_out_gg(z5, .(z3, z4))) -> REACHC_IN_GGGG(z5, z1, z2, .(z5, .(z3, z4)))
   REACHC_IN_GGGG(z3, z1, .(.(z3, .(x2, [])), x3), .(z3, .(z3, z4))) -> U6_GGGG(z3, z1, .(.(z3, .(x2, [])), x3), .(z3, .(z3, z4)), member1cB_out_gag(z3, x2, .(.(z3, .(x2, [])), x3)))
   REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4)), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), x3)))
   REACHC_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U6_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U12_gag(z3, x2, x3, member1cB_in_gag(z3, x3)))
   REACHC_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U12_gag(z5, x2, x3, member1cB_in_gag(z5, x3)))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(217) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_GGGG(y0, y1, y2, .(x1, x2), member1cB_out_gag(y0, x0, y2)) -> U8_GGGG(y0, y1, y2, .(x1, x2), x0, U17_gg(x0, x1, x2, membercD_in_gg(x0, x2))) we obtained the following new rules [LPAR04]:

   (U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, U17_gg(z2, z0, .(z0, z4), membercD_in_gg(z2, .(z0, z4)))),U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, U17_gg(z2, z0, .(z0, z4), membercD_in_gg(z2, .(z0, z4)))))
   (U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, U17_gg(z2, z0, .(z4, z5), membercD_in_gg(z2, .(z4, z5)))),U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, U17_gg(z2, z0, .(z4, z5), membercD_in_gg(z2, .(z4, z5)))))
   (U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U17_gg(x5, z0, .(z0, z4), membercD_in_gg(x5, .(z0, z4)))),U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U17_gg(x5, z0, .(z0, z4), membercD_in_gg(x5, .(z0, z4)))))
   (U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U17_gg(x5, z0, .(z4, z5), membercD_in_gg(x5, .(z4, z5)))),U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U17_gg(x5, z0, .(z4, z5), membercD_in_gg(x5, .(z4, z5)))))


----------------------------------------

(218)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGGG(z0, z1, z2, .(z3, z4), z3, membercD_out_gg(z3, .(z3, z4))) -> REACHC_IN_GGGG(z3, z1, z2, .(z3, .(z3, z4)))
   U8_GGGG(z0, z1, z2, .(z3, z4), z5, membercD_out_gg(z5, .(z3, z4))) -> REACHC_IN_GGGG(z5, z1, z2, .(z5, .(z3, z4)))
   REACHC_IN_GGGG(z3, z1, .(.(z3, .(x2, [])), x3), .(z3, .(z3, z4))) -> U6_GGGG(z3, z1, .(.(z3, .(x2, [])), x3), .(z3, .(z3, z4)), member1cB_out_gag(z3, x2, .(.(z3, .(x2, [])), x3)))
   REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4)), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), x3)))
   REACHC_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U6_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U12_gag(z3, x2, x3, member1cB_in_gag(z3, x3)))
   REACHC_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U12_gag(z5, x2, x3, member1cB_in_gag(z5, x3)))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, U17_gg(z2, z0, .(z0, z4), membercD_in_gg(z2, .(z0, z4))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, U17_gg(z2, z0, .(z4, z5), membercD_in_gg(z2, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U17_gg(x5, z0, .(z0, z4), membercD_in_gg(x5, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U17_gg(x5, z0, .(z4, z5), membercD_in_gg(x5, .(z4, z5))))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(219) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U8_GGGG(z0, z1, z2, .(z3, z4), z3, membercD_out_gg(z3, .(z3, z4))) -> REACHC_IN_GGGG(z3, z1, z2, .(z3, .(z3, z4))) we obtained the following new rules [LPAR04]:

   (U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, membercD_out_gg(z0, .(z0, .(z0, z3)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))),U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, membercD_out_gg(z0, .(z0, .(z0, z3)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))))
   (U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, membercD_out_gg(z0, .(z0, .(z3, z4)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))),U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, membercD_out_gg(z0, .(z0, .(z3, z4)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))))
   (U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))),U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))))
   (U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))),U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))))


----------------------------------------

(220)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGGG(z0, z1, z2, .(z3, z4), z5, membercD_out_gg(z5, .(z3, z4))) -> REACHC_IN_GGGG(z5, z1, z2, .(z5, .(z3, z4)))
   REACHC_IN_GGGG(z3, z1, .(.(z3, .(x2, [])), x3), .(z3, .(z3, z4))) -> U6_GGGG(z3, z1, .(.(z3, .(x2, [])), x3), .(z3, .(z3, z4)), member1cB_out_gag(z3, x2, .(.(z3, .(x2, [])), x3)))
   REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4)), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), x3)))
   REACHC_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U6_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U12_gag(z3, x2, x3, member1cB_in_gag(z3, x3)))
   REACHC_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U12_gag(z5, x2, x3, member1cB_in_gag(z5, x3)))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, U17_gg(z2, z0, .(z0, z4), membercD_in_gg(z2, .(z0, z4))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, U17_gg(z2, z0, .(z4, z5), membercD_in_gg(z2, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U17_gg(x5, z0, .(z0, z4), membercD_in_gg(x5, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U17_gg(x5, z0, .(z4, z5), membercD_in_gg(x5, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, membercD_out_gg(z0, .(z0, .(z0, z3)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, membercD_out_gg(z0, .(z0, .(z3, z4)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(221) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U8_GGGG(z0, z1, z2, .(z3, z4), z5, membercD_out_gg(z5, .(z3, z4))) -> REACHC_IN_GGGG(z5, z1, z2, .(z5, .(z3, z4))) we obtained the following new rules [LPAR04]:

   (U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, membercD_out_gg(z0, .(z0, .(z0, z3)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))),U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, membercD_out_gg(z0, .(z0, .(z0, z3)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))))
   (U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, membercD_out_gg(z0, .(z0, .(z3, z4)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))),U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, membercD_out_gg(z0, .(z0, .(z3, z4)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))))
   (U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))),U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))))
   (U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))),U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))))
   (U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, membercD_out_gg(z2, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))),U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, membercD_out_gg(z2, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))))
   (U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, membercD_out_gg(z2, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))),U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, membercD_out_gg(z2, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))))
   (U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, membercD_out_gg(z5, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))),U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, membercD_out_gg(z5, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))))
   (U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, membercD_out_gg(z6, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))),U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, membercD_out_gg(z6, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))))


----------------------------------------

(222)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACHC_IN_GGGG(z3, z1, .(.(z3, .(x2, [])), x3), .(z3, .(z3, z4))) -> U6_GGGG(z3, z1, .(.(z3, .(x2, [])), x3), .(z3, .(z3, z4)), member1cB_out_gag(z3, x2, .(.(z3, .(x2, [])), x3)))
   REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4)), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), x3)))
   REACHC_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U6_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U12_gag(z3, x2, x3, member1cB_in_gag(z3, x3)))
   REACHC_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U12_gag(z5, x2, x3, member1cB_in_gag(z5, x3)))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, U17_gg(z2, z0, .(z0, z4), membercD_in_gg(z2, .(z0, z4))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, U17_gg(z2, z0, .(z4, z5), membercD_in_gg(z2, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U17_gg(x5, z0, .(z0, z4), membercD_in_gg(x5, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U17_gg(x5, z0, .(z4, z5), membercD_in_gg(x5, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, membercD_out_gg(z0, .(z0, .(z0, z3)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, membercD_out_gg(z0, .(z0, .(z3, z4)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, membercD_out_gg(z2, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, membercD_out_gg(z2, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, membercD_out_gg(z5, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, membercD_out_gg(z6, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(223) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule REACHC_IN_GGGG(z3, z1, .(.(z3, .(x2, [])), x3), .(z3, .(z3, z4))) -> U6_GGGG(z3, z1, .(.(z3, .(x2, [])), x3), .(z3, .(z3, z4)), member1cB_out_gag(z3, x2, .(.(z3, .(x2, [])), x3))) we obtained the following new rules [LPAR04]:

   (REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))),REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))))
   (REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))),REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))))
   (REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3))),REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3))))
   (REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3))),REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3))))


----------------------------------------

(224)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4)), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), x3)))
   REACHC_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U6_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U12_gag(z3, x2, x3, member1cB_in_gag(z3, x3)))
   REACHC_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U12_gag(z5, x2, x3, member1cB_in_gag(z5, x3)))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, U17_gg(z2, z0, .(z0, z4), membercD_in_gg(z2, .(z0, z4))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, U17_gg(z2, z0, .(z4, z5), membercD_in_gg(z2, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U17_gg(x5, z0, .(z0, z4), membercD_in_gg(x5, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U17_gg(x5, z0, .(z4, z5), membercD_in_gg(x5, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, membercD_out_gg(z0, .(z0, .(z0, z3)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, membercD_out_gg(z0, .(z0, .(z3, z4)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, membercD_out_gg(z2, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, membercD_out_gg(z2, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, membercD_out_gg(z5, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, membercD_out_gg(z6, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(225) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), x3), .(z5, .(z3, z4)), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), x3))) we obtained the following new rules [LPAR04]:

   (REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))),REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))))
   (REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))),REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))))
   (REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3))),REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3))))
   (REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3))),REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3))))
   (REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4))), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), z3))),REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4))), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), z3))))
   (REACHC_IN_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5))), member1cB_out_gag(z6, x2, .(.(z6, .(x2, [])), z3))),REACHC_IN_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5))), member1cB_out_gag(z6, x2, .(.(z6, .(x2, [])), z3))))


----------------------------------------

(226)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACHC_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U6_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U12_gag(z3, x2, x3, member1cB_in_gag(z3, x3)))
   REACHC_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U12_gag(z5, x2, x3, member1cB_in_gag(z5, x3)))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, U17_gg(z2, z0, .(z0, z4), membercD_in_gg(z2, .(z0, z4))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, U17_gg(z2, z0, .(z4, z5), membercD_in_gg(z2, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U17_gg(x5, z0, .(z0, z4), membercD_in_gg(x5, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U17_gg(x5, z0, .(z4, z5), membercD_in_gg(x5, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, membercD_out_gg(z0, .(z0, .(z0, z3)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, membercD_out_gg(z0, .(z0, .(z3, z4)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, membercD_out_gg(z2, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, membercD_out_gg(z2, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, membercD_out_gg(z5, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, membercD_out_gg(z6, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4))), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), z3)))
   REACHC_IN_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5))), member1cB_out_gag(z6, x2, .(.(z6, .(x2, [])), z3)))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(227) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule REACHC_IN_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4))) -> U6_GGGG(z3, z1, .(x2, x3), .(z3, .(z3, z4)), U12_gag(z3, x2, x3, member1cB_in_gag(z3, x3))) we obtained the following new rules [LPAR04]:

   (REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2))),REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2))))
   (REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2))),REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2))))
   (REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3))),REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3))))
   (REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3))),REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3))))


----------------------------------------

(228)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REACHC_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U12_gag(z5, x2, x3, member1cB_in_gag(z5, x3)))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, U17_gg(z2, z0, .(z0, z4), membercD_in_gg(z2, .(z0, z4))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, U17_gg(z2, z0, .(z4, z5), membercD_in_gg(z2, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U17_gg(x5, z0, .(z0, z4), membercD_in_gg(x5, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U17_gg(x5, z0, .(z4, z5), membercD_in_gg(x5, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, membercD_out_gg(z0, .(z0, .(z0, z3)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, membercD_out_gg(z0, .(z0, .(z3, z4)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, membercD_out_gg(z2, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, membercD_out_gg(z2, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, membercD_out_gg(z5, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, membercD_out_gg(z6, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4))), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), z3)))
   REACHC_IN_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5))), member1cB_out_gag(z6, x2, .(.(z6, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(229) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule REACHC_IN_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4))) -> U6_GGGG(z5, z1, .(x2, x3), .(z5, .(z3, z4)), U12_gag(z5, x2, x3, member1cB_in_gag(z5, x3))) we obtained the following new rules [LPAR04]:

   (REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2))),REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2))))
   (REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2))),REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2))))
   (REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3))),REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3))))
   (REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3))),REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3))))
   (REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3))),REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3))))
   (REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3))),REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3))))
   (REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U12_gag(z5, z2, z3, member1cB_in_gag(z5, z3))),REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U12_gag(z5, z2, z3, member1cB_in_gag(z5, z3))))
   (REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U12_gag(z6, z2, z3, member1cB_in_gag(z6, z3))),REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U12_gag(z6, z2, z3, member1cB_in_gag(z6, z3))))


----------------------------------------

(230)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, U17_gg(z2, z0, .(z0, z4), membercD_in_gg(z2, .(z0, z4))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, U17_gg(z2, z0, .(z4, z5), membercD_in_gg(z2, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U17_gg(x5, z0, .(z0, z4), membercD_in_gg(x5, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U17_gg(x5, z0, .(z4, z5), membercD_in_gg(x5, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, membercD_out_gg(z0, .(z0, .(z0, z3)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, membercD_out_gg(z0, .(z0, .(z3, z4)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, membercD_out_gg(z2, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, membercD_out_gg(z2, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, membercD_out_gg(z5, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, membercD_out_gg(z6, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4))), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), z3)))
   REACHC_IN_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5))), member1cB_out_gag(z6, x2, .(.(z6, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))
   REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3)))
   REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3)))
   REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U12_gag(z5, z2, z3, member1cB_in_gag(z5, z3)))
   REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U12_gag(z6, z2, z3, member1cB_in_gag(z6, z3)))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(231) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) we obtained the following new rules [LPAR04]:

   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z3))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z3))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z3, z4))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z3, z4))))))


----------------------------------------

(232)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, U17_gg(z2, z0, .(z0, z4), membercD_in_gg(z2, .(z0, z4))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, U17_gg(z2, z0, .(z4, z5), membercD_in_gg(z2, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U17_gg(x5, z0, .(z0, z4), membercD_in_gg(x5, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U17_gg(x5, z0, .(z4, z5), membercD_in_gg(x5, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, membercD_out_gg(z0, .(z0, .(z0, z3)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, membercD_out_gg(z0, .(z0, .(z3, z4)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, membercD_out_gg(z2, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, membercD_out_gg(z2, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, membercD_out_gg(z5, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, membercD_out_gg(z6, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4))), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), z3)))
   REACHC_IN_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5))), member1cB_out_gag(z6, x2, .(.(z6, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))
   REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3)))
   REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3)))
   REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U12_gag(z5, z2, z3, member1cB_in_gag(z5, z3)))
   REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U12_gag(z6, z2, z3, member1cB_in_gag(z6, z3)))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z3, z4)))))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(233) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) we obtained the following new rules [LPAR04]:

   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z3))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z3))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z3, z4))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z3, z4))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z4, z5))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z4, z5))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z5, z6))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z5, z6))))))


----------------------------------------

(234)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, U17_gg(z2, z0, .(z0, z4), membercD_in_gg(z2, .(z0, z4))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, U17_gg(z2, z0, .(z4, z5), membercD_in_gg(z2, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U17_gg(x5, z0, .(z0, z4), membercD_in_gg(x5, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U17_gg(x5, z0, .(z4, z5), membercD_in_gg(x5, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, membercD_out_gg(z0, .(z0, .(z0, z3)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, membercD_out_gg(z0, .(z0, .(z3, z4)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, membercD_out_gg(z2, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, membercD_out_gg(z2, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, membercD_out_gg(z5, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, membercD_out_gg(z6, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4))), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), z3)))
   REACHC_IN_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5))), member1cB_out_gag(z6, x2, .(.(z6, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))
   REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3)))
   REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3)))
   REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U12_gag(z5, z2, z3, member1cB_in_gag(z5, z3)))
   REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U12_gag(z6, z2, z3, member1cB_in_gag(z6, z3)))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z3, z4)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z5, z6)))))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(235) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) we obtained the following new rules [LPAR04]:

   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z3))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z3))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z3, z4))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z3, z4))))))
   (U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z4))))),U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z4))))))
   (U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z4, z5))))),U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z4, z5))))))


----------------------------------------

(236)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, U17_gg(z2, z0, .(z0, z4), membercD_in_gg(z2, .(z0, z4))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, U17_gg(z2, z0, .(z4, z5), membercD_in_gg(z2, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U17_gg(x5, z0, .(z0, z4), membercD_in_gg(x5, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U17_gg(x5, z0, .(z4, z5), membercD_in_gg(x5, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, membercD_out_gg(z0, .(z0, .(z0, z3)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, membercD_out_gg(z0, .(z0, .(z3, z4)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, membercD_out_gg(z2, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, membercD_out_gg(z2, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, membercD_out_gg(z5, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, membercD_out_gg(z6, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4))), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), z3)))
   REACHC_IN_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5))), member1cB_out_gag(z6, x2, .(.(z6, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))
   REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3)))
   REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3)))
   REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U12_gag(z5, z2, z3, member1cB_in_gag(z5, z3)))
   REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U12_gag(z6, z2, z3, member1cB_in_gag(z6, z3)))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z3, z4)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z4)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z4, z5)))))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(237) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) we obtained the following new rules [LPAR04]:

   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z3))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z3))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z3, z4))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z3, z4))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z4, z5))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z4, z5))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z5, z6))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z5, z6))))))
   (U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z4))))),U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z4))))))
   (U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z4, z5))))),U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z4, z5))))))
   (U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1cB_out_gag(z0, z0, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), z0, membercD_out_gg(z0, .(z0, .(z2, .(z2, z4))))),U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1cB_out_gag(z0, z0, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), z0, membercD_out_gg(z0, .(z0, .(z2, .(z2, z4))))))
   (U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1cB_out_gag(z0, z0, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z2, .(z4, z5))))),U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1cB_out_gag(z0, z0, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z2, .(z4, z5))))))
   (U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z4, z5))))),U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z4, z5))))))
   (U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z5, z6))))),U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z5, z6))))))


----------------------------------------

(238)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, U17_gg(z2, z0, .(z0, z4), membercD_in_gg(z2, .(z0, z4))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, U17_gg(z2, z0, .(z4, z5), membercD_in_gg(z2, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U17_gg(x5, z0, .(z0, z4), membercD_in_gg(x5, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U17_gg(x5, z0, .(z4, z5), membercD_in_gg(x5, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, membercD_out_gg(z0, .(z0, .(z0, z3)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, membercD_out_gg(z0, .(z0, .(z3, z4)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, membercD_out_gg(z2, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, membercD_out_gg(z2, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, membercD_out_gg(z5, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, membercD_out_gg(z6, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4))), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), z3)))
   REACHC_IN_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5))), member1cB_out_gag(z6, x2, .(.(z6, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))
   REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3)))
   REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3)))
   REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U12_gag(z5, z2, z3, member1cB_in_gag(z5, z3)))
   REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U12_gag(z6, z2, z3, member1cB_in_gag(z6, z3)))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z3, z4)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z4)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z4, z5)))))
   U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1cB_out_gag(z0, z0, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), z0, membercD_out_gg(z0, .(z0, .(z2, .(z2, z4)))))
   U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1cB_out_gag(z0, z0, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z2, .(z4, z5)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z5, z6)))))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(239) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, U17_gg(z2, z0, .(z0, z4), membercD_in_gg(z2, .(z0, z4)))) we obtained the following new rules [LPAR04]:

   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U17_gg(z0, z0, .(z0, .(z0, z3)), membercD_in_gg(z0, .(z0, .(z0, z3))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U17_gg(z0, z0, .(z0, .(z0, z3)), membercD_in_gg(z0, .(z0, .(z0, z3))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U17_gg(z0, z0, .(z0, .(z3, z4)), membercD_in_gg(z0, .(z0, .(z3, z4))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U17_gg(z0, z0, .(z0, .(z3, z4)), membercD_in_gg(z0, .(z0, .(z3, z4))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), z2, U17_gg(z2, z0, .(z0, .(z0, z4)), membercD_in_gg(z2, .(z0, .(z0, z4))))),U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), z2, U17_gg(z2, z0, .(z0, .(z0, z4)), membercD_in_gg(z2, .(z0, .(z0, z4))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), z2, U17_gg(z2, z0, .(z0, .(z4, z5)), membercD_in_gg(z2, .(z0, .(z4, z5))))),U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), z2, U17_gg(z2, z0, .(z0, .(z4, z5)), membercD_in_gg(z2, .(z0, .(z4, z5))))))


----------------------------------------

(240)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, U17_gg(z2, z0, .(z4, z5), membercD_in_gg(z2, .(z4, z5))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U17_gg(x5, z0, .(z0, z4), membercD_in_gg(x5, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U17_gg(x5, z0, .(z4, z5), membercD_in_gg(x5, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, membercD_out_gg(z0, .(z0, .(z0, z3)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, membercD_out_gg(z0, .(z0, .(z3, z4)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, membercD_out_gg(z2, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, membercD_out_gg(z2, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, membercD_out_gg(z5, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, membercD_out_gg(z6, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4))), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), z3)))
   REACHC_IN_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5))), member1cB_out_gag(z6, x2, .(.(z6, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))
   REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3)))
   REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3)))
   REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U12_gag(z5, z2, z3, member1cB_in_gag(z5, z3)))
   REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U12_gag(z6, z2, z3, member1cB_in_gag(z6, z3)))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z3, z4)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z4)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z4, z5)))))
   U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1cB_out_gag(z0, z0, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), z0, membercD_out_gg(z0, .(z0, .(z2, .(z2, z4)))))
   U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1cB_out_gag(z0, z0, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z2, .(z4, z5)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U17_gg(z0, z0, .(z0, .(z0, z3)), membercD_in_gg(z0, .(z0, .(z0, z3)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U17_gg(z0, z0, .(z0, .(z3, z4)), membercD_in_gg(z0, .(z0, .(z3, z4)))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), z2, U17_gg(z2, z0, .(z0, .(z0, z4)), membercD_in_gg(z2, .(z0, .(z0, z4)))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), z2, U17_gg(z2, z0, .(z0, .(z4, z5)), membercD_in_gg(z2, .(z0, .(z4, z5)))))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(241) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, U17_gg(z2, z0, .(z4, z5), membercD_in_gg(z2, .(z4, z5)))) we obtained the following new rules [LPAR04]:

   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U17_gg(z0, z0, .(z0, .(z0, z3)), membercD_in_gg(z0, .(z0, .(z0, z3))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U17_gg(z0, z0, .(z0, .(z0, z3)), membercD_in_gg(z0, .(z0, .(z0, z3))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U17_gg(z0, z0, .(z0, .(z3, z4)), membercD_in_gg(z0, .(z0, .(z3, z4))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U17_gg(z0, z0, .(z0, .(z3, z4)), membercD_in_gg(z0, .(z0, .(z3, z4))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), z2, U17_gg(z2, z0, .(z0, .(z0, z4)), membercD_in_gg(z2, .(z0, .(z0, z4))))),U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), z2, U17_gg(z2, z0, .(z0, .(z0, z4)), membercD_in_gg(z2, .(z0, .(z0, z4))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), z2, U17_gg(z2, z0, .(z0, .(z4, z5)), membercD_in_gg(z2, .(z0, .(z4, z5))))),U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), z2, U17_gg(z2, z0, .(z0, .(z4, z5)), membercD_in_gg(z2, .(z0, .(z4, z5))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z4, z5))), z2, U17_gg(z2, z0, .(z4, .(z4, z5)), membercD_in_gg(z2, .(z4, .(z4, z5))))),U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z4, z5))), z2, U17_gg(z2, z0, .(z4, .(z4, z5)), membercD_in_gg(z2, .(z4, .(z4, z5))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z5, z6))), z2, U17_gg(z2, z0, .(z4, .(z5, z6)), membercD_in_gg(z2, .(z4, .(z5, z6))))),U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z5, z6))), z2, U17_gg(z2, z0, .(z4, .(z5, z6)), membercD_in_gg(z2, .(z4, .(z5, z6))))))


----------------------------------------

(242)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U17_gg(x5, z0, .(z0, z4), membercD_in_gg(x5, .(z0, z4))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U17_gg(x5, z0, .(z4, z5), membercD_in_gg(x5, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, membercD_out_gg(z0, .(z0, .(z0, z3)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, membercD_out_gg(z0, .(z0, .(z3, z4)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, membercD_out_gg(z2, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, membercD_out_gg(z2, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, membercD_out_gg(z5, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, membercD_out_gg(z6, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4))), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), z3)))
   REACHC_IN_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5))), member1cB_out_gag(z6, x2, .(.(z6, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))
   REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3)))
   REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3)))
   REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U12_gag(z5, z2, z3, member1cB_in_gag(z5, z3)))
   REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U12_gag(z6, z2, z3, member1cB_in_gag(z6, z3)))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z3, z4)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z4)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z4, z5)))))
   U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1cB_out_gag(z0, z0, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), z0, membercD_out_gg(z0, .(z0, .(z2, .(z2, z4)))))
   U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1cB_out_gag(z0, z0, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z2, .(z4, z5)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U17_gg(z0, z0, .(z0, .(z0, z3)), membercD_in_gg(z0, .(z0, .(z0, z3)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U17_gg(z0, z0, .(z0, .(z3, z4)), membercD_in_gg(z0, .(z0, .(z3, z4)))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), z2, U17_gg(z2, z0, .(z0, .(z0, z4)), membercD_in_gg(z2, .(z0, .(z0, z4)))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), z2, U17_gg(z2, z0, .(z0, .(z4, z5)), membercD_in_gg(z2, .(z0, .(z4, z5)))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z4, z5))), z2, U17_gg(z2, z0, .(z4, .(z4, z5)), membercD_in_gg(z2, .(z4, .(z4, z5)))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z5, z6))), z2, U17_gg(z2, z0, .(z4, .(z5, z6)), membercD_in_gg(z2, .(z4, .(z5, z6)))))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(243) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), x5, U17_gg(x5, z0, .(z0, z4), membercD_in_gg(x5, .(z0, z4)))) we obtained the following new rules [LPAR04]:

   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U17_gg(z0, z0, .(z0, .(z0, z3)), membercD_in_gg(z0, .(z0, .(z0, z3))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U17_gg(z0, z0, .(z0, .(z0, z3)), membercD_in_gg(z0, .(z0, .(z0, z3))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U17_gg(z0, z0, .(z0, .(z3, z4)), membercD_in_gg(z0, .(z0, .(z3, z4))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U17_gg(z0, z0, .(z0, .(z3, z4)), membercD_in_gg(z0, .(z0, .(z3, z4))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), z2, U17_gg(z2, z0, .(z0, .(z0, z4)), membercD_in_gg(z2, .(z0, .(z0, z4))))),U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), z2, U17_gg(z2, z0, .(z0, .(z0, z4)), membercD_in_gg(z2, .(z0, .(z0, z4))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), z2, U17_gg(z2, z0, .(z0, .(z4, z5)), membercD_in_gg(z2, .(z0, .(z4, z5))))),U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), z2, U17_gg(z2, z0, .(z0, .(z4, z5)), membercD_in_gg(z2, .(z0, .(z4, z5))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, x5, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), x5, U17_gg(x5, z0, .(z0, .(z0, z3)), membercD_in_gg(x5, .(z0, .(z0, z3))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, x5, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), x5, U17_gg(x5, z0, .(z0, .(z0, z3)), membercD_in_gg(x5, .(z0, .(z0, z3))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, x5, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), x5, U17_gg(x5, z0, .(z0, .(z3, z4)), membercD_in_gg(x5, .(z0, .(z3, z4))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, x5, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), x5, U17_gg(x5, z0, .(z0, .(z3, z4)), membercD_in_gg(x5, .(z0, .(z3, z4))))))
   (U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x5, U17_gg(x5, z0, .(z0, .(z0, z4)), membercD_in_gg(x5, .(z0, .(z0, z4))))),U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x5, U17_gg(x5, z0, .(z0, .(z0, z4)), membercD_in_gg(x5, .(z0, .(z0, z4))))))
   (U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x5, U17_gg(x5, z0, .(z0, .(z4, z5)), membercD_in_gg(x5, .(z0, .(z4, z5))))),U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x5, U17_gg(x5, z0, .(z0, .(z4, z5)), membercD_in_gg(x5, .(z0, .(z4, z5))))))


----------------------------------------

(244)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U17_gg(x5, z0, .(z4, z5), membercD_in_gg(x5, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, membercD_out_gg(z0, .(z0, .(z0, z3)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, membercD_out_gg(z0, .(z0, .(z3, z4)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, membercD_out_gg(z2, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, membercD_out_gg(z2, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, membercD_out_gg(z5, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, membercD_out_gg(z6, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4))), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), z3)))
   REACHC_IN_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5))), member1cB_out_gag(z6, x2, .(.(z6, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))
   REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3)))
   REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3)))
   REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U12_gag(z5, z2, z3, member1cB_in_gag(z5, z3)))
   REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U12_gag(z6, z2, z3, member1cB_in_gag(z6, z3)))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z3, z4)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z4)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z4, z5)))))
   U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1cB_out_gag(z0, z0, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), z0, membercD_out_gg(z0, .(z0, .(z2, .(z2, z4)))))
   U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1cB_out_gag(z0, z0, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z2, .(z4, z5)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U17_gg(z0, z0, .(z0, .(z0, z3)), membercD_in_gg(z0, .(z0, .(z0, z3)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U17_gg(z0, z0, .(z0, .(z3, z4)), membercD_in_gg(z0, .(z0, .(z3, z4)))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), z2, U17_gg(z2, z0, .(z0, .(z0, z4)), membercD_in_gg(z2, .(z0, .(z0, z4)))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), z2, U17_gg(z2, z0, .(z0, .(z4, z5)), membercD_in_gg(z2, .(z0, .(z4, z5)))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z4, z5))), z2, U17_gg(z2, z0, .(z4, .(z4, z5)), membercD_in_gg(z2, .(z4, .(z4, z5)))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z5, z6))), z2, U17_gg(z2, z0, .(z4, .(z5, z6)), membercD_in_gg(z2, .(z4, .(z5, z6)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, x5, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), x5, U17_gg(x5, z0, .(z0, .(z0, z3)), membercD_in_gg(x5, .(z0, .(z0, z3)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, x5, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), x5, U17_gg(x5, z0, .(z0, .(z3, z4)), membercD_in_gg(x5, .(z0, .(z3, z4)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x5, U17_gg(x5, z0, .(z0, .(z0, z4)), membercD_in_gg(x5, .(z0, .(z0, z4)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x5, U17_gg(x5, z0, .(z0, .(z4, z5)), membercD_in_gg(x5, .(z0, .(z4, z5)))))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(245) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), x5, U17_gg(x5, z0, .(z4, z5), membercD_in_gg(x5, .(z4, z5)))) we obtained the following new rules [LPAR04]:

   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U17_gg(z0, z0, .(z0, .(z0, z3)), membercD_in_gg(z0, .(z0, .(z0, z3))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U17_gg(z0, z0, .(z0, .(z0, z3)), membercD_in_gg(z0, .(z0, .(z0, z3))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U17_gg(z0, z0, .(z0, .(z3, z4)), membercD_in_gg(z0, .(z0, .(z3, z4))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U17_gg(z0, z0, .(z0, .(z3, z4)), membercD_in_gg(z0, .(z0, .(z3, z4))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), z2, U17_gg(z2, z0, .(z0, .(z0, z4)), membercD_in_gg(z2, .(z0, .(z0, z4))))),U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), z2, U17_gg(z2, z0, .(z0, .(z0, z4)), membercD_in_gg(z2, .(z0, .(z0, z4))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), z2, U17_gg(z2, z0, .(z0, .(z4, z5)), membercD_in_gg(z2, .(z0, .(z4, z5))))),U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), z2, U17_gg(z2, z0, .(z0, .(z4, z5)), membercD_in_gg(z2, .(z0, .(z4, z5))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z4, z5))), z2, U17_gg(z2, z0, .(z4, .(z4, z5)), membercD_in_gg(z2, .(z4, .(z4, z5))))),U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z4, z5))), z2, U17_gg(z2, z0, .(z4, .(z4, z5)), membercD_in_gg(z2, .(z4, .(z4, z5))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z5, z6))), z2, U17_gg(z2, z0, .(z4, .(z5, z6)), membercD_in_gg(z2, .(z4, .(z5, z6))))),U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z5, z6))), z2, U17_gg(z2, z0, .(z4, .(z5, z6)), membercD_in_gg(z2, .(z4, .(z5, z6))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, x6, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), x6, U17_gg(x6, z0, .(z0, .(z0, z3)), membercD_in_gg(x6, .(z0, .(z0, z3))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, x5, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), x5, U17_gg(x5, z0, .(z0, .(z0, z3)), membercD_in_gg(x5, .(z0, .(z0, z3))))))
   (U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, x6, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), x6, U17_gg(x6, z0, .(z0, .(z3, z4)), membercD_in_gg(x6, .(z0, .(z3, z4))))),U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, x5, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), x5, U17_gg(x5, z0, .(z0, .(z3, z4)), membercD_in_gg(x5, .(z0, .(z3, z4))))))
   (U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x6, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x6, U17_gg(x6, z0, .(z0, .(z0, z4)), membercD_in_gg(x6, .(z0, .(z0, z4))))),U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x5, U17_gg(x5, z0, .(z0, .(z0, z4)), membercD_in_gg(x5, .(z0, .(z0, z4))))))
   (U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x6, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x6, U17_gg(x6, z0, .(z0, .(z4, z5)), membercD_in_gg(x6, .(z0, .(z4, z5))))),U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x5, U17_gg(x5, z0, .(z0, .(z4, z5)), membercD_in_gg(x5, .(z0, .(z4, z5))))))
   (U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1cB_out_gag(z0, x6, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), x6, U17_gg(x6, z0, .(z2, .(z2, z4)), membercD_in_gg(x6, .(z2, .(z2, z4))))),U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1cB_out_gag(z0, x6, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), x6, U17_gg(x6, z0, .(z2, .(z2, z4)), membercD_in_gg(x6, .(z2, .(z2, z4))))))
   (U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1cB_out_gag(z0, x6, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), x6, U17_gg(x6, z0, .(z2, .(z4, z5)), membercD_in_gg(x6, .(z2, .(z4, z5))))),U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1cB_out_gag(z0, x6, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), x6, U17_gg(x6, z0, .(z2, .(z4, z5)), membercD_in_gg(x6, .(z2, .(z4, z5))))))
   (U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, x6, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), x6, U17_gg(x6, z0, .(z4, .(z4, z5)), membercD_in_gg(x6, .(z4, .(z4, z5))))),U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, x6, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), x6, U17_gg(x6, z0, .(z4, .(z4, z5)), membercD_in_gg(x6, .(z4, .(z4, z5))))))
   (U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, x6, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), x6, U17_gg(x6, z0, .(z4, .(z5, z6)), membercD_in_gg(x6, .(z4, .(z5, z6))))),U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, x6, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), x6, U17_gg(x6, z0, .(z4, .(z5, z6)), membercD_in_gg(x6, .(z4, .(z5, z6))))))


----------------------------------------

(246)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, z3)), z0, membercD_out_gg(z0, .(z0, .(z0, z3)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))))
   U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z3, z4)), z0, membercD_out_gg(z0, .(z0, .(z3, z4)))) -> REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z0, membercD_out_gg(z0, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z0, membercD_out_gg(z0, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, z4)), z2, membercD_out_gg(z2, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, z5)), z2, membercD_out_gg(z2, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, z4)), z5, membercD_out_gg(z5, .(z0, .(z0, z4)))) -> REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))))
   U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, z5)), z6, membercD_out_gg(z6, .(z0, .(z4, z5)))) -> REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(.(z0, .(x2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x2, .(.(z0, .(x2, [])), z3)))
   REACHC_IN_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(.(z5, .(x2, [])), z3), .(z5, .(z0, .(z0, z4))), member1cB_out_gag(z5, x2, .(.(z5, .(x2, [])), z3)))
   REACHC_IN_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(.(z6, .(x2, [])), z3), .(z6, .(z0, .(z4, z5))), member1cB_out_gag(z6, x2, .(.(z6, .(x2, [])), z3)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4)))) -> U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), U12_gag(z0, .(z0, .(z0, [])), z2, member1cB_in_gag(z0, z2)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))
   REACHC_IN_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5)))) -> U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), U12_gag(z0, z2, z3, member1cB_in_gag(z0, z3)))
   REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z0, z4))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3)))
   REACHC_IN_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5)))) -> U6_GGGG(z2, z1, .(.(z0, .(z2, [])), z3), .(z2, .(z0, .(z4, z5))), U12_gag(z2, .(z0, .(z2, [])), z3, member1cB_in_gag(z2, z3)))
   REACHC_IN_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4)))) -> U6_GGGG(z5, z1, .(z2, z3), .(z5, .(z0, .(z0, z4))), U12_gag(z5, z2, z3, member1cB_in_gag(z5, z3)))
   REACHC_IN_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5)))) -> U6_GGGG(z6, z1, .(z2, z3), .(z6, .(z0, .(z4, z5))), U12_gag(z6, z2, z3, member1cB_in_gag(z6, z3)))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z3)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z3, z4)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z3), .(z0, .(z4, .(z5, z6))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z0, z4)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z0, .(z4, z5)))))
   U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1cB_out_gag(z0, z0, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), z0, membercD_out_gg(z0, .(z0, .(z2, .(z2, z4)))))
   U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1cB_out_gag(z0, z0, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z2, .(z4, z5)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z4, z5)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z0, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), z0, membercD_out_gg(z0, .(z0, .(z4, .(z5, z6)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), z0, U17_gg(z0, z0, .(z0, .(z0, z3)), membercD_in_gg(z0, .(z0, .(z0, z3)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, z0, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), z0, U17_gg(z0, z0, .(z0, .(z3, z4)), membercD_in_gg(z0, .(z0, .(z3, z4)))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z0, z4))), z2, U17_gg(z2, z0, .(z0, .(z0, z4)), membercD_in_gg(z2, .(z0, .(z0, z4)))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z0, .(z4, z5))), z2, U17_gg(z2, z0, .(z0, .(z4, z5)), membercD_in_gg(z2, .(z0, .(z4, z5)))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z4, z5))), z2, U17_gg(z2, z0, .(z4, .(z4, z5)), membercD_in_gg(z2, .(z4, .(z4, z5)))))
   U6_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, z2, .(.(z0, .(z2, [])), z3))) -> U8_GGGG(z0, z1, .(.(z0, .(z2, [])), z3), .(z0, .(z4, .(z5, z6))), z2, U17_gg(z2, z0, .(z4, .(z5, z6)), membercD_in_gg(z2, .(z4, .(z5, z6)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), member1cB_out_gag(z0, x5, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z0, z3))), x5, U17_gg(x5, z0, .(z0, .(z0, z3)), membercD_in_gg(x5, .(z0, .(z0, z3)))))
   U6_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), member1cB_out_gag(z0, x5, .(.(z0, .(z0, [])), z2))) -> U8_GGGG(z0, z1, .(.(z0, .(z0, [])), z2), .(z0, .(z0, .(z3, z4))), x5, U17_gg(x5, z0, .(z0, .(z3, z4)), membercD_in_gg(x5, .(z0, .(z3, z4)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z0, z4))), x5, U17_gg(x5, z0, .(z0, .(z0, z4)), membercD_in_gg(x5, .(z0, .(z0, z4)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), member1cB_out_gag(z0, x5, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z0, .(z4, z5))), x5, U17_gg(x5, z0, .(z0, .(z4, z5)), membercD_in_gg(x5, .(z0, .(z4, z5)))))
   U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), member1cB_out_gag(z0, x6, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z2, z4))), x6, U17_gg(x6, z0, .(z2, .(z2, z4)), membercD_in_gg(x6, .(z2, .(z2, z4)))))
   U6_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), member1cB_out_gag(z0, x6, .(.(z2, .(z0, [])), z3))) -> U8_GGGG(z0, z1, .(.(z2, .(z0, [])), z3), .(z0, .(z2, .(z4, z5))), x6, U17_gg(x6, z0, .(z2, .(z4, z5)), membercD_in_gg(x6, .(z2, .(z4, z5)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), member1cB_out_gag(z0, x6, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z4, z5))), x6, U17_gg(x6, z0, .(z4, .(z4, z5)), membercD_in_gg(x6, .(z4, .(z4, z5)))))
   U6_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), member1cB_out_gag(z0, x6, .(z2, z3))) -> U8_GGGG(z0, z1, .(z2, z3), .(z0, .(z4, .(z5, z6))), x6, U17_gg(x6, z0, .(z4, .(z5, z6)), membercD_in_gg(x6, .(z4, .(z5, z6)))))

The TRS R consists of the following rules:

   member1cB_in_gag(X1, .(.(X1, .(X2, [])), X3)) -> member1cB_out_gag(X1, X2, .(.(X1, .(X2, [])), X3))
   member1cB_in_gag(X1, .(X3, X4)) -> U12_gag(X1, X3, X4, member1cB_in_gag(X1, X4))
   U12_gag(X1, X3, X4, member1cB_out_gag(X1, X2, X4)) -> member1cB_out_gag(X1, X2, .(X3, X4))
   membercD_in_gg(X1, .(X1, X2)) -> membercD_out_gg(X1, .(X1, X2))
   membercD_in_gg(X1, .(X2, X3)) -> U17_gg(X1, X2, X3, membercD_in_gg(X1, X3))
   U17_gg(X1, X2, X3, membercD_out_gg(X1, X3)) -> membercD_out_gg(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_gag(x0, x1)
   U12_gag(x0, x1, x2, x3)
   membercD_in_gg(x0, x1)
   U17_gg(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(247) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(reach X Y Edges Visited)",
                "(member (. X (. Y ([]))) Edges)"
            ],
            [
                "(reach X Z Edges Visited)",
                "(',' (member1 (. X (. Y ([]))) Edges) (',' (member Y Visited) (reach Y Z Edges (. Y Visited))))"
            ],
            [
                "(member H (. H L))",
                null
            ],
            [
                "(member X (. H L))",
                "(member X L)"
            ],
            [
                "(member1 H (. H L))",
                null
            ],
            [
                "(member1 X (. H L))",
                "(member1 X L)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "290": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(member (. T33 (. T34 ([]))) T35)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(member (. T33 (. T34 ([]))) T35)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T33",
                        "T34",
                        "T35"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "291": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(member (. T33 (. T34 ([]))) T35)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T33",
                        "T34",
                        "T35"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "292": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(member (. T33 (. T34 ([]))) T35)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T33",
                        "T34",
                        "T35"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "293": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "294": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "393": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T100 T93)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T93",
                        "T100"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "295": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "394": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(reach T100 T91 T92 (. T100 T93))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T91",
                        "T92",
                        "T93",
                        "T100"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "296": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member (. T66 (. T67 ([]))) T69)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T66",
                        "T67",
                        "T69"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "297": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "396": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 4,
                        "term": "(member T100 T93)"
                    },
                    {
                        "clause": 3,
                        "scope": 4,
                        "term": "(member T100 T93)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T93",
                        "T100"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "397": {
                "goal": [{
                    "clause": 2,
                    "scope": 4,
                    "term": "(member T100 T93)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T93",
                        "T100"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "398": {
                "goal": [{
                    "clause": 3,
                    "scope": 4,
                    "term": "(member T100 T93)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T93",
                        "T100"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "333": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member1 (. T90 (. X75 ([]))) T92) (',' (member X75 T93) (reach X75 T91 T92 (. X75 T93))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T90",
                        "T91",
                        "T92",
                        "T93"
                    ],
                    "free": ["X75"],
                    "exprvars": []
                }
            },
            "337": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member1 (. T90 (. X75 ([]))) T92)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T90",
                        "T92"
                    ],
                    "free": ["X75"],
                    "exprvars": []
                }
            },
            "338": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T100 T93) (reach T100 T91 T92 (. T100 T93)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T91",
                        "T92",
                        "T93",
                        "T100"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "10": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(reach T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "16": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member (. T33 (. T34 ([]))) T35)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T33",
                        "T34",
                        "T35"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "340": {
                "goal": [
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(member1 (. T90 (. X75 ([]))) T92)"
                    },
                    {
                        "clause": 5,
                        "scope": 3,
                        "term": "(member1 (. T90 (. X75 ([]))) T92)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T90",
                        "T92"
                    ],
                    "free": ["X75"],
                    "exprvars": []
                }
            },
            "341": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(member1 (. T90 (. X75 ([]))) T92)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T90",
                        "T92"
                    ],
                    "free": ["X75"],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(reach T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "342": {
                "goal": [{
                    "clause": 5,
                    "scope": 3,
                    "term": "(member1 (. T90 (. X75 ([]))) T92)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T90",
                        "T92"
                    ],
                    "free": ["X75"],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(reach T1 T2 T3 T4)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(reach T1 T2 T3 T4)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "343": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "344": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "345": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "346": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member1 (. T128 (. X114 ([]))) T130)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T128",
                        "T130"
                    ],
                    "free": ["X114"],
                    "exprvars": []
                }
            },
            "401": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "347": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "404": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(reach T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "405": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "407": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T161 T163)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T161",
                        "T163"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "408": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 2,
                "label": "CASE"
            },
            {
                "from": 2,
                "to": 9,
                "label": "PARALLEL"
            },
            {
                "from": 2,
                "to": 10,
                "label": "PARALLEL"
            },
            {
                "from": 9,
                "to": 16,
                "label": "ONLY EVAL with clause\nreach(X25, X26, X27, X28) :- member(.(X25, .(X26, [])), X27).\nand substitutionT1 -> T33,\nX25 -> T33,\nT2 -> T34,\nX26 -> T34,\nT3 -> T35,\nX27 -> T35,\nT4 -> T36,\nX28 -> T36"
            },
            {
                "from": 10,
                "to": 333,
                "label": "ONLY EVAL with clause\nreach(X71, X72, X73, X74) :- ','(member1(.(X71, .(X75, [])), X73), ','(member(X75, X74), reach(X75, X72, X73, .(X75, X74)))).\nand substitutionT1 -> T90,\nX71 -> T90,\nT2 -> T91,\nX72 -> T91,\nT3 -> T92,\nX73 -> T92,\nT4 -> T93,\nX74 -> T93"
            },
            {
                "from": 16,
                "to": 290,
                "label": "CASE"
            },
            {
                "from": 290,
                "to": 291,
                "label": "PARALLEL"
            },
            {
                "from": 290,
                "to": 292,
                "label": "PARALLEL"
            },
            {
                "from": 291,
                "to": 293,
                "label": "EVAL with clause\nmember(X41, .(X41, X42)).\nand substitutionT33 -> T55,\nT34 -> T56,\nX41 -> .(T55, .(T56, [])),\nX42 -> T57,\nT35 -> .(.(T55, .(T56, [])), T57)"
            },
            {
                "from": 291,
                "to": 294,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 292,
                "to": 296,
                "label": "EVAL with clause\nmember(X49, .(X50, X51)) :- member(X49, X51).\nand substitutionT33 -> T66,\nT34 -> T67,\nX49 -> .(T66, .(T67, [])),\nX50 -> T68,\nX51 -> T69,\nT35 -> .(T68, T69)"
            },
            {
                "from": 292,
                "to": 297,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 293,
                "to": 295,
                "label": "SUCCESS"
            },
            {
                "from": 296,
                "to": 16,
                "label": "INSTANCE with matching:\nT33 -> T66\nT34 -> T67\nT35 -> T69"
            },
            {
                "from": 333,
                "to": 337,
                "label": "SPLIT 1"
            },
            {
                "from": 333,
                "to": 338,
                "label": "SPLIT 2\nnew knowledge:\nT90 is ground\nT100 is ground\nT92 is ground\nreplacements:X75 -> T100"
            },
            {
                "from": 337,
                "to": 340,
                "label": "CASE"
            },
            {
                "from": 338,
                "to": 393,
                "label": "SPLIT 1"
            },
            {
                "from": 338,
                "to": 394,
                "label": "SPLIT 2\nnew knowledge:\nT100 is ground\nT93 is ground"
            },
            {
                "from": 340,
                "to": 341,
                "label": "PARALLEL"
            },
            {
                "from": 340,
                "to": 342,
                "label": "PARALLEL"
            },
            {
                "from": 341,
                "to": 343,
                "label": "EVAL with clause\nmember1(X100, .(X100, X101)).\nand substitutionT90 -> T119,\nX75 -> T120,\nX100 -> .(T119, .(T120, [])),\nX102 -> T120,\nX101 -> T121,\nT92 -> .(.(T119, .(T120, [])), T121)"
            },
            {
                "from": 341,
                "to": 344,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 342,
                "to": 346,
                "label": "EVAL with clause\nmember1(X111, .(X112, X113)) :- member1(X111, X113).\nand substitutionT90 -> T128,\nX75 -> X114,\nX111 -> .(T128, .(X114, [])),\nX112 -> T129,\nX113 -> T130,\nT92 -> .(T129, T130)"
            },
            {
                "from": 342,
                "to": 347,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 343,
                "to": 345,
                "label": "SUCCESS"
            },
            {
                "from": 346,
                "to": 337,
                "label": "INSTANCE with matching:\nT90 -> T128\nX75 -> X114\nT92 -> T130"
            },
            {
                "from": 393,
                "to": 396,
                "label": "CASE"
            },
            {
                "from": 394,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T100\nT2 -> T91\nT3 -> T92\nT4 -> .(T100, T93)"
            },
            {
                "from": 396,
                "to": 397,
                "label": "PARALLEL"
            },
            {
                "from": 396,
                "to": 398,
                "label": "PARALLEL"
            },
            {
                "from": 397,
                "to": 401,
                "label": "EVAL with clause\nmember(X137, .(X137, X138)).\nand substitutionT100 -> T153,\nX137 -> T153,\nX138 -> T154,\nT93 -> .(T153, T154)"
            },
            {
                "from": 397,
                "to": 404,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 398,
                "to": 407,
                "label": "EVAL with clause\nmember(X145, .(X146, X147)) :- member(X145, X147).\nand substitutionT100 -> T161,\nX145 -> T161,\nX146 -> T162,\nX147 -> T163,\nT93 -> .(T162, T163)"
            },
            {
                "from": 398,
                "to": 408,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 401,
                "to": 405,
                "label": "SUCCESS"
            },
            {
                "from": 407,
                "to": 393,
                "label": "INSTANCE with matching:\nT100 -> T161\nT93 -> T163"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(248)
Complex Obligation (AND)

----------------------------------------

(249)
Obligation:
Rules:
f407_in(T161, T163) -> f393_in(T161, T163) :|: TRUE
f393_out(x, x1) -> f407_out(x, x1) :|: TRUE
f398_out(T100, T93) -> f396_out(T100, T93) :|: TRUE
f396_in(x2, x3) -> f397_in(x2, x3) :|: TRUE
f397_out(x4, x5) -> f396_out(x4, x5) :|: TRUE
f396_in(x6, x7) -> f398_in(x6, x7) :|: TRUE
f398_in(x8, x9) -> f408_in :|: TRUE
f407_out(x10, x11) -> f398_out(x10, .(x12, x11)) :|: TRUE
f408_out -> f398_out(x13, x14) :|: TRUE
f398_in(x15, .(x16, x17)) -> f407_in(x15, x17) :|: TRUE
f393_in(x18, x19) -> f396_in(x18, x19) :|: TRUE
f396_out(x20, x21) -> f393_out(x20, x21) :|: TRUE
f2_out(T1, T2, T3, T4) -> f1_out(T1, T2, T3, T4) :|: TRUE
f1_in(x22, x23, x24, x25) -> f2_in(x22, x23, x24, x25) :|: TRUE
f2_in(x26, x27, x28, x29) -> f10_in(x26, x27, x28, x29) :|: TRUE
f10_out(x30, x31, x32, x33) -> f2_out(x30, x31, x32, x33) :|: TRUE
f9_out(x34, x35, x36, x37) -> f2_out(x34, x35, x36, x37) :|: TRUE
f2_in(x38, x39, x40, x41) -> f9_in(x38, x39, x40, x41) :|: TRUE
f333_out(x42, x43, x44, x45) -> f10_out(x42, x45, x43, x44) :|: TRUE
f10_in(x46, x47, x48, x49) -> f333_in(x46, x48, x49, x47) :|: TRUE
f333_in(x50, x51, x52, x53) -> f337_in(x50, x51) :|: TRUE
f338_out(x54, x55, x56, x57) -> f333_out(x58, x57, x55, x56) :|: TRUE
f337_out(x59, x60) -> f338_in(x61, x62, x63, x60) :|: TRUE
f393_out(x64, x65) -> f394_in(x64, x66, x67, x65) :|: TRUE
f394_out(x68, x69, x70, x71) -> f338_out(x68, x71, x69, x70) :|: TRUE
f338_in(x72, x73, x74, x75) -> f393_in(x72, x73) :|: TRUE
Start term: f1_in(T1, T2, T3, T4)

----------------------------------------

(250) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:


----------------------------------------

(251)
TRUE

----------------------------------------

(252)
Obligation:
Rules:
f337_in(T90, T92) -> f340_in(T90, T92) :|: TRUE
f340_out(x, x1) -> f337_out(x, x1) :|: TRUE
f341_out(x2, x3) -> f340_out(x2, x3) :|: TRUE
f340_in(x4, x5) -> f342_in(x4, x5) :|: TRUE
f342_out(x6, x7) -> f340_out(x6, x7) :|: TRUE
f340_in(x8, x9) -> f341_in(x8, x9) :|: TRUE
f346_in(T128, T130) -> f337_in(T128, T130) :|: TRUE
f337_out(x10, x11) -> f346_out(x10, x11) :|: TRUE
f347_out -> f342_out(x12, x13) :|: TRUE
f342_in(x14, x15) -> f347_in :|: TRUE
f342_in(x16, .(x17, x18)) -> f346_in(x16, x18) :|: TRUE
f346_out(x19, x20) -> f342_out(x19, .(x21, x20)) :|: TRUE
f2_out(T1, T2, T3, T4) -> f1_out(T1, T2, T3, T4) :|: TRUE
f1_in(x22, x23, x24, x25) -> f2_in(x22, x23, x24, x25) :|: TRUE
f2_in(x26, x27, x28, x29) -> f10_in(x26, x27, x28, x29) :|: TRUE
f10_out(x30, x31, x32, x33) -> f2_out(x30, x31, x32, x33) :|: TRUE
f9_out(x34, x35, x36, x37) -> f2_out(x34, x35, x36, x37) :|: TRUE
f2_in(x38, x39, x40, x41) -> f9_in(x38, x39, x40, x41) :|: TRUE
f333_out(x42, x43, x44, x45) -> f10_out(x42, x45, x43, x44) :|: TRUE
f10_in(x46, x47, x48, x49) -> f333_in(x46, x48, x49, x47) :|: TRUE
f333_in(x50, x51, x52, x53) -> f337_in(x50, x51) :|: TRUE
f338_out(x54, x55, x56, x57) -> f333_out(x58, x57, x55, x56) :|: TRUE
f337_out(x59, x60) -> f338_in(x61, x62, x63, x60) :|: TRUE
Start term: f1_in(T1, T2, T3, T4)

----------------------------------------

(253) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f337_in(T90, T92) -> f340_in(T90, T92) :|: TRUE
f340_in(x4, x5) -> f342_in(x4, x5) :|: TRUE
f346_in(T128, T130) -> f337_in(T128, T130) :|: TRUE
f342_in(x16, .(x17, x18)) -> f346_in(x16, x18) :|: TRUE


----------------------------------------

(254)
Obligation:
Rules:
f337_in(T90, T92) -> f340_in(T90, T92) :|: TRUE
f340_in(x4, x5) -> f342_in(x4, x5) :|: TRUE
f346_in(T128, T130) -> f337_in(T128, T130) :|: TRUE
f342_in(x16, .(x17, x18)) -> f346_in(x16, x18) :|: TRUE

----------------------------------------

(255) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(256)
Obligation:
Rules:
f346_in(T128:0, .(x17:0, x18:0)) -> f346_in(T128:0, x18:0) :|: TRUE

----------------------------------------

(257) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(258)
Obligation:
Rules:
f346_in(T128:0, .(x17:0, x18:0)) -> f346_in(T128:0, x18:0) :|: TRUE

----------------------------------------

(259) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f346_in(T128:0, .(x17:0, x18:0)) -> f346_in(T128:0, x18:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(260)
Obligation:

Termination digraph:
Nodes:
(1) f346_in(T128:0, .(x17:0, x18:0)) -> f346_in(T128:0, x18:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(261) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f346_in(x1, x2) -> f346_in(x2)
   .(x1, x2) -> .(x2)

----------------------------------------

(262)
Obligation:
Rules:
f346_in(.(x18:0)) -> f346_in(x18:0) :|: TRUE

----------------------------------------

(263) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f346_in(VARIABLE)
.(VARIABLE)
Removed predefined arithmetic.
----------------------------------------

(264)
Obligation:
Rules:
f346_in(.(x18:0)) -> f346_in(x18:0)

----------------------------------------

(265) IRSwTToQDPProof (SOUND)
Removed the integers and created a QDP-Problem.
----------------------------------------

(266)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f346_in(.(x18:0)) -> f346_in(x18:0)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(267) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*f346_in(.(x18:0)) -> f346_in(x18:0)
The graph contains the following edges 1 > 1


----------------------------------------

(268)
YES

----------------------------------------

(269)
Obligation:
Rules:
f296_in(T66, T67, T69) -> f16_in(T66, T67, T69) :|: TRUE
f16_out(x, x1, x2) -> f296_out(x, x1, x2) :|: TRUE
f16_in(T33, T34, T35) -> f290_in(T33, T34, T35) :|: TRUE
f290_out(x3, x4, x5) -> f16_out(x3, x4, x5) :|: TRUE
f290_in(x6, x7, x8) -> f291_in(x6, x7, x8) :|: TRUE
f292_out(x9, x10, x11) -> f290_out(x9, x10, x11) :|: TRUE
f290_in(x12, x13, x14) -> f292_in(x12, x13, x14) :|: TRUE
f291_out(x15, x16, x17) -> f290_out(x15, x16, x17) :|: TRUE
f296_out(x18, x19, x20) -> f292_out(x18, x19, .(x21, x20)) :|: TRUE
f292_in(x22, x23, x24) -> f297_in :|: TRUE
f297_out -> f292_out(x25, x26, x27) :|: TRUE
f292_in(x28, x29, .(x30, x31)) -> f296_in(x28, x29, x31) :|: TRUE
f2_out(T1, T2, T3, T4) -> f1_out(T1, T2, T3, T4) :|: TRUE
f1_in(x32, x33, x34, x35) -> f2_in(x32, x33, x34, x35) :|: TRUE
f2_in(x36, x37, x38, x39) -> f10_in(x36, x37, x38, x39) :|: TRUE
f10_out(x40, x41, x42, x43) -> f2_out(x40, x41, x42, x43) :|: TRUE
f9_out(x44, x45, x46, x47) -> f2_out(x44, x45, x46, x47) :|: TRUE
f2_in(x48, x49, x50, x51) -> f9_in(x48, x49, x50, x51) :|: TRUE
f9_in(x52, x53, x54, x55) -> f16_in(x52, x53, x54) :|: TRUE
f16_out(x56, x57, x58) -> f9_out(x56, x57, x58, x59) :|: TRUE
Start term: f1_in(T1, T2, T3, T4)

----------------------------------------

(270) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f296_in(T66, T67, T69) -> f16_in(T66, T67, T69) :|: TRUE
f16_in(T33, T34, T35) -> f290_in(T33, T34, T35) :|: TRUE
f290_in(x12, x13, x14) -> f292_in(x12, x13, x14) :|: TRUE
f292_in(x28, x29, .(x30, x31)) -> f296_in(x28, x29, x31) :|: TRUE


----------------------------------------

(271)
Obligation:
Rules:
f296_in(T66, T67, T69) -> f16_in(T66, T67, T69) :|: TRUE
f16_in(T33, T34, T35) -> f290_in(T33, T34, T35) :|: TRUE
f290_in(x12, x13, x14) -> f292_in(x12, x13, x14) :|: TRUE
f292_in(x28, x29, .(x30, x31)) -> f296_in(x28, x29, x31) :|: TRUE

----------------------------------------

(272) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(273)
Obligation:
Rules:
f296_in(T66:0, T67:0, .(x30:0, x31:0)) -> f296_in(T66:0, T67:0, x31:0) :|: TRUE

----------------------------------------

(274) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(275)
Obligation:
Rules:
f296_in(T66:0, T67:0, .(x30:0, x31:0)) -> f296_in(T66:0, T67:0, x31:0) :|: TRUE

----------------------------------------

(276) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f296_in(T66:0, T67:0, .(x30:0, x31:0)) -> f296_in(T66:0, T67:0, x31:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(277)
Obligation:

Termination digraph:
Nodes:
(1) f296_in(T66:0, T67:0, .(x30:0, x31:0)) -> f296_in(T66:0, T67:0, x31:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(278) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f296_in(x1, x2, x3) -> f296_in(x3)
   .(x1, x2) -> .(x2)

----------------------------------------

(279)
Obligation:
Rules:
f296_in(.(x31:0)) -> f296_in(x31:0) :|: TRUE

----------------------------------------

(280) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f296_in(VARIABLE)
.(VARIABLE)
Removed predefined arithmetic.
----------------------------------------

(281)
Obligation:
Rules:
f296_in(.(x31:0)) -> f296_in(x31:0)

----------------------------------------

(282) IRSwTToQDPProof (SOUND)
Removed the integers and created a QDP-Problem.
----------------------------------------

(283)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f296_in(.(x31:0)) -> f296_in(x31:0)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(284) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*f296_in(.(x31:0)) -> f296_in(x31:0)
The graph contains the following edges 1 > 1


----------------------------------------

(285)
YES

----------------------------------------

(286)
Obligation:
Rules:
f333_in(T90, T92, T93, T91) -> f337_in(T90, T92) :|: TRUE
f338_out(x, x1, x2, x3) -> f333_out(x4, x3, x1, x2) :|: TRUE
f337_out(x5, x6) -> f338_in(x7, x8, x9, x6) :|: TRUE
f393_out(x10, x11) -> f394_in(x10, x12, x13, x11) :|: TRUE
f394_out(x14, x15, x16, x17) -> f338_out(x14, x17, x15, x16) :|: TRUE
f338_in(x18, x19, x20, x21) -> f393_in(x18, x19) :|: TRUE
f337_in(x22, x23) -> f340_in(x22, x23) :|: TRUE
f340_out(x24, x25) -> f337_out(x24, x25) :|: TRUE
f407_in(T161, T163) -> f393_in(T161, T163) :|: TRUE
f393_out(x26, x27) -> f407_out(x26, x27) :|: TRUE
f333_out(x28, x29, x30, x31) -> f10_out(x28, x31, x29, x30) :|: TRUE
f10_in(x32, x33, x34, x35) -> f333_in(x32, x34, x35, x33) :|: TRUE
f398_in(x36, x37) -> f408_in :|: TRUE
f407_out(x38, x39) -> f398_out(x38, .(x40, x39)) :|: TRUE
f408_out -> f398_out(x41, x42) :|: TRUE
f398_in(x43, .(x44, x45)) -> f407_in(x43, x45) :|: TRUE
f401_in -> f401_out :|: TRUE
f341_out(x46, x47) -> f340_out(x46, x47) :|: TRUE
f340_in(x48, x49) -> f342_in(x48, x49) :|: TRUE
f342_out(x50, x51) -> f340_out(x50, x51) :|: TRUE
f340_in(x52, x53) -> f341_in(x52, x53) :|: TRUE
f2_out(T1, T2, T3, T4) -> f1_out(T1, T2, T3, T4) :|: TRUE
f1_in(x54, x55, x56, x57) -> f2_in(x54, x55, x56, x57) :|: TRUE
f343_in -> f343_out :|: TRUE
f1_out(x58, x59, x60, .(x58, x61)) -> f394_out(x58, x59, x60, x61) :|: TRUE
f394_in(x62, x63, x64, x65) -> f1_in(x62, x63, x64, .(x62, x65)) :|: TRUE
f346_in(T128, T130) -> f337_in(T128, T130) :|: TRUE
f337_out(x66, x67) -> f346_out(x66, x67) :|: TRUE
f347_out -> f342_out(x68, x69) :|: TRUE
f342_in(x70, x71) -> f347_in :|: TRUE
f342_in(x72, .(x73, x74)) -> f346_in(x72, x74) :|: TRUE
f346_out(x75, x76) -> f342_out(x75, .(x77, x76)) :|: TRUE
f398_out(x78, x79) -> f396_out(x78, x79) :|: TRUE
f396_in(x80, x81) -> f397_in(x80, x81) :|: TRUE
f397_out(x82, x83) -> f396_out(x82, x83) :|: TRUE
f396_in(x84, x85) -> f398_in(x84, x85) :|: TRUE
f397_in(T153, .(T153, T154)) -> f401_in :|: TRUE
f397_in(x86, x87) -> f404_in :|: TRUE
f404_out -> f397_out(x88, x89) :|: TRUE
f401_out -> f397_out(x90, .(x90, x91)) :|: TRUE
f341_in(T119, .(.(T119, .(T120, [])), T121)) -> f343_in :|: TRUE
f341_in(x92, x93) -> f344_in :|: TRUE
f343_out -> f341_out(x94, .(.(x94, .(x95, [])), x96)) :|: TRUE
f344_out -> f341_out(x97, x98) :|: TRUE
f393_in(x99, x100) -> f396_in(x99, x100) :|: TRUE
f396_out(x101, x102) -> f393_out(x101, x102) :|: TRUE
f2_in(x103, x104, x105, x106) -> f10_in(x103, x104, x105, x106) :|: TRUE
f10_out(x107, x108, x109, x110) -> f2_out(x107, x108, x109, x110) :|: TRUE
f9_out(x111, x112, x113, x114) -> f2_out(x111, x112, x113, x114) :|: TRUE
f2_in(x115, x116, x117, x118) -> f9_in(x115, x116, x117, x118) :|: TRUE
Start term: f1_in(T1, T2, T3, T4)

----------------------------------------

(287) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f333_in(T90, T92, T93, T91) -> f337_in(T90, T92) :|: TRUE
f337_out(x5, x6) -> f338_in(x7, x8, x9, x6) :|: TRUE
f393_out(x10, x11) -> f394_in(x10, x12, x13, x11) :|: TRUE
f338_in(x18, x19, x20, x21) -> f393_in(x18, x19) :|: TRUE
f337_in(x22, x23) -> f340_in(x22, x23) :|: TRUE
f340_out(x24, x25) -> f337_out(x24, x25) :|: TRUE
f407_in(T161, T163) -> f393_in(T161, T163) :|: TRUE
f393_out(x26, x27) -> f407_out(x26, x27) :|: TRUE
f10_in(x32, x33, x34, x35) -> f333_in(x32, x34, x35, x33) :|: TRUE
f407_out(x38, x39) -> f398_out(x38, .(x40, x39)) :|: TRUE
f398_in(x43, .(x44, x45)) -> f407_in(x43, x45) :|: TRUE
f401_in -> f401_out :|: TRUE
f341_out(x46, x47) -> f340_out(x46, x47) :|: TRUE
f340_in(x48, x49) -> f342_in(x48, x49) :|: TRUE
f342_out(x50, x51) -> f340_out(x50, x51) :|: TRUE
f340_in(x52, x53) -> f341_in(x52, x53) :|: TRUE
f1_in(x54, x55, x56, x57) -> f2_in(x54, x55, x56, x57) :|: TRUE
f343_in -> f343_out :|: TRUE
f394_in(x62, x63, x64, x65) -> f1_in(x62, x63, x64, .(x62, x65)) :|: TRUE
f346_in(T128, T130) -> f337_in(T128, T130) :|: TRUE
f337_out(x66, x67) -> f346_out(x66, x67) :|: TRUE
f342_in(x72, .(x73, x74)) -> f346_in(x72, x74) :|: TRUE
f346_out(x75, x76) -> f342_out(x75, .(x77, x76)) :|: TRUE
f398_out(x78, x79) -> f396_out(x78, x79) :|: TRUE
f396_in(x80, x81) -> f397_in(x80, x81) :|: TRUE
f397_out(x82, x83) -> f396_out(x82, x83) :|: TRUE
f396_in(x84, x85) -> f398_in(x84, x85) :|: TRUE
f397_in(T153, .(T153, T154)) -> f401_in :|: TRUE
f401_out -> f397_out(x90, .(x90, x91)) :|: TRUE
f341_in(T119, .(.(T119, .(T120, [])), T121)) -> f343_in :|: TRUE
f343_out -> f341_out(x94, .(.(x94, .(x95, [])), x96)) :|: TRUE
f393_in(x99, x100) -> f396_in(x99, x100) :|: TRUE
f396_out(x101, x102) -> f393_out(x101, x102) :|: TRUE
f2_in(x103, x104, x105, x106) -> f10_in(x103, x104, x105, x106) :|: TRUE


----------------------------------------

(288)
Obligation:
Rules:
f333_in(T90, T92, T93, T91) -> f337_in(T90, T92) :|: TRUE
f337_out(x5, x6) -> f338_in(x7, x8, x9, x6) :|: TRUE
f393_out(x10, x11) -> f394_in(x10, x12, x13, x11) :|: TRUE
f338_in(x18, x19, x20, x21) -> f393_in(x18, x19) :|: TRUE
f337_in(x22, x23) -> f340_in(x22, x23) :|: TRUE
f340_out(x24, x25) -> f337_out(x24, x25) :|: TRUE
f407_in(T161, T163) -> f393_in(T161, T163) :|: TRUE
f393_out(x26, x27) -> f407_out(x26, x27) :|: TRUE
f10_in(x32, x33, x34, x35) -> f333_in(x32, x34, x35, x33) :|: TRUE
f407_out(x38, x39) -> f398_out(x38, .(x40, x39)) :|: TRUE
f398_in(x43, .(x44, x45)) -> f407_in(x43, x45) :|: TRUE
f401_in -> f401_out :|: TRUE
f341_out(x46, x47) -> f340_out(x46, x47) :|: TRUE
f340_in(x48, x49) -> f342_in(x48, x49) :|: TRUE
f342_out(x50, x51) -> f340_out(x50, x51) :|: TRUE
f340_in(x52, x53) -> f341_in(x52, x53) :|: TRUE
f1_in(x54, x55, x56, x57) -> f2_in(x54, x55, x56, x57) :|: TRUE
f343_in -> f343_out :|: TRUE
f394_in(x62, x63, x64, x65) -> f1_in(x62, x63, x64, .(x62, x65)) :|: TRUE
f346_in(T128, T130) -> f337_in(T128, T130) :|: TRUE
f337_out(x66, x67) -> f346_out(x66, x67) :|: TRUE
f342_in(x72, .(x73, x74)) -> f346_in(x72, x74) :|: TRUE
f346_out(x75, x76) -> f342_out(x75, .(x77, x76)) :|: TRUE
f398_out(x78, x79) -> f396_out(x78, x79) :|: TRUE
f396_in(x80, x81) -> f397_in(x80, x81) :|: TRUE
f397_out(x82, x83) -> f396_out(x82, x83) :|: TRUE
f396_in(x84, x85) -> f398_in(x84, x85) :|: TRUE
f397_in(T153, .(T153, T154)) -> f401_in :|: TRUE
f401_out -> f397_out(x90, .(x90, x91)) :|: TRUE
f341_in(T119, .(.(T119, .(T120, [])), T121)) -> f343_in :|: TRUE
f343_out -> f341_out(x94, .(.(x94, .(x95, [])), x96)) :|: TRUE
f393_in(x99, x100) -> f396_in(x99, x100) :|: TRUE
f396_out(x101, x102) -> f393_out(x101, x102) :|: TRUE
f2_in(x103, x104, x105, x106) -> f10_in(x103, x104, x105, x106) :|: TRUE

----------------------------------------

(289) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(290)
Obligation:
Rules:
f340_out(x24:0, x25:0) -> f396_in(x7:0, x8:0) :|: TRUE
f393_out(x26:0, x27:0) -> f393_out(x26:0, .(x40:0, x27:0)) :|: TRUE
f340_in(x52:0, .(.(x52:0, .(T120:0, [])), T121:0)) -> f340_out(x94:0, .(.(x94:0, .(x95:0, [])), x96:0)) :|: TRUE
f393_out(x10:0, x11:0) -> f340_in(x10:0, x13:0) :|: TRUE
f340_in(x48:0, .(x73:0, x74:0)) -> f340_in(x48:0, x74:0) :|: TRUE
f340_out(x, x1) -> f340_out(x, .(x2, x1)) :|: TRUE
f396_in(x84:0, .(x44:0, x45:0)) -> f396_in(x84:0, x45:0) :|: TRUE
f396_in(x80:0, .(x80:0, T154:0)) -> f393_out(x90:0, .(x90:0, x91:0)) :|: TRUE

----------------------------------------

(291) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(292)
Obligation:
Rules:
f340_out(x24:0, x25:0) -> f396_in(x7:0, x8:0) :|: TRUE
f393_out(x26:0, x27:0) -> f393_out(x26:0, .(x40:0, x27:0)) :|: TRUE
f340_in(x52:0, .(.(x52:0, .(T120:0, [])), T121:0)) -> f340_out(x94:0, .(.(x94:0, .(x95:0, [])), x96:0)) :|: TRUE
f393_out(x10:0, x11:0) -> f340_in(x10:0, x13:0) :|: TRUE
f340_in(x48:0, .(x73:0, x74:0)) -> f340_in(x48:0, x74:0) :|: TRUE
f340_out(x, x1) -> f340_out(x, .(x2, x1)) :|: TRUE
f396_in(x84:0, .(x44:0, x45:0)) -> f396_in(x84:0, x45:0) :|: TRUE
f396_in(x80:0, .(x80:0, T154:0)) -> f393_out(x90:0, .(x90:0, x91:0)) :|: TRUE

----------------------------------------

(293) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f340_out(x24:0, x25:0) -> f396_in(x7:0, x8:0) :|: TRUE
(2) f393_out(x26:0, x27:0) -> f393_out(x26:0, .(x40:0, x27:0)) :|: TRUE
(3) f340_in(x52:0, .(.(x52:0, .(T120:0, [])), T121:0)) -> f340_out(x94:0, .(.(x94:0, .(x95:0, [])), x96:0)) :|: TRUE
(4) f393_out(x10:0, x11:0) -> f340_in(x10:0, x13:0) :|: TRUE
(5) f340_in(x48:0, .(x73:0, x74:0)) -> f340_in(x48:0, x74:0) :|: TRUE
(6) f340_out(x, x1) -> f340_out(x, .(x2, x1)) :|: TRUE
(7) f396_in(x84:0, .(x44:0, x45:0)) -> f396_in(x84:0, x45:0) :|: TRUE
(8) f396_in(x80:0, .(x80:0, T154:0)) -> f393_out(x90:0, .(x90:0, x91:0)) :|: TRUE

Arcs:
(1) -> (7), (8)
(2) -> (2), (4)
(3) -> (1), (6)
(4) -> (3), (5)
(5) -> (3), (5)
(6) -> (1), (6)
(7) -> (7), (8)
(8) -> (2), (4)

This digraph is fully evaluated!
----------------------------------------

(294)
Obligation:

Termination digraph:
Nodes:
(1) f340_out(x24:0, x25:0) -> f396_in(x7:0, x8:0) :|: TRUE
(2) f340_out(x, x1) -> f340_out(x, .(x2, x1)) :|: TRUE
(3) f340_in(x52:0, .(.(x52:0, .(T120:0, [])), T121:0)) -> f340_out(x94:0, .(.(x94:0, .(x95:0, [])), x96:0)) :|: TRUE
(4) f340_in(x48:0, .(x73:0, x74:0)) -> f340_in(x48:0, x74:0) :|: TRUE
(5) f393_out(x10:0, x11:0) -> f340_in(x10:0, x13:0) :|: TRUE
(6) f393_out(x26:0, x27:0) -> f393_out(x26:0, .(x40:0, x27:0)) :|: TRUE
(7) f396_in(x80:0, .(x80:0, T154:0)) -> f393_out(x90:0, .(x90:0, x91:0)) :|: TRUE
(8) f396_in(x84:0, .(x44:0, x45:0)) -> f396_in(x84:0, x45:0) :|: TRUE

Arcs:
(1) -> (7), (8)
(2) -> (1), (2)
(3) -> (1), (2)
(4) -> (3), (4)
(5) -> (3), (4)
(6) -> (5), (6)
(7) -> (5), (6)
(8) -> (7), (8)

This digraph is fully evaluated!

----------------------------------------

(295) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f393_out(x1, x2) -> f393_out(x1)

----------------------------------------

(296)
Obligation:
Rules:
f340_out(x24:0, x25:0) -> f396_in(x7:0, x8:0) :|: TRUE
f340_out(x, x1) -> f340_out(x, .(x2, x1)) :|: TRUE
f340_in(x52:0, .(.(x52:0, .(T120:0, [])), T121:0)) -> f340_out(x94:0, .(.(x94:0, .(x95:0, [])), x96:0)) :|: TRUE
f340_in(x48:0, .(x73:0, x74:0)) -> f340_in(x48:0, x74:0) :|: TRUE
f393_out(x10:0) -> f340_in(x10:0, x13:0) :|: TRUE
f393_out(x26:0) -> f393_out(x26:0) :|: TRUE
f396_in(x80:0, .(x80:0, T154:0)) -> f393_out(x90:0) :|: TRUE
f396_in(x84:0, .(x44:0, x45:0)) -> f396_in(x84:0, x45:0) :|: TRUE

----------------------------------------

(297) IRSwTToIntTRSProof (SOUND)
Applied path-length measure to transform intTRS with terms to intTRS.
----------------------------------------

(298)
Obligation:
Rules:
f340_out(x, x1) -> f396_in(x2, x3) :|: TRUE
f340_out(x4, x5) -> f340_out(x4, .(x6, x5)) :|: TRUE
f340_in(x71, .(.(x7, .(x8, [])), x9)) -> f340_out(x10, .(.(x10, .(x11, [])), x12)) :|: TRUE && x7 = x71
f340_in(x13, .(x14, x15)) -> f340_in(x13, x15) :|: TRUE
f393_out(x16) -> f340_in(x16, x17) :|: TRUE
f393_out(x18) -> f393_out(x18) :|: TRUE
f396_in(x191, .(x19, x20)) -> f393_out(x21) :|: TRUE && x19 = x191
f396_in(x22, .(x23, x24)) -> f396_in(x22, x24) :|: TRUE

----------------------------------------

(299) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(300)
Obligation:
Rules:
f396_in(x191:0, .(x191:0, x20:0)) -> f393_out(x21:0) :|: TRUE
f393_out(x16:0) -> f340_in(x16:0, x17:0) :|: TRUE
f340_out(x4:0, x5:0) -> f340_out(x4:0, .(x6:0, x5:0)) :|: TRUE
f340_in(x71:0, .(.(x71:0, .(x8:0, [])), x9:0)) -> f340_out(x10:0, .(.(x10:0, .(x11:0, [])), x12:0)) :|: TRUE
f340_in(x13:0, .(x14:0, x15:0)) -> f340_in(x13:0, x15:0) :|: TRUE
f396_in(x22:0, .(x23:0, x24:0)) -> f396_in(x22:0, x24:0) :|: TRUE
f393_out(x18:0) -> f393_out(x18:0) :|: TRUE
f340_out(x:0, x1:0) -> f396_in(x2:0, x3:0) :|: TRUE
