MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/3mbDo.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

p(a,g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToTRSTransformerProof [SOUND, 0 ms]
(2) QTRS
    (3) Overlay + Local Confluence [EQUIVALENT, 0 ms]
    (4) QTRS
    (5) DependencyPairsProof [EQUIVALENT, 0 ms]
    (6) QDP
    (7) DependencyGraphProof [EQUIVALENT, 0 ms]
    (8) QDP
    (9) UsableRulesProof [EQUIVALENT, 0 ms]
    (10) QDP
    (11) QReductionProof [EQUIVALENT, 0 ms]
    (12) QDP
    (13) TransformationProof [EQUIVALENT, 0 ms]
    (14) QDP
    (15) TransformationProof [EQUIVALENT, 0 ms]
    (16) QDP
    (17) NonTerminationLoopProof [COMPLETE, 0 ms]
    (18) NO
(19) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(20) IRSwT
    (21) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (22) IRSwT
    (23) IntTRSCompressionProof [EQUIVALENT, 27 ms]
    (24) IRSwT
    (25) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (26) IRSwT
    (27) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
    (28) IRSwT
(29) PrologToPiTRSProof [SOUND, 0 ms]
(30) PiTRS
    (31) DependencyPairsProof [EQUIVALENT, 0 ms]
    (32) PiDP
    (33) DependencyGraphProof [EQUIVALENT, 0 ms]
    (34) PiDP
    (35) UsableRulesProof [EQUIVALENT, 0 ms]
    (36) PiDP
    (37) PiDPToQDPProof [SOUND, 0 ms]
    (38) QDP
    (39) TransformationProof [EQUIVALENT, 0 ms]
    (40) QDP
    (41) TransformationProof [EQUIVALENT, 0 ms]
    (42) QDP
        (43) TransformationProof [EQUIVALENT, 0 ms]
        (44) QDP
(45) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(46) TRIPLES
    (47) TriplesToPiDPProof [SOUND, 0 ms]
    (48) PiDP
    (49) DependencyGraphProof [EQUIVALENT, 0 ms]
    (50) PiDP
    (51) PiDPToQDPProof [SOUND, 0 ms]
    (52) QDP
    (53) TransformationProof [EQUIVALENT, 0 ms]
    (54) QDP
    (55) TransformationProof [EQUIVALENT, 0 ms]
    (56) QDP
    (57) NonTerminationLoopProof [COMPLETE, 0 ms]
    (58) NO
(59) PrologToPiTRSProof [SOUND, 0 ms]
(60) PiTRS
    (61) DependencyPairsProof [EQUIVALENT, 0 ms]
    (62) PiDP
    (63) DependencyGraphProof [EQUIVALENT, 0 ms]
    (64) PiDP
    (65) UsableRulesProof [EQUIVALENT, 0 ms]
    (66) PiDP
    (67) PiDPToQDPProof [SOUND, 0 ms]
    (68) QDP
    (69) TransformationProof [EQUIVALENT, 0 ms]
    (70) QDP
    (71) TransformationProof [EQUIVALENT, 0 ms]
    (72) QDP
    (73) NonTerminationLoopProof [COMPLETE, 0 ms]
    (74) NO


----------------------------------------

(0)
Obligation:
Clauses:

p(s(X), Y) :- p(X, s(Y)).


Query: p(a,g)
----------------------------------------

(1) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 6,
    "program": {
        "directives": [],
        "clauses": [[
            "(p (s X) Y)",
            "(p X (s Y))"
        ]]
    },
    "graph": {
        "nodes": {
            "13": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T9 (s T8))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes"
        },
        "edges": [
            {
                "from": 6,
                "to": 7,
                "label": "CASE"
            },
            {
                "from": 7,
                "to": 13,
                "label": "EVAL with clause\np(s(X5), X6) :- p(X5, s(X6)).\nand substitutionX5 -> T9,\nT1 -> s(T9),\nT2 -> T8,\nX6 -> T8,\nT7 -> T9"
            },
            {
                "from": 7,
                "to": 14,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 13,
                "to": 6,
                "label": "INSTANCE with matching:\nT1 -> T9\nT2 -> s(T8)"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f6_in(T8) -> U1(f6_in(s(T8)), T8)
   U1(f6_out1(T9), T8) -> f6_out1(s(T9))

Q is empty.

----------------------------------------

(3) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f6_in(T8) -> U1(f6_in(s(T8)), T8)
   U1(f6_out1(T9), T8) -> f6_out1(s(T9))

The set Q consists of the following terms:

   f6_in(x0)
   U1(f6_out1(x0), x1)


----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F6_IN(T8) -> U1^1(f6_in(s(T8)), T8)
   F6_IN(T8) -> F6_IN(s(T8))

The TRS R consists of the following rules:

   f6_in(T8) -> U1(f6_in(s(T8)), T8)
   U1(f6_out1(T9), T8) -> f6_out1(s(T9))

The set Q consists of the following terms:

   f6_in(x0)
   U1(f6_out1(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F6_IN(T8) -> F6_IN(s(T8))

The TRS R consists of the following rules:

   f6_in(T8) -> U1(f6_in(s(T8)), T8)
   U1(f6_out1(T9), T8) -> f6_out1(s(T9))

The set Q consists of the following terms:

   f6_in(x0)
   U1(f6_out1(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F6_IN(T8) -> F6_IN(s(T8))

R is empty.
The set Q consists of the following terms:

   f6_in(x0)
   U1(f6_out1(x0), x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f6_in(x0)
   U1(f6_out1(x0), x1)


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F6_IN(T8) -> F6_IN(s(T8))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule F6_IN(T8) -> F6_IN(s(T8)) we obtained the following new rules [LPAR04]:

   (F6_IN(s(z0)) -> F6_IN(s(s(z0))),F6_IN(s(z0)) -> F6_IN(s(s(z0))))


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F6_IN(s(z0)) -> F6_IN(s(s(z0)))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule F6_IN(s(z0)) -> F6_IN(s(s(z0))) we obtained the following new rules [LPAR04]:

   (F6_IN(s(s(z0))) -> F6_IN(s(s(s(z0)))),F6_IN(s(s(z0))) -> F6_IN(s(s(s(z0)))))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F6_IN(s(s(z0))) -> F6_IN(s(s(s(z0))))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(17) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = F6_IN(s(s(z0))) evaluates to  t =F6_IN(s(s(s(z0))))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [z0 / s(z0)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from F6_IN(s(s(z0))) to F6_IN(s(s(s(z0)))).




----------------------------------------

(18)
NO

----------------------------------------

(19) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [[
            "(p (s X) Y)",
            "(p X (s Y))"
        ]]
    },
    "graph": {
        "nodes": {
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T9 (s T8))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes"
        },
        "edges": [
            {
                "from": 1,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 8,
                "label": "EVAL with clause\np(s(X5), X6) :- p(X5, s(X6)).\nand substitutionX5 -> T9,\nT1 -> s(T9),\nT2 -> T8,\nX6 -> T8,\nT7 -> T9"
            },
            {
                "from": 5,
                "to": 9,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 8,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T9\nT2 -> s(T8)"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(20)
Obligation:
Rules:
f1_in(T2) -> f5_in(T2) :|: TRUE
f5_out(x) -> f1_out(x) :|: TRUE
f9_out -> f5_out(x1) :|: TRUE
f5_in(x2) -> f9_in :|: TRUE
f5_in(T8) -> f8_in(T8) :|: TRUE
f8_out(x3) -> f5_out(x3) :|: TRUE
f8_in(x4) -> f1_in(s(x4)) :|: TRUE
f1_out(s(x5)) -> f8_out(x5) :|: TRUE
Start term: f1_in(T2)

----------------------------------------

(21) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f1_in(T2) -> f5_in(T2) :|: TRUE
f5_in(T8) -> f8_in(T8) :|: TRUE
f8_in(x4) -> f1_in(s(x4)) :|: TRUE


----------------------------------------

(22)
Obligation:
Rules:
f1_in(T2) -> f5_in(T2) :|: TRUE
f5_in(T8) -> f8_in(T8) :|: TRUE
f8_in(x4) -> f1_in(s(x4)) :|: TRUE

----------------------------------------

(23) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(24)
Obligation:
Rules:
f1_in(T2:0) -> f1_in(s(T2:0)) :|: TRUE

----------------------------------------

(25) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(26)
Obligation:
Rules:
f1_in(T2:0) -> f1_in(s(T2:0)) :|: TRUE

----------------------------------------

(27) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f1_in(T2:0) -> f1_in(s(T2:0)) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(28)
Obligation:

Termination digraph:
Nodes:
(1) f1_in(T2:0) -> f1_in(s(T2:0)) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(29) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

p_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_ag(s(X), Y) -> U1_ag(X, Y, p_in_ag(X, s(Y)))
   U1_ag(X, Y, p_out_ag(X, s(Y))) -> p_out_ag(s(X), Y)

The argument filtering Pi contains the following mapping:
p_in_ag(x1, x2)  =  p_in_ag(x2)

U1_ag(x1, x2, x3)  =  U1_ag(x3)

p_out_ag(x1, x2)  =  p_out_ag(x1)

s(x1)  =  s(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(30)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_ag(s(X), Y) -> U1_ag(X, Y, p_in_ag(X, s(Y)))
   U1_ag(X, Y, p_out_ag(X, s(Y))) -> p_out_ag(s(X), Y)

The argument filtering Pi contains the following mapping:
p_in_ag(x1, x2)  =  p_in_ag(x2)

U1_ag(x1, x2, x3)  =  U1_ag(x3)

p_out_ag(x1, x2)  =  p_out_ag(x1)

s(x1)  =  s(x1)



----------------------------------------

(31) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_AG(s(X), Y) -> U1_AG(X, Y, p_in_ag(X, s(Y)))
   P_IN_AG(s(X), Y) -> P_IN_AG(X, s(Y))

The TRS R consists of the following rules:

   p_in_ag(s(X), Y) -> U1_ag(X, Y, p_in_ag(X, s(Y)))
   U1_ag(X, Y, p_out_ag(X, s(Y))) -> p_out_ag(s(X), Y)

The argument filtering Pi contains the following mapping:
p_in_ag(x1, x2)  =  p_in_ag(x2)

U1_ag(x1, x2, x3)  =  U1_ag(x3)

p_out_ag(x1, x2)  =  p_out_ag(x1)

s(x1)  =  s(x1)

P_IN_AG(x1, x2)  =  P_IN_AG(x2)

U1_AG(x1, x2, x3)  =  U1_AG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(32)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_AG(s(X), Y) -> U1_AG(X, Y, p_in_ag(X, s(Y)))
   P_IN_AG(s(X), Y) -> P_IN_AG(X, s(Y))

The TRS R consists of the following rules:

   p_in_ag(s(X), Y) -> U1_ag(X, Y, p_in_ag(X, s(Y)))
   U1_ag(X, Y, p_out_ag(X, s(Y))) -> p_out_ag(s(X), Y)

The argument filtering Pi contains the following mapping:
p_in_ag(x1, x2)  =  p_in_ag(x2)

U1_ag(x1, x2, x3)  =  U1_ag(x3)

p_out_ag(x1, x2)  =  p_out_ag(x1)

s(x1)  =  s(x1)

P_IN_AG(x1, x2)  =  P_IN_AG(x2)

U1_AG(x1, x2, x3)  =  U1_AG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(33) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(34)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_AG(s(X), Y) -> P_IN_AG(X, s(Y))

The TRS R consists of the following rules:

   p_in_ag(s(X), Y) -> U1_ag(X, Y, p_in_ag(X, s(Y)))
   U1_ag(X, Y, p_out_ag(X, s(Y))) -> p_out_ag(s(X), Y)

The argument filtering Pi contains the following mapping:
p_in_ag(x1, x2)  =  p_in_ag(x2)

U1_ag(x1, x2, x3)  =  U1_ag(x3)

p_out_ag(x1, x2)  =  p_out_ag(x1)

s(x1)  =  s(x1)

P_IN_AG(x1, x2)  =  P_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(35) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(36)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_AG(s(X), Y) -> P_IN_AG(X, s(Y))

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

P_IN_AG(x1, x2)  =  P_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(37) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_AG(Y) -> P_IN_AG(s(Y))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(39) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule P_IN_AG(Y) -> P_IN_AG(s(Y)) we obtained the following new rules [LPAR04]:

   (P_IN_AG(s(z0)) -> P_IN_AG(s(s(z0))),P_IN_AG(s(z0)) -> P_IN_AG(s(s(z0))))


----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_AG(s(z0)) -> P_IN_AG(s(s(z0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(41) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule P_IN_AG(Y) -> P_IN_AG(s(Y)) we obtained the following new rules [LPAR04]:

   (P_IN_AG(s(z0)) -> P_IN_AG(s(s(z0))),P_IN_AG(s(z0)) -> P_IN_AG(s(s(z0))))


----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_AG(s(z0)) -> P_IN_AG(s(s(z0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(43) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule P_IN_AG(s(z0)) -> P_IN_AG(s(s(z0))) we obtained the following new rules [LPAR04]:

   (P_IN_AG(s(s(z0))) -> P_IN_AG(s(s(s(z0)))),P_IN_AG(s(s(z0))) -> P_IN_AG(s(s(s(z0)))))


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_AG(s(s(z0))) -> P_IN_AG(s(s(s(z0))))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(45) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 15,
    "program": {
        "directives": [],
        "clauses": [[
            "(p (s X) Y)",
            "(p X (s Y))"
        ]]
    },
    "graph": {
        "nodes": {
            "15": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "16": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T7 (s T6))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": [],
                    "exprvars": []
                }
            },
            "18": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(p T7 (s T6))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "20": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T14 (s (s T13)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T13"],
                    "free": [],
                    "exprvars": []
                }
            },
            "21": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 15,
                "to": 16,
                "label": "CASE"
            },
            {
                "from": 16,
                "to": 17,
                "label": "EVAL with clause\np(s(X3), X4) :- p(X3, s(X4)).\nand substitutionX3 -> T7,\nT1 -> s(T7),\nT2 -> T6,\nX4 -> T6,\nT5 -> T7"
            },
            {
                "from": 16,
                "to": 18,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 17,
                "to": 19,
                "label": "CASE"
            },
            {
                "from": 19,
                "to": 20,
                "label": "EVAL with clause\np(s(X9), X10) :- p(X9, s(X10)).\nand substitutionX9 -> T14,\nT7 -> s(T14),\nT6 -> T13,\nX10 -> s(T13),\nT12 -> T14"
            },
            {
                "from": 19,
                "to": 21,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 20,
                "to": 15,
                "label": "INSTANCE with matching:\nT1 -> T14\nT2 -> s(s(T13))"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(46)
Obligation:
Triples:

pA(s(s(X1)), X2) :- pA(X1, s(s(X2))).

Clauses:

pcA(s(s(X1)), X2) :- pcA(X1, s(s(X2))).

Afs:

pA(x1, x2)  =  pA(x2)


----------------------------------------

(47) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

pA_in_2: (f,b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_AG(s(s(X1)), X2) -> U1_AG(X1, X2, pA_in_ag(X1, s(s(X2))))
   PA_IN_AG(s(s(X1)), X2) -> PA_IN_AG(X1, s(s(X2)))

R is empty.
The argument filtering Pi contains the following mapping:
pA_in_ag(x1, x2)  =  pA_in_ag(x2)

s(x1)  =  s(x1)

PA_IN_AG(x1, x2)  =  PA_IN_AG(x2)

U1_AG(x1, x2, x3)  =  U1_AG(x2, x3)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(48)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_AG(s(s(X1)), X2) -> U1_AG(X1, X2, pA_in_ag(X1, s(s(X2))))
   PA_IN_AG(s(s(X1)), X2) -> PA_IN_AG(X1, s(s(X2)))

R is empty.
The argument filtering Pi contains the following mapping:
pA_in_ag(x1, x2)  =  pA_in_ag(x2)

s(x1)  =  s(x1)

PA_IN_AG(x1, x2)  =  PA_IN_AG(x2)

U1_AG(x1, x2, x3)  =  U1_AG(x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(49) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(50)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_AG(s(s(X1)), X2) -> PA_IN_AG(X1, s(s(X2)))

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

PA_IN_AG(x1, x2)  =  PA_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(51) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_AG(X2) -> PA_IN_AG(s(s(X2)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(53) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule PA_IN_AG(X2) -> PA_IN_AG(s(s(X2))) we obtained the following new rules [LPAR04]:

   (PA_IN_AG(s(s(z0))) -> PA_IN_AG(s(s(s(s(z0))))),PA_IN_AG(s(s(z0))) -> PA_IN_AG(s(s(s(s(z0))))))


----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_AG(s(s(z0))) -> PA_IN_AG(s(s(s(s(z0)))))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(55) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule PA_IN_AG(s(s(z0))) -> PA_IN_AG(s(s(s(s(z0))))) we obtained the following new rules [LPAR04]:

   (PA_IN_AG(s(s(s(s(z0))))) -> PA_IN_AG(s(s(s(s(s(s(z0))))))),PA_IN_AG(s(s(s(s(z0))))) -> PA_IN_AG(s(s(s(s(s(s(z0))))))))


----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_AG(s(s(s(s(z0))))) -> PA_IN_AG(s(s(s(s(s(s(z0)))))))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(57) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = PA_IN_AG(s(s(s(s(z0))))) evaluates to  t =PA_IN_AG(s(s(s(s(s(s(z0)))))))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [z0 / s(s(z0))]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from PA_IN_AG(s(s(s(s(z0))))) to PA_IN_AG(s(s(s(s(s(s(z0))))))).




----------------------------------------

(58)
NO

----------------------------------------

(59) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

p_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_ag(s(X), Y) -> U1_ag(X, Y, p_in_ag(X, s(Y)))
   U1_ag(X, Y, p_out_ag(X, s(Y))) -> p_out_ag(s(X), Y)

The argument filtering Pi contains the following mapping:
p_in_ag(x1, x2)  =  p_in_ag(x2)

U1_ag(x1, x2, x3)  =  U1_ag(x2, x3)

p_out_ag(x1, x2)  =  p_out_ag(x1, x2)

s(x1)  =  s(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(60)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_ag(s(X), Y) -> U1_ag(X, Y, p_in_ag(X, s(Y)))
   U1_ag(X, Y, p_out_ag(X, s(Y))) -> p_out_ag(s(X), Y)

The argument filtering Pi contains the following mapping:
p_in_ag(x1, x2)  =  p_in_ag(x2)

U1_ag(x1, x2, x3)  =  U1_ag(x2, x3)

p_out_ag(x1, x2)  =  p_out_ag(x1, x2)

s(x1)  =  s(x1)



----------------------------------------

(61) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_AG(s(X), Y) -> U1_AG(X, Y, p_in_ag(X, s(Y)))
   P_IN_AG(s(X), Y) -> P_IN_AG(X, s(Y))

The TRS R consists of the following rules:

   p_in_ag(s(X), Y) -> U1_ag(X, Y, p_in_ag(X, s(Y)))
   U1_ag(X, Y, p_out_ag(X, s(Y))) -> p_out_ag(s(X), Y)

The argument filtering Pi contains the following mapping:
p_in_ag(x1, x2)  =  p_in_ag(x2)

U1_ag(x1, x2, x3)  =  U1_ag(x2, x3)

p_out_ag(x1, x2)  =  p_out_ag(x1, x2)

s(x1)  =  s(x1)

P_IN_AG(x1, x2)  =  P_IN_AG(x2)

U1_AG(x1, x2, x3)  =  U1_AG(x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(62)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_AG(s(X), Y) -> U1_AG(X, Y, p_in_ag(X, s(Y)))
   P_IN_AG(s(X), Y) -> P_IN_AG(X, s(Y))

The TRS R consists of the following rules:

   p_in_ag(s(X), Y) -> U1_ag(X, Y, p_in_ag(X, s(Y)))
   U1_ag(X, Y, p_out_ag(X, s(Y))) -> p_out_ag(s(X), Y)

The argument filtering Pi contains the following mapping:
p_in_ag(x1, x2)  =  p_in_ag(x2)

U1_ag(x1, x2, x3)  =  U1_ag(x2, x3)

p_out_ag(x1, x2)  =  p_out_ag(x1, x2)

s(x1)  =  s(x1)

P_IN_AG(x1, x2)  =  P_IN_AG(x2)

U1_AG(x1, x2, x3)  =  U1_AG(x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(63) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(64)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_AG(s(X), Y) -> P_IN_AG(X, s(Y))

The TRS R consists of the following rules:

   p_in_ag(s(X), Y) -> U1_ag(X, Y, p_in_ag(X, s(Y)))
   U1_ag(X, Y, p_out_ag(X, s(Y))) -> p_out_ag(s(X), Y)

The argument filtering Pi contains the following mapping:
p_in_ag(x1, x2)  =  p_in_ag(x2)

U1_ag(x1, x2, x3)  =  U1_ag(x2, x3)

p_out_ag(x1, x2)  =  p_out_ag(x1, x2)

s(x1)  =  s(x1)

P_IN_AG(x1, x2)  =  P_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(65) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(66)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_AG(s(X), Y) -> P_IN_AG(X, s(Y))

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

P_IN_AG(x1, x2)  =  P_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(67) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(68)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_AG(Y) -> P_IN_AG(s(Y))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(69) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule P_IN_AG(Y) -> P_IN_AG(s(Y)) we obtained the following new rules [LPAR04]:

   (P_IN_AG(s(z0)) -> P_IN_AG(s(s(z0))),P_IN_AG(s(z0)) -> P_IN_AG(s(s(z0))))


----------------------------------------

(70)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_AG(s(z0)) -> P_IN_AG(s(s(z0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(71) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule P_IN_AG(s(z0)) -> P_IN_AG(s(s(z0))) we obtained the following new rules [LPAR04]:

   (P_IN_AG(s(s(z0))) -> P_IN_AG(s(s(s(z0)))),P_IN_AG(s(s(z0))) -> P_IN_AG(s(s(s(z0)))))


----------------------------------------

(72)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_AG(s(s(z0))) -> P_IN_AG(s(s(s(z0))))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(73) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = P_IN_AG(s(s(z0))) evaluates to  t =P_IN_AG(s(s(s(z0))))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [z0 / s(z0)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from P_IN_AG(s(s(z0))) to P_IN_AG(s(s(s(z0)))).




----------------------------------------

(74)
NO
