YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/50ZMl.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

merge(g,g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) PiDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) PiDP
        (24) PiDPToQDPProof [SOUND, 1 ms]
        (25) QDP
        (26) MRRProof [EQUIVALENT, 32 ms]
        (27) QDP
        (28) DependencyGraphProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) UsableRulesProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) QReductionProof [EQUIVALENT, 0 ms]
        (33) QDP
        (34) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (35) YES


----------------------------------------

(0)
Obligation:
Clauses:

merge(X, [], X).
merge([], X, X).
merge(.(A, X), .(B, Y), .(A, Z)) :- ','(le(A, B), merge(X, .(B, Y), Z)).
merge(.(A, X), .(B, Y), .(B, Z)) :- ','(gt(A, B), merge(.(A, X), Y, Z)).
gt(s(X), s(Y)) :- gt(X, Y).
gt(s(X), zero).
le(s(X), s(Y)) :- le(X, Y).
le(zero, s(Y)).
le(zero, zero).


Query: merge(g,g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

merge_in_3: (b,b,f)

le_in_2: (b,b)

gt_in_2: (b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   merge_in_gga(X, [], X) -> merge_out_gga(X, [], X)
   merge_in_gga([], X, X) -> merge_out_gga([], X, X)
   merge_in_gga(.(A, X), .(B, Y), .(A, Z)) -> U1_gga(A, X, B, Y, Z, le_in_gg(A, B))
   le_in_gg(s(X), s(Y)) -> U6_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(zero, s(Y)) -> le_out_gg(zero, s(Y))
   le_in_gg(zero, zero) -> le_out_gg(zero, zero)
   U6_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U1_gga(A, X, B, Y, Z, le_out_gg(A, B)) -> U2_gga(A, X, B, Y, Z, merge_in_gga(X, .(B, Y), Z))
   merge_in_gga(.(A, X), .(B, Y), .(B, Z)) -> U3_gga(A, X, B, Y, Z, gt_in_gg(A, B))
   gt_in_gg(s(X), s(Y)) -> U5_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), zero) -> gt_out_gg(s(X), zero)
   U5_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))
   U3_gga(A, X, B, Y, Z, gt_out_gg(A, B)) -> U4_gga(A, X, B, Y, Z, merge_in_gga(.(A, X), Y, Z))
   U4_gga(A, X, B, Y, Z, merge_out_gga(.(A, X), Y, Z)) -> merge_out_gga(.(A, X), .(B, Y), .(B, Z))
   U2_gga(A, X, B, Y, Z, merge_out_gga(X, .(B, Y), Z)) -> merge_out_gga(.(A, X), .(B, Y), .(A, Z))

The argument filtering Pi contains the following mapping:
merge_in_gga(x1, x2, x3)  =  merge_in_gga(x1, x2)

[]  =  []

merge_out_gga(x1, x2, x3)  =  merge_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5, x6)  =  U1_gga(x1, x2, x3, x4, x6)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

zero  =  zero

le_out_gg(x1, x2)  =  le_out_gg(x1, x2)

U2_gga(x1, x2, x3, x4, x5, x6)  =  U2_gga(x1, x2, x3, x4, x6)

U3_gga(x1, x2, x3, x4, x5, x6)  =  U3_gga(x1, x2, x3, x4, x6)

gt_in_gg(x1, x2)  =  gt_in_gg(x1, x2)

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

gt_out_gg(x1, x2)  =  gt_out_gg(x1, x2)

U4_gga(x1, x2, x3, x4, x5, x6)  =  U4_gga(x1, x2, x3, x4, x6)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   merge_in_gga(X, [], X) -> merge_out_gga(X, [], X)
   merge_in_gga([], X, X) -> merge_out_gga([], X, X)
   merge_in_gga(.(A, X), .(B, Y), .(A, Z)) -> U1_gga(A, X, B, Y, Z, le_in_gg(A, B))
   le_in_gg(s(X), s(Y)) -> U6_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(zero, s(Y)) -> le_out_gg(zero, s(Y))
   le_in_gg(zero, zero) -> le_out_gg(zero, zero)
   U6_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U1_gga(A, X, B, Y, Z, le_out_gg(A, B)) -> U2_gga(A, X, B, Y, Z, merge_in_gga(X, .(B, Y), Z))
   merge_in_gga(.(A, X), .(B, Y), .(B, Z)) -> U3_gga(A, X, B, Y, Z, gt_in_gg(A, B))
   gt_in_gg(s(X), s(Y)) -> U5_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), zero) -> gt_out_gg(s(X), zero)
   U5_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))
   U3_gga(A, X, B, Y, Z, gt_out_gg(A, B)) -> U4_gga(A, X, B, Y, Z, merge_in_gga(.(A, X), Y, Z))
   U4_gga(A, X, B, Y, Z, merge_out_gga(.(A, X), Y, Z)) -> merge_out_gga(.(A, X), .(B, Y), .(B, Z))
   U2_gga(A, X, B, Y, Z, merge_out_gga(X, .(B, Y), Z)) -> merge_out_gga(.(A, X), .(B, Y), .(A, Z))

The argument filtering Pi contains the following mapping:
merge_in_gga(x1, x2, x3)  =  merge_in_gga(x1, x2)

[]  =  []

merge_out_gga(x1, x2, x3)  =  merge_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5, x6)  =  U1_gga(x1, x2, x3, x4, x6)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

zero  =  zero

le_out_gg(x1, x2)  =  le_out_gg(x1, x2)

U2_gga(x1, x2, x3, x4, x5, x6)  =  U2_gga(x1, x2, x3, x4, x6)

U3_gga(x1, x2, x3, x4, x5, x6)  =  U3_gga(x1, x2, x3, x4, x6)

gt_in_gg(x1, x2)  =  gt_in_gg(x1, x2)

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

gt_out_gg(x1, x2)  =  gt_out_gg(x1, x2)

U4_gga(x1, x2, x3, x4, x5, x6)  =  U4_gga(x1, x2, x3, x4, x6)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MERGE_IN_GGA(.(A, X), .(B, Y), .(A, Z)) -> U1_GGA(A, X, B, Y, Z, le_in_gg(A, B))
   MERGE_IN_GGA(.(A, X), .(B, Y), .(A, Z)) -> LE_IN_GG(A, B)
   LE_IN_GG(s(X), s(Y)) -> U6_GG(X, Y, le_in_gg(X, Y))
   LE_IN_GG(s(X), s(Y)) -> LE_IN_GG(X, Y)
   U1_GGA(A, X, B, Y, Z, le_out_gg(A, B)) -> U2_GGA(A, X, B, Y, Z, merge_in_gga(X, .(B, Y), Z))
   U1_GGA(A, X, B, Y, Z, le_out_gg(A, B)) -> MERGE_IN_GGA(X, .(B, Y), Z)
   MERGE_IN_GGA(.(A, X), .(B, Y), .(B, Z)) -> U3_GGA(A, X, B, Y, Z, gt_in_gg(A, B))
   MERGE_IN_GGA(.(A, X), .(B, Y), .(B, Z)) -> GT_IN_GG(A, B)
   GT_IN_GG(s(X), s(Y)) -> U5_GG(X, Y, gt_in_gg(X, Y))
   GT_IN_GG(s(X), s(Y)) -> GT_IN_GG(X, Y)
   U3_GGA(A, X, B, Y, Z, gt_out_gg(A, B)) -> U4_GGA(A, X, B, Y, Z, merge_in_gga(.(A, X), Y, Z))
   U3_GGA(A, X, B, Y, Z, gt_out_gg(A, B)) -> MERGE_IN_GGA(.(A, X), Y, Z)

The TRS R consists of the following rules:

   merge_in_gga(X, [], X) -> merge_out_gga(X, [], X)
   merge_in_gga([], X, X) -> merge_out_gga([], X, X)
   merge_in_gga(.(A, X), .(B, Y), .(A, Z)) -> U1_gga(A, X, B, Y, Z, le_in_gg(A, B))
   le_in_gg(s(X), s(Y)) -> U6_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(zero, s(Y)) -> le_out_gg(zero, s(Y))
   le_in_gg(zero, zero) -> le_out_gg(zero, zero)
   U6_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U1_gga(A, X, B, Y, Z, le_out_gg(A, B)) -> U2_gga(A, X, B, Y, Z, merge_in_gga(X, .(B, Y), Z))
   merge_in_gga(.(A, X), .(B, Y), .(B, Z)) -> U3_gga(A, X, B, Y, Z, gt_in_gg(A, B))
   gt_in_gg(s(X), s(Y)) -> U5_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), zero) -> gt_out_gg(s(X), zero)
   U5_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))
   U3_gga(A, X, B, Y, Z, gt_out_gg(A, B)) -> U4_gga(A, X, B, Y, Z, merge_in_gga(.(A, X), Y, Z))
   U4_gga(A, X, B, Y, Z, merge_out_gga(.(A, X), Y, Z)) -> merge_out_gga(.(A, X), .(B, Y), .(B, Z))
   U2_gga(A, X, B, Y, Z, merge_out_gga(X, .(B, Y), Z)) -> merge_out_gga(.(A, X), .(B, Y), .(A, Z))

The argument filtering Pi contains the following mapping:
merge_in_gga(x1, x2, x3)  =  merge_in_gga(x1, x2)

[]  =  []

merge_out_gga(x1, x2, x3)  =  merge_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5, x6)  =  U1_gga(x1, x2, x3, x4, x6)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

zero  =  zero

le_out_gg(x1, x2)  =  le_out_gg(x1, x2)

U2_gga(x1, x2, x3, x4, x5, x6)  =  U2_gga(x1, x2, x3, x4, x6)

U3_gga(x1, x2, x3, x4, x5, x6)  =  U3_gga(x1, x2, x3, x4, x6)

gt_in_gg(x1, x2)  =  gt_in_gg(x1, x2)

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

gt_out_gg(x1, x2)  =  gt_out_gg(x1, x2)

U4_gga(x1, x2, x3, x4, x5, x6)  =  U4_gga(x1, x2, x3, x4, x6)

MERGE_IN_GGA(x1, x2, x3)  =  MERGE_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5, x6)  =  U1_GGA(x1, x2, x3, x4, x6)

LE_IN_GG(x1, x2)  =  LE_IN_GG(x1, x2)

U6_GG(x1, x2, x3)  =  U6_GG(x1, x2, x3)

U2_GGA(x1, x2, x3, x4, x5, x6)  =  U2_GGA(x1, x2, x3, x4, x6)

U3_GGA(x1, x2, x3, x4, x5, x6)  =  U3_GGA(x1, x2, x3, x4, x6)

GT_IN_GG(x1, x2)  =  GT_IN_GG(x1, x2)

U5_GG(x1, x2, x3)  =  U5_GG(x1, x2, x3)

U4_GGA(x1, x2, x3, x4, x5, x6)  =  U4_GGA(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGE_IN_GGA(.(A, X), .(B, Y), .(A, Z)) -> U1_GGA(A, X, B, Y, Z, le_in_gg(A, B))
   MERGE_IN_GGA(.(A, X), .(B, Y), .(A, Z)) -> LE_IN_GG(A, B)
   LE_IN_GG(s(X), s(Y)) -> U6_GG(X, Y, le_in_gg(X, Y))
   LE_IN_GG(s(X), s(Y)) -> LE_IN_GG(X, Y)
   U1_GGA(A, X, B, Y, Z, le_out_gg(A, B)) -> U2_GGA(A, X, B, Y, Z, merge_in_gga(X, .(B, Y), Z))
   U1_GGA(A, X, B, Y, Z, le_out_gg(A, B)) -> MERGE_IN_GGA(X, .(B, Y), Z)
   MERGE_IN_GGA(.(A, X), .(B, Y), .(B, Z)) -> U3_GGA(A, X, B, Y, Z, gt_in_gg(A, B))
   MERGE_IN_GGA(.(A, X), .(B, Y), .(B, Z)) -> GT_IN_GG(A, B)
   GT_IN_GG(s(X), s(Y)) -> U5_GG(X, Y, gt_in_gg(X, Y))
   GT_IN_GG(s(X), s(Y)) -> GT_IN_GG(X, Y)
   U3_GGA(A, X, B, Y, Z, gt_out_gg(A, B)) -> U4_GGA(A, X, B, Y, Z, merge_in_gga(.(A, X), Y, Z))
   U3_GGA(A, X, B, Y, Z, gt_out_gg(A, B)) -> MERGE_IN_GGA(.(A, X), Y, Z)

The TRS R consists of the following rules:

   merge_in_gga(X, [], X) -> merge_out_gga(X, [], X)
   merge_in_gga([], X, X) -> merge_out_gga([], X, X)
   merge_in_gga(.(A, X), .(B, Y), .(A, Z)) -> U1_gga(A, X, B, Y, Z, le_in_gg(A, B))
   le_in_gg(s(X), s(Y)) -> U6_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(zero, s(Y)) -> le_out_gg(zero, s(Y))
   le_in_gg(zero, zero) -> le_out_gg(zero, zero)
   U6_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U1_gga(A, X, B, Y, Z, le_out_gg(A, B)) -> U2_gga(A, X, B, Y, Z, merge_in_gga(X, .(B, Y), Z))
   merge_in_gga(.(A, X), .(B, Y), .(B, Z)) -> U3_gga(A, X, B, Y, Z, gt_in_gg(A, B))
   gt_in_gg(s(X), s(Y)) -> U5_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), zero) -> gt_out_gg(s(X), zero)
   U5_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))
   U3_gga(A, X, B, Y, Z, gt_out_gg(A, B)) -> U4_gga(A, X, B, Y, Z, merge_in_gga(.(A, X), Y, Z))
   U4_gga(A, X, B, Y, Z, merge_out_gga(.(A, X), Y, Z)) -> merge_out_gga(.(A, X), .(B, Y), .(B, Z))
   U2_gga(A, X, B, Y, Z, merge_out_gga(X, .(B, Y), Z)) -> merge_out_gga(.(A, X), .(B, Y), .(A, Z))

The argument filtering Pi contains the following mapping:
merge_in_gga(x1, x2, x3)  =  merge_in_gga(x1, x2)

[]  =  []

merge_out_gga(x1, x2, x3)  =  merge_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5, x6)  =  U1_gga(x1, x2, x3, x4, x6)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

zero  =  zero

le_out_gg(x1, x2)  =  le_out_gg(x1, x2)

U2_gga(x1, x2, x3, x4, x5, x6)  =  U2_gga(x1, x2, x3, x4, x6)

U3_gga(x1, x2, x3, x4, x5, x6)  =  U3_gga(x1, x2, x3, x4, x6)

gt_in_gg(x1, x2)  =  gt_in_gg(x1, x2)

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

gt_out_gg(x1, x2)  =  gt_out_gg(x1, x2)

U4_gga(x1, x2, x3, x4, x5, x6)  =  U4_gga(x1, x2, x3, x4, x6)

MERGE_IN_GGA(x1, x2, x3)  =  MERGE_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5, x6)  =  U1_GGA(x1, x2, x3, x4, x6)

LE_IN_GG(x1, x2)  =  LE_IN_GG(x1, x2)

U6_GG(x1, x2, x3)  =  U6_GG(x1, x2, x3)

U2_GGA(x1, x2, x3, x4, x5, x6)  =  U2_GGA(x1, x2, x3, x4, x6)

U3_GGA(x1, x2, x3, x4, x5, x6)  =  U3_GGA(x1, x2, x3, x4, x6)

GT_IN_GG(x1, x2)  =  GT_IN_GG(x1, x2)

U5_GG(x1, x2, x3)  =  U5_GG(x1, x2, x3)

U4_GGA(x1, x2, x3, x4, x5, x6)  =  U4_GGA(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 6 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GT_IN_GG(s(X), s(Y)) -> GT_IN_GG(X, Y)

The TRS R consists of the following rules:

   merge_in_gga(X, [], X) -> merge_out_gga(X, [], X)
   merge_in_gga([], X, X) -> merge_out_gga([], X, X)
   merge_in_gga(.(A, X), .(B, Y), .(A, Z)) -> U1_gga(A, X, B, Y, Z, le_in_gg(A, B))
   le_in_gg(s(X), s(Y)) -> U6_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(zero, s(Y)) -> le_out_gg(zero, s(Y))
   le_in_gg(zero, zero) -> le_out_gg(zero, zero)
   U6_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U1_gga(A, X, B, Y, Z, le_out_gg(A, B)) -> U2_gga(A, X, B, Y, Z, merge_in_gga(X, .(B, Y), Z))
   merge_in_gga(.(A, X), .(B, Y), .(B, Z)) -> U3_gga(A, X, B, Y, Z, gt_in_gg(A, B))
   gt_in_gg(s(X), s(Y)) -> U5_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), zero) -> gt_out_gg(s(X), zero)
   U5_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))
   U3_gga(A, X, B, Y, Z, gt_out_gg(A, B)) -> U4_gga(A, X, B, Y, Z, merge_in_gga(.(A, X), Y, Z))
   U4_gga(A, X, B, Y, Z, merge_out_gga(.(A, X), Y, Z)) -> merge_out_gga(.(A, X), .(B, Y), .(B, Z))
   U2_gga(A, X, B, Y, Z, merge_out_gga(X, .(B, Y), Z)) -> merge_out_gga(.(A, X), .(B, Y), .(A, Z))

The argument filtering Pi contains the following mapping:
merge_in_gga(x1, x2, x3)  =  merge_in_gga(x1, x2)

[]  =  []

merge_out_gga(x1, x2, x3)  =  merge_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5, x6)  =  U1_gga(x1, x2, x3, x4, x6)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

zero  =  zero

le_out_gg(x1, x2)  =  le_out_gg(x1, x2)

U2_gga(x1, x2, x3, x4, x5, x6)  =  U2_gga(x1, x2, x3, x4, x6)

U3_gga(x1, x2, x3, x4, x5, x6)  =  U3_gga(x1, x2, x3, x4, x6)

gt_in_gg(x1, x2)  =  gt_in_gg(x1, x2)

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

gt_out_gg(x1, x2)  =  gt_out_gg(x1, x2)

U4_gga(x1, x2, x3, x4, x5, x6)  =  U4_gga(x1, x2, x3, x4, x6)

GT_IN_GG(x1, x2)  =  GT_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GT_IN_GG(s(X), s(Y)) -> GT_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT_IN_GG(s(X), s(Y)) -> GT_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GT_IN_GG(s(X), s(Y)) -> GT_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LE_IN_GG(s(X), s(Y)) -> LE_IN_GG(X, Y)

The TRS R consists of the following rules:

   merge_in_gga(X, [], X) -> merge_out_gga(X, [], X)
   merge_in_gga([], X, X) -> merge_out_gga([], X, X)
   merge_in_gga(.(A, X), .(B, Y), .(A, Z)) -> U1_gga(A, X, B, Y, Z, le_in_gg(A, B))
   le_in_gg(s(X), s(Y)) -> U6_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(zero, s(Y)) -> le_out_gg(zero, s(Y))
   le_in_gg(zero, zero) -> le_out_gg(zero, zero)
   U6_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U1_gga(A, X, B, Y, Z, le_out_gg(A, B)) -> U2_gga(A, X, B, Y, Z, merge_in_gga(X, .(B, Y), Z))
   merge_in_gga(.(A, X), .(B, Y), .(B, Z)) -> U3_gga(A, X, B, Y, Z, gt_in_gg(A, B))
   gt_in_gg(s(X), s(Y)) -> U5_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), zero) -> gt_out_gg(s(X), zero)
   U5_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))
   U3_gga(A, X, B, Y, Z, gt_out_gg(A, B)) -> U4_gga(A, X, B, Y, Z, merge_in_gga(.(A, X), Y, Z))
   U4_gga(A, X, B, Y, Z, merge_out_gga(.(A, X), Y, Z)) -> merge_out_gga(.(A, X), .(B, Y), .(B, Z))
   U2_gga(A, X, B, Y, Z, merge_out_gga(X, .(B, Y), Z)) -> merge_out_gga(.(A, X), .(B, Y), .(A, Z))

The argument filtering Pi contains the following mapping:
merge_in_gga(x1, x2, x3)  =  merge_in_gga(x1, x2)

[]  =  []

merge_out_gga(x1, x2, x3)  =  merge_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5, x6)  =  U1_gga(x1, x2, x3, x4, x6)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

zero  =  zero

le_out_gg(x1, x2)  =  le_out_gg(x1, x2)

U2_gga(x1, x2, x3, x4, x5, x6)  =  U2_gga(x1, x2, x3, x4, x6)

U3_gga(x1, x2, x3, x4, x5, x6)  =  U3_gga(x1, x2, x3, x4, x6)

gt_in_gg(x1, x2)  =  gt_in_gg(x1, x2)

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

gt_out_gg(x1, x2)  =  gt_out_gg(x1, x2)

U4_gga(x1, x2, x3, x4, x5, x6)  =  U4_gga(x1, x2, x3, x4, x6)

LE_IN_GG(x1, x2)  =  LE_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LE_IN_GG(s(X), s(Y)) -> LE_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE_IN_GG(s(X), s(Y)) -> LE_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE_IN_GG(s(X), s(Y)) -> LE_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GGA(A, X, B, Y, Z, le_out_gg(A, B)) -> MERGE_IN_GGA(X, .(B, Y), Z)
   MERGE_IN_GGA(.(A, X), .(B, Y), .(A, Z)) -> U1_GGA(A, X, B, Y, Z, le_in_gg(A, B))
   MERGE_IN_GGA(.(A, X), .(B, Y), .(B, Z)) -> U3_GGA(A, X, B, Y, Z, gt_in_gg(A, B))
   U3_GGA(A, X, B, Y, Z, gt_out_gg(A, B)) -> MERGE_IN_GGA(.(A, X), Y, Z)

The TRS R consists of the following rules:

   merge_in_gga(X, [], X) -> merge_out_gga(X, [], X)
   merge_in_gga([], X, X) -> merge_out_gga([], X, X)
   merge_in_gga(.(A, X), .(B, Y), .(A, Z)) -> U1_gga(A, X, B, Y, Z, le_in_gg(A, B))
   le_in_gg(s(X), s(Y)) -> U6_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(zero, s(Y)) -> le_out_gg(zero, s(Y))
   le_in_gg(zero, zero) -> le_out_gg(zero, zero)
   U6_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U1_gga(A, X, B, Y, Z, le_out_gg(A, B)) -> U2_gga(A, X, B, Y, Z, merge_in_gga(X, .(B, Y), Z))
   merge_in_gga(.(A, X), .(B, Y), .(B, Z)) -> U3_gga(A, X, B, Y, Z, gt_in_gg(A, B))
   gt_in_gg(s(X), s(Y)) -> U5_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), zero) -> gt_out_gg(s(X), zero)
   U5_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))
   U3_gga(A, X, B, Y, Z, gt_out_gg(A, B)) -> U4_gga(A, X, B, Y, Z, merge_in_gga(.(A, X), Y, Z))
   U4_gga(A, X, B, Y, Z, merge_out_gga(.(A, X), Y, Z)) -> merge_out_gga(.(A, X), .(B, Y), .(B, Z))
   U2_gga(A, X, B, Y, Z, merge_out_gga(X, .(B, Y), Z)) -> merge_out_gga(.(A, X), .(B, Y), .(A, Z))

The argument filtering Pi contains the following mapping:
merge_in_gga(x1, x2, x3)  =  merge_in_gga(x1, x2)

[]  =  []

merge_out_gga(x1, x2, x3)  =  merge_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5, x6)  =  U1_gga(x1, x2, x3, x4, x6)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

zero  =  zero

le_out_gg(x1, x2)  =  le_out_gg(x1, x2)

U2_gga(x1, x2, x3, x4, x5, x6)  =  U2_gga(x1, x2, x3, x4, x6)

U3_gga(x1, x2, x3, x4, x5, x6)  =  U3_gga(x1, x2, x3, x4, x6)

gt_in_gg(x1, x2)  =  gt_in_gg(x1, x2)

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

gt_out_gg(x1, x2)  =  gt_out_gg(x1, x2)

U4_gga(x1, x2, x3, x4, x5, x6)  =  U4_gga(x1, x2, x3, x4, x6)

MERGE_IN_GGA(x1, x2, x3)  =  MERGE_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5, x6)  =  U1_GGA(x1, x2, x3, x4, x6)

U3_GGA(x1, x2, x3, x4, x5, x6)  =  U3_GGA(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(23)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GGA(A, X, B, Y, Z, le_out_gg(A, B)) -> MERGE_IN_GGA(X, .(B, Y), Z)
   MERGE_IN_GGA(.(A, X), .(B, Y), .(A, Z)) -> U1_GGA(A, X, B, Y, Z, le_in_gg(A, B))
   MERGE_IN_GGA(.(A, X), .(B, Y), .(B, Z)) -> U3_GGA(A, X, B, Y, Z, gt_in_gg(A, B))
   U3_GGA(A, X, B, Y, Z, gt_out_gg(A, B)) -> MERGE_IN_GGA(.(A, X), Y, Z)

The TRS R consists of the following rules:

   le_in_gg(s(X), s(Y)) -> U6_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(zero, s(Y)) -> le_out_gg(zero, s(Y))
   le_in_gg(zero, zero) -> le_out_gg(zero, zero)
   gt_in_gg(s(X), s(Y)) -> U5_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), zero) -> gt_out_gg(s(X), zero)
   U6_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U5_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

zero  =  zero

le_out_gg(x1, x2)  =  le_out_gg(x1, x2)

gt_in_gg(x1, x2)  =  gt_in_gg(x1, x2)

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

gt_out_gg(x1, x2)  =  gt_out_gg(x1, x2)

MERGE_IN_GGA(x1, x2, x3)  =  MERGE_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5, x6)  =  U1_GGA(x1, x2, x3, x4, x6)

U3_GGA(x1, x2, x3, x4, x5, x6)  =  U3_GGA(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(24) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GGA(A, X, B, Y, le_out_gg(A, B)) -> MERGE_IN_GGA(X, .(B, Y))
   MERGE_IN_GGA(.(A, X), .(B, Y)) -> U1_GGA(A, X, B, Y, le_in_gg(A, B))
   MERGE_IN_GGA(.(A, X), .(B, Y)) -> U3_GGA(A, X, B, Y, gt_in_gg(A, B))
   U3_GGA(A, X, B, Y, gt_out_gg(A, B)) -> MERGE_IN_GGA(.(A, X), Y)

The TRS R consists of the following rules:

   le_in_gg(s(X), s(Y)) -> U6_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(zero, s(Y)) -> le_out_gg(zero, s(Y))
   le_in_gg(zero, zero) -> le_out_gg(zero, zero)
   gt_in_gg(s(X), s(Y)) -> U5_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), zero) -> gt_out_gg(s(X), zero)
   U6_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U5_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))

The set Q consists of the following terms:

   le_in_gg(x0, x1)
   gt_in_gg(x0, x1)
   U6_gg(x0, x1, x2)
   U5_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MERGE_IN_GGA(.(A, X), .(B, Y)) -> U3_GGA(A, X, B, Y, gt_in_gg(A, B))

Strictly oriented rules of the TRS R:

   le_in_gg(zero, s(Y)) -> le_out_gg(zero, s(Y))
   le_in_gg(zero, zero) -> le_out_gg(zero, zero)

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(MERGE_IN_GGA(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U1_GGA(x_1, x_2, x_3, x_4, x_5)) = 2 + x_1 + 2*x_2 + 2*x_3 + 2*x_4 + x_5
   POL(U3_GGA(x_1, x_2, x_3, x_4, x_5)) = 2 + 2*x_1 + 2*x_2 + 2*x_3 + 2*x_4 + 2*x_5
   POL(U5_gg(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U6_gg(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + x_3
   POL(gt_in_gg(x_1, x_2)) = x_1 + x_2
   POL(gt_out_gg(x_1, x_2)) = x_1 + x_2
   POL(le_in_gg(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(le_out_gg(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(s(x_1)) = 2*x_1
   POL(zero) = 1


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GGA(A, X, B, Y, le_out_gg(A, B)) -> MERGE_IN_GGA(X, .(B, Y))
   MERGE_IN_GGA(.(A, X), .(B, Y)) -> U1_GGA(A, X, B, Y, le_in_gg(A, B))
   U3_GGA(A, X, B, Y, gt_out_gg(A, B)) -> MERGE_IN_GGA(.(A, X), Y)

The TRS R consists of the following rules:

   le_in_gg(s(X), s(Y)) -> U6_gg(X, Y, le_in_gg(X, Y))
   gt_in_gg(s(X), s(Y)) -> U5_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), zero) -> gt_out_gg(s(X), zero)
   U6_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U5_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))

The set Q consists of the following terms:

   le_in_gg(x0, x1)
   gt_in_gg(x0, x1)
   U6_gg(x0, x1, x2)
   U5_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGE_IN_GGA(.(A, X), .(B, Y)) -> U1_GGA(A, X, B, Y, le_in_gg(A, B))
   U1_GGA(A, X, B, Y, le_out_gg(A, B)) -> MERGE_IN_GGA(X, .(B, Y))

The TRS R consists of the following rules:

   le_in_gg(s(X), s(Y)) -> U6_gg(X, Y, le_in_gg(X, Y))
   gt_in_gg(s(X), s(Y)) -> U5_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), zero) -> gt_out_gg(s(X), zero)
   U6_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U5_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))

The set Q consists of the following terms:

   le_in_gg(x0, x1)
   gt_in_gg(x0, x1)
   U6_gg(x0, x1, x2)
   U5_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGE_IN_GGA(.(A, X), .(B, Y)) -> U1_GGA(A, X, B, Y, le_in_gg(A, B))
   U1_GGA(A, X, B, Y, le_out_gg(A, B)) -> MERGE_IN_GGA(X, .(B, Y))

The TRS R consists of the following rules:

   le_in_gg(s(X), s(Y)) -> U6_gg(X, Y, le_in_gg(X, Y))
   U6_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))

The set Q consists of the following terms:

   le_in_gg(x0, x1)
   gt_in_gg(x0, x1)
   U6_gg(x0, x1, x2)
   U5_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(32) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   gt_in_gg(x0, x1)
   U5_gg(x0, x1, x2)


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGE_IN_GGA(.(A, X), .(B, Y)) -> U1_GGA(A, X, B, Y, le_in_gg(A, B))
   U1_GGA(A, X, B, Y, le_out_gg(A, B)) -> MERGE_IN_GGA(X, .(B, Y))

The TRS R consists of the following rules:

   le_in_gg(s(X), s(Y)) -> U6_gg(X, Y, le_in_gg(X, Y))
   U6_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))

The set Q consists of the following terms:

   le_in_gg(x0, x1)
   U6_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(34) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U1_GGA(A, X, B, Y, le_out_gg(A, B)) -> MERGE_IN_GGA(X, .(B, Y))
The graph contains the following edges 2 >= 1


*MERGE_IN_GGA(.(A, X), .(B, Y)) -> U1_GGA(A, X, B, Y, le_in_gg(A, B))
The graph contains the following edges 1 > 1, 1 > 2, 2 > 3, 2 > 4


----------------------------------------

(35)
YES
