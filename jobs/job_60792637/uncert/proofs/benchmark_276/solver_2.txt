MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/4RUJM.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

sublist(g,g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) AND
        (7) PiDP
            (8) UsableRulesProof [EQUIVALENT, 0 ms]
            (9) PiDP
            (10) PiDPToQDPProof [SOUND, 0 ms]
            (11) QDP
            (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (13) YES
        (14) PiDP
            (15) UsableRulesProof [EQUIVALENT, 0 ms]
            (16) PiDP
            (17) PiDPToQDPProof [SOUND, 0 ms]
            (18) QDP
(19) PrologToPiTRSProof [SOUND, 0 ms]
(20) PiTRS
    (21) DependencyPairsProof [EQUIVALENT, 0 ms]
    (22) PiDP
    (23) DependencyGraphProof [EQUIVALENT, 0 ms]
    (24) AND
        (25) PiDP
            (26) UsableRulesProof [EQUIVALENT, 0 ms]
            (27) PiDP
            (28) PiDPToQDPProof [SOUND, 0 ms]
            (29) QDP
            (30) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (31) YES
        (32) PiDP
            (33) UsableRulesProof [EQUIVALENT, 0 ms]
            (34) PiDP
            (35) PiDPToQDPProof [SOUND, 0 ms]
            (36) QDP
(37) PrologToTRSTransformerProof [SOUND, 0 ms]
(38) QTRS
    (39) DependencyPairsProof [EQUIVALENT, 0 ms]
    (40) QDP
    (41) DependencyGraphProof [EQUIVALENT, 0 ms]
    (42) AND
        (43) QDP
            (44) UsableRulesProof [EQUIVALENT, 0 ms]
            (45) QDP
            (46) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (47) YES
        (48) QDP
            (49) UsableRulesProof [EQUIVALENT, 0 ms]
            (50) QDP
(51) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(52) AND
    (53) IRSwT
        (54) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (55) TRUE
    (56) IRSwT
        (57) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (58) IRSwT
        (59) IntTRSCompressionProof [EQUIVALENT, 8 ms]
        (60) IRSwT
        (61) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (62) IRSwT
        (63) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
        (64) IRSwT
        (65) FilterProof [EQUIVALENT, 0 ms]
        (66) IntTRS
        (67) IntTRSPeriodicNontermProof [COMPLETE, 3 ms]
        (68) NO
(69) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(70) TRIPLES
    (71) TriplesToPiDPProof [SOUND, 0 ms]
    (72) PiDP
    (73) DependencyGraphProof [EQUIVALENT, 0 ms]
    (74) AND
        (75) PiDP
            (76) UsableRulesProof [EQUIVALENT, 0 ms]
            (77) PiDP
            (78) PiDPToQDPProof [SOUND, 0 ms]
            (79) QDP
            (80) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (81) YES
        (82) PiDP
            (83) UsableRulesProof [EQUIVALENT, 0 ms]
            (84) PiDP
            (85) PiDPToQDPProof [SOUND, 0 ms]
            (86) QDP
        (87) PiDP
            (88) UsableRulesProof [EQUIVALENT, 0 ms]
            (89) PiDP


----------------------------------------

(0)
Obligation:
Clauses:

append1([], Ys, Ys).
append1(.(X, Xs), Ys, .(X, Zs)) :- append1(Xs, Ys, Zs).
append2([], Ys, Ys).
append2(.(X, Xs), Ys, .(X, Zs)) :- append2(Xs, Ys, Zs).
sublist(X, Y) :- ','(append1(U, X, V), append2(V, W, Y)).


Query: sublist(g,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

sublist_in_2: (b,b)

append1_in_3: (f,b,f)

append2_in_3: (b,f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   sublist_in_gg(X, Y) -> U3_gg(X, Y, append1_in_aga(U, X, V))
   append1_in_aga([], Ys, Ys) -> append1_out_aga([], Ys, Ys)
   append1_in_aga(.(X, Xs), Ys, .(X, Zs)) -> U1_aga(X, Xs, Ys, Zs, append1_in_aga(Xs, Ys, Zs))
   U1_aga(X, Xs, Ys, Zs, append1_out_aga(Xs, Ys, Zs)) -> append1_out_aga(.(X, Xs), Ys, .(X, Zs))
   U3_gg(X, Y, append1_out_aga(U, X, V)) -> U4_gg(X, Y, append2_in_gag(V, W, Y))
   append2_in_gag([], Ys, Ys) -> append2_out_gag([], Ys, Ys)
   append2_in_gag(.(X, Xs), Ys, .(X, Zs)) -> U2_gag(X, Xs, Ys, Zs, append2_in_gag(Xs, Ys, Zs))
   U2_gag(X, Xs, Ys, Zs, append2_out_gag(Xs, Ys, Zs)) -> append2_out_gag(.(X, Xs), Ys, .(X, Zs))
   U4_gg(X, Y, append2_out_gag(V, W, Y)) -> sublist_out_gg(X, Y)

The argument filtering Pi contains the following mapping:
sublist_in_gg(x1, x2)  =  sublist_in_gg(x1, x2)

U3_gg(x1, x2, x3)  =  U3_gg(x2, x3)

append1_in_aga(x1, x2, x3)  =  append1_in_aga(x2)

append1_out_aga(x1, x2, x3)  =  append1_out_aga(x1, x3)

U1_aga(x1, x2, x3, x4, x5)  =  U1_aga(x5)

.(x1, x2)  =  .(x2)

U4_gg(x1, x2, x3)  =  U4_gg(x3)

append2_in_gag(x1, x2, x3)  =  append2_in_gag(x1, x3)

[]  =  []

append2_out_gag(x1, x2, x3)  =  append2_out_gag(x2)

U2_gag(x1, x2, x3, x4, x5)  =  U2_gag(x5)

sublist_out_gg(x1, x2)  =  sublist_out_gg





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   sublist_in_gg(X, Y) -> U3_gg(X, Y, append1_in_aga(U, X, V))
   append1_in_aga([], Ys, Ys) -> append1_out_aga([], Ys, Ys)
   append1_in_aga(.(X, Xs), Ys, .(X, Zs)) -> U1_aga(X, Xs, Ys, Zs, append1_in_aga(Xs, Ys, Zs))
   U1_aga(X, Xs, Ys, Zs, append1_out_aga(Xs, Ys, Zs)) -> append1_out_aga(.(X, Xs), Ys, .(X, Zs))
   U3_gg(X, Y, append1_out_aga(U, X, V)) -> U4_gg(X, Y, append2_in_gag(V, W, Y))
   append2_in_gag([], Ys, Ys) -> append2_out_gag([], Ys, Ys)
   append2_in_gag(.(X, Xs), Ys, .(X, Zs)) -> U2_gag(X, Xs, Ys, Zs, append2_in_gag(Xs, Ys, Zs))
   U2_gag(X, Xs, Ys, Zs, append2_out_gag(Xs, Ys, Zs)) -> append2_out_gag(.(X, Xs), Ys, .(X, Zs))
   U4_gg(X, Y, append2_out_gag(V, W, Y)) -> sublist_out_gg(X, Y)

The argument filtering Pi contains the following mapping:
sublist_in_gg(x1, x2)  =  sublist_in_gg(x1, x2)

U3_gg(x1, x2, x3)  =  U3_gg(x2, x3)

append1_in_aga(x1, x2, x3)  =  append1_in_aga(x2)

append1_out_aga(x1, x2, x3)  =  append1_out_aga(x1, x3)

U1_aga(x1, x2, x3, x4, x5)  =  U1_aga(x5)

.(x1, x2)  =  .(x2)

U4_gg(x1, x2, x3)  =  U4_gg(x3)

append2_in_gag(x1, x2, x3)  =  append2_in_gag(x1, x3)

[]  =  []

append2_out_gag(x1, x2, x3)  =  append2_out_gag(x2)

U2_gag(x1, x2, x3, x4, x5)  =  U2_gag(x5)

sublist_out_gg(x1, x2)  =  sublist_out_gg



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   SUBLIST_IN_GG(X, Y) -> U3_GG(X, Y, append1_in_aga(U, X, V))
   SUBLIST_IN_GG(X, Y) -> APPEND1_IN_AGA(U, X, V)
   APPEND1_IN_AGA(.(X, Xs), Ys, .(X, Zs)) -> U1_AGA(X, Xs, Ys, Zs, append1_in_aga(Xs, Ys, Zs))
   APPEND1_IN_AGA(.(X, Xs), Ys, .(X, Zs)) -> APPEND1_IN_AGA(Xs, Ys, Zs)
   U3_GG(X, Y, append1_out_aga(U, X, V)) -> U4_GG(X, Y, append2_in_gag(V, W, Y))
   U3_GG(X, Y, append1_out_aga(U, X, V)) -> APPEND2_IN_GAG(V, W, Y)
   APPEND2_IN_GAG(.(X, Xs), Ys, .(X, Zs)) -> U2_GAG(X, Xs, Ys, Zs, append2_in_gag(Xs, Ys, Zs))
   APPEND2_IN_GAG(.(X, Xs), Ys, .(X, Zs)) -> APPEND2_IN_GAG(Xs, Ys, Zs)

The TRS R consists of the following rules:

   sublist_in_gg(X, Y) -> U3_gg(X, Y, append1_in_aga(U, X, V))
   append1_in_aga([], Ys, Ys) -> append1_out_aga([], Ys, Ys)
   append1_in_aga(.(X, Xs), Ys, .(X, Zs)) -> U1_aga(X, Xs, Ys, Zs, append1_in_aga(Xs, Ys, Zs))
   U1_aga(X, Xs, Ys, Zs, append1_out_aga(Xs, Ys, Zs)) -> append1_out_aga(.(X, Xs), Ys, .(X, Zs))
   U3_gg(X, Y, append1_out_aga(U, X, V)) -> U4_gg(X, Y, append2_in_gag(V, W, Y))
   append2_in_gag([], Ys, Ys) -> append2_out_gag([], Ys, Ys)
   append2_in_gag(.(X, Xs), Ys, .(X, Zs)) -> U2_gag(X, Xs, Ys, Zs, append2_in_gag(Xs, Ys, Zs))
   U2_gag(X, Xs, Ys, Zs, append2_out_gag(Xs, Ys, Zs)) -> append2_out_gag(.(X, Xs), Ys, .(X, Zs))
   U4_gg(X, Y, append2_out_gag(V, W, Y)) -> sublist_out_gg(X, Y)

The argument filtering Pi contains the following mapping:
sublist_in_gg(x1, x2)  =  sublist_in_gg(x1, x2)

U3_gg(x1, x2, x3)  =  U3_gg(x2, x3)

append1_in_aga(x1, x2, x3)  =  append1_in_aga(x2)

append1_out_aga(x1, x2, x3)  =  append1_out_aga(x1, x3)

U1_aga(x1, x2, x3, x4, x5)  =  U1_aga(x5)

.(x1, x2)  =  .(x2)

U4_gg(x1, x2, x3)  =  U4_gg(x3)

append2_in_gag(x1, x2, x3)  =  append2_in_gag(x1, x3)

[]  =  []

append2_out_gag(x1, x2, x3)  =  append2_out_gag(x2)

U2_gag(x1, x2, x3, x4, x5)  =  U2_gag(x5)

sublist_out_gg(x1, x2)  =  sublist_out_gg

SUBLIST_IN_GG(x1, x2)  =  SUBLIST_IN_GG(x1, x2)

U3_GG(x1, x2, x3)  =  U3_GG(x2, x3)

APPEND1_IN_AGA(x1, x2, x3)  =  APPEND1_IN_AGA(x2)

U1_AGA(x1, x2, x3, x4, x5)  =  U1_AGA(x5)

U4_GG(x1, x2, x3)  =  U4_GG(x3)

APPEND2_IN_GAG(x1, x2, x3)  =  APPEND2_IN_GAG(x1, x3)

U2_GAG(x1, x2, x3, x4, x5)  =  U2_GAG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUBLIST_IN_GG(X, Y) -> U3_GG(X, Y, append1_in_aga(U, X, V))
   SUBLIST_IN_GG(X, Y) -> APPEND1_IN_AGA(U, X, V)
   APPEND1_IN_AGA(.(X, Xs), Ys, .(X, Zs)) -> U1_AGA(X, Xs, Ys, Zs, append1_in_aga(Xs, Ys, Zs))
   APPEND1_IN_AGA(.(X, Xs), Ys, .(X, Zs)) -> APPEND1_IN_AGA(Xs, Ys, Zs)
   U3_GG(X, Y, append1_out_aga(U, X, V)) -> U4_GG(X, Y, append2_in_gag(V, W, Y))
   U3_GG(X, Y, append1_out_aga(U, X, V)) -> APPEND2_IN_GAG(V, W, Y)
   APPEND2_IN_GAG(.(X, Xs), Ys, .(X, Zs)) -> U2_GAG(X, Xs, Ys, Zs, append2_in_gag(Xs, Ys, Zs))
   APPEND2_IN_GAG(.(X, Xs), Ys, .(X, Zs)) -> APPEND2_IN_GAG(Xs, Ys, Zs)

The TRS R consists of the following rules:

   sublist_in_gg(X, Y) -> U3_gg(X, Y, append1_in_aga(U, X, V))
   append1_in_aga([], Ys, Ys) -> append1_out_aga([], Ys, Ys)
   append1_in_aga(.(X, Xs), Ys, .(X, Zs)) -> U1_aga(X, Xs, Ys, Zs, append1_in_aga(Xs, Ys, Zs))
   U1_aga(X, Xs, Ys, Zs, append1_out_aga(Xs, Ys, Zs)) -> append1_out_aga(.(X, Xs), Ys, .(X, Zs))
   U3_gg(X, Y, append1_out_aga(U, X, V)) -> U4_gg(X, Y, append2_in_gag(V, W, Y))
   append2_in_gag([], Ys, Ys) -> append2_out_gag([], Ys, Ys)
   append2_in_gag(.(X, Xs), Ys, .(X, Zs)) -> U2_gag(X, Xs, Ys, Zs, append2_in_gag(Xs, Ys, Zs))
   U2_gag(X, Xs, Ys, Zs, append2_out_gag(Xs, Ys, Zs)) -> append2_out_gag(.(X, Xs), Ys, .(X, Zs))
   U4_gg(X, Y, append2_out_gag(V, W, Y)) -> sublist_out_gg(X, Y)

The argument filtering Pi contains the following mapping:
sublist_in_gg(x1, x2)  =  sublist_in_gg(x1, x2)

U3_gg(x1, x2, x3)  =  U3_gg(x2, x3)

append1_in_aga(x1, x2, x3)  =  append1_in_aga(x2)

append1_out_aga(x1, x2, x3)  =  append1_out_aga(x1, x3)

U1_aga(x1, x2, x3, x4, x5)  =  U1_aga(x5)

.(x1, x2)  =  .(x2)

U4_gg(x1, x2, x3)  =  U4_gg(x3)

append2_in_gag(x1, x2, x3)  =  append2_in_gag(x1, x3)

[]  =  []

append2_out_gag(x1, x2, x3)  =  append2_out_gag(x2)

U2_gag(x1, x2, x3, x4, x5)  =  U2_gag(x5)

sublist_out_gg(x1, x2)  =  sublist_out_gg

SUBLIST_IN_GG(x1, x2)  =  SUBLIST_IN_GG(x1, x2)

U3_GG(x1, x2, x3)  =  U3_GG(x2, x3)

APPEND1_IN_AGA(x1, x2, x3)  =  APPEND1_IN_AGA(x2)

U1_AGA(x1, x2, x3, x4, x5)  =  U1_AGA(x5)

U4_GG(x1, x2, x3)  =  U4_GG(x3)

APPEND2_IN_GAG(x1, x2, x3)  =  APPEND2_IN_GAG(x1, x3)

U2_GAG(x1, x2, x3, x4, x5)  =  U2_GAG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND2_IN_GAG(.(X, Xs), Ys, .(X, Zs)) -> APPEND2_IN_GAG(Xs, Ys, Zs)

The TRS R consists of the following rules:

   sublist_in_gg(X, Y) -> U3_gg(X, Y, append1_in_aga(U, X, V))
   append1_in_aga([], Ys, Ys) -> append1_out_aga([], Ys, Ys)
   append1_in_aga(.(X, Xs), Ys, .(X, Zs)) -> U1_aga(X, Xs, Ys, Zs, append1_in_aga(Xs, Ys, Zs))
   U1_aga(X, Xs, Ys, Zs, append1_out_aga(Xs, Ys, Zs)) -> append1_out_aga(.(X, Xs), Ys, .(X, Zs))
   U3_gg(X, Y, append1_out_aga(U, X, V)) -> U4_gg(X, Y, append2_in_gag(V, W, Y))
   append2_in_gag([], Ys, Ys) -> append2_out_gag([], Ys, Ys)
   append2_in_gag(.(X, Xs), Ys, .(X, Zs)) -> U2_gag(X, Xs, Ys, Zs, append2_in_gag(Xs, Ys, Zs))
   U2_gag(X, Xs, Ys, Zs, append2_out_gag(Xs, Ys, Zs)) -> append2_out_gag(.(X, Xs), Ys, .(X, Zs))
   U4_gg(X, Y, append2_out_gag(V, W, Y)) -> sublist_out_gg(X, Y)

The argument filtering Pi contains the following mapping:
sublist_in_gg(x1, x2)  =  sublist_in_gg(x1, x2)

U3_gg(x1, x2, x3)  =  U3_gg(x2, x3)

append1_in_aga(x1, x2, x3)  =  append1_in_aga(x2)

append1_out_aga(x1, x2, x3)  =  append1_out_aga(x1, x3)

U1_aga(x1, x2, x3, x4, x5)  =  U1_aga(x5)

.(x1, x2)  =  .(x2)

U4_gg(x1, x2, x3)  =  U4_gg(x3)

append2_in_gag(x1, x2, x3)  =  append2_in_gag(x1, x3)

[]  =  []

append2_out_gag(x1, x2, x3)  =  append2_out_gag(x2)

U2_gag(x1, x2, x3, x4, x5)  =  U2_gag(x5)

sublist_out_gg(x1, x2)  =  sublist_out_gg

APPEND2_IN_GAG(x1, x2, x3)  =  APPEND2_IN_GAG(x1, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND2_IN_GAG(.(X, Xs), Ys, .(X, Zs)) -> APPEND2_IN_GAG(Xs, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPEND2_IN_GAG(x1, x2, x3)  =  APPEND2_IN_GAG(x1, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND2_IN_GAG(.(Xs), .(Zs)) -> APPEND2_IN_GAG(Xs, Zs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPEND2_IN_GAG(.(Xs), .(Zs)) -> APPEND2_IN_GAG(Xs, Zs)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND1_IN_AGA(.(X, Xs), Ys, .(X, Zs)) -> APPEND1_IN_AGA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   sublist_in_gg(X, Y) -> U3_gg(X, Y, append1_in_aga(U, X, V))
   append1_in_aga([], Ys, Ys) -> append1_out_aga([], Ys, Ys)
   append1_in_aga(.(X, Xs), Ys, .(X, Zs)) -> U1_aga(X, Xs, Ys, Zs, append1_in_aga(Xs, Ys, Zs))
   U1_aga(X, Xs, Ys, Zs, append1_out_aga(Xs, Ys, Zs)) -> append1_out_aga(.(X, Xs), Ys, .(X, Zs))
   U3_gg(X, Y, append1_out_aga(U, X, V)) -> U4_gg(X, Y, append2_in_gag(V, W, Y))
   append2_in_gag([], Ys, Ys) -> append2_out_gag([], Ys, Ys)
   append2_in_gag(.(X, Xs), Ys, .(X, Zs)) -> U2_gag(X, Xs, Ys, Zs, append2_in_gag(Xs, Ys, Zs))
   U2_gag(X, Xs, Ys, Zs, append2_out_gag(Xs, Ys, Zs)) -> append2_out_gag(.(X, Xs), Ys, .(X, Zs))
   U4_gg(X, Y, append2_out_gag(V, W, Y)) -> sublist_out_gg(X, Y)

The argument filtering Pi contains the following mapping:
sublist_in_gg(x1, x2)  =  sublist_in_gg(x1, x2)

U3_gg(x1, x2, x3)  =  U3_gg(x2, x3)

append1_in_aga(x1, x2, x3)  =  append1_in_aga(x2)

append1_out_aga(x1, x2, x3)  =  append1_out_aga(x1, x3)

U1_aga(x1, x2, x3, x4, x5)  =  U1_aga(x5)

.(x1, x2)  =  .(x2)

U4_gg(x1, x2, x3)  =  U4_gg(x3)

append2_in_gag(x1, x2, x3)  =  append2_in_gag(x1, x3)

[]  =  []

append2_out_gag(x1, x2, x3)  =  append2_out_gag(x2)

U2_gag(x1, x2, x3, x4, x5)  =  U2_gag(x5)

sublist_out_gg(x1, x2)  =  sublist_out_gg

APPEND1_IN_AGA(x1, x2, x3)  =  APPEND1_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND1_IN_AGA(.(X, Xs), Ys, .(X, Zs)) -> APPEND1_IN_AGA(Xs, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPEND1_IN_AGA(x1, x2, x3)  =  APPEND1_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND1_IN_AGA(Ys) -> APPEND1_IN_AGA(Ys)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

sublist_in_2: (b,b)

append1_in_3: (f,b,f)

append2_in_3: (b,f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   sublist_in_gg(X, Y) -> U3_gg(X, Y, append1_in_aga(U, X, V))
   append1_in_aga([], Ys, Ys) -> append1_out_aga([], Ys, Ys)
   append1_in_aga(.(X, Xs), Ys, .(X, Zs)) -> U1_aga(X, Xs, Ys, Zs, append1_in_aga(Xs, Ys, Zs))
   U1_aga(X, Xs, Ys, Zs, append1_out_aga(Xs, Ys, Zs)) -> append1_out_aga(.(X, Xs), Ys, .(X, Zs))
   U3_gg(X, Y, append1_out_aga(U, X, V)) -> U4_gg(X, Y, append2_in_gag(V, W, Y))
   append2_in_gag([], Ys, Ys) -> append2_out_gag([], Ys, Ys)
   append2_in_gag(.(X, Xs), Ys, .(X, Zs)) -> U2_gag(X, Xs, Ys, Zs, append2_in_gag(Xs, Ys, Zs))
   U2_gag(X, Xs, Ys, Zs, append2_out_gag(Xs, Ys, Zs)) -> append2_out_gag(.(X, Xs), Ys, .(X, Zs))
   U4_gg(X, Y, append2_out_gag(V, W, Y)) -> sublist_out_gg(X, Y)

The argument filtering Pi contains the following mapping:
sublist_in_gg(x1, x2)  =  sublist_in_gg(x1, x2)

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

append1_in_aga(x1, x2, x3)  =  append1_in_aga(x2)

append1_out_aga(x1, x2, x3)  =  append1_out_aga(x1, x2, x3)

U1_aga(x1, x2, x3, x4, x5)  =  U1_aga(x3, x5)

.(x1, x2)  =  .(x2)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

append2_in_gag(x1, x2, x3)  =  append2_in_gag(x1, x3)

[]  =  []

append2_out_gag(x1, x2, x3)  =  append2_out_gag(x1, x2, x3)

U2_gag(x1, x2, x3, x4, x5)  =  U2_gag(x2, x4, x5)

sublist_out_gg(x1, x2)  =  sublist_out_gg(x1, x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(20)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   sublist_in_gg(X, Y) -> U3_gg(X, Y, append1_in_aga(U, X, V))
   append1_in_aga([], Ys, Ys) -> append1_out_aga([], Ys, Ys)
   append1_in_aga(.(X, Xs), Ys, .(X, Zs)) -> U1_aga(X, Xs, Ys, Zs, append1_in_aga(Xs, Ys, Zs))
   U1_aga(X, Xs, Ys, Zs, append1_out_aga(Xs, Ys, Zs)) -> append1_out_aga(.(X, Xs), Ys, .(X, Zs))
   U3_gg(X, Y, append1_out_aga(U, X, V)) -> U4_gg(X, Y, append2_in_gag(V, W, Y))
   append2_in_gag([], Ys, Ys) -> append2_out_gag([], Ys, Ys)
   append2_in_gag(.(X, Xs), Ys, .(X, Zs)) -> U2_gag(X, Xs, Ys, Zs, append2_in_gag(Xs, Ys, Zs))
   U2_gag(X, Xs, Ys, Zs, append2_out_gag(Xs, Ys, Zs)) -> append2_out_gag(.(X, Xs), Ys, .(X, Zs))
   U4_gg(X, Y, append2_out_gag(V, W, Y)) -> sublist_out_gg(X, Y)

The argument filtering Pi contains the following mapping:
sublist_in_gg(x1, x2)  =  sublist_in_gg(x1, x2)

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

append1_in_aga(x1, x2, x3)  =  append1_in_aga(x2)

append1_out_aga(x1, x2, x3)  =  append1_out_aga(x1, x2, x3)

U1_aga(x1, x2, x3, x4, x5)  =  U1_aga(x3, x5)

.(x1, x2)  =  .(x2)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

append2_in_gag(x1, x2, x3)  =  append2_in_gag(x1, x3)

[]  =  []

append2_out_gag(x1, x2, x3)  =  append2_out_gag(x1, x2, x3)

U2_gag(x1, x2, x3, x4, x5)  =  U2_gag(x2, x4, x5)

sublist_out_gg(x1, x2)  =  sublist_out_gg(x1, x2)



----------------------------------------

(21) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   SUBLIST_IN_GG(X, Y) -> U3_GG(X, Y, append1_in_aga(U, X, V))
   SUBLIST_IN_GG(X, Y) -> APPEND1_IN_AGA(U, X, V)
   APPEND1_IN_AGA(.(X, Xs), Ys, .(X, Zs)) -> U1_AGA(X, Xs, Ys, Zs, append1_in_aga(Xs, Ys, Zs))
   APPEND1_IN_AGA(.(X, Xs), Ys, .(X, Zs)) -> APPEND1_IN_AGA(Xs, Ys, Zs)
   U3_GG(X, Y, append1_out_aga(U, X, V)) -> U4_GG(X, Y, append2_in_gag(V, W, Y))
   U3_GG(X, Y, append1_out_aga(U, X, V)) -> APPEND2_IN_GAG(V, W, Y)
   APPEND2_IN_GAG(.(X, Xs), Ys, .(X, Zs)) -> U2_GAG(X, Xs, Ys, Zs, append2_in_gag(Xs, Ys, Zs))
   APPEND2_IN_GAG(.(X, Xs), Ys, .(X, Zs)) -> APPEND2_IN_GAG(Xs, Ys, Zs)

The TRS R consists of the following rules:

   sublist_in_gg(X, Y) -> U3_gg(X, Y, append1_in_aga(U, X, V))
   append1_in_aga([], Ys, Ys) -> append1_out_aga([], Ys, Ys)
   append1_in_aga(.(X, Xs), Ys, .(X, Zs)) -> U1_aga(X, Xs, Ys, Zs, append1_in_aga(Xs, Ys, Zs))
   U1_aga(X, Xs, Ys, Zs, append1_out_aga(Xs, Ys, Zs)) -> append1_out_aga(.(X, Xs), Ys, .(X, Zs))
   U3_gg(X, Y, append1_out_aga(U, X, V)) -> U4_gg(X, Y, append2_in_gag(V, W, Y))
   append2_in_gag([], Ys, Ys) -> append2_out_gag([], Ys, Ys)
   append2_in_gag(.(X, Xs), Ys, .(X, Zs)) -> U2_gag(X, Xs, Ys, Zs, append2_in_gag(Xs, Ys, Zs))
   U2_gag(X, Xs, Ys, Zs, append2_out_gag(Xs, Ys, Zs)) -> append2_out_gag(.(X, Xs), Ys, .(X, Zs))
   U4_gg(X, Y, append2_out_gag(V, W, Y)) -> sublist_out_gg(X, Y)

The argument filtering Pi contains the following mapping:
sublist_in_gg(x1, x2)  =  sublist_in_gg(x1, x2)

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

append1_in_aga(x1, x2, x3)  =  append1_in_aga(x2)

append1_out_aga(x1, x2, x3)  =  append1_out_aga(x1, x2, x3)

U1_aga(x1, x2, x3, x4, x5)  =  U1_aga(x3, x5)

.(x1, x2)  =  .(x2)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

append2_in_gag(x1, x2, x3)  =  append2_in_gag(x1, x3)

[]  =  []

append2_out_gag(x1, x2, x3)  =  append2_out_gag(x1, x2, x3)

U2_gag(x1, x2, x3, x4, x5)  =  U2_gag(x2, x4, x5)

sublist_out_gg(x1, x2)  =  sublist_out_gg(x1, x2)

SUBLIST_IN_GG(x1, x2)  =  SUBLIST_IN_GG(x1, x2)

U3_GG(x1, x2, x3)  =  U3_GG(x1, x2, x3)

APPEND1_IN_AGA(x1, x2, x3)  =  APPEND1_IN_AGA(x2)

U1_AGA(x1, x2, x3, x4, x5)  =  U1_AGA(x3, x5)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)

APPEND2_IN_GAG(x1, x2, x3)  =  APPEND2_IN_GAG(x1, x3)

U2_GAG(x1, x2, x3, x4, x5)  =  U2_GAG(x2, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUBLIST_IN_GG(X, Y) -> U3_GG(X, Y, append1_in_aga(U, X, V))
   SUBLIST_IN_GG(X, Y) -> APPEND1_IN_AGA(U, X, V)
   APPEND1_IN_AGA(.(X, Xs), Ys, .(X, Zs)) -> U1_AGA(X, Xs, Ys, Zs, append1_in_aga(Xs, Ys, Zs))
   APPEND1_IN_AGA(.(X, Xs), Ys, .(X, Zs)) -> APPEND1_IN_AGA(Xs, Ys, Zs)
   U3_GG(X, Y, append1_out_aga(U, X, V)) -> U4_GG(X, Y, append2_in_gag(V, W, Y))
   U3_GG(X, Y, append1_out_aga(U, X, V)) -> APPEND2_IN_GAG(V, W, Y)
   APPEND2_IN_GAG(.(X, Xs), Ys, .(X, Zs)) -> U2_GAG(X, Xs, Ys, Zs, append2_in_gag(Xs, Ys, Zs))
   APPEND2_IN_GAG(.(X, Xs), Ys, .(X, Zs)) -> APPEND2_IN_GAG(Xs, Ys, Zs)

The TRS R consists of the following rules:

   sublist_in_gg(X, Y) -> U3_gg(X, Y, append1_in_aga(U, X, V))
   append1_in_aga([], Ys, Ys) -> append1_out_aga([], Ys, Ys)
   append1_in_aga(.(X, Xs), Ys, .(X, Zs)) -> U1_aga(X, Xs, Ys, Zs, append1_in_aga(Xs, Ys, Zs))
   U1_aga(X, Xs, Ys, Zs, append1_out_aga(Xs, Ys, Zs)) -> append1_out_aga(.(X, Xs), Ys, .(X, Zs))
   U3_gg(X, Y, append1_out_aga(U, X, V)) -> U4_gg(X, Y, append2_in_gag(V, W, Y))
   append2_in_gag([], Ys, Ys) -> append2_out_gag([], Ys, Ys)
   append2_in_gag(.(X, Xs), Ys, .(X, Zs)) -> U2_gag(X, Xs, Ys, Zs, append2_in_gag(Xs, Ys, Zs))
   U2_gag(X, Xs, Ys, Zs, append2_out_gag(Xs, Ys, Zs)) -> append2_out_gag(.(X, Xs), Ys, .(X, Zs))
   U4_gg(X, Y, append2_out_gag(V, W, Y)) -> sublist_out_gg(X, Y)

The argument filtering Pi contains the following mapping:
sublist_in_gg(x1, x2)  =  sublist_in_gg(x1, x2)

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

append1_in_aga(x1, x2, x3)  =  append1_in_aga(x2)

append1_out_aga(x1, x2, x3)  =  append1_out_aga(x1, x2, x3)

U1_aga(x1, x2, x3, x4, x5)  =  U1_aga(x3, x5)

.(x1, x2)  =  .(x2)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

append2_in_gag(x1, x2, x3)  =  append2_in_gag(x1, x3)

[]  =  []

append2_out_gag(x1, x2, x3)  =  append2_out_gag(x1, x2, x3)

U2_gag(x1, x2, x3, x4, x5)  =  U2_gag(x2, x4, x5)

sublist_out_gg(x1, x2)  =  sublist_out_gg(x1, x2)

SUBLIST_IN_GG(x1, x2)  =  SUBLIST_IN_GG(x1, x2)

U3_GG(x1, x2, x3)  =  U3_GG(x1, x2, x3)

APPEND1_IN_AGA(x1, x2, x3)  =  APPEND1_IN_AGA(x2)

U1_AGA(x1, x2, x3, x4, x5)  =  U1_AGA(x3, x5)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)

APPEND2_IN_GAG(x1, x2, x3)  =  APPEND2_IN_GAG(x1, x3)

U2_GAG(x1, x2, x3, x4, x5)  =  U2_GAG(x2, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(23) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(24)
Complex Obligation (AND)

----------------------------------------

(25)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND2_IN_GAG(.(X, Xs), Ys, .(X, Zs)) -> APPEND2_IN_GAG(Xs, Ys, Zs)

The TRS R consists of the following rules:

   sublist_in_gg(X, Y) -> U3_gg(X, Y, append1_in_aga(U, X, V))
   append1_in_aga([], Ys, Ys) -> append1_out_aga([], Ys, Ys)
   append1_in_aga(.(X, Xs), Ys, .(X, Zs)) -> U1_aga(X, Xs, Ys, Zs, append1_in_aga(Xs, Ys, Zs))
   U1_aga(X, Xs, Ys, Zs, append1_out_aga(Xs, Ys, Zs)) -> append1_out_aga(.(X, Xs), Ys, .(X, Zs))
   U3_gg(X, Y, append1_out_aga(U, X, V)) -> U4_gg(X, Y, append2_in_gag(V, W, Y))
   append2_in_gag([], Ys, Ys) -> append2_out_gag([], Ys, Ys)
   append2_in_gag(.(X, Xs), Ys, .(X, Zs)) -> U2_gag(X, Xs, Ys, Zs, append2_in_gag(Xs, Ys, Zs))
   U2_gag(X, Xs, Ys, Zs, append2_out_gag(Xs, Ys, Zs)) -> append2_out_gag(.(X, Xs), Ys, .(X, Zs))
   U4_gg(X, Y, append2_out_gag(V, W, Y)) -> sublist_out_gg(X, Y)

The argument filtering Pi contains the following mapping:
sublist_in_gg(x1, x2)  =  sublist_in_gg(x1, x2)

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

append1_in_aga(x1, x2, x3)  =  append1_in_aga(x2)

append1_out_aga(x1, x2, x3)  =  append1_out_aga(x1, x2, x3)

U1_aga(x1, x2, x3, x4, x5)  =  U1_aga(x3, x5)

.(x1, x2)  =  .(x2)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

append2_in_gag(x1, x2, x3)  =  append2_in_gag(x1, x3)

[]  =  []

append2_out_gag(x1, x2, x3)  =  append2_out_gag(x1, x2, x3)

U2_gag(x1, x2, x3, x4, x5)  =  U2_gag(x2, x4, x5)

sublist_out_gg(x1, x2)  =  sublist_out_gg(x1, x2)

APPEND2_IN_GAG(x1, x2, x3)  =  APPEND2_IN_GAG(x1, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(27)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND2_IN_GAG(.(X, Xs), Ys, .(X, Zs)) -> APPEND2_IN_GAG(Xs, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPEND2_IN_GAG(x1, x2, x3)  =  APPEND2_IN_GAG(x1, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(28) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND2_IN_GAG(.(Xs), .(Zs)) -> APPEND2_IN_GAG(Xs, Zs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPEND2_IN_GAG(.(Xs), .(Zs)) -> APPEND2_IN_GAG(Xs, Zs)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND1_IN_AGA(.(X, Xs), Ys, .(X, Zs)) -> APPEND1_IN_AGA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   sublist_in_gg(X, Y) -> U3_gg(X, Y, append1_in_aga(U, X, V))
   append1_in_aga([], Ys, Ys) -> append1_out_aga([], Ys, Ys)
   append1_in_aga(.(X, Xs), Ys, .(X, Zs)) -> U1_aga(X, Xs, Ys, Zs, append1_in_aga(Xs, Ys, Zs))
   U1_aga(X, Xs, Ys, Zs, append1_out_aga(Xs, Ys, Zs)) -> append1_out_aga(.(X, Xs), Ys, .(X, Zs))
   U3_gg(X, Y, append1_out_aga(U, X, V)) -> U4_gg(X, Y, append2_in_gag(V, W, Y))
   append2_in_gag([], Ys, Ys) -> append2_out_gag([], Ys, Ys)
   append2_in_gag(.(X, Xs), Ys, .(X, Zs)) -> U2_gag(X, Xs, Ys, Zs, append2_in_gag(Xs, Ys, Zs))
   U2_gag(X, Xs, Ys, Zs, append2_out_gag(Xs, Ys, Zs)) -> append2_out_gag(.(X, Xs), Ys, .(X, Zs))
   U4_gg(X, Y, append2_out_gag(V, W, Y)) -> sublist_out_gg(X, Y)

The argument filtering Pi contains the following mapping:
sublist_in_gg(x1, x2)  =  sublist_in_gg(x1, x2)

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

append1_in_aga(x1, x2, x3)  =  append1_in_aga(x2)

append1_out_aga(x1, x2, x3)  =  append1_out_aga(x1, x2, x3)

U1_aga(x1, x2, x3, x4, x5)  =  U1_aga(x3, x5)

.(x1, x2)  =  .(x2)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

append2_in_gag(x1, x2, x3)  =  append2_in_gag(x1, x3)

[]  =  []

append2_out_gag(x1, x2, x3)  =  append2_out_gag(x1, x2, x3)

U2_gag(x1, x2, x3, x4, x5)  =  U2_gag(x2, x4, x5)

sublist_out_gg(x1, x2)  =  sublist_out_gg(x1, x2)

APPEND1_IN_AGA(x1, x2, x3)  =  APPEND1_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(33) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(34)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND1_IN_AGA(.(X, Xs), Ys, .(X, Zs)) -> APPEND1_IN_AGA(Xs, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPEND1_IN_AGA(x1, x2, x3)  =  APPEND1_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(35) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND1_IN_AGA(Ys) -> APPEND1_IN_AGA(Ys)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(37) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(append1 ([]) Ys Ys)",
                null
            ],
            [
                "(append1 (. X Xs) Ys (. X Zs))",
                "(append1 Xs Ys Zs)"
            ],
            [
                "(append2 ([]) Ys Ys)",
                null
            ],
            [
                "(append2 (. X Xs) Ys (. X Zs))",
                "(append2 Xs Ys Zs)"
            ],
            [
                "(sublist X Y)",
                "(',' (append1 U X V) (append2 V W Y))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "type": "Nodes",
            "260": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "261": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "196": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (append1 X13 T9 X14) (append2 X14 X15 T10))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T9",
                        "T10"
                    ],
                    "free": [
                        "X13",
                        "X14",
                        "X15"
                    ],
                    "exprvars": []
                }
            },
            "198": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append1 X13 T9 X14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": [
                        "X13",
                        "X14"
                    ],
                    "exprvars": []
                }
            },
            "253": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "254": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "255": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append1 X45 T24 X46)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T24"],
                    "free": [
                        "X45",
                        "X46"
                    ],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(sublist T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T1",
                        "T2"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "201": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append2 T14 X15 T10)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": ["X15"],
                    "exprvars": []
                }
            },
            "245": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(append1 X13 T9 X14)"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(append1 X13 T9 X14)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": [
                        "X13",
                        "X14"
                    ],
                    "exprvars": []
                }
            },
            "256": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 3,
                        "term": "(append2 T14 X15 T10)"
                    },
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(append2 T14 X15 T10)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": ["X15"],
                    "exprvars": []
                }
            },
            "278": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append2 T42 X76 T41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T41"],
                    "free": ["X76"],
                    "exprvars": []
                }
            },
            "257": {
                "goal": [{
                    "clause": 2,
                    "scope": 3,
                    "term": "(append2 T14 X15 T10)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": ["X15"],
                    "exprvars": []
                }
            },
            "279": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "247": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(append1 X13 T9 X14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": [
                        "X13",
                        "X14"
                    ],
                    "exprvars": []
                }
            },
            "258": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(append2 T14 X15 T10)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": ["X15"],
                    "exprvars": []
                }
            },
            "248": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(append1 X13 T9 X14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": [
                        "X13",
                        "X14"
                    ],
                    "exprvars": []
                }
            },
            "259": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [{
                    "clause": 4,
                    "scope": 1,
                    "term": "(sublist T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T1",
                        "T2"
                    ],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 8,
                "label": "CASE"
            },
            {
                "from": 8,
                "to": 196,
                "label": "ONLY EVAL with clause\nsublist(X11, X12) :- ','(append1(X13, X11, X14), append2(X14, X15, X12)).\nand substitutionT1 -> T9,\nX11 -> T9,\nT2 -> T10,\nX12 -> T10"
            },
            {
                "from": 196,
                "to": 198,
                "label": "SPLIT 1"
            },
            {
                "from": 196,
                "to": 201,
                "label": "SPLIT 2\nnew knowledge:\nT9 is ground\nreplacements:X13 -> T13,\nX14 -> T14"
            },
            {
                "from": 198,
                "to": 245,
                "label": "CASE"
            },
            {
                "from": 201,
                "to": 256,
                "label": "CASE"
            },
            {
                "from": 245,
                "to": 247,
                "label": "PARALLEL"
            },
            {
                "from": 245,
                "to": 248,
                "label": "PARALLEL"
            },
            {
                "from": 247,
                "to": 253,
                "label": "ONLY EVAL with clause\nappend1([], X24, X24).\nand substitutionX13 -> [],\nT9 -> T20,\nX24 -> T20,\nX14 -> T20"
            },
            {
                "from": 248,
                "to": 255,
                "label": "ONLY EVAL with clause\nappend1(.(X40, X41), X42, .(X40, X43)) :- append1(X41, X42, X43).\nand substitutionX40 -> X44,\nX41 -> X45,\nX13 -> .(X44, X45),\nT9 -> T24,\nX42 -> T24,\nX43 -> X46,\nX14 -> .(X44, X46)"
            },
            {
                "from": 253,
                "to": 254,
                "label": "SUCCESS"
            },
            {
                "from": 255,
                "to": 198,
                "label": "INSTANCE with matching:\nX13 -> X45\nT9 -> T24\nX14 -> X46"
            },
            {
                "from": 256,
                "to": 257,
                "label": "PARALLEL"
            },
            {
                "from": 256,
                "to": 258,
                "label": "PARALLEL"
            },
            {
                "from": 257,
                "to": 259,
                "label": "EVAL with clause\nappend2([], X60, X60).\nand substitutionT14 -> [],\nX15 -> T32,\nX60 -> T32,\nT10 -> T32,\nX61 -> T32"
            },
            {
                "from": 257,
                "to": 260,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 258,
                "to": 278,
                "label": "EVAL with clause\nappend2(.(X72, X73), X74, .(X72, X75)) :- append2(X73, X74, X75).\nand substitutionX72 -> T39,\nX73 -> T42,\nT14 -> .(T39, T42),\nX15 -> X76,\nX74 -> X76,\nX75 -> T41,\nT10 -> .(T39, T41),\nT40 -> T42"
            },
            {
                "from": 258,
                "to": 279,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 259,
                "to": 261,
                "label": "SUCCESS"
            },
            {
                "from": 278,
                "to": 201,
                "label": "INSTANCE with matching:\nT14 -> T42\nX15 -> X76\nT10 -> T41"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(38)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f3_in(T9, T10) -> U1(f196_in(T9, T10), T9, T10)
   U1(f196_out1(X14, X15), T9, T10) -> f3_out1
   f198_in(T20) -> f198_out1
   f198_in(T24) -> U2(f198_in(T24), T24)
   U2(f198_out1, T24) -> f198_out1
   f201_in(T32) -> f201_out1([], T32)
   f201_in(.(T39, T41)) -> U3(f201_in(T41), .(T39, T41))
   U3(f201_out1(T42, X76), .(T39, T41)) -> f201_out1(.(T39, T42), X76)
   f196_in(T9, T10) -> U4(f198_in(T9), T9, T10)
   U4(f198_out1, T9, T10) -> U5(f201_in(T10), T9, T10)
   U5(f201_out1(T14, X15), T9, T10) -> f196_out1(T14, X15)

Q is empty.

----------------------------------------

(39) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F3_IN(T9, T10) -> U1^1(f196_in(T9, T10), T9, T10)
   F3_IN(T9, T10) -> F196_IN(T9, T10)
   F198_IN(T24) -> U2^1(f198_in(T24), T24)
   F198_IN(T24) -> F198_IN(T24)
   F201_IN(.(T39, T41)) -> U3^1(f201_in(T41), .(T39, T41))
   F201_IN(.(T39, T41)) -> F201_IN(T41)
   F196_IN(T9, T10) -> U4^1(f198_in(T9), T9, T10)
   F196_IN(T9, T10) -> F198_IN(T9)
   U4^1(f198_out1, T9, T10) -> U5^1(f201_in(T10), T9, T10)
   U4^1(f198_out1, T9, T10) -> F201_IN(T10)

The TRS R consists of the following rules:

   f3_in(T9, T10) -> U1(f196_in(T9, T10), T9, T10)
   U1(f196_out1(X14, X15), T9, T10) -> f3_out1
   f198_in(T20) -> f198_out1
   f198_in(T24) -> U2(f198_in(T24), T24)
   U2(f198_out1, T24) -> f198_out1
   f201_in(T32) -> f201_out1([], T32)
   f201_in(.(T39, T41)) -> U3(f201_in(T41), .(T39, T41))
   U3(f201_out1(T42, X76), .(T39, T41)) -> f201_out1(.(T39, T42), X76)
   f196_in(T9, T10) -> U4(f198_in(T9), T9, T10)
   U4(f198_out1, T9, T10) -> U5(f201_in(T10), T9, T10)
   U5(f201_out1(T14, X15), T9, T10) -> f196_out1(T14, X15)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 8 less nodes.
----------------------------------------

(42)
Complex Obligation (AND)

----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F201_IN(.(T39, T41)) -> F201_IN(T41)

The TRS R consists of the following rules:

   f3_in(T9, T10) -> U1(f196_in(T9, T10), T9, T10)
   U1(f196_out1(X14, X15), T9, T10) -> f3_out1
   f198_in(T20) -> f198_out1
   f198_in(T24) -> U2(f198_in(T24), T24)
   U2(f198_out1, T24) -> f198_out1
   f201_in(T32) -> f201_out1([], T32)
   f201_in(.(T39, T41)) -> U3(f201_in(T41), .(T39, T41))
   U3(f201_out1(T42, X76), .(T39, T41)) -> f201_out1(.(T39, T42), X76)
   f196_in(T9, T10) -> U4(f198_in(T9), T9, T10)
   U4(f198_out1, T9, T10) -> U5(f201_in(T10), T9, T10)
   U5(f201_out1(T14, X15), T9, T10) -> f196_out1(T14, X15)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(44) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F201_IN(.(T39, T41)) -> F201_IN(T41)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(46) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F201_IN(.(T39, T41)) -> F201_IN(T41)
The graph contains the following edges 1 > 1


----------------------------------------

(47)
YES

----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F198_IN(T24) -> F198_IN(T24)

The TRS R consists of the following rules:

   f3_in(T9, T10) -> U1(f196_in(T9, T10), T9, T10)
   U1(f196_out1(X14, X15), T9, T10) -> f3_out1
   f198_in(T20) -> f198_out1
   f198_in(T24) -> U2(f198_in(T24), T24)
   U2(f198_out1, T24) -> f198_out1
   f201_in(T32) -> f201_out1([], T32)
   f201_in(.(T39, T41)) -> U3(f201_in(T41), .(T39, T41))
   U3(f201_out1(T42, X76), .(T39, T41)) -> f201_out1(.(T39, T42), X76)
   f196_in(T9, T10) -> U4(f198_in(T9), T9, T10)
   U4(f198_out1, T9, T10) -> U5(f201_in(T10), T9, T10)
   U5(f201_out1(T14, X15), T9, T10) -> f196_out1(T14, X15)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(49) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F198_IN(T24) -> F198_IN(T24)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(append1 ([]) Ys Ys)",
                null
            ],
            [
                "(append1 (. X Xs) Ys (. X Zs))",
                "(append1 Xs Ys Zs)"
            ],
            [
                "(append2 ([]) Ys Ys)",
                null
            ],
            [
                "(append2 (. X Xs) Ys (. X Zs))",
                "(append2 Xs Ys Zs)"
            ],
            [
                "(sublist X Y)",
                "(',' (append1 U X V) (append2 V W Y))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "type": "Nodes",
            "195": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (append1 X13 T9 X14) (append2 X14 X15 T10))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T9",
                        "T10"
                    ],
                    "free": [
                        "X13",
                        "X14",
                        "X15"
                    ],
                    "exprvars": []
                }
            },
            "220": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append2 T42 X76 T41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T41"],
                    "free": ["X76"],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(sublist T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T1",
                        "T2"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "199": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append1 X13 T9 X14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": [
                        "X13",
                        "X14"
                    ],
                    "exprvars": []
                }
            },
            "210": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append1 X45 T24 X46)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T24"],
                    "free": [
                        "X45",
                        "X46"
                    ],
                    "exprvars": []
                }
            },
            "221": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "200": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append2 T14 X15 T10)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": ["X15"],
                    "exprvars": []
                }
            },
            "211": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 3,
                        "term": "(append2 T14 X15 T10)"
                    },
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(append2 T14 X15 T10)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": ["X15"],
                    "exprvars": []
                }
            },
            "212": {
                "goal": [{
                    "clause": 2,
                    "scope": 3,
                    "term": "(append2 T14 X15 T10)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": ["X15"],
                    "exprvars": []
                }
            },
            "213": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(append2 T14 X15 T10)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": ["X15"],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [{
                    "clause": 4,
                    "scope": 1,
                    "term": "(sublist T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T1",
                        "T2"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "214": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "215": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "205": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(append1 X13 T9 X14)"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(append1 X13 T9 X14)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": [
                        "X13",
                        "X14"
                    ],
                    "exprvars": []
                }
            },
            "216": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "206": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(append1 X13 T9 X14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": [
                        "X13",
                        "X14"
                    ],
                    "exprvars": []
                }
            },
            "207": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(append1 X13 T9 X14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": [
                        "X13",
                        "X14"
                    ],
                    "exprvars": []
                }
            },
            "208": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "209": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 195,
                "label": "ONLY EVAL with clause\nsublist(X11, X12) :- ','(append1(X13, X11, X14), append2(X14, X15, X12)).\nand substitutionT1 -> T9,\nX11 -> T9,\nT2 -> T10,\nX12 -> T10"
            },
            {
                "from": 195,
                "to": 199,
                "label": "SPLIT 1"
            },
            {
                "from": 195,
                "to": 200,
                "label": "SPLIT 2\nnew knowledge:\nT9 is ground\nreplacements:X13 -> T13,\nX14 -> T14"
            },
            {
                "from": 199,
                "to": 205,
                "label": "CASE"
            },
            {
                "from": 200,
                "to": 211,
                "label": "CASE"
            },
            {
                "from": 205,
                "to": 206,
                "label": "PARALLEL"
            },
            {
                "from": 205,
                "to": 207,
                "label": "PARALLEL"
            },
            {
                "from": 206,
                "to": 208,
                "label": "ONLY EVAL with clause\nappend1([], X24, X24).\nand substitutionX13 -> [],\nT9 -> T20,\nX24 -> T20,\nX14 -> T20"
            },
            {
                "from": 207,
                "to": 210,
                "label": "ONLY EVAL with clause\nappend1(.(X40, X41), X42, .(X40, X43)) :- append1(X41, X42, X43).\nand substitutionX40 -> X44,\nX41 -> X45,\nX13 -> .(X44, X45),\nT9 -> T24,\nX42 -> T24,\nX43 -> X46,\nX14 -> .(X44, X46)"
            },
            {
                "from": 208,
                "to": 209,
                "label": "SUCCESS"
            },
            {
                "from": 210,
                "to": 199,
                "label": "INSTANCE with matching:\nX13 -> X45\nT9 -> T24\nX14 -> X46"
            },
            {
                "from": 211,
                "to": 212,
                "label": "PARALLEL"
            },
            {
                "from": 211,
                "to": 213,
                "label": "PARALLEL"
            },
            {
                "from": 212,
                "to": 214,
                "label": "EVAL with clause\nappend2([], X60, X60).\nand substitutionT14 -> [],\nX15 -> T32,\nX60 -> T32,\nT10 -> T32,\nX61 -> T32"
            },
            {
                "from": 212,
                "to": 215,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 213,
                "to": 220,
                "label": "EVAL with clause\nappend2(.(X72, X73), X74, .(X72, X75)) :- append2(X73, X74, X75).\nand substitutionX72 -> T39,\nX73 -> T42,\nT14 -> .(T39, T42),\nX15 -> X76,\nX74 -> X76,\nX75 -> T41,\nT10 -> .(T39, T41),\nT40 -> T42"
            },
            {
                "from": 213,
                "to": 221,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 214,
                "to": 216,
                "label": "SUCCESS"
            },
            {
                "from": 220,
                "to": 200,
                "label": "INSTANCE with matching:\nT14 -> T42\nX15 -> X76\nT10 -> T41"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(52)
Complex Obligation (AND)

----------------------------------------

(53)
Obligation:
Rules:
f213_in(.(T39, T41)) -> f220_in(T41) :|: TRUE
f221_out -> f213_out(T10) :|: TRUE
f213_in(x) -> f221_in :|: TRUE
f220_out(x1) -> f213_out(.(x2, x1)) :|: TRUE
f200_in(x3) -> f211_in(x3) :|: TRUE
f211_out(x4) -> f200_out(x4) :|: TRUE
f212_out(x5) -> f211_out(x5) :|: TRUE
f211_in(x6) -> f213_in(x6) :|: TRUE
f213_out(x7) -> f211_out(x7) :|: TRUE
f211_in(x8) -> f212_in(x8) :|: TRUE
f220_in(x9) -> f200_in(x9) :|: TRUE
f200_out(x10) -> f220_out(x10) :|: TRUE
f5_out(T1, T2) -> f1_out(T1, T2) :|: TRUE
f1_in(x11, x12) -> f5_in(x11, x12) :|: TRUE
f5_in(x13, x14) -> f195_in(x13, x14) :|: TRUE
f195_out(x15, x16) -> f5_out(x15, x16) :|: TRUE
f199_out(x17) -> f200_in(x18) :|: TRUE
f195_in(x19, x20) -> f199_in(x19) :|: TRUE
f200_out(x21) -> f195_out(x22, x21) :|: TRUE
Start term: f1_in(T1, T2)

----------------------------------------

(54) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:


----------------------------------------

(55)
TRUE

----------------------------------------

(56)
Obligation:
Rules:
f206_out(T9) -> f205_out(T9) :|: TRUE
f207_out(x) -> f205_out(x) :|: TRUE
f205_in(x1) -> f206_in(x1) :|: TRUE
f205_in(x2) -> f207_in(x2) :|: TRUE
f207_in(T24) -> f210_in(T24) :|: TRUE
f210_out(x3) -> f207_out(x3) :|: TRUE
f210_in(x4) -> f199_in(x4) :|: TRUE
f199_out(x5) -> f210_out(x5) :|: TRUE
f205_out(x6) -> f199_out(x6) :|: TRUE
f199_in(x7) -> f205_in(x7) :|: TRUE
f5_out(T1, T2) -> f1_out(T1, T2) :|: TRUE
f1_in(x8, x9) -> f5_in(x8, x9) :|: TRUE
f5_in(x10, x11) -> f195_in(x10, x11) :|: TRUE
f195_out(x12, x13) -> f5_out(x12, x13) :|: TRUE
f199_out(x14) -> f200_in(x15) :|: TRUE
f195_in(x16, x17) -> f199_in(x16) :|: TRUE
f200_out(x18) -> f195_out(x19, x18) :|: TRUE
Start term: f1_in(T1, T2)

----------------------------------------

(57) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f205_in(x2) -> f207_in(x2) :|: TRUE
f207_in(T24) -> f210_in(T24) :|: TRUE
f210_in(x4) -> f199_in(x4) :|: TRUE
f199_in(x7) -> f205_in(x7) :|: TRUE


----------------------------------------

(58)
Obligation:
Rules:
f205_in(x2) -> f207_in(x2) :|: TRUE
f207_in(T24) -> f210_in(T24) :|: TRUE
f210_in(x4) -> f199_in(x4) :|: TRUE
f199_in(x7) -> f205_in(x7) :|: TRUE

----------------------------------------

(59) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(60)
Obligation:
Rules:
f205_in(x2:0) -> f205_in(x2:0) :|: TRUE

----------------------------------------

(61) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(62)
Obligation:
Rules:
f205_in(x2:0) -> f205_in(x2:0) :|: TRUE

----------------------------------------

(63) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f205_in(x2:0) -> f205_in(x2:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(64)
Obligation:

Termination digraph:
Nodes:
(1) f205_in(x2:0) -> f205_in(x2:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(65) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f205_in(VARIABLE)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(66)
Obligation:
Rules:
f205_in(x2:0) -> f205_in(x2:0) :|: TRUE

----------------------------------------

(67) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, x2:0) -> f(1, x2:0) :|: pc = 1 && TRUE
Witness term starting non-terminating reduction: f(1, -8)
----------------------------------------

(68)
NO

----------------------------------------

(69) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(append1 ([]) Ys Ys)",
                null
            ],
            [
                "(append1 (. X Xs) Ys (. X Zs))",
                "(append1 Xs Ys Zs)"
            ],
            [
                "(append2 ([]) Ys Ys)",
                null
            ],
            [
                "(append2 (. X Xs) Ys (. X Zs))",
                "(append2 Xs Ys Zs)"
            ],
            [
                "(sublist X Y)",
                "(',' (append1 U X V) (append2 V W Y))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "193": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(',' (append1 X5 T5 X6) (append2 X6 X7 T6))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T5",
                        "T6"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7"
                    ],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "194": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(',' (append1 X5 T5 X6) (append2 X6 X7 T6))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T5",
                        "T6"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7"
                    ],
                    "exprvars": []
                }
            },
            "250": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "251": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append2 T78 X159 T77)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T77"],
                    "free": ["X159"],
                    "exprvars": []
                }
            },
            "197": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append2 T15 X7 T6)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T6",
                        "T15"
                    ],
                    "free": ["X7"],
                    "exprvars": []
                }
            },
            "230": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "252": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "231": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "232": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append1 X107 T50 X108)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T50"],
                    "free": [
                        "X107",
                        "X108"
                    ],
                    "exprvars": []
                }
            },
            "233": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 5,
                        "term": "(append2 (. X75 T40) X7 T6)"
                    },
                    {
                        "clause": 3,
                        "scope": 5,
                        "term": "(append2 (. X75 T40) X7 T6)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": [
                        "X7",
                        "X75"
                    ],
                    "exprvars": []
                }
            },
            "234": {
                "goal": [{
                    "clause": 3,
                    "scope": 5,
                    "term": "(append2 (. X75 T40) X7 T6)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": [
                        "X7",
                        "X75"
                    ],
                    "exprvars": []
                }
            },
            "159": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (append1 X5 T5 X6) (append2 X6 X7 T6))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T5",
                        "T6"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7"
                    ],
                    "exprvars": []
                }
            },
            "217": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "218": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "219": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "240": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append2 T61 X130 T60)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T60"],
                    "free": ["X130"],
                    "exprvars": []
                }
            },
            "241": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "242": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 6,
                        "term": "(append2 T61 X130 T60)"
                    },
                    {
                        "clause": 3,
                        "scope": 6,
                        "term": "(append2 T61 X130 T60)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T60"],
                    "free": ["X130"],
                    "exprvars": []
                }
            },
            "243": {
                "goal": [{
                    "clause": 2,
                    "scope": 6,
                    "term": "(append2 T61 X130 T60)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T60"],
                    "free": ["X130"],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(sublist T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T1",
                        "T2"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "189": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(',' (append1 X5 T5 X6) (append2 X6 X7 T6))"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(',' (append1 X5 T5 X6) (append2 X6 X7 T6))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T5",
                        "T6"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7"
                    ],
                    "exprvars": []
                }
            },
            "222": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append2 T30 X49 T31)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T30",
                        "T31"
                    ],
                    "free": ["X49"],
                    "exprvars": []
                }
            },
            "244": {
                "goal": [{
                    "clause": 3,
                    "scope": 6,
                    "term": "(append2 T61 X130 T60)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T60"],
                    "free": ["X130"],
                    "exprvars": []
                }
            },
            "223": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [{
                    "clause": 4,
                    "scope": 1,
                    "term": "(sublist T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T1",
                        "T2"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "202": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 3,
                        "term": "(append2 T15 X7 T6)"
                    },
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(append2 T15 X7 T6)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T6",
                        "T15"
                    ],
                    "free": ["X7"],
                    "exprvars": []
                }
            },
            "224": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (append1 X76 T37 X77) (append2 (. X75 X77) X7 T6))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T6",
                        "T37"
                    ],
                    "free": [
                        "X7",
                        "X75",
                        "X76",
                        "X77"
                    ],
                    "exprvars": []
                }
            },
            "246": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "203": {
                "goal": [{
                    "clause": 2,
                    "scope": 3,
                    "term": "(append2 T15 X7 T6)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T6",
                        "T15"
                    ],
                    "free": ["X7"],
                    "exprvars": []
                }
            },
            "225": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append1 X76 T37 X77)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T37"],
                    "free": [
                        "X76",
                        "X77"
                    ],
                    "exprvars": []
                }
            },
            "204": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(append2 T15 X7 T6)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T6",
                        "T15"
                    ],
                    "free": ["X7"],
                    "exprvars": []
                }
            },
            "226": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append2 (. X75 T40) X7 T6)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": [
                        "X7",
                        "X75"
                    ],
                    "exprvars": []
                }
            },
            "227": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 4,
                        "term": "(append1 X76 T37 X77)"
                    },
                    {
                        "clause": 1,
                        "scope": 4,
                        "term": "(append1 X76 T37 X77)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T37"],
                    "free": [
                        "X76",
                        "X77"
                    ],
                    "exprvars": []
                }
            },
            "249": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "228": {
                "goal": [{
                    "clause": 0,
                    "scope": 4,
                    "term": "(append1 X76 T37 X77)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T37"],
                    "free": [
                        "X76",
                        "X77"
                    ],
                    "exprvars": []
                }
            },
            "229": {
                "goal": [{
                    "clause": 1,
                    "scope": 4,
                    "term": "(append1 X76 T37 X77)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T37"],
                    "free": [
                        "X76",
                        "X77"
                    ],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 159,
                "label": "ONLY EVAL with clause\nsublist(X3, X4) :- ','(append1(X5, X3, X6), append2(X6, X7, X4)).\nand substitutionT1 -> T5,\nX3 -> T5,\nT2 -> T6,\nX4 -> T6"
            },
            {
                "from": 159,
                "to": 189,
                "label": "CASE"
            },
            {
                "from": 189,
                "to": 193,
                "label": "PARALLEL"
            },
            {
                "from": 189,
                "to": 194,
                "label": "PARALLEL"
            },
            {
                "from": 193,
                "to": 197,
                "label": "ONLY EVAL with clause\nappend1([], X20, X20).\nand substitutionX5 -> [],\nT5 -> T15,\nX20 -> T15,\nX6 -> T15"
            },
            {
                "from": 194,
                "to": 224,
                "label": "ONLY EVAL with clause\nappend1(.(X71, X72), X73, .(X71, X74)) :- append1(X72, X73, X74).\nand substitutionX71 -> X75,\nX72 -> X76,\nX5 -> .(X75, X76),\nT5 -> T37,\nX73 -> T37,\nX74 -> X77,\nX6 -> .(X75, X77)"
            },
            {
                "from": 197,
                "to": 202,
                "label": "CASE"
            },
            {
                "from": 202,
                "to": 203,
                "label": "PARALLEL"
            },
            {
                "from": 202,
                "to": 204,
                "label": "PARALLEL"
            },
            {
                "from": 203,
                "to": 217,
                "label": "EVAL with clause\nappend2([], X33, X33).\nand substitutionT15 -> [],\nX7 -> T22,\nX33 -> T22,\nT6 -> T22,\nX34 -> T22"
            },
            {
                "from": 203,
                "to": 218,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 204,
                "to": 222,
                "label": "EVAL with clause\nappend2(.(X45, X46), X47, .(X45, X48)) :- append2(X46, X47, X48).\nand substitutionX45 -> T29,\nX46 -> T30,\nT15 -> .(T29, T30),\nX7 -> X49,\nX47 -> X49,\nX48 -> T31,\nT6 -> .(T29, T31)"
            },
            {
                "from": 204,
                "to": 223,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 217,
                "to": 219,
                "label": "SUCCESS"
            },
            {
                "from": 222,
                "to": 197,
                "label": "INSTANCE with matching:\nT15 -> T30\nX7 -> X49\nT6 -> T31"
            },
            {
                "from": 224,
                "to": 225,
                "label": "SPLIT 1"
            },
            {
                "from": 224,
                "to": 226,
                "label": "SPLIT 2\nnew knowledge:\nT37 is ground\nreplacements:X76 -> T39,\nX77 -> T40"
            },
            {
                "from": 225,
                "to": 227,
                "label": "CASE"
            },
            {
                "from": 226,
                "to": 233,
                "label": "CASE"
            },
            {
                "from": 227,
                "to": 228,
                "label": "PARALLEL"
            },
            {
                "from": 227,
                "to": 229,
                "label": "PARALLEL"
            },
            {
                "from": 228,
                "to": 230,
                "label": "ONLY EVAL with clause\nappend1([], X86, X86).\nand substitutionX76 -> [],\nT37 -> T46,\nX86 -> T46,\nX77 -> T46"
            },
            {
                "from": 229,
                "to": 232,
                "label": "ONLY EVAL with clause\nappend1(.(X102, X103), X104, .(X102, X105)) :- append1(X103, X104, X105).\nand substitutionX102 -> X106,\nX103 -> X107,\nX76 -> .(X106, X107),\nT37 -> T50,\nX104 -> T50,\nX105 -> X108,\nX77 -> .(X106, X108)"
            },
            {
                "from": 230,
                "to": 231,
                "label": "SUCCESS"
            },
            {
                "from": 232,
                "to": 225,
                "label": "INSTANCE with matching:\nX76 -> X107\nT37 -> T50\nX77 -> X108"
            },
            {
                "from": 233,
                "to": 234,
                "label": "BACKTRACK\nfor clause: append2([], Ys, Ys)because of non-unification"
            },
            {
                "from": 234,
                "to": 240,
                "label": "EVAL with clause\nappend2(.(X125, X126), X127, .(X125, X128)) :- append2(X126, X127, X128).\nand substitutionX75 -> T59,\nX125 -> T59,\nT40 -> T61,\nX126 -> T61,\nX7 -> X130,\nX127 -> X130,\nX129 -> T59,\nX128 -> T60,\nT6 -> .(T59, T60),\nT58 -> T61"
            },
            {
                "from": 234,
                "to": 241,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 240,
                "to": 242,
                "label": "CASE"
            },
            {
                "from": 242,
                "to": 243,
                "label": "PARALLEL"
            },
            {
                "from": 242,
                "to": 244,
                "label": "PARALLEL"
            },
            {
                "from": 243,
                "to": 246,
                "label": "EVAL with clause\nappend2([], X143, X143).\nand substitutionT61 -> [],\nX130 -> T68,\nX143 -> T68,\nT60 -> T68,\nX144 -> T68"
            },
            {
                "from": 243,
                "to": 249,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 244,
                "to": 251,
                "label": "EVAL with clause\nappend2(.(X155, X156), X157, .(X155, X158)) :- append2(X156, X157, X158).\nand substitutionX155 -> T75,\nX156 -> T78,\nT61 -> .(T75, T78),\nX130 -> X159,\nX157 -> X159,\nX158 -> T77,\nT60 -> .(T75, T77),\nT76 -> T78"
            },
            {
                "from": 244,
                "to": 252,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 246,
                "to": 250,
                "label": "SUCCESS"
            },
            {
                "from": 251,
                "to": 240,
                "label": "INSTANCE with matching:\nT61 -> T78\nX130 -> X159\nT60 -> T77"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(70)
Obligation:
Triples:

append2A(.(X1, X2), X3, .(X1, X4)) :- append2A(X2, X3, X4).
append1B(.(X1, X2), X3, .(X1, X4)) :- append1B(X2, X3, X4).
append2C(.(X1, X2), X3, .(X1, X4)) :- append2C(X2, X3, X4).
sublistD(X1, X2) :- append2A(X1, X3, X2).
sublistD(X1, X2) :- append1B(X3, X1, X4).
sublistD(X1, .(X2, X3)) :- ','(append1cB(X4, X1, X5), append2C(X5, X6, X3)).

Clauses:

append2cA([], X1, X1).
append2cA(.(X1, X2), X3, .(X1, X4)) :- append2cA(X2, X3, X4).
append1cB([], X1, X1).
append1cB(.(X1, X2), X3, .(X1, X4)) :- append1cB(X2, X3, X4).
append2cC([], X1, X1).
append2cC(.(X1, X2), X3, .(X1, X4)) :- append2cC(X2, X3, X4).

Afs:

sublistD(x1, x2)  =  sublistD(x1, x2)


----------------------------------------

(71) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

sublistD_in_2: (b,b)

append2A_in_3: (b,f,b)

append1B_in_3: (f,b,f)

append1cB_in_3: (f,b,f)

append2C_in_3: (b,f,b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   SUBLISTD_IN_GG(X1, X2) -> U4_GG(X1, X2, append2A_in_gag(X1, X3, X2))
   SUBLISTD_IN_GG(X1, X2) -> APPEND2A_IN_GAG(X1, X3, X2)
   APPEND2A_IN_GAG(.(X1, X2), X3, .(X1, X4)) -> U1_GAG(X1, X2, X3, X4, append2A_in_gag(X2, X3, X4))
   APPEND2A_IN_GAG(.(X1, X2), X3, .(X1, X4)) -> APPEND2A_IN_GAG(X2, X3, X4)
   SUBLISTD_IN_GG(X1, X2) -> U5_GG(X1, X2, append1B_in_aga(X3, X1, X4))
   SUBLISTD_IN_GG(X1, X2) -> APPEND1B_IN_AGA(X3, X1, X4)
   APPEND1B_IN_AGA(.(X1, X2), X3, .(X1, X4)) -> U2_AGA(X1, X2, X3, X4, append1B_in_aga(X2, X3, X4))
   APPEND1B_IN_AGA(.(X1, X2), X3, .(X1, X4)) -> APPEND1B_IN_AGA(X2, X3, X4)
   SUBLISTD_IN_GG(X1, .(X2, X3)) -> U6_GG(X1, X2, X3, append1cB_in_aga(X4, X1, X5))
   U6_GG(X1, X2, X3, append1cB_out_aga(X4, X1, X5)) -> U7_GG(X1, X2, X3, append2C_in_gag(X5, X6, X3))
   U6_GG(X1, X2, X3, append1cB_out_aga(X4, X1, X5)) -> APPEND2C_IN_GAG(X5, X6, X3)
   APPEND2C_IN_GAG(.(X1, X2), X3, .(X1, X4)) -> U3_GAG(X1, X2, X3, X4, append2C_in_gag(X2, X3, X4))
   APPEND2C_IN_GAG(.(X1, X2), X3, .(X1, X4)) -> APPEND2C_IN_GAG(X2, X3, X4)

The TRS R consists of the following rules:

   append1cB_in_aga([], X1, X1) -> append1cB_out_aga([], X1, X1)
   append1cB_in_aga(.(X1, X2), X3, .(X1, X4)) -> U10_aga(X1, X2, X3, X4, append1cB_in_aga(X2, X3, X4))
   U10_aga(X1, X2, X3, X4, append1cB_out_aga(X2, X3, X4)) -> append1cB_out_aga(.(X1, X2), X3, .(X1, X4))

The argument filtering Pi contains the following mapping:
append2A_in_gag(x1, x2, x3)  =  append2A_in_gag(x1, x3)

.(x1, x2)  =  .(x2)

append1B_in_aga(x1, x2, x3)  =  append1B_in_aga(x2)

append1cB_in_aga(x1, x2, x3)  =  append1cB_in_aga(x2)

append1cB_out_aga(x1, x2, x3)  =  append1cB_out_aga(x1, x2, x3)

U10_aga(x1, x2, x3, x4, x5)  =  U10_aga(x3, x5)

append2C_in_gag(x1, x2, x3)  =  append2C_in_gag(x1, x3)

SUBLISTD_IN_GG(x1, x2)  =  SUBLISTD_IN_GG(x1, x2)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)

APPEND2A_IN_GAG(x1, x2, x3)  =  APPEND2A_IN_GAG(x1, x3)

U1_GAG(x1, x2, x3, x4, x5)  =  U1_GAG(x2, x4, x5)

U5_GG(x1, x2, x3)  =  U5_GG(x1, x2, x3)

APPEND1B_IN_AGA(x1, x2, x3)  =  APPEND1B_IN_AGA(x2)

U2_AGA(x1, x2, x3, x4, x5)  =  U2_AGA(x3, x5)

U6_GG(x1, x2, x3, x4)  =  U6_GG(x1, x3, x4)

U7_GG(x1, x2, x3, x4)  =  U7_GG(x1, x3, x4)

APPEND2C_IN_GAG(x1, x2, x3)  =  APPEND2C_IN_GAG(x1, x3)

U3_GAG(x1, x2, x3, x4, x5)  =  U3_GAG(x2, x4, x5)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(72)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUBLISTD_IN_GG(X1, X2) -> U4_GG(X1, X2, append2A_in_gag(X1, X3, X2))
   SUBLISTD_IN_GG(X1, X2) -> APPEND2A_IN_GAG(X1, X3, X2)
   APPEND2A_IN_GAG(.(X1, X2), X3, .(X1, X4)) -> U1_GAG(X1, X2, X3, X4, append2A_in_gag(X2, X3, X4))
   APPEND2A_IN_GAG(.(X1, X2), X3, .(X1, X4)) -> APPEND2A_IN_GAG(X2, X3, X4)
   SUBLISTD_IN_GG(X1, X2) -> U5_GG(X1, X2, append1B_in_aga(X3, X1, X4))
   SUBLISTD_IN_GG(X1, X2) -> APPEND1B_IN_AGA(X3, X1, X4)
   APPEND1B_IN_AGA(.(X1, X2), X3, .(X1, X4)) -> U2_AGA(X1, X2, X3, X4, append1B_in_aga(X2, X3, X4))
   APPEND1B_IN_AGA(.(X1, X2), X3, .(X1, X4)) -> APPEND1B_IN_AGA(X2, X3, X4)
   SUBLISTD_IN_GG(X1, .(X2, X3)) -> U6_GG(X1, X2, X3, append1cB_in_aga(X4, X1, X5))
   U6_GG(X1, X2, X3, append1cB_out_aga(X4, X1, X5)) -> U7_GG(X1, X2, X3, append2C_in_gag(X5, X6, X3))
   U6_GG(X1, X2, X3, append1cB_out_aga(X4, X1, X5)) -> APPEND2C_IN_GAG(X5, X6, X3)
   APPEND2C_IN_GAG(.(X1, X2), X3, .(X1, X4)) -> U3_GAG(X1, X2, X3, X4, append2C_in_gag(X2, X3, X4))
   APPEND2C_IN_GAG(.(X1, X2), X3, .(X1, X4)) -> APPEND2C_IN_GAG(X2, X3, X4)

The TRS R consists of the following rules:

   append1cB_in_aga([], X1, X1) -> append1cB_out_aga([], X1, X1)
   append1cB_in_aga(.(X1, X2), X3, .(X1, X4)) -> U10_aga(X1, X2, X3, X4, append1cB_in_aga(X2, X3, X4))
   U10_aga(X1, X2, X3, X4, append1cB_out_aga(X2, X3, X4)) -> append1cB_out_aga(.(X1, X2), X3, .(X1, X4))

The argument filtering Pi contains the following mapping:
append2A_in_gag(x1, x2, x3)  =  append2A_in_gag(x1, x3)

.(x1, x2)  =  .(x2)

append1B_in_aga(x1, x2, x3)  =  append1B_in_aga(x2)

append1cB_in_aga(x1, x2, x3)  =  append1cB_in_aga(x2)

append1cB_out_aga(x1, x2, x3)  =  append1cB_out_aga(x1, x2, x3)

U10_aga(x1, x2, x3, x4, x5)  =  U10_aga(x3, x5)

append2C_in_gag(x1, x2, x3)  =  append2C_in_gag(x1, x3)

SUBLISTD_IN_GG(x1, x2)  =  SUBLISTD_IN_GG(x1, x2)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)

APPEND2A_IN_GAG(x1, x2, x3)  =  APPEND2A_IN_GAG(x1, x3)

U1_GAG(x1, x2, x3, x4, x5)  =  U1_GAG(x2, x4, x5)

U5_GG(x1, x2, x3)  =  U5_GG(x1, x2, x3)

APPEND1B_IN_AGA(x1, x2, x3)  =  APPEND1B_IN_AGA(x2)

U2_AGA(x1, x2, x3, x4, x5)  =  U2_AGA(x3, x5)

U6_GG(x1, x2, x3, x4)  =  U6_GG(x1, x3, x4)

U7_GG(x1, x2, x3, x4)  =  U7_GG(x1, x3, x4)

APPEND2C_IN_GAG(x1, x2, x3)  =  APPEND2C_IN_GAG(x1, x3)

U3_GAG(x1, x2, x3, x4, x5)  =  U3_GAG(x2, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(73) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 10 less nodes.
----------------------------------------

(74)
Complex Obligation (AND)

----------------------------------------

(75)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND2C_IN_GAG(.(X1, X2), X3, .(X1, X4)) -> APPEND2C_IN_GAG(X2, X3, X4)

The TRS R consists of the following rules:

   append1cB_in_aga([], X1, X1) -> append1cB_out_aga([], X1, X1)
   append1cB_in_aga(.(X1, X2), X3, .(X1, X4)) -> U10_aga(X1, X2, X3, X4, append1cB_in_aga(X2, X3, X4))
   U10_aga(X1, X2, X3, X4, append1cB_out_aga(X2, X3, X4)) -> append1cB_out_aga(.(X1, X2), X3, .(X1, X4))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

append1cB_in_aga(x1, x2, x3)  =  append1cB_in_aga(x2)

append1cB_out_aga(x1, x2, x3)  =  append1cB_out_aga(x1, x2, x3)

U10_aga(x1, x2, x3, x4, x5)  =  U10_aga(x3, x5)

APPEND2C_IN_GAG(x1, x2, x3)  =  APPEND2C_IN_GAG(x1, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(76) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(77)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND2C_IN_GAG(.(X1, X2), X3, .(X1, X4)) -> APPEND2C_IN_GAG(X2, X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPEND2C_IN_GAG(x1, x2, x3)  =  APPEND2C_IN_GAG(x1, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(78) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(79)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND2C_IN_GAG(.(X2), .(X4)) -> APPEND2C_IN_GAG(X2, X4)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(80) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPEND2C_IN_GAG(.(X2), .(X4)) -> APPEND2C_IN_GAG(X2, X4)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(81)
YES

----------------------------------------

(82)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND1B_IN_AGA(.(X1, X2), X3, .(X1, X4)) -> APPEND1B_IN_AGA(X2, X3, X4)

The TRS R consists of the following rules:

   append1cB_in_aga([], X1, X1) -> append1cB_out_aga([], X1, X1)
   append1cB_in_aga(.(X1, X2), X3, .(X1, X4)) -> U10_aga(X1, X2, X3, X4, append1cB_in_aga(X2, X3, X4))
   U10_aga(X1, X2, X3, X4, append1cB_out_aga(X2, X3, X4)) -> append1cB_out_aga(.(X1, X2), X3, .(X1, X4))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

append1cB_in_aga(x1, x2, x3)  =  append1cB_in_aga(x2)

append1cB_out_aga(x1, x2, x3)  =  append1cB_out_aga(x1, x2, x3)

U10_aga(x1, x2, x3, x4, x5)  =  U10_aga(x3, x5)

APPEND1B_IN_AGA(x1, x2, x3)  =  APPEND1B_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(83) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(84)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND1B_IN_AGA(.(X1, X2), X3, .(X1, X4)) -> APPEND1B_IN_AGA(X2, X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPEND1B_IN_AGA(x1, x2, x3)  =  APPEND1B_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(85) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(86)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND1B_IN_AGA(X3) -> APPEND1B_IN_AGA(X3)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(87)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND2A_IN_GAG(.(X1, X2), X3, .(X1, X4)) -> APPEND2A_IN_GAG(X2, X3, X4)

The TRS R consists of the following rules:

   append1cB_in_aga([], X1, X1) -> append1cB_out_aga([], X1, X1)
   append1cB_in_aga(.(X1, X2), X3, .(X1, X4)) -> U10_aga(X1, X2, X3, X4, append1cB_in_aga(X2, X3, X4))
   U10_aga(X1, X2, X3, X4, append1cB_out_aga(X2, X3, X4)) -> append1cB_out_aga(.(X1, X2), X3, .(X1, X4))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

append1cB_in_aga(x1, x2, x3)  =  append1cB_in_aga(x2)

append1cB_out_aga(x1, x2, x3)  =  append1cB_out_aga(x1, x2, x3)

U10_aga(x1, x2, x3, x4, x5)  =  U10_aga(x3, x5)

APPEND2A_IN_GAG(x1, x2, x3)  =  APPEND2A_IN_GAG(x1, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(88) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(89)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND2A_IN_GAG(.(X1, X2), X3, .(X1, X4)) -> APPEND2A_IN_GAG(X2, X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPEND2A_IN_GAG(x1, x2, x3)  =  APPEND2A_IN_GAG(x1, x3)


We have to consider all (P,R,Pi)-chains