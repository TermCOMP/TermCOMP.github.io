YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Wywwc.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

fl(g,a,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Clauses:

fl([], [], 0).
fl(.(E, X), R, s(Z)) :- ','(append(E, Y, R), fl(X, Y, Z)).
append([], X, X).
append(.(X, Xs), Ys, .(X, Zs)) :- append(Xs, Ys, Zs).


Query: fl(g,a,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

fl_in_3: (b,f,f)

append_in_3: (b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   fl_in_gaa([], [], 0) -> fl_out_gaa([], [], 0)
   fl_in_gaa(.(E, X), R, s(Z)) -> U1_gaa(E, X, R, Z, append_in_gaa(E, Y, R))
   append_in_gaa([], X, X) -> append_out_gaa([], X, X)
   append_in_gaa(.(X, Xs), Ys, .(X, Zs)) -> U3_gaa(X, Xs, Ys, Zs, append_in_gaa(Xs, Ys, Zs))
   U3_gaa(X, Xs, Ys, Zs, append_out_gaa(Xs, Ys, Zs)) -> append_out_gaa(.(X, Xs), Ys, .(X, Zs))
   U1_gaa(E, X, R, Z, append_out_gaa(E, Y, R)) -> U2_gaa(E, X, R, Z, fl_in_gaa(X, Y, Z))
   U2_gaa(E, X, R, Z, fl_out_gaa(X, Y, Z)) -> fl_out_gaa(.(E, X), R, s(Z))

The argument filtering Pi contains the following mapping:
fl_in_gaa(x1, x2, x3)  =  fl_in_gaa(x1)

[]  =  []

fl_out_gaa(x1, x2, x3)  =  fl_out_gaa(x3)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x2, x5)

append_in_gaa(x1, x2, x3)  =  append_in_gaa(x1)

append_out_gaa(x1, x2, x3)  =  append_out_gaa

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x5)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x5)

s(x1)  =  s(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   fl_in_gaa([], [], 0) -> fl_out_gaa([], [], 0)
   fl_in_gaa(.(E, X), R, s(Z)) -> U1_gaa(E, X, R, Z, append_in_gaa(E, Y, R))
   append_in_gaa([], X, X) -> append_out_gaa([], X, X)
   append_in_gaa(.(X, Xs), Ys, .(X, Zs)) -> U3_gaa(X, Xs, Ys, Zs, append_in_gaa(Xs, Ys, Zs))
   U3_gaa(X, Xs, Ys, Zs, append_out_gaa(Xs, Ys, Zs)) -> append_out_gaa(.(X, Xs), Ys, .(X, Zs))
   U1_gaa(E, X, R, Z, append_out_gaa(E, Y, R)) -> U2_gaa(E, X, R, Z, fl_in_gaa(X, Y, Z))
   U2_gaa(E, X, R, Z, fl_out_gaa(X, Y, Z)) -> fl_out_gaa(.(E, X), R, s(Z))

The argument filtering Pi contains the following mapping:
fl_in_gaa(x1, x2, x3)  =  fl_in_gaa(x1)

[]  =  []

fl_out_gaa(x1, x2, x3)  =  fl_out_gaa(x3)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x2, x5)

append_in_gaa(x1, x2, x3)  =  append_in_gaa(x1)

append_out_gaa(x1, x2, x3)  =  append_out_gaa

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x5)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x5)

s(x1)  =  s(x1)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   FL_IN_GAA(.(E, X), R, s(Z)) -> U1_GAA(E, X, R, Z, append_in_gaa(E, Y, R))
   FL_IN_GAA(.(E, X), R, s(Z)) -> APPEND_IN_GAA(E, Y, R)
   APPEND_IN_GAA(.(X, Xs), Ys, .(X, Zs)) -> U3_GAA(X, Xs, Ys, Zs, append_in_gaa(Xs, Ys, Zs))
   APPEND_IN_GAA(.(X, Xs), Ys, .(X, Zs)) -> APPEND_IN_GAA(Xs, Ys, Zs)
   U1_GAA(E, X, R, Z, append_out_gaa(E, Y, R)) -> U2_GAA(E, X, R, Z, fl_in_gaa(X, Y, Z))
   U1_GAA(E, X, R, Z, append_out_gaa(E, Y, R)) -> FL_IN_GAA(X, Y, Z)

The TRS R consists of the following rules:

   fl_in_gaa([], [], 0) -> fl_out_gaa([], [], 0)
   fl_in_gaa(.(E, X), R, s(Z)) -> U1_gaa(E, X, R, Z, append_in_gaa(E, Y, R))
   append_in_gaa([], X, X) -> append_out_gaa([], X, X)
   append_in_gaa(.(X, Xs), Ys, .(X, Zs)) -> U3_gaa(X, Xs, Ys, Zs, append_in_gaa(Xs, Ys, Zs))
   U3_gaa(X, Xs, Ys, Zs, append_out_gaa(Xs, Ys, Zs)) -> append_out_gaa(.(X, Xs), Ys, .(X, Zs))
   U1_gaa(E, X, R, Z, append_out_gaa(E, Y, R)) -> U2_gaa(E, X, R, Z, fl_in_gaa(X, Y, Z))
   U2_gaa(E, X, R, Z, fl_out_gaa(X, Y, Z)) -> fl_out_gaa(.(E, X), R, s(Z))

The argument filtering Pi contains the following mapping:
fl_in_gaa(x1, x2, x3)  =  fl_in_gaa(x1)

[]  =  []

fl_out_gaa(x1, x2, x3)  =  fl_out_gaa(x3)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x2, x5)

append_in_gaa(x1, x2, x3)  =  append_in_gaa(x1)

append_out_gaa(x1, x2, x3)  =  append_out_gaa

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x5)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x5)

s(x1)  =  s(x1)

FL_IN_GAA(x1, x2, x3)  =  FL_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x2, x5)

APPEND_IN_GAA(x1, x2, x3)  =  APPEND_IN_GAA(x1)

U3_GAA(x1, x2, x3, x4, x5)  =  U3_GAA(x5)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FL_IN_GAA(.(E, X), R, s(Z)) -> U1_GAA(E, X, R, Z, append_in_gaa(E, Y, R))
   FL_IN_GAA(.(E, X), R, s(Z)) -> APPEND_IN_GAA(E, Y, R)
   APPEND_IN_GAA(.(X, Xs), Ys, .(X, Zs)) -> U3_GAA(X, Xs, Ys, Zs, append_in_gaa(Xs, Ys, Zs))
   APPEND_IN_GAA(.(X, Xs), Ys, .(X, Zs)) -> APPEND_IN_GAA(Xs, Ys, Zs)
   U1_GAA(E, X, R, Z, append_out_gaa(E, Y, R)) -> U2_GAA(E, X, R, Z, fl_in_gaa(X, Y, Z))
   U1_GAA(E, X, R, Z, append_out_gaa(E, Y, R)) -> FL_IN_GAA(X, Y, Z)

The TRS R consists of the following rules:

   fl_in_gaa([], [], 0) -> fl_out_gaa([], [], 0)
   fl_in_gaa(.(E, X), R, s(Z)) -> U1_gaa(E, X, R, Z, append_in_gaa(E, Y, R))
   append_in_gaa([], X, X) -> append_out_gaa([], X, X)
   append_in_gaa(.(X, Xs), Ys, .(X, Zs)) -> U3_gaa(X, Xs, Ys, Zs, append_in_gaa(Xs, Ys, Zs))
   U3_gaa(X, Xs, Ys, Zs, append_out_gaa(Xs, Ys, Zs)) -> append_out_gaa(.(X, Xs), Ys, .(X, Zs))
   U1_gaa(E, X, R, Z, append_out_gaa(E, Y, R)) -> U2_gaa(E, X, R, Z, fl_in_gaa(X, Y, Z))
   U2_gaa(E, X, R, Z, fl_out_gaa(X, Y, Z)) -> fl_out_gaa(.(E, X), R, s(Z))

The argument filtering Pi contains the following mapping:
fl_in_gaa(x1, x2, x3)  =  fl_in_gaa(x1)

[]  =  []

fl_out_gaa(x1, x2, x3)  =  fl_out_gaa(x3)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x2, x5)

append_in_gaa(x1, x2, x3)  =  append_in_gaa(x1)

append_out_gaa(x1, x2, x3)  =  append_out_gaa

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x5)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x5)

s(x1)  =  s(x1)

FL_IN_GAA(x1, x2, x3)  =  FL_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x2, x5)

APPEND_IN_GAA(x1, x2, x3)  =  APPEND_IN_GAA(x1)

U3_GAA(x1, x2, x3, x4, x5)  =  U3_GAA(x5)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_GAA(.(X, Xs), Ys, .(X, Zs)) -> APPEND_IN_GAA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   fl_in_gaa([], [], 0) -> fl_out_gaa([], [], 0)
   fl_in_gaa(.(E, X), R, s(Z)) -> U1_gaa(E, X, R, Z, append_in_gaa(E, Y, R))
   append_in_gaa([], X, X) -> append_out_gaa([], X, X)
   append_in_gaa(.(X, Xs), Ys, .(X, Zs)) -> U3_gaa(X, Xs, Ys, Zs, append_in_gaa(Xs, Ys, Zs))
   U3_gaa(X, Xs, Ys, Zs, append_out_gaa(Xs, Ys, Zs)) -> append_out_gaa(.(X, Xs), Ys, .(X, Zs))
   U1_gaa(E, X, R, Z, append_out_gaa(E, Y, R)) -> U2_gaa(E, X, R, Z, fl_in_gaa(X, Y, Z))
   U2_gaa(E, X, R, Z, fl_out_gaa(X, Y, Z)) -> fl_out_gaa(.(E, X), R, s(Z))

The argument filtering Pi contains the following mapping:
fl_in_gaa(x1, x2, x3)  =  fl_in_gaa(x1)

[]  =  []

fl_out_gaa(x1, x2, x3)  =  fl_out_gaa(x3)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x2, x5)

append_in_gaa(x1, x2, x3)  =  append_in_gaa(x1)

append_out_gaa(x1, x2, x3)  =  append_out_gaa

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x5)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x5)

s(x1)  =  s(x1)

APPEND_IN_GAA(x1, x2, x3)  =  APPEND_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_GAA(.(X, Xs), Ys, .(X, Zs)) -> APPEND_IN_GAA(Xs, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

APPEND_IN_GAA(x1, x2, x3)  =  APPEND_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND_IN_GAA(.(X, Xs)) -> APPEND_IN_GAA(Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPEND_IN_GAA(.(X, Xs)) -> APPEND_IN_GAA(Xs)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GAA(E, X, R, Z, append_out_gaa(E, Y, R)) -> FL_IN_GAA(X, Y, Z)
   FL_IN_GAA(.(E, X), R, s(Z)) -> U1_GAA(E, X, R, Z, append_in_gaa(E, Y, R))

The TRS R consists of the following rules:

   fl_in_gaa([], [], 0) -> fl_out_gaa([], [], 0)
   fl_in_gaa(.(E, X), R, s(Z)) -> U1_gaa(E, X, R, Z, append_in_gaa(E, Y, R))
   append_in_gaa([], X, X) -> append_out_gaa([], X, X)
   append_in_gaa(.(X, Xs), Ys, .(X, Zs)) -> U3_gaa(X, Xs, Ys, Zs, append_in_gaa(Xs, Ys, Zs))
   U3_gaa(X, Xs, Ys, Zs, append_out_gaa(Xs, Ys, Zs)) -> append_out_gaa(.(X, Xs), Ys, .(X, Zs))
   U1_gaa(E, X, R, Z, append_out_gaa(E, Y, R)) -> U2_gaa(E, X, R, Z, fl_in_gaa(X, Y, Z))
   U2_gaa(E, X, R, Z, fl_out_gaa(X, Y, Z)) -> fl_out_gaa(.(E, X), R, s(Z))

The argument filtering Pi contains the following mapping:
fl_in_gaa(x1, x2, x3)  =  fl_in_gaa(x1)

[]  =  []

fl_out_gaa(x1, x2, x3)  =  fl_out_gaa(x3)

.(x1, x2)  =  .(x1, x2)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x2, x5)

append_in_gaa(x1, x2, x3)  =  append_in_gaa(x1)

append_out_gaa(x1, x2, x3)  =  append_out_gaa

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x5)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x5)

s(x1)  =  s(x1)

FL_IN_GAA(x1, x2, x3)  =  FL_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GAA(E, X, R, Z, append_out_gaa(E, Y, R)) -> FL_IN_GAA(X, Y, Z)
   FL_IN_GAA(.(E, X), R, s(Z)) -> U1_GAA(E, X, R, Z, append_in_gaa(E, Y, R))

The TRS R consists of the following rules:

   append_in_gaa([], X, X) -> append_out_gaa([], X, X)
   append_in_gaa(.(X, Xs), Ys, .(X, Zs)) -> U3_gaa(X, Xs, Ys, Zs, append_in_gaa(Xs, Ys, Zs))
   U3_gaa(X, Xs, Ys, Zs, append_out_gaa(Xs, Ys, Zs)) -> append_out_gaa(.(X, Xs), Ys, .(X, Zs))

The argument filtering Pi contains the following mapping:
[]  =  []

.(x1, x2)  =  .(x1, x2)

append_in_gaa(x1, x2, x3)  =  append_in_gaa(x1)

append_out_gaa(x1, x2, x3)  =  append_out_gaa

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x5)

s(x1)  =  s(x1)

FL_IN_GAA(x1, x2, x3)  =  FL_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(X, append_out_gaa) -> FL_IN_GAA(X)
   FL_IN_GAA(.(E, X)) -> U1_GAA(X, append_in_gaa(E))

The TRS R consists of the following rules:

   append_in_gaa([]) -> append_out_gaa
   append_in_gaa(.(X, Xs)) -> U3_gaa(append_in_gaa(Xs))
   U3_gaa(append_out_gaa) -> append_out_gaa

The set Q consists of the following terms:

   append_in_gaa(x0)
   U3_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*FL_IN_GAA(.(E, X)) -> U1_GAA(X, append_in_gaa(E))
The graph contains the following edges 1 > 1


*U1_GAA(X, append_out_gaa) -> FL_IN_GAA(X)
The graph contains the following edges 1 >= 1


----------------------------------------

(20)
YES
