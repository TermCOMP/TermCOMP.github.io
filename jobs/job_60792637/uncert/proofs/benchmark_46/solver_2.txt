MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/E87gW.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

minimum(a,g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToTRSTransformerProof [SOUND, 0 ms]
(2) QTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) QDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) QDP
    (7) MNOCProof [EQUIVALENT, 0 ms]
    (8) QDP
    (9) UsableRulesProof [EQUIVALENT, 0 ms]
    (10) QDP
    (11) QReductionProof [EQUIVALENT, 0 ms]
    (12) QDP
(13) PrologToPiTRSProof [SOUND, 0 ms]
(14) PiTRS
    (15) DependencyPairsProof [EQUIVALENT, 0 ms]
    (16) PiDP
    (17) DependencyGraphProof [EQUIVALENT, 0 ms]
    (18) PiDP
    (19) UsableRulesProof [EQUIVALENT, 0 ms]
    (20) PiDP
    (21) PiDPToQDPProof [SOUND, 0 ms]
    (22) QDP
(23) PrologToPiTRSProof [SOUND, 0 ms]
(24) PiTRS
    (25) DependencyPairsProof [EQUIVALENT, 0 ms]
    (26) PiDP
    (27) DependencyGraphProof [EQUIVALENT, 0 ms]
    (28) PiDP
    (29) UsableRulesProof [EQUIVALENT, 0 ms]
    (30) PiDP
    (31) PiDPToQDPProof [SOUND, 0 ms]
    (32) QDP
(33) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(34) IRSwT
    (35) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (36) IRSwT
    (37) IntTRSCompressionProof [EQUIVALENT, 10 ms]
    (38) IRSwT
    (39) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (40) IRSwT
    (41) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
    (42) IRSwT
    (43) FilterProof [EQUIVALENT, 0 ms]
    (44) IntTRS
    (45) IntTRSPeriodicNontermProof [COMPLETE, 0 ms]
    (46) NO
(47) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(48) TRIPLES
    (49) TriplesToPiDPProof [SOUND, 0 ms]
    (50) PiDP
    (51) DependencyGraphProof [EQUIVALENT, 0 ms]
    (52) PiDP
    (53) PiDPToQDPProof [SOUND, 0 ms]
    (54) QDP


----------------------------------------

(0)
Obligation:
Clauses:

minimum(tree(X, void, X1), X).
minimum(tree(X2, Left, X3), X) :- minimum(Left, X).


Query: minimum(a,g)
----------------------------------------

(1) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(minimum (tree X (void) X1) X)",
                null
            ],
            [
                "(minimum (tree X2 Left X3) X)",
                "(minimum Left X)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "22": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(minimum T25 T24)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T24"],
                    "free": [],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(minimum T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "23": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(minimum T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(minimum T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(minimum T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(minimum T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes"
        },
        "edges": [
            {
                "from": 1,
                "to": 2,
                "label": "CASE"
            },
            {
                "from": 2,
                "to": 3,
                "label": "PARALLEL"
            },
            {
                "from": 2,
                "to": 4,
                "label": "PARALLEL"
            },
            {
                "from": 3,
                "to": 5,
                "label": "EVAL with clause\nminimum(tree(X12, void, X13), X12).\nand substitutionX12 -> T11,\nX13 -> T12,\nT1 -> tree(T11, void, T12),\nT2 -> T11"
            },
            {
                "from": 3,
                "to": 6,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 4,
                "to": 22,
                "label": "EVAL with clause\nminimum(tree(X22, X23, X24), X25) :- minimum(X23, X25).\nand substitutionX22 -> T21,\nX23 -> T25,\nX24 -> T23,\nT1 -> tree(T21, T25, T23),\nT2 -> T24,\nX25 -> T24,\nT22 -> T25"
            },
            {
                "from": 4,
                "to": 23,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 5,
                "to": 7,
                "label": "SUCCESS"
            },
            {
                "from": 22,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T25\nT2 -> T24"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f1_in(T11) -> f1_out1
   f1_in(T24) -> U1(f1_in(T24), T24)
   U1(f1_out1, T24) -> f1_out1

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(T24) -> U1^1(f1_in(T24), T24)
   F1_IN(T24) -> F1_IN(T24)

The TRS R consists of the following rules:

   f1_in(T11) -> f1_out1
   f1_in(T24) -> U1(f1_in(T24), T24)
   U1(f1_out1, T24) -> f1_out1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(T24) -> F1_IN(T24)

The TRS R consists of the following rules:

   f1_in(T11) -> f1_out1
   f1_in(T24) -> U1(f1_in(T24), T24)
   U1(f1_out1, T24) -> f1_out1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(T24) -> F1_IN(T24)

The TRS R consists of the following rules:

   f1_in(T11) -> f1_out1
   f1_in(T24) -> U1(f1_in(T24), T24)
   U1(f1_out1, T24) -> f1_out1

The set Q consists of the following terms:

   f1_in(x0)
   U1(f1_out1, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(T24) -> F1_IN(T24)

R is empty.
The set Q consists of the following terms:

   f1_in(x0)
   U1(f1_out1, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f1_in(x0)
   U1(f1_out1, x0)


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(T24) -> F1_IN(T24)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

minimum_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   minimum_in_ag(tree(X, void, X1), X) -> minimum_out_ag(tree(X, void, X1), X)
   minimum_in_ag(tree(X2, Left, X3), X) -> U1_ag(X2, Left, X3, X, minimum_in_ag(Left, X))
   U1_ag(X2, Left, X3, X, minimum_out_ag(Left, X)) -> minimum_out_ag(tree(X2, Left, X3), X)

The argument filtering Pi contains the following mapping:
minimum_in_ag(x1, x2)  =  minimum_in_ag(x2)

minimum_out_ag(x1, x2)  =  minimum_out_ag(x1)

tree(x1, x2, x3)  =  tree(x2)

U1_ag(x1, x2, x3, x4, x5)  =  U1_ag(x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(14)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   minimum_in_ag(tree(X, void, X1), X) -> minimum_out_ag(tree(X, void, X1), X)
   minimum_in_ag(tree(X2, Left, X3), X) -> U1_ag(X2, Left, X3, X, minimum_in_ag(Left, X))
   U1_ag(X2, Left, X3, X, minimum_out_ag(Left, X)) -> minimum_out_ag(tree(X2, Left, X3), X)

The argument filtering Pi contains the following mapping:
minimum_in_ag(x1, x2)  =  minimum_in_ag(x2)

minimum_out_ag(x1, x2)  =  minimum_out_ag(x1)

tree(x1, x2, x3)  =  tree(x2)

U1_ag(x1, x2, x3, x4, x5)  =  U1_ag(x5)



----------------------------------------

(15) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MINIMUM_IN_AG(tree(X2, Left, X3), X) -> U1_AG(X2, Left, X3, X, minimum_in_ag(Left, X))
   MINIMUM_IN_AG(tree(X2, Left, X3), X) -> MINIMUM_IN_AG(Left, X)

The TRS R consists of the following rules:

   minimum_in_ag(tree(X, void, X1), X) -> minimum_out_ag(tree(X, void, X1), X)
   minimum_in_ag(tree(X2, Left, X3), X) -> U1_ag(X2, Left, X3, X, minimum_in_ag(Left, X))
   U1_ag(X2, Left, X3, X, minimum_out_ag(Left, X)) -> minimum_out_ag(tree(X2, Left, X3), X)

The argument filtering Pi contains the following mapping:
minimum_in_ag(x1, x2)  =  minimum_in_ag(x2)

minimum_out_ag(x1, x2)  =  minimum_out_ag(x1)

tree(x1, x2, x3)  =  tree(x2)

U1_ag(x1, x2, x3, x4, x5)  =  U1_ag(x5)

MINIMUM_IN_AG(x1, x2)  =  MINIMUM_IN_AG(x2)

U1_AG(x1, x2, x3, x4, x5)  =  U1_AG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MINIMUM_IN_AG(tree(X2, Left, X3), X) -> U1_AG(X2, Left, X3, X, minimum_in_ag(Left, X))
   MINIMUM_IN_AG(tree(X2, Left, X3), X) -> MINIMUM_IN_AG(Left, X)

The TRS R consists of the following rules:

   minimum_in_ag(tree(X, void, X1), X) -> minimum_out_ag(tree(X, void, X1), X)
   minimum_in_ag(tree(X2, Left, X3), X) -> U1_ag(X2, Left, X3, X, minimum_in_ag(Left, X))
   U1_ag(X2, Left, X3, X, minimum_out_ag(Left, X)) -> minimum_out_ag(tree(X2, Left, X3), X)

The argument filtering Pi contains the following mapping:
minimum_in_ag(x1, x2)  =  minimum_in_ag(x2)

minimum_out_ag(x1, x2)  =  minimum_out_ag(x1)

tree(x1, x2, x3)  =  tree(x2)

U1_ag(x1, x2, x3, x4, x5)  =  U1_ag(x5)

MINIMUM_IN_AG(x1, x2)  =  MINIMUM_IN_AG(x2)

U1_AG(x1, x2, x3, x4, x5)  =  U1_AG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(18)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MINIMUM_IN_AG(tree(X2, Left, X3), X) -> MINIMUM_IN_AG(Left, X)

The TRS R consists of the following rules:

   minimum_in_ag(tree(X, void, X1), X) -> minimum_out_ag(tree(X, void, X1), X)
   minimum_in_ag(tree(X2, Left, X3), X) -> U1_ag(X2, Left, X3, X, minimum_in_ag(Left, X))
   U1_ag(X2, Left, X3, X, minimum_out_ag(Left, X)) -> minimum_out_ag(tree(X2, Left, X3), X)

The argument filtering Pi contains the following mapping:
minimum_in_ag(x1, x2)  =  minimum_in_ag(x2)

minimum_out_ag(x1, x2)  =  minimum_out_ag(x1)

tree(x1, x2, x3)  =  tree(x2)

U1_ag(x1, x2, x3, x4, x5)  =  U1_ag(x5)

MINIMUM_IN_AG(x1, x2)  =  MINIMUM_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(20)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MINIMUM_IN_AG(tree(X2, Left, X3), X) -> MINIMUM_IN_AG(Left, X)

R is empty.
The argument filtering Pi contains the following mapping:
tree(x1, x2, x3)  =  tree(x2)

MINIMUM_IN_AG(x1, x2)  =  MINIMUM_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(21) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINIMUM_IN_AG(X) -> MINIMUM_IN_AG(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

minimum_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   minimum_in_ag(tree(X, void, X1), X) -> minimum_out_ag(tree(X, void, X1), X)
   minimum_in_ag(tree(X2, Left, X3), X) -> U1_ag(X2, Left, X3, X, minimum_in_ag(Left, X))
   U1_ag(X2, Left, X3, X, minimum_out_ag(Left, X)) -> minimum_out_ag(tree(X2, Left, X3), X)

The argument filtering Pi contains the following mapping:
minimum_in_ag(x1, x2)  =  minimum_in_ag(x2)

minimum_out_ag(x1, x2)  =  minimum_out_ag(x1, x2)

tree(x1, x2, x3)  =  tree(x2)

U1_ag(x1, x2, x3, x4, x5)  =  U1_ag(x4, x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(24)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   minimum_in_ag(tree(X, void, X1), X) -> minimum_out_ag(tree(X, void, X1), X)
   minimum_in_ag(tree(X2, Left, X3), X) -> U1_ag(X2, Left, X3, X, minimum_in_ag(Left, X))
   U1_ag(X2, Left, X3, X, minimum_out_ag(Left, X)) -> minimum_out_ag(tree(X2, Left, X3), X)

The argument filtering Pi contains the following mapping:
minimum_in_ag(x1, x2)  =  minimum_in_ag(x2)

minimum_out_ag(x1, x2)  =  minimum_out_ag(x1, x2)

tree(x1, x2, x3)  =  tree(x2)

U1_ag(x1, x2, x3, x4, x5)  =  U1_ag(x4, x5)



----------------------------------------

(25) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MINIMUM_IN_AG(tree(X2, Left, X3), X) -> U1_AG(X2, Left, X3, X, minimum_in_ag(Left, X))
   MINIMUM_IN_AG(tree(X2, Left, X3), X) -> MINIMUM_IN_AG(Left, X)

The TRS R consists of the following rules:

   minimum_in_ag(tree(X, void, X1), X) -> minimum_out_ag(tree(X, void, X1), X)
   minimum_in_ag(tree(X2, Left, X3), X) -> U1_ag(X2, Left, X3, X, minimum_in_ag(Left, X))
   U1_ag(X2, Left, X3, X, minimum_out_ag(Left, X)) -> minimum_out_ag(tree(X2, Left, X3), X)

The argument filtering Pi contains the following mapping:
minimum_in_ag(x1, x2)  =  minimum_in_ag(x2)

minimum_out_ag(x1, x2)  =  minimum_out_ag(x1, x2)

tree(x1, x2, x3)  =  tree(x2)

U1_ag(x1, x2, x3, x4, x5)  =  U1_ag(x4, x5)

MINIMUM_IN_AG(x1, x2)  =  MINIMUM_IN_AG(x2)

U1_AG(x1, x2, x3, x4, x5)  =  U1_AG(x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(26)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MINIMUM_IN_AG(tree(X2, Left, X3), X) -> U1_AG(X2, Left, X3, X, minimum_in_ag(Left, X))
   MINIMUM_IN_AG(tree(X2, Left, X3), X) -> MINIMUM_IN_AG(Left, X)

The TRS R consists of the following rules:

   minimum_in_ag(tree(X, void, X1), X) -> minimum_out_ag(tree(X, void, X1), X)
   minimum_in_ag(tree(X2, Left, X3), X) -> U1_ag(X2, Left, X3, X, minimum_in_ag(Left, X))
   U1_ag(X2, Left, X3, X, minimum_out_ag(Left, X)) -> minimum_out_ag(tree(X2, Left, X3), X)

The argument filtering Pi contains the following mapping:
minimum_in_ag(x1, x2)  =  minimum_in_ag(x2)

minimum_out_ag(x1, x2)  =  minimum_out_ag(x1, x2)

tree(x1, x2, x3)  =  tree(x2)

U1_ag(x1, x2, x3, x4, x5)  =  U1_ag(x4, x5)

MINIMUM_IN_AG(x1, x2)  =  MINIMUM_IN_AG(x2)

U1_AG(x1, x2, x3, x4, x5)  =  U1_AG(x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(27) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(28)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MINIMUM_IN_AG(tree(X2, Left, X3), X) -> MINIMUM_IN_AG(Left, X)

The TRS R consists of the following rules:

   minimum_in_ag(tree(X, void, X1), X) -> minimum_out_ag(tree(X, void, X1), X)
   minimum_in_ag(tree(X2, Left, X3), X) -> U1_ag(X2, Left, X3, X, minimum_in_ag(Left, X))
   U1_ag(X2, Left, X3, X, minimum_out_ag(Left, X)) -> minimum_out_ag(tree(X2, Left, X3), X)

The argument filtering Pi contains the following mapping:
minimum_in_ag(x1, x2)  =  minimum_in_ag(x2)

minimum_out_ag(x1, x2)  =  minimum_out_ag(x1, x2)

tree(x1, x2, x3)  =  tree(x2)

U1_ag(x1, x2, x3, x4, x5)  =  U1_ag(x4, x5)

MINIMUM_IN_AG(x1, x2)  =  MINIMUM_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(30)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MINIMUM_IN_AG(tree(X2, Left, X3), X) -> MINIMUM_IN_AG(Left, X)

R is empty.
The argument filtering Pi contains the following mapping:
tree(x1, x2, x3)  =  tree(x2)

MINIMUM_IN_AG(x1, x2)  =  MINIMUM_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(31) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINIMUM_IN_AG(X) -> MINIMUM_IN_AG(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(33) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 8,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(minimum (tree X (void) X1) X)",
                null
            ],
            [
                "(minimum (tree X2 Left X3) X)",
                "(minimum Left X)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "11": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(minimum T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(minimum T25 T24)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T24"],
                    "free": [],
                    "exprvars": []
                }
            },
            "16": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(minimum T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(minimum T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(minimum T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "10": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(minimum T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 8,
                "to": 9,
                "label": "CASE"
            },
            {
                "from": 9,
                "to": 10,
                "label": "PARALLEL"
            },
            {
                "from": 9,
                "to": 11,
                "label": "PARALLEL"
            },
            {
                "from": 10,
                "to": 12,
                "label": "EVAL with clause\nminimum(tree(X12, void, X13), X12).\nand substitutionX12 -> T11,\nX13 -> T12,\nT1 -> tree(T11, void, T12),\nT2 -> T11"
            },
            {
                "from": 10,
                "to": 13,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 11,
                "to": 15,
                "label": "EVAL with clause\nminimum(tree(X22, X23, X24), X25) :- minimum(X23, X25).\nand substitutionX22 -> T21,\nX23 -> T25,\nX24 -> T23,\nT1 -> tree(T21, T25, T23),\nT2 -> T24,\nX25 -> T24,\nT22 -> T25"
            },
            {
                "from": 11,
                "to": 16,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 12,
                "to": 14,
                "label": "SUCCESS"
            },
            {
                "from": 15,
                "to": 8,
                "label": "INSTANCE with matching:\nT1 -> T25\nT2 -> T24"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(34)
Obligation:
Rules:
f15_out(T24) -> f11_out(T24) :|: TRUE
f11_in(T2) -> f16_in :|: TRUE
f16_out -> f11_out(x) :|: TRUE
f11_in(x1) -> f15_in(x1) :|: TRUE
f15_in(x2) -> f8_in(x2) :|: TRUE
f8_out(x3) -> f15_out(x3) :|: TRUE
f9_out(x4) -> f8_out(x4) :|: TRUE
f8_in(x5) -> f9_in(x5) :|: TRUE
f9_in(x6) -> f11_in(x6) :|: TRUE
f11_out(x7) -> f9_out(x7) :|: TRUE
f9_in(x8) -> f10_in(x8) :|: TRUE
f10_out(x9) -> f9_out(x9) :|: TRUE
Start term: f8_in(T2)

----------------------------------------

(35) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f11_in(x1) -> f15_in(x1) :|: TRUE
f15_in(x2) -> f8_in(x2) :|: TRUE
f8_in(x5) -> f9_in(x5) :|: TRUE
f9_in(x6) -> f11_in(x6) :|: TRUE


----------------------------------------

(36)
Obligation:
Rules:
f11_in(x1) -> f15_in(x1) :|: TRUE
f15_in(x2) -> f8_in(x2) :|: TRUE
f8_in(x5) -> f9_in(x5) :|: TRUE
f9_in(x6) -> f11_in(x6) :|: TRUE

----------------------------------------

(37) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(38)
Obligation:
Rules:
f11_in(x1:0) -> f11_in(x1:0) :|: TRUE

----------------------------------------

(39) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(40)
Obligation:
Rules:
f11_in(x1:0) -> f11_in(x1:0) :|: TRUE

----------------------------------------

(41) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f11_in(x1:0) -> f11_in(x1:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(42)
Obligation:

Termination digraph:
Nodes:
(1) f11_in(x1:0) -> f11_in(x1:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(43) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f11_in(VARIABLE)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(44)
Obligation:
Rules:
f11_in(x1:0) -> f11_in(x1:0) :|: TRUE

----------------------------------------

(45) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, x1:0) -> f(1, x1:0) :|: pc = 1 && TRUE
Witness term starting non-terminating reduction: f(1, -8)
----------------------------------------

(46)
NO

----------------------------------------

(47) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 17,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(minimum (tree X (void) X1) X)",
                null
            ],
            [
                "(minimum (tree X2 Left X3) X)",
                "(minimum Left X)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "66": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "67": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(minimum T15 T14)"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(minimum T15 T14)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T14"],
                    "free": [],
                    "exprvars": []
                }
            },
            "89": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "68": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(minimum T15 T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T14"],
                    "free": [],
                    "exprvars": []
                }
            },
            "69": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(minimum T15 T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T14"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "110": {
                "goal": [{
                    "clause": 0,
                    "scope": 3,
                    "term": "(minimum T51 T50)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(minimum T1 T50)",
                        "(minimum (tree X6 (void) X7) X6)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T50"],
                    "free": [
                        "X6",
                        "X7"
                    ],
                    "exprvars": []
                }
            },
            "111": {
                "goal": [{
                    "clause": 1,
                    "scope": 3,
                    "term": "(minimum T51 T50)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(minimum T1 T50)",
                        "(minimum (tree X6 (void) X7) X6)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T50"],
                    "free": [
                        "X6",
                        "X7"
                    ],
                    "exprvars": []
                }
            },
            "112": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "113": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "114": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "70": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "71": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "72": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "73": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(minimum T38 T37)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T37"],
                    "free": [],
                    "exprvars": []
                }
            },
            "74": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "79": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(minimum T51 T50)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(minimum T1 T50)",
                        "(minimum (tree X6 (void) X7) X6)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T50"],
                    "free": [
                        "X6",
                        "X7"
                    ],
                    "exprvars": []
                }
            },
            "59": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(minimum T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(minimum T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(minimum T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "121": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(minimum T74 T73)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(minimum T1 T73)",
                        "(minimum (tree X6 (void) X7) X6)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T73"],
                    "free": [
                        "X6",
                        "X7"
                    ],
                    "exprvars": []
                }
            },
            "122": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "107": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 3,
                        "term": "(minimum T51 T50)"
                    },
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(minimum T51 T50)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(minimum T1 T50)",
                        "(minimum (tree X6 (void) X7) X6)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T50"],
                    "free": [
                        "X6",
                        "X7"
                    ],
                    "exprvars": []
                }
            },
            "60": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(minimum T1 T5)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [],
                    "exprvars": []
                }
            },
            "61": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(minimum T1 T2)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(minimum T1 T2)",
                        "(minimum (tree X6 (void) X7) X6)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [
                        "X6",
                        "X7"
                    ],
                    "exprvars": []
                }
            },
            "62": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(minimum T1 T5)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [],
                    "exprvars": []
                }
            },
            "65": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(minimum T15 T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T14"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 17,
                "to": 59,
                "label": "CASE"
            },
            {
                "from": 59,
                "to": 60,
                "label": "EVAL with clause\nminimum(tree(X6, void, X7), X6).\nand substitutionX6 -> T5,\nX7 -> T6,\nT1 -> tree(T5, void, T6),\nT2 -> T5"
            },
            {
                "from": 59,
                "to": 61,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 60,
                "to": 62,
                "label": "SUCCESS"
            },
            {
                "from": 61,
                "to": 79,
                "label": "EVAL with clause\nminimum(tree(X46, X47, X48), X49) :- minimum(X47, X49).\nand substitutionX46 -> T47,\nX47 -> T51,\nX48 -> T49,\nT1 -> tree(T47, T51, T49),\nT2 -> T50,\nX49 -> T50,\nT48 -> T51"
            },
            {
                "from": 61,
                "to": 89,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 62,
                "to": 65,
                "label": "EVAL with clause\nminimum(tree(X12, X13, X14), X15) :- minimum(X13, X15).\nand substitutionX12 -> T11,\nX13 -> T15,\nX14 -> T13,\nT1 -> tree(T11, T15, T13),\nT5 -> T14,\nX15 -> T14,\nT12 -> T15"
            },
            {
                "from": 62,
                "to": 66,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 65,
                "to": 67,
                "label": "CASE"
            },
            {
                "from": 67,
                "to": 68,
                "label": "PARALLEL"
            },
            {
                "from": 67,
                "to": 69,
                "label": "PARALLEL"
            },
            {
                "from": 68,
                "to": 70,
                "label": "EVAL with clause\nminimum(tree(X24, void, X25), X24).\nand substitutionX24 -> T24,\nX25 -> T25,\nT15 -> tree(T24, void, T25),\nT14 -> T24"
            },
            {
                "from": 68,
                "to": 71,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 69,
                "to": 73,
                "label": "EVAL with clause\nminimum(tree(X34, X35, X36), X37) :- minimum(X35, X37).\nand substitutionX34 -> T34,\nX35 -> T38,\nX36 -> T36,\nT15 -> tree(T34, T38, T36),\nT14 -> T37,\nX37 -> T37,\nT35 -> T38"
            },
            {
                "from": 69,
                "to": 74,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 70,
                "to": 72,
                "label": "SUCCESS"
            },
            {
                "from": 73,
                "to": 17,
                "label": "INSTANCE with matching:\nT1 -> T38\nT2 -> T37"
            },
            {
                "from": 79,
                "to": 107,
                "label": "CASE"
            },
            {
                "from": 107,
                "to": 110,
                "label": "PARALLEL"
            },
            {
                "from": 107,
                "to": 111,
                "label": "PARALLEL"
            },
            {
                "from": 110,
                "to": 112,
                "label": "EVAL with clause\nminimum(tree(X58, void, X59), X58).\nand substitutionX58 -> T60,\nX59 -> T61,\nT51 -> tree(T60, void, T61),\nT50 -> T60"
            },
            {
                "from": 110,
                "to": 113,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 111,
                "to": 121,
                "label": "EVAL with clause\nminimum(tree(X68, X69, X70), X71) :- minimum(X69, X71).\nand substitutionX68 -> T70,\nX69 -> T74,\nX70 -> T72,\nT51 -> tree(T70, T74, T72),\nT50 -> T73,\nX71 -> T73,\nT71 -> T74"
            },
            {
                "from": 111,
                "to": 122,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 112,
                "to": 114,
                "label": "SUCCESS"
            },
            {
                "from": 121,
                "to": 17,
                "label": "INSTANCE with matching:\nT1 -> T74\nT2 -> T73"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(48)
Obligation:
Triples:

minimumA(tree(X1, tree(X2, X3, X4), X5), X6) :- minimumA(X3, X6).
minimumA(tree(X1, tree(X2, X3, X4), X5), X6) :- minimumA(X3, X6).

Clauses:

minimumcA(tree(X1, void, X2), X1).
minimumcA(tree(X1, tree(X2, void, X3), X4), X2).
minimumcA(tree(X1, tree(X2, X3, X4), X5), X6) :- minimumcA(X3, X6).
minimumcA(tree(X1, tree(X2, void, X3), X4), X2).
minimumcA(tree(X1, tree(X2, X3, X4), X5), X6) :- minimumcA(X3, X6).

Afs:

minimumA(x1, x2)  =  minimumA(x2)


----------------------------------------

(49) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

minimumA_in_2: (f,b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   MINIMUMA_IN_AG(tree(X1, tree(X2, X3, X4), X5), X6) -> U1_AG(X1, X2, X3, X4, X5, X6, minimumA_in_ag(X3, X6))
   MINIMUMA_IN_AG(tree(X1, tree(X2, X3, X4), X5), X6) -> MINIMUMA_IN_AG(X3, X6)

R is empty.
The argument filtering Pi contains the following mapping:
minimumA_in_ag(x1, x2)  =  minimumA_in_ag(x2)

tree(x1, x2, x3)  =  tree(x2)

MINIMUMA_IN_AG(x1, x2)  =  MINIMUMA_IN_AG(x2)

U1_AG(x1, x2, x3, x4, x5, x6, x7)  =  U1_AG(x6, x7)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(50)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MINIMUMA_IN_AG(tree(X1, tree(X2, X3, X4), X5), X6) -> U1_AG(X1, X2, X3, X4, X5, X6, minimumA_in_ag(X3, X6))
   MINIMUMA_IN_AG(tree(X1, tree(X2, X3, X4), X5), X6) -> MINIMUMA_IN_AG(X3, X6)

R is empty.
The argument filtering Pi contains the following mapping:
minimumA_in_ag(x1, x2)  =  minimumA_in_ag(x2)

tree(x1, x2, x3)  =  tree(x2)

MINIMUMA_IN_AG(x1, x2)  =  MINIMUMA_IN_AG(x2)

U1_AG(x1, x2, x3, x4, x5, x6, x7)  =  U1_AG(x6, x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(51) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(52)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MINIMUMA_IN_AG(tree(X1, tree(X2, X3, X4), X5), X6) -> MINIMUMA_IN_AG(X3, X6)

R is empty.
The argument filtering Pi contains the following mapping:
tree(x1, x2, x3)  =  tree(x2)

MINIMUMA_IN_AG(x1, x2)  =  MINIMUMA_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(53) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MINIMUMA_IN_AG(X6) -> MINIMUMA_IN_AG(X6)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.