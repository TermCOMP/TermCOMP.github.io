YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/QfZpG.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

preorder(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) PiDPToQDPProof [SOUND, 0 ms]
(10) QDP
(11) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Clauses:

preorder(T, Xs) :- preorder_dl(T, -(Xs, [])).
preorder_dl(nil, -(X, X)).
preorder_dl(tree(L, X, R), -(.(X, Xs), Zs)) :- ','(preorder_dl(L, -(Xs, Ys)), preorder_dl(R, -(Ys, Zs))).


Query: preorder(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

preorder_in_2: (b,f)

preorder_dl_in_2: (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   preorder_in_ga(T, Xs) -> U1_ga(T, Xs, preorder_dl_in_ga(T, -(Xs, [])))
   preorder_dl_in_ga(nil, -(X, X)) -> preorder_dl_out_ga(nil, -(X, X))
   preorder_dl_in_ga(tree(L, X, R), -(.(X, Xs), Zs)) -> U2_ga(L, X, R, Xs, Zs, preorder_dl_in_ga(L, -(Xs, Ys)))
   U2_ga(L, X, R, Xs, Zs, preorder_dl_out_ga(L, -(Xs, Ys))) -> U3_ga(L, X, R, Xs, Zs, preorder_dl_in_ga(R, -(Ys, Zs)))
   U3_ga(L, X, R, Xs, Zs, preorder_dl_out_ga(R, -(Ys, Zs))) -> preorder_dl_out_ga(tree(L, X, R), -(.(X, Xs), Zs))
   U1_ga(T, Xs, preorder_dl_out_ga(T, -(Xs, []))) -> preorder_out_ga(T, Xs)

The argument filtering Pi contains the following mapping:
preorder_in_ga(x1, x2)  =  preorder_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

preorder_dl_in_ga(x1, x2)  =  preorder_dl_in_ga(x1)

nil  =  nil

preorder_dl_out_ga(x1, x2)  =  preorder_dl_out_ga

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x3, x6)

U3_ga(x1, x2, x3, x4, x5, x6)  =  U3_ga(x6)

preorder_out_ga(x1, x2)  =  preorder_out_ga





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   preorder_in_ga(T, Xs) -> U1_ga(T, Xs, preorder_dl_in_ga(T, -(Xs, [])))
   preorder_dl_in_ga(nil, -(X, X)) -> preorder_dl_out_ga(nil, -(X, X))
   preorder_dl_in_ga(tree(L, X, R), -(.(X, Xs), Zs)) -> U2_ga(L, X, R, Xs, Zs, preorder_dl_in_ga(L, -(Xs, Ys)))
   U2_ga(L, X, R, Xs, Zs, preorder_dl_out_ga(L, -(Xs, Ys))) -> U3_ga(L, X, R, Xs, Zs, preorder_dl_in_ga(R, -(Ys, Zs)))
   U3_ga(L, X, R, Xs, Zs, preorder_dl_out_ga(R, -(Ys, Zs))) -> preorder_dl_out_ga(tree(L, X, R), -(.(X, Xs), Zs))
   U1_ga(T, Xs, preorder_dl_out_ga(T, -(Xs, []))) -> preorder_out_ga(T, Xs)

The argument filtering Pi contains the following mapping:
preorder_in_ga(x1, x2)  =  preorder_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

preorder_dl_in_ga(x1, x2)  =  preorder_dl_in_ga(x1)

nil  =  nil

preorder_dl_out_ga(x1, x2)  =  preorder_dl_out_ga

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x3, x6)

U3_ga(x1, x2, x3, x4, x5, x6)  =  U3_ga(x6)

preorder_out_ga(x1, x2)  =  preorder_out_ga



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   PREORDER_IN_GA(T, Xs) -> U1_GA(T, Xs, preorder_dl_in_ga(T, -(Xs, [])))
   PREORDER_IN_GA(T, Xs) -> PREORDER_DL_IN_GA(T, -(Xs, []))
   PREORDER_DL_IN_GA(tree(L, X, R), -(.(X, Xs), Zs)) -> U2_GA(L, X, R, Xs, Zs, preorder_dl_in_ga(L, -(Xs, Ys)))
   PREORDER_DL_IN_GA(tree(L, X, R), -(.(X, Xs), Zs)) -> PREORDER_DL_IN_GA(L, -(Xs, Ys))
   U2_GA(L, X, R, Xs, Zs, preorder_dl_out_ga(L, -(Xs, Ys))) -> U3_GA(L, X, R, Xs, Zs, preorder_dl_in_ga(R, -(Ys, Zs)))
   U2_GA(L, X, R, Xs, Zs, preorder_dl_out_ga(L, -(Xs, Ys))) -> PREORDER_DL_IN_GA(R, -(Ys, Zs))

The TRS R consists of the following rules:

   preorder_in_ga(T, Xs) -> U1_ga(T, Xs, preorder_dl_in_ga(T, -(Xs, [])))
   preorder_dl_in_ga(nil, -(X, X)) -> preorder_dl_out_ga(nil, -(X, X))
   preorder_dl_in_ga(tree(L, X, R), -(.(X, Xs), Zs)) -> U2_ga(L, X, R, Xs, Zs, preorder_dl_in_ga(L, -(Xs, Ys)))
   U2_ga(L, X, R, Xs, Zs, preorder_dl_out_ga(L, -(Xs, Ys))) -> U3_ga(L, X, R, Xs, Zs, preorder_dl_in_ga(R, -(Ys, Zs)))
   U3_ga(L, X, R, Xs, Zs, preorder_dl_out_ga(R, -(Ys, Zs))) -> preorder_dl_out_ga(tree(L, X, R), -(.(X, Xs), Zs))
   U1_ga(T, Xs, preorder_dl_out_ga(T, -(Xs, []))) -> preorder_out_ga(T, Xs)

The argument filtering Pi contains the following mapping:
preorder_in_ga(x1, x2)  =  preorder_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

preorder_dl_in_ga(x1, x2)  =  preorder_dl_in_ga(x1)

nil  =  nil

preorder_dl_out_ga(x1, x2)  =  preorder_dl_out_ga

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x3, x6)

U3_ga(x1, x2, x3, x4, x5, x6)  =  U3_ga(x6)

preorder_out_ga(x1, x2)  =  preorder_out_ga

PREORDER_IN_GA(x1, x2)  =  PREORDER_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

PREORDER_DL_IN_GA(x1, x2)  =  PREORDER_DL_IN_GA(x1)

U2_GA(x1, x2, x3, x4, x5, x6)  =  U2_GA(x3, x6)

U3_GA(x1, x2, x3, x4, x5, x6)  =  U3_GA(x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PREORDER_IN_GA(T, Xs) -> U1_GA(T, Xs, preorder_dl_in_ga(T, -(Xs, [])))
   PREORDER_IN_GA(T, Xs) -> PREORDER_DL_IN_GA(T, -(Xs, []))
   PREORDER_DL_IN_GA(tree(L, X, R), -(.(X, Xs), Zs)) -> U2_GA(L, X, R, Xs, Zs, preorder_dl_in_ga(L, -(Xs, Ys)))
   PREORDER_DL_IN_GA(tree(L, X, R), -(.(X, Xs), Zs)) -> PREORDER_DL_IN_GA(L, -(Xs, Ys))
   U2_GA(L, X, R, Xs, Zs, preorder_dl_out_ga(L, -(Xs, Ys))) -> U3_GA(L, X, R, Xs, Zs, preorder_dl_in_ga(R, -(Ys, Zs)))
   U2_GA(L, X, R, Xs, Zs, preorder_dl_out_ga(L, -(Xs, Ys))) -> PREORDER_DL_IN_GA(R, -(Ys, Zs))

The TRS R consists of the following rules:

   preorder_in_ga(T, Xs) -> U1_ga(T, Xs, preorder_dl_in_ga(T, -(Xs, [])))
   preorder_dl_in_ga(nil, -(X, X)) -> preorder_dl_out_ga(nil, -(X, X))
   preorder_dl_in_ga(tree(L, X, R), -(.(X, Xs), Zs)) -> U2_ga(L, X, R, Xs, Zs, preorder_dl_in_ga(L, -(Xs, Ys)))
   U2_ga(L, X, R, Xs, Zs, preorder_dl_out_ga(L, -(Xs, Ys))) -> U3_ga(L, X, R, Xs, Zs, preorder_dl_in_ga(R, -(Ys, Zs)))
   U3_ga(L, X, R, Xs, Zs, preorder_dl_out_ga(R, -(Ys, Zs))) -> preorder_dl_out_ga(tree(L, X, R), -(.(X, Xs), Zs))
   U1_ga(T, Xs, preorder_dl_out_ga(T, -(Xs, []))) -> preorder_out_ga(T, Xs)

The argument filtering Pi contains the following mapping:
preorder_in_ga(x1, x2)  =  preorder_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

preorder_dl_in_ga(x1, x2)  =  preorder_dl_in_ga(x1)

nil  =  nil

preorder_dl_out_ga(x1, x2)  =  preorder_dl_out_ga

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x3, x6)

U3_ga(x1, x2, x3, x4, x5, x6)  =  U3_ga(x6)

preorder_out_ga(x1, x2)  =  preorder_out_ga

PREORDER_IN_GA(x1, x2)  =  PREORDER_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

PREORDER_DL_IN_GA(x1, x2)  =  PREORDER_DL_IN_GA(x1)

U2_GA(x1, x2, x3, x4, x5, x6)  =  U2_GA(x3, x6)

U3_GA(x1, x2, x3, x4, x5, x6)  =  U3_GA(x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GA(L, X, R, Xs, Zs, preorder_dl_out_ga(L, -(Xs, Ys))) -> PREORDER_DL_IN_GA(R, -(Ys, Zs))
   PREORDER_DL_IN_GA(tree(L, X, R), -(.(X, Xs), Zs)) -> U2_GA(L, X, R, Xs, Zs, preorder_dl_in_ga(L, -(Xs, Ys)))
   PREORDER_DL_IN_GA(tree(L, X, R), -(.(X, Xs), Zs)) -> PREORDER_DL_IN_GA(L, -(Xs, Ys))

The TRS R consists of the following rules:

   preorder_in_ga(T, Xs) -> U1_ga(T, Xs, preorder_dl_in_ga(T, -(Xs, [])))
   preorder_dl_in_ga(nil, -(X, X)) -> preorder_dl_out_ga(nil, -(X, X))
   preorder_dl_in_ga(tree(L, X, R), -(.(X, Xs), Zs)) -> U2_ga(L, X, R, Xs, Zs, preorder_dl_in_ga(L, -(Xs, Ys)))
   U2_ga(L, X, R, Xs, Zs, preorder_dl_out_ga(L, -(Xs, Ys))) -> U3_ga(L, X, R, Xs, Zs, preorder_dl_in_ga(R, -(Ys, Zs)))
   U3_ga(L, X, R, Xs, Zs, preorder_dl_out_ga(R, -(Ys, Zs))) -> preorder_dl_out_ga(tree(L, X, R), -(.(X, Xs), Zs))
   U1_ga(T, Xs, preorder_dl_out_ga(T, -(Xs, []))) -> preorder_out_ga(T, Xs)

The argument filtering Pi contains the following mapping:
preorder_in_ga(x1, x2)  =  preorder_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

preorder_dl_in_ga(x1, x2)  =  preorder_dl_in_ga(x1)

nil  =  nil

preorder_dl_out_ga(x1, x2)  =  preorder_dl_out_ga

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x3, x6)

U3_ga(x1, x2, x3, x4, x5, x6)  =  U3_ga(x6)

preorder_out_ga(x1, x2)  =  preorder_out_ga

PREORDER_DL_IN_GA(x1, x2)  =  PREORDER_DL_IN_GA(x1)

U2_GA(x1, x2, x3, x4, x5, x6)  =  U2_GA(x3, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GA(L, X, R, Xs, Zs, preorder_dl_out_ga(L, -(Xs, Ys))) -> PREORDER_DL_IN_GA(R, -(Ys, Zs))
   PREORDER_DL_IN_GA(tree(L, X, R), -(.(X, Xs), Zs)) -> U2_GA(L, X, R, Xs, Zs, preorder_dl_in_ga(L, -(Xs, Ys)))
   PREORDER_DL_IN_GA(tree(L, X, R), -(.(X, Xs), Zs)) -> PREORDER_DL_IN_GA(L, -(Xs, Ys))

The TRS R consists of the following rules:

   preorder_dl_in_ga(nil, -(X, X)) -> preorder_dl_out_ga(nil, -(X, X))
   preorder_dl_in_ga(tree(L, X, R), -(.(X, Xs), Zs)) -> U2_ga(L, X, R, Xs, Zs, preorder_dl_in_ga(L, -(Xs, Ys)))
   U2_ga(L, X, R, Xs, Zs, preorder_dl_out_ga(L, -(Xs, Ys))) -> U3_ga(L, X, R, Xs, Zs, preorder_dl_in_ga(R, -(Ys, Zs)))
   U3_ga(L, X, R, Xs, Zs, preorder_dl_out_ga(R, -(Ys, Zs))) -> preorder_dl_out_ga(tree(L, X, R), -(.(X, Xs), Zs))

The argument filtering Pi contains the following mapping:
preorder_dl_in_ga(x1, x2)  =  preorder_dl_in_ga(x1)

nil  =  nil

preorder_dl_out_ga(x1, x2)  =  preorder_dl_out_ga

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x3, x6)

U3_ga(x1, x2, x3, x4, x5, x6)  =  U3_ga(x6)

PREORDER_DL_IN_GA(x1, x2)  =  PREORDER_DL_IN_GA(x1)

U2_GA(x1, x2, x3, x4, x5, x6)  =  U2_GA(x3, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GA(R, preorder_dl_out_ga) -> PREORDER_DL_IN_GA(R)
   PREORDER_DL_IN_GA(tree(L, X, R)) -> U2_GA(R, preorder_dl_in_ga(L))
   PREORDER_DL_IN_GA(tree(L, X, R)) -> PREORDER_DL_IN_GA(L)

The TRS R consists of the following rules:

   preorder_dl_in_ga(nil) -> preorder_dl_out_ga
   preorder_dl_in_ga(tree(L, X, R)) -> U2_ga(R, preorder_dl_in_ga(L))
   U2_ga(R, preorder_dl_out_ga) -> U3_ga(preorder_dl_in_ga(R))
   U3_ga(preorder_dl_out_ga) -> preorder_dl_out_ga

The set Q consists of the following terms:

   preorder_dl_in_ga(x0)
   U2_ga(x0, x1)
   U3_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PREORDER_DL_IN_GA(tree(L, X, R)) -> U2_GA(R, preorder_dl_in_ga(L))
The graph contains the following edges 1 > 1


*PREORDER_DL_IN_GA(tree(L, X, R)) -> PREORDER_DL_IN_GA(L)
The graph contains the following edges 1 > 1


*U2_GA(R, preorder_dl_out_ga) -> PREORDER_DL_IN_GA(R)
The graph contains the following edges 1 >= 1


----------------------------------------

(12)
YES
