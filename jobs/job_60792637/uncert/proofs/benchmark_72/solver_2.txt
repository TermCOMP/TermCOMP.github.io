MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/elF9H.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

sublist(g,a)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) AND
        (7) PiDP
            (8) UsableRulesProof [EQUIVALENT, 0 ms]
            (9) PiDP
            (10) PiDPToQDPProof [SOUND, 0 ms]
            (11) QDP
            (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (13) YES
        (14) PiDP
            (15) UsableRulesProof [EQUIVALENT, 0 ms]
            (16) PiDP
            (17) PiDPToQDPProof [SOUND, 0 ms]
            (18) QDP
(19) PrologToPiTRSProof [SOUND, 0 ms]
(20) PiTRS
    (21) DependencyPairsProof [EQUIVALENT, 0 ms]
    (22) PiDP
    (23) DependencyGraphProof [EQUIVALENT, 0 ms]
    (24) AND
        (25) PiDP
            (26) UsableRulesProof [EQUIVALENT, 0 ms]
            (27) PiDP
            (28) PiDPToQDPProof [SOUND, 0 ms]
            (29) QDP
            (30) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (31) YES
        (32) PiDP
            (33) UsableRulesProof [EQUIVALENT, 0 ms]
            (34) PiDP
            (35) PiDPToQDPProof [SOUND, 0 ms]
            (36) QDP
(37) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(38) AND
    (39) IRSwT
        (40) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (41) TRUE
    (42) IRSwT
        (43) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (44) IRSwT
        (45) IntTRSCompressionProof [EQUIVALENT, 18 ms]
        (46) IRSwT
        (47) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (48) IRSwT
        (49) IRSwTTerminationDigraphProof [EQUIVALENT, 3 ms]
        (50) IRSwT
        (51) FilterProof [EQUIVALENT, 0 ms]
        (52) IntTRS
        (53) IntTRSPeriodicNontermProof [COMPLETE, 0 ms]
        (54) NO
(55) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(56) TRIPLES
    (57) TriplesToPiDPProof [SOUND, 0 ms]
    (58) PiDP
    (59) DependencyGraphProof [EQUIVALENT, 0 ms]
    (60) AND
        (61) PiDP
            (62) PiDPToQDPProof [SOUND, 0 ms]
            (63) QDP
            (64) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (65) YES
        (66) PiDP
            (67) PiDPToQDPProof [SOUND, 0 ms]
            (68) QDP
(69) PrologToTRSTransformerProof [SOUND, 0 ms]
(70) QTRS
    (71) QTRSRRRProof [EQUIVALENT, 34 ms]
    (72) QTRS
    (73) QTRSRRRProof [EQUIVALENT, 0 ms]
    (74) QTRS
    (75) Overlay + Local Confluence [EQUIVALENT, 0 ms]
    (76) QTRS
    (77) DependencyPairsProof [EQUIVALENT, 0 ms]
    (78) QDP
    (79) UsableRulesProof [EQUIVALENT, 0 ms]
    (80) QDP
    (81) QReductionProof [EQUIVALENT, 0 ms]
    (82) QDP


----------------------------------------

(0)
Obligation:
Clauses:

sublist(Xs, Ys) :- ','(app(X1, Zs, Ys), app(Xs, X2, Zs)).
app([], X, X).
app(.(X, Xs), Ys, .(X, Zs)) :- app(Xs, Ys, Zs).


Query: sublist(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

sublist_in_2: (b,f)

app_in_3: (f,f,f) (b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   sublist_in_ga(Xs, Ys) -> U1_ga(Xs, Ys, app_in_aaa(X1, Zs, Ys))
   app_in_aaa([], X, X) -> app_out_aaa([], X, X)
   app_in_aaa(.(X, Xs), Ys, .(X, Zs)) -> U3_aaa(X, Xs, Ys, Zs, app_in_aaa(Xs, Ys, Zs))
   U3_aaa(X, Xs, Ys, Zs, app_out_aaa(Xs, Ys, Zs)) -> app_out_aaa(.(X, Xs), Ys, .(X, Zs))
   U1_ga(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> U2_ga(Xs, Ys, app_in_gaa(Xs, X2, Zs))
   app_in_gaa([], X, X) -> app_out_gaa([], X, X)
   app_in_gaa(.(X, Xs), Ys, .(X, Zs)) -> U3_gaa(X, Xs, Ys, Zs, app_in_gaa(Xs, Ys, Zs))
   U3_gaa(X, Xs, Ys, Zs, app_out_gaa(Xs, Ys, Zs)) -> app_out_gaa(.(X, Xs), Ys, .(X, Zs))
   U2_ga(Xs, Ys, app_out_gaa(Xs, X2, Zs)) -> sublist_out_ga(Xs, Ys)

The argument filtering Pi contains the following mapping:
sublist_in_ga(x1, x2)  =  sublist_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

app_in_aaa(x1, x2, x3)  =  app_in_aaa

app_out_aaa(x1, x2, x3)  =  app_out_aaa(x1)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

.(x1, x2)  =  .(x2)

U2_ga(x1, x2, x3)  =  U2_ga(x1, x3)

app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa(x1)

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x2, x5)

sublist_out_ga(x1, x2)  =  sublist_out_ga(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   sublist_in_ga(Xs, Ys) -> U1_ga(Xs, Ys, app_in_aaa(X1, Zs, Ys))
   app_in_aaa([], X, X) -> app_out_aaa([], X, X)
   app_in_aaa(.(X, Xs), Ys, .(X, Zs)) -> U3_aaa(X, Xs, Ys, Zs, app_in_aaa(Xs, Ys, Zs))
   U3_aaa(X, Xs, Ys, Zs, app_out_aaa(Xs, Ys, Zs)) -> app_out_aaa(.(X, Xs), Ys, .(X, Zs))
   U1_ga(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> U2_ga(Xs, Ys, app_in_gaa(Xs, X2, Zs))
   app_in_gaa([], X, X) -> app_out_gaa([], X, X)
   app_in_gaa(.(X, Xs), Ys, .(X, Zs)) -> U3_gaa(X, Xs, Ys, Zs, app_in_gaa(Xs, Ys, Zs))
   U3_gaa(X, Xs, Ys, Zs, app_out_gaa(Xs, Ys, Zs)) -> app_out_gaa(.(X, Xs), Ys, .(X, Zs))
   U2_ga(Xs, Ys, app_out_gaa(Xs, X2, Zs)) -> sublist_out_ga(Xs, Ys)

The argument filtering Pi contains the following mapping:
sublist_in_ga(x1, x2)  =  sublist_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

app_in_aaa(x1, x2, x3)  =  app_in_aaa

app_out_aaa(x1, x2, x3)  =  app_out_aaa(x1)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

.(x1, x2)  =  .(x2)

U2_ga(x1, x2, x3)  =  U2_ga(x1, x3)

app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa(x1)

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x2, x5)

sublist_out_ga(x1, x2)  =  sublist_out_ga(x1)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   SUBLIST_IN_GA(Xs, Ys) -> U1_GA(Xs, Ys, app_in_aaa(X1, Zs, Ys))
   SUBLIST_IN_GA(Xs, Ys) -> APP_IN_AAA(X1, Zs, Ys)
   APP_IN_AAA(.(X, Xs), Ys, .(X, Zs)) -> U3_AAA(X, Xs, Ys, Zs, app_in_aaa(Xs, Ys, Zs))
   APP_IN_AAA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_AAA(Xs, Ys, Zs)
   U1_GA(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> U2_GA(Xs, Ys, app_in_gaa(Xs, X2, Zs))
   U1_GA(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> APP_IN_GAA(Xs, X2, Zs)
   APP_IN_GAA(.(X, Xs), Ys, .(X, Zs)) -> U3_GAA(X, Xs, Ys, Zs, app_in_gaa(Xs, Ys, Zs))
   APP_IN_GAA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GAA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   sublist_in_ga(Xs, Ys) -> U1_ga(Xs, Ys, app_in_aaa(X1, Zs, Ys))
   app_in_aaa([], X, X) -> app_out_aaa([], X, X)
   app_in_aaa(.(X, Xs), Ys, .(X, Zs)) -> U3_aaa(X, Xs, Ys, Zs, app_in_aaa(Xs, Ys, Zs))
   U3_aaa(X, Xs, Ys, Zs, app_out_aaa(Xs, Ys, Zs)) -> app_out_aaa(.(X, Xs), Ys, .(X, Zs))
   U1_ga(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> U2_ga(Xs, Ys, app_in_gaa(Xs, X2, Zs))
   app_in_gaa([], X, X) -> app_out_gaa([], X, X)
   app_in_gaa(.(X, Xs), Ys, .(X, Zs)) -> U3_gaa(X, Xs, Ys, Zs, app_in_gaa(Xs, Ys, Zs))
   U3_gaa(X, Xs, Ys, Zs, app_out_gaa(Xs, Ys, Zs)) -> app_out_gaa(.(X, Xs), Ys, .(X, Zs))
   U2_ga(Xs, Ys, app_out_gaa(Xs, X2, Zs)) -> sublist_out_ga(Xs, Ys)

The argument filtering Pi contains the following mapping:
sublist_in_ga(x1, x2)  =  sublist_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

app_in_aaa(x1, x2, x3)  =  app_in_aaa

app_out_aaa(x1, x2, x3)  =  app_out_aaa(x1)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

.(x1, x2)  =  .(x2)

U2_ga(x1, x2, x3)  =  U2_ga(x1, x3)

app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa(x1)

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x2, x5)

sublist_out_ga(x1, x2)  =  sublist_out_ga(x1)

SUBLIST_IN_GA(x1, x2)  =  SUBLIST_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x1, x3)

APP_IN_AAA(x1, x2, x3)  =  APP_IN_AAA

U3_AAA(x1, x2, x3, x4, x5)  =  U3_AAA(x5)

U2_GA(x1, x2, x3)  =  U2_GA(x1, x3)

APP_IN_GAA(x1, x2, x3)  =  APP_IN_GAA(x1)

U3_GAA(x1, x2, x3, x4, x5)  =  U3_GAA(x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUBLIST_IN_GA(Xs, Ys) -> U1_GA(Xs, Ys, app_in_aaa(X1, Zs, Ys))
   SUBLIST_IN_GA(Xs, Ys) -> APP_IN_AAA(X1, Zs, Ys)
   APP_IN_AAA(.(X, Xs), Ys, .(X, Zs)) -> U3_AAA(X, Xs, Ys, Zs, app_in_aaa(Xs, Ys, Zs))
   APP_IN_AAA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_AAA(Xs, Ys, Zs)
   U1_GA(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> U2_GA(Xs, Ys, app_in_gaa(Xs, X2, Zs))
   U1_GA(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> APP_IN_GAA(Xs, X2, Zs)
   APP_IN_GAA(.(X, Xs), Ys, .(X, Zs)) -> U3_GAA(X, Xs, Ys, Zs, app_in_gaa(Xs, Ys, Zs))
   APP_IN_GAA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GAA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   sublist_in_ga(Xs, Ys) -> U1_ga(Xs, Ys, app_in_aaa(X1, Zs, Ys))
   app_in_aaa([], X, X) -> app_out_aaa([], X, X)
   app_in_aaa(.(X, Xs), Ys, .(X, Zs)) -> U3_aaa(X, Xs, Ys, Zs, app_in_aaa(Xs, Ys, Zs))
   U3_aaa(X, Xs, Ys, Zs, app_out_aaa(Xs, Ys, Zs)) -> app_out_aaa(.(X, Xs), Ys, .(X, Zs))
   U1_ga(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> U2_ga(Xs, Ys, app_in_gaa(Xs, X2, Zs))
   app_in_gaa([], X, X) -> app_out_gaa([], X, X)
   app_in_gaa(.(X, Xs), Ys, .(X, Zs)) -> U3_gaa(X, Xs, Ys, Zs, app_in_gaa(Xs, Ys, Zs))
   U3_gaa(X, Xs, Ys, Zs, app_out_gaa(Xs, Ys, Zs)) -> app_out_gaa(.(X, Xs), Ys, .(X, Zs))
   U2_ga(Xs, Ys, app_out_gaa(Xs, X2, Zs)) -> sublist_out_ga(Xs, Ys)

The argument filtering Pi contains the following mapping:
sublist_in_ga(x1, x2)  =  sublist_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

app_in_aaa(x1, x2, x3)  =  app_in_aaa

app_out_aaa(x1, x2, x3)  =  app_out_aaa(x1)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

.(x1, x2)  =  .(x2)

U2_ga(x1, x2, x3)  =  U2_ga(x1, x3)

app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa(x1)

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x2, x5)

sublist_out_ga(x1, x2)  =  sublist_out_ga(x1)

SUBLIST_IN_GA(x1, x2)  =  SUBLIST_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x1, x3)

APP_IN_AAA(x1, x2, x3)  =  APP_IN_AAA

U3_AAA(x1, x2, x3, x4, x5)  =  U3_AAA(x5)

U2_GA(x1, x2, x3)  =  U2_GA(x1, x3)

APP_IN_GAA(x1, x2, x3)  =  APP_IN_GAA(x1)

U3_GAA(x1, x2, x3, x4, x5)  =  U3_GAA(x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GAA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GAA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   sublist_in_ga(Xs, Ys) -> U1_ga(Xs, Ys, app_in_aaa(X1, Zs, Ys))
   app_in_aaa([], X, X) -> app_out_aaa([], X, X)
   app_in_aaa(.(X, Xs), Ys, .(X, Zs)) -> U3_aaa(X, Xs, Ys, Zs, app_in_aaa(Xs, Ys, Zs))
   U3_aaa(X, Xs, Ys, Zs, app_out_aaa(Xs, Ys, Zs)) -> app_out_aaa(.(X, Xs), Ys, .(X, Zs))
   U1_ga(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> U2_ga(Xs, Ys, app_in_gaa(Xs, X2, Zs))
   app_in_gaa([], X, X) -> app_out_gaa([], X, X)
   app_in_gaa(.(X, Xs), Ys, .(X, Zs)) -> U3_gaa(X, Xs, Ys, Zs, app_in_gaa(Xs, Ys, Zs))
   U3_gaa(X, Xs, Ys, Zs, app_out_gaa(Xs, Ys, Zs)) -> app_out_gaa(.(X, Xs), Ys, .(X, Zs))
   U2_ga(Xs, Ys, app_out_gaa(Xs, X2, Zs)) -> sublist_out_ga(Xs, Ys)

The argument filtering Pi contains the following mapping:
sublist_in_ga(x1, x2)  =  sublist_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

app_in_aaa(x1, x2, x3)  =  app_in_aaa

app_out_aaa(x1, x2, x3)  =  app_out_aaa(x1)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

.(x1, x2)  =  .(x2)

U2_ga(x1, x2, x3)  =  U2_ga(x1, x3)

app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa(x1)

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x2, x5)

sublist_out_ga(x1, x2)  =  sublist_out_ga(x1)

APP_IN_GAA(x1, x2, x3)  =  APP_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GAA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GAA(Xs, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APP_IN_GAA(x1, x2, x3)  =  APP_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP_IN_GAA(.(Xs)) -> APP_IN_GAA(Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP_IN_GAA(.(Xs)) -> APP_IN_GAA(Xs)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_AAA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_AAA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   sublist_in_ga(Xs, Ys) -> U1_ga(Xs, Ys, app_in_aaa(X1, Zs, Ys))
   app_in_aaa([], X, X) -> app_out_aaa([], X, X)
   app_in_aaa(.(X, Xs), Ys, .(X, Zs)) -> U3_aaa(X, Xs, Ys, Zs, app_in_aaa(Xs, Ys, Zs))
   U3_aaa(X, Xs, Ys, Zs, app_out_aaa(Xs, Ys, Zs)) -> app_out_aaa(.(X, Xs), Ys, .(X, Zs))
   U1_ga(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> U2_ga(Xs, Ys, app_in_gaa(Xs, X2, Zs))
   app_in_gaa([], X, X) -> app_out_gaa([], X, X)
   app_in_gaa(.(X, Xs), Ys, .(X, Zs)) -> U3_gaa(X, Xs, Ys, Zs, app_in_gaa(Xs, Ys, Zs))
   U3_gaa(X, Xs, Ys, Zs, app_out_gaa(Xs, Ys, Zs)) -> app_out_gaa(.(X, Xs), Ys, .(X, Zs))
   U2_ga(Xs, Ys, app_out_gaa(Xs, X2, Zs)) -> sublist_out_ga(Xs, Ys)

The argument filtering Pi contains the following mapping:
sublist_in_ga(x1, x2)  =  sublist_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

app_in_aaa(x1, x2, x3)  =  app_in_aaa

app_out_aaa(x1, x2, x3)  =  app_out_aaa(x1)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

.(x1, x2)  =  .(x2)

U2_ga(x1, x2, x3)  =  U2_ga(x1, x3)

app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa(x1)

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x2, x5)

sublist_out_ga(x1, x2)  =  sublist_out_ga(x1)

APP_IN_AAA(x1, x2, x3)  =  APP_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_AAA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_AAA(Xs, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APP_IN_AAA(x1, x2, x3)  =  APP_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP_IN_AAA -> APP_IN_AAA

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

sublist_in_2: (b,f)

app_in_3: (f,f,f) (b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   sublist_in_ga(Xs, Ys) -> U1_ga(Xs, Ys, app_in_aaa(X1, Zs, Ys))
   app_in_aaa([], X, X) -> app_out_aaa([], X, X)
   app_in_aaa(.(X, Xs), Ys, .(X, Zs)) -> U3_aaa(X, Xs, Ys, Zs, app_in_aaa(Xs, Ys, Zs))
   U3_aaa(X, Xs, Ys, Zs, app_out_aaa(Xs, Ys, Zs)) -> app_out_aaa(.(X, Xs), Ys, .(X, Zs))
   U1_ga(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> U2_ga(Xs, Ys, app_in_gaa(Xs, X2, Zs))
   app_in_gaa([], X, X) -> app_out_gaa([], X, X)
   app_in_gaa(.(X, Xs), Ys, .(X, Zs)) -> U3_gaa(X, Xs, Ys, Zs, app_in_gaa(Xs, Ys, Zs))
   U3_gaa(X, Xs, Ys, Zs, app_out_gaa(Xs, Ys, Zs)) -> app_out_gaa(.(X, Xs), Ys, .(X, Zs))
   U2_ga(Xs, Ys, app_out_gaa(Xs, X2, Zs)) -> sublist_out_ga(Xs, Ys)

The argument filtering Pi contains the following mapping:
sublist_in_ga(x1, x2)  =  sublist_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

app_in_aaa(x1, x2, x3)  =  app_in_aaa

app_out_aaa(x1, x2, x3)  =  app_out_aaa(x1)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

.(x1, x2)  =  .(x2)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x5)

sublist_out_ga(x1, x2)  =  sublist_out_ga





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(20)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   sublist_in_ga(Xs, Ys) -> U1_ga(Xs, Ys, app_in_aaa(X1, Zs, Ys))
   app_in_aaa([], X, X) -> app_out_aaa([], X, X)
   app_in_aaa(.(X, Xs), Ys, .(X, Zs)) -> U3_aaa(X, Xs, Ys, Zs, app_in_aaa(Xs, Ys, Zs))
   U3_aaa(X, Xs, Ys, Zs, app_out_aaa(Xs, Ys, Zs)) -> app_out_aaa(.(X, Xs), Ys, .(X, Zs))
   U1_ga(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> U2_ga(Xs, Ys, app_in_gaa(Xs, X2, Zs))
   app_in_gaa([], X, X) -> app_out_gaa([], X, X)
   app_in_gaa(.(X, Xs), Ys, .(X, Zs)) -> U3_gaa(X, Xs, Ys, Zs, app_in_gaa(Xs, Ys, Zs))
   U3_gaa(X, Xs, Ys, Zs, app_out_gaa(Xs, Ys, Zs)) -> app_out_gaa(.(X, Xs), Ys, .(X, Zs))
   U2_ga(Xs, Ys, app_out_gaa(Xs, X2, Zs)) -> sublist_out_ga(Xs, Ys)

The argument filtering Pi contains the following mapping:
sublist_in_ga(x1, x2)  =  sublist_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

app_in_aaa(x1, x2, x3)  =  app_in_aaa

app_out_aaa(x1, x2, x3)  =  app_out_aaa(x1)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

.(x1, x2)  =  .(x2)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x5)

sublist_out_ga(x1, x2)  =  sublist_out_ga



----------------------------------------

(21) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   SUBLIST_IN_GA(Xs, Ys) -> U1_GA(Xs, Ys, app_in_aaa(X1, Zs, Ys))
   SUBLIST_IN_GA(Xs, Ys) -> APP_IN_AAA(X1, Zs, Ys)
   APP_IN_AAA(.(X, Xs), Ys, .(X, Zs)) -> U3_AAA(X, Xs, Ys, Zs, app_in_aaa(Xs, Ys, Zs))
   APP_IN_AAA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_AAA(Xs, Ys, Zs)
   U1_GA(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> U2_GA(Xs, Ys, app_in_gaa(Xs, X2, Zs))
   U1_GA(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> APP_IN_GAA(Xs, X2, Zs)
   APP_IN_GAA(.(X, Xs), Ys, .(X, Zs)) -> U3_GAA(X, Xs, Ys, Zs, app_in_gaa(Xs, Ys, Zs))
   APP_IN_GAA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GAA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   sublist_in_ga(Xs, Ys) -> U1_ga(Xs, Ys, app_in_aaa(X1, Zs, Ys))
   app_in_aaa([], X, X) -> app_out_aaa([], X, X)
   app_in_aaa(.(X, Xs), Ys, .(X, Zs)) -> U3_aaa(X, Xs, Ys, Zs, app_in_aaa(Xs, Ys, Zs))
   U3_aaa(X, Xs, Ys, Zs, app_out_aaa(Xs, Ys, Zs)) -> app_out_aaa(.(X, Xs), Ys, .(X, Zs))
   U1_ga(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> U2_ga(Xs, Ys, app_in_gaa(Xs, X2, Zs))
   app_in_gaa([], X, X) -> app_out_gaa([], X, X)
   app_in_gaa(.(X, Xs), Ys, .(X, Zs)) -> U3_gaa(X, Xs, Ys, Zs, app_in_gaa(Xs, Ys, Zs))
   U3_gaa(X, Xs, Ys, Zs, app_out_gaa(Xs, Ys, Zs)) -> app_out_gaa(.(X, Xs), Ys, .(X, Zs))
   U2_ga(Xs, Ys, app_out_gaa(Xs, X2, Zs)) -> sublist_out_ga(Xs, Ys)

The argument filtering Pi contains the following mapping:
sublist_in_ga(x1, x2)  =  sublist_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

app_in_aaa(x1, x2, x3)  =  app_in_aaa

app_out_aaa(x1, x2, x3)  =  app_out_aaa(x1)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

.(x1, x2)  =  .(x2)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x5)

sublist_out_ga(x1, x2)  =  sublist_out_ga

SUBLIST_IN_GA(x1, x2)  =  SUBLIST_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x1, x3)

APP_IN_AAA(x1, x2, x3)  =  APP_IN_AAA

U3_AAA(x1, x2, x3, x4, x5)  =  U3_AAA(x5)

U2_GA(x1, x2, x3)  =  U2_GA(x3)

APP_IN_GAA(x1, x2, x3)  =  APP_IN_GAA(x1)

U3_GAA(x1, x2, x3, x4, x5)  =  U3_GAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUBLIST_IN_GA(Xs, Ys) -> U1_GA(Xs, Ys, app_in_aaa(X1, Zs, Ys))
   SUBLIST_IN_GA(Xs, Ys) -> APP_IN_AAA(X1, Zs, Ys)
   APP_IN_AAA(.(X, Xs), Ys, .(X, Zs)) -> U3_AAA(X, Xs, Ys, Zs, app_in_aaa(Xs, Ys, Zs))
   APP_IN_AAA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_AAA(Xs, Ys, Zs)
   U1_GA(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> U2_GA(Xs, Ys, app_in_gaa(Xs, X2, Zs))
   U1_GA(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> APP_IN_GAA(Xs, X2, Zs)
   APP_IN_GAA(.(X, Xs), Ys, .(X, Zs)) -> U3_GAA(X, Xs, Ys, Zs, app_in_gaa(Xs, Ys, Zs))
   APP_IN_GAA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GAA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   sublist_in_ga(Xs, Ys) -> U1_ga(Xs, Ys, app_in_aaa(X1, Zs, Ys))
   app_in_aaa([], X, X) -> app_out_aaa([], X, X)
   app_in_aaa(.(X, Xs), Ys, .(X, Zs)) -> U3_aaa(X, Xs, Ys, Zs, app_in_aaa(Xs, Ys, Zs))
   U3_aaa(X, Xs, Ys, Zs, app_out_aaa(Xs, Ys, Zs)) -> app_out_aaa(.(X, Xs), Ys, .(X, Zs))
   U1_ga(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> U2_ga(Xs, Ys, app_in_gaa(Xs, X2, Zs))
   app_in_gaa([], X, X) -> app_out_gaa([], X, X)
   app_in_gaa(.(X, Xs), Ys, .(X, Zs)) -> U3_gaa(X, Xs, Ys, Zs, app_in_gaa(Xs, Ys, Zs))
   U3_gaa(X, Xs, Ys, Zs, app_out_gaa(Xs, Ys, Zs)) -> app_out_gaa(.(X, Xs), Ys, .(X, Zs))
   U2_ga(Xs, Ys, app_out_gaa(Xs, X2, Zs)) -> sublist_out_ga(Xs, Ys)

The argument filtering Pi contains the following mapping:
sublist_in_ga(x1, x2)  =  sublist_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

app_in_aaa(x1, x2, x3)  =  app_in_aaa

app_out_aaa(x1, x2, x3)  =  app_out_aaa(x1)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

.(x1, x2)  =  .(x2)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x5)

sublist_out_ga(x1, x2)  =  sublist_out_ga

SUBLIST_IN_GA(x1, x2)  =  SUBLIST_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x1, x3)

APP_IN_AAA(x1, x2, x3)  =  APP_IN_AAA

U3_AAA(x1, x2, x3, x4, x5)  =  U3_AAA(x5)

U2_GA(x1, x2, x3)  =  U2_GA(x3)

APP_IN_GAA(x1, x2, x3)  =  APP_IN_GAA(x1)

U3_GAA(x1, x2, x3, x4, x5)  =  U3_GAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(23) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(24)
Complex Obligation (AND)

----------------------------------------

(25)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GAA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GAA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   sublist_in_ga(Xs, Ys) -> U1_ga(Xs, Ys, app_in_aaa(X1, Zs, Ys))
   app_in_aaa([], X, X) -> app_out_aaa([], X, X)
   app_in_aaa(.(X, Xs), Ys, .(X, Zs)) -> U3_aaa(X, Xs, Ys, Zs, app_in_aaa(Xs, Ys, Zs))
   U3_aaa(X, Xs, Ys, Zs, app_out_aaa(Xs, Ys, Zs)) -> app_out_aaa(.(X, Xs), Ys, .(X, Zs))
   U1_ga(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> U2_ga(Xs, Ys, app_in_gaa(Xs, X2, Zs))
   app_in_gaa([], X, X) -> app_out_gaa([], X, X)
   app_in_gaa(.(X, Xs), Ys, .(X, Zs)) -> U3_gaa(X, Xs, Ys, Zs, app_in_gaa(Xs, Ys, Zs))
   U3_gaa(X, Xs, Ys, Zs, app_out_gaa(Xs, Ys, Zs)) -> app_out_gaa(.(X, Xs), Ys, .(X, Zs))
   U2_ga(Xs, Ys, app_out_gaa(Xs, X2, Zs)) -> sublist_out_ga(Xs, Ys)

The argument filtering Pi contains the following mapping:
sublist_in_ga(x1, x2)  =  sublist_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

app_in_aaa(x1, x2, x3)  =  app_in_aaa

app_out_aaa(x1, x2, x3)  =  app_out_aaa(x1)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

.(x1, x2)  =  .(x2)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x5)

sublist_out_ga(x1, x2)  =  sublist_out_ga

APP_IN_GAA(x1, x2, x3)  =  APP_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(27)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GAA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GAA(Xs, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APP_IN_GAA(x1, x2, x3)  =  APP_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(28) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP_IN_GAA(.(Xs)) -> APP_IN_GAA(Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP_IN_GAA(.(Xs)) -> APP_IN_GAA(Xs)
The graph contains the following edges 1 > 1


----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_AAA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_AAA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   sublist_in_ga(Xs, Ys) -> U1_ga(Xs, Ys, app_in_aaa(X1, Zs, Ys))
   app_in_aaa([], X, X) -> app_out_aaa([], X, X)
   app_in_aaa(.(X, Xs), Ys, .(X, Zs)) -> U3_aaa(X, Xs, Ys, Zs, app_in_aaa(Xs, Ys, Zs))
   U3_aaa(X, Xs, Ys, Zs, app_out_aaa(Xs, Ys, Zs)) -> app_out_aaa(.(X, Xs), Ys, .(X, Zs))
   U1_ga(Xs, Ys, app_out_aaa(X1, Zs, Ys)) -> U2_ga(Xs, Ys, app_in_gaa(Xs, X2, Zs))
   app_in_gaa([], X, X) -> app_out_gaa([], X, X)
   app_in_gaa(.(X, Xs), Ys, .(X, Zs)) -> U3_gaa(X, Xs, Ys, Zs, app_in_gaa(Xs, Ys, Zs))
   U3_gaa(X, Xs, Ys, Zs, app_out_gaa(Xs, Ys, Zs)) -> app_out_gaa(.(X, Xs), Ys, .(X, Zs))
   U2_ga(Xs, Ys, app_out_gaa(Xs, X2, Zs)) -> sublist_out_ga(Xs, Ys)

The argument filtering Pi contains the following mapping:
sublist_in_ga(x1, x2)  =  sublist_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x1, x3)

app_in_aaa(x1, x2, x3)  =  app_in_aaa

app_out_aaa(x1, x2, x3)  =  app_out_aaa(x1)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

.(x1, x2)  =  .(x2)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

app_in_gaa(x1, x2, x3)  =  app_in_gaa(x1)

[]  =  []

app_out_gaa(x1, x2, x3)  =  app_out_gaa

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x5)

sublist_out_ga(x1, x2)  =  sublist_out_ga

APP_IN_AAA(x1, x2, x3)  =  APP_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(33) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(34)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_AAA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_AAA(Xs, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APP_IN_AAA(x1, x2, x3)  =  APP_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(35) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP_IN_AAA -> APP_IN_AAA

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(37) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(sublist Xs Ys)",
                "(',' (app X1 Zs Ys) (app Xs X2 Zs))"
            ],
            [
                "(app ([]) X X)",
                null
            ],
            [
                "(app (. X Xs) Ys (. X Zs))",
                "(app Xs Ys Zs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "160": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(app X18 X19 T11)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(app X18 X19 T11)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X18",
                        "X19"
                    ],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "161": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(app X18 X19 T11)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X18",
                        "X19"
                    ],
                    "exprvars": []
                }
            },
            "162": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(app X18 X19 T11)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X18",
                        "X19"
                    ],
                    "exprvars": []
                }
            },
            "195": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(app T9 X20 T14)"
                    },
                    {
                        "clause": 2,
                        "scope": 3,
                        "term": "(app T9 X20 T14)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "196": {
                "goal": [{
                    "clause": 1,
                    "scope": 3,
                    "term": "(app T9 X20 T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "197": {
                "goal": [{
                    "clause": 2,
                    "scope": 3,
                    "term": "(app T9 X20 T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "143": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (app X18 X19 T11) (app T9 X20 X19))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": [
                        "X18",
                        "X19",
                        "X20"
                    ],
                    "exprvars": []
                }
            },
            "165": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "198": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(sublist T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "166": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "199": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "145": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app X18 X19 T11)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X18",
                        "X19"
                    ],
                    "exprvars": []
                }
            },
            "167": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app X58 X59 T27)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X58",
                        "X59"
                    ],
                    "exprvars": []
                }
            },
            "200": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "146": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T9 X20 T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "168": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "201": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T43 X90 T45)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T43"],
                    "free": ["X90"],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(sublist T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "202": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 143,
                "label": "ONLY EVAL with clause\nsublist(X16, X17) :- ','(app(X18, X19, X17), app(X16, X20, X19)).\nand substitutionT1 -> T9,\nX16 -> T9,\nT2 -> T11,\nX17 -> T11,\nT10 -> T11"
            },
            {
                "from": 143,
                "to": 145,
                "label": "SPLIT 1"
            },
            {
                "from": 143,
                "to": 146,
                "label": "SPLIT 2\nreplacements:X18 -> T13,\nX19 -> T14"
            },
            {
                "from": 145,
                "to": 160,
                "label": "CASE"
            },
            {
                "from": 146,
                "to": 195,
                "label": "CASE"
            },
            {
                "from": 160,
                "to": 161,
                "label": "PARALLEL"
            },
            {
                "from": 160,
                "to": 162,
                "label": "PARALLEL"
            },
            {
                "from": 161,
                "to": 165,
                "label": "ONLY EVAL with clause\napp([], X37, X37).\nand substitutionX18 -> [],\nX19 -> T20,\nX37 -> T20,\nT11 -> T20,\nX38 -> T20"
            },
            {
                "from": 162,
                "to": 167,
                "label": "EVAL with clause\napp(.(X53, X54), X55, .(X53, X56)) :- app(X54, X55, X56).\nand substitutionX53 -> T25,\nX54 -> X58,\nX18 -> .(T25, X58),\nX19 -> X59,\nX55 -> X59,\nX57 -> T25,\nX56 -> T27,\nT11 -> .(T25, T27),\nT26 -> T27"
            },
            {
                "from": 162,
                "to": 168,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 165,
                "to": 166,
                "label": "SUCCESS"
            },
            {
                "from": 167,
                "to": 145,
                "label": "INSTANCE with matching:\nX18 -> X58\nX19 -> X59\nT11 -> T27"
            },
            {
                "from": 195,
                "to": 196,
                "label": "PARALLEL"
            },
            {
                "from": 195,
                "to": 197,
                "label": "PARALLEL"
            },
            {
                "from": 196,
                "to": 198,
                "label": "EVAL with clause\napp([], X74, X74).\nand substitutionT9 -> [],\nX20 -> T35,\nX74 -> T35,\nT14 -> T35,\nX75 -> T35"
            },
            {
                "from": 196,
                "to": 199,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 197,
                "to": 201,
                "label": "EVAL with clause\napp(.(X86, X87), X88, .(X86, X89)) :- app(X87, X88, X89).\nand substitutionX86 -> T42,\nX87 -> T43,\nT9 -> .(T42, T43),\nX20 -> X90,\nX88 -> X90,\nX89 -> T45,\nT14 -> .(T42, T45),\nT44 -> T45"
            },
            {
                "from": 197,
                "to": 202,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 198,
                "to": 200,
                "label": "SUCCESS"
            },
            {
                "from": 201,
                "to": 146,
                "label": "INSTANCE with matching:\nT9 -> T43\nX20 -> X90\nT14 -> T45"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(38)
Complex Obligation (AND)

----------------------------------------

(39)
Obligation:
Rules:
f202_out -> f197_out(T9) :|: TRUE
f197_in(.(T42, T43)) -> f201_in(T43) :|: TRUE
f201_out(x) -> f197_out(.(x1, x)) :|: TRUE
f197_in(x2) -> f202_in :|: TRUE
f195_in(x3) -> f196_in(x3) :|: TRUE
f197_out(x4) -> f195_out(x4) :|: TRUE
f195_in(x5) -> f197_in(x5) :|: TRUE
f196_out(x6) -> f195_out(x6) :|: TRUE
f146_out(x7) -> f201_out(x7) :|: TRUE
f201_in(x8) -> f146_in(x8) :|: TRUE
f146_in(x9) -> f195_in(x9) :|: TRUE
f195_out(x10) -> f146_out(x10) :|: TRUE
f4_out(T1) -> f1_out(T1) :|: TRUE
f1_in(x11) -> f4_in(x11) :|: TRUE
f143_out(x12) -> f4_out(x12) :|: TRUE
f4_in(x13) -> f143_in(x13) :|: TRUE
f143_in(x14) -> f145_in :|: TRUE
f146_out(x15) -> f143_out(x15) :|: TRUE
f145_out -> f146_in(x16) :|: TRUE
Start term: f1_in(T1)

----------------------------------------

(40) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:


----------------------------------------

(41)
TRUE

----------------------------------------

(42)
Obligation:
Rules:
f145_in -> f160_in :|: TRUE
f160_out -> f145_out :|: TRUE
f160_in -> f161_in :|: TRUE
f161_out -> f160_out :|: TRUE
f162_out -> f160_out :|: TRUE
f160_in -> f162_in :|: TRUE
f145_out -> f167_out :|: TRUE
f167_in -> f145_in :|: TRUE
f167_out -> f162_out :|: TRUE
f168_out -> f162_out :|: TRUE
f162_in -> f167_in :|: TRUE
f162_in -> f168_in :|: TRUE
f4_out(T1) -> f1_out(T1) :|: TRUE
f1_in(x) -> f4_in(x) :|: TRUE
f143_out(T9) -> f4_out(T9) :|: TRUE
f4_in(x1) -> f143_in(x1) :|: TRUE
f143_in(x2) -> f145_in :|: TRUE
f146_out(x3) -> f143_out(x3) :|: TRUE
f145_out -> f146_in(x4) :|: TRUE
Start term: f1_in(T1)

----------------------------------------

(43) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f145_in -> f160_in :|: TRUE
f160_in -> f162_in :|: TRUE
f167_in -> f145_in :|: TRUE
f162_in -> f167_in :|: TRUE


----------------------------------------

(44)
Obligation:
Rules:
f145_in -> f160_in :|: TRUE
f160_in -> f162_in :|: TRUE
f167_in -> f145_in :|: TRUE
f162_in -> f167_in :|: TRUE

----------------------------------------

(45) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(46)
Obligation:
Rules:
f167_in -> f167_in :|: TRUE

----------------------------------------

(47) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(48)
Obligation:
Rules:
f167_in -> f167_in :|: TRUE

----------------------------------------

(49) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f167_in -> f167_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(50)
Obligation:

Termination digraph:
Nodes:
(1) f167_in -> f167_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(51) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f167_in()
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(52)
Obligation:
Rules:
f167_in -> f167_in :|: TRUE

----------------------------------------

(53) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc) -> f(1) :|: pc = 1 && TRUE
Witness term starting non-terminating reduction: f(1)
----------------------------------------

(54)
NO

----------------------------------------

(55) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(sublist Xs Ys)",
                "(',' (app X1 Zs Ys) (app Xs X2 Zs))"
            ],
            [
                "(app ([]) X X)",
                null
            ],
            [
                "(app (. X Xs) Ys (. X Zs))",
                "(app Xs Ys Zs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "13": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(sublist T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "163": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T34 X56 T36)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T34"],
                    "free": ["X56"],
                    "exprvars": []
                }
            },
            "120": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(',' (app X7 X8 T7) (app T5 X9 X8))"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(',' (app X7 X8 T7) (app T5 X9 X8))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [
                        "X7",
                        "X8",
                        "X9"
                    ],
                    "exprvars": []
                }
            },
            "164": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "154": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(app T5 X9 T19)"
                    },
                    {
                        "clause": 2,
                        "scope": 3,
                        "term": "(app T5 X9 T19)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": ["X9"],
                    "exprvars": []
                }
            },
            "144": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T5 X9 T19)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": ["X9"],
                    "exprvars": []
                }
            },
            "155": {
                "goal": [{
                    "clause": 1,
                    "scope": 3,
                    "term": "(app T5 X9 T19)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": ["X9"],
                    "exprvars": []
                }
            },
            "123": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(',' (app X7 X8 T7) (app T5 X9 X8))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [
                        "X7",
                        "X8",
                        "X9"
                    ],
                    "exprvars": []
                }
            },
            "156": {
                "goal": [{
                    "clause": 2,
                    "scope": 3,
                    "term": "(app T5 X9 T19)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": ["X9"],
                    "exprvars": []
                }
            },
            "211": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(sublist T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "124": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(',' (app X7 X8 T7) (app T5 X9 X8))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [
                        "X7",
                        "X8",
                        "X9"
                    ],
                    "exprvars": []
                }
            },
            "157": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "158": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "159": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "119": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (app X7 X8 T7) (app T5 X9 X8))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [
                        "X7",
                        "X8",
                        "X9"
                    ],
                    "exprvars": []
                }
            },
            "209": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (app X80 X81 T45) (app T5 X9 X81))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [
                        "X9",
                        "X80",
                        "X81"
                    ],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 13,
                "label": "CASE"
            },
            {
                "from": 13,
                "to": 119,
                "label": "ONLY EVAL with clause\nsublist(X5, X6) :- ','(app(X7, X8, X6), app(X5, X9, X8)).\nand substitutionT1 -> T5,\nX5 -> T5,\nT2 -> T7,\nX6 -> T7,\nT6 -> T7"
            },
            {
                "from": 119,
                "to": 120,
                "label": "CASE"
            },
            {
                "from": 120,
                "to": 123,
                "label": "PARALLEL"
            },
            {
                "from": 120,
                "to": 124,
                "label": "PARALLEL"
            },
            {
                "from": 123,
                "to": 144,
                "label": "ONLY EVAL with clause\napp([], X26, X26).\nand substitutionX7 -> [],\nX8 -> T19,\nX26 -> T19,\nT7 -> T19,\nX27 -> T19,\nT18 -> T19"
            },
            {
                "from": 124,
                "to": 209,
                "label": "EVAL with clause\napp(.(X75, X76), X77, .(X75, X78)) :- app(X76, X77, X78).\nand substitutionX75 -> T43,\nX76 -> X80,\nX7 -> .(T43, X80),\nX8 -> X81,\nX77 -> X81,\nX79 -> T43,\nX78 -> T45,\nT7 -> .(T43, T45),\nT44 -> T45"
            },
            {
                "from": 124,
                "to": 211,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 144,
                "to": 154,
                "label": "CASE"
            },
            {
                "from": 154,
                "to": 155,
                "label": "PARALLEL"
            },
            {
                "from": 154,
                "to": 156,
                "label": "PARALLEL"
            },
            {
                "from": 155,
                "to": 157,
                "label": "EVAL with clause\napp([], X40, X40).\nand substitutionT5 -> [],\nX9 -> T26,\nX40 -> T26,\nT19 -> T26,\nX41 -> T26"
            },
            {
                "from": 155,
                "to": 158,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 156,
                "to": 163,
                "label": "EVAL with clause\napp(.(X52, X53), X54, .(X52, X55)) :- app(X53, X54, X55).\nand substitutionX52 -> T33,\nX53 -> T34,\nT5 -> .(T33, T34),\nX9 -> X56,\nX54 -> X56,\nX55 -> T36,\nT19 -> .(T33, T36),\nT35 -> T36"
            },
            {
                "from": 156,
                "to": 164,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 157,
                "to": 159,
                "label": "SUCCESS"
            },
            {
                "from": 163,
                "to": 144,
                "label": "INSTANCE with matching:\nT5 -> T34\nX9 -> X56\nT19 -> T36"
            },
            {
                "from": 209,
                "to": 119,
                "label": "INSTANCE with matching:\nX7 -> X80\nX8 -> X81\nT7 -> T45"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(56)
Obligation:
Triples:

appA(.(X1, X2), X3, .(X1, X4)) :- appA(X2, X3, X4).
pB([], X1, X1, X2, X3) :- appA(X2, X3, X1).
pB(.(X1, X2), X3, .(X1, X4), X5, X6) :- pB(X2, X3, X4, X5, X6).
sublistC(X1, X2) :- pB(X3, X4, X2, X1, X5).

Clauses:

appcA([], X1, X1).
appcA(.(X1, X2), X3, .(X1, X4)) :- appcA(X2, X3, X4).
qcB([], X1, X1, X2, X3) :- appcA(X2, X3, X1).
qcB(.(X1, X2), X3, .(X1, X4), X5, X6) :- qcB(X2, X3, X4, X5, X6).

Afs:

sublistC(x1, x2)  =  sublistC(x1)


----------------------------------------

(57) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

sublistC_in_2: (b,f)

pB_in_5: (f,f,f,b,f)

appA_in_3: (b,f,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   SUBLISTC_IN_GA(X1, X2) -> U4_GA(X1, X2, pB_in_aaaga(X3, X4, X2, X1, X5))
   SUBLISTC_IN_GA(X1, X2) -> PB_IN_AAAGA(X3, X4, X2, X1, X5)
   PB_IN_AAAGA([], X1, X1, X2, X3) -> U2_AAAGA(X1, X2, X3, appA_in_gaa(X2, X3, X1))
   PB_IN_AAAGA([], X1, X1, X2, X3) -> APPA_IN_GAA(X2, X3, X1)
   APPA_IN_GAA(.(X1, X2), X3, .(X1, X4)) -> U1_GAA(X1, X2, X3, X4, appA_in_gaa(X2, X3, X4))
   APPA_IN_GAA(.(X1, X2), X3, .(X1, X4)) -> APPA_IN_GAA(X2, X3, X4)
   PB_IN_AAAGA(.(X1, X2), X3, .(X1, X4), X5, X6) -> U3_AAAGA(X1, X2, X3, X4, X5, X6, pB_in_aaaga(X2, X3, X4, X5, X6))
   PB_IN_AAAGA(.(X1, X2), X3, .(X1, X4), X5, X6) -> PB_IN_AAAGA(X2, X3, X4, X5, X6)

R is empty.
The argument filtering Pi contains the following mapping:
pB_in_aaaga(x1, x2, x3, x4, x5)  =  pB_in_aaaga(x4)

appA_in_gaa(x1, x2, x3)  =  appA_in_gaa(x1)

.(x1, x2)  =  .(x2)

[]  =  []

SUBLISTC_IN_GA(x1, x2)  =  SUBLISTC_IN_GA(x1)

U4_GA(x1, x2, x3)  =  U4_GA(x1, x3)

PB_IN_AAAGA(x1, x2, x3, x4, x5)  =  PB_IN_AAAGA(x4)

U2_AAAGA(x1, x2, x3, x4)  =  U2_AAAGA(x2, x4)

APPA_IN_GAA(x1, x2, x3)  =  APPA_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x2, x5)

U3_AAAGA(x1, x2, x3, x4, x5, x6, x7)  =  U3_AAAGA(x5, x7)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(58)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUBLISTC_IN_GA(X1, X2) -> U4_GA(X1, X2, pB_in_aaaga(X3, X4, X2, X1, X5))
   SUBLISTC_IN_GA(X1, X2) -> PB_IN_AAAGA(X3, X4, X2, X1, X5)
   PB_IN_AAAGA([], X1, X1, X2, X3) -> U2_AAAGA(X1, X2, X3, appA_in_gaa(X2, X3, X1))
   PB_IN_AAAGA([], X1, X1, X2, X3) -> APPA_IN_GAA(X2, X3, X1)
   APPA_IN_GAA(.(X1, X2), X3, .(X1, X4)) -> U1_GAA(X1, X2, X3, X4, appA_in_gaa(X2, X3, X4))
   APPA_IN_GAA(.(X1, X2), X3, .(X1, X4)) -> APPA_IN_GAA(X2, X3, X4)
   PB_IN_AAAGA(.(X1, X2), X3, .(X1, X4), X5, X6) -> U3_AAAGA(X1, X2, X3, X4, X5, X6, pB_in_aaaga(X2, X3, X4, X5, X6))
   PB_IN_AAAGA(.(X1, X2), X3, .(X1, X4), X5, X6) -> PB_IN_AAAGA(X2, X3, X4, X5, X6)

R is empty.
The argument filtering Pi contains the following mapping:
pB_in_aaaga(x1, x2, x3, x4, x5)  =  pB_in_aaaga(x4)

appA_in_gaa(x1, x2, x3)  =  appA_in_gaa(x1)

.(x1, x2)  =  .(x2)

[]  =  []

SUBLISTC_IN_GA(x1, x2)  =  SUBLISTC_IN_GA(x1)

U4_GA(x1, x2, x3)  =  U4_GA(x1, x3)

PB_IN_AAAGA(x1, x2, x3, x4, x5)  =  PB_IN_AAAGA(x4)

U2_AAAGA(x1, x2, x3, x4)  =  U2_AAAGA(x2, x4)

APPA_IN_GAA(x1, x2, x3)  =  APPA_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x2, x5)

U3_AAAGA(x1, x2, x3, x4, x5, x6, x7)  =  U3_AAAGA(x5, x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(59) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(60)
Complex Obligation (AND)

----------------------------------------

(61)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPA_IN_GAA(.(X1, X2), X3, .(X1, X4)) -> APPA_IN_GAA(X2, X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPA_IN_GAA(x1, x2, x3)  =  APPA_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(62) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(63)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPA_IN_GAA(.(X2)) -> APPA_IN_GAA(X2)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(64) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPA_IN_GAA(.(X2)) -> APPA_IN_GAA(X2)
The graph contains the following edges 1 > 1


----------------------------------------

(65)
YES

----------------------------------------

(66)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PB_IN_AAAGA(.(X1, X2), X3, .(X1, X4), X5, X6) -> PB_IN_AAAGA(X2, X3, X4, X5, X6)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

PB_IN_AAAGA(x1, x2, x3, x4, x5)  =  PB_IN_AAAGA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(67) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(68)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PB_IN_AAAGA(X5) -> PB_IN_AAAGA(X5)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(69) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(sublist Xs Ys)",
                "(',' (app X1 Zs Ys) (app Xs X2 Zs))"
            ],
            [
                "(app ([]) X X)",
                null
            ],
            [
                "(app (. X Xs) Ys (. X Zs))",
                "(app Xs Ys Zs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "190": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(app X18 X19 T11)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X18",
                        "X19"
                    ],
                    "exprvars": []
                }
            },
            "191": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "192": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "193": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app X58 X59 T27)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X58",
                        "X59"
                    ],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "194": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "185": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (app X18 X19 T11) (app T9 X20 X19))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": [
                        "X18",
                        "X19",
                        "X20"
                    ],
                    "exprvars": []
                }
            },
            "186": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app X18 X19 T11)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X18",
                        "X19"
                    ],
                    "exprvars": []
                }
            },
            "187": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T9 X20 T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "188": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(app X18 X19 T11)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(app X18 X19 T11)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X18",
                        "X19"
                    ],
                    "exprvars": []
                }
            },
            "210": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T43 X90 T45)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T43"],
                    "free": ["X90"],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(sublist T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "189": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(app X18 X19 T11)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X18",
                        "X19"
                    ],
                    "exprvars": []
                }
            },
            "212": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(sublist T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "203": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(app T9 X20 T14)"
                    },
                    {
                        "clause": 2,
                        "scope": 3,
                        "term": "(app T9 X20 T14)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "204": {
                "goal": [{
                    "clause": 1,
                    "scope": 3,
                    "term": "(app T9 X20 T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "205": {
                "goal": [{
                    "clause": 2,
                    "scope": 3,
                    "term": "(app T9 X20 T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": ["X20"],
                    "exprvars": []
                }
            },
            "206": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "207": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "208": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 185,
                "label": "ONLY EVAL with clause\nsublist(X16, X17) :- ','(app(X18, X19, X17), app(X16, X20, X19)).\nand substitutionT1 -> T9,\nX16 -> T9,\nT2 -> T11,\nX17 -> T11,\nT10 -> T11"
            },
            {
                "from": 185,
                "to": 186,
                "label": "SPLIT 1"
            },
            {
                "from": 185,
                "to": 187,
                "label": "SPLIT 2\nreplacements:X18 -> T13,\nX19 -> T14"
            },
            {
                "from": 186,
                "to": 188,
                "label": "CASE"
            },
            {
                "from": 187,
                "to": 203,
                "label": "CASE"
            },
            {
                "from": 188,
                "to": 189,
                "label": "PARALLEL"
            },
            {
                "from": 188,
                "to": 190,
                "label": "PARALLEL"
            },
            {
                "from": 189,
                "to": 191,
                "label": "ONLY EVAL with clause\napp([], X37, X37).\nand substitutionX18 -> [],\nX19 -> T20,\nX37 -> T20,\nT11 -> T20,\nX38 -> T20"
            },
            {
                "from": 190,
                "to": 193,
                "label": "EVAL with clause\napp(.(X53, X54), X55, .(X53, X56)) :- app(X54, X55, X56).\nand substitutionX53 -> T25,\nX54 -> X58,\nX18 -> .(T25, X58),\nX19 -> X59,\nX55 -> X59,\nX57 -> T25,\nX56 -> T27,\nT11 -> .(T25, T27),\nT26 -> T27"
            },
            {
                "from": 190,
                "to": 194,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 191,
                "to": 192,
                "label": "SUCCESS"
            },
            {
                "from": 193,
                "to": 186,
                "label": "INSTANCE with matching:\nX18 -> X58\nX19 -> X59\nT11 -> T27"
            },
            {
                "from": 203,
                "to": 204,
                "label": "PARALLEL"
            },
            {
                "from": 203,
                "to": 205,
                "label": "PARALLEL"
            },
            {
                "from": 204,
                "to": 206,
                "label": "EVAL with clause\napp([], X74, X74).\nand substitutionT9 -> [],\nX20 -> T35,\nX74 -> T35,\nT14 -> T35,\nX75 -> T35"
            },
            {
                "from": 204,
                "to": 207,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 205,
                "to": 210,
                "label": "EVAL with clause\napp(.(X86, X87), X88, .(X86, X89)) :- app(X87, X88, X89).\nand substitutionX86 -> T42,\nX87 -> T43,\nT9 -> .(T42, T43),\nX20 -> X90,\nX88 -> X90,\nX89 -> T45,\nT14 -> .(T42, T45),\nT44 -> T45"
            },
            {
                "from": 205,
                "to": 212,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 206,
                "to": 208,
                "label": "SUCCESS"
            },
            {
                "from": 210,
                "to": 187,
                "label": "INSTANCE with matching:\nT9 -> T43\nX20 -> X90\nT14 -> T45"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(70)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in(T9) -> U1(f185_in(T9), T9)
   U1(f185_out1, T9) -> f2_out1
   f186_in -> f186_out1
   f186_in -> U2(f186_in)
   U2(f186_out1) -> f186_out1
   f187_in([]) -> f187_out1
   f187_in(.(T42, T43)) -> U3(f187_in(T43), .(T42, T43))
   U3(f187_out1, .(T42, T43)) -> f187_out1
   f185_in(T9) -> U4(f186_in, T9)
   U4(f186_out1, T9) -> U5(f187_in(T9), T9)
   U5(f187_out1, T9) -> f185_out1

Q is empty.

----------------------------------------

(71) QTRSRRRProof (EQUIVALENT)
Used ordering:
f2_in/1(YES)
U1/2(YES,YES)
f185_in/1(YES)
f185_out1/0)
f2_out1/0)
f186_in/0)
f186_out1/0)
U2/1)YES(
f187_in/1(YES)
[]/0)
f187_out1/0)
./2(YES,YES)
U3/2(YES,YES)
U4/2(YES,YES)
U5/2(YES,YES)

Quasi precedence:
f2_in_1 > U1_2 > f2_out1
f2_in_1 > [f185_in_1, f186_in] > U4_2 > [f185_out1, f186_out1, f187_in_1, [], f187_out1, ._2] > U3_2
f2_in_1 > [f185_in_1, f186_in] > U4_2 > [f185_out1, f186_out1, f187_in_1, [], f187_out1, ._2] > U5_2


Status:
f2_in_1: multiset status
U1_2: [1,2]
f185_in_1: [1]
f185_out1: multiset status
f2_out1: multiset status
f186_in: multiset status
f186_out1: multiset status
f187_in_1: multiset status
[]: multiset status
f187_out1: multiset status
._2: multiset status
U3_2: multiset status
U4_2: multiset status
U5_2: multiset status

With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f2_in(T9) -> U1(f185_in(T9), T9)
   U1(f185_out1, T9) -> f2_out1
   f186_in -> f186_out1
   f187_in([]) -> f187_out1
   f187_in(.(T42, T43)) -> U3(f187_in(T43), .(T42, T43))
   U3(f187_out1, .(T42, T43)) -> f187_out1
   f185_in(T9) -> U4(f186_in, T9)
   U4(f186_out1, T9) -> U5(f187_in(T9), T9)
   U5(f187_out1, T9) -> f185_out1




----------------------------------------

(72)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f186_in -> U2(f186_in)
   U2(f186_out1) -> f186_out1

Q is empty.

----------------------------------------

(73) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U2(x_1)) = 2*x_1
   POL(f186_in) = 0
   POL(f186_out1) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U2(f186_out1) -> f186_out1




----------------------------------------

(74)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f186_in -> U2(f186_in)

Q is empty.

----------------------------------------

(75) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(76)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f186_in -> U2(f186_in)

The set Q consists of the following terms:

   f186_in


----------------------------------------

(77) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(78)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F186_IN -> F186_IN

The TRS R consists of the following rules:

   f186_in -> U2(f186_in)

The set Q consists of the following terms:

   f186_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(79) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(80)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F186_IN -> F186_IN

R is empty.
The set Q consists of the following terms:

   f186_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(81) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f186_in


----------------------------------------

(82)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F186_IN -> F186_IN

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.