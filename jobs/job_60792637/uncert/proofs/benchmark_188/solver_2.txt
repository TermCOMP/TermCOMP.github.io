YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/lgnY6.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

goal(g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Clauses:

list([]).
list(.(X, XS)) :- list(XS).
s2l(s(X), .(Y, Xs)) :- s2l(X, Xs).
s2l(0, []).
goal(X) :- ','(s2l(X, XS), list(XS)).


Query: goal(g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

goal_in_1: (b)

s2l_in_2: (b,f)

list_in_1: (b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   goal_in_g(X) -> U3_g(X, s2l_in_ga(X, XS))
   s2l_in_ga(s(X), .(Y, Xs)) -> U2_ga(X, Y, Xs, s2l_in_ga(X, Xs))
   s2l_in_ga(0, []) -> s2l_out_ga(0, [])
   U2_ga(X, Y, Xs, s2l_out_ga(X, Xs)) -> s2l_out_ga(s(X), .(Y, Xs))
   U3_g(X, s2l_out_ga(X, XS)) -> U4_g(X, list_in_g(XS))
   list_in_g([]) -> list_out_g([])
   list_in_g(.(X, XS)) -> U1_g(X, XS, list_in_g(XS))
   U1_g(X, XS, list_out_g(XS)) -> list_out_g(.(X, XS))
   U4_g(X, list_out_g(XS)) -> goal_out_g(X)

The argument filtering Pi contains the following mapping:
goal_in_g(x1)  =  goal_in_g(x1)

U3_g(x1, x2)  =  U3_g(x1, x2)

s2l_in_ga(x1, x2)  =  s2l_in_ga(x1)

s(x1)  =  s(x1)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x4)

0  =  0

s2l_out_ga(x1, x2)  =  s2l_out_ga(x1, x2)

.(x1, x2)  =  .(x2)

U4_g(x1, x2)  =  U4_g(x1, x2)

list_in_g(x1)  =  list_in_g(x1)

[]  =  []

list_out_g(x1)  =  list_out_g(x1)

U1_g(x1, x2, x3)  =  U1_g(x2, x3)

goal_out_g(x1)  =  goal_out_g(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   goal_in_g(X) -> U3_g(X, s2l_in_ga(X, XS))
   s2l_in_ga(s(X), .(Y, Xs)) -> U2_ga(X, Y, Xs, s2l_in_ga(X, Xs))
   s2l_in_ga(0, []) -> s2l_out_ga(0, [])
   U2_ga(X, Y, Xs, s2l_out_ga(X, Xs)) -> s2l_out_ga(s(X), .(Y, Xs))
   U3_g(X, s2l_out_ga(X, XS)) -> U4_g(X, list_in_g(XS))
   list_in_g([]) -> list_out_g([])
   list_in_g(.(X, XS)) -> U1_g(X, XS, list_in_g(XS))
   U1_g(X, XS, list_out_g(XS)) -> list_out_g(.(X, XS))
   U4_g(X, list_out_g(XS)) -> goal_out_g(X)

The argument filtering Pi contains the following mapping:
goal_in_g(x1)  =  goal_in_g(x1)

U3_g(x1, x2)  =  U3_g(x1, x2)

s2l_in_ga(x1, x2)  =  s2l_in_ga(x1)

s(x1)  =  s(x1)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x4)

0  =  0

s2l_out_ga(x1, x2)  =  s2l_out_ga(x1, x2)

.(x1, x2)  =  .(x2)

U4_g(x1, x2)  =  U4_g(x1, x2)

list_in_g(x1)  =  list_in_g(x1)

[]  =  []

list_out_g(x1)  =  list_out_g(x1)

U1_g(x1, x2, x3)  =  U1_g(x2, x3)

goal_out_g(x1)  =  goal_out_g(x1)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   GOAL_IN_G(X) -> U3_G(X, s2l_in_ga(X, XS))
   GOAL_IN_G(X) -> S2L_IN_GA(X, XS)
   S2L_IN_GA(s(X), .(Y, Xs)) -> U2_GA(X, Y, Xs, s2l_in_ga(X, Xs))
   S2L_IN_GA(s(X), .(Y, Xs)) -> S2L_IN_GA(X, Xs)
   U3_G(X, s2l_out_ga(X, XS)) -> U4_G(X, list_in_g(XS))
   U3_G(X, s2l_out_ga(X, XS)) -> LIST_IN_G(XS)
   LIST_IN_G(.(X, XS)) -> U1_G(X, XS, list_in_g(XS))
   LIST_IN_G(.(X, XS)) -> LIST_IN_G(XS)

The TRS R consists of the following rules:

   goal_in_g(X) -> U3_g(X, s2l_in_ga(X, XS))
   s2l_in_ga(s(X), .(Y, Xs)) -> U2_ga(X, Y, Xs, s2l_in_ga(X, Xs))
   s2l_in_ga(0, []) -> s2l_out_ga(0, [])
   U2_ga(X, Y, Xs, s2l_out_ga(X, Xs)) -> s2l_out_ga(s(X), .(Y, Xs))
   U3_g(X, s2l_out_ga(X, XS)) -> U4_g(X, list_in_g(XS))
   list_in_g([]) -> list_out_g([])
   list_in_g(.(X, XS)) -> U1_g(X, XS, list_in_g(XS))
   U1_g(X, XS, list_out_g(XS)) -> list_out_g(.(X, XS))
   U4_g(X, list_out_g(XS)) -> goal_out_g(X)

The argument filtering Pi contains the following mapping:
goal_in_g(x1)  =  goal_in_g(x1)

U3_g(x1, x2)  =  U3_g(x1, x2)

s2l_in_ga(x1, x2)  =  s2l_in_ga(x1)

s(x1)  =  s(x1)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x4)

0  =  0

s2l_out_ga(x1, x2)  =  s2l_out_ga(x1, x2)

.(x1, x2)  =  .(x2)

U4_g(x1, x2)  =  U4_g(x1, x2)

list_in_g(x1)  =  list_in_g(x1)

[]  =  []

list_out_g(x1)  =  list_out_g(x1)

U1_g(x1, x2, x3)  =  U1_g(x2, x3)

goal_out_g(x1)  =  goal_out_g(x1)

GOAL_IN_G(x1)  =  GOAL_IN_G(x1)

U3_G(x1, x2)  =  U3_G(x1, x2)

S2L_IN_GA(x1, x2)  =  S2L_IN_GA(x1)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x1, x4)

U4_G(x1, x2)  =  U4_G(x1, x2)

LIST_IN_G(x1)  =  LIST_IN_G(x1)

U1_G(x1, x2, x3)  =  U1_G(x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GOAL_IN_G(X) -> U3_G(X, s2l_in_ga(X, XS))
   GOAL_IN_G(X) -> S2L_IN_GA(X, XS)
   S2L_IN_GA(s(X), .(Y, Xs)) -> U2_GA(X, Y, Xs, s2l_in_ga(X, Xs))
   S2L_IN_GA(s(X), .(Y, Xs)) -> S2L_IN_GA(X, Xs)
   U3_G(X, s2l_out_ga(X, XS)) -> U4_G(X, list_in_g(XS))
   U3_G(X, s2l_out_ga(X, XS)) -> LIST_IN_G(XS)
   LIST_IN_G(.(X, XS)) -> U1_G(X, XS, list_in_g(XS))
   LIST_IN_G(.(X, XS)) -> LIST_IN_G(XS)

The TRS R consists of the following rules:

   goal_in_g(X) -> U3_g(X, s2l_in_ga(X, XS))
   s2l_in_ga(s(X), .(Y, Xs)) -> U2_ga(X, Y, Xs, s2l_in_ga(X, Xs))
   s2l_in_ga(0, []) -> s2l_out_ga(0, [])
   U2_ga(X, Y, Xs, s2l_out_ga(X, Xs)) -> s2l_out_ga(s(X), .(Y, Xs))
   U3_g(X, s2l_out_ga(X, XS)) -> U4_g(X, list_in_g(XS))
   list_in_g([]) -> list_out_g([])
   list_in_g(.(X, XS)) -> U1_g(X, XS, list_in_g(XS))
   U1_g(X, XS, list_out_g(XS)) -> list_out_g(.(X, XS))
   U4_g(X, list_out_g(XS)) -> goal_out_g(X)

The argument filtering Pi contains the following mapping:
goal_in_g(x1)  =  goal_in_g(x1)

U3_g(x1, x2)  =  U3_g(x1, x2)

s2l_in_ga(x1, x2)  =  s2l_in_ga(x1)

s(x1)  =  s(x1)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x4)

0  =  0

s2l_out_ga(x1, x2)  =  s2l_out_ga(x1, x2)

.(x1, x2)  =  .(x2)

U4_g(x1, x2)  =  U4_g(x1, x2)

list_in_g(x1)  =  list_in_g(x1)

[]  =  []

list_out_g(x1)  =  list_out_g(x1)

U1_g(x1, x2, x3)  =  U1_g(x2, x3)

goal_out_g(x1)  =  goal_out_g(x1)

GOAL_IN_G(x1)  =  GOAL_IN_G(x1)

U3_G(x1, x2)  =  U3_G(x1, x2)

S2L_IN_GA(x1, x2)  =  S2L_IN_GA(x1)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x1, x4)

U4_G(x1, x2)  =  U4_G(x1, x2)

LIST_IN_G(x1)  =  LIST_IN_G(x1)

U1_G(x1, x2, x3)  =  U1_G(x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LIST_IN_G(.(X, XS)) -> LIST_IN_G(XS)

The TRS R consists of the following rules:

   goal_in_g(X) -> U3_g(X, s2l_in_ga(X, XS))
   s2l_in_ga(s(X), .(Y, Xs)) -> U2_ga(X, Y, Xs, s2l_in_ga(X, Xs))
   s2l_in_ga(0, []) -> s2l_out_ga(0, [])
   U2_ga(X, Y, Xs, s2l_out_ga(X, Xs)) -> s2l_out_ga(s(X), .(Y, Xs))
   U3_g(X, s2l_out_ga(X, XS)) -> U4_g(X, list_in_g(XS))
   list_in_g([]) -> list_out_g([])
   list_in_g(.(X, XS)) -> U1_g(X, XS, list_in_g(XS))
   U1_g(X, XS, list_out_g(XS)) -> list_out_g(.(X, XS))
   U4_g(X, list_out_g(XS)) -> goal_out_g(X)

The argument filtering Pi contains the following mapping:
goal_in_g(x1)  =  goal_in_g(x1)

U3_g(x1, x2)  =  U3_g(x1, x2)

s2l_in_ga(x1, x2)  =  s2l_in_ga(x1)

s(x1)  =  s(x1)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x4)

0  =  0

s2l_out_ga(x1, x2)  =  s2l_out_ga(x1, x2)

.(x1, x2)  =  .(x2)

U4_g(x1, x2)  =  U4_g(x1, x2)

list_in_g(x1)  =  list_in_g(x1)

[]  =  []

list_out_g(x1)  =  list_out_g(x1)

U1_g(x1, x2, x3)  =  U1_g(x2, x3)

goal_out_g(x1)  =  goal_out_g(x1)

LIST_IN_G(x1)  =  LIST_IN_G(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LIST_IN_G(.(X, XS)) -> LIST_IN_G(XS)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

LIST_IN_G(x1)  =  LIST_IN_G(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LIST_IN_G(.(XS)) -> LIST_IN_G(XS)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LIST_IN_G(.(XS)) -> LIST_IN_G(XS)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   S2L_IN_GA(s(X), .(Y, Xs)) -> S2L_IN_GA(X, Xs)

The TRS R consists of the following rules:

   goal_in_g(X) -> U3_g(X, s2l_in_ga(X, XS))
   s2l_in_ga(s(X), .(Y, Xs)) -> U2_ga(X, Y, Xs, s2l_in_ga(X, Xs))
   s2l_in_ga(0, []) -> s2l_out_ga(0, [])
   U2_ga(X, Y, Xs, s2l_out_ga(X, Xs)) -> s2l_out_ga(s(X), .(Y, Xs))
   U3_g(X, s2l_out_ga(X, XS)) -> U4_g(X, list_in_g(XS))
   list_in_g([]) -> list_out_g([])
   list_in_g(.(X, XS)) -> U1_g(X, XS, list_in_g(XS))
   U1_g(X, XS, list_out_g(XS)) -> list_out_g(.(X, XS))
   U4_g(X, list_out_g(XS)) -> goal_out_g(X)

The argument filtering Pi contains the following mapping:
goal_in_g(x1)  =  goal_in_g(x1)

U3_g(x1, x2)  =  U3_g(x1, x2)

s2l_in_ga(x1, x2)  =  s2l_in_ga(x1)

s(x1)  =  s(x1)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x4)

0  =  0

s2l_out_ga(x1, x2)  =  s2l_out_ga(x1, x2)

.(x1, x2)  =  .(x2)

U4_g(x1, x2)  =  U4_g(x1, x2)

list_in_g(x1)  =  list_in_g(x1)

[]  =  []

list_out_g(x1)  =  list_out_g(x1)

U1_g(x1, x2, x3)  =  U1_g(x2, x3)

goal_out_g(x1)  =  goal_out_g(x1)

S2L_IN_GA(x1, x2)  =  S2L_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   S2L_IN_GA(s(X), .(Y, Xs)) -> S2L_IN_GA(X, Xs)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

.(x1, x2)  =  .(x2)

S2L_IN_GA(x1, x2)  =  S2L_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2L_IN_GA(s(X)) -> S2L_IN_GA(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*S2L_IN_GA(s(X)) -> S2L_IN_GA(X)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES
