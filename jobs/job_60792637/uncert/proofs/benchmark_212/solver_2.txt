YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/WWT2U.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

int(g,g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Clauses:

intlist([], []).
intlist(.(X, XS), .(s(X), YS)) :- intlist(XS, YS).
int(0, 0, .(0, [])).
int(0, s(Y), .(0, XS)) :- int(s(0), s(Y), XS).
int(s(X), 0, []).
int(s(X), s(Y), XS) :- ','(int(X, Y, ZS), intlist(ZS, XS)).


Query: int(g,g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

int_in_3: (b,b,f)

intlist_in_2: (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   int_in_gga(0, 0, .(0, [])) -> int_out_gga(0, 0, .(0, []))
   int_in_gga(0, s(Y), .(0, XS)) -> U2_gga(Y, XS, int_in_gga(s(0), s(Y), XS))
   int_in_gga(s(X), 0, []) -> int_out_gga(s(X), 0, [])
   int_in_gga(s(X), s(Y), XS) -> U3_gga(X, Y, XS, int_in_gga(X, Y, ZS))
   U3_gga(X, Y, XS, int_out_gga(X, Y, ZS)) -> U4_gga(X, Y, XS, intlist_in_ga(ZS, XS))
   intlist_in_ga([], []) -> intlist_out_ga([], [])
   intlist_in_ga(.(X, XS), .(s(X), YS)) -> U1_ga(X, XS, YS, intlist_in_ga(XS, YS))
   U1_ga(X, XS, YS, intlist_out_ga(XS, YS)) -> intlist_out_ga(.(X, XS), .(s(X), YS))
   U4_gga(X, Y, XS, intlist_out_ga(ZS, XS)) -> int_out_gga(s(X), s(Y), XS)
   U2_gga(Y, XS, int_out_gga(s(0), s(Y), XS)) -> int_out_gga(0, s(Y), .(0, XS))

The argument filtering Pi contains the following mapping:
int_in_gga(x1, x2, x3)  =  int_in_gga(x1, x2)

0  =  0

int_out_gga(x1, x2, x3)  =  int_out_gga(x1, x2, x3)

s(x1)  =  s(x1)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x3)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x4)

U4_gga(x1, x2, x3, x4)  =  U4_gga(x1, x2, x4)

intlist_in_ga(x1, x2)  =  intlist_in_ga(x1)

[]  =  []

intlist_out_ga(x1, x2)  =  intlist_out_ga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   int_in_gga(0, 0, .(0, [])) -> int_out_gga(0, 0, .(0, []))
   int_in_gga(0, s(Y), .(0, XS)) -> U2_gga(Y, XS, int_in_gga(s(0), s(Y), XS))
   int_in_gga(s(X), 0, []) -> int_out_gga(s(X), 0, [])
   int_in_gga(s(X), s(Y), XS) -> U3_gga(X, Y, XS, int_in_gga(X, Y, ZS))
   U3_gga(X, Y, XS, int_out_gga(X, Y, ZS)) -> U4_gga(X, Y, XS, intlist_in_ga(ZS, XS))
   intlist_in_ga([], []) -> intlist_out_ga([], [])
   intlist_in_ga(.(X, XS), .(s(X), YS)) -> U1_ga(X, XS, YS, intlist_in_ga(XS, YS))
   U1_ga(X, XS, YS, intlist_out_ga(XS, YS)) -> intlist_out_ga(.(X, XS), .(s(X), YS))
   U4_gga(X, Y, XS, intlist_out_ga(ZS, XS)) -> int_out_gga(s(X), s(Y), XS)
   U2_gga(Y, XS, int_out_gga(s(0), s(Y), XS)) -> int_out_gga(0, s(Y), .(0, XS))

The argument filtering Pi contains the following mapping:
int_in_gga(x1, x2, x3)  =  int_in_gga(x1, x2)

0  =  0

int_out_gga(x1, x2, x3)  =  int_out_gga(x1, x2, x3)

s(x1)  =  s(x1)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x3)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x4)

U4_gga(x1, x2, x3, x4)  =  U4_gga(x1, x2, x4)

intlist_in_ga(x1, x2)  =  intlist_in_ga(x1)

[]  =  []

intlist_out_ga(x1, x2)  =  intlist_out_ga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   INT_IN_GGA(0, s(Y), .(0, XS)) -> U2_GGA(Y, XS, int_in_gga(s(0), s(Y), XS))
   INT_IN_GGA(0, s(Y), .(0, XS)) -> INT_IN_GGA(s(0), s(Y), XS)
   INT_IN_GGA(s(X), s(Y), XS) -> U3_GGA(X, Y, XS, int_in_gga(X, Y, ZS))
   INT_IN_GGA(s(X), s(Y), XS) -> INT_IN_GGA(X, Y, ZS)
   U3_GGA(X, Y, XS, int_out_gga(X, Y, ZS)) -> U4_GGA(X, Y, XS, intlist_in_ga(ZS, XS))
   U3_GGA(X, Y, XS, int_out_gga(X, Y, ZS)) -> INTLIST_IN_GA(ZS, XS)
   INTLIST_IN_GA(.(X, XS), .(s(X), YS)) -> U1_GA(X, XS, YS, intlist_in_ga(XS, YS))
   INTLIST_IN_GA(.(X, XS), .(s(X), YS)) -> INTLIST_IN_GA(XS, YS)

The TRS R consists of the following rules:

   int_in_gga(0, 0, .(0, [])) -> int_out_gga(0, 0, .(0, []))
   int_in_gga(0, s(Y), .(0, XS)) -> U2_gga(Y, XS, int_in_gga(s(0), s(Y), XS))
   int_in_gga(s(X), 0, []) -> int_out_gga(s(X), 0, [])
   int_in_gga(s(X), s(Y), XS) -> U3_gga(X, Y, XS, int_in_gga(X, Y, ZS))
   U3_gga(X, Y, XS, int_out_gga(X, Y, ZS)) -> U4_gga(X, Y, XS, intlist_in_ga(ZS, XS))
   intlist_in_ga([], []) -> intlist_out_ga([], [])
   intlist_in_ga(.(X, XS), .(s(X), YS)) -> U1_ga(X, XS, YS, intlist_in_ga(XS, YS))
   U1_ga(X, XS, YS, intlist_out_ga(XS, YS)) -> intlist_out_ga(.(X, XS), .(s(X), YS))
   U4_gga(X, Y, XS, intlist_out_ga(ZS, XS)) -> int_out_gga(s(X), s(Y), XS)
   U2_gga(Y, XS, int_out_gga(s(0), s(Y), XS)) -> int_out_gga(0, s(Y), .(0, XS))

The argument filtering Pi contains the following mapping:
int_in_gga(x1, x2, x3)  =  int_in_gga(x1, x2)

0  =  0

int_out_gga(x1, x2, x3)  =  int_out_gga(x1, x2, x3)

s(x1)  =  s(x1)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x3)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x4)

U4_gga(x1, x2, x3, x4)  =  U4_gga(x1, x2, x4)

intlist_in_ga(x1, x2)  =  intlist_in_ga(x1)

[]  =  []

intlist_out_ga(x1, x2)  =  intlist_out_ga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

INT_IN_GGA(x1, x2, x3)  =  INT_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3)  =  U2_GGA(x1, x3)

U3_GGA(x1, x2, x3, x4)  =  U3_GGA(x1, x2, x4)

U4_GGA(x1, x2, x3, x4)  =  U4_GGA(x1, x2, x4)

INTLIST_IN_GA(x1, x2)  =  INTLIST_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   INT_IN_GGA(0, s(Y), .(0, XS)) -> U2_GGA(Y, XS, int_in_gga(s(0), s(Y), XS))
   INT_IN_GGA(0, s(Y), .(0, XS)) -> INT_IN_GGA(s(0), s(Y), XS)
   INT_IN_GGA(s(X), s(Y), XS) -> U3_GGA(X, Y, XS, int_in_gga(X, Y, ZS))
   INT_IN_GGA(s(X), s(Y), XS) -> INT_IN_GGA(X, Y, ZS)
   U3_GGA(X, Y, XS, int_out_gga(X, Y, ZS)) -> U4_GGA(X, Y, XS, intlist_in_ga(ZS, XS))
   U3_GGA(X, Y, XS, int_out_gga(X, Y, ZS)) -> INTLIST_IN_GA(ZS, XS)
   INTLIST_IN_GA(.(X, XS), .(s(X), YS)) -> U1_GA(X, XS, YS, intlist_in_ga(XS, YS))
   INTLIST_IN_GA(.(X, XS), .(s(X), YS)) -> INTLIST_IN_GA(XS, YS)

The TRS R consists of the following rules:

   int_in_gga(0, 0, .(0, [])) -> int_out_gga(0, 0, .(0, []))
   int_in_gga(0, s(Y), .(0, XS)) -> U2_gga(Y, XS, int_in_gga(s(0), s(Y), XS))
   int_in_gga(s(X), 0, []) -> int_out_gga(s(X), 0, [])
   int_in_gga(s(X), s(Y), XS) -> U3_gga(X, Y, XS, int_in_gga(X, Y, ZS))
   U3_gga(X, Y, XS, int_out_gga(X, Y, ZS)) -> U4_gga(X, Y, XS, intlist_in_ga(ZS, XS))
   intlist_in_ga([], []) -> intlist_out_ga([], [])
   intlist_in_ga(.(X, XS), .(s(X), YS)) -> U1_ga(X, XS, YS, intlist_in_ga(XS, YS))
   U1_ga(X, XS, YS, intlist_out_ga(XS, YS)) -> intlist_out_ga(.(X, XS), .(s(X), YS))
   U4_gga(X, Y, XS, intlist_out_ga(ZS, XS)) -> int_out_gga(s(X), s(Y), XS)
   U2_gga(Y, XS, int_out_gga(s(0), s(Y), XS)) -> int_out_gga(0, s(Y), .(0, XS))

The argument filtering Pi contains the following mapping:
int_in_gga(x1, x2, x3)  =  int_in_gga(x1, x2)

0  =  0

int_out_gga(x1, x2, x3)  =  int_out_gga(x1, x2, x3)

s(x1)  =  s(x1)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x3)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x4)

U4_gga(x1, x2, x3, x4)  =  U4_gga(x1, x2, x4)

intlist_in_ga(x1, x2)  =  intlist_in_ga(x1)

[]  =  []

intlist_out_ga(x1, x2)  =  intlist_out_ga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

INT_IN_GGA(x1, x2, x3)  =  INT_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3)  =  U2_GGA(x1, x3)

U3_GGA(x1, x2, x3, x4)  =  U3_GGA(x1, x2, x4)

U4_GGA(x1, x2, x3, x4)  =  U4_GGA(x1, x2, x4)

INTLIST_IN_GA(x1, x2)  =  INTLIST_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   INTLIST_IN_GA(.(X, XS), .(s(X), YS)) -> INTLIST_IN_GA(XS, YS)

The TRS R consists of the following rules:

   int_in_gga(0, 0, .(0, [])) -> int_out_gga(0, 0, .(0, []))
   int_in_gga(0, s(Y), .(0, XS)) -> U2_gga(Y, XS, int_in_gga(s(0), s(Y), XS))
   int_in_gga(s(X), 0, []) -> int_out_gga(s(X), 0, [])
   int_in_gga(s(X), s(Y), XS) -> U3_gga(X, Y, XS, int_in_gga(X, Y, ZS))
   U3_gga(X, Y, XS, int_out_gga(X, Y, ZS)) -> U4_gga(X, Y, XS, intlist_in_ga(ZS, XS))
   intlist_in_ga([], []) -> intlist_out_ga([], [])
   intlist_in_ga(.(X, XS), .(s(X), YS)) -> U1_ga(X, XS, YS, intlist_in_ga(XS, YS))
   U1_ga(X, XS, YS, intlist_out_ga(XS, YS)) -> intlist_out_ga(.(X, XS), .(s(X), YS))
   U4_gga(X, Y, XS, intlist_out_ga(ZS, XS)) -> int_out_gga(s(X), s(Y), XS)
   U2_gga(Y, XS, int_out_gga(s(0), s(Y), XS)) -> int_out_gga(0, s(Y), .(0, XS))

The argument filtering Pi contains the following mapping:
int_in_gga(x1, x2, x3)  =  int_in_gga(x1, x2)

0  =  0

int_out_gga(x1, x2, x3)  =  int_out_gga(x1, x2, x3)

s(x1)  =  s(x1)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x3)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x4)

U4_gga(x1, x2, x3, x4)  =  U4_gga(x1, x2, x4)

intlist_in_ga(x1, x2)  =  intlist_in_ga(x1)

[]  =  []

intlist_out_ga(x1, x2)  =  intlist_out_ga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

INTLIST_IN_GA(x1, x2)  =  INTLIST_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   INTLIST_IN_GA(.(X, XS), .(s(X), YS)) -> INTLIST_IN_GA(XS, YS)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

.(x1, x2)  =  .(x1, x2)

INTLIST_IN_GA(x1, x2)  =  INTLIST_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INTLIST_IN_GA(.(X, XS)) -> INTLIST_IN_GA(XS)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*INTLIST_IN_GA(.(X, XS)) -> INTLIST_IN_GA(XS)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   INT_IN_GGA(0, s(Y), .(0, XS)) -> INT_IN_GGA(s(0), s(Y), XS)
   INT_IN_GGA(s(X), s(Y), XS) -> INT_IN_GGA(X, Y, ZS)

The TRS R consists of the following rules:

   int_in_gga(0, 0, .(0, [])) -> int_out_gga(0, 0, .(0, []))
   int_in_gga(0, s(Y), .(0, XS)) -> U2_gga(Y, XS, int_in_gga(s(0), s(Y), XS))
   int_in_gga(s(X), 0, []) -> int_out_gga(s(X), 0, [])
   int_in_gga(s(X), s(Y), XS) -> U3_gga(X, Y, XS, int_in_gga(X, Y, ZS))
   U3_gga(X, Y, XS, int_out_gga(X, Y, ZS)) -> U4_gga(X, Y, XS, intlist_in_ga(ZS, XS))
   intlist_in_ga([], []) -> intlist_out_ga([], [])
   intlist_in_ga(.(X, XS), .(s(X), YS)) -> U1_ga(X, XS, YS, intlist_in_ga(XS, YS))
   U1_ga(X, XS, YS, intlist_out_ga(XS, YS)) -> intlist_out_ga(.(X, XS), .(s(X), YS))
   U4_gga(X, Y, XS, intlist_out_ga(ZS, XS)) -> int_out_gga(s(X), s(Y), XS)
   U2_gga(Y, XS, int_out_gga(s(0), s(Y), XS)) -> int_out_gga(0, s(Y), .(0, XS))

The argument filtering Pi contains the following mapping:
int_in_gga(x1, x2, x3)  =  int_in_gga(x1, x2)

0  =  0

int_out_gga(x1, x2, x3)  =  int_out_gga(x1, x2, x3)

s(x1)  =  s(x1)

U2_gga(x1, x2, x3)  =  U2_gga(x1, x3)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x4)

U4_gga(x1, x2, x3, x4)  =  U4_gga(x1, x2, x4)

intlist_in_ga(x1, x2)  =  intlist_in_ga(x1)

[]  =  []

intlist_out_ga(x1, x2)  =  intlist_out_ga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

INT_IN_GGA(x1, x2, x3)  =  INT_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   INT_IN_GGA(0, s(Y), .(0, XS)) -> INT_IN_GGA(s(0), s(Y), XS)
   INT_IN_GGA(s(X), s(Y), XS) -> INT_IN_GGA(X, Y, ZS)

R is empty.
The argument filtering Pi contains the following mapping:
0  =  0

s(x1)  =  s(x1)

.(x1, x2)  =  .(x1, x2)

INT_IN_GGA(x1, x2, x3)  =  INT_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INT_IN_GGA(0, s(Y)) -> INT_IN_GGA(s(0), s(Y))
   INT_IN_GGA(s(X), s(Y)) -> INT_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*INT_IN_GGA(s(X), s(Y)) -> INT_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*INT_IN_GGA(0, s(Y)) -> INT_IN_GGA(s(0), s(Y))
The graph contains the following edges 2 >= 2


----------------------------------------

(20)
YES
