YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/jcayd.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

perm1(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 1 ms]
        (20) QDP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
Clauses:

perm1([], []).
perm1(Xs, .(X, Ys)) :- ','(select(X, Xs, Zs), perm1(Zs, Ys)).
select(X, .(X, Xs), Xs).
select(X, .(Y, Xs), .(Y, Zs)) :- select(X, Xs, Zs).


Query: perm1(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

perm1_in_2: (b,f)

select_in_3: (f,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   perm1_in_ga([], []) -> perm1_out_ga([], [])
   perm1_in_ga(Xs, .(X, Ys)) -> U1_ga(Xs, X, Ys, select_in_aga(X, Xs, Zs))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Xs), .(Y, Zs)) -> U3_aga(X, Y, Xs, Zs, select_in_aga(X, Xs, Zs))
   U3_aga(X, Y, Xs, Zs, select_out_aga(X, Xs, Zs)) -> select_out_aga(X, .(Y, Xs), .(Y, Zs))
   U1_ga(Xs, X, Ys, select_out_aga(X, Xs, Zs)) -> U2_ga(Xs, X, Ys, perm1_in_ga(Zs, Ys))
   U2_ga(Xs, X, Ys, perm1_out_ga(Zs, Ys)) -> perm1_out_ga(Xs, .(X, Ys))

The argument filtering Pi contains the following mapping:
perm1_in_ga(x1, x2)  =  perm1_in_ga(x1)

[]  =  []

perm1_out_ga(x1, x2)  =  perm1_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U3_aga(x1, x2, x3, x4, x5)  =  U3_aga(x2, x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x2, x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   perm1_in_ga([], []) -> perm1_out_ga([], [])
   perm1_in_ga(Xs, .(X, Ys)) -> U1_ga(Xs, X, Ys, select_in_aga(X, Xs, Zs))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Xs), .(Y, Zs)) -> U3_aga(X, Y, Xs, Zs, select_in_aga(X, Xs, Zs))
   U3_aga(X, Y, Xs, Zs, select_out_aga(X, Xs, Zs)) -> select_out_aga(X, .(Y, Xs), .(Y, Zs))
   U1_ga(Xs, X, Ys, select_out_aga(X, Xs, Zs)) -> U2_ga(Xs, X, Ys, perm1_in_ga(Zs, Ys))
   U2_ga(Xs, X, Ys, perm1_out_ga(Zs, Ys)) -> perm1_out_ga(Xs, .(X, Ys))

The argument filtering Pi contains the following mapping:
perm1_in_ga(x1, x2)  =  perm1_in_ga(x1)

[]  =  []

perm1_out_ga(x1, x2)  =  perm1_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U3_aga(x1, x2, x3, x4, x5)  =  U3_aga(x2, x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x2, x4)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   PERM1_IN_GA(Xs, .(X, Ys)) -> U1_GA(Xs, X, Ys, select_in_aga(X, Xs, Zs))
   PERM1_IN_GA(Xs, .(X, Ys)) -> SELECT_IN_AGA(X, Xs, Zs)
   SELECT_IN_AGA(X, .(Y, Xs), .(Y, Zs)) -> U3_AGA(X, Y, Xs, Zs, select_in_aga(X, Xs, Zs))
   SELECT_IN_AGA(X, .(Y, Xs), .(Y, Zs)) -> SELECT_IN_AGA(X, Xs, Zs)
   U1_GA(Xs, X, Ys, select_out_aga(X, Xs, Zs)) -> U2_GA(Xs, X, Ys, perm1_in_ga(Zs, Ys))
   U1_GA(Xs, X, Ys, select_out_aga(X, Xs, Zs)) -> PERM1_IN_GA(Zs, Ys)

The TRS R consists of the following rules:

   perm1_in_ga([], []) -> perm1_out_ga([], [])
   perm1_in_ga(Xs, .(X, Ys)) -> U1_ga(Xs, X, Ys, select_in_aga(X, Xs, Zs))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Xs), .(Y, Zs)) -> U3_aga(X, Y, Xs, Zs, select_in_aga(X, Xs, Zs))
   U3_aga(X, Y, Xs, Zs, select_out_aga(X, Xs, Zs)) -> select_out_aga(X, .(Y, Xs), .(Y, Zs))
   U1_ga(Xs, X, Ys, select_out_aga(X, Xs, Zs)) -> U2_ga(Xs, X, Ys, perm1_in_ga(Zs, Ys))
   U2_ga(Xs, X, Ys, perm1_out_ga(Zs, Ys)) -> perm1_out_ga(Xs, .(X, Ys))

The argument filtering Pi contains the following mapping:
perm1_in_ga(x1, x2)  =  perm1_in_ga(x1)

[]  =  []

perm1_out_ga(x1, x2)  =  perm1_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U3_aga(x1, x2, x3, x4, x5)  =  U3_aga(x2, x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x2, x4)

PERM1_IN_GA(x1, x2)  =  PERM1_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x4)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U3_AGA(x1, x2, x3, x4, x5)  =  U3_AGA(x2, x5)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PERM1_IN_GA(Xs, .(X, Ys)) -> U1_GA(Xs, X, Ys, select_in_aga(X, Xs, Zs))
   PERM1_IN_GA(Xs, .(X, Ys)) -> SELECT_IN_AGA(X, Xs, Zs)
   SELECT_IN_AGA(X, .(Y, Xs), .(Y, Zs)) -> U3_AGA(X, Y, Xs, Zs, select_in_aga(X, Xs, Zs))
   SELECT_IN_AGA(X, .(Y, Xs), .(Y, Zs)) -> SELECT_IN_AGA(X, Xs, Zs)
   U1_GA(Xs, X, Ys, select_out_aga(X, Xs, Zs)) -> U2_GA(Xs, X, Ys, perm1_in_ga(Zs, Ys))
   U1_GA(Xs, X, Ys, select_out_aga(X, Xs, Zs)) -> PERM1_IN_GA(Zs, Ys)

The TRS R consists of the following rules:

   perm1_in_ga([], []) -> perm1_out_ga([], [])
   perm1_in_ga(Xs, .(X, Ys)) -> U1_ga(Xs, X, Ys, select_in_aga(X, Xs, Zs))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Xs), .(Y, Zs)) -> U3_aga(X, Y, Xs, Zs, select_in_aga(X, Xs, Zs))
   U3_aga(X, Y, Xs, Zs, select_out_aga(X, Xs, Zs)) -> select_out_aga(X, .(Y, Xs), .(Y, Zs))
   U1_ga(Xs, X, Ys, select_out_aga(X, Xs, Zs)) -> U2_ga(Xs, X, Ys, perm1_in_ga(Zs, Ys))
   U2_ga(Xs, X, Ys, perm1_out_ga(Zs, Ys)) -> perm1_out_ga(Xs, .(X, Ys))

The argument filtering Pi contains the following mapping:
perm1_in_ga(x1, x2)  =  perm1_in_ga(x1)

[]  =  []

perm1_out_ga(x1, x2)  =  perm1_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U3_aga(x1, x2, x3, x4, x5)  =  U3_aga(x2, x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x2, x4)

PERM1_IN_GA(x1, x2)  =  PERM1_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x4)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U3_AGA(x1, x2, x3, x4, x5)  =  U3_AGA(x2, x5)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Xs), .(Y, Zs)) -> SELECT_IN_AGA(X, Xs, Zs)

The TRS R consists of the following rules:

   perm1_in_ga([], []) -> perm1_out_ga([], [])
   perm1_in_ga(Xs, .(X, Ys)) -> U1_ga(Xs, X, Ys, select_in_aga(X, Xs, Zs))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Xs), .(Y, Zs)) -> U3_aga(X, Y, Xs, Zs, select_in_aga(X, Xs, Zs))
   U3_aga(X, Y, Xs, Zs, select_out_aga(X, Xs, Zs)) -> select_out_aga(X, .(Y, Xs), .(Y, Zs))
   U1_ga(Xs, X, Ys, select_out_aga(X, Xs, Zs)) -> U2_ga(Xs, X, Ys, perm1_in_ga(Zs, Ys))
   U2_ga(Xs, X, Ys, perm1_out_ga(Zs, Ys)) -> perm1_out_ga(Xs, .(X, Ys))

The argument filtering Pi contains the following mapping:
perm1_in_ga(x1, x2)  =  perm1_in_ga(x1)

[]  =  []

perm1_out_ga(x1, x2)  =  perm1_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U3_aga(x1, x2, x3, x4, x5)  =  U3_aga(x2, x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x2, x4)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Xs), .(Y, Zs)) -> SELECT_IN_AGA(X, Xs, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(.(Y, Xs)) -> SELECT_IN_AGA(Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SELECT_IN_AGA(.(Y, Xs)) -> SELECT_IN_AGA(Xs)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(Xs, X, Ys, select_out_aga(X, Xs, Zs)) -> PERM1_IN_GA(Zs, Ys)
   PERM1_IN_GA(Xs, .(X, Ys)) -> U1_GA(Xs, X, Ys, select_in_aga(X, Xs, Zs))

The TRS R consists of the following rules:

   perm1_in_ga([], []) -> perm1_out_ga([], [])
   perm1_in_ga(Xs, .(X, Ys)) -> U1_ga(Xs, X, Ys, select_in_aga(X, Xs, Zs))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Xs), .(Y, Zs)) -> U3_aga(X, Y, Xs, Zs, select_in_aga(X, Xs, Zs))
   U3_aga(X, Y, Xs, Zs, select_out_aga(X, Xs, Zs)) -> select_out_aga(X, .(Y, Xs), .(Y, Zs))
   U1_ga(Xs, X, Ys, select_out_aga(X, Xs, Zs)) -> U2_ga(Xs, X, Ys, perm1_in_ga(Zs, Ys))
   U2_ga(Xs, X, Ys, perm1_out_ga(Zs, Ys)) -> perm1_out_ga(Xs, .(X, Ys))

The argument filtering Pi contains the following mapping:
perm1_in_ga(x1, x2)  =  perm1_in_ga(x1)

[]  =  []

perm1_out_ga(x1, x2)  =  perm1_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U3_aga(x1, x2, x3, x4, x5)  =  U3_aga(x2, x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x2, x4)

PERM1_IN_GA(x1, x2)  =  PERM1_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(Xs, X, Ys, select_out_aga(X, Xs, Zs)) -> PERM1_IN_GA(Zs, Ys)
   PERM1_IN_GA(Xs, .(X, Ys)) -> U1_GA(Xs, X, Ys, select_in_aga(X, Xs, Zs))

The TRS R consists of the following rules:

   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Xs), .(Y, Zs)) -> U3_aga(X, Y, Xs, Zs, select_in_aga(X, Xs, Zs))
   U3_aga(X, Y, Xs, Zs, select_out_aga(X, Xs, Zs)) -> select_out_aga(X, .(Y, Xs), .(Y, Zs))

The argument filtering Pi contains the following mapping:
select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U3_aga(x1, x2, x3, x4, x5)  =  U3_aga(x2, x5)

PERM1_IN_GA(x1, x2)  =  PERM1_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GA(select_out_aga(X, Zs)) -> PERM1_IN_GA(Zs)
   PERM1_IN_GA(Xs) -> U1_GA(select_in_aga(Xs))

The TRS R consists of the following rules:

   select_in_aga(.(X, Xs)) -> select_out_aga(X, Xs)
   select_in_aga(.(Y, Xs)) -> U3_aga(Y, select_in_aga(Xs))
   U3_aga(Y, select_out_aga(X, Zs)) -> select_out_aga(X, .(Y, Zs))

The set Q consists of the following terms:

   select_in_aga(x0)
   U3_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U1_GA(select_out_aga(X, Zs)) -> PERM1_IN_GA(Zs)
   PERM1_IN_GA(Xs) -> U1_GA(select_in_aga(Xs))

Strictly oriented rules of the TRS R:

   select_in_aga(.(X, Xs)) -> select_out_aga(X, Xs)
   select_in_aga(.(Y, Xs)) -> U3_aga(Y, select_in_aga(Xs))
   U3_aga(Y, select_out_aga(X, Zs)) -> select_out_aga(X, .(Y, Zs))

Used ordering: Knuth-Bendix order [KBO] with precedence:U1_GA_1 > ._2 > select_in_aga_1 > U3_aga_2 > PERM1_IN_GA_1 > select_out_aga_2

and weight map:

   select_in_aga_1=1
   U1_GA_1=1
   PERM1_IN_GA_1=3
   ._2=0
   select_out_aga_2=1
   U3_aga_2=0

The variable weight is 2

----------------------------------------

(20)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   select_in_aga(x0)
   U3_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(22)
YES
