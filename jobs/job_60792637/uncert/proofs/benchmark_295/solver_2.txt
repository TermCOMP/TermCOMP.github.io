MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/HEfp8.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

append(a,a,a)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToTRSTransformerProof [SOUND, 0 ms]
(2) QTRS
    (3) QTRSRRRProof [EQUIVALENT, 21 ms]
    (4) QTRS
    (5) QTRSRRRProof [EQUIVALENT, 2 ms]
    (6) QTRS
    (7) Overlay + Local Confluence [EQUIVALENT, 0 ms]
    (8) QTRS
    (9) DependencyPairsProof [EQUIVALENT, 0 ms]
    (10) QDP
    (11) UsableRulesProof [EQUIVALENT, 0 ms]
    (12) QDP
    (13) QReductionProof [EQUIVALENT, 0 ms]
    (14) QDP
(15) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(16) IRSwT
    (17) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (18) IRSwT
    (19) IntTRSCompressionProof [EQUIVALENT, 11 ms]
    (20) IRSwT
    (21) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (22) IRSwT
    (23) IRSwTTerminationDigraphProof [EQUIVALENT, 2 ms]
    (24) IRSwT
    (25) FilterProof [EQUIVALENT, 0 ms]
    (26) IntTRS
    (27) IntTRSPeriodicNontermProof [COMPLETE, 0 ms]
    (28) NO
(29) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(30) TRIPLES
    (31) TriplesToPiDPProof [SOUND, 0 ms]
    (32) PiDP
    (33) DependencyGraphProof [EQUIVALENT, 0 ms]
    (34) PiDP
    (35) PiDPToQDPProof [SOUND, 0 ms]
    (36) QDP
(37) PrologToPiTRSProof [SOUND, 0 ms]
(38) PiTRS
    (39) DependencyPairsProof [EQUIVALENT, 0 ms]
    (40) PiDP
    (41) DependencyGraphProof [EQUIVALENT, 0 ms]
    (42) PiDP
    (43) UsableRulesProof [EQUIVALENT, 0 ms]
    (44) PiDP
    (45) PiDPToQDPProof [SOUND, 0 ms]
    (46) QDP
(47) PrologToPiTRSProof [SOUND, 0 ms]
(48) PiTRS
    (49) DependencyPairsProof [EQUIVALENT, 0 ms]
    (50) PiDP
    (51) DependencyGraphProof [EQUIVALENT, 0 ms]
    (52) PiDP
    (53) UsableRulesProof [EQUIVALENT, 0 ms]
    (54) PiDP
    (55) PiDPToQDPProof [SOUND, 0 ms]
    (56) QDP


----------------------------------------

(0)
Obligation:
Clauses:

append([], L, L).
append(.(H, L1), L2, .(H, L3)) :- append(L1, L2, L3).
append1([], L, L).
append1(.(H, L1), L2, .(H, L3)) :- append1(L1, L2, L3).


Query: append(a,a,a)
----------------------------------------

(1) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 5,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(append ([]) L L)",
                null
            ],
            [
                "(append (. H L1) L2 (. H L3))",
                "(append L1 L2 L3)"
            ],
            [
                "(append1 ([]) L L)",
                null
            ],
            [
                "(append1 (. H L1) L2 (. H L3))",
                "(append1 L1 L2 L3)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "12": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(append T1 T2 T3)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(append T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(append T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(append T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "30": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T21 T22 T23)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "31": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 5,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 7,
                "label": "PARALLEL"
            },
            {
                "from": 6,
                "to": 8,
                "label": "PARALLEL"
            },
            {
                "from": 7,
                "to": 12,
                "label": "EVAL with clause\nappend([], X5, X5).\nand substitutionT1 -> [],\nT2 -> T8,\nX5 -> T8,\nT3 -> T8"
            },
            {
                "from": 7,
                "to": 13,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 8,
                "to": 30,
                "label": "EVAL with clause\nappend(.(X14, X15), X16, .(X14, X17)) :- append(X15, X16, X17).\nand substitutionX14 -> T17,\nX15 -> T21,\nT1 -> .(T17, T21),\nT2 -> T22,\nX16 -> T22,\nX17 -> T23,\nT3 -> .(T17, T23),\nT18 -> T21,\nT19 -> T22,\nT20 -> T23"
            },
            {
                "from": 8,
                "to": 31,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 12,
                "to": 14,
                "label": "SUCCESS"
            },
            {
                "from": 30,
                "to": 5,
                "label": "INSTANCE with matching:\nT1 -> T21\nT2 -> T22\nT3 -> T23"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f5_in -> f5_out1
   f5_in -> U1(f5_in)
   U1(f5_out1) -> f5_out1

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1)) = x_1
   POL(f5_in) = 2
   POL(f5_out1) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f5_in -> f5_out1




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f5_in -> U1(f5_in)
   U1(f5_out1) -> f5_out1

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1)) = 2*x_1
   POL(f5_in) = 0
   POL(f5_out1) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U1(f5_out1) -> f5_out1




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f5_in -> U1(f5_in)

Q is empty.

----------------------------------------

(7) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f5_in -> U1(f5_in)

The set Q consists of the following terms:

   f5_in


----------------------------------------

(9) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F5_IN -> F5_IN

The TRS R consists of the following rules:

   f5_in -> U1(f5_in)

The set Q consists of the following terms:

   f5_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F5_IN -> F5_IN

R is empty.
The set Q consists of the following terms:

   f5_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f5_in


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F5_IN -> F5_IN

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(15) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(append ([]) L L)",
                null
            ],
            [
                "(append (. H L1) L2 (. H L3))",
                "(append L1 L2 L3)"
            ],
            [
                "(append1 ([]) L L)",
                null
            ],
            [
                "(append1 (. H L1) L2 (. H L3))",
                "(append1 L1 L2 L3)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "11": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "33": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(append T1 T2 T3)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(append T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(append T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(append T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "10": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "32": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T21 T22 T23)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 2,
                "label": "CASE"
            },
            {
                "from": 2,
                "to": 3,
                "label": "PARALLEL"
            },
            {
                "from": 2,
                "to": 4,
                "label": "PARALLEL"
            },
            {
                "from": 3,
                "to": 9,
                "label": "EVAL with clause\nappend([], X5, X5).\nand substitutionT1 -> [],\nT2 -> T8,\nX5 -> T8,\nT3 -> T8"
            },
            {
                "from": 3,
                "to": 10,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 4,
                "to": 32,
                "label": "EVAL with clause\nappend(.(X14, X15), X16, .(X14, X17)) :- append(X15, X16, X17).\nand substitutionX14 -> T17,\nX15 -> T21,\nT1 -> .(T17, T21),\nT2 -> T22,\nX16 -> T22,\nX17 -> T23,\nT3 -> .(T17, T23),\nT18 -> T21,\nT19 -> T22,\nT20 -> T23"
            },
            {
                "from": 4,
                "to": 33,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 9,
                "to": 11,
                "label": "SUCCESS"
            },
            {
                "from": 32,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T21\nT2 -> T22\nT3 -> T23"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(16)
Obligation:
Rules:
f32_in -> f1_in :|: TRUE
f1_out -> f32_out :|: TRUE
f33_out -> f4_out :|: TRUE
f4_in -> f32_in :|: TRUE
f4_in -> f33_in :|: TRUE
f32_out -> f4_out :|: TRUE
f2_in -> f4_in :|: TRUE
f4_out -> f2_out :|: TRUE
f2_in -> f3_in :|: TRUE
f3_out -> f2_out :|: TRUE
f1_in -> f2_in :|: TRUE
f2_out -> f1_out :|: TRUE
Start term: f1_in

----------------------------------------

(17) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f32_in -> f1_in :|: TRUE
f4_in -> f32_in :|: TRUE
f2_in -> f4_in :|: TRUE
f1_in -> f2_in :|: TRUE


----------------------------------------

(18)
Obligation:
Rules:
f32_in -> f1_in :|: TRUE
f4_in -> f32_in :|: TRUE
f2_in -> f4_in :|: TRUE
f1_in -> f2_in :|: TRUE

----------------------------------------

(19) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(20)
Obligation:
Rules:
f2_in -> f2_in :|: TRUE

----------------------------------------

(21) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(22)
Obligation:
Rules:
f2_in -> f2_in :|: TRUE

----------------------------------------

(23) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2_in -> f2_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(24)
Obligation:

Termination digraph:
Nodes:
(1) f2_in -> f2_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(25) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f2_in()
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(26)
Obligation:
Rules:
f2_in -> f2_in :|: TRUE

----------------------------------------

(27) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc) -> f(1) :|: pc = 1 && TRUE
Witness term starting non-terminating reduction: f(1)
----------------------------------------

(28)
NO

----------------------------------------

(29) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 15,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(append ([]) L L)",
                null
            ],
            [
                "(append (. H L1) L2 (. H L3))",
                "(append L1 L2 L3)"
            ],
            [
                "(append1 ([]) L L)",
                null
            ],
            [
                "(append1 (. H L1) L2 (. H L3))",
                "(append1 L1 L2 L3)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "22": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(append T14 T15 T16)"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(append T14 T15 T16)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "23": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(append T14 T15 T16)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "24": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(append T14 T15 T16)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "26": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "28": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T34 T35 T36)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "29": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "34": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T47 T48 T49)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "35": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "36": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 3,
                        "term": "(append T47 T48 T49)"
                    },
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(append T47 T48 T49)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "37": {
                "goal": [{
                    "clause": 0,
                    "scope": 3,
                    "term": "(append T47 T48 T49)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "16": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(append T1 T2 T3)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(append T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "38": {
                "goal": [{
                    "clause": 1,
                    "scope": 3,
                    "term": "(append T47 T48 T49)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(append T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "39": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "18": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(append T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(append T1 T2 T3)",
                        "(append ([]) X2 X2)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X2"],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(append T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "40": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "41": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "20": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T14 T15 T16)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "42": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T67 T68 T69)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "21": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "43": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 15,
                "to": 16,
                "label": "CASE"
            },
            {
                "from": 16,
                "to": 17,
                "label": "EVAL with clause\nappend([], X2, X2).\nand substitutionT1 -> [],\nT2 -> T5,\nX2 -> T5,\nT3 -> T5"
            },
            {
                "from": 16,
                "to": 18,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 17,
                "to": 19,
                "label": "SUCCESS"
            },
            {
                "from": 18,
                "to": 34,
                "label": "EVAL with clause\nappend(.(X34, X35), X36, .(X34, X37)) :- append(X35, X36, X37).\nand substitutionX34 -> T43,\nX35 -> T47,\nT1 -> .(T43, T47),\nT2 -> T48,\nX36 -> T48,\nX37 -> T49,\nT3 -> .(T43, T49),\nT44 -> T47,\nT45 -> T48,\nT46 -> T49"
            },
            {
                "from": 18,
                "to": 35,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 19,
                "to": 20,
                "label": "EVAL with clause\nappend(.(X7, X8), X9, .(X7, X10)) :- append(X8, X9, X10).\nand substitutionX7 -> T10,\nX8 -> T14,\nT1 -> .(T10, T14),\nT2 -> T15,\nX9 -> T15,\nX10 -> T16,\nT3 -> .(T10, T16),\nT11 -> T14,\nT12 -> T15,\nT13 -> T16"
            },
            {
                "from": 19,
                "to": 21,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 20,
                "to": 22,
                "label": "CASE"
            },
            {
                "from": 22,
                "to": 23,
                "label": "PARALLEL"
            },
            {
                "from": 22,
                "to": 24,
                "label": "PARALLEL"
            },
            {
                "from": 23,
                "to": 25,
                "label": "EVAL with clause\nappend([], X15, X15).\nand substitutionT14 -> [],\nT15 -> T21,\nX15 -> T21,\nT16 -> T21"
            },
            {
                "from": 23,
                "to": 26,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 24,
                "to": 28,
                "label": "EVAL with clause\nappend(.(X24, X25), X26, .(X24, X27)) :- append(X25, X26, X27).\nand substitutionX24 -> T30,\nX25 -> T34,\nT14 -> .(T30, T34),\nT15 -> T35,\nX26 -> T35,\nX27 -> T36,\nT16 -> .(T30, T36),\nT31 -> T34,\nT32 -> T35,\nT33 -> T36"
            },
            {
                "from": 24,
                "to": 29,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 25,
                "to": 27,
                "label": "SUCCESS"
            },
            {
                "from": 28,
                "to": 15,
                "label": "INSTANCE with matching:\nT1 -> T34\nT2 -> T35\nT3 -> T36"
            },
            {
                "from": 34,
                "to": 36,
                "label": "CASE"
            },
            {
                "from": 36,
                "to": 37,
                "label": "PARALLEL"
            },
            {
                "from": 36,
                "to": 38,
                "label": "PARALLEL"
            },
            {
                "from": 37,
                "to": 39,
                "label": "EVAL with clause\nappend([], X42, X42).\nand substitutionT47 -> [],\nT48 -> T54,\nX42 -> T54,\nT49 -> T54"
            },
            {
                "from": 37,
                "to": 40,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 38,
                "to": 42,
                "label": "EVAL with clause\nappend(.(X51, X52), X53, .(X51, X54)) :- append(X52, X53, X54).\nand substitutionX51 -> T63,\nX52 -> T67,\nT47 -> .(T63, T67),\nT48 -> T68,\nX53 -> T68,\nX54 -> T69,\nT49 -> .(T63, T69),\nT64 -> T67,\nT65 -> T68,\nT66 -> T69"
            },
            {
                "from": 38,
                "to": 43,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 39,
                "to": 41,
                "label": "SUCCESS"
            },
            {
                "from": 42,
                "to": 15,
                "label": "INSTANCE with matching:\nT1 -> T67\nT2 -> T68\nT3 -> T69"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(30)
Obligation:
Triples:

appendA(.(X1, .(X2, X3)), X4, .(X1, .(X2, X5))) :- appendA(X3, X4, X5).
appendA(.(X1, .(X2, X3)), X4, .(X1, .(X2, X5))) :- appendA(X3, X4, X5).

Clauses:

appendcA([], X1, X1).
appendcA(.(X1, []), X2, .(X1, X2)).
appendcA(.(X1, .(X2, X3)), X4, .(X1, .(X2, X5))) :- appendcA(X3, X4, X5).
appendcA(.(X1, []), X2, .(X1, X2)).
appendcA(.(X1, .(X2, X3)), X4, .(X1, .(X2, X5))) :- appendcA(X3, X4, X5).

Afs:

appendA(x1, x2, x3)  =  appendA


----------------------------------------

(31) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

appendA_in_3: (f,f,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   APPENDA_IN_AAA(.(X1, .(X2, X3)), X4, .(X1, .(X2, X5))) -> U1_AAA(X1, X2, X3, X4, X5, appendA_in_aaa(X3, X4, X5))
   APPENDA_IN_AAA(.(X1, .(X2, X3)), X4, .(X1, .(X2, X5))) -> APPENDA_IN_AAA(X3, X4, X5)

R is empty.
The argument filtering Pi contains the following mapping:
appendA_in_aaa(x1, x2, x3)  =  appendA_in_aaa

.(x1, x2)  =  .(x2)

APPENDA_IN_AAA(x1, x2, x3)  =  APPENDA_IN_AAA

U1_AAA(x1, x2, x3, x4, x5, x6)  =  U1_AAA(x6)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(32)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPENDA_IN_AAA(.(X1, .(X2, X3)), X4, .(X1, .(X2, X5))) -> U1_AAA(X1, X2, X3, X4, X5, appendA_in_aaa(X3, X4, X5))
   APPENDA_IN_AAA(.(X1, .(X2, X3)), X4, .(X1, .(X2, X5))) -> APPENDA_IN_AAA(X3, X4, X5)

R is empty.
The argument filtering Pi contains the following mapping:
appendA_in_aaa(x1, x2, x3)  =  appendA_in_aaa

.(x1, x2)  =  .(x2)

APPENDA_IN_AAA(x1, x2, x3)  =  APPENDA_IN_AAA

U1_AAA(x1, x2, x3, x4, x5, x6)  =  U1_AAA(x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(33) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(34)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPENDA_IN_AAA(.(X1, .(X2, X3)), X4, .(X1, .(X2, X5))) -> APPENDA_IN_AAA(X3, X4, X5)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPENDA_IN_AAA(x1, x2, x3)  =  APPENDA_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(35) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPENDA_IN_AAA -> APPENDA_IN_AAA

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(37) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

append_in_3: (f,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))

The argument filtering Pi contains the following mapping:
append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(38)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))

The argument filtering Pi contains the following mapping:
append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)



----------------------------------------

(39) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> U1_AAA(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAA(L1, L2, L3)

The TRS R consists of the following rules:

   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))

The argument filtering Pi contains the following mapping:
append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA

U1_AAA(x1, x2, x3, x4, x5)  =  U1_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(40)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> U1_AAA(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAA(L1, L2, L3)

The TRS R consists of the following rules:

   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))

The argument filtering Pi contains the following mapping:
append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA

U1_AAA(x1, x2, x3, x4, x5)  =  U1_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(41) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(42)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAA(L1, L2, L3)

The TRS R consists of the following rules:

   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))

The argument filtering Pi contains the following mapping:
append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(43) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(44)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAA(L1, L2, L3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(45) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA -> APPEND_IN_AAA

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(47) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

append_in_3: (f,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))

The argument filtering Pi contains the following mapping:
append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(48)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))

The argument filtering Pi contains the following mapping:
append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)



----------------------------------------

(49) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> U1_AAA(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAA(L1, L2, L3)

The TRS R consists of the following rules:

   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))

The argument filtering Pi contains the following mapping:
append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA

U1_AAA(x1, x2, x3, x4, x5)  =  U1_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(50)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> U1_AAA(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAA(L1, L2, L3)

The TRS R consists of the following rules:

   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))

The argument filtering Pi contains the following mapping:
append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA

U1_AAA(x1, x2, x3, x4, x5)  =  U1_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(51) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(52)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAA(L1, L2, L3)

The TRS R consists of the following rules:

   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))

The argument filtering Pi contains the following mapping:
append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(53) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(54)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAA(L1, L2, L3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(55) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA -> APPEND_IN_AAA

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.