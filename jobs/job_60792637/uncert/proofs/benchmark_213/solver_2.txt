YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ggREt.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

lessleaves(g,g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) UsableRulesReductionPairsProof [EQUIVALENT, 17 ms]
        (20) QDP
        (21) MRRProof [EQUIVALENT, 1 ms]
        (22) QDP
        (23) PisEmptyProof [EQUIVALENT, 0 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
Clauses:

append(nil, Y, Y).
append(cons(U, V), Y, cons(U, Z)) :- append(V, Y, Z).
lessleaves(nil, cons(W, Z)).
lessleaves(cons(U, V), cons(W, Z)) :- ','(append(U, V, U1), ','(append(W, Z, W1), lessleaves(U1, W1))).


Query: lessleaves(g,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

lessleaves_in_2: (b,b)

append_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   lessleaves_in_gg(nil, cons(W, Z)) -> lessleaves_out_gg(nil, cons(W, Z))
   lessleaves_in_gg(cons(U, V), cons(W, Z)) -> U2_gg(U, V, W, Z, append_in_gga(U, V, U1))
   append_in_gga(nil, Y, Y) -> append_out_gga(nil, Y, Y)
   append_in_gga(cons(U, V), Y, cons(U, Z)) -> U1_gga(U, V, Y, Z, append_in_gga(V, Y, Z))
   U1_gga(U, V, Y, Z, append_out_gga(V, Y, Z)) -> append_out_gga(cons(U, V), Y, cons(U, Z))
   U2_gg(U, V, W, Z, append_out_gga(U, V, U1)) -> U3_gg(U, V, W, Z, U1, append_in_gga(W, Z, W1))
   U3_gg(U, V, W, Z, U1, append_out_gga(W, Z, W1)) -> U4_gg(U, V, W, Z, lessleaves_in_gg(U1, W1))
   U4_gg(U, V, W, Z, lessleaves_out_gg(U1, W1)) -> lessleaves_out_gg(cons(U, V), cons(W, Z))

The argument filtering Pi contains the following mapping:
lessleaves_in_gg(x1, x2)  =  lessleaves_in_gg(x1, x2)

nil  =  nil

cons(x1, x2)  =  cons(x1, x2)

lessleaves_out_gg(x1, x2)  =  lessleaves_out_gg

U2_gg(x1, x2, x3, x4, x5)  =  U2_gg(x3, x4, x5)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x1, x5)

U3_gg(x1, x2, x3, x4, x5, x6)  =  U3_gg(x5, x6)

U4_gg(x1, x2, x3, x4, x5)  =  U4_gg(x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   lessleaves_in_gg(nil, cons(W, Z)) -> lessleaves_out_gg(nil, cons(W, Z))
   lessleaves_in_gg(cons(U, V), cons(W, Z)) -> U2_gg(U, V, W, Z, append_in_gga(U, V, U1))
   append_in_gga(nil, Y, Y) -> append_out_gga(nil, Y, Y)
   append_in_gga(cons(U, V), Y, cons(U, Z)) -> U1_gga(U, V, Y, Z, append_in_gga(V, Y, Z))
   U1_gga(U, V, Y, Z, append_out_gga(V, Y, Z)) -> append_out_gga(cons(U, V), Y, cons(U, Z))
   U2_gg(U, V, W, Z, append_out_gga(U, V, U1)) -> U3_gg(U, V, W, Z, U1, append_in_gga(W, Z, W1))
   U3_gg(U, V, W, Z, U1, append_out_gga(W, Z, W1)) -> U4_gg(U, V, W, Z, lessleaves_in_gg(U1, W1))
   U4_gg(U, V, W, Z, lessleaves_out_gg(U1, W1)) -> lessleaves_out_gg(cons(U, V), cons(W, Z))

The argument filtering Pi contains the following mapping:
lessleaves_in_gg(x1, x2)  =  lessleaves_in_gg(x1, x2)

nil  =  nil

cons(x1, x2)  =  cons(x1, x2)

lessleaves_out_gg(x1, x2)  =  lessleaves_out_gg

U2_gg(x1, x2, x3, x4, x5)  =  U2_gg(x3, x4, x5)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x1, x5)

U3_gg(x1, x2, x3, x4, x5, x6)  =  U3_gg(x5, x6)

U4_gg(x1, x2, x3, x4, x5)  =  U4_gg(x5)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   LESSLEAVES_IN_GG(cons(U, V), cons(W, Z)) -> U2_GG(U, V, W, Z, append_in_gga(U, V, U1))
   LESSLEAVES_IN_GG(cons(U, V), cons(W, Z)) -> APPEND_IN_GGA(U, V, U1)
   APPEND_IN_GGA(cons(U, V), Y, cons(U, Z)) -> U1_GGA(U, V, Y, Z, append_in_gga(V, Y, Z))
   APPEND_IN_GGA(cons(U, V), Y, cons(U, Z)) -> APPEND_IN_GGA(V, Y, Z)
   U2_GG(U, V, W, Z, append_out_gga(U, V, U1)) -> U3_GG(U, V, W, Z, U1, append_in_gga(W, Z, W1))
   U2_GG(U, V, W, Z, append_out_gga(U, V, U1)) -> APPEND_IN_GGA(W, Z, W1)
   U3_GG(U, V, W, Z, U1, append_out_gga(W, Z, W1)) -> U4_GG(U, V, W, Z, lessleaves_in_gg(U1, W1))
   U3_GG(U, V, W, Z, U1, append_out_gga(W, Z, W1)) -> LESSLEAVES_IN_GG(U1, W1)

The TRS R consists of the following rules:

   lessleaves_in_gg(nil, cons(W, Z)) -> lessleaves_out_gg(nil, cons(W, Z))
   lessleaves_in_gg(cons(U, V), cons(W, Z)) -> U2_gg(U, V, W, Z, append_in_gga(U, V, U1))
   append_in_gga(nil, Y, Y) -> append_out_gga(nil, Y, Y)
   append_in_gga(cons(U, V), Y, cons(U, Z)) -> U1_gga(U, V, Y, Z, append_in_gga(V, Y, Z))
   U1_gga(U, V, Y, Z, append_out_gga(V, Y, Z)) -> append_out_gga(cons(U, V), Y, cons(U, Z))
   U2_gg(U, V, W, Z, append_out_gga(U, V, U1)) -> U3_gg(U, V, W, Z, U1, append_in_gga(W, Z, W1))
   U3_gg(U, V, W, Z, U1, append_out_gga(W, Z, W1)) -> U4_gg(U, V, W, Z, lessleaves_in_gg(U1, W1))
   U4_gg(U, V, W, Z, lessleaves_out_gg(U1, W1)) -> lessleaves_out_gg(cons(U, V), cons(W, Z))

The argument filtering Pi contains the following mapping:
lessleaves_in_gg(x1, x2)  =  lessleaves_in_gg(x1, x2)

nil  =  nil

cons(x1, x2)  =  cons(x1, x2)

lessleaves_out_gg(x1, x2)  =  lessleaves_out_gg

U2_gg(x1, x2, x3, x4, x5)  =  U2_gg(x3, x4, x5)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x1, x5)

U3_gg(x1, x2, x3, x4, x5, x6)  =  U3_gg(x5, x6)

U4_gg(x1, x2, x3, x4, x5)  =  U4_gg(x5)

LESSLEAVES_IN_GG(x1, x2)  =  LESSLEAVES_IN_GG(x1, x2)

U2_GG(x1, x2, x3, x4, x5)  =  U2_GG(x3, x4, x5)

APPEND_IN_GGA(x1, x2, x3)  =  APPEND_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5)  =  U1_GGA(x1, x5)

U3_GG(x1, x2, x3, x4, x5, x6)  =  U3_GG(x5, x6)

U4_GG(x1, x2, x3, x4, x5)  =  U4_GG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LESSLEAVES_IN_GG(cons(U, V), cons(W, Z)) -> U2_GG(U, V, W, Z, append_in_gga(U, V, U1))
   LESSLEAVES_IN_GG(cons(U, V), cons(W, Z)) -> APPEND_IN_GGA(U, V, U1)
   APPEND_IN_GGA(cons(U, V), Y, cons(U, Z)) -> U1_GGA(U, V, Y, Z, append_in_gga(V, Y, Z))
   APPEND_IN_GGA(cons(U, V), Y, cons(U, Z)) -> APPEND_IN_GGA(V, Y, Z)
   U2_GG(U, V, W, Z, append_out_gga(U, V, U1)) -> U3_GG(U, V, W, Z, U1, append_in_gga(W, Z, W1))
   U2_GG(U, V, W, Z, append_out_gga(U, V, U1)) -> APPEND_IN_GGA(W, Z, W1)
   U3_GG(U, V, W, Z, U1, append_out_gga(W, Z, W1)) -> U4_GG(U, V, W, Z, lessleaves_in_gg(U1, W1))
   U3_GG(U, V, W, Z, U1, append_out_gga(W, Z, W1)) -> LESSLEAVES_IN_GG(U1, W1)

The TRS R consists of the following rules:

   lessleaves_in_gg(nil, cons(W, Z)) -> lessleaves_out_gg(nil, cons(W, Z))
   lessleaves_in_gg(cons(U, V), cons(W, Z)) -> U2_gg(U, V, W, Z, append_in_gga(U, V, U1))
   append_in_gga(nil, Y, Y) -> append_out_gga(nil, Y, Y)
   append_in_gga(cons(U, V), Y, cons(U, Z)) -> U1_gga(U, V, Y, Z, append_in_gga(V, Y, Z))
   U1_gga(U, V, Y, Z, append_out_gga(V, Y, Z)) -> append_out_gga(cons(U, V), Y, cons(U, Z))
   U2_gg(U, V, W, Z, append_out_gga(U, V, U1)) -> U3_gg(U, V, W, Z, U1, append_in_gga(W, Z, W1))
   U3_gg(U, V, W, Z, U1, append_out_gga(W, Z, W1)) -> U4_gg(U, V, W, Z, lessleaves_in_gg(U1, W1))
   U4_gg(U, V, W, Z, lessleaves_out_gg(U1, W1)) -> lessleaves_out_gg(cons(U, V), cons(W, Z))

The argument filtering Pi contains the following mapping:
lessleaves_in_gg(x1, x2)  =  lessleaves_in_gg(x1, x2)

nil  =  nil

cons(x1, x2)  =  cons(x1, x2)

lessleaves_out_gg(x1, x2)  =  lessleaves_out_gg

U2_gg(x1, x2, x3, x4, x5)  =  U2_gg(x3, x4, x5)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x1, x5)

U3_gg(x1, x2, x3, x4, x5, x6)  =  U3_gg(x5, x6)

U4_gg(x1, x2, x3, x4, x5)  =  U4_gg(x5)

LESSLEAVES_IN_GG(x1, x2)  =  LESSLEAVES_IN_GG(x1, x2)

U2_GG(x1, x2, x3, x4, x5)  =  U2_GG(x3, x4, x5)

APPEND_IN_GGA(x1, x2, x3)  =  APPEND_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5)  =  U1_GGA(x1, x5)

U3_GG(x1, x2, x3, x4, x5, x6)  =  U3_GG(x5, x6)

U4_GG(x1, x2, x3, x4, x5)  =  U4_GG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_GGA(cons(U, V), Y, cons(U, Z)) -> APPEND_IN_GGA(V, Y, Z)

The TRS R consists of the following rules:

   lessleaves_in_gg(nil, cons(W, Z)) -> lessleaves_out_gg(nil, cons(W, Z))
   lessleaves_in_gg(cons(U, V), cons(W, Z)) -> U2_gg(U, V, W, Z, append_in_gga(U, V, U1))
   append_in_gga(nil, Y, Y) -> append_out_gga(nil, Y, Y)
   append_in_gga(cons(U, V), Y, cons(U, Z)) -> U1_gga(U, V, Y, Z, append_in_gga(V, Y, Z))
   U1_gga(U, V, Y, Z, append_out_gga(V, Y, Z)) -> append_out_gga(cons(U, V), Y, cons(U, Z))
   U2_gg(U, V, W, Z, append_out_gga(U, V, U1)) -> U3_gg(U, V, W, Z, U1, append_in_gga(W, Z, W1))
   U3_gg(U, V, W, Z, U1, append_out_gga(W, Z, W1)) -> U4_gg(U, V, W, Z, lessleaves_in_gg(U1, W1))
   U4_gg(U, V, W, Z, lessleaves_out_gg(U1, W1)) -> lessleaves_out_gg(cons(U, V), cons(W, Z))

The argument filtering Pi contains the following mapping:
lessleaves_in_gg(x1, x2)  =  lessleaves_in_gg(x1, x2)

nil  =  nil

cons(x1, x2)  =  cons(x1, x2)

lessleaves_out_gg(x1, x2)  =  lessleaves_out_gg

U2_gg(x1, x2, x3, x4, x5)  =  U2_gg(x3, x4, x5)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x1, x5)

U3_gg(x1, x2, x3, x4, x5, x6)  =  U3_gg(x5, x6)

U4_gg(x1, x2, x3, x4, x5)  =  U4_gg(x5)

APPEND_IN_GGA(x1, x2, x3)  =  APPEND_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_GGA(cons(U, V), Y, cons(U, Z)) -> APPEND_IN_GGA(V, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
cons(x1, x2)  =  cons(x1, x2)

APPEND_IN_GGA(x1, x2, x3)  =  APPEND_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND_IN_GGA(cons(U, V), Y) -> APPEND_IN_GGA(V, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPEND_IN_GGA(cons(U, V), Y) -> APPEND_IN_GGA(V, Y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GG(U, V, W, Z, append_out_gga(U, V, U1)) -> U3_GG(U, V, W, Z, U1, append_in_gga(W, Z, W1))
   U3_GG(U, V, W, Z, U1, append_out_gga(W, Z, W1)) -> LESSLEAVES_IN_GG(U1, W1)
   LESSLEAVES_IN_GG(cons(U, V), cons(W, Z)) -> U2_GG(U, V, W, Z, append_in_gga(U, V, U1))

The TRS R consists of the following rules:

   lessleaves_in_gg(nil, cons(W, Z)) -> lessleaves_out_gg(nil, cons(W, Z))
   lessleaves_in_gg(cons(U, V), cons(W, Z)) -> U2_gg(U, V, W, Z, append_in_gga(U, V, U1))
   append_in_gga(nil, Y, Y) -> append_out_gga(nil, Y, Y)
   append_in_gga(cons(U, V), Y, cons(U, Z)) -> U1_gga(U, V, Y, Z, append_in_gga(V, Y, Z))
   U1_gga(U, V, Y, Z, append_out_gga(V, Y, Z)) -> append_out_gga(cons(U, V), Y, cons(U, Z))
   U2_gg(U, V, W, Z, append_out_gga(U, V, U1)) -> U3_gg(U, V, W, Z, U1, append_in_gga(W, Z, W1))
   U3_gg(U, V, W, Z, U1, append_out_gga(W, Z, W1)) -> U4_gg(U, V, W, Z, lessleaves_in_gg(U1, W1))
   U4_gg(U, V, W, Z, lessleaves_out_gg(U1, W1)) -> lessleaves_out_gg(cons(U, V), cons(W, Z))

The argument filtering Pi contains the following mapping:
lessleaves_in_gg(x1, x2)  =  lessleaves_in_gg(x1, x2)

nil  =  nil

cons(x1, x2)  =  cons(x1, x2)

lessleaves_out_gg(x1, x2)  =  lessleaves_out_gg

U2_gg(x1, x2, x3, x4, x5)  =  U2_gg(x3, x4, x5)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x1, x5)

U3_gg(x1, x2, x3, x4, x5, x6)  =  U3_gg(x5, x6)

U4_gg(x1, x2, x3, x4, x5)  =  U4_gg(x5)

LESSLEAVES_IN_GG(x1, x2)  =  LESSLEAVES_IN_GG(x1, x2)

U2_GG(x1, x2, x3, x4, x5)  =  U2_GG(x3, x4, x5)

U3_GG(x1, x2, x3, x4, x5, x6)  =  U3_GG(x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GG(U, V, W, Z, append_out_gga(U, V, U1)) -> U3_GG(U, V, W, Z, U1, append_in_gga(W, Z, W1))
   U3_GG(U, V, W, Z, U1, append_out_gga(W, Z, W1)) -> LESSLEAVES_IN_GG(U1, W1)
   LESSLEAVES_IN_GG(cons(U, V), cons(W, Z)) -> U2_GG(U, V, W, Z, append_in_gga(U, V, U1))

The TRS R consists of the following rules:

   append_in_gga(nil, Y, Y) -> append_out_gga(nil, Y, Y)
   append_in_gga(cons(U, V), Y, cons(U, Z)) -> U1_gga(U, V, Y, Z, append_in_gga(V, Y, Z))
   U1_gga(U, V, Y, Z, append_out_gga(V, Y, Z)) -> append_out_gga(cons(U, V), Y, cons(U, Z))

The argument filtering Pi contains the following mapping:
nil  =  nil

cons(x1, x2)  =  cons(x1, x2)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x1, x5)

LESSLEAVES_IN_GG(x1, x2)  =  LESSLEAVES_IN_GG(x1, x2)

U2_GG(x1, x2, x3, x4, x5)  =  U2_GG(x3, x4, x5)

U3_GG(x1, x2, x3, x4, x5, x6)  =  U3_GG(x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GG(W, Z, append_out_gga(U1)) -> U3_GG(U1, append_in_gga(W, Z))
   U3_GG(U1, append_out_gga(W1)) -> LESSLEAVES_IN_GG(U1, W1)
   LESSLEAVES_IN_GG(cons(U, V), cons(W, Z)) -> U2_GG(W, Z, append_in_gga(U, V))

The TRS R consists of the following rules:

   append_in_gga(nil, Y) -> append_out_gga(Y)
   append_in_gga(cons(U, V), Y) -> U1_gga(U, append_in_gga(V, Y))
   U1_gga(U, append_out_gga(Z)) -> append_out_gga(cons(U, Z))

The set Q consists of the following terms:

   append_in_gga(x0, x1)
   U1_gga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   append_in_gga(nil, Y) -> append_out_gga(Y)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(LESSLEAVES_IN_GG(x_1, x_2)) = x_1 + x_2
   POL(U1_gga(x_1, x_2)) = x_1 + x_2
   POL(U2_GG(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U3_GG(x_1, x_2)) = x_1 + x_2
   POL(append_in_gga(x_1, x_2)) = x_1 + x_2
   POL(append_out_gga(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(nil) = 0


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GG(W, Z, append_out_gga(U1)) -> U3_GG(U1, append_in_gga(W, Z))
   U3_GG(U1, append_out_gga(W1)) -> LESSLEAVES_IN_GG(U1, W1)
   LESSLEAVES_IN_GG(cons(U, V), cons(W, Z)) -> U2_GG(W, Z, append_in_gga(U, V))

The TRS R consists of the following rules:

   append_in_gga(cons(U, V), Y) -> U1_gga(U, append_in_gga(V, Y))
   U1_gga(U, append_out_gga(Z)) -> append_out_gga(cons(U, Z))

The set Q consists of the following terms:

   append_in_gga(x0, x1)
   U1_gga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U2_GG(W, Z, append_out_gga(U1)) -> U3_GG(U1, append_in_gga(W, Z))
   U3_GG(U1, append_out_gga(W1)) -> LESSLEAVES_IN_GG(U1, W1)
   LESSLEAVES_IN_GG(cons(U, V), cons(W, Z)) -> U2_GG(W, Z, append_in_gga(U, V))

Strictly oriented rules of the TRS R:

   append_in_gga(cons(U, V), Y) -> U1_gga(U, append_in_gga(V, Y))
   U1_gga(U, append_out_gga(Z)) -> append_out_gga(cons(U, Z))

Used ordering: Knuth-Bendix order [KBO] with precedence:append_in_gga_2 > cons_2 > U2_GG_3 > U3_GG_2 > LESSLEAVES_IN_GG_2 > U1_gga_2 > append_out_gga_1

and weight map:

   append_out_gga_1=1
   cons_2=0
   U1_gga_2=0
   U2_GG_3=0
   U3_GG_2=1
   append_in_gga_2=0
   LESSLEAVES_IN_GG_2=2

The variable weight is 1

----------------------------------------

(22)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   append_in_gga(x0, x1)
   U1_gga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(24)
YES
