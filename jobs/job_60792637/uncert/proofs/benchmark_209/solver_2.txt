YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/mnMXm.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

f(g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(2) TRIPLES
(3) TriplesToPiDPProof [SOUND, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) PiDPToQDPProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
Clauses:

f(X) :- g(s(s(s(X)))).
f(s(X)) :- f(X).
g(s(s(s(s(X))))) :- f(X).


Query: f(g)
----------------------------------------

(1) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(f X)",
                "(g (s (s (s X))))"
            ],
            [
                "(f (s X))",
                "(f X)"
            ],
            [
                "(g (s (s (s (s X)))))",
                "(f X)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "12": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(g (s (s (s T3))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T3"],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(f T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T3"],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(f T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(f T8)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(f T1)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(f T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(f T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T3"],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(g (s (s (s T3))))"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(f T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T3"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "20": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(f T12)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": [],
                    "exprvars": []
                }
            },
            "10": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(g (s (s (s T3))))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(f T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T3"],
                    "free": [],
                    "exprvars": []
                }
            },
            "21": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 9,
                "label": "ONLY EVAL with clause\nf(X2) :- g(s(s(s(X2)))).\nand substitutionT1 -> T3,\nX2 -> T3"
            },
            {
                "from": 9,
                "to": 10,
                "label": "CASE"
            },
            {
                "from": 10,
                "to": 12,
                "label": "PARALLEL"
            },
            {
                "from": 10,
                "to": 13,
                "label": "PARALLEL"
            },
            {
                "from": 12,
                "to": 14,
                "label": "EVAL with clause\ng(s(s(s(s(X7))))) :- f(X7).\nand substitutionX7 -> T8,\nT3 -> s(T8)"
            },
            {
                "from": 12,
                "to": 15,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 13,
                "to": 17,
                "label": "FAILURE"
            },
            {
                "from": 14,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T8"
            },
            {
                "from": 17,
                "to": 20,
                "label": "EVAL with clause\nf(s(X11)) :- f(X11).\nand substitutionX11 -> T12,\nT3 -> s(T12)"
            },
            {
                "from": 17,
                "to": 21,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 20,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T12"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Triples:

fA(s(X1)) :- fA(X1).
fA(s(X1)) :- fA(X1).

Clauses:

fcA(s(X1)) :- fcA(X1).
fcA(s(X1)) :- fcA(X1).

Afs:

fA(x1)  =  fA(x1)


----------------------------------------

(3) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

fA_in_1: (b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   FA_IN_G(s(X1)) -> U1_G(X1, fA_in_g(X1))
   FA_IN_G(s(X1)) -> FA_IN_G(X1)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FA_IN_G(s(X1)) -> U1_G(X1, fA_in_g(X1))
   FA_IN_G(s(X1)) -> FA_IN_G(X1)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FA_IN_G(s(X1)) -> FA_IN_G(X1)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FA_IN_G(s(X1)) -> FA_IN_G(X1)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*FA_IN_G(s(X1)) -> FA_IN_G(X1)
The graph contains the following edges 1 > 1


----------------------------------------

(10)
YES
