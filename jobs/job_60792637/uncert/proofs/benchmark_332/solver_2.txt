YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/bRhrb.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

flat(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) PiDPToQDPProof [SOUND, 6 ms]
(10) QDP
(11) UsableRulesReductionPairsProof [EQUIVALENT, 14 ms]
(12) QDP
(13) PisEmptyProof [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
Clauses:

flat(niltree, nil).
flat(tree(X, niltree, T), cons(X, Xs)) :- flat(T, Xs).
flat(tree(X, tree(Y, T1, T2), T3), Xs) :- flat(tree(Y, T1, tree(X, T2, T3)), Xs).


Query: flat(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

flat_in_2: (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   flat_in_ga(niltree, nil) -> flat_out_ga(niltree, nil)
   flat_in_ga(tree(X, niltree, T), cons(X, Xs)) -> U1_ga(X, T, Xs, flat_in_ga(T, Xs))
   flat_in_ga(tree(X, tree(Y, T1, T2), T3), Xs) -> U2_ga(X, Y, T1, T2, T3, Xs, flat_in_ga(tree(Y, T1, tree(X, T2, T3)), Xs))
   U2_ga(X, Y, T1, T2, T3, Xs, flat_out_ga(tree(Y, T1, tree(X, T2, T3)), Xs)) -> flat_out_ga(tree(X, tree(Y, T1, T2), T3), Xs)
   U1_ga(X, T, Xs, flat_out_ga(T, Xs)) -> flat_out_ga(tree(X, niltree, T), cons(X, Xs))

The argument filtering Pi contains the following mapping:
flat_in_ga(x1, x2)  =  flat_in_ga(x1)

niltree  =  niltree

flat_out_ga(x1, x2)  =  flat_out_ga(x1, x2)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

U2_ga(x1, x2, x3, x4, x5, x6, x7)  =  U2_ga(x1, x2, x3, x4, x5, x7)

cons(x1, x2)  =  cons(x1, x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   flat_in_ga(niltree, nil) -> flat_out_ga(niltree, nil)
   flat_in_ga(tree(X, niltree, T), cons(X, Xs)) -> U1_ga(X, T, Xs, flat_in_ga(T, Xs))
   flat_in_ga(tree(X, tree(Y, T1, T2), T3), Xs) -> U2_ga(X, Y, T1, T2, T3, Xs, flat_in_ga(tree(Y, T1, tree(X, T2, T3)), Xs))
   U2_ga(X, Y, T1, T2, T3, Xs, flat_out_ga(tree(Y, T1, tree(X, T2, T3)), Xs)) -> flat_out_ga(tree(X, tree(Y, T1, T2), T3), Xs)
   U1_ga(X, T, Xs, flat_out_ga(T, Xs)) -> flat_out_ga(tree(X, niltree, T), cons(X, Xs))

The argument filtering Pi contains the following mapping:
flat_in_ga(x1, x2)  =  flat_in_ga(x1)

niltree  =  niltree

flat_out_ga(x1, x2)  =  flat_out_ga(x1, x2)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

U2_ga(x1, x2, x3, x4, x5, x6, x7)  =  U2_ga(x1, x2, x3, x4, x5, x7)

cons(x1, x2)  =  cons(x1, x2)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   FLAT_IN_GA(tree(X, niltree, T), cons(X, Xs)) -> U1_GA(X, T, Xs, flat_in_ga(T, Xs))
   FLAT_IN_GA(tree(X, niltree, T), cons(X, Xs)) -> FLAT_IN_GA(T, Xs)
   FLAT_IN_GA(tree(X, tree(Y, T1, T2), T3), Xs) -> U2_GA(X, Y, T1, T2, T3, Xs, flat_in_ga(tree(Y, T1, tree(X, T2, T3)), Xs))
   FLAT_IN_GA(tree(X, tree(Y, T1, T2), T3), Xs) -> FLAT_IN_GA(tree(Y, T1, tree(X, T2, T3)), Xs)

The TRS R consists of the following rules:

   flat_in_ga(niltree, nil) -> flat_out_ga(niltree, nil)
   flat_in_ga(tree(X, niltree, T), cons(X, Xs)) -> U1_ga(X, T, Xs, flat_in_ga(T, Xs))
   flat_in_ga(tree(X, tree(Y, T1, T2), T3), Xs) -> U2_ga(X, Y, T1, T2, T3, Xs, flat_in_ga(tree(Y, T1, tree(X, T2, T3)), Xs))
   U2_ga(X, Y, T1, T2, T3, Xs, flat_out_ga(tree(Y, T1, tree(X, T2, T3)), Xs)) -> flat_out_ga(tree(X, tree(Y, T1, T2), T3), Xs)
   U1_ga(X, T, Xs, flat_out_ga(T, Xs)) -> flat_out_ga(tree(X, niltree, T), cons(X, Xs))

The argument filtering Pi contains the following mapping:
flat_in_ga(x1, x2)  =  flat_in_ga(x1)

niltree  =  niltree

flat_out_ga(x1, x2)  =  flat_out_ga(x1, x2)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

U2_ga(x1, x2, x3, x4, x5, x6, x7)  =  U2_ga(x1, x2, x3, x4, x5, x7)

cons(x1, x2)  =  cons(x1, x2)

FLAT_IN_GA(x1, x2)  =  FLAT_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x2, x4)

U2_GA(x1, x2, x3, x4, x5, x6, x7)  =  U2_GA(x1, x2, x3, x4, x5, x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FLAT_IN_GA(tree(X, niltree, T), cons(X, Xs)) -> U1_GA(X, T, Xs, flat_in_ga(T, Xs))
   FLAT_IN_GA(tree(X, niltree, T), cons(X, Xs)) -> FLAT_IN_GA(T, Xs)
   FLAT_IN_GA(tree(X, tree(Y, T1, T2), T3), Xs) -> U2_GA(X, Y, T1, T2, T3, Xs, flat_in_ga(tree(Y, T1, tree(X, T2, T3)), Xs))
   FLAT_IN_GA(tree(X, tree(Y, T1, T2), T3), Xs) -> FLAT_IN_GA(tree(Y, T1, tree(X, T2, T3)), Xs)

The TRS R consists of the following rules:

   flat_in_ga(niltree, nil) -> flat_out_ga(niltree, nil)
   flat_in_ga(tree(X, niltree, T), cons(X, Xs)) -> U1_ga(X, T, Xs, flat_in_ga(T, Xs))
   flat_in_ga(tree(X, tree(Y, T1, T2), T3), Xs) -> U2_ga(X, Y, T1, T2, T3, Xs, flat_in_ga(tree(Y, T1, tree(X, T2, T3)), Xs))
   U2_ga(X, Y, T1, T2, T3, Xs, flat_out_ga(tree(Y, T1, tree(X, T2, T3)), Xs)) -> flat_out_ga(tree(X, tree(Y, T1, T2), T3), Xs)
   U1_ga(X, T, Xs, flat_out_ga(T, Xs)) -> flat_out_ga(tree(X, niltree, T), cons(X, Xs))

The argument filtering Pi contains the following mapping:
flat_in_ga(x1, x2)  =  flat_in_ga(x1)

niltree  =  niltree

flat_out_ga(x1, x2)  =  flat_out_ga(x1, x2)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

U2_ga(x1, x2, x3, x4, x5, x6, x7)  =  U2_ga(x1, x2, x3, x4, x5, x7)

cons(x1, x2)  =  cons(x1, x2)

FLAT_IN_GA(x1, x2)  =  FLAT_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x2, x4)

U2_GA(x1, x2, x3, x4, x5, x6, x7)  =  U2_GA(x1, x2, x3, x4, x5, x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FLAT_IN_GA(tree(X, tree(Y, T1, T2), T3), Xs) -> FLAT_IN_GA(tree(Y, T1, tree(X, T2, T3)), Xs)
   FLAT_IN_GA(tree(X, niltree, T), cons(X, Xs)) -> FLAT_IN_GA(T, Xs)

The TRS R consists of the following rules:

   flat_in_ga(niltree, nil) -> flat_out_ga(niltree, nil)
   flat_in_ga(tree(X, niltree, T), cons(X, Xs)) -> U1_ga(X, T, Xs, flat_in_ga(T, Xs))
   flat_in_ga(tree(X, tree(Y, T1, T2), T3), Xs) -> U2_ga(X, Y, T1, T2, T3, Xs, flat_in_ga(tree(Y, T1, tree(X, T2, T3)), Xs))
   U2_ga(X, Y, T1, T2, T3, Xs, flat_out_ga(tree(Y, T1, tree(X, T2, T3)), Xs)) -> flat_out_ga(tree(X, tree(Y, T1, T2), T3), Xs)
   U1_ga(X, T, Xs, flat_out_ga(T, Xs)) -> flat_out_ga(tree(X, niltree, T), cons(X, Xs))

The argument filtering Pi contains the following mapping:
flat_in_ga(x1, x2)  =  flat_in_ga(x1)

niltree  =  niltree

flat_out_ga(x1, x2)  =  flat_out_ga(x1, x2)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

U2_ga(x1, x2, x3, x4, x5, x6, x7)  =  U2_ga(x1, x2, x3, x4, x5, x7)

cons(x1, x2)  =  cons(x1, x2)

FLAT_IN_GA(x1, x2)  =  FLAT_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FLAT_IN_GA(tree(X, tree(Y, T1, T2), T3), Xs) -> FLAT_IN_GA(tree(Y, T1, tree(X, T2, T3)), Xs)
   FLAT_IN_GA(tree(X, niltree, T), cons(X, Xs)) -> FLAT_IN_GA(T, Xs)

R is empty.
The argument filtering Pi contains the following mapping:
niltree  =  niltree

tree(x1, x2, x3)  =  tree(x1, x2, x3)

cons(x1, x2)  =  cons(x1, x2)

FLAT_IN_GA(x1, x2)  =  FLAT_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FLAT_IN_GA(tree(X, tree(Y, T1, T2), T3)) -> FLAT_IN_GA(tree(Y, T1, tree(X, T2, T3)))
   FLAT_IN_GA(tree(X, niltree, T)) -> FLAT_IN_GA(T)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   FLAT_IN_GA(tree(X, tree(Y, T1, T2), T3)) -> FLAT_IN_GA(tree(Y, T1, tree(X, T2, T3)))
   FLAT_IN_GA(tree(X, niltree, T)) -> FLAT_IN_GA(T)
No rules are removed from R.

Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(FLAT_IN_GA(x_1)) = 2*x_1
   POL(niltree) = 0
   POL(tree(x_1, x_2, x_3)) = 1 + 2*x_1 + 2*x_2 + x_3


----------------------------------------

(12)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(14)
YES
