MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/rKkJz.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

color_map(a,g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) AND
        (7) PiDP
            (8) UsableRulesProof [EQUIVALENT, 0 ms]
            (9) PiDP
            (10) PiDPToQDPProof [SOUND, 2 ms]
            (11) QDP
            (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (13) YES
        (14) PiDP
            (15) UsableRulesProof [EQUIVALENT, 0 ms]
            (16) PiDP
            (17) PiDPToQDPProof [SOUND, 0 ms]
            (18) QDP
            (19) TransformationProof [SOUND, 0 ms]
            (20) QDP
            (21) TransformationProof [EQUIVALENT, 0 ms]
            (22) QDP
            (23) NonTerminationLoopProof [COMPLETE, 0 ms]
            (24) NO
        (25) PiDP
            (26) UsableRulesProof [EQUIVALENT, 0 ms]
            (27) PiDP
            (28) PiDPToQDPProof [SOUND, 0 ms]
            (29) QDP
            (30) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (31) YES
        (32) PiDP
            (33) UsableRulesProof [EQUIVALENT, 0 ms]
            (34) PiDP
            (35) PiDPToQDPProof [SOUND, 0 ms]
            (36) QDP
(37) PrologToPiTRSProof [SOUND, 0 ms]
(38) PiTRS
    (39) DependencyPairsProof [EQUIVALENT, 0 ms]
    (40) PiDP
    (41) DependencyGraphProof [EQUIVALENT, 0 ms]
    (42) AND
        (43) PiDP
            (44) UsableRulesProof [EQUIVALENT, 0 ms]
            (45) PiDP
            (46) PiDPToQDPProof [SOUND, 0 ms]
            (47) QDP
            (48) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (49) YES
        (50) PiDP
            (51) UsableRulesProof [EQUIVALENT, 0 ms]
            (52) PiDP
            (53) PiDPToQDPProof [SOUND, 0 ms]
            (54) QDP
            (55) TransformationProof [SOUND, 0 ms]
            (56) QDP
            (57) TransformationProof [EQUIVALENT, 0 ms]
            (58) QDP
        (59) PiDP
            (60) UsableRulesProof [EQUIVALENT, 0 ms]
            (61) PiDP
        (62) PiDP
            (63) UsableRulesProof [EQUIVALENT, 0 ms]
            (64) PiDP
(65) PrologToTRSTransformerProof [SOUND, 0 ms]
(66) QTRS
    (67) DependencyPairsProof [EQUIVALENT, 0 ms]
    (68) QDP
    (69) DependencyGraphProof [EQUIVALENT, 0 ms]
    (70) AND
        (71) QDP
            (72) UsableRulesProof [EQUIVALENT, 0 ms]
            (73) QDP
            (74) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (75) YES
        (76) QDP
            (77) NonTerminationLoopProof [COMPLETE, 0 ms]
            (78) NO
        (79) QDP
            (80) UsableRulesProof [EQUIVALENT, 0 ms]
            (81) QDP
            (82) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (83) YES
        (84) QDP
            (85) NonTerminationLoopProof [COMPLETE, 0 ms]
            (86) NO
(87) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(88) TRIPLES
    (89) TriplesToPiDPProof [SOUND, 1 ms]
    (90) PiDP
    (91) DependencyGraphProof [EQUIVALENT, 0 ms]
    (92) AND
        (93) PiDP
            (94) UsableRulesProof [EQUIVALENT, 0 ms]
            (95) PiDP
            (96) PiDPToQDPProof [SOUND, 0 ms]
            (97) QDP
            (98) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (99) YES
        (100) PiDP
            (101) UsableRulesProof [EQUIVALENT, 0 ms]
            (102) PiDP
            (103) PiDPToQDPProof [SOUND, 0 ms]
            (104) QDP
            (105) TransformationProof [SOUND, 0 ms]
            (106) QDP
            (107) TransformationProof [EQUIVALENT, 0 ms]
            (108) QDP
        (109) PiDP
            (110) UsableRulesProof [EQUIVALENT, 0 ms]
            (111) PiDP
        (112) PiDP
(113) PrologToIRSwTTransformerProof [SOUND, 19 ms]
(114) AND
    (115) IRSwT
        (116) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (117) TRUE
    (118) IRSwT
        (119) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (120) TRUE
    (121) IRSwT
        (122) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (123) IRSwT
        (124) IntTRSCompressionProof [EQUIVALENT, 10 ms]
        (125) IRSwT
        (126) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (127) IRSwT
        (128) IRSwTTerminationDigraphProof [EQUIVALENT, 2 ms]
        (129) IRSwT
        (130) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (131) IRSwT
        (132) TempFilterProof [SOUND, 1 ms]
        (133) IRSwT
        (134) IRSwTToQDPProof [SOUND, 0 ms]
        (135) QDP
        (136) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (137) YES
    (138) IRSwT
        (139) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (140) IRSwT
        (141) IntTRSCompressionProof [EQUIVALENT, 11 ms]
        (142) IRSwT
        (143) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (144) IRSwT
        (145) IRSwTTerminationDigraphProof [EQUIVALENT, 41 ms]
        (146) IRSwT
        (147) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (148) IRSwT


----------------------------------------

(0)
Obligation:
Clauses:

color_map(.(Region, Regions), Colors) :- ','(color_region(Region, Colors), color_map(Regions, Colors)).
color_map([], Colors).
color_region(region(Name, Color, Neighbors), Colors) :- ','(select(Color, Colors, Colors1), members(Neighbors, Colors1)).
select(X, .(X, Xs), Xs).
select(X, .(Y, Ys), .(Y, Zs)) :- select(X, Ys, Zs).
members(.(X, Xs), Ys) :- ','(member(X, Ys), members(Xs, Ys)).
members([], Ys).
member(X, .(X, X1)).
member(X, .(X2, Xs)) :- member(X, Xs).


Query: color_map(a,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

color_map_in_2: (f,b)

color_region_in_2: (f,b)

select_in_3: (f,b,f)

members_in_2: (f,b)

member_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> COLOR_REGION_IN_AG(Region, Colors)
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> U3_AG(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> SELECT_IN_AGA(Color, Colors, Colors1)
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> U5_AGA(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_AG(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> MEMBERS_IN_AG(Neighbors, Colors1)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))
   MEMBERS_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X2, Xs)) -> U8_AG(X, X2, Xs, member_in_ag(X, Xs))
   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_AG(X, Xs, Ys, members_in_ag(Xs, Ys))
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_AG(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

COLOR_REGION_IN_AG(x1, x2)  =  COLOR_REGION_IN_AG(x2)

U3_AG(x1, x2, x3, x4, x5)  =  U3_AG(x5)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x5)

U4_AG(x1, x2, x3, x4, x5)  =  U4_AG(x2, x5)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U8_AG(x1, x2, x3, x4)  =  U8_AG(x4)

U7_AG(x1, x2, x3, x4)  =  U7_AG(x1, x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> COLOR_REGION_IN_AG(Region, Colors)
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> U3_AG(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> SELECT_IN_AGA(Color, Colors, Colors1)
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> U5_AGA(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_AG(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> MEMBERS_IN_AG(Neighbors, Colors1)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))
   MEMBERS_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X2, Xs)) -> U8_AG(X, X2, Xs, member_in_ag(X, Xs))
   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_AG(X, Xs, Ys, members_in_ag(Xs, Ys))
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_AG(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

COLOR_REGION_IN_AG(x1, x2)  =  COLOR_REGION_IN_AG(x2)

U3_AG(x1, x2, x3, x4, x5)  =  U3_AG(x5)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x5)

U4_AG(x1, x2, x3, x4, x5)  =  U4_AG(x2, x5)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U8_AG(x1, x2, x3, x4)  =  U8_AG(x4)

U7_AG(x1, x2, x3, x4)  =  U7_AG(x1, x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 4 SCCs with 10 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(.(X2, Xs)) -> MEMBER_IN_AG(Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER_IN_AG(.(X2, Xs)) -> MEMBER_IN_AG(Xs)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_AG(Ys, member_out_ag(X)) -> MEMBERS_IN_AG(Ys)
   MEMBERS_IN_AG(Ys) -> U6_AG(Ys, member_in_ag(Ys))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X)
   member_in_ag(.(X2, Xs)) -> U8_ag(member_in_ag(Xs))
   U8_ag(member_out_ag(X)) -> member_out_ag(X)

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) TransformationProof (SOUND)
By narrowing [LPAR04] the rule MEMBERS_IN_AG(Ys) -> U6_AG(Ys, member_in_ag(Ys)) at position [1] we obtained the following new rules [LPAR04]:

   (MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0)),MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0)))
   (MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(member_in_ag(x1))),MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(member_in_ag(x1))))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_AG(Ys, member_out_ag(X)) -> MEMBERS_IN_AG(Ys)
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0))
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(member_in_ag(x1)))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X)
   member_in_ag(.(X2, Xs)) -> U8_ag(member_in_ag(Xs))
   U8_ag(member_out_ag(X)) -> member_out_ag(X)

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_AG(Ys, member_out_ag(X)) -> MEMBERS_IN_AG(Ys) we obtained the following new rules [LPAR04]:

   (U6_AG(.(z0, z1), member_out_ag(z0)) -> MEMBERS_IN_AG(.(z0, z1)),U6_AG(.(z0, z1), member_out_ag(z0)) -> MEMBERS_IN_AG(.(z0, z1)))
   (U6_AG(.(z0, z1), member_out_ag(x1)) -> MEMBERS_IN_AG(.(z0, z1)),U6_AG(.(z0, z1), member_out_ag(x1)) -> MEMBERS_IN_AG(.(z0, z1)))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0))
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(member_in_ag(x1)))
   U6_AG(.(z0, z1), member_out_ag(z0)) -> MEMBERS_IN_AG(.(z0, z1))
   U6_AG(.(z0, z1), member_out_ag(x1)) -> MEMBERS_IN_AG(.(z0, z1))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X)
   member_in_ag(.(X2, Xs)) -> U8_ag(member_in_ag(Xs))
   U8_ag(member_out_ag(X)) -> member_out_ag(X)

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = U6_AG(.(z0, z1), member_out_ag(z0)) evaluates to  t =U6_AG(.(z0, z1), member_out_ag(z0))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

U6_AG(.(z0, z1), member_out_ag(z0)) -> MEMBERS_IN_AG(.(z0, z1))
with rule U6_AG(.(z0', z1'), member_out_ag(z0')) -> MEMBERS_IN_AG(.(z0', z1')) at position [] and matcher [z0' / z0, z1' / z1]

MEMBERS_IN_AG(.(z0, z1)) -> U6_AG(.(z0, z1), member_out_ag(z0))
with rule MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(24)
NO

----------------------------------------

(25)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(27)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(28) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(.(Y, Ys)) -> SELECT_IN_AGA(Ys)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SELECT_IN_AGA(.(Y, Ys)) -> SELECT_IN_AGA(Ys)
The graph contains the following edges 1 > 1


----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(33) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(34)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))

The TRS R consists of the following rules:

   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(35) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_AG(Colors, color_region_out_ag(Region)) -> COLOR_MAP_IN_AG(Colors)
   COLOR_MAP_IN_AG(Colors) -> U1_AG(Colors, color_region_in_ag(Colors))

The TRS R consists of the following rules:

   color_region_in_ag(Colors) -> U3_ag(select_in_aga(Colors))
   U3_ag(select_out_aga(Color, Colors1)) -> U4_ag(Color, members_in_ag(Colors1))
   select_in_aga(.(X, Xs)) -> select_out_aga(X, Xs)
   select_in_aga(.(Y, Ys)) -> U5_aga(Y, select_in_aga(Ys))
   U4_ag(Color, members_out_ag(Neighbors)) -> color_region_out_ag(region(Color, Neighbors))
   U5_aga(Y, select_out_aga(X, Zs)) -> select_out_aga(X, .(Y, Zs))
   members_in_ag(Ys) -> U6_ag(Ys, member_in_ag(Ys))
   members_in_ag(Ys) -> members_out_ag([])
   U6_ag(Ys, member_out_ag(X)) -> U7_ag(X, members_in_ag(Ys))
   member_in_ag(.(X, X1)) -> member_out_ag(X)
   member_in_ag(.(X2, Xs)) -> U8_ag(member_in_ag(Xs))
   U7_ag(X, members_out_ag(Xs)) -> members_out_ag(.(X, Xs))
   U8_ag(member_out_ag(X)) -> member_out_ag(X)

The set Q consists of the following terms:

   color_region_in_ag(x0)
   U3_ag(x0)
   select_in_aga(x0)
   U4_ag(x0, x1)
   U5_aga(x0, x1)
   members_in_ag(x0)
   U6_ag(x0, x1)
   member_in_ag(x0)
   U7_ag(x0, x1)
   U8_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(37) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

color_map_in_2: (f,b)

color_region_in_2: (f,b)

select_in_3: (f,b,f)

members_in_2: (f,b)

member_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(38)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)



----------------------------------------

(39) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> COLOR_REGION_IN_AG(Region, Colors)
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> U3_AG(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> SELECT_IN_AGA(Color, Colors, Colors1)
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> U5_AGA(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_AG(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> MEMBERS_IN_AG(Neighbors, Colors1)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))
   MEMBERS_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X2, Xs)) -> U8_AG(X, X2, Xs, member_in_ag(X, Xs))
   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_AG(X, Xs, Ys, members_in_ag(Xs, Ys))
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_AG(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

COLOR_REGION_IN_AG(x1, x2)  =  COLOR_REGION_IN_AG(x2)

U3_AG(x1, x2, x3, x4, x5)  =  U3_AG(x4, x5)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x3, x5)

U4_AG(x1, x2, x3, x4, x5)  =  U4_AG(x2, x4, x5)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U8_AG(x1, x2, x3, x4)  =  U8_AG(x2, x3, x4)

U7_AG(x1, x2, x3, x4)  =  U7_AG(x1, x3, x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(40)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> COLOR_REGION_IN_AG(Region, Colors)
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> U3_AG(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> SELECT_IN_AGA(Color, Colors, Colors1)
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> U5_AGA(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_AG(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> MEMBERS_IN_AG(Neighbors, Colors1)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))
   MEMBERS_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X2, Xs)) -> U8_AG(X, X2, Xs, member_in_ag(X, Xs))
   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_AG(X, Xs, Ys, members_in_ag(Xs, Ys))
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_AG(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

COLOR_REGION_IN_AG(x1, x2)  =  COLOR_REGION_IN_AG(x2)

U3_AG(x1, x2, x3, x4, x5)  =  U3_AG(x4, x5)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x3, x5)

U4_AG(x1, x2, x3, x4, x5)  =  U4_AG(x2, x4, x5)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U8_AG(x1, x2, x3, x4)  =  U8_AG(x2, x3, x4)

U7_AG(x1, x2, x3, x4)  =  U7_AG(x1, x3, x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(41) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 4 SCCs with 10 less nodes.
----------------------------------------

(42)
Complex Obligation (AND)

----------------------------------------

(43)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(44) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(45)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(46) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(.(X2, Xs)) -> MEMBER_IN_AG(Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(48) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER_IN_AG(.(X2, Xs)) -> MEMBER_IN_AG(Xs)
The graph contains the following edges 1 > 1


----------------------------------------

(49)
YES

----------------------------------------

(50)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(51) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(52)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(53) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_AG(Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Ys)
   MEMBERS_IN_AG(Ys) -> U6_AG(Ys, member_in_ag(Ys))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(.(X2, Xs)) -> U8_ag(X2, Xs, member_in_ag(Xs))
   U8_ag(X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(55) TransformationProof (SOUND)
By narrowing [LPAR04] the rule MEMBERS_IN_AG(Ys) -> U6_AG(Ys, member_in_ag(Ys)) at position [1] we obtained the following new rules [LPAR04]:

   (MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0, .(x0, x1))),MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0, .(x0, x1))))
   (MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(x0, x1, member_in_ag(x1))),MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(x0, x1, member_in_ag(x1))))


----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_AG(Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Ys)
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0, .(x0, x1)))
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(x0, x1, member_in_ag(x1)))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(.(X2, Xs)) -> U8_ag(X2, Xs, member_in_ag(Xs))
   U8_ag(X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(57) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_AG(Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Ys) we obtained the following new rules [LPAR04]:

   (U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1)),U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1)))
   (U6_AG(.(z0, z1), member_out_ag(x1, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1)),U6_AG(.(z0, z1), member_out_ag(x1, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1)))


----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0, .(x0, x1)))
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(x0, x1, member_in_ag(x1)))
   U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1))
   U6_AG(.(z0, z1), member_out_ag(x1, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(.(X2, Xs)) -> U8_ag(X2, Xs, member_in_ag(Xs))
   U8_ag(X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(59)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(60) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(61)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(62)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(63) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(64)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))

The TRS R consists of the following rules:

   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(65) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(color_map (. Region Regions) Colors)",
                "(',' (color_region Region Colors) (color_map Regions Colors))"
            ],
            [
                "(color_map ([]) Colors)",
                null
            ],
            [
                "(color_region (region Name Color Neighbors) Colors)",
                "(',' (select Color Colors Colors1) (members Neighbors Colors1))"
            ],
            [
                "(select X (. X Xs) Xs)",
                null
            ],
            [
                "(select X (. Y Ys) (. Y Zs))",
                "(select X Ys Zs)"
            ],
            [
                "(members (. X Xs) Ys)",
                "(',' (member X Ys) (members Xs Ys))"
            ],
            [
                "(members ([]) Ys)",
                null
            ],
            [
                "(member X (. X X1))",
                null
            ],
            [
                "(member X (. X2 Xs))",
                "(member X Xs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "type": "Nodes",
            "272": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (select T41 T40 X41) (members T42 X41))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "351": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(select T41 T40 X41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "352": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(select T41 T40 X41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "410": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "334": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T41 T40 X41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "378": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T72 T71 X74)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T71"],
                    "free": ["X74"],
                    "exprvars": []
                }
            },
            "411": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "433": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "357": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "379": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "434": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "336": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T48 T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "359": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "436": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "438": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "439": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "281": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "360": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "383": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(members T48 T47)"
                    },
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(members T48 T47)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "186": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_region T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "384": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(members T48 T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "187": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T24 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "385": {
                "goal": [{
                    "clause": 6,
                    "scope": 4,
                    "term": "(members T48 T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "440": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "188": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(color_region T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "386": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T95 T94) (members T96 T94))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "387": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "346": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(select T41 T40 X41)"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(select T41 T40 X41)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (color_region T18 T17) (color_map T19 T17))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "404": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T95 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "405": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T101 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "406": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(member T95 T94)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(member T95 T94)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "428": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T125 T124)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T124"],
                    "free": [],
                    "exprvars": []
                }
            },
            "407": {
                "goal": [{
                    "clause": 7,
                    "scope": 5,
                    "term": "(member T95 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "429": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "408": {
                "goal": [{
                    "clause": 8,
                    "scope": 5,
                    "term": "(member T95 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "409": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 2,
                "label": "CASE"
            },
            {
                "from": 2,
                "to": 3,
                "label": "PARALLEL"
            },
            {
                "from": 2,
                "to": 4,
                "label": "PARALLEL"
            },
            {
                "from": 3,
                "to": 7,
                "label": "EVAL with clause\ncolor_map(.(X15, X16), X17) :- ','(color_region(X15, X17), color_map(X16, X17)).\nand substitutionX15 -> T18,\nX16 -> T19,\nT1 -> .(T18, T19),\nT2 -> T17,\nX17 -> T17,\nT15 -> T18,\nT16 -> T19"
            },
            {
                "from": 3,
                "to": 8,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 4,
                "to": 438,
                "label": "EVAL with clause\ncolor_map([], X139).\nand substitutionT1 -> [],\nT2 -> T141,\nX139 -> T141"
            },
            {
                "from": 4,
                "to": 439,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 7,
                "to": 186,
                "label": "SPLIT 1"
            },
            {
                "from": 7,
                "to": 187,
                "label": "SPLIT 2\nnew knowledge:\nT17 is ground\nreplacements:T19 -> T24"
            },
            {
                "from": 186,
                "to": 188,
                "label": "CASE"
            },
            {
                "from": 187,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T24\nT2 -> T17"
            },
            {
                "from": 188,
                "to": 272,
                "label": "EVAL with clause\ncolor_region(region(X37, X38, X39), X40) :- ','(select(X38, X40, X41), members(X39, X41)).\nand substitutionX37 -> T37,\nX38 -> T41,\nX39 -> T42,\nT18 -> region(T37, T41, T42),\nT17 -> T40,\nX40 -> T40,\nT38 -> T41,\nT39 -> T42"
            },
            {
                "from": 188,
                "to": 281,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 272,
                "to": 334,
                "label": "SPLIT 1"
            },
            {
                "from": 272,
                "to": 336,
                "label": "SPLIT 2\nnew knowledge:\nT41 is ground\nT40 is ground\nT47 is ground\nreplacements:X41 -> T47,\nT42 -> T48"
            },
            {
                "from": 334,
                "to": 346,
                "label": "CASE"
            },
            {
                "from": 336,
                "to": 383,
                "label": "CASE"
            },
            {
                "from": 346,
                "to": 351,
                "label": "PARALLEL"
            },
            {
                "from": 346,
                "to": 352,
                "label": "PARALLEL"
            },
            {
                "from": 351,
                "to": 357,
                "label": "EVAL with clause\nselect(X58, .(X58, X59), X59).\nand substitutionT41 -> T61,\nX58 -> T61,\nX59 -> T62,\nT40 -> .(T61, T62),\nX41 -> T62"
            },
            {
                "from": 351,
                "to": 359,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 352,
                "to": 378,
                "label": "EVAL with clause\nselect(X70, .(X71, X72), .(X71, X73)) :- select(X70, X72, X73).\nand substitutionT41 -> T72,\nX70 -> T72,\nX71 -> T70,\nX72 -> T71,\nT40 -> .(T70, T71),\nX73 -> X74,\nX41 -> .(T70, X74),\nT69 -> T72"
            },
            {
                "from": 352,
                "to": 379,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 357,
                "to": 360,
                "label": "SUCCESS"
            },
            {
                "from": 378,
                "to": 334,
                "label": "INSTANCE with matching:\nT41 -> T72\nT40 -> T71\nX41 -> X74"
            },
            {
                "from": 383,
                "to": 384,
                "label": "PARALLEL"
            },
            {
                "from": 383,
                "to": 385,
                "label": "PARALLEL"
            },
            {
                "from": 384,
                "to": 386,
                "label": "EVAL with clause\nmembers(.(X94, X95), X96) :- ','(member(X94, X96), members(X95, X96)).\nand substitutionX94 -> T95,\nX95 -> T96,\nT48 -> .(T95, T96),\nT47 -> T94,\nX96 -> T94,\nT92 -> T95,\nT93 -> T96"
            },
            {
                "from": 384,
                "to": 387,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 385,
                "to": 433,
                "label": "EVAL with clause\nmembers([], X133).\nand substitutionT48 -> [],\nT47 -> T135,\nX133 -> T135"
            },
            {
                "from": 385,
                "to": 434,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 386,
                "to": 404,
                "label": "SPLIT 1"
            },
            {
                "from": 386,
                "to": 405,
                "label": "SPLIT 2\nnew knowledge:\nT95 is ground\nT94 is ground\nreplacements:T96 -> T101"
            },
            {
                "from": 404,
                "to": 406,
                "label": "CASE"
            },
            {
                "from": 405,
                "to": 336,
                "label": "INSTANCE with matching:\nT48 -> T101\nT47 -> T94"
            },
            {
                "from": 406,
                "to": 407,
                "label": "PARALLEL"
            },
            {
                "from": 406,
                "to": 408,
                "label": "PARALLEL"
            },
            {
                "from": 407,
                "to": 409,
                "label": "EVAL with clause\nmember(X113, .(X113, X114)).\nand substitutionT95 -> T114,\nX113 -> T114,\nX114 -> T115,\nT94 -> .(T114, T115)"
            },
            {
                "from": 407,
                "to": 410,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 408,
                "to": 428,
                "label": "EVAL with clause\nmember(X121, .(X122, X123)) :- member(X121, X123).\nand substitutionT95 -> T125,\nX121 -> T125,\nX122 -> T123,\nX123 -> T124,\nT94 -> .(T123, T124),\nT122 -> T125"
            },
            {
                "from": 408,
                "to": 429,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 409,
                "to": 411,
                "label": "SUCCESS"
            },
            {
                "from": 428,
                "to": 404,
                "label": "INSTANCE with matching:\nT95 -> T125\nT94 -> T124"
            },
            {
                "from": 433,
                "to": 436,
                "label": "SUCCESS"
            },
            {
                "from": 438,
                "to": 440,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(66)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f1_in(T17) -> U1(f7_in(T17), T17)
   U1(f7_out1, T17) -> f1_out1
   f1_in(T141) -> f1_out1
   f334_in(.(T61, T62)) -> f334_out1(T61, T62)
   f334_in(.(T70, T71)) -> U2(f334_in(T71), .(T70, T71))
   U2(f334_out1(T72, X74), .(T70, T71)) -> f334_out1(T72, .(T70, X74))
   f336_in(T94) -> U3(f386_in(T94), T94)
   U3(f386_out1(T95, T96), T94) -> f336_out1(.(T95, T96))
   f336_in(T135) -> f336_out1([])
   f404_in(.(T114, T115)) -> f404_out1(T114)
   f404_in(.(T123, T124)) -> U4(f404_in(T124), .(T123, T124))
   U4(f404_out1(T125), .(T123, T124)) -> f404_out1(T125)
   f186_in(T40) -> U5(f272_in(T40), T40)
   U5(f272_out1(T41, X41, T42), T40) -> f186_out1
   f7_in(T17) -> U6(f186_in(T17), T17)
   U6(f186_out1, T17) -> U7(f1_in(T17), T17)
   U7(f1_out1, T17) -> f7_out1
   f272_in(T40) -> U8(f334_in(T40), T40)
   U8(f334_out1(T41, T47), T40) -> U9(f336_in(T47), T40, T41, T47)
   U9(f336_out1(T48), T40, T41, T47) -> f272_out1(T41, T47, T48)
   f386_in(T94) -> U10(f404_in(T94), T94)
   U10(f404_out1(T95), T94) -> U11(f336_in(T94), T94, T95)
   U11(f336_out1(T101), T94, T95) -> f386_out1(T95, T101)

Q is empty.

----------------------------------------

(67) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(68)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(T17) -> U1^1(f7_in(T17), T17)
   F1_IN(T17) -> F7_IN(T17)
   F334_IN(.(T70, T71)) -> U2^1(f334_in(T71), .(T70, T71))
   F334_IN(.(T70, T71)) -> F334_IN(T71)
   F336_IN(T94) -> U3^1(f386_in(T94), T94)
   F336_IN(T94) -> F386_IN(T94)
   F404_IN(.(T123, T124)) -> U4^1(f404_in(T124), .(T123, T124))
   F404_IN(.(T123, T124)) -> F404_IN(T124)
   F186_IN(T40) -> U5^1(f272_in(T40), T40)
   F186_IN(T40) -> F272_IN(T40)
   F7_IN(T17) -> U6^1(f186_in(T17), T17)
   F7_IN(T17) -> F186_IN(T17)
   U6^1(f186_out1, T17) -> U7^1(f1_in(T17), T17)
   U6^1(f186_out1, T17) -> F1_IN(T17)
   F272_IN(T40) -> U8^1(f334_in(T40), T40)
   F272_IN(T40) -> F334_IN(T40)
   U8^1(f334_out1(T41, T47), T40) -> U9^1(f336_in(T47), T40, T41, T47)
   U8^1(f334_out1(T41, T47), T40) -> F336_IN(T47)
   F386_IN(T94) -> U10^1(f404_in(T94), T94)
   F386_IN(T94) -> F404_IN(T94)
   U10^1(f404_out1(T95), T94) -> U11^1(f336_in(T94), T94, T95)
   U10^1(f404_out1(T95), T94) -> F336_IN(T94)

The TRS R consists of the following rules:

   f1_in(T17) -> U1(f7_in(T17), T17)
   U1(f7_out1, T17) -> f1_out1
   f1_in(T141) -> f1_out1
   f334_in(.(T61, T62)) -> f334_out1(T61, T62)
   f334_in(.(T70, T71)) -> U2(f334_in(T71), .(T70, T71))
   U2(f334_out1(T72, X74), .(T70, T71)) -> f334_out1(T72, .(T70, X74))
   f336_in(T94) -> U3(f386_in(T94), T94)
   U3(f386_out1(T95, T96), T94) -> f336_out1(.(T95, T96))
   f336_in(T135) -> f336_out1([])
   f404_in(.(T114, T115)) -> f404_out1(T114)
   f404_in(.(T123, T124)) -> U4(f404_in(T124), .(T123, T124))
   U4(f404_out1(T125), .(T123, T124)) -> f404_out1(T125)
   f186_in(T40) -> U5(f272_in(T40), T40)
   U5(f272_out1(T41, X41, T42), T40) -> f186_out1
   f7_in(T17) -> U6(f186_in(T17), T17)
   U6(f186_out1, T17) -> U7(f1_in(T17), T17)
   U7(f1_out1, T17) -> f7_out1
   f272_in(T40) -> U8(f334_in(T40), T40)
   U8(f334_out1(T41, T47), T40) -> U9(f336_in(T47), T40, T41, T47)
   U9(f336_out1(T48), T40, T41, T47) -> f272_out1(T41, T47, T48)
   f386_in(T94) -> U10(f404_in(T94), T94)
   U10(f404_out1(T95), T94) -> U11(f336_in(T94), T94, T95)
   U11(f336_out1(T101), T94, T95) -> f386_out1(T95, T101)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(69) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 14 less nodes.
----------------------------------------

(70)
Complex Obligation (AND)

----------------------------------------

(71)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F404_IN(.(T123, T124)) -> F404_IN(T124)

The TRS R consists of the following rules:

   f1_in(T17) -> U1(f7_in(T17), T17)
   U1(f7_out1, T17) -> f1_out1
   f1_in(T141) -> f1_out1
   f334_in(.(T61, T62)) -> f334_out1(T61, T62)
   f334_in(.(T70, T71)) -> U2(f334_in(T71), .(T70, T71))
   U2(f334_out1(T72, X74), .(T70, T71)) -> f334_out1(T72, .(T70, X74))
   f336_in(T94) -> U3(f386_in(T94), T94)
   U3(f386_out1(T95, T96), T94) -> f336_out1(.(T95, T96))
   f336_in(T135) -> f336_out1([])
   f404_in(.(T114, T115)) -> f404_out1(T114)
   f404_in(.(T123, T124)) -> U4(f404_in(T124), .(T123, T124))
   U4(f404_out1(T125), .(T123, T124)) -> f404_out1(T125)
   f186_in(T40) -> U5(f272_in(T40), T40)
   U5(f272_out1(T41, X41, T42), T40) -> f186_out1
   f7_in(T17) -> U6(f186_in(T17), T17)
   U6(f186_out1, T17) -> U7(f1_in(T17), T17)
   U7(f1_out1, T17) -> f7_out1
   f272_in(T40) -> U8(f334_in(T40), T40)
   U8(f334_out1(T41, T47), T40) -> U9(f336_in(T47), T40, T41, T47)
   U9(f336_out1(T48), T40, T41, T47) -> f272_out1(T41, T47, T48)
   f386_in(T94) -> U10(f404_in(T94), T94)
   U10(f404_out1(T95), T94) -> U11(f336_in(T94), T94, T95)
   U11(f336_out1(T101), T94, T95) -> f386_out1(T95, T101)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(72) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(73)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F404_IN(.(T123, T124)) -> F404_IN(T124)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(74) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F404_IN(.(T123, T124)) -> F404_IN(T124)
The graph contains the following edges 1 > 1


----------------------------------------

(75)
YES

----------------------------------------

(76)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F336_IN(T94) -> F386_IN(T94)
   F386_IN(T94) -> U10^1(f404_in(T94), T94)
   U10^1(f404_out1(T95), T94) -> F336_IN(T94)

The TRS R consists of the following rules:

   f1_in(T17) -> U1(f7_in(T17), T17)
   U1(f7_out1, T17) -> f1_out1
   f1_in(T141) -> f1_out1
   f334_in(.(T61, T62)) -> f334_out1(T61, T62)
   f334_in(.(T70, T71)) -> U2(f334_in(T71), .(T70, T71))
   U2(f334_out1(T72, X74), .(T70, T71)) -> f334_out1(T72, .(T70, X74))
   f336_in(T94) -> U3(f386_in(T94), T94)
   U3(f386_out1(T95, T96), T94) -> f336_out1(.(T95, T96))
   f336_in(T135) -> f336_out1([])
   f404_in(.(T114, T115)) -> f404_out1(T114)
   f404_in(.(T123, T124)) -> U4(f404_in(T124), .(T123, T124))
   U4(f404_out1(T125), .(T123, T124)) -> f404_out1(T125)
   f186_in(T40) -> U5(f272_in(T40), T40)
   U5(f272_out1(T41, X41, T42), T40) -> f186_out1
   f7_in(T17) -> U6(f186_in(T17), T17)
   U6(f186_out1, T17) -> U7(f1_in(T17), T17)
   U7(f1_out1, T17) -> f7_out1
   f272_in(T40) -> U8(f334_in(T40), T40)
   U8(f334_out1(T41, T47), T40) -> U9(f336_in(T47), T40, T41, T47)
   U9(f336_out1(T48), T40, T41, T47) -> f272_out1(T41, T47, T48)
   f386_in(T94) -> U10(f404_in(T94), T94)
   U10(f404_out1(T95), T94) -> U11(f336_in(T94), T94, T95)
   U11(f336_out1(T101), T94, T95) -> f386_out1(T95, T101)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(77) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F386_IN(.(T114, T115)) evaluates to  t =F386_IN(.(T114, T115))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

F386_IN(.(T114, T115)) -> U10^1(f404_in(.(T114, T115)), .(T114, T115))
with rule F386_IN(T94) -> U10^1(f404_in(T94), T94) at position [] and matcher [T94 / .(T114, T115)]

U10^1(f404_in(.(T114, T115)), .(T114, T115)) -> U10^1(f404_out1(T114), .(T114, T115))
with rule f404_in(.(T114', T115')) -> f404_out1(T114') at position [0] and matcher [T114' / T114, T115' / T115]

U10^1(f404_out1(T114), .(T114, T115)) -> F336_IN(.(T114, T115))
with rule U10^1(f404_out1(T95), T94') -> F336_IN(T94') at position [] and matcher [T95 / T114, T94' / .(T114, T115)]

F336_IN(.(T114, T115)) -> F386_IN(.(T114, T115))
with rule F336_IN(T94) -> F386_IN(T94)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(78)
NO

----------------------------------------

(79)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F334_IN(.(T70, T71)) -> F334_IN(T71)

The TRS R consists of the following rules:

   f1_in(T17) -> U1(f7_in(T17), T17)
   U1(f7_out1, T17) -> f1_out1
   f1_in(T141) -> f1_out1
   f334_in(.(T61, T62)) -> f334_out1(T61, T62)
   f334_in(.(T70, T71)) -> U2(f334_in(T71), .(T70, T71))
   U2(f334_out1(T72, X74), .(T70, T71)) -> f334_out1(T72, .(T70, X74))
   f336_in(T94) -> U3(f386_in(T94), T94)
   U3(f386_out1(T95, T96), T94) -> f336_out1(.(T95, T96))
   f336_in(T135) -> f336_out1([])
   f404_in(.(T114, T115)) -> f404_out1(T114)
   f404_in(.(T123, T124)) -> U4(f404_in(T124), .(T123, T124))
   U4(f404_out1(T125), .(T123, T124)) -> f404_out1(T125)
   f186_in(T40) -> U5(f272_in(T40), T40)
   U5(f272_out1(T41, X41, T42), T40) -> f186_out1
   f7_in(T17) -> U6(f186_in(T17), T17)
   U6(f186_out1, T17) -> U7(f1_in(T17), T17)
   U7(f1_out1, T17) -> f7_out1
   f272_in(T40) -> U8(f334_in(T40), T40)
   U8(f334_out1(T41, T47), T40) -> U9(f336_in(T47), T40, T41, T47)
   U9(f336_out1(T48), T40, T41, T47) -> f272_out1(T41, T47, T48)
   f386_in(T94) -> U10(f404_in(T94), T94)
   U10(f404_out1(T95), T94) -> U11(f336_in(T94), T94, T95)
   U11(f336_out1(T101), T94, T95) -> f386_out1(T95, T101)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(80) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(81)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F334_IN(.(T70, T71)) -> F334_IN(T71)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(82) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F334_IN(.(T70, T71)) -> F334_IN(T71)
The graph contains the following edges 1 > 1


----------------------------------------

(83)
YES

----------------------------------------

(84)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(T17) -> F7_IN(T17)
   F7_IN(T17) -> U6^1(f186_in(T17), T17)
   U6^1(f186_out1, T17) -> F1_IN(T17)

The TRS R consists of the following rules:

   f1_in(T17) -> U1(f7_in(T17), T17)
   U1(f7_out1, T17) -> f1_out1
   f1_in(T141) -> f1_out1
   f334_in(.(T61, T62)) -> f334_out1(T61, T62)
   f334_in(.(T70, T71)) -> U2(f334_in(T71), .(T70, T71))
   U2(f334_out1(T72, X74), .(T70, T71)) -> f334_out1(T72, .(T70, X74))
   f336_in(T94) -> U3(f386_in(T94), T94)
   U3(f386_out1(T95, T96), T94) -> f336_out1(.(T95, T96))
   f336_in(T135) -> f336_out1([])
   f404_in(.(T114, T115)) -> f404_out1(T114)
   f404_in(.(T123, T124)) -> U4(f404_in(T124), .(T123, T124))
   U4(f404_out1(T125), .(T123, T124)) -> f404_out1(T125)
   f186_in(T40) -> U5(f272_in(T40), T40)
   U5(f272_out1(T41, X41, T42), T40) -> f186_out1
   f7_in(T17) -> U6(f186_in(T17), T17)
   U6(f186_out1, T17) -> U7(f1_in(T17), T17)
   U7(f1_out1, T17) -> f7_out1
   f272_in(T40) -> U8(f334_in(T40), T40)
   U8(f334_out1(T41, T47), T40) -> U9(f336_in(T47), T40, T41, T47)
   U9(f336_out1(T48), T40, T41, T47) -> f272_out1(T41, T47, T48)
   f386_in(T94) -> U10(f404_in(T94), T94)
   U10(f404_out1(T95), T94) -> U11(f336_in(T94), T94, T95)
   U11(f336_out1(T101), T94, T95) -> f386_out1(T95, T101)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(85) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F7_IN(.(T61, T62)) evaluates to  t =F7_IN(.(T61, T62))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

F7_IN(.(T61, T62)) -> U6^1(f186_in(.(T61, T62)), .(T61, T62))
with rule F7_IN(T17) -> U6^1(f186_in(T17), T17) at position [] and matcher [T17 / .(T61, T62)]

U6^1(f186_in(.(T61, T62)), .(T61, T62)) -> U6^1(U5(f272_in(.(T61, T62)), .(T61, T62)), .(T61, T62))
with rule f186_in(T40') -> U5(f272_in(T40'), T40') at position [0] and matcher [T40' / .(T61, T62)]

U6^1(U5(f272_in(.(T61, T62)), .(T61, T62)), .(T61, T62)) -> U6^1(U5(U8(f334_in(.(T61, T62)), .(T61, T62)), .(T61, T62)), .(T61, T62))
with rule f272_in(T40') -> U8(f334_in(T40'), T40') at position [0,0] and matcher [T40' / .(T61, T62)]

U6^1(U5(U8(f334_in(.(T61, T62)), .(T61, T62)), .(T61, T62)), .(T61, T62)) -> U6^1(U5(U8(f334_out1(T61, T62), .(T61, T62)), .(T61, T62)), .(T61, T62))
with rule f334_in(.(T61', T62')) -> f334_out1(T61', T62') at position [0,0,0] and matcher [T61' / T61, T62' / T62]

U6^1(U5(U8(f334_out1(T61, T62), .(T61, T62)), .(T61, T62)), .(T61, T62)) -> U6^1(U5(U9(f336_in(T62), .(T61, T62), T61, T62), .(T61, T62)), .(T61, T62))
with rule U8(f334_out1(T41, T47'), T40'') -> U9(f336_in(T47'), T40'', T41, T47') at position [0,0] and matcher [T41 / T61, T47' / T62, T40'' / .(T61, T62)]

U6^1(U5(U9(f336_in(T62), .(T61, T62), T61, T62), .(T61, T62)), .(T61, T62)) -> U6^1(U5(U9(f336_out1([]), .(T61, T62), T61, T62), .(T61, T62)), .(T61, T62))
with rule f336_in(T135) -> f336_out1([]) at position [0,0,0] and matcher [T135 / T62]

U6^1(U5(U9(f336_out1([]), .(T61, T62), T61, T62), .(T61, T62)), .(T61, T62)) -> U6^1(U5(f272_out1(T61, T62, []), .(T61, T62)), .(T61, T62))
with rule U9(f336_out1(T48), T40', T41', T47) -> f272_out1(T41', T47, T48) at position [0,0] and matcher [T48 / [], T40' / .(T61, T62), T41' / T61, T47 / T62]

U6^1(U5(f272_out1(T61, T62, []), .(T61, T62)), .(T61, T62)) -> U6^1(f186_out1, .(T61, T62))
with rule U5(f272_out1(T41, X41, T42), T40) -> f186_out1 at position [0] and matcher [T41 / T61, X41 / T62, T42 / [], T40 / .(T61, T62)]

U6^1(f186_out1, .(T61, T62)) -> F1_IN(.(T61, T62))
with rule U6^1(f186_out1, T17') -> F1_IN(T17') at position [] and matcher [T17' / .(T61, T62)]

F1_IN(.(T61, T62)) -> F7_IN(.(T61, T62))
with rule F1_IN(T17) -> F7_IN(T17)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(86)
NO

----------------------------------------

(87) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 9,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(color_map (. Region Regions) Colors)",
                "(',' (color_region Region Colors) (color_map Regions Colors))"
            ],
            [
                "(color_map ([]) Colors)",
                null
            ],
            [
                "(color_region (region Name Color Neighbors) Colors)",
                "(',' (select Color Colors Colors1) (members Neighbors Colors1))"
            ],
            [
                "(select X (. X Xs) Xs)",
                null
            ],
            [
                "(select X (. Y Ys) (. Y Zs))",
                "(select X Ys Zs)"
            ],
            [
                "(members (. X Xs) Ys)",
                "(',' (member X Ys) (members Xs Ys))"
            ],
            [
                "(members ([]) Ys)",
                null
            ],
            [
                "(member X (. X X1))",
                null
            ],
            [
                "(member X (. X2 Xs))",
                "(member X Xs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "type": "Nodes",
            "131": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(select T31 T30 X31)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T30"],
                    "free": ["X31"],
                    "exprvars": []
                }
            },
            "452": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(member T91 T90)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(member T91 T90)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T90"],
                    "free": [],
                    "exprvars": []
                }
            },
            "453": {
                "goal": [{
                    "clause": 7,
                    "scope": 5,
                    "term": "(member T91 T90)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T90"],
                    "free": [],
                    "exprvars": []
                }
            },
            "454": {
                "goal": [{
                    "clause": 8,
                    "scope": 5,
                    "term": "(member T91 T90)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T90"],
                    "free": [],
                    "exprvars": []
                }
            },
            "455": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "456": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "435": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T64 T63 X64)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T63"],
                    "free": ["X64"],
                    "exprvars": []
                }
            },
            "457": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "458": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T121 T120)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T120"],
                    "free": [],
                    "exprvars": []
                }
            },
            "437": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "459": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "31": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(',' (color_region T9 T8) (color_map T10 T8))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "10": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "32": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "33": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (',' (select T31 T30 X31) (members T32 X31)) (color_map T33 T30))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T30"],
                    "free": ["X31"],
                    "exprvars": []
                }
            },
            "34": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "35": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T31 T30 X31)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T30"],
                    "free": ["X31"],
                    "exprvars": []
                }
            },
            "36": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (members T39 T38) (color_map T40 T30))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T30",
                        "T38"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (color_region T9 T8) (color_map T10 T8))"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "16": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(color_map T1 T2)",
                        "(color_map (. X6 X7) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(',' (color_region T9 T8) (color_map T10 T8))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "380": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "381": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "382": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "460": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "461": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "462": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "441": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T39 T38)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T38"],
                    "free": [],
                    "exprvars": []
                }
            },
            "463": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(color_map T1 T8)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "442": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T72 T30)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T30"],
                    "free": [],
                    "exprvars": []
                }
            },
            "464": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "443": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(members T39 T38)"
                    },
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(members T39 T38)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T38"],
                    "free": [],
                    "exprvars": []
                }
            },
            "465": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "444": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(members T39 T38)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T38"],
                    "free": [],
                    "exprvars": []
                }
            },
            "466": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "445": {
                "goal": [{
                    "clause": 6,
                    "scope": 4,
                    "term": "(members T39 T38)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T38"],
                    "free": [],
                    "exprvars": []
                }
            },
            "467": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "446": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T91 T90) (members T92 T90))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T90"],
                    "free": [],
                    "exprvars": []
                }
            },
            "468": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "447": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "469": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "129": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(select T31 T30 X31)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T30"],
                    "free": ["X31"],
                    "exprvars": []
                }
            },
            "448": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T91 T90)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T90"],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "449": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T97 T90)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T90"],
                    "free": [],
                    "exprvars": []
                }
            },
            "85": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(select T31 T30 X31)"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(select T31 T30 X31)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T30"],
                    "free": ["X31"],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 9,
                "to": 10,
                "label": "CASE"
            },
            {
                "from": 10,
                "to": 15,
                "label": "EVAL with clause\ncolor_map(.(X6, X7), X8) :- ','(color_region(X6, X8), color_map(X7, X8)).\nand substitutionX6 -> T9,\nX7 -> T10,\nT1 -> .(T9, T10),\nT2 -> T8,\nX8 -> T8,\nT6 -> T9,\nT7 -> T10"
            },
            {
                "from": 10,
                "to": 16,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 15,
                "to": 19,
                "label": "CASE"
            },
            {
                "from": 16,
                "to": 467,
                "label": "EVAL with clause\ncolor_map([], X134).\nand substitutionT1 -> [],\nT2 -> T139,\nX134 -> T139"
            },
            {
                "from": 16,
                "to": 468,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 19,
                "to": 31,
                "label": "PARALLEL"
            },
            {
                "from": 19,
                "to": 32,
                "label": "PARALLEL"
            },
            {
                "from": 31,
                "to": 33,
                "label": "EVAL with clause\ncolor_region(region(X27, X28, X29), X30) :- ','(select(X28, X30, X31), members(X29, X31)).\nand substitutionX27 -> T27,\nX28 -> T31,\nX29 -> T32,\nT9 -> region(T27, T31, T32),\nT8 -> T30,\nX30 -> T30,\nT28 -> T31,\nT29 -> T32,\nT10 -> T33"
            },
            {
                "from": 31,
                "to": 34,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 32,
                "to": 463,
                "label": "FAILURE"
            },
            {
                "from": 33,
                "to": 35,
                "label": "SPLIT 1"
            },
            {
                "from": 33,
                "to": 36,
                "label": "SPLIT 2\nnew knowledge:\nT31 is ground\nT30 is ground\nT38 is ground\nreplacements:X31 -> T38,\nT32 -> T39,\nT33 -> T40"
            },
            {
                "from": 35,
                "to": 85,
                "label": "CASE"
            },
            {
                "from": 36,
                "to": 441,
                "label": "SPLIT 1"
            },
            {
                "from": 36,
                "to": 442,
                "label": "SPLIT 2\nnew knowledge:\nT39 is ground\nT38 is ground\nreplacements:T40 -> T72"
            },
            {
                "from": 85,
                "to": 129,
                "label": "PARALLEL"
            },
            {
                "from": 85,
                "to": 131,
                "label": "PARALLEL"
            },
            {
                "from": 129,
                "to": 380,
                "label": "EVAL with clause\nselect(X48, .(X48, X49), X49).\nand substitutionT31 -> T53,\nX48 -> T53,\nX49 -> T54,\nT30 -> .(T53, T54),\nX31 -> T54"
            },
            {
                "from": 129,
                "to": 381,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 131,
                "to": 435,
                "label": "EVAL with clause\nselect(X60, .(X61, X62), .(X61, X63)) :- select(X60, X62, X63).\nand substitutionT31 -> T64,\nX60 -> T64,\nX61 -> T62,\nX62 -> T63,\nT30 -> .(T62, T63),\nX63 -> X64,\nX31 -> .(T62, X64),\nT61 -> T64"
            },
            {
                "from": 131,
                "to": 437,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 380,
                "to": 382,
                "label": "SUCCESS"
            },
            {
                "from": 435,
                "to": 35,
                "label": "INSTANCE with matching:\nT31 -> T64\nT30 -> T63\nX31 -> X64"
            },
            {
                "from": 441,
                "to": 443,
                "label": "CASE"
            },
            {
                "from": 442,
                "to": 9,
                "label": "INSTANCE with matching:\nT1 -> T72\nT2 -> T30"
            },
            {
                "from": 443,
                "to": 444,
                "label": "PARALLEL"
            },
            {
                "from": 443,
                "to": 445,
                "label": "PARALLEL"
            },
            {
                "from": 444,
                "to": 446,
                "label": "EVAL with clause\nmembers(.(X87, X88), X89) :- ','(member(X87, X89), members(X88, X89)).\nand substitutionX87 -> T91,\nX88 -> T92,\nT39 -> .(T91, T92),\nT38 -> T90,\nX89 -> T90,\nT88 -> T91,\nT89 -> T92"
            },
            {
                "from": 444,
                "to": 447,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 445,
                "to": 460,
                "label": "EVAL with clause\nmembers([], X126).\nand substitutionT39 -> [],\nT38 -> T131,\nX126 -> T131"
            },
            {
                "from": 445,
                "to": 461,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 446,
                "to": 448,
                "label": "SPLIT 1"
            },
            {
                "from": 446,
                "to": 449,
                "label": "SPLIT 2\nnew knowledge:\nT91 is ground\nT90 is ground\nreplacements:T92 -> T97"
            },
            {
                "from": 448,
                "to": 452,
                "label": "CASE"
            },
            {
                "from": 449,
                "to": 441,
                "label": "INSTANCE with matching:\nT39 -> T97\nT38 -> T90"
            },
            {
                "from": 452,
                "to": 453,
                "label": "PARALLEL"
            },
            {
                "from": 452,
                "to": 454,
                "label": "PARALLEL"
            },
            {
                "from": 453,
                "to": 455,
                "label": "EVAL with clause\nmember(X106, .(X106, X107)).\nand substitutionT91 -> T110,\nX106 -> T110,\nX107 -> T111,\nT90 -> .(T110, T111)"
            },
            {
                "from": 453,
                "to": 456,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 454,
                "to": 458,
                "label": "EVAL with clause\nmember(X114, .(X115, X116)) :- member(X114, X116).\nand substitutionT91 -> T121,\nX114 -> T121,\nX115 -> T119,\nX116 -> T120,\nT90 -> .(T119, T120),\nT118 -> T121"
            },
            {
                "from": 454,
                "to": 459,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 455,
                "to": 457,
                "label": "SUCCESS"
            },
            {
                "from": 458,
                "to": 448,
                "label": "INSTANCE with matching:\nT91 -> T121\nT90 -> T120"
            },
            {
                "from": 460,
                "to": 462,
                "label": "SUCCESS"
            },
            {
                "from": 463,
                "to": 464,
                "label": "EVAL with clause\ncolor_map([], X132).\nand substitutionT1 -> [],\nT8 -> T137,\nX132 -> T137"
            },
            {
                "from": 463,
                "to": 465,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 464,
                "to": 466,
                "label": "SUCCESS"
            },
            {
                "from": 467,
                "to": 469,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(88)
Obligation:
Triples:

selectA(X1, .(X2, X3), .(X2, X4)) :- selectA(X1, X3, X4).
membersC(.(X1, X2), X3) :- memberD(X1, X3).
membersC(.(X1, X2), X3) :- ','(membercD(X1, X3), membersC(X2, X3)).
memberD(X1, .(X2, X3)) :- memberD(X1, X3).
color_mapB(.(region(X1, X2, X3), X4), X5) :- selectA(X2, X5, X6).
color_mapB(.(region(X1, X2, X3), X4), X5) :- ','(selectcA(X2, X5, X6), membersC(X3, X6)).
color_mapB(.(region(X1, X2, X3), X4), X5) :- ','(selectcA(X2, X5, X6), ','(memberscC(X3, X6), color_mapB(X4, X5))).

Clauses:

selectcA(X1, .(X1, X2), X2).
selectcA(X1, .(X2, X3), .(X2, X4)) :- selectcA(X1, X3, X4).
color_mapcB(.(region(X1, X2, X3), X4), X5) :- ','(selectcA(X2, X5, X6), ','(memberscC(X3, X6), color_mapcB(X4, X5))).
color_mapcB([], X1).
color_mapcB([], X1).
memberscC(.(X1, X2), X3) :- ','(membercD(X1, X3), memberscC(X2, X3)).
memberscC([], X1).
membercD(X1, .(X1, X2)).
membercD(X1, .(X2, X3)) :- membercD(X1, X3).

Afs:

color_mapB(x1, x2)  =  color_mapB(x2)


----------------------------------------

(89) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

color_mapB_in_2: (f,b)

selectA_in_3: (f,b,f)

selectcA_in_3: (f,b,f)

membersC_in_2: (f,b)

memberD_in_2: (f,b)

membercD_in_2: (f,b)

memberscC_in_2: (f,b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> U6_AG(X1, X2, X3, X4, X5, selectA_in_aga(X2, X5, X6))
   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> SELECTA_IN_AGA(X2, X5, X6)
   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> U1_AGA(X1, X2, X3, X4, selectA_in_aga(X1, X3, X4))
   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> SELECTA_IN_AGA(X1, X3, X4)
   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> U7_AG(X1, X2, X3, X4, X5, selectcA_in_aga(X2, X5, X6))
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> U8_AG(X1, X2, X3, X4, X5, membersC_in_ag(X3, X6))
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> MEMBERSC_IN_AG(X3, X6)
   MEMBERSC_IN_AG(.(X1, X2), X3) -> U2_AG(X1, X2, X3, memberD_in_ag(X1, X3))
   MEMBERSC_IN_AG(.(X1, X2), X3) -> MEMBERD_IN_AG(X1, X3)
   MEMBERD_IN_AG(X1, .(X2, X3)) -> U5_AG(X1, X2, X3, memberD_in_ag(X1, X3))
   MEMBERD_IN_AG(X1, .(X2, X3)) -> MEMBERD_IN_AG(X1, X3)
   MEMBERSC_IN_AG(.(X1, X2), X3) -> U3_AG(X1, X2, X3, membercD_in_ag(X1, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> U4_AG(X1, X2, X3, membersC_in_ag(X2, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X2, X3)
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> U9_AG(X1, X2, X3, X4, X5, memberscC_in_ag(X3, X6))
   U9_AG(X1, X2, X3, X4, X5, memberscC_out_ag(X3, X6)) -> U10_AG(X1, X2, X3, X4, X5, color_mapB_in_ag(X4, X5))
   U9_AG(X1, X2, X3, X4, X5, memberscC_out_ag(X3, X6)) -> COLOR_MAPB_IN_AG(X4, X5)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
color_mapB_in_ag(x1, x2)  =  color_mapB_in_ag(x2)

selectA_in_aga(x1, x2, x3)  =  selectA_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membersC_in_ag(x1, x2)  =  membersC_in_ag(x2)

memberD_in_ag(x1, x2)  =  memberD_in_ag(x2)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

COLOR_MAPB_IN_AG(x1, x2)  =  COLOR_MAPB_IN_AG(x2)

U6_AG(x1, x2, x3, x4, x5, x6)  =  U6_AG(x5, x6)

SELECTA_IN_AGA(x1, x2, x3)  =  SELECTA_IN_AGA(x2)

U1_AGA(x1, x2, x3, x4, x5)  =  U1_AGA(x2, x3, x5)

U7_AG(x1, x2, x3, x4, x5, x6)  =  U7_AG(x5, x6)

U8_AG(x1, x2, x3, x4, x5, x6)  =  U8_AG(x5, x6)

MEMBERSC_IN_AG(x1, x2)  =  MEMBERSC_IN_AG(x2)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x3, x4)

MEMBERD_IN_AG(x1, x2)  =  MEMBERD_IN_AG(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x2, x3, x4)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x3, x4)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x3, x4)

U9_AG(x1, x2, x3, x4, x5, x6)  =  U9_AG(x5, x6)

U10_AG(x1, x2, x3, x4, x5, x6)  =  U10_AG(x5, x6)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(90)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> U6_AG(X1, X2, X3, X4, X5, selectA_in_aga(X2, X5, X6))
   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> SELECTA_IN_AGA(X2, X5, X6)
   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> U1_AGA(X1, X2, X3, X4, selectA_in_aga(X1, X3, X4))
   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> SELECTA_IN_AGA(X1, X3, X4)
   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> U7_AG(X1, X2, X3, X4, X5, selectcA_in_aga(X2, X5, X6))
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> U8_AG(X1, X2, X3, X4, X5, membersC_in_ag(X3, X6))
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> MEMBERSC_IN_AG(X3, X6)
   MEMBERSC_IN_AG(.(X1, X2), X3) -> U2_AG(X1, X2, X3, memberD_in_ag(X1, X3))
   MEMBERSC_IN_AG(.(X1, X2), X3) -> MEMBERD_IN_AG(X1, X3)
   MEMBERD_IN_AG(X1, .(X2, X3)) -> U5_AG(X1, X2, X3, memberD_in_ag(X1, X3))
   MEMBERD_IN_AG(X1, .(X2, X3)) -> MEMBERD_IN_AG(X1, X3)
   MEMBERSC_IN_AG(.(X1, X2), X3) -> U3_AG(X1, X2, X3, membercD_in_ag(X1, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> U4_AG(X1, X2, X3, membersC_in_ag(X2, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X2, X3)
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> U9_AG(X1, X2, X3, X4, X5, memberscC_in_ag(X3, X6))
   U9_AG(X1, X2, X3, X4, X5, memberscC_out_ag(X3, X6)) -> U10_AG(X1, X2, X3, X4, X5, color_mapB_in_ag(X4, X5))
   U9_AG(X1, X2, X3, X4, X5, memberscC_out_ag(X3, X6)) -> COLOR_MAPB_IN_AG(X4, X5)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
color_mapB_in_ag(x1, x2)  =  color_mapB_in_ag(x2)

selectA_in_aga(x1, x2, x3)  =  selectA_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membersC_in_ag(x1, x2)  =  membersC_in_ag(x2)

memberD_in_ag(x1, x2)  =  memberD_in_ag(x2)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

COLOR_MAPB_IN_AG(x1, x2)  =  COLOR_MAPB_IN_AG(x2)

U6_AG(x1, x2, x3, x4, x5, x6)  =  U6_AG(x5, x6)

SELECTA_IN_AGA(x1, x2, x3)  =  SELECTA_IN_AGA(x2)

U1_AGA(x1, x2, x3, x4, x5)  =  U1_AGA(x2, x3, x5)

U7_AG(x1, x2, x3, x4, x5, x6)  =  U7_AG(x5, x6)

U8_AG(x1, x2, x3, x4, x5, x6)  =  U8_AG(x5, x6)

MEMBERSC_IN_AG(x1, x2)  =  MEMBERSC_IN_AG(x2)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x3, x4)

MEMBERD_IN_AG(x1, x2)  =  MEMBERD_IN_AG(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x2, x3, x4)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x3, x4)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x3, x4)

U9_AG(x1, x2, x3, x4, x5, x6)  =  U9_AG(x5, x6)

U10_AG(x1, x2, x3, x4, x5, x6)  =  U10_AG(x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(91) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 4 SCCs with 10 less nodes.
----------------------------------------

(92)
Complex Obligation (AND)

----------------------------------------

(93)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERD_IN_AG(X1, .(X2, X3)) -> MEMBERD_IN_AG(X1, X3)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

MEMBERD_IN_AG(x1, x2)  =  MEMBERD_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(94) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(95)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERD_IN_AG(X1, .(X2, X3)) -> MEMBERD_IN_AG(X1, X3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBERD_IN_AG(x1, x2)  =  MEMBERD_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(96) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(97)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERD_IN_AG(.(X2, X3)) -> MEMBERD_IN_AG(X3)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(98) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBERD_IN_AG(.(X2, X3)) -> MEMBERD_IN_AG(X3)
The graph contains the following edges 1 > 1


----------------------------------------

(99)
YES

----------------------------------------

(100)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERSC_IN_AG(.(X1, X2), X3) -> U3_AG(X1, X2, X3, membercD_in_ag(X1, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X2, X3)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

MEMBERSC_IN_AG(x1, x2)  =  MEMBERSC_IN_AG(x2)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(101) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(102)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERSC_IN_AG(.(X1, X2), X3) -> U3_AG(X1, X2, X3, membercD_in_ag(X1, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X2, X3)

The TRS R consists of the following rules:

   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

MEMBERSC_IN_AG(x1, x2)  =  MEMBERSC_IN_AG(x2)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(103) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(104)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERSC_IN_AG(X3) -> U3_AG(X3, membercD_in_ag(X3))
   U3_AG(X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X3)

The TRS R consists of the following rules:

   membercD_in_ag(.(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(.(X2, X3)) -> U18_ag(X2, X3, membercD_in_ag(X3))
   U18_ag(X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))

The set Q consists of the following terms:

   membercD_in_ag(x0)
   U18_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(105) TransformationProof (SOUND)
By narrowing [LPAR04] the rule MEMBERSC_IN_AG(X3) -> U3_AG(X3, membercD_in_ag(X3)) at position [1] we obtained the following new rules [LPAR04]:

   (MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), membercD_out_ag(x0, .(x0, x1))),MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), membercD_out_ag(x0, .(x0, x1))))
   (MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), U18_ag(x0, x1, membercD_in_ag(x1))),MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), U18_ag(x0, x1, membercD_in_ag(x1))))


----------------------------------------

(106)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_AG(X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X3)
   MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), membercD_out_ag(x0, .(x0, x1)))
   MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), U18_ag(x0, x1, membercD_in_ag(x1)))

The TRS R consists of the following rules:

   membercD_in_ag(.(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(.(X2, X3)) -> U18_ag(X2, X3, membercD_in_ag(X3))
   U18_ag(X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))

The set Q consists of the following terms:

   membercD_in_ag(x0)
   U18_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(107) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U3_AG(X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X3) we obtained the following new rules [LPAR04]:

   (U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1)),U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1)))
   (U3_AG(.(z0, z1), membercD_out_ag(x1, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1)),U3_AG(.(z0, z1), membercD_out_ag(x1, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1)))


----------------------------------------

(108)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), membercD_out_ag(x0, .(x0, x1)))
   MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), U18_ag(x0, x1, membercD_in_ag(x1)))
   U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1))
   U3_AG(.(z0, z1), membercD_out_ag(x1, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1))

The TRS R consists of the following rules:

   membercD_in_ag(.(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(.(X2, X3)) -> U18_ag(X2, X3, membercD_in_ag(X3))
   U18_ag(X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))

The set Q consists of the following terms:

   membercD_in_ag(x0)
   U18_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(109)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> SELECTA_IN_AGA(X1, X3, X4)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

SELECTA_IN_AGA(x1, x2, x3)  =  SELECTA_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(110) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(111)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> SELECTA_IN_AGA(X1, X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

SELECTA_IN_AGA(x1, x2, x3)  =  SELECTA_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(112)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> U7_AG(X1, X2, X3, X4, X5, selectcA_in_aga(X2, X5, X6))
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> U9_AG(X1, X2, X3, X4, X5, memberscC_in_ag(X3, X6))
   U9_AG(X1, X2, X3, X4, X5, memberscC_out_ag(X3, X6)) -> COLOR_MAPB_IN_AG(X4, X5)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

COLOR_MAPB_IN_AG(x1, x2)  =  COLOR_MAPB_IN_AG(x2)

U7_AG(x1, x2, x3, x4, x5, x6)  =  U7_AG(x5, x6)

U9_AG(x1, x2, x3, x4, x5, x6)  =  U9_AG(x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(113) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 6,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(color_map (. Region Regions) Colors)",
                "(',' (color_region Region Colors) (color_map Regions Colors))"
            ],
            [
                "(color_map ([]) Colors)",
                null
            ],
            [
                "(color_region (region Name Color Neighbors) Colors)",
                "(',' (select Color Colors Colors1) (members Neighbors Colors1))"
            ],
            [
                "(select X (. X Xs) Xs)",
                null
            ],
            [
                "(select X (. Y Ys) (. Y Zs))",
                "(select X Ys Zs)"
            ],
            [
                "(members (. X Xs) Ys)",
                "(',' (member X Ys) (members Xs Ys))"
            ],
            [
                "(members ([]) Ys)",
                null
            ],
            [
                "(member X (. X X1))",
                null
            ],
            [
                "(member X (. X2 Xs))",
                "(member X Xs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "490": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T95 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "491": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T101 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "470": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_region T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "492": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(member T95 T94)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(member T95 T94)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "471": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T24 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "493": {
                "goal": [{
                    "clause": 7,
                    "scope": 5,
                    "term": "(member T95 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "450": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (color_region T18 T17) (color_map T19 T17))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "472": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(color_region T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "494": {
                "goal": [{
                    "clause": 8,
                    "scope": 5,
                    "term": "(member T95 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "451": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "473": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (select T41 T40 X41) (members T42 X41))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "495": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "430": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "474": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "496": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "431": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "475": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T41 T40 X41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "497": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "432": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "476": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T48 T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "498": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T125 T124)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T124"],
                    "free": [],
                    "exprvars": []
                }
            },
            "477": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(select T41 T40 X41)"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(select T41 T40 X41)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "499": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "478": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(select T41 T40 X41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "479": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(select T41 T40 X41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "480": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "481": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "482": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "483": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T72 T71 X74)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T71"],
                    "free": ["X74"],
                    "exprvars": []
                }
            },
            "484": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "485": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(members T48 T47)"
                    },
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(members T48 T47)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "486": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(members T48 T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "487": {
                "goal": [{
                    "clause": 6,
                    "scope": 4,
                    "term": "(members T48 T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "488": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T95 T94) (members T96 T94))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "489": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "500": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "501": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "502": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "503": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "504": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "505": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 6,
                "to": 430,
                "label": "CASE"
            },
            {
                "from": 430,
                "to": 431,
                "label": "PARALLEL"
            },
            {
                "from": 430,
                "to": 432,
                "label": "PARALLEL"
            },
            {
                "from": 431,
                "to": 450,
                "label": "EVAL with clause\ncolor_map(.(X15, X16), X17) :- ','(color_region(X15, X17), color_map(X16, X17)).\nand substitutionX15 -> T18,\nX16 -> T19,\nT1 -> .(T18, T19),\nT2 -> T17,\nX17 -> T17,\nT15 -> T18,\nT16 -> T19"
            },
            {
                "from": 431,
                "to": 451,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 432,
                "to": 503,
                "label": "EVAL with clause\ncolor_map([], X139).\nand substitutionT1 -> [],\nT2 -> T141,\nX139 -> T141"
            },
            {
                "from": 432,
                "to": 504,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 450,
                "to": 470,
                "label": "SPLIT 1"
            },
            {
                "from": 450,
                "to": 471,
                "label": "SPLIT 2\nnew knowledge:\nT17 is ground\nreplacements:T19 -> T24"
            },
            {
                "from": 470,
                "to": 472,
                "label": "CASE"
            },
            {
                "from": 471,
                "to": 6,
                "label": "INSTANCE with matching:\nT1 -> T24\nT2 -> T17"
            },
            {
                "from": 472,
                "to": 473,
                "label": "EVAL with clause\ncolor_region(region(X37, X38, X39), X40) :- ','(select(X38, X40, X41), members(X39, X41)).\nand substitutionX37 -> T37,\nX38 -> T41,\nX39 -> T42,\nT18 -> region(T37, T41, T42),\nT17 -> T40,\nX40 -> T40,\nT38 -> T41,\nT39 -> T42"
            },
            {
                "from": 472,
                "to": 474,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 473,
                "to": 475,
                "label": "SPLIT 1"
            },
            {
                "from": 473,
                "to": 476,
                "label": "SPLIT 2\nnew knowledge:\nT41 is ground\nT40 is ground\nT47 is ground\nreplacements:X41 -> T47,\nT42 -> T48"
            },
            {
                "from": 475,
                "to": 477,
                "label": "CASE"
            },
            {
                "from": 476,
                "to": 485,
                "label": "CASE"
            },
            {
                "from": 477,
                "to": 478,
                "label": "PARALLEL"
            },
            {
                "from": 477,
                "to": 479,
                "label": "PARALLEL"
            },
            {
                "from": 478,
                "to": 480,
                "label": "EVAL with clause\nselect(X58, .(X58, X59), X59).\nand substitutionT41 -> T61,\nX58 -> T61,\nX59 -> T62,\nT40 -> .(T61, T62),\nX41 -> T62"
            },
            {
                "from": 478,
                "to": 481,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 479,
                "to": 483,
                "label": "EVAL with clause\nselect(X70, .(X71, X72), .(X71, X73)) :- select(X70, X72, X73).\nand substitutionT41 -> T72,\nX70 -> T72,\nX71 -> T70,\nX72 -> T71,\nT40 -> .(T70, T71),\nX73 -> X74,\nX41 -> .(T70, X74),\nT69 -> T72"
            },
            {
                "from": 479,
                "to": 484,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 480,
                "to": 482,
                "label": "SUCCESS"
            },
            {
                "from": 483,
                "to": 475,
                "label": "INSTANCE with matching:\nT41 -> T72\nT40 -> T71\nX41 -> X74"
            },
            {
                "from": 485,
                "to": 486,
                "label": "PARALLEL"
            },
            {
                "from": 485,
                "to": 487,
                "label": "PARALLEL"
            },
            {
                "from": 486,
                "to": 488,
                "label": "EVAL with clause\nmembers(.(X94, X95), X96) :- ','(member(X94, X96), members(X95, X96)).\nand substitutionX94 -> T95,\nX95 -> T96,\nT48 -> .(T95, T96),\nT47 -> T94,\nX96 -> T94,\nT92 -> T95,\nT93 -> T96"
            },
            {
                "from": 486,
                "to": 489,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 487,
                "to": 500,
                "label": "EVAL with clause\nmembers([], X133).\nand substitutionT48 -> [],\nT47 -> T135,\nX133 -> T135"
            },
            {
                "from": 487,
                "to": 501,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 488,
                "to": 490,
                "label": "SPLIT 1"
            },
            {
                "from": 488,
                "to": 491,
                "label": "SPLIT 2\nnew knowledge:\nT95 is ground\nT94 is ground\nreplacements:T96 -> T101"
            },
            {
                "from": 490,
                "to": 492,
                "label": "CASE"
            },
            {
                "from": 491,
                "to": 476,
                "label": "INSTANCE with matching:\nT48 -> T101\nT47 -> T94"
            },
            {
                "from": 492,
                "to": 493,
                "label": "PARALLEL"
            },
            {
                "from": 492,
                "to": 494,
                "label": "PARALLEL"
            },
            {
                "from": 493,
                "to": 495,
                "label": "EVAL with clause\nmember(X113, .(X113, X114)).\nand substitutionT95 -> T114,\nX113 -> T114,\nX114 -> T115,\nT94 -> .(T114, T115)"
            },
            {
                "from": 493,
                "to": 496,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 494,
                "to": 498,
                "label": "EVAL with clause\nmember(X121, .(X122, X123)) :- member(X121, X123).\nand substitutionT95 -> T125,\nX121 -> T125,\nX122 -> T123,\nX123 -> T124,\nT94 -> .(T123, T124),\nT122 -> T125"
            },
            {
                "from": 494,
                "to": 499,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 495,
                "to": 497,
                "label": "SUCCESS"
            },
            {
                "from": 498,
                "to": 490,
                "label": "INSTANCE with matching:\nT95 -> T125\nT94 -> T124"
            },
            {
                "from": 500,
                "to": 502,
                "label": "SUCCESS"
            },
            {
                "from": 503,
                "to": 505,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(114)
Complex Obligation (AND)

----------------------------------------

(115)
Obligation:
Rules:
f490_out(T124) -> f498_out(T124) :|: TRUE
f498_in(x) -> f490_in(x) :|: TRUE
f490_in(T94) -> f492_in(T94) :|: TRUE
f492_out(x1) -> f490_out(x1) :|: TRUE
f494_out(x2) -> f492_out(x2) :|: TRUE
f493_out(x3) -> f492_out(x3) :|: TRUE
f492_in(x4) -> f494_in(x4) :|: TRUE
f492_in(x5) -> f493_in(x5) :|: TRUE
f494_in(x6) -> f499_in :|: TRUE
f494_in(.(x7, x8)) -> f498_in(x8) :|: TRUE
f498_out(x9) -> f494_out(.(x10, x9)) :|: TRUE
f499_out -> f494_out(x11) :|: TRUE
f6_in(T2) -> f430_in(T2) :|: TRUE
f430_out(x12) -> f6_out(x12) :|: TRUE
f430_in(x13) -> f431_in(x13) :|: TRUE
f432_out(x14) -> f430_out(x14) :|: TRUE
f431_out(x15) -> f430_out(x15) :|: TRUE
f430_in(x16) -> f432_in(x16) :|: TRUE
f431_in(T17) -> f450_in(T17) :|: TRUE
f451_out -> f431_out(x17) :|: TRUE
f450_out(x18) -> f431_out(x18) :|: TRUE
f431_in(x19) -> f451_in :|: TRUE
f471_out(x20) -> f450_out(x20) :|: TRUE
f470_out(x21) -> f471_in(x21) :|: TRUE
f450_in(x22) -> f470_in(x22) :|: TRUE
f470_in(x23) -> f472_in(x23) :|: TRUE
f472_out(x24) -> f470_out(x24) :|: TRUE
f472_in(x25) -> f474_in :|: TRUE
f473_out(T40) -> f472_out(T40) :|: TRUE
f474_out -> f472_out(x26) :|: TRUE
f472_in(x27) -> f473_in(x27) :|: TRUE
f475_out(x28) -> f476_in(x29) :|: TRUE
f473_in(x30) -> f475_in(x30) :|: TRUE
f476_out(x31) -> f473_out(x32) :|: TRUE
f485_out(T47) -> f476_out(T47) :|: TRUE
f476_in(x33) -> f485_in(x33) :|: TRUE
f485_in(x34) -> f486_in(x34) :|: TRUE
f487_out(x35) -> f485_out(x35) :|: TRUE
f486_out(x36) -> f485_out(x36) :|: TRUE
f485_in(x37) -> f487_in(x37) :|: TRUE
f486_in(x38) -> f488_in(x38) :|: TRUE
f486_in(x39) -> f489_in :|: TRUE
f489_out -> f486_out(x40) :|: TRUE
f488_out(x41) -> f486_out(x41) :|: TRUE
f491_out(x42) -> f488_out(x42) :|: TRUE
f488_in(x43) -> f490_in(x43) :|: TRUE
f490_out(x44) -> f491_in(x44) :|: TRUE
Start term: f6_in(T2)

----------------------------------------

(116) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:


----------------------------------------

(117)
TRUE

----------------------------------------

(118)
Obligation:
Rules:
f491_out(T94) -> f488_out(T94) :|: TRUE
f488_in(x) -> f490_in(x) :|: TRUE
f490_out(x1) -> f491_in(x1) :|: TRUE
f495_in -> f495_out :|: TRUE
f496_out -> f493_out(x2) :|: TRUE
f495_out -> f493_out(.(T114, T115)) :|: TRUE
f493_in(.(x3, x4)) -> f495_in :|: TRUE
f493_in(x5) -> f496_in :|: TRUE
f485_out(T47) -> f476_out(T47) :|: TRUE
f476_in(x6) -> f485_in(x6) :|: TRUE
f490_out(T124) -> f498_out(T124) :|: TRUE
f498_in(x7) -> f490_in(x7) :|: TRUE
f486_in(x8) -> f488_in(x8) :|: TRUE
f486_in(x9) -> f489_in :|: TRUE
f489_out -> f486_out(x10) :|: TRUE
f488_out(x11) -> f486_out(x11) :|: TRUE
f491_in(x12) -> f476_in(x12) :|: TRUE
f476_out(x13) -> f491_out(x13) :|: TRUE
f490_in(x14) -> f492_in(x14) :|: TRUE
f492_out(x15) -> f490_out(x15) :|: TRUE
f494_out(x16) -> f492_out(x16) :|: TRUE
f493_out(x17) -> f492_out(x17) :|: TRUE
f492_in(x18) -> f494_in(x18) :|: TRUE
f492_in(x19) -> f493_in(x19) :|: TRUE
f494_in(x20) -> f499_in :|: TRUE
f494_in(.(x21, x22)) -> f498_in(x22) :|: TRUE
f498_out(x23) -> f494_out(.(x24, x23)) :|: TRUE
f499_out -> f494_out(x25) :|: TRUE
f485_in(x26) -> f486_in(x26) :|: TRUE
f487_out(x27) -> f485_out(x27) :|: TRUE
f486_out(x28) -> f485_out(x28) :|: TRUE
f485_in(x29) -> f487_in(x29) :|: TRUE
f6_in(T2) -> f430_in(T2) :|: TRUE
f430_out(x30) -> f6_out(x30) :|: TRUE
f430_in(x31) -> f431_in(x31) :|: TRUE
f432_out(x32) -> f430_out(x32) :|: TRUE
f431_out(x33) -> f430_out(x33) :|: TRUE
f430_in(x34) -> f432_in(x34) :|: TRUE
f431_in(T17) -> f450_in(T17) :|: TRUE
f451_out -> f431_out(x35) :|: TRUE
f450_out(x36) -> f431_out(x36) :|: TRUE
f431_in(x37) -> f451_in :|: TRUE
f471_out(x38) -> f450_out(x38) :|: TRUE
f470_out(x39) -> f471_in(x39) :|: TRUE
f450_in(x40) -> f470_in(x40) :|: TRUE
f470_in(x41) -> f472_in(x41) :|: TRUE
f472_out(x42) -> f470_out(x42) :|: TRUE
f472_in(x43) -> f474_in :|: TRUE
f473_out(T40) -> f472_out(T40) :|: TRUE
f474_out -> f472_out(x44) :|: TRUE
f472_in(x45) -> f473_in(x45) :|: TRUE
f475_out(x46) -> f476_in(x47) :|: TRUE
f473_in(x48) -> f475_in(x48) :|: TRUE
f476_out(x49) -> f473_out(x50) :|: TRUE
Start term: f6_in(T2)

----------------------------------------

(119) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:


----------------------------------------

(120)
TRUE

----------------------------------------

(121)
Obligation:
Rules:
f475_in(T40) -> f477_in(T40) :|: TRUE
f477_out(x) -> f475_out(x) :|: TRUE
f477_in(x1) -> f478_in(x1) :|: TRUE
f478_out(x2) -> f477_out(x2) :|: TRUE
f477_in(x3) -> f479_in(x3) :|: TRUE
f479_out(x4) -> f477_out(x4) :|: TRUE
f483_in(T71) -> f475_in(T71) :|: TRUE
f475_out(x5) -> f483_out(x5) :|: TRUE
f483_out(x6) -> f479_out(.(x7, x6)) :|: TRUE
f479_in(x8) -> f484_in :|: TRUE
f484_out -> f479_out(x9) :|: TRUE
f479_in(.(x10, x11)) -> f483_in(x11) :|: TRUE
f6_in(T2) -> f430_in(T2) :|: TRUE
f430_out(x12) -> f6_out(x12) :|: TRUE
f430_in(x13) -> f431_in(x13) :|: TRUE
f432_out(x14) -> f430_out(x14) :|: TRUE
f431_out(x15) -> f430_out(x15) :|: TRUE
f430_in(x16) -> f432_in(x16) :|: TRUE
f431_in(T17) -> f450_in(T17) :|: TRUE
f451_out -> f431_out(x17) :|: TRUE
f450_out(x18) -> f431_out(x18) :|: TRUE
f431_in(x19) -> f451_in :|: TRUE
f471_out(x20) -> f450_out(x20) :|: TRUE
f470_out(x21) -> f471_in(x21) :|: TRUE
f450_in(x22) -> f470_in(x22) :|: TRUE
f470_in(x23) -> f472_in(x23) :|: TRUE
f472_out(x24) -> f470_out(x24) :|: TRUE
f472_in(x25) -> f474_in :|: TRUE
f473_out(x26) -> f472_out(x26) :|: TRUE
f474_out -> f472_out(x27) :|: TRUE
f472_in(x28) -> f473_in(x28) :|: TRUE
f475_out(x29) -> f476_in(x30) :|: TRUE
f473_in(x31) -> f475_in(x31) :|: TRUE
f476_out(x32) -> f473_out(x33) :|: TRUE
Start term: f6_in(T2)

----------------------------------------

(122) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f475_in(T40) -> f477_in(T40) :|: TRUE
f477_in(x3) -> f479_in(x3) :|: TRUE
f483_in(T71) -> f475_in(T71) :|: TRUE
f479_in(.(x10, x11)) -> f483_in(x11) :|: TRUE


----------------------------------------

(123)
Obligation:
Rules:
f475_in(T40) -> f477_in(T40) :|: TRUE
f477_in(x3) -> f479_in(x3) :|: TRUE
f483_in(T71) -> f475_in(T71) :|: TRUE
f479_in(.(x10, x11)) -> f483_in(x11) :|: TRUE

----------------------------------------

(124) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(125)
Obligation:
Rules:
f483_in(.(x10:0, x11:0)) -> f483_in(x11:0) :|: TRUE

----------------------------------------

(126) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(127)
Obligation:
Rules:
f483_in(.(x10:0, x11:0)) -> f483_in(x11:0) :|: TRUE

----------------------------------------

(128) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f483_in(.(x10:0, x11:0)) -> f483_in(x11:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(129)
Obligation:

Termination digraph:
Nodes:
(1) f483_in(.(x10:0, x11:0)) -> f483_in(x11:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(130) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   .(x1, x2) -> .(x2)

----------------------------------------

(131)
Obligation:
Rules:
f483_in(.(x11:0)) -> f483_in(x11:0) :|: TRUE

----------------------------------------

(132) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f483_in(VARIABLE)
.(VARIABLE)
Removed predefined arithmetic.
----------------------------------------

(133)
Obligation:
Rules:
f483_in(.(x11:0)) -> f483_in(x11:0)

----------------------------------------

(134) IRSwTToQDPProof (SOUND)
Removed the integers and created a QDP-Problem.
----------------------------------------

(135)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f483_in(.(x11:0)) -> f483_in(x11:0)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(136) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*f483_in(.(x11:0)) -> f483_in(x11:0)
The graph contains the following edges 1 > 1


----------------------------------------

(137)
YES

----------------------------------------

(138)
Obligation:
Rules:
f500_out -> f487_out(T135) :|: TRUE
f487_in(T47) -> f501_in :|: TRUE
f501_out -> f487_out(x) :|: TRUE
f487_in(x1) -> f500_in :|: TRUE
f491_out(T94) -> f488_out(T94) :|: TRUE
f488_in(x2) -> f490_in(x2) :|: TRUE
f490_out(x3) -> f491_in(x3) :|: TRUE
f495_in -> f495_out :|: TRUE
f471_out(T17) -> f450_out(T17) :|: TRUE
f470_out(x4) -> f471_in(x4) :|: TRUE
f450_in(x5) -> f470_in(x5) :|: TRUE
f475_out(x6) -> f476_in(x7) :|: TRUE
f473_in(T40) -> f475_in(T40) :|: TRUE
f476_out(x8) -> f473_out(x9) :|: TRUE
f430_in(T2) -> f431_in(T2) :|: TRUE
f432_out(x10) -> f430_out(x10) :|: TRUE
f431_out(x11) -> f430_out(x11) :|: TRUE
f430_in(x12) -> f432_in(x12) :|: TRUE
f486_in(x13) -> f488_in(x13) :|: TRUE
f486_in(x14) -> f489_in :|: TRUE
f489_out -> f486_out(x15) :|: TRUE
f488_out(x16) -> f486_out(x16) :|: TRUE
f490_in(x17) -> f492_in(x17) :|: TRUE
f492_out(x18) -> f490_out(x18) :|: TRUE
f491_in(x19) -> f476_in(x19) :|: TRUE
f476_out(x20) -> f491_out(x20) :|: TRUE
f494_in(x21) -> f499_in :|: TRUE
f494_in(.(T123, T124)) -> f498_in(T124) :|: TRUE
f498_out(x22) -> f494_out(.(x23, x22)) :|: TRUE
f499_out -> f494_out(x24) :|: TRUE
f483_in(T71) -> f475_in(T71) :|: TRUE
f475_out(x25) -> f483_out(x25) :|: TRUE
f483_out(x26) -> f479_out(.(x27, x26)) :|: TRUE
f479_in(x28) -> f484_in :|: TRUE
f484_out -> f479_out(x29) :|: TRUE
f479_in(.(x30, x31)) -> f483_in(x31) :|: TRUE
f6_in(x32) -> f430_in(x32) :|: TRUE
f430_out(x33) -> f6_out(x33) :|: TRUE
f475_in(x34) -> f477_in(x34) :|: TRUE
f477_out(x35) -> f475_out(x35) :|: TRUE
f480_in -> f480_out :|: TRUE
f496_out -> f493_out(x36) :|: TRUE
f495_out -> f493_out(.(T114, T115)) :|: TRUE
f493_in(.(x37, x38)) -> f495_in :|: TRUE
f493_in(x39) -> f496_in :|: TRUE
f477_in(x40) -> f478_in(x40) :|: TRUE
f478_out(x41) -> f477_out(x41) :|: TRUE
f477_in(x42) -> f479_in(x42) :|: TRUE
f479_out(x43) -> f477_out(x43) :|: TRUE
f470_in(x44) -> f472_in(x44) :|: TRUE
f472_out(x45) -> f470_out(x45) :|: TRUE
f485_out(x46) -> f476_out(x46) :|: TRUE
f476_in(x47) -> f485_in(x47) :|: TRUE
f500_in -> f500_out :|: TRUE
f431_in(x48) -> f450_in(x48) :|: TRUE
f451_out -> f431_out(x49) :|: TRUE
f450_out(x50) -> f431_out(x50) :|: TRUE
f431_in(x51) -> f451_in :|: TRUE
f472_in(x52) -> f474_in :|: TRUE
f473_out(x53) -> f472_out(x53) :|: TRUE
f474_out -> f472_out(x54) :|: TRUE
f472_in(x55) -> f473_in(x55) :|: TRUE
f478_in(.(T61, T62)) -> f480_in :|: TRUE
f478_in(x56) -> f481_in :|: TRUE
f481_out -> f478_out(x57) :|: TRUE
f480_out -> f478_out(.(x58, x59)) :|: TRUE
f490_out(x60) -> f498_out(x60) :|: TRUE
f498_in(x61) -> f490_in(x61) :|: TRUE
f6_out(x62) -> f471_out(x62) :|: TRUE
f471_in(x63) -> f6_in(x63) :|: TRUE
f494_out(x64) -> f492_out(x64) :|: TRUE
f493_out(x65) -> f492_out(x65) :|: TRUE
f492_in(x66) -> f494_in(x66) :|: TRUE
f492_in(x67) -> f493_in(x67) :|: TRUE
f485_in(x68) -> f486_in(x68) :|: TRUE
f487_out(x69) -> f485_out(x69) :|: TRUE
f486_out(x70) -> f485_out(x70) :|: TRUE
f485_in(x71) -> f487_in(x71) :|: TRUE
Start term: f6_in(T2)

----------------------------------------

(139) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f500_out -> f487_out(T135) :|: TRUE
f487_in(x1) -> f500_in :|: TRUE
f491_out(T94) -> f488_out(T94) :|: TRUE
f488_in(x2) -> f490_in(x2) :|: TRUE
f490_out(x3) -> f491_in(x3) :|: TRUE
f495_in -> f495_out :|: TRUE
f470_out(x4) -> f471_in(x4) :|: TRUE
f450_in(x5) -> f470_in(x5) :|: TRUE
f475_out(x6) -> f476_in(x7) :|: TRUE
f473_in(T40) -> f475_in(T40) :|: TRUE
f476_out(x8) -> f473_out(x9) :|: TRUE
f430_in(T2) -> f431_in(T2) :|: TRUE
f486_in(x13) -> f488_in(x13) :|: TRUE
f488_out(x16) -> f486_out(x16) :|: TRUE
f490_in(x17) -> f492_in(x17) :|: TRUE
f492_out(x18) -> f490_out(x18) :|: TRUE
f491_in(x19) -> f476_in(x19) :|: TRUE
f476_out(x20) -> f491_out(x20) :|: TRUE
f494_in(.(T123, T124)) -> f498_in(T124) :|: TRUE
f498_out(x22) -> f494_out(.(x23, x22)) :|: TRUE
f483_in(T71) -> f475_in(T71) :|: TRUE
f475_out(x25) -> f483_out(x25) :|: TRUE
f483_out(x26) -> f479_out(.(x27, x26)) :|: TRUE
f479_in(.(x30, x31)) -> f483_in(x31) :|: TRUE
f6_in(x32) -> f430_in(x32) :|: TRUE
f475_in(x34) -> f477_in(x34) :|: TRUE
f477_out(x35) -> f475_out(x35) :|: TRUE
f480_in -> f480_out :|: TRUE
f495_out -> f493_out(.(T114, T115)) :|: TRUE
f493_in(.(x37, x38)) -> f495_in :|: TRUE
f477_in(x40) -> f478_in(x40) :|: TRUE
f478_out(x41) -> f477_out(x41) :|: TRUE
f477_in(x42) -> f479_in(x42) :|: TRUE
f479_out(x43) -> f477_out(x43) :|: TRUE
f470_in(x44) -> f472_in(x44) :|: TRUE
f472_out(x45) -> f470_out(x45) :|: TRUE
f485_out(x46) -> f476_out(x46) :|: TRUE
f476_in(x47) -> f485_in(x47) :|: TRUE
f500_in -> f500_out :|: TRUE
f431_in(x48) -> f450_in(x48) :|: TRUE
f473_out(x53) -> f472_out(x53) :|: TRUE
f472_in(x55) -> f473_in(x55) :|: TRUE
f478_in(.(T61, T62)) -> f480_in :|: TRUE
f480_out -> f478_out(.(x58, x59)) :|: TRUE
f490_out(x60) -> f498_out(x60) :|: TRUE
f498_in(x61) -> f490_in(x61) :|: TRUE
f471_in(x63) -> f6_in(x63) :|: TRUE
f494_out(x64) -> f492_out(x64) :|: TRUE
f493_out(x65) -> f492_out(x65) :|: TRUE
f492_in(x66) -> f494_in(x66) :|: TRUE
f492_in(x67) -> f493_in(x67) :|: TRUE
f485_in(x68) -> f486_in(x68) :|: TRUE
f487_out(x69) -> f485_out(x69) :|: TRUE
f486_out(x70) -> f485_out(x70) :|: TRUE
f485_in(x71) -> f487_in(x71) :|: TRUE


----------------------------------------

(140)
Obligation:
Rules:
f500_out -> f487_out(T135) :|: TRUE
f487_in(x1) -> f500_in :|: TRUE
f491_out(T94) -> f488_out(T94) :|: TRUE
f488_in(x2) -> f490_in(x2) :|: TRUE
f490_out(x3) -> f491_in(x3) :|: TRUE
f495_in -> f495_out :|: TRUE
f470_out(x4) -> f471_in(x4) :|: TRUE
f450_in(x5) -> f470_in(x5) :|: TRUE
f475_out(x6) -> f476_in(x7) :|: TRUE
f473_in(T40) -> f475_in(T40) :|: TRUE
f476_out(x8) -> f473_out(x9) :|: TRUE
f430_in(T2) -> f431_in(T2) :|: TRUE
f486_in(x13) -> f488_in(x13) :|: TRUE
f488_out(x16) -> f486_out(x16) :|: TRUE
f490_in(x17) -> f492_in(x17) :|: TRUE
f492_out(x18) -> f490_out(x18) :|: TRUE
f491_in(x19) -> f476_in(x19) :|: TRUE
f476_out(x20) -> f491_out(x20) :|: TRUE
f494_in(.(T123, T124)) -> f498_in(T124) :|: TRUE
f498_out(x22) -> f494_out(.(x23, x22)) :|: TRUE
f483_in(T71) -> f475_in(T71) :|: TRUE
f475_out(x25) -> f483_out(x25) :|: TRUE
f483_out(x26) -> f479_out(.(x27, x26)) :|: TRUE
f479_in(.(x30, x31)) -> f483_in(x31) :|: TRUE
f6_in(x32) -> f430_in(x32) :|: TRUE
f475_in(x34) -> f477_in(x34) :|: TRUE
f477_out(x35) -> f475_out(x35) :|: TRUE
f480_in -> f480_out :|: TRUE
f495_out -> f493_out(.(T114, T115)) :|: TRUE
f493_in(.(x37, x38)) -> f495_in :|: TRUE
f477_in(x40) -> f478_in(x40) :|: TRUE
f478_out(x41) -> f477_out(x41) :|: TRUE
f477_in(x42) -> f479_in(x42) :|: TRUE
f479_out(x43) -> f477_out(x43) :|: TRUE
f470_in(x44) -> f472_in(x44) :|: TRUE
f472_out(x45) -> f470_out(x45) :|: TRUE
f485_out(x46) -> f476_out(x46) :|: TRUE
f476_in(x47) -> f485_in(x47) :|: TRUE
f500_in -> f500_out :|: TRUE
f431_in(x48) -> f450_in(x48) :|: TRUE
f473_out(x53) -> f472_out(x53) :|: TRUE
f472_in(x55) -> f473_in(x55) :|: TRUE
f478_in(.(T61, T62)) -> f480_in :|: TRUE
f480_out -> f478_out(.(x58, x59)) :|: TRUE
f490_out(x60) -> f498_out(x60) :|: TRUE
f498_in(x61) -> f490_in(x61) :|: TRUE
f471_in(x63) -> f6_in(x63) :|: TRUE
f494_out(x64) -> f492_out(x64) :|: TRUE
f493_out(x65) -> f492_out(x65) :|: TRUE
f492_in(x66) -> f494_in(x66) :|: TRUE
f492_in(x67) -> f493_in(x67) :|: TRUE
f485_in(x68) -> f486_in(x68) :|: TRUE
f487_out(x69) -> f485_out(x69) :|: TRUE
f486_out(x70) -> f485_out(x70) :|: TRUE
f485_in(x71) -> f487_in(x71) :|: TRUE

----------------------------------------

(141) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(142)
Obligation:
Rules:
f477_in(.(x30:0, x31:0)) -> f477_in(x31:0) :|: TRUE
f485_out(x46:0) -> f485_out(x46:0) :|: TRUE
f485_in(x68:0) -> f492_in(x68:0) :|: TRUE
f477_out(x35:0) -> f477_out(.(x27:0, x35:0)) :|: TRUE
f485_out(x) -> f477_in(x1) :|: TRUE
f477_in(.(T61:0, T62:0)) -> f477_out(.(x58:0, x59:0)) :|: TRUE
f492_in(.(x37:0, x38:0)) -> f492_out(.(T114:0, T115:0)) :|: TRUE
f492_out(x18:0) -> f485_in(x18:0) :|: TRUE
f477_out(x2) -> f485_in(x3) :|: TRUE
f492_in(.(T123:0, T124:0)) -> f492_in(T124:0) :|: TRUE
f485_in(x71:0) -> f485_out(T135:0) :|: TRUE
f492_out(x4) -> f492_out(.(x5, x4)) :|: TRUE

----------------------------------------

(143) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(144)
Obligation:
Rules:
f477_in(.(x30:0, x31:0)) -> f477_in(x31:0) :|: TRUE
f485_out(x46:0) -> f485_out(x46:0) :|: TRUE
f485_in(x68:0) -> f492_in(x68:0) :|: TRUE
f477_out(x35:0) -> f477_out(.(x27:0, x35:0)) :|: TRUE
f485_out(x) -> f477_in(x1) :|: TRUE
f477_in(.(T61:0, T62:0)) -> f477_out(.(x58:0, x59:0)) :|: TRUE
f492_in(.(x37:0, x38:0)) -> f492_out(.(T114:0, T115:0)) :|: TRUE
f492_out(x18:0) -> f485_in(x18:0) :|: TRUE
f477_out(x2) -> f485_in(x3) :|: TRUE
f492_in(.(T123:0, T124:0)) -> f492_in(T124:0) :|: TRUE
f485_in(x71:0) -> f485_out(T135:0) :|: TRUE
f492_out(x4) -> f492_out(.(x5, x4)) :|: TRUE

----------------------------------------

(145) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f477_in(.(x30:0, x31:0)) -> f477_in(x31:0) :|: TRUE
(2) f485_out(x46:0) -> f485_out(x46:0) :|: TRUE
(3) f485_in(x68:0) -> f492_in(x68:0) :|: TRUE
(4) f477_out(x35:0) -> f477_out(.(x27:0, x35:0)) :|: TRUE
(5) f485_out(x) -> f477_in(x1) :|: TRUE
(6) f477_in(.(T61:0, T62:0)) -> f477_out(.(x58:0, x59:0)) :|: TRUE
(7) f492_in(.(x37:0, x38:0)) -> f492_out(.(T114:0, T115:0)) :|: TRUE
(8) f492_out(x18:0) -> f485_in(x18:0) :|: TRUE
(9) f477_out(x2) -> f485_in(x3) :|: TRUE
(10) f492_in(.(T123:0, T124:0)) -> f492_in(T124:0) :|: TRUE
(11) f485_in(x71:0) -> f485_out(T135:0) :|: TRUE
(12) f492_out(x4) -> f492_out(.(x5, x4)) :|: TRUE

Arcs:
(1) -> (1), (6)
(2) -> (2), (5)
(3) -> (7), (10)
(4) -> (4), (9)
(5) -> (1), (6)
(6) -> (4), (9)
(7) -> (8), (12)
(8) -> (3), (11)
(9) -> (3), (11)
(10) -> (7), (10)
(11) -> (2), (5)
(12) -> (8), (12)

This digraph is fully evaluated!
----------------------------------------

(146)
Obligation:

Termination digraph:
Nodes:
(1) f477_in(.(x30:0, x31:0)) -> f477_in(x31:0) :|: TRUE
(2) f485_out(x) -> f477_in(x1) :|: TRUE
(3) f485_out(x46:0) -> f485_out(x46:0) :|: TRUE
(4) f485_in(x71:0) -> f485_out(T135:0) :|: TRUE
(5) f492_out(x18:0) -> f485_in(x18:0) :|: TRUE
(6) f492_out(x4) -> f492_out(.(x5, x4)) :|: TRUE
(7) f492_in(.(x37:0, x38:0)) -> f492_out(.(T114:0, T115:0)) :|: TRUE
(8) f492_in(.(T123:0, T124:0)) -> f492_in(T124:0) :|: TRUE
(9) f485_in(x68:0) -> f492_in(x68:0) :|: TRUE
(10) f477_out(x2) -> f485_in(x3) :|: TRUE
(11) f477_out(x35:0) -> f477_out(.(x27:0, x35:0)) :|: TRUE
(12) f477_in(.(T61:0, T62:0)) -> f477_out(.(x58:0, x59:0)) :|: TRUE

Arcs:
(1) -> (1), (12)
(2) -> (1), (12)
(3) -> (2), (3)
(4) -> (2), (3)
(5) -> (4), (9)
(6) -> (5), (6)
(7) -> (5), (6)
(8) -> (7), (8)
(9) -> (7), (8)
(10) -> (4), (9)
(11) -> (10), (11)
(12) -> (10), (11)

This digraph is fully evaluated!

----------------------------------------

(147) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   .(x1, x2) -> .(x2)

----------------------------------------

(148)
Obligation:
Rules:
f477_in(.(x31:0)) -> f477_in(x31:0) :|: TRUE
f485_out(x) -> f477_in(x1) :|: TRUE
f485_out(x46:0) -> f485_out(x46:0) :|: TRUE
f485_in(x71:0) -> f485_out(T135:0) :|: TRUE
f492_out(x18:0) -> f485_in(x18:0) :|: TRUE
f492_out(x4) -> f492_out(.(x4)) :|: TRUE
f492_in(.(x38:0)) -> f492_out(.(T115:0)) :|: TRUE
f492_in(.(T124:0)) -> f492_in(T124:0) :|: TRUE
f485_in(x68:0) -> f492_in(x68:0) :|: TRUE
f477_out(x2) -> f485_in(x3) :|: TRUE
f477_out(x35:0) -> f477_out(.(x35:0)) :|: TRUE
f477_in(.(T62:0)) -> f477_out(.(x59:0)) :|: TRUE
