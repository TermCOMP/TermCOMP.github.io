YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/euB2E.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

fib(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) PiDPToQDPProof [SOUND, 0 ms]
        (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (18) YES


----------------------------------------

(0)
Obligation:
Clauses:

add(0, 0, 0).
add(s(X), Y, s(N)) :- add(X, Y, N).
add(X, s(Y), s(N)) :- add(X, Y, N).
fib(0, 0).
fib(s(0), s(0)).
fib(s(s(X)), N) :- ','(fib(s(X), N1), ','(fib(X, N2), add(N1, N2, N))).


Query: fib(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

fib_in_2: (b,f)

add_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   fib_in_ga(0, 0) -> fib_out_ga(0, 0)
   fib_in_ga(s(0), s(0)) -> fib_out_ga(s(0), s(0))
   fib_in_ga(s(s(X)), N) -> U3_ga(X, N, fib_in_ga(s(X), N1))
   U3_ga(X, N, fib_out_ga(s(X), N1)) -> U4_ga(X, N, N1, fib_in_ga(X, N2))
   U4_ga(X, N, N1, fib_out_ga(X, N2)) -> U5_ga(X, N, add_in_gga(N1, N2, N))
   add_in_gga(0, 0, 0) -> add_out_gga(0, 0, 0)
   add_in_gga(s(X), Y, s(N)) -> U1_gga(X, Y, N, add_in_gga(X, Y, N))
   add_in_gga(X, s(Y), s(N)) -> U2_gga(X, Y, N, add_in_gga(X, Y, N))
   U2_gga(X, Y, N, add_out_gga(X, Y, N)) -> add_out_gga(X, s(Y), s(N))
   U1_gga(X, Y, N, add_out_gga(X, Y, N)) -> add_out_gga(s(X), Y, s(N))
   U5_ga(X, N, add_out_gga(N1, N2, N)) -> fib_out_ga(s(s(X)), N)

The argument filtering Pi contains the following mapping:
fib_in_ga(x1, x2)  =  fib_in_ga(x1)

0  =  0

fib_out_ga(x1, x2)  =  fib_out_ga(x2)

s(x1)  =  s(x1)

U3_ga(x1, x2, x3)  =  U3_ga(x1, x3)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x3, x4)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   fib_in_ga(0, 0) -> fib_out_ga(0, 0)
   fib_in_ga(s(0), s(0)) -> fib_out_ga(s(0), s(0))
   fib_in_ga(s(s(X)), N) -> U3_ga(X, N, fib_in_ga(s(X), N1))
   U3_ga(X, N, fib_out_ga(s(X), N1)) -> U4_ga(X, N, N1, fib_in_ga(X, N2))
   U4_ga(X, N, N1, fib_out_ga(X, N2)) -> U5_ga(X, N, add_in_gga(N1, N2, N))
   add_in_gga(0, 0, 0) -> add_out_gga(0, 0, 0)
   add_in_gga(s(X), Y, s(N)) -> U1_gga(X, Y, N, add_in_gga(X, Y, N))
   add_in_gga(X, s(Y), s(N)) -> U2_gga(X, Y, N, add_in_gga(X, Y, N))
   U2_gga(X, Y, N, add_out_gga(X, Y, N)) -> add_out_gga(X, s(Y), s(N))
   U1_gga(X, Y, N, add_out_gga(X, Y, N)) -> add_out_gga(s(X), Y, s(N))
   U5_ga(X, N, add_out_gga(N1, N2, N)) -> fib_out_ga(s(s(X)), N)

The argument filtering Pi contains the following mapping:
fib_in_ga(x1, x2)  =  fib_in_ga(x1)

0  =  0

fib_out_ga(x1, x2)  =  fib_out_ga(x2)

s(x1)  =  s(x1)

U3_ga(x1, x2, x3)  =  U3_ga(x1, x3)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x3, x4)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x4)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   FIB_IN_GA(s(s(X)), N) -> U3_GA(X, N, fib_in_ga(s(X), N1))
   FIB_IN_GA(s(s(X)), N) -> FIB_IN_GA(s(X), N1)
   U3_GA(X, N, fib_out_ga(s(X), N1)) -> U4_GA(X, N, N1, fib_in_ga(X, N2))
   U3_GA(X, N, fib_out_ga(s(X), N1)) -> FIB_IN_GA(X, N2)
   U4_GA(X, N, N1, fib_out_ga(X, N2)) -> U5_GA(X, N, add_in_gga(N1, N2, N))
   U4_GA(X, N, N1, fib_out_ga(X, N2)) -> ADD_IN_GGA(N1, N2, N)
   ADD_IN_GGA(s(X), Y, s(N)) -> U1_GGA(X, Y, N, add_in_gga(X, Y, N))
   ADD_IN_GGA(s(X), Y, s(N)) -> ADD_IN_GGA(X, Y, N)
   ADD_IN_GGA(X, s(Y), s(N)) -> U2_GGA(X, Y, N, add_in_gga(X, Y, N))
   ADD_IN_GGA(X, s(Y), s(N)) -> ADD_IN_GGA(X, Y, N)

The TRS R consists of the following rules:

   fib_in_ga(0, 0) -> fib_out_ga(0, 0)
   fib_in_ga(s(0), s(0)) -> fib_out_ga(s(0), s(0))
   fib_in_ga(s(s(X)), N) -> U3_ga(X, N, fib_in_ga(s(X), N1))
   U3_ga(X, N, fib_out_ga(s(X), N1)) -> U4_ga(X, N, N1, fib_in_ga(X, N2))
   U4_ga(X, N, N1, fib_out_ga(X, N2)) -> U5_ga(X, N, add_in_gga(N1, N2, N))
   add_in_gga(0, 0, 0) -> add_out_gga(0, 0, 0)
   add_in_gga(s(X), Y, s(N)) -> U1_gga(X, Y, N, add_in_gga(X, Y, N))
   add_in_gga(X, s(Y), s(N)) -> U2_gga(X, Y, N, add_in_gga(X, Y, N))
   U2_gga(X, Y, N, add_out_gga(X, Y, N)) -> add_out_gga(X, s(Y), s(N))
   U1_gga(X, Y, N, add_out_gga(X, Y, N)) -> add_out_gga(s(X), Y, s(N))
   U5_ga(X, N, add_out_gga(N1, N2, N)) -> fib_out_ga(s(s(X)), N)

The argument filtering Pi contains the following mapping:
fib_in_ga(x1, x2)  =  fib_in_ga(x1)

0  =  0

fib_out_ga(x1, x2)  =  fib_out_ga(x2)

s(x1)  =  s(x1)

U3_ga(x1, x2, x3)  =  U3_ga(x1, x3)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x3, x4)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x4)

FIB_IN_GA(x1, x2)  =  FIB_IN_GA(x1)

U3_GA(x1, x2, x3)  =  U3_GA(x1, x3)

U4_GA(x1, x2, x3, x4)  =  U4_GA(x3, x4)

U5_GA(x1, x2, x3)  =  U5_GA(x3)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4)  =  U1_GGA(x4)

U2_GGA(x1, x2, x3, x4)  =  U2_GGA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FIB_IN_GA(s(s(X)), N) -> U3_GA(X, N, fib_in_ga(s(X), N1))
   FIB_IN_GA(s(s(X)), N) -> FIB_IN_GA(s(X), N1)
   U3_GA(X, N, fib_out_ga(s(X), N1)) -> U4_GA(X, N, N1, fib_in_ga(X, N2))
   U3_GA(X, N, fib_out_ga(s(X), N1)) -> FIB_IN_GA(X, N2)
   U4_GA(X, N, N1, fib_out_ga(X, N2)) -> U5_GA(X, N, add_in_gga(N1, N2, N))
   U4_GA(X, N, N1, fib_out_ga(X, N2)) -> ADD_IN_GGA(N1, N2, N)
   ADD_IN_GGA(s(X), Y, s(N)) -> U1_GGA(X, Y, N, add_in_gga(X, Y, N))
   ADD_IN_GGA(s(X), Y, s(N)) -> ADD_IN_GGA(X, Y, N)
   ADD_IN_GGA(X, s(Y), s(N)) -> U2_GGA(X, Y, N, add_in_gga(X, Y, N))
   ADD_IN_GGA(X, s(Y), s(N)) -> ADD_IN_GGA(X, Y, N)

The TRS R consists of the following rules:

   fib_in_ga(0, 0) -> fib_out_ga(0, 0)
   fib_in_ga(s(0), s(0)) -> fib_out_ga(s(0), s(0))
   fib_in_ga(s(s(X)), N) -> U3_ga(X, N, fib_in_ga(s(X), N1))
   U3_ga(X, N, fib_out_ga(s(X), N1)) -> U4_ga(X, N, N1, fib_in_ga(X, N2))
   U4_ga(X, N, N1, fib_out_ga(X, N2)) -> U5_ga(X, N, add_in_gga(N1, N2, N))
   add_in_gga(0, 0, 0) -> add_out_gga(0, 0, 0)
   add_in_gga(s(X), Y, s(N)) -> U1_gga(X, Y, N, add_in_gga(X, Y, N))
   add_in_gga(X, s(Y), s(N)) -> U2_gga(X, Y, N, add_in_gga(X, Y, N))
   U2_gga(X, Y, N, add_out_gga(X, Y, N)) -> add_out_gga(X, s(Y), s(N))
   U1_gga(X, Y, N, add_out_gga(X, Y, N)) -> add_out_gga(s(X), Y, s(N))
   U5_ga(X, N, add_out_gga(N1, N2, N)) -> fib_out_ga(s(s(X)), N)

The argument filtering Pi contains the following mapping:
fib_in_ga(x1, x2)  =  fib_in_ga(x1)

0  =  0

fib_out_ga(x1, x2)  =  fib_out_ga(x2)

s(x1)  =  s(x1)

U3_ga(x1, x2, x3)  =  U3_ga(x1, x3)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x3, x4)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x4)

FIB_IN_GA(x1, x2)  =  FIB_IN_GA(x1)

U3_GA(x1, x2, x3)  =  U3_GA(x1, x3)

U4_GA(x1, x2, x3, x4)  =  U4_GA(x3, x4)

U5_GA(x1, x2, x3)  =  U5_GA(x3)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4)  =  U1_GGA(x4)

U2_GGA(x1, x2, x3, x4)  =  U2_GGA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ADD_IN_GGA(X, s(Y), s(N)) -> ADD_IN_GGA(X, Y, N)
   ADD_IN_GGA(s(X), Y, s(N)) -> ADD_IN_GGA(X, Y, N)

The TRS R consists of the following rules:

   fib_in_ga(0, 0) -> fib_out_ga(0, 0)
   fib_in_ga(s(0), s(0)) -> fib_out_ga(s(0), s(0))
   fib_in_ga(s(s(X)), N) -> U3_ga(X, N, fib_in_ga(s(X), N1))
   U3_ga(X, N, fib_out_ga(s(X), N1)) -> U4_ga(X, N, N1, fib_in_ga(X, N2))
   U4_ga(X, N, N1, fib_out_ga(X, N2)) -> U5_ga(X, N, add_in_gga(N1, N2, N))
   add_in_gga(0, 0, 0) -> add_out_gga(0, 0, 0)
   add_in_gga(s(X), Y, s(N)) -> U1_gga(X, Y, N, add_in_gga(X, Y, N))
   add_in_gga(X, s(Y), s(N)) -> U2_gga(X, Y, N, add_in_gga(X, Y, N))
   U2_gga(X, Y, N, add_out_gga(X, Y, N)) -> add_out_gga(X, s(Y), s(N))
   U1_gga(X, Y, N, add_out_gga(X, Y, N)) -> add_out_gga(s(X), Y, s(N))
   U5_ga(X, N, add_out_gga(N1, N2, N)) -> fib_out_ga(s(s(X)), N)

The argument filtering Pi contains the following mapping:
fib_in_ga(x1, x2)  =  fib_in_ga(x1)

0  =  0

fib_out_ga(x1, x2)  =  fib_out_ga(x2)

s(x1)  =  s(x1)

U3_ga(x1, x2, x3)  =  U3_ga(x1, x3)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x3, x4)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x4)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ADD_IN_GGA(X, s(Y), s(N)) -> ADD_IN_GGA(X, Y, N)
   ADD_IN_GGA(s(X), Y, s(N)) -> ADD_IN_GGA(X, Y, N)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD_IN_GGA(X, s(Y)) -> ADD_IN_GGA(X, Y)
   ADD_IN_GGA(s(X), Y) -> ADD_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ADD_IN_GGA(X, s(Y)) -> ADD_IN_GGA(X, Y)
The graph contains the following edges 1 >= 1, 2 > 2


*ADD_IN_GGA(s(X), Y) -> ADD_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U3_GA(X, N, fib_out_ga(s(X), N1)) -> FIB_IN_GA(X, N2)
   FIB_IN_GA(s(s(X)), N) -> U3_GA(X, N, fib_in_ga(s(X), N1))
   FIB_IN_GA(s(s(X)), N) -> FIB_IN_GA(s(X), N1)

The TRS R consists of the following rules:

   fib_in_ga(0, 0) -> fib_out_ga(0, 0)
   fib_in_ga(s(0), s(0)) -> fib_out_ga(s(0), s(0))
   fib_in_ga(s(s(X)), N) -> U3_ga(X, N, fib_in_ga(s(X), N1))
   U3_ga(X, N, fib_out_ga(s(X), N1)) -> U4_ga(X, N, N1, fib_in_ga(X, N2))
   U4_ga(X, N, N1, fib_out_ga(X, N2)) -> U5_ga(X, N, add_in_gga(N1, N2, N))
   add_in_gga(0, 0, 0) -> add_out_gga(0, 0, 0)
   add_in_gga(s(X), Y, s(N)) -> U1_gga(X, Y, N, add_in_gga(X, Y, N))
   add_in_gga(X, s(Y), s(N)) -> U2_gga(X, Y, N, add_in_gga(X, Y, N))
   U2_gga(X, Y, N, add_out_gga(X, Y, N)) -> add_out_gga(X, s(Y), s(N))
   U1_gga(X, Y, N, add_out_gga(X, Y, N)) -> add_out_gga(s(X), Y, s(N))
   U5_ga(X, N, add_out_gga(N1, N2, N)) -> fib_out_ga(s(s(X)), N)

The argument filtering Pi contains the following mapping:
fib_in_ga(x1, x2)  =  fib_in_ga(x1)

0  =  0

fib_out_ga(x1, x2)  =  fib_out_ga(x2)

s(x1)  =  s(x1)

U3_ga(x1, x2, x3)  =  U3_ga(x1, x3)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x3, x4)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x4)

FIB_IN_GA(x1, x2)  =  FIB_IN_GA(x1)

U3_GA(x1, x2, x3)  =  U3_GA(x1, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GA(X, fib_out_ga(N1)) -> FIB_IN_GA(X)
   FIB_IN_GA(s(s(X))) -> U3_GA(X, fib_in_ga(s(X)))
   FIB_IN_GA(s(s(X))) -> FIB_IN_GA(s(X))

The TRS R consists of the following rules:

   fib_in_ga(0) -> fib_out_ga(0)
   fib_in_ga(s(0)) -> fib_out_ga(s(0))
   fib_in_ga(s(s(X))) -> U3_ga(X, fib_in_ga(s(X)))
   U3_ga(X, fib_out_ga(N1)) -> U4_ga(N1, fib_in_ga(X))
   U4_ga(N1, fib_out_ga(N2)) -> U5_ga(add_in_gga(N1, N2))
   add_in_gga(0, 0) -> add_out_gga(0)
   add_in_gga(s(X), Y) -> U1_gga(add_in_gga(X, Y))
   add_in_gga(X, s(Y)) -> U2_gga(add_in_gga(X, Y))
   U2_gga(add_out_gga(N)) -> add_out_gga(s(N))
   U1_gga(add_out_gga(N)) -> add_out_gga(s(N))
   U5_ga(add_out_gga(N)) -> fib_out_ga(N)

The set Q consists of the following terms:

   fib_in_ga(x0)
   U3_ga(x0, x1)
   U4_ga(x0, x1)
   add_in_gga(x0, x1)
   U2_gga(x0)
   U1_gga(x0)
   U5_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*FIB_IN_GA(s(s(X))) -> U3_GA(X, fib_in_ga(s(X)))
The graph contains the following edges 1 > 1


*FIB_IN_GA(s(s(X))) -> FIB_IN_GA(s(X))
The graph contains the following edges 1 > 1


*U3_GA(X, fib_out_ga(N1)) -> FIB_IN_GA(X)
The graph contains the following edges 1 >= 1


----------------------------------------

(18)
YES
