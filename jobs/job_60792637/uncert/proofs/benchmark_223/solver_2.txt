YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Xy9iv.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

p(g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) PiDPToQDPProof [EQUIVALENT, 0 ms]
(8) QDP
(9) QDPOrderProof [EQUIVALENT, 18 ms]
(10) QDP
(11) DependencyGraphProof [EQUIVALENT, 0 ms]
(12) QDP
(13) UsableRulesProof [EQUIVALENT, 0 ms]
(14) QDP
(15) QReductionProof [EQUIVALENT, 0 ms]
(16) QDP
(17) UsableRulesReductionPairsProof [EQUIVALENT, 1 ms]
(18) QDP
(19) PisEmptyProof [EQUIVALENT, 0 ms]
(20) YES


----------------------------------------

(0)
Obligation:
Clauses:

p(cons(X, nil)).
p(cons(s(s(X)), cons(Y, Xs))) :- ','(p(cons(X, cons(Y, Xs))), p(cons(s(s(s(s(Y)))), Xs))).
p(cons(0, Xs)) :- p(Xs).


Query: p(g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

p_in_1: (b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_g(cons(X, nil)) -> p_out_g(cons(X, nil))
   p_in_g(cons(s(s(X)), cons(Y, Xs))) -> U1_g(X, Y, Xs, p_in_g(cons(X, cons(Y, Xs))))
   p_in_g(cons(0, Xs)) -> U3_g(Xs, p_in_g(Xs))
   U3_g(Xs, p_out_g(Xs)) -> p_out_g(cons(0, Xs))
   U1_g(X, Y, Xs, p_out_g(cons(X, cons(Y, Xs)))) -> U2_g(X, Y, Xs, p_in_g(cons(s(s(s(s(Y)))), Xs)))
   U2_g(X, Y, Xs, p_out_g(cons(s(s(s(s(Y)))), Xs))) -> p_out_g(cons(s(s(X)), cons(Y, Xs)))

Pi is empty.



Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_g(cons(X, nil)) -> p_out_g(cons(X, nil))
   p_in_g(cons(s(s(X)), cons(Y, Xs))) -> U1_g(X, Y, Xs, p_in_g(cons(X, cons(Y, Xs))))
   p_in_g(cons(0, Xs)) -> U3_g(Xs, p_in_g(Xs))
   U3_g(Xs, p_out_g(Xs)) -> p_out_g(cons(0, Xs))
   U1_g(X, Y, Xs, p_out_g(cons(X, cons(Y, Xs)))) -> U2_g(X, Y, Xs, p_in_g(cons(s(s(s(s(Y)))), Xs)))
   U2_g(X, Y, Xs, p_out_g(cons(s(s(s(s(Y)))), Xs))) -> p_out_g(cons(s(s(X)), cons(Y, Xs)))

Pi is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_G(cons(s(s(X)), cons(Y, Xs))) -> U1_G(X, Y, Xs, p_in_g(cons(X, cons(Y, Xs))))
   P_IN_G(cons(s(s(X)), cons(Y, Xs))) -> P_IN_G(cons(X, cons(Y, Xs)))
   P_IN_G(cons(0, Xs)) -> U3_G(Xs, p_in_g(Xs))
   P_IN_G(cons(0, Xs)) -> P_IN_G(Xs)
   U1_G(X, Y, Xs, p_out_g(cons(X, cons(Y, Xs)))) -> U2_G(X, Y, Xs, p_in_g(cons(s(s(s(s(Y)))), Xs)))
   U1_G(X, Y, Xs, p_out_g(cons(X, cons(Y, Xs)))) -> P_IN_G(cons(s(s(s(s(Y)))), Xs))

The TRS R consists of the following rules:

   p_in_g(cons(X, nil)) -> p_out_g(cons(X, nil))
   p_in_g(cons(s(s(X)), cons(Y, Xs))) -> U1_g(X, Y, Xs, p_in_g(cons(X, cons(Y, Xs))))
   p_in_g(cons(0, Xs)) -> U3_g(Xs, p_in_g(Xs))
   U3_g(Xs, p_out_g(Xs)) -> p_out_g(cons(0, Xs))
   U1_g(X, Y, Xs, p_out_g(cons(X, cons(Y, Xs)))) -> U2_g(X, Y, Xs, p_in_g(cons(s(s(s(s(Y)))), Xs)))
   U2_g(X, Y, Xs, p_out_g(cons(s(s(s(s(Y)))), Xs))) -> p_out_g(cons(s(s(X)), cons(Y, Xs)))

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_G(cons(s(s(X)), cons(Y, Xs))) -> U1_G(X, Y, Xs, p_in_g(cons(X, cons(Y, Xs))))
   P_IN_G(cons(s(s(X)), cons(Y, Xs))) -> P_IN_G(cons(X, cons(Y, Xs)))
   P_IN_G(cons(0, Xs)) -> U3_G(Xs, p_in_g(Xs))
   P_IN_G(cons(0, Xs)) -> P_IN_G(Xs)
   U1_G(X, Y, Xs, p_out_g(cons(X, cons(Y, Xs)))) -> U2_G(X, Y, Xs, p_in_g(cons(s(s(s(s(Y)))), Xs)))
   U1_G(X, Y, Xs, p_out_g(cons(X, cons(Y, Xs)))) -> P_IN_G(cons(s(s(s(s(Y)))), Xs))

The TRS R consists of the following rules:

   p_in_g(cons(X, nil)) -> p_out_g(cons(X, nil))
   p_in_g(cons(s(s(X)), cons(Y, Xs))) -> U1_g(X, Y, Xs, p_in_g(cons(X, cons(Y, Xs))))
   p_in_g(cons(0, Xs)) -> U3_g(Xs, p_in_g(Xs))
   U3_g(Xs, p_out_g(Xs)) -> p_out_g(cons(0, Xs))
   U1_g(X, Y, Xs, p_out_g(cons(X, cons(Y, Xs)))) -> U2_g(X, Y, Xs, p_in_g(cons(s(s(s(s(Y)))), Xs)))
   U2_g(X, Y, Xs, p_out_g(cons(s(s(s(s(Y)))), Xs))) -> p_out_g(cons(s(s(X)), cons(Y, Xs)))

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_G(X, Y, Xs, p_out_g(cons(X, cons(Y, Xs)))) -> P_IN_G(cons(s(s(s(s(Y)))), Xs))
   P_IN_G(cons(s(s(X)), cons(Y, Xs))) -> U1_G(X, Y, Xs, p_in_g(cons(X, cons(Y, Xs))))
   P_IN_G(cons(s(s(X)), cons(Y, Xs))) -> P_IN_G(cons(X, cons(Y, Xs)))
   P_IN_G(cons(0, Xs)) -> P_IN_G(Xs)

The TRS R consists of the following rules:

   p_in_g(cons(X, nil)) -> p_out_g(cons(X, nil))
   p_in_g(cons(s(s(X)), cons(Y, Xs))) -> U1_g(X, Y, Xs, p_in_g(cons(X, cons(Y, Xs))))
   p_in_g(cons(0, Xs)) -> U3_g(Xs, p_in_g(Xs))
   U3_g(Xs, p_out_g(Xs)) -> p_out_g(cons(0, Xs))
   U1_g(X, Y, Xs, p_out_g(cons(X, cons(Y, Xs)))) -> U2_g(X, Y, Xs, p_in_g(cons(s(s(s(s(Y)))), Xs)))
   U2_g(X, Y, Xs, p_out_g(cons(s(s(s(s(Y)))), Xs))) -> p_out_g(cons(s(s(X)), cons(Y, Xs)))

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_G(X, Y, Xs, p_out_g(cons(X, cons(Y, Xs)))) -> P_IN_G(cons(s(s(s(s(Y)))), Xs))
   P_IN_G(cons(s(s(X)), cons(Y, Xs))) -> U1_G(X, Y, Xs, p_in_g(cons(X, cons(Y, Xs))))
   P_IN_G(cons(s(s(X)), cons(Y, Xs))) -> P_IN_G(cons(X, cons(Y, Xs)))
   P_IN_G(cons(0, Xs)) -> P_IN_G(Xs)

The TRS R consists of the following rules:

   p_in_g(cons(X, nil)) -> p_out_g(cons(X, nil))
   p_in_g(cons(s(s(X)), cons(Y, Xs))) -> U1_g(X, Y, Xs, p_in_g(cons(X, cons(Y, Xs))))
   p_in_g(cons(0, Xs)) -> U3_g(Xs, p_in_g(Xs))
   U3_g(Xs, p_out_g(Xs)) -> p_out_g(cons(0, Xs))
   U1_g(X, Y, Xs, p_out_g(cons(X, cons(Y, Xs)))) -> U2_g(X, Y, Xs, p_in_g(cons(s(s(s(s(Y)))), Xs)))
   U2_g(X, Y, Xs, p_out_g(cons(s(s(s(s(Y)))), Xs))) -> p_out_g(cons(s(s(X)), cons(Y, Xs)))

The set Q consists of the following terms:

   p_in_g(x0)
   U3_g(x0, x1)
   U1_g(x0, x1, x2, x3)
   U2_g(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   P_IN_G(cons(s(s(X)), cons(Y, Xs))) -> U1_G(X, Y, Xs, p_in_g(cons(X, cons(Y, Xs))))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U1_G_4(x_1, ..., x_4) ) = 2x_3
POL( p_in_g_1(x_1) ) = 0
POL( cons_2(x_1, x_2) ) = x_2 + 1
POL( s_1(x_1) ) = 0
POL( U1_g_4(x_1, ..., x_4) ) = 2x_1 + 2x_2 + 2
POL( 0 ) = 2
POL( U3_g_2(x_1, x_2) ) = 2
POL( U2_g_4(x_1, ..., x_4) ) = max{0, 2x_2 + 2x_3 - 2}
POL( nil ) = 0
POL( p_out_g_1(x_1) ) = 1
POL( P_IN_G_1(x_1) ) = max{0, 2x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_G(X, Y, Xs, p_out_g(cons(X, cons(Y, Xs)))) -> P_IN_G(cons(s(s(s(s(Y)))), Xs))
   P_IN_G(cons(s(s(X)), cons(Y, Xs))) -> P_IN_G(cons(X, cons(Y, Xs)))
   P_IN_G(cons(0, Xs)) -> P_IN_G(Xs)

The TRS R consists of the following rules:

   p_in_g(cons(X, nil)) -> p_out_g(cons(X, nil))
   p_in_g(cons(s(s(X)), cons(Y, Xs))) -> U1_g(X, Y, Xs, p_in_g(cons(X, cons(Y, Xs))))
   p_in_g(cons(0, Xs)) -> U3_g(Xs, p_in_g(Xs))
   U3_g(Xs, p_out_g(Xs)) -> p_out_g(cons(0, Xs))
   U1_g(X, Y, Xs, p_out_g(cons(X, cons(Y, Xs)))) -> U2_g(X, Y, Xs, p_in_g(cons(s(s(s(s(Y)))), Xs)))
   U2_g(X, Y, Xs, p_out_g(cons(s(s(s(s(Y)))), Xs))) -> p_out_g(cons(s(s(X)), cons(Y, Xs)))

The set Q consists of the following terms:

   p_in_g(x0)
   U3_g(x0, x1)
   U1_g(x0, x1, x2, x3)
   U2_g(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_G(cons(0, Xs)) -> P_IN_G(Xs)
   P_IN_G(cons(s(s(X)), cons(Y, Xs))) -> P_IN_G(cons(X, cons(Y, Xs)))

The TRS R consists of the following rules:

   p_in_g(cons(X, nil)) -> p_out_g(cons(X, nil))
   p_in_g(cons(s(s(X)), cons(Y, Xs))) -> U1_g(X, Y, Xs, p_in_g(cons(X, cons(Y, Xs))))
   p_in_g(cons(0, Xs)) -> U3_g(Xs, p_in_g(Xs))
   U3_g(Xs, p_out_g(Xs)) -> p_out_g(cons(0, Xs))
   U1_g(X, Y, Xs, p_out_g(cons(X, cons(Y, Xs)))) -> U2_g(X, Y, Xs, p_in_g(cons(s(s(s(s(Y)))), Xs)))
   U2_g(X, Y, Xs, p_out_g(cons(s(s(s(s(Y)))), Xs))) -> p_out_g(cons(s(s(X)), cons(Y, Xs)))

The set Q consists of the following terms:

   p_in_g(x0)
   U3_g(x0, x1)
   U1_g(x0, x1, x2, x3)
   U2_g(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_G(cons(0, Xs)) -> P_IN_G(Xs)
   P_IN_G(cons(s(s(X)), cons(Y, Xs))) -> P_IN_G(cons(X, cons(Y, Xs)))

R is empty.
The set Q consists of the following terms:

   p_in_g(x0)
   U3_g(x0, x1)
   U1_g(x0, x1, x2, x3)
   U2_g(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   p_in_g(x0)
   U3_g(x0, x1)
   U1_g(x0, x1, x2, x3)
   U2_g(x0, x1, x2, x3)


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_G(cons(0, Xs)) -> P_IN_G(Xs)
   P_IN_G(cons(s(s(X)), cons(Y, Xs))) -> P_IN_G(cons(X, cons(Y, Xs)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   P_IN_G(cons(0, Xs)) -> P_IN_G(Xs)
   P_IN_G(cons(s(s(X)), cons(Y, Xs))) -> P_IN_G(cons(X, cons(Y, Xs)))
No rules are removed from R.

Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(P_IN_G(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = x_1 + 2*x_2
   POL(s(x_1)) = 2*x_1


----------------------------------------

(18)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(20)
YES
