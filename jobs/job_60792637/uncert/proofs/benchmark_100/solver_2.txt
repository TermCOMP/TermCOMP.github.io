YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/NKBhp.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

q(g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) PiDPToQDPProof [EQUIVALENT, 0 ms]
(10) QDP
(11) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Clauses:

q(X) :- p(X, 0).
p(0, X1).
p(s(X), Y) :- p(X, s(Y)).


Query: q(g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

q_in_1: (b)

p_in_2: (b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   q_in_g(X) -> U1_g(X, p_in_gg(X, 0))
   p_in_gg(0, X1) -> p_out_gg(0, X1)
   p_in_gg(s(X), Y) -> U2_gg(X, Y, p_in_gg(X, s(Y)))
   U2_gg(X, Y, p_out_gg(X, s(Y))) -> p_out_gg(s(X), Y)
   U1_g(X, p_out_gg(X, 0)) -> q_out_g(X)

Pi is empty.



Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   q_in_g(X) -> U1_g(X, p_in_gg(X, 0))
   p_in_gg(0, X1) -> p_out_gg(0, X1)
   p_in_gg(s(X), Y) -> U2_gg(X, Y, p_in_gg(X, s(Y)))
   U2_gg(X, Y, p_out_gg(X, s(Y))) -> p_out_gg(s(X), Y)
   U1_g(X, p_out_gg(X, 0)) -> q_out_g(X)

Pi is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   Q_IN_G(X) -> U1_G(X, p_in_gg(X, 0))
   Q_IN_G(X) -> P_IN_GG(X, 0)
   P_IN_GG(s(X), Y) -> U2_GG(X, Y, p_in_gg(X, s(Y)))
   P_IN_GG(s(X), Y) -> P_IN_GG(X, s(Y))

The TRS R consists of the following rules:

   q_in_g(X) -> U1_g(X, p_in_gg(X, 0))
   p_in_gg(0, X1) -> p_out_gg(0, X1)
   p_in_gg(s(X), Y) -> U2_gg(X, Y, p_in_gg(X, s(Y)))
   U2_gg(X, Y, p_out_gg(X, s(Y))) -> p_out_gg(s(X), Y)
   U1_g(X, p_out_gg(X, 0)) -> q_out_g(X)

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   Q_IN_G(X) -> U1_G(X, p_in_gg(X, 0))
   Q_IN_G(X) -> P_IN_GG(X, 0)
   P_IN_GG(s(X), Y) -> U2_GG(X, Y, p_in_gg(X, s(Y)))
   P_IN_GG(s(X), Y) -> P_IN_GG(X, s(Y))

The TRS R consists of the following rules:

   q_in_g(X) -> U1_g(X, p_in_gg(X, 0))
   p_in_gg(0, X1) -> p_out_gg(0, X1)
   p_in_gg(s(X), Y) -> U2_gg(X, Y, p_in_gg(X, s(Y)))
   U2_gg(X, Y, p_out_gg(X, s(Y))) -> p_out_gg(s(X), Y)
   U1_g(X, p_out_gg(X, 0)) -> q_out_g(X)

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GG(s(X), Y) -> P_IN_GG(X, s(Y))

The TRS R consists of the following rules:

   q_in_g(X) -> U1_g(X, p_in_gg(X, 0))
   p_in_gg(0, X1) -> p_out_gg(0, X1)
   p_in_gg(s(X), Y) -> U2_gg(X, Y, p_in_gg(X, s(Y)))
   U2_gg(X, Y, p_out_gg(X, s(Y))) -> p_out_gg(s(X), Y)
   U1_g(X, p_out_gg(X, 0)) -> q_out_g(X)

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GG(s(X), Y) -> P_IN_GG(X, s(Y))

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GG(s(X), Y) -> P_IN_GG(X, s(Y))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*P_IN_GG(s(X), Y) -> P_IN_GG(X, s(Y))
The graph contains the following edges 1 > 1


----------------------------------------

(12)
YES
