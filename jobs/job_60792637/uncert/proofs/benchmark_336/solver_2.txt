YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ogmn9.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

palindrome(g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) PiDPToQDPProof [EQUIVALENT, 0 ms]
(10) QDP
(11) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Clauses:

palindrome(Xs) :- reverse(Xs, Xs).
reverse(X1s, X2s) :- reverse3(X1s, [], X2s).
reverse3(.(X, X1s), X2s, Ys) :- reverse3(X1s, .(X, X2s), Ys).
reverse3([], Xs, Xs).


Query: palindrome(g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

palindrome_in_1: (b)

reverse_in_2: (b,b)

reverse3_in_3: (b,b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   palindrome_in_g(Xs) -> U1_g(Xs, reverse_in_gg(Xs, Xs))
   reverse_in_gg(X1s, X2s) -> U2_gg(X1s, X2s, reverse3_in_ggg(X1s, [], X2s))
   reverse3_in_ggg(.(X, X1s), X2s, Ys) -> U3_ggg(X, X1s, X2s, Ys, reverse3_in_ggg(X1s, .(X, X2s), Ys))
   reverse3_in_ggg([], Xs, Xs) -> reverse3_out_ggg([], Xs, Xs)
   U3_ggg(X, X1s, X2s, Ys, reverse3_out_ggg(X1s, .(X, X2s), Ys)) -> reverse3_out_ggg(.(X, X1s), X2s, Ys)
   U2_gg(X1s, X2s, reverse3_out_ggg(X1s, [], X2s)) -> reverse_out_gg(X1s, X2s)
   U1_g(Xs, reverse_out_gg(Xs, Xs)) -> palindrome_out_g(Xs)

The argument filtering Pi contains the following mapping:
palindrome_in_g(x1)  =  palindrome_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

reverse_in_gg(x1, x2)  =  reverse_in_gg(x1, x2)

U2_gg(x1, x2, x3)  =  U2_gg(x3)

reverse3_in_ggg(x1, x2, x3)  =  reverse3_in_ggg(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U3_ggg(x1, x2, x3, x4, x5)  =  U3_ggg(x5)

[]  =  []

reverse3_out_ggg(x1, x2, x3)  =  reverse3_out_ggg

reverse_out_gg(x1, x2)  =  reverse_out_gg

palindrome_out_g(x1)  =  palindrome_out_g





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   palindrome_in_g(Xs) -> U1_g(Xs, reverse_in_gg(Xs, Xs))
   reverse_in_gg(X1s, X2s) -> U2_gg(X1s, X2s, reverse3_in_ggg(X1s, [], X2s))
   reverse3_in_ggg(.(X, X1s), X2s, Ys) -> U3_ggg(X, X1s, X2s, Ys, reverse3_in_ggg(X1s, .(X, X2s), Ys))
   reverse3_in_ggg([], Xs, Xs) -> reverse3_out_ggg([], Xs, Xs)
   U3_ggg(X, X1s, X2s, Ys, reverse3_out_ggg(X1s, .(X, X2s), Ys)) -> reverse3_out_ggg(.(X, X1s), X2s, Ys)
   U2_gg(X1s, X2s, reverse3_out_ggg(X1s, [], X2s)) -> reverse_out_gg(X1s, X2s)
   U1_g(Xs, reverse_out_gg(Xs, Xs)) -> palindrome_out_g(Xs)

The argument filtering Pi contains the following mapping:
palindrome_in_g(x1)  =  palindrome_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

reverse_in_gg(x1, x2)  =  reverse_in_gg(x1, x2)

U2_gg(x1, x2, x3)  =  U2_gg(x3)

reverse3_in_ggg(x1, x2, x3)  =  reverse3_in_ggg(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U3_ggg(x1, x2, x3, x4, x5)  =  U3_ggg(x5)

[]  =  []

reverse3_out_ggg(x1, x2, x3)  =  reverse3_out_ggg

reverse_out_gg(x1, x2)  =  reverse_out_gg

palindrome_out_g(x1)  =  palindrome_out_g



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   PALINDROME_IN_G(Xs) -> U1_G(Xs, reverse_in_gg(Xs, Xs))
   PALINDROME_IN_G(Xs) -> REVERSE_IN_GG(Xs, Xs)
   REVERSE_IN_GG(X1s, X2s) -> U2_GG(X1s, X2s, reverse3_in_ggg(X1s, [], X2s))
   REVERSE_IN_GG(X1s, X2s) -> REVERSE3_IN_GGG(X1s, [], X2s)
   REVERSE3_IN_GGG(.(X, X1s), X2s, Ys) -> U3_GGG(X, X1s, X2s, Ys, reverse3_in_ggg(X1s, .(X, X2s), Ys))
   REVERSE3_IN_GGG(.(X, X1s), X2s, Ys) -> REVERSE3_IN_GGG(X1s, .(X, X2s), Ys)

The TRS R consists of the following rules:

   palindrome_in_g(Xs) -> U1_g(Xs, reverse_in_gg(Xs, Xs))
   reverse_in_gg(X1s, X2s) -> U2_gg(X1s, X2s, reverse3_in_ggg(X1s, [], X2s))
   reverse3_in_ggg(.(X, X1s), X2s, Ys) -> U3_ggg(X, X1s, X2s, Ys, reverse3_in_ggg(X1s, .(X, X2s), Ys))
   reverse3_in_ggg([], Xs, Xs) -> reverse3_out_ggg([], Xs, Xs)
   U3_ggg(X, X1s, X2s, Ys, reverse3_out_ggg(X1s, .(X, X2s), Ys)) -> reverse3_out_ggg(.(X, X1s), X2s, Ys)
   U2_gg(X1s, X2s, reverse3_out_ggg(X1s, [], X2s)) -> reverse_out_gg(X1s, X2s)
   U1_g(Xs, reverse_out_gg(Xs, Xs)) -> palindrome_out_g(Xs)

The argument filtering Pi contains the following mapping:
palindrome_in_g(x1)  =  palindrome_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

reverse_in_gg(x1, x2)  =  reverse_in_gg(x1, x2)

U2_gg(x1, x2, x3)  =  U2_gg(x3)

reverse3_in_ggg(x1, x2, x3)  =  reverse3_in_ggg(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U3_ggg(x1, x2, x3, x4, x5)  =  U3_ggg(x5)

[]  =  []

reverse3_out_ggg(x1, x2, x3)  =  reverse3_out_ggg

reverse_out_gg(x1, x2)  =  reverse_out_gg

palindrome_out_g(x1)  =  palindrome_out_g

PALINDROME_IN_G(x1)  =  PALINDROME_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x2)

REVERSE_IN_GG(x1, x2)  =  REVERSE_IN_GG(x1, x2)

U2_GG(x1, x2, x3)  =  U2_GG(x3)

REVERSE3_IN_GGG(x1, x2, x3)  =  REVERSE3_IN_GGG(x1, x2, x3)

U3_GGG(x1, x2, x3, x4, x5)  =  U3_GGG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PALINDROME_IN_G(Xs) -> U1_G(Xs, reverse_in_gg(Xs, Xs))
   PALINDROME_IN_G(Xs) -> REVERSE_IN_GG(Xs, Xs)
   REVERSE_IN_GG(X1s, X2s) -> U2_GG(X1s, X2s, reverse3_in_ggg(X1s, [], X2s))
   REVERSE_IN_GG(X1s, X2s) -> REVERSE3_IN_GGG(X1s, [], X2s)
   REVERSE3_IN_GGG(.(X, X1s), X2s, Ys) -> U3_GGG(X, X1s, X2s, Ys, reverse3_in_ggg(X1s, .(X, X2s), Ys))
   REVERSE3_IN_GGG(.(X, X1s), X2s, Ys) -> REVERSE3_IN_GGG(X1s, .(X, X2s), Ys)

The TRS R consists of the following rules:

   palindrome_in_g(Xs) -> U1_g(Xs, reverse_in_gg(Xs, Xs))
   reverse_in_gg(X1s, X2s) -> U2_gg(X1s, X2s, reverse3_in_ggg(X1s, [], X2s))
   reverse3_in_ggg(.(X, X1s), X2s, Ys) -> U3_ggg(X, X1s, X2s, Ys, reverse3_in_ggg(X1s, .(X, X2s), Ys))
   reverse3_in_ggg([], Xs, Xs) -> reverse3_out_ggg([], Xs, Xs)
   U3_ggg(X, X1s, X2s, Ys, reverse3_out_ggg(X1s, .(X, X2s), Ys)) -> reverse3_out_ggg(.(X, X1s), X2s, Ys)
   U2_gg(X1s, X2s, reverse3_out_ggg(X1s, [], X2s)) -> reverse_out_gg(X1s, X2s)
   U1_g(Xs, reverse_out_gg(Xs, Xs)) -> palindrome_out_g(Xs)

The argument filtering Pi contains the following mapping:
palindrome_in_g(x1)  =  palindrome_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

reverse_in_gg(x1, x2)  =  reverse_in_gg(x1, x2)

U2_gg(x1, x2, x3)  =  U2_gg(x3)

reverse3_in_ggg(x1, x2, x3)  =  reverse3_in_ggg(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U3_ggg(x1, x2, x3, x4, x5)  =  U3_ggg(x5)

[]  =  []

reverse3_out_ggg(x1, x2, x3)  =  reverse3_out_ggg

reverse_out_gg(x1, x2)  =  reverse_out_gg

palindrome_out_g(x1)  =  palindrome_out_g

PALINDROME_IN_G(x1)  =  PALINDROME_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x2)

REVERSE_IN_GG(x1, x2)  =  REVERSE_IN_GG(x1, x2)

U2_GG(x1, x2, x3)  =  U2_GG(x3)

REVERSE3_IN_GGG(x1, x2, x3)  =  REVERSE3_IN_GGG(x1, x2, x3)

U3_GGG(x1, x2, x3, x4, x5)  =  U3_GGG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 5 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REVERSE3_IN_GGG(.(X, X1s), X2s, Ys) -> REVERSE3_IN_GGG(X1s, .(X, X2s), Ys)

The TRS R consists of the following rules:

   palindrome_in_g(Xs) -> U1_g(Xs, reverse_in_gg(Xs, Xs))
   reverse_in_gg(X1s, X2s) -> U2_gg(X1s, X2s, reverse3_in_ggg(X1s, [], X2s))
   reverse3_in_ggg(.(X, X1s), X2s, Ys) -> U3_ggg(X, X1s, X2s, Ys, reverse3_in_ggg(X1s, .(X, X2s), Ys))
   reverse3_in_ggg([], Xs, Xs) -> reverse3_out_ggg([], Xs, Xs)
   U3_ggg(X, X1s, X2s, Ys, reverse3_out_ggg(X1s, .(X, X2s), Ys)) -> reverse3_out_ggg(.(X, X1s), X2s, Ys)
   U2_gg(X1s, X2s, reverse3_out_ggg(X1s, [], X2s)) -> reverse_out_gg(X1s, X2s)
   U1_g(Xs, reverse_out_gg(Xs, Xs)) -> palindrome_out_g(Xs)

The argument filtering Pi contains the following mapping:
palindrome_in_g(x1)  =  palindrome_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

reverse_in_gg(x1, x2)  =  reverse_in_gg(x1, x2)

U2_gg(x1, x2, x3)  =  U2_gg(x3)

reverse3_in_ggg(x1, x2, x3)  =  reverse3_in_ggg(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U3_ggg(x1, x2, x3, x4, x5)  =  U3_ggg(x5)

[]  =  []

reverse3_out_ggg(x1, x2, x3)  =  reverse3_out_ggg

reverse_out_gg(x1, x2)  =  reverse_out_gg

palindrome_out_g(x1)  =  palindrome_out_g

REVERSE3_IN_GGG(x1, x2, x3)  =  REVERSE3_IN_GGG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REVERSE3_IN_GGG(.(X, X1s), X2s, Ys) -> REVERSE3_IN_GGG(X1s, .(X, X2s), Ys)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVERSE3_IN_GGG(.(X, X1s), X2s, Ys) -> REVERSE3_IN_GGG(X1s, .(X, X2s), Ys)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*REVERSE3_IN_GGG(.(X, X1s), X2s, Ys) -> REVERSE3_IN_GGG(X1s, .(X, X2s), Ys)
The graph contains the following edges 1 > 1, 3 >= 3


----------------------------------------

(12)
YES
