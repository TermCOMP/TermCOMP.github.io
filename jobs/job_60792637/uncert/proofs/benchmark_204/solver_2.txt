YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ZfyH4.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

f(g,a,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) PiDPToQDPProof [SOUND, 0 ms]
(8) QDP
(9) MRRProof [EQUIVALENT, 18 ms]
(10) QDP
(11) PisEmptyProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Clauses:

f(0, Y, 0).
f(s(X), Y, Z) :- ','(f(X, Y, U), f(U, Y, Z)).


Query: f(g,a,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

f_in_3: (b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   f_in_gaa(0, Y, 0) -> f_out_gaa(0, Y, 0)
   f_in_gaa(s(X), Y, Z) -> U1_gaa(X, Y, Z, f_in_gaa(X, Y, U))
   U1_gaa(X, Y, Z, f_out_gaa(X, Y, U)) -> U2_gaa(X, Y, Z, U, f_in_gaa(U, Y, Z))
   U2_gaa(X, Y, Z, U, f_out_gaa(U, Y, Z)) -> f_out_gaa(s(X), Y, Z)

The argument filtering Pi contains the following mapping:
f_in_gaa(x1, x2, x3)  =  f_in_gaa(x1)

0  =  0

f_out_gaa(x1, x2, x3)  =  f_out_gaa(x1, x3)

s(x1)  =  s(x1)

U1_gaa(x1, x2, x3, x4)  =  U1_gaa(x1, x4)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x1, x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   f_in_gaa(0, Y, 0) -> f_out_gaa(0, Y, 0)
   f_in_gaa(s(X), Y, Z) -> U1_gaa(X, Y, Z, f_in_gaa(X, Y, U))
   U1_gaa(X, Y, Z, f_out_gaa(X, Y, U)) -> U2_gaa(X, Y, Z, U, f_in_gaa(U, Y, Z))
   U2_gaa(X, Y, Z, U, f_out_gaa(U, Y, Z)) -> f_out_gaa(s(X), Y, Z)

The argument filtering Pi contains the following mapping:
f_in_gaa(x1, x2, x3)  =  f_in_gaa(x1)

0  =  0

f_out_gaa(x1, x2, x3)  =  f_out_gaa(x1, x3)

s(x1)  =  s(x1)

U1_gaa(x1, x2, x3, x4)  =  U1_gaa(x1, x4)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x1, x5)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   F_IN_GAA(s(X), Y, Z) -> U1_GAA(X, Y, Z, f_in_gaa(X, Y, U))
   F_IN_GAA(s(X), Y, Z) -> F_IN_GAA(X, Y, U)
   U1_GAA(X, Y, Z, f_out_gaa(X, Y, U)) -> U2_GAA(X, Y, Z, U, f_in_gaa(U, Y, Z))
   U1_GAA(X, Y, Z, f_out_gaa(X, Y, U)) -> F_IN_GAA(U, Y, Z)

The TRS R consists of the following rules:

   f_in_gaa(0, Y, 0) -> f_out_gaa(0, Y, 0)
   f_in_gaa(s(X), Y, Z) -> U1_gaa(X, Y, Z, f_in_gaa(X, Y, U))
   U1_gaa(X, Y, Z, f_out_gaa(X, Y, U)) -> U2_gaa(X, Y, Z, U, f_in_gaa(U, Y, Z))
   U2_gaa(X, Y, Z, U, f_out_gaa(U, Y, Z)) -> f_out_gaa(s(X), Y, Z)

The argument filtering Pi contains the following mapping:
f_in_gaa(x1, x2, x3)  =  f_in_gaa(x1)

0  =  0

f_out_gaa(x1, x2, x3)  =  f_out_gaa(x1, x3)

s(x1)  =  s(x1)

U1_gaa(x1, x2, x3, x4)  =  U1_gaa(x1, x4)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x1, x5)

F_IN_GAA(x1, x2, x3)  =  F_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4)  =  U1_GAA(x1, x4)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x1, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   F_IN_GAA(s(X), Y, Z) -> U1_GAA(X, Y, Z, f_in_gaa(X, Y, U))
   F_IN_GAA(s(X), Y, Z) -> F_IN_GAA(X, Y, U)
   U1_GAA(X, Y, Z, f_out_gaa(X, Y, U)) -> U2_GAA(X, Y, Z, U, f_in_gaa(U, Y, Z))
   U1_GAA(X, Y, Z, f_out_gaa(X, Y, U)) -> F_IN_GAA(U, Y, Z)

The TRS R consists of the following rules:

   f_in_gaa(0, Y, 0) -> f_out_gaa(0, Y, 0)
   f_in_gaa(s(X), Y, Z) -> U1_gaa(X, Y, Z, f_in_gaa(X, Y, U))
   U1_gaa(X, Y, Z, f_out_gaa(X, Y, U)) -> U2_gaa(X, Y, Z, U, f_in_gaa(U, Y, Z))
   U2_gaa(X, Y, Z, U, f_out_gaa(U, Y, Z)) -> f_out_gaa(s(X), Y, Z)

The argument filtering Pi contains the following mapping:
f_in_gaa(x1, x2, x3)  =  f_in_gaa(x1)

0  =  0

f_out_gaa(x1, x2, x3)  =  f_out_gaa(x1, x3)

s(x1)  =  s(x1)

U1_gaa(x1, x2, x3, x4)  =  U1_gaa(x1, x4)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x1, x5)

F_IN_GAA(x1, x2, x3)  =  F_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4)  =  U1_GAA(x1, x4)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x1, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GAA(X, Y, Z, f_out_gaa(X, Y, U)) -> F_IN_GAA(U, Y, Z)
   F_IN_GAA(s(X), Y, Z) -> U1_GAA(X, Y, Z, f_in_gaa(X, Y, U))
   F_IN_GAA(s(X), Y, Z) -> F_IN_GAA(X, Y, U)

The TRS R consists of the following rules:

   f_in_gaa(0, Y, 0) -> f_out_gaa(0, Y, 0)
   f_in_gaa(s(X), Y, Z) -> U1_gaa(X, Y, Z, f_in_gaa(X, Y, U))
   U1_gaa(X, Y, Z, f_out_gaa(X, Y, U)) -> U2_gaa(X, Y, Z, U, f_in_gaa(U, Y, Z))
   U2_gaa(X, Y, Z, U, f_out_gaa(U, Y, Z)) -> f_out_gaa(s(X), Y, Z)

The argument filtering Pi contains the following mapping:
f_in_gaa(x1, x2, x3)  =  f_in_gaa(x1)

0  =  0

f_out_gaa(x1, x2, x3)  =  f_out_gaa(x1, x3)

s(x1)  =  s(x1)

U1_gaa(x1, x2, x3, x4)  =  U1_gaa(x1, x4)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x1, x5)

F_IN_GAA(x1, x2, x3)  =  F_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4)  =  U1_GAA(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAA(X, f_out_gaa(X, U)) -> F_IN_GAA(U)
   F_IN_GAA(s(X)) -> U1_GAA(X, f_in_gaa(X))
   F_IN_GAA(s(X)) -> F_IN_GAA(X)

The TRS R consists of the following rules:

   f_in_gaa(0) -> f_out_gaa(0, 0)
   f_in_gaa(s(X)) -> U1_gaa(X, f_in_gaa(X))
   U1_gaa(X, f_out_gaa(X, U)) -> U2_gaa(X, f_in_gaa(U))
   U2_gaa(X, f_out_gaa(U, Z)) -> f_out_gaa(s(X), Z)

The set Q consists of the following terms:

   f_in_gaa(x0)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U1_GAA(X, f_out_gaa(X, U)) -> F_IN_GAA(U)
   F_IN_GAA(s(X)) -> U1_GAA(X, f_in_gaa(X))
   F_IN_GAA(s(X)) -> F_IN_GAA(X)

Strictly oriented rules of the TRS R:

   f_in_gaa(s(X)) -> U1_gaa(X, f_in_gaa(X))

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(F_IN_GAA(x_1)) = 1 + 2*x_1
   POL(U1_GAA(x_1, x_2)) = 2 + x_1 + x_2
   POL(U1_gaa(x_1, x_2)) = 2 + x_1 + x_2
   POL(U2_gaa(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(f_in_gaa(x_1)) = 2*x_1
   POL(f_out_gaa(x_1, x_2)) = x_1 + 2*x_2
   POL(s(x_1)) = 2 + 2*x_1


----------------------------------------

(10)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   f_in_gaa(0) -> f_out_gaa(0, 0)
   U1_gaa(X, f_out_gaa(X, U)) -> U2_gaa(X, f_in_gaa(U))
   U2_gaa(X, f_out_gaa(U, Z)) -> f_out_gaa(s(X), Z)

The set Q consists of the following terms:

   f_in_gaa(x0)
   U1_gaa(x0, x1)
   U2_gaa(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(12)
YES
