YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/FEjUw.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

parse(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 16 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) PiDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) PiDP
        (24) PiDPToQDPProof [SOUND, 0 ms]
        (25) QDP
        (26) MRRProof [EQUIVALENT, 21 ms]
        (27) QDP
        (28) PisEmptyProof [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
Clauses:

parse(Xs, T) :- ','(app(As, .(a, .(s(A, B, C), .(b, Bs))), Xs), ','(app(As, .(s(a, s(A, B, C), b), Bs), Ys), parse(Ys, T))).
parse(Xs, T) :- ','(app(As, .(a, .(s(A, B), .(b, Bs))), Xs), ','(app(As, .(s(a, s(A, B), b), Bs), Ys), parse(Ys, T))).
parse(Xs, T) :- ','(app(As, .(a, .(b, Bs)), Xs), ','(app(As, .(s(a, b), Bs), Ys), parse(Ys, T))).
parse(.(s(A, B), []), s(A, B)).
parse(.(s(A, B, C), []), s(A, B, C)).
app([], X, X).
app(.(X, Xs), Ys, .(X, Zs)) :- app(Xs, Ys, Zs).


Query: parse(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

parse_in_2: (b,f)

app_in_3: (f,f,b) (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   parse_in_ga(Xs, T) -> U1_ga(Xs, T, app_in_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs))
   app_in_aag([], X, X) -> app_out_aag([], X, X)
   app_in_aag(.(X, Xs), Ys, .(X, Zs)) -> U10_aag(X, Xs, Ys, Zs, app_in_aag(Xs, Ys, Zs))
   U10_aag(X, Xs, Ys, Zs, app_out_aag(Xs, Ys, Zs)) -> app_out_aag(.(X, Xs), Ys, .(X, Zs))
   U1_ga(Xs, T, app_out_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs)) -> U2_ga(Xs, T, app_in_gga(As, .(s(a, s(A, B, C), b), Bs), Ys))
   app_in_gga([], X, X) -> app_out_gga([], X, X)
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U10_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   U10_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U2_ga(Xs, T, app_out_gga(As, .(s(a, s(A, B, C), b), Bs), Ys)) -> U3_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(Xs, T) -> U4_ga(Xs, T, app_in_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs))
   U4_ga(Xs, T, app_out_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs)) -> U5_ga(Xs, T, app_in_gga(As, .(s(a, s(A, B), b), Bs), Ys))
   U5_ga(Xs, T, app_out_gga(As, .(s(a, s(A, B), b), Bs), Ys)) -> U6_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(Xs, T) -> U7_ga(Xs, T, app_in_aag(As, .(a, .(b, Bs)), Xs))
   U7_ga(Xs, T, app_out_aag(As, .(a, .(b, Bs)), Xs)) -> U8_ga(Xs, T, app_in_gga(As, .(s(a, b), Bs), Ys))
   U8_ga(Xs, T, app_out_gga(As, .(s(a, b), Bs), Ys)) -> U9_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(.(s(A, B), []), s(A, B)) -> parse_out_ga(.(s(A, B), []), s(A, B))
   parse_in_ga(.(s(A, B, C), []), s(A, B, C)) -> parse_out_ga(.(s(A, B, C), []), s(A, B, C))
   U9_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)
   U6_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)
   U3_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)

The argument filtering Pi contains the following mapping:
parse_in_ga(x1, x2)  =  parse_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

app_in_aag(x1, x2, x3)  =  app_in_aag(x3)

app_out_aag(x1, x2, x3)  =  app_out_aag(x1, x2)

.(x1, x2)  =  .(x1, x2)

U10_aag(x1, x2, x3, x4, x5)  =  U10_aag(x1, x5)

a  =  a

s(x1, x2, x3)  =  s(x1, x2, x3)

b  =  b

U2_ga(x1, x2, x3)  =  U2_ga(x3)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x3)

U10_gga(x1, x2, x3, x4, x5)  =  U10_gga(x1, x5)

U3_ga(x1, x2, x3)  =  U3_ga(x3)

U4_ga(x1, x2, x3)  =  U4_ga(x3)

s(x1, x2)  =  s(x1, x2)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

U6_ga(x1, x2, x3)  =  U6_ga(x3)

U7_ga(x1, x2, x3)  =  U7_ga(x3)

U8_ga(x1, x2, x3)  =  U8_ga(x3)

U9_ga(x1, x2, x3)  =  U9_ga(x3)

parse_out_ga(x1, x2)  =  parse_out_ga(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   parse_in_ga(Xs, T) -> U1_ga(Xs, T, app_in_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs))
   app_in_aag([], X, X) -> app_out_aag([], X, X)
   app_in_aag(.(X, Xs), Ys, .(X, Zs)) -> U10_aag(X, Xs, Ys, Zs, app_in_aag(Xs, Ys, Zs))
   U10_aag(X, Xs, Ys, Zs, app_out_aag(Xs, Ys, Zs)) -> app_out_aag(.(X, Xs), Ys, .(X, Zs))
   U1_ga(Xs, T, app_out_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs)) -> U2_ga(Xs, T, app_in_gga(As, .(s(a, s(A, B, C), b), Bs), Ys))
   app_in_gga([], X, X) -> app_out_gga([], X, X)
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U10_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   U10_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U2_ga(Xs, T, app_out_gga(As, .(s(a, s(A, B, C), b), Bs), Ys)) -> U3_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(Xs, T) -> U4_ga(Xs, T, app_in_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs))
   U4_ga(Xs, T, app_out_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs)) -> U5_ga(Xs, T, app_in_gga(As, .(s(a, s(A, B), b), Bs), Ys))
   U5_ga(Xs, T, app_out_gga(As, .(s(a, s(A, B), b), Bs), Ys)) -> U6_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(Xs, T) -> U7_ga(Xs, T, app_in_aag(As, .(a, .(b, Bs)), Xs))
   U7_ga(Xs, T, app_out_aag(As, .(a, .(b, Bs)), Xs)) -> U8_ga(Xs, T, app_in_gga(As, .(s(a, b), Bs), Ys))
   U8_ga(Xs, T, app_out_gga(As, .(s(a, b), Bs), Ys)) -> U9_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(.(s(A, B), []), s(A, B)) -> parse_out_ga(.(s(A, B), []), s(A, B))
   parse_in_ga(.(s(A, B, C), []), s(A, B, C)) -> parse_out_ga(.(s(A, B, C), []), s(A, B, C))
   U9_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)
   U6_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)
   U3_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)

The argument filtering Pi contains the following mapping:
parse_in_ga(x1, x2)  =  parse_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

app_in_aag(x1, x2, x3)  =  app_in_aag(x3)

app_out_aag(x1, x2, x3)  =  app_out_aag(x1, x2)

.(x1, x2)  =  .(x1, x2)

U10_aag(x1, x2, x3, x4, x5)  =  U10_aag(x1, x5)

a  =  a

s(x1, x2, x3)  =  s(x1, x2, x3)

b  =  b

U2_ga(x1, x2, x3)  =  U2_ga(x3)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x3)

U10_gga(x1, x2, x3, x4, x5)  =  U10_gga(x1, x5)

U3_ga(x1, x2, x3)  =  U3_ga(x3)

U4_ga(x1, x2, x3)  =  U4_ga(x3)

s(x1, x2)  =  s(x1, x2)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

U6_ga(x1, x2, x3)  =  U6_ga(x3)

U7_ga(x1, x2, x3)  =  U7_ga(x3)

U8_ga(x1, x2, x3)  =  U8_ga(x3)

U9_ga(x1, x2, x3)  =  U9_ga(x3)

parse_out_ga(x1, x2)  =  parse_out_ga(x2)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   PARSE_IN_GA(Xs, T) -> U1_GA(Xs, T, app_in_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs))
   PARSE_IN_GA(Xs, T) -> APP_IN_AAG(As, .(a, .(s(A, B, C), .(b, Bs))), Xs)
   APP_IN_AAG(.(X, Xs), Ys, .(X, Zs)) -> U10_AAG(X, Xs, Ys, Zs, app_in_aag(Xs, Ys, Zs))
   APP_IN_AAG(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_AAG(Xs, Ys, Zs)
   U1_GA(Xs, T, app_out_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs)) -> U2_GA(Xs, T, app_in_gga(As, .(s(a, s(A, B, C), b), Bs), Ys))
   U1_GA(Xs, T, app_out_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs)) -> APP_IN_GGA(As, .(s(a, s(A, B, C), b), Bs), Ys)
   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> U10_GGA(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGA(Xs, Ys, Zs)
   U2_GA(Xs, T, app_out_gga(As, .(s(a, s(A, B, C), b), Bs), Ys)) -> U3_GA(Xs, T, parse_in_ga(Ys, T))
   U2_GA(Xs, T, app_out_gga(As, .(s(a, s(A, B, C), b), Bs), Ys)) -> PARSE_IN_GA(Ys, T)
   PARSE_IN_GA(Xs, T) -> U4_GA(Xs, T, app_in_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs))
   PARSE_IN_GA(Xs, T) -> APP_IN_AAG(As, .(a, .(s(A, B), .(b, Bs))), Xs)
   U4_GA(Xs, T, app_out_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs)) -> U5_GA(Xs, T, app_in_gga(As, .(s(a, s(A, B), b), Bs), Ys))
   U4_GA(Xs, T, app_out_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs)) -> APP_IN_GGA(As, .(s(a, s(A, B), b), Bs), Ys)
   U5_GA(Xs, T, app_out_gga(As, .(s(a, s(A, B), b), Bs), Ys)) -> U6_GA(Xs, T, parse_in_ga(Ys, T))
   U5_GA(Xs, T, app_out_gga(As, .(s(a, s(A, B), b), Bs), Ys)) -> PARSE_IN_GA(Ys, T)
   PARSE_IN_GA(Xs, T) -> U7_GA(Xs, T, app_in_aag(As, .(a, .(b, Bs)), Xs))
   PARSE_IN_GA(Xs, T) -> APP_IN_AAG(As, .(a, .(b, Bs)), Xs)
   U7_GA(Xs, T, app_out_aag(As, .(a, .(b, Bs)), Xs)) -> U8_GA(Xs, T, app_in_gga(As, .(s(a, b), Bs), Ys))
   U7_GA(Xs, T, app_out_aag(As, .(a, .(b, Bs)), Xs)) -> APP_IN_GGA(As, .(s(a, b), Bs), Ys)
   U8_GA(Xs, T, app_out_gga(As, .(s(a, b), Bs), Ys)) -> U9_GA(Xs, T, parse_in_ga(Ys, T))
   U8_GA(Xs, T, app_out_gga(As, .(s(a, b), Bs), Ys)) -> PARSE_IN_GA(Ys, T)

The TRS R consists of the following rules:

   parse_in_ga(Xs, T) -> U1_ga(Xs, T, app_in_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs))
   app_in_aag([], X, X) -> app_out_aag([], X, X)
   app_in_aag(.(X, Xs), Ys, .(X, Zs)) -> U10_aag(X, Xs, Ys, Zs, app_in_aag(Xs, Ys, Zs))
   U10_aag(X, Xs, Ys, Zs, app_out_aag(Xs, Ys, Zs)) -> app_out_aag(.(X, Xs), Ys, .(X, Zs))
   U1_ga(Xs, T, app_out_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs)) -> U2_ga(Xs, T, app_in_gga(As, .(s(a, s(A, B, C), b), Bs), Ys))
   app_in_gga([], X, X) -> app_out_gga([], X, X)
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U10_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   U10_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U2_ga(Xs, T, app_out_gga(As, .(s(a, s(A, B, C), b), Bs), Ys)) -> U3_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(Xs, T) -> U4_ga(Xs, T, app_in_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs))
   U4_ga(Xs, T, app_out_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs)) -> U5_ga(Xs, T, app_in_gga(As, .(s(a, s(A, B), b), Bs), Ys))
   U5_ga(Xs, T, app_out_gga(As, .(s(a, s(A, B), b), Bs), Ys)) -> U6_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(Xs, T) -> U7_ga(Xs, T, app_in_aag(As, .(a, .(b, Bs)), Xs))
   U7_ga(Xs, T, app_out_aag(As, .(a, .(b, Bs)), Xs)) -> U8_ga(Xs, T, app_in_gga(As, .(s(a, b), Bs), Ys))
   U8_ga(Xs, T, app_out_gga(As, .(s(a, b), Bs), Ys)) -> U9_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(.(s(A, B), []), s(A, B)) -> parse_out_ga(.(s(A, B), []), s(A, B))
   parse_in_ga(.(s(A, B, C), []), s(A, B, C)) -> parse_out_ga(.(s(A, B, C), []), s(A, B, C))
   U9_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)
   U6_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)
   U3_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)

The argument filtering Pi contains the following mapping:
parse_in_ga(x1, x2)  =  parse_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

app_in_aag(x1, x2, x3)  =  app_in_aag(x3)

app_out_aag(x1, x2, x3)  =  app_out_aag(x1, x2)

.(x1, x2)  =  .(x1, x2)

U10_aag(x1, x2, x3, x4, x5)  =  U10_aag(x1, x5)

a  =  a

s(x1, x2, x3)  =  s(x1, x2, x3)

b  =  b

U2_ga(x1, x2, x3)  =  U2_ga(x3)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x3)

U10_gga(x1, x2, x3, x4, x5)  =  U10_gga(x1, x5)

U3_ga(x1, x2, x3)  =  U3_ga(x3)

U4_ga(x1, x2, x3)  =  U4_ga(x3)

s(x1, x2)  =  s(x1, x2)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

U6_ga(x1, x2, x3)  =  U6_ga(x3)

U7_ga(x1, x2, x3)  =  U7_ga(x3)

U8_ga(x1, x2, x3)  =  U8_ga(x3)

U9_ga(x1, x2, x3)  =  U9_ga(x3)

parse_out_ga(x1, x2)  =  parse_out_ga(x2)

PARSE_IN_GA(x1, x2)  =  PARSE_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

APP_IN_AAG(x1, x2, x3)  =  APP_IN_AAG(x3)

U10_AAG(x1, x2, x3, x4, x5)  =  U10_AAG(x1, x5)

U2_GA(x1, x2, x3)  =  U2_GA(x3)

APP_IN_GGA(x1, x2, x3)  =  APP_IN_GGA(x1, x2)

U10_GGA(x1, x2, x3, x4, x5)  =  U10_GGA(x1, x5)

U3_GA(x1, x2, x3)  =  U3_GA(x3)

U4_GA(x1, x2, x3)  =  U4_GA(x3)

U5_GA(x1, x2, x3)  =  U5_GA(x3)

U6_GA(x1, x2, x3)  =  U6_GA(x3)

U7_GA(x1, x2, x3)  =  U7_GA(x3)

U8_GA(x1, x2, x3)  =  U8_GA(x3)

U9_GA(x1, x2, x3)  =  U9_GA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PARSE_IN_GA(Xs, T) -> U1_GA(Xs, T, app_in_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs))
   PARSE_IN_GA(Xs, T) -> APP_IN_AAG(As, .(a, .(s(A, B, C), .(b, Bs))), Xs)
   APP_IN_AAG(.(X, Xs), Ys, .(X, Zs)) -> U10_AAG(X, Xs, Ys, Zs, app_in_aag(Xs, Ys, Zs))
   APP_IN_AAG(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_AAG(Xs, Ys, Zs)
   U1_GA(Xs, T, app_out_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs)) -> U2_GA(Xs, T, app_in_gga(As, .(s(a, s(A, B, C), b), Bs), Ys))
   U1_GA(Xs, T, app_out_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs)) -> APP_IN_GGA(As, .(s(a, s(A, B, C), b), Bs), Ys)
   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> U10_GGA(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGA(Xs, Ys, Zs)
   U2_GA(Xs, T, app_out_gga(As, .(s(a, s(A, B, C), b), Bs), Ys)) -> U3_GA(Xs, T, parse_in_ga(Ys, T))
   U2_GA(Xs, T, app_out_gga(As, .(s(a, s(A, B, C), b), Bs), Ys)) -> PARSE_IN_GA(Ys, T)
   PARSE_IN_GA(Xs, T) -> U4_GA(Xs, T, app_in_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs))
   PARSE_IN_GA(Xs, T) -> APP_IN_AAG(As, .(a, .(s(A, B), .(b, Bs))), Xs)
   U4_GA(Xs, T, app_out_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs)) -> U5_GA(Xs, T, app_in_gga(As, .(s(a, s(A, B), b), Bs), Ys))
   U4_GA(Xs, T, app_out_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs)) -> APP_IN_GGA(As, .(s(a, s(A, B), b), Bs), Ys)
   U5_GA(Xs, T, app_out_gga(As, .(s(a, s(A, B), b), Bs), Ys)) -> U6_GA(Xs, T, parse_in_ga(Ys, T))
   U5_GA(Xs, T, app_out_gga(As, .(s(a, s(A, B), b), Bs), Ys)) -> PARSE_IN_GA(Ys, T)
   PARSE_IN_GA(Xs, T) -> U7_GA(Xs, T, app_in_aag(As, .(a, .(b, Bs)), Xs))
   PARSE_IN_GA(Xs, T) -> APP_IN_AAG(As, .(a, .(b, Bs)), Xs)
   U7_GA(Xs, T, app_out_aag(As, .(a, .(b, Bs)), Xs)) -> U8_GA(Xs, T, app_in_gga(As, .(s(a, b), Bs), Ys))
   U7_GA(Xs, T, app_out_aag(As, .(a, .(b, Bs)), Xs)) -> APP_IN_GGA(As, .(s(a, b), Bs), Ys)
   U8_GA(Xs, T, app_out_gga(As, .(s(a, b), Bs), Ys)) -> U9_GA(Xs, T, parse_in_ga(Ys, T))
   U8_GA(Xs, T, app_out_gga(As, .(s(a, b), Bs), Ys)) -> PARSE_IN_GA(Ys, T)

The TRS R consists of the following rules:

   parse_in_ga(Xs, T) -> U1_ga(Xs, T, app_in_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs))
   app_in_aag([], X, X) -> app_out_aag([], X, X)
   app_in_aag(.(X, Xs), Ys, .(X, Zs)) -> U10_aag(X, Xs, Ys, Zs, app_in_aag(Xs, Ys, Zs))
   U10_aag(X, Xs, Ys, Zs, app_out_aag(Xs, Ys, Zs)) -> app_out_aag(.(X, Xs), Ys, .(X, Zs))
   U1_ga(Xs, T, app_out_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs)) -> U2_ga(Xs, T, app_in_gga(As, .(s(a, s(A, B, C), b), Bs), Ys))
   app_in_gga([], X, X) -> app_out_gga([], X, X)
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U10_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   U10_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U2_ga(Xs, T, app_out_gga(As, .(s(a, s(A, B, C), b), Bs), Ys)) -> U3_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(Xs, T) -> U4_ga(Xs, T, app_in_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs))
   U4_ga(Xs, T, app_out_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs)) -> U5_ga(Xs, T, app_in_gga(As, .(s(a, s(A, B), b), Bs), Ys))
   U5_ga(Xs, T, app_out_gga(As, .(s(a, s(A, B), b), Bs), Ys)) -> U6_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(Xs, T) -> U7_ga(Xs, T, app_in_aag(As, .(a, .(b, Bs)), Xs))
   U7_ga(Xs, T, app_out_aag(As, .(a, .(b, Bs)), Xs)) -> U8_ga(Xs, T, app_in_gga(As, .(s(a, b), Bs), Ys))
   U8_ga(Xs, T, app_out_gga(As, .(s(a, b), Bs), Ys)) -> U9_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(.(s(A, B), []), s(A, B)) -> parse_out_ga(.(s(A, B), []), s(A, B))
   parse_in_ga(.(s(A, B, C), []), s(A, B, C)) -> parse_out_ga(.(s(A, B, C), []), s(A, B, C))
   U9_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)
   U6_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)
   U3_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)

The argument filtering Pi contains the following mapping:
parse_in_ga(x1, x2)  =  parse_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

app_in_aag(x1, x2, x3)  =  app_in_aag(x3)

app_out_aag(x1, x2, x3)  =  app_out_aag(x1, x2)

.(x1, x2)  =  .(x1, x2)

U10_aag(x1, x2, x3, x4, x5)  =  U10_aag(x1, x5)

a  =  a

s(x1, x2, x3)  =  s(x1, x2, x3)

b  =  b

U2_ga(x1, x2, x3)  =  U2_ga(x3)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x3)

U10_gga(x1, x2, x3, x4, x5)  =  U10_gga(x1, x5)

U3_ga(x1, x2, x3)  =  U3_ga(x3)

U4_ga(x1, x2, x3)  =  U4_ga(x3)

s(x1, x2)  =  s(x1, x2)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

U6_ga(x1, x2, x3)  =  U6_ga(x3)

U7_ga(x1, x2, x3)  =  U7_ga(x3)

U8_ga(x1, x2, x3)  =  U8_ga(x3)

U9_ga(x1, x2, x3)  =  U9_ga(x3)

parse_out_ga(x1, x2)  =  parse_out_ga(x2)

PARSE_IN_GA(x1, x2)  =  PARSE_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

APP_IN_AAG(x1, x2, x3)  =  APP_IN_AAG(x3)

U10_AAG(x1, x2, x3, x4, x5)  =  U10_AAG(x1, x5)

U2_GA(x1, x2, x3)  =  U2_GA(x3)

APP_IN_GGA(x1, x2, x3)  =  APP_IN_GGA(x1, x2)

U10_GGA(x1, x2, x3, x4, x5)  =  U10_GGA(x1, x5)

U3_GA(x1, x2, x3)  =  U3_GA(x3)

U4_GA(x1, x2, x3)  =  U4_GA(x3)

U5_GA(x1, x2, x3)  =  U5_GA(x3)

U6_GA(x1, x2, x3)  =  U6_GA(x3)

U7_GA(x1, x2, x3)  =  U7_GA(x3)

U8_GA(x1, x2, x3)  =  U8_GA(x3)

U9_GA(x1, x2, x3)  =  U9_GA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 11 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   parse_in_ga(Xs, T) -> U1_ga(Xs, T, app_in_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs))
   app_in_aag([], X, X) -> app_out_aag([], X, X)
   app_in_aag(.(X, Xs), Ys, .(X, Zs)) -> U10_aag(X, Xs, Ys, Zs, app_in_aag(Xs, Ys, Zs))
   U10_aag(X, Xs, Ys, Zs, app_out_aag(Xs, Ys, Zs)) -> app_out_aag(.(X, Xs), Ys, .(X, Zs))
   U1_ga(Xs, T, app_out_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs)) -> U2_ga(Xs, T, app_in_gga(As, .(s(a, s(A, B, C), b), Bs), Ys))
   app_in_gga([], X, X) -> app_out_gga([], X, X)
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U10_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   U10_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U2_ga(Xs, T, app_out_gga(As, .(s(a, s(A, B, C), b), Bs), Ys)) -> U3_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(Xs, T) -> U4_ga(Xs, T, app_in_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs))
   U4_ga(Xs, T, app_out_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs)) -> U5_ga(Xs, T, app_in_gga(As, .(s(a, s(A, B), b), Bs), Ys))
   U5_ga(Xs, T, app_out_gga(As, .(s(a, s(A, B), b), Bs), Ys)) -> U6_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(Xs, T) -> U7_ga(Xs, T, app_in_aag(As, .(a, .(b, Bs)), Xs))
   U7_ga(Xs, T, app_out_aag(As, .(a, .(b, Bs)), Xs)) -> U8_ga(Xs, T, app_in_gga(As, .(s(a, b), Bs), Ys))
   U8_ga(Xs, T, app_out_gga(As, .(s(a, b), Bs), Ys)) -> U9_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(.(s(A, B), []), s(A, B)) -> parse_out_ga(.(s(A, B), []), s(A, B))
   parse_in_ga(.(s(A, B, C), []), s(A, B, C)) -> parse_out_ga(.(s(A, B, C), []), s(A, B, C))
   U9_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)
   U6_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)
   U3_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)

The argument filtering Pi contains the following mapping:
parse_in_ga(x1, x2)  =  parse_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

app_in_aag(x1, x2, x3)  =  app_in_aag(x3)

app_out_aag(x1, x2, x3)  =  app_out_aag(x1, x2)

.(x1, x2)  =  .(x1, x2)

U10_aag(x1, x2, x3, x4, x5)  =  U10_aag(x1, x5)

a  =  a

s(x1, x2, x3)  =  s(x1, x2, x3)

b  =  b

U2_ga(x1, x2, x3)  =  U2_ga(x3)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x3)

U10_gga(x1, x2, x3, x4, x5)  =  U10_gga(x1, x5)

U3_ga(x1, x2, x3)  =  U3_ga(x3)

U4_ga(x1, x2, x3)  =  U4_ga(x3)

s(x1, x2)  =  s(x1, x2)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

U6_ga(x1, x2, x3)  =  U6_ga(x3)

U7_ga(x1, x2, x3)  =  U7_ga(x3)

U8_ga(x1, x2, x3)  =  U8_ga(x3)

U9_ga(x1, x2, x3)  =  U9_ga(x3)

parse_out_ga(x1, x2)  =  parse_out_ga(x2)

APP_IN_GGA(x1, x2, x3)  =  APP_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGA(Xs, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

APP_IN_GGA(x1, x2, x3)  =  APP_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP_IN_GGA(.(X, Xs), Ys) -> APP_IN_GGA(Xs, Ys)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP_IN_GGA(.(X, Xs), Ys) -> APP_IN_GGA(Xs, Ys)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_AAG(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_AAG(Xs, Ys, Zs)

The TRS R consists of the following rules:

   parse_in_ga(Xs, T) -> U1_ga(Xs, T, app_in_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs))
   app_in_aag([], X, X) -> app_out_aag([], X, X)
   app_in_aag(.(X, Xs), Ys, .(X, Zs)) -> U10_aag(X, Xs, Ys, Zs, app_in_aag(Xs, Ys, Zs))
   U10_aag(X, Xs, Ys, Zs, app_out_aag(Xs, Ys, Zs)) -> app_out_aag(.(X, Xs), Ys, .(X, Zs))
   U1_ga(Xs, T, app_out_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs)) -> U2_ga(Xs, T, app_in_gga(As, .(s(a, s(A, B, C), b), Bs), Ys))
   app_in_gga([], X, X) -> app_out_gga([], X, X)
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U10_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   U10_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U2_ga(Xs, T, app_out_gga(As, .(s(a, s(A, B, C), b), Bs), Ys)) -> U3_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(Xs, T) -> U4_ga(Xs, T, app_in_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs))
   U4_ga(Xs, T, app_out_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs)) -> U5_ga(Xs, T, app_in_gga(As, .(s(a, s(A, B), b), Bs), Ys))
   U5_ga(Xs, T, app_out_gga(As, .(s(a, s(A, B), b), Bs), Ys)) -> U6_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(Xs, T) -> U7_ga(Xs, T, app_in_aag(As, .(a, .(b, Bs)), Xs))
   U7_ga(Xs, T, app_out_aag(As, .(a, .(b, Bs)), Xs)) -> U8_ga(Xs, T, app_in_gga(As, .(s(a, b), Bs), Ys))
   U8_ga(Xs, T, app_out_gga(As, .(s(a, b), Bs), Ys)) -> U9_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(.(s(A, B), []), s(A, B)) -> parse_out_ga(.(s(A, B), []), s(A, B))
   parse_in_ga(.(s(A, B, C), []), s(A, B, C)) -> parse_out_ga(.(s(A, B, C), []), s(A, B, C))
   U9_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)
   U6_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)
   U3_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)

The argument filtering Pi contains the following mapping:
parse_in_ga(x1, x2)  =  parse_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

app_in_aag(x1, x2, x3)  =  app_in_aag(x3)

app_out_aag(x1, x2, x3)  =  app_out_aag(x1, x2)

.(x1, x2)  =  .(x1, x2)

U10_aag(x1, x2, x3, x4, x5)  =  U10_aag(x1, x5)

a  =  a

s(x1, x2, x3)  =  s(x1, x2, x3)

b  =  b

U2_ga(x1, x2, x3)  =  U2_ga(x3)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x3)

U10_gga(x1, x2, x3, x4, x5)  =  U10_gga(x1, x5)

U3_ga(x1, x2, x3)  =  U3_ga(x3)

U4_ga(x1, x2, x3)  =  U4_ga(x3)

s(x1, x2)  =  s(x1, x2)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

U6_ga(x1, x2, x3)  =  U6_ga(x3)

U7_ga(x1, x2, x3)  =  U7_ga(x3)

U8_ga(x1, x2, x3)  =  U8_ga(x3)

U9_ga(x1, x2, x3)  =  U9_ga(x3)

parse_out_ga(x1, x2)  =  parse_out_ga(x2)

APP_IN_AAG(x1, x2, x3)  =  APP_IN_AAG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_AAG(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_AAG(Xs, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

APP_IN_AAG(x1, x2, x3)  =  APP_IN_AAG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP_IN_AAG(.(X, Zs)) -> APP_IN_AAG(Zs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP_IN_AAG(.(X, Zs)) -> APP_IN_AAG(Zs)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(Xs, T, app_out_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs)) -> U2_GA(Xs, T, app_in_gga(As, .(s(a, s(A, B, C), b), Bs), Ys))
   U2_GA(Xs, T, app_out_gga(As, .(s(a, s(A, B, C), b), Bs), Ys)) -> PARSE_IN_GA(Ys, T)
   PARSE_IN_GA(Xs, T) -> U1_GA(Xs, T, app_in_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs))
   PARSE_IN_GA(Xs, T) -> U4_GA(Xs, T, app_in_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs))
   U4_GA(Xs, T, app_out_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs)) -> U5_GA(Xs, T, app_in_gga(As, .(s(a, s(A, B), b), Bs), Ys))
   U5_GA(Xs, T, app_out_gga(As, .(s(a, s(A, B), b), Bs), Ys)) -> PARSE_IN_GA(Ys, T)
   PARSE_IN_GA(Xs, T) -> U7_GA(Xs, T, app_in_aag(As, .(a, .(b, Bs)), Xs))
   U7_GA(Xs, T, app_out_aag(As, .(a, .(b, Bs)), Xs)) -> U8_GA(Xs, T, app_in_gga(As, .(s(a, b), Bs), Ys))
   U8_GA(Xs, T, app_out_gga(As, .(s(a, b), Bs), Ys)) -> PARSE_IN_GA(Ys, T)

The TRS R consists of the following rules:

   parse_in_ga(Xs, T) -> U1_ga(Xs, T, app_in_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs))
   app_in_aag([], X, X) -> app_out_aag([], X, X)
   app_in_aag(.(X, Xs), Ys, .(X, Zs)) -> U10_aag(X, Xs, Ys, Zs, app_in_aag(Xs, Ys, Zs))
   U10_aag(X, Xs, Ys, Zs, app_out_aag(Xs, Ys, Zs)) -> app_out_aag(.(X, Xs), Ys, .(X, Zs))
   U1_ga(Xs, T, app_out_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs)) -> U2_ga(Xs, T, app_in_gga(As, .(s(a, s(A, B, C), b), Bs), Ys))
   app_in_gga([], X, X) -> app_out_gga([], X, X)
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U10_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   U10_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U2_ga(Xs, T, app_out_gga(As, .(s(a, s(A, B, C), b), Bs), Ys)) -> U3_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(Xs, T) -> U4_ga(Xs, T, app_in_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs))
   U4_ga(Xs, T, app_out_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs)) -> U5_ga(Xs, T, app_in_gga(As, .(s(a, s(A, B), b), Bs), Ys))
   U5_ga(Xs, T, app_out_gga(As, .(s(a, s(A, B), b), Bs), Ys)) -> U6_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(Xs, T) -> U7_ga(Xs, T, app_in_aag(As, .(a, .(b, Bs)), Xs))
   U7_ga(Xs, T, app_out_aag(As, .(a, .(b, Bs)), Xs)) -> U8_ga(Xs, T, app_in_gga(As, .(s(a, b), Bs), Ys))
   U8_ga(Xs, T, app_out_gga(As, .(s(a, b), Bs), Ys)) -> U9_ga(Xs, T, parse_in_ga(Ys, T))
   parse_in_ga(.(s(A, B), []), s(A, B)) -> parse_out_ga(.(s(A, B), []), s(A, B))
   parse_in_ga(.(s(A, B, C), []), s(A, B, C)) -> parse_out_ga(.(s(A, B, C), []), s(A, B, C))
   U9_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)
   U6_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)
   U3_ga(Xs, T, parse_out_ga(Ys, T)) -> parse_out_ga(Xs, T)

The argument filtering Pi contains the following mapping:
parse_in_ga(x1, x2)  =  parse_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

app_in_aag(x1, x2, x3)  =  app_in_aag(x3)

app_out_aag(x1, x2, x3)  =  app_out_aag(x1, x2)

.(x1, x2)  =  .(x1, x2)

U10_aag(x1, x2, x3, x4, x5)  =  U10_aag(x1, x5)

a  =  a

s(x1, x2, x3)  =  s(x1, x2, x3)

b  =  b

U2_ga(x1, x2, x3)  =  U2_ga(x3)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x3)

U10_gga(x1, x2, x3, x4, x5)  =  U10_gga(x1, x5)

U3_ga(x1, x2, x3)  =  U3_ga(x3)

U4_ga(x1, x2, x3)  =  U4_ga(x3)

s(x1, x2)  =  s(x1, x2)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

U6_ga(x1, x2, x3)  =  U6_ga(x3)

U7_ga(x1, x2, x3)  =  U7_ga(x3)

U8_ga(x1, x2, x3)  =  U8_ga(x3)

U9_ga(x1, x2, x3)  =  U9_ga(x3)

parse_out_ga(x1, x2)  =  parse_out_ga(x2)

PARSE_IN_GA(x1, x2)  =  PARSE_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

U2_GA(x1, x2, x3)  =  U2_GA(x3)

U4_GA(x1, x2, x3)  =  U4_GA(x3)

U5_GA(x1, x2, x3)  =  U5_GA(x3)

U7_GA(x1, x2, x3)  =  U7_GA(x3)

U8_GA(x1, x2, x3)  =  U8_GA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(23)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(Xs, T, app_out_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs)) -> U2_GA(Xs, T, app_in_gga(As, .(s(a, s(A, B, C), b), Bs), Ys))
   U2_GA(Xs, T, app_out_gga(As, .(s(a, s(A, B, C), b), Bs), Ys)) -> PARSE_IN_GA(Ys, T)
   PARSE_IN_GA(Xs, T) -> U1_GA(Xs, T, app_in_aag(As, .(a, .(s(A, B, C), .(b, Bs))), Xs))
   PARSE_IN_GA(Xs, T) -> U4_GA(Xs, T, app_in_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs))
   U4_GA(Xs, T, app_out_aag(As, .(a, .(s(A, B), .(b, Bs))), Xs)) -> U5_GA(Xs, T, app_in_gga(As, .(s(a, s(A, B), b), Bs), Ys))
   U5_GA(Xs, T, app_out_gga(As, .(s(a, s(A, B), b), Bs), Ys)) -> PARSE_IN_GA(Ys, T)
   PARSE_IN_GA(Xs, T) -> U7_GA(Xs, T, app_in_aag(As, .(a, .(b, Bs)), Xs))
   U7_GA(Xs, T, app_out_aag(As, .(a, .(b, Bs)), Xs)) -> U8_GA(Xs, T, app_in_gga(As, .(s(a, b), Bs), Ys))
   U8_GA(Xs, T, app_out_gga(As, .(s(a, b), Bs), Ys)) -> PARSE_IN_GA(Ys, T)

The TRS R consists of the following rules:

   app_in_gga([], X, X) -> app_out_gga([], X, X)
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U10_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   app_in_aag([], X, X) -> app_out_aag([], X, X)
   app_in_aag(.(X, Xs), Ys, .(X, Zs)) -> U10_aag(X, Xs, Ys, Zs, app_in_aag(Xs, Ys, Zs))
   U10_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U10_aag(X, Xs, Ys, Zs, app_out_aag(Xs, Ys, Zs)) -> app_out_aag(.(X, Xs), Ys, .(X, Zs))

The argument filtering Pi contains the following mapping:
app_in_aag(x1, x2, x3)  =  app_in_aag(x3)

app_out_aag(x1, x2, x3)  =  app_out_aag(x1, x2)

.(x1, x2)  =  .(x1, x2)

U10_aag(x1, x2, x3, x4, x5)  =  U10_aag(x1, x5)

a  =  a

s(x1, x2, x3)  =  s(x1, x2, x3)

b  =  b

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x3)

U10_gga(x1, x2, x3, x4, x5)  =  U10_gga(x1, x5)

s(x1, x2)  =  s(x1, x2)

PARSE_IN_GA(x1, x2)  =  PARSE_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

U2_GA(x1, x2, x3)  =  U2_GA(x3)

U4_GA(x1, x2, x3)  =  U4_GA(x3)

U5_GA(x1, x2, x3)  =  U5_GA(x3)

U7_GA(x1, x2, x3)  =  U7_GA(x3)

U8_GA(x1, x2, x3)  =  U8_GA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(24) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GA(app_out_aag(As, .(a, .(s(A, B, C), .(b, Bs))))) -> U2_GA(app_in_gga(As, .(s(a, s(A, B, C), b), Bs)))
   U2_GA(app_out_gga(Ys)) -> PARSE_IN_GA(Ys)
   PARSE_IN_GA(Xs) -> U1_GA(app_in_aag(Xs))
   PARSE_IN_GA(Xs) -> U4_GA(app_in_aag(Xs))
   U4_GA(app_out_aag(As, .(a, .(s(A, B), .(b, Bs))))) -> U5_GA(app_in_gga(As, .(s(a, s(A, B), b), Bs)))
   U5_GA(app_out_gga(Ys)) -> PARSE_IN_GA(Ys)
   PARSE_IN_GA(Xs) -> U7_GA(app_in_aag(Xs))
   U7_GA(app_out_aag(As, .(a, .(b, Bs)))) -> U8_GA(app_in_gga(As, .(s(a, b), Bs)))
   U8_GA(app_out_gga(Ys)) -> PARSE_IN_GA(Ys)

The TRS R consists of the following rules:

   app_in_gga([], X) -> app_out_gga(X)
   app_in_gga(.(X, Xs), Ys) -> U10_gga(X, app_in_gga(Xs, Ys))
   app_in_aag(X) -> app_out_aag([], X)
   app_in_aag(.(X, Zs)) -> U10_aag(X, app_in_aag(Zs))
   U10_gga(X, app_out_gga(Zs)) -> app_out_gga(.(X, Zs))
   U10_aag(X, app_out_aag(Xs, Ys)) -> app_out_aag(.(X, Xs), Ys)

The set Q consists of the following terms:

   app_in_gga(x0, x1)
   app_in_aag(x0)
   U10_gga(x0, x1)
   U10_aag(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U1_GA(app_out_aag(As, .(a, .(s(A, B, C), .(b, Bs))))) -> U2_GA(app_in_gga(As, .(s(a, s(A, B, C), b), Bs)))
   U2_GA(app_out_gga(Ys)) -> PARSE_IN_GA(Ys)
   PARSE_IN_GA(Xs) -> U1_GA(app_in_aag(Xs))
   PARSE_IN_GA(Xs) -> U4_GA(app_in_aag(Xs))
   U4_GA(app_out_aag(As, .(a, .(s(A, B), .(b, Bs))))) -> U5_GA(app_in_gga(As, .(s(a, s(A, B), b), Bs)))
   U5_GA(app_out_gga(Ys)) -> PARSE_IN_GA(Ys)
   PARSE_IN_GA(Xs) -> U7_GA(app_in_aag(Xs))
   U7_GA(app_out_aag(As, .(a, .(b, Bs)))) -> U8_GA(app_in_gga(As, .(s(a, b), Bs)))
   U8_GA(app_out_gga(Ys)) -> PARSE_IN_GA(Ys)

Strictly oriented rules of the TRS R:

   app_in_gga([], X) -> app_out_gga(X)
   app_in_gga(.(X, Xs), Ys) -> U10_gga(X, app_in_gga(Xs, Ys))
   app_in_aag(X) -> app_out_aag([], X)
   app_in_aag(.(X, Zs)) -> U10_aag(X, app_in_aag(Zs))
   U10_gga(X, app_out_gga(Zs)) -> app_out_gga(.(X, Zs))
   U10_aag(X, app_out_aag(Xs, Ys)) -> app_out_aag(.(X, Xs), Ys)

Used ordering: Knuth-Bendix order [KBO] with precedence:U7_GA_1 > app_in_gga_2 > U4_GA_1 > U5_GA_1 > U10_gga_2 > s_2 > app_in_aag_1 > U10_aag_2 > U8_GA_1 > app_out_gga_1 > U2_GA_1 > [] > PARSE_IN_GA_1 > a > ._2 > app_out_aag_2 > b > s_3 > U1_GA_1

and weight map:

   []=2
   a=1
   b=1
   app_out_gga_1=7
   app_in_aag_1=3
   U1_GA_1=3
   U2_GA_1=1
   PARSE_IN_GA_1=8
   U4_GA_1=3
   U5_GA_1=2
   U7_GA_1=3
   U8_GA_1=2
   app_in_gga_2=6
   ._2=5
   U10_gga_2=5
   app_out_aag_2=0
   U10_aag_2=5
   s_3=5
   s_2=0

The variable weight is 1

----------------------------------------

(27)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   app_in_gga(x0, x1)
   app_in_aag(x0)
   U10_gga(x0, x1)
   U10_aag(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(29)
YES
