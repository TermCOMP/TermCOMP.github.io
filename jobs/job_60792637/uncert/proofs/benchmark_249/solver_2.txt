YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/gL8TJ.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

mergesort(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(2) TRIPLES
(3) TriplesToPiDPProof [SOUND, 1 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) PiDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) PiDP
        (24) PiDPToQDPProof [SOUND, 0 ms]
        (25) QDP
        (26) MRRProof [EQUIVALENT, 16 ms]
        (27) QDP
        (28) MRRProof [EQUIVALENT, 7 ms]
        (29) QDP
        (30) DependencyGraphProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) UsableRulesProof [EQUIVALENT, 0 ms]
        (33) QDP
        (34) QReductionProof [EQUIVALENT, 0 ms]
        (35) QDP
        (36) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (37) YES
    (38) PiDP
        (39) UsableRulesProof [EQUIVALENT, 0 ms]
        (40) PiDP
        (41) PiDPToQDPProof [SOUND, 0 ms]
        (42) QDP
        (43) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (44) YES
    (45) PiDP
        (46) PiDPToQDPProof [SOUND, 0 ms]
        (47) QDP
        (48) TransformationProof [EQUIVALENT, 0 ms]
        (49) QDP
        (50) QDPQMonotonicMRRProof [EQUIVALENT, 44 ms]
        (51) QDP
        (52) QDPOrderProof [EQUIVALENT, 64 ms]
        (53) QDP
        (54) DependencyGraphProof [EQUIVALENT, 0 ms]
        (55) TRUE


----------------------------------------

(0)
Obligation:
Clauses:

mergesort([], []).
mergesort(.(X, []), .(X, [])).
mergesort(.(X, .(Y, Xs)), Ys) :- ','(split(.(X, .(Y, Xs)), X1s, X2s), ','(mergesort(X1s, Y1s), ','(mergesort(X2s, Y2s), merge(Y1s, Y2s, Ys)))).
split([], [], []).
split(.(X, Xs), .(X, Ys), Zs) :- split(Xs, Zs, Ys).
merge([], Xs, Xs).
merge(Xs, [], Xs).
merge(.(X, Xs), .(Y, Ys), .(X, Zs)) :- ','(le(X, Y), merge(Xs, .(Y, Ys), Zs)).
merge(.(X, Xs), .(Y, Ys), .(Y, Zs)) :- ','(gt(X, Y), merge(.(X, Xs), Ys, Zs)).
gt(s(X), s(Y)) :- gt(X, Y).
gt(s(X), 0).
le(s(X), s(Y)) :- le(X, Y).
le(0, s(Y)).
le(0, 0).


Query: mergesort(g,a)
----------------------------------------

(1) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(mergesort ([]) ([]))",
                null
            ],
            [
                "(mergesort (. X ([])) (. X ([])))",
                null
            ],
            [
                "(mergesort (. X (. Y Xs)) Ys)",
                "(',' (split (. X (. Y Xs)) X1s X2s) (',' (mergesort X1s Y1s) (',' (mergesort X2s Y2s) (merge Y1s Y2s Ys))))"
            ],
            [
                "(split ([]) ([]) ([]))",
                null
            ],
            [
                "(split (. X Xs) (. X Ys) Zs)",
                "(split Xs Zs Ys)"
            ],
            [
                "(merge ([]) Xs Xs)",
                null
            ],
            [
                "(merge Xs ([]) Xs)",
                null
            ],
            [
                "(merge (. X Xs) (. Y Ys) (. X Zs))",
                "(',' (le X Y) (merge Xs (. Y Ys) Zs))"
            ],
            [
                "(merge (. X Xs) (. Y Ys) (. Y Zs))",
                "(',' (gt X Y) (merge (. X Xs) Ys Zs))"
            ],
            [
                "(gt (s X) (s Y))",
                "(gt X Y)"
            ],
            [
                "(gt (s X) (0))",
                null
            ],
            [
                "(le (s X) (s Y))",
                "(le X Y)"
            ],
            [
                "(le (0) (s Y))",
                null
            ],
            [
                "(le (0) (0))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "192": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "670": {
                "goal": [{
                    "clause": 7,
                    "scope": 5,
                    "term": "(merge T38 T39 T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "671": {
                "goal": [{
                    "clause": 8,
                    "scope": 5,
                    "term": "(merge T38 T39 T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "157": {
                "goal": [{
                    "clause": 3,
                    "scope": 4,
                    "term": "(split T31 X59 X58)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T31"],
                    "free": [
                        "X58",
                        "X59"
                    ],
                    "exprvars": []
                }
            },
            "676": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (le T72 T74) (merge T73 (. T74 T75) T77))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T72",
                        "T73",
                        "T74",
                        "T75"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "677": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "90": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (split (. T22 T23) X41 X40) (',' (mergesort (. T21 X40) X22) (',' (mergesort X41 X23) (merge X22 X23 T14))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T21",
                        "T22",
                        "T23"
                    ],
                    "free": [
                        "X22",
                        "X23",
                        "X40",
                        "X41"
                    ],
                    "exprvars": []
                }
            },
            "679": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(le T72 T74)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T72",
                        "T74"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "92": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(split (. T22 T23) X41 X40)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T22",
                        "T23"
                    ],
                    "free": [
                        "X40",
                        "X41"
                    ],
                    "exprvars": []
                }
            },
            "93": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (mergesort (. T21 T25) X22) (',' (mergesort T24 X23) (merge X22 X23 T14)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T21",
                        "T24",
                        "T25"
                    ],
                    "free": [
                        "X22",
                        "X23"
                    ],
                    "exprvars": []
                }
            },
            "95": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(split (. T22 T23) X41 X40)"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(split (. T22 T23) X41 X40)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T22",
                        "T23"
                    ],
                    "free": [
                        "X40",
                        "X41"
                    ],
                    "exprvars": []
                }
            },
            "97": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(split (. T22 T23) X41 X40)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T22",
                        "T23"
                    ],
                    "free": [
                        "X40",
                        "X41"
                    ],
                    "exprvars": []
                }
            },
            "10": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(mergesort T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(mergesort T1 T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(mergesort T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "160": {
                "goal": [{
                    "clause": 4,
                    "scope": 4,
                    "term": "(split T31 X59 X58)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T31"],
                    "free": [
                        "X58",
                        "X59"
                    ],
                    "exprvars": []
                }
            },
            "680": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge T73 (. T74 T75) T77)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T73",
                        "T74",
                        "T75"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "683": {
                "goal": [
                    {
                        "clause": 11,
                        "scope": 6,
                        "term": "(le T72 T74)"
                    },
                    {
                        "clause": 12,
                        "scope": 6,
                        "term": "(le T72 T74)"
                    },
                    {
                        "clause": 13,
                        "scope": 6,
                        "term": "(le T72 T74)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T72",
                        "T74"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(mergesort T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "684": {
                "goal": [{
                    "clause": 11,
                    "scope": 6,
                    "term": "(le T72 T74)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T72",
                        "T74"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "564": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(split T37 X77 X76)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T37"],
                    "free": [
                        "X76",
                        "X77"
                    ],
                    "exprvars": []
                }
            },
            "565": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "686": {
                "goal": [
                    {
                        "clause": 12,
                        "scope": 6,
                        "term": "(le T72 T74)"
                    },
                    {
                        "clause": 13,
                        "scope": 6,
                        "term": "(le T72 T74)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T72",
                        "T74"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "688": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(le T90 T91)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T90",
                        "T91"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "723": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "724": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "725": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "691": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "692": {
                "goal": [{
                    "clause": 12,
                    "scope": 6,
                    "term": "(le T72 T74)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T72",
                        "T74"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "693": {
                "goal": [{
                    "clause": 13,
                    "scope": 6,
                    "term": "(le T72 T74)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T72",
                        "T74"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "694": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "574": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(mergesort (. T21 T25) X22)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T21",
                        "T25"
                    ],
                    "free": ["X22"],
                    "exprvars": []
                }
            },
            "695": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "575": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (mergesort T24 X23) (merge T38 X23 T14))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T24",
                        "T38"
                    ],
                    "free": ["X23"],
                    "exprvars": []
                }
            },
            "696": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "697": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "698": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "699": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "656": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "657": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "658": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "73": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(mergesort ([]) T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(mergesort ([]) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "617": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(mergesort T24 X23)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T24"],
                    "free": ["X23"],
                    "exprvars": []
                }
            },
            "74": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(mergesort T1 T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(mergesort T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(mergesort T1 T2)",
                        "(mergesort ([]) ([]))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "618": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge T38 T39 T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "75": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(mergesort ([]) T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(mergesort ([]) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "76": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(mergesort ([]) T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "77": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "78": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(mergesort (. T4 ([])) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T4"],
                    "free": [],
                    "exprvars": []
                }
            },
            "79": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(mergesort T1 T2)"
                }],
                "kb": {
                    "nonunifying": [
                        [
                            "(mergesort T1 T2)",
                            "(mergesort ([]) ([]))"
                        ],
                        [
                            "(mergesort T1 T2)",
                            "(mergesort (. X7 ([])) (. X7 ([])))"
                        ]
                    ],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": ["X7"],
                    "exprvars": []
                }
            },
            "140": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 4,
                        "term": "(split T31 X59 X58)"
                    },
                    {
                        "clause": 4,
                        "scope": 4,
                        "term": "(split T31 X59 X58)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T31"],
                    "free": [
                        "X58",
                        "X59"
                    ],
                    "exprvars": []
                }
            },
            "185": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "186": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "662": {
                "goal": [{
                    "clause": 6,
                    "scope": 5,
                    "term": "(merge T38 T39 T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "663": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(merge T38 T39 T14)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(merge T38 T39 T14)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "665": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "666": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "700": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (gt T113 T115) (merge (. T113 T114) T116 T118))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T113",
                        "T114",
                        "T115",
                        "T116"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "80": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(mergesort (. T4 ([])) T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T4"],
                    "free": [],
                    "exprvars": []
                }
            },
            "668": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "701": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "81": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "108": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(split T31 X59 X58)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T31"],
                    "free": [
                        "X58",
                        "X59"
                    ],
                    "exprvars": []
                }
            },
            "625": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 5,
                        "term": "(merge T38 T39 T14)"
                    },
                    {
                        "clause": 6,
                        "scope": 5,
                        "term": "(merge T38 T39 T14)"
                    },
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(merge T38 T39 T14)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(merge T38 T39 T14)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "702": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(gt T113 T115)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T113",
                        "T115"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "703": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge (. T113 T114) T116 T118)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T113",
                        "T114",
                        "T116"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "627": {
                "goal": [{
                    "clause": 5,
                    "scope": 5,
                    "term": "(merge T38 T39 T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "704": {
                "goal": [
                    {
                        "clause": 9,
                        "scope": 7,
                        "term": "(gt T113 T115)"
                    },
                    {
                        "clause": 10,
                        "scope": 7,
                        "term": "(gt T113 T115)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T113",
                        "T115"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "84": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (split (. T10 (. T11 T12)) X20 X21) (',' (mergesort X20 X22) (',' (mergesort X21 X23) (merge X22 X23 T14))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T10",
                        "T11",
                        "T12"
                    ],
                    "free": [
                        "X20",
                        "X21",
                        "X22",
                        "X23"
                    ],
                    "exprvars": []
                }
            },
            "705": {
                "goal": [{
                    "clause": 9,
                    "scope": 7,
                    "term": "(gt T113 T115)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T113",
                        "T115"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "85": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "629": {
                "goal": [
                    {
                        "clause": 6,
                        "scope": 5,
                        "term": "(merge T38 T39 T14)"
                    },
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(merge T38 T39 T14)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(merge T38 T39 T14)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "706": {
                "goal": [{
                    "clause": 10,
                    "scope": 7,
                    "term": "(gt T113 T115)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T113",
                        "T115"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "86": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(',' (split (. T10 (. T11 T12)) X20 X21) (',' (mergesort X20 X22) (',' (mergesort X21 X23) (merge X22 X23 T14))))"
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(',' (split (. T10 (. T11 T12)) X20 X21) (',' (mergesort X20 X22) (',' (mergesort X21 X23) (merge X22 X23 T14))))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T10",
                        "T11",
                        "T12"
                    ],
                    "free": [
                        "X20",
                        "X21",
                        "X22",
                        "X23"
                    ],
                    "exprvars": []
                }
            },
            "707": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(gt T131 T132)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T131",
                        "T132"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "87": {
                "goal": [{
                    "clause": 4,
                    "scope": 2,
                    "term": "(',' (split (. T10 (. T11 T12)) X20 X21) (',' (mergesort X20 X22) (',' (mergesort X21 X23) (merge X22 X23 T14))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T10",
                        "T11",
                        "T12"
                    ],
                    "free": [
                        "X20",
                        "X21",
                        "X22",
                        "X23"
                    ],
                    "exprvars": []
                }
            },
            "708": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 10,
                "label": "CASE"
            },
            {
                "from": 10,
                "to": 73,
                "label": "EVAL with clause\nmergesort([], []).\nand substitutionT1 -> [],\nT2 -> []"
            },
            {
                "from": 10,
                "to": 74,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 73,
                "to": 75,
                "label": "SUCCESS"
            },
            {
                "from": 74,
                "to": 78,
                "label": "EVAL with clause\nmergesort(.(X7, []), .(X7, [])).\nand substitutionX7 -> T4,\nT1 -> .(T4, []),\nT2 -> .(T4, [])"
            },
            {
                "from": 74,
                "to": 79,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 75,
                "to": 76,
                "label": "BACKTRACK\nfor clause: mergesort(.(X, []), .(X, []))because of non-unification"
            },
            {
                "from": 76,
                "to": 77,
                "label": "BACKTRACK\nfor clause: mergesort(.(X, .(Y, Xs)), Ys) :- ','(split(.(X, .(Y, Xs)), X1s, X2s), ','(mergesort(X1s, Y1s), ','(mergesort(X2s, Y2s), merge(Y1s, Y2s, Ys))))because of non-unification"
            },
            {
                "from": 78,
                "to": 80,
                "label": "SUCCESS"
            },
            {
                "from": 79,
                "to": 84,
                "label": "EVAL with clause\nmergesort(.(X16, .(X17, X18)), X19) :- ','(split(.(X16, .(X17, X18)), X20, X21), ','(mergesort(X20, X22), ','(mergesort(X21, X23), merge(X22, X23, X19)))).\nand substitutionX16 -> T10,\nX17 -> T11,\nX18 -> T12,\nT1 -> .(T10, .(T11, T12)),\nT2 -> T14,\nX19 -> T14,\nT13 -> T14"
            },
            {
                "from": 79,
                "to": 85,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 80,
                "to": 81,
                "label": "BACKTRACK\nfor clause: mergesort(.(X, .(Y, Xs)), Ys) :- ','(split(.(X, .(Y, Xs)), X1s, X2s), ','(mergesort(X1s, Y1s), ','(mergesort(X2s, Y2s), merge(Y1s, Y2s, Ys))))because of non-unification"
            },
            {
                "from": 84,
                "to": 86,
                "label": "CASE"
            },
            {
                "from": 86,
                "to": 87,
                "label": "BACKTRACK\nfor clause: split([], [], [])because of non-unification"
            },
            {
                "from": 87,
                "to": 90,
                "label": "ONLY EVAL with clause\nsplit(.(X36, X37), .(X36, X38), X39) :- split(X37, X39, X38).\nand substitutionT10 -> T21,\nX36 -> T21,\nT11 -> T22,\nT12 -> T23,\nX37 -> .(T22, T23),\nX38 -> X40,\nX20 -> .(T21, X40),\nX21 -> X41,\nX39 -> X41"
            },
            {
                "from": 90,
                "to": 92,
                "label": "SPLIT 1"
            },
            {
                "from": 90,
                "to": 93,
                "label": "SPLIT 2\nnew knowledge:\nT22 is ground\nT23 is ground\nT24 is ground\nT25 is ground\nreplacements:X41 -> T24,\nX40 -> T25"
            },
            {
                "from": 92,
                "to": 95,
                "label": "CASE"
            },
            {
                "from": 93,
                "to": 574,
                "label": "SPLIT 1"
            },
            {
                "from": 93,
                "to": 575,
                "label": "SPLIT 2\nnew knowledge:\nT21 is ground\nT25 is ground\nT38 is ground\nreplacements:X22 -> T38"
            },
            {
                "from": 95,
                "to": 97,
                "label": "BACKTRACK\nfor clause: split([], [], [])because of non-unification"
            },
            {
                "from": 97,
                "to": 108,
                "label": "ONLY EVAL with clause\nsplit(.(X54, X55), .(X54, X56), X57) :- split(X55, X57, X56).\nand substitutionT22 -> T30,\nX54 -> T30,\nT23 -> T31,\nX55 -> T31,\nX56 -> X58,\nX41 -> .(T30, X58),\nX40 -> X59,\nX57 -> X59"
            },
            {
                "from": 108,
                "to": 140,
                "label": "CASE"
            },
            {
                "from": 140,
                "to": 157,
                "label": "PARALLEL"
            },
            {
                "from": 140,
                "to": 160,
                "label": "PARALLEL"
            },
            {
                "from": 157,
                "to": 185,
                "label": "EVAL with clause\nsplit([], [], []).\nand substitutionT31 -> [],\nX59 -> [],\nX58 -> []"
            },
            {
                "from": 157,
                "to": 186,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 160,
                "to": 564,
                "label": "EVAL with clause\nsplit(.(X72, X73), .(X72, X74), X75) :- split(X73, X75, X74).\nand substitutionX72 -> T36,\nX73 -> T37,\nT31 -> .(T36, T37),\nX74 -> X76,\nX59 -> .(T36, X76),\nX58 -> X77,\nX75 -> X77"
            },
            {
                "from": 160,
                "to": 565,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 185,
                "to": 192,
                "label": "SUCCESS"
            },
            {
                "from": 564,
                "to": 108,
                "label": "INSTANCE with matching:\nT31 -> T37\nX59 -> X77\nX58 -> X76"
            },
            {
                "from": 574,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> .(T21, T25)\nT2 -> X22"
            },
            {
                "from": 575,
                "to": 617,
                "label": "SPLIT 1"
            },
            {
                "from": 575,
                "to": 618,
                "label": "SPLIT 2\nnew knowledge:\nT24 is ground\nT39 is ground\nreplacements:X23 -> T39"
            },
            {
                "from": 617,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T24\nT2 -> X23"
            },
            {
                "from": 618,
                "to": 625,
                "label": "CASE"
            },
            {
                "from": 625,
                "to": 627,
                "label": "PARALLEL"
            },
            {
                "from": 625,
                "to": 629,
                "label": "PARALLEL"
            },
            {
                "from": 627,
                "to": 656,
                "label": "EVAL with clause\nmerge([], X84, X84).\nand substitutionT38 -> [],\nT39 -> T46,\nX84 -> T46,\nT14 -> T46"
            },
            {
                "from": 627,
                "to": 657,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 629,
                "to": 662,
                "label": "PARALLEL"
            },
            {
                "from": 629,
                "to": 663,
                "label": "PARALLEL"
            },
            {
                "from": 656,
                "to": 658,
                "label": "SUCCESS"
            },
            {
                "from": 662,
                "to": 665,
                "label": "EVAL with clause\nmerge(X89, [], X89).\nand substitutionT38 -> T51,\nX89 -> T51,\nT39 -> [],\nT14 -> T51"
            },
            {
                "from": 662,
                "to": 666,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 663,
                "to": 670,
                "label": "PARALLEL"
            },
            {
                "from": 663,
                "to": 671,
                "label": "PARALLEL"
            },
            {
                "from": 665,
                "to": 668,
                "label": "SUCCESS"
            },
            {
                "from": 670,
                "to": 676,
                "label": "EVAL with clause\nmerge(.(X110, X111), .(X112, X113), .(X110, X114)) :- ','(le(X110, X112), merge(X111, .(X112, X113), X114)).\nand substitutionX110 -> T72,\nX111 -> T73,\nT38 -> .(T72, T73),\nX112 -> T74,\nX113 -> T75,\nT39 -> .(T74, T75),\nX114 -> T77,\nT14 -> .(T72, T77),\nT76 -> T77"
            },
            {
                "from": 670,
                "to": 677,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 671,
                "to": 700,
                "label": "EVAL with clause\nmerge(.(X148, X149), .(X150, X151), .(X150, X152)) :- ','(gt(X148, X150), merge(.(X148, X149), X151, X152)).\nand substitutionX148 -> T113,\nX149 -> T114,\nT38 -> .(T113, T114),\nX150 -> T115,\nX151 -> T116,\nT39 -> .(T115, T116),\nX152 -> T118,\nT14 -> .(T115, T118),\nT117 -> T118"
            },
            {
                "from": 671,
                "to": 701,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 676,
                "to": 679,
                "label": "SPLIT 1"
            },
            {
                "from": 676,
                "to": 680,
                "label": "SPLIT 2\nnew knowledge:\nT72 is ground\nT74 is ground"
            },
            {
                "from": 679,
                "to": 683,
                "label": "CASE"
            },
            {
                "from": 680,
                "to": 618,
                "label": "INSTANCE with matching:\nT38 -> T73\nT39 -> .(T74, T75)\nT14 -> T77"
            },
            {
                "from": 683,
                "to": 684,
                "label": "PARALLEL"
            },
            {
                "from": 683,
                "to": 686,
                "label": "PARALLEL"
            },
            {
                "from": 684,
                "to": 688,
                "label": "EVAL with clause\nle(s(X127), s(X128)) :- le(X127, X128).\nand substitutionX127 -> T90,\nT72 -> s(T90),\nX128 -> T91,\nT74 -> s(T91)"
            },
            {
                "from": 684,
                "to": 691,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 686,
                "to": 692,
                "label": "PARALLEL"
            },
            {
                "from": 686,
                "to": 693,
                "label": "PARALLEL"
            },
            {
                "from": 688,
                "to": 679,
                "label": "INSTANCE with matching:\nT72 -> T90\nT74 -> T91"
            },
            {
                "from": 692,
                "to": 694,
                "label": "EVAL with clause\nle(0, s(X135)).\nand substitutionT72 -> 0,\nX135 -> T98,\nT74 -> s(T98)"
            },
            {
                "from": 692,
                "to": 695,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 693,
                "to": 697,
                "label": "EVAL with clause\nle(0, 0).\nand substitutionT72 -> 0,\nT74 -> 0"
            },
            {
                "from": 693,
                "to": 698,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 694,
                "to": 696,
                "label": "SUCCESS"
            },
            {
                "from": 697,
                "to": 699,
                "label": "SUCCESS"
            },
            {
                "from": 700,
                "to": 702,
                "label": "SPLIT 1"
            },
            {
                "from": 700,
                "to": 703,
                "label": "SPLIT 2\nnew knowledge:\nT113 is ground\nT115 is ground"
            },
            {
                "from": 702,
                "to": 704,
                "label": "CASE"
            },
            {
                "from": 703,
                "to": 618,
                "label": "INSTANCE with matching:\nT38 -> .(T113, T114)\nT39 -> T116\nT14 -> T118"
            },
            {
                "from": 704,
                "to": 705,
                "label": "PARALLEL"
            },
            {
                "from": 704,
                "to": 706,
                "label": "PARALLEL"
            },
            {
                "from": 705,
                "to": 707,
                "label": "EVAL with clause\ngt(s(X165), s(X166)) :- gt(X165, X166).\nand substitutionX165 -> T131,\nT113 -> s(T131),\nX166 -> T132,\nT115 -> s(T132)"
            },
            {
                "from": 705,
                "to": 708,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 706,
                "to": 723,
                "label": "EVAL with clause\ngt(s(X171), 0).\nand substitutionX171 -> T137,\nT113 -> s(T137),\nT115 -> 0"
            },
            {
                "from": 706,
                "to": 724,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 707,
                "to": 702,
                "label": "INSTANCE with matching:\nT113 -> T131\nT115 -> T132"
            },
            {
                "from": 723,
                "to": 725,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Triples:

splitA(.(X1, X2), .(X1, X3), X4) :- splitA(X2, X4, X3).
mergeC(.(X1, X2), .(X3, X4), .(X1, X5)) :- leE(X1, X3).
mergeC(.(X1, X2), .(X3, X4), .(X1, X5)) :- ','(lecE(X1, X3), mergeC(X2, .(X3, X4), X5)).
mergeC(.(X1, X2), .(X3, X4), .(X3, X5)) :- gtF(X1, X3).
mergeC(.(X1, X2), .(X3, X4), .(X3, X5)) :- ','(gtcF(X1, X3), mergeC(.(X1, X2), X4, X5)).
leE(s(X1), s(X2)) :- leE(X1, X2).
gtF(s(X1), s(X2)) :- gtF(X1, X2).
mergesortB(.(X1, .(X2, X3)), X4) :- splitA(X3, X5, X6).
mergesortB(.(X1, .(X2, X3)), X4) :- ','(splitcD(X2, X3, X5, X6), mergesortB(.(X1, X6), X7)).
mergesortB(.(X1, .(X2, X3)), X4) :- ','(splitcD(X2, X3, X5, X6), ','(mergesortcB(.(X1, X6), X7), mergesortB(X5, X8))).
mergesortB(.(X1, .(X2, X3)), X4) :- ','(splitcD(X2, X3, X5, X6), ','(mergesortcB(.(X1, X6), X7), ','(mergesortcB(X5, X8), mergeC(X7, X8, X4)))).

Clauses:

splitcA([], [], []).
splitcA(.(X1, X2), .(X1, X3), X4) :- splitcA(X2, X4, X3).
mergesortcB([], []).
mergesortcB(.(X1, []), .(X1, [])).
mergesortcB(.(X1, .(X2, X3)), X4) :- ','(splitcD(X2, X3, X5, X6), ','(mergesortcB(.(X1, X6), X7), ','(mergesortcB(X5, X8), mergecC(X7, X8, X4)))).
mergecC([], X1, X1).
mergecC(X1, [], X1).
mergecC(.(X1, X2), .(X3, X4), .(X1, X5)) :- ','(lecE(X1, X3), mergecC(X2, .(X3, X4), X5)).
mergecC(.(X1, X2), .(X3, X4), .(X3, X5)) :- ','(gtcF(X1, X3), mergecC(.(X1, X2), X4, X5)).
lecE(s(X1), s(X2)) :- lecE(X1, X2).
lecE(0, s(X1)).
lecE(0, 0).
gtcF(s(X1), s(X2)) :- gtcF(X1, X2).
gtcF(s(X1), 0).
splitcD(X1, X2, .(X1, X3), X4) :- splitcA(X2, X4, X3).

Afs:

mergesortB(x1, x2)  =  mergesortB(x1)


----------------------------------------

(3) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

mergesortB_in_2: (b,f)

splitA_in_3: (b,f,f)

splitcD_in_4: (b,b,f,f)

splitcA_in_3: (b,f,f)

mergesortcB_in_2: (b,f)

mergecC_in_3: (b,b,f)

lecE_in_2: (b,b)

gtcF_in_2: (b,b)

mergeC_in_3: (b,b,f)

leE_in_2: (b,b)

gtF_in_2: (b,b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   MERGESORTB_IN_GA(.(X1, .(X2, X3)), X4) -> U10_GA(X1, X2, X3, X4, splitA_in_gaa(X3, X5, X6))
   MERGESORTB_IN_GA(.(X1, .(X2, X3)), X4) -> SPLITA_IN_GAA(X3, X5, X6)
   SPLITA_IN_GAA(.(X1, X2), .(X1, X3), X4) -> U1_GAA(X1, X2, X3, X4, splitA_in_gaa(X2, X4, X3))
   SPLITA_IN_GAA(.(X1, X2), .(X1, X3), X4) -> SPLITA_IN_GAA(X2, X4, X3)
   MERGESORTB_IN_GA(.(X1, .(X2, X3)), X4) -> U11_GA(X1, X2, X3, X4, splitcD_in_ggaa(X2, X3, X5, X6))
   U11_GA(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U12_GA(X1, X2, X3, X4, mergesortB_in_ga(.(X1, X6), X7))
   U11_GA(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> MERGESORTB_IN_GA(.(X1, X6), X7)
   U11_GA(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U13_GA(X1, X2, X3, X4, X5, mergesortcB_in_ga(.(X1, X6), X7))
   U13_GA(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U14_GA(X1, X2, X3, X4, mergesortB_in_ga(X5, X8))
   U13_GA(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> MERGESORTB_IN_GA(X5, X8)
   U13_GA(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U15_GA(X1, X2, X3, X4, X7, mergesortcB_in_ga(X5, X8))
   U15_GA(X1, X2, X3, X4, X7, mergesortcB_out_ga(X5, X8)) -> U16_GA(X1, X2, X3, X4, mergeC_in_gga(X7, X8, X4))
   U15_GA(X1, X2, X3, X4, X7, mergesortcB_out_ga(X5, X8)) -> MERGEC_IN_GGA(X7, X8, X4)
   MERGEC_IN_GGA(.(X1, X2), .(X3, X4), .(X1, X5)) -> U2_GGA(X1, X2, X3, X4, X5, leE_in_gg(X1, X3))
   MERGEC_IN_GGA(.(X1, X2), .(X3, X4), .(X1, X5)) -> LEE_IN_GG(X1, X3)
   LEE_IN_GG(s(X1), s(X2)) -> U8_GG(X1, X2, leE_in_gg(X1, X2))
   LEE_IN_GG(s(X1), s(X2)) -> LEE_IN_GG(X1, X2)
   MERGEC_IN_GGA(.(X1, X2), .(X3, X4), .(X1, X5)) -> U3_GGA(X1, X2, X3, X4, X5, lecE_in_gg(X1, X3))
   U3_GGA(X1, X2, X3, X4, X5, lecE_out_gg(X1, X3)) -> U4_GGA(X1, X2, X3, X4, X5, mergeC_in_gga(X2, .(X3, X4), X5))
   U3_GGA(X1, X2, X3, X4, X5, lecE_out_gg(X1, X3)) -> MERGEC_IN_GGA(X2, .(X3, X4), X5)
   MERGEC_IN_GGA(.(X1, X2), .(X3, X4), .(X3, X5)) -> U5_GGA(X1, X2, X3, X4, X5, gtF_in_gg(X1, X3))
   MERGEC_IN_GGA(.(X1, X2), .(X3, X4), .(X3, X5)) -> GTF_IN_GG(X1, X3)
   GTF_IN_GG(s(X1), s(X2)) -> U9_GG(X1, X2, gtF_in_gg(X1, X2))
   GTF_IN_GG(s(X1), s(X2)) -> GTF_IN_GG(X1, X2)
   MERGEC_IN_GGA(.(X1, X2), .(X3, X4), .(X3, X5)) -> U6_GGA(X1, X2, X3, X4, X5, gtcF_in_gg(X1, X3))
   U6_GGA(X1, X2, X3, X4, X5, gtcF_out_gg(X1, X3)) -> U7_GGA(X1, X2, X3, X4, X5, mergeC_in_gga(.(X1, X2), X4, X5))
   U6_GGA(X1, X2, X3, X4, X5, gtcF_out_gg(X1, X3)) -> MERGEC_IN_GGA(.(X1, X2), X4, X5)

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2, .(X1, X3), X4) -> U29_ggaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   splitcA_in_gaa([], [], []) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2), .(X1, X3), X4) -> U18_gaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   U18_gaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U29_ggaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga([], []) -> mergesortcB_out_ga([], [])
   mergesortcB_in_ga(.(X1, []), .(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3)), X4) -> U19_ga(X1, X2, X3, X4, splitcD_in_ggaa(X2, X3, X5, X6))
   U19_ga(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U20_ga(X1, X2, X3, X4, X5, mergesortcB_in_ga(.(X1, X6), X7))
   U20_ga(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U21_ga(X1, X2, X3, X4, X7, mergesortcB_in_ga(X5, X8))
   U21_ga(X1, X2, X3, X4, X7, mergesortcB_out_ga(X5, X8)) -> U22_ga(X1, X2, X3, X4, mergecC_in_gga(X7, X8, X4))
   mergecC_in_gga([], X1, X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, [], X1) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X3, X4), .(X1, X5)) -> U23_gga(X1, X2, X3, X4, X5, lecE_in_gg(X1, X3))
   lecE_in_gg(s(X1), s(X2)) -> U27_gg(X1, X2, lecE_in_gg(X1, X2))
   lecE_in_gg(0, s(X1)) -> lecE_out_gg(0, s(X1))
   lecE_in_gg(0, 0) -> lecE_out_gg(0, 0)
   U27_gg(X1, X2, lecE_out_gg(X1, X2)) -> lecE_out_gg(s(X1), s(X2))
   U23_gga(X1, X2, X3, X4, X5, lecE_out_gg(X1, X3)) -> U24_gga(X1, X2, X3, X4, X5, mergecC_in_gga(X2, .(X3, X4), X5))
   mergecC_in_gga(.(X1, X2), .(X3, X4), .(X3, X5)) -> U25_gga(X1, X2, X3, X4, X5, gtcF_in_gg(X1, X3))
   gtcF_in_gg(s(X1), s(X2)) -> U28_gg(X1, X2, gtcF_in_gg(X1, X2))
   gtcF_in_gg(s(X1), 0) -> gtcF_out_gg(s(X1), 0)
   U28_gg(X1, X2, gtcF_out_gg(X1, X2)) -> gtcF_out_gg(s(X1), s(X2))
   U25_gga(X1, X2, X3, X4, X5, gtcF_out_gg(X1, X3)) -> U26_gga(X1, X2, X3, X4, X5, mergecC_in_gga(.(X1, X2), X4, X5))
   U26_gga(X1, X2, X3, X4, X5, mergecC_out_gga(.(X1, X2), X4, X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X3, X5))
   U24_gga(X1, X2, X3, X4, X5, mergecC_out_gga(X2, .(X3, X4), X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X1, X5))
   U22_ga(X1, X2, X3, X4, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The argument filtering Pi contains the following mapping:
mergesortB_in_ga(x1, x2)  =  mergesortB_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

splitA_in_gaa(x1, x2, x3)  =  splitA_in_gaa(x1)

splitcD_in_ggaa(x1, x2, x3, x4)  =  splitcD_in_ggaa(x1, x2)

U29_ggaa(x1, x2, x3, x4, x5)  =  U29_ggaa(x1, x2, x5)

splitcA_in_gaa(x1, x2, x3)  =  splitcA_in_gaa(x1)

[]  =  []

splitcA_out_gaa(x1, x2, x3)  =  splitcA_out_gaa(x1, x2, x3)

U18_gaa(x1, x2, x3, x4, x5)  =  U18_gaa(x1, x2, x5)

splitcD_out_ggaa(x1, x2, x3, x4)  =  splitcD_out_ggaa(x1, x2, x3, x4)

mergesortcB_in_ga(x1, x2)  =  mergesortcB_in_ga(x1)

mergesortcB_out_ga(x1, x2)  =  mergesortcB_out_ga(x1, x2)

U19_ga(x1, x2, x3, x4, x5)  =  U19_ga(x1, x2, x3, x5)

U20_ga(x1, x2, x3, x4, x5, x6)  =  U20_ga(x1, x2, x3, x5, x6)

U21_ga(x1, x2, x3, x4, x5, x6)  =  U21_ga(x1, x2, x3, x5, x6)

U22_ga(x1, x2, x3, x4, x5)  =  U22_ga(x1, x2, x3, x5)

mergecC_in_gga(x1, x2, x3)  =  mergecC_in_gga(x1, x2)

mergecC_out_gga(x1, x2, x3)  =  mergecC_out_gga(x1, x2, x3)

U23_gga(x1, x2, x3, x4, x5, x6)  =  U23_gga(x1, x2, x3, x4, x6)

lecE_in_gg(x1, x2)  =  lecE_in_gg(x1, x2)

s(x1)  =  s(x1)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

0  =  0

lecE_out_gg(x1, x2)  =  lecE_out_gg(x1, x2)

U24_gga(x1, x2, x3, x4, x5, x6)  =  U24_gga(x1, x2, x3, x4, x6)

U25_gga(x1, x2, x3, x4, x5, x6)  =  U25_gga(x1, x2, x3, x4, x6)

gtcF_in_gg(x1, x2)  =  gtcF_in_gg(x1, x2)

U28_gg(x1, x2, x3)  =  U28_gg(x1, x2, x3)

gtcF_out_gg(x1, x2)  =  gtcF_out_gg(x1, x2)

U26_gga(x1, x2, x3, x4, x5, x6)  =  U26_gga(x1, x2, x3, x4, x6)

mergeC_in_gga(x1, x2, x3)  =  mergeC_in_gga(x1, x2)

leE_in_gg(x1, x2)  =  leE_in_gg(x1, x2)

gtF_in_gg(x1, x2)  =  gtF_in_gg(x1, x2)

MERGESORTB_IN_GA(x1, x2)  =  MERGESORTB_IN_GA(x1)

U10_GA(x1, x2, x3, x4, x5)  =  U10_GA(x1, x2, x3, x5)

SPLITA_IN_GAA(x1, x2, x3)  =  SPLITA_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x2, x5)

U11_GA(x1, x2, x3, x4, x5)  =  U11_GA(x1, x2, x3, x5)

U12_GA(x1, x2, x3, x4, x5)  =  U12_GA(x1, x2, x3, x5)

U13_GA(x1, x2, x3, x4, x5, x6)  =  U13_GA(x1, x2, x3, x5, x6)

U14_GA(x1, x2, x3, x4, x5)  =  U14_GA(x1, x2, x3, x5)

U15_GA(x1, x2, x3, x4, x5, x6)  =  U15_GA(x1, x2, x3, x5, x6)

U16_GA(x1, x2, x3, x4, x5)  =  U16_GA(x1, x2, x3, x5)

MERGEC_IN_GGA(x1, x2, x3)  =  MERGEC_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5, x6)  =  U2_GGA(x1, x2, x3, x4, x6)

LEE_IN_GG(x1, x2)  =  LEE_IN_GG(x1, x2)

U8_GG(x1, x2, x3)  =  U8_GG(x1, x2, x3)

U3_GGA(x1, x2, x3, x4, x5, x6)  =  U3_GGA(x1, x2, x3, x4, x6)

U4_GGA(x1, x2, x3, x4, x5, x6)  =  U4_GGA(x1, x2, x3, x4, x6)

U5_GGA(x1, x2, x3, x4, x5, x6)  =  U5_GGA(x1, x2, x3, x4, x6)

GTF_IN_GG(x1, x2)  =  GTF_IN_GG(x1, x2)

U9_GG(x1, x2, x3)  =  U9_GG(x1, x2, x3)

U6_GGA(x1, x2, x3, x4, x5, x6)  =  U6_GGA(x1, x2, x3, x4, x6)

U7_GGA(x1, x2, x3, x4, x5, x6)  =  U7_GGA(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGESORTB_IN_GA(.(X1, .(X2, X3)), X4) -> U10_GA(X1, X2, X3, X4, splitA_in_gaa(X3, X5, X6))
   MERGESORTB_IN_GA(.(X1, .(X2, X3)), X4) -> SPLITA_IN_GAA(X3, X5, X6)
   SPLITA_IN_GAA(.(X1, X2), .(X1, X3), X4) -> U1_GAA(X1, X2, X3, X4, splitA_in_gaa(X2, X4, X3))
   SPLITA_IN_GAA(.(X1, X2), .(X1, X3), X4) -> SPLITA_IN_GAA(X2, X4, X3)
   MERGESORTB_IN_GA(.(X1, .(X2, X3)), X4) -> U11_GA(X1, X2, X3, X4, splitcD_in_ggaa(X2, X3, X5, X6))
   U11_GA(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U12_GA(X1, X2, X3, X4, mergesortB_in_ga(.(X1, X6), X7))
   U11_GA(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> MERGESORTB_IN_GA(.(X1, X6), X7)
   U11_GA(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U13_GA(X1, X2, X3, X4, X5, mergesortcB_in_ga(.(X1, X6), X7))
   U13_GA(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U14_GA(X1, X2, X3, X4, mergesortB_in_ga(X5, X8))
   U13_GA(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> MERGESORTB_IN_GA(X5, X8)
   U13_GA(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U15_GA(X1, X2, X3, X4, X7, mergesortcB_in_ga(X5, X8))
   U15_GA(X1, X2, X3, X4, X7, mergesortcB_out_ga(X5, X8)) -> U16_GA(X1, X2, X3, X4, mergeC_in_gga(X7, X8, X4))
   U15_GA(X1, X2, X3, X4, X7, mergesortcB_out_ga(X5, X8)) -> MERGEC_IN_GGA(X7, X8, X4)
   MERGEC_IN_GGA(.(X1, X2), .(X3, X4), .(X1, X5)) -> U2_GGA(X1, X2, X3, X4, X5, leE_in_gg(X1, X3))
   MERGEC_IN_GGA(.(X1, X2), .(X3, X4), .(X1, X5)) -> LEE_IN_GG(X1, X3)
   LEE_IN_GG(s(X1), s(X2)) -> U8_GG(X1, X2, leE_in_gg(X1, X2))
   LEE_IN_GG(s(X1), s(X2)) -> LEE_IN_GG(X1, X2)
   MERGEC_IN_GGA(.(X1, X2), .(X3, X4), .(X1, X5)) -> U3_GGA(X1, X2, X3, X4, X5, lecE_in_gg(X1, X3))
   U3_GGA(X1, X2, X3, X4, X5, lecE_out_gg(X1, X3)) -> U4_GGA(X1, X2, X3, X4, X5, mergeC_in_gga(X2, .(X3, X4), X5))
   U3_GGA(X1, X2, X3, X4, X5, lecE_out_gg(X1, X3)) -> MERGEC_IN_GGA(X2, .(X3, X4), X5)
   MERGEC_IN_GGA(.(X1, X2), .(X3, X4), .(X3, X5)) -> U5_GGA(X1, X2, X3, X4, X5, gtF_in_gg(X1, X3))
   MERGEC_IN_GGA(.(X1, X2), .(X3, X4), .(X3, X5)) -> GTF_IN_GG(X1, X3)
   GTF_IN_GG(s(X1), s(X2)) -> U9_GG(X1, X2, gtF_in_gg(X1, X2))
   GTF_IN_GG(s(X1), s(X2)) -> GTF_IN_GG(X1, X2)
   MERGEC_IN_GGA(.(X1, X2), .(X3, X4), .(X3, X5)) -> U6_GGA(X1, X2, X3, X4, X5, gtcF_in_gg(X1, X3))
   U6_GGA(X1, X2, X3, X4, X5, gtcF_out_gg(X1, X3)) -> U7_GGA(X1, X2, X3, X4, X5, mergeC_in_gga(.(X1, X2), X4, X5))
   U6_GGA(X1, X2, X3, X4, X5, gtcF_out_gg(X1, X3)) -> MERGEC_IN_GGA(.(X1, X2), X4, X5)

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2, .(X1, X3), X4) -> U29_ggaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   splitcA_in_gaa([], [], []) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2), .(X1, X3), X4) -> U18_gaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   U18_gaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U29_ggaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga([], []) -> mergesortcB_out_ga([], [])
   mergesortcB_in_ga(.(X1, []), .(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3)), X4) -> U19_ga(X1, X2, X3, X4, splitcD_in_ggaa(X2, X3, X5, X6))
   U19_ga(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U20_ga(X1, X2, X3, X4, X5, mergesortcB_in_ga(.(X1, X6), X7))
   U20_ga(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U21_ga(X1, X2, X3, X4, X7, mergesortcB_in_ga(X5, X8))
   U21_ga(X1, X2, X3, X4, X7, mergesortcB_out_ga(X5, X8)) -> U22_ga(X1, X2, X3, X4, mergecC_in_gga(X7, X8, X4))
   mergecC_in_gga([], X1, X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, [], X1) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X3, X4), .(X1, X5)) -> U23_gga(X1, X2, X3, X4, X5, lecE_in_gg(X1, X3))
   lecE_in_gg(s(X1), s(X2)) -> U27_gg(X1, X2, lecE_in_gg(X1, X2))
   lecE_in_gg(0, s(X1)) -> lecE_out_gg(0, s(X1))
   lecE_in_gg(0, 0) -> lecE_out_gg(0, 0)
   U27_gg(X1, X2, lecE_out_gg(X1, X2)) -> lecE_out_gg(s(X1), s(X2))
   U23_gga(X1, X2, X3, X4, X5, lecE_out_gg(X1, X3)) -> U24_gga(X1, X2, X3, X4, X5, mergecC_in_gga(X2, .(X3, X4), X5))
   mergecC_in_gga(.(X1, X2), .(X3, X4), .(X3, X5)) -> U25_gga(X1, X2, X3, X4, X5, gtcF_in_gg(X1, X3))
   gtcF_in_gg(s(X1), s(X2)) -> U28_gg(X1, X2, gtcF_in_gg(X1, X2))
   gtcF_in_gg(s(X1), 0) -> gtcF_out_gg(s(X1), 0)
   U28_gg(X1, X2, gtcF_out_gg(X1, X2)) -> gtcF_out_gg(s(X1), s(X2))
   U25_gga(X1, X2, X3, X4, X5, gtcF_out_gg(X1, X3)) -> U26_gga(X1, X2, X3, X4, X5, mergecC_in_gga(.(X1, X2), X4, X5))
   U26_gga(X1, X2, X3, X4, X5, mergecC_out_gga(.(X1, X2), X4, X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X3, X5))
   U24_gga(X1, X2, X3, X4, X5, mergecC_out_gga(X2, .(X3, X4), X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X1, X5))
   U22_ga(X1, X2, X3, X4, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The argument filtering Pi contains the following mapping:
mergesortB_in_ga(x1, x2)  =  mergesortB_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

splitA_in_gaa(x1, x2, x3)  =  splitA_in_gaa(x1)

splitcD_in_ggaa(x1, x2, x3, x4)  =  splitcD_in_ggaa(x1, x2)

U29_ggaa(x1, x2, x3, x4, x5)  =  U29_ggaa(x1, x2, x5)

splitcA_in_gaa(x1, x2, x3)  =  splitcA_in_gaa(x1)

[]  =  []

splitcA_out_gaa(x1, x2, x3)  =  splitcA_out_gaa(x1, x2, x3)

U18_gaa(x1, x2, x3, x4, x5)  =  U18_gaa(x1, x2, x5)

splitcD_out_ggaa(x1, x2, x3, x4)  =  splitcD_out_ggaa(x1, x2, x3, x4)

mergesortcB_in_ga(x1, x2)  =  mergesortcB_in_ga(x1)

mergesortcB_out_ga(x1, x2)  =  mergesortcB_out_ga(x1, x2)

U19_ga(x1, x2, x3, x4, x5)  =  U19_ga(x1, x2, x3, x5)

U20_ga(x1, x2, x3, x4, x5, x6)  =  U20_ga(x1, x2, x3, x5, x6)

U21_ga(x1, x2, x3, x4, x5, x6)  =  U21_ga(x1, x2, x3, x5, x6)

U22_ga(x1, x2, x3, x4, x5)  =  U22_ga(x1, x2, x3, x5)

mergecC_in_gga(x1, x2, x3)  =  mergecC_in_gga(x1, x2)

mergecC_out_gga(x1, x2, x3)  =  mergecC_out_gga(x1, x2, x3)

U23_gga(x1, x2, x3, x4, x5, x6)  =  U23_gga(x1, x2, x3, x4, x6)

lecE_in_gg(x1, x2)  =  lecE_in_gg(x1, x2)

s(x1)  =  s(x1)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

0  =  0

lecE_out_gg(x1, x2)  =  lecE_out_gg(x1, x2)

U24_gga(x1, x2, x3, x4, x5, x6)  =  U24_gga(x1, x2, x3, x4, x6)

U25_gga(x1, x2, x3, x4, x5, x6)  =  U25_gga(x1, x2, x3, x4, x6)

gtcF_in_gg(x1, x2)  =  gtcF_in_gg(x1, x2)

U28_gg(x1, x2, x3)  =  U28_gg(x1, x2, x3)

gtcF_out_gg(x1, x2)  =  gtcF_out_gg(x1, x2)

U26_gga(x1, x2, x3, x4, x5, x6)  =  U26_gga(x1, x2, x3, x4, x6)

mergeC_in_gga(x1, x2, x3)  =  mergeC_in_gga(x1, x2)

leE_in_gg(x1, x2)  =  leE_in_gg(x1, x2)

gtF_in_gg(x1, x2)  =  gtF_in_gg(x1, x2)

MERGESORTB_IN_GA(x1, x2)  =  MERGESORTB_IN_GA(x1)

U10_GA(x1, x2, x3, x4, x5)  =  U10_GA(x1, x2, x3, x5)

SPLITA_IN_GAA(x1, x2, x3)  =  SPLITA_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x2, x5)

U11_GA(x1, x2, x3, x4, x5)  =  U11_GA(x1, x2, x3, x5)

U12_GA(x1, x2, x3, x4, x5)  =  U12_GA(x1, x2, x3, x5)

U13_GA(x1, x2, x3, x4, x5, x6)  =  U13_GA(x1, x2, x3, x5, x6)

U14_GA(x1, x2, x3, x4, x5)  =  U14_GA(x1, x2, x3, x5)

U15_GA(x1, x2, x3, x4, x5, x6)  =  U15_GA(x1, x2, x3, x5, x6)

U16_GA(x1, x2, x3, x4, x5)  =  U16_GA(x1, x2, x3, x5)

MERGEC_IN_GGA(x1, x2, x3)  =  MERGEC_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5, x6)  =  U2_GGA(x1, x2, x3, x4, x6)

LEE_IN_GG(x1, x2)  =  LEE_IN_GG(x1, x2)

U8_GG(x1, x2, x3)  =  U8_GG(x1, x2, x3)

U3_GGA(x1, x2, x3, x4, x5, x6)  =  U3_GGA(x1, x2, x3, x4, x6)

U4_GGA(x1, x2, x3, x4, x5, x6)  =  U4_GGA(x1, x2, x3, x4, x6)

U5_GGA(x1, x2, x3, x4, x5, x6)  =  U5_GGA(x1, x2, x3, x4, x6)

GTF_IN_GG(x1, x2)  =  GTF_IN_GG(x1, x2)

U9_GG(x1, x2, x3)  =  U9_GG(x1, x2, x3)

U6_GGA(x1, x2, x3, x4, x5, x6)  =  U6_GGA(x1, x2, x3, x4, x6)

U7_GGA(x1, x2, x3, x4, x5, x6)  =  U7_GGA(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 5 SCCs with 16 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GTF_IN_GG(s(X1), s(X2)) -> GTF_IN_GG(X1, X2)

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2, .(X1, X3), X4) -> U29_ggaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   splitcA_in_gaa([], [], []) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2), .(X1, X3), X4) -> U18_gaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   U18_gaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U29_ggaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga([], []) -> mergesortcB_out_ga([], [])
   mergesortcB_in_ga(.(X1, []), .(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3)), X4) -> U19_ga(X1, X2, X3, X4, splitcD_in_ggaa(X2, X3, X5, X6))
   U19_ga(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U20_ga(X1, X2, X3, X4, X5, mergesortcB_in_ga(.(X1, X6), X7))
   U20_ga(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U21_ga(X1, X2, X3, X4, X7, mergesortcB_in_ga(X5, X8))
   U21_ga(X1, X2, X3, X4, X7, mergesortcB_out_ga(X5, X8)) -> U22_ga(X1, X2, X3, X4, mergecC_in_gga(X7, X8, X4))
   mergecC_in_gga([], X1, X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, [], X1) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X3, X4), .(X1, X5)) -> U23_gga(X1, X2, X3, X4, X5, lecE_in_gg(X1, X3))
   lecE_in_gg(s(X1), s(X2)) -> U27_gg(X1, X2, lecE_in_gg(X1, X2))
   lecE_in_gg(0, s(X1)) -> lecE_out_gg(0, s(X1))
   lecE_in_gg(0, 0) -> lecE_out_gg(0, 0)
   U27_gg(X1, X2, lecE_out_gg(X1, X2)) -> lecE_out_gg(s(X1), s(X2))
   U23_gga(X1, X2, X3, X4, X5, lecE_out_gg(X1, X3)) -> U24_gga(X1, X2, X3, X4, X5, mergecC_in_gga(X2, .(X3, X4), X5))
   mergecC_in_gga(.(X1, X2), .(X3, X4), .(X3, X5)) -> U25_gga(X1, X2, X3, X4, X5, gtcF_in_gg(X1, X3))
   gtcF_in_gg(s(X1), s(X2)) -> U28_gg(X1, X2, gtcF_in_gg(X1, X2))
   gtcF_in_gg(s(X1), 0) -> gtcF_out_gg(s(X1), 0)
   U28_gg(X1, X2, gtcF_out_gg(X1, X2)) -> gtcF_out_gg(s(X1), s(X2))
   U25_gga(X1, X2, X3, X4, X5, gtcF_out_gg(X1, X3)) -> U26_gga(X1, X2, X3, X4, X5, mergecC_in_gga(.(X1, X2), X4, X5))
   U26_gga(X1, X2, X3, X4, X5, mergecC_out_gga(.(X1, X2), X4, X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X3, X5))
   U24_gga(X1, X2, X3, X4, X5, mergecC_out_gga(X2, .(X3, X4), X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X1, X5))
   U22_ga(X1, X2, X3, X4, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

splitcD_in_ggaa(x1, x2, x3, x4)  =  splitcD_in_ggaa(x1, x2)

U29_ggaa(x1, x2, x3, x4, x5)  =  U29_ggaa(x1, x2, x5)

splitcA_in_gaa(x1, x2, x3)  =  splitcA_in_gaa(x1)

[]  =  []

splitcA_out_gaa(x1, x2, x3)  =  splitcA_out_gaa(x1, x2, x3)

U18_gaa(x1, x2, x3, x4, x5)  =  U18_gaa(x1, x2, x5)

splitcD_out_ggaa(x1, x2, x3, x4)  =  splitcD_out_ggaa(x1, x2, x3, x4)

mergesortcB_in_ga(x1, x2)  =  mergesortcB_in_ga(x1)

mergesortcB_out_ga(x1, x2)  =  mergesortcB_out_ga(x1, x2)

U19_ga(x1, x2, x3, x4, x5)  =  U19_ga(x1, x2, x3, x5)

U20_ga(x1, x2, x3, x4, x5, x6)  =  U20_ga(x1, x2, x3, x5, x6)

U21_ga(x1, x2, x3, x4, x5, x6)  =  U21_ga(x1, x2, x3, x5, x6)

U22_ga(x1, x2, x3, x4, x5)  =  U22_ga(x1, x2, x3, x5)

mergecC_in_gga(x1, x2, x3)  =  mergecC_in_gga(x1, x2)

mergecC_out_gga(x1, x2, x3)  =  mergecC_out_gga(x1, x2, x3)

U23_gga(x1, x2, x3, x4, x5, x6)  =  U23_gga(x1, x2, x3, x4, x6)

lecE_in_gg(x1, x2)  =  lecE_in_gg(x1, x2)

s(x1)  =  s(x1)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

0  =  0

lecE_out_gg(x1, x2)  =  lecE_out_gg(x1, x2)

U24_gga(x1, x2, x3, x4, x5, x6)  =  U24_gga(x1, x2, x3, x4, x6)

U25_gga(x1, x2, x3, x4, x5, x6)  =  U25_gga(x1, x2, x3, x4, x6)

gtcF_in_gg(x1, x2)  =  gtcF_in_gg(x1, x2)

U28_gg(x1, x2, x3)  =  U28_gg(x1, x2, x3)

gtcF_out_gg(x1, x2)  =  gtcF_out_gg(x1, x2)

U26_gga(x1, x2, x3, x4, x5, x6)  =  U26_gga(x1, x2, x3, x4, x6)

GTF_IN_GG(x1, x2)  =  GTF_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GTF_IN_GG(s(X1), s(X2)) -> GTF_IN_GG(X1, X2)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GTF_IN_GG(s(X1), s(X2)) -> GTF_IN_GG(X1, X2)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GTF_IN_GG(s(X1), s(X2)) -> GTF_IN_GG(X1, X2)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LEE_IN_GG(s(X1), s(X2)) -> LEE_IN_GG(X1, X2)

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2, .(X1, X3), X4) -> U29_ggaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   splitcA_in_gaa([], [], []) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2), .(X1, X3), X4) -> U18_gaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   U18_gaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U29_ggaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga([], []) -> mergesortcB_out_ga([], [])
   mergesortcB_in_ga(.(X1, []), .(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3)), X4) -> U19_ga(X1, X2, X3, X4, splitcD_in_ggaa(X2, X3, X5, X6))
   U19_ga(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U20_ga(X1, X2, X3, X4, X5, mergesortcB_in_ga(.(X1, X6), X7))
   U20_ga(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U21_ga(X1, X2, X3, X4, X7, mergesortcB_in_ga(X5, X8))
   U21_ga(X1, X2, X3, X4, X7, mergesortcB_out_ga(X5, X8)) -> U22_ga(X1, X2, X3, X4, mergecC_in_gga(X7, X8, X4))
   mergecC_in_gga([], X1, X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, [], X1) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X3, X4), .(X1, X5)) -> U23_gga(X1, X2, X3, X4, X5, lecE_in_gg(X1, X3))
   lecE_in_gg(s(X1), s(X2)) -> U27_gg(X1, X2, lecE_in_gg(X1, X2))
   lecE_in_gg(0, s(X1)) -> lecE_out_gg(0, s(X1))
   lecE_in_gg(0, 0) -> lecE_out_gg(0, 0)
   U27_gg(X1, X2, lecE_out_gg(X1, X2)) -> lecE_out_gg(s(X1), s(X2))
   U23_gga(X1, X2, X3, X4, X5, lecE_out_gg(X1, X3)) -> U24_gga(X1, X2, X3, X4, X5, mergecC_in_gga(X2, .(X3, X4), X5))
   mergecC_in_gga(.(X1, X2), .(X3, X4), .(X3, X5)) -> U25_gga(X1, X2, X3, X4, X5, gtcF_in_gg(X1, X3))
   gtcF_in_gg(s(X1), s(X2)) -> U28_gg(X1, X2, gtcF_in_gg(X1, X2))
   gtcF_in_gg(s(X1), 0) -> gtcF_out_gg(s(X1), 0)
   U28_gg(X1, X2, gtcF_out_gg(X1, X2)) -> gtcF_out_gg(s(X1), s(X2))
   U25_gga(X1, X2, X3, X4, X5, gtcF_out_gg(X1, X3)) -> U26_gga(X1, X2, X3, X4, X5, mergecC_in_gga(.(X1, X2), X4, X5))
   U26_gga(X1, X2, X3, X4, X5, mergecC_out_gga(.(X1, X2), X4, X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X3, X5))
   U24_gga(X1, X2, X3, X4, X5, mergecC_out_gga(X2, .(X3, X4), X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X1, X5))
   U22_ga(X1, X2, X3, X4, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

splitcD_in_ggaa(x1, x2, x3, x4)  =  splitcD_in_ggaa(x1, x2)

U29_ggaa(x1, x2, x3, x4, x5)  =  U29_ggaa(x1, x2, x5)

splitcA_in_gaa(x1, x2, x3)  =  splitcA_in_gaa(x1)

[]  =  []

splitcA_out_gaa(x1, x2, x3)  =  splitcA_out_gaa(x1, x2, x3)

U18_gaa(x1, x2, x3, x4, x5)  =  U18_gaa(x1, x2, x5)

splitcD_out_ggaa(x1, x2, x3, x4)  =  splitcD_out_ggaa(x1, x2, x3, x4)

mergesortcB_in_ga(x1, x2)  =  mergesortcB_in_ga(x1)

mergesortcB_out_ga(x1, x2)  =  mergesortcB_out_ga(x1, x2)

U19_ga(x1, x2, x3, x4, x5)  =  U19_ga(x1, x2, x3, x5)

U20_ga(x1, x2, x3, x4, x5, x6)  =  U20_ga(x1, x2, x3, x5, x6)

U21_ga(x1, x2, x3, x4, x5, x6)  =  U21_ga(x1, x2, x3, x5, x6)

U22_ga(x1, x2, x3, x4, x5)  =  U22_ga(x1, x2, x3, x5)

mergecC_in_gga(x1, x2, x3)  =  mergecC_in_gga(x1, x2)

mergecC_out_gga(x1, x2, x3)  =  mergecC_out_gga(x1, x2, x3)

U23_gga(x1, x2, x3, x4, x5, x6)  =  U23_gga(x1, x2, x3, x4, x6)

lecE_in_gg(x1, x2)  =  lecE_in_gg(x1, x2)

s(x1)  =  s(x1)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

0  =  0

lecE_out_gg(x1, x2)  =  lecE_out_gg(x1, x2)

U24_gga(x1, x2, x3, x4, x5, x6)  =  U24_gga(x1, x2, x3, x4, x6)

U25_gga(x1, x2, x3, x4, x5, x6)  =  U25_gga(x1, x2, x3, x4, x6)

gtcF_in_gg(x1, x2)  =  gtcF_in_gg(x1, x2)

U28_gg(x1, x2, x3)  =  U28_gg(x1, x2, x3)

gtcF_out_gg(x1, x2)  =  gtcF_out_gg(x1, x2)

U26_gga(x1, x2, x3, x4, x5, x6)  =  U26_gga(x1, x2, x3, x4, x6)

LEE_IN_GG(x1, x2)  =  LEE_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LEE_IN_GG(s(X1), s(X2)) -> LEE_IN_GG(X1, X2)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LEE_IN_GG(s(X1), s(X2)) -> LEE_IN_GG(X1, X2)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LEE_IN_GG(s(X1), s(X2)) -> LEE_IN_GG(X1, X2)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGEC_IN_GGA(.(X1, X2), .(X3, X4), .(X1, X5)) -> U3_GGA(X1, X2, X3, X4, X5, lecE_in_gg(X1, X3))
   U3_GGA(X1, X2, X3, X4, X5, lecE_out_gg(X1, X3)) -> MERGEC_IN_GGA(X2, .(X3, X4), X5)
   MERGEC_IN_GGA(.(X1, X2), .(X3, X4), .(X3, X5)) -> U6_GGA(X1, X2, X3, X4, X5, gtcF_in_gg(X1, X3))
   U6_GGA(X1, X2, X3, X4, X5, gtcF_out_gg(X1, X3)) -> MERGEC_IN_GGA(.(X1, X2), X4, X5)

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2, .(X1, X3), X4) -> U29_ggaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   splitcA_in_gaa([], [], []) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2), .(X1, X3), X4) -> U18_gaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   U18_gaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U29_ggaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga([], []) -> mergesortcB_out_ga([], [])
   mergesortcB_in_ga(.(X1, []), .(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3)), X4) -> U19_ga(X1, X2, X3, X4, splitcD_in_ggaa(X2, X3, X5, X6))
   U19_ga(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U20_ga(X1, X2, X3, X4, X5, mergesortcB_in_ga(.(X1, X6), X7))
   U20_ga(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U21_ga(X1, X2, X3, X4, X7, mergesortcB_in_ga(X5, X8))
   U21_ga(X1, X2, X3, X4, X7, mergesortcB_out_ga(X5, X8)) -> U22_ga(X1, X2, X3, X4, mergecC_in_gga(X7, X8, X4))
   mergecC_in_gga([], X1, X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, [], X1) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X3, X4), .(X1, X5)) -> U23_gga(X1, X2, X3, X4, X5, lecE_in_gg(X1, X3))
   lecE_in_gg(s(X1), s(X2)) -> U27_gg(X1, X2, lecE_in_gg(X1, X2))
   lecE_in_gg(0, s(X1)) -> lecE_out_gg(0, s(X1))
   lecE_in_gg(0, 0) -> lecE_out_gg(0, 0)
   U27_gg(X1, X2, lecE_out_gg(X1, X2)) -> lecE_out_gg(s(X1), s(X2))
   U23_gga(X1, X2, X3, X4, X5, lecE_out_gg(X1, X3)) -> U24_gga(X1, X2, X3, X4, X5, mergecC_in_gga(X2, .(X3, X4), X5))
   mergecC_in_gga(.(X1, X2), .(X3, X4), .(X3, X5)) -> U25_gga(X1, X2, X3, X4, X5, gtcF_in_gg(X1, X3))
   gtcF_in_gg(s(X1), s(X2)) -> U28_gg(X1, X2, gtcF_in_gg(X1, X2))
   gtcF_in_gg(s(X1), 0) -> gtcF_out_gg(s(X1), 0)
   U28_gg(X1, X2, gtcF_out_gg(X1, X2)) -> gtcF_out_gg(s(X1), s(X2))
   U25_gga(X1, X2, X3, X4, X5, gtcF_out_gg(X1, X3)) -> U26_gga(X1, X2, X3, X4, X5, mergecC_in_gga(.(X1, X2), X4, X5))
   U26_gga(X1, X2, X3, X4, X5, mergecC_out_gga(.(X1, X2), X4, X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X3, X5))
   U24_gga(X1, X2, X3, X4, X5, mergecC_out_gga(X2, .(X3, X4), X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X1, X5))
   U22_ga(X1, X2, X3, X4, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

splitcD_in_ggaa(x1, x2, x3, x4)  =  splitcD_in_ggaa(x1, x2)

U29_ggaa(x1, x2, x3, x4, x5)  =  U29_ggaa(x1, x2, x5)

splitcA_in_gaa(x1, x2, x3)  =  splitcA_in_gaa(x1)

[]  =  []

splitcA_out_gaa(x1, x2, x3)  =  splitcA_out_gaa(x1, x2, x3)

U18_gaa(x1, x2, x3, x4, x5)  =  U18_gaa(x1, x2, x5)

splitcD_out_ggaa(x1, x2, x3, x4)  =  splitcD_out_ggaa(x1, x2, x3, x4)

mergesortcB_in_ga(x1, x2)  =  mergesortcB_in_ga(x1)

mergesortcB_out_ga(x1, x2)  =  mergesortcB_out_ga(x1, x2)

U19_ga(x1, x2, x3, x4, x5)  =  U19_ga(x1, x2, x3, x5)

U20_ga(x1, x2, x3, x4, x5, x6)  =  U20_ga(x1, x2, x3, x5, x6)

U21_ga(x1, x2, x3, x4, x5, x6)  =  U21_ga(x1, x2, x3, x5, x6)

U22_ga(x1, x2, x3, x4, x5)  =  U22_ga(x1, x2, x3, x5)

mergecC_in_gga(x1, x2, x3)  =  mergecC_in_gga(x1, x2)

mergecC_out_gga(x1, x2, x3)  =  mergecC_out_gga(x1, x2, x3)

U23_gga(x1, x2, x3, x4, x5, x6)  =  U23_gga(x1, x2, x3, x4, x6)

lecE_in_gg(x1, x2)  =  lecE_in_gg(x1, x2)

s(x1)  =  s(x1)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

0  =  0

lecE_out_gg(x1, x2)  =  lecE_out_gg(x1, x2)

U24_gga(x1, x2, x3, x4, x5, x6)  =  U24_gga(x1, x2, x3, x4, x6)

U25_gga(x1, x2, x3, x4, x5, x6)  =  U25_gga(x1, x2, x3, x4, x6)

gtcF_in_gg(x1, x2)  =  gtcF_in_gg(x1, x2)

U28_gg(x1, x2, x3)  =  U28_gg(x1, x2, x3)

gtcF_out_gg(x1, x2)  =  gtcF_out_gg(x1, x2)

U26_gga(x1, x2, x3, x4, x5, x6)  =  U26_gga(x1, x2, x3, x4, x6)

MERGEC_IN_GGA(x1, x2, x3)  =  MERGEC_IN_GGA(x1, x2)

U3_GGA(x1, x2, x3, x4, x5, x6)  =  U3_GGA(x1, x2, x3, x4, x6)

U6_GGA(x1, x2, x3, x4, x5, x6)  =  U6_GGA(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(23)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGEC_IN_GGA(.(X1, X2), .(X3, X4), .(X1, X5)) -> U3_GGA(X1, X2, X3, X4, X5, lecE_in_gg(X1, X3))
   U3_GGA(X1, X2, X3, X4, X5, lecE_out_gg(X1, X3)) -> MERGEC_IN_GGA(X2, .(X3, X4), X5)
   MERGEC_IN_GGA(.(X1, X2), .(X3, X4), .(X3, X5)) -> U6_GGA(X1, X2, X3, X4, X5, gtcF_in_gg(X1, X3))
   U6_GGA(X1, X2, X3, X4, X5, gtcF_out_gg(X1, X3)) -> MERGEC_IN_GGA(.(X1, X2), X4, X5)

The TRS R consists of the following rules:

   lecE_in_gg(s(X1), s(X2)) -> U27_gg(X1, X2, lecE_in_gg(X1, X2))
   lecE_in_gg(0, s(X1)) -> lecE_out_gg(0, s(X1))
   lecE_in_gg(0, 0) -> lecE_out_gg(0, 0)
   gtcF_in_gg(s(X1), s(X2)) -> U28_gg(X1, X2, gtcF_in_gg(X1, X2))
   gtcF_in_gg(s(X1), 0) -> gtcF_out_gg(s(X1), 0)
   U27_gg(X1, X2, lecE_out_gg(X1, X2)) -> lecE_out_gg(s(X1), s(X2))
   U28_gg(X1, X2, gtcF_out_gg(X1, X2)) -> gtcF_out_gg(s(X1), s(X2))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

lecE_in_gg(x1, x2)  =  lecE_in_gg(x1, x2)

s(x1)  =  s(x1)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

0  =  0

lecE_out_gg(x1, x2)  =  lecE_out_gg(x1, x2)

gtcF_in_gg(x1, x2)  =  gtcF_in_gg(x1, x2)

U28_gg(x1, x2, x3)  =  U28_gg(x1, x2, x3)

gtcF_out_gg(x1, x2)  =  gtcF_out_gg(x1, x2)

MERGEC_IN_GGA(x1, x2, x3)  =  MERGEC_IN_GGA(x1, x2)

U3_GGA(x1, x2, x3, x4, x5, x6)  =  U3_GGA(x1, x2, x3, x4, x6)

U6_GGA(x1, x2, x3, x4, x5, x6)  =  U6_GGA(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(24) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGEC_IN_GGA(.(X1, X2), .(X3, X4)) -> U3_GGA(X1, X2, X3, X4, lecE_in_gg(X1, X3))
   U3_GGA(X1, X2, X3, X4, lecE_out_gg(X1, X3)) -> MERGEC_IN_GGA(X2, .(X3, X4))
   MERGEC_IN_GGA(.(X1, X2), .(X3, X4)) -> U6_GGA(X1, X2, X3, X4, gtcF_in_gg(X1, X3))
   U6_GGA(X1, X2, X3, X4, gtcF_out_gg(X1, X3)) -> MERGEC_IN_GGA(.(X1, X2), X4)

The TRS R consists of the following rules:

   lecE_in_gg(s(X1), s(X2)) -> U27_gg(X1, X2, lecE_in_gg(X1, X2))
   lecE_in_gg(0, s(X1)) -> lecE_out_gg(0, s(X1))
   lecE_in_gg(0, 0) -> lecE_out_gg(0, 0)
   gtcF_in_gg(s(X1), s(X2)) -> U28_gg(X1, X2, gtcF_in_gg(X1, X2))
   gtcF_in_gg(s(X1), 0) -> gtcF_out_gg(s(X1), 0)
   U27_gg(X1, X2, lecE_out_gg(X1, X2)) -> lecE_out_gg(s(X1), s(X2))
   U28_gg(X1, X2, gtcF_out_gg(X1, X2)) -> gtcF_out_gg(s(X1), s(X2))

The set Q consists of the following terms:

   lecE_in_gg(x0, x1)
   gtcF_in_gg(x0, x1)
   U27_gg(x0, x1, x2)
   U28_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   lecE_in_gg(0, s(X1)) -> lecE_out_gg(0, s(X1))
   lecE_in_gg(0, 0) -> lecE_out_gg(0, 0)

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 2*x_1 + x_2
   POL(0) = 1
   POL(MERGEC_IN_GGA(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U27_gg(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3
   POL(U28_gg(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U3_GGA(x_1, x_2, x_3, x_4, x_5)) = x_1 + 2*x_2 + 2*x_3 + 2*x_4 + x_5
   POL(U6_GGA(x_1, x_2, x_3, x_4, x_5)) = 2*x_1 + 2*x_2 + x_3 + 2*x_4 + 2*x_5
   POL(gtcF_in_gg(x_1, x_2)) = x_1 + x_2
   POL(gtcF_out_gg(x_1, x_2)) = x_1 + x_2
   POL(lecE_in_gg(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(lecE_out_gg(x_1, x_2)) = x_1 + 2*x_2
   POL(s(x_1)) = 2*x_1


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGEC_IN_GGA(.(X1, X2), .(X3, X4)) -> U3_GGA(X1, X2, X3, X4, lecE_in_gg(X1, X3))
   U3_GGA(X1, X2, X3, X4, lecE_out_gg(X1, X3)) -> MERGEC_IN_GGA(X2, .(X3, X4))
   MERGEC_IN_GGA(.(X1, X2), .(X3, X4)) -> U6_GGA(X1, X2, X3, X4, gtcF_in_gg(X1, X3))
   U6_GGA(X1, X2, X3, X4, gtcF_out_gg(X1, X3)) -> MERGEC_IN_GGA(.(X1, X2), X4)

The TRS R consists of the following rules:

   lecE_in_gg(s(X1), s(X2)) -> U27_gg(X1, X2, lecE_in_gg(X1, X2))
   gtcF_in_gg(s(X1), s(X2)) -> U28_gg(X1, X2, gtcF_in_gg(X1, X2))
   gtcF_in_gg(s(X1), 0) -> gtcF_out_gg(s(X1), 0)
   U27_gg(X1, X2, lecE_out_gg(X1, X2)) -> lecE_out_gg(s(X1), s(X2))
   U28_gg(X1, X2, gtcF_out_gg(X1, X2)) -> gtcF_out_gg(s(X1), s(X2))

The set Q consists of the following terms:

   lecE_in_gg(x0, x1)
   gtcF_in_gg(x0, x1)
   U27_gg(x0, x1, x2)
   U28_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U3_GGA(X1, X2, X3, X4, lecE_out_gg(X1, X3)) -> MERGEC_IN_GGA(X2, .(X3, X4))


Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 2*x_1 + x_2
   POL(0) = 0
   POL(MERGEC_IN_GGA(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(U27_gg(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3
   POL(U28_gg(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U3_GGA(x_1, x_2, x_3, x_4, x_5)) = 1 + x_1 + 2*x_2 + 2*x_3 + 2*x_4 + x_5
   POL(U6_GGA(x_1, x_2, x_3, x_4, x_5)) = 1 + 2*x_1 + 2*x_2 + x_3 + 2*x_4 + 2*x_5
   POL(gtcF_in_gg(x_1, x_2)) = x_1 + x_2
   POL(gtcF_out_gg(x_1, x_2)) = x_1 + x_2
   POL(lecE_in_gg(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(lecE_out_gg(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(s(x_1)) = 2*x_1


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGEC_IN_GGA(.(X1, X2), .(X3, X4)) -> U3_GGA(X1, X2, X3, X4, lecE_in_gg(X1, X3))
   MERGEC_IN_GGA(.(X1, X2), .(X3, X4)) -> U6_GGA(X1, X2, X3, X4, gtcF_in_gg(X1, X3))
   U6_GGA(X1, X2, X3, X4, gtcF_out_gg(X1, X3)) -> MERGEC_IN_GGA(.(X1, X2), X4)

The TRS R consists of the following rules:

   lecE_in_gg(s(X1), s(X2)) -> U27_gg(X1, X2, lecE_in_gg(X1, X2))
   gtcF_in_gg(s(X1), s(X2)) -> U28_gg(X1, X2, gtcF_in_gg(X1, X2))
   gtcF_in_gg(s(X1), 0) -> gtcF_out_gg(s(X1), 0)
   U27_gg(X1, X2, lecE_out_gg(X1, X2)) -> lecE_out_gg(s(X1), s(X2))
   U28_gg(X1, X2, gtcF_out_gg(X1, X2)) -> gtcF_out_gg(s(X1), s(X2))

The set Q consists of the following terms:

   lecE_in_gg(x0, x1)
   gtcF_in_gg(x0, x1)
   U27_gg(x0, x1, x2)
   U28_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGEC_IN_GGA(.(X1, X2), .(X3, X4)) -> U6_GGA(X1, X2, X3, X4, gtcF_in_gg(X1, X3))
   U6_GGA(X1, X2, X3, X4, gtcF_out_gg(X1, X3)) -> MERGEC_IN_GGA(.(X1, X2), X4)

The TRS R consists of the following rules:

   lecE_in_gg(s(X1), s(X2)) -> U27_gg(X1, X2, lecE_in_gg(X1, X2))
   gtcF_in_gg(s(X1), s(X2)) -> U28_gg(X1, X2, gtcF_in_gg(X1, X2))
   gtcF_in_gg(s(X1), 0) -> gtcF_out_gg(s(X1), 0)
   U27_gg(X1, X2, lecE_out_gg(X1, X2)) -> lecE_out_gg(s(X1), s(X2))
   U28_gg(X1, X2, gtcF_out_gg(X1, X2)) -> gtcF_out_gg(s(X1), s(X2))

The set Q consists of the following terms:

   lecE_in_gg(x0, x1)
   gtcF_in_gg(x0, x1)
   U27_gg(x0, x1, x2)
   U28_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(32) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGEC_IN_GGA(.(X1, X2), .(X3, X4)) -> U6_GGA(X1, X2, X3, X4, gtcF_in_gg(X1, X3))
   U6_GGA(X1, X2, X3, X4, gtcF_out_gg(X1, X3)) -> MERGEC_IN_GGA(.(X1, X2), X4)

The TRS R consists of the following rules:

   gtcF_in_gg(s(X1), s(X2)) -> U28_gg(X1, X2, gtcF_in_gg(X1, X2))
   gtcF_in_gg(s(X1), 0) -> gtcF_out_gg(s(X1), 0)
   U28_gg(X1, X2, gtcF_out_gg(X1, X2)) -> gtcF_out_gg(s(X1), s(X2))

The set Q consists of the following terms:

   lecE_in_gg(x0, x1)
   gtcF_in_gg(x0, x1)
   U27_gg(x0, x1, x2)
   U28_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(34) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   lecE_in_gg(x0, x1)
   U27_gg(x0, x1, x2)


----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGEC_IN_GGA(.(X1, X2), .(X3, X4)) -> U6_GGA(X1, X2, X3, X4, gtcF_in_gg(X1, X3))
   U6_GGA(X1, X2, X3, X4, gtcF_out_gg(X1, X3)) -> MERGEC_IN_GGA(.(X1, X2), X4)

The TRS R consists of the following rules:

   gtcF_in_gg(s(X1), s(X2)) -> U28_gg(X1, X2, gtcF_in_gg(X1, X2))
   gtcF_in_gg(s(X1), 0) -> gtcF_out_gg(s(X1), 0)
   U28_gg(X1, X2, gtcF_out_gg(X1, X2)) -> gtcF_out_gg(s(X1), s(X2))

The set Q consists of the following terms:

   gtcF_in_gg(x0, x1)
   U28_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(36) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U6_GGA(X1, X2, X3, X4, gtcF_out_gg(X1, X3)) -> MERGEC_IN_GGA(.(X1, X2), X4)
The graph contains the following edges 4 >= 2


*MERGEC_IN_GGA(.(X1, X2), .(X3, X4)) -> U6_GGA(X1, X2, X3, X4, gtcF_in_gg(X1, X3))
The graph contains the following edges 1 > 1, 1 > 2, 2 > 3, 2 > 4


----------------------------------------

(37)
YES

----------------------------------------

(38)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SPLITA_IN_GAA(.(X1, X2), .(X1, X3), X4) -> SPLITA_IN_GAA(X2, X4, X3)

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2, .(X1, X3), X4) -> U29_ggaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   splitcA_in_gaa([], [], []) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2), .(X1, X3), X4) -> U18_gaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   U18_gaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U29_ggaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga([], []) -> mergesortcB_out_ga([], [])
   mergesortcB_in_ga(.(X1, []), .(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3)), X4) -> U19_ga(X1, X2, X3, X4, splitcD_in_ggaa(X2, X3, X5, X6))
   U19_ga(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U20_ga(X1, X2, X3, X4, X5, mergesortcB_in_ga(.(X1, X6), X7))
   U20_ga(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U21_ga(X1, X2, X3, X4, X7, mergesortcB_in_ga(X5, X8))
   U21_ga(X1, X2, X3, X4, X7, mergesortcB_out_ga(X5, X8)) -> U22_ga(X1, X2, X3, X4, mergecC_in_gga(X7, X8, X4))
   mergecC_in_gga([], X1, X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, [], X1) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X3, X4), .(X1, X5)) -> U23_gga(X1, X2, X3, X4, X5, lecE_in_gg(X1, X3))
   lecE_in_gg(s(X1), s(X2)) -> U27_gg(X1, X2, lecE_in_gg(X1, X2))
   lecE_in_gg(0, s(X1)) -> lecE_out_gg(0, s(X1))
   lecE_in_gg(0, 0) -> lecE_out_gg(0, 0)
   U27_gg(X1, X2, lecE_out_gg(X1, X2)) -> lecE_out_gg(s(X1), s(X2))
   U23_gga(X1, X2, X3, X4, X5, lecE_out_gg(X1, X3)) -> U24_gga(X1, X2, X3, X4, X5, mergecC_in_gga(X2, .(X3, X4), X5))
   mergecC_in_gga(.(X1, X2), .(X3, X4), .(X3, X5)) -> U25_gga(X1, X2, X3, X4, X5, gtcF_in_gg(X1, X3))
   gtcF_in_gg(s(X1), s(X2)) -> U28_gg(X1, X2, gtcF_in_gg(X1, X2))
   gtcF_in_gg(s(X1), 0) -> gtcF_out_gg(s(X1), 0)
   U28_gg(X1, X2, gtcF_out_gg(X1, X2)) -> gtcF_out_gg(s(X1), s(X2))
   U25_gga(X1, X2, X3, X4, X5, gtcF_out_gg(X1, X3)) -> U26_gga(X1, X2, X3, X4, X5, mergecC_in_gga(.(X1, X2), X4, X5))
   U26_gga(X1, X2, X3, X4, X5, mergecC_out_gga(.(X1, X2), X4, X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X3, X5))
   U24_gga(X1, X2, X3, X4, X5, mergecC_out_gga(X2, .(X3, X4), X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X1, X5))
   U22_ga(X1, X2, X3, X4, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

splitcD_in_ggaa(x1, x2, x3, x4)  =  splitcD_in_ggaa(x1, x2)

U29_ggaa(x1, x2, x3, x4, x5)  =  U29_ggaa(x1, x2, x5)

splitcA_in_gaa(x1, x2, x3)  =  splitcA_in_gaa(x1)

[]  =  []

splitcA_out_gaa(x1, x2, x3)  =  splitcA_out_gaa(x1, x2, x3)

U18_gaa(x1, x2, x3, x4, x5)  =  U18_gaa(x1, x2, x5)

splitcD_out_ggaa(x1, x2, x3, x4)  =  splitcD_out_ggaa(x1, x2, x3, x4)

mergesortcB_in_ga(x1, x2)  =  mergesortcB_in_ga(x1)

mergesortcB_out_ga(x1, x2)  =  mergesortcB_out_ga(x1, x2)

U19_ga(x1, x2, x3, x4, x5)  =  U19_ga(x1, x2, x3, x5)

U20_ga(x1, x2, x3, x4, x5, x6)  =  U20_ga(x1, x2, x3, x5, x6)

U21_ga(x1, x2, x3, x4, x5, x6)  =  U21_ga(x1, x2, x3, x5, x6)

U22_ga(x1, x2, x3, x4, x5)  =  U22_ga(x1, x2, x3, x5)

mergecC_in_gga(x1, x2, x3)  =  mergecC_in_gga(x1, x2)

mergecC_out_gga(x1, x2, x3)  =  mergecC_out_gga(x1, x2, x3)

U23_gga(x1, x2, x3, x4, x5, x6)  =  U23_gga(x1, x2, x3, x4, x6)

lecE_in_gg(x1, x2)  =  lecE_in_gg(x1, x2)

s(x1)  =  s(x1)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

0  =  0

lecE_out_gg(x1, x2)  =  lecE_out_gg(x1, x2)

U24_gga(x1, x2, x3, x4, x5, x6)  =  U24_gga(x1, x2, x3, x4, x6)

U25_gga(x1, x2, x3, x4, x5, x6)  =  U25_gga(x1, x2, x3, x4, x6)

gtcF_in_gg(x1, x2)  =  gtcF_in_gg(x1, x2)

U28_gg(x1, x2, x3)  =  U28_gg(x1, x2, x3)

gtcF_out_gg(x1, x2)  =  gtcF_out_gg(x1, x2)

U26_gga(x1, x2, x3, x4, x5, x6)  =  U26_gga(x1, x2, x3, x4, x6)

SPLITA_IN_GAA(x1, x2, x3)  =  SPLITA_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(39) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(40)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SPLITA_IN_GAA(.(X1, X2), .(X1, X3), X4) -> SPLITA_IN_GAA(X2, X4, X3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

SPLITA_IN_GAA(x1, x2, x3)  =  SPLITA_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(41) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SPLITA_IN_GAA(.(X1, X2)) -> SPLITA_IN_GAA(X2)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(43) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SPLITA_IN_GAA(.(X1, X2)) -> SPLITA_IN_GAA(X2)
The graph contains the following edges 1 > 1


----------------------------------------

(44)
YES

----------------------------------------

(45)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGESORTB_IN_GA(.(X1, .(X2, X3)), X4) -> U11_GA(X1, X2, X3, X4, splitcD_in_ggaa(X2, X3, X5, X6))
   U11_GA(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> MERGESORTB_IN_GA(.(X1, X6), X7)
   U11_GA(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U13_GA(X1, X2, X3, X4, X5, mergesortcB_in_ga(.(X1, X6), X7))
   U13_GA(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> MERGESORTB_IN_GA(X5, X8)

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2, .(X1, X3), X4) -> U29_ggaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   splitcA_in_gaa([], [], []) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2), .(X1, X3), X4) -> U18_gaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   U18_gaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U29_ggaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga([], []) -> mergesortcB_out_ga([], [])
   mergesortcB_in_ga(.(X1, []), .(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3)), X4) -> U19_ga(X1, X2, X3, X4, splitcD_in_ggaa(X2, X3, X5, X6))
   U19_ga(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U20_ga(X1, X2, X3, X4, X5, mergesortcB_in_ga(.(X1, X6), X7))
   U20_ga(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U21_ga(X1, X2, X3, X4, X7, mergesortcB_in_ga(X5, X8))
   U21_ga(X1, X2, X3, X4, X7, mergesortcB_out_ga(X5, X8)) -> U22_ga(X1, X2, X3, X4, mergecC_in_gga(X7, X8, X4))
   mergecC_in_gga([], X1, X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, [], X1) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X3, X4), .(X1, X5)) -> U23_gga(X1, X2, X3, X4, X5, lecE_in_gg(X1, X3))
   lecE_in_gg(s(X1), s(X2)) -> U27_gg(X1, X2, lecE_in_gg(X1, X2))
   lecE_in_gg(0, s(X1)) -> lecE_out_gg(0, s(X1))
   lecE_in_gg(0, 0) -> lecE_out_gg(0, 0)
   U27_gg(X1, X2, lecE_out_gg(X1, X2)) -> lecE_out_gg(s(X1), s(X2))
   U23_gga(X1, X2, X3, X4, X5, lecE_out_gg(X1, X3)) -> U24_gga(X1, X2, X3, X4, X5, mergecC_in_gga(X2, .(X3, X4), X5))
   mergecC_in_gga(.(X1, X2), .(X3, X4), .(X3, X5)) -> U25_gga(X1, X2, X3, X4, X5, gtcF_in_gg(X1, X3))
   gtcF_in_gg(s(X1), s(X2)) -> U28_gg(X1, X2, gtcF_in_gg(X1, X2))
   gtcF_in_gg(s(X1), 0) -> gtcF_out_gg(s(X1), 0)
   U28_gg(X1, X2, gtcF_out_gg(X1, X2)) -> gtcF_out_gg(s(X1), s(X2))
   U25_gga(X1, X2, X3, X4, X5, gtcF_out_gg(X1, X3)) -> U26_gga(X1, X2, X3, X4, X5, mergecC_in_gga(.(X1, X2), X4, X5))
   U26_gga(X1, X2, X3, X4, X5, mergecC_out_gga(.(X1, X2), X4, X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X3, X5))
   U24_gga(X1, X2, X3, X4, X5, mergecC_out_gga(X2, .(X3, X4), X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X1, X5))
   U22_ga(X1, X2, X3, X4, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

splitcD_in_ggaa(x1, x2, x3, x4)  =  splitcD_in_ggaa(x1, x2)

U29_ggaa(x1, x2, x3, x4, x5)  =  U29_ggaa(x1, x2, x5)

splitcA_in_gaa(x1, x2, x3)  =  splitcA_in_gaa(x1)

[]  =  []

splitcA_out_gaa(x1, x2, x3)  =  splitcA_out_gaa(x1, x2, x3)

U18_gaa(x1, x2, x3, x4, x5)  =  U18_gaa(x1, x2, x5)

splitcD_out_ggaa(x1, x2, x3, x4)  =  splitcD_out_ggaa(x1, x2, x3, x4)

mergesortcB_in_ga(x1, x2)  =  mergesortcB_in_ga(x1)

mergesortcB_out_ga(x1, x2)  =  mergesortcB_out_ga(x1, x2)

U19_ga(x1, x2, x3, x4, x5)  =  U19_ga(x1, x2, x3, x5)

U20_ga(x1, x2, x3, x4, x5, x6)  =  U20_ga(x1, x2, x3, x5, x6)

U21_ga(x1, x2, x3, x4, x5, x6)  =  U21_ga(x1, x2, x3, x5, x6)

U22_ga(x1, x2, x3, x4, x5)  =  U22_ga(x1, x2, x3, x5)

mergecC_in_gga(x1, x2, x3)  =  mergecC_in_gga(x1, x2)

mergecC_out_gga(x1, x2, x3)  =  mergecC_out_gga(x1, x2, x3)

U23_gga(x1, x2, x3, x4, x5, x6)  =  U23_gga(x1, x2, x3, x4, x6)

lecE_in_gg(x1, x2)  =  lecE_in_gg(x1, x2)

s(x1)  =  s(x1)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

0  =  0

lecE_out_gg(x1, x2)  =  lecE_out_gg(x1, x2)

U24_gga(x1, x2, x3, x4, x5, x6)  =  U24_gga(x1, x2, x3, x4, x6)

U25_gga(x1, x2, x3, x4, x5, x6)  =  U25_gga(x1, x2, x3, x4, x6)

gtcF_in_gg(x1, x2)  =  gtcF_in_gg(x1, x2)

U28_gg(x1, x2, x3)  =  U28_gg(x1, x2, x3)

gtcF_out_gg(x1, x2)  =  gtcF_out_gg(x1, x2)

U26_gga(x1, x2, x3, x4, x5, x6)  =  U26_gga(x1, x2, x3, x4, x6)

MERGESORTB_IN_GA(x1, x2)  =  MERGESORTB_IN_GA(x1)

U11_GA(x1, x2, x3, x4, x5)  =  U11_GA(x1, x2, x3, x5)

U13_GA(x1, x2, x3, x4, x5, x6)  =  U13_GA(x1, x2, x3, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(46) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGESORTB_IN_GA(.(X1, .(X2, X3))) -> U11_GA(X1, X2, X3, splitcD_in_ggaa(X2, X3))
   U11_GA(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> MERGESORTB_IN_GA(.(X1, X6))
   U11_GA(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> U13_GA(X1, X2, X3, X5, mergesortcB_in_ga(.(X1, X6)))
   U13_GA(X1, X2, X3, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> MERGESORTB_IN_GA(X5)

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2) -> U29_ggaa(X1, X2, splitcA_in_gaa(X2))
   splitcA_in_gaa([]) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2)) -> U18_gaa(X1, X2, splitcA_in_gaa(X2))
   U18_gaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U29_ggaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga([]) -> mergesortcB_out_ga([], [])
   mergesortcB_in_ga(.(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3))) -> U19_ga(X1, X2, X3, splitcD_in_ggaa(X2, X3))
   U19_ga(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> U20_ga(X1, X2, X3, X5, mergesortcB_in_ga(.(X1, X6)))
   U20_ga(X1, X2, X3, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U21_ga(X1, X2, X3, X7, mergesortcB_in_ga(X5))
   U21_ga(X1, X2, X3, X7, mergesortcB_out_ga(X5, X8)) -> U22_ga(X1, X2, X3, mergecC_in_gga(X7, X8))
   mergecC_in_gga([], X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, []) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X3, X4)) -> U23_gga(X1, X2, X3, X4, lecE_in_gg(X1, X3))
   lecE_in_gg(s(X1), s(X2)) -> U27_gg(X1, X2, lecE_in_gg(X1, X2))
   lecE_in_gg(0, s(X1)) -> lecE_out_gg(0, s(X1))
   lecE_in_gg(0, 0) -> lecE_out_gg(0, 0)
   U27_gg(X1, X2, lecE_out_gg(X1, X2)) -> lecE_out_gg(s(X1), s(X2))
   U23_gga(X1, X2, X3, X4, lecE_out_gg(X1, X3)) -> U24_gga(X1, X2, X3, X4, mergecC_in_gga(X2, .(X3, X4)))
   mergecC_in_gga(.(X1, X2), .(X3, X4)) -> U25_gga(X1, X2, X3, X4, gtcF_in_gg(X1, X3))
   gtcF_in_gg(s(X1), s(X2)) -> U28_gg(X1, X2, gtcF_in_gg(X1, X2))
   gtcF_in_gg(s(X1), 0) -> gtcF_out_gg(s(X1), 0)
   U28_gg(X1, X2, gtcF_out_gg(X1, X2)) -> gtcF_out_gg(s(X1), s(X2))
   U25_gga(X1, X2, X3, X4, gtcF_out_gg(X1, X3)) -> U26_gga(X1, X2, X3, X4, mergecC_in_gga(.(X1, X2), X4))
   U26_gga(X1, X2, X3, X4, mergecC_out_gga(.(X1, X2), X4, X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X3, X5))
   U24_gga(X1, X2, X3, X4, mergecC_out_gga(X2, .(X3, X4), X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X1, X5))
   U22_ga(X1, X2, X3, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The set Q consists of the following terms:

   splitcD_in_ggaa(x0, x1)
   splitcA_in_gaa(x0)
   U18_gaa(x0, x1, x2)
   U29_ggaa(x0, x1, x2)
   mergesortcB_in_ga(x0)
   U19_ga(x0, x1, x2, x3)
   U20_ga(x0, x1, x2, x3, x4)
   U21_ga(x0, x1, x2, x3, x4)
   mergecC_in_gga(x0, x1)
   lecE_in_gg(x0, x1)
   U27_gg(x0, x1, x2)
   U23_gga(x0, x1, x2, x3, x4)
   gtcF_in_gg(x0, x1)
   U28_gg(x0, x1, x2)
   U25_gga(x0, x1, x2, x3, x4)
   U26_gga(x0, x1, x2, x3, x4)
   U24_gga(x0, x1, x2, x3, x4)
   U22_ga(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(48) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MERGESORTB_IN_GA(.(X1, .(X2, X3))) -> U11_GA(X1, X2, X3, splitcD_in_ggaa(X2, X3)) at position [3] we obtained the following new rules [LPAR04]:

   (MERGESORTB_IN_GA(.(X1, .(X2, X3))) -> U11_GA(X1, X2, X3, U29_ggaa(X2, X3, splitcA_in_gaa(X3))),MERGESORTB_IN_GA(.(X1, .(X2, X3))) -> U11_GA(X1, X2, X3, U29_ggaa(X2, X3, splitcA_in_gaa(X3))))


----------------------------------------

(49)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11_GA(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> MERGESORTB_IN_GA(.(X1, X6))
   U11_GA(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> U13_GA(X1, X2, X3, X5, mergesortcB_in_ga(.(X1, X6)))
   U13_GA(X1, X2, X3, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> MERGESORTB_IN_GA(X5)
   MERGESORTB_IN_GA(.(X1, .(X2, X3))) -> U11_GA(X1, X2, X3, U29_ggaa(X2, X3, splitcA_in_gaa(X3)))

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2) -> U29_ggaa(X1, X2, splitcA_in_gaa(X2))
   splitcA_in_gaa([]) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2)) -> U18_gaa(X1, X2, splitcA_in_gaa(X2))
   U18_gaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U29_ggaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga([]) -> mergesortcB_out_ga([], [])
   mergesortcB_in_ga(.(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3))) -> U19_ga(X1, X2, X3, splitcD_in_ggaa(X2, X3))
   U19_ga(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> U20_ga(X1, X2, X3, X5, mergesortcB_in_ga(.(X1, X6)))
   U20_ga(X1, X2, X3, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U21_ga(X1, X2, X3, X7, mergesortcB_in_ga(X5))
   U21_ga(X1, X2, X3, X7, mergesortcB_out_ga(X5, X8)) -> U22_ga(X1, X2, X3, mergecC_in_gga(X7, X8))
   mergecC_in_gga([], X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, []) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X3, X4)) -> U23_gga(X1, X2, X3, X4, lecE_in_gg(X1, X3))
   lecE_in_gg(s(X1), s(X2)) -> U27_gg(X1, X2, lecE_in_gg(X1, X2))
   lecE_in_gg(0, s(X1)) -> lecE_out_gg(0, s(X1))
   lecE_in_gg(0, 0) -> lecE_out_gg(0, 0)
   U27_gg(X1, X2, lecE_out_gg(X1, X2)) -> lecE_out_gg(s(X1), s(X2))
   U23_gga(X1, X2, X3, X4, lecE_out_gg(X1, X3)) -> U24_gga(X1, X2, X3, X4, mergecC_in_gga(X2, .(X3, X4)))
   mergecC_in_gga(.(X1, X2), .(X3, X4)) -> U25_gga(X1, X2, X3, X4, gtcF_in_gg(X1, X3))
   gtcF_in_gg(s(X1), s(X2)) -> U28_gg(X1, X2, gtcF_in_gg(X1, X2))
   gtcF_in_gg(s(X1), 0) -> gtcF_out_gg(s(X1), 0)
   U28_gg(X1, X2, gtcF_out_gg(X1, X2)) -> gtcF_out_gg(s(X1), s(X2))
   U25_gga(X1, X2, X3, X4, gtcF_out_gg(X1, X3)) -> U26_gga(X1, X2, X3, X4, mergecC_in_gga(.(X1, X2), X4))
   U26_gga(X1, X2, X3, X4, mergecC_out_gga(.(X1, X2), X4, X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X3, X5))
   U24_gga(X1, X2, X3, X4, mergecC_out_gga(X2, .(X3, X4), X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X1, X5))
   U22_ga(X1, X2, X3, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The set Q consists of the following terms:

   splitcD_in_ggaa(x0, x1)
   splitcA_in_gaa(x0)
   U18_gaa(x0, x1, x2)
   U29_ggaa(x0, x1, x2)
   mergesortcB_in_ga(x0)
   U19_ga(x0, x1, x2, x3)
   U20_ga(x0, x1, x2, x3, x4)
   U21_ga(x0, x1, x2, x3, x4)
   mergecC_in_gga(x0, x1)
   lecE_in_gg(x0, x1)
   U27_gg(x0, x1, x2)
   U23_gga(x0, x1, x2, x3, x4)
   gtcF_in_gg(x0, x1)
   U28_gg(x0, x1, x2)
   U25_gga(x0, x1, x2, x3, x4)
   U26_gga(x0, x1, x2, x3, x4)
   U24_gga(x0, x1, x2, x3, x4)
   U22_ga(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(50) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   mergesortcB_in_ga([]) -> mergesortcB_out_ga([], [])

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 0
   POL(0) = 1
   POL(MERGESORTB_IN_GA(x_1)) = 0
   POL(U11_GA(x_1, x_2, x_3, x_4)) = 0
   POL(U13_GA(x_1, x_2, x_3, x_4, x_5)) = 2*x_5
   POL(U18_gaa(x_1, x_2, x_3)) = 0
   POL(U19_ga(x_1, x_2, x_3, x_4)) = 2*x_4
   POL(U20_ga(x_1, x_2, x_3, x_4, x_5)) = 2*x_4 + 2*x_5
   POL(U21_ga(x_1, x_2, x_3, x_4, x_5)) = x_5
   POL(U22_ga(x_1, x_2, x_3, x_4)) = 0
   POL(U23_gga(x_1, x_2, x_3, x_4, x_5)) = 0
   POL(U24_gga(x_1, x_2, x_3, x_4, x_5)) = 0
   POL(U25_gga(x_1, x_2, x_3, x_4, x_5)) = 0
   POL(U26_gga(x_1, x_2, x_3, x_4, x_5)) = 0
   POL(U27_gg(x_1, x_2, x_3)) = 0
   POL(U28_gg(x_1, x_2, x_3)) = 0
   POL(U29_ggaa(x_1, x_2, x_3)) = 0
   POL([]) = 2
   POL(gtcF_in_gg(x_1, x_2)) = 0
   POL(gtcF_out_gg(x_1, x_2)) = 0
   POL(lecE_in_gg(x_1, x_2)) = 2*x_2
   POL(lecE_out_gg(x_1, x_2)) = 0
   POL(mergecC_in_gga(x_1, x_2)) = 0
   POL(mergecC_out_gga(x_1, x_2, x_3)) = 0
   POL(mergesortcB_in_ga(x_1)) = 2*x_1
   POL(mergesortcB_out_ga(x_1, x_2)) = 0
   POL(s(x_1)) = 0
   POL(splitcA_in_gaa(x_1)) = 0
   POL(splitcA_out_gaa(x_1, x_2, x_3)) = 0
   POL(splitcD_in_ggaa(x_1, x_2)) = 0
   POL(splitcD_out_ggaa(x_1, x_2, x_3, x_4)) = 2*x_3


----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11_GA(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> MERGESORTB_IN_GA(.(X1, X6))
   U11_GA(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> U13_GA(X1, X2, X3, X5, mergesortcB_in_ga(.(X1, X6)))
   U13_GA(X1, X2, X3, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> MERGESORTB_IN_GA(X5)
   MERGESORTB_IN_GA(.(X1, .(X2, X3))) -> U11_GA(X1, X2, X3, U29_ggaa(X2, X3, splitcA_in_gaa(X3)))

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2) -> U29_ggaa(X1, X2, splitcA_in_gaa(X2))
   splitcA_in_gaa([]) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2)) -> U18_gaa(X1, X2, splitcA_in_gaa(X2))
   U18_gaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U29_ggaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga(.(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3))) -> U19_ga(X1, X2, X3, splitcD_in_ggaa(X2, X3))
   U19_ga(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> U20_ga(X1, X2, X3, X5, mergesortcB_in_ga(.(X1, X6)))
   U20_ga(X1, X2, X3, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U21_ga(X1, X2, X3, X7, mergesortcB_in_ga(X5))
   U21_ga(X1, X2, X3, X7, mergesortcB_out_ga(X5, X8)) -> U22_ga(X1, X2, X3, mergecC_in_gga(X7, X8))
   mergecC_in_gga([], X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, []) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X3, X4)) -> U23_gga(X1, X2, X3, X4, lecE_in_gg(X1, X3))
   lecE_in_gg(s(X1), s(X2)) -> U27_gg(X1, X2, lecE_in_gg(X1, X2))
   lecE_in_gg(0, s(X1)) -> lecE_out_gg(0, s(X1))
   lecE_in_gg(0, 0) -> lecE_out_gg(0, 0)
   U27_gg(X1, X2, lecE_out_gg(X1, X2)) -> lecE_out_gg(s(X1), s(X2))
   U23_gga(X1, X2, X3, X4, lecE_out_gg(X1, X3)) -> U24_gga(X1, X2, X3, X4, mergecC_in_gga(X2, .(X3, X4)))
   mergecC_in_gga(.(X1, X2), .(X3, X4)) -> U25_gga(X1, X2, X3, X4, gtcF_in_gg(X1, X3))
   gtcF_in_gg(s(X1), s(X2)) -> U28_gg(X1, X2, gtcF_in_gg(X1, X2))
   gtcF_in_gg(s(X1), 0) -> gtcF_out_gg(s(X1), 0)
   U28_gg(X1, X2, gtcF_out_gg(X1, X2)) -> gtcF_out_gg(s(X1), s(X2))
   U25_gga(X1, X2, X3, X4, gtcF_out_gg(X1, X3)) -> U26_gga(X1, X2, X3, X4, mergecC_in_gga(.(X1, X2), X4))
   U26_gga(X1, X2, X3, X4, mergecC_out_gga(.(X1, X2), X4, X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X3, X5))
   U24_gga(X1, X2, X3, X4, mergecC_out_gga(X2, .(X3, X4), X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X1, X5))
   U22_ga(X1, X2, X3, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The set Q consists of the following terms:

   splitcD_in_ggaa(x0, x1)
   splitcA_in_gaa(x0)
   U18_gaa(x0, x1, x2)
   U29_ggaa(x0, x1, x2)
   mergesortcB_in_ga(x0)
   U19_ga(x0, x1, x2, x3)
   U20_ga(x0, x1, x2, x3, x4)
   U21_ga(x0, x1, x2, x3, x4)
   mergecC_in_gga(x0, x1)
   lecE_in_gg(x0, x1)
   U27_gg(x0, x1, x2)
   U23_gga(x0, x1, x2, x3, x4)
   gtcF_in_gg(x0, x1)
   U28_gg(x0, x1, x2)
   U25_gga(x0, x1, x2, x3, x4)
   U26_gga(x0, x1, x2, x3, x4)
   U24_gga(x0, x1, x2, x3, x4)
   U22_ga(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(52) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   U11_GA(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> MERGESORTB_IN_GA(.(X1, X6))
   U11_GA(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> U13_GA(X1, X2, X3, X5, mergesortcB_in_ga(.(X1, X6)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U13_GA_5(x_1, ..., x_5) ) = x_4
POL( mergesortcB_in_ga_1(x_1) ) = 0
POL( ._2(x_1, x_2) ) = 2x_2 + 2
POL( [] ) = 0
POL( mergesortcB_out_ga_2(x_1, x_2) ) = max{0, x_2 - 2}
POL( U19_ga_4(x_1, ..., x_4) ) = 2x_1 + 2x_4 + 2
POL( splitcD_in_ggaa_2(x_1, x_2) ) = x_1 + 2x_2
POL( U11_GA_4(x_1, ..., x_4) ) = x_4 + 2
POL( U29_ggaa_3(x_1, ..., x_3) ) = 2x_2 + x_3
POL( splitcA_in_gaa_1(x_1) ) = 2x_1 + 2
POL( splitcA_out_gaa_3(x_1, ..., x_3) ) = 2x_2 + 2x_3 + 2
POL( U18_gaa_3(x_1, ..., x_3) ) = 2x_3 + 2
POL( splitcD_out_ggaa_4(x_1, ..., x_4) ) = max{0, x_3 + 2x_4 - 1}
POL( U20_ga_5(x_1, ..., x_5) ) = 2x_2 + 2x_3 + 2x_4 + 2x_5 + 2
POL( U21_ga_5(x_1, ..., x_5) ) = max{0, 2x_1 + 2x_2 + 2x_3 - 2}
POL( U22_ga_4(x_1, ..., x_4) ) = 2x_1 + 2x_2 + 2x_3 + 2
POL( mergecC_in_gga_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( mergecC_out_gga_3(x_1, ..., x_3) ) = max{0, 2x_1 + x_3 - 2}
POL( U23_gga_5(x_1, ..., x_5) ) = 2x_5 + 2
POL( lecE_in_gg_2(x_1, x_2) ) = 2x_1
POL( U25_gga_5(x_1, ..., x_5) ) = 2x_1 + x_2 + x_4 + 2
POL( gtcF_in_gg_2(x_1, x_2) ) = 0
POL( s_1(x_1) ) = x_1 + 1
POL( U27_gg_3(x_1, ..., x_3) ) = max{0, 2x_2 + 2x_3 - 2}
POL( 0 ) = 0
POL( lecE_out_gg_2(x_1, x_2) ) = 2x_1 + x_2 + 2
POL( U24_gga_5(x_1, ..., x_5) ) = 2x_1 + 2
POL( U28_gg_3(x_1, ..., x_3) ) = max{0, x_1 - 2}
POL( gtcF_out_gg_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( U26_gga_5(x_1, ..., x_5) ) = max{0, 2x_3 + 2x_4 - 2}
POL( MERGESORTB_IN_GA_1(x_1) ) = max{0, x_1 - 2}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   splitcA_in_gaa([]) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2)) -> U18_gaa(X1, X2, splitcA_in_gaa(X2))
   U29_ggaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   U18_gaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)


----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U13_GA(X1, X2, X3, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> MERGESORTB_IN_GA(X5)
   MERGESORTB_IN_GA(.(X1, .(X2, X3))) -> U11_GA(X1, X2, X3, U29_ggaa(X2, X3, splitcA_in_gaa(X3)))

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2) -> U29_ggaa(X1, X2, splitcA_in_gaa(X2))
   splitcA_in_gaa([]) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2)) -> U18_gaa(X1, X2, splitcA_in_gaa(X2))
   U18_gaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U29_ggaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga(.(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3))) -> U19_ga(X1, X2, X3, splitcD_in_ggaa(X2, X3))
   U19_ga(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> U20_ga(X1, X2, X3, X5, mergesortcB_in_ga(.(X1, X6)))
   U20_ga(X1, X2, X3, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U21_ga(X1, X2, X3, X7, mergesortcB_in_ga(X5))
   U21_ga(X1, X2, X3, X7, mergesortcB_out_ga(X5, X8)) -> U22_ga(X1, X2, X3, mergecC_in_gga(X7, X8))
   mergecC_in_gga([], X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, []) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X3, X4)) -> U23_gga(X1, X2, X3, X4, lecE_in_gg(X1, X3))
   lecE_in_gg(s(X1), s(X2)) -> U27_gg(X1, X2, lecE_in_gg(X1, X2))
   lecE_in_gg(0, s(X1)) -> lecE_out_gg(0, s(X1))
   lecE_in_gg(0, 0) -> lecE_out_gg(0, 0)
   U27_gg(X1, X2, lecE_out_gg(X1, X2)) -> lecE_out_gg(s(X1), s(X2))
   U23_gga(X1, X2, X3, X4, lecE_out_gg(X1, X3)) -> U24_gga(X1, X2, X3, X4, mergecC_in_gga(X2, .(X3, X4)))
   mergecC_in_gga(.(X1, X2), .(X3, X4)) -> U25_gga(X1, X2, X3, X4, gtcF_in_gg(X1, X3))
   gtcF_in_gg(s(X1), s(X2)) -> U28_gg(X1, X2, gtcF_in_gg(X1, X2))
   gtcF_in_gg(s(X1), 0) -> gtcF_out_gg(s(X1), 0)
   U28_gg(X1, X2, gtcF_out_gg(X1, X2)) -> gtcF_out_gg(s(X1), s(X2))
   U25_gga(X1, X2, X3, X4, gtcF_out_gg(X1, X3)) -> U26_gga(X1, X2, X3, X4, mergecC_in_gga(.(X1, X2), X4))
   U26_gga(X1, X2, X3, X4, mergecC_out_gga(.(X1, X2), X4, X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X3, X5))
   U24_gga(X1, X2, X3, X4, mergecC_out_gga(X2, .(X3, X4), X5)) -> mergecC_out_gga(.(X1, X2), .(X3, X4), .(X1, X5))
   U22_ga(X1, X2, X3, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The set Q consists of the following terms:

   splitcD_in_ggaa(x0, x1)
   splitcA_in_gaa(x0)
   U18_gaa(x0, x1, x2)
   U29_ggaa(x0, x1, x2)
   mergesortcB_in_ga(x0)
   U19_ga(x0, x1, x2, x3)
   U20_ga(x0, x1, x2, x3, x4)
   U21_ga(x0, x1, x2, x3, x4)
   mergecC_in_gga(x0, x1)
   lecE_in_gg(x0, x1)
   U27_gg(x0, x1, x2)
   U23_gga(x0, x1, x2, x3, x4)
   gtcF_in_gg(x0, x1)
   U28_gg(x0, x1, x2)
   U25_gga(x0, x1, x2, x3, x4)
   U26_gga(x0, x1, x2, x3, x4)
   U24_gga(x0, x1, x2, x3, x4)
   U22_ga(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(54) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(55)
TRUE
