YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/wJAJm.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

map(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(2) TRIPLES
(3) TriplesToPiDPProof [SOUND, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) PiDPToQDPProof [SOUND, 0 ms]
(8) QDP
(9) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
Clauses:

p(val_i, val_j).
map(.(X, Xs), .(Y, Ys)) :- ','(p(X, Y), map(Xs, Ys)).
map([], []).


Query: map(g,a)
----------------------------------------

(1) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 9,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p (val_i) (val_j))",
                null
            ],
            [
                "(map (. X Xs) (. Y Ys))",
                "(',' (p X Y) (map Xs Ys))"
            ],
            [
                "(map ([]) ([]))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "11": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (p T7 T11) (map T8 T12))"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(map (. T7 T8) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(map T1 T2)",
                        "(map (. X5 X6) (. X7 X8))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "23": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(map (. T7 T8) T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "24": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(',' (p T7 T11) (map T8 T12))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(map (. T7 T8) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "16": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(',' (p T7 T11) (map T8 T12))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(map (. T7 T8) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "29": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(map T8 T13)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "9": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "30": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "20": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "10": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(map T1 T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(map T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 9,
                "to": 10,
                "label": "CASE"
            },
            {
                "from": 10,
                "to": 11,
                "label": "EVAL with clause\nmap(.(X5, X6), .(X7, X8)) :- ','(p(X5, X7), map(X6, X8)).\nand substitutionX5 -> T7,\nX6 -> T8,\nT1 -> .(T7, T8),\nX7 -> T11,\nX8 -> T12,\nT2 -> .(T11, T12),\nT9 -> T11,\nT10 -> T12"
            },
            {
                "from": 10,
                "to": 12,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 11,
                "to": 14,
                "label": "CASE"
            },
            {
                "from": 12,
                "to": 27,
                "label": "EVAL with clause\nmap([], []).\nand substitutionT1 -> [],\nT2 -> []"
            },
            {
                "from": 12,
                "to": 29,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 14,
                "to": 16,
                "label": "PARALLEL"
            },
            {
                "from": 14,
                "to": 17,
                "label": "PARALLEL"
            },
            {
                "from": 16,
                "to": 19,
                "label": "EVAL with clause\np(val_i, val_j).\nand substitutionT7 -> val_i,\nT11 -> val_j,\nT12 -> T13"
            },
            {
                "from": 16,
                "to": 20,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 17,
                "to": 23,
                "label": "FAILURE"
            },
            {
                "from": 19,
                "to": 9,
                "label": "INSTANCE with matching:\nT1 -> T8\nT2 -> T13"
            },
            {
                "from": 23,
                "to": 24,
                "label": "BACKTRACK\nfor clause: map([], [])because of non-unification"
            },
            {
                "from": 27,
                "to": 30,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Triples:

mapA(.(val_i, X1), .(val_j, X2)) :- mapA(X1, X2).

Clauses:

mapcA(.(val_i, X1), .(val_j, X2)) :- mapcA(X1, X2).
mapcA([], []).

Afs:

mapA(x1, x2)  =  mapA(x1)


----------------------------------------

(3) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

mapA_in_2: (b,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   MAPA_IN_GA(.(val_i, X1), .(val_j, X2)) -> U1_GA(X1, X2, mapA_in_ga(X1, X2))
   MAPA_IN_GA(.(val_i, X1), .(val_j, X2)) -> MAPA_IN_GA(X1, X2)

R is empty.
The argument filtering Pi contains the following mapping:
mapA_in_ga(x1, x2)  =  mapA_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

val_i  =  val_i

val_j  =  val_j

MAPA_IN_GA(x1, x2)  =  MAPA_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x1, x3)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MAPA_IN_GA(.(val_i, X1), .(val_j, X2)) -> U1_GA(X1, X2, mapA_in_ga(X1, X2))
   MAPA_IN_GA(.(val_i, X1), .(val_j, X2)) -> MAPA_IN_GA(X1, X2)

R is empty.
The argument filtering Pi contains the following mapping:
mapA_in_ga(x1, x2)  =  mapA_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

val_i  =  val_i

val_j  =  val_j

MAPA_IN_GA(x1, x2)  =  MAPA_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x1, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MAPA_IN_GA(.(val_i, X1), .(val_j, X2)) -> MAPA_IN_GA(X1, X2)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

val_i  =  val_i

val_j  =  val_j

MAPA_IN_GA(x1, x2)  =  MAPA_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MAPA_IN_GA(.(val_i, X1)) -> MAPA_IN_GA(X1)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MAPA_IN_GA(.(val_i, X1)) -> MAPA_IN_GA(X1)
The graph contains the following edges 1 > 1


----------------------------------------

(10)
YES
