YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/m4C1O.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

perm(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 13 ms]
        (20) QDP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
Clauses:

perm([], []).
perm(.(X, Y), .(U, V)) :- ','(delete(U, .(X, Y), W), perm(W, V)).
delete(X, .(X, Y), Y).
delete(U, .(X, Y), .(X, Z)) :- delete(U, Y, Z).


Query: perm(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

perm_in_2: (b,f)

delete_in_3: (f,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(U, V)) -> U1_ga(X, Y, U, V, delete_in_aga(U, .(X, Y), W))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(U, .(X, Y), .(X, Z)) -> U3_aga(U, X, Y, Z, delete_in_aga(U, Y, Z))
   U3_aga(U, X, Y, Z, delete_out_aga(U, Y, Z)) -> delete_out_aga(U, .(X, Y), .(X, Z))
   U1_ga(X, Y, U, V, delete_out_aga(U, .(X, Y), W)) -> U2_ga(X, Y, U, V, perm_in_ga(W, V))
   U2_ga(X, Y, U, V, perm_out_ga(W, V)) -> perm_out_ga(.(X, Y), .(U, V))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U3_aga(x1, x2, x3, x4, x5)  =  U3_aga(x2, x5)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x3, x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(U, V)) -> U1_ga(X, Y, U, V, delete_in_aga(U, .(X, Y), W))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(U, .(X, Y), .(X, Z)) -> U3_aga(U, X, Y, Z, delete_in_aga(U, Y, Z))
   U3_aga(U, X, Y, Z, delete_out_aga(U, Y, Z)) -> delete_out_aga(U, .(X, Y), .(X, Z))
   U1_ga(X, Y, U, V, delete_out_aga(U, .(X, Y), W)) -> U2_ga(X, Y, U, V, perm_in_ga(W, V))
   U2_ga(X, Y, U, V, perm_out_ga(W, V)) -> perm_out_ga(.(X, Y), .(U, V))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U3_aga(x1, x2, x3, x4, x5)  =  U3_aga(x2, x5)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x3, x5)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   PERM_IN_GA(.(X, Y), .(U, V)) -> U1_GA(X, Y, U, V, delete_in_aga(U, .(X, Y), W))
   PERM_IN_GA(.(X, Y), .(U, V)) -> DELETE_IN_AGA(U, .(X, Y), W)
   DELETE_IN_AGA(U, .(X, Y), .(X, Z)) -> U3_AGA(U, X, Y, Z, delete_in_aga(U, Y, Z))
   DELETE_IN_AGA(U, .(X, Y), .(X, Z)) -> DELETE_IN_AGA(U, Y, Z)
   U1_GA(X, Y, U, V, delete_out_aga(U, .(X, Y), W)) -> U2_GA(X, Y, U, V, perm_in_ga(W, V))
   U1_GA(X, Y, U, V, delete_out_aga(U, .(X, Y), W)) -> PERM_IN_GA(W, V)

The TRS R consists of the following rules:

   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(U, V)) -> U1_ga(X, Y, U, V, delete_in_aga(U, .(X, Y), W))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(U, .(X, Y), .(X, Z)) -> U3_aga(U, X, Y, Z, delete_in_aga(U, Y, Z))
   U3_aga(U, X, Y, Z, delete_out_aga(U, Y, Z)) -> delete_out_aga(U, .(X, Y), .(X, Z))
   U1_ga(X, Y, U, V, delete_out_aga(U, .(X, Y), W)) -> U2_ga(X, Y, U, V, perm_in_ga(W, V))
   U2_ga(X, Y, U, V, perm_out_ga(W, V)) -> perm_out_ga(.(X, Y), .(U, V))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U3_aga(x1, x2, x3, x4, x5)  =  U3_aga(x2, x5)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x3, x5)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x5)

DELETE_IN_AGA(x1, x2, x3)  =  DELETE_IN_AGA(x2)

U3_AGA(x1, x2, x3, x4, x5)  =  U3_AGA(x2, x5)

U2_GA(x1, x2, x3, x4, x5)  =  U2_GA(x3, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PERM_IN_GA(.(X, Y), .(U, V)) -> U1_GA(X, Y, U, V, delete_in_aga(U, .(X, Y), W))
   PERM_IN_GA(.(X, Y), .(U, V)) -> DELETE_IN_AGA(U, .(X, Y), W)
   DELETE_IN_AGA(U, .(X, Y), .(X, Z)) -> U3_AGA(U, X, Y, Z, delete_in_aga(U, Y, Z))
   DELETE_IN_AGA(U, .(X, Y), .(X, Z)) -> DELETE_IN_AGA(U, Y, Z)
   U1_GA(X, Y, U, V, delete_out_aga(U, .(X, Y), W)) -> U2_GA(X, Y, U, V, perm_in_ga(W, V))
   U1_GA(X, Y, U, V, delete_out_aga(U, .(X, Y), W)) -> PERM_IN_GA(W, V)

The TRS R consists of the following rules:

   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(U, V)) -> U1_ga(X, Y, U, V, delete_in_aga(U, .(X, Y), W))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(U, .(X, Y), .(X, Z)) -> U3_aga(U, X, Y, Z, delete_in_aga(U, Y, Z))
   U3_aga(U, X, Y, Z, delete_out_aga(U, Y, Z)) -> delete_out_aga(U, .(X, Y), .(X, Z))
   U1_ga(X, Y, U, V, delete_out_aga(U, .(X, Y), W)) -> U2_ga(X, Y, U, V, perm_in_ga(W, V))
   U2_ga(X, Y, U, V, perm_out_ga(W, V)) -> perm_out_ga(.(X, Y), .(U, V))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U3_aga(x1, x2, x3, x4, x5)  =  U3_aga(x2, x5)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x3, x5)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x5)

DELETE_IN_AGA(x1, x2, x3)  =  DELETE_IN_AGA(x2)

U3_AGA(x1, x2, x3, x4, x5)  =  U3_AGA(x2, x5)

U2_GA(x1, x2, x3, x4, x5)  =  U2_GA(x3, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DELETE_IN_AGA(U, .(X, Y), .(X, Z)) -> DELETE_IN_AGA(U, Y, Z)

The TRS R consists of the following rules:

   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(U, V)) -> U1_ga(X, Y, U, V, delete_in_aga(U, .(X, Y), W))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(U, .(X, Y), .(X, Z)) -> U3_aga(U, X, Y, Z, delete_in_aga(U, Y, Z))
   U3_aga(U, X, Y, Z, delete_out_aga(U, Y, Z)) -> delete_out_aga(U, .(X, Y), .(X, Z))
   U1_ga(X, Y, U, V, delete_out_aga(U, .(X, Y), W)) -> U2_ga(X, Y, U, V, perm_in_ga(W, V))
   U2_ga(X, Y, U, V, perm_out_ga(W, V)) -> perm_out_ga(.(X, Y), .(U, V))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U3_aga(x1, x2, x3, x4, x5)  =  U3_aga(x2, x5)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x3, x5)

DELETE_IN_AGA(x1, x2, x3)  =  DELETE_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DELETE_IN_AGA(U, .(X, Y), .(X, Z)) -> DELETE_IN_AGA(U, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

DELETE_IN_AGA(x1, x2, x3)  =  DELETE_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DELETE_IN_AGA(.(X, Y)) -> DELETE_IN_AGA(Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DELETE_IN_AGA(.(X, Y)) -> DELETE_IN_AGA(Y)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(X, Y, U, V, delete_out_aga(U, .(X, Y), W)) -> PERM_IN_GA(W, V)
   PERM_IN_GA(.(X, Y), .(U, V)) -> U1_GA(X, Y, U, V, delete_in_aga(U, .(X, Y), W))

The TRS R consists of the following rules:

   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(U, V)) -> U1_ga(X, Y, U, V, delete_in_aga(U, .(X, Y), W))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(U, .(X, Y), .(X, Z)) -> U3_aga(U, X, Y, Z, delete_in_aga(U, Y, Z))
   U3_aga(U, X, Y, Z, delete_out_aga(U, Y, Z)) -> delete_out_aga(U, .(X, Y), .(X, Z))
   U1_ga(X, Y, U, V, delete_out_aga(U, .(X, Y), W)) -> U2_ga(X, Y, U, V, perm_in_ga(W, V))
   U2_ga(X, Y, U, V, perm_out_ga(W, V)) -> perm_out_ga(.(X, Y), .(U, V))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U3_aga(x1, x2, x3, x4, x5)  =  U3_aga(x2, x5)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x3, x5)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(X, Y, U, V, delete_out_aga(U, .(X, Y), W)) -> PERM_IN_GA(W, V)
   PERM_IN_GA(.(X, Y), .(U, V)) -> U1_GA(X, Y, U, V, delete_in_aga(U, .(X, Y), W))

The TRS R consists of the following rules:

   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(U, .(X, Y), .(X, Z)) -> U3_aga(U, X, Y, Z, delete_in_aga(U, Y, Z))
   U3_aga(U, X, Y, Z, delete_out_aga(U, Y, Z)) -> delete_out_aga(U, .(X, Y), .(X, Z))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U3_aga(x1, x2, x3, x4, x5)  =  U3_aga(x2, x5)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GA(delete_out_aga(U, W)) -> PERM_IN_GA(W)
   PERM_IN_GA(.(X, Y)) -> U1_GA(delete_in_aga(.(X, Y)))

The TRS R consists of the following rules:

   delete_in_aga(.(X, Y)) -> delete_out_aga(X, Y)
   delete_in_aga(.(X, Y)) -> U3_aga(X, delete_in_aga(Y))
   U3_aga(X, delete_out_aga(U, Z)) -> delete_out_aga(U, .(X, Z))

The set Q consists of the following terms:

   delete_in_aga(x0)
   U3_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U1_GA(delete_out_aga(U, W)) -> PERM_IN_GA(W)
   PERM_IN_GA(.(X, Y)) -> U1_GA(delete_in_aga(.(X, Y)))

Strictly oriented rules of the TRS R:

   delete_in_aga(.(X, Y)) -> delete_out_aga(X, Y)
   delete_in_aga(.(X, Y)) -> U3_aga(X, delete_in_aga(Y))
   U3_aga(X, delete_out_aga(U, Z)) -> delete_out_aga(U, .(X, Z))

Used ordering: Knuth-Bendix order [KBO] with precedence:._2 > delete_in_aga_1 > U3_aga_2 > U1_GA_1 > PERM_IN_GA_1 > delete_out_aga_2

and weight map:

   delete_in_aga_1=1
   U1_GA_1=1
   PERM_IN_GA_1=3
   ._2=0
   delete_out_aga_2=1
   U3_aga_2=0

The variable weight is 1

----------------------------------------

(20)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   delete_in_aga(x0)
   U3_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(22)
YES
