MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/V0yjM.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

color_map(a,g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) AND
        (7) PiDP
            (8) UsableRulesProof [EQUIVALENT, 0 ms]
            (9) PiDP
            (10) PiDPToQDPProof [SOUND, 0 ms]
            (11) QDP
            (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (13) YES
        (14) PiDP
            (15) UsableRulesProof [EQUIVALENT, 0 ms]
            (16) PiDP
            (17) PiDPToQDPProof [SOUND, 0 ms]
            (18) QDP
            (19) TransformationProof [SOUND, 0 ms]
            (20) QDP
            (21) TransformationProof [EQUIVALENT, 0 ms]
            (22) QDP
            (23) NonTerminationLoopProof [COMPLETE, 0 ms]
            (24) NO
        (25) PiDP
            (26) UsableRulesProof [EQUIVALENT, 0 ms]
            (27) PiDP
            (28) PiDPToQDPProof [SOUND, 0 ms]
            (29) QDP
            (30) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (31) YES
        (32) PiDP
            (33) UsableRulesProof [EQUIVALENT, 0 ms]
            (34) PiDP
            (35) PiDPToQDPProof [SOUND, 0 ms]
            (36) QDP
(37) PrologToPiTRSProof [SOUND, 0 ms]
(38) PiTRS
    (39) DependencyPairsProof [EQUIVALENT, 0 ms]
    (40) PiDP
    (41) DependencyGraphProof [EQUIVALENT, 0 ms]
    (42) AND
        (43) PiDP
            (44) UsableRulesProof [EQUIVALENT, 0 ms]
            (45) PiDP
            (46) PiDPToQDPProof [SOUND, 0 ms]
            (47) QDP
            (48) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (49) YES
        (50) PiDP
            (51) UsableRulesProof [EQUIVALENT, 0 ms]
            (52) PiDP
            (53) PiDPToQDPProof [SOUND, 0 ms]
            (54) QDP
            (55) TransformationProof [SOUND, 0 ms]
            (56) QDP
            (57) TransformationProof [EQUIVALENT, 0 ms]
            (58) QDP
            (59) NonTerminationLoopProof [COMPLETE, 0 ms]
            (60) NO
        (61) PiDP
            (62) UsableRulesProof [EQUIVALENT, 0 ms]
            (63) PiDP
            (64) PiDPToQDPProof [SOUND, 0 ms]
            (65) QDP
            (66) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (67) YES
        (68) PiDP
            (69) UsableRulesProof [EQUIVALENT, 0 ms]
            (70) PiDP
            (71) PiDPToQDPProof [SOUND, 0 ms]
            (72) QDP
(73) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(74) TRIPLES
    (75) TriplesToPiDPProof [SOUND, 11 ms]
    (76) PiDP
    (77) DependencyGraphProof [EQUIVALENT, 0 ms]
    (78) AND
        (79) PiDP
            (80) UsableRulesProof [EQUIVALENT, 0 ms]
            (81) PiDP
            (82) PiDPToQDPProof [SOUND, 0 ms]
            (83) QDP
            (84) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (85) YES
        (86) PiDP
            (87) UsableRulesProof [EQUIVALENT, 0 ms]
            (88) PiDP
            (89) PiDPToQDPProof [SOUND, 0 ms]
            (90) QDP
            (91) TransformationProof [SOUND, 0 ms]
            (92) QDP
            (93) TransformationProof [EQUIVALENT, 0 ms]
            (94) QDP
            (95) NonTerminationLoopProof [COMPLETE, 0 ms]
            (96) NO
        (97) PiDP
            (98) UsableRulesProof [EQUIVALENT, 0 ms]
            (99) PiDP
            (100) PiDPToQDPProof [SOUND, 0 ms]
            (101) QDP
            (102) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (103) YES
        (104) PiDP
            (105) PiDPToQDPProof [SOUND, 0 ms]
            (106) QDP
(107) PrologToTRSTransformerProof [SOUND, 0 ms]
(108) QTRS
    (109) DependencyPairsProof [EQUIVALENT, 0 ms]
    (110) QDP
    (111) DependencyGraphProof [EQUIVALENT, 0 ms]
    (112) AND
        (113) QDP
            (114) UsableRulesProof [EQUIVALENT, 0 ms]
            (115) QDP
            (116) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (117) YES
        (118) QDP
            (119) NonTerminationLoopProof [COMPLETE, 0 ms]
            (120) NO
        (121) QDP
            (122) UsableRulesProof [EQUIVALENT, 0 ms]
            (123) QDP
            (124) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (125) YES
        (126) QDP
            (127) NonTerminationLoopProof [COMPLETE, 0 ms]
            (128) NO
(129) PrologToIRSwTTransformerProof [SOUND, 37 ms]
(130) AND
    (131) IRSwT
        (132) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (133) TRUE
    (134) IRSwT
        (135) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (136) TRUE
    (137) IRSwT
        (138) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (139) IRSwT
        (140) IntTRSCompressionProof [EQUIVALENT, 8 ms]
        (141) IRSwT
        (142) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (143) IRSwT
        (144) IRSwTTerminationDigraphProof [EQUIVALENT, 2 ms]
        (145) IRSwT
        (146) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (147) IRSwT
        (148) TempFilterProof [SOUND, 1 ms]
        (149) IRSwT
        (150) IRSwTToQDPProof [SOUND, 0 ms]
        (151) QDP
        (152) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (153) YES
    (154) IRSwT
        (155) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (156) IRSwT
        (157) IntTRSCompressionProof [EQUIVALENT, 13 ms]
        (158) IRSwT
        (159) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (160) IRSwT
        (161) IRSwTTerminationDigraphProof [EQUIVALENT, 38 ms]
        (162) IRSwT
        (163) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (164) IRSwT
        (165) IRSwTToIntTRSProof [SOUND, 14 ms]
        (166) IRSwT


----------------------------------------

(0)
Obligation:
Clauses:

color_map(.(Region, Regions), Colors) :- ','(color_region(Region, Colors), color_map(Regions, Colors)).
color_map([], Colors).
color_region(region(Name, Color, Neighbors), Colors) :- ','(select(Color, Colors, Colors1), members(Neighbors, Colors1)).
select(X, .(X, Xs), Xs).
select(X, .(Y, Ys), .(Y, Zs)) :- select(X, Ys, Zs).
members(.(X, Xs), Ys) :- ','(member(X, Ys), members(Xs, Ys)).
members([], Ys).
member(X, .(X, X1)).
member(X, .(X2, Xs)) :- member(X, Xs).


Query: color_map(a,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

color_map_in_2: (f,b)

color_region_in_2: (f,b)

select_in_3: (f,b,f)

members_in_2: (f,b)

member_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> COLOR_REGION_IN_AG(Region, Colors)
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> U3_AG(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> SELECT_IN_AGA(Color, Colors, Colors1)
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> U5_AGA(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_AG(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> MEMBERS_IN_AG(Neighbors, Colors1)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))
   MEMBERS_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X2, Xs)) -> U8_AG(X, X2, Xs, member_in_ag(X, Xs))
   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_AG(X, Xs, Ys, members_in_ag(Xs, Ys))
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_AG(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

COLOR_REGION_IN_AG(x1, x2)  =  COLOR_REGION_IN_AG(x2)

U3_AG(x1, x2, x3, x4, x5)  =  U3_AG(x5)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x5)

U4_AG(x1, x2, x3, x4, x5)  =  U4_AG(x2, x5)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U8_AG(x1, x2, x3, x4)  =  U8_AG(x4)

U7_AG(x1, x2, x3, x4)  =  U7_AG(x1, x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> COLOR_REGION_IN_AG(Region, Colors)
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> U3_AG(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> SELECT_IN_AGA(Color, Colors, Colors1)
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> U5_AGA(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_AG(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> MEMBERS_IN_AG(Neighbors, Colors1)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))
   MEMBERS_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X2, Xs)) -> U8_AG(X, X2, Xs, member_in_ag(X, Xs))
   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_AG(X, Xs, Ys, members_in_ag(Xs, Ys))
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_AG(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

COLOR_REGION_IN_AG(x1, x2)  =  COLOR_REGION_IN_AG(x2)

U3_AG(x1, x2, x3, x4, x5)  =  U3_AG(x5)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x5)

U4_AG(x1, x2, x3, x4, x5)  =  U4_AG(x2, x5)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U8_AG(x1, x2, x3, x4)  =  U8_AG(x4)

U7_AG(x1, x2, x3, x4)  =  U7_AG(x1, x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 4 SCCs with 10 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(.(X2, Xs)) -> MEMBER_IN_AG(Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER_IN_AG(.(X2, Xs)) -> MEMBER_IN_AG(Xs)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_AG(Ys, member_out_ag(X)) -> MEMBERS_IN_AG(Ys)
   MEMBERS_IN_AG(Ys) -> U6_AG(Ys, member_in_ag(Ys))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X)
   member_in_ag(.(X2, Xs)) -> U8_ag(member_in_ag(Xs))
   U8_ag(member_out_ag(X)) -> member_out_ag(X)

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) TransformationProof (SOUND)
By narrowing [LPAR04] the rule MEMBERS_IN_AG(Ys) -> U6_AG(Ys, member_in_ag(Ys)) at position [1] we obtained the following new rules [LPAR04]:

   (MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0)),MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0)))
   (MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(member_in_ag(x1))),MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(member_in_ag(x1))))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_AG(Ys, member_out_ag(X)) -> MEMBERS_IN_AG(Ys)
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0))
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(member_in_ag(x1)))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X)
   member_in_ag(.(X2, Xs)) -> U8_ag(member_in_ag(Xs))
   U8_ag(member_out_ag(X)) -> member_out_ag(X)

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_AG(Ys, member_out_ag(X)) -> MEMBERS_IN_AG(Ys) we obtained the following new rules [LPAR04]:

   (U6_AG(.(z0, z1), member_out_ag(z0)) -> MEMBERS_IN_AG(.(z0, z1)),U6_AG(.(z0, z1), member_out_ag(z0)) -> MEMBERS_IN_AG(.(z0, z1)))
   (U6_AG(.(z0, z1), member_out_ag(x1)) -> MEMBERS_IN_AG(.(z0, z1)),U6_AG(.(z0, z1), member_out_ag(x1)) -> MEMBERS_IN_AG(.(z0, z1)))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0))
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(member_in_ag(x1)))
   U6_AG(.(z0, z1), member_out_ag(z0)) -> MEMBERS_IN_AG(.(z0, z1))
   U6_AG(.(z0, z1), member_out_ag(x1)) -> MEMBERS_IN_AG(.(z0, z1))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X)
   member_in_ag(.(X2, Xs)) -> U8_ag(member_in_ag(Xs))
   U8_ag(member_out_ag(X)) -> member_out_ag(X)

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = U6_AG(.(z0, z1), member_out_ag(z0)) evaluates to  t =U6_AG(.(z0, z1), member_out_ag(z0))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

U6_AG(.(z0, z1), member_out_ag(z0)) -> MEMBERS_IN_AG(.(z0, z1))
with rule U6_AG(.(z0', z1'), member_out_ag(z0')) -> MEMBERS_IN_AG(.(z0', z1')) at position [] and matcher [z0' / z0, z1' / z1]

MEMBERS_IN_AG(.(z0, z1)) -> U6_AG(.(z0, z1), member_out_ag(z0))
with rule MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(24)
NO

----------------------------------------

(25)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(27)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(28) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(.(Y, Ys)) -> SELECT_IN_AGA(Ys)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SELECT_IN_AGA(.(Y, Ys)) -> SELECT_IN_AGA(Ys)
The graph contains the following edges 1 > 1


----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(33) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(34)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))

The TRS R consists of the following rules:

   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2, x3)  =  region(x2, x3)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(35) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_AG(Colors, color_region_out_ag(Region)) -> COLOR_MAP_IN_AG(Colors)
   COLOR_MAP_IN_AG(Colors) -> U1_AG(Colors, color_region_in_ag(Colors))

The TRS R consists of the following rules:

   color_region_in_ag(Colors) -> U3_ag(select_in_aga(Colors))
   U3_ag(select_out_aga(Color, Colors1)) -> U4_ag(Color, members_in_ag(Colors1))
   select_in_aga(.(X, Xs)) -> select_out_aga(X, Xs)
   select_in_aga(.(Y, Ys)) -> U5_aga(Y, select_in_aga(Ys))
   U4_ag(Color, members_out_ag(Neighbors)) -> color_region_out_ag(region(Color, Neighbors))
   U5_aga(Y, select_out_aga(X, Zs)) -> select_out_aga(X, .(Y, Zs))
   members_in_ag(Ys) -> U6_ag(Ys, member_in_ag(Ys))
   members_in_ag(Ys) -> members_out_ag([])
   U6_ag(Ys, member_out_ag(X)) -> U7_ag(X, members_in_ag(Ys))
   member_in_ag(.(X, X1)) -> member_out_ag(X)
   member_in_ag(.(X2, Xs)) -> U8_ag(member_in_ag(Xs))
   U7_ag(X, members_out_ag(Xs)) -> members_out_ag(.(X, Xs))
   U8_ag(member_out_ag(X)) -> member_out_ag(X)

The set Q consists of the following terms:

   color_region_in_ag(x0)
   U3_ag(x0)
   select_in_aga(x0)
   U4_ag(x0, x1)
   U5_aga(x0, x1)
   members_in_ag(x0)
   U6_ag(x0, x1)
   member_in_ag(x0)
   U7_ag(x0, x1)
   U8_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(37) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

color_map_in_2: (f,b)

color_region_in_2: (f,b)

select_in_3: (f,b,f)

members_in_2: (f,b)

member_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(38)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)



----------------------------------------

(39) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> COLOR_REGION_IN_AG(Region, Colors)
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> U3_AG(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> SELECT_IN_AGA(Color, Colors, Colors1)
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> U5_AGA(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_AG(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> MEMBERS_IN_AG(Neighbors, Colors1)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))
   MEMBERS_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X2, Xs)) -> U8_AG(X, X2, Xs, member_in_ag(X, Xs))
   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_AG(X, Xs, Ys, members_in_ag(Xs, Ys))
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_AG(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

COLOR_REGION_IN_AG(x1, x2)  =  COLOR_REGION_IN_AG(x2)

U3_AG(x1, x2, x3, x4, x5)  =  U3_AG(x4, x5)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x3, x5)

U4_AG(x1, x2, x3, x4, x5)  =  U4_AG(x2, x4, x5)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U8_AG(x1, x2, x3, x4)  =  U8_AG(x2, x3, x4)

U7_AG(x1, x2, x3, x4)  =  U7_AG(x1, x3, x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(40)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> COLOR_REGION_IN_AG(Region, Colors)
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> U3_AG(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   COLOR_REGION_IN_AG(region(Name, Color, Neighbors), Colors) -> SELECT_IN_AGA(Color, Colors, Colors1)
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> U5_AGA(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_AG(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   U3_AG(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> MEMBERS_IN_AG(Neighbors, Colors1)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))
   MEMBERS_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X2, Xs)) -> U8_AG(X, X2, Xs, member_in_ag(X, Xs))
   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_AG(X, Xs, Ys, members_in_ag(Xs, Ys))
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_AG(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

COLOR_REGION_IN_AG(x1, x2)  =  COLOR_REGION_IN_AG(x2)

U3_AG(x1, x2, x3, x4, x5)  =  U3_AG(x4, x5)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x3, x5)

U4_AG(x1, x2, x3, x4, x5)  =  U4_AG(x2, x4, x5)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U8_AG(x1, x2, x3, x4)  =  U8_AG(x2, x3, x4)

U7_AG(x1, x2, x3, x4)  =  U7_AG(x1, x3, x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(41) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 4 SCCs with 10 less nodes.
----------------------------------------

(42)
Complex Obligation (AND)

----------------------------------------

(43)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(44) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(45)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(46) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(.(X2, Xs)) -> MEMBER_IN_AG(Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(48) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER_IN_AG(.(X2, Xs)) -> MEMBER_IN_AG(Xs)
The graph contains the following edges 1 > 1


----------------------------------------

(49)
YES

----------------------------------------

(50)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(51) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(52)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(53) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_AG(Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Ys)
   MEMBERS_IN_AG(Ys) -> U6_AG(Ys, member_in_ag(Ys))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(.(X2, Xs)) -> U8_ag(X2, Xs, member_in_ag(Xs))
   U8_ag(X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(55) TransformationProof (SOUND)
By narrowing [LPAR04] the rule MEMBERS_IN_AG(Ys) -> U6_AG(Ys, member_in_ag(Ys)) at position [1] we obtained the following new rules [LPAR04]:

   (MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0, .(x0, x1))),MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0, .(x0, x1))))
   (MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(x0, x1, member_in_ag(x1))),MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(x0, x1, member_in_ag(x1))))


----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_AG(Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Ys)
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0, .(x0, x1)))
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(x0, x1, member_in_ag(x1)))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(.(X2, Xs)) -> U8_ag(X2, Xs, member_in_ag(Xs))
   U8_ag(X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(57) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_AG(Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Ys) we obtained the following new rules [LPAR04]:

   (U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1)),U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1)))
   (U6_AG(.(z0, z1), member_out_ag(x1, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1)),U6_AG(.(z0, z1), member_out_ag(x1, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1)))


----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0, .(x0, x1)))
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(x0, x1, member_in_ag(x1)))
   U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1))
   U6_AG(.(z0, z1), member_out_ag(x1, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(.(X2, Xs)) -> U8_ag(X2, Xs, member_in_ag(Xs))
   U8_ag(X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(59) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) evaluates to  t =U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1)))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1))
with rule U6_AG(.(z0', z1'), member_out_ag(z0', .(z0', z1'))) -> MEMBERS_IN_AG(.(z0', z1')) at position [] and matcher [z0' / z0, z1' / z1]

MEMBERS_IN_AG(.(z0, z1)) -> U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1)))
with rule MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0, .(x0, x1)))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(60)
NO

----------------------------------------

(61)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(62) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(63)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(64) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(65)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(.(Y, Ys)) -> SELECT_IN_AGA(Ys)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(66) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SELECT_IN_AGA(.(Y, Ys)) -> SELECT_IN_AGA(Ys)
The graph contains the following edges 1 > 1


----------------------------------------

(67)
YES

----------------------------------------

(68)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(69) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(70)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))

The TRS R consists of the following rules:

   color_region_in_ag(region(Name, Color, Neighbors), Colors) -> U3_ag(Name, Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   U3_ag(Name, Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Name, Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U4_ag(Name, Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Name, Color, Neighbors), Colors)
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U8_ag(X, X2, Xs, member_in_ag(X, Xs))
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U8_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4, x5)  =  U3_ag(x4, x5)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4, x5)  =  U4_ag(x2, x4, x5)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(71) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(72)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_AG(Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Colors)
   COLOR_MAP_IN_AG(Colors) -> U1_AG(Colors, color_region_in_ag(Colors))

The TRS R consists of the following rules:

   color_region_in_ag(Colors) -> U3_ag(Colors, select_in_aga(Colors))
   U3_ag(Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Colors, members_in_ag(Colors1))
   select_in_aga(.(X, Xs)) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(.(Y, Ys)) -> U5_aga(Y, Ys, select_in_aga(Ys))
   U4_ag(Color, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U5_aga(Y, Ys, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   members_in_ag(Ys) -> U6_ag(Ys, member_in_ag(Ys))
   members_in_ag(Ys) -> members_out_ag([], Ys)
   U6_ag(Ys, member_out_ag(X, Ys)) -> U7_ag(X, Ys, members_in_ag(Ys))
   member_in_ag(.(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(.(X2, Xs)) -> U8_ag(X2, Xs, member_in_ag(Xs))
   U7_ag(X, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U8_ag(X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The set Q consists of the following terms:

   color_region_in_ag(x0)
   U3_ag(x0, x1)
   select_in_aga(x0)
   U4_ag(x0, x1, x2)
   U5_aga(x0, x1, x2)
   members_in_ag(x0)
   U6_ag(x0, x1)
   member_in_ag(x0)
   U7_ag(x0, x1, x2)
   U8_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(73) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(color_map (. Region Regions) Colors)",
                "(',' (color_region Region Colors) (color_map Regions Colors))"
            ],
            [
                "(color_map ([]) Colors)",
                null
            ],
            [
                "(color_region (region Name Color Neighbors) Colors)",
                "(',' (select Color Colors Colors1) (members Neighbors Colors1))"
            ],
            [
                "(select X (. X Xs) Xs)",
                null
            ],
            [
                "(select X (. Y Ys) (. Y Zs))",
                "(select X Ys Zs)"
            ],
            [
                "(members (. X Xs) Ys)",
                "(',' (member X Ys) (members Xs Ys))"
            ],
            [
                "(members ([]) Ys)",
                null
            ],
            [
                "(member X (. X X1))",
                null
            ],
            [
                "(member X (. X2 Xs))",
                "(member X Xs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "69": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(select T31 T30 X31)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T30"],
                    "free": ["X31"],
                    "exprvars": []
                }
            },
            "28": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(color_map T1 T2)",
                        "(color_map (. X6 X7) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "490": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "491": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "250": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(members T39 T38)"
                    },
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(members T39 T38)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T38"],
                    "free": [],
                    "exprvars": []
                }
            },
            "492": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "493": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(color_map T1 T8)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "197": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "252": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(members T39 T38)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T38"],
                    "free": [],
                    "exprvars": []
                }
            },
            "494": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "198": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "253": {
                "goal": [{
                    "clause": 6,
                    "scope": 4,
                    "term": "(members T39 T38)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T38"],
                    "free": [],
                    "exprvars": []
                }
            },
            "495": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "199": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "496": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "497": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "498": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "499": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "436": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T91 T90) (members T92 T90))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T90"],
                    "free": [],
                    "exprvars": []
                }
            },
            "437": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "218": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T64 T63 X64)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T63"],
                    "free": ["X64"],
                    "exprvars": []
                }
            },
            "72": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(select T31 T30 X31)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T30"],
                    "free": ["X31"],
                    "exprvars": []
                }
            },
            "51": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (members T39 T38) (color_map T40 T30))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T30",
                        "T38"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "31": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(',' (color_region T9 T8) (color_map T10 T8))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "54": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(select T31 T30 X31)"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(select T31 T30 X31)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T30"],
                    "free": ["X31"],
                    "exprvars": []
                }
            },
            "34": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(',' (color_region T9 T8) (color_map T10 T8))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "35": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "36": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (',' (select T31 T30 X31) (members T32 X31)) (color_map T33 T30))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T30"],
                    "free": ["X31"],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (color_region T9 T8) (color_map T10 T8))"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "37": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "38": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T31 T30 X31)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T30"],
                    "free": ["X31"],
                    "exprvars": []
                }
            },
            "482": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(member T91 T90)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(member T91 T90)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T90"],
                    "free": [],
                    "exprvars": []
                }
            },
            "483": {
                "goal": [{
                    "clause": 7,
                    "scope": 5,
                    "term": "(member T91 T90)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T90"],
                    "free": [],
                    "exprvars": []
                }
            },
            "220": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "484": {
                "goal": [{
                    "clause": 8,
                    "scope": 5,
                    "term": "(member T91 T90)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T90"],
                    "free": [],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "485": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "486": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "487": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "444": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T91 T90)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T90"],
                    "free": [],
                    "exprvars": []
                }
            },
            "488": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T121 T120)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T120"],
                    "free": [],
                    "exprvars": []
                }
            },
            "445": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T97 T90)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T90"],
                    "free": [],
                    "exprvars": []
                }
            },
            "489": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "248": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T39 T38)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T38"],
                    "free": [],
                    "exprvars": []
                }
            },
            "249": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T72 T30)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T30"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 15,
                "label": "EVAL with clause\ncolor_map(.(X6, X7), X8) :- ','(color_region(X6, X8), color_map(X7, X8)).\nand substitutionX6 -> T9,\nX7 -> T10,\nT1 -> .(T9, T10),\nT2 -> T8,\nX8 -> T8,\nT6 -> T9,\nT7 -> T10"
            },
            {
                "from": 6,
                "to": 28,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 15,
                "to": 31,
                "label": "CASE"
            },
            {
                "from": 28,
                "to": 497,
                "label": "EVAL with clause\ncolor_map([], X134).\nand substitutionT1 -> [],\nT2 -> T139,\nX134 -> T139"
            },
            {
                "from": 28,
                "to": 498,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 31,
                "to": 34,
                "label": "PARALLEL"
            },
            {
                "from": 31,
                "to": 35,
                "label": "PARALLEL"
            },
            {
                "from": 34,
                "to": 36,
                "label": "EVAL with clause\ncolor_region(region(X27, X28, X29), X30) :- ','(select(X28, X30, X31), members(X29, X31)).\nand substitutionX27 -> T27,\nX28 -> T31,\nX29 -> T32,\nT9 -> region(T27, T31, T32),\nT8 -> T30,\nX30 -> T30,\nT28 -> T31,\nT29 -> T32,\nT10 -> T33"
            },
            {
                "from": 34,
                "to": 37,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 35,
                "to": 493,
                "label": "FAILURE"
            },
            {
                "from": 36,
                "to": 38,
                "label": "SPLIT 1"
            },
            {
                "from": 36,
                "to": 51,
                "label": "SPLIT 2\nnew knowledge:\nT31 is ground\nT30 is ground\nT38 is ground\nreplacements:X31 -> T38,\nT32 -> T39,\nT33 -> T40"
            },
            {
                "from": 38,
                "to": 54,
                "label": "CASE"
            },
            {
                "from": 51,
                "to": 248,
                "label": "SPLIT 1"
            },
            {
                "from": 51,
                "to": 249,
                "label": "SPLIT 2\nnew knowledge:\nT39 is ground\nT38 is ground\nreplacements:T40 -> T72"
            },
            {
                "from": 54,
                "to": 69,
                "label": "PARALLEL"
            },
            {
                "from": 54,
                "to": 72,
                "label": "PARALLEL"
            },
            {
                "from": 69,
                "to": 197,
                "label": "EVAL with clause\nselect(X48, .(X48, X49), X49).\nand substitutionT31 -> T53,\nX48 -> T53,\nX49 -> T54,\nT30 -> .(T53, T54),\nX31 -> T54"
            },
            {
                "from": 69,
                "to": 198,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 72,
                "to": 218,
                "label": "EVAL with clause\nselect(X60, .(X61, X62), .(X61, X63)) :- select(X60, X62, X63).\nand substitutionT31 -> T64,\nX60 -> T64,\nX61 -> T62,\nX62 -> T63,\nT30 -> .(T62, T63),\nX63 -> X64,\nX31 -> .(T62, X64),\nT61 -> T64"
            },
            {
                "from": 72,
                "to": 220,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 197,
                "to": 199,
                "label": "SUCCESS"
            },
            {
                "from": 218,
                "to": 38,
                "label": "INSTANCE with matching:\nT31 -> T64\nT30 -> T63\nX31 -> X64"
            },
            {
                "from": 248,
                "to": 250,
                "label": "CASE"
            },
            {
                "from": 249,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T72\nT2 -> T30"
            },
            {
                "from": 250,
                "to": 252,
                "label": "PARALLEL"
            },
            {
                "from": 250,
                "to": 253,
                "label": "PARALLEL"
            },
            {
                "from": 252,
                "to": 436,
                "label": "EVAL with clause\nmembers(.(X87, X88), X89) :- ','(member(X87, X89), members(X88, X89)).\nand substitutionX87 -> T91,\nX88 -> T92,\nT39 -> .(T91, T92),\nT38 -> T90,\nX89 -> T90,\nT88 -> T91,\nT89 -> T92"
            },
            {
                "from": 252,
                "to": 437,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 253,
                "to": 490,
                "label": "EVAL with clause\nmembers([], X126).\nand substitutionT39 -> [],\nT38 -> T131,\nX126 -> T131"
            },
            {
                "from": 253,
                "to": 491,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 436,
                "to": 444,
                "label": "SPLIT 1"
            },
            {
                "from": 436,
                "to": 445,
                "label": "SPLIT 2\nnew knowledge:\nT91 is ground\nT90 is ground\nreplacements:T92 -> T97"
            },
            {
                "from": 444,
                "to": 482,
                "label": "CASE"
            },
            {
                "from": 445,
                "to": 248,
                "label": "INSTANCE with matching:\nT39 -> T97\nT38 -> T90"
            },
            {
                "from": 482,
                "to": 483,
                "label": "PARALLEL"
            },
            {
                "from": 482,
                "to": 484,
                "label": "PARALLEL"
            },
            {
                "from": 483,
                "to": 485,
                "label": "EVAL with clause\nmember(X106, .(X106, X107)).\nand substitutionT91 -> T110,\nX106 -> T110,\nX107 -> T111,\nT90 -> .(T110, T111)"
            },
            {
                "from": 483,
                "to": 486,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 484,
                "to": 488,
                "label": "EVAL with clause\nmember(X114, .(X115, X116)) :- member(X114, X116).\nand substitutionT91 -> T121,\nX114 -> T121,\nX115 -> T119,\nX116 -> T120,\nT90 -> .(T119, T120),\nT118 -> T121"
            },
            {
                "from": 484,
                "to": 489,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 485,
                "to": 487,
                "label": "SUCCESS"
            },
            {
                "from": 488,
                "to": 444,
                "label": "INSTANCE with matching:\nT91 -> T121\nT90 -> T120"
            },
            {
                "from": 490,
                "to": 492,
                "label": "SUCCESS"
            },
            {
                "from": 493,
                "to": 494,
                "label": "EVAL with clause\ncolor_map([], X132).\nand substitutionT1 -> [],\nT8 -> T137,\nX132 -> T137"
            },
            {
                "from": 493,
                "to": 495,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 494,
                "to": 496,
                "label": "SUCCESS"
            },
            {
                "from": 497,
                "to": 499,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(74)
Obligation:
Triples:

selectA(X1, .(X2, X3), .(X2, X4)) :- selectA(X1, X3, X4).
membersC(.(X1, X2), X3) :- memberD(X1, X3).
membersC(.(X1, X2), X3) :- ','(membercD(X1, X3), membersC(X2, X3)).
memberD(X1, .(X2, X3)) :- memberD(X1, X3).
color_mapB(.(region(X1, X2, X3), X4), X5) :- selectA(X2, X5, X6).
color_mapB(.(region(X1, X2, X3), X4), X5) :- ','(selectcA(X2, X5, X6), membersC(X3, X6)).
color_mapB(.(region(X1, X2, X3), X4), X5) :- ','(selectcA(X2, X5, X6), ','(memberscC(X3, X6), color_mapB(X4, X5))).

Clauses:

selectcA(X1, .(X1, X2), X2).
selectcA(X1, .(X2, X3), .(X2, X4)) :- selectcA(X1, X3, X4).
color_mapcB(.(region(X1, X2, X3), X4), X5) :- ','(selectcA(X2, X5, X6), ','(memberscC(X3, X6), color_mapcB(X4, X5))).
color_mapcB([], X1).
color_mapcB([], X1).
memberscC(.(X1, X2), X3) :- ','(membercD(X1, X3), memberscC(X2, X3)).
memberscC([], X1).
membercD(X1, .(X1, X2)).
membercD(X1, .(X2, X3)) :- membercD(X1, X3).

Afs:

color_mapB(x1, x2)  =  color_mapB(x2)


----------------------------------------

(75) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

color_mapB_in_2: (f,b)

selectA_in_3: (f,b,f)

selectcA_in_3: (f,b,f)

membersC_in_2: (f,b)

memberD_in_2: (f,b)

membercD_in_2: (f,b)

memberscC_in_2: (f,b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> U6_AG(X1, X2, X3, X4, X5, selectA_in_aga(X2, X5, X6))
   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> SELECTA_IN_AGA(X2, X5, X6)
   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> U1_AGA(X1, X2, X3, X4, selectA_in_aga(X1, X3, X4))
   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> SELECTA_IN_AGA(X1, X3, X4)
   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> U7_AG(X1, X2, X3, X4, X5, selectcA_in_aga(X2, X5, X6))
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> U8_AG(X1, X2, X3, X4, X5, membersC_in_ag(X3, X6))
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> MEMBERSC_IN_AG(X3, X6)
   MEMBERSC_IN_AG(.(X1, X2), X3) -> U2_AG(X1, X2, X3, memberD_in_ag(X1, X3))
   MEMBERSC_IN_AG(.(X1, X2), X3) -> MEMBERD_IN_AG(X1, X3)
   MEMBERD_IN_AG(X1, .(X2, X3)) -> U5_AG(X1, X2, X3, memberD_in_ag(X1, X3))
   MEMBERD_IN_AG(X1, .(X2, X3)) -> MEMBERD_IN_AG(X1, X3)
   MEMBERSC_IN_AG(.(X1, X2), X3) -> U3_AG(X1, X2, X3, membercD_in_ag(X1, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> U4_AG(X1, X2, X3, membersC_in_ag(X2, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X2, X3)
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> U9_AG(X1, X2, X3, X4, X5, memberscC_in_ag(X3, X6))
   U9_AG(X1, X2, X3, X4, X5, memberscC_out_ag(X3, X6)) -> U10_AG(X1, X2, X3, X4, X5, color_mapB_in_ag(X4, X5))
   U9_AG(X1, X2, X3, X4, X5, memberscC_out_ag(X3, X6)) -> COLOR_MAPB_IN_AG(X4, X5)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
color_mapB_in_ag(x1, x2)  =  color_mapB_in_ag(x2)

selectA_in_aga(x1, x2, x3)  =  selectA_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membersC_in_ag(x1, x2)  =  membersC_in_ag(x2)

memberD_in_ag(x1, x2)  =  memberD_in_ag(x2)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

COLOR_MAPB_IN_AG(x1, x2)  =  COLOR_MAPB_IN_AG(x2)

U6_AG(x1, x2, x3, x4, x5, x6)  =  U6_AG(x5, x6)

SELECTA_IN_AGA(x1, x2, x3)  =  SELECTA_IN_AGA(x2)

U1_AGA(x1, x2, x3, x4, x5)  =  U1_AGA(x2, x3, x5)

U7_AG(x1, x2, x3, x4, x5, x6)  =  U7_AG(x5, x6)

U8_AG(x1, x2, x3, x4, x5, x6)  =  U8_AG(x5, x6)

MEMBERSC_IN_AG(x1, x2)  =  MEMBERSC_IN_AG(x2)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x3, x4)

MEMBERD_IN_AG(x1, x2)  =  MEMBERD_IN_AG(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x2, x3, x4)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x3, x4)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x3, x4)

U9_AG(x1, x2, x3, x4, x5, x6)  =  U9_AG(x5, x6)

U10_AG(x1, x2, x3, x4, x5, x6)  =  U10_AG(x5, x6)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(76)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> U6_AG(X1, X2, X3, X4, X5, selectA_in_aga(X2, X5, X6))
   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> SELECTA_IN_AGA(X2, X5, X6)
   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> U1_AGA(X1, X2, X3, X4, selectA_in_aga(X1, X3, X4))
   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> SELECTA_IN_AGA(X1, X3, X4)
   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> U7_AG(X1, X2, X3, X4, X5, selectcA_in_aga(X2, X5, X6))
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> U8_AG(X1, X2, X3, X4, X5, membersC_in_ag(X3, X6))
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> MEMBERSC_IN_AG(X3, X6)
   MEMBERSC_IN_AG(.(X1, X2), X3) -> U2_AG(X1, X2, X3, memberD_in_ag(X1, X3))
   MEMBERSC_IN_AG(.(X1, X2), X3) -> MEMBERD_IN_AG(X1, X3)
   MEMBERD_IN_AG(X1, .(X2, X3)) -> U5_AG(X1, X2, X3, memberD_in_ag(X1, X3))
   MEMBERD_IN_AG(X1, .(X2, X3)) -> MEMBERD_IN_AG(X1, X3)
   MEMBERSC_IN_AG(.(X1, X2), X3) -> U3_AG(X1, X2, X3, membercD_in_ag(X1, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> U4_AG(X1, X2, X3, membersC_in_ag(X2, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X2, X3)
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> U9_AG(X1, X2, X3, X4, X5, memberscC_in_ag(X3, X6))
   U9_AG(X1, X2, X3, X4, X5, memberscC_out_ag(X3, X6)) -> U10_AG(X1, X2, X3, X4, X5, color_mapB_in_ag(X4, X5))
   U9_AG(X1, X2, X3, X4, X5, memberscC_out_ag(X3, X6)) -> COLOR_MAPB_IN_AG(X4, X5)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
color_mapB_in_ag(x1, x2)  =  color_mapB_in_ag(x2)

selectA_in_aga(x1, x2, x3)  =  selectA_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membersC_in_ag(x1, x2)  =  membersC_in_ag(x2)

memberD_in_ag(x1, x2)  =  memberD_in_ag(x2)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

COLOR_MAPB_IN_AG(x1, x2)  =  COLOR_MAPB_IN_AG(x2)

U6_AG(x1, x2, x3, x4, x5, x6)  =  U6_AG(x5, x6)

SELECTA_IN_AGA(x1, x2, x3)  =  SELECTA_IN_AGA(x2)

U1_AGA(x1, x2, x3, x4, x5)  =  U1_AGA(x2, x3, x5)

U7_AG(x1, x2, x3, x4, x5, x6)  =  U7_AG(x5, x6)

U8_AG(x1, x2, x3, x4, x5, x6)  =  U8_AG(x5, x6)

MEMBERSC_IN_AG(x1, x2)  =  MEMBERSC_IN_AG(x2)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x3, x4)

MEMBERD_IN_AG(x1, x2)  =  MEMBERD_IN_AG(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x2, x3, x4)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x3, x4)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x3, x4)

U9_AG(x1, x2, x3, x4, x5, x6)  =  U9_AG(x5, x6)

U10_AG(x1, x2, x3, x4, x5, x6)  =  U10_AG(x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(77) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 4 SCCs with 10 less nodes.
----------------------------------------

(78)
Complex Obligation (AND)

----------------------------------------

(79)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERD_IN_AG(X1, .(X2, X3)) -> MEMBERD_IN_AG(X1, X3)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

MEMBERD_IN_AG(x1, x2)  =  MEMBERD_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(80) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(81)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERD_IN_AG(X1, .(X2, X3)) -> MEMBERD_IN_AG(X1, X3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBERD_IN_AG(x1, x2)  =  MEMBERD_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(82) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(83)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERD_IN_AG(.(X2, X3)) -> MEMBERD_IN_AG(X3)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(84) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBERD_IN_AG(.(X2, X3)) -> MEMBERD_IN_AG(X3)
The graph contains the following edges 1 > 1


----------------------------------------

(85)
YES

----------------------------------------

(86)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERSC_IN_AG(.(X1, X2), X3) -> U3_AG(X1, X2, X3, membercD_in_ag(X1, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X2, X3)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

MEMBERSC_IN_AG(x1, x2)  =  MEMBERSC_IN_AG(x2)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(87) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(88)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERSC_IN_AG(.(X1, X2), X3) -> U3_AG(X1, X2, X3, membercD_in_ag(X1, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X2, X3)

The TRS R consists of the following rules:

   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

MEMBERSC_IN_AG(x1, x2)  =  MEMBERSC_IN_AG(x2)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(89) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(90)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERSC_IN_AG(X3) -> U3_AG(X3, membercD_in_ag(X3))
   U3_AG(X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X3)

The TRS R consists of the following rules:

   membercD_in_ag(.(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(.(X2, X3)) -> U18_ag(X2, X3, membercD_in_ag(X3))
   U18_ag(X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))

The set Q consists of the following terms:

   membercD_in_ag(x0)
   U18_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(91) TransformationProof (SOUND)
By narrowing [LPAR04] the rule MEMBERSC_IN_AG(X3) -> U3_AG(X3, membercD_in_ag(X3)) at position [1] we obtained the following new rules [LPAR04]:

   (MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), membercD_out_ag(x0, .(x0, x1))),MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), membercD_out_ag(x0, .(x0, x1))))
   (MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), U18_ag(x0, x1, membercD_in_ag(x1))),MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), U18_ag(x0, x1, membercD_in_ag(x1))))


----------------------------------------

(92)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_AG(X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X3)
   MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), membercD_out_ag(x0, .(x0, x1)))
   MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), U18_ag(x0, x1, membercD_in_ag(x1)))

The TRS R consists of the following rules:

   membercD_in_ag(.(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(.(X2, X3)) -> U18_ag(X2, X3, membercD_in_ag(X3))
   U18_ag(X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))

The set Q consists of the following terms:

   membercD_in_ag(x0)
   U18_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(93) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U3_AG(X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X3) we obtained the following new rules [LPAR04]:

   (U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1)),U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1)))
   (U3_AG(.(z0, z1), membercD_out_ag(x1, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1)),U3_AG(.(z0, z1), membercD_out_ag(x1, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1)))


----------------------------------------

(94)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), membercD_out_ag(x0, .(x0, x1)))
   MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), U18_ag(x0, x1, membercD_in_ag(x1)))
   U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1))
   U3_AG(.(z0, z1), membercD_out_ag(x1, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1))

The TRS R consists of the following rules:

   membercD_in_ag(.(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(.(X2, X3)) -> U18_ag(X2, X3, membercD_in_ag(X3))
   U18_ag(X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))

The set Q consists of the following terms:

   membercD_in_ag(x0)
   U18_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(95) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1))) evaluates to  t =U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1)))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1))
with rule U3_AG(.(z0', z1'), membercD_out_ag(z0', .(z0', z1'))) -> MEMBERSC_IN_AG(.(z0', z1')) at position [] and matcher [z0' / z0, z1' / z1]

MEMBERSC_IN_AG(.(z0, z1)) -> U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1)))
with rule MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), membercD_out_ag(x0, .(x0, x1)))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(96)
NO

----------------------------------------

(97)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> SELECTA_IN_AGA(X1, X3, X4)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

SELECTA_IN_AGA(x1, x2, x3)  =  SELECTA_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(98) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(99)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> SELECTA_IN_AGA(X1, X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

SELECTA_IN_AGA(x1, x2, x3)  =  SELECTA_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(100) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(101)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SELECTA_IN_AGA(.(X2, X3)) -> SELECTA_IN_AGA(X3)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(102) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SELECTA_IN_AGA(.(X2, X3)) -> SELECTA_IN_AGA(X3)
The graph contains the following edges 1 > 1


----------------------------------------

(103)
YES

----------------------------------------

(104)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAPB_IN_AG(.(region(X1, X2, X3), X4), X5) -> U7_AG(X1, X2, X3, X4, X5, selectcA_in_aga(X2, X5, X6))
   U7_AG(X1, X2, X3, X4, X5, selectcA_out_aga(X2, X5, X6)) -> U9_AG(X1, X2, X3, X4, X5, memberscC_in_ag(X3, X6))
   U9_AG(X1, X2, X3, X4, X5, memberscC_out_ag(X3, X6)) -> COLOR_MAPB_IN_AG(X4, X5)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

region(x1, x2, x3)  =  region(x2, x3)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

COLOR_MAPB_IN_AG(x1, x2)  =  COLOR_MAPB_IN_AG(x2)

U7_AG(x1, x2, x3, x4, x5, x6)  =  U7_AG(x5, x6)

U9_AG(x1, x2, x3, x4, x5, x6)  =  U9_AG(x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(105) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(106)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COLOR_MAPB_IN_AG(X5) -> U7_AG(X5, selectcA_in_aga(X5))
   U7_AG(X5, selectcA_out_aga(X2, X5, X6)) -> U9_AG(X5, memberscC_in_ag(X6))
   U9_AG(X5, memberscC_out_ag(X3, X6)) -> COLOR_MAPB_IN_AG(X5)

The TRS R consists of the following rules:

   selectcA_in_aga(.(X1, X2)) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(.(X2, X3)) -> U12_aga(X2, X3, selectcA_in_aga(X3))
   U12_aga(X2, X3, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(.(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(.(X2, X3)) -> U18_ag(X2, X3, membercD_in_ag(X3))
   U18_ag(X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(X3) -> U16_ag(X3, membercD_in_ag(X3))
   U16_ag(X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X3, memberscC_in_ag(X3))
   memberscC_in_ag(X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The set Q consists of the following terms:

   selectcA_in_aga(x0)
   U12_aga(x0, x1, x2)
   membercD_in_ag(x0)
   U18_ag(x0, x1, x2)
   memberscC_in_ag(x0)
   U16_ag(x0, x1)
   U17_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(107) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(color_map (. Region Regions) Colors)",
                "(',' (color_region Region Colors) (color_map Regions Colors))"
            ],
            [
                "(color_map ([]) Colors)",
                null
            ],
            [
                "(color_region (region Name Color Neighbors) Colors)",
                "(',' (select Color Colors Colors1) (members Neighbors Colors1))"
            ],
            [
                "(select X (. X Xs) Xs)",
                null
            ],
            [
                "(select X (. Y Ys) (. Y Zs))",
                "(select X Ys Zs)"
            ],
            [
                "(members (. X Xs) Ys)",
                "(',' (member X Ys) (members Xs Ys))"
            ],
            [
                "(members ([]) Ys)",
                null
            ],
            [
                "(member X (. X X1))",
                null
            ],
            [
                "(member X (. X2 Xs))",
                "(member X Xs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "68": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(color_region T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "291": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T95 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "270": {
                "goal": [{
                    "clause": 6,
                    "scope": 4,
                    "term": "(members T48 T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "292": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T101 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "251": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(members T48 T47)"
                    },
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(members T48 T47)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "273": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T95 T94) (members T96 T94))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "274": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "373": {
                "goal": [{
                    "clause": 7,
                    "scope": 5,
                    "term": "(member T95 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "450": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "374": {
                "goal": [{
                    "clause": 8,
                    "scope": 5,
                    "term": "(member T95 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "375": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "430": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "211": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T41 T40 X41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "376": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "212": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T48 T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "234": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(select T41 T40 X41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "377": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "235": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(select T41 T40 X41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "438": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "219": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(select T41 T40 X41)"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(select T41 T40 X41)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "52": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (color_region T18 T17) (color_map T19 T17))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "440": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "243": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "200": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (select T41 T40 X41) (members T42 X41))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "244": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "442": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "201": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "245": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "246": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T72 T71 X74)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T71"],
                    "free": ["X74"],
                    "exprvars": []
                }
            },
            "247": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "269": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(members T48 T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "305": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(member T95 T94)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(member T95 T94)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "448": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "449": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "429": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T125 T124)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T124"],
                    "free": [],
                    "exprvars": []
                }
            },
            "63": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "64": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_region T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "65": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T24 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 3,
                "label": "CASE"
            },
            {
                "from": 3,
                "to": 8,
                "label": "PARALLEL"
            },
            {
                "from": 3,
                "to": 9,
                "label": "PARALLEL"
            },
            {
                "from": 8,
                "to": 52,
                "label": "EVAL with clause\ncolor_map(.(X15, X16), X17) :- ','(color_region(X15, X17), color_map(X16, X17)).\nand substitutionX15 -> T18,\nX16 -> T19,\nT1 -> .(T18, T19),\nT2 -> T17,\nX17 -> T17,\nT15 -> T18,\nT16 -> T19"
            },
            {
                "from": 8,
                "to": 63,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 9,
                "to": 448,
                "label": "EVAL with clause\ncolor_map([], X139).\nand substitutionT1 -> [],\nT2 -> T141,\nX139 -> T141"
            },
            {
                "from": 9,
                "to": 449,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 52,
                "to": 64,
                "label": "SPLIT 1"
            },
            {
                "from": 52,
                "to": 65,
                "label": "SPLIT 2\nnew knowledge:\nT17 is ground\nreplacements:T19 -> T24"
            },
            {
                "from": 64,
                "to": 68,
                "label": "CASE"
            },
            {
                "from": 65,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T24\nT2 -> T17"
            },
            {
                "from": 68,
                "to": 200,
                "label": "EVAL with clause\ncolor_region(region(X37, X38, X39), X40) :- ','(select(X38, X40, X41), members(X39, X41)).\nand substitutionX37 -> T37,\nX38 -> T41,\nX39 -> T42,\nT18 -> region(T37, T41, T42),\nT17 -> T40,\nX40 -> T40,\nT38 -> T41,\nT39 -> T42"
            },
            {
                "from": 68,
                "to": 201,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 200,
                "to": 211,
                "label": "SPLIT 1"
            },
            {
                "from": 200,
                "to": 212,
                "label": "SPLIT 2\nnew knowledge:\nT41 is ground\nT40 is ground\nT47 is ground\nreplacements:X41 -> T47,\nT42 -> T48"
            },
            {
                "from": 211,
                "to": 219,
                "label": "CASE"
            },
            {
                "from": 212,
                "to": 251,
                "label": "CASE"
            },
            {
                "from": 219,
                "to": 234,
                "label": "PARALLEL"
            },
            {
                "from": 219,
                "to": 235,
                "label": "PARALLEL"
            },
            {
                "from": 234,
                "to": 243,
                "label": "EVAL with clause\nselect(X58, .(X58, X59), X59).\nand substitutionT41 -> T61,\nX58 -> T61,\nX59 -> T62,\nT40 -> .(T61, T62),\nX41 -> T62"
            },
            {
                "from": 234,
                "to": 244,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 235,
                "to": 246,
                "label": "EVAL with clause\nselect(X70, .(X71, X72), .(X71, X73)) :- select(X70, X72, X73).\nand substitutionT41 -> T72,\nX70 -> T72,\nX71 -> T70,\nX72 -> T71,\nT40 -> .(T70, T71),\nX73 -> X74,\nX41 -> .(T70, X74),\nT69 -> T72"
            },
            {
                "from": 235,
                "to": 247,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 243,
                "to": 245,
                "label": "SUCCESS"
            },
            {
                "from": 246,
                "to": 211,
                "label": "INSTANCE with matching:\nT41 -> T72\nT40 -> T71\nX41 -> X74"
            },
            {
                "from": 251,
                "to": 269,
                "label": "PARALLEL"
            },
            {
                "from": 251,
                "to": 270,
                "label": "PARALLEL"
            },
            {
                "from": 269,
                "to": 273,
                "label": "EVAL with clause\nmembers(.(X94, X95), X96) :- ','(member(X94, X96), members(X95, X96)).\nand substitutionX94 -> T95,\nX95 -> T96,\nT48 -> .(T95, T96),\nT47 -> T94,\nX96 -> T94,\nT92 -> T95,\nT93 -> T96"
            },
            {
                "from": 269,
                "to": 274,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 270,
                "to": 438,
                "label": "EVAL with clause\nmembers([], X133).\nand substitutionT48 -> [],\nT47 -> T135,\nX133 -> T135"
            },
            {
                "from": 270,
                "to": 440,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 273,
                "to": 291,
                "label": "SPLIT 1"
            },
            {
                "from": 273,
                "to": 292,
                "label": "SPLIT 2\nnew knowledge:\nT95 is ground\nT94 is ground\nreplacements:T96 -> T101"
            },
            {
                "from": 291,
                "to": 305,
                "label": "CASE"
            },
            {
                "from": 292,
                "to": 212,
                "label": "INSTANCE with matching:\nT48 -> T101\nT47 -> T94"
            },
            {
                "from": 305,
                "to": 373,
                "label": "PARALLEL"
            },
            {
                "from": 305,
                "to": 374,
                "label": "PARALLEL"
            },
            {
                "from": 373,
                "to": 375,
                "label": "EVAL with clause\nmember(X113, .(X113, X114)).\nand substitutionT95 -> T114,\nX113 -> T114,\nX114 -> T115,\nT94 -> .(T114, T115)"
            },
            {
                "from": 373,
                "to": 376,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 374,
                "to": 429,
                "label": "EVAL with clause\nmember(X121, .(X122, X123)) :- member(X121, X123).\nand substitutionT95 -> T125,\nX121 -> T125,\nX122 -> T123,\nX123 -> T124,\nT94 -> .(T123, T124),\nT122 -> T125"
            },
            {
                "from": 374,
                "to": 430,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 375,
                "to": 377,
                "label": "SUCCESS"
            },
            {
                "from": 429,
                "to": 291,
                "label": "INSTANCE with matching:\nT95 -> T125\nT94 -> T124"
            },
            {
                "from": 438,
                "to": 442,
                "label": "SUCCESS"
            },
            {
                "from": 448,
                "to": 450,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(108)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in(T17) -> U1(f52_in(T17), T17)
   U1(f52_out1, T17) -> f2_out1
   f2_in(T141) -> f2_out1
   f211_in(.(T61, T62)) -> f211_out1(T61, T62)
   f211_in(.(T70, T71)) -> U2(f211_in(T71), .(T70, T71))
   U2(f211_out1(T72, X74), .(T70, T71)) -> f211_out1(T72, .(T70, X74))
   f212_in(T94) -> U3(f273_in(T94), T94)
   U3(f273_out1(T95, T96), T94) -> f212_out1(.(T95, T96))
   f212_in(T135) -> f212_out1([])
   f291_in(.(T114, T115)) -> f291_out1(T114)
   f291_in(.(T123, T124)) -> U4(f291_in(T124), .(T123, T124))
   U4(f291_out1(T125), .(T123, T124)) -> f291_out1(T125)
   f64_in(T40) -> U5(f200_in(T40), T40)
   U5(f200_out1(T41, X41, T42), T40) -> f64_out1
   f52_in(T17) -> U6(f64_in(T17), T17)
   U6(f64_out1, T17) -> U7(f2_in(T17), T17)
   U7(f2_out1, T17) -> f52_out1
   f200_in(T40) -> U8(f211_in(T40), T40)
   U8(f211_out1(T41, T47), T40) -> U9(f212_in(T47), T40, T41, T47)
   U9(f212_out1(T48), T40, T41, T47) -> f200_out1(T41, T47, T48)
   f273_in(T94) -> U10(f291_in(T94), T94)
   U10(f291_out1(T95), T94) -> U11(f212_in(T94), T94, T95)
   U11(f212_out1(T101), T94, T95) -> f273_out1(T95, T101)

Q is empty.

----------------------------------------

(109) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(110)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN(T17) -> U1^1(f52_in(T17), T17)
   F2_IN(T17) -> F52_IN(T17)
   F211_IN(.(T70, T71)) -> U2^1(f211_in(T71), .(T70, T71))
   F211_IN(.(T70, T71)) -> F211_IN(T71)
   F212_IN(T94) -> U3^1(f273_in(T94), T94)
   F212_IN(T94) -> F273_IN(T94)
   F291_IN(.(T123, T124)) -> U4^1(f291_in(T124), .(T123, T124))
   F291_IN(.(T123, T124)) -> F291_IN(T124)
   F64_IN(T40) -> U5^1(f200_in(T40), T40)
   F64_IN(T40) -> F200_IN(T40)
   F52_IN(T17) -> U6^1(f64_in(T17), T17)
   F52_IN(T17) -> F64_IN(T17)
   U6^1(f64_out1, T17) -> U7^1(f2_in(T17), T17)
   U6^1(f64_out1, T17) -> F2_IN(T17)
   F200_IN(T40) -> U8^1(f211_in(T40), T40)
   F200_IN(T40) -> F211_IN(T40)
   U8^1(f211_out1(T41, T47), T40) -> U9^1(f212_in(T47), T40, T41, T47)
   U8^1(f211_out1(T41, T47), T40) -> F212_IN(T47)
   F273_IN(T94) -> U10^1(f291_in(T94), T94)
   F273_IN(T94) -> F291_IN(T94)
   U10^1(f291_out1(T95), T94) -> U11^1(f212_in(T94), T94, T95)
   U10^1(f291_out1(T95), T94) -> F212_IN(T94)

The TRS R consists of the following rules:

   f2_in(T17) -> U1(f52_in(T17), T17)
   U1(f52_out1, T17) -> f2_out1
   f2_in(T141) -> f2_out1
   f211_in(.(T61, T62)) -> f211_out1(T61, T62)
   f211_in(.(T70, T71)) -> U2(f211_in(T71), .(T70, T71))
   U2(f211_out1(T72, X74), .(T70, T71)) -> f211_out1(T72, .(T70, X74))
   f212_in(T94) -> U3(f273_in(T94), T94)
   U3(f273_out1(T95, T96), T94) -> f212_out1(.(T95, T96))
   f212_in(T135) -> f212_out1([])
   f291_in(.(T114, T115)) -> f291_out1(T114)
   f291_in(.(T123, T124)) -> U4(f291_in(T124), .(T123, T124))
   U4(f291_out1(T125), .(T123, T124)) -> f291_out1(T125)
   f64_in(T40) -> U5(f200_in(T40), T40)
   U5(f200_out1(T41, X41, T42), T40) -> f64_out1
   f52_in(T17) -> U6(f64_in(T17), T17)
   U6(f64_out1, T17) -> U7(f2_in(T17), T17)
   U7(f2_out1, T17) -> f52_out1
   f200_in(T40) -> U8(f211_in(T40), T40)
   U8(f211_out1(T41, T47), T40) -> U9(f212_in(T47), T40, T41, T47)
   U9(f212_out1(T48), T40, T41, T47) -> f200_out1(T41, T47, T48)
   f273_in(T94) -> U10(f291_in(T94), T94)
   U10(f291_out1(T95), T94) -> U11(f212_in(T94), T94, T95)
   U11(f212_out1(T101), T94, T95) -> f273_out1(T95, T101)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(111) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 14 less nodes.
----------------------------------------

(112)
Complex Obligation (AND)

----------------------------------------

(113)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F291_IN(.(T123, T124)) -> F291_IN(T124)

The TRS R consists of the following rules:

   f2_in(T17) -> U1(f52_in(T17), T17)
   U1(f52_out1, T17) -> f2_out1
   f2_in(T141) -> f2_out1
   f211_in(.(T61, T62)) -> f211_out1(T61, T62)
   f211_in(.(T70, T71)) -> U2(f211_in(T71), .(T70, T71))
   U2(f211_out1(T72, X74), .(T70, T71)) -> f211_out1(T72, .(T70, X74))
   f212_in(T94) -> U3(f273_in(T94), T94)
   U3(f273_out1(T95, T96), T94) -> f212_out1(.(T95, T96))
   f212_in(T135) -> f212_out1([])
   f291_in(.(T114, T115)) -> f291_out1(T114)
   f291_in(.(T123, T124)) -> U4(f291_in(T124), .(T123, T124))
   U4(f291_out1(T125), .(T123, T124)) -> f291_out1(T125)
   f64_in(T40) -> U5(f200_in(T40), T40)
   U5(f200_out1(T41, X41, T42), T40) -> f64_out1
   f52_in(T17) -> U6(f64_in(T17), T17)
   U6(f64_out1, T17) -> U7(f2_in(T17), T17)
   U7(f2_out1, T17) -> f52_out1
   f200_in(T40) -> U8(f211_in(T40), T40)
   U8(f211_out1(T41, T47), T40) -> U9(f212_in(T47), T40, T41, T47)
   U9(f212_out1(T48), T40, T41, T47) -> f200_out1(T41, T47, T48)
   f273_in(T94) -> U10(f291_in(T94), T94)
   U10(f291_out1(T95), T94) -> U11(f212_in(T94), T94, T95)
   U11(f212_out1(T101), T94, T95) -> f273_out1(T95, T101)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(114) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(115)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F291_IN(.(T123, T124)) -> F291_IN(T124)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(116) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F291_IN(.(T123, T124)) -> F291_IN(T124)
The graph contains the following edges 1 > 1


----------------------------------------

(117)
YES

----------------------------------------

(118)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F212_IN(T94) -> F273_IN(T94)
   F273_IN(T94) -> U10^1(f291_in(T94), T94)
   U10^1(f291_out1(T95), T94) -> F212_IN(T94)

The TRS R consists of the following rules:

   f2_in(T17) -> U1(f52_in(T17), T17)
   U1(f52_out1, T17) -> f2_out1
   f2_in(T141) -> f2_out1
   f211_in(.(T61, T62)) -> f211_out1(T61, T62)
   f211_in(.(T70, T71)) -> U2(f211_in(T71), .(T70, T71))
   U2(f211_out1(T72, X74), .(T70, T71)) -> f211_out1(T72, .(T70, X74))
   f212_in(T94) -> U3(f273_in(T94), T94)
   U3(f273_out1(T95, T96), T94) -> f212_out1(.(T95, T96))
   f212_in(T135) -> f212_out1([])
   f291_in(.(T114, T115)) -> f291_out1(T114)
   f291_in(.(T123, T124)) -> U4(f291_in(T124), .(T123, T124))
   U4(f291_out1(T125), .(T123, T124)) -> f291_out1(T125)
   f64_in(T40) -> U5(f200_in(T40), T40)
   U5(f200_out1(T41, X41, T42), T40) -> f64_out1
   f52_in(T17) -> U6(f64_in(T17), T17)
   U6(f64_out1, T17) -> U7(f2_in(T17), T17)
   U7(f2_out1, T17) -> f52_out1
   f200_in(T40) -> U8(f211_in(T40), T40)
   U8(f211_out1(T41, T47), T40) -> U9(f212_in(T47), T40, T41, T47)
   U9(f212_out1(T48), T40, T41, T47) -> f200_out1(T41, T47, T48)
   f273_in(T94) -> U10(f291_in(T94), T94)
   U10(f291_out1(T95), T94) -> U11(f212_in(T94), T94, T95)
   U11(f212_out1(T101), T94, T95) -> f273_out1(T95, T101)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(119) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F273_IN(.(T114, T115)) evaluates to  t =F273_IN(.(T114, T115))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

F273_IN(.(T114, T115)) -> U10^1(f291_in(.(T114, T115)), .(T114, T115))
with rule F273_IN(T94) -> U10^1(f291_in(T94), T94) at position [] and matcher [T94 / .(T114, T115)]

U10^1(f291_in(.(T114, T115)), .(T114, T115)) -> U10^1(f291_out1(T114), .(T114, T115))
with rule f291_in(.(T114', T115')) -> f291_out1(T114') at position [0] and matcher [T114' / T114, T115' / T115]

U10^1(f291_out1(T114), .(T114, T115)) -> F212_IN(.(T114, T115))
with rule U10^1(f291_out1(T95), T94') -> F212_IN(T94') at position [] and matcher [T95 / T114, T94' / .(T114, T115)]

F212_IN(.(T114, T115)) -> F273_IN(.(T114, T115))
with rule F212_IN(T94) -> F273_IN(T94)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(120)
NO

----------------------------------------

(121)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F211_IN(.(T70, T71)) -> F211_IN(T71)

The TRS R consists of the following rules:

   f2_in(T17) -> U1(f52_in(T17), T17)
   U1(f52_out1, T17) -> f2_out1
   f2_in(T141) -> f2_out1
   f211_in(.(T61, T62)) -> f211_out1(T61, T62)
   f211_in(.(T70, T71)) -> U2(f211_in(T71), .(T70, T71))
   U2(f211_out1(T72, X74), .(T70, T71)) -> f211_out1(T72, .(T70, X74))
   f212_in(T94) -> U3(f273_in(T94), T94)
   U3(f273_out1(T95, T96), T94) -> f212_out1(.(T95, T96))
   f212_in(T135) -> f212_out1([])
   f291_in(.(T114, T115)) -> f291_out1(T114)
   f291_in(.(T123, T124)) -> U4(f291_in(T124), .(T123, T124))
   U4(f291_out1(T125), .(T123, T124)) -> f291_out1(T125)
   f64_in(T40) -> U5(f200_in(T40), T40)
   U5(f200_out1(T41, X41, T42), T40) -> f64_out1
   f52_in(T17) -> U6(f64_in(T17), T17)
   U6(f64_out1, T17) -> U7(f2_in(T17), T17)
   U7(f2_out1, T17) -> f52_out1
   f200_in(T40) -> U8(f211_in(T40), T40)
   U8(f211_out1(T41, T47), T40) -> U9(f212_in(T47), T40, T41, T47)
   U9(f212_out1(T48), T40, T41, T47) -> f200_out1(T41, T47, T48)
   f273_in(T94) -> U10(f291_in(T94), T94)
   U10(f291_out1(T95), T94) -> U11(f212_in(T94), T94, T95)
   U11(f212_out1(T101), T94, T95) -> f273_out1(T95, T101)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(122) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(123)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F211_IN(.(T70, T71)) -> F211_IN(T71)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(124) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F211_IN(.(T70, T71)) -> F211_IN(T71)
The graph contains the following edges 1 > 1


----------------------------------------

(125)
YES

----------------------------------------

(126)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN(T17) -> F52_IN(T17)
   F52_IN(T17) -> U6^1(f64_in(T17), T17)
   U6^1(f64_out1, T17) -> F2_IN(T17)

The TRS R consists of the following rules:

   f2_in(T17) -> U1(f52_in(T17), T17)
   U1(f52_out1, T17) -> f2_out1
   f2_in(T141) -> f2_out1
   f211_in(.(T61, T62)) -> f211_out1(T61, T62)
   f211_in(.(T70, T71)) -> U2(f211_in(T71), .(T70, T71))
   U2(f211_out1(T72, X74), .(T70, T71)) -> f211_out1(T72, .(T70, X74))
   f212_in(T94) -> U3(f273_in(T94), T94)
   U3(f273_out1(T95, T96), T94) -> f212_out1(.(T95, T96))
   f212_in(T135) -> f212_out1([])
   f291_in(.(T114, T115)) -> f291_out1(T114)
   f291_in(.(T123, T124)) -> U4(f291_in(T124), .(T123, T124))
   U4(f291_out1(T125), .(T123, T124)) -> f291_out1(T125)
   f64_in(T40) -> U5(f200_in(T40), T40)
   U5(f200_out1(T41, X41, T42), T40) -> f64_out1
   f52_in(T17) -> U6(f64_in(T17), T17)
   U6(f64_out1, T17) -> U7(f2_in(T17), T17)
   U7(f2_out1, T17) -> f52_out1
   f200_in(T40) -> U8(f211_in(T40), T40)
   U8(f211_out1(T41, T47), T40) -> U9(f212_in(T47), T40, T41, T47)
   U9(f212_out1(T48), T40, T41, T47) -> f200_out1(T41, T47, T48)
   f273_in(T94) -> U10(f291_in(T94), T94)
   U10(f291_out1(T95), T94) -> U11(f212_in(T94), T94, T95)
   U11(f212_out1(T101), T94, T95) -> f273_out1(T95, T101)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(127) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F52_IN(.(T61, T62)) evaluates to  t =F52_IN(.(T61, T62))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

F52_IN(.(T61, T62)) -> U6^1(f64_in(.(T61, T62)), .(T61, T62))
with rule F52_IN(T17) -> U6^1(f64_in(T17), T17) at position [] and matcher [T17 / .(T61, T62)]

U6^1(f64_in(.(T61, T62)), .(T61, T62)) -> U6^1(U5(f200_in(.(T61, T62)), .(T61, T62)), .(T61, T62))
with rule f64_in(T40') -> U5(f200_in(T40'), T40') at position [0] and matcher [T40' / .(T61, T62)]

U6^1(U5(f200_in(.(T61, T62)), .(T61, T62)), .(T61, T62)) -> U6^1(U5(U8(f211_in(.(T61, T62)), .(T61, T62)), .(T61, T62)), .(T61, T62))
with rule f200_in(T40') -> U8(f211_in(T40'), T40') at position [0,0] and matcher [T40' / .(T61, T62)]

U6^1(U5(U8(f211_in(.(T61, T62)), .(T61, T62)), .(T61, T62)), .(T61, T62)) -> U6^1(U5(U8(f211_out1(T61, T62), .(T61, T62)), .(T61, T62)), .(T61, T62))
with rule f211_in(.(T61', T62')) -> f211_out1(T61', T62') at position [0,0,0] and matcher [T61' / T61, T62' / T62]

U6^1(U5(U8(f211_out1(T61, T62), .(T61, T62)), .(T61, T62)), .(T61, T62)) -> U6^1(U5(U9(f212_in(T62), .(T61, T62), T61, T62), .(T61, T62)), .(T61, T62))
with rule U8(f211_out1(T41, T47'), T40'') -> U9(f212_in(T47'), T40'', T41, T47') at position [0,0] and matcher [T41 / T61, T47' / T62, T40'' / .(T61, T62)]

U6^1(U5(U9(f212_in(T62), .(T61, T62), T61, T62), .(T61, T62)), .(T61, T62)) -> U6^1(U5(U9(f212_out1([]), .(T61, T62), T61, T62), .(T61, T62)), .(T61, T62))
with rule f212_in(T135) -> f212_out1([]) at position [0,0,0] and matcher [T135 / T62]

U6^1(U5(U9(f212_out1([]), .(T61, T62), T61, T62), .(T61, T62)), .(T61, T62)) -> U6^1(U5(f200_out1(T61, T62, []), .(T61, T62)), .(T61, T62))
with rule U9(f212_out1(T48), T40', T41', T47) -> f200_out1(T41', T47, T48) at position [0,0] and matcher [T48 / [], T40' / .(T61, T62), T41' / T61, T47 / T62]

U6^1(U5(f200_out1(T61, T62, []), .(T61, T62)), .(T61, T62)) -> U6^1(f64_out1, .(T61, T62))
with rule U5(f200_out1(T41, X41, T42), T40) -> f64_out1 at position [0] and matcher [T41 / T61, X41 / T62, T42 / [], T40 / .(T61, T62)]

U6^1(f64_out1, .(T61, T62)) -> F2_IN(.(T61, T62))
with rule U6^1(f64_out1, T17') -> F2_IN(T17') at position [] and matcher [T17' / .(T61, T62)]

F2_IN(.(T61, T62)) -> F52_IN(.(T61, T62))
with rule F2_IN(T17) -> F52_IN(T17)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(128)
NO

----------------------------------------

(129) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 4,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(color_map (. Region Regions) Colors)",
                "(',' (color_region Region Colors) (color_map Regions Colors))"
            ],
            [
                "(color_map ([]) Colors)",
                null
            ],
            [
                "(color_region (region Name Color Neighbors) Colors)",
                "(',' (select Color Colors Colors1) (members Neighbors Colors1))"
            ],
            [
                "(select X (. X Xs) Xs)",
                null
            ],
            [
                "(select X (. Y Ys) (. Y Zs))",
                "(select X Ys Zs)"
            ],
            [
                "(members (. X Xs) Ys)",
                "(',' (member X Ys) (members Xs Ys))"
            ],
            [
                "(members ([]) Ys)",
                null
            ],
            [
                "(member X (. X X1))",
                null
            ],
            [
                "(member X (. X2 Xs))",
                "(member X Xs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "type": "Nodes",
            "470": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T95 T94) (members T96 T94))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "471": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "472": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T95 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "451": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(members T48 T47)"
                    },
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(members T48 T47)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "473": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T101 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "452": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(members T48 T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "474": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(member T95 T94)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(member T95 T94)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "431": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T41 T40 X41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "453": {
                "goal": [{
                    "clause": 6,
                    "scope": 4,
                    "term": "(members T48 T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "475": {
                "goal": [{
                    "clause": 7,
                    "scope": 5,
                    "term": "(member T95 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "432": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T48 T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T47"],
                    "free": [],
                    "exprvars": []
                }
            },
            "476": {
                "goal": [{
                    "clause": 8,
                    "scope": 5,
                    "term": "(member T95 T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "433": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(select T41 T40 X41)"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(select T41 T40 X41)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "477": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "434": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(select T41 T40 X41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "478": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "435": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(select T41 T40 X41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "479": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "439": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "30": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "53": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(color_region T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "32": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (color_region T18 T17) (color_map T19 T17))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "33": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "39": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_region T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "480": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T125 T124)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T124"],
                    "free": [],
                    "exprvars": []
                }
            },
            "481": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "441": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "443": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "500": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "446": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T72 T71 X74)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T71"],
                    "free": ["X74"],
                    "exprvars": []
                }
            },
            "501": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "447": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "502": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "427": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (select T41 T40 X41) (members T42 X41))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T40"],
                    "free": ["X41"],
                    "exprvars": []
                }
            },
            "428": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "40": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T24 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "507": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "508": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "509": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 4,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 7,
                "label": "PARALLEL"
            },
            {
                "from": 5,
                "to": 30,
                "label": "PARALLEL"
            },
            {
                "from": 7,
                "to": 32,
                "label": "EVAL with clause\ncolor_map(.(X15, X16), X17) :- ','(color_region(X15, X17), color_map(X16, X17)).\nand substitutionX15 -> T18,\nX16 -> T19,\nT1 -> .(T18, T19),\nT2 -> T17,\nX17 -> T17,\nT15 -> T18,\nT16 -> T19"
            },
            {
                "from": 7,
                "to": 33,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 30,
                "to": 507,
                "label": "EVAL with clause\ncolor_map([], X139).\nand substitutionT1 -> [],\nT2 -> T141,\nX139 -> T141"
            },
            {
                "from": 30,
                "to": 508,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 32,
                "to": 39,
                "label": "SPLIT 1"
            },
            {
                "from": 32,
                "to": 40,
                "label": "SPLIT 2\nnew knowledge:\nT17 is ground\nreplacements:T19 -> T24"
            },
            {
                "from": 39,
                "to": 53,
                "label": "CASE"
            },
            {
                "from": 40,
                "to": 4,
                "label": "INSTANCE with matching:\nT1 -> T24\nT2 -> T17"
            },
            {
                "from": 53,
                "to": 427,
                "label": "EVAL with clause\ncolor_region(region(X37, X38, X39), X40) :- ','(select(X38, X40, X41), members(X39, X41)).\nand substitutionX37 -> T37,\nX38 -> T41,\nX39 -> T42,\nT18 -> region(T37, T41, T42),\nT17 -> T40,\nX40 -> T40,\nT38 -> T41,\nT39 -> T42"
            },
            {
                "from": 53,
                "to": 428,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 427,
                "to": 431,
                "label": "SPLIT 1"
            },
            {
                "from": 427,
                "to": 432,
                "label": "SPLIT 2\nnew knowledge:\nT41 is ground\nT40 is ground\nT47 is ground\nreplacements:X41 -> T47,\nT42 -> T48"
            },
            {
                "from": 431,
                "to": 433,
                "label": "CASE"
            },
            {
                "from": 432,
                "to": 451,
                "label": "CASE"
            },
            {
                "from": 433,
                "to": 434,
                "label": "PARALLEL"
            },
            {
                "from": 433,
                "to": 435,
                "label": "PARALLEL"
            },
            {
                "from": 434,
                "to": 439,
                "label": "EVAL with clause\nselect(X58, .(X58, X59), X59).\nand substitutionT41 -> T61,\nX58 -> T61,\nX59 -> T62,\nT40 -> .(T61, T62),\nX41 -> T62"
            },
            {
                "from": 434,
                "to": 441,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 435,
                "to": 446,
                "label": "EVAL with clause\nselect(X70, .(X71, X72), .(X71, X73)) :- select(X70, X72, X73).\nand substitutionT41 -> T72,\nX70 -> T72,\nX71 -> T70,\nX72 -> T71,\nT40 -> .(T70, T71),\nX73 -> X74,\nX41 -> .(T70, X74),\nT69 -> T72"
            },
            {
                "from": 435,
                "to": 447,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 439,
                "to": 443,
                "label": "SUCCESS"
            },
            {
                "from": 446,
                "to": 431,
                "label": "INSTANCE with matching:\nT41 -> T72\nT40 -> T71\nX41 -> X74"
            },
            {
                "from": 451,
                "to": 452,
                "label": "PARALLEL"
            },
            {
                "from": 451,
                "to": 453,
                "label": "PARALLEL"
            },
            {
                "from": 452,
                "to": 470,
                "label": "EVAL with clause\nmembers(.(X94, X95), X96) :- ','(member(X94, X96), members(X95, X96)).\nand substitutionX94 -> T95,\nX95 -> T96,\nT48 -> .(T95, T96),\nT47 -> T94,\nX96 -> T94,\nT92 -> T95,\nT93 -> T96"
            },
            {
                "from": 452,
                "to": 471,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 453,
                "to": 500,
                "label": "EVAL with clause\nmembers([], X133).\nand substitutionT48 -> [],\nT47 -> T135,\nX133 -> T135"
            },
            {
                "from": 453,
                "to": 501,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 470,
                "to": 472,
                "label": "SPLIT 1"
            },
            {
                "from": 470,
                "to": 473,
                "label": "SPLIT 2\nnew knowledge:\nT95 is ground\nT94 is ground\nreplacements:T96 -> T101"
            },
            {
                "from": 472,
                "to": 474,
                "label": "CASE"
            },
            {
                "from": 473,
                "to": 432,
                "label": "INSTANCE with matching:\nT48 -> T101\nT47 -> T94"
            },
            {
                "from": 474,
                "to": 475,
                "label": "PARALLEL"
            },
            {
                "from": 474,
                "to": 476,
                "label": "PARALLEL"
            },
            {
                "from": 475,
                "to": 477,
                "label": "EVAL with clause\nmember(X113, .(X113, X114)).\nand substitutionT95 -> T114,\nX113 -> T114,\nX114 -> T115,\nT94 -> .(T114, T115)"
            },
            {
                "from": 475,
                "to": 478,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 476,
                "to": 480,
                "label": "EVAL with clause\nmember(X121, .(X122, X123)) :- member(X121, X123).\nand substitutionT95 -> T125,\nX121 -> T125,\nX122 -> T123,\nX123 -> T124,\nT94 -> .(T123, T124),\nT122 -> T125"
            },
            {
                "from": 476,
                "to": 481,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 477,
                "to": 479,
                "label": "SUCCESS"
            },
            {
                "from": 480,
                "to": 472,
                "label": "INSTANCE with matching:\nT95 -> T125\nT94 -> T124"
            },
            {
                "from": 500,
                "to": 502,
                "label": "SUCCESS"
            },
            {
                "from": 507,
                "to": 509,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(130)
Complex Obligation (AND)

----------------------------------------

(131)
Obligation:
Rules:
f472_out(T124) -> f480_out(T124) :|: TRUE
f480_in(x) -> f472_in(x) :|: TRUE
f474_in(T94) -> f475_in(T94) :|: TRUE
f475_out(x1) -> f474_out(x1) :|: TRUE
f476_out(x2) -> f474_out(x2) :|: TRUE
f474_in(x3) -> f476_in(x3) :|: TRUE
f481_out -> f476_out(x4) :|: TRUE
f476_in(x5) -> f481_in :|: TRUE
f476_in(.(x6, x7)) -> f480_in(x7) :|: TRUE
f480_out(x8) -> f476_out(.(x9, x8)) :|: TRUE
f472_in(x10) -> f474_in(x10) :|: TRUE
f474_out(x11) -> f472_out(x11) :|: TRUE
f5_out(T2) -> f4_out(T2) :|: TRUE
f4_in(x12) -> f5_in(x12) :|: TRUE
f7_out(x13) -> f5_out(x13) :|: TRUE
f30_out(x14) -> f5_out(x14) :|: TRUE
f5_in(x15) -> f7_in(x15) :|: TRUE
f5_in(x16) -> f30_in(x16) :|: TRUE
f32_out(T17) -> f7_out(T17) :|: TRUE
f7_in(x17) -> f32_in(x17) :|: TRUE
f33_out -> f7_out(x18) :|: TRUE
f7_in(x19) -> f33_in :|: TRUE
f32_in(x20) -> f39_in(x20) :|: TRUE
f40_out(x21) -> f32_out(x21) :|: TRUE
f39_out(x22) -> f40_in(x22) :|: TRUE
f39_in(x23) -> f53_in(x23) :|: TRUE
f53_out(x24) -> f39_out(x24) :|: TRUE
f427_out(T40) -> f53_out(T40) :|: TRUE
f53_in(x25) -> f428_in :|: TRUE
f53_in(x26) -> f427_in(x26) :|: TRUE
f428_out -> f53_out(x27) :|: TRUE
f427_in(x28) -> f431_in(x28) :|: TRUE
f432_out(x29) -> f427_out(x30) :|: TRUE
f431_out(x31) -> f432_in(x32) :|: TRUE
f432_in(T47) -> f451_in(T47) :|: TRUE
f451_out(x33) -> f432_out(x33) :|: TRUE
f451_in(x34) -> f453_in(x34) :|: TRUE
f453_out(x35) -> f451_out(x35) :|: TRUE
f451_in(x36) -> f452_in(x36) :|: TRUE
f452_out(x37) -> f451_out(x37) :|: TRUE
f452_in(x38) -> f471_in :|: TRUE
f452_in(x39) -> f470_in(x39) :|: TRUE
f471_out -> f452_out(x40) :|: TRUE
f470_out(x41) -> f452_out(x41) :|: TRUE
f472_out(x42) -> f473_in(x42) :|: TRUE
f470_in(x43) -> f472_in(x43) :|: TRUE
f473_out(x44) -> f470_out(x44) :|: TRUE
Start term: f4_in(T2)

----------------------------------------

(132) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:


----------------------------------------

(133)
TRUE

----------------------------------------

(134)
Obligation:
Rules:
f472_out(T94) -> f473_in(T94) :|: TRUE
f470_in(x) -> f472_in(x) :|: TRUE
f473_out(x1) -> f470_out(x1) :|: TRUE
f472_in(x2) -> f474_in(x2) :|: TRUE
f474_out(x3) -> f472_out(x3) :|: TRUE
f474_in(x4) -> f475_in(x4) :|: TRUE
f475_out(x5) -> f474_out(x5) :|: TRUE
f476_out(x6) -> f474_out(x6) :|: TRUE
f474_in(x7) -> f476_in(x7) :|: TRUE
f475_in(.(T114, T115)) -> f477_in :|: TRUE
f475_in(x8) -> f478_in :|: TRUE
f478_out -> f475_out(x9) :|: TRUE
f477_out -> f475_out(.(x10, x11)) :|: TRUE
f452_in(T47) -> f471_in :|: TRUE
f452_in(x12) -> f470_in(x12) :|: TRUE
f471_out -> f452_out(x13) :|: TRUE
f470_out(x14) -> f452_out(x14) :|: TRUE
f432_in(x15) -> f451_in(x15) :|: TRUE
f451_out(x16) -> f432_out(x16) :|: TRUE
f451_in(x17) -> f453_in(x17) :|: TRUE
f453_out(x18) -> f451_out(x18) :|: TRUE
f451_in(x19) -> f452_in(x19) :|: TRUE
f452_out(x20) -> f451_out(x20) :|: TRUE
f477_in -> f477_out :|: TRUE
f472_out(T124) -> f480_out(T124) :|: TRUE
f480_in(x21) -> f472_in(x21) :|: TRUE
f432_out(x22) -> f473_out(x22) :|: TRUE
f473_in(x23) -> f432_in(x23) :|: TRUE
f481_out -> f476_out(x24) :|: TRUE
f476_in(x25) -> f481_in :|: TRUE
f476_in(.(x26, x27)) -> f480_in(x27) :|: TRUE
f480_out(x28) -> f476_out(.(x29, x28)) :|: TRUE
f5_out(T2) -> f4_out(T2) :|: TRUE
f4_in(x30) -> f5_in(x30) :|: TRUE
f7_out(x31) -> f5_out(x31) :|: TRUE
f30_out(x32) -> f5_out(x32) :|: TRUE
f5_in(x33) -> f7_in(x33) :|: TRUE
f5_in(x34) -> f30_in(x34) :|: TRUE
f32_out(T17) -> f7_out(T17) :|: TRUE
f7_in(x35) -> f32_in(x35) :|: TRUE
f33_out -> f7_out(x36) :|: TRUE
f7_in(x37) -> f33_in :|: TRUE
f32_in(x38) -> f39_in(x38) :|: TRUE
f40_out(x39) -> f32_out(x39) :|: TRUE
f39_out(x40) -> f40_in(x40) :|: TRUE
f39_in(x41) -> f53_in(x41) :|: TRUE
f53_out(x42) -> f39_out(x42) :|: TRUE
f427_out(T40) -> f53_out(T40) :|: TRUE
f53_in(x43) -> f428_in :|: TRUE
f53_in(x44) -> f427_in(x44) :|: TRUE
f428_out -> f53_out(x45) :|: TRUE
f427_in(x46) -> f431_in(x46) :|: TRUE
f432_out(x47) -> f427_out(x48) :|: TRUE
f431_out(x49) -> f432_in(x50) :|: TRUE
Start term: f4_in(T2)

----------------------------------------

(135) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:


----------------------------------------

(136)
TRUE

----------------------------------------

(137)
Obligation:
Rules:
f431_in(T40) -> f433_in(T40) :|: TRUE
f433_out(x) -> f431_out(x) :|: TRUE
f433_in(x1) -> f434_in(x1) :|: TRUE
f433_in(x2) -> f435_in(x2) :|: TRUE
f434_out(x3) -> f433_out(x3) :|: TRUE
f435_out(x4) -> f433_out(x4) :|: TRUE
f431_out(T71) -> f446_out(T71) :|: TRUE
f446_in(x5) -> f431_in(x5) :|: TRUE
f446_out(x6) -> f435_out(.(x7, x6)) :|: TRUE
f435_in(x8) -> f447_in :|: TRUE
f435_in(.(x9, x10)) -> f446_in(x10) :|: TRUE
f447_out -> f435_out(x11) :|: TRUE
f5_out(T2) -> f4_out(T2) :|: TRUE
f4_in(x12) -> f5_in(x12) :|: TRUE
f7_out(x13) -> f5_out(x13) :|: TRUE
f30_out(x14) -> f5_out(x14) :|: TRUE
f5_in(x15) -> f7_in(x15) :|: TRUE
f5_in(x16) -> f30_in(x16) :|: TRUE
f32_out(T17) -> f7_out(T17) :|: TRUE
f7_in(x17) -> f32_in(x17) :|: TRUE
f33_out -> f7_out(x18) :|: TRUE
f7_in(x19) -> f33_in :|: TRUE
f32_in(x20) -> f39_in(x20) :|: TRUE
f40_out(x21) -> f32_out(x21) :|: TRUE
f39_out(x22) -> f40_in(x22) :|: TRUE
f39_in(x23) -> f53_in(x23) :|: TRUE
f53_out(x24) -> f39_out(x24) :|: TRUE
f427_out(x25) -> f53_out(x25) :|: TRUE
f53_in(x26) -> f428_in :|: TRUE
f53_in(x27) -> f427_in(x27) :|: TRUE
f428_out -> f53_out(x28) :|: TRUE
f427_in(x29) -> f431_in(x29) :|: TRUE
f432_out(x30) -> f427_out(x31) :|: TRUE
f431_out(x32) -> f432_in(x33) :|: TRUE
Start term: f4_in(T2)

----------------------------------------

(138) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f431_in(T40) -> f433_in(T40) :|: TRUE
f433_in(x2) -> f435_in(x2) :|: TRUE
f446_in(x5) -> f431_in(x5) :|: TRUE
f435_in(.(x9, x10)) -> f446_in(x10) :|: TRUE


----------------------------------------

(139)
Obligation:
Rules:
f431_in(T40) -> f433_in(T40) :|: TRUE
f433_in(x2) -> f435_in(x2) :|: TRUE
f446_in(x5) -> f431_in(x5) :|: TRUE
f435_in(.(x9, x10)) -> f446_in(x10) :|: TRUE

----------------------------------------

(140) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(141)
Obligation:
Rules:
f446_in(.(x9:0, x10:0)) -> f446_in(x10:0) :|: TRUE

----------------------------------------

(142) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(143)
Obligation:
Rules:
f446_in(.(x9:0, x10:0)) -> f446_in(x10:0) :|: TRUE

----------------------------------------

(144) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f446_in(.(x9:0, x10:0)) -> f446_in(x10:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(145)
Obligation:

Termination digraph:
Nodes:
(1) f446_in(.(x9:0, x10:0)) -> f446_in(x10:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(146) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   .(x1, x2) -> .(x2)

----------------------------------------

(147)
Obligation:
Rules:
f446_in(.(x10:0)) -> f446_in(x10:0) :|: TRUE

----------------------------------------

(148) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f446_in(VARIABLE)
.(VARIABLE)
Removed predefined arithmetic.
----------------------------------------

(149)
Obligation:
Rules:
f446_in(.(x10:0)) -> f446_in(x10:0)

----------------------------------------

(150) IRSwTToQDPProof (SOUND)
Removed the integers and created a QDP-Problem.
----------------------------------------

(151)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f446_in(.(x10:0)) -> f446_in(x10:0)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(152) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*f446_in(.(x10:0)) -> f446_in(x10:0)
The graph contains the following edges 1 > 1


----------------------------------------

(153)
YES

----------------------------------------

(154)
Obligation:
Rules:
f431_in(T40) -> f433_in(T40) :|: TRUE
f433_out(x) -> f431_out(x) :|: TRUE
f32_in(T17) -> f39_in(T17) :|: TRUE
f40_out(x1) -> f32_out(x1) :|: TRUE
f39_out(x2) -> f40_in(x2) :|: TRUE
f472_in(T94) -> f474_in(T94) :|: TRUE
f474_out(x3) -> f472_out(x3) :|: TRUE
f475_in(.(T114, T115)) -> f477_in :|: TRUE
f475_in(x4) -> f478_in :|: TRUE
f478_out -> f475_out(x5) :|: TRUE
f477_out -> f475_out(.(x6, x7)) :|: TRUE
f7_out(T2) -> f5_out(T2) :|: TRUE
f30_out(x8) -> f5_out(x8) :|: TRUE
f5_in(x9) -> f7_in(x9) :|: TRUE
f5_in(x10) -> f30_in(x10) :|: TRUE
f427_in(x11) -> f431_in(x11) :|: TRUE
f432_out(x12) -> f427_out(x13) :|: TRUE
f431_out(x14) -> f432_in(x15) :|: TRUE
f433_in(x16) -> f434_in(x16) :|: TRUE
f433_in(x17) -> f435_in(x17) :|: TRUE
f434_out(x18) -> f433_out(x18) :|: TRUE
f435_out(x19) -> f433_out(x19) :|: TRUE
f434_in(x20) -> f441_in :|: TRUE
f434_in(.(T61, T62)) -> f439_in :|: TRUE
f439_out -> f434_out(.(x21, x22)) :|: TRUE
f441_out -> f434_out(x23) :|: TRUE
f432_in(T47) -> f451_in(T47) :|: TRUE
f451_out(x24) -> f432_out(x24) :|: TRUE
f452_in(x25) -> f471_in :|: TRUE
f452_in(x26) -> f470_in(x26) :|: TRUE
f471_out -> f452_out(x27) :|: TRUE
f470_out(x28) -> f452_out(x28) :|: TRUE
f477_in -> f477_out :|: TRUE
f431_out(T71) -> f446_out(T71) :|: TRUE
f446_in(x29) -> f431_in(x29) :|: TRUE
f500_out -> f453_out(T135) :|: TRUE
f501_out -> f453_out(x30) :|: TRUE
f453_in(x31) -> f501_in :|: TRUE
f453_in(x32) -> f500_in :|: TRUE
f39_in(x33) -> f53_in(x33) :|: TRUE
f53_out(x34) -> f39_out(x34) :|: TRUE
f432_out(x35) -> f473_out(x35) :|: TRUE
f473_in(x36) -> f432_in(x36) :|: TRUE
f481_out -> f476_out(x37) :|: TRUE
f476_in(x38) -> f481_in :|: TRUE
f476_in(.(T123, T124)) -> f480_in(T124) :|: TRUE
f480_out(x39) -> f476_out(.(x40, x39)) :|: TRUE
f5_out(x41) -> f4_out(x41) :|: TRUE
f4_in(x42) -> f5_in(x42) :|: TRUE
f439_in -> f439_out :|: TRUE
f472_out(x43) -> f473_in(x43) :|: TRUE
f470_in(x44) -> f472_in(x44) :|: TRUE
f473_out(x45) -> f470_out(x45) :|: TRUE
f32_out(x46) -> f7_out(x46) :|: TRUE
f7_in(x47) -> f32_in(x47) :|: TRUE
f33_out -> f7_out(x48) :|: TRUE
f7_in(x49) -> f33_in :|: TRUE
f474_in(x50) -> f475_in(x50) :|: TRUE
f475_out(x51) -> f474_out(x51) :|: TRUE
f476_out(x52) -> f474_out(x52) :|: TRUE
f474_in(x53) -> f476_in(x53) :|: TRUE
f500_in -> f500_out :|: TRUE
f451_in(x54) -> f453_in(x54) :|: TRUE
f453_out(x55) -> f451_out(x55) :|: TRUE
f451_in(x56) -> f452_in(x56) :|: TRUE
f452_out(x57) -> f451_out(x57) :|: TRUE
f472_out(x58) -> f480_out(x58) :|: TRUE
f480_in(x59) -> f472_in(x59) :|: TRUE
f446_out(x60) -> f435_out(.(x61, x60)) :|: TRUE
f435_in(x62) -> f447_in :|: TRUE
f435_in(.(x63, x64)) -> f446_in(x64) :|: TRUE
f447_out -> f435_out(x65) :|: TRUE
f40_in(x66) -> f4_in(x66) :|: TRUE
f4_out(x67) -> f40_out(x67) :|: TRUE
f427_out(x68) -> f53_out(x68) :|: TRUE
f53_in(x69) -> f428_in :|: TRUE
f53_in(x70) -> f427_in(x70) :|: TRUE
f428_out -> f53_out(x71) :|: TRUE
Start term: f4_in(T2)

----------------------------------------

(155) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f431_in(T40) -> f433_in(T40) :|: TRUE
f433_out(x) -> f431_out(x) :|: TRUE
f32_in(T17) -> f39_in(T17) :|: TRUE
f39_out(x2) -> f40_in(x2) :|: TRUE
f472_in(T94) -> f474_in(T94) :|: TRUE
f474_out(x3) -> f472_out(x3) :|: TRUE
f475_in(.(T114, T115)) -> f477_in :|: TRUE
f477_out -> f475_out(.(x6, x7)) :|: TRUE
f5_in(x9) -> f7_in(x9) :|: TRUE
f427_in(x11) -> f431_in(x11) :|: TRUE
f432_out(x12) -> f427_out(x13) :|: TRUE
f431_out(x14) -> f432_in(x15) :|: TRUE
f433_in(x16) -> f434_in(x16) :|: TRUE
f433_in(x17) -> f435_in(x17) :|: TRUE
f434_out(x18) -> f433_out(x18) :|: TRUE
f435_out(x19) -> f433_out(x19) :|: TRUE
f434_in(.(T61, T62)) -> f439_in :|: TRUE
f439_out -> f434_out(.(x21, x22)) :|: TRUE
f432_in(T47) -> f451_in(T47) :|: TRUE
f451_out(x24) -> f432_out(x24) :|: TRUE
f452_in(x26) -> f470_in(x26) :|: TRUE
f470_out(x28) -> f452_out(x28) :|: TRUE
f477_in -> f477_out :|: TRUE
f431_out(T71) -> f446_out(T71) :|: TRUE
f446_in(x29) -> f431_in(x29) :|: TRUE
f500_out -> f453_out(T135) :|: TRUE
f453_in(x32) -> f500_in :|: TRUE
f39_in(x33) -> f53_in(x33) :|: TRUE
f53_out(x34) -> f39_out(x34) :|: TRUE
f432_out(x35) -> f473_out(x35) :|: TRUE
f473_in(x36) -> f432_in(x36) :|: TRUE
f476_in(.(T123, T124)) -> f480_in(T124) :|: TRUE
f480_out(x39) -> f476_out(.(x40, x39)) :|: TRUE
f4_in(x42) -> f5_in(x42) :|: TRUE
f439_in -> f439_out :|: TRUE
f472_out(x43) -> f473_in(x43) :|: TRUE
f470_in(x44) -> f472_in(x44) :|: TRUE
f473_out(x45) -> f470_out(x45) :|: TRUE
f7_in(x47) -> f32_in(x47) :|: TRUE
f474_in(x50) -> f475_in(x50) :|: TRUE
f475_out(x51) -> f474_out(x51) :|: TRUE
f476_out(x52) -> f474_out(x52) :|: TRUE
f474_in(x53) -> f476_in(x53) :|: TRUE
f500_in -> f500_out :|: TRUE
f451_in(x54) -> f453_in(x54) :|: TRUE
f453_out(x55) -> f451_out(x55) :|: TRUE
f451_in(x56) -> f452_in(x56) :|: TRUE
f452_out(x57) -> f451_out(x57) :|: TRUE
f472_out(x58) -> f480_out(x58) :|: TRUE
f480_in(x59) -> f472_in(x59) :|: TRUE
f446_out(x60) -> f435_out(.(x61, x60)) :|: TRUE
f435_in(.(x63, x64)) -> f446_in(x64) :|: TRUE
f40_in(x66) -> f4_in(x66) :|: TRUE
f427_out(x68) -> f53_out(x68) :|: TRUE
f53_in(x70) -> f427_in(x70) :|: TRUE


----------------------------------------

(156)
Obligation:
Rules:
f431_in(T40) -> f433_in(T40) :|: TRUE
f433_out(x) -> f431_out(x) :|: TRUE
f32_in(T17) -> f39_in(T17) :|: TRUE
f39_out(x2) -> f40_in(x2) :|: TRUE
f472_in(T94) -> f474_in(T94) :|: TRUE
f474_out(x3) -> f472_out(x3) :|: TRUE
f475_in(.(T114, T115)) -> f477_in :|: TRUE
f477_out -> f475_out(.(x6, x7)) :|: TRUE
f5_in(x9) -> f7_in(x9) :|: TRUE
f427_in(x11) -> f431_in(x11) :|: TRUE
f432_out(x12) -> f427_out(x13) :|: TRUE
f431_out(x14) -> f432_in(x15) :|: TRUE
f433_in(x16) -> f434_in(x16) :|: TRUE
f433_in(x17) -> f435_in(x17) :|: TRUE
f434_out(x18) -> f433_out(x18) :|: TRUE
f435_out(x19) -> f433_out(x19) :|: TRUE
f434_in(.(T61, T62)) -> f439_in :|: TRUE
f439_out -> f434_out(.(x21, x22)) :|: TRUE
f432_in(T47) -> f451_in(T47) :|: TRUE
f451_out(x24) -> f432_out(x24) :|: TRUE
f452_in(x26) -> f470_in(x26) :|: TRUE
f470_out(x28) -> f452_out(x28) :|: TRUE
f477_in -> f477_out :|: TRUE
f431_out(T71) -> f446_out(T71) :|: TRUE
f446_in(x29) -> f431_in(x29) :|: TRUE
f500_out -> f453_out(T135) :|: TRUE
f453_in(x32) -> f500_in :|: TRUE
f39_in(x33) -> f53_in(x33) :|: TRUE
f53_out(x34) -> f39_out(x34) :|: TRUE
f432_out(x35) -> f473_out(x35) :|: TRUE
f473_in(x36) -> f432_in(x36) :|: TRUE
f476_in(.(T123, T124)) -> f480_in(T124) :|: TRUE
f480_out(x39) -> f476_out(.(x40, x39)) :|: TRUE
f4_in(x42) -> f5_in(x42) :|: TRUE
f439_in -> f439_out :|: TRUE
f472_out(x43) -> f473_in(x43) :|: TRUE
f470_in(x44) -> f472_in(x44) :|: TRUE
f473_out(x45) -> f470_out(x45) :|: TRUE
f7_in(x47) -> f32_in(x47) :|: TRUE
f474_in(x50) -> f475_in(x50) :|: TRUE
f475_out(x51) -> f474_out(x51) :|: TRUE
f476_out(x52) -> f474_out(x52) :|: TRUE
f474_in(x53) -> f476_in(x53) :|: TRUE
f500_in -> f500_out :|: TRUE
f451_in(x54) -> f453_in(x54) :|: TRUE
f453_out(x55) -> f451_out(x55) :|: TRUE
f451_in(x56) -> f452_in(x56) :|: TRUE
f452_out(x57) -> f451_out(x57) :|: TRUE
f472_out(x58) -> f480_out(x58) :|: TRUE
f480_in(x59) -> f472_in(x59) :|: TRUE
f446_out(x60) -> f435_out(.(x61, x60)) :|: TRUE
f435_in(.(x63, x64)) -> f446_in(x64) :|: TRUE
f40_in(x66) -> f4_in(x66) :|: TRUE
f427_out(x68) -> f53_out(x68) :|: TRUE
f53_in(x70) -> f427_in(x70) :|: TRUE

----------------------------------------

(157) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(158)
Obligation:
Rules:
f472_in(.(T123:0, T124:0)) -> f472_in(T124:0) :|: TRUE
f433_out(x:0) -> f451_in(x15:0) :|: TRUE
f451_in(x56:0) -> f472_in(x56:0) :|: TRUE
f433_out(x) -> f433_out(.(x1, x)) :|: TRUE
f472_in(.(T114:0, T115:0)) -> f474_out(.(x6:0, x7:0)) :|: TRUE
f474_out(x3:0) -> f474_out(.(x40:0, x3:0)) :|: TRUE
f451_out(x24:0) -> f431_in(x13:0) :|: TRUE
f431_in(.(T61:0, T62:0)) -> f433_out(.(x21:0, x22:0)) :|: TRUE
f431_in(.(x63:0, x64:0)) -> f431_in(x64:0) :|: TRUE
f451_out(x2) -> f451_out(x2) :|: TRUE
f474_out(x3) -> f451_in(x3) :|: TRUE
f451_in(x54:0) -> f451_out(T135:0) :|: TRUE

----------------------------------------

(159) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(160)
Obligation:
Rules:
f472_in(.(T123:0, T124:0)) -> f472_in(T124:0) :|: TRUE
f433_out(x:0) -> f451_in(x15:0) :|: TRUE
f451_in(x56:0) -> f472_in(x56:0) :|: TRUE
f433_out(x) -> f433_out(.(x1, x)) :|: TRUE
f472_in(.(T114:0, T115:0)) -> f474_out(.(x6:0, x7:0)) :|: TRUE
f474_out(x3:0) -> f474_out(.(x40:0, x3:0)) :|: TRUE
f451_out(x24:0) -> f431_in(x13:0) :|: TRUE
f431_in(.(T61:0, T62:0)) -> f433_out(.(x21:0, x22:0)) :|: TRUE
f431_in(.(x63:0, x64:0)) -> f431_in(x64:0) :|: TRUE
f451_out(x2) -> f451_out(x2) :|: TRUE
f474_out(x3) -> f451_in(x3) :|: TRUE
f451_in(x54:0) -> f451_out(T135:0) :|: TRUE

----------------------------------------

(161) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f472_in(.(T123:0, T124:0)) -> f472_in(T124:0) :|: TRUE
(2) f433_out(x:0) -> f451_in(x15:0) :|: TRUE
(3) f451_in(x56:0) -> f472_in(x56:0) :|: TRUE
(4) f433_out(x) -> f433_out(.(x1, x)) :|: TRUE
(5) f472_in(.(T114:0, T115:0)) -> f474_out(.(x6:0, x7:0)) :|: TRUE
(6) f474_out(x3:0) -> f474_out(.(x40:0, x3:0)) :|: TRUE
(7) f451_out(x24:0) -> f431_in(x13:0) :|: TRUE
(8) f431_in(.(T61:0, T62:0)) -> f433_out(.(x21:0, x22:0)) :|: TRUE
(9) f431_in(.(x63:0, x64:0)) -> f431_in(x64:0) :|: TRUE
(10) f451_out(x2) -> f451_out(x2) :|: TRUE
(11) f474_out(x3) -> f451_in(x3) :|: TRUE
(12) f451_in(x54:0) -> f451_out(T135:0) :|: TRUE

Arcs:
(1) -> (1), (5)
(2) -> (3), (12)
(3) -> (1), (5)
(4) -> (2), (4)
(5) -> (6), (11)
(6) -> (6), (11)
(7) -> (8), (9)
(8) -> (2), (4)
(9) -> (8), (9)
(10) -> (7), (10)
(11) -> (3), (12)
(12) -> (7), (10)

This digraph is fully evaluated!
----------------------------------------

(162)
Obligation:

Termination digraph:
Nodes:
(1) f472_in(.(T123:0, T124:0)) -> f472_in(T124:0) :|: TRUE
(2) f451_in(x56:0) -> f472_in(x56:0) :|: TRUE
(3) f433_out(x:0) -> f451_in(x15:0) :|: TRUE
(4) f433_out(x) -> f433_out(.(x1, x)) :|: TRUE
(5) f431_in(.(T61:0, T62:0)) -> f433_out(.(x21:0, x22:0)) :|: TRUE
(6) f431_in(.(x63:0, x64:0)) -> f431_in(x64:0) :|: TRUE
(7) f451_out(x24:0) -> f431_in(x13:0) :|: TRUE
(8) f451_out(x2) -> f451_out(x2) :|: TRUE
(9) f451_in(x54:0) -> f451_out(T135:0) :|: TRUE
(10) f474_out(x3) -> f451_in(x3) :|: TRUE
(11) f474_out(x3:0) -> f474_out(.(x40:0, x3:0)) :|: TRUE
(12) f472_in(.(T114:0, T115:0)) -> f474_out(.(x6:0, x7:0)) :|: TRUE

Arcs:
(1) -> (1), (12)
(2) -> (1), (12)
(3) -> (2), (9)
(4) -> (3), (4)
(5) -> (3), (4)
(6) -> (5), (6)
(7) -> (5), (6)
(8) -> (7), (8)
(9) -> (7), (8)
(10) -> (2), (9)
(11) -> (10), (11)
(12) -> (10), (11)

This digraph is fully evaluated!

----------------------------------------

(163) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   .(x1, x2) -> .(x2)

----------------------------------------

(164)
Obligation:
Rules:
f472_in(.(T124:0)) -> f472_in(T124:0) :|: TRUE
f451_in(x56:0) -> f472_in(x56:0) :|: TRUE
f433_out(x:0) -> f451_in(x15:0) :|: TRUE
f433_out(x) -> f433_out(.(x)) :|: TRUE
f431_in(.(T62:0)) -> f433_out(.(x22:0)) :|: TRUE
f431_in(.(x64:0)) -> f431_in(x64:0) :|: TRUE
f451_out(x24:0) -> f431_in(x13:0) :|: TRUE
f451_out(x2) -> f451_out(x2) :|: TRUE
f451_in(x54:0) -> f451_out(T135:0) :|: TRUE
f474_out(x3) -> f451_in(x3) :|: TRUE
f474_out(x3:0) -> f474_out(.(x3:0)) :|: TRUE
f472_in(.(T115:0)) -> f474_out(.(x7:0)) :|: TRUE

----------------------------------------

(165) IRSwTToIntTRSProof (SOUND)
Applied path-length measure to transform intTRS with terms to intTRS.
----------------------------------------

(166)
Obligation:
Rules:
f472_in(.(x)) -> f472_in(x) :|: TRUE
f451_in(x1) -> f472_in(x1) :|: TRUE
f433_out(x2) -> f451_in(x3) :|: TRUE
f433_out(x4) -> f433_out(.(x4)) :|: TRUE
f431_in(.(x5)) -> f433_out(.(x6)) :|: TRUE
f431_in(.(x7)) -> f431_in(x7) :|: TRUE
f451_out(x8) -> f431_in(x9) :|: TRUE
f451_out(x10) -> f451_out(x10) :|: TRUE
f451_in(x11) -> f451_out(x12) :|: TRUE
f474_out(x13) -> f451_in(x13) :|: TRUE
f474_out(x14) -> f474_out(.(x14)) :|: TRUE
f472_in(.(x15)) -> f474_out(.(x16)) :|: TRUE
