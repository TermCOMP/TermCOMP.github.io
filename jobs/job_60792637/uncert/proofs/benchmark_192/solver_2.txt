YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/vzxnY.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

conf(g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) PiDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) PiDP
        (24) PiDPToQDPProof [SOUND, 0 ms]
        (25) QDP
        (26) MRRProof [EQUIVALENT, 17 ms]
        (27) QDP
        (28) PisEmptyProof [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
Clauses:

conf(X) :- ','(del2(X, Z), ','(del(U, Y, Z), conf(Y))).
del2(X, Y) :- ','(del(U, X, Z), del(V, Z, Y)).
del(X, cons(X, T), T).
del(X, cons(H, T), cons(H, T1)) :- del(X, T, T1).
s2l(s(X), cons(Y, Xs)) :- s2l(X, Xs).
s2l(0, nil).
goal(X) :- ','(s2l(X, XS), conf(XS)).


Query: conf(g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

conf_in_1: (b)

del2_in_2: (b,f)

del_in_3: (f,b,f) (f,f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   conf_in_g(X) -> U1_g(X, del2_in_ga(X, Z))
   del2_in_ga(X, Y) -> U4_ga(X, Y, del_in_aga(U, X, Z))
   del_in_aga(X, cons(X, T), T) -> del_out_aga(X, cons(X, T), T)
   del_in_aga(X, cons(H, T), cons(H, T1)) -> U6_aga(X, H, T, T1, del_in_aga(X, T, T1))
   U6_aga(X, H, T, T1, del_out_aga(X, T, T1)) -> del_out_aga(X, cons(H, T), cons(H, T1))
   U4_ga(X, Y, del_out_aga(U, X, Z)) -> U5_ga(X, Y, del_in_aga(V, Z, Y))
   U5_ga(X, Y, del_out_aga(V, Z, Y)) -> del2_out_ga(X, Y)
   U1_g(X, del2_out_ga(X, Z)) -> U2_g(X, del_in_aag(U, Y, Z))
   del_in_aag(X, cons(X, T), T) -> del_out_aag(X, cons(X, T), T)
   del_in_aag(X, cons(H, T), cons(H, T1)) -> U6_aag(X, H, T, T1, del_in_aag(X, T, T1))
   U6_aag(X, H, T, T1, del_out_aag(X, T, T1)) -> del_out_aag(X, cons(H, T), cons(H, T1))
   U2_g(X, del_out_aag(U, Y, Z)) -> U3_g(X, conf_in_g(Y))
   U3_g(X, conf_out_g(Y)) -> conf_out_g(X)

The argument filtering Pi contains the following mapping:
conf_in_g(x1)  =  conf_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

del2_in_ga(x1, x2)  =  del2_in_ga(x1)

U4_ga(x1, x2, x3)  =  U4_ga(x3)

del_in_aga(x1, x2, x3)  =  del_in_aga(x2)

cons(x1, x2)  =  cons(x2)

del_out_aga(x1, x2, x3)  =  del_out_aga(x3)

U6_aga(x1, x2, x3, x4, x5)  =  U6_aga(x5)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

del2_out_ga(x1, x2)  =  del2_out_ga(x2)

U2_g(x1, x2)  =  U2_g(x2)

del_in_aag(x1, x2, x3)  =  del_in_aag(x3)

del_out_aag(x1, x2, x3)  =  del_out_aag(x2)

U6_aag(x1, x2, x3, x4, x5)  =  U6_aag(x5)

U3_g(x1, x2)  =  U3_g(x2)

conf_out_g(x1)  =  conf_out_g





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   conf_in_g(X) -> U1_g(X, del2_in_ga(X, Z))
   del2_in_ga(X, Y) -> U4_ga(X, Y, del_in_aga(U, X, Z))
   del_in_aga(X, cons(X, T), T) -> del_out_aga(X, cons(X, T), T)
   del_in_aga(X, cons(H, T), cons(H, T1)) -> U6_aga(X, H, T, T1, del_in_aga(X, T, T1))
   U6_aga(X, H, T, T1, del_out_aga(X, T, T1)) -> del_out_aga(X, cons(H, T), cons(H, T1))
   U4_ga(X, Y, del_out_aga(U, X, Z)) -> U5_ga(X, Y, del_in_aga(V, Z, Y))
   U5_ga(X, Y, del_out_aga(V, Z, Y)) -> del2_out_ga(X, Y)
   U1_g(X, del2_out_ga(X, Z)) -> U2_g(X, del_in_aag(U, Y, Z))
   del_in_aag(X, cons(X, T), T) -> del_out_aag(X, cons(X, T), T)
   del_in_aag(X, cons(H, T), cons(H, T1)) -> U6_aag(X, H, T, T1, del_in_aag(X, T, T1))
   U6_aag(X, H, T, T1, del_out_aag(X, T, T1)) -> del_out_aag(X, cons(H, T), cons(H, T1))
   U2_g(X, del_out_aag(U, Y, Z)) -> U3_g(X, conf_in_g(Y))
   U3_g(X, conf_out_g(Y)) -> conf_out_g(X)

The argument filtering Pi contains the following mapping:
conf_in_g(x1)  =  conf_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

del2_in_ga(x1, x2)  =  del2_in_ga(x1)

U4_ga(x1, x2, x3)  =  U4_ga(x3)

del_in_aga(x1, x2, x3)  =  del_in_aga(x2)

cons(x1, x2)  =  cons(x2)

del_out_aga(x1, x2, x3)  =  del_out_aga(x3)

U6_aga(x1, x2, x3, x4, x5)  =  U6_aga(x5)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

del2_out_ga(x1, x2)  =  del2_out_ga(x2)

U2_g(x1, x2)  =  U2_g(x2)

del_in_aag(x1, x2, x3)  =  del_in_aag(x3)

del_out_aag(x1, x2, x3)  =  del_out_aag(x2)

U6_aag(x1, x2, x3, x4, x5)  =  U6_aag(x5)

U3_g(x1, x2)  =  U3_g(x2)

conf_out_g(x1)  =  conf_out_g



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   CONF_IN_G(X) -> U1_G(X, del2_in_ga(X, Z))
   CONF_IN_G(X) -> DEL2_IN_GA(X, Z)
   DEL2_IN_GA(X, Y) -> U4_GA(X, Y, del_in_aga(U, X, Z))
   DEL2_IN_GA(X, Y) -> DEL_IN_AGA(U, X, Z)
   DEL_IN_AGA(X, cons(H, T), cons(H, T1)) -> U6_AGA(X, H, T, T1, del_in_aga(X, T, T1))
   DEL_IN_AGA(X, cons(H, T), cons(H, T1)) -> DEL_IN_AGA(X, T, T1)
   U4_GA(X, Y, del_out_aga(U, X, Z)) -> U5_GA(X, Y, del_in_aga(V, Z, Y))
   U4_GA(X, Y, del_out_aga(U, X, Z)) -> DEL_IN_AGA(V, Z, Y)
   U1_G(X, del2_out_ga(X, Z)) -> U2_G(X, del_in_aag(U, Y, Z))
   U1_G(X, del2_out_ga(X, Z)) -> DEL_IN_AAG(U, Y, Z)
   DEL_IN_AAG(X, cons(H, T), cons(H, T1)) -> U6_AAG(X, H, T, T1, del_in_aag(X, T, T1))
   DEL_IN_AAG(X, cons(H, T), cons(H, T1)) -> DEL_IN_AAG(X, T, T1)
   U2_G(X, del_out_aag(U, Y, Z)) -> U3_G(X, conf_in_g(Y))
   U2_G(X, del_out_aag(U, Y, Z)) -> CONF_IN_G(Y)

The TRS R consists of the following rules:

   conf_in_g(X) -> U1_g(X, del2_in_ga(X, Z))
   del2_in_ga(X, Y) -> U4_ga(X, Y, del_in_aga(U, X, Z))
   del_in_aga(X, cons(X, T), T) -> del_out_aga(X, cons(X, T), T)
   del_in_aga(X, cons(H, T), cons(H, T1)) -> U6_aga(X, H, T, T1, del_in_aga(X, T, T1))
   U6_aga(X, H, T, T1, del_out_aga(X, T, T1)) -> del_out_aga(X, cons(H, T), cons(H, T1))
   U4_ga(X, Y, del_out_aga(U, X, Z)) -> U5_ga(X, Y, del_in_aga(V, Z, Y))
   U5_ga(X, Y, del_out_aga(V, Z, Y)) -> del2_out_ga(X, Y)
   U1_g(X, del2_out_ga(X, Z)) -> U2_g(X, del_in_aag(U, Y, Z))
   del_in_aag(X, cons(X, T), T) -> del_out_aag(X, cons(X, T), T)
   del_in_aag(X, cons(H, T), cons(H, T1)) -> U6_aag(X, H, T, T1, del_in_aag(X, T, T1))
   U6_aag(X, H, T, T1, del_out_aag(X, T, T1)) -> del_out_aag(X, cons(H, T), cons(H, T1))
   U2_g(X, del_out_aag(U, Y, Z)) -> U3_g(X, conf_in_g(Y))
   U3_g(X, conf_out_g(Y)) -> conf_out_g(X)

The argument filtering Pi contains the following mapping:
conf_in_g(x1)  =  conf_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

del2_in_ga(x1, x2)  =  del2_in_ga(x1)

U4_ga(x1, x2, x3)  =  U4_ga(x3)

del_in_aga(x1, x2, x3)  =  del_in_aga(x2)

cons(x1, x2)  =  cons(x2)

del_out_aga(x1, x2, x3)  =  del_out_aga(x3)

U6_aga(x1, x2, x3, x4, x5)  =  U6_aga(x5)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

del2_out_ga(x1, x2)  =  del2_out_ga(x2)

U2_g(x1, x2)  =  U2_g(x2)

del_in_aag(x1, x2, x3)  =  del_in_aag(x3)

del_out_aag(x1, x2, x3)  =  del_out_aag(x2)

U6_aag(x1, x2, x3, x4, x5)  =  U6_aag(x5)

U3_g(x1, x2)  =  U3_g(x2)

conf_out_g(x1)  =  conf_out_g

CONF_IN_G(x1)  =  CONF_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x2)

DEL2_IN_GA(x1, x2)  =  DEL2_IN_GA(x1)

U4_GA(x1, x2, x3)  =  U4_GA(x3)

DEL_IN_AGA(x1, x2, x3)  =  DEL_IN_AGA(x2)

U6_AGA(x1, x2, x3, x4, x5)  =  U6_AGA(x5)

U5_GA(x1, x2, x3)  =  U5_GA(x3)

U2_G(x1, x2)  =  U2_G(x2)

DEL_IN_AAG(x1, x2, x3)  =  DEL_IN_AAG(x3)

U6_AAG(x1, x2, x3, x4, x5)  =  U6_AAG(x5)

U3_G(x1, x2)  =  U3_G(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   CONF_IN_G(X) -> U1_G(X, del2_in_ga(X, Z))
   CONF_IN_G(X) -> DEL2_IN_GA(X, Z)
   DEL2_IN_GA(X, Y) -> U4_GA(X, Y, del_in_aga(U, X, Z))
   DEL2_IN_GA(X, Y) -> DEL_IN_AGA(U, X, Z)
   DEL_IN_AGA(X, cons(H, T), cons(H, T1)) -> U6_AGA(X, H, T, T1, del_in_aga(X, T, T1))
   DEL_IN_AGA(X, cons(H, T), cons(H, T1)) -> DEL_IN_AGA(X, T, T1)
   U4_GA(X, Y, del_out_aga(U, X, Z)) -> U5_GA(X, Y, del_in_aga(V, Z, Y))
   U4_GA(X, Y, del_out_aga(U, X, Z)) -> DEL_IN_AGA(V, Z, Y)
   U1_G(X, del2_out_ga(X, Z)) -> U2_G(X, del_in_aag(U, Y, Z))
   U1_G(X, del2_out_ga(X, Z)) -> DEL_IN_AAG(U, Y, Z)
   DEL_IN_AAG(X, cons(H, T), cons(H, T1)) -> U6_AAG(X, H, T, T1, del_in_aag(X, T, T1))
   DEL_IN_AAG(X, cons(H, T), cons(H, T1)) -> DEL_IN_AAG(X, T, T1)
   U2_G(X, del_out_aag(U, Y, Z)) -> U3_G(X, conf_in_g(Y))
   U2_G(X, del_out_aag(U, Y, Z)) -> CONF_IN_G(Y)

The TRS R consists of the following rules:

   conf_in_g(X) -> U1_g(X, del2_in_ga(X, Z))
   del2_in_ga(X, Y) -> U4_ga(X, Y, del_in_aga(U, X, Z))
   del_in_aga(X, cons(X, T), T) -> del_out_aga(X, cons(X, T), T)
   del_in_aga(X, cons(H, T), cons(H, T1)) -> U6_aga(X, H, T, T1, del_in_aga(X, T, T1))
   U6_aga(X, H, T, T1, del_out_aga(X, T, T1)) -> del_out_aga(X, cons(H, T), cons(H, T1))
   U4_ga(X, Y, del_out_aga(U, X, Z)) -> U5_ga(X, Y, del_in_aga(V, Z, Y))
   U5_ga(X, Y, del_out_aga(V, Z, Y)) -> del2_out_ga(X, Y)
   U1_g(X, del2_out_ga(X, Z)) -> U2_g(X, del_in_aag(U, Y, Z))
   del_in_aag(X, cons(X, T), T) -> del_out_aag(X, cons(X, T), T)
   del_in_aag(X, cons(H, T), cons(H, T1)) -> U6_aag(X, H, T, T1, del_in_aag(X, T, T1))
   U6_aag(X, H, T, T1, del_out_aag(X, T, T1)) -> del_out_aag(X, cons(H, T), cons(H, T1))
   U2_g(X, del_out_aag(U, Y, Z)) -> U3_g(X, conf_in_g(Y))
   U3_g(X, conf_out_g(Y)) -> conf_out_g(X)

The argument filtering Pi contains the following mapping:
conf_in_g(x1)  =  conf_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

del2_in_ga(x1, x2)  =  del2_in_ga(x1)

U4_ga(x1, x2, x3)  =  U4_ga(x3)

del_in_aga(x1, x2, x3)  =  del_in_aga(x2)

cons(x1, x2)  =  cons(x2)

del_out_aga(x1, x2, x3)  =  del_out_aga(x3)

U6_aga(x1, x2, x3, x4, x5)  =  U6_aga(x5)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

del2_out_ga(x1, x2)  =  del2_out_ga(x2)

U2_g(x1, x2)  =  U2_g(x2)

del_in_aag(x1, x2, x3)  =  del_in_aag(x3)

del_out_aag(x1, x2, x3)  =  del_out_aag(x2)

U6_aag(x1, x2, x3, x4, x5)  =  U6_aag(x5)

U3_g(x1, x2)  =  U3_g(x2)

conf_out_g(x1)  =  conf_out_g

CONF_IN_G(x1)  =  CONF_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x2)

DEL2_IN_GA(x1, x2)  =  DEL2_IN_GA(x1)

U4_GA(x1, x2, x3)  =  U4_GA(x3)

DEL_IN_AGA(x1, x2, x3)  =  DEL_IN_AGA(x2)

U6_AGA(x1, x2, x3, x4, x5)  =  U6_AGA(x5)

U5_GA(x1, x2, x3)  =  U5_GA(x3)

U2_G(x1, x2)  =  U2_G(x2)

DEL_IN_AAG(x1, x2, x3)  =  DEL_IN_AAG(x3)

U6_AAG(x1, x2, x3, x4, x5)  =  U6_AAG(x5)

U3_G(x1, x2)  =  U3_G(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 9 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DEL_IN_AAG(X, cons(H, T), cons(H, T1)) -> DEL_IN_AAG(X, T, T1)

The TRS R consists of the following rules:

   conf_in_g(X) -> U1_g(X, del2_in_ga(X, Z))
   del2_in_ga(X, Y) -> U4_ga(X, Y, del_in_aga(U, X, Z))
   del_in_aga(X, cons(X, T), T) -> del_out_aga(X, cons(X, T), T)
   del_in_aga(X, cons(H, T), cons(H, T1)) -> U6_aga(X, H, T, T1, del_in_aga(X, T, T1))
   U6_aga(X, H, T, T1, del_out_aga(X, T, T1)) -> del_out_aga(X, cons(H, T), cons(H, T1))
   U4_ga(X, Y, del_out_aga(U, X, Z)) -> U5_ga(X, Y, del_in_aga(V, Z, Y))
   U5_ga(X, Y, del_out_aga(V, Z, Y)) -> del2_out_ga(X, Y)
   U1_g(X, del2_out_ga(X, Z)) -> U2_g(X, del_in_aag(U, Y, Z))
   del_in_aag(X, cons(X, T), T) -> del_out_aag(X, cons(X, T), T)
   del_in_aag(X, cons(H, T), cons(H, T1)) -> U6_aag(X, H, T, T1, del_in_aag(X, T, T1))
   U6_aag(X, H, T, T1, del_out_aag(X, T, T1)) -> del_out_aag(X, cons(H, T), cons(H, T1))
   U2_g(X, del_out_aag(U, Y, Z)) -> U3_g(X, conf_in_g(Y))
   U3_g(X, conf_out_g(Y)) -> conf_out_g(X)

The argument filtering Pi contains the following mapping:
conf_in_g(x1)  =  conf_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

del2_in_ga(x1, x2)  =  del2_in_ga(x1)

U4_ga(x1, x2, x3)  =  U4_ga(x3)

del_in_aga(x1, x2, x3)  =  del_in_aga(x2)

cons(x1, x2)  =  cons(x2)

del_out_aga(x1, x2, x3)  =  del_out_aga(x3)

U6_aga(x1, x2, x3, x4, x5)  =  U6_aga(x5)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

del2_out_ga(x1, x2)  =  del2_out_ga(x2)

U2_g(x1, x2)  =  U2_g(x2)

del_in_aag(x1, x2, x3)  =  del_in_aag(x3)

del_out_aag(x1, x2, x3)  =  del_out_aag(x2)

U6_aag(x1, x2, x3, x4, x5)  =  U6_aag(x5)

U3_g(x1, x2)  =  U3_g(x2)

conf_out_g(x1)  =  conf_out_g

DEL_IN_AAG(x1, x2, x3)  =  DEL_IN_AAG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DEL_IN_AAG(X, cons(H, T), cons(H, T1)) -> DEL_IN_AAG(X, T, T1)

R is empty.
The argument filtering Pi contains the following mapping:
cons(x1, x2)  =  cons(x2)

DEL_IN_AAG(x1, x2, x3)  =  DEL_IN_AAG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DEL_IN_AAG(cons(T1)) -> DEL_IN_AAG(T1)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DEL_IN_AAG(cons(T1)) -> DEL_IN_AAG(T1)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DEL_IN_AGA(X, cons(H, T), cons(H, T1)) -> DEL_IN_AGA(X, T, T1)

The TRS R consists of the following rules:

   conf_in_g(X) -> U1_g(X, del2_in_ga(X, Z))
   del2_in_ga(X, Y) -> U4_ga(X, Y, del_in_aga(U, X, Z))
   del_in_aga(X, cons(X, T), T) -> del_out_aga(X, cons(X, T), T)
   del_in_aga(X, cons(H, T), cons(H, T1)) -> U6_aga(X, H, T, T1, del_in_aga(X, T, T1))
   U6_aga(X, H, T, T1, del_out_aga(X, T, T1)) -> del_out_aga(X, cons(H, T), cons(H, T1))
   U4_ga(X, Y, del_out_aga(U, X, Z)) -> U5_ga(X, Y, del_in_aga(V, Z, Y))
   U5_ga(X, Y, del_out_aga(V, Z, Y)) -> del2_out_ga(X, Y)
   U1_g(X, del2_out_ga(X, Z)) -> U2_g(X, del_in_aag(U, Y, Z))
   del_in_aag(X, cons(X, T), T) -> del_out_aag(X, cons(X, T), T)
   del_in_aag(X, cons(H, T), cons(H, T1)) -> U6_aag(X, H, T, T1, del_in_aag(X, T, T1))
   U6_aag(X, H, T, T1, del_out_aag(X, T, T1)) -> del_out_aag(X, cons(H, T), cons(H, T1))
   U2_g(X, del_out_aag(U, Y, Z)) -> U3_g(X, conf_in_g(Y))
   U3_g(X, conf_out_g(Y)) -> conf_out_g(X)

The argument filtering Pi contains the following mapping:
conf_in_g(x1)  =  conf_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

del2_in_ga(x1, x2)  =  del2_in_ga(x1)

U4_ga(x1, x2, x3)  =  U4_ga(x3)

del_in_aga(x1, x2, x3)  =  del_in_aga(x2)

cons(x1, x2)  =  cons(x2)

del_out_aga(x1, x2, x3)  =  del_out_aga(x3)

U6_aga(x1, x2, x3, x4, x5)  =  U6_aga(x5)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

del2_out_ga(x1, x2)  =  del2_out_ga(x2)

U2_g(x1, x2)  =  U2_g(x2)

del_in_aag(x1, x2, x3)  =  del_in_aag(x3)

del_out_aag(x1, x2, x3)  =  del_out_aag(x2)

U6_aag(x1, x2, x3, x4, x5)  =  U6_aag(x5)

U3_g(x1, x2)  =  U3_g(x2)

conf_out_g(x1)  =  conf_out_g

DEL_IN_AGA(x1, x2, x3)  =  DEL_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DEL_IN_AGA(X, cons(H, T), cons(H, T1)) -> DEL_IN_AGA(X, T, T1)

R is empty.
The argument filtering Pi contains the following mapping:
cons(x1, x2)  =  cons(x2)

DEL_IN_AGA(x1, x2, x3)  =  DEL_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DEL_IN_AGA(cons(T)) -> DEL_IN_AGA(T)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DEL_IN_AGA(cons(T)) -> DEL_IN_AGA(T)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_G(X, del2_out_ga(X, Z)) -> U2_G(X, del_in_aag(U, Y, Z))
   U2_G(X, del_out_aag(U, Y, Z)) -> CONF_IN_G(Y)
   CONF_IN_G(X) -> U1_G(X, del2_in_ga(X, Z))

The TRS R consists of the following rules:

   conf_in_g(X) -> U1_g(X, del2_in_ga(X, Z))
   del2_in_ga(X, Y) -> U4_ga(X, Y, del_in_aga(U, X, Z))
   del_in_aga(X, cons(X, T), T) -> del_out_aga(X, cons(X, T), T)
   del_in_aga(X, cons(H, T), cons(H, T1)) -> U6_aga(X, H, T, T1, del_in_aga(X, T, T1))
   U6_aga(X, H, T, T1, del_out_aga(X, T, T1)) -> del_out_aga(X, cons(H, T), cons(H, T1))
   U4_ga(X, Y, del_out_aga(U, X, Z)) -> U5_ga(X, Y, del_in_aga(V, Z, Y))
   U5_ga(X, Y, del_out_aga(V, Z, Y)) -> del2_out_ga(X, Y)
   U1_g(X, del2_out_ga(X, Z)) -> U2_g(X, del_in_aag(U, Y, Z))
   del_in_aag(X, cons(X, T), T) -> del_out_aag(X, cons(X, T), T)
   del_in_aag(X, cons(H, T), cons(H, T1)) -> U6_aag(X, H, T, T1, del_in_aag(X, T, T1))
   U6_aag(X, H, T, T1, del_out_aag(X, T, T1)) -> del_out_aag(X, cons(H, T), cons(H, T1))
   U2_g(X, del_out_aag(U, Y, Z)) -> U3_g(X, conf_in_g(Y))
   U3_g(X, conf_out_g(Y)) -> conf_out_g(X)

The argument filtering Pi contains the following mapping:
conf_in_g(x1)  =  conf_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

del2_in_ga(x1, x2)  =  del2_in_ga(x1)

U4_ga(x1, x2, x3)  =  U4_ga(x3)

del_in_aga(x1, x2, x3)  =  del_in_aga(x2)

cons(x1, x2)  =  cons(x2)

del_out_aga(x1, x2, x3)  =  del_out_aga(x3)

U6_aga(x1, x2, x3, x4, x5)  =  U6_aga(x5)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

del2_out_ga(x1, x2)  =  del2_out_ga(x2)

U2_g(x1, x2)  =  U2_g(x2)

del_in_aag(x1, x2, x3)  =  del_in_aag(x3)

del_out_aag(x1, x2, x3)  =  del_out_aag(x2)

U6_aag(x1, x2, x3, x4, x5)  =  U6_aag(x5)

U3_g(x1, x2)  =  U3_g(x2)

conf_out_g(x1)  =  conf_out_g

CONF_IN_G(x1)  =  CONF_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x2)

U2_G(x1, x2)  =  U2_G(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(23)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_G(X, del2_out_ga(X, Z)) -> U2_G(X, del_in_aag(U, Y, Z))
   U2_G(X, del_out_aag(U, Y, Z)) -> CONF_IN_G(Y)
   CONF_IN_G(X) -> U1_G(X, del2_in_ga(X, Z))

The TRS R consists of the following rules:

   del_in_aag(X, cons(X, T), T) -> del_out_aag(X, cons(X, T), T)
   del_in_aag(X, cons(H, T), cons(H, T1)) -> U6_aag(X, H, T, T1, del_in_aag(X, T, T1))
   del2_in_ga(X, Y) -> U4_ga(X, Y, del_in_aga(U, X, Z))
   U6_aag(X, H, T, T1, del_out_aag(X, T, T1)) -> del_out_aag(X, cons(H, T), cons(H, T1))
   U4_ga(X, Y, del_out_aga(U, X, Z)) -> U5_ga(X, Y, del_in_aga(V, Z, Y))
   del_in_aga(X, cons(X, T), T) -> del_out_aga(X, cons(X, T), T)
   del_in_aga(X, cons(H, T), cons(H, T1)) -> U6_aga(X, H, T, T1, del_in_aga(X, T, T1))
   U5_ga(X, Y, del_out_aga(V, Z, Y)) -> del2_out_ga(X, Y)
   U6_aga(X, H, T, T1, del_out_aga(X, T, T1)) -> del_out_aga(X, cons(H, T), cons(H, T1))

The argument filtering Pi contains the following mapping:
del2_in_ga(x1, x2)  =  del2_in_ga(x1)

U4_ga(x1, x2, x3)  =  U4_ga(x3)

del_in_aga(x1, x2, x3)  =  del_in_aga(x2)

cons(x1, x2)  =  cons(x2)

del_out_aga(x1, x2, x3)  =  del_out_aga(x3)

U6_aga(x1, x2, x3, x4, x5)  =  U6_aga(x5)

U5_ga(x1, x2, x3)  =  U5_ga(x3)

del2_out_ga(x1, x2)  =  del2_out_ga(x2)

del_in_aag(x1, x2, x3)  =  del_in_aag(x3)

del_out_aag(x1, x2, x3)  =  del_out_aag(x2)

U6_aag(x1, x2, x3, x4, x5)  =  U6_aag(x5)

CONF_IN_G(x1)  =  CONF_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x2)

U2_G(x1, x2)  =  U2_G(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(24) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_G(del2_out_ga(Z)) -> U2_G(del_in_aag(Z))
   U2_G(del_out_aag(Y)) -> CONF_IN_G(Y)
   CONF_IN_G(X) -> U1_G(del2_in_ga(X))

The TRS R consists of the following rules:

   del_in_aag(T) -> del_out_aag(cons(T))
   del_in_aag(cons(T1)) -> U6_aag(del_in_aag(T1))
   del2_in_ga(X) -> U4_ga(del_in_aga(X))
   U6_aag(del_out_aag(T)) -> del_out_aag(cons(T))
   U4_ga(del_out_aga(Z)) -> U5_ga(del_in_aga(Z))
   del_in_aga(cons(T)) -> del_out_aga(T)
   del_in_aga(cons(T)) -> U6_aga(del_in_aga(T))
   U5_ga(del_out_aga(Y)) -> del2_out_ga(Y)
   U6_aga(del_out_aga(T1)) -> del_out_aga(cons(T1))

The set Q consists of the following terms:

   del_in_aag(x0)
   del2_in_ga(x0)
   U6_aag(x0)
   U4_ga(x0)
   del_in_aga(x0)
   U5_ga(x0)
   U6_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U1_G(del2_out_ga(Z)) -> U2_G(del_in_aag(Z))
   U2_G(del_out_aag(Y)) -> CONF_IN_G(Y)
   CONF_IN_G(X) -> U1_G(del2_in_ga(X))

Strictly oriented rules of the TRS R:

   del_in_aag(T) -> del_out_aag(cons(T))
   del_in_aag(cons(T1)) -> U6_aag(del_in_aag(T1))
   del2_in_ga(X) -> U4_ga(del_in_aga(X))
   U6_aag(del_out_aag(T)) -> del_out_aag(cons(T))
   U4_ga(del_out_aga(Z)) -> U5_ga(del_in_aga(Z))
   del_in_aga(cons(T)) -> del_out_aga(T)
   del_in_aga(cons(T)) -> U6_aga(del_in_aga(T))
   U5_ga(del_out_aga(Y)) -> del2_out_ga(Y)
   U6_aga(del_out_aga(T1)) -> del_out_aga(cons(T1))

Used ordering: Knuth-Bendix order [KBO] with precedence:del2_in_ga_1 > U4_ga_1 > U1_G_1 > U2_G_1 > CONF_IN_G_1 > del_in_aag_1 > del_in_aga_1 > U6_aga_1 > del2_out_ga_1 > U5_ga_1 > del_out_aga_1 > U6_aag_1 > del_out_aag_1 > cons_1

and weight map:

   del_in_aag_1=3
   del_out_aag_1=1
   cons_1=2
   U6_aag_1=2
   del2_in_ga_1=4
   U4_ga_1=1
   del_in_aga_1=3
   del_out_aga_1=5
   U5_ga_1=3
   U6_aga_1=2
   del2_out_ga_1=7
   U1_G_1=1
   U2_G_1=5
   CONF_IN_G_1=6

The variable weight is 1

----------------------------------------

(27)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   del_in_aag(x0)
   del2_in_ga(x0)
   U6_aag(x0)
   U4_ga(x0)
   del_in_aga(x0)
   U5_ga(x0)
   U6_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(29)
YES
