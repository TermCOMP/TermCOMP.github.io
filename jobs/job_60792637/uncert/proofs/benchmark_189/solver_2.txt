YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Ka0gI.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

goal(g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Clauses:

tappend(nil, T, T).
tappend(node(nil, X, T2), T1, node(T1, X, T2)).
tappend(node(T1, X, nil), T2, node(T1, X, T2)).
tappend(node(T1, X, T2), T3, node(U, X, T2)) :- tappend(T1, T3, U).
tappend(node(T1, X, T2), T3, node(T1, X, U)) :- tappend(T2, T3, U).
s2t(s(X), node(T, Y, T)) :- s2t(X, T).
s2t(s(X), node(nil, Y, T)) :- s2t(X, T).
s2t(s(X), node(T, Y, nil)) :- s2t(X, T).
s2t(s(X), node(nil, Y, nil)).
s2t(0, nil).
goal(X) :- ','(s2t(X, T1), tappend(T1, T2, T3)).


Query: goal(g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

goal_in_1: (b)

s2t_in_2: (b,f)

tappend_in_3: (b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   goal_in_g(X) -> U6_g(X, s2t_in_ga(X, T1))
   s2t_in_ga(s(X), node(T, Y, T)) -> U3_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, T)) -> U4_ga(X, Y, T, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, nil)) -> U5_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, nil)) -> s2t_out_ga(s(X), node(nil, Y, nil))
   s2t_in_ga(0, nil) -> s2t_out_ga(0, nil)
   U5_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, nil))
   U4_ga(X, Y, T, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(nil, Y, T))
   U3_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, T))
   U6_g(X, s2t_out_ga(X, T1)) -> U7_g(X, tappend_in_gaa(T1, T2, T3))
   tappend_in_gaa(nil, T, T) -> tappend_out_gaa(nil, T, T)
   tappend_in_gaa(node(nil, X, T2), T1, node(T1, X, T2)) -> tappend_out_gaa(node(nil, X, T2), T1, node(T1, X, T2))
   tappend_in_gaa(node(T1, X, nil), T2, node(T1, X, T2)) -> tappend_out_gaa(node(T1, X, nil), T2, node(T1, X, T2))
   tappend_in_gaa(node(T1, X, T2), T3, node(U, X, T2)) -> U1_gaa(T1, X, T2, T3, U, tappend_in_gaa(T1, T3, U))
   tappend_in_gaa(node(T1, X, T2), T3, node(T1, X, U)) -> U2_gaa(T1, X, T2, T3, U, tappend_in_gaa(T2, T3, U))
   U2_gaa(T1, X, T2, T3, U, tappend_out_gaa(T2, T3, U)) -> tappend_out_gaa(node(T1, X, T2), T3, node(T1, X, U))
   U1_gaa(T1, X, T2, T3, U, tappend_out_gaa(T1, T3, U)) -> tappend_out_gaa(node(T1, X, T2), T3, node(U, X, T2))
   U7_g(X, tappend_out_gaa(T1, T2, T3)) -> goal_out_g(X)

The argument filtering Pi contains the following mapping:
goal_in_g(x1)  =  goal_in_g(x1)

U6_g(x1, x2)  =  U6_g(x2)

s2t_in_ga(x1, x2)  =  s2t_in_ga(x1)

s(x1)  =  s(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

s2t_out_ga(x1, x2)  =  s2t_out_ga(x2)

node(x1, x2, x3)  =  node(x1, x3)

0  =  0

U7_g(x1, x2)  =  U7_g(x2)

tappend_in_gaa(x1, x2, x3)  =  tappend_in_gaa(x1)

nil  =  nil

tappend_out_gaa(x1, x2, x3)  =  tappend_out_gaa

U1_gaa(x1, x2, x3, x4, x5, x6)  =  U1_gaa(x6)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x6)

goal_out_g(x1)  =  goal_out_g





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   goal_in_g(X) -> U6_g(X, s2t_in_ga(X, T1))
   s2t_in_ga(s(X), node(T, Y, T)) -> U3_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, T)) -> U4_ga(X, Y, T, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, nil)) -> U5_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, nil)) -> s2t_out_ga(s(X), node(nil, Y, nil))
   s2t_in_ga(0, nil) -> s2t_out_ga(0, nil)
   U5_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, nil))
   U4_ga(X, Y, T, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(nil, Y, T))
   U3_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, T))
   U6_g(X, s2t_out_ga(X, T1)) -> U7_g(X, tappend_in_gaa(T1, T2, T3))
   tappend_in_gaa(nil, T, T) -> tappend_out_gaa(nil, T, T)
   tappend_in_gaa(node(nil, X, T2), T1, node(T1, X, T2)) -> tappend_out_gaa(node(nil, X, T2), T1, node(T1, X, T2))
   tappend_in_gaa(node(T1, X, nil), T2, node(T1, X, T2)) -> tappend_out_gaa(node(T1, X, nil), T2, node(T1, X, T2))
   tappend_in_gaa(node(T1, X, T2), T3, node(U, X, T2)) -> U1_gaa(T1, X, T2, T3, U, tappend_in_gaa(T1, T3, U))
   tappend_in_gaa(node(T1, X, T2), T3, node(T1, X, U)) -> U2_gaa(T1, X, T2, T3, U, tappend_in_gaa(T2, T3, U))
   U2_gaa(T1, X, T2, T3, U, tappend_out_gaa(T2, T3, U)) -> tappend_out_gaa(node(T1, X, T2), T3, node(T1, X, U))
   U1_gaa(T1, X, T2, T3, U, tappend_out_gaa(T1, T3, U)) -> tappend_out_gaa(node(T1, X, T2), T3, node(U, X, T2))
   U7_g(X, tappend_out_gaa(T1, T2, T3)) -> goal_out_g(X)

The argument filtering Pi contains the following mapping:
goal_in_g(x1)  =  goal_in_g(x1)

U6_g(x1, x2)  =  U6_g(x2)

s2t_in_ga(x1, x2)  =  s2t_in_ga(x1)

s(x1)  =  s(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

s2t_out_ga(x1, x2)  =  s2t_out_ga(x2)

node(x1, x2, x3)  =  node(x1, x3)

0  =  0

U7_g(x1, x2)  =  U7_g(x2)

tappend_in_gaa(x1, x2, x3)  =  tappend_in_gaa(x1)

nil  =  nil

tappend_out_gaa(x1, x2, x3)  =  tappend_out_gaa

U1_gaa(x1, x2, x3, x4, x5, x6)  =  U1_gaa(x6)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x6)

goal_out_g(x1)  =  goal_out_g



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   GOAL_IN_G(X) -> U6_G(X, s2t_in_ga(X, T1))
   GOAL_IN_G(X) -> S2T_IN_GA(X, T1)
   S2T_IN_GA(s(X), node(T, Y, T)) -> U3_GA(X, T, Y, s2t_in_ga(X, T))
   S2T_IN_GA(s(X), node(T, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(nil, Y, T)) -> U4_GA(X, Y, T, s2t_in_ga(X, T))
   S2T_IN_GA(s(X), node(nil, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, nil)) -> U5_GA(X, T, Y, s2t_in_ga(X, T))
   S2T_IN_GA(s(X), node(T, Y, nil)) -> S2T_IN_GA(X, T)
   U6_G(X, s2t_out_ga(X, T1)) -> U7_G(X, tappend_in_gaa(T1, T2, T3))
   U6_G(X, s2t_out_ga(X, T1)) -> TAPPEND_IN_GAA(T1, T2, T3)
   TAPPEND_IN_GAA(node(T1, X, T2), T3, node(U, X, T2)) -> U1_GAA(T1, X, T2, T3, U, tappend_in_gaa(T1, T3, U))
   TAPPEND_IN_GAA(node(T1, X, T2), T3, node(U, X, T2)) -> TAPPEND_IN_GAA(T1, T3, U)
   TAPPEND_IN_GAA(node(T1, X, T2), T3, node(T1, X, U)) -> U2_GAA(T1, X, T2, T3, U, tappend_in_gaa(T2, T3, U))
   TAPPEND_IN_GAA(node(T1, X, T2), T3, node(T1, X, U)) -> TAPPEND_IN_GAA(T2, T3, U)

The TRS R consists of the following rules:

   goal_in_g(X) -> U6_g(X, s2t_in_ga(X, T1))
   s2t_in_ga(s(X), node(T, Y, T)) -> U3_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, T)) -> U4_ga(X, Y, T, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, nil)) -> U5_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, nil)) -> s2t_out_ga(s(X), node(nil, Y, nil))
   s2t_in_ga(0, nil) -> s2t_out_ga(0, nil)
   U5_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, nil))
   U4_ga(X, Y, T, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(nil, Y, T))
   U3_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, T))
   U6_g(X, s2t_out_ga(X, T1)) -> U7_g(X, tappend_in_gaa(T1, T2, T3))
   tappend_in_gaa(nil, T, T) -> tappend_out_gaa(nil, T, T)
   tappend_in_gaa(node(nil, X, T2), T1, node(T1, X, T2)) -> tappend_out_gaa(node(nil, X, T2), T1, node(T1, X, T2))
   tappend_in_gaa(node(T1, X, nil), T2, node(T1, X, T2)) -> tappend_out_gaa(node(T1, X, nil), T2, node(T1, X, T2))
   tappend_in_gaa(node(T1, X, T2), T3, node(U, X, T2)) -> U1_gaa(T1, X, T2, T3, U, tappend_in_gaa(T1, T3, U))
   tappend_in_gaa(node(T1, X, T2), T3, node(T1, X, U)) -> U2_gaa(T1, X, T2, T3, U, tappend_in_gaa(T2, T3, U))
   U2_gaa(T1, X, T2, T3, U, tappend_out_gaa(T2, T3, U)) -> tappend_out_gaa(node(T1, X, T2), T3, node(T1, X, U))
   U1_gaa(T1, X, T2, T3, U, tappend_out_gaa(T1, T3, U)) -> tappend_out_gaa(node(T1, X, T2), T3, node(U, X, T2))
   U7_g(X, tappend_out_gaa(T1, T2, T3)) -> goal_out_g(X)

The argument filtering Pi contains the following mapping:
goal_in_g(x1)  =  goal_in_g(x1)

U6_g(x1, x2)  =  U6_g(x2)

s2t_in_ga(x1, x2)  =  s2t_in_ga(x1)

s(x1)  =  s(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

s2t_out_ga(x1, x2)  =  s2t_out_ga(x2)

node(x1, x2, x3)  =  node(x1, x3)

0  =  0

U7_g(x1, x2)  =  U7_g(x2)

tappend_in_gaa(x1, x2, x3)  =  tappend_in_gaa(x1)

nil  =  nil

tappend_out_gaa(x1, x2, x3)  =  tappend_out_gaa

U1_gaa(x1, x2, x3, x4, x5, x6)  =  U1_gaa(x6)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x6)

goal_out_g(x1)  =  goal_out_g

GOAL_IN_G(x1)  =  GOAL_IN_G(x1)

U6_G(x1, x2)  =  U6_G(x2)

S2T_IN_GA(x1, x2)  =  S2T_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

U4_GA(x1, x2, x3, x4)  =  U4_GA(x4)

U5_GA(x1, x2, x3, x4)  =  U5_GA(x4)

U7_G(x1, x2)  =  U7_G(x2)

TAPPEND_IN_GAA(x1, x2, x3)  =  TAPPEND_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5, x6)  =  U1_GAA(x6)

U2_GAA(x1, x2, x3, x4, x5, x6)  =  U2_GAA(x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GOAL_IN_G(X) -> U6_G(X, s2t_in_ga(X, T1))
   GOAL_IN_G(X) -> S2T_IN_GA(X, T1)
   S2T_IN_GA(s(X), node(T, Y, T)) -> U3_GA(X, T, Y, s2t_in_ga(X, T))
   S2T_IN_GA(s(X), node(T, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(nil, Y, T)) -> U4_GA(X, Y, T, s2t_in_ga(X, T))
   S2T_IN_GA(s(X), node(nil, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, nil)) -> U5_GA(X, T, Y, s2t_in_ga(X, T))
   S2T_IN_GA(s(X), node(T, Y, nil)) -> S2T_IN_GA(X, T)
   U6_G(X, s2t_out_ga(X, T1)) -> U7_G(X, tappend_in_gaa(T1, T2, T3))
   U6_G(X, s2t_out_ga(X, T1)) -> TAPPEND_IN_GAA(T1, T2, T3)
   TAPPEND_IN_GAA(node(T1, X, T2), T3, node(U, X, T2)) -> U1_GAA(T1, X, T2, T3, U, tappend_in_gaa(T1, T3, U))
   TAPPEND_IN_GAA(node(T1, X, T2), T3, node(U, X, T2)) -> TAPPEND_IN_GAA(T1, T3, U)
   TAPPEND_IN_GAA(node(T1, X, T2), T3, node(T1, X, U)) -> U2_GAA(T1, X, T2, T3, U, tappend_in_gaa(T2, T3, U))
   TAPPEND_IN_GAA(node(T1, X, T2), T3, node(T1, X, U)) -> TAPPEND_IN_GAA(T2, T3, U)

The TRS R consists of the following rules:

   goal_in_g(X) -> U6_g(X, s2t_in_ga(X, T1))
   s2t_in_ga(s(X), node(T, Y, T)) -> U3_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, T)) -> U4_ga(X, Y, T, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, nil)) -> U5_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, nil)) -> s2t_out_ga(s(X), node(nil, Y, nil))
   s2t_in_ga(0, nil) -> s2t_out_ga(0, nil)
   U5_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, nil))
   U4_ga(X, Y, T, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(nil, Y, T))
   U3_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, T))
   U6_g(X, s2t_out_ga(X, T1)) -> U7_g(X, tappend_in_gaa(T1, T2, T3))
   tappend_in_gaa(nil, T, T) -> tappend_out_gaa(nil, T, T)
   tappend_in_gaa(node(nil, X, T2), T1, node(T1, X, T2)) -> tappend_out_gaa(node(nil, X, T2), T1, node(T1, X, T2))
   tappend_in_gaa(node(T1, X, nil), T2, node(T1, X, T2)) -> tappend_out_gaa(node(T1, X, nil), T2, node(T1, X, T2))
   tappend_in_gaa(node(T1, X, T2), T3, node(U, X, T2)) -> U1_gaa(T1, X, T2, T3, U, tappend_in_gaa(T1, T3, U))
   tappend_in_gaa(node(T1, X, T2), T3, node(T1, X, U)) -> U2_gaa(T1, X, T2, T3, U, tappend_in_gaa(T2, T3, U))
   U2_gaa(T1, X, T2, T3, U, tappend_out_gaa(T2, T3, U)) -> tappend_out_gaa(node(T1, X, T2), T3, node(T1, X, U))
   U1_gaa(T1, X, T2, T3, U, tappend_out_gaa(T1, T3, U)) -> tappend_out_gaa(node(T1, X, T2), T3, node(U, X, T2))
   U7_g(X, tappend_out_gaa(T1, T2, T3)) -> goal_out_g(X)

The argument filtering Pi contains the following mapping:
goal_in_g(x1)  =  goal_in_g(x1)

U6_g(x1, x2)  =  U6_g(x2)

s2t_in_ga(x1, x2)  =  s2t_in_ga(x1)

s(x1)  =  s(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

s2t_out_ga(x1, x2)  =  s2t_out_ga(x2)

node(x1, x2, x3)  =  node(x1, x3)

0  =  0

U7_g(x1, x2)  =  U7_g(x2)

tappend_in_gaa(x1, x2, x3)  =  tappend_in_gaa(x1)

nil  =  nil

tappend_out_gaa(x1, x2, x3)  =  tappend_out_gaa

U1_gaa(x1, x2, x3, x4, x5, x6)  =  U1_gaa(x6)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x6)

goal_out_g(x1)  =  goal_out_g

GOAL_IN_G(x1)  =  GOAL_IN_G(x1)

U6_G(x1, x2)  =  U6_G(x2)

S2T_IN_GA(x1, x2)  =  S2T_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

U4_GA(x1, x2, x3, x4)  =  U4_GA(x4)

U5_GA(x1, x2, x3, x4)  =  U5_GA(x4)

U7_G(x1, x2)  =  U7_G(x2)

TAPPEND_IN_GAA(x1, x2, x3)  =  TAPPEND_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5, x6)  =  U1_GAA(x6)

U2_GAA(x1, x2, x3, x4, x5, x6)  =  U2_GAA(x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 9 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TAPPEND_IN_GAA(node(T1, X, T2), T3, node(T1, X, U)) -> TAPPEND_IN_GAA(T2, T3, U)
   TAPPEND_IN_GAA(node(T1, X, T2), T3, node(U, X, T2)) -> TAPPEND_IN_GAA(T1, T3, U)

The TRS R consists of the following rules:

   goal_in_g(X) -> U6_g(X, s2t_in_ga(X, T1))
   s2t_in_ga(s(X), node(T, Y, T)) -> U3_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, T)) -> U4_ga(X, Y, T, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, nil)) -> U5_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, nil)) -> s2t_out_ga(s(X), node(nil, Y, nil))
   s2t_in_ga(0, nil) -> s2t_out_ga(0, nil)
   U5_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, nil))
   U4_ga(X, Y, T, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(nil, Y, T))
   U3_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, T))
   U6_g(X, s2t_out_ga(X, T1)) -> U7_g(X, tappend_in_gaa(T1, T2, T3))
   tappend_in_gaa(nil, T, T) -> tappend_out_gaa(nil, T, T)
   tappend_in_gaa(node(nil, X, T2), T1, node(T1, X, T2)) -> tappend_out_gaa(node(nil, X, T2), T1, node(T1, X, T2))
   tappend_in_gaa(node(T1, X, nil), T2, node(T1, X, T2)) -> tappend_out_gaa(node(T1, X, nil), T2, node(T1, X, T2))
   tappend_in_gaa(node(T1, X, T2), T3, node(U, X, T2)) -> U1_gaa(T1, X, T2, T3, U, tappend_in_gaa(T1, T3, U))
   tappend_in_gaa(node(T1, X, T2), T3, node(T1, X, U)) -> U2_gaa(T1, X, T2, T3, U, tappend_in_gaa(T2, T3, U))
   U2_gaa(T1, X, T2, T3, U, tappend_out_gaa(T2, T3, U)) -> tappend_out_gaa(node(T1, X, T2), T3, node(T1, X, U))
   U1_gaa(T1, X, T2, T3, U, tappend_out_gaa(T1, T3, U)) -> tappend_out_gaa(node(T1, X, T2), T3, node(U, X, T2))
   U7_g(X, tappend_out_gaa(T1, T2, T3)) -> goal_out_g(X)

The argument filtering Pi contains the following mapping:
goal_in_g(x1)  =  goal_in_g(x1)

U6_g(x1, x2)  =  U6_g(x2)

s2t_in_ga(x1, x2)  =  s2t_in_ga(x1)

s(x1)  =  s(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

s2t_out_ga(x1, x2)  =  s2t_out_ga(x2)

node(x1, x2, x3)  =  node(x1, x3)

0  =  0

U7_g(x1, x2)  =  U7_g(x2)

tappend_in_gaa(x1, x2, x3)  =  tappend_in_gaa(x1)

nil  =  nil

tappend_out_gaa(x1, x2, x3)  =  tappend_out_gaa

U1_gaa(x1, x2, x3, x4, x5, x6)  =  U1_gaa(x6)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x6)

goal_out_g(x1)  =  goal_out_g

TAPPEND_IN_GAA(x1, x2, x3)  =  TAPPEND_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TAPPEND_IN_GAA(node(T1, X, T2), T3, node(T1, X, U)) -> TAPPEND_IN_GAA(T2, T3, U)
   TAPPEND_IN_GAA(node(T1, X, T2), T3, node(U, X, T2)) -> TAPPEND_IN_GAA(T1, T3, U)

R is empty.
The argument filtering Pi contains the following mapping:
node(x1, x2, x3)  =  node(x1, x3)

TAPPEND_IN_GAA(x1, x2, x3)  =  TAPPEND_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TAPPEND_IN_GAA(node(T1, T2)) -> TAPPEND_IN_GAA(T2)
   TAPPEND_IN_GAA(node(T1, T2)) -> TAPPEND_IN_GAA(T1)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TAPPEND_IN_GAA(node(T1, T2)) -> TAPPEND_IN_GAA(T2)
The graph contains the following edges 1 > 1


*TAPPEND_IN_GAA(node(T1, T2)) -> TAPPEND_IN_GAA(T1)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   S2T_IN_GA(s(X), node(nil, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, nil)) -> S2T_IN_GA(X, T)

The TRS R consists of the following rules:

   goal_in_g(X) -> U6_g(X, s2t_in_ga(X, T1))
   s2t_in_ga(s(X), node(T, Y, T)) -> U3_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, T)) -> U4_ga(X, Y, T, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(T, Y, nil)) -> U5_ga(X, T, Y, s2t_in_ga(X, T))
   s2t_in_ga(s(X), node(nil, Y, nil)) -> s2t_out_ga(s(X), node(nil, Y, nil))
   s2t_in_ga(0, nil) -> s2t_out_ga(0, nil)
   U5_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, nil))
   U4_ga(X, Y, T, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(nil, Y, T))
   U3_ga(X, T, Y, s2t_out_ga(X, T)) -> s2t_out_ga(s(X), node(T, Y, T))
   U6_g(X, s2t_out_ga(X, T1)) -> U7_g(X, tappend_in_gaa(T1, T2, T3))
   tappend_in_gaa(nil, T, T) -> tappend_out_gaa(nil, T, T)
   tappend_in_gaa(node(nil, X, T2), T1, node(T1, X, T2)) -> tappend_out_gaa(node(nil, X, T2), T1, node(T1, X, T2))
   tappend_in_gaa(node(T1, X, nil), T2, node(T1, X, T2)) -> tappend_out_gaa(node(T1, X, nil), T2, node(T1, X, T2))
   tappend_in_gaa(node(T1, X, T2), T3, node(U, X, T2)) -> U1_gaa(T1, X, T2, T3, U, tappend_in_gaa(T1, T3, U))
   tappend_in_gaa(node(T1, X, T2), T3, node(T1, X, U)) -> U2_gaa(T1, X, T2, T3, U, tappend_in_gaa(T2, T3, U))
   U2_gaa(T1, X, T2, T3, U, tappend_out_gaa(T2, T3, U)) -> tappend_out_gaa(node(T1, X, T2), T3, node(T1, X, U))
   U1_gaa(T1, X, T2, T3, U, tappend_out_gaa(T1, T3, U)) -> tappend_out_gaa(node(T1, X, T2), T3, node(U, X, T2))
   U7_g(X, tappend_out_gaa(T1, T2, T3)) -> goal_out_g(X)

The argument filtering Pi contains the following mapping:
goal_in_g(x1)  =  goal_in_g(x1)

U6_g(x1, x2)  =  U6_g(x2)

s2t_in_ga(x1, x2)  =  s2t_in_ga(x1)

s(x1)  =  s(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

s2t_out_ga(x1, x2)  =  s2t_out_ga(x2)

node(x1, x2, x3)  =  node(x1, x3)

0  =  0

U7_g(x1, x2)  =  U7_g(x2)

tappend_in_gaa(x1, x2, x3)  =  tappend_in_gaa(x1)

nil  =  nil

tappend_out_gaa(x1, x2, x3)  =  tappend_out_gaa

U1_gaa(x1, x2, x3, x4, x5, x6)  =  U1_gaa(x6)

U2_gaa(x1, x2, x3, x4, x5, x6)  =  U2_gaa(x6)

goal_out_g(x1)  =  goal_out_g

S2T_IN_GA(x1, x2)  =  S2T_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   S2T_IN_GA(s(X), node(nil, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, T)) -> S2T_IN_GA(X, T)
   S2T_IN_GA(s(X), node(T, Y, nil)) -> S2T_IN_GA(X, T)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

node(x1, x2, x3)  =  node(x1, x3)

nil  =  nil

S2T_IN_GA(x1, x2)  =  S2T_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2T_IN_GA(s(X)) -> S2T_IN_GA(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*S2T_IN_GA(s(X)) -> S2T_IN_GA(X)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES
