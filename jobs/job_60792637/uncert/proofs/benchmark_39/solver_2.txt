YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/HHw0t.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

max(g,a,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Clauses:

max(X, Y, X) :- less(Y, X).
max(X, Y, Y) :- less(X, s(Y)).
less(0, s(X1)).
less(s(X), s(Y)) :- less(X, Y).


Query: max(g,a,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

max_in_3: (b,f,f)

less_in_2: (f,b) (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   max_in_gaa(X, Y, X) -> U1_gaa(X, Y, less_in_ag(Y, X))
   less_in_ag(0, s(X1)) -> less_out_ag(0, s(X1))
   less_in_ag(s(X), s(Y)) -> U3_ag(X, Y, less_in_ag(X, Y))
   U3_ag(X, Y, less_out_ag(X, Y)) -> less_out_ag(s(X), s(Y))
   U1_gaa(X, Y, less_out_ag(Y, X)) -> max_out_gaa(X, Y, X)
   max_in_gaa(X, Y, Y) -> U2_gaa(X, Y, less_in_ga(X, s(Y)))
   less_in_ga(0, s(X1)) -> less_out_ga(0, s(X1))
   less_in_ga(s(X), s(Y)) -> U3_ga(X, Y, less_in_ga(X, Y))
   U3_ga(X, Y, less_out_ga(X, Y)) -> less_out_ga(s(X), s(Y))
   U2_gaa(X, Y, less_out_ga(X, s(Y))) -> max_out_gaa(X, Y, Y)

The argument filtering Pi contains the following mapping:
max_in_gaa(x1, x2, x3)  =  max_in_gaa(x1)

U1_gaa(x1, x2, x3)  =  U1_gaa(x3)

less_in_ag(x1, x2)  =  less_in_ag(x2)

s(x1)  =  s(x1)

less_out_ag(x1, x2)  =  less_out_ag(x1)

U3_ag(x1, x2, x3)  =  U3_ag(x3)

max_out_gaa(x1, x2, x3)  =  max_out_gaa

U2_gaa(x1, x2, x3)  =  U2_gaa(x3)

less_in_ga(x1, x2)  =  less_in_ga(x1)

0  =  0

less_out_ga(x1, x2)  =  less_out_ga

U3_ga(x1, x2, x3)  =  U3_ga(x3)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   max_in_gaa(X, Y, X) -> U1_gaa(X, Y, less_in_ag(Y, X))
   less_in_ag(0, s(X1)) -> less_out_ag(0, s(X1))
   less_in_ag(s(X), s(Y)) -> U3_ag(X, Y, less_in_ag(X, Y))
   U3_ag(X, Y, less_out_ag(X, Y)) -> less_out_ag(s(X), s(Y))
   U1_gaa(X, Y, less_out_ag(Y, X)) -> max_out_gaa(X, Y, X)
   max_in_gaa(X, Y, Y) -> U2_gaa(X, Y, less_in_ga(X, s(Y)))
   less_in_ga(0, s(X1)) -> less_out_ga(0, s(X1))
   less_in_ga(s(X), s(Y)) -> U3_ga(X, Y, less_in_ga(X, Y))
   U3_ga(X, Y, less_out_ga(X, Y)) -> less_out_ga(s(X), s(Y))
   U2_gaa(X, Y, less_out_ga(X, s(Y))) -> max_out_gaa(X, Y, Y)

The argument filtering Pi contains the following mapping:
max_in_gaa(x1, x2, x3)  =  max_in_gaa(x1)

U1_gaa(x1, x2, x3)  =  U1_gaa(x3)

less_in_ag(x1, x2)  =  less_in_ag(x2)

s(x1)  =  s(x1)

less_out_ag(x1, x2)  =  less_out_ag(x1)

U3_ag(x1, x2, x3)  =  U3_ag(x3)

max_out_gaa(x1, x2, x3)  =  max_out_gaa

U2_gaa(x1, x2, x3)  =  U2_gaa(x3)

less_in_ga(x1, x2)  =  less_in_ga(x1)

0  =  0

less_out_ga(x1, x2)  =  less_out_ga

U3_ga(x1, x2, x3)  =  U3_ga(x3)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MAX_IN_GAA(X, Y, X) -> U1_GAA(X, Y, less_in_ag(Y, X))
   MAX_IN_GAA(X, Y, X) -> LESS_IN_AG(Y, X)
   LESS_IN_AG(s(X), s(Y)) -> U3_AG(X, Y, less_in_ag(X, Y))
   LESS_IN_AG(s(X), s(Y)) -> LESS_IN_AG(X, Y)
   MAX_IN_GAA(X, Y, Y) -> U2_GAA(X, Y, less_in_ga(X, s(Y)))
   MAX_IN_GAA(X, Y, Y) -> LESS_IN_GA(X, s(Y))
   LESS_IN_GA(s(X), s(Y)) -> U3_GA(X, Y, less_in_ga(X, Y))
   LESS_IN_GA(s(X), s(Y)) -> LESS_IN_GA(X, Y)

The TRS R consists of the following rules:

   max_in_gaa(X, Y, X) -> U1_gaa(X, Y, less_in_ag(Y, X))
   less_in_ag(0, s(X1)) -> less_out_ag(0, s(X1))
   less_in_ag(s(X), s(Y)) -> U3_ag(X, Y, less_in_ag(X, Y))
   U3_ag(X, Y, less_out_ag(X, Y)) -> less_out_ag(s(X), s(Y))
   U1_gaa(X, Y, less_out_ag(Y, X)) -> max_out_gaa(X, Y, X)
   max_in_gaa(X, Y, Y) -> U2_gaa(X, Y, less_in_ga(X, s(Y)))
   less_in_ga(0, s(X1)) -> less_out_ga(0, s(X1))
   less_in_ga(s(X), s(Y)) -> U3_ga(X, Y, less_in_ga(X, Y))
   U3_ga(X, Y, less_out_ga(X, Y)) -> less_out_ga(s(X), s(Y))
   U2_gaa(X, Y, less_out_ga(X, s(Y))) -> max_out_gaa(X, Y, Y)

The argument filtering Pi contains the following mapping:
max_in_gaa(x1, x2, x3)  =  max_in_gaa(x1)

U1_gaa(x1, x2, x3)  =  U1_gaa(x3)

less_in_ag(x1, x2)  =  less_in_ag(x2)

s(x1)  =  s(x1)

less_out_ag(x1, x2)  =  less_out_ag(x1)

U3_ag(x1, x2, x3)  =  U3_ag(x3)

max_out_gaa(x1, x2, x3)  =  max_out_gaa

U2_gaa(x1, x2, x3)  =  U2_gaa(x3)

less_in_ga(x1, x2)  =  less_in_ga(x1)

0  =  0

less_out_ga(x1, x2)  =  less_out_ga

U3_ga(x1, x2, x3)  =  U3_ga(x3)

MAX_IN_GAA(x1, x2, x3)  =  MAX_IN_GAA(x1)

U1_GAA(x1, x2, x3)  =  U1_GAA(x3)

LESS_IN_AG(x1, x2)  =  LESS_IN_AG(x2)

U3_AG(x1, x2, x3)  =  U3_AG(x3)

U2_GAA(x1, x2, x3)  =  U2_GAA(x3)

LESS_IN_GA(x1, x2)  =  LESS_IN_GA(x1)

U3_GA(x1, x2, x3)  =  U3_GA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MAX_IN_GAA(X, Y, X) -> U1_GAA(X, Y, less_in_ag(Y, X))
   MAX_IN_GAA(X, Y, X) -> LESS_IN_AG(Y, X)
   LESS_IN_AG(s(X), s(Y)) -> U3_AG(X, Y, less_in_ag(X, Y))
   LESS_IN_AG(s(X), s(Y)) -> LESS_IN_AG(X, Y)
   MAX_IN_GAA(X, Y, Y) -> U2_GAA(X, Y, less_in_ga(X, s(Y)))
   MAX_IN_GAA(X, Y, Y) -> LESS_IN_GA(X, s(Y))
   LESS_IN_GA(s(X), s(Y)) -> U3_GA(X, Y, less_in_ga(X, Y))
   LESS_IN_GA(s(X), s(Y)) -> LESS_IN_GA(X, Y)

The TRS R consists of the following rules:

   max_in_gaa(X, Y, X) -> U1_gaa(X, Y, less_in_ag(Y, X))
   less_in_ag(0, s(X1)) -> less_out_ag(0, s(X1))
   less_in_ag(s(X), s(Y)) -> U3_ag(X, Y, less_in_ag(X, Y))
   U3_ag(X, Y, less_out_ag(X, Y)) -> less_out_ag(s(X), s(Y))
   U1_gaa(X, Y, less_out_ag(Y, X)) -> max_out_gaa(X, Y, X)
   max_in_gaa(X, Y, Y) -> U2_gaa(X, Y, less_in_ga(X, s(Y)))
   less_in_ga(0, s(X1)) -> less_out_ga(0, s(X1))
   less_in_ga(s(X), s(Y)) -> U3_ga(X, Y, less_in_ga(X, Y))
   U3_ga(X, Y, less_out_ga(X, Y)) -> less_out_ga(s(X), s(Y))
   U2_gaa(X, Y, less_out_ga(X, s(Y))) -> max_out_gaa(X, Y, Y)

The argument filtering Pi contains the following mapping:
max_in_gaa(x1, x2, x3)  =  max_in_gaa(x1)

U1_gaa(x1, x2, x3)  =  U1_gaa(x3)

less_in_ag(x1, x2)  =  less_in_ag(x2)

s(x1)  =  s(x1)

less_out_ag(x1, x2)  =  less_out_ag(x1)

U3_ag(x1, x2, x3)  =  U3_ag(x3)

max_out_gaa(x1, x2, x3)  =  max_out_gaa

U2_gaa(x1, x2, x3)  =  U2_gaa(x3)

less_in_ga(x1, x2)  =  less_in_ga(x1)

0  =  0

less_out_ga(x1, x2)  =  less_out_ga

U3_ga(x1, x2, x3)  =  U3_ga(x3)

MAX_IN_GAA(x1, x2, x3)  =  MAX_IN_GAA(x1)

U1_GAA(x1, x2, x3)  =  U1_GAA(x3)

LESS_IN_AG(x1, x2)  =  LESS_IN_AG(x2)

U3_AG(x1, x2, x3)  =  U3_AG(x3)

U2_GAA(x1, x2, x3)  =  U2_GAA(x3)

LESS_IN_GA(x1, x2)  =  LESS_IN_GA(x1)

U3_GA(x1, x2, x3)  =  U3_GA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LESS_IN_GA(s(X), s(Y)) -> LESS_IN_GA(X, Y)

The TRS R consists of the following rules:

   max_in_gaa(X, Y, X) -> U1_gaa(X, Y, less_in_ag(Y, X))
   less_in_ag(0, s(X1)) -> less_out_ag(0, s(X1))
   less_in_ag(s(X), s(Y)) -> U3_ag(X, Y, less_in_ag(X, Y))
   U3_ag(X, Y, less_out_ag(X, Y)) -> less_out_ag(s(X), s(Y))
   U1_gaa(X, Y, less_out_ag(Y, X)) -> max_out_gaa(X, Y, X)
   max_in_gaa(X, Y, Y) -> U2_gaa(X, Y, less_in_ga(X, s(Y)))
   less_in_ga(0, s(X1)) -> less_out_ga(0, s(X1))
   less_in_ga(s(X), s(Y)) -> U3_ga(X, Y, less_in_ga(X, Y))
   U3_ga(X, Y, less_out_ga(X, Y)) -> less_out_ga(s(X), s(Y))
   U2_gaa(X, Y, less_out_ga(X, s(Y))) -> max_out_gaa(X, Y, Y)

The argument filtering Pi contains the following mapping:
max_in_gaa(x1, x2, x3)  =  max_in_gaa(x1)

U1_gaa(x1, x2, x3)  =  U1_gaa(x3)

less_in_ag(x1, x2)  =  less_in_ag(x2)

s(x1)  =  s(x1)

less_out_ag(x1, x2)  =  less_out_ag(x1)

U3_ag(x1, x2, x3)  =  U3_ag(x3)

max_out_gaa(x1, x2, x3)  =  max_out_gaa

U2_gaa(x1, x2, x3)  =  U2_gaa(x3)

less_in_ga(x1, x2)  =  less_in_ga(x1)

0  =  0

less_out_ga(x1, x2)  =  less_out_ga

U3_ga(x1, x2, x3)  =  U3_ga(x3)

LESS_IN_GA(x1, x2)  =  LESS_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LESS_IN_GA(s(X), s(Y)) -> LESS_IN_GA(X, Y)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

LESS_IN_GA(x1, x2)  =  LESS_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LESS_IN_GA(s(X)) -> LESS_IN_GA(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LESS_IN_GA(s(X)) -> LESS_IN_GA(X)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LESS_IN_AG(s(X), s(Y)) -> LESS_IN_AG(X, Y)

The TRS R consists of the following rules:

   max_in_gaa(X, Y, X) -> U1_gaa(X, Y, less_in_ag(Y, X))
   less_in_ag(0, s(X1)) -> less_out_ag(0, s(X1))
   less_in_ag(s(X), s(Y)) -> U3_ag(X, Y, less_in_ag(X, Y))
   U3_ag(X, Y, less_out_ag(X, Y)) -> less_out_ag(s(X), s(Y))
   U1_gaa(X, Y, less_out_ag(Y, X)) -> max_out_gaa(X, Y, X)
   max_in_gaa(X, Y, Y) -> U2_gaa(X, Y, less_in_ga(X, s(Y)))
   less_in_ga(0, s(X1)) -> less_out_ga(0, s(X1))
   less_in_ga(s(X), s(Y)) -> U3_ga(X, Y, less_in_ga(X, Y))
   U3_ga(X, Y, less_out_ga(X, Y)) -> less_out_ga(s(X), s(Y))
   U2_gaa(X, Y, less_out_ga(X, s(Y))) -> max_out_gaa(X, Y, Y)

The argument filtering Pi contains the following mapping:
max_in_gaa(x1, x2, x3)  =  max_in_gaa(x1)

U1_gaa(x1, x2, x3)  =  U1_gaa(x3)

less_in_ag(x1, x2)  =  less_in_ag(x2)

s(x1)  =  s(x1)

less_out_ag(x1, x2)  =  less_out_ag(x1)

U3_ag(x1, x2, x3)  =  U3_ag(x3)

max_out_gaa(x1, x2, x3)  =  max_out_gaa

U2_gaa(x1, x2, x3)  =  U2_gaa(x3)

less_in_ga(x1, x2)  =  less_in_ga(x1)

0  =  0

less_out_ga(x1, x2)  =  less_out_ga

U3_ga(x1, x2, x3)  =  U3_ga(x3)

LESS_IN_AG(x1, x2)  =  LESS_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LESS_IN_AG(s(X), s(Y)) -> LESS_IN_AG(X, Y)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

LESS_IN_AG(x1, x2)  =  LESS_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LESS_IN_AG(s(Y)) -> LESS_IN_AG(Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LESS_IN_AG(s(Y)) -> LESS_IN_AG(Y)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES
