YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/jH1am.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

qs(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) PiDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) PiDP
        (24) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) PiDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) PiDP
        (31) PiDPToQDPProof [SOUND, 0 ms]
        (32) QDP
        (33) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) PiDP
        (36) PiDPToQDPProof [SOUND, 0 ms]
        (37) QDP
        (38) QDPQMonotonicMRRProof [EQUIVALENT, 45 ms]
        (39) QDP
        (40) DependencyGraphProof [EQUIVALENT, 0 ms]
        (41) TRUE


----------------------------------------

(0)
Obligation:
Clauses:

qs([], []).
qs(cons(X, L), S) :- ','(split(L, X, L1, L2), ','(qs(L1, S1), ','(qs(L2, S2), append(S1, cons(X, S2), S)))).
append([], L, L).
append(cons(X, L1), L2, cons(X, L3)) :- append(L1, L2, L3).
split([], X, [], []).
split(cons(X, L), Y, cons(X, L1), L2) :- ','(less(X, Y), split(L, Y, L1, L2)).
split(cons(X, L), Y, L1, cons(X, L2)) :- ','(geq(X, Y), split(L, Y, L1, L2)).
less(0, s(X)).
less(s(X), s(Y)) :- less(X, Y).
geq(X, X).
geq(s(X), 0).
geq(s(X), s(Y)) :- geq(X, Y).


Query: qs(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

qs_in_2: (b,f)

split_in_4: (b,b,f,f)

less_in_2: (b,b)

geq_in_2: (b,b)

append_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   qs_in_ga([], []) -> qs_out_ga([], [])
   qs_in_ga(cons(X, L), S) -> U1_ga(X, L, S, split_in_ggaa(L, X, L1, L2))
   split_in_ggaa([], X, [], []) -> split_out_ggaa([], X, [], [])
   split_in_ggaa(cons(X, L), Y, cons(X, L1), L2) -> U6_ggaa(X, L, Y, L1, L2, less_in_gg(X, Y))
   less_in_gg(0, s(X)) -> less_out_gg(0, s(X))
   less_in_gg(s(X), s(Y)) -> U10_gg(X, Y, less_in_gg(X, Y))
   U10_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U6_ggaa(X, L, Y, L1, L2, less_out_gg(X, Y)) -> U7_ggaa(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   split_in_ggaa(cons(X, L), Y, L1, cons(X, L2)) -> U8_ggaa(X, L, Y, L1, L2, geq_in_gg(X, Y))
   geq_in_gg(X, X) -> geq_out_gg(X, X)
   geq_in_gg(s(X), 0) -> geq_out_gg(s(X), 0)
   geq_in_gg(s(X), s(Y)) -> U11_gg(X, Y, geq_in_gg(X, Y))
   U11_gg(X, Y, geq_out_gg(X, Y)) -> geq_out_gg(s(X), s(Y))
   U8_ggaa(X, L, Y, L1, L2, geq_out_gg(X, Y)) -> U9_ggaa(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   U9_ggaa(X, L, Y, L1, L2, split_out_ggaa(L, Y, L1, L2)) -> split_out_ggaa(cons(X, L), Y, L1, cons(X, L2))
   U7_ggaa(X, L, Y, L1, L2, split_out_ggaa(L, Y, L1, L2)) -> split_out_ggaa(cons(X, L), Y, cons(X, L1), L2)
   U1_ga(X, L, S, split_out_ggaa(L, X, L1, L2)) -> U2_ga(X, L, S, L2, qs_in_ga(L1, S1))
   U2_ga(X, L, S, L2, qs_out_ga(L1, S1)) -> U3_ga(X, L, S, S1, qs_in_ga(L2, S2))
   U3_ga(X, L, S, S1, qs_out_ga(L2, S2)) -> U4_ga(X, L, S, append_in_gga(S1, cons(X, S2), S))
   append_in_gga([], L, L) -> append_out_gga([], L, L)
   append_in_gga(cons(X, L1), L2, cons(X, L3)) -> U5_gga(X, L1, L2, L3, append_in_gga(L1, L2, L3))
   U5_gga(X, L1, L2, L3, append_out_gga(L1, L2, L3)) -> append_out_gga(cons(X, L1), L2, cons(X, L3))
   U4_ga(X, L, S, append_out_gga(S1, cons(X, S2), S)) -> qs_out_ga(cons(X, L), S)

The argument filtering Pi contains the following mapping:
qs_in_ga(x1, x2)  =  qs_in_ga(x1)

[]  =  []

qs_out_ga(x1, x2)  =  qs_out_ga(x2)

cons(x1, x2)  =  cons(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)

split_in_ggaa(x1, x2, x3, x4)  =  split_in_ggaa(x1, x2)

split_out_ggaa(x1, x2, x3, x4)  =  split_out_ggaa(x3, x4)

U6_ggaa(x1, x2, x3, x4, x5, x6)  =  U6_ggaa(x1, x2, x3, x6)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

s(x1)  =  s(x1)

less_out_gg(x1, x2)  =  less_out_gg

U10_gg(x1, x2, x3)  =  U10_gg(x3)

U7_ggaa(x1, x2, x3, x4, x5, x6)  =  U7_ggaa(x1, x6)

U8_ggaa(x1, x2, x3, x4, x5, x6)  =  U8_ggaa(x1, x2, x3, x6)

geq_in_gg(x1, x2)  =  geq_in_gg(x1, x2)

geq_out_gg(x1, x2)  =  geq_out_gg

U11_gg(x1, x2, x3)  =  U11_gg(x3)

U9_ggaa(x1, x2, x3, x4, x5, x6)  =  U9_ggaa(x1, x6)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x1, x4, x5)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x4, x5)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x1, x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   qs_in_ga([], []) -> qs_out_ga([], [])
   qs_in_ga(cons(X, L), S) -> U1_ga(X, L, S, split_in_ggaa(L, X, L1, L2))
   split_in_ggaa([], X, [], []) -> split_out_ggaa([], X, [], [])
   split_in_ggaa(cons(X, L), Y, cons(X, L1), L2) -> U6_ggaa(X, L, Y, L1, L2, less_in_gg(X, Y))
   less_in_gg(0, s(X)) -> less_out_gg(0, s(X))
   less_in_gg(s(X), s(Y)) -> U10_gg(X, Y, less_in_gg(X, Y))
   U10_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U6_ggaa(X, L, Y, L1, L2, less_out_gg(X, Y)) -> U7_ggaa(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   split_in_ggaa(cons(X, L), Y, L1, cons(X, L2)) -> U8_ggaa(X, L, Y, L1, L2, geq_in_gg(X, Y))
   geq_in_gg(X, X) -> geq_out_gg(X, X)
   geq_in_gg(s(X), 0) -> geq_out_gg(s(X), 0)
   geq_in_gg(s(X), s(Y)) -> U11_gg(X, Y, geq_in_gg(X, Y))
   U11_gg(X, Y, geq_out_gg(X, Y)) -> geq_out_gg(s(X), s(Y))
   U8_ggaa(X, L, Y, L1, L2, geq_out_gg(X, Y)) -> U9_ggaa(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   U9_ggaa(X, L, Y, L1, L2, split_out_ggaa(L, Y, L1, L2)) -> split_out_ggaa(cons(X, L), Y, L1, cons(X, L2))
   U7_ggaa(X, L, Y, L1, L2, split_out_ggaa(L, Y, L1, L2)) -> split_out_ggaa(cons(X, L), Y, cons(X, L1), L2)
   U1_ga(X, L, S, split_out_ggaa(L, X, L1, L2)) -> U2_ga(X, L, S, L2, qs_in_ga(L1, S1))
   U2_ga(X, L, S, L2, qs_out_ga(L1, S1)) -> U3_ga(X, L, S, S1, qs_in_ga(L2, S2))
   U3_ga(X, L, S, S1, qs_out_ga(L2, S2)) -> U4_ga(X, L, S, append_in_gga(S1, cons(X, S2), S))
   append_in_gga([], L, L) -> append_out_gga([], L, L)
   append_in_gga(cons(X, L1), L2, cons(X, L3)) -> U5_gga(X, L1, L2, L3, append_in_gga(L1, L2, L3))
   U5_gga(X, L1, L2, L3, append_out_gga(L1, L2, L3)) -> append_out_gga(cons(X, L1), L2, cons(X, L3))
   U4_ga(X, L, S, append_out_gga(S1, cons(X, S2), S)) -> qs_out_ga(cons(X, L), S)

The argument filtering Pi contains the following mapping:
qs_in_ga(x1, x2)  =  qs_in_ga(x1)

[]  =  []

qs_out_ga(x1, x2)  =  qs_out_ga(x2)

cons(x1, x2)  =  cons(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)

split_in_ggaa(x1, x2, x3, x4)  =  split_in_ggaa(x1, x2)

split_out_ggaa(x1, x2, x3, x4)  =  split_out_ggaa(x3, x4)

U6_ggaa(x1, x2, x3, x4, x5, x6)  =  U6_ggaa(x1, x2, x3, x6)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

s(x1)  =  s(x1)

less_out_gg(x1, x2)  =  less_out_gg

U10_gg(x1, x2, x3)  =  U10_gg(x3)

U7_ggaa(x1, x2, x3, x4, x5, x6)  =  U7_ggaa(x1, x6)

U8_ggaa(x1, x2, x3, x4, x5, x6)  =  U8_ggaa(x1, x2, x3, x6)

geq_in_gg(x1, x2)  =  geq_in_gg(x1, x2)

geq_out_gg(x1, x2)  =  geq_out_gg

U11_gg(x1, x2, x3)  =  U11_gg(x3)

U9_ggaa(x1, x2, x3, x4, x5, x6)  =  U9_ggaa(x1, x6)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x1, x4, x5)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x4, x5)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x1, x5)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   QS_IN_GA(cons(X, L), S) -> U1_GA(X, L, S, split_in_ggaa(L, X, L1, L2))
   QS_IN_GA(cons(X, L), S) -> SPLIT_IN_GGAA(L, X, L1, L2)
   SPLIT_IN_GGAA(cons(X, L), Y, cons(X, L1), L2) -> U6_GGAA(X, L, Y, L1, L2, less_in_gg(X, Y))
   SPLIT_IN_GGAA(cons(X, L), Y, cons(X, L1), L2) -> LESS_IN_GG(X, Y)
   LESS_IN_GG(s(X), s(Y)) -> U10_GG(X, Y, less_in_gg(X, Y))
   LESS_IN_GG(s(X), s(Y)) -> LESS_IN_GG(X, Y)
   U6_GGAA(X, L, Y, L1, L2, less_out_gg(X, Y)) -> U7_GGAA(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   U6_GGAA(X, L, Y, L1, L2, less_out_gg(X, Y)) -> SPLIT_IN_GGAA(L, Y, L1, L2)
   SPLIT_IN_GGAA(cons(X, L), Y, L1, cons(X, L2)) -> U8_GGAA(X, L, Y, L1, L2, geq_in_gg(X, Y))
   SPLIT_IN_GGAA(cons(X, L), Y, L1, cons(X, L2)) -> GEQ_IN_GG(X, Y)
   GEQ_IN_GG(s(X), s(Y)) -> U11_GG(X, Y, geq_in_gg(X, Y))
   GEQ_IN_GG(s(X), s(Y)) -> GEQ_IN_GG(X, Y)
   U8_GGAA(X, L, Y, L1, L2, geq_out_gg(X, Y)) -> U9_GGAA(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   U8_GGAA(X, L, Y, L1, L2, geq_out_gg(X, Y)) -> SPLIT_IN_GGAA(L, Y, L1, L2)
   U1_GA(X, L, S, split_out_ggaa(L, X, L1, L2)) -> U2_GA(X, L, S, L2, qs_in_ga(L1, S1))
   U1_GA(X, L, S, split_out_ggaa(L, X, L1, L2)) -> QS_IN_GA(L1, S1)
   U2_GA(X, L, S, L2, qs_out_ga(L1, S1)) -> U3_GA(X, L, S, S1, qs_in_ga(L2, S2))
   U2_GA(X, L, S, L2, qs_out_ga(L1, S1)) -> QS_IN_GA(L2, S2)
   U3_GA(X, L, S, S1, qs_out_ga(L2, S2)) -> U4_GA(X, L, S, append_in_gga(S1, cons(X, S2), S))
   U3_GA(X, L, S, S1, qs_out_ga(L2, S2)) -> APPEND_IN_GGA(S1, cons(X, S2), S)
   APPEND_IN_GGA(cons(X, L1), L2, cons(X, L3)) -> U5_GGA(X, L1, L2, L3, append_in_gga(L1, L2, L3))
   APPEND_IN_GGA(cons(X, L1), L2, cons(X, L3)) -> APPEND_IN_GGA(L1, L2, L3)

The TRS R consists of the following rules:

   qs_in_ga([], []) -> qs_out_ga([], [])
   qs_in_ga(cons(X, L), S) -> U1_ga(X, L, S, split_in_ggaa(L, X, L1, L2))
   split_in_ggaa([], X, [], []) -> split_out_ggaa([], X, [], [])
   split_in_ggaa(cons(X, L), Y, cons(X, L1), L2) -> U6_ggaa(X, L, Y, L1, L2, less_in_gg(X, Y))
   less_in_gg(0, s(X)) -> less_out_gg(0, s(X))
   less_in_gg(s(X), s(Y)) -> U10_gg(X, Y, less_in_gg(X, Y))
   U10_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U6_ggaa(X, L, Y, L1, L2, less_out_gg(X, Y)) -> U7_ggaa(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   split_in_ggaa(cons(X, L), Y, L1, cons(X, L2)) -> U8_ggaa(X, L, Y, L1, L2, geq_in_gg(X, Y))
   geq_in_gg(X, X) -> geq_out_gg(X, X)
   geq_in_gg(s(X), 0) -> geq_out_gg(s(X), 0)
   geq_in_gg(s(X), s(Y)) -> U11_gg(X, Y, geq_in_gg(X, Y))
   U11_gg(X, Y, geq_out_gg(X, Y)) -> geq_out_gg(s(X), s(Y))
   U8_ggaa(X, L, Y, L1, L2, geq_out_gg(X, Y)) -> U9_ggaa(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   U9_ggaa(X, L, Y, L1, L2, split_out_ggaa(L, Y, L1, L2)) -> split_out_ggaa(cons(X, L), Y, L1, cons(X, L2))
   U7_ggaa(X, L, Y, L1, L2, split_out_ggaa(L, Y, L1, L2)) -> split_out_ggaa(cons(X, L), Y, cons(X, L1), L2)
   U1_ga(X, L, S, split_out_ggaa(L, X, L1, L2)) -> U2_ga(X, L, S, L2, qs_in_ga(L1, S1))
   U2_ga(X, L, S, L2, qs_out_ga(L1, S1)) -> U3_ga(X, L, S, S1, qs_in_ga(L2, S2))
   U3_ga(X, L, S, S1, qs_out_ga(L2, S2)) -> U4_ga(X, L, S, append_in_gga(S1, cons(X, S2), S))
   append_in_gga([], L, L) -> append_out_gga([], L, L)
   append_in_gga(cons(X, L1), L2, cons(X, L3)) -> U5_gga(X, L1, L2, L3, append_in_gga(L1, L2, L3))
   U5_gga(X, L1, L2, L3, append_out_gga(L1, L2, L3)) -> append_out_gga(cons(X, L1), L2, cons(X, L3))
   U4_ga(X, L, S, append_out_gga(S1, cons(X, S2), S)) -> qs_out_ga(cons(X, L), S)

The argument filtering Pi contains the following mapping:
qs_in_ga(x1, x2)  =  qs_in_ga(x1)

[]  =  []

qs_out_ga(x1, x2)  =  qs_out_ga(x2)

cons(x1, x2)  =  cons(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)

split_in_ggaa(x1, x2, x3, x4)  =  split_in_ggaa(x1, x2)

split_out_ggaa(x1, x2, x3, x4)  =  split_out_ggaa(x3, x4)

U6_ggaa(x1, x2, x3, x4, x5, x6)  =  U6_ggaa(x1, x2, x3, x6)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

s(x1)  =  s(x1)

less_out_gg(x1, x2)  =  less_out_gg

U10_gg(x1, x2, x3)  =  U10_gg(x3)

U7_ggaa(x1, x2, x3, x4, x5, x6)  =  U7_ggaa(x1, x6)

U8_ggaa(x1, x2, x3, x4, x5, x6)  =  U8_ggaa(x1, x2, x3, x6)

geq_in_gg(x1, x2)  =  geq_in_gg(x1, x2)

geq_out_gg(x1, x2)  =  geq_out_gg

U11_gg(x1, x2, x3)  =  U11_gg(x3)

U9_ggaa(x1, x2, x3, x4, x5, x6)  =  U9_ggaa(x1, x6)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x1, x4, x5)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x4, x5)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x1, x5)

QS_IN_GA(x1, x2)  =  QS_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x4)

SPLIT_IN_GGAA(x1, x2, x3, x4)  =  SPLIT_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6)  =  U6_GGAA(x1, x2, x3, x6)

LESS_IN_GG(x1, x2)  =  LESS_IN_GG(x1, x2)

U10_GG(x1, x2, x3)  =  U10_GG(x3)

U7_GGAA(x1, x2, x3, x4, x5, x6)  =  U7_GGAA(x1, x6)

U8_GGAA(x1, x2, x3, x4, x5, x6)  =  U8_GGAA(x1, x2, x3, x6)

GEQ_IN_GG(x1, x2)  =  GEQ_IN_GG(x1, x2)

U11_GG(x1, x2, x3)  =  U11_GG(x3)

U9_GGAA(x1, x2, x3, x4, x5, x6)  =  U9_GGAA(x1, x6)

U2_GA(x1, x2, x3, x4, x5)  =  U2_GA(x1, x4, x5)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x1, x4, x5)

U4_GA(x1, x2, x3, x4)  =  U4_GA(x4)

APPEND_IN_GGA(x1, x2, x3)  =  APPEND_IN_GGA(x1, x2)

U5_GGA(x1, x2, x3, x4, x5)  =  U5_GGA(x1, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   QS_IN_GA(cons(X, L), S) -> U1_GA(X, L, S, split_in_ggaa(L, X, L1, L2))
   QS_IN_GA(cons(X, L), S) -> SPLIT_IN_GGAA(L, X, L1, L2)
   SPLIT_IN_GGAA(cons(X, L), Y, cons(X, L1), L2) -> U6_GGAA(X, L, Y, L1, L2, less_in_gg(X, Y))
   SPLIT_IN_GGAA(cons(X, L), Y, cons(X, L1), L2) -> LESS_IN_GG(X, Y)
   LESS_IN_GG(s(X), s(Y)) -> U10_GG(X, Y, less_in_gg(X, Y))
   LESS_IN_GG(s(X), s(Y)) -> LESS_IN_GG(X, Y)
   U6_GGAA(X, L, Y, L1, L2, less_out_gg(X, Y)) -> U7_GGAA(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   U6_GGAA(X, L, Y, L1, L2, less_out_gg(X, Y)) -> SPLIT_IN_GGAA(L, Y, L1, L2)
   SPLIT_IN_GGAA(cons(X, L), Y, L1, cons(X, L2)) -> U8_GGAA(X, L, Y, L1, L2, geq_in_gg(X, Y))
   SPLIT_IN_GGAA(cons(X, L), Y, L1, cons(X, L2)) -> GEQ_IN_GG(X, Y)
   GEQ_IN_GG(s(X), s(Y)) -> U11_GG(X, Y, geq_in_gg(X, Y))
   GEQ_IN_GG(s(X), s(Y)) -> GEQ_IN_GG(X, Y)
   U8_GGAA(X, L, Y, L1, L2, geq_out_gg(X, Y)) -> U9_GGAA(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   U8_GGAA(X, L, Y, L1, L2, geq_out_gg(X, Y)) -> SPLIT_IN_GGAA(L, Y, L1, L2)
   U1_GA(X, L, S, split_out_ggaa(L, X, L1, L2)) -> U2_GA(X, L, S, L2, qs_in_ga(L1, S1))
   U1_GA(X, L, S, split_out_ggaa(L, X, L1, L2)) -> QS_IN_GA(L1, S1)
   U2_GA(X, L, S, L2, qs_out_ga(L1, S1)) -> U3_GA(X, L, S, S1, qs_in_ga(L2, S2))
   U2_GA(X, L, S, L2, qs_out_ga(L1, S1)) -> QS_IN_GA(L2, S2)
   U3_GA(X, L, S, S1, qs_out_ga(L2, S2)) -> U4_GA(X, L, S, append_in_gga(S1, cons(X, S2), S))
   U3_GA(X, L, S, S1, qs_out_ga(L2, S2)) -> APPEND_IN_GGA(S1, cons(X, S2), S)
   APPEND_IN_GGA(cons(X, L1), L2, cons(X, L3)) -> U5_GGA(X, L1, L2, L3, append_in_gga(L1, L2, L3))
   APPEND_IN_GGA(cons(X, L1), L2, cons(X, L3)) -> APPEND_IN_GGA(L1, L2, L3)

The TRS R consists of the following rules:

   qs_in_ga([], []) -> qs_out_ga([], [])
   qs_in_ga(cons(X, L), S) -> U1_ga(X, L, S, split_in_ggaa(L, X, L1, L2))
   split_in_ggaa([], X, [], []) -> split_out_ggaa([], X, [], [])
   split_in_ggaa(cons(X, L), Y, cons(X, L1), L2) -> U6_ggaa(X, L, Y, L1, L2, less_in_gg(X, Y))
   less_in_gg(0, s(X)) -> less_out_gg(0, s(X))
   less_in_gg(s(X), s(Y)) -> U10_gg(X, Y, less_in_gg(X, Y))
   U10_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U6_ggaa(X, L, Y, L1, L2, less_out_gg(X, Y)) -> U7_ggaa(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   split_in_ggaa(cons(X, L), Y, L1, cons(X, L2)) -> U8_ggaa(X, L, Y, L1, L2, geq_in_gg(X, Y))
   geq_in_gg(X, X) -> geq_out_gg(X, X)
   geq_in_gg(s(X), 0) -> geq_out_gg(s(X), 0)
   geq_in_gg(s(X), s(Y)) -> U11_gg(X, Y, geq_in_gg(X, Y))
   U11_gg(X, Y, geq_out_gg(X, Y)) -> geq_out_gg(s(X), s(Y))
   U8_ggaa(X, L, Y, L1, L2, geq_out_gg(X, Y)) -> U9_ggaa(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   U9_ggaa(X, L, Y, L1, L2, split_out_ggaa(L, Y, L1, L2)) -> split_out_ggaa(cons(X, L), Y, L1, cons(X, L2))
   U7_ggaa(X, L, Y, L1, L2, split_out_ggaa(L, Y, L1, L2)) -> split_out_ggaa(cons(X, L), Y, cons(X, L1), L2)
   U1_ga(X, L, S, split_out_ggaa(L, X, L1, L2)) -> U2_ga(X, L, S, L2, qs_in_ga(L1, S1))
   U2_ga(X, L, S, L2, qs_out_ga(L1, S1)) -> U3_ga(X, L, S, S1, qs_in_ga(L2, S2))
   U3_ga(X, L, S, S1, qs_out_ga(L2, S2)) -> U4_ga(X, L, S, append_in_gga(S1, cons(X, S2), S))
   append_in_gga([], L, L) -> append_out_gga([], L, L)
   append_in_gga(cons(X, L1), L2, cons(X, L3)) -> U5_gga(X, L1, L2, L3, append_in_gga(L1, L2, L3))
   U5_gga(X, L1, L2, L3, append_out_gga(L1, L2, L3)) -> append_out_gga(cons(X, L1), L2, cons(X, L3))
   U4_ga(X, L, S, append_out_gga(S1, cons(X, S2), S)) -> qs_out_ga(cons(X, L), S)

The argument filtering Pi contains the following mapping:
qs_in_ga(x1, x2)  =  qs_in_ga(x1)

[]  =  []

qs_out_ga(x1, x2)  =  qs_out_ga(x2)

cons(x1, x2)  =  cons(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)

split_in_ggaa(x1, x2, x3, x4)  =  split_in_ggaa(x1, x2)

split_out_ggaa(x1, x2, x3, x4)  =  split_out_ggaa(x3, x4)

U6_ggaa(x1, x2, x3, x4, x5, x6)  =  U6_ggaa(x1, x2, x3, x6)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

s(x1)  =  s(x1)

less_out_gg(x1, x2)  =  less_out_gg

U10_gg(x1, x2, x3)  =  U10_gg(x3)

U7_ggaa(x1, x2, x3, x4, x5, x6)  =  U7_ggaa(x1, x6)

U8_ggaa(x1, x2, x3, x4, x5, x6)  =  U8_ggaa(x1, x2, x3, x6)

geq_in_gg(x1, x2)  =  geq_in_gg(x1, x2)

geq_out_gg(x1, x2)  =  geq_out_gg

U11_gg(x1, x2, x3)  =  U11_gg(x3)

U9_ggaa(x1, x2, x3, x4, x5, x6)  =  U9_ggaa(x1, x6)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x1, x4, x5)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x4, x5)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x1, x5)

QS_IN_GA(x1, x2)  =  QS_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x4)

SPLIT_IN_GGAA(x1, x2, x3, x4)  =  SPLIT_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6)  =  U6_GGAA(x1, x2, x3, x6)

LESS_IN_GG(x1, x2)  =  LESS_IN_GG(x1, x2)

U10_GG(x1, x2, x3)  =  U10_GG(x3)

U7_GGAA(x1, x2, x3, x4, x5, x6)  =  U7_GGAA(x1, x6)

U8_GGAA(x1, x2, x3, x4, x5, x6)  =  U8_GGAA(x1, x2, x3, x6)

GEQ_IN_GG(x1, x2)  =  GEQ_IN_GG(x1, x2)

U11_GG(x1, x2, x3)  =  U11_GG(x3)

U9_GGAA(x1, x2, x3, x4, x5, x6)  =  U9_GGAA(x1, x6)

U2_GA(x1, x2, x3, x4, x5)  =  U2_GA(x1, x4, x5)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x1, x4, x5)

U4_GA(x1, x2, x3, x4)  =  U4_GA(x4)

APPEND_IN_GGA(x1, x2, x3)  =  APPEND_IN_GGA(x1, x2)

U5_GGA(x1, x2, x3, x4, x5)  =  U5_GGA(x1, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 5 SCCs with 11 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_GGA(cons(X, L1), L2, cons(X, L3)) -> APPEND_IN_GGA(L1, L2, L3)

The TRS R consists of the following rules:

   qs_in_ga([], []) -> qs_out_ga([], [])
   qs_in_ga(cons(X, L), S) -> U1_ga(X, L, S, split_in_ggaa(L, X, L1, L2))
   split_in_ggaa([], X, [], []) -> split_out_ggaa([], X, [], [])
   split_in_ggaa(cons(X, L), Y, cons(X, L1), L2) -> U6_ggaa(X, L, Y, L1, L2, less_in_gg(X, Y))
   less_in_gg(0, s(X)) -> less_out_gg(0, s(X))
   less_in_gg(s(X), s(Y)) -> U10_gg(X, Y, less_in_gg(X, Y))
   U10_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U6_ggaa(X, L, Y, L1, L2, less_out_gg(X, Y)) -> U7_ggaa(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   split_in_ggaa(cons(X, L), Y, L1, cons(X, L2)) -> U8_ggaa(X, L, Y, L1, L2, geq_in_gg(X, Y))
   geq_in_gg(X, X) -> geq_out_gg(X, X)
   geq_in_gg(s(X), 0) -> geq_out_gg(s(X), 0)
   geq_in_gg(s(X), s(Y)) -> U11_gg(X, Y, geq_in_gg(X, Y))
   U11_gg(X, Y, geq_out_gg(X, Y)) -> geq_out_gg(s(X), s(Y))
   U8_ggaa(X, L, Y, L1, L2, geq_out_gg(X, Y)) -> U9_ggaa(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   U9_ggaa(X, L, Y, L1, L2, split_out_ggaa(L, Y, L1, L2)) -> split_out_ggaa(cons(X, L), Y, L1, cons(X, L2))
   U7_ggaa(X, L, Y, L1, L2, split_out_ggaa(L, Y, L1, L2)) -> split_out_ggaa(cons(X, L), Y, cons(X, L1), L2)
   U1_ga(X, L, S, split_out_ggaa(L, X, L1, L2)) -> U2_ga(X, L, S, L2, qs_in_ga(L1, S1))
   U2_ga(X, L, S, L2, qs_out_ga(L1, S1)) -> U3_ga(X, L, S, S1, qs_in_ga(L2, S2))
   U3_ga(X, L, S, S1, qs_out_ga(L2, S2)) -> U4_ga(X, L, S, append_in_gga(S1, cons(X, S2), S))
   append_in_gga([], L, L) -> append_out_gga([], L, L)
   append_in_gga(cons(X, L1), L2, cons(X, L3)) -> U5_gga(X, L1, L2, L3, append_in_gga(L1, L2, L3))
   U5_gga(X, L1, L2, L3, append_out_gga(L1, L2, L3)) -> append_out_gga(cons(X, L1), L2, cons(X, L3))
   U4_ga(X, L, S, append_out_gga(S1, cons(X, S2), S)) -> qs_out_ga(cons(X, L), S)

The argument filtering Pi contains the following mapping:
qs_in_ga(x1, x2)  =  qs_in_ga(x1)

[]  =  []

qs_out_ga(x1, x2)  =  qs_out_ga(x2)

cons(x1, x2)  =  cons(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)

split_in_ggaa(x1, x2, x3, x4)  =  split_in_ggaa(x1, x2)

split_out_ggaa(x1, x2, x3, x4)  =  split_out_ggaa(x3, x4)

U6_ggaa(x1, x2, x3, x4, x5, x6)  =  U6_ggaa(x1, x2, x3, x6)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

s(x1)  =  s(x1)

less_out_gg(x1, x2)  =  less_out_gg

U10_gg(x1, x2, x3)  =  U10_gg(x3)

U7_ggaa(x1, x2, x3, x4, x5, x6)  =  U7_ggaa(x1, x6)

U8_ggaa(x1, x2, x3, x4, x5, x6)  =  U8_ggaa(x1, x2, x3, x6)

geq_in_gg(x1, x2)  =  geq_in_gg(x1, x2)

geq_out_gg(x1, x2)  =  geq_out_gg

U11_gg(x1, x2, x3)  =  U11_gg(x3)

U9_ggaa(x1, x2, x3, x4, x5, x6)  =  U9_ggaa(x1, x6)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x1, x4, x5)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x4, x5)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x1, x5)

APPEND_IN_GGA(x1, x2, x3)  =  APPEND_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_GGA(cons(X, L1), L2, cons(X, L3)) -> APPEND_IN_GGA(L1, L2, L3)

R is empty.
The argument filtering Pi contains the following mapping:
cons(x1, x2)  =  cons(x1, x2)

APPEND_IN_GGA(x1, x2, x3)  =  APPEND_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND_IN_GGA(cons(X, L1), L2) -> APPEND_IN_GGA(L1, L2)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPEND_IN_GGA(cons(X, L1), L2) -> APPEND_IN_GGA(L1, L2)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GEQ_IN_GG(s(X), s(Y)) -> GEQ_IN_GG(X, Y)

The TRS R consists of the following rules:

   qs_in_ga([], []) -> qs_out_ga([], [])
   qs_in_ga(cons(X, L), S) -> U1_ga(X, L, S, split_in_ggaa(L, X, L1, L2))
   split_in_ggaa([], X, [], []) -> split_out_ggaa([], X, [], [])
   split_in_ggaa(cons(X, L), Y, cons(X, L1), L2) -> U6_ggaa(X, L, Y, L1, L2, less_in_gg(X, Y))
   less_in_gg(0, s(X)) -> less_out_gg(0, s(X))
   less_in_gg(s(X), s(Y)) -> U10_gg(X, Y, less_in_gg(X, Y))
   U10_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U6_ggaa(X, L, Y, L1, L2, less_out_gg(X, Y)) -> U7_ggaa(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   split_in_ggaa(cons(X, L), Y, L1, cons(X, L2)) -> U8_ggaa(X, L, Y, L1, L2, geq_in_gg(X, Y))
   geq_in_gg(X, X) -> geq_out_gg(X, X)
   geq_in_gg(s(X), 0) -> geq_out_gg(s(X), 0)
   geq_in_gg(s(X), s(Y)) -> U11_gg(X, Y, geq_in_gg(X, Y))
   U11_gg(X, Y, geq_out_gg(X, Y)) -> geq_out_gg(s(X), s(Y))
   U8_ggaa(X, L, Y, L1, L2, geq_out_gg(X, Y)) -> U9_ggaa(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   U9_ggaa(X, L, Y, L1, L2, split_out_ggaa(L, Y, L1, L2)) -> split_out_ggaa(cons(X, L), Y, L1, cons(X, L2))
   U7_ggaa(X, L, Y, L1, L2, split_out_ggaa(L, Y, L1, L2)) -> split_out_ggaa(cons(X, L), Y, cons(X, L1), L2)
   U1_ga(X, L, S, split_out_ggaa(L, X, L1, L2)) -> U2_ga(X, L, S, L2, qs_in_ga(L1, S1))
   U2_ga(X, L, S, L2, qs_out_ga(L1, S1)) -> U3_ga(X, L, S, S1, qs_in_ga(L2, S2))
   U3_ga(X, L, S, S1, qs_out_ga(L2, S2)) -> U4_ga(X, L, S, append_in_gga(S1, cons(X, S2), S))
   append_in_gga([], L, L) -> append_out_gga([], L, L)
   append_in_gga(cons(X, L1), L2, cons(X, L3)) -> U5_gga(X, L1, L2, L3, append_in_gga(L1, L2, L3))
   U5_gga(X, L1, L2, L3, append_out_gga(L1, L2, L3)) -> append_out_gga(cons(X, L1), L2, cons(X, L3))
   U4_ga(X, L, S, append_out_gga(S1, cons(X, S2), S)) -> qs_out_ga(cons(X, L), S)

The argument filtering Pi contains the following mapping:
qs_in_ga(x1, x2)  =  qs_in_ga(x1)

[]  =  []

qs_out_ga(x1, x2)  =  qs_out_ga(x2)

cons(x1, x2)  =  cons(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)

split_in_ggaa(x1, x2, x3, x4)  =  split_in_ggaa(x1, x2)

split_out_ggaa(x1, x2, x3, x4)  =  split_out_ggaa(x3, x4)

U6_ggaa(x1, x2, x3, x4, x5, x6)  =  U6_ggaa(x1, x2, x3, x6)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

s(x1)  =  s(x1)

less_out_gg(x1, x2)  =  less_out_gg

U10_gg(x1, x2, x3)  =  U10_gg(x3)

U7_ggaa(x1, x2, x3, x4, x5, x6)  =  U7_ggaa(x1, x6)

U8_ggaa(x1, x2, x3, x4, x5, x6)  =  U8_ggaa(x1, x2, x3, x6)

geq_in_gg(x1, x2)  =  geq_in_gg(x1, x2)

geq_out_gg(x1, x2)  =  geq_out_gg

U11_gg(x1, x2, x3)  =  U11_gg(x3)

U9_ggaa(x1, x2, x3, x4, x5, x6)  =  U9_ggaa(x1, x6)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x1, x4, x5)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x4, x5)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x1, x5)

GEQ_IN_GG(x1, x2)  =  GEQ_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GEQ_IN_GG(s(X), s(Y)) -> GEQ_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GEQ_IN_GG(s(X), s(Y)) -> GEQ_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GEQ_IN_GG(s(X), s(Y)) -> GEQ_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LESS_IN_GG(s(X), s(Y)) -> LESS_IN_GG(X, Y)

The TRS R consists of the following rules:

   qs_in_ga([], []) -> qs_out_ga([], [])
   qs_in_ga(cons(X, L), S) -> U1_ga(X, L, S, split_in_ggaa(L, X, L1, L2))
   split_in_ggaa([], X, [], []) -> split_out_ggaa([], X, [], [])
   split_in_ggaa(cons(X, L), Y, cons(X, L1), L2) -> U6_ggaa(X, L, Y, L1, L2, less_in_gg(X, Y))
   less_in_gg(0, s(X)) -> less_out_gg(0, s(X))
   less_in_gg(s(X), s(Y)) -> U10_gg(X, Y, less_in_gg(X, Y))
   U10_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U6_ggaa(X, L, Y, L1, L2, less_out_gg(X, Y)) -> U7_ggaa(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   split_in_ggaa(cons(X, L), Y, L1, cons(X, L2)) -> U8_ggaa(X, L, Y, L1, L2, geq_in_gg(X, Y))
   geq_in_gg(X, X) -> geq_out_gg(X, X)
   geq_in_gg(s(X), 0) -> geq_out_gg(s(X), 0)
   geq_in_gg(s(X), s(Y)) -> U11_gg(X, Y, geq_in_gg(X, Y))
   U11_gg(X, Y, geq_out_gg(X, Y)) -> geq_out_gg(s(X), s(Y))
   U8_ggaa(X, L, Y, L1, L2, geq_out_gg(X, Y)) -> U9_ggaa(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   U9_ggaa(X, L, Y, L1, L2, split_out_ggaa(L, Y, L1, L2)) -> split_out_ggaa(cons(X, L), Y, L1, cons(X, L2))
   U7_ggaa(X, L, Y, L1, L2, split_out_ggaa(L, Y, L1, L2)) -> split_out_ggaa(cons(X, L), Y, cons(X, L1), L2)
   U1_ga(X, L, S, split_out_ggaa(L, X, L1, L2)) -> U2_ga(X, L, S, L2, qs_in_ga(L1, S1))
   U2_ga(X, L, S, L2, qs_out_ga(L1, S1)) -> U3_ga(X, L, S, S1, qs_in_ga(L2, S2))
   U3_ga(X, L, S, S1, qs_out_ga(L2, S2)) -> U4_ga(X, L, S, append_in_gga(S1, cons(X, S2), S))
   append_in_gga([], L, L) -> append_out_gga([], L, L)
   append_in_gga(cons(X, L1), L2, cons(X, L3)) -> U5_gga(X, L1, L2, L3, append_in_gga(L1, L2, L3))
   U5_gga(X, L1, L2, L3, append_out_gga(L1, L2, L3)) -> append_out_gga(cons(X, L1), L2, cons(X, L3))
   U4_ga(X, L, S, append_out_gga(S1, cons(X, S2), S)) -> qs_out_ga(cons(X, L), S)

The argument filtering Pi contains the following mapping:
qs_in_ga(x1, x2)  =  qs_in_ga(x1)

[]  =  []

qs_out_ga(x1, x2)  =  qs_out_ga(x2)

cons(x1, x2)  =  cons(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)

split_in_ggaa(x1, x2, x3, x4)  =  split_in_ggaa(x1, x2)

split_out_ggaa(x1, x2, x3, x4)  =  split_out_ggaa(x3, x4)

U6_ggaa(x1, x2, x3, x4, x5, x6)  =  U6_ggaa(x1, x2, x3, x6)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

s(x1)  =  s(x1)

less_out_gg(x1, x2)  =  less_out_gg

U10_gg(x1, x2, x3)  =  U10_gg(x3)

U7_ggaa(x1, x2, x3, x4, x5, x6)  =  U7_ggaa(x1, x6)

U8_ggaa(x1, x2, x3, x4, x5, x6)  =  U8_ggaa(x1, x2, x3, x6)

geq_in_gg(x1, x2)  =  geq_in_gg(x1, x2)

geq_out_gg(x1, x2)  =  geq_out_gg

U11_gg(x1, x2, x3)  =  U11_gg(x3)

U9_ggaa(x1, x2, x3, x4, x5, x6)  =  U9_ggaa(x1, x6)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x1, x4, x5)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x4, x5)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x1, x5)

LESS_IN_GG(x1, x2)  =  LESS_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(23)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LESS_IN_GG(s(X), s(Y)) -> LESS_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(24) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LESS_IN_GG(s(X), s(Y)) -> LESS_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LESS_IN_GG(s(X), s(Y)) -> LESS_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_GGAA(X, L, Y, L1, L2, less_out_gg(X, Y)) -> SPLIT_IN_GGAA(L, Y, L1, L2)
   SPLIT_IN_GGAA(cons(X, L), Y, cons(X, L1), L2) -> U6_GGAA(X, L, Y, L1, L2, less_in_gg(X, Y))
   SPLIT_IN_GGAA(cons(X, L), Y, L1, cons(X, L2)) -> U8_GGAA(X, L, Y, L1, L2, geq_in_gg(X, Y))
   U8_GGAA(X, L, Y, L1, L2, geq_out_gg(X, Y)) -> SPLIT_IN_GGAA(L, Y, L1, L2)

The TRS R consists of the following rules:

   qs_in_ga([], []) -> qs_out_ga([], [])
   qs_in_ga(cons(X, L), S) -> U1_ga(X, L, S, split_in_ggaa(L, X, L1, L2))
   split_in_ggaa([], X, [], []) -> split_out_ggaa([], X, [], [])
   split_in_ggaa(cons(X, L), Y, cons(X, L1), L2) -> U6_ggaa(X, L, Y, L1, L2, less_in_gg(X, Y))
   less_in_gg(0, s(X)) -> less_out_gg(0, s(X))
   less_in_gg(s(X), s(Y)) -> U10_gg(X, Y, less_in_gg(X, Y))
   U10_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U6_ggaa(X, L, Y, L1, L2, less_out_gg(X, Y)) -> U7_ggaa(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   split_in_ggaa(cons(X, L), Y, L1, cons(X, L2)) -> U8_ggaa(X, L, Y, L1, L2, geq_in_gg(X, Y))
   geq_in_gg(X, X) -> geq_out_gg(X, X)
   geq_in_gg(s(X), 0) -> geq_out_gg(s(X), 0)
   geq_in_gg(s(X), s(Y)) -> U11_gg(X, Y, geq_in_gg(X, Y))
   U11_gg(X, Y, geq_out_gg(X, Y)) -> geq_out_gg(s(X), s(Y))
   U8_ggaa(X, L, Y, L1, L2, geq_out_gg(X, Y)) -> U9_ggaa(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   U9_ggaa(X, L, Y, L1, L2, split_out_ggaa(L, Y, L1, L2)) -> split_out_ggaa(cons(X, L), Y, L1, cons(X, L2))
   U7_ggaa(X, L, Y, L1, L2, split_out_ggaa(L, Y, L1, L2)) -> split_out_ggaa(cons(X, L), Y, cons(X, L1), L2)
   U1_ga(X, L, S, split_out_ggaa(L, X, L1, L2)) -> U2_ga(X, L, S, L2, qs_in_ga(L1, S1))
   U2_ga(X, L, S, L2, qs_out_ga(L1, S1)) -> U3_ga(X, L, S, S1, qs_in_ga(L2, S2))
   U3_ga(X, L, S, S1, qs_out_ga(L2, S2)) -> U4_ga(X, L, S, append_in_gga(S1, cons(X, S2), S))
   append_in_gga([], L, L) -> append_out_gga([], L, L)
   append_in_gga(cons(X, L1), L2, cons(X, L3)) -> U5_gga(X, L1, L2, L3, append_in_gga(L1, L2, L3))
   U5_gga(X, L1, L2, L3, append_out_gga(L1, L2, L3)) -> append_out_gga(cons(X, L1), L2, cons(X, L3))
   U4_ga(X, L, S, append_out_gga(S1, cons(X, S2), S)) -> qs_out_ga(cons(X, L), S)

The argument filtering Pi contains the following mapping:
qs_in_ga(x1, x2)  =  qs_in_ga(x1)

[]  =  []

qs_out_ga(x1, x2)  =  qs_out_ga(x2)

cons(x1, x2)  =  cons(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)

split_in_ggaa(x1, x2, x3, x4)  =  split_in_ggaa(x1, x2)

split_out_ggaa(x1, x2, x3, x4)  =  split_out_ggaa(x3, x4)

U6_ggaa(x1, x2, x3, x4, x5, x6)  =  U6_ggaa(x1, x2, x3, x6)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

s(x1)  =  s(x1)

less_out_gg(x1, x2)  =  less_out_gg

U10_gg(x1, x2, x3)  =  U10_gg(x3)

U7_ggaa(x1, x2, x3, x4, x5, x6)  =  U7_ggaa(x1, x6)

U8_ggaa(x1, x2, x3, x4, x5, x6)  =  U8_ggaa(x1, x2, x3, x6)

geq_in_gg(x1, x2)  =  geq_in_gg(x1, x2)

geq_out_gg(x1, x2)  =  geq_out_gg

U11_gg(x1, x2, x3)  =  U11_gg(x3)

U9_ggaa(x1, x2, x3, x4, x5, x6)  =  U9_ggaa(x1, x6)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x1, x4, x5)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x4, x5)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x1, x5)

SPLIT_IN_GGAA(x1, x2, x3, x4)  =  SPLIT_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6)  =  U6_GGAA(x1, x2, x3, x6)

U8_GGAA(x1, x2, x3, x4, x5, x6)  =  U8_GGAA(x1, x2, x3, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(30)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_GGAA(X, L, Y, L1, L2, less_out_gg(X, Y)) -> SPLIT_IN_GGAA(L, Y, L1, L2)
   SPLIT_IN_GGAA(cons(X, L), Y, cons(X, L1), L2) -> U6_GGAA(X, L, Y, L1, L2, less_in_gg(X, Y))
   SPLIT_IN_GGAA(cons(X, L), Y, L1, cons(X, L2)) -> U8_GGAA(X, L, Y, L1, L2, geq_in_gg(X, Y))
   U8_GGAA(X, L, Y, L1, L2, geq_out_gg(X, Y)) -> SPLIT_IN_GGAA(L, Y, L1, L2)

The TRS R consists of the following rules:

   less_in_gg(0, s(X)) -> less_out_gg(0, s(X))
   less_in_gg(s(X), s(Y)) -> U10_gg(X, Y, less_in_gg(X, Y))
   geq_in_gg(X, X) -> geq_out_gg(X, X)
   geq_in_gg(s(X), 0) -> geq_out_gg(s(X), 0)
   geq_in_gg(s(X), s(Y)) -> U11_gg(X, Y, geq_in_gg(X, Y))
   U10_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U11_gg(X, Y, geq_out_gg(X, Y)) -> geq_out_gg(s(X), s(Y))

The argument filtering Pi contains the following mapping:
cons(x1, x2)  =  cons(x1, x2)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

s(x1)  =  s(x1)

less_out_gg(x1, x2)  =  less_out_gg

U10_gg(x1, x2, x3)  =  U10_gg(x3)

geq_in_gg(x1, x2)  =  geq_in_gg(x1, x2)

geq_out_gg(x1, x2)  =  geq_out_gg

U11_gg(x1, x2, x3)  =  U11_gg(x3)

SPLIT_IN_GGAA(x1, x2, x3, x4)  =  SPLIT_IN_GGAA(x1, x2)

U6_GGAA(x1, x2, x3, x4, x5, x6)  =  U6_GGAA(x1, x2, x3, x6)

U8_GGAA(x1, x2, x3, x4, x5, x6)  =  U8_GGAA(x1, x2, x3, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(31) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GGAA(X, L, Y, less_out_gg) -> SPLIT_IN_GGAA(L, Y)
   SPLIT_IN_GGAA(cons(X, L), Y) -> U6_GGAA(X, L, Y, less_in_gg(X, Y))
   SPLIT_IN_GGAA(cons(X, L), Y) -> U8_GGAA(X, L, Y, geq_in_gg(X, Y))
   U8_GGAA(X, L, Y, geq_out_gg) -> SPLIT_IN_GGAA(L, Y)

The TRS R consists of the following rules:

   less_in_gg(0, s(X)) -> less_out_gg
   less_in_gg(s(X), s(Y)) -> U10_gg(less_in_gg(X, Y))
   geq_in_gg(X, X) -> geq_out_gg
   geq_in_gg(s(X), 0) -> geq_out_gg
   geq_in_gg(s(X), s(Y)) -> U11_gg(geq_in_gg(X, Y))
   U10_gg(less_out_gg) -> less_out_gg
   U11_gg(geq_out_gg) -> geq_out_gg

The set Q consists of the following terms:

   less_in_gg(x0, x1)
   geq_in_gg(x0, x1)
   U10_gg(x0)
   U11_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(33) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SPLIT_IN_GGAA(cons(X, L), Y) -> U6_GGAA(X, L, Y, less_in_gg(X, Y))
The graph contains the following edges 1 > 1, 1 > 2, 2 >= 3


*SPLIT_IN_GGAA(cons(X, L), Y) -> U8_GGAA(X, L, Y, geq_in_gg(X, Y))
The graph contains the following edges 1 > 1, 1 > 2, 2 >= 3


*U6_GGAA(X, L, Y, less_out_gg) -> SPLIT_IN_GGAA(L, Y)
The graph contains the following edges 2 >= 1, 3 >= 2


*U8_GGAA(X, L, Y, geq_out_gg) -> SPLIT_IN_GGAA(L, Y)
The graph contains the following edges 2 >= 1, 3 >= 2


----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(X, L, S, split_out_ggaa(L, X, L1, L2)) -> U2_GA(X, L, S, L2, qs_in_ga(L1, S1))
   U2_GA(X, L, S, L2, qs_out_ga(L1, S1)) -> QS_IN_GA(L2, S2)
   QS_IN_GA(cons(X, L), S) -> U1_GA(X, L, S, split_in_ggaa(L, X, L1, L2))
   U1_GA(X, L, S, split_out_ggaa(L, X, L1, L2)) -> QS_IN_GA(L1, S1)

The TRS R consists of the following rules:

   qs_in_ga([], []) -> qs_out_ga([], [])
   qs_in_ga(cons(X, L), S) -> U1_ga(X, L, S, split_in_ggaa(L, X, L1, L2))
   split_in_ggaa([], X, [], []) -> split_out_ggaa([], X, [], [])
   split_in_ggaa(cons(X, L), Y, cons(X, L1), L2) -> U6_ggaa(X, L, Y, L1, L2, less_in_gg(X, Y))
   less_in_gg(0, s(X)) -> less_out_gg(0, s(X))
   less_in_gg(s(X), s(Y)) -> U10_gg(X, Y, less_in_gg(X, Y))
   U10_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U6_ggaa(X, L, Y, L1, L2, less_out_gg(X, Y)) -> U7_ggaa(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   split_in_ggaa(cons(X, L), Y, L1, cons(X, L2)) -> U8_ggaa(X, L, Y, L1, L2, geq_in_gg(X, Y))
   geq_in_gg(X, X) -> geq_out_gg(X, X)
   geq_in_gg(s(X), 0) -> geq_out_gg(s(X), 0)
   geq_in_gg(s(X), s(Y)) -> U11_gg(X, Y, geq_in_gg(X, Y))
   U11_gg(X, Y, geq_out_gg(X, Y)) -> geq_out_gg(s(X), s(Y))
   U8_ggaa(X, L, Y, L1, L2, geq_out_gg(X, Y)) -> U9_ggaa(X, L, Y, L1, L2, split_in_ggaa(L, Y, L1, L2))
   U9_ggaa(X, L, Y, L1, L2, split_out_ggaa(L, Y, L1, L2)) -> split_out_ggaa(cons(X, L), Y, L1, cons(X, L2))
   U7_ggaa(X, L, Y, L1, L2, split_out_ggaa(L, Y, L1, L2)) -> split_out_ggaa(cons(X, L), Y, cons(X, L1), L2)
   U1_ga(X, L, S, split_out_ggaa(L, X, L1, L2)) -> U2_ga(X, L, S, L2, qs_in_ga(L1, S1))
   U2_ga(X, L, S, L2, qs_out_ga(L1, S1)) -> U3_ga(X, L, S, S1, qs_in_ga(L2, S2))
   U3_ga(X, L, S, S1, qs_out_ga(L2, S2)) -> U4_ga(X, L, S, append_in_gga(S1, cons(X, S2), S))
   append_in_gga([], L, L) -> append_out_gga([], L, L)
   append_in_gga(cons(X, L1), L2, cons(X, L3)) -> U5_gga(X, L1, L2, L3, append_in_gga(L1, L2, L3))
   U5_gga(X, L1, L2, L3, append_out_gga(L1, L2, L3)) -> append_out_gga(cons(X, L1), L2, cons(X, L3))
   U4_ga(X, L, S, append_out_gga(S1, cons(X, S2), S)) -> qs_out_ga(cons(X, L), S)

The argument filtering Pi contains the following mapping:
qs_in_ga(x1, x2)  =  qs_in_ga(x1)

[]  =  []

qs_out_ga(x1, x2)  =  qs_out_ga(x2)

cons(x1, x2)  =  cons(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)

split_in_ggaa(x1, x2, x3, x4)  =  split_in_ggaa(x1, x2)

split_out_ggaa(x1, x2, x3, x4)  =  split_out_ggaa(x3, x4)

U6_ggaa(x1, x2, x3, x4, x5, x6)  =  U6_ggaa(x1, x2, x3, x6)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

s(x1)  =  s(x1)

less_out_gg(x1, x2)  =  less_out_gg

U10_gg(x1, x2, x3)  =  U10_gg(x3)

U7_ggaa(x1, x2, x3, x4, x5, x6)  =  U7_ggaa(x1, x6)

U8_ggaa(x1, x2, x3, x4, x5, x6)  =  U8_ggaa(x1, x2, x3, x6)

geq_in_gg(x1, x2)  =  geq_in_gg(x1, x2)

geq_out_gg(x1, x2)  =  geq_out_gg

U11_gg(x1, x2, x3)  =  U11_gg(x3)

U9_ggaa(x1, x2, x3, x4, x5, x6)  =  U9_ggaa(x1, x6)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x1, x4, x5)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x4, x5)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x4)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x1, x5)

QS_IN_GA(x1, x2)  =  QS_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x4)

U2_GA(x1, x2, x3, x4, x5)  =  U2_GA(x1, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(36) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GA(X, split_out_ggaa(L1, L2)) -> U2_GA(X, L2, qs_in_ga(L1))
   U2_GA(X, L2, qs_out_ga(S1)) -> QS_IN_GA(L2)
   QS_IN_GA(cons(X, L)) -> U1_GA(X, split_in_ggaa(L, X))
   U1_GA(X, split_out_ggaa(L1, L2)) -> QS_IN_GA(L1)

The TRS R consists of the following rules:

   qs_in_ga([]) -> qs_out_ga([])
   qs_in_ga(cons(X, L)) -> U1_ga(X, split_in_ggaa(L, X))
   split_in_ggaa([], X) -> split_out_ggaa([], [])
   split_in_ggaa(cons(X, L), Y) -> U6_ggaa(X, L, Y, less_in_gg(X, Y))
   less_in_gg(0, s(X)) -> less_out_gg
   less_in_gg(s(X), s(Y)) -> U10_gg(less_in_gg(X, Y))
   U10_gg(less_out_gg) -> less_out_gg
   U6_ggaa(X, L, Y, less_out_gg) -> U7_ggaa(X, split_in_ggaa(L, Y))
   split_in_ggaa(cons(X, L), Y) -> U8_ggaa(X, L, Y, geq_in_gg(X, Y))
   geq_in_gg(X, X) -> geq_out_gg
   geq_in_gg(s(X), 0) -> geq_out_gg
   geq_in_gg(s(X), s(Y)) -> U11_gg(geq_in_gg(X, Y))
   U11_gg(geq_out_gg) -> geq_out_gg
   U8_ggaa(X, L, Y, geq_out_gg) -> U9_ggaa(X, split_in_ggaa(L, Y))
   U9_ggaa(X, split_out_ggaa(L1, L2)) -> split_out_ggaa(L1, cons(X, L2))
   U7_ggaa(X, split_out_ggaa(L1, L2)) -> split_out_ggaa(cons(X, L1), L2)
   U1_ga(X, split_out_ggaa(L1, L2)) -> U2_ga(X, L2, qs_in_ga(L1))
   U2_ga(X, L2, qs_out_ga(S1)) -> U3_ga(X, S1, qs_in_ga(L2))
   U3_ga(X, S1, qs_out_ga(S2)) -> U4_ga(append_in_gga(S1, cons(X, S2)))
   append_in_gga([], L) -> append_out_gga(L)
   append_in_gga(cons(X, L1), L2) -> U5_gga(X, append_in_gga(L1, L2))
   U5_gga(X, append_out_gga(L3)) -> append_out_gga(cons(X, L3))
   U4_ga(append_out_gga(S)) -> qs_out_ga(S)

The set Q consists of the following terms:

   qs_in_ga(x0)
   split_in_ggaa(x0, x1)
   less_in_gg(x0, x1)
   U10_gg(x0)
   U6_ggaa(x0, x1, x2, x3)
   geq_in_gg(x0, x1)
   U11_gg(x0)
   U8_ggaa(x0, x1, x2, x3)
   U9_ggaa(x0, x1)
   U7_ggaa(x0, x1)
   U1_ga(x0, x1)
   U2_ga(x0, x1, x2)
   U3_ga(x0, x1, x2)
   append_in_gga(x0, x1)
   U5_gga(x0, x1)
   U4_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(38) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   U1_GA(X, split_out_ggaa(L1, L2)) -> U2_GA(X, L2, qs_in_ga(L1))
   QS_IN_GA(cons(X, L)) -> U1_GA(X, split_in_ggaa(L, X))
   U1_GA(X, split_out_ggaa(L1, L2)) -> QS_IN_GA(L1)


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(QS_IN_GA(x_1)) = x_1
   POL(U10_gg(x_1)) = 0
   POL(U11_gg(x_1)) = 0
   POL(U1_GA(x_1, x_2)) = 1 + 2*x_2
   POL(U1_ga(x_1, x_2)) = 0
   POL(U2_GA(x_1, x_2, x_3)) = 2*x_2
   POL(U2_ga(x_1, x_2, x_3)) = 0
   POL(U3_ga(x_1, x_2, x_3)) = 0
   POL(U4_ga(x_1)) = 0
   POL(U5_gga(x_1, x_2)) = 0
   POL(U6_ggaa(x_1, x_2, x_3, x_4)) = 2 + 2*x_2
   POL(U7_ggaa(x_1, x_2)) = 2 + 2*x_2
   POL(U8_ggaa(x_1, x_2, x_3, x_4)) = 2 + 2*x_2
   POL(U9_ggaa(x_1, x_2)) = 2 + 2*x_2
   POL([]) = 0
   POL(append_in_gga(x_1, x_2)) = 2*x_1
   POL(append_out_gga(x_1)) = 0
   POL(cons(x_1, x_2)) = 2 + 2*x_2
   POL(geq_in_gg(x_1, x_2)) = 2*x_1
   POL(geq_out_gg) = 0
   POL(less_in_gg(x_1, x_2)) = 0
   POL(less_out_gg) = 0
   POL(qs_in_ga(x_1)) = 0
   POL(qs_out_ga(x_1)) = 0
   POL(s(x_1)) = 2*x_1
   POL(split_in_ggaa(x_1, x_2)) = x_1
   POL(split_out_ggaa(x_1, x_2)) = x_1 + x_2


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GA(X, L2, qs_out_ga(S1)) -> QS_IN_GA(L2)

The TRS R consists of the following rules:

   qs_in_ga([]) -> qs_out_ga([])
   qs_in_ga(cons(X, L)) -> U1_ga(X, split_in_ggaa(L, X))
   split_in_ggaa([], X) -> split_out_ggaa([], [])
   split_in_ggaa(cons(X, L), Y) -> U6_ggaa(X, L, Y, less_in_gg(X, Y))
   less_in_gg(0, s(X)) -> less_out_gg
   less_in_gg(s(X), s(Y)) -> U10_gg(less_in_gg(X, Y))
   U10_gg(less_out_gg) -> less_out_gg
   U6_ggaa(X, L, Y, less_out_gg) -> U7_ggaa(X, split_in_ggaa(L, Y))
   split_in_ggaa(cons(X, L), Y) -> U8_ggaa(X, L, Y, geq_in_gg(X, Y))
   geq_in_gg(X, X) -> geq_out_gg
   geq_in_gg(s(X), 0) -> geq_out_gg
   geq_in_gg(s(X), s(Y)) -> U11_gg(geq_in_gg(X, Y))
   U11_gg(geq_out_gg) -> geq_out_gg
   U8_ggaa(X, L, Y, geq_out_gg) -> U9_ggaa(X, split_in_ggaa(L, Y))
   U9_ggaa(X, split_out_ggaa(L1, L2)) -> split_out_ggaa(L1, cons(X, L2))
   U7_ggaa(X, split_out_ggaa(L1, L2)) -> split_out_ggaa(cons(X, L1), L2)
   U1_ga(X, split_out_ggaa(L1, L2)) -> U2_ga(X, L2, qs_in_ga(L1))
   U2_ga(X, L2, qs_out_ga(S1)) -> U3_ga(X, S1, qs_in_ga(L2))
   U3_ga(X, S1, qs_out_ga(S2)) -> U4_ga(append_in_gga(S1, cons(X, S2)))
   append_in_gga([], L) -> append_out_gga(L)
   append_in_gga(cons(X, L1), L2) -> U5_gga(X, append_in_gga(L1, L2))
   U5_gga(X, append_out_gga(L3)) -> append_out_gga(cons(X, L3))
   U4_ga(append_out_gga(S)) -> qs_out_ga(S)

The set Q consists of the following terms:

   qs_in_ga(x0)
   split_in_ggaa(x0, x1)
   less_in_gg(x0, x1)
   U10_gg(x0)
   U6_ggaa(x0, x1, x2, x3)
   geq_in_gg(x0, x1)
   U11_gg(x0)
   U8_ggaa(x0, x1, x2, x3)
   U9_ggaa(x0, x1)
   U7_ggaa(x0, x1)
   U1_ga(x0, x1)
   U2_ga(x0, x1, x2)
   U3_ga(x0, x1, x2)
   append_in_gga(x0, x1)
   U5_gga(x0, x1)
   U4_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(40) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(41)
TRUE
