MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/3Glu8.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

append3(a,a,a,g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) AND
        (7) PiDP
            (8) UsableRulesProof [EQUIVALENT, 0 ms]
            (9) PiDP
            (10) PiDPToQDPProof [SOUND, 0 ms]
            (11) QDP
            (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (13) YES
        (14) PiDP
            (15) UsableRulesProof [EQUIVALENT, 0 ms]
            (16) PiDP
            (17) PiDPToQDPProof [SOUND, 0 ms]
            (18) QDP
(19) PrologToPiTRSProof [SOUND, 0 ms]
(20) PiTRS
    (21) DependencyPairsProof [EQUIVALENT, 0 ms]
    (22) PiDP
    (23) DependencyGraphProof [EQUIVALENT, 0 ms]
    (24) AND
        (25) PiDP
            (26) UsableRulesProof [EQUIVALENT, 0 ms]
            (27) PiDP
            (28) PiDPToQDPProof [SOUND, 0 ms]
            (29) QDP
            (30) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (31) YES
        (32) PiDP
            (33) UsableRulesProof [EQUIVALENT, 0 ms]
            (34) PiDP
            (35) PiDPToQDPProof [SOUND, 0 ms]
            (36) QDP
(37) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(38) TRIPLES
    (39) TriplesToPiDPProof [SOUND, 0 ms]
    (40) PiDP
    (41) DependencyGraphProof [EQUIVALENT, 0 ms]
    (42) AND
        (43) PiDP
            (44) UsableRulesProof [EQUIVALENT, 0 ms]
            (45) PiDP
            (46) PiDPToQDPProof [SOUND, 0 ms]
            (47) QDP
        (48) PiDP
            (49) UsableRulesProof [EQUIVALENT, 0 ms]
            (50) PiDP
(51) PrologToTRSTransformerProof [SOUND, 0 ms]
(52) QTRS
    (53) QTRSRRRProof [EQUIVALENT, 32 ms]
    (54) QTRS
    (55) QTRSRRRProof [EQUIVALENT, 2 ms]
    (56) QTRS
    (57) Overlay + Local Confluence [EQUIVALENT, 0 ms]
    (58) QTRS
    (59) DependencyPairsProof [EQUIVALENT, 0 ms]
    (60) QDP
    (61) UsableRulesProof [EQUIVALENT, 0 ms]
    (62) QDP
    (63) QReductionProof [EQUIVALENT, 0 ms]
    (64) QDP
(65) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(66) AND
    (67) IRSwT
        (68) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (69) TRUE
    (70) IRSwT
        (71) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (72) IRSwT
        (73) IntTRSCompressionProof [EQUIVALENT, 7 ms]
        (74) IRSwT
        (75) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (76) IRSwT
        (77) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
        (78) IRSwT
        (79) FilterProof [EQUIVALENT, 0 ms]
        (80) IntTRS
        (81) IntTRSPeriodicNontermProof [COMPLETE, 3 ms]
        (82) NO


----------------------------------------

(0)
Obligation:
Clauses:

append([], L, L).
append(.(H, L1), L2, .(H, L3)) :- append(L1, L2, L3).
append3(A, B, C, D) :- ','(append(A, B, E), append(E, C, D)).


Query: append3(a,a,a,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

append3_in_4: (f,f,f,b)

append_in_3: (f,f,f) (f,f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   append3_in_aaag(A, B, C, D) -> U2_aaag(A, B, C, D, append_in_aaa(A, B, E))
   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))
   U2_aaag(A, B, C, D, append_out_aaa(A, B, E)) -> U3_aaag(A, B, C, D, append_in_aag(E, C, D))
   append_in_aag([], L, L) -> append_out_aag([], L, L)
   append_in_aag(.(H, L1), L2, .(H, L3)) -> U1_aag(H, L1, L2, L3, append_in_aag(L1, L2, L3))
   U1_aag(H, L1, L2, L3, append_out_aag(L1, L2, L3)) -> append_out_aag(.(H, L1), L2, .(H, L3))
   U3_aaag(A, B, C, D, append_out_aag(E, C, D)) -> append3_out_aaag(A, B, C, D)

The argument filtering Pi contains the following mapping:
append3_in_aaag(x1, x2, x3, x4)  =  append3_in_aaag(x4)

U2_aaag(x1, x2, x3, x4, x5)  =  U2_aaag(x4, x5)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)

U3_aaag(x1, x2, x3, x4, x5)  =  U3_aaag(x1, x4, x5)

append_in_aag(x1, x2, x3)  =  append_in_aag(x3)

append_out_aag(x1, x2, x3)  =  append_out_aag(x1, x2, x3)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x4, x5)

append3_out_aaag(x1, x2, x3, x4)  =  append3_out_aaag(x1, x3, x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   append3_in_aaag(A, B, C, D) -> U2_aaag(A, B, C, D, append_in_aaa(A, B, E))
   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))
   U2_aaag(A, B, C, D, append_out_aaa(A, B, E)) -> U3_aaag(A, B, C, D, append_in_aag(E, C, D))
   append_in_aag([], L, L) -> append_out_aag([], L, L)
   append_in_aag(.(H, L1), L2, .(H, L3)) -> U1_aag(H, L1, L2, L3, append_in_aag(L1, L2, L3))
   U1_aag(H, L1, L2, L3, append_out_aag(L1, L2, L3)) -> append_out_aag(.(H, L1), L2, .(H, L3))
   U3_aaag(A, B, C, D, append_out_aag(E, C, D)) -> append3_out_aaag(A, B, C, D)

The argument filtering Pi contains the following mapping:
append3_in_aaag(x1, x2, x3, x4)  =  append3_in_aaag(x4)

U2_aaag(x1, x2, x3, x4, x5)  =  U2_aaag(x4, x5)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)

U3_aaag(x1, x2, x3, x4, x5)  =  U3_aaag(x1, x4, x5)

append_in_aag(x1, x2, x3)  =  append_in_aag(x3)

append_out_aag(x1, x2, x3)  =  append_out_aag(x1, x2, x3)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x4, x5)

append3_out_aaag(x1, x2, x3, x4)  =  append3_out_aaag(x1, x3, x4)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND3_IN_AAAG(A, B, C, D) -> U2_AAAG(A, B, C, D, append_in_aaa(A, B, E))
   APPEND3_IN_AAAG(A, B, C, D) -> APPEND_IN_AAA(A, B, E)
   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> U1_AAA(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAA(L1, L2, L3)
   U2_AAAG(A, B, C, D, append_out_aaa(A, B, E)) -> U3_AAAG(A, B, C, D, append_in_aag(E, C, D))
   U2_AAAG(A, B, C, D, append_out_aaa(A, B, E)) -> APPEND_IN_AAG(E, C, D)
   APPEND_IN_AAG(.(H, L1), L2, .(H, L3)) -> U1_AAG(H, L1, L2, L3, append_in_aag(L1, L2, L3))
   APPEND_IN_AAG(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAG(L1, L2, L3)

The TRS R consists of the following rules:

   append3_in_aaag(A, B, C, D) -> U2_aaag(A, B, C, D, append_in_aaa(A, B, E))
   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))
   U2_aaag(A, B, C, D, append_out_aaa(A, B, E)) -> U3_aaag(A, B, C, D, append_in_aag(E, C, D))
   append_in_aag([], L, L) -> append_out_aag([], L, L)
   append_in_aag(.(H, L1), L2, .(H, L3)) -> U1_aag(H, L1, L2, L3, append_in_aag(L1, L2, L3))
   U1_aag(H, L1, L2, L3, append_out_aag(L1, L2, L3)) -> append_out_aag(.(H, L1), L2, .(H, L3))
   U3_aaag(A, B, C, D, append_out_aag(E, C, D)) -> append3_out_aaag(A, B, C, D)

The argument filtering Pi contains the following mapping:
append3_in_aaag(x1, x2, x3, x4)  =  append3_in_aaag(x4)

U2_aaag(x1, x2, x3, x4, x5)  =  U2_aaag(x4, x5)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)

U3_aaag(x1, x2, x3, x4, x5)  =  U3_aaag(x1, x4, x5)

append_in_aag(x1, x2, x3)  =  append_in_aag(x3)

append_out_aag(x1, x2, x3)  =  append_out_aag(x1, x2, x3)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x4, x5)

append3_out_aaag(x1, x2, x3, x4)  =  append3_out_aaag(x1, x3, x4)

APPEND3_IN_AAAG(x1, x2, x3, x4)  =  APPEND3_IN_AAAG(x4)

U2_AAAG(x1, x2, x3, x4, x5)  =  U2_AAAG(x4, x5)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA

U1_AAA(x1, x2, x3, x4, x5)  =  U1_AAA(x5)

U3_AAAG(x1, x2, x3, x4, x5)  =  U3_AAAG(x1, x4, x5)

APPEND_IN_AAG(x1, x2, x3)  =  APPEND_IN_AAG(x3)

U1_AAG(x1, x2, x3, x4, x5)  =  U1_AAG(x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND3_IN_AAAG(A, B, C, D) -> U2_AAAG(A, B, C, D, append_in_aaa(A, B, E))
   APPEND3_IN_AAAG(A, B, C, D) -> APPEND_IN_AAA(A, B, E)
   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> U1_AAA(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAA(L1, L2, L3)
   U2_AAAG(A, B, C, D, append_out_aaa(A, B, E)) -> U3_AAAG(A, B, C, D, append_in_aag(E, C, D))
   U2_AAAG(A, B, C, D, append_out_aaa(A, B, E)) -> APPEND_IN_AAG(E, C, D)
   APPEND_IN_AAG(.(H, L1), L2, .(H, L3)) -> U1_AAG(H, L1, L2, L3, append_in_aag(L1, L2, L3))
   APPEND_IN_AAG(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAG(L1, L2, L3)

The TRS R consists of the following rules:

   append3_in_aaag(A, B, C, D) -> U2_aaag(A, B, C, D, append_in_aaa(A, B, E))
   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))
   U2_aaag(A, B, C, D, append_out_aaa(A, B, E)) -> U3_aaag(A, B, C, D, append_in_aag(E, C, D))
   append_in_aag([], L, L) -> append_out_aag([], L, L)
   append_in_aag(.(H, L1), L2, .(H, L3)) -> U1_aag(H, L1, L2, L3, append_in_aag(L1, L2, L3))
   U1_aag(H, L1, L2, L3, append_out_aag(L1, L2, L3)) -> append_out_aag(.(H, L1), L2, .(H, L3))
   U3_aaag(A, B, C, D, append_out_aag(E, C, D)) -> append3_out_aaag(A, B, C, D)

The argument filtering Pi contains the following mapping:
append3_in_aaag(x1, x2, x3, x4)  =  append3_in_aaag(x4)

U2_aaag(x1, x2, x3, x4, x5)  =  U2_aaag(x4, x5)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)

U3_aaag(x1, x2, x3, x4, x5)  =  U3_aaag(x1, x4, x5)

append_in_aag(x1, x2, x3)  =  append_in_aag(x3)

append_out_aag(x1, x2, x3)  =  append_out_aag(x1, x2, x3)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x4, x5)

append3_out_aaag(x1, x2, x3, x4)  =  append3_out_aaag(x1, x3, x4)

APPEND3_IN_AAAG(x1, x2, x3, x4)  =  APPEND3_IN_AAAG(x4)

U2_AAAG(x1, x2, x3, x4, x5)  =  U2_AAAG(x4, x5)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA

U1_AAA(x1, x2, x3, x4, x5)  =  U1_AAA(x5)

U3_AAAG(x1, x2, x3, x4, x5)  =  U3_AAAG(x1, x4, x5)

APPEND_IN_AAG(x1, x2, x3)  =  APPEND_IN_AAG(x3)

U1_AAG(x1, x2, x3, x4, x5)  =  U1_AAG(x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAG(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAG(L1, L2, L3)

The TRS R consists of the following rules:

   append3_in_aaag(A, B, C, D) -> U2_aaag(A, B, C, D, append_in_aaa(A, B, E))
   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))
   U2_aaag(A, B, C, D, append_out_aaa(A, B, E)) -> U3_aaag(A, B, C, D, append_in_aag(E, C, D))
   append_in_aag([], L, L) -> append_out_aag([], L, L)
   append_in_aag(.(H, L1), L2, .(H, L3)) -> U1_aag(H, L1, L2, L3, append_in_aag(L1, L2, L3))
   U1_aag(H, L1, L2, L3, append_out_aag(L1, L2, L3)) -> append_out_aag(.(H, L1), L2, .(H, L3))
   U3_aaag(A, B, C, D, append_out_aag(E, C, D)) -> append3_out_aaag(A, B, C, D)

The argument filtering Pi contains the following mapping:
append3_in_aaag(x1, x2, x3, x4)  =  append3_in_aaag(x4)

U2_aaag(x1, x2, x3, x4, x5)  =  U2_aaag(x4, x5)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)

U3_aaag(x1, x2, x3, x4, x5)  =  U3_aaag(x1, x4, x5)

append_in_aag(x1, x2, x3)  =  append_in_aag(x3)

append_out_aag(x1, x2, x3)  =  append_out_aag(x1, x2, x3)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x4, x5)

append3_out_aaag(x1, x2, x3, x4)  =  append3_out_aaag(x1, x3, x4)

APPEND_IN_AAG(x1, x2, x3)  =  APPEND_IN_AAG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAG(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAG(L1, L2, L3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPEND_IN_AAG(x1, x2, x3)  =  APPEND_IN_AAG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAG(.(L3)) -> APPEND_IN_AAG(L3)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPEND_IN_AAG(.(L3)) -> APPEND_IN_AAG(L3)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAA(L1, L2, L3)

The TRS R consists of the following rules:

   append3_in_aaag(A, B, C, D) -> U2_aaag(A, B, C, D, append_in_aaa(A, B, E))
   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))
   U2_aaag(A, B, C, D, append_out_aaa(A, B, E)) -> U3_aaag(A, B, C, D, append_in_aag(E, C, D))
   append_in_aag([], L, L) -> append_out_aag([], L, L)
   append_in_aag(.(H, L1), L2, .(H, L3)) -> U1_aag(H, L1, L2, L3, append_in_aag(L1, L2, L3))
   U1_aag(H, L1, L2, L3, append_out_aag(L1, L2, L3)) -> append_out_aag(.(H, L1), L2, .(H, L3))
   U3_aaag(A, B, C, D, append_out_aag(E, C, D)) -> append3_out_aaag(A, B, C, D)

The argument filtering Pi contains the following mapping:
append3_in_aaag(x1, x2, x3, x4)  =  append3_in_aaag(x4)

U2_aaag(x1, x2, x3, x4, x5)  =  U2_aaag(x4, x5)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)

U3_aaag(x1, x2, x3, x4, x5)  =  U3_aaag(x1, x4, x5)

append_in_aag(x1, x2, x3)  =  append_in_aag(x3)

append_out_aag(x1, x2, x3)  =  append_out_aag(x1, x2, x3)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x4, x5)

append3_out_aaag(x1, x2, x3, x4)  =  append3_out_aaag(x1, x3, x4)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAA(L1, L2, L3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA -> APPEND_IN_AAA

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

append3_in_4: (f,f,f,b)

append_in_3: (f,f,f) (f,f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   append3_in_aaag(A, B, C, D) -> U2_aaag(A, B, C, D, append_in_aaa(A, B, E))
   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))
   U2_aaag(A, B, C, D, append_out_aaa(A, B, E)) -> U3_aaag(A, B, C, D, append_in_aag(E, C, D))
   append_in_aag([], L, L) -> append_out_aag([], L, L)
   append_in_aag(.(H, L1), L2, .(H, L3)) -> U1_aag(H, L1, L2, L3, append_in_aag(L1, L2, L3))
   U1_aag(H, L1, L2, L3, append_out_aag(L1, L2, L3)) -> append_out_aag(.(H, L1), L2, .(H, L3))
   U3_aaag(A, B, C, D, append_out_aag(E, C, D)) -> append3_out_aaag(A, B, C, D)

The argument filtering Pi contains the following mapping:
append3_in_aaag(x1, x2, x3, x4)  =  append3_in_aaag(x4)

U2_aaag(x1, x2, x3, x4, x5)  =  U2_aaag(x4, x5)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)

U3_aaag(x1, x2, x3, x4, x5)  =  U3_aaag(x1, x5)

append_in_aag(x1, x2, x3)  =  append_in_aag(x3)

append_out_aag(x1, x2, x3)  =  append_out_aag(x1, x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

append3_out_aaag(x1, x2, x3, x4)  =  append3_out_aaag(x1, x3)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(20)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   append3_in_aaag(A, B, C, D) -> U2_aaag(A, B, C, D, append_in_aaa(A, B, E))
   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))
   U2_aaag(A, B, C, D, append_out_aaa(A, B, E)) -> U3_aaag(A, B, C, D, append_in_aag(E, C, D))
   append_in_aag([], L, L) -> append_out_aag([], L, L)
   append_in_aag(.(H, L1), L2, .(H, L3)) -> U1_aag(H, L1, L2, L3, append_in_aag(L1, L2, L3))
   U1_aag(H, L1, L2, L3, append_out_aag(L1, L2, L3)) -> append_out_aag(.(H, L1), L2, .(H, L3))
   U3_aaag(A, B, C, D, append_out_aag(E, C, D)) -> append3_out_aaag(A, B, C, D)

The argument filtering Pi contains the following mapping:
append3_in_aaag(x1, x2, x3, x4)  =  append3_in_aaag(x4)

U2_aaag(x1, x2, x3, x4, x5)  =  U2_aaag(x4, x5)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)

U3_aaag(x1, x2, x3, x4, x5)  =  U3_aaag(x1, x5)

append_in_aag(x1, x2, x3)  =  append_in_aag(x3)

append_out_aag(x1, x2, x3)  =  append_out_aag(x1, x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

append3_out_aaag(x1, x2, x3, x4)  =  append3_out_aaag(x1, x3)



----------------------------------------

(21) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND3_IN_AAAG(A, B, C, D) -> U2_AAAG(A, B, C, D, append_in_aaa(A, B, E))
   APPEND3_IN_AAAG(A, B, C, D) -> APPEND_IN_AAA(A, B, E)
   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> U1_AAA(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAA(L1, L2, L3)
   U2_AAAG(A, B, C, D, append_out_aaa(A, B, E)) -> U3_AAAG(A, B, C, D, append_in_aag(E, C, D))
   U2_AAAG(A, B, C, D, append_out_aaa(A, B, E)) -> APPEND_IN_AAG(E, C, D)
   APPEND_IN_AAG(.(H, L1), L2, .(H, L3)) -> U1_AAG(H, L1, L2, L3, append_in_aag(L1, L2, L3))
   APPEND_IN_AAG(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAG(L1, L2, L3)

The TRS R consists of the following rules:

   append3_in_aaag(A, B, C, D) -> U2_aaag(A, B, C, D, append_in_aaa(A, B, E))
   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))
   U2_aaag(A, B, C, D, append_out_aaa(A, B, E)) -> U3_aaag(A, B, C, D, append_in_aag(E, C, D))
   append_in_aag([], L, L) -> append_out_aag([], L, L)
   append_in_aag(.(H, L1), L2, .(H, L3)) -> U1_aag(H, L1, L2, L3, append_in_aag(L1, L2, L3))
   U1_aag(H, L1, L2, L3, append_out_aag(L1, L2, L3)) -> append_out_aag(.(H, L1), L2, .(H, L3))
   U3_aaag(A, B, C, D, append_out_aag(E, C, D)) -> append3_out_aaag(A, B, C, D)

The argument filtering Pi contains the following mapping:
append3_in_aaag(x1, x2, x3, x4)  =  append3_in_aaag(x4)

U2_aaag(x1, x2, x3, x4, x5)  =  U2_aaag(x4, x5)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)

U3_aaag(x1, x2, x3, x4, x5)  =  U3_aaag(x1, x5)

append_in_aag(x1, x2, x3)  =  append_in_aag(x3)

append_out_aag(x1, x2, x3)  =  append_out_aag(x1, x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

append3_out_aaag(x1, x2, x3, x4)  =  append3_out_aaag(x1, x3)

APPEND3_IN_AAAG(x1, x2, x3, x4)  =  APPEND3_IN_AAAG(x4)

U2_AAAG(x1, x2, x3, x4, x5)  =  U2_AAAG(x4, x5)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA

U1_AAA(x1, x2, x3, x4, x5)  =  U1_AAA(x5)

U3_AAAG(x1, x2, x3, x4, x5)  =  U3_AAAG(x1, x5)

APPEND_IN_AAG(x1, x2, x3)  =  APPEND_IN_AAG(x3)

U1_AAG(x1, x2, x3, x4, x5)  =  U1_AAG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND3_IN_AAAG(A, B, C, D) -> U2_AAAG(A, B, C, D, append_in_aaa(A, B, E))
   APPEND3_IN_AAAG(A, B, C, D) -> APPEND_IN_AAA(A, B, E)
   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> U1_AAA(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAA(L1, L2, L3)
   U2_AAAG(A, B, C, D, append_out_aaa(A, B, E)) -> U3_AAAG(A, B, C, D, append_in_aag(E, C, D))
   U2_AAAG(A, B, C, D, append_out_aaa(A, B, E)) -> APPEND_IN_AAG(E, C, D)
   APPEND_IN_AAG(.(H, L1), L2, .(H, L3)) -> U1_AAG(H, L1, L2, L3, append_in_aag(L1, L2, L3))
   APPEND_IN_AAG(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAG(L1, L2, L3)

The TRS R consists of the following rules:

   append3_in_aaag(A, B, C, D) -> U2_aaag(A, B, C, D, append_in_aaa(A, B, E))
   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))
   U2_aaag(A, B, C, D, append_out_aaa(A, B, E)) -> U3_aaag(A, B, C, D, append_in_aag(E, C, D))
   append_in_aag([], L, L) -> append_out_aag([], L, L)
   append_in_aag(.(H, L1), L2, .(H, L3)) -> U1_aag(H, L1, L2, L3, append_in_aag(L1, L2, L3))
   U1_aag(H, L1, L2, L3, append_out_aag(L1, L2, L3)) -> append_out_aag(.(H, L1), L2, .(H, L3))
   U3_aaag(A, B, C, D, append_out_aag(E, C, D)) -> append3_out_aaag(A, B, C, D)

The argument filtering Pi contains the following mapping:
append3_in_aaag(x1, x2, x3, x4)  =  append3_in_aaag(x4)

U2_aaag(x1, x2, x3, x4, x5)  =  U2_aaag(x4, x5)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)

U3_aaag(x1, x2, x3, x4, x5)  =  U3_aaag(x1, x5)

append_in_aag(x1, x2, x3)  =  append_in_aag(x3)

append_out_aag(x1, x2, x3)  =  append_out_aag(x1, x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

append3_out_aaag(x1, x2, x3, x4)  =  append3_out_aaag(x1, x3)

APPEND3_IN_AAAG(x1, x2, x3, x4)  =  APPEND3_IN_AAAG(x4)

U2_AAAG(x1, x2, x3, x4, x5)  =  U2_AAAG(x4, x5)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA

U1_AAA(x1, x2, x3, x4, x5)  =  U1_AAA(x5)

U3_AAAG(x1, x2, x3, x4, x5)  =  U3_AAAG(x1, x5)

APPEND_IN_AAG(x1, x2, x3)  =  APPEND_IN_AAG(x3)

U1_AAG(x1, x2, x3, x4, x5)  =  U1_AAG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(23) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(24)
Complex Obligation (AND)

----------------------------------------

(25)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAG(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAG(L1, L2, L3)

The TRS R consists of the following rules:

   append3_in_aaag(A, B, C, D) -> U2_aaag(A, B, C, D, append_in_aaa(A, B, E))
   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))
   U2_aaag(A, B, C, D, append_out_aaa(A, B, E)) -> U3_aaag(A, B, C, D, append_in_aag(E, C, D))
   append_in_aag([], L, L) -> append_out_aag([], L, L)
   append_in_aag(.(H, L1), L2, .(H, L3)) -> U1_aag(H, L1, L2, L3, append_in_aag(L1, L2, L3))
   U1_aag(H, L1, L2, L3, append_out_aag(L1, L2, L3)) -> append_out_aag(.(H, L1), L2, .(H, L3))
   U3_aaag(A, B, C, D, append_out_aag(E, C, D)) -> append3_out_aaag(A, B, C, D)

The argument filtering Pi contains the following mapping:
append3_in_aaag(x1, x2, x3, x4)  =  append3_in_aaag(x4)

U2_aaag(x1, x2, x3, x4, x5)  =  U2_aaag(x4, x5)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)

U3_aaag(x1, x2, x3, x4, x5)  =  U3_aaag(x1, x5)

append_in_aag(x1, x2, x3)  =  append_in_aag(x3)

append_out_aag(x1, x2, x3)  =  append_out_aag(x1, x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

append3_out_aaag(x1, x2, x3, x4)  =  append3_out_aaag(x1, x3)

APPEND_IN_AAG(x1, x2, x3)  =  APPEND_IN_AAG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(27)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAG(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAG(L1, L2, L3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPEND_IN_AAG(x1, x2, x3)  =  APPEND_IN_AAG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(28) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAG(.(L3)) -> APPEND_IN_AAG(L3)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPEND_IN_AAG(.(L3)) -> APPEND_IN_AAG(L3)
The graph contains the following edges 1 > 1


----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAA(L1, L2, L3)

The TRS R consists of the following rules:

   append3_in_aaag(A, B, C, D) -> U2_aaag(A, B, C, D, append_in_aaa(A, B, E))
   append_in_aaa([], L, L) -> append_out_aaa([], L, L)
   append_in_aaa(.(H, L1), L2, .(H, L3)) -> U1_aaa(H, L1, L2, L3, append_in_aaa(L1, L2, L3))
   U1_aaa(H, L1, L2, L3, append_out_aaa(L1, L2, L3)) -> append_out_aaa(.(H, L1), L2, .(H, L3))
   U2_aaag(A, B, C, D, append_out_aaa(A, B, E)) -> U3_aaag(A, B, C, D, append_in_aag(E, C, D))
   append_in_aag([], L, L) -> append_out_aag([], L, L)
   append_in_aag(.(H, L1), L2, .(H, L3)) -> U1_aag(H, L1, L2, L3, append_in_aag(L1, L2, L3))
   U1_aag(H, L1, L2, L3, append_out_aag(L1, L2, L3)) -> append_out_aag(.(H, L1), L2, .(H, L3))
   U3_aaag(A, B, C, D, append_out_aag(E, C, D)) -> append3_out_aaag(A, B, C, D)

The argument filtering Pi contains the following mapping:
append3_in_aaag(x1, x2, x3, x4)  =  append3_in_aaag(x4)

U2_aaag(x1, x2, x3, x4, x5)  =  U2_aaag(x4, x5)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U1_aaa(x1, x2, x3, x4, x5)  =  U1_aaa(x5)

.(x1, x2)  =  .(x2)

U3_aaag(x1, x2, x3, x4, x5)  =  U3_aaag(x1, x5)

append_in_aag(x1, x2, x3)  =  append_in_aag(x3)

append_out_aag(x1, x2, x3)  =  append_out_aag(x1, x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

append3_out_aaag(x1, x2, x3, x4)  =  append3_out_aaag(x1, x3)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(33) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(34)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA(.(H, L1), L2, .(H, L3)) -> APPEND_IN_AAA(L1, L2, L3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(35) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA -> APPEND_IN_AAA

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(37) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(append ([]) L L)",
                null
            ],
            [
                "(append (. H L1) L2 (. H L3))",
                "(append L1 L2 L3)"
            ],
            [
                "(append3 A B C D)",
                "(',' (append A B E) (append E C D))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "type": "Nodes",
            "195": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "196": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T55 T56 X50)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X50"],
                    "exprvars": []
                }
            },
            "197": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append (. T62 T61) T63 T12)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": [],
                    "exprvars": []
                }
            },
            "210": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "178": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 3,
                        "term": "(append T21 T22 T12)"
                    },
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(append T21 T22 T12)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": [],
                    "exprvars": []
                }
            },
            "211": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "179": {
                "goal": [{
                    "clause": 0,
                    "scope": 3,
                    "term": "(append T21 T22 T12)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": [],
                    "exprvars": []
                }
            },
            "159": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(',' (append T13 T14 X9) (append X9 T15 T12))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": ["X9"],
                    "exprvars": []
                }
            },
            "119": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(',' (append T13 T14 X9) (append X9 T15 T12))"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(',' (append T13 T14 X9) (append X9 T15 T12))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": ["X9"],
                    "exprvars": []
                }
            },
            "218": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T80 T81 X74)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X74"],
                    "exprvars": []
                }
            },
            "219": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "180": {
                "goal": [{
                    "clause": 1,
                    "scope": 3,
                    "term": "(append T21 T22 T12)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": [],
                    "exprvars": []
                }
            },
            "181": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "160": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(',' (append T13 T14 X9) (append X9 T15 T12))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": ["X9"],
                    "exprvars": []
                }
            },
            "182": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "183": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "184": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T42 T43 T41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T41"],
                    "free": [],
                    "exprvars": []
                }
            },
            "185": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "186": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (append T55 T56 X50) (append (. T58 X50) T57 T12))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": ["X50"],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append3 T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T4"],
                    "free": [],
                    "exprvars": []
                }
            },
            "101": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (append T13 T14 X9) (append X9 T15 T12))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": ["X9"],
                    "exprvars": []
                }
            },
            "167": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T21 T22 T12)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": [],
                    "exprvars": []
                }
            },
            "168": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "206": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 4,
                        "term": "(append T55 T56 X50)"
                    },
                    {
                        "clause": 1,
                        "scope": 4,
                        "term": "(append T55 T56 X50)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X50"],
                    "exprvars": []
                }
            },
            "207": {
                "goal": [{
                    "clause": 0,
                    "scope": 4,
                    "term": "(append T55 T56 X50)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X50"],
                    "exprvars": []
                }
            },
            "208": {
                "goal": [{
                    "clause": 1,
                    "scope": 4,
                    "term": "(append T55 T56 X50)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X50"],
                    "exprvars": []
                }
            },
            "209": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "85": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(append3 T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T4"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 85,
                "label": "CASE"
            },
            {
                "from": 85,
                "to": 101,
                "label": "ONLY EVAL with clause\nappend3(X5, X6, X7, X8) :- ','(append(X5, X6, X9), append(X9, X7, X8)).\nand substitutionT1 -> T13,\nX5 -> T13,\nT2 -> T14,\nX6 -> T14,\nT3 -> T15,\nX7 -> T15,\nT4 -> T12,\nX8 -> T12,\nT9 -> T13,\nT10 -> T14,\nT11 -> T15"
            },
            {
                "from": 101,
                "to": 119,
                "label": "CASE"
            },
            {
                "from": 119,
                "to": 159,
                "label": "PARALLEL"
            },
            {
                "from": 119,
                "to": 160,
                "label": "PARALLEL"
            },
            {
                "from": 159,
                "to": 167,
                "label": "EVAL with clause\nappend([], X14, X14).\nand substitutionT13 -> [],\nT14 -> T21,\nX14 -> T21,\nX9 -> T21,\nT20 -> T21,\nT15 -> T22"
            },
            {
                "from": 159,
                "to": 168,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 160,
                "to": 186,
                "label": "EVAL with clause\nappend(.(X46, X47), X48, .(X46, X49)) :- append(X47, X48, X49).\nand substitutionX46 -> T58,\nX47 -> T55,\nT13 -> .(T58, T55),\nT14 -> T56,\nX48 -> T56,\nX49 -> X50,\nX9 -> .(T58, X50),\nT53 -> T55,\nT54 -> T56,\nT15 -> T57,\nT52 -> T58"
            },
            {
                "from": 160,
                "to": 195,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 167,
                "to": 178,
                "label": "CASE"
            },
            {
                "from": 178,
                "to": 179,
                "label": "PARALLEL"
            },
            {
                "from": 178,
                "to": 180,
                "label": "PARALLEL"
            },
            {
                "from": 179,
                "to": 181,
                "label": "EVAL with clause\nappend([], X21, X21).\nand substitutionT21 -> [],\nT22 -> T29,\nX21 -> T29,\nT12 -> T29"
            },
            {
                "from": 179,
                "to": 182,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 180,
                "to": 184,
                "label": "EVAL with clause\nappend(.(X30, X31), X32, .(X30, X33)) :- append(X31, X32, X33).\nand substitutionX30 -> T38,\nX31 -> T42,\nT21 -> .(T38, T42),\nT22 -> T43,\nX32 -> T43,\nX33 -> T41,\nT12 -> .(T38, T41),\nT39 -> T42,\nT40 -> T43"
            },
            {
                "from": 180,
                "to": 185,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 181,
                "to": 183,
                "label": "SUCCESS"
            },
            {
                "from": 184,
                "to": 167,
                "label": "INSTANCE with matching:\nT21 -> T42\nT22 -> T43\nT12 -> T41"
            },
            {
                "from": 186,
                "to": 196,
                "label": "SPLIT 1"
            },
            {
                "from": 186,
                "to": 197,
                "label": "SPLIT 2\nreplacements:X50 -> T61,\nT58 -> T62,\nT57 -> T63"
            },
            {
                "from": 196,
                "to": 206,
                "label": "CASE"
            },
            {
                "from": 197,
                "to": 167,
                "label": "INSTANCE with matching:\nT21 -> .(T62, T61)\nT22 -> T63"
            },
            {
                "from": 206,
                "to": 207,
                "label": "PARALLEL"
            },
            {
                "from": 206,
                "to": 208,
                "label": "PARALLEL"
            },
            {
                "from": 207,
                "to": 209,
                "label": "EVAL with clause\nappend([], X59, X59).\nand substitutionT55 -> [],\nT56 -> T70,\nX59 -> T70,\nX50 -> T70"
            },
            {
                "from": 207,
                "to": 210,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 208,
                "to": 218,
                "label": "EVAL with clause\nappend(.(X70, X71), X72, .(X70, X73)) :- append(X71, X72, X73).\nand substitutionX70 -> T77,\nX71 -> T80,\nT55 -> .(T77, T80),\nT56 -> T81,\nX72 -> T81,\nX73 -> X74,\nX50 -> .(T77, X74),\nT78 -> T80,\nT79 -> T81"
            },
            {
                "from": 208,
                "to": 219,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 209,
                "to": 211,
                "label": "SUCCESS"
            },
            {
                "from": 218,
                "to": 196,
                "label": "INSTANCE with matching:\nT55 -> T80\nT56 -> T81\nX50 -> X74"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(38)
Obligation:
Triples:

appendA(.(X1, X2), X3, .(X1, X4)) :- appendA(X2, X3, X4).
appendB(.(X1, X2), X3, .(X1, X4)) :- appendB(X2, X3, X4).
append3C([], X1, X2, X3) :- appendA(X1, X2, X3).
append3C(.(X1, X2), X3, X4, X5) :- appendB(X2, X3, X6).
append3C(.(X1, X2), X3, X4, X5) :- ','(appendcB(X2, X3, X6), appendA(.(X1, X6), X4, X5)).

Clauses:

appendcA([], X1, X1).
appendcA(.(X1, X2), X3, .(X1, X4)) :- appendcA(X2, X3, X4).
appendcB([], X1, X1).
appendcB(.(X1, X2), X3, .(X1, X4)) :- appendcB(X2, X3, X4).

Afs:

append3C(x1, x2, x3, x4)  =  append3C(x4)


----------------------------------------

(39) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

append3C_in_4: (f,f,f,b)

appendA_in_3: (f,f,b)

appendB_in_3: (f,f,f)

appendcB_in_3: (f,f,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   APPEND3C_IN_AAAG([], X1, X2, X3) -> U3_AAAG(X1, X2, X3, appendA_in_aag(X1, X2, X3))
   APPEND3C_IN_AAAG([], X1, X2, X3) -> APPENDA_IN_AAG(X1, X2, X3)
   APPENDA_IN_AAG(.(X1, X2), X3, .(X1, X4)) -> U1_AAG(X1, X2, X3, X4, appendA_in_aag(X2, X3, X4))
   APPENDA_IN_AAG(.(X1, X2), X3, .(X1, X4)) -> APPENDA_IN_AAG(X2, X3, X4)
   APPEND3C_IN_AAAG(.(X1, X2), X3, X4, X5) -> U4_AAAG(X1, X2, X3, X4, X5, appendB_in_aaa(X2, X3, X6))
   APPEND3C_IN_AAAG(.(X1, X2), X3, X4, X5) -> APPENDB_IN_AAA(X2, X3, X6)
   APPENDB_IN_AAA(.(X1, X2), X3, .(X1, X4)) -> U2_AAA(X1, X2, X3, X4, appendB_in_aaa(X2, X3, X4))
   APPENDB_IN_AAA(.(X1, X2), X3, .(X1, X4)) -> APPENDB_IN_AAA(X2, X3, X4)
   APPEND3C_IN_AAAG(.(X1, X2), X3, X4, X5) -> U5_AAAG(X1, X2, X3, X4, X5, appendcB_in_aaa(X2, X3, X6))
   U5_AAAG(X1, X2, X3, X4, X5, appendcB_out_aaa(X2, X3, X6)) -> U6_AAAG(X1, X2, X3, X4, X5, appendA_in_aag(.(X1, X6), X4, X5))
   U5_AAAG(X1, X2, X3, X4, X5, appendcB_out_aaa(X2, X3, X6)) -> APPENDA_IN_AAG(.(X1, X6), X4, X5)

The TRS R consists of the following rules:

   appendcB_in_aaa([], X1, X1) -> appendcB_out_aaa([], X1, X1)
   appendcB_in_aaa(.(X1, X2), X3, .(X1, X4)) -> U9_aaa(X1, X2, X3, X4, appendcB_in_aaa(X2, X3, X4))
   U9_aaa(X1, X2, X3, X4, appendcB_out_aaa(X2, X3, X4)) -> appendcB_out_aaa(.(X1, X2), X3, .(X1, X4))

The argument filtering Pi contains the following mapping:
appendA_in_aag(x1, x2, x3)  =  appendA_in_aag(x3)

.(x1, x2)  =  .(x2)

appendB_in_aaa(x1, x2, x3)  =  appendB_in_aaa

appendcB_in_aaa(x1, x2, x3)  =  appendcB_in_aaa

appendcB_out_aaa(x1, x2, x3)  =  appendcB_out_aaa(x1)

U9_aaa(x1, x2, x3, x4, x5)  =  U9_aaa(x5)

[]  =  []

APPEND3C_IN_AAAG(x1, x2, x3, x4)  =  APPEND3C_IN_AAAG(x4)

U3_AAAG(x1, x2, x3, x4)  =  U3_AAAG(x3, x4)

APPENDA_IN_AAG(x1, x2, x3)  =  APPENDA_IN_AAG(x3)

U1_AAG(x1, x2, x3, x4, x5)  =  U1_AAG(x4, x5)

U4_AAAG(x1, x2, x3, x4, x5, x6)  =  U4_AAAG(x5, x6)

APPENDB_IN_AAA(x1, x2, x3)  =  APPENDB_IN_AAA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)

U5_AAAG(x1, x2, x3, x4, x5, x6)  =  U5_AAAG(x5, x6)

U6_AAAG(x1, x2, x3, x4, x5, x6)  =  U6_AAAG(x2, x5, x6)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(40)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND3C_IN_AAAG([], X1, X2, X3) -> U3_AAAG(X1, X2, X3, appendA_in_aag(X1, X2, X3))
   APPEND3C_IN_AAAG([], X1, X2, X3) -> APPENDA_IN_AAG(X1, X2, X3)
   APPENDA_IN_AAG(.(X1, X2), X3, .(X1, X4)) -> U1_AAG(X1, X2, X3, X4, appendA_in_aag(X2, X3, X4))
   APPENDA_IN_AAG(.(X1, X2), X3, .(X1, X4)) -> APPENDA_IN_AAG(X2, X3, X4)
   APPEND3C_IN_AAAG(.(X1, X2), X3, X4, X5) -> U4_AAAG(X1, X2, X3, X4, X5, appendB_in_aaa(X2, X3, X6))
   APPEND3C_IN_AAAG(.(X1, X2), X3, X4, X5) -> APPENDB_IN_AAA(X2, X3, X6)
   APPENDB_IN_AAA(.(X1, X2), X3, .(X1, X4)) -> U2_AAA(X1, X2, X3, X4, appendB_in_aaa(X2, X3, X4))
   APPENDB_IN_AAA(.(X1, X2), X3, .(X1, X4)) -> APPENDB_IN_AAA(X2, X3, X4)
   APPEND3C_IN_AAAG(.(X1, X2), X3, X4, X5) -> U5_AAAG(X1, X2, X3, X4, X5, appendcB_in_aaa(X2, X3, X6))
   U5_AAAG(X1, X2, X3, X4, X5, appendcB_out_aaa(X2, X3, X6)) -> U6_AAAG(X1, X2, X3, X4, X5, appendA_in_aag(.(X1, X6), X4, X5))
   U5_AAAG(X1, X2, X3, X4, X5, appendcB_out_aaa(X2, X3, X6)) -> APPENDA_IN_AAG(.(X1, X6), X4, X5)

The TRS R consists of the following rules:

   appendcB_in_aaa([], X1, X1) -> appendcB_out_aaa([], X1, X1)
   appendcB_in_aaa(.(X1, X2), X3, .(X1, X4)) -> U9_aaa(X1, X2, X3, X4, appendcB_in_aaa(X2, X3, X4))
   U9_aaa(X1, X2, X3, X4, appendcB_out_aaa(X2, X3, X4)) -> appendcB_out_aaa(.(X1, X2), X3, .(X1, X4))

The argument filtering Pi contains the following mapping:
appendA_in_aag(x1, x2, x3)  =  appendA_in_aag(x3)

.(x1, x2)  =  .(x2)

appendB_in_aaa(x1, x2, x3)  =  appendB_in_aaa

appendcB_in_aaa(x1, x2, x3)  =  appendcB_in_aaa

appendcB_out_aaa(x1, x2, x3)  =  appendcB_out_aaa(x1)

U9_aaa(x1, x2, x3, x4, x5)  =  U9_aaa(x5)

[]  =  []

APPEND3C_IN_AAAG(x1, x2, x3, x4)  =  APPEND3C_IN_AAAG(x4)

U3_AAAG(x1, x2, x3, x4)  =  U3_AAAG(x3, x4)

APPENDA_IN_AAG(x1, x2, x3)  =  APPENDA_IN_AAG(x3)

U1_AAG(x1, x2, x3, x4, x5)  =  U1_AAG(x4, x5)

U4_AAAG(x1, x2, x3, x4, x5, x6)  =  U4_AAAG(x5, x6)

APPENDB_IN_AAA(x1, x2, x3)  =  APPENDB_IN_AAA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)

U5_AAAG(x1, x2, x3, x4, x5, x6)  =  U5_AAAG(x5, x6)

U6_AAAG(x1, x2, x3, x4, x5, x6)  =  U6_AAAG(x2, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(41) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 9 less nodes.
----------------------------------------

(42)
Complex Obligation (AND)

----------------------------------------

(43)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPENDB_IN_AAA(.(X1, X2), X3, .(X1, X4)) -> APPENDB_IN_AAA(X2, X3, X4)

The TRS R consists of the following rules:

   appendcB_in_aaa([], X1, X1) -> appendcB_out_aaa([], X1, X1)
   appendcB_in_aaa(.(X1, X2), X3, .(X1, X4)) -> U9_aaa(X1, X2, X3, X4, appendcB_in_aaa(X2, X3, X4))
   U9_aaa(X1, X2, X3, X4, appendcB_out_aaa(X2, X3, X4)) -> appendcB_out_aaa(.(X1, X2), X3, .(X1, X4))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

appendcB_in_aaa(x1, x2, x3)  =  appendcB_in_aaa

appendcB_out_aaa(x1, x2, x3)  =  appendcB_out_aaa(x1)

U9_aaa(x1, x2, x3, x4, x5)  =  U9_aaa(x5)

[]  =  []

APPENDB_IN_AAA(x1, x2, x3)  =  APPENDB_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(44) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(45)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPENDB_IN_AAA(.(X1, X2), X3, .(X1, X4)) -> APPENDB_IN_AAA(X2, X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPENDB_IN_AAA(x1, x2, x3)  =  APPENDB_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(46) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPENDB_IN_AAA -> APPENDB_IN_AAA

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(48)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPENDA_IN_AAG(.(X1, X2), X3, .(X1, X4)) -> APPENDA_IN_AAG(X2, X3, X4)

The TRS R consists of the following rules:

   appendcB_in_aaa([], X1, X1) -> appendcB_out_aaa([], X1, X1)
   appendcB_in_aaa(.(X1, X2), X3, .(X1, X4)) -> U9_aaa(X1, X2, X3, X4, appendcB_in_aaa(X2, X3, X4))
   U9_aaa(X1, X2, X3, X4, appendcB_out_aaa(X2, X3, X4)) -> appendcB_out_aaa(.(X1, X2), X3, .(X1, X4))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

appendcB_in_aaa(x1, x2, x3)  =  appendcB_in_aaa

appendcB_out_aaa(x1, x2, x3)  =  appendcB_out_aaa(x1)

U9_aaa(x1, x2, x3, x4, x5)  =  U9_aaa(x5)

[]  =  []

APPENDA_IN_AAG(x1, x2, x3)  =  APPENDA_IN_AAG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(49) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(50)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPENDA_IN_AAG(.(X1, X2), X3, .(X1, X4)) -> APPENDA_IN_AAG(X2, X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPENDA_IN_AAG(x1, x2, x3)  =  APPENDA_IN_AAG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(51) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(append ([]) L L)",
                null
            ],
            [
                "(append (. H L1) L2 (. H L3))",
                "(append L1 L2 L3)"
            ],
            [
                "(append3 A B C D)",
                "(',' (append A B E) (append E C D))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "79": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (append T22 T23 X16) (append X16 T24 T21))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T21"],
                    "free": ["X16"],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "240": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T45 T46 X40)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X40"],
                    "exprvars": []
                }
            },
            "241": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "242": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 3,
                        "term": "(append T27 T28 T21)"
                    },
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(append T27 T28 T21)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T21"],
                    "free": [],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append3 T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T4"],
                    "free": [],
                    "exprvars": []
                }
            },
            "243": {
                "goal": [{
                    "clause": 0,
                    "scope": 3,
                    "term": "(append T27 T28 T21)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T21"],
                    "free": [],
                    "exprvars": []
                }
            },
            "244": {
                "goal": [{
                    "clause": 1,
                    "scope": 3,
                    "term": "(append T27 T28 T21)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T21"],
                    "free": [],
                    "exprvars": []
                }
            },
            "365": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "234": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(append T22 T23 X16)"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(append T22 T23 X16)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X16"],
                    "exprvars": []
                }
            },
            "235": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(append T22 T23 X16)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X16"],
                    "exprvars": []
                }
            },
            "257": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "236": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(append T22 T23 X16)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X16"],
                    "exprvars": []
                }
            },
            "258": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "237": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "259": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "238": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "239": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "317": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T68 T69 T67)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T67"],
                    "free": [],
                    "exprvars": []
                }
            },
            "83": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T22 T23 X16)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X16"],
                    "exprvars": []
                }
            },
            "84": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T27 T28 T21)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T21"],
                    "free": [],
                    "exprvars": []
                }
            },
            "10": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(append3 T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T4"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 10,
                "label": "CASE"
            },
            {
                "from": 10,
                "to": 79,
                "label": "ONLY EVAL with clause\nappend3(X12, X13, X14, X15) :- ','(append(X12, X13, X16), append(X16, X14, X15)).\nand substitutionT1 -> T22,\nX12 -> T22,\nT2 -> T23,\nX13 -> T23,\nT3 -> T24,\nX14 -> T24,\nT4 -> T21,\nX15 -> T21,\nT18 -> T22,\nT19 -> T23,\nT20 -> T24"
            },
            {
                "from": 79,
                "to": 83,
                "label": "SPLIT 1"
            },
            {
                "from": 79,
                "to": 84,
                "label": "SPLIT 2\nreplacements:X16 -> T27,\nT24 -> T28"
            },
            {
                "from": 83,
                "to": 234,
                "label": "CASE"
            },
            {
                "from": 84,
                "to": 242,
                "label": "CASE"
            },
            {
                "from": 234,
                "to": 235,
                "label": "PARALLEL"
            },
            {
                "from": 234,
                "to": 236,
                "label": "PARALLEL"
            },
            {
                "from": 235,
                "to": 237,
                "label": "EVAL with clause\nappend([], X25, X25).\nand substitutionT22 -> [],\nT23 -> T35,\nX25 -> T35,\nX16 -> T35"
            },
            {
                "from": 235,
                "to": 238,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 236,
                "to": 240,
                "label": "EVAL with clause\nappend(.(X36, X37), X38, .(X36, X39)) :- append(X37, X38, X39).\nand substitutionX36 -> T42,\nX37 -> T45,\nT22 -> .(T42, T45),\nT23 -> T46,\nX38 -> T46,\nX39 -> X40,\nX16 -> .(T42, X40),\nT43 -> T45,\nT44 -> T46"
            },
            {
                "from": 236,
                "to": 241,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 237,
                "to": 239,
                "label": "SUCCESS"
            },
            {
                "from": 240,
                "to": 83,
                "label": "INSTANCE with matching:\nT22 -> T45\nT23 -> T46\nX16 -> X40"
            },
            {
                "from": 242,
                "to": 243,
                "label": "PARALLEL"
            },
            {
                "from": 242,
                "to": 244,
                "label": "PARALLEL"
            },
            {
                "from": 243,
                "to": 257,
                "label": "EVAL with clause\nappend([], X49, X49).\nand substitutionT27 -> [],\nT28 -> T55,\nX49 -> T55,\nT21 -> T55"
            },
            {
                "from": 243,
                "to": 258,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 244,
                "to": 317,
                "label": "EVAL with clause\nappend(.(X58, X59), X60, .(X58, X61)) :- append(X59, X60, X61).\nand substitutionX58 -> T64,\nX59 -> T68,\nT27 -> .(T64, T68),\nT28 -> T69,\nX60 -> T69,\nX61 -> T67,\nT21 -> .(T64, T67),\nT65 -> T68,\nT66 -> T69"
            },
            {
                "from": 244,
                "to": 365,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 257,
                "to": 259,
                "label": "SUCCESS"
            },
            {
                "from": 317,
                "to": 84,
                "label": "INSTANCE with matching:\nT27 -> T68\nT28 -> T69\nT21 -> T67"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(52)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f1_in(T21) -> U1(f79_in(T21), T21)
   U1(f79_out1(X16, T24), T21) -> f1_out1(T24)
   f83_in -> f83_out1
   f83_in -> U2(f83_in)
   U2(f83_out1) -> f83_out1
   f84_in(T55) -> f84_out1([], T55)
   f84_in(.(T64, T67)) -> U3(f84_in(T67), .(T64, T67))
   U3(f84_out1(T68, T69), .(T64, T67)) -> f84_out1(.(T64, T68), T69)
   f79_in(T21) -> U4(f83_in, T21)
   U4(f83_out1, T21) -> U5(f84_in(T21), T21)
   U5(f84_out1(T27, T28), T21) -> f79_out1(T27, T28)

Q is empty.

----------------------------------------

(53) QTRSRRRProof (EQUIVALENT)
Used ordering:
f1_in/1(YES)
U1/2(YES,YES)
f79_in/1(YES)
f79_out1/2(YES,YES)
f1_out1/1(YES)
f83_in/0)
f83_out1/0)
U2/1)YES(
f84_in/1(YES)
f84_out1/2(YES,YES)
[]/0)
./2(YES,YES)
U3/2(YES,YES)
U4/2(YES,YES)
U5/2(YES,YES)

Quasi precedence:
f1_in_1 > U1_2 > f1_out1_1
f1_in_1 > f79_in_1 > f83_in > f83_out1 > f1_out1_1
f1_in_1 > f79_in_1 > U4_2 > f84_in_1 > [] > f1_out1_1
f1_in_1 > f79_in_1 > U4_2 > f84_in_1 > U3_2 > f84_out1_2 > f79_out1_2 > f1_out1_1
f1_in_1 > f79_in_1 > U4_2 > f84_in_1 > U3_2 > f84_out1_2 > ._2 > f1_out1_1
f1_in_1 > f79_in_1 > U4_2 > U5_2 > f79_out1_2 > f1_out1_1


Status:
f1_in_1: multiset status
U1_2: multiset status
f79_in_1: [1]
f79_out1_2: multiset status
f1_out1_1: multiset status
f83_in: multiset status
f83_out1: multiset status
f84_in_1: multiset status
f84_out1_2: multiset status
[]: multiset status
._2: multiset status
U3_2: multiset status
U4_2: multiset status
U5_2: multiset status

With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f1_in(T21) -> U1(f79_in(T21), T21)
   U1(f79_out1(X16, T24), T21) -> f1_out1(T24)
   f83_in -> f83_out1
   f84_in(T55) -> f84_out1([], T55)
   f84_in(.(T64, T67)) -> U3(f84_in(T67), .(T64, T67))
   U3(f84_out1(T68, T69), .(T64, T67)) -> f84_out1(.(T64, T68), T69)
   f79_in(T21) -> U4(f83_in, T21)
   U4(f83_out1, T21) -> U5(f84_in(T21), T21)
   U5(f84_out1(T27, T28), T21) -> f79_out1(T27, T28)




----------------------------------------

(54)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f83_in -> U2(f83_in)
   U2(f83_out1) -> f83_out1

Q is empty.

----------------------------------------

(55) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U2(x_1)) = 2*x_1
   POL(f83_in) = 0
   POL(f83_out1) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U2(f83_out1) -> f83_out1




----------------------------------------

(56)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f83_in -> U2(f83_in)

Q is empty.

----------------------------------------

(57) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(58)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f83_in -> U2(f83_in)

The set Q consists of the following terms:

   f83_in


----------------------------------------

(59) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F83_IN -> F83_IN

The TRS R consists of the following rules:

   f83_in -> U2(f83_in)

The set Q consists of the following terms:

   f83_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(61) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(62)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F83_IN -> F83_IN

R is empty.
The set Q consists of the following terms:

   f83_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(63) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f83_in


----------------------------------------

(64)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F83_IN -> F83_IN

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(65) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 80,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(append ([]) L L)",
                null
            ],
            [
                "(append (. H L1) L2 (. H L3))",
                "(append L1 L2 L3)"
            ],
            [
                "(append3 A B C D)",
                "(',' (append A B E) (append E C D))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "type": "Nodes",
            "220": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T45 T46 X40)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X40"],
                    "exprvars": []
                }
            },
            "221": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "222": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 3,
                        "term": "(append T27 T28 T21)"
                    },
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(append T27 T28 T21)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T21"],
                    "free": [],
                    "exprvars": []
                }
            },
            "212": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(append T22 T23 X16)"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(append T22 T23 X16)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X16"],
                    "exprvars": []
                }
            },
            "223": {
                "goal": [{
                    "clause": 0,
                    "scope": 3,
                    "term": "(append T27 T28 T21)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T21"],
                    "free": [],
                    "exprvars": []
                }
            },
            "213": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(append T22 T23 X16)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X16"],
                    "exprvars": []
                }
            },
            "224": {
                "goal": [{
                    "clause": 1,
                    "scope": 3,
                    "term": "(append T27 T28 T21)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T21"],
                    "free": [],
                    "exprvars": []
                }
            },
            "214": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(append T22 T23 X16)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X16"],
                    "exprvars": []
                }
            },
            "225": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "215": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "226": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "216": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "227": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "80": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append3 T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T4"],
                    "free": [],
                    "exprvars": []
                }
            },
            "217": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "228": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T68 T69 T67)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T67"],
                    "free": [],
                    "exprvars": []
                }
            },
            "81": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(append3 T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T4"],
                    "free": [],
                    "exprvars": []
                }
            },
            "229": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "82": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (append T22 T23 X16) (append X16 T24 T21))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T21"],
                    "free": ["X16"],
                    "exprvars": []
                }
            },
            "86": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T22 T23 X16)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X16"],
                    "exprvars": []
                }
            },
            "87": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T27 T28 T21)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T21"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 80,
                "to": 81,
                "label": "CASE"
            },
            {
                "from": 81,
                "to": 82,
                "label": "ONLY EVAL with clause\nappend3(X12, X13, X14, X15) :- ','(append(X12, X13, X16), append(X16, X14, X15)).\nand substitutionT1 -> T22,\nX12 -> T22,\nT2 -> T23,\nX13 -> T23,\nT3 -> T24,\nX14 -> T24,\nT4 -> T21,\nX15 -> T21,\nT18 -> T22,\nT19 -> T23,\nT20 -> T24"
            },
            {
                "from": 82,
                "to": 86,
                "label": "SPLIT 1"
            },
            {
                "from": 82,
                "to": 87,
                "label": "SPLIT 2\nreplacements:X16 -> T27,\nT24 -> T28"
            },
            {
                "from": 86,
                "to": 212,
                "label": "CASE"
            },
            {
                "from": 87,
                "to": 222,
                "label": "CASE"
            },
            {
                "from": 212,
                "to": 213,
                "label": "PARALLEL"
            },
            {
                "from": 212,
                "to": 214,
                "label": "PARALLEL"
            },
            {
                "from": 213,
                "to": 215,
                "label": "EVAL with clause\nappend([], X25, X25).\nand substitutionT22 -> [],\nT23 -> T35,\nX25 -> T35,\nX16 -> T35"
            },
            {
                "from": 213,
                "to": 216,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 214,
                "to": 220,
                "label": "EVAL with clause\nappend(.(X36, X37), X38, .(X36, X39)) :- append(X37, X38, X39).\nand substitutionX36 -> T42,\nX37 -> T45,\nT22 -> .(T42, T45),\nT23 -> T46,\nX38 -> T46,\nX39 -> X40,\nX16 -> .(T42, X40),\nT43 -> T45,\nT44 -> T46"
            },
            {
                "from": 214,
                "to": 221,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 215,
                "to": 217,
                "label": "SUCCESS"
            },
            {
                "from": 220,
                "to": 86,
                "label": "INSTANCE with matching:\nT22 -> T45\nT23 -> T46\nX16 -> X40"
            },
            {
                "from": 222,
                "to": 223,
                "label": "PARALLEL"
            },
            {
                "from": 222,
                "to": 224,
                "label": "PARALLEL"
            },
            {
                "from": 223,
                "to": 225,
                "label": "EVAL with clause\nappend([], X49, X49).\nand substitutionT27 -> [],\nT28 -> T55,\nX49 -> T55,\nT21 -> T55"
            },
            {
                "from": 223,
                "to": 226,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 224,
                "to": 228,
                "label": "EVAL with clause\nappend(.(X58, X59), X60, .(X58, X61)) :- append(X59, X60, X61).\nand substitutionX58 -> T64,\nX59 -> T68,\nT27 -> .(T64, T68),\nT28 -> T69,\nX60 -> T69,\nX61 -> T67,\nT21 -> .(T64, T67),\nT65 -> T68,\nT66 -> T69"
            },
            {
                "from": 224,
                "to": 229,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 225,
                "to": 227,
                "label": "SUCCESS"
            },
            {
                "from": 228,
                "to": 87,
                "label": "INSTANCE with matching:\nT27 -> T68\nT28 -> T69\nT21 -> T67"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(66)
Complex Obligation (AND)

----------------------------------------

(67)
Obligation:
Rules:
f228_in(T67) -> f87_in(T67) :|: TRUE
f87_out(x) -> f228_out(x) :|: TRUE
f222_in(T21) -> f223_in(T21) :|: TRUE
f223_out(x1) -> f222_out(x1) :|: TRUE
f222_in(x2) -> f224_in(x2) :|: TRUE
f224_out(x3) -> f222_out(x3) :|: TRUE
f87_in(x4) -> f222_in(x4) :|: TRUE
f222_out(x5) -> f87_out(x5) :|: TRUE
f224_in(.(x6, x7)) -> f228_in(x7) :|: TRUE
f228_out(x8) -> f224_out(.(x9, x8)) :|: TRUE
f224_in(x10) -> f229_in :|: TRUE
f229_out -> f224_out(x11) :|: TRUE
f81_out(T4) -> f80_out(T4) :|: TRUE
f80_in(x12) -> f81_in(x12) :|: TRUE
f82_out(x13) -> f81_out(x13) :|: TRUE
f81_in(x14) -> f82_in(x14) :|: TRUE
f86_out -> f87_in(x15) :|: TRUE
f87_out(x16) -> f82_out(x16) :|: TRUE
f82_in(x17) -> f86_in :|: TRUE
Start term: f80_in(T4)

----------------------------------------

(68) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:


----------------------------------------

(69)
TRUE

----------------------------------------

(70)
Obligation:
Rules:
f220_in -> f86_in :|: TRUE
f86_out -> f220_out :|: TRUE
f214_in -> f221_in :|: TRUE
f220_out -> f214_out :|: TRUE
f214_in -> f220_in :|: TRUE
f221_out -> f214_out :|: TRUE
f212_out -> f86_out :|: TRUE
f86_in -> f212_in :|: TRUE
f212_in -> f213_in :|: TRUE
f214_out -> f212_out :|: TRUE
f213_out -> f212_out :|: TRUE
f212_in -> f214_in :|: TRUE
f81_out(T4) -> f80_out(T4) :|: TRUE
f80_in(x) -> f81_in(x) :|: TRUE
f82_out(T21) -> f81_out(T21) :|: TRUE
f81_in(x1) -> f82_in(x1) :|: TRUE
f86_out -> f87_in(x2) :|: TRUE
f87_out(x3) -> f82_out(x3) :|: TRUE
f82_in(x4) -> f86_in :|: TRUE
Start term: f80_in(T4)

----------------------------------------

(71) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f220_in -> f86_in :|: TRUE
f214_in -> f220_in :|: TRUE
f86_in -> f212_in :|: TRUE
f212_in -> f214_in :|: TRUE


----------------------------------------

(72)
Obligation:
Rules:
f220_in -> f86_in :|: TRUE
f214_in -> f220_in :|: TRUE
f86_in -> f212_in :|: TRUE
f212_in -> f214_in :|: TRUE

----------------------------------------

(73) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(74)
Obligation:
Rules:
f214_in -> f214_in :|: TRUE

----------------------------------------

(75) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(76)
Obligation:
Rules:
f214_in -> f214_in :|: TRUE

----------------------------------------

(77) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f214_in -> f214_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(78)
Obligation:

Termination digraph:
Nodes:
(1) f214_in -> f214_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(79) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f214_in()
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(80)
Obligation:
Rules:
f214_in -> f214_in :|: TRUE

----------------------------------------

(81) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc) -> f(1) :|: pc = 1 && TRUE
Witness term starting non-terminating reduction: f(1)
----------------------------------------

(82)
NO
