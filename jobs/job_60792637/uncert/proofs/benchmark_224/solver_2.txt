YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/3Q09m.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

plus(g,a,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 7 ms]
        (20) QDP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
Clauses:

p(s(0), 0).
p(s(s(X)), s(s(Y))) :- p(s(X), s(Y)).
plus(0, Y, Y).
plus(s(X), Y, s(Z)) :- ','(p(s(X), U), plus(U, Y, Z)).


Query: plus(g,a,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

plus_in_3: (b,f,f)

p_in_2: (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   plus_in_gaa(0, Y, Y) -> plus_out_gaa(0, Y, Y)
   plus_in_gaa(s(X), Y, s(Z)) -> U2_gaa(X, Y, Z, p_in_ga(s(X), U))
   p_in_ga(s(0), 0) -> p_out_ga(s(0), 0)
   p_in_ga(s(s(X)), s(s(Y))) -> U1_ga(X, Y, p_in_ga(s(X), s(Y)))
   U1_ga(X, Y, p_out_ga(s(X), s(Y))) -> p_out_ga(s(s(X)), s(s(Y)))
   U2_gaa(X, Y, Z, p_out_ga(s(X), U)) -> U3_gaa(X, Y, Z, plus_in_gaa(U, Y, Z))
   U3_gaa(X, Y, Z, plus_out_gaa(U, Y, Z)) -> plus_out_gaa(s(X), Y, s(Z))

The argument filtering Pi contains the following mapping:
plus_in_gaa(x1, x2, x3)  =  plus_in_gaa(x1)

0  =  0

plus_out_gaa(x1, x2, x3)  =  plus_out_gaa

s(x1)  =  s(x1)

U2_gaa(x1, x2, x3, x4)  =  U2_gaa(x4)

p_in_ga(x1, x2)  =  p_in_ga(x1)

p_out_ga(x1, x2)  =  p_out_ga(x2)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   plus_in_gaa(0, Y, Y) -> plus_out_gaa(0, Y, Y)
   plus_in_gaa(s(X), Y, s(Z)) -> U2_gaa(X, Y, Z, p_in_ga(s(X), U))
   p_in_ga(s(0), 0) -> p_out_ga(s(0), 0)
   p_in_ga(s(s(X)), s(s(Y))) -> U1_ga(X, Y, p_in_ga(s(X), s(Y)))
   U1_ga(X, Y, p_out_ga(s(X), s(Y))) -> p_out_ga(s(s(X)), s(s(Y)))
   U2_gaa(X, Y, Z, p_out_ga(s(X), U)) -> U3_gaa(X, Y, Z, plus_in_gaa(U, Y, Z))
   U3_gaa(X, Y, Z, plus_out_gaa(U, Y, Z)) -> plus_out_gaa(s(X), Y, s(Z))

The argument filtering Pi contains the following mapping:
plus_in_gaa(x1, x2, x3)  =  plus_in_gaa(x1)

0  =  0

plus_out_gaa(x1, x2, x3)  =  plus_out_gaa

s(x1)  =  s(x1)

U2_gaa(x1, x2, x3, x4)  =  U2_gaa(x4)

p_in_ga(x1, x2)  =  p_in_ga(x1)

p_out_ga(x1, x2)  =  p_out_ga(x2)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x4)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   PLUS_IN_GAA(s(X), Y, s(Z)) -> U2_GAA(X, Y, Z, p_in_ga(s(X), U))
   PLUS_IN_GAA(s(X), Y, s(Z)) -> P_IN_GA(s(X), U)
   P_IN_GA(s(s(X)), s(s(Y))) -> U1_GA(X, Y, p_in_ga(s(X), s(Y)))
   P_IN_GA(s(s(X)), s(s(Y))) -> P_IN_GA(s(X), s(Y))
   U2_GAA(X, Y, Z, p_out_ga(s(X), U)) -> U3_GAA(X, Y, Z, plus_in_gaa(U, Y, Z))
   U2_GAA(X, Y, Z, p_out_ga(s(X), U)) -> PLUS_IN_GAA(U, Y, Z)

The TRS R consists of the following rules:

   plus_in_gaa(0, Y, Y) -> plus_out_gaa(0, Y, Y)
   plus_in_gaa(s(X), Y, s(Z)) -> U2_gaa(X, Y, Z, p_in_ga(s(X), U))
   p_in_ga(s(0), 0) -> p_out_ga(s(0), 0)
   p_in_ga(s(s(X)), s(s(Y))) -> U1_ga(X, Y, p_in_ga(s(X), s(Y)))
   U1_ga(X, Y, p_out_ga(s(X), s(Y))) -> p_out_ga(s(s(X)), s(s(Y)))
   U2_gaa(X, Y, Z, p_out_ga(s(X), U)) -> U3_gaa(X, Y, Z, plus_in_gaa(U, Y, Z))
   U3_gaa(X, Y, Z, plus_out_gaa(U, Y, Z)) -> plus_out_gaa(s(X), Y, s(Z))

The argument filtering Pi contains the following mapping:
plus_in_gaa(x1, x2, x3)  =  plus_in_gaa(x1)

0  =  0

plus_out_gaa(x1, x2, x3)  =  plus_out_gaa

s(x1)  =  s(x1)

U2_gaa(x1, x2, x3, x4)  =  U2_gaa(x4)

p_in_ga(x1, x2)  =  p_in_ga(x1)

p_out_ga(x1, x2)  =  p_out_ga(x2)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x4)

PLUS_IN_GAA(x1, x2, x3)  =  PLUS_IN_GAA(x1)

U2_GAA(x1, x2, x3, x4)  =  U2_GAA(x4)

P_IN_GA(x1, x2)  =  P_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

U3_GAA(x1, x2, x3, x4)  =  U3_GAA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PLUS_IN_GAA(s(X), Y, s(Z)) -> U2_GAA(X, Y, Z, p_in_ga(s(X), U))
   PLUS_IN_GAA(s(X), Y, s(Z)) -> P_IN_GA(s(X), U)
   P_IN_GA(s(s(X)), s(s(Y))) -> U1_GA(X, Y, p_in_ga(s(X), s(Y)))
   P_IN_GA(s(s(X)), s(s(Y))) -> P_IN_GA(s(X), s(Y))
   U2_GAA(X, Y, Z, p_out_ga(s(X), U)) -> U3_GAA(X, Y, Z, plus_in_gaa(U, Y, Z))
   U2_GAA(X, Y, Z, p_out_ga(s(X), U)) -> PLUS_IN_GAA(U, Y, Z)

The TRS R consists of the following rules:

   plus_in_gaa(0, Y, Y) -> plus_out_gaa(0, Y, Y)
   plus_in_gaa(s(X), Y, s(Z)) -> U2_gaa(X, Y, Z, p_in_ga(s(X), U))
   p_in_ga(s(0), 0) -> p_out_ga(s(0), 0)
   p_in_ga(s(s(X)), s(s(Y))) -> U1_ga(X, Y, p_in_ga(s(X), s(Y)))
   U1_ga(X, Y, p_out_ga(s(X), s(Y))) -> p_out_ga(s(s(X)), s(s(Y)))
   U2_gaa(X, Y, Z, p_out_ga(s(X), U)) -> U3_gaa(X, Y, Z, plus_in_gaa(U, Y, Z))
   U3_gaa(X, Y, Z, plus_out_gaa(U, Y, Z)) -> plus_out_gaa(s(X), Y, s(Z))

The argument filtering Pi contains the following mapping:
plus_in_gaa(x1, x2, x3)  =  plus_in_gaa(x1)

0  =  0

plus_out_gaa(x1, x2, x3)  =  plus_out_gaa

s(x1)  =  s(x1)

U2_gaa(x1, x2, x3, x4)  =  U2_gaa(x4)

p_in_ga(x1, x2)  =  p_in_ga(x1)

p_out_ga(x1, x2)  =  p_out_ga(x2)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x4)

PLUS_IN_GAA(x1, x2, x3)  =  PLUS_IN_GAA(x1)

U2_GAA(x1, x2, x3, x4)  =  U2_GAA(x4)

P_IN_GA(x1, x2)  =  P_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

U3_GAA(x1, x2, x3, x4)  =  U3_GAA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GA(s(s(X)), s(s(Y))) -> P_IN_GA(s(X), s(Y))

The TRS R consists of the following rules:

   plus_in_gaa(0, Y, Y) -> plus_out_gaa(0, Y, Y)
   plus_in_gaa(s(X), Y, s(Z)) -> U2_gaa(X, Y, Z, p_in_ga(s(X), U))
   p_in_ga(s(0), 0) -> p_out_ga(s(0), 0)
   p_in_ga(s(s(X)), s(s(Y))) -> U1_ga(X, Y, p_in_ga(s(X), s(Y)))
   U1_ga(X, Y, p_out_ga(s(X), s(Y))) -> p_out_ga(s(s(X)), s(s(Y)))
   U2_gaa(X, Y, Z, p_out_ga(s(X), U)) -> U3_gaa(X, Y, Z, plus_in_gaa(U, Y, Z))
   U3_gaa(X, Y, Z, plus_out_gaa(U, Y, Z)) -> plus_out_gaa(s(X), Y, s(Z))

The argument filtering Pi contains the following mapping:
plus_in_gaa(x1, x2, x3)  =  plus_in_gaa(x1)

0  =  0

plus_out_gaa(x1, x2, x3)  =  plus_out_gaa

s(x1)  =  s(x1)

U2_gaa(x1, x2, x3, x4)  =  U2_gaa(x4)

p_in_ga(x1, x2)  =  p_in_ga(x1)

p_out_ga(x1, x2)  =  p_out_ga(x2)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x4)

P_IN_GA(x1, x2)  =  P_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GA(s(s(X)), s(s(Y))) -> P_IN_GA(s(X), s(Y))

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

P_IN_GA(x1, x2)  =  P_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GA(s(s(X))) -> P_IN_GA(s(X))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*P_IN_GA(s(s(X))) -> P_IN_GA(s(X))
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GAA(X, Y, Z, p_out_ga(s(X), U)) -> PLUS_IN_GAA(U, Y, Z)
   PLUS_IN_GAA(s(X), Y, s(Z)) -> U2_GAA(X, Y, Z, p_in_ga(s(X), U))

The TRS R consists of the following rules:

   plus_in_gaa(0, Y, Y) -> plus_out_gaa(0, Y, Y)
   plus_in_gaa(s(X), Y, s(Z)) -> U2_gaa(X, Y, Z, p_in_ga(s(X), U))
   p_in_ga(s(0), 0) -> p_out_ga(s(0), 0)
   p_in_ga(s(s(X)), s(s(Y))) -> U1_ga(X, Y, p_in_ga(s(X), s(Y)))
   U1_ga(X, Y, p_out_ga(s(X), s(Y))) -> p_out_ga(s(s(X)), s(s(Y)))
   U2_gaa(X, Y, Z, p_out_ga(s(X), U)) -> U3_gaa(X, Y, Z, plus_in_gaa(U, Y, Z))
   U3_gaa(X, Y, Z, plus_out_gaa(U, Y, Z)) -> plus_out_gaa(s(X), Y, s(Z))

The argument filtering Pi contains the following mapping:
plus_in_gaa(x1, x2, x3)  =  plus_in_gaa(x1)

0  =  0

plus_out_gaa(x1, x2, x3)  =  plus_out_gaa

s(x1)  =  s(x1)

U2_gaa(x1, x2, x3, x4)  =  U2_gaa(x4)

p_in_ga(x1, x2)  =  p_in_ga(x1)

p_out_ga(x1, x2)  =  p_out_ga(x2)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

U3_gaa(x1, x2, x3, x4)  =  U3_gaa(x4)

PLUS_IN_GAA(x1, x2, x3)  =  PLUS_IN_GAA(x1)

U2_GAA(x1, x2, x3, x4)  =  U2_GAA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GAA(X, Y, Z, p_out_ga(s(X), U)) -> PLUS_IN_GAA(U, Y, Z)
   PLUS_IN_GAA(s(X), Y, s(Z)) -> U2_GAA(X, Y, Z, p_in_ga(s(X), U))

The TRS R consists of the following rules:

   p_in_ga(s(0), 0) -> p_out_ga(s(0), 0)
   p_in_ga(s(s(X)), s(s(Y))) -> U1_ga(X, Y, p_in_ga(s(X), s(Y)))
   U1_ga(X, Y, p_out_ga(s(X), s(Y))) -> p_out_ga(s(s(X)), s(s(Y)))

The argument filtering Pi contains the following mapping:
0  =  0

s(x1)  =  s(x1)

p_in_ga(x1, x2)  =  p_in_ga(x1)

p_out_ga(x1, x2)  =  p_out_ga(x2)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

PLUS_IN_GAA(x1, x2, x3)  =  PLUS_IN_GAA(x1)

U2_GAA(x1, x2, x3, x4)  =  U2_GAA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GAA(p_out_ga(U)) -> PLUS_IN_GAA(U)
   PLUS_IN_GAA(s(X)) -> U2_GAA(p_in_ga(s(X)))

The TRS R consists of the following rules:

   p_in_ga(s(0)) -> p_out_ga(0)
   p_in_ga(s(s(X))) -> U1_ga(p_in_ga(s(X)))
   U1_ga(p_out_ga(s(Y))) -> p_out_ga(s(s(Y)))

The set Q consists of the following terms:

   p_in_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U2_GAA(p_out_ga(U)) -> PLUS_IN_GAA(U)
   PLUS_IN_GAA(s(X)) -> U2_GAA(p_in_ga(s(X)))

Strictly oriented rules of the TRS R:

   p_in_ga(s(0)) -> p_out_ga(0)
   p_in_ga(s(s(X))) -> U1_ga(p_in_ga(s(X)))
   U1_ga(p_out_ga(s(Y))) -> p_out_ga(s(s(Y)))

Used ordering: Knuth-Bendix order [KBO] with precedence:0 > s_1 > p_in_ga_1 > U1_ga_1 > U2_GAA_1 > PLUS_IN_GAA_1 > p_out_ga_1

and weight map:

   0=1
   p_in_ga_1=1
   s_1=4
   p_out_ga_1=3
   U1_ga_1=4
   U2_GAA_1=1
   PLUS_IN_GAA_1=3

The variable weight is 1

----------------------------------------

(20)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   p_in_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(22)
YES
