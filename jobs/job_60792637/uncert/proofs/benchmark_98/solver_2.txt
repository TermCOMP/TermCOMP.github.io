YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/DHowr.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

mergesort(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(2) TRIPLES
(3) TriplesToPiDPProof [SOUND, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) PiDP
        (22) PiDPToQDPProof [SOUND, 0 ms]
        (23) QDP
        (24) TransformationProof [EQUIVALENT, 0 ms]
        (25) QDP
        (26) QDPQMonotonicMRRProof [EQUIVALENT, 35 ms]
        (27) QDP
        (28) DependencyGraphProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) UsableRulesProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) QReductionProof [EQUIVALENT, 0 ms]
        (33) QDP
        (34) QDPQMonotonicMRRProof [EQUIVALENT, 4 ms]
        (35) QDP
        (36) DependencyGraphProof [EQUIVALENT, 0 ms]
        (37) TRUE


----------------------------------------

(0)
Obligation:
Clauses:

mergesort([], []).
mergesort(.(X, []), .(X, [])).
mergesort(.(X, .(Y, Xs)), Ys) :- ','(split(.(X, .(Y, Xs)), X1s, X2s), ','(mergesort(X1s, Y1s), ','(mergesort(X2s, Y2s), merge(Y1s, Y2s, Ys)))).
split([], [], []).
split(.(X, Xs), .(X, Ys), Zs) :- split(Xs, Zs, Ys).
merge([], Xs, Xs).
merge(Xs, [], Xs).
merge(.(X, Xs), .(Y, Ys), .(X, Zs)) :- ','(=(X, Y), merge(.(X, Xs), Ys, Zs)).


Query: mergesort(g,a)
----------------------------------------

(1) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(mergesort ([]) ([]))",
                null
            ],
            [
                "(mergesort (. X ([])) (. X ([])))",
                null
            ],
            [
                "(mergesort (. X (. Y Xs)) Ys)",
                "(',' (split (. X (. Y Xs)) X1s X2s) (',' (mergesort X1s Y1s) (',' (mergesort X2s Y2s) (merge Y1s Y2s Ys))))"
            ],
            [
                "(split ([]) ([]) ([]))",
                null
            ],
            [
                "(split (. X Xs) (. X Ys) Zs)",
                "(split Xs Zs Ys)"
            ],
            [
                "(merge ([]) Xs Xs)",
                null
            ],
            [
                "(merge Xs ([]) Xs)",
                null
            ],
            [
                "(merge (. X Xs) (. Y Ys) (. X Zs))",
                "(',' (= X Y) (merge (. X Xs) Ys Zs))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "44": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(mergesort T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(mergesort T1 T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(mergesort T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "470": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (= T62 T64) (merge (. T62 T63) T65 T67))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T62",
                        "T63",
                        "T64",
                        "T65"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "471": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "230": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (mergesort (. T21 T25) X22) (',' (mergesort T24 X23) (merge X22 X23 T14)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T21",
                        "T24",
                        "T25"
                    ],
                    "free": [
                        "X22",
                        "X23"
                    ],
                    "exprvars": []
                }
            },
            "472": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge (. T69 T63) T65 T67)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T63",
                        "T65",
                        "T69"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "231": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(split (. T22 T23) X41 X40)"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(split (. T22 T23) X41 X40)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T22",
                        "T23"
                    ],
                    "free": [
                        "X40",
                        "X41"
                    ],
                    "exprvars": []
                }
            },
            "473": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "232": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(split (. T22 T23) X41 X40)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T22",
                        "T23"
                    ],
                    "free": [
                        "X40",
                        "X41"
                    ],
                    "exprvars": []
                }
            },
            "156": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "239": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(split T31 X59 X58)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T31"],
                    "free": [
                        "X58",
                        "X59"
                    ],
                    "exprvars": []
                }
            },
            "52": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(mergesort ([]) T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(mergesort ([]) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "54": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(mergesort T1 T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(mergesort T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(mergesort T1 T2)",
                        "(mergesort ([]) ([]))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "55": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(mergesort ([]) T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(mergesort ([]) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "56": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(mergesort ([]) T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "57": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "58": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(mergesort (. T4 ([])) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T4"],
                    "free": [],
                    "exprvars": []
                }
            },
            "59": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(mergesort T1 T2)"
                }],
                "kb": {
                    "nonunifying": [
                        [
                            "(mergesort T1 T2)",
                            "(mergesort ([]) ([]))"
                        ],
                        [
                            "(mergesort T1 T2)",
                            "(mergesort (. X7 ([])) (. X7 ([])))"
                        ]
                    ],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": ["X7"],
                    "exprvars": []
                }
            },
            "240": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 4,
                        "term": "(split T31 X59 X58)"
                    },
                    {
                        "clause": 4,
                        "scope": 4,
                        "term": "(split T31 X59 X58)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T31"],
                    "free": [
                        "X58",
                        "X59"
                    ],
                    "exprvars": []
                }
            },
            "164": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(',' (split (. T10 (. T11 T12)) X20 X21) (',' (mergesort X20 X22) (',' (mergesort X21 X23) (merge X22 X23 T14))))"
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(',' (split (. T10 (. T11 T12)) X20 X21) (',' (mergesort X20 X22) (',' (mergesort X21 X23) (merge X22 X23 T14))))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T10",
                        "T11",
                        "T12"
                    ],
                    "free": [
                        "X20",
                        "X21",
                        "X22",
                        "X23"
                    ],
                    "exprvars": []
                }
            },
            "241": {
                "goal": [{
                    "clause": 3,
                    "scope": 4,
                    "term": "(split T31 X59 X58)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T31"],
                    "free": [
                        "X58",
                        "X59"
                    ],
                    "exprvars": []
                }
            },
            "242": {
                "goal": [{
                    "clause": 4,
                    "scope": 4,
                    "term": "(split T31 X59 X58)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T31"],
                    "free": [
                        "X58",
                        "X59"
                    ],
                    "exprvars": []
                }
            },
            "243": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "244": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(mergesort T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "245": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "60": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(mergesort (. T4 ([])) T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T4"],
                    "free": [],
                    "exprvars": []
                }
            },
            "61": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "170": {
                "goal": [{
                    "clause": 4,
                    "scope": 2,
                    "term": "(',' (split (. T10 (. T11 T12)) X20 X21) (',' (mergesort X20 X22) (',' (mergesort X21 X23) (merge X22 X23 T14))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T10",
                        "T11",
                        "T12"
                    ],
                    "free": [
                        "X20",
                        "X21",
                        "X22",
                        "X23"
                    ],
                    "exprvars": []
                }
            },
            "451": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(mergesort (. T21 T25) X22)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T21",
                        "T25"
                    ],
                    "free": ["X22"],
                    "exprvars": []
                }
            },
            "452": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (mergesort T24 X23) (merge T38 X23 T14))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T24",
                        "T38"
                    ],
                    "free": ["X23"],
                    "exprvars": []
                }
            },
            "454": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(mergesort T24 X23)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T24"],
                    "free": ["X23"],
                    "exprvars": []
                }
            },
            "455": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(merge T38 T39 T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "412": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(split T37 X77 X76)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T37"],
                    "free": [
                        "X76",
                        "X77"
                    ],
                    "exprvars": []
                }
            },
            "414": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "459": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 5,
                        "term": "(merge T38 T39 T14)"
                    },
                    {
                        "clause": 6,
                        "scope": 5,
                        "term": "(merge T38 T39 T14)"
                    },
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(merge T38 T39 T14)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "140": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (split (. T10 (. T11 T12)) X20 X21) (',' (mergesort X20 X22) (',' (mergesort X21 X23) (merge X22 X23 T14))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T10",
                        "T11",
                        "T12"
                    ],
                    "free": [
                        "X20",
                        "X21",
                        "X22",
                        "X23"
                    ],
                    "exprvars": []
                }
            },
            "460": {
                "goal": [{
                    "clause": 5,
                    "scope": 5,
                    "term": "(merge T38 T39 T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "461": {
                "goal": [
                    {
                        "clause": 6,
                        "scope": 5,
                        "term": "(merge T38 T39 T14)"
                    },
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(merge T38 T39 T14)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "462": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "463": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "464": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "465": {
                "goal": [{
                    "clause": 6,
                    "scope": 5,
                    "term": "(merge T38 T39 T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "466": {
                "goal": [{
                    "clause": 7,
                    "scope": 5,
                    "term": "(merge T38 T39 T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T38",
                        "T39"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "225": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (split (. T22 T23) X41 X40) (',' (mergesort (. T21 X40) X22) (',' (mergesort X41 X23) (merge X22 X23 T14))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T21",
                        "T22",
                        "T23"
                    ],
                    "free": [
                        "X22",
                        "X23",
                        "X40",
                        "X41"
                    ],
                    "exprvars": []
                }
            },
            "467": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "468": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "469": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "229": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(split (. T22 T23) X41 X40)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T22",
                        "T23"
                    ],
                    "free": [
                        "X40",
                        "X41"
                    ],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 44,
                "label": "CASE"
            },
            {
                "from": 44,
                "to": 52,
                "label": "EVAL with clause\nmergesort([], []).\nand substitutionT1 -> [],\nT2 -> []"
            },
            {
                "from": 44,
                "to": 54,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 52,
                "to": 55,
                "label": "SUCCESS"
            },
            {
                "from": 54,
                "to": 58,
                "label": "EVAL with clause\nmergesort(.(X7, []), .(X7, [])).\nand substitutionX7 -> T4,\nT1 -> .(T4, []),\nT2 -> .(T4, [])"
            },
            {
                "from": 54,
                "to": 59,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 55,
                "to": 56,
                "label": "BACKTRACK\nfor clause: mergesort(.(X, []), .(X, []))because of non-unification"
            },
            {
                "from": 56,
                "to": 57,
                "label": "BACKTRACK\nfor clause: mergesort(.(X, .(Y, Xs)), Ys) :- ','(split(.(X, .(Y, Xs)), X1s, X2s), ','(mergesort(X1s, Y1s), ','(mergesort(X2s, Y2s), merge(Y1s, Y2s, Ys))))because of non-unification"
            },
            {
                "from": 58,
                "to": 60,
                "label": "SUCCESS"
            },
            {
                "from": 59,
                "to": 140,
                "label": "EVAL with clause\nmergesort(.(X16, .(X17, X18)), X19) :- ','(split(.(X16, .(X17, X18)), X20, X21), ','(mergesort(X20, X22), ','(mergesort(X21, X23), merge(X22, X23, X19)))).\nand substitutionX16 -> T10,\nX17 -> T11,\nX18 -> T12,\nT1 -> .(T10, .(T11, T12)),\nT2 -> T14,\nX19 -> T14,\nT13 -> T14"
            },
            {
                "from": 59,
                "to": 156,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 60,
                "to": 61,
                "label": "BACKTRACK\nfor clause: mergesort(.(X, .(Y, Xs)), Ys) :- ','(split(.(X, .(Y, Xs)), X1s, X2s), ','(mergesort(X1s, Y1s), ','(mergesort(X2s, Y2s), merge(Y1s, Y2s, Ys))))because of non-unification"
            },
            {
                "from": 140,
                "to": 164,
                "label": "CASE"
            },
            {
                "from": 164,
                "to": 170,
                "label": "BACKTRACK\nfor clause: split([], [], [])because of non-unification"
            },
            {
                "from": 170,
                "to": 225,
                "label": "ONLY EVAL with clause\nsplit(.(X36, X37), .(X36, X38), X39) :- split(X37, X39, X38).\nand substitutionT10 -> T21,\nX36 -> T21,\nT11 -> T22,\nT12 -> T23,\nX37 -> .(T22, T23),\nX38 -> X40,\nX20 -> .(T21, X40),\nX21 -> X41,\nX39 -> X41"
            },
            {
                "from": 225,
                "to": 229,
                "label": "SPLIT 1"
            },
            {
                "from": 225,
                "to": 230,
                "label": "SPLIT 2\nnew knowledge:\nT22 is ground\nT23 is ground\nT24 is ground\nT25 is ground\nreplacements:X41 -> T24,\nX40 -> T25"
            },
            {
                "from": 229,
                "to": 231,
                "label": "CASE"
            },
            {
                "from": 230,
                "to": 451,
                "label": "SPLIT 1"
            },
            {
                "from": 230,
                "to": 452,
                "label": "SPLIT 2\nnew knowledge:\nT21 is ground\nT25 is ground\nT38 is ground\nreplacements:X22 -> T38"
            },
            {
                "from": 231,
                "to": 232,
                "label": "BACKTRACK\nfor clause: split([], [], [])because of non-unification"
            },
            {
                "from": 232,
                "to": 239,
                "label": "ONLY EVAL with clause\nsplit(.(X54, X55), .(X54, X56), X57) :- split(X55, X57, X56).\nand substitutionT22 -> T30,\nX54 -> T30,\nT23 -> T31,\nX55 -> T31,\nX56 -> X58,\nX41 -> .(T30, X58),\nX40 -> X59,\nX57 -> X59"
            },
            {
                "from": 239,
                "to": 240,
                "label": "CASE"
            },
            {
                "from": 240,
                "to": 241,
                "label": "PARALLEL"
            },
            {
                "from": 240,
                "to": 242,
                "label": "PARALLEL"
            },
            {
                "from": 241,
                "to": 243,
                "label": "EVAL with clause\nsplit([], [], []).\nand substitutionT31 -> [],\nX59 -> [],\nX58 -> []"
            },
            {
                "from": 241,
                "to": 244,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 242,
                "to": 412,
                "label": "EVAL with clause\nsplit(.(X72, X73), .(X72, X74), X75) :- split(X73, X75, X74).\nand substitutionX72 -> T36,\nX73 -> T37,\nT31 -> .(T36, T37),\nX74 -> X76,\nX59 -> .(T36, X76),\nX58 -> X77,\nX75 -> X77"
            },
            {
                "from": 242,
                "to": 414,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 243,
                "to": 245,
                "label": "SUCCESS"
            },
            {
                "from": 412,
                "to": 239,
                "label": "INSTANCE with matching:\nT31 -> T37\nX59 -> X77\nX58 -> X76"
            },
            {
                "from": 451,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> .(T21, T25)\nT2 -> X22"
            },
            {
                "from": 452,
                "to": 454,
                "label": "SPLIT 1"
            },
            {
                "from": 452,
                "to": 455,
                "label": "SPLIT 2\nnew knowledge:\nT24 is ground\nT39 is ground\nreplacements:X23 -> T39"
            },
            {
                "from": 454,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T24\nT2 -> X23"
            },
            {
                "from": 455,
                "to": 459,
                "label": "CASE"
            },
            {
                "from": 459,
                "to": 460,
                "label": "PARALLEL"
            },
            {
                "from": 459,
                "to": 461,
                "label": "PARALLEL"
            },
            {
                "from": 460,
                "to": 462,
                "label": "EVAL with clause\nmerge([], X84, X84).\nand substitutionT38 -> [],\nT39 -> T46,\nX84 -> T46,\nT14 -> T46"
            },
            {
                "from": 460,
                "to": 463,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 461,
                "to": 465,
                "label": "PARALLEL"
            },
            {
                "from": 461,
                "to": 466,
                "label": "PARALLEL"
            },
            {
                "from": 462,
                "to": 464,
                "label": "SUCCESS"
            },
            {
                "from": 465,
                "to": 467,
                "label": "EVAL with clause\nmerge(X89, [], X89).\nand substitutionT38 -> T51,\nX89 -> T51,\nT39 -> [],\nT14 -> T51"
            },
            {
                "from": 465,
                "to": 468,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 466,
                "to": 470,
                "label": "EVAL with clause\nmerge(.(X100, X101), .(X102, X103), .(X100, X104)) :- ','(=(X100, X102), merge(.(X100, X101), X103, X104)).\nand substitutionX100 -> T62,\nX101 -> T63,\nT38 -> .(T62, T63),\nX102 -> T64,\nX103 -> T65,\nT39 -> .(T64, T65),\nX104 -> T67,\nT14 -> .(T62, T67),\nT66 -> T67"
            },
            {
                "from": 466,
                "to": 471,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 467,
                "to": 469,
                "label": "SUCCESS"
            },
            {
                "from": 470,
                "to": 472,
                "label": "UNIFY CASE with substitutionT62 -> T69,\nT64 -> T69"
            },
            {
                "from": 470,
                "to": 473,
                "label": "UNIFY-BACKTRACK"
            },
            {
                "from": 472,
                "to": 455,
                "label": "INSTANCE with matching:\nT38 -> .(T69, T63)\nT39 -> T65\nT14 -> T67"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Triples:

splitA(.(X1, X2), .(X1, X3), X4) :- splitA(X2, X4, X3).
mergeC(.(X1, X2), .(X1, X3), .(X1, X4)) :- mergeC(.(X1, X2), X3, X4).
mergesortB(.(X1, .(X2, X3)), X4) :- splitA(X3, X5, X6).
mergesortB(.(X1, .(X2, X3)), X4) :- ','(splitcD(X2, X3, X5, X6), mergesortB(.(X1, X6), X7)).
mergesortB(.(X1, .(X2, X3)), X4) :- ','(splitcD(X2, X3, X5, X6), ','(mergesortcB(.(X1, X6), X7), mergesortB(X5, X8))).
mergesortB(.(X1, .(X2, X3)), X4) :- ','(splitcD(X2, X3, X5, X6), ','(mergesortcB(.(X1, X6), X7), ','(mergesortcB(X5, X8), mergeC(X7, X8, X4)))).

Clauses:

splitcA([], [], []).
splitcA(.(X1, X2), .(X1, X3), X4) :- splitcA(X2, X4, X3).
mergesortcB([], []).
mergesortcB(.(X1, []), .(X1, [])).
mergesortcB(.(X1, .(X2, X3)), X4) :- ','(splitcD(X2, X3, X5, X6), ','(mergesortcB(.(X1, X6), X7), ','(mergesortcB(X5, X8), mergecC(X7, X8, X4)))).
mergecC([], X1, X1).
mergecC(X1, [], X1).
mergecC(.(X1, X2), .(X1, X3), .(X1, X4)) :- mergecC(.(X1, X2), X3, X4).
splitcD(X1, X2, .(X1, X3), X4) :- splitcA(X2, X4, X3).

Afs:

mergesortB(x1, x2)  =  mergesortB(x1)


----------------------------------------

(3) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

mergesortB_in_2: (b,f)

splitA_in_3: (b,f,f)

splitcD_in_4: (b,b,f,f)

splitcA_in_3: (b,f,f)

mergesortcB_in_2: (b,f)

mergecC_in_3: (b,b,f)

mergeC_in_3: (b,b,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   MERGESORTB_IN_GA(.(X1, .(X2, X3)), X4) -> U3_GA(X1, X2, X3, X4, splitA_in_gaa(X3, X5, X6))
   MERGESORTB_IN_GA(.(X1, .(X2, X3)), X4) -> SPLITA_IN_GAA(X3, X5, X6)
   SPLITA_IN_GAA(.(X1, X2), .(X1, X3), X4) -> U1_GAA(X1, X2, X3, X4, splitA_in_gaa(X2, X4, X3))
   SPLITA_IN_GAA(.(X1, X2), .(X1, X3), X4) -> SPLITA_IN_GAA(X2, X4, X3)
   MERGESORTB_IN_GA(.(X1, .(X2, X3)), X4) -> U4_GA(X1, X2, X3, X4, splitcD_in_ggaa(X2, X3, X5, X6))
   U4_GA(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U5_GA(X1, X2, X3, X4, mergesortB_in_ga(.(X1, X6), X7))
   U4_GA(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> MERGESORTB_IN_GA(.(X1, X6), X7)
   U4_GA(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U6_GA(X1, X2, X3, X4, X5, mergesortcB_in_ga(.(X1, X6), X7))
   U6_GA(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U7_GA(X1, X2, X3, X4, mergesortB_in_ga(X5, X8))
   U6_GA(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> MERGESORTB_IN_GA(X5, X8)
   U6_GA(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U8_GA(X1, X2, X3, X4, X7, mergesortcB_in_ga(X5, X8))
   U8_GA(X1, X2, X3, X4, X7, mergesortcB_out_ga(X5, X8)) -> U9_GA(X1, X2, X3, X4, mergeC_in_gga(X7, X8, X4))
   U8_GA(X1, X2, X3, X4, X7, mergesortcB_out_ga(X5, X8)) -> MERGEC_IN_GGA(X7, X8, X4)
   MERGEC_IN_GGA(.(X1, X2), .(X1, X3), .(X1, X4)) -> U2_GGA(X1, X2, X3, X4, mergeC_in_gga(.(X1, X2), X3, X4))
   MERGEC_IN_GGA(.(X1, X2), .(X1, X3), .(X1, X4)) -> MERGEC_IN_GGA(.(X1, X2), X3, X4)

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2, .(X1, X3), X4) -> U17_ggaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   splitcA_in_gaa([], [], []) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2), .(X1, X3), X4) -> U11_gaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   U11_gaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U17_ggaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga([], []) -> mergesortcB_out_ga([], [])
   mergesortcB_in_ga(.(X1, []), .(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3)), X4) -> U12_ga(X1, X2, X3, X4, splitcD_in_ggaa(X2, X3, X5, X6))
   U12_ga(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U13_ga(X1, X2, X3, X4, X5, X6, mergesortcB_in_ga(.(X1, X6), X7))
   U13_ga(X1, X2, X3, X4, X5, X6, mergesortcB_out_ga(.(X1, X6), X7)) -> U14_ga(X1, X2, X3, X4, X5, X6, X7, mergesortcB_in_ga(X5, X8))
   U14_ga(X1, X2, X3, X4, X5, X6, X7, mergesortcB_out_ga(X5, X8)) -> U15_ga(X1, X2, X3, X4, mergecC_in_gga(X7, X8, X4))
   mergecC_in_gga([], X1, X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, [], X1) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X1, X3), .(X1, X4)) -> U16_gga(X1, X2, X3, X4, mergecC_in_gga(.(X1, X2), X3, X4))
   U16_gga(X1, X2, X3, X4, mergecC_out_gga(.(X1, X2), X3, X4)) -> mergecC_out_gga(.(X1, X2), .(X1, X3), .(X1, X4))
   U15_ga(X1, X2, X3, X4, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The argument filtering Pi contains the following mapping:
mergesortB_in_ga(x1, x2)  =  mergesortB_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

splitA_in_gaa(x1, x2, x3)  =  splitA_in_gaa(x1)

splitcD_in_ggaa(x1, x2, x3, x4)  =  splitcD_in_ggaa(x1, x2)

U17_ggaa(x1, x2, x3, x4, x5)  =  U17_ggaa(x1, x2, x5)

splitcA_in_gaa(x1, x2, x3)  =  splitcA_in_gaa(x1)

[]  =  []

splitcA_out_gaa(x1, x2, x3)  =  splitcA_out_gaa(x1, x2, x3)

U11_gaa(x1, x2, x3, x4, x5)  =  U11_gaa(x1, x2, x5)

splitcD_out_ggaa(x1, x2, x3, x4)  =  splitcD_out_ggaa(x1, x2, x3, x4)

mergesortcB_in_ga(x1, x2)  =  mergesortcB_in_ga(x1)

mergesortcB_out_ga(x1, x2)  =  mergesortcB_out_ga(x1, x2)

U12_ga(x1, x2, x3, x4, x5)  =  U12_ga(x1, x2, x3, x5)

U13_ga(x1, x2, x3, x4, x5, x6, x7)  =  U13_ga(x1, x2, x3, x5, x7)

U14_ga(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ga(x1, x2, x3, x7, x8)

U15_ga(x1, x2, x3, x4, x5)  =  U15_ga(x1, x2, x3, x5)

mergecC_in_gga(x1, x2, x3)  =  mergecC_in_gga(x1, x2)

mergecC_out_gga(x1, x2, x3)  =  mergecC_out_gga(x1, x2, x3)

U16_gga(x1, x2, x3, x4, x5)  =  U16_gga(x1, x2, x3, x5)

mergeC_in_gga(x1, x2, x3)  =  mergeC_in_gga(x1, x2)

MERGESORTB_IN_GA(x1, x2)  =  MERGESORTB_IN_GA(x1)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x1, x2, x3, x5)

SPLITA_IN_GAA(x1, x2, x3)  =  SPLITA_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x2, x5)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x1, x2, x3, x5)

U5_GA(x1, x2, x3, x4, x5)  =  U5_GA(x1, x2, x3, x5)

U6_GA(x1, x2, x3, x4, x5, x6)  =  U6_GA(x1, x2, x3, x5, x6)

U7_GA(x1, x2, x3, x4, x5)  =  U7_GA(x1, x2, x3, x5)

U8_GA(x1, x2, x3, x4, x5, x6)  =  U8_GA(x1, x2, x3, x5, x6)

U9_GA(x1, x2, x3, x4, x5)  =  U9_GA(x1, x2, x3, x5)

MERGEC_IN_GGA(x1, x2, x3)  =  MERGEC_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x1, x2, x3, x5)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGESORTB_IN_GA(.(X1, .(X2, X3)), X4) -> U3_GA(X1, X2, X3, X4, splitA_in_gaa(X3, X5, X6))
   MERGESORTB_IN_GA(.(X1, .(X2, X3)), X4) -> SPLITA_IN_GAA(X3, X5, X6)
   SPLITA_IN_GAA(.(X1, X2), .(X1, X3), X4) -> U1_GAA(X1, X2, X3, X4, splitA_in_gaa(X2, X4, X3))
   SPLITA_IN_GAA(.(X1, X2), .(X1, X3), X4) -> SPLITA_IN_GAA(X2, X4, X3)
   MERGESORTB_IN_GA(.(X1, .(X2, X3)), X4) -> U4_GA(X1, X2, X3, X4, splitcD_in_ggaa(X2, X3, X5, X6))
   U4_GA(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U5_GA(X1, X2, X3, X4, mergesortB_in_ga(.(X1, X6), X7))
   U4_GA(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> MERGESORTB_IN_GA(.(X1, X6), X7)
   U4_GA(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U6_GA(X1, X2, X3, X4, X5, mergesortcB_in_ga(.(X1, X6), X7))
   U6_GA(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U7_GA(X1, X2, X3, X4, mergesortB_in_ga(X5, X8))
   U6_GA(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> MERGESORTB_IN_GA(X5, X8)
   U6_GA(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U8_GA(X1, X2, X3, X4, X7, mergesortcB_in_ga(X5, X8))
   U8_GA(X1, X2, X3, X4, X7, mergesortcB_out_ga(X5, X8)) -> U9_GA(X1, X2, X3, X4, mergeC_in_gga(X7, X8, X4))
   U8_GA(X1, X2, X3, X4, X7, mergesortcB_out_ga(X5, X8)) -> MERGEC_IN_GGA(X7, X8, X4)
   MERGEC_IN_GGA(.(X1, X2), .(X1, X3), .(X1, X4)) -> U2_GGA(X1, X2, X3, X4, mergeC_in_gga(.(X1, X2), X3, X4))
   MERGEC_IN_GGA(.(X1, X2), .(X1, X3), .(X1, X4)) -> MERGEC_IN_GGA(.(X1, X2), X3, X4)

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2, .(X1, X3), X4) -> U17_ggaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   splitcA_in_gaa([], [], []) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2), .(X1, X3), X4) -> U11_gaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   U11_gaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U17_ggaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga([], []) -> mergesortcB_out_ga([], [])
   mergesortcB_in_ga(.(X1, []), .(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3)), X4) -> U12_ga(X1, X2, X3, X4, splitcD_in_ggaa(X2, X3, X5, X6))
   U12_ga(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U13_ga(X1, X2, X3, X4, X5, X6, mergesortcB_in_ga(.(X1, X6), X7))
   U13_ga(X1, X2, X3, X4, X5, X6, mergesortcB_out_ga(.(X1, X6), X7)) -> U14_ga(X1, X2, X3, X4, X5, X6, X7, mergesortcB_in_ga(X5, X8))
   U14_ga(X1, X2, X3, X4, X5, X6, X7, mergesortcB_out_ga(X5, X8)) -> U15_ga(X1, X2, X3, X4, mergecC_in_gga(X7, X8, X4))
   mergecC_in_gga([], X1, X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, [], X1) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X1, X3), .(X1, X4)) -> U16_gga(X1, X2, X3, X4, mergecC_in_gga(.(X1, X2), X3, X4))
   U16_gga(X1, X2, X3, X4, mergecC_out_gga(.(X1, X2), X3, X4)) -> mergecC_out_gga(.(X1, X2), .(X1, X3), .(X1, X4))
   U15_ga(X1, X2, X3, X4, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The argument filtering Pi contains the following mapping:
mergesortB_in_ga(x1, x2)  =  mergesortB_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

splitA_in_gaa(x1, x2, x3)  =  splitA_in_gaa(x1)

splitcD_in_ggaa(x1, x2, x3, x4)  =  splitcD_in_ggaa(x1, x2)

U17_ggaa(x1, x2, x3, x4, x5)  =  U17_ggaa(x1, x2, x5)

splitcA_in_gaa(x1, x2, x3)  =  splitcA_in_gaa(x1)

[]  =  []

splitcA_out_gaa(x1, x2, x3)  =  splitcA_out_gaa(x1, x2, x3)

U11_gaa(x1, x2, x3, x4, x5)  =  U11_gaa(x1, x2, x5)

splitcD_out_ggaa(x1, x2, x3, x4)  =  splitcD_out_ggaa(x1, x2, x3, x4)

mergesortcB_in_ga(x1, x2)  =  mergesortcB_in_ga(x1)

mergesortcB_out_ga(x1, x2)  =  mergesortcB_out_ga(x1, x2)

U12_ga(x1, x2, x3, x4, x5)  =  U12_ga(x1, x2, x3, x5)

U13_ga(x1, x2, x3, x4, x5, x6, x7)  =  U13_ga(x1, x2, x3, x5, x7)

U14_ga(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ga(x1, x2, x3, x7, x8)

U15_ga(x1, x2, x3, x4, x5)  =  U15_ga(x1, x2, x3, x5)

mergecC_in_gga(x1, x2, x3)  =  mergecC_in_gga(x1, x2)

mergecC_out_gga(x1, x2, x3)  =  mergecC_out_gga(x1, x2, x3)

U16_gga(x1, x2, x3, x4, x5)  =  U16_gga(x1, x2, x3, x5)

mergeC_in_gga(x1, x2, x3)  =  mergeC_in_gga(x1, x2)

MERGESORTB_IN_GA(x1, x2)  =  MERGESORTB_IN_GA(x1)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x1, x2, x3, x5)

SPLITA_IN_GAA(x1, x2, x3)  =  SPLITA_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x2, x5)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x1, x2, x3, x5)

U5_GA(x1, x2, x3, x4, x5)  =  U5_GA(x1, x2, x3, x5)

U6_GA(x1, x2, x3, x4, x5, x6)  =  U6_GA(x1, x2, x3, x5, x6)

U7_GA(x1, x2, x3, x4, x5)  =  U7_GA(x1, x2, x3, x5)

U8_GA(x1, x2, x3, x4, x5, x6)  =  U8_GA(x1, x2, x3, x5, x6)

U9_GA(x1, x2, x3, x4, x5)  =  U9_GA(x1, x2, x3, x5)

MERGEC_IN_GGA(x1, x2, x3)  =  MERGEC_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x1, x2, x3, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 9 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGEC_IN_GGA(.(X1, X2), .(X1, X3), .(X1, X4)) -> MERGEC_IN_GGA(.(X1, X2), X3, X4)

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2, .(X1, X3), X4) -> U17_ggaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   splitcA_in_gaa([], [], []) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2), .(X1, X3), X4) -> U11_gaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   U11_gaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U17_ggaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga([], []) -> mergesortcB_out_ga([], [])
   mergesortcB_in_ga(.(X1, []), .(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3)), X4) -> U12_ga(X1, X2, X3, X4, splitcD_in_ggaa(X2, X3, X5, X6))
   U12_ga(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U13_ga(X1, X2, X3, X4, X5, X6, mergesortcB_in_ga(.(X1, X6), X7))
   U13_ga(X1, X2, X3, X4, X5, X6, mergesortcB_out_ga(.(X1, X6), X7)) -> U14_ga(X1, X2, X3, X4, X5, X6, X7, mergesortcB_in_ga(X5, X8))
   U14_ga(X1, X2, X3, X4, X5, X6, X7, mergesortcB_out_ga(X5, X8)) -> U15_ga(X1, X2, X3, X4, mergecC_in_gga(X7, X8, X4))
   mergecC_in_gga([], X1, X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, [], X1) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X1, X3), .(X1, X4)) -> U16_gga(X1, X2, X3, X4, mergecC_in_gga(.(X1, X2), X3, X4))
   U16_gga(X1, X2, X3, X4, mergecC_out_gga(.(X1, X2), X3, X4)) -> mergecC_out_gga(.(X1, X2), .(X1, X3), .(X1, X4))
   U15_ga(X1, X2, X3, X4, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

splitcD_in_ggaa(x1, x2, x3, x4)  =  splitcD_in_ggaa(x1, x2)

U17_ggaa(x1, x2, x3, x4, x5)  =  U17_ggaa(x1, x2, x5)

splitcA_in_gaa(x1, x2, x3)  =  splitcA_in_gaa(x1)

[]  =  []

splitcA_out_gaa(x1, x2, x3)  =  splitcA_out_gaa(x1, x2, x3)

U11_gaa(x1, x2, x3, x4, x5)  =  U11_gaa(x1, x2, x5)

splitcD_out_ggaa(x1, x2, x3, x4)  =  splitcD_out_ggaa(x1, x2, x3, x4)

mergesortcB_in_ga(x1, x2)  =  mergesortcB_in_ga(x1)

mergesortcB_out_ga(x1, x2)  =  mergesortcB_out_ga(x1, x2)

U12_ga(x1, x2, x3, x4, x5)  =  U12_ga(x1, x2, x3, x5)

U13_ga(x1, x2, x3, x4, x5, x6, x7)  =  U13_ga(x1, x2, x3, x5, x7)

U14_ga(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ga(x1, x2, x3, x7, x8)

U15_ga(x1, x2, x3, x4, x5)  =  U15_ga(x1, x2, x3, x5)

mergecC_in_gga(x1, x2, x3)  =  mergecC_in_gga(x1, x2)

mergecC_out_gga(x1, x2, x3)  =  mergecC_out_gga(x1, x2, x3)

U16_gga(x1, x2, x3, x4, x5)  =  U16_gga(x1, x2, x3, x5)

MERGEC_IN_GGA(x1, x2, x3)  =  MERGEC_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGEC_IN_GGA(.(X1, X2), .(X1, X3), .(X1, X4)) -> MERGEC_IN_GGA(.(X1, X2), X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MERGEC_IN_GGA(x1, x2, x3)  =  MERGEC_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGEC_IN_GGA(.(X1, X2), .(X1, X3)) -> MERGEC_IN_GGA(.(X1, X2), X3)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MERGEC_IN_GGA(.(X1, X2), .(X1, X3)) -> MERGEC_IN_GGA(.(X1, X2), X3)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SPLITA_IN_GAA(.(X1, X2), .(X1, X3), X4) -> SPLITA_IN_GAA(X2, X4, X3)

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2, .(X1, X3), X4) -> U17_ggaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   splitcA_in_gaa([], [], []) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2), .(X1, X3), X4) -> U11_gaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   U11_gaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U17_ggaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga([], []) -> mergesortcB_out_ga([], [])
   mergesortcB_in_ga(.(X1, []), .(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3)), X4) -> U12_ga(X1, X2, X3, X4, splitcD_in_ggaa(X2, X3, X5, X6))
   U12_ga(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U13_ga(X1, X2, X3, X4, X5, X6, mergesortcB_in_ga(.(X1, X6), X7))
   U13_ga(X1, X2, X3, X4, X5, X6, mergesortcB_out_ga(.(X1, X6), X7)) -> U14_ga(X1, X2, X3, X4, X5, X6, X7, mergesortcB_in_ga(X5, X8))
   U14_ga(X1, X2, X3, X4, X5, X6, X7, mergesortcB_out_ga(X5, X8)) -> U15_ga(X1, X2, X3, X4, mergecC_in_gga(X7, X8, X4))
   mergecC_in_gga([], X1, X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, [], X1) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X1, X3), .(X1, X4)) -> U16_gga(X1, X2, X3, X4, mergecC_in_gga(.(X1, X2), X3, X4))
   U16_gga(X1, X2, X3, X4, mergecC_out_gga(.(X1, X2), X3, X4)) -> mergecC_out_gga(.(X1, X2), .(X1, X3), .(X1, X4))
   U15_ga(X1, X2, X3, X4, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

splitcD_in_ggaa(x1, x2, x3, x4)  =  splitcD_in_ggaa(x1, x2)

U17_ggaa(x1, x2, x3, x4, x5)  =  U17_ggaa(x1, x2, x5)

splitcA_in_gaa(x1, x2, x3)  =  splitcA_in_gaa(x1)

[]  =  []

splitcA_out_gaa(x1, x2, x3)  =  splitcA_out_gaa(x1, x2, x3)

U11_gaa(x1, x2, x3, x4, x5)  =  U11_gaa(x1, x2, x5)

splitcD_out_ggaa(x1, x2, x3, x4)  =  splitcD_out_ggaa(x1, x2, x3, x4)

mergesortcB_in_ga(x1, x2)  =  mergesortcB_in_ga(x1)

mergesortcB_out_ga(x1, x2)  =  mergesortcB_out_ga(x1, x2)

U12_ga(x1, x2, x3, x4, x5)  =  U12_ga(x1, x2, x3, x5)

U13_ga(x1, x2, x3, x4, x5, x6, x7)  =  U13_ga(x1, x2, x3, x5, x7)

U14_ga(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ga(x1, x2, x3, x7, x8)

U15_ga(x1, x2, x3, x4, x5)  =  U15_ga(x1, x2, x3, x5)

mergecC_in_gga(x1, x2, x3)  =  mergecC_in_gga(x1, x2)

mergecC_out_gga(x1, x2, x3)  =  mergecC_out_gga(x1, x2, x3)

U16_gga(x1, x2, x3, x4, x5)  =  U16_gga(x1, x2, x3, x5)

SPLITA_IN_GAA(x1, x2, x3)  =  SPLITA_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SPLITA_IN_GAA(.(X1, X2), .(X1, X3), X4) -> SPLITA_IN_GAA(X2, X4, X3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

SPLITA_IN_GAA(x1, x2, x3)  =  SPLITA_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SPLITA_IN_GAA(.(X1, X2)) -> SPLITA_IN_GAA(X2)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SPLITA_IN_GAA(.(X1, X2)) -> SPLITA_IN_GAA(X2)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGESORTB_IN_GA(.(X1, .(X2, X3)), X4) -> U4_GA(X1, X2, X3, X4, splitcD_in_ggaa(X2, X3, X5, X6))
   U4_GA(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> MERGESORTB_IN_GA(.(X1, X6), X7)
   U4_GA(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U6_GA(X1, X2, X3, X4, X5, mergesortcB_in_ga(.(X1, X6), X7))
   U6_GA(X1, X2, X3, X4, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> MERGESORTB_IN_GA(X5, X8)

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2, .(X1, X3), X4) -> U17_ggaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   splitcA_in_gaa([], [], []) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2), .(X1, X3), X4) -> U11_gaa(X1, X2, X3, X4, splitcA_in_gaa(X2, X4, X3))
   U11_gaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U17_ggaa(X1, X2, X3, X4, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga([], []) -> mergesortcB_out_ga([], [])
   mergesortcB_in_ga(.(X1, []), .(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3)), X4) -> U12_ga(X1, X2, X3, X4, splitcD_in_ggaa(X2, X3, X5, X6))
   U12_ga(X1, X2, X3, X4, splitcD_out_ggaa(X2, X3, X5, X6)) -> U13_ga(X1, X2, X3, X4, X5, X6, mergesortcB_in_ga(.(X1, X6), X7))
   U13_ga(X1, X2, X3, X4, X5, X6, mergesortcB_out_ga(.(X1, X6), X7)) -> U14_ga(X1, X2, X3, X4, X5, X6, X7, mergesortcB_in_ga(X5, X8))
   U14_ga(X1, X2, X3, X4, X5, X6, X7, mergesortcB_out_ga(X5, X8)) -> U15_ga(X1, X2, X3, X4, mergecC_in_gga(X7, X8, X4))
   mergecC_in_gga([], X1, X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, [], X1) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X1, X3), .(X1, X4)) -> U16_gga(X1, X2, X3, X4, mergecC_in_gga(.(X1, X2), X3, X4))
   U16_gga(X1, X2, X3, X4, mergecC_out_gga(.(X1, X2), X3, X4)) -> mergecC_out_gga(.(X1, X2), .(X1, X3), .(X1, X4))
   U15_ga(X1, X2, X3, X4, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

splitcD_in_ggaa(x1, x2, x3, x4)  =  splitcD_in_ggaa(x1, x2)

U17_ggaa(x1, x2, x3, x4, x5)  =  U17_ggaa(x1, x2, x5)

splitcA_in_gaa(x1, x2, x3)  =  splitcA_in_gaa(x1)

[]  =  []

splitcA_out_gaa(x1, x2, x3)  =  splitcA_out_gaa(x1, x2, x3)

U11_gaa(x1, x2, x3, x4, x5)  =  U11_gaa(x1, x2, x5)

splitcD_out_ggaa(x1, x2, x3, x4)  =  splitcD_out_ggaa(x1, x2, x3, x4)

mergesortcB_in_ga(x1, x2)  =  mergesortcB_in_ga(x1)

mergesortcB_out_ga(x1, x2)  =  mergesortcB_out_ga(x1, x2)

U12_ga(x1, x2, x3, x4, x5)  =  U12_ga(x1, x2, x3, x5)

U13_ga(x1, x2, x3, x4, x5, x6, x7)  =  U13_ga(x1, x2, x3, x5, x7)

U14_ga(x1, x2, x3, x4, x5, x6, x7, x8)  =  U14_ga(x1, x2, x3, x7, x8)

U15_ga(x1, x2, x3, x4, x5)  =  U15_ga(x1, x2, x3, x5)

mergecC_in_gga(x1, x2, x3)  =  mergecC_in_gga(x1, x2)

mergecC_out_gga(x1, x2, x3)  =  mergecC_out_gga(x1, x2, x3)

U16_gga(x1, x2, x3, x4, x5)  =  U16_gga(x1, x2, x3, x5)

MERGESORTB_IN_GA(x1, x2)  =  MERGESORTB_IN_GA(x1)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x1, x2, x3, x5)

U6_GA(x1, x2, x3, x4, x5, x6)  =  U6_GA(x1, x2, x3, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGESORTB_IN_GA(.(X1, .(X2, X3))) -> U4_GA(X1, X2, X3, splitcD_in_ggaa(X2, X3))
   U4_GA(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> MERGESORTB_IN_GA(.(X1, X6))
   U4_GA(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> U6_GA(X1, X2, X3, X5, mergesortcB_in_ga(.(X1, X6)))
   U6_GA(X1, X2, X3, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> MERGESORTB_IN_GA(X5)

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2) -> U17_ggaa(X1, X2, splitcA_in_gaa(X2))
   splitcA_in_gaa([]) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2)) -> U11_gaa(X1, X2, splitcA_in_gaa(X2))
   U11_gaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U17_ggaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga([]) -> mergesortcB_out_ga([], [])
   mergesortcB_in_ga(.(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3))) -> U12_ga(X1, X2, X3, splitcD_in_ggaa(X2, X3))
   U12_ga(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> U13_ga(X1, X2, X3, X5, mergesortcB_in_ga(.(X1, X6)))
   U13_ga(X1, X2, X3, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U14_ga(X1, X2, X3, X7, mergesortcB_in_ga(X5))
   U14_ga(X1, X2, X3, X7, mergesortcB_out_ga(X5, X8)) -> U15_ga(X1, X2, X3, mergecC_in_gga(X7, X8))
   mergecC_in_gga([], X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, []) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X1, X3)) -> U16_gga(X1, X2, X3, mergecC_in_gga(.(X1, X2), X3))
   U16_gga(X1, X2, X3, mergecC_out_gga(.(X1, X2), X3, X4)) -> mergecC_out_gga(.(X1, X2), .(X1, X3), .(X1, X4))
   U15_ga(X1, X2, X3, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The set Q consists of the following terms:

   splitcD_in_ggaa(x0, x1)
   splitcA_in_gaa(x0)
   U11_gaa(x0, x1, x2)
   U17_ggaa(x0, x1, x2)
   mergesortcB_in_ga(x0)
   U12_ga(x0, x1, x2, x3)
   U13_ga(x0, x1, x2, x3, x4)
   U14_ga(x0, x1, x2, x3, x4)
   mergecC_in_gga(x0, x1)
   U16_gga(x0, x1, x2, x3)
   U15_ga(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(24) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MERGESORTB_IN_GA(.(X1, .(X2, X3))) -> U4_GA(X1, X2, X3, splitcD_in_ggaa(X2, X3)) at position [3] we obtained the following new rules [LPAR04]:

   (MERGESORTB_IN_GA(.(X1, .(X2, X3))) -> U4_GA(X1, X2, X3, U17_ggaa(X2, X3, splitcA_in_gaa(X3))),MERGESORTB_IN_GA(.(X1, .(X2, X3))) -> U4_GA(X1, X2, X3, U17_ggaa(X2, X3, splitcA_in_gaa(X3))))


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U4_GA(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> MERGESORTB_IN_GA(.(X1, X6))
   U4_GA(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> U6_GA(X1, X2, X3, X5, mergesortcB_in_ga(.(X1, X6)))
   U6_GA(X1, X2, X3, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> MERGESORTB_IN_GA(X5)
   MERGESORTB_IN_GA(.(X1, .(X2, X3))) -> U4_GA(X1, X2, X3, U17_ggaa(X2, X3, splitcA_in_gaa(X3)))

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2) -> U17_ggaa(X1, X2, splitcA_in_gaa(X2))
   splitcA_in_gaa([]) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2)) -> U11_gaa(X1, X2, splitcA_in_gaa(X2))
   U11_gaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U17_ggaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga([]) -> mergesortcB_out_ga([], [])
   mergesortcB_in_ga(.(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3))) -> U12_ga(X1, X2, X3, splitcD_in_ggaa(X2, X3))
   U12_ga(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> U13_ga(X1, X2, X3, X5, mergesortcB_in_ga(.(X1, X6)))
   U13_ga(X1, X2, X3, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U14_ga(X1, X2, X3, X7, mergesortcB_in_ga(X5))
   U14_ga(X1, X2, X3, X7, mergesortcB_out_ga(X5, X8)) -> U15_ga(X1, X2, X3, mergecC_in_gga(X7, X8))
   mergecC_in_gga([], X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, []) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X1, X3)) -> U16_gga(X1, X2, X3, mergecC_in_gga(.(X1, X2), X3))
   U16_gga(X1, X2, X3, mergecC_out_gga(.(X1, X2), X3, X4)) -> mergecC_out_gga(.(X1, X2), .(X1, X3), .(X1, X4))
   U15_ga(X1, X2, X3, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The set Q consists of the following terms:

   splitcD_in_ggaa(x0, x1)
   splitcA_in_gaa(x0)
   U11_gaa(x0, x1, x2)
   U17_ggaa(x0, x1, x2)
   mergesortcB_in_ga(x0)
   U12_ga(x0, x1, x2, x3)
   U13_ga(x0, x1, x2, x3, x4)
   U14_ga(x0, x1, x2, x3, x4)
   mergecC_in_gga(x0, x1)
   U16_gga(x0, x1, x2, x3)
   U15_ga(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   U6_GA(X1, X2, X3, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> MERGESORTB_IN_GA(X5)


Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 2 + 2*x_2
   POL(MERGESORTB_IN_GA(x_1)) = x_1
   POL(U11_gaa(x_1, x_2, x_3)) = 1 + 2*x_3
   POL(U12_ga(x_1, x_2, x_3, x_4)) = 0
   POL(U13_ga(x_1, x_2, x_3, x_4, x_5)) = 0
   POL(U14_ga(x_1, x_2, x_3, x_4, x_5)) = 0
   POL(U15_ga(x_1, x_2, x_3, x_4)) = 0
   POL(U16_gga(x_1, x_2, x_3, x_4)) = 0
   POL(U17_ggaa(x_1, x_2, x_3)) = 2*x_3
   POL(U4_GA(x_1, x_2, x_3, x_4)) = 2 + 2*x_4
   POL(U6_GA(x_1, x_2, x_3, x_4, x_5)) = 2 + 2*x_4
   POL([]) = 0
   POL(mergecC_in_gga(x_1, x_2)) = 0
   POL(mergecC_out_gga(x_1, x_2, x_3)) = 0
   POL(mergesortcB_in_ga(x_1)) = 0
   POL(mergesortcB_out_ga(x_1, x_2)) = 0
   POL(splitcA_in_gaa(x_1)) = 1 + x_1
   POL(splitcA_out_gaa(x_1, x_2, x_3)) = 1 + x_2 + 2*x_3
   POL(splitcD_in_ggaa(x_1, x_2)) = 2 + 2*x_2
   POL(splitcD_out_ggaa(x_1, x_2, x_3, x_4)) = x_3 + x_4


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U4_GA(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> MERGESORTB_IN_GA(.(X1, X6))
   U4_GA(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> U6_GA(X1, X2, X3, X5, mergesortcB_in_ga(.(X1, X6)))
   MERGESORTB_IN_GA(.(X1, .(X2, X3))) -> U4_GA(X1, X2, X3, U17_ggaa(X2, X3, splitcA_in_gaa(X3)))

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2) -> U17_ggaa(X1, X2, splitcA_in_gaa(X2))
   splitcA_in_gaa([]) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2)) -> U11_gaa(X1, X2, splitcA_in_gaa(X2))
   U11_gaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U17_ggaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga([]) -> mergesortcB_out_ga([], [])
   mergesortcB_in_ga(.(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3))) -> U12_ga(X1, X2, X3, splitcD_in_ggaa(X2, X3))
   U12_ga(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> U13_ga(X1, X2, X3, X5, mergesortcB_in_ga(.(X1, X6)))
   U13_ga(X1, X2, X3, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U14_ga(X1, X2, X3, X7, mergesortcB_in_ga(X5))
   U14_ga(X1, X2, X3, X7, mergesortcB_out_ga(X5, X8)) -> U15_ga(X1, X2, X3, mergecC_in_gga(X7, X8))
   mergecC_in_gga([], X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, []) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X1, X3)) -> U16_gga(X1, X2, X3, mergecC_in_gga(.(X1, X2), X3))
   U16_gga(X1, X2, X3, mergecC_out_gga(.(X1, X2), X3, X4)) -> mergecC_out_gga(.(X1, X2), .(X1, X3), .(X1, X4))
   U15_ga(X1, X2, X3, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The set Q consists of the following terms:

   splitcD_in_ggaa(x0, x1)
   splitcA_in_gaa(x0)
   U11_gaa(x0, x1, x2)
   U17_ggaa(x0, x1, x2)
   mergesortcB_in_ga(x0)
   U12_ga(x0, x1, x2, x3)
   U13_ga(x0, x1, x2, x3, x4)
   U14_ga(x0, x1, x2, x3, x4)
   mergecC_in_gga(x0, x1)
   U16_gga(x0, x1, x2, x3)
   U15_ga(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGESORTB_IN_GA(.(X1, .(X2, X3))) -> U4_GA(X1, X2, X3, U17_ggaa(X2, X3, splitcA_in_gaa(X3)))
   U4_GA(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> MERGESORTB_IN_GA(.(X1, X6))

The TRS R consists of the following rules:

   splitcD_in_ggaa(X1, X2) -> U17_ggaa(X1, X2, splitcA_in_gaa(X2))
   splitcA_in_gaa([]) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2)) -> U11_gaa(X1, X2, splitcA_in_gaa(X2))
   U11_gaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)
   U17_ggaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   mergesortcB_in_ga([]) -> mergesortcB_out_ga([], [])
   mergesortcB_in_ga(.(X1, [])) -> mergesortcB_out_ga(.(X1, []), .(X1, []))
   mergesortcB_in_ga(.(X1, .(X2, X3))) -> U12_ga(X1, X2, X3, splitcD_in_ggaa(X2, X3))
   U12_ga(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> U13_ga(X1, X2, X3, X5, mergesortcB_in_ga(.(X1, X6)))
   U13_ga(X1, X2, X3, X5, mergesortcB_out_ga(.(X1, X6), X7)) -> U14_ga(X1, X2, X3, X7, mergesortcB_in_ga(X5))
   U14_ga(X1, X2, X3, X7, mergesortcB_out_ga(X5, X8)) -> U15_ga(X1, X2, X3, mergecC_in_gga(X7, X8))
   mergecC_in_gga([], X1) -> mergecC_out_gga([], X1, X1)
   mergecC_in_gga(X1, []) -> mergecC_out_gga(X1, [], X1)
   mergecC_in_gga(.(X1, X2), .(X1, X3)) -> U16_gga(X1, X2, X3, mergecC_in_gga(.(X1, X2), X3))
   U16_gga(X1, X2, X3, mergecC_out_gga(.(X1, X2), X3, X4)) -> mergecC_out_gga(.(X1, X2), .(X1, X3), .(X1, X4))
   U15_ga(X1, X2, X3, mergecC_out_gga(X7, X8, X4)) -> mergesortcB_out_ga(.(X1, .(X2, X3)), X4)

The set Q consists of the following terms:

   splitcD_in_ggaa(x0, x1)
   splitcA_in_gaa(x0)
   U11_gaa(x0, x1, x2)
   U17_ggaa(x0, x1, x2)
   mergesortcB_in_ga(x0)
   U12_ga(x0, x1, x2, x3)
   U13_ga(x0, x1, x2, x3, x4)
   U14_ga(x0, x1, x2, x3, x4)
   mergecC_in_gga(x0, x1)
   U16_gga(x0, x1, x2, x3)
   U15_ga(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGESORTB_IN_GA(.(X1, .(X2, X3))) -> U4_GA(X1, X2, X3, U17_ggaa(X2, X3, splitcA_in_gaa(X3)))
   U4_GA(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> MERGESORTB_IN_GA(.(X1, X6))

The TRS R consists of the following rules:

   splitcA_in_gaa([]) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2)) -> U11_gaa(X1, X2, splitcA_in_gaa(X2))
   U17_ggaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   U11_gaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)

The set Q consists of the following terms:

   splitcD_in_ggaa(x0, x1)
   splitcA_in_gaa(x0)
   U11_gaa(x0, x1, x2)
   U17_ggaa(x0, x1, x2)
   mergesortcB_in_ga(x0)
   U12_ga(x0, x1, x2, x3)
   U13_ga(x0, x1, x2, x3, x4)
   U14_ga(x0, x1, x2, x3, x4)
   mergecC_in_gga(x0, x1)
   U16_gga(x0, x1, x2, x3)
   U15_ga(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(32) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   splitcD_in_ggaa(x0, x1)
   mergesortcB_in_ga(x0)
   U12_ga(x0, x1, x2, x3)
   U13_ga(x0, x1, x2, x3, x4)
   U14_ga(x0, x1, x2, x3, x4)
   mergecC_in_gga(x0, x1)
   U16_gga(x0, x1, x2, x3)
   U15_ga(x0, x1, x2, x3)


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGESORTB_IN_GA(.(X1, .(X2, X3))) -> U4_GA(X1, X2, X3, U17_ggaa(X2, X3, splitcA_in_gaa(X3)))
   U4_GA(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> MERGESORTB_IN_GA(.(X1, X6))

The TRS R consists of the following rules:

   splitcA_in_gaa([]) -> splitcA_out_gaa([], [], [])
   splitcA_in_gaa(.(X1, X2)) -> U11_gaa(X1, X2, splitcA_in_gaa(X2))
   U17_ggaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   U11_gaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)

The set Q consists of the following terms:

   splitcA_in_gaa(x0)
   U11_gaa(x0, x1, x2)
   U17_ggaa(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(34) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   MERGESORTB_IN_GA(.(X1, .(X2, X3))) -> U4_GA(X1, X2, X3, U17_ggaa(X2, X3, splitcA_in_gaa(X3)))

Strictly oriented rules of the TRS R:

   splitcA_in_gaa([]) -> splitcA_out_gaa([], [], [])

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 1 + x_2
   POL(MERGESORTB_IN_GA(x_1)) = 1 + 2*x_1
   POL(U11_gaa(x_1, x_2, x_3)) = 2 + x_3
   POL(U17_ggaa(x_1, x_2, x_3)) = 1 + x_3
   POL(U4_GA(x_1, x_2, x_3, x_4)) = 1 + x_4
   POL([]) = 0
   POL(splitcA_in_gaa(x_1)) = 2 + 2*x_1
   POL(splitcA_out_gaa(x_1, x_2, x_3)) = 1 + 2*x_2 + 2*x_3
   POL(splitcD_out_ggaa(x_1, x_2, x_3, x_4)) = 2 + 2*x_4


----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U4_GA(X1, X2, X3, splitcD_out_ggaa(X2, X3, X5, X6)) -> MERGESORTB_IN_GA(.(X1, X6))

The TRS R consists of the following rules:

   splitcA_in_gaa(.(X1, X2)) -> U11_gaa(X1, X2, splitcA_in_gaa(X2))
   U17_ggaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcD_out_ggaa(X1, X2, .(X1, X3), X4)
   U11_gaa(X1, X2, splitcA_out_gaa(X2, X4, X3)) -> splitcA_out_gaa(.(X1, X2), .(X1, X3), X4)

The set Q consists of the following terms:

   splitcA_in_gaa(x0)
   U11_gaa(x0, x1, x2)
   U17_ggaa(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(36) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(37)
TRUE
