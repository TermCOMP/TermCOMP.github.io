YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/rDLwY.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

ordered(g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) UsableRulesReductionPairsProof [EQUIVALENT, 18 ms]
        (20) QDP
        (21) DependencyGraphProof [EQUIVALENT, 0 ms]
        (22) TRUE


----------------------------------------

(0)
Obligation:
Clauses:

ordered([]).
ordered(.(X, [])).
ordered(.(X, .(Y, Xs))) :- ','(le(X, Y), ordered(.(Y, Xs))).
le(s(X), s(Y)) :- le(X, Y).
le(0, s(0)).
le(0, 0).


Query: ordered(g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

ordered_in_1: (b)

le_in_2: (b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   ordered_in_g([]) -> ordered_out_g([])
   ordered_in_g(.(X, [])) -> ordered_out_g(.(X, []))
   ordered_in_g(.(X, .(Y, Xs))) -> U1_g(X, Y, Xs, le_in_gg(X, Y))
   le_in_gg(s(X), s(Y)) -> U3_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(0)) -> le_out_gg(0, s(0))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   U3_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U1_g(X, Y, Xs, le_out_gg(X, Y)) -> U2_g(X, Y, Xs, ordered_in_g(.(Y, Xs)))
   U2_g(X, Y, Xs, ordered_out_g(.(Y, Xs))) -> ordered_out_g(.(X, .(Y, Xs)))

The argument filtering Pi contains the following mapping:
ordered_in_g(x1)  =  ordered_in_g(x1)

[]  =  []

ordered_out_g(x1)  =  ordered_out_g

.(x1, x2)  =  .(x1, x2)

U1_g(x1, x2, x3, x4)  =  U1_g(x2, x3, x4)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U3_gg(x1, x2, x3)  =  U3_gg(x3)

0  =  0

le_out_gg(x1, x2)  =  le_out_gg

U2_g(x1, x2, x3, x4)  =  U2_g(x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   ordered_in_g([]) -> ordered_out_g([])
   ordered_in_g(.(X, [])) -> ordered_out_g(.(X, []))
   ordered_in_g(.(X, .(Y, Xs))) -> U1_g(X, Y, Xs, le_in_gg(X, Y))
   le_in_gg(s(X), s(Y)) -> U3_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(0)) -> le_out_gg(0, s(0))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   U3_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U1_g(X, Y, Xs, le_out_gg(X, Y)) -> U2_g(X, Y, Xs, ordered_in_g(.(Y, Xs)))
   U2_g(X, Y, Xs, ordered_out_g(.(Y, Xs))) -> ordered_out_g(.(X, .(Y, Xs)))

The argument filtering Pi contains the following mapping:
ordered_in_g(x1)  =  ordered_in_g(x1)

[]  =  []

ordered_out_g(x1)  =  ordered_out_g

.(x1, x2)  =  .(x1, x2)

U1_g(x1, x2, x3, x4)  =  U1_g(x2, x3, x4)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U3_gg(x1, x2, x3)  =  U3_gg(x3)

0  =  0

le_out_gg(x1, x2)  =  le_out_gg

U2_g(x1, x2, x3, x4)  =  U2_g(x4)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   ORDERED_IN_G(.(X, .(Y, Xs))) -> U1_G(X, Y, Xs, le_in_gg(X, Y))
   ORDERED_IN_G(.(X, .(Y, Xs))) -> LE_IN_GG(X, Y)
   LE_IN_GG(s(X), s(Y)) -> U3_GG(X, Y, le_in_gg(X, Y))
   LE_IN_GG(s(X), s(Y)) -> LE_IN_GG(X, Y)
   U1_G(X, Y, Xs, le_out_gg(X, Y)) -> U2_G(X, Y, Xs, ordered_in_g(.(Y, Xs)))
   U1_G(X, Y, Xs, le_out_gg(X, Y)) -> ORDERED_IN_G(.(Y, Xs))

The TRS R consists of the following rules:

   ordered_in_g([]) -> ordered_out_g([])
   ordered_in_g(.(X, [])) -> ordered_out_g(.(X, []))
   ordered_in_g(.(X, .(Y, Xs))) -> U1_g(X, Y, Xs, le_in_gg(X, Y))
   le_in_gg(s(X), s(Y)) -> U3_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(0)) -> le_out_gg(0, s(0))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   U3_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U1_g(X, Y, Xs, le_out_gg(X, Y)) -> U2_g(X, Y, Xs, ordered_in_g(.(Y, Xs)))
   U2_g(X, Y, Xs, ordered_out_g(.(Y, Xs))) -> ordered_out_g(.(X, .(Y, Xs)))

The argument filtering Pi contains the following mapping:
ordered_in_g(x1)  =  ordered_in_g(x1)

[]  =  []

ordered_out_g(x1)  =  ordered_out_g

.(x1, x2)  =  .(x1, x2)

U1_g(x1, x2, x3, x4)  =  U1_g(x2, x3, x4)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U3_gg(x1, x2, x3)  =  U3_gg(x3)

0  =  0

le_out_gg(x1, x2)  =  le_out_gg

U2_g(x1, x2, x3, x4)  =  U2_g(x4)

ORDERED_IN_G(x1)  =  ORDERED_IN_G(x1)

U1_G(x1, x2, x3, x4)  =  U1_G(x2, x3, x4)

LE_IN_GG(x1, x2)  =  LE_IN_GG(x1, x2)

U3_GG(x1, x2, x3)  =  U3_GG(x3)

U2_G(x1, x2, x3, x4)  =  U2_G(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ORDERED_IN_G(.(X, .(Y, Xs))) -> U1_G(X, Y, Xs, le_in_gg(X, Y))
   ORDERED_IN_G(.(X, .(Y, Xs))) -> LE_IN_GG(X, Y)
   LE_IN_GG(s(X), s(Y)) -> U3_GG(X, Y, le_in_gg(X, Y))
   LE_IN_GG(s(X), s(Y)) -> LE_IN_GG(X, Y)
   U1_G(X, Y, Xs, le_out_gg(X, Y)) -> U2_G(X, Y, Xs, ordered_in_g(.(Y, Xs)))
   U1_G(X, Y, Xs, le_out_gg(X, Y)) -> ORDERED_IN_G(.(Y, Xs))

The TRS R consists of the following rules:

   ordered_in_g([]) -> ordered_out_g([])
   ordered_in_g(.(X, [])) -> ordered_out_g(.(X, []))
   ordered_in_g(.(X, .(Y, Xs))) -> U1_g(X, Y, Xs, le_in_gg(X, Y))
   le_in_gg(s(X), s(Y)) -> U3_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(0)) -> le_out_gg(0, s(0))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   U3_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U1_g(X, Y, Xs, le_out_gg(X, Y)) -> U2_g(X, Y, Xs, ordered_in_g(.(Y, Xs)))
   U2_g(X, Y, Xs, ordered_out_g(.(Y, Xs))) -> ordered_out_g(.(X, .(Y, Xs)))

The argument filtering Pi contains the following mapping:
ordered_in_g(x1)  =  ordered_in_g(x1)

[]  =  []

ordered_out_g(x1)  =  ordered_out_g

.(x1, x2)  =  .(x1, x2)

U1_g(x1, x2, x3, x4)  =  U1_g(x2, x3, x4)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U3_gg(x1, x2, x3)  =  U3_gg(x3)

0  =  0

le_out_gg(x1, x2)  =  le_out_gg

U2_g(x1, x2, x3, x4)  =  U2_g(x4)

ORDERED_IN_G(x1)  =  ORDERED_IN_G(x1)

U1_G(x1, x2, x3, x4)  =  U1_G(x2, x3, x4)

LE_IN_GG(x1, x2)  =  LE_IN_GG(x1, x2)

U3_GG(x1, x2, x3)  =  U3_GG(x3)

U2_G(x1, x2, x3, x4)  =  U2_G(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LE_IN_GG(s(X), s(Y)) -> LE_IN_GG(X, Y)

The TRS R consists of the following rules:

   ordered_in_g([]) -> ordered_out_g([])
   ordered_in_g(.(X, [])) -> ordered_out_g(.(X, []))
   ordered_in_g(.(X, .(Y, Xs))) -> U1_g(X, Y, Xs, le_in_gg(X, Y))
   le_in_gg(s(X), s(Y)) -> U3_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(0)) -> le_out_gg(0, s(0))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   U3_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U1_g(X, Y, Xs, le_out_gg(X, Y)) -> U2_g(X, Y, Xs, ordered_in_g(.(Y, Xs)))
   U2_g(X, Y, Xs, ordered_out_g(.(Y, Xs))) -> ordered_out_g(.(X, .(Y, Xs)))

The argument filtering Pi contains the following mapping:
ordered_in_g(x1)  =  ordered_in_g(x1)

[]  =  []

ordered_out_g(x1)  =  ordered_out_g

.(x1, x2)  =  .(x1, x2)

U1_g(x1, x2, x3, x4)  =  U1_g(x2, x3, x4)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U3_gg(x1, x2, x3)  =  U3_gg(x3)

0  =  0

le_out_gg(x1, x2)  =  le_out_gg

U2_g(x1, x2, x3, x4)  =  U2_g(x4)

LE_IN_GG(x1, x2)  =  LE_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LE_IN_GG(s(X), s(Y)) -> LE_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE_IN_GG(s(X), s(Y)) -> LE_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE_IN_GG(s(X), s(Y)) -> LE_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_G(X, Y, Xs, le_out_gg(X, Y)) -> ORDERED_IN_G(.(Y, Xs))
   ORDERED_IN_G(.(X, .(Y, Xs))) -> U1_G(X, Y, Xs, le_in_gg(X, Y))

The TRS R consists of the following rules:

   ordered_in_g([]) -> ordered_out_g([])
   ordered_in_g(.(X, [])) -> ordered_out_g(.(X, []))
   ordered_in_g(.(X, .(Y, Xs))) -> U1_g(X, Y, Xs, le_in_gg(X, Y))
   le_in_gg(s(X), s(Y)) -> U3_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(0)) -> le_out_gg(0, s(0))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   U3_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U1_g(X, Y, Xs, le_out_gg(X, Y)) -> U2_g(X, Y, Xs, ordered_in_g(.(Y, Xs)))
   U2_g(X, Y, Xs, ordered_out_g(.(Y, Xs))) -> ordered_out_g(.(X, .(Y, Xs)))

The argument filtering Pi contains the following mapping:
ordered_in_g(x1)  =  ordered_in_g(x1)

[]  =  []

ordered_out_g(x1)  =  ordered_out_g

.(x1, x2)  =  .(x1, x2)

U1_g(x1, x2, x3, x4)  =  U1_g(x2, x3, x4)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U3_gg(x1, x2, x3)  =  U3_gg(x3)

0  =  0

le_out_gg(x1, x2)  =  le_out_gg

U2_g(x1, x2, x3, x4)  =  U2_g(x4)

ORDERED_IN_G(x1)  =  ORDERED_IN_G(x1)

U1_G(x1, x2, x3, x4)  =  U1_G(x2, x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_G(X, Y, Xs, le_out_gg(X, Y)) -> ORDERED_IN_G(.(Y, Xs))
   ORDERED_IN_G(.(X, .(Y, Xs))) -> U1_G(X, Y, Xs, le_in_gg(X, Y))

The TRS R consists of the following rules:

   le_in_gg(s(X), s(Y)) -> U3_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(0)) -> le_out_gg(0, s(0))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   U3_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U3_gg(x1, x2, x3)  =  U3_gg(x3)

0  =  0

le_out_gg(x1, x2)  =  le_out_gg

ORDERED_IN_G(x1)  =  ORDERED_IN_G(x1)

U1_G(x1, x2, x3, x4)  =  U1_G(x2, x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_G(Y, Xs, le_out_gg) -> ORDERED_IN_G(.(Y, Xs))
   ORDERED_IN_G(.(X, .(Y, Xs))) -> U1_G(Y, Xs, le_in_gg(X, Y))

The TRS R consists of the following rules:

   le_in_gg(s(X), s(Y)) -> U3_gg(le_in_gg(X, Y))
   le_in_gg(0, s(0)) -> le_out_gg
   le_in_gg(0, 0) -> le_out_gg
   U3_gg(le_out_gg) -> le_out_gg

The set Q consists of the following terms:

   le_in_gg(x0, x1)
   U3_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   le_in_gg(s(X), s(Y)) -> U3_gg(le_in_gg(X, Y))
   le_in_gg(0, s(0)) -> le_out_gg
   le_in_gg(0, 0) -> le_out_gg
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(0) = 0
   POL(ORDERED_IN_G(x_1)) = x_1
   POL(U1_G(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + 2*x_3
   POL(U3_gg(x_1)) = x_1
   POL(le_in_gg(x_1, x_2)) = x_1 + x_2
   POL(le_out_gg) = 0
   POL(s(x_1)) = x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_G(Y, Xs, le_out_gg) -> ORDERED_IN_G(.(Y, Xs))
   ORDERED_IN_G(.(X, .(Y, Xs))) -> U1_G(Y, Xs, le_in_gg(X, Y))

The TRS R consists of the following rules:

   U3_gg(le_out_gg) -> le_out_gg

The set Q consists of the following terms:

   le_in_gg(x0, x1)
   U3_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(22)
TRUE
