YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/WeYJ7.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

subset(g,g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Clauses:

member(X, .(Y, Xs)) :- member(X, Xs).
member(X, .(X, Xs)).
subset(.(X, Xs), Ys) :- ','(member(X, Ys), subset(Xs, Ys)).
subset([], Ys).


Query: subset(g,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

subset_in_2: (b,b)

member_in_2: (b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   subset_in_gg(.(X, Xs), Ys) -> U2_gg(X, Xs, Ys, member_in_gg(X, Ys))
   member_in_gg(X, .(Y, Xs)) -> U1_gg(X, Y, Xs, member_in_gg(X, Xs))
   member_in_gg(X, .(X, Xs)) -> member_out_gg(X, .(X, Xs))
   U1_gg(X, Y, Xs, member_out_gg(X, Xs)) -> member_out_gg(X, .(Y, Xs))
   U2_gg(X, Xs, Ys, member_out_gg(X, Ys)) -> U3_gg(X, Xs, Ys, subset_in_gg(Xs, Ys))
   subset_in_gg([], Ys) -> subset_out_gg([], Ys)
   U3_gg(X, Xs, Ys, subset_out_gg(Xs, Ys)) -> subset_out_gg(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_gg(x1, x2)  =  subset_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x2, x3, x4)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

U1_gg(x1, x2, x3, x4)  =  U1_gg(x4)

member_out_gg(x1, x2)  =  member_out_gg

U3_gg(x1, x2, x3, x4)  =  U3_gg(x4)

[]  =  []

subset_out_gg(x1, x2)  =  subset_out_gg





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   subset_in_gg(.(X, Xs), Ys) -> U2_gg(X, Xs, Ys, member_in_gg(X, Ys))
   member_in_gg(X, .(Y, Xs)) -> U1_gg(X, Y, Xs, member_in_gg(X, Xs))
   member_in_gg(X, .(X, Xs)) -> member_out_gg(X, .(X, Xs))
   U1_gg(X, Y, Xs, member_out_gg(X, Xs)) -> member_out_gg(X, .(Y, Xs))
   U2_gg(X, Xs, Ys, member_out_gg(X, Ys)) -> U3_gg(X, Xs, Ys, subset_in_gg(Xs, Ys))
   subset_in_gg([], Ys) -> subset_out_gg([], Ys)
   U3_gg(X, Xs, Ys, subset_out_gg(Xs, Ys)) -> subset_out_gg(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_gg(x1, x2)  =  subset_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x2, x3, x4)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

U1_gg(x1, x2, x3, x4)  =  U1_gg(x4)

member_out_gg(x1, x2)  =  member_out_gg

U3_gg(x1, x2, x3, x4)  =  U3_gg(x4)

[]  =  []

subset_out_gg(x1, x2)  =  subset_out_gg



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSET_IN_GG(.(X, Xs), Ys) -> U2_GG(X, Xs, Ys, member_in_gg(X, Ys))
   SUBSET_IN_GG(.(X, Xs), Ys) -> MEMBER_IN_GG(X, Ys)
   MEMBER_IN_GG(X, .(Y, Xs)) -> U1_GG(X, Y, Xs, member_in_gg(X, Xs))
   MEMBER_IN_GG(X, .(Y, Xs)) -> MEMBER_IN_GG(X, Xs)
   U2_GG(X, Xs, Ys, member_out_gg(X, Ys)) -> U3_GG(X, Xs, Ys, subset_in_gg(Xs, Ys))
   U2_GG(X, Xs, Ys, member_out_gg(X, Ys)) -> SUBSET_IN_GG(Xs, Ys)

The TRS R consists of the following rules:

   subset_in_gg(.(X, Xs), Ys) -> U2_gg(X, Xs, Ys, member_in_gg(X, Ys))
   member_in_gg(X, .(Y, Xs)) -> U1_gg(X, Y, Xs, member_in_gg(X, Xs))
   member_in_gg(X, .(X, Xs)) -> member_out_gg(X, .(X, Xs))
   U1_gg(X, Y, Xs, member_out_gg(X, Xs)) -> member_out_gg(X, .(Y, Xs))
   U2_gg(X, Xs, Ys, member_out_gg(X, Ys)) -> U3_gg(X, Xs, Ys, subset_in_gg(Xs, Ys))
   subset_in_gg([], Ys) -> subset_out_gg([], Ys)
   U3_gg(X, Xs, Ys, subset_out_gg(Xs, Ys)) -> subset_out_gg(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_gg(x1, x2)  =  subset_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x2, x3, x4)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

U1_gg(x1, x2, x3, x4)  =  U1_gg(x4)

member_out_gg(x1, x2)  =  member_out_gg

U3_gg(x1, x2, x3, x4)  =  U3_gg(x4)

[]  =  []

subset_out_gg(x1, x2)  =  subset_out_gg

SUBSET_IN_GG(x1, x2)  =  SUBSET_IN_GG(x1, x2)

U2_GG(x1, x2, x3, x4)  =  U2_GG(x2, x3, x4)

MEMBER_IN_GG(x1, x2)  =  MEMBER_IN_GG(x1, x2)

U1_GG(x1, x2, x3, x4)  =  U1_GG(x4)

U3_GG(x1, x2, x3, x4)  =  U3_GG(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSET_IN_GG(.(X, Xs), Ys) -> U2_GG(X, Xs, Ys, member_in_gg(X, Ys))
   SUBSET_IN_GG(.(X, Xs), Ys) -> MEMBER_IN_GG(X, Ys)
   MEMBER_IN_GG(X, .(Y, Xs)) -> U1_GG(X, Y, Xs, member_in_gg(X, Xs))
   MEMBER_IN_GG(X, .(Y, Xs)) -> MEMBER_IN_GG(X, Xs)
   U2_GG(X, Xs, Ys, member_out_gg(X, Ys)) -> U3_GG(X, Xs, Ys, subset_in_gg(Xs, Ys))
   U2_GG(X, Xs, Ys, member_out_gg(X, Ys)) -> SUBSET_IN_GG(Xs, Ys)

The TRS R consists of the following rules:

   subset_in_gg(.(X, Xs), Ys) -> U2_gg(X, Xs, Ys, member_in_gg(X, Ys))
   member_in_gg(X, .(Y, Xs)) -> U1_gg(X, Y, Xs, member_in_gg(X, Xs))
   member_in_gg(X, .(X, Xs)) -> member_out_gg(X, .(X, Xs))
   U1_gg(X, Y, Xs, member_out_gg(X, Xs)) -> member_out_gg(X, .(Y, Xs))
   U2_gg(X, Xs, Ys, member_out_gg(X, Ys)) -> U3_gg(X, Xs, Ys, subset_in_gg(Xs, Ys))
   subset_in_gg([], Ys) -> subset_out_gg([], Ys)
   U3_gg(X, Xs, Ys, subset_out_gg(Xs, Ys)) -> subset_out_gg(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_gg(x1, x2)  =  subset_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x2, x3, x4)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

U1_gg(x1, x2, x3, x4)  =  U1_gg(x4)

member_out_gg(x1, x2)  =  member_out_gg

U3_gg(x1, x2, x3, x4)  =  U3_gg(x4)

[]  =  []

subset_out_gg(x1, x2)  =  subset_out_gg

SUBSET_IN_GG(x1, x2)  =  SUBSET_IN_GG(x1, x2)

U2_GG(x1, x2, x3, x4)  =  U2_GG(x2, x3, x4)

MEMBER_IN_GG(x1, x2)  =  MEMBER_IN_GG(x1, x2)

U1_GG(x1, x2, x3, x4)  =  U1_GG(x4)

U3_GG(x1, x2, x3, x4)  =  U3_GG(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GG(X, .(Y, Xs)) -> MEMBER_IN_GG(X, Xs)

The TRS R consists of the following rules:

   subset_in_gg(.(X, Xs), Ys) -> U2_gg(X, Xs, Ys, member_in_gg(X, Ys))
   member_in_gg(X, .(Y, Xs)) -> U1_gg(X, Y, Xs, member_in_gg(X, Xs))
   member_in_gg(X, .(X, Xs)) -> member_out_gg(X, .(X, Xs))
   U1_gg(X, Y, Xs, member_out_gg(X, Xs)) -> member_out_gg(X, .(Y, Xs))
   U2_gg(X, Xs, Ys, member_out_gg(X, Ys)) -> U3_gg(X, Xs, Ys, subset_in_gg(Xs, Ys))
   subset_in_gg([], Ys) -> subset_out_gg([], Ys)
   U3_gg(X, Xs, Ys, subset_out_gg(Xs, Ys)) -> subset_out_gg(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_gg(x1, x2)  =  subset_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x2, x3, x4)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

U1_gg(x1, x2, x3, x4)  =  U1_gg(x4)

member_out_gg(x1, x2)  =  member_out_gg

U3_gg(x1, x2, x3, x4)  =  U3_gg(x4)

[]  =  []

subset_out_gg(x1, x2)  =  subset_out_gg

MEMBER_IN_GG(x1, x2)  =  MEMBER_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GG(X, .(Y, Xs)) -> MEMBER_IN_GG(X, Xs)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GG(X, .(Y, Xs)) -> MEMBER_IN_GG(X, Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER_IN_GG(X, .(Y, Xs)) -> MEMBER_IN_GG(X, Xs)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GG(X, Xs, Ys, member_out_gg(X, Ys)) -> SUBSET_IN_GG(Xs, Ys)
   SUBSET_IN_GG(.(X, Xs), Ys) -> U2_GG(X, Xs, Ys, member_in_gg(X, Ys))

The TRS R consists of the following rules:

   subset_in_gg(.(X, Xs), Ys) -> U2_gg(X, Xs, Ys, member_in_gg(X, Ys))
   member_in_gg(X, .(Y, Xs)) -> U1_gg(X, Y, Xs, member_in_gg(X, Xs))
   member_in_gg(X, .(X, Xs)) -> member_out_gg(X, .(X, Xs))
   U1_gg(X, Y, Xs, member_out_gg(X, Xs)) -> member_out_gg(X, .(Y, Xs))
   U2_gg(X, Xs, Ys, member_out_gg(X, Ys)) -> U3_gg(X, Xs, Ys, subset_in_gg(Xs, Ys))
   subset_in_gg([], Ys) -> subset_out_gg([], Ys)
   U3_gg(X, Xs, Ys, subset_out_gg(Xs, Ys)) -> subset_out_gg(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_gg(x1, x2)  =  subset_in_gg(x1, x2)

.(x1, x2)  =  .(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x2, x3, x4)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

U1_gg(x1, x2, x3, x4)  =  U1_gg(x4)

member_out_gg(x1, x2)  =  member_out_gg

U3_gg(x1, x2, x3, x4)  =  U3_gg(x4)

[]  =  []

subset_out_gg(x1, x2)  =  subset_out_gg

SUBSET_IN_GG(x1, x2)  =  SUBSET_IN_GG(x1, x2)

U2_GG(x1, x2, x3, x4)  =  U2_GG(x2, x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GG(X, Xs, Ys, member_out_gg(X, Ys)) -> SUBSET_IN_GG(Xs, Ys)
   SUBSET_IN_GG(.(X, Xs), Ys) -> U2_GG(X, Xs, Ys, member_in_gg(X, Ys))

The TRS R consists of the following rules:

   member_in_gg(X, .(Y, Xs)) -> U1_gg(X, Y, Xs, member_in_gg(X, Xs))
   member_in_gg(X, .(X, Xs)) -> member_out_gg(X, .(X, Xs))
   U1_gg(X, Y, Xs, member_out_gg(X, Xs)) -> member_out_gg(X, .(Y, Xs))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

member_in_gg(x1, x2)  =  member_in_gg(x1, x2)

U1_gg(x1, x2, x3, x4)  =  U1_gg(x4)

member_out_gg(x1, x2)  =  member_out_gg

SUBSET_IN_GG(x1, x2)  =  SUBSET_IN_GG(x1, x2)

U2_GG(x1, x2, x3, x4)  =  U2_GG(x2, x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GG(Xs, Ys, member_out_gg) -> SUBSET_IN_GG(Xs, Ys)
   SUBSET_IN_GG(.(X, Xs), Ys) -> U2_GG(Xs, Ys, member_in_gg(X, Ys))

The TRS R consists of the following rules:

   member_in_gg(X, .(Y, Xs)) -> U1_gg(member_in_gg(X, Xs))
   member_in_gg(X, .(X, Xs)) -> member_out_gg
   U1_gg(member_out_gg) -> member_out_gg

The set Q consists of the following terms:

   member_in_gg(x0, x1)
   U1_gg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SUBSET_IN_GG(.(X, Xs), Ys) -> U2_GG(Xs, Ys, member_in_gg(X, Ys))
The graph contains the following edges 1 > 1, 2 >= 2


*U2_GG(Xs, Ys, member_out_gg) -> SUBSET_IN_GG(Xs, Ys)
The graph contains the following edges 1 >= 1, 2 >= 2


----------------------------------------

(20)
YES
