MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/W885T.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

s2(g,a)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) AND
        (7) PiDP
            (8) UsableRulesProof [EQUIVALENT, 0 ms]
            (9) PiDP
            (10) PiDPToQDPProof [SOUND, 2 ms]
            (11) QDP
            (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (13) YES
        (14) PiDP
            (15) UsableRulesProof [EQUIVALENT, 0 ms]
            (16) PiDP
            (17) PiDPToQDPProof [EQUIVALENT, 0 ms]
            (18) QDP
            (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (20) YES
        (21) PiDP
            (22) PiDPToQDPProof [SOUND, 0 ms]
            (23) QDP
            (24) QDPOrderProof [EQUIVALENT, 26 ms]
            (25) QDP
            (26) QDPQMonotonicMRRProof [EQUIVALENT, 25 ms]
            (27) QDP
                (28) QDPOrderProof [EQUIVALENT, 11 ms]
                (29) QDP
                (30) QDPQMonotonicMRRProof [EQUIVALENT, 11 ms]
                (31) QDP
                    (32) UsableRulesReductionPairsProof [EQUIVALENT, 3 ms]
                    (33) QDP
                    (34) MRRProof [EQUIVALENT, 7 ms]
                    (35) QDP
                    (36) UsableRulesProof [EQUIVALENT, 0 ms]
                    (37) QDP
                    (38) QReductionProof [EQUIVALENT, 0 ms]
                    (39) QDP
                    (40) UsableRulesReductionPairsProof [EQUIVALENT, 5 ms]
                    (41) QDP
                    (42) UsableRulesProof [EQUIVALENT, 0 ms]
                    (43) QDP
                    (44) QReductionProof [EQUIVALENT, 0 ms]
                    (45) QDP
                    (46) MRRProof [EQUIVALENT, 0 ms]
                    (47) QDP
                    (48) DependencyGraphProof [EQUIVALENT, 0 ms]
                    (49) QDP
                    (50) UsableRulesProof [EQUIVALENT, 0 ms]
                    (51) QDP
                    (52) QReductionProof [EQUIVALENT, 0 ms]
                    (53) QDP
(54) PrologToPiTRSProof [SOUND, 0 ms]
(55) PiTRS
    (56) DependencyPairsProof [EQUIVALENT, 0 ms]
    (57) PiDP
    (58) DependencyGraphProof [EQUIVALENT, 0 ms]
    (59) AND
        (60) PiDP
            (61) UsableRulesProof [EQUIVALENT, 0 ms]
            (62) PiDP
            (63) PiDPToQDPProof [SOUND, 0 ms]
            (64) QDP
            (65) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (66) YES
        (67) PiDP
            (68) UsableRulesProof [EQUIVALENT, 0 ms]
            (69) PiDP
            (70) PiDPToQDPProof [EQUIVALENT, 0 ms]
            (71) QDP
            (72) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (73) YES
        (74) PiDP
            (75) PiDPToQDPProof [SOUND, 0 ms]
            (76) QDP
            (77) QDPQMonotonicMRRProof [EQUIVALENT, 38 ms]
            (78) QDP
            (79) UsableRulesProof [EQUIVALENT, 0 ms]
            (80) QDP
            (81) QReductionProof [EQUIVALENT, 0 ms]
            (82) QDP
            (83) QDPQMonotonicMRRProof [EQUIVALENT, 11 ms]
            (84) QDP
            (85) DependencyGraphProof [EQUIVALENT, 0 ms]
            (86) QDP
            (87) UsableRulesProof [EQUIVALENT, 0 ms]
            (88) QDP
            (89) QReductionProof [EQUIVALENT, 0 ms]
            (90) QDP
            (91) NonTerminationLoopProof [COMPLETE, 4 ms]
            (92) NO
(93) PrologToTRSTransformerProof [SOUND, 0 ms]
(94) QTRS
    (95) DependencyPairsProof [EQUIVALENT, 0 ms]
    (96) QDP
    (97) DependencyGraphProof [EQUIVALENT, 0 ms]
    (98) AND
        (99) QDP
            (100) UsableRulesProof [EQUIVALENT, 0 ms]
            (101) QDP
            (102) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (103) YES
        (104) QDP
            (105) UsableRulesProof [EQUIVALENT, 0 ms]
            (106) QDP
            (107) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (108) YES
        (109) QDP
            (110) QDPOrderProof [EQUIVALENT, 16 ms]
            (111) QDP
            (112) DependencyGraphProof [EQUIVALENT, 0 ms]
            (113) QDP
            (114) UsableRulesProof [EQUIVALENT, 0 ms]
            (115) QDP
            (116) NonTerminationLoopProof [COMPLETE, 0 ms]
            (117) NO
(118) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(119) AND
    (120) IRSwT
        (121) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (122) TRUE
    (123) IRSwT
        (124) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (125) IRSwT
        (126) IntTRSCompressionProof [EQUIVALENT, 9 ms]
        (127) IRSwT
        (128) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (129) IRSwT
        (130) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
        (131) IRSwT
        (132) TempFilterProof [SOUND, 1 ms]
        (133) IRSwT
        (134) IRSwTToQDPProof [SOUND, 0 ms]
        (135) QDP
        (136) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (137) YES
    (138) IRSwT
        (139) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (140) IRSwT
        (141) IntTRSCompressionProof [EQUIVALENT, 4 ms]
        (142) IRSwT
        (143) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (144) IRSwT
        (145) IRSwTTerminationDigraphProof [EQUIVALENT, 9 ms]
        (146) IRSwT
(147) PrologToDTProblemTransformerProof [SOUND, 57 ms]
(148) TRIPLES
    (149) UndefinedPredicateInTriplesTransformerProof [SOUND, 0 ms]
    (150) TRIPLES
    (151) TriplesToPiDPProof [SOUND, 18 ms]
    (152) PiDP
    (153) DependencyGraphProof [EQUIVALENT, 0 ms]
    (154) AND
        (155) PiDP
            (156) UsableRulesProof [EQUIVALENT, 0 ms]
            (157) PiDP
            (158) PiDPToQDPProof [SOUND, 0 ms]
            (159) QDP
            (160) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (161) YES
        (162) PiDP
            (163) UsableRulesProof [EQUIVALENT, 0 ms]
            (164) PiDP
            (165) PiDPToQDPProof [EQUIVALENT, 0 ms]
            (166) QDP
            (167) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (168) YES
        (169) PiDP
            (170) PiDPToQDPProof [SOUND, 15 ms]
            (171) QDP
            (172) QDPOrderProof [EQUIVALENT, 437 ms]
            (173) QDP
            (174) DependencyGraphProof [EQUIVALENT, 0 ms]
            (175) QDP
            (176) UsableRulesProof [EQUIVALENT, 0 ms]
            (177) QDP
            (178) QReductionProof [EQUIVALENT, 0 ms]
            (179) QDP


----------------------------------------

(0)
Obligation:
Clauses:

s2(plus(A, plus(B, C)), D) :- s2(plus(plus(A, B), C), D).
s2(plus(A, B), C) :- s2(plus(B, A), C).
s2(plus(X, 0), X).
s2(plus(X, Y), Z) :- ','(s2(X, A), ','(s2(Y, B), s2(plus(A, B), Z))).
s2(plus(A, B), C) :- ','(isNat(A), ','(isNat(B), add(A, B, C))).
isNat(s(X)) :- isNat(X).
isNat(0).
add(s(X), Y, s(Z)) :- add(X, Y, Z).
add(0, X, X).


Query: s2(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

s2_in_2: (b,f)

isNat_in_1: (b)

add_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C)), D) -> U1_ga(A, B, C, D, s2_in_ga(plus(plus(A, B), C), D))
   s2_in_ga(plus(A, B), C) -> U2_ga(A, B, C, s2_in_ga(plus(B, A), C))
   s2_in_ga(plus(X, 0), X) -> s2_out_ga(plus(X, 0), X)
   s2_in_ga(plus(X, Y), Z) -> U3_ga(X, Y, Z, s2_in_ga(X, A))
   s2_in_ga(plus(A, B), C) -> U6_ga(A, B, C, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U6_ga(A, B, C, isNat_out_g(A)) -> U7_ga(A, B, C, isNat_in_g(B))
   U7_ga(A, B, C, isNat_out_g(B)) -> U8_ga(A, B, C, add_in_gga(A, B, C))
   add_in_gga(s(X), Y, s(Z)) -> U10_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U10_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U8_ga(A, B, C, add_out_gga(A, B, C)) -> s2_out_ga(plus(A, B), C)
   U3_ga(X, Y, Z, s2_out_ga(X, A)) -> U4_ga(X, Y, Z, A, s2_in_ga(Y, B))
   U4_ga(X, Y, Z, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, Z, s2_in_ga(plus(A, B), Z))
   U5_ga(X, Y, Z, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, C, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, D, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The argument filtering Pi contains the following mapping:
s2_in_ga(x1, x2)  =  s2_in_ga(x1)

plus(x1, x2)  =  plus(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)

0  =  0

s2_out_ga(x1, x2)  =  s2_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x2, x4)

isNat_in_g(x1)  =  isNat_in_g(x1)

s(x1)  =  s(x1)

U9_g(x1, x2)  =  U9_g(x2)

isNat_out_g(x1)  =  isNat_out_g

U7_ga(x1, x2, x3, x4)  =  U7_ga(x1, x2, x4)

U8_ga(x1, x2, x3, x4)  =  U8_ga(x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x4, x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C)), D) -> U1_ga(A, B, C, D, s2_in_ga(plus(plus(A, B), C), D))
   s2_in_ga(plus(A, B), C) -> U2_ga(A, B, C, s2_in_ga(plus(B, A), C))
   s2_in_ga(plus(X, 0), X) -> s2_out_ga(plus(X, 0), X)
   s2_in_ga(plus(X, Y), Z) -> U3_ga(X, Y, Z, s2_in_ga(X, A))
   s2_in_ga(plus(A, B), C) -> U6_ga(A, B, C, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U6_ga(A, B, C, isNat_out_g(A)) -> U7_ga(A, B, C, isNat_in_g(B))
   U7_ga(A, B, C, isNat_out_g(B)) -> U8_ga(A, B, C, add_in_gga(A, B, C))
   add_in_gga(s(X), Y, s(Z)) -> U10_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U10_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U8_ga(A, B, C, add_out_gga(A, B, C)) -> s2_out_ga(plus(A, B), C)
   U3_ga(X, Y, Z, s2_out_ga(X, A)) -> U4_ga(X, Y, Z, A, s2_in_ga(Y, B))
   U4_ga(X, Y, Z, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, Z, s2_in_ga(plus(A, B), Z))
   U5_ga(X, Y, Z, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, C, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, D, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The argument filtering Pi contains the following mapping:
s2_in_ga(x1, x2)  =  s2_in_ga(x1)

plus(x1, x2)  =  plus(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)

0  =  0

s2_out_ga(x1, x2)  =  s2_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x2, x4)

isNat_in_g(x1)  =  isNat_in_g(x1)

s(x1)  =  s(x1)

U9_g(x1, x2)  =  U9_g(x2)

isNat_out_g(x1)  =  isNat_out_g

U7_ga(x1, x2, x3, x4)  =  U7_ga(x1, x2, x4)

U8_ga(x1, x2, x3, x4)  =  U8_ga(x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x4, x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, plus(B, C)), D) -> U1_GA(A, B, C, D, s2_in_ga(plus(plus(A, B), C), D))
   S2_IN_GA(plus(A, plus(B, C)), D) -> S2_IN_GA(plus(plus(A, B), C), D)
   S2_IN_GA(plus(A, B), C) -> U2_GA(A, B, C, s2_in_ga(plus(B, A), C))
   S2_IN_GA(plus(A, B), C) -> S2_IN_GA(plus(B, A), C)
   S2_IN_GA(plus(X, Y), Z) -> U3_GA(X, Y, Z, s2_in_ga(X, A))
   S2_IN_GA(plus(X, Y), Z) -> S2_IN_GA(X, A)
   S2_IN_GA(plus(A, B), C) -> U6_GA(A, B, C, isNat_in_g(A))
   S2_IN_GA(plus(A, B), C) -> ISNAT_IN_G(A)
   ISNAT_IN_G(s(X)) -> U9_G(X, isNat_in_g(X))
   ISNAT_IN_G(s(X)) -> ISNAT_IN_G(X)
   U6_GA(A, B, C, isNat_out_g(A)) -> U7_GA(A, B, C, isNat_in_g(B))
   U6_GA(A, B, C, isNat_out_g(A)) -> ISNAT_IN_G(B)
   U7_GA(A, B, C, isNat_out_g(B)) -> U8_GA(A, B, C, add_in_gga(A, B, C))
   U7_GA(A, B, C, isNat_out_g(B)) -> ADD_IN_GGA(A, B, C)
   ADD_IN_GGA(s(X), Y, s(Z)) -> U10_GGA(X, Y, Z, add_in_gga(X, Y, Z))
   ADD_IN_GGA(s(X), Y, s(Z)) -> ADD_IN_GGA(X, Y, Z)
   U3_GA(X, Y, Z, s2_out_ga(X, A)) -> U4_GA(X, Y, Z, A, s2_in_ga(Y, B))
   U3_GA(X, Y, Z, s2_out_ga(X, A)) -> S2_IN_GA(Y, B)
   U4_GA(X, Y, Z, A, s2_out_ga(Y, B)) -> U5_GA(X, Y, Z, s2_in_ga(plus(A, B), Z))
   U4_GA(X, Y, Z, A, s2_out_ga(Y, B)) -> S2_IN_GA(plus(A, B), Z)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C)), D) -> U1_ga(A, B, C, D, s2_in_ga(plus(plus(A, B), C), D))
   s2_in_ga(plus(A, B), C) -> U2_ga(A, B, C, s2_in_ga(plus(B, A), C))
   s2_in_ga(plus(X, 0), X) -> s2_out_ga(plus(X, 0), X)
   s2_in_ga(plus(X, Y), Z) -> U3_ga(X, Y, Z, s2_in_ga(X, A))
   s2_in_ga(plus(A, B), C) -> U6_ga(A, B, C, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U6_ga(A, B, C, isNat_out_g(A)) -> U7_ga(A, B, C, isNat_in_g(B))
   U7_ga(A, B, C, isNat_out_g(B)) -> U8_ga(A, B, C, add_in_gga(A, B, C))
   add_in_gga(s(X), Y, s(Z)) -> U10_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U10_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U8_ga(A, B, C, add_out_gga(A, B, C)) -> s2_out_ga(plus(A, B), C)
   U3_ga(X, Y, Z, s2_out_ga(X, A)) -> U4_ga(X, Y, Z, A, s2_in_ga(Y, B))
   U4_ga(X, Y, Z, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, Z, s2_in_ga(plus(A, B), Z))
   U5_ga(X, Y, Z, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, C, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, D, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The argument filtering Pi contains the following mapping:
s2_in_ga(x1, x2)  =  s2_in_ga(x1)

plus(x1, x2)  =  plus(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)

0  =  0

s2_out_ga(x1, x2)  =  s2_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x2, x4)

isNat_in_g(x1)  =  isNat_in_g(x1)

s(x1)  =  s(x1)

U9_g(x1, x2)  =  U9_g(x2)

isNat_out_g(x1)  =  isNat_out_g

U7_ga(x1, x2, x3, x4)  =  U7_ga(x1, x2, x4)

U8_ga(x1, x2, x3, x4)  =  U8_ga(x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x4, x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

S2_IN_GA(x1, x2)  =  S2_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x5)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x4)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x2, x4)

U6_GA(x1, x2, x3, x4)  =  U6_GA(x1, x2, x4)

ISNAT_IN_G(x1)  =  ISNAT_IN_G(x1)

U9_G(x1, x2)  =  U9_G(x2)

U7_GA(x1, x2, x3, x4)  =  U7_GA(x1, x2, x4)

U8_GA(x1, x2, x3, x4)  =  U8_GA(x4)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)

U10_GGA(x1, x2, x3, x4)  =  U10_GGA(x4)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x4, x5)

U5_GA(x1, x2, x3, x4)  =  U5_GA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, plus(B, C)), D) -> U1_GA(A, B, C, D, s2_in_ga(plus(plus(A, B), C), D))
   S2_IN_GA(plus(A, plus(B, C)), D) -> S2_IN_GA(plus(plus(A, B), C), D)
   S2_IN_GA(plus(A, B), C) -> U2_GA(A, B, C, s2_in_ga(plus(B, A), C))
   S2_IN_GA(plus(A, B), C) -> S2_IN_GA(plus(B, A), C)
   S2_IN_GA(plus(X, Y), Z) -> U3_GA(X, Y, Z, s2_in_ga(X, A))
   S2_IN_GA(plus(X, Y), Z) -> S2_IN_GA(X, A)
   S2_IN_GA(plus(A, B), C) -> U6_GA(A, B, C, isNat_in_g(A))
   S2_IN_GA(plus(A, B), C) -> ISNAT_IN_G(A)
   ISNAT_IN_G(s(X)) -> U9_G(X, isNat_in_g(X))
   ISNAT_IN_G(s(X)) -> ISNAT_IN_G(X)
   U6_GA(A, B, C, isNat_out_g(A)) -> U7_GA(A, B, C, isNat_in_g(B))
   U6_GA(A, B, C, isNat_out_g(A)) -> ISNAT_IN_G(B)
   U7_GA(A, B, C, isNat_out_g(B)) -> U8_GA(A, B, C, add_in_gga(A, B, C))
   U7_GA(A, B, C, isNat_out_g(B)) -> ADD_IN_GGA(A, B, C)
   ADD_IN_GGA(s(X), Y, s(Z)) -> U10_GGA(X, Y, Z, add_in_gga(X, Y, Z))
   ADD_IN_GGA(s(X), Y, s(Z)) -> ADD_IN_GGA(X, Y, Z)
   U3_GA(X, Y, Z, s2_out_ga(X, A)) -> U4_GA(X, Y, Z, A, s2_in_ga(Y, B))
   U3_GA(X, Y, Z, s2_out_ga(X, A)) -> S2_IN_GA(Y, B)
   U4_GA(X, Y, Z, A, s2_out_ga(Y, B)) -> U5_GA(X, Y, Z, s2_in_ga(plus(A, B), Z))
   U4_GA(X, Y, Z, A, s2_out_ga(Y, B)) -> S2_IN_GA(plus(A, B), Z)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C)), D) -> U1_ga(A, B, C, D, s2_in_ga(plus(plus(A, B), C), D))
   s2_in_ga(plus(A, B), C) -> U2_ga(A, B, C, s2_in_ga(plus(B, A), C))
   s2_in_ga(plus(X, 0), X) -> s2_out_ga(plus(X, 0), X)
   s2_in_ga(plus(X, Y), Z) -> U3_ga(X, Y, Z, s2_in_ga(X, A))
   s2_in_ga(plus(A, B), C) -> U6_ga(A, B, C, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U6_ga(A, B, C, isNat_out_g(A)) -> U7_ga(A, B, C, isNat_in_g(B))
   U7_ga(A, B, C, isNat_out_g(B)) -> U8_ga(A, B, C, add_in_gga(A, B, C))
   add_in_gga(s(X), Y, s(Z)) -> U10_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U10_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U8_ga(A, B, C, add_out_gga(A, B, C)) -> s2_out_ga(plus(A, B), C)
   U3_ga(X, Y, Z, s2_out_ga(X, A)) -> U4_ga(X, Y, Z, A, s2_in_ga(Y, B))
   U4_ga(X, Y, Z, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, Z, s2_in_ga(plus(A, B), Z))
   U5_ga(X, Y, Z, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, C, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, D, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The argument filtering Pi contains the following mapping:
s2_in_ga(x1, x2)  =  s2_in_ga(x1)

plus(x1, x2)  =  plus(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)

0  =  0

s2_out_ga(x1, x2)  =  s2_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x2, x4)

isNat_in_g(x1)  =  isNat_in_g(x1)

s(x1)  =  s(x1)

U9_g(x1, x2)  =  U9_g(x2)

isNat_out_g(x1)  =  isNat_out_g

U7_ga(x1, x2, x3, x4)  =  U7_ga(x1, x2, x4)

U8_ga(x1, x2, x3, x4)  =  U8_ga(x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x4, x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

S2_IN_GA(x1, x2)  =  S2_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x5)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x4)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x2, x4)

U6_GA(x1, x2, x3, x4)  =  U6_GA(x1, x2, x4)

ISNAT_IN_G(x1)  =  ISNAT_IN_G(x1)

U9_G(x1, x2)  =  U9_G(x2)

U7_GA(x1, x2, x3, x4)  =  U7_GA(x1, x2, x4)

U8_GA(x1, x2, x3, x4)  =  U8_GA(x4)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)

U10_GGA(x1, x2, x3, x4)  =  U10_GGA(x4)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x4, x5)

U5_GA(x1, x2, x3, x4)  =  U5_GA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 11 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ADD_IN_GGA(s(X), Y, s(Z)) -> ADD_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C)), D) -> U1_ga(A, B, C, D, s2_in_ga(plus(plus(A, B), C), D))
   s2_in_ga(plus(A, B), C) -> U2_ga(A, B, C, s2_in_ga(plus(B, A), C))
   s2_in_ga(plus(X, 0), X) -> s2_out_ga(plus(X, 0), X)
   s2_in_ga(plus(X, Y), Z) -> U3_ga(X, Y, Z, s2_in_ga(X, A))
   s2_in_ga(plus(A, B), C) -> U6_ga(A, B, C, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U6_ga(A, B, C, isNat_out_g(A)) -> U7_ga(A, B, C, isNat_in_g(B))
   U7_ga(A, B, C, isNat_out_g(B)) -> U8_ga(A, B, C, add_in_gga(A, B, C))
   add_in_gga(s(X), Y, s(Z)) -> U10_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U10_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U8_ga(A, B, C, add_out_gga(A, B, C)) -> s2_out_ga(plus(A, B), C)
   U3_ga(X, Y, Z, s2_out_ga(X, A)) -> U4_ga(X, Y, Z, A, s2_in_ga(Y, B))
   U4_ga(X, Y, Z, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, Z, s2_in_ga(plus(A, B), Z))
   U5_ga(X, Y, Z, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, C, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, D, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The argument filtering Pi contains the following mapping:
s2_in_ga(x1, x2)  =  s2_in_ga(x1)

plus(x1, x2)  =  plus(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)

0  =  0

s2_out_ga(x1, x2)  =  s2_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x2, x4)

isNat_in_g(x1)  =  isNat_in_g(x1)

s(x1)  =  s(x1)

U9_g(x1, x2)  =  U9_g(x2)

isNat_out_g(x1)  =  isNat_out_g

U7_ga(x1, x2, x3, x4)  =  U7_ga(x1, x2, x4)

U8_ga(x1, x2, x3, x4)  =  U8_ga(x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x4, x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ADD_IN_GGA(s(X), Y, s(Z)) -> ADD_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD_IN_GGA(s(X), Y) -> ADD_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ADD_IN_GGA(s(X), Y) -> ADD_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISNAT_IN_G(s(X)) -> ISNAT_IN_G(X)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C)), D) -> U1_ga(A, B, C, D, s2_in_ga(plus(plus(A, B), C), D))
   s2_in_ga(plus(A, B), C) -> U2_ga(A, B, C, s2_in_ga(plus(B, A), C))
   s2_in_ga(plus(X, 0), X) -> s2_out_ga(plus(X, 0), X)
   s2_in_ga(plus(X, Y), Z) -> U3_ga(X, Y, Z, s2_in_ga(X, A))
   s2_in_ga(plus(A, B), C) -> U6_ga(A, B, C, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U6_ga(A, B, C, isNat_out_g(A)) -> U7_ga(A, B, C, isNat_in_g(B))
   U7_ga(A, B, C, isNat_out_g(B)) -> U8_ga(A, B, C, add_in_gga(A, B, C))
   add_in_gga(s(X), Y, s(Z)) -> U10_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U10_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U8_ga(A, B, C, add_out_gga(A, B, C)) -> s2_out_ga(plus(A, B), C)
   U3_ga(X, Y, Z, s2_out_ga(X, A)) -> U4_ga(X, Y, Z, A, s2_in_ga(Y, B))
   U4_ga(X, Y, Z, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, Z, s2_in_ga(plus(A, B), Z))
   U5_ga(X, Y, Z, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, C, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, D, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The argument filtering Pi contains the following mapping:
s2_in_ga(x1, x2)  =  s2_in_ga(x1)

plus(x1, x2)  =  plus(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)

0  =  0

s2_out_ga(x1, x2)  =  s2_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x2, x4)

isNat_in_g(x1)  =  isNat_in_g(x1)

s(x1)  =  s(x1)

U9_g(x1, x2)  =  U9_g(x2)

isNat_out_g(x1)  =  isNat_out_g

U7_ga(x1, x2, x3, x4)  =  U7_ga(x1, x2, x4)

U8_ga(x1, x2, x3, x4)  =  U8_ga(x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x4, x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

ISNAT_IN_G(x1)  =  ISNAT_IN_G(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISNAT_IN_G(s(X)) -> ISNAT_IN_G(X)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT_IN_G(s(X)) -> ISNAT_IN_G(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISNAT_IN_G(s(X)) -> ISNAT_IN_G(X)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B), C) -> S2_IN_GA(plus(B, A), C)
   S2_IN_GA(plus(A, plus(B, C)), D) -> S2_IN_GA(plus(plus(A, B), C), D)
   S2_IN_GA(plus(X, Y), Z) -> U3_GA(X, Y, Z, s2_in_ga(X, A))
   U3_GA(X, Y, Z, s2_out_ga(X, A)) -> U4_GA(X, Y, Z, A, s2_in_ga(Y, B))
   U4_GA(X, Y, Z, A, s2_out_ga(Y, B)) -> S2_IN_GA(plus(A, B), Z)
   S2_IN_GA(plus(X, Y), Z) -> S2_IN_GA(X, A)
   U3_GA(X, Y, Z, s2_out_ga(X, A)) -> S2_IN_GA(Y, B)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C)), D) -> U1_ga(A, B, C, D, s2_in_ga(plus(plus(A, B), C), D))
   s2_in_ga(plus(A, B), C) -> U2_ga(A, B, C, s2_in_ga(plus(B, A), C))
   s2_in_ga(plus(X, 0), X) -> s2_out_ga(plus(X, 0), X)
   s2_in_ga(plus(X, Y), Z) -> U3_ga(X, Y, Z, s2_in_ga(X, A))
   s2_in_ga(plus(A, B), C) -> U6_ga(A, B, C, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U6_ga(A, B, C, isNat_out_g(A)) -> U7_ga(A, B, C, isNat_in_g(B))
   U7_ga(A, B, C, isNat_out_g(B)) -> U8_ga(A, B, C, add_in_gga(A, B, C))
   add_in_gga(s(X), Y, s(Z)) -> U10_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U10_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U8_ga(A, B, C, add_out_gga(A, B, C)) -> s2_out_ga(plus(A, B), C)
   U3_ga(X, Y, Z, s2_out_ga(X, A)) -> U4_ga(X, Y, Z, A, s2_in_ga(Y, B))
   U4_ga(X, Y, Z, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, Z, s2_in_ga(plus(A, B), Z))
   U5_ga(X, Y, Z, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, C, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, D, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The argument filtering Pi contains the following mapping:
s2_in_ga(x1, x2)  =  s2_in_ga(x1)

plus(x1, x2)  =  plus(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)

0  =  0

s2_out_ga(x1, x2)  =  s2_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x2, x4)

isNat_in_g(x1)  =  isNat_in_g(x1)

s(x1)  =  s(x1)

U9_g(x1, x2)  =  U9_g(x2)

isNat_out_g(x1)  =  isNat_out_g

U7_ga(x1, x2, x3, x4)  =  U7_ga(x1, x2, x4)

U8_ga(x1, x2, x3, x4)  =  U8_ga(x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x3)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x4, x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

S2_IN_GA(x1, x2)  =  S2_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x2, x4)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(X, Y)) -> U3_GA(Y, s2_in_ga(X))
   U3_GA(Y, s2_out_ga(A)) -> U4_GA(A, s2_in_ga(Y))
   U4_GA(A, s2_out_ga(B)) -> S2_IN_GA(plus(A, B))
   S2_IN_GA(plus(X, Y)) -> S2_IN_GA(X)
   U3_GA(Y, s2_out_ga(A)) -> S2_IN_GA(Y)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, 0)) -> s2_out_ga(X)
   s2_in_ga(plus(X, Y)) -> U3_ga(Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g
   U9_g(isNat_out_g) -> isNat_out_g
   U6_ga(A, B, isNat_out_g) -> U7_ga(A, B, isNat_in_g(B))
   U7_ga(A, B, isNat_out_g) -> U8_ga(add_in_gga(A, B))
   add_in_gga(s(X), Y) -> U10_gga(add_in_gga(X, Y))
   add_in_gga(0, X) -> add_out_gga(X)
   U10_gga(add_out_gga(Z)) -> add_out_gga(s(Z))
   U8_ga(add_out_gga(C)) -> s2_out_ga(C)
   U3_ga(Y, s2_out_ga(A)) -> U4_ga(A, s2_in_ga(Y))
   U4_ga(A, s2_out_ga(B)) -> U5_ga(s2_in_ga(plus(A, B)))
   U5_ga(s2_out_ga(Z)) -> s2_out_ga(Z)
   U2_ga(s2_out_ga(C)) -> s2_out_ga(C)
   U1_ga(s2_out_ga(D)) -> s2_out_ga(D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U9_g(x0)
   U6_ga(x0, x1, x2)
   U7_ga(x0, x1, x2)
   add_in_gga(x0, x1)
   U10_gga(x0)
   U8_ga(x0)
   U3_ga(x0, x1)
   U4_ga(x0, x1)
   U5_ga(x0)
   U2_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(24) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   S2_IN_GA(plus(X, Y)) -> S2_IN_GA(X)
   U3_GA(Y, s2_out_ga(A)) -> S2_IN_GA(Y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U3_GA_2(x_1, x_2) ) = 2x_1 + 2x_2 + 1
POL( U4_GA_2(x_1, x_2) ) = 2x_1 + 2x_2 + 1
POL( s2_in_ga_1(x_1) ) = max{0, x_1 - 1}
POL( plus_2(x_1, x_2) ) = x_1 + x_2 + 1
POL( U1_ga_1(x_1) ) = x_1
POL( U2_ga_1(x_1) ) = x_1
POL( 0 ) = 0
POL( s2_out_ga_1(x_1) ) = x_1
POL( U3_ga_2(x_1, x_2) ) = x_1 + x_2
POL( U6_ga_3(x_1, ..., x_3) ) = x_2
POL( isNat_in_g_1(x_1) ) = 0
POL( U4_ga_2(x_1, x_2) ) = x_1 + x_2
POL( U5_ga_1(x_1) ) = x_1
POL( U7_ga_3(x_1, ..., x_3) ) = x_2
POL( s_1(x_1) ) = 0
POL( U9_g_1(x_1) ) = max{0, -2}
POL( isNat_out_g ) = 0
POL( U8_ga_1(x_1) ) = x_1
POL( add_in_gga_2(x_1, x_2) ) = x_2
POL( U10_gga_1(x_1) ) = max{0, -2}
POL( add_out_gga_1(x_1) ) = x_1
POL( S2_IN_GA_1(x_1) ) = max{0, 2x_1 - 1}

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, 0)) -> s2_out_ga(X)
   s2_in_ga(plus(X, Y)) -> U3_ga(Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   U2_ga(s2_out_ga(C)) -> s2_out_ga(C)
   U1_ga(s2_out_ga(D)) -> s2_out_ga(D)
   U3_ga(Y, s2_out_ga(A)) -> U4_ga(A, s2_in_ga(Y))
   U4_ga(A, s2_out_ga(B)) -> U5_ga(s2_in_ga(plus(A, B)))
   U5_ga(s2_out_ga(Z)) -> s2_out_ga(Z)
   U6_ga(A, B, isNat_out_g) -> U7_ga(A, B, isNat_in_g(B))
   U7_ga(A, B, isNat_out_g) -> U8_ga(add_in_gga(A, B))
   add_in_gga(s(X), Y) -> U10_gga(add_in_gga(X, Y))
   add_in_gga(0, X) -> add_out_gga(X)
   U8_ga(add_out_gga(C)) -> s2_out_ga(C)
   U10_gga(add_out_gga(Z)) -> add_out_gga(s(Z))


----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(X, Y)) -> U3_GA(Y, s2_in_ga(X))
   U3_GA(Y, s2_out_ga(A)) -> U4_GA(A, s2_in_ga(Y))
   U4_GA(A, s2_out_ga(B)) -> S2_IN_GA(plus(A, B))

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, 0)) -> s2_out_ga(X)
   s2_in_ga(plus(X, Y)) -> U3_ga(Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g
   U9_g(isNat_out_g) -> isNat_out_g
   U6_ga(A, B, isNat_out_g) -> U7_ga(A, B, isNat_in_g(B))
   U7_ga(A, B, isNat_out_g) -> U8_ga(add_in_gga(A, B))
   add_in_gga(s(X), Y) -> U10_gga(add_in_gga(X, Y))
   add_in_gga(0, X) -> add_out_gga(X)
   U10_gga(add_out_gga(Z)) -> add_out_gga(s(Z))
   U8_ga(add_out_gga(C)) -> s2_out_ga(C)
   U3_ga(Y, s2_out_ga(A)) -> U4_ga(A, s2_in_ga(Y))
   U4_ga(A, s2_out_ga(B)) -> U5_ga(s2_in_ga(plus(A, B)))
   U5_ga(s2_out_ga(Z)) -> s2_out_ga(Z)
   U2_ga(s2_out_ga(C)) -> s2_out_ga(C)
   U1_ga(s2_out_ga(D)) -> s2_out_ga(D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U9_g(x0)
   U6_ga(x0, x1, x2)
   U7_ga(x0, x1, x2)
   add_in_gga(x0, x1)
   U10_gga(x0)
   U8_ga(x0)
   U3_ga(x0, x1)
   U4_ga(x0, x1)
   U5_ga(x0)
   U2_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   s2_in_ga(plus(X, 0)) -> s2_out_ga(X)

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(S2_IN_GA(x_1)) = 2*x_1
   POL(U10_gga(x_1)) = 0
   POL(U1_ga(x_1)) = x_1
   POL(U2_ga(x_1)) = x_1
   POL(U3_GA(x_1, x_2)) = 2*x_1 + x_2
   POL(U3_ga(x_1, x_2)) = 2*x_1 + x_2
   POL(U4_GA(x_1, x_2)) = 2*x_1 + x_2
   POL(U4_ga(x_1, x_2)) = 2*x_1 + x_2
   POL(U5_ga(x_1)) = x_1
   POL(U6_ga(x_1, x_2, x_3)) = 2*x_2
   POL(U7_ga(x_1, x_2, x_3)) = 2*x_2
   POL(U8_ga(x_1)) = 2*x_1
   POL(U9_g(x_1)) = 0
   POL(add_in_gga(x_1, x_2)) = x_2
   POL(add_out_gga(x_1)) = x_1
   POL(isNat_in_g(x_1)) = 0
   POL(isNat_out_g) = 0
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = 0
   POL(s2_in_ga(x_1)) = 2*x_1
   POL(s2_out_ga(x_1)) = 2*x_1


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(X, Y)) -> U3_GA(Y, s2_in_ga(X))
   U3_GA(Y, s2_out_ga(A)) -> U4_GA(A, s2_in_ga(Y))
   U4_GA(A, s2_out_ga(B)) -> S2_IN_GA(plus(A, B))
   S2_IN_GA(plus(X, Y)) -> S2_IN_GA(X)
   U3_GA(Y, s2_out_ga(A)) -> S2_IN_GA(Y)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, Y)) -> U3_ga(Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g
   U9_g(isNat_out_g) -> isNat_out_g
   U6_ga(A, B, isNat_out_g) -> U7_ga(A, B, isNat_in_g(B))
   U7_ga(A, B, isNat_out_g) -> U8_ga(add_in_gga(A, B))
   add_in_gga(s(X), Y) -> U10_gga(add_in_gga(X, Y))
   add_in_gga(0, X) -> add_out_gga(X)
   U10_gga(add_out_gga(Z)) -> add_out_gga(s(Z))
   U8_ga(add_out_gga(C)) -> s2_out_ga(C)
   U3_ga(Y, s2_out_ga(A)) -> U4_ga(A, s2_in_ga(Y))
   U4_ga(A, s2_out_ga(B)) -> U5_ga(s2_in_ga(plus(A, B)))
   U5_ga(s2_out_ga(Z)) -> s2_out_ga(Z)
   U2_ga(s2_out_ga(C)) -> s2_out_ga(C)
   U1_ga(s2_out_ga(D)) -> s2_out_ga(D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U9_g(x0)
   U6_ga(x0, x1, x2)
   U7_ga(x0, x1, x2)
   add_in_gga(x0, x1)
   U10_gga(x0)
   U8_ga(x0)
   U3_ga(x0, x1)
   U4_ga(x0, x1)
   U5_ga(x0)
   U2_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   S2_IN_GA(plus(X, Y)) -> U3_GA(Y, s2_in_ga(X))
   U3_GA(Y, s2_out_ga(A)) -> U4_GA(A, s2_in_ga(Y))
   U4_GA(A, s2_out_ga(B)) -> S2_IN_GA(plus(A, B))
   U3_GA(Y, s2_out_ga(A)) -> S2_IN_GA(Y)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U3_GA_2(x_1, x_2) ) = max{0, 2x_1 + 2x_2 - 1}
POL( U4_GA_2(x_1, x_2) ) = max{0, 2x_1 + 2x_2 - 2}
POL( s2_in_ga_1(x_1) ) = x_1
POL( plus_2(x_1, x_2) ) = x_1 + x_2
POL( U1_ga_1(x_1) ) = x_1
POL( U2_ga_1(x_1) ) = x_1
POL( U3_ga_2(x_1, x_2) ) = max{0, x_1 + x_2 - 2}
POL( U6_ga_3(x_1, ..., x_3) ) = x_1 + x_2
POL( isNat_in_g_1(x_1) ) = 0
POL( s2_out_ga_1(x_1) ) = x_1 + 2
POL( U4_ga_2(x_1, x_2) ) = x_1 + x_2
POL( U5_ga_1(x_1) ) = x_1
POL( U7_ga_3(x_1, ..., x_3) ) = x_1 + x_2
POL( s_1(x_1) ) = x_1
POL( U9_g_1(x_1) ) = max{0, -2}
POL( 0 ) = 2
POL( isNat_out_g ) = 0
POL( U8_ga_1(x_1) ) = x_1
POL( add_in_gga_2(x_1, x_2) ) = x_1 + x_2
POL( U10_gga_1(x_1) ) = x_1
POL( add_out_gga_1(x_1) ) = x_1 + 2
POL( S2_IN_GA_1(x_1) ) = 2x_1 + 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, Y)) -> U3_ga(Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   U2_ga(s2_out_ga(C)) -> s2_out_ga(C)
   U1_ga(s2_out_ga(D)) -> s2_out_ga(D)
   U3_ga(Y, s2_out_ga(A)) -> U4_ga(A, s2_in_ga(Y))
   U4_ga(A, s2_out_ga(B)) -> U5_ga(s2_in_ga(plus(A, B)))
   U5_ga(s2_out_ga(Z)) -> s2_out_ga(Z)
   U6_ga(A, B, isNat_out_g) -> U7_ga(A, B, isNat_in_g(B))
   U7_ga(A, B, isNat_out_g) -> U8_ga(add_in_gga(A, B))
   add_in_gga(s(X), Y) -> U10_gga(add_in_gga(X, Y))
   add_in_gga(0, X) -> add_out_gga(X)
   U8_ga(add_out_gga(C)) -> s2_out_ga(C)
   U10_gga(add_out_gga(Z)) -> add_out_gga(s(Z))


----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(X, Y)) -> S2_IN_GA(X)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, Y)) -> U3_ga(Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g
   U9_g(isNat_out_g) -> isNat_out_g
   U6_ga(A, B, isNat_out_g) -> U7_ga(A, B, isNat_in_g(B))
   U7_ga(A, B, isNat_out_g) -> U8_ga(add_in_gga(A, B))
   add_in_gga(s(X), Y) -> U10_gga(add_in_gga(X, Y))
   add_in_gga(0, X) -> add_out_gga(X)
   U10_gga(add_out_gga(Z)) -> add_out_gga(s(Z))
   U8_ga(add_out_gga(C)) -> s2_out_ga(C)
   U3_ga(Y, s2_out_ga(A)) -> U4_ga(A, s2_in_ga(Y))
   U4_ga(A, s2_out_ga(B)) -> U5_ga(s2_in_ga(plus(A, B)))
   U5_ga(s2_out_ga(Z)) -> s2_out_ga(Z)
   U2_ga(s2_out_ga(C)) -> s2_out_ga(C)
   U1_ga(s2_out_ga(D)) -> s2_out_ga(D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U9_g(x0)
   U6_ga(x0, x1, x2)
   U7_ga(x0, x1, x2)
   add_in_gga(x0, x1)
   U10_gga(x0)
   U8_ga(x0)
   U3_ga(x0, x1)
   U4_ga(x0, x1)
   U5_ga(x0)
   U2_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U8_ga(add_out_gga(C)) -> s2_out_ga(C)

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 1
   POL(S2_IN_GA(x_1)) = 2*x_1
   POL(U10_gga(x_1)) = x_1
   POL(U1_ga(x_1)) = x_1
   POL(U2_ga(x_1)) = x_1
   POL(U3_GA(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U3_ga(x_1, x_2)) = x_1 + x_2
   POL(U4_GA(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U4_ga(x_1, x_2)) = x_1 + x_2
   POL(U5_ga(x_1)) = x_1
   POL(U6_ga(x_1, x_2, x_3)) = x_1 + x_2
   POL(U7_ga(x_1, x_2, x_3)) = x_1 + x_2
   POL(U8_ga(x_1)) = x_1
   POL(U9_g(x_1)) = 0
   POL(add_in_gga(x_1, x_2)) = x_1 + x_2
   POL(add_out_gga(x_1)) = 1 + x_1
   POL(isNat_in_g(x_1)) = 0
   POL(isNat_out_g) = 0
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = x_1
   POL(s2_in_ga(x_1)) = x_1
   POL(s2_out_ga(x_1)) = x_1


----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(X, Y)) -> U3_GA(Y, s2_in_ga(X))
   U3_GA(Y, s2_out_ga(A)) -> U4_GA(A, s2_in_ga(Y))
   U4_GA(A, s2_out_ga(B)) -> S2_IN_GA(plus(A, B))
   S2_IN_GA(plus(X, Y)) -> S2_IN_GA(X)
   U3_GA(Y, s2_out_ga(A)) -> S2_IN_GA(Y)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, Y)) -> U3_ga(Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g
   U9_g(isNat_out_g) -> isNat_out_g
   U6_ga(A, B, isNat_out_g) -> U7_ga(A, B, isNat_in_g(B))
   U7_ga(A, B, isNat_out_g) -> U8_ga(add_in_gga(A, B))
   add_in_gga(s(X), Y) -> U10_gga(add_in_gga(X, Y))
   add_in_gga(0, X) -> add_out_gga(X)
   U10_gga(add_out_gga(Z)) -> add_out_gga(s(Z))
   U3_ga(Y, s2_out_ga(A)) -> U4_ga(A, s2_in_ga(Y))
   U4_ga(A, s2_out_ga(B)) -> U5_ga(s2_in_ga(plus(A, B)))
   U5_ga(s2_out_ga(Z)) -> s2_out_ga(Z)
   U2_ga(s2_out_ga(C)) -> s2_out_ga(C)
   U1_ga(s2_out_ga(D)) -> s2_out_ga(D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U9_g(x0)
   U6_ga(x0, x1, x2)
   U7_ga(x0, x1, x2)
   add_in_gga(x0, x1)
   U10_gga(x0)
   U8_ga(x0)
   U3_ga(x0, x1)
   U4_ga(x0, x1)
   U5_ga(x0)
   U2_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(32) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   isNat_in_g(0) -> isNat_out_g
   add_in_gga(0, X) -> add_out_gga(X)
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(S2_IN_GA(x_1)) = 2*x_1
   POL(U10_gga(x_1)) = x_1
   POL(U1_ga(x_1)) = x_1
   POL(U2_ga(x_1)) = x_1
   POL(U3_GA(x_1, x_2)) = 2*x_1 + x_2
   POL(U3_ga(x_1, x_2)) = 2*x_1 + x_2
   POL(U4_GA(x_1, x_2)) = 2*x_1 + x_2
   POL(U4_ga(x_1, x_2)) = 2*x_1 + x_2
   POL(U5_ga(x_1)) = x_1
   POL(U6_ga(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3
   POL(U7_ga(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U8_ga(x_1)) = x_1
   POL(U9_g(x_1)) = x_1
   POL(add_in_gga(x_1, x_2)) = x_1 + x_2
   POL(add_out_gga(x_1)) = x_1
   POL(isNat_in_g(x_1)) = x_1
   POL(isNat_out_g) = 0
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = x_1
   POL(s2_in_ga(x_1)) = 2*x_1
   POL(s2_out_ga(x_1)) = 2*x_1


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(X, Y)) -> U3_GA(Y, s2_in_ga(X))
   U3_GA(Y, s2_out_ga(A)) -> U4_GA(A, s2_in_ga(Y))
   U4_GA(A, s2_out_ga(B)) -> S2_IN_GA(plus(A, B))
   S2_IN_GA(plus(X, Y)) -> S2_IN_GA(X)
   U3_GA(Y, s2_out_ga(A)) -> S2_IN_GA(Y)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, Y)) -> U3_ga(Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(isNat_in_g(X))
   U6_ga(A, B, isNat_out_g) -> U7_ga(A, B, isNat_in_g(B))
   U7_ga(A, B, isNat_out_g) -> U8_ga(add_in_gga(A, B))
   add_in_gga(s(X), Y) -> U10_gga(add_in_gga(X, Y))
   U10_gga(add_out_gga(Z)) -> add_out_gga(s(Z))
   U9_g(isNat_out_g) -> isNat_out_g
   U3_ga(Y, s2_out_ga(A)) -> U4_ga(A, s2_in_ga(Y))
   U4_ga(A, s2_out_ga(B)) -> U5_ga(s2_in_ga(plus(A, B)))
   U5_ga(s2_out_ga(Z)) -> s2_out_ga(Z)
   U2_ga(s2_out_ga(C)) -> s2_out_ga(C)
   U1_ga(s2_out_ga(D)) -> s2_out_ga(D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U9_g(x0)
   U6_ga(x0, x1, x2)
   U7_ga(x0, x1, x2)
   add_in_gga(x0, x1)
   U10_gga(x0)
   U8_ga(x0)
   U3_ga(x0, x1)
   U4_ga(x0, x1)
   U5_ga(x0)
   U2_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(34) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   U6_ga(A, B, isNat_out_g) -> U7_ga(A, B, isNat_in_g(B))

Used ordering: Polynomial interpretation [POLO]:

   POL(S2_IN_GA(x_1)) = 2*x_1
   POL(U10_gga(x_1)) = x_1
   POL(U1_ga(x_1)) = x_1
   POL(U2_ga(x_1)) = x_1
   POL(U3_GA(x_1, x_2)) = 2*x_1 + x_2
   POL(U3_ga(x_1, x_2)) = 2*x_1 + x_2
   POL(U4_GA(x_1, x_2)) = 2*x_1 + x_2
   POL(U4_ga(x_1, x_2)) = 2*x_1 + x_2
   POL(U5_ga(x_1)) = x_1
   POL(U6_ga(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3
   POL(U7_ga(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U8_ga(x_1)) = 1 + x_1
   POL(U9_g(x_1)) = x_1
   POL(add_in_gga(x_1, x_2)) = x_1 + x_2
   POL(add_out_gga(x_1)) = 2*x_1
   POL(isNat_in_g(x_1)) = x_1
   POL(isNat_out_g) = 1
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = x_1
   POL(s2_in_ga(x_1)) = 2*x_1
   POL(s2_out_ga(x_1)) = 2*x_1


----------------------------------------

(35)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(X, Y)) -> U3_GA(Y, s2_in_ga(X))
   U3_GA(Y, s2_out_ga(A)) -> U4_GA(A, s2_in_ga(Y))
   U4_GA(A, s2_out_ga(B)) -> S2_IN_GA(plus(A, B))
   S2_IN_GA(plus(X, Y)) -> S2_IN_GA(X)
   U3_GA(Y, s2_out_ga(A)) -> S2_IN_GA(Y)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, Y)) -> U3_ga(Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(isNat_in_g(X))
   U7_ga(A, B, isNat_out_g) -> U8_ga(add_in_gga(A, B))
   add_in_gga(s(X), Y) -> U10_gga(add_in_gga(X, Y))
   U10_gga(add_out_gga(Z)) -> add_out_gga(s(Z))
   U9_g(isNat_out_g) -> isNat_out_g
   U3_ga(Y, s2_out_ga(A)) -> U4_ga(A, s2_in_ga(Y))
   U4_ga(A, s2_out_ga(B)) -> U5_ga(s2_in_ga(plus(A, B)))
   U5_ga(s2_out_ga(Z)) -> s2_out_ga(Z)
   U2_ga(s2_out_ga(C)) -> s2_out_ga(C)
   U1_ga(s2_out_ga(D)) -> s2_out_ga(D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U9_g(x0)
   U6_ga(x0, x1, x2)
   U7_ga(x0, x1, x2)
   add_in_gga(x0, x1)
   U10_gga(x0)
   U8_ga(x0)
   U3_ga(x0, x1)
   U4_ga(x0, x1)
   U5_ga(x0)
   U2_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(36) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(X, Y)) -> U3_GA(Y, s2_in_ga(X))
   U3_GA(Y, s2_out_ga(A)) -> U4_GA(A, s2_in_ga(Y))
   U4_GA(A, s2_out_ga(B)) -> S2_IN_GA(plus(A, B))
   S2_IN_GA(plus(X, Y)) -> S2_IN_GA(X)
   U3_GA(Y, s2_out_ga(A)) -> S2_IN_GA(Y)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, Y)) -> U3_ga(Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(isNat_in_g(X))
   U9_g(isNat_out_g) -> isNat_out_g
   U3_ga(Y, s2_out_ga(A)) -> U4_ga(A, s2_in_ga(Y))
   U4_ga(A, s2_out_ga(B)) -> U5_ga(s2_in_ga(plus(A, B)))
   U5_ga(s2_out_ga(Z)) -> s2_out_ga(Z)
   U2_ga(s2_out_ga(C)) -> s2_out_ga(C)
   U1_ga(s2_out_ga(D)) -> s2_out_ga(D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U9_g(x0)
   U6_ga(x0, x1, x2)
   U7_ga(x0, x1, x2)
   add_in_gga(x0, x1)
   U10_gga(x0)
   U8_ga(x0)
   U3_ga(x0, x1)
   U4_ga(x0, x1)
   U5_ga(x0)
   U2_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(38) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U7_ga(x0, x1, x2)
   add_in_gga(x0, x1)
   U10_gga(x0)
   U8_ga(x0)


----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(X, Y)) -> U3_GA(Y, s2_in_ga(X))
   U3_GA(Y, s2_out_ga(A)) -> U4_GA(A, s2_in_ga(Y))
   U4_GA(A, s2_out_ga(B)) -> S2_IN_GA(plus(A, B))
   S2_IN_GA(plus(X, Y)) -> S2_IN_GA(X)
   U3_GA(Y, s2_out_ga(A)) -> S2_IN_GA(Y)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, Y)) -> U3_ga(Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(isNat_in_g(X))
   U9_g(isNat_out_g) -> isNat_out_g
   U3_ga(Y, s2_out_ga(A)) -> U4_ga(A, s2_in_ga(Y))
   U4_ga(A, s2_out_ga(B)) -> U5_ga(s2_in_ga(plus(A, B)))
   U5_ga(s2_out_ga(Z)) -> s2_out_ga(Z)
   U2_ga(s2_out_ga(C)) -> s2_out_ga(C)
   U1_ga(s2_out_ga(D)) -> s2_out_ga(D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U9_g(x0)
   U6_ga(x0, x1, x2)
   U3_ga(x0, x1)
   U4_ga(x0, x1)
   U5_ga(x0)
   U2_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(40) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

No dependency pairs are removed.

The following rules are removed from R:

   isNat_in_g(s(X)) -> U9_g(isNat_in_g(X))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(S2_IN_GA(x_1)) = 2*x_1
   POL(U1_ga(x_1)) = x_1
   POL(U2_ga(x_1)) = x_1
   POL(U3_GA(x_1, x_2)) = 2*x_1 + x_2
   POL(U3_ga(x_1, x_2)) = 2*x_1 + x_2
   POL(U4_GA(x_1, x_2)) = 2*x_1 + x_2
   POL(U4_ga(x_1, x_2)) = 2*x_1 + x_2
   POL(U5_ga(x_1)) = x_1
   POL(U6_ga(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U9_g(x_1)) = x_1
   POL(isNat_in_g(x_1)) = x_1
   POL(isNat_out_g) = 0
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s(x_1)) = 2*x_1
   POL(s2_in_ga(x_1)) = 2*x_1
   POL(s2_out_ga(x_1)) = 2*x_1


----------------------------------------

(41)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(X, Y)) -> U3_GA(Y, s2_in_ga(X))
   U3_GA(Y, s2_out_ga(A)) -> U4_GA(A, s2_in_ga(Y))
   U4_GA(A, s2_out_ga(B)) -> S2_IN_GA(plus(A, B))
   S2_IN_GA(plus(X, Y)) -> S2_IN_GA(X)
   U3_GA(Y, s2_out_ga(A)) -> S2_IN_GA(Y)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, Y)) -> U3_ga(Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   U9_g(isNat_out_g) -> isNat_out_g
   U3_ga(Y, s2_out_ga(A)) -> U4_ga(A, s2_in_ga(Y))
   U4_ga(A, s2_out_ga(B)) -> U5_ga(s2_in_ga(plus(A, B)))
   U5_ga(s2_out_ga(Z)) -> s2_out_ga(Z)
   U2_ga(s2_out_ga(C)) -> s2_out_ga(C)
   U1_ga(s2_out_ga(D)) -> s2_out_ga(D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U9_g(x0)
   U6_ga(x0, x1, x2)
   U3_ga(x0, x1)
   U4_ga(x0, x1)
   U5_ga(x0)
   U2_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(42) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(X, Y)) -> U3_GA(Y, s2_in_ga(X))
   U3_GA(Y, s2_out_ga(A)) -> U4_GA(A, s2_in_ga(Y))
   U4_GA(A, s2_out_ga(B)) -> S2_IN_GA(plus(A, B))
   S2_IN_GA(plus(X, Y)) -> S2_IN_GA(X)
   U3_GA(Y, s2_out_ga(A)) -> S2_IN_GA(Y)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, Y)) -> U3_ga(Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   U3_ga(Y, s2_out_ga(A)) -> U4_ga(A, s2_in_ga(Y))
   U4_ga(A, s2_out_ga(B)) -> U5_ga(s2_in_ga(plus(A, B)))
   U5_ga(s2_out_ga(Z)) -> s2_out_ga(Z)
   U2_ga(s2_out_ga(C)) -> s2_out_ga(C)
   U1_ga(s2_out_ga(D)) -> s2_out_ga(D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U9_g(x0)
   U6_ga(x0, x1, x2)
   U3_ga(x0, x1)
   U4_ga(x0, x1)
   U5_ga(x0)
   U2_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(44) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U9_g(x0)


----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(X, Y)) -> U3_GA(Y, s2_in_ga(X))
   U3_GA(Y, s2_out_ga(A)) -> U4_GA(A, s2_in_ga(Y))
   U4_GA(A, s2_out_ga(B)) -> S2_IN_GA(plus(A, B))
   S2_IN_GA(plus(X, Y)) -> S2_IN_GA(X)
   U3_GA(Y, s2_out_ga(A)) -> S2_IN_GA(Y)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, Y)) -> U3_ga(Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   U3_ga(Y, s2_out_ga(A)) -> U4_ga(A, s2_in_ga(Y))
   U4_ga(A, s2_out_ga(B)) -> U5_ga(s2_in_ga(plus(A, B)))
   U5_ga(s2_out_ga(Z)) -> s2_out_ga(Z)
   U2_ga(s2_out_ga(C)) -> s2_out_ga(C)
   U1_ga(s2_out_ga(D)) -> s2_out_ga(D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U6_ga(x0, x1, x2)
   U3_ga(x0, x1)
   U4_ga(x0, x1)
   U5_ga(x0)
   U2_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(46) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U3_GA(Y, s2_out_ga(A)) -> U4_GA(A, s2_in_ga(Y))
   U4_GA(A, s2_out_ga(B)) -> S2_IN_GA(plus(A, B))
   U3_GA(Y, s2_out_ga(A)) -> S2_IN_GA(Y)

Strictly oriented rules of the TRS R:

   U3_ga(Y, s2_out_ga(A)) -> U4_ga(A, s2_in_ga(Y))
   U5_ga(s2_out_ga(Z)) -> s2_out_ga(Z)

Used ordering: Polynomial interpretation [POLO]:

   POL(S2_IN_GA(x_1)) = 2*x_1
   POL(U1_ga(x_1)) = x_1
   POL(U2_ga(x_1)) = x_1
   POL(U3_GA(x_1, x_2)) = 2*x_1 + x_2
   POL(U3_ga(x_1, x_2)) = 2*x_1 + x_2
   POL(U4_GA(x_1, x_2)) = 2*x_1 + x_2
   POL(U4_ga(x_1, x_2)) = 2*x_1 + x_2
   POL(U5_ga(x_1)) = 1 + x_1
   POL(U6_ga(x_1, x_2, x_3)) = x_1 + 2*x_2 + x_3
   POL(isNat_in_g(x_1)) = x_1
   POL(plus(x_1, x_2)) = x_1 + x_2
   POL(s2_in_ga(x_1)) = 2*x_1
   POL(s2_out_ga(x_1)) = 1 + 2*x_1


----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(X, Y)) -> U3_GA(Y, s2_in_ga(X))
   S2_IN_GA(plus(X, Y)) -> S2_IN_GA(X)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, Y)) -> U3_ga(Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   U4_ga(A, s2_out_ga(B)) -> U5_ga(s2_in_ga(plus(A, B)))
   U2_ga(s2_out_ga(C)) -> s2_out_ga(C)
   U1_ga(s2_out_ga(D)) -> s2_out_ga(D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U6_ga(x0, x1, x2)
   U3_ga(x0, x1)
   U4_ga(x0, x1)
   U5_ga(x0)
   U2_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(48) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(49)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(X, Y)) -> S2_IN_GA(X)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, Y)) -> U3_ga(Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   U4_ga(A, s2_out_ga(B)) -> U5_ga(s2_in_ga(plus(A, B)))
   U2_ga(s2_out_ga(C)) -> s2_out_ga(C)
   U1_ga(s2_out_ga(D)) -> s2_out_ga(D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U6_ga(x0, x1, x2)
   U3_ga(x0, x1)
   U4_ga(x0, x1)
   U5_ga(x0)
   U2_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(50) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(X, Y)) -> S2_IN_GA(X)

R is empty.
The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U6_ga(x0, x1, x2)
   U3_ga(x0, x1)
   U4_ga(x0, x1)
   U5_ga(x0)
   U2_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(52) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   s2_in_ga(x0)
   isNat_in_g(x0)
   U6_ga(x0, x1, x2)
   U3_ga(x0, x1)
   U4_ga(x0, x1)
   U5_ga(x0)
   U2_ga(x0)
   U1_ga(x0)


----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(X, Y)) -> S2_IN_GA(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(54) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

s2_in_2: (b,f)

isNat_in_1: (b)

add_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C)), D) -> U1_ga(A, B, C, D, s2_in_ga(plus(plus(A, B), C), D))
   s2_in_ga(plus(A, B), C) -> U2_ga(A, B, C, s2_in_ga(plus(B, A), C))
   s2_in_ga(plus(X, 0), X) -> s2_out_ga(plus(X, 0), X)
   s2_in_ga(plus(X, Y), Z) -> U3_ga(X, Y, Z, s2_in_ga(X, A))
   s2_in_ga(plus(A, B), C) -> U6_ga(A, B, C, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U6_ga(A, B, C, isNat_out_g(A)) -> U7_ga(A, B, C, isNat_in_g(B))
   U7_ga(A, B, C, isNat_out_g(B)) -> U8_ga(A, B, C, add_in_gga(A, B, C))
   add_in_gga(s(X), Y, s(Z)) -> U10_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U10_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U8_ga(A, B, C, add_out_gga(A, B, C)) -> s2_out_ga(plus(A, B), C)
   U3_ga(X, Y, Z, s2_out_ga(X, A)) -> U4_ga(X, Y, Z, A, s2_in_ga(Y, B))
   U4_ga(X, Y, Z, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, Z, s2_in_ga(plus(A, B), Z))
   U5_ga(X, Y, Z, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, C, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, D, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The argument filtering Pi contains the following mapping:
s2_in_ga(x1, x2)  =  s2_in_ga(x1)

plus(x1, x2)  =  plus(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x2, x4)

0  =  0

s2_out_ga(x1, x2)  =  s2_out_ga(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x1, x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x2, x4)

isNat_in_g(x1)  =  isNat_in_g(x1)

s(x1)  =  s(x1)

U9_g(x1, x2)  =  U9_g(x1, x2)

isNat_out_g(x1)  =  isNat_out_g(x1)

U7_ga(x1, x2, x3, x4)  =  U7_ga(x1, x2, x4)

U8_ga(x1, x2, x3, x4)  =  U8_ga(x1, x2, x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x1, x2, x3)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x1, x2, x4, x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x1, x2, x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(55)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C)), D) -> U1_ga(A, B, C, D, s2_in_ga(plus(plus(A, B), C), D))
   s2_in_ga(plus(A, B), C) -> U2_ga(A, B, C, s2_in_ga(plus(B, A), C))
   s2_in_ga(plus(X, 0), X) -> s2_out_ga(plus(X, 0), X)
   s2_in_ga(plus(X, Y), Z) -> U3_ga(X, Y, Z, s2_in_ga(X, A))
   s2_in_ga(plus(A, B), C) -> U6_ga(A, B, C, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U6_ga(A, B, C, isNat_out_g(A)) -> U7_ga(A, B, C, isNat_in_g(B))
   U7_ga(A, B, C, isNat_out_g(B)) -> U8_ga(A, B, C, add_in_gga(A, B, C))
   add_in_gga(s(X), Y, s(Z)) -> U10_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U10_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U8_ga(A, B, C, add_out_gga(A, B, C)) -> s2_out_ga(plus(A, B), C)
   U3_ga(X, Y, Z, s2_out_ga(X, A)) -> U4_ga(X, Y, Z, A, s2_in_ga(Y, B))
   U4_ga(X, Y, Z, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, Z, s2_in_ga(plus(A, B), Z))
   U5_ga(X, Y, Z, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, C, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, D, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The argument filtering Pi contains the following mapping:
s2_in_ga(x1, x2)  =  s2_in_ga(x1)

plus(x1, x2)  =  plus(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x2, x4)

0  =  0

s2_out_ga(x1, x2)  =  s2_out_ga(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x1, x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x2, x4)

isNat_in_g(x1)  =  isNat_in_g(x1)

s(x1)  =  s(x1)

U9_g(x1, x2)  =  U9_g(x1, x2)

isNat_out_g(x1)  =  isNat_out_g(x1)

U7_ga(x1, x2, x3, x4)  =  U7_ga(x1, x2, x4)

U8_ga(x1, x2, x3, x4)  =  U8_ga(x1, x2, x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x1, x2, x3)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x1, x2, x4, x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x1, x2, x4)



----------------------------------------

(56) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, plus(B, C)), D) -> U1_GA(A, B, C, D, s2_in_ga(plus(plus(A, B), C), D))
   S2_IN_GA(plus(A, plus(B, C)), D) -> S2_IN_GA(plus(plus(A, B), C), D)
   S2_IN_GA(plus(A, B), C) -> U2_GA(A, B, C, s2_in_ga(plus(B, A), C))
   S2_IN_GA(plus(A, B), C) -> S2_IN_GA(plus(B, A), C)
   S2_IN_GA(plus(X, Y), Z) -> U3_GA(X, Y, Z, s2_in_ga(X, A))
   S2_IN_GA(plus(X, Y), Z) -> S2_IN_GA(X, A)
   S2_IN_GA(plus(A, B), C) -> U6_GA(A, B, C, isNat_in_g(A))
   S2_IN_GA(plus(A, B), C) -> ISNAT_IN_G(A)
   ISNAT_IN_G(s(X)) -> U9_G(X, isNat_in_g(X))
   ISNAT_IN_G(s(X)) -> ISNAT_IN_G(X)
   U6_GA(A, B, C, isNat_out_g(A)) -> U7_GA(A, B, C, isNat_in_g(B))
   U6_GA(A, B, C, isNat_out_g(A)) -> ISNAT_IN_G(B)
   U7_GA(A, B, C, isNat_out_g(B)) -> U8_GA(A, B, C, add_in_gga(A, B, C))
   U7_GA(A, B, C, isNat_out_g(B)) -> ADD_IN_GGA(A, B, C)
   ADD_IN_GGA(s(X), Y, s(Z)) -> U10_GGA(X, Y, Z, add_in_gga(X, Y, Z))
   ADD_IN_GGA(s(X), Y, s(Z)) -> ADD_IN_GGA(X, Y, Z)
   U3_GA(X, Y, Z, s2_out_ga(X, A)) -> U4_GA(X, Y, Z, A, s2_in_ga(Y, B))
   U3_GA(X, Y, Z, s2_out_ga(X, A)) -> S2_IN_GA(Y, B)
   U4_GA(X, Y, Z, A, s2_out_ga(Y, B)) -> U5_GA(X, Y, Z, s2_in_ga(plus(A, B), Z))
   U4_GA(X, Y, Z, A, s2_out_ga(Y, B)) -> S2_IN_GA(plus(A, B), Z)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C)), D) -> U1_ga(A, B, C, D, s2_in_ga(plus(plus(A, B), C), D))
   s2_in_ga(plus(A, B), C) -> U2_ga(A, B, C, s2_in_ga(plus(B, A), C))
   s2_in_ga(plus(X, 0), X) -> s2_out_ga(plus(X, 0), X)
   s2_in_ga(plus(X, Y), Z) -> U3_ga(X, Y, Z, s2_in_ga(X, A))
   s2_in_ga(plus(A, B), C) -> U6_ga(A, B, C, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U6_ga(A, B, C, isNat_out_g(A)) -> U7_ga(A, B, C, isNat_in_g(B))
   U7_ga(A, B, C, isNat_out_g(B)) -> U8_ga(A, B, C, add_in_gga(A, B, C))
   add_in_gga(s(X), Y, s(Z)) -> U10_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U10_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U8_ga(A, B, C, add_out_gga(A, B, C)) -> s2_out_ga(plus(A, B), C)
   U3_ga(X, Y, Z, s2_out_ga(X, A)) -> U4_ga(X, Y, Z, A, s2_in_ga(Y, B))
   U4_ga(X, Y, Z, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, Z, s2_in_ga(plus(A, B), Z))
   U5_ga(X, Y, Z, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, C, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, D, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The argument filtering Pi contains the following mapping:
s2_in_ga(x1, x2)  =  s2_in_ga(x1)

plus(x1, x2)  =  plus(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x2, x4)

0  =  0

s2_out_ga(x1, x2)  =  s2_out_ga(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x1, x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x2, x4)

isNat_in_g(x1)  =  isNat_in_g(x1)

s(x1)  =  s(x1)

U9_g(x1, x2)  =  U9_g(x1, x2)

isNat_out_g(x1)  =  isNat_out_g(x1)

U7_ga(x1, x2, x3, x4)  =  U7_ga(x1, x2, x4)

U8_ga(x1, x2, x3, x4)  =  U8_ga(x1, x2, x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x1, x2, x3)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x1, x2, x4, x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x1, x2, x4)

S2_IN_GA(x1, x2)  =  S2_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x1, x2, x3, x5)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x1, x2, x4)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x1, x2, x4)

U6_GA(x1, x2, x3, x4)  =  U6_GA(x1, x2, x4)

ISNAT_IN_G(x1)  =  ISNAT_IN_G(x1)

U9_G(x1, x2)  =  U9_G(x1, x2)

U7_GA(x1, x2, x3, x4)  =  U7_GA(x1, x2, x4)

U8_GA(x1, x2, x3, x4)  =  U8_GA(x1, x2, x4)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)

U10_GGA(x1, x2, x3, x4)  =  U10_GGA(x1, x2, x4)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x1, x2, x4, x5)

U5_GA(x1, x2, x3, x4)  =  U5_GA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(57)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, plus(B, C)), D) -> U1_GA(A, B, C, D, s2_in_ga(plus(plus(A, B), C), D))
   S2_IN_GA(plus(A, plus(B, C)), D) -> S2_IN_GA(plus(plus(A, B), C), D)
   S2_IN_GA(plus(A, B), C) -> U2_GA(A, B, C, s2_in_ga(plus(B, A), C))
   S2_IN_GA(plus(A, B), C) -> S2_IN_GA(plus(B, A), C)
   S2_IN_GA(plus(X, Y), Z) -> U3_GA(X, Y, Z, s2_in_ga(X, A))
   S2_IN_GA(plus(X, Y), Z) -> S2_IN_GA(X, A)
   S2_IN_GA(plus(A, B), C) -> U6_GA(A, B, C, isNat_in_g(A))
   S2_IN_GA(plus(A, B), C) -> ISNAT_IN_G(A)
   ISNAT_IN_G(s(X)) -> U9_G(X, isNat_in_g(X))
   ISNAT_IN_G(s(X)) -> ISNAT_IN_G(X)
   U6_GA(A, B, C, isNat_out_g(A)) -> U7_GA(A, B, C, isNat_in_g(B))
   U6_GA(A, B, C, isNat_out_g(A)) -> ISNAT_IN_G(B)
   U7_GA(A, B, C, isNat_out_g(B)) -> U8_GA(A, B, C, add_in_gga(A, B, C))
   U7_GA(A, B, C, isNat_out_g(B)) -> ADD_IN_GGA(A, B, C)
   ADD_IN_GGA(s(X), Y, s(Z)) -> U10_GGA(X, Y, Z, add_in_gga(X, Y, Z))
   ADD_IN_GGA(s(X), Y, s(Z)) -> ADD_IN_GGA(X, Y, Z)
   U3_GA(X, Y, Z, s2_out_ga(X, A)) -> U4_GA(X, Y, Z, A, s2_in_ga(Y, B))
   U3_GA(X, Y, Z, s2_out_ga(X, A)) -> S2_IN_GA(Y, B)
   U4_GA(X, Y, Z, A, s2_out_ga(Y, B)) -> U5_GA(X, Y, Z, s2_in_ga(plus(A, B), Z))
   U4_GA(X, Y, Z, A, s2_out_ga(Y, B)) -> S2_IN_GA(plus(A, B), Z)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C)), D) -> U1_ga(A, B, C, D, s2_in_ga(plus(plus(A, B), C), D))
   s2_in_ga(plus(A, B), C) -> U2_ga(A, B, C, s2_in_ga(plus(B, A), C))
   s2_in_ga(plus(X, 0), X) -> s2_out_ga(plus(X, 0), X)
   s2_in_ga(plus(X, Y), Z) -> U3_ga(X, Y, Z, s2_in_ga(X, A))
   s2_in_ga(plus(A, B), C) -> U6_ga(A, B, C, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U6_ga(A, B, C, isNat_out_g(A)) -> U7_ga(A, B, C, isNat_in_g(B))
   U7_ga(A, B, C, isNat_out_g(B)) -> U8_ga(A, B, C, add_in_gga(A, B, C))
   add_in_gga(s(X), Y, s(Z)) -> U10_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U10_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U8_ga(A, B, C, add_out_gga(A, B, C)) -> s2_out_ga(plus(A, B), C)
   U3_ga(X, Y, Z, s2_out_ga(X, A)) -> U4_ga(X, Y, Z, A, s2_in_ga(Y, B))
   U4_ga(X, Y, Z, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, Z, s2_in_ga(plus(A, B), Z))
   U5_ga(X, Y, Z, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, C, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, D, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The argument filtering Pi contains the following mapping:
s2_in_ga(x1, x2)  =  s2_in_ga(x1)

plus(x1, x2)  =  plus(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x2, x4)

0  =  0

s2_out_ga(x1, x2)  =  s2_out_ga(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x1, x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x2, x4)

isNat_in_g(x1)  =  isNat_in_g(x1)

s(x1)  =  s(x1)

U9_g(x1, x2)  =  U9_g(x1, x2)

isNat_out_g(x1)  =  isNat_out_g(x1)

U7_ga(x1, x2, x3, x4)  =  U7_ga(x1, x2, x4)

U8_ga(x1, x2, x3, x4)  =  U8_ga(x1, x2, x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x1, x2, x3)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x1, x2, x4, x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x1, x2, x4)

S2_IN_GA(x1, x2)  =  S2_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x1, x2, x3, x5)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x1, x2, x4)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x1, x2, x4)

U6_GA(x1, x2, x3, x4)  =  U6_GA(x1, x2, x4)

ISNAT_IN_G(x1)  =  ISNAT_IN_G(x1)

U9_G(x1, x2)  =  U9_G(x1, x2)

U7_GA(x1, x2, x3, x4)  =  U7_GA(x1, x2, x4)

U8_GA(x1, x2, x3, x4)  =  U8_GA(x1, x2, x4)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)

U10_GGA(x1, x2, x3, x4)  =  U10_GGA(x1, x2, x4)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x1, x2, x4, x5)

U5_GA(x1, x2, x3, x4)  =  U5_GA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(58) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 11 less nodes.
----------------------------------------

(59)
Complex Obligation (AND)

----------------------------------------

(60)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ADD_IN_GGA(s(X), Y, s(Z)) -> ADD_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C)), D) -> U1_ga(A, B, C, D, s2_in_ga(plus(plus(A, B), C), D))
   s2_in_ga(plus(A, B), C) -> U2_ga(A, B, C, s2_in_ga(plus(B, A), C))
   s2_in_ga(plus(X, 0), X) -> s2_out_ga(plus(X, 0), X)
   s2_in_ga(plus(X, Y), Z) -> U3_ga(X, Y, Z, s2_in_ga(X, A))
   s2_in_ga(plus(A, B), C) -> U6_ga(A, B, C, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U6_ga(A, B, C, isNat_out_g(A)) -> U7_ga(A, B, C, isNat_in_g(B))
   U7_ga(A, B, C, isNat_out_g(B)) -> U8_ga(A, B, C, add_in_gga(A, B, C))
   add_in_gga(s(X), Y, s(Z)) -> U10_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U10_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U8_ga(A, B, C, add_out_gga(A, B, C)) -> s2_out_ga(plus(A, B), C)
   U3_ga(X, Y, Z, s2_out_ga(X, A)) -> U4_ga(X, Y, Z, A, s2_in_ga(Y, B))
   U4_ga(X, Y, Z, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, Z, s2_in_ga(plus(A, B), Z))
   U5_ga(X, Y, Z, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, C, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, D, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The argument filtering Pi contains the following mapping:
s2_in_ga(x1, x2)  =  s2_in_ga(x1)

plus(x1, x2)  =  plus(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x2, x4)

0  =  0

s2_out_ga(x1, x2)  =  s2_out_ga(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x1, x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x2, x4)

isNat_in_g(x1)  =  isNat_in_g(x1)

s(x1)  =  s(x1)

U9_g(x1, x2)  =  U9_g(x1, x2)

isNat_out_g(x1)  =  isNat_out_g(x1)

U7_ga(x1, x2, x3, x4)  =  U7_ga(x1, x2, x4)

U8_ga(x1, x2, x3, x4)  =  U8_ga(x1, x2, x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x1, x2, x3)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x1, x2, x4, x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x1, x2, x4)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(61) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(62)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ADD_IN_GGA(s(X), Y, s(Z)) -> ADD_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(63) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(64)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD_IN_GGA(s(X), Y) -> ADD_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(65) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ADD_IN_GGA(s(X), Y) -> ADD_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(66)
YES

----------------------------------------

(67)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISNAT_IN_G(s(X)) -> ISNAT_IN_G(X)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C)), D) -> U1_ga(A, B, C, D, s2_in_ga(plus(plus(A, B), C), D))
   s2_in_ga(plus(A, B), C) -> U2_ga(A, B, C, s2_in_ga(plus(B, A), C))
   s2_in_ga(plus(X, 0), X) -> s2_out_ga(plus(X, 0), X)
   s2_in_ga(plus(X, Y), Z) -> U3_ga(X, Y, Z, s2_in_ga(X, A))
   s2_in_ga(plus(A, B), C) -> U6_ga(A, B, C, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U6_ga(A, B, C, isNat_out_g(A)) -> U7_ga(A, B, C, isNat_in_g(B))
   U7_ga(A, B, C, isNat_out_g(B)) -> U8_ga(A, B, C, add_in_gga(A, B, C))
   add_in_gga(s(X), Y, s(Z)) -> U10_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U10_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U8_ga(A, B, C, add_out_gga(A, B, C)) -> s2_out_ga(plus(A, B), C)
   U3_ga(X, Y, Z, s2_out_ga(X, A)) -> U4_ga(X, Y, Z, A, s2_in_ga(Y, B))
   U4_ga(X, Y, Z, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, Z, s2_in_ga(plus(A, B), Z))
   U5_ga(X, Y, Z, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, C, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, D, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The argument filtering Pi contains the following mapping:
s2_in_ga(x1, x2)  =  s2_in_ga(x1)

plus(x1, x2)  =  plus(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x2, x4)

0  =  0

s2_out_ga(x1, x2)  =  s2_out_ga(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x1, x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x2, x4)

isNat_in_g(x1)  =  isNat_in_g(x1)

s(x1)  =  s(x1)

U9_g(x1, x2)  =  U9_g(x1, x2)

isNat_out_g(x1)  =  isNat_out_g(x1)

U7_ga(x1, x2, x3, x4)  =  U7_ga(x1, x2, x4)

U8_ga(x1, x2, x3, x4)  =  U8_ga(x1, x2, x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x1, x2, x3)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x1, x2, x4, x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x1, x2, x4)

ISNAT_IN_G(x1)  =  ISNAT_IN_G(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(68) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(69)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISNAT_IN_G(s(X)) -> ISNAT_IN_G(X)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(70) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(71)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNAT_IN_G(s(X)) -> ISNAT_IN_G(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(72) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISNAT_IN_G(s(X)) -> ISNAT_IN_G(X)
The graph contains the following edges 1 > 1


----------------------------------------

(73)
YES

----------------------------------------

(74)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B), C) -> S2_IN_GA(plus(B, A), C)
   S2_IN_GA(plus(A, plus(B, C)), D) -> S2_IN_GA(plus(plus(A, B), C), D)
   S2_IN_GA(plus(X, Y), Z) -> U3_GA(X, Y, Z, s2_in_ga(X, A))
   U3_GA(X, Y, Z, s2_out_ga(X, A)) -> U4_GA(X, Y, Z, A, s2_in_ga(Y, B))
   U4_GA(X, Y, Z, A, s2_out_ga(Y, B)) -> S2_IN_GA(plus(A, B), Z)
   S2_IN_GA(plus(X, Y), Z) -> S2_IN_GA(X, A)
   U3_GA(X, Y, Z, s2_out_ga(X, A)) -> S2_IN_GA(Y, B)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C)), D) -> U1_ga(A, B, C, D, s2_in_ga(plus(plus(A, B), C), D))
   s2_in_ga(plus(A, B), C) -> U2_ga(A, B, C, s2_in_ga(plus(B, A), C))
   s2_in_ga(plus(X, 0), X) -> s2_out_ga(plus(X, 0), X)
   s2_in_ga(plus(X, Y), Z) -> U3_ga(X, Y, Z, s2_in_ga(X, A))
   s2_in_ga(plus(A, B), C) -> U6_ga(A, B, C, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U6_ga(A, B, C, isNat_out_g(A)) -> U7_ga(A, B, C, isNat_in_g(B))
   U7_ga(A, B, C, isNat_out_g(B)) -> U8_ga(A, B, C, add_in_gga(A, B, C))
   add_in_gga(s(X), Y, s(Z)) -> U10_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U10_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U8_ga(A, B, C, add_out_gga(A, B, C)) -> s2_out_ga(plus(A, B), C)
   U3_ga(X, Y, Z, s2_out_ga(X, A)) -> U4_ga(X, Y, Z, A, s2_in_ga(Y, B))
   U4_ga(X, Y, Z, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, Z, s2_in_ga(plus(A, B), Z))
   U5_ga(X, Y, Z, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, C, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, D, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The argument filtering Pi contains the following mapping:
s2_in_ga(x1, x2)  =  s2_in_ga(x1)

plus(x1, x2)  =  plus(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x2, x4)

0  =  0

s2_out_ga(x1, x2)  =  s2_out_ga(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x1, x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x2, x4)

isNat_in_g(x1)  =  isNat_in_g(x1)

s(x1)  =  s(x1)

U9_g(x1, x2)  =  U9_g(x1, x2)

isNat_out_g(x1)  =  isNat_out_g(x1)

U7_ga(x1, x2, x3, x4)  =  U7_ga(x1, x2, x4)

U8_ga(x1, x2, x3, x4)  =  U8_ga(x1, x2, x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x1, x2, x3)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x1, x2, x4, x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x1, x2, x4)

S2_IN_GA(x1, x2)  =  S2_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x1, x2, x4)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x1, x2, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(75) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(76)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(X, Y)) -> U3_GA(X, Y, s2_in_ga(X))
   U3_GA(X, Y, s2_out_ga(X, A)) -> U4_GA(X, Y, A, s2_in_ga(Y))
   U4_GA(X, Y, A, s2_out_ga(Y, B)) -> S2_IN_GA(plus(A, B))
   S2_IN_GA(plus(X, Y)) -> S2_IN_GA(X)
   U3_GA(X, Y, s2_out_ga(X, A)) -> S2_IN_GA(Y)

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(A, B, C, s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(A, B, s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, 0)) -> s2_out_ga(plus(X, 0), X)
   s2_in_ga(plus(X, Y)) -> U3_ga(X, Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U6_ga(A, B, isNat_out_g(A)) -> U7_ga(A, B, isNat_in_g(B))
   U7_ga(A, B, isNat_out_g(B)) -> U8_ga(A, B, add_in_gga(A, B))
   add_in_gga(s(X), Y) -> U10_gga(X, Y, add_in_gga(X, Y))
   add_in_gga(0, X) -> add_out_gga(0, X, X)
   U10_gga(X, Y, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U8_ga(A, B, add_out_gga(A, B, C)) -> s2_out_ga(plus(A, B), C)
   U3_ga(X, Y, s2_out_ga(X, A)) -> U4_ga(X, Y, A, s2_in_ga(Y))
   U4_ga(X, Y, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, s2_in_ga(plus(A, B)))
   U5_ga(X, Y, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U9_g(x0, x1)
   U6_ga(x0, x1, x2)
   U7_ga(x0, x1, x2)
   add_in_gga(x0, x1)
   U10_gga(x0, x1, x2)
   U8_ga(x0, x1, x2)
   U3_ga(x0, x1, x2)
   U4_ga(x0, x1, x2, x3)
   U5_ga(x0, x1, x2)
   U2_ga(x0, x1, x2)
   U1_ga(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(77) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   S2_IN_GA(plus(X, Y)) -> S2_IN_GA(X)
   U3_GA(X, Y, s2_out_ga(X, A)) -> S2_IN_GA(Y)

Strictly oriented rules of the TRS R:

   s2_in_ga(plus(X, 0)) -> s2_out_ga(plus(X, 0), X)
   U7_ga(A, B, isNat_out_g(B)) -> U8_ga(A, B, add_in_gga(A, B))

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(S2_IN_GA(x_1)) = 2*x_1
   POL(U10_gga(x_1, x_2, x_3)) = 0
   POL(U1_ga(x_1, x_2, x_3, x_4)) = x_4
   POL(U2_ga(x_1, x_2, x_3)) = x_3
   POL(U3_GA(x_1, x_2, x_3)) = 2 + 2*x_2 + 2*x_3
   POL(U3_ga(x_1, x_2, x_3)) = 1 + x_2 + x_3
   POL(U4_GA(x_1, x_2, x_3, x_4)) = 2 + 2*x_3 + 2*x_4
   POL(U4_ga(x_1, x_2, x_3, x_4)) = 1 + x_3 + x_4
   POL(U5_ga(x_1, x_2, x_3)) = x_3
   POL(U6_ga(x_1, x_2, x_3)) = 1 + x_1
   POL(U7_ga(x_1, x_2, x_3)) = 1 + 2*x_3
   POL(U8_ga(x_1, x_2, x_3)) = 2*x_3
   POL(U9_g(x_1, x_2)) = 0
   POL(add_in_gga(x_1, x_2)) = x_2
   POL(add_out_gga(x_1, x_2, x_3)) = x_3
   POL(isNat_in_g(x_1)) = 0
   POL(isNat_out_g(x_1)) = x_1
   POL(plus(x_1, x_2)) = 1 + x_1 + x_2
   POL(s(x_1)) = 0
   POL(s2_in_ga(x_1)) = x_1
   POL(s2_out_ga(x_1, x_2)) = x_2


----------------------------------------

(78)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(X, Y)) -> U3_GA(X, Y, s2_in_ga(X))
   U3_GA(X, Y, s2_out_ga(X, A)) -> U4_GA(X, Y, A, s2_in_ga(Y))
   U4_GA(X, Y, A, s2_out_ga(Y, B)) -> S2_IN_GA(plus(A, B))

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(A, B, C, s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(A, B, s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, Y)) -> U3_ga(X, Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U6_ga(A, B, isNat_out_g(A)) -> U7_ga(A, B, isNat_in_g(B))
   add_in_gga(s(X), Y) -> U10_gga(X, Y, add_in_gga(X, Y))
   add_in_gga(0, X) -> add_out_gga(0, X, X)
   U10_gga(X, Y, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U8_ga(A, B, add_out_gga(A, B, C)) -> s2_out_ga(plus(A, B), C)
   U3_ga(X, Y, s2_out_ga(X, A)) -> U4_ga(X, Y, A, s2_in_ga(Y))
   U4_ga(X, Y, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, s2_in_ga(plus(A, B)))
   U5_ga(X, Y, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U9_g(x0, x1)
   U6_ga(x0, x1, x2)
   U7_ga(x0, x1, x2)
   add_in_gga(x0, x1)
   U10_gga(x0, x1, x2)
   U8_ga(x0, x1, x2)
   U3_ga(x0, x1, x2)
   U4_ga(x0, x1, x2, x3)
   U5_ga(x0, x1, x2)
   U2_ga(x0, x1, x2)
   U1_ga(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(79) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(80)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(X, Y)) -> U3_GA(X, Y, s2_in_ga(X))
   U3_GA(X, Y, s2_out_ga(X, A)) -> U4_GA(X, Y, A, s2_in_ga(Y))
   U4_GA(X, Y, A, s2_out_ga(Y, B)) -> S2_IN_GA(plus(A, B))

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(A, B, C, s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(A, B, s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, Y)) -> U3_ga(X, Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U6_ga(A, B, isNat_out_g(A)) -> U7_ga(A, B, isNat_in_g(B))
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U3_ga(X, Y, s2_out_ga(X, A)) -> U4_ga(X, Y, A, s2_in_ga(Y))
   U4_ga(X, Y, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, s2_in_ga(plus(A, B)))
   U5_ga(X, Y, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U9_g(x0, x1)
   U6_ga(x0, x1, x2)
   U7_ga(x0, x1, x2)
   add_in_gga(x0, x1)
   U10_gga(x0, x1, x2)
   U8_ga(x0, x1, x2)
   U3_ga(x0, x1, x2)
   U4_ga(x0, x1, x2, x3)
   U5_ga(x0, x1, x2)
   U2_ga(x0, x1, x2)
   U1_ga(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(81) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   add_in_gga(x0, x1)
   U10_gga(x0, x1, x2)
   U8_ga(x0, x1, x2)


----------------------------------------

(82)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(X, Y)) -> U3_GA(X, Y, s2_in_ga(X))
   U3_GA(X, Y, s2_out_ga(X, A)) -> U4_GA(X, Y, A, s2_in_ga(Y))
   U4_GA(X, Y, A, s2_out_ga(Y, B)) -> S2_IN_GA(plus(A, B))

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(A, B, C, s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(A, B, s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, Y)) -> U3_ga(X, Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U6_ga(A, B, isNat_out_g(A)) -> U7_ga(A, B, isNat_in_g(B))
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U3_ga(X, Y, s2_out_ga(X, A)) -> U4_ga(X, Y, A, s2_in_ga(Y))
   U4_ga(X, Y, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, s2_in_ga(plus(A, B)))
   U5_ga(X, Y, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U9_g(x0, x1)
   U6_ga(x0, x1, x2)
   U7_ga(x0, x1, x2)
   U3_ga(x0, x1, x2)
   U4_ga(x0, x1, x2, x3)
   U5_ga(x0, x1, x2)
   U2_ga(x0, x1, x2)
   U1_ga(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(83) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   U3_GA(X, Y, s2_out_ga(X, A)) -> U4_GA(X, Y, A, s2_in_ga(Y))


Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(S2_IN_GA(x_1)) = 1
   POL(U1_ga(x_1, x_2, x_3, x_4)) = 2*x_4
   POL(U2_ga(x_1, x_2, x_3)) = x_3
   POL(U3_GA(x_1, x_2, x_3)) = 1
   POL(U3_ga(x_1, x_2, x_3)) = 2*x_3
   POL(U4_GA(x_1, x_2, x_3, x_4)) = x_4
   POL(U4_ga(x_1, x_2, x_3, x_4)) = 2
   POL(U5_ga(x_1, x_2, x_3)) = 1 + x_3
   POL(U6_ga(x_1, x_2, x_3)) = 0
   POL(U7_ga(x_1, x_2, x_3)) = 0
   POL(U9_g(x_1, x_2)) = 2 + 2*x_1
   POL(isNat_in_g(x_1)) = 2*x_1
   POL(isNat_out_g(x_1)) = 0
   POL(plus(x_1, x_2)) = 0
   POL(s(x_1)) = 1 + 2*x_1
   POL(s2_in_ga(x_1)) = 0
   POL(s2_out_ga(x_1, x_2)) = 1


----------------------------------------

(84)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))
   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(X, Y)) -> U3_GA(X, Y, s2_in_ga(X))
   U4_GA(X, Y, A, s2_out_ga(Y, B)) -> S2_IN_GA(plus(A, B))

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(A, B, C, s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(A, B, s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, Y)) -> U3_ga(X, Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U6_ga(A, B, isNat_out_g(A)) -> U7_ga(A, B, isNat_in_g(B))
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U3_ga(X, Y, s2_out_ga(X, A)) -> U4_ga(X, Y, A, s2_in_ga(Y))
   U4_ga(X, Y, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, s2_in_ga(plus(A, B)))
   U5_ga(X, Y, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U9_g(x0, x1)
   U6_ga(x0, x1, x2)
   U7_ga(x0, x1, x2)
   U3_ga(x0, x1, x2)
   U4_ga(x0, x1, x2, x3)
   U5_ga(x0, x1, x2)
   U2_ga(x0, x1, x2)
   U1_ga(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(85) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(86)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))

The TRS R consists of the following rules:

   s2_in_ga(plus(A, plus(B, C))) -> U1_ga(A, B, C, s2_in_ga(plus(plus(A, B), C)))
   s2_in_ga(plus(A, B)) -> U2_ga(A, B, s2_in_ga(plus(B, A)))
   s2_in_ga(plus(X, Y)) -> U3_ga(X, Y, s2_in_ga(X))
   s2_in_ga(plus(A, B)) -> U6_ga(A, B, isNat_in_g(A))
   isNat_in_g(s(X)) -> U9_g(X, isNat_in_g(X))
   isNat_in_g(0) -> isNat_out_g(0)
   U6_ga(A, B, isNat_out_g(A)) -> U7_ga(A, B, isNat_in_g(B))
   U9_g(X, isNat_out_g(X)) -> isNat_out_g(s(X))
   U3_ga(X, Y, s2_out_ga(X, A)) -> U4_ga(X, Y, A, s2_in_ga(Y))
   U4_ga(X, Y, A, s2_out_ga(Y, B)) -> U5_ga(X, Y, s2_in_ga(plus(A, B)))
   U5_ga(X, Y, s2_out_ga(plus(A, B), Z)) -> s2_out_ga(plus(X, Y), Z)
   U2_ga(A, B, s2_out_ga(plus(B, A), C)) -> s2_out_ga(plus(A, B), C)
   U1_ga(A, B, C, s2_out_ga(plus(plus(A, B), C), D)) -> s2_out_ga(plus(A, plus(B, C)), D)

The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U9_g(x0, x1)
   U6_ga(x0, x1, x2)
   U7_ga(x0, x1, x2)
   U3_ga(x0, x1, x2)
   U4_ga(x0, x1, x2, x3)
   U5_ga(x0, x1, x2)
   U2_ga(x0, x1, x2)
   U1_ga(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(87) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(88)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))

R is empty.
The set Q consists of the following terms:

   s2_in_ga(x0)
   isNat_in_g(x0)
   U9_g(x0, x1)
   U6_ga(x0, x1, x2)
   U7_ga(x0, x1, x2)
   U3_ga(x0, x1, x2)
   U4_ga(x0, x1, x2, x3)
   U5_ga(x0, x1, x2)
   U2_ga(x0, x1, x2)
   U1_ga(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(89) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   s2_in_ga(x0)
   isNat_in_g(x0)
   U9_g(x0, x1)
   U6_ga(x0, x1, x2)
   U7_ga(x0, x1, x2)
   U3_ga(x0, x1, x2)
   U4_ga(x0, x1, x2, x3)
   U5_ga(x0, x1, x2)
   U2_ga(x0, x1, x2)
   U1_ga(x0, x1, x2, x3)


----------------------------------------

(90)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2_IN_GA(plus(A, plus(B, C))) -> S2_IN_GA(plus(plus(A, B), C))
   S2_IN_GA(plus(A, B)) -> S2_IN_GA(plus(B, A))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(91) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = S2_IN_GA(plus(A, B)) evaluates to  t =S2_IN_GA(plus(B, A))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [A / B, B / A]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from S2_IN_GA(plus(A, B)) to S2_IN_GA(plus(B, A)).




----------------------------------------

(92)
NO

----------------------------------------

(93) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(s2 (plus A (plus B C)) D)",
                "(s2 (plus (plus A B) C) D)"
            ],
            [
                "(s2 (plus A B) C)",
                "(s2 (plus B A) C)"
            ],
            [
                "(s2 (plus X (0)) X)",
                null
            ],
            [
                "(s2 (plus X Y) Z)",
                "(',' (s2 X A) (',' (s2 Y B) (s2 (plus A B) Z)))"
            ],
            [
                "(s2 (plus A B) C)",
                "(',' (isNat A) (',' (isNat B) (add A B C)))"
            ],
            [
                "(isNat (s X))",
                "(isNat X)"
            ],
            [
                "(isNat (0))",
                null
            ],
            [
                "(add (s X) Y (s Z))",
                "(add X Y Z)"
            ],
            [
                "(add (0) X X)",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "22": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(s2 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "23": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "24": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 (plus T42 T41) T44)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T41",
                        "T42"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "47": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "48": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "49": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "291": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 3,
                        "term": "(add T94 T95 T97)"
                    },
                    {
                        "clause": 8,
                        "scope": 3,
                        "term": "(add T94 T95 T97)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T95"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "292": {
                "goal": [{
                    "clause": 7,
                    "scope": 3,
                    "term": "(add T94 T95 T97)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T95"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "293": {
                "goal": [{
                    "clause": 8,
                    "scope": 3,
                    "term": "(add T94 T95 T97)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T95"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "250": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 T67 X69)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T67"],
                    "free": ["X69"],
                    "exprvars": []
                }
            },
            "294": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(add T123 T124 T126)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T123",
                        "T124"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "174": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 T66 X68)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T66"],
                    "free": ["X68"],
                    "exprvars": []
                }
            },
            "251": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 (plus T73 T80) T69)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T73",
                        "T80"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "295": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "175": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (s2 T67 X69) (s2 (plus T73 X69) T69))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T67",
                        "T73"
                    ],
                    "free": ["X69"],
                    "exprvars": []
                }
            },
            "252": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (isNat T94) (',' (isNat T95) (add T94 T95 T97)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T95"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "296": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "253": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "297": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "254": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(isNat T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "298": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "255": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (isNat T95) (add T94 T95 T97))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T95"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "256": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 2,
                        "term": "(isNat T94)"
                    },
                    {
                        "clause": 6,
                        "scope": 2,
                        "term": "(isNat T94)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "257": {
                "goal": [{
                    "clause": 5,
                    "scope": 2,
                    "term": "(isNat T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "258": {
                "goal": [{
                    "clause": 6,
                    "scope": 2,
                    "term": "(isNat T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "259": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(isNat T104)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T104"],
                    "free": [],
                    "exprvars": []
                }
            },
            "50": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "51": {
                "goal": [{
                    "clause": 3,
                    "scope": 1,
                    "term": "(s2 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "52": {
                "goal": [{
                    "clause": 4,
                    "scope": 1,
                    "term": "(s2 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "53": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (s2 T66 X68) (',' (s2 T67 X69) (s2 (plus X68 X69) T69)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T66",
                        "T67"
                    ],
                    "free": [
                        "X68",
                        "X69"
                    ],
                    "exprvars": []
                }
            },
            "54": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "11": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 (plus (plus T19 T20) T21) T23)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T19",
                        "T20",
                        "T21"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "260": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "261": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "262": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "263": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "265": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(isNat T95)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T95"],
                    "free": [],
                    "exprvars": []
                }
            },
            "266": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(add T94 T95 T97)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T95"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(s2 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "43": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(s2 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 7,
                "label": "PARALLEL"
            },
            {
                "from": 6,
                "to": 8,
                "label": "PARALLEL"
            },
            {
                "from": 7,
                "to": 11,
                "label": "EVAL with clause\ns2(plus(X17, plus(X18, X19)), X20) :- s2(plus(plus(X17, X18), X19), X20).\nand substitutionX17 -> T19,\nX18 -> T20,\nX19 -> T21,\nT1 -> plus(T19, plus(T20, T21)),\nT2 -> T23,\nX20 -> T23,\nT22 -> T23"
            },
            {
                "from": 7,
                "to": 12,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 8,
                "to": 22,
                "label": "PARALLEL"
            },
            {
                "from": 8,
                "to": 23,
                "label": "PARALLEL"
            },
            {
                "from": 11,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> plus(plus(T19, T20), T21)\nT2 -> T23"
            },
            {
                "from": 22,
                "to": 24,
                "label": "EVAL with clause\ns2(plus(X37, X38), X39) :- s2(plus(X38, X37), X39).\nand substitutionX37 -> T41,\nX38 -> T42,\nT1 -> plus(T41, T42),\nT2 -> T44,\nX39 -> T44,\nT43 -> T44"
            },
            {
                "from": 22,
                "to": 25,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 23,
                "to": 43,
                "label": "PARALLEL"
            },
            {
                "from": 23,
                "to": 47,
                "label": "PARALLEL"
            },
            {
                "from": 24,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> plus(T42, T41)\nT2 -> T44"
            },
            {
                "from": 43,
                "to": 48,
                "label": "EVAL with clause\ns2(plus(X48, 0), X48).\nand substitutionX48 -> T53,\nT1 -> plus(T53, 0),\nT2 -> T53"
            },
            {
                "from": 43,
                "to": 49,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 47,
                "to": 51,
                "label": "PARALLEL"
            },
            {
                "from": 47,
                "to": 52,
                "label": "PARALLEL"
            },
            {
                "from": 48,
                "to": 50,
                "label": "SUCCESS"
            },
            {
                "from": 51,
                "to": 53,
                "label": "EVAL with clause\ns2(plus(X65, X66), X67) :- ','(s2(X65, X68), ','(s2(X66, X69), s2(plus(X68, X69), X67))).\nand substitutionX65 -> T66,\nX66 -> T67,\nT1 -> plus(T66, T67),\nT2 -> T69,\nX67 -> T69,\nT68 -> T69"
            },
            {
                "from": 51,
                "to": 54,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 52,
                "to": 252,
                "label": "EVAL with clause\ns2(plus(X100, X101), X102) :- ','(isNat(X100), ','(isNat(X101), add(X100, X101, X102))).\nand substitutionX100 -> T94,\nX101 -> T95,\nT1 -> plus(T94, T95),\nT2 -> T97,\nX102 -> T97,\nT96 -> T97"
            },
            {
                "from": 52,
                "to": 253,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 53,
                "to": 174,
                "label": "SPLIT 1"
            },
            {
                "from": 53,
                "to": 175,
                "label": "SPLIT 2\nnew knowledge:\nT66 is ground\nT73 is ground\nreplacements:X68 -> T73"
            },
            {
                "from": 174,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T66\nT2 -> X68"
            },
            {
                "from": 175,
                "to": 250,
                "label": "SPLIT 1"
            },
            {
                "from": 175,
                "to": 251,
                "label": "SPLIT 2\nnew knowledge:\nT67 is ground\nT80 is ground\nreplacements:X69 -> T80"
            },
            {
                "from": 250,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T67\nT2 -> X69"
            },
            {
                "from": 251,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> plus(T73, T80)\nT2 -> T69"
            },
            {
                "from": 252,
                "to": 254,
                "label": "SPLIT 1"
            },
            {
                "from": 252,
                "to": 255,
                "label": "SPLIT 2\nnew knowledge:\nT94 is ground"
            },
            {
                "from": 254,
                "to": 256,
                "label": "CASE"
            },
            {
                "from": 255,
                "to": 265,
                "label": "SPLIT 1"
            },
            {
                "from": 255,
                "to": 266,
                "label": "SPLIT 2\nnew knowledge:\nT95 is ground"
            },
            {
                "from": 256,
                "to": 257,
                "label": "PARALLEL"
            },
            {
                "from": 256,
                "to": 258,
                "label": "PARALLEL"
            },
            {
                "from": 257,
                "to": 259,
                "label": "EVAL with clause\nisNat(s(X109)) :- isNat(X109).\nand substitutionX109 -> T104,\nT94 -> s(T104)"
            },
            {
                "from": 257,
                "to": 260,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 258,
                "to": 261,
                "label": "EVAL with clause\nisNat(0).\nand substitutionT94 -> 0"
            },
            {
                "from": 258,
                "to": 262,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 259,
                "to": 254,
                "label": "INSTANCE with matching:\nT94 -> T104"
            },
            {
                "from": 261,
                "to": 263,
                "label": "SUCCESS"
            },
            {
                "from": 265,
                "to": 254,
                "label": "INSTANCE with matching:\nT94 -> T95"
            },
            {
                "from": 266,
                "to": 291,
                "label": "CASE"
            },
            {
                "from": 291,
                "to": 292,
                "label": "PARALLEL"
            },
            {
                "from": 291,
                "to": 293,
                "label": "PARALLEL"
            },
            {
                "from": 292,
                "to": 294,
                "label": "EVAL with clause\nadd(s(X128), X129, s(X130)) :- add(X128, X129, X130).\nand substitutionX128 -> T123,\nT94 -> s(T123),\nT95 -> T124,\nX129 -> T124,\nX130 -> T126,\nT97 -> s(T126),\nT125 -> T126"
            },
            {
                "from": 292,
                "to": 295,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 293,
                "to": 296,
                "label": "EVAL with clause\nadd(0, X136, X136).\nand substitutionT94 -> 0,\nT95 -> T132,\nX136 -> T132,\nT97 -> T132"
            },
            {
                "from": 293,
                "to": 297,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 294,
                "to": 266,
                "label": "INSTANCE with matching:\nT94 -> T123\nT95 -> T124\nT97 -> T126"
            },
            {
                "from": 296,
                "to": 298,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(94)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f1_in(plus(T19, plus(T20, T21))) -> U1(f1_in(plus(plus(T19, T20), T21)), plus(T19, plus(T20, T21)))
   U1(f1_out1(T23), plus(T19, plus(T20, T21))) -> f1_out1(T23)
   f1_in(plus(T41, T42)) -> U2(f1_in(plus(T42, T41)), plus(T41, T42))
   U2(f1_out1(T44), plus(T41, T42)) -> f1_out1(T44)
   f1_in(plus(T53, 0)) -> f1_out1(T53)
   f1_in(plus(T66, T67)) -> U3(f53_in(T66, T67), plus(T66, T67))
   U3(f53_out1(X68, X69, T69), plus(T66, T67)) -> f1_out1(T69)
   f1_in(plus(T94, T95)) -> U4(f252_in(T94, T95), plus(T94, T95))
   U4(f252_out1(T97), plus(T94, T95)) -> f1_out1(T97)
   f254_in(s(T104)) -> U5(f254_in(T104), s(T104))
   U5(f254_out1, s(T104)) -> f254_out1
   f254_in(0) -> f254_out1
   f266_in(s(T123), T124) -> U6(f266_in(T123, T124), s(T123), T124)
   U6(f266_out1(T126), s(T123), T124) -> f266_out1(s(T126))
   f266_in(0, T132) -> f266_out1(T132)
   f53_in(T66, T67) -> U7(f1_in(T66), T66, T67)
   U7(f1_out1(T73), T66, T67) -> U8(f175_in(T67, T73), T66, T67, T73)
   U8(f175_out1(X69, T69), T66, T67, T73) -> f53_out1(T73, X69, T69)
   f175_in(T67, T73) -> U9(f1_in(T67), T67, T73)
   U9(f1_out1(T80), T67, T73) -> U10(f1_in(plus(T73, T80)), T67, T73, T80)
   U10(f1_out1(T69), T67, T73, T80) -> f175_out1(T80, T69)
   f252_in(T94, T95) -> U11(f254_in(T94), T94, T95)
   U11(f254_out1, T94, T95) -> U12(f255_in(T95, T94), T94, T95)
   U12(f255_out1(T97), T94, T95) -> f252_out1(T97)
   f255_in(T95, T94) -> U13(f254_in(T95), T95, T94)
   U13(f254_out1, T95, T94) -> U14(f266_in(T94, T95), T95, T94)
   U14(f266_out1(T97), T95, T94) -> f255_out1(T97)

Q is empty.

----------------------------------------

(95) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(96)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(plus(T19, plus(T20, T21))) -> U1^1(f1_in(plus(plus(T19, T20), T21)), plus(T19, plus(T20, T21)))
   F1_IN(plus(T19, plus(T20, T21))) -> F1_IN(plus(plus(T19, T20), T21))
   F1_IN(plus(T41, T42)) -> U2^1(f1_in(plus(T42, T41)), plus(T41, T42))
   F1_IN(plus(T41, T42)) -> F1_IN(plus(T42, T41))
   F1_IN(plus(T66, T67)) -> U3^1(f53_in(T66, T67), plus(T66, T67))
   F1_IN(plus(T66, T67)) -> F53_IN(T66, T67)
   F1_IN(plus(T94, T95)) -> U4^1(f252_in(T94, T95), plus(T94, T95))
   F1_IN(plus(T94, T95)) -> F252_IN(T94, T95)
   F254_IN(s(T104)) -> U5^1(f254_in(T104), s(T104))
   F254_IN(s(T104)) -> F254_IN(T104)
   F266_IN(s(T123), T124) -> U6^1(f266_in(T123, T124), s(T123), T124)
   F266_IN(s(T123), T124) -> F266_IN(T123, T124)
   F53_IN(T66, T67) -> U7^1(f1_in(T66), T66, T67)
   F53_IN(T66, T67) -> F1_IN(T66)
   U7^1(f1_out1(T73), T66, T67) -> U8^1(f175_in(T67, T73), T66, T67, T73)
   U7^1(f1_out1(T73), T66, T67) -> F175_IN(T67, T73)
   F175_IN(T67, T73) -> U9^1(f1_in(T67), T67, T73)
   F175_IN(T67, T73) -> F1_IN(T67)
   U9^1(f1_out1(T80), T67, T73) -> U10^1(f1_in(plus(T73, T80)), T67, T73, T80)
   U9^1(f1_out1(T80), T67, T73) -> F1_IN(plus(T73, T80))
   F252_IN(T94, T95) -> U11^1(f254_in(T94), T94, T95)
   F252_IN(T94, T95) -> F254_IN(T94)
   U11^1(f254_out1, T94, T95) -> U12^1(f255_in(T95, T94), T94, T95)
   U11^1(f254_out1, T94, T95) -> F255_IN(T95, T94)
   F255_IN(T95, T94) -> U13^1(f254_in(T95), T95, T94)
   F255_IN(T95, T94) -> F254_IN(T95)
   U13^1(f254_out1, T95, T94) -> U14^1(f266_in(T94, T95), T95, T94)
   U13^1(f254_out1, T95, T94) -> F266_IN(T94, T95)

The TRS R consists of the following rules:

   f1_in(plus(T19, plus(T20, T21))) -> U1(f1_in(plus(plus(T19, T20), T21)), plus(T19, plus(T20, T21)))
   U1(f1_out1(T23), plus(T19, plus(T20, T21))) -> f1_out1(T23)
   f1_in(plus(T41, T42)) -> U2(f1_in(plus(T42, T41)), plus(T41, T42))
   U2(f1_out1(T44), plus(T41, T42)) -> f1_out1(T44)
   f1_in(plus(T53, 0)) -> f1_out1(T53)
   f1_in(plus(T66, T67)) -> U3(f53_in(T66, T67), plus(T66, T67))
   U3(f53_out1(X68, X69, T69), plus(T66, T67)) -> f1_out1(T69)
   f1_in(plus(T94, T95)) -> U4(f252_in(T94, T95), plus(T94, T95))
   U4(f252_out1(T97), plus(T94, T95)) -> f1_out1(T97)
   f254_in(s(T104)) -> U5(f254_in(T104), s(T104))
   U5(f254_out1, s(T104)) -> f254_out1
   f254_in(0) -> f254_out1
   f266_in(s(T123), T124) -> U6(f266_in(T123, T124), s(T123), T124)
   U6(f266_out1(T126), s(T123), T124) -> f266_out1(s(T126))
   f266_in(0, T132) -> f266_out1(T132)
   f53_in(T66, T67) -> U7(f1_in(T66), T66, T67)
   U7(f1_out1(T73), T66, T67) -> U8(f175_in(T67, T73), T66, T67, T73)
   U8(f175_out1(X69, T69), T66, T67, T73) -> f53_out1(T73, X69, T69)
   f175_in(T67, T73) -> U9(f1_in(T67), T67, T73)
   U9(f1_out1(T80), T67, T73) -> U10(f1_in(plus(T73, T80)), T67, T73, T80)
   U10(f1_out1(T69), T67, T73, T80) -> f175_out1(T80, T69)
   f252_in(T94, T95) -> U11(f254_in(T94), T94, T95)
   U11(f254_out1, T94, T95) -> U12(f255_in(T95, T94), T94, T95)
   U12(f255_out1(T97), T94, T95) -> f252_out1(T97)
   f255_in(T95, T94) -> U13(f254_in(T95), T95, T94)
   U13(f254_out1, T95, T94) -> U14(f266_in(T94, T95), T95, T94)
   U14(f266_out1(T97), T95, T94) -> f255_out1(T97)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(97) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 3 SCCs with 17 less nodes.
----------------------------------------

(98)
Complex Obligation (AND)

----------------------------------------

(99)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F266_IN(s(T123), T124) -> F266_IN(T123, T124)

The TRS R consists of the following rules:

   f1_in(plus(T19, plus(T20, T21))) -> U1(f1_in(plus(plus(T19, T20), T21)), plus(T19, plus(T20, T21)))
   U1(f1_out1(T23), plus(T19, plus(T20, T21))) -> f1_out1(T23)
   f1_in(plus(T41, T42)) -> U2(f1_in(plus(T42, T41)), plus(T41, T42))
   U2(f1_out1(T44), plus(T41, T42)) -> f1_out1(T44)
   f1_in(plus(T53, 0)) -> f1_out1(T53)
   f1_in(plus(T66, T67)) -> U3(f53_in(T66, T67), plus(T66, T67))
   U3(f53_out1(X68, X69, T69), plus(T66, T67)) -> f1_out1(T69)
   f1_in(plus(T94, T95)) -> U4(f252_in(T94, T95), plus(T94, T95))
   U4(f252_out1(T97), plus(T94, T95)) -> f1_out1(T97)
   f254_in(s(T104)) -> U5(f254_in(T104), s(T104))
   U5(f254_out1, s(T104)) -> f254_out1
   f254_in(0) -> f254_out1
   f266_in(s(T123), T124) -> U6(f266_in(T123, T124), s(T123), T124)
   U6(f266_out1(T126), s(T123), T124) -> f266_out1(s(T126))
   f266_in(0, T132) -> f266_out1(T132)
   f53_in(T66, T67) -> U7(f1_in(T66), T66, T67)
   U7(f1_out1(T73), T66, T67) -> U8(f175_in(T67, T73), T66, T67, T73)
   U8(f175_out1(X69, T69), T66, T67, T73) -> f53_out1(T73, X69, T69)
   f175_in(T67, T73) -> U9(f1_in(T67), T67, T73)
   U9(f1_out1(T80), T67, T73) -> U10(f1_in(plus(T73, T80)), T67, T73, T80)
   U10(f1_out1(T69), T67, T73, T80) -> f175_out1(T80, T69)
   f252_in(T94, T95) -> U11(f254_in(T94), T94, T95)
   U11(f254_out1, T94, T95) -> U12(f255_in(T95, T94), T94, T95)
   U12(f255_out1(T97), T94, T95) -> f252_out1(T97)
   f255_in(T95, T94) -> U13(f254_in(T95), T95, T94)
   U13(f254_out1, T95, T94) -> U14(f266_in(T94, T95), T95, T94)
   U14(f266_out1(T97), T95, T94) -> f255_out1(T97)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(100) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(101)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F266_IN(s(T123), T124) -> F266_IN(T123, T124)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(102) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F266_IN(s(T123), T124) -> F266_IN(T123, T124)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(103)
YES

----------------------------------------

(104)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F254_IN(s(T104)) -> F254_IN(T104)

The TRS R consists of the following rules:

   f1_in(plus(T19, plus(T20, T21))) -> U1(f1_in(plus(plus(T19, T20), T21)), plus(T19, plus(T20, T21)))
   U1(f1_out1(T23), plus(T19, plus(T20, T21))) -> f1_out1(T23)
   f1_in(plus(T41, T42)) -> U2(f1_in(plus(T42, T41)), plus(T41, T42))
   U2(f1_out1(T44), plus(T41, T42)) -> f1_out1(T44)
   f1_in(plus(T53, 0)) -> f1_out1(T53)
   f1_in(plus(T66, T67)) -> U3(f53_in(T66, T67), plus(T66, T67))
   U3(f53_out1(X68, X69, T69), plus(T66, T67)) -> f1_out1(T69)
   f1_in(plus(T94, T95)) -> U4(f252_in(T94, T95), plus(T94, T95))
   U4(f252_out1(T97), plus(T94, T95)) -> f1_out1(T97)
   f254_in(s(T104)) -> U5(f254_in(T104), s(T104))
   U5(f254_out1, s(T104)) -> f254_out1
   f254_in(0) -> f254_out1
   f266_in(s(T123), T124) -> U6(f266_in(T123, T124), s(T123), T124)
   U6(f266_out1(T126), s(T123), T124) -> f266_out1(s(T126))
   f266_in(0, T132) -> f266_out1(T132)
   f53_in(T66, T67) -> U7(f1_in(T66), T66, T67)
   U7(f1_out1(T73), T66, T67) -> U8(f175_in(T67, T73), T66, T67, T73)
   U8(f175_out1(X69, T69), T66, T67, T73) -> f53_out1(T73, X69, T69)
   f175_in(T67, T73) -> U9(f1_in(T67), T67, T73)
   U9(f1_out1(T80), T67, T73) -> U10(f1_in(plus(T73, T80)), T67, T73, T80)
   U10(f1_out1(T69), T67, T73, T80) -> f175_out1(T80, T69)
   f252_in(T94, T95) -> U11(f254_in(T94), T94, T95)
   U11(f254_out1, T94, T95) -> U12(f255_in(T95, T94), T94, T95)
   U12(f255_out1(T97), T94, T95) -> f252_out1(T97)
   f255_in(T95, T94) -> U13(f254_in(T95), T95, T94)
   U13(f254_out1, T95, T94) -> U14(f266_in(T94, T95), T95, T94)
   U14(f266_out1(T97), T95, T94) -> f255_out1(T97)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(105) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(106)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F254_IN(s(T104)) -> F254_IN(T104)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(107) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F254_IN(s(T104)) -> F254_IN(T104)
The graph contains the following edges 1 > 1


----------------------------------------

(108)
YES

----------------------------------------

(109)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(plus(T41, T42)) -> F1_IN(plus(T42, T41))
   F1_IN(plus(T19, plus(T20, T21))) -> F1_IN(plus(plus(T19, T20), T21))
   F1_IN(plus(T66, T67)) -> F53_IN(T66, T67)
   F53_IN(T66, T67) -> U7^1(f1_in(T66), T66, T67)
   U7^1(f1_out1(T73), T66, T67) -> F175_IN(T67, T73)
   F175_IN(T67, T73) -> U9^1(f1_in(T67), T67, T73)
   U9^1(f1_out1(T80), T67, T73) -> F1_IN(plus(T73, T80))
   F175_IN(T67, T73) -> F1_IN(T67)
   F53_IN(T66, T67) -> F1_IN(T66)

The TRS R consists of the following rules:

   f1_in(plus(T19, plus(T20, T21))) -> U1(f1_in(plus(plus(T19, T20), T21)), plus(T19, plus(T20, T21)))
   U1(f1_out1(T23), plus(T19, plus(T20, T21))) -> f1_out1(T23)
   f1_in(plus(T41, T42)) -> U2(f1_in(plus(T42, T41)), plus(T41, T42))
   U2(f1_out1(T44), plus(T41, T42)) -> f1_out1(T44)
   f1_in(plus(T53, 0)) -> f1_out1(T53)
   f1_in(plus(T66, T67)) -> U3(f53_in(T66, T67), plus(T66, T67))
   U3(f53_out1(X68, X69, T69), plus(T66, T67)) -> f1_out1(T69)
   f1_in(plus(T94, T95)) -> U4(f252_in(T94, T95), plus(T94, T95))
   U4(f252_out1(T97), plus(T94, T95)) -> f1_out1(T97)
   f254_in(s(T104)) -> U5(f254_in(T104), s(T104))
   U5(f254_out1, s(T104)) -> f254_out1
   f254_in(0) -> f254_out1
   f266_in(s(T123), T124) -> U6(f266_in(T123, T124), s(T123), T124)
   U6(f266_out1(T126), s(T123), T124) -> f266_out1(s(T126))
   f266_in(0, T132) -> f266_out1(T132)
   f53_in(T66, T67) -> U7(f1_in(T66), T66, T67)
   U7(f1_out1(T73), T66, T67) -> U8(f175_in(T67, T73), T66, T67, T73)
   U8(f175_out1(X69, T69), T66, T67, T73) -> f53_out1(T73, X69, T69)
   f175_in(T67, T73) -> U9(f1_in(T67), T67, T73)
   U9(f1_out1(T80), T67, T73) -> U10(f1_in(plus(T73, T80)), T67, T73, T80)
   U10(f1_out1(T69), T67, T73, T80) -> f175_out1(T80, T69)
   f252_in(T94, T95) -> U11(f254_in(T94), T94, T95)
   U11(f254_out1, T94, T95) -> U12(f255_in(T95, T94), T94, T95)
   U12(f255_out1(T97), T94, T95) -> f252_out1(T97)
   f255_in(T95, T94) -> U13(f254_in(T95), T95, T94)
   U13(f254_out1, T95, T94) -> U14(f266_in(T94, T95), T95, T94)
   U14(f266_out1(T97), T95, T94) -> f255_out1(T97)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(110) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   F53_IN(T66, T67) -> U7^1(f1_in(T66), T66, T67)
   U7^1(f1_out1(T73), T66, T67) -> F175_IN(T67, T73)
   F53_IN(T66, T67) -> F1_IN(T66)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U7^1_3(x_1, ..., x_3) ) = max{0, x_1 + 2x_3 - 1}
POL( U9^1_3(x_1, ..., x_3) ) = max{0, x_1 + 2x_3 - 1}
POL( f1_in_1(x_1) ) = 2x_1
POL( plus_2(x_1, x_2) ) = x_1 + x_2 + 1
POL( U1_2(x_1, x_2) ) = x_1
POL( U2_2(x_1, x_2) ) = x_1
POL( 0 ) = 0
POL( f1_out1_1(x_1) ) = 2x_1 + 2
POL( U3_2(x_1, x_2) ) = x_1 + 2
POL( f53_in_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( U4_2(x_1, x_2) ) = x_1 + 2
POL( f252_in_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( f53_out1_3(x_1, ..., x_3) ) = 2x_3
POL( U7_3(x_1, ..., x_3) ) = max{0, x_1 + 2x_3 - 2}
POL( U8_4(x_1, ..., x_4) ) = x_1
POL( f175_in_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( f175_out1_2(x_1, x_2) ) = 2x_2
POL( U9_3(x_1, ..., x_3) ) = max{0, x_1 + 2x_3 - 2}
POL( U10_4(x_1, ..., x_4) ) = max{0, x_1 - 2}
POL( U11_3(x_1, ..., x_3) ) = 2x_1 + 2x_2 + 2x_3
POL( f254_in_1(x_1) ) = 0
POL( f252_out1_1(x_1) ) = 2x_1
POL( U12_3(x_1, ..., x_3) ) = max{0, x_1 - 2}
POL( U13_3(x_1, ..., x_3) ) = 2x_2 + 2x_3 + 2
POL( s_1(x_1) ) = 1
POL( U5_2(x_1, x_2) ) = max{0, -2}
POL( f254_out1 ) = 0
POL( f255_in_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2
POL( f255_out1_1(x_1) ) = 2x_1 + 2
POL( U14_3(x_1, ..., x_3) ) = x_1 + 2
POL( f266_in_2(x_1, x_2) ) = 2x_1 + 2x_2
POL( U6_3(x_1, ..., x_3) ) = 2x_2
POL( f266_out1_1(x_1) ) = 2x_1
POL( F1_IN_1(x_1) ) = max{0, 2x_1 - 1}
POL( F53_IN_2(x_1, x_2) ) = 2x_1 + 2x_2 + 1
POL( F175_IN_2(x_1, x_2) ) = 2x_1 + 2x_2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   f1_in(plus(T19, plus(T20, T21))) -> U1(f1_in(plus(plus(T19, T20), T21)), plus(T19, plus(T20, T21)))
   f1_in(plus(T41, T42)) -> U2(f1_in(plus(T42, T41)), plus(T41, T42))
   f1_in(plus(T53, 0)) -> f1_out1(T53)
   f1_in(plus(T66, T67)) -> U3(f53_in(T66, T67), plus(T66, T67))
   f1_in(plus(T94, T95)) -> U4(f252_in(T94, T95), plus(T94, T95))
   U2(f1_out1(T44), plus(T41, T42)) -> f1_out1(T44)
   U1(f1_out1(T23), plus(T19, plus(T20, T21))) -> f1_out1(T23)
   U3(f53_out1(X68, X69, T69), plus(T66, T67)) -> f1_out1(T69)
   f53_in(T66, T67) -> U7(f1_in(T66), T66, T67)
   U7(f1_out1(T73), T66, T67) -> U8(f175_in(T67, T73), T66, T67, T73)
   U8(f175_out1(X69, T69), T66, T67, T73) -> f53_out1(T73, X69, T69)
   f175_in(T67, T73) -> U9(f1_in(T67), T67, T73)
   U9(f1_out1(T80), T67, T73) -> U10(f1_in(plus(T73, T80)), T67, T73, T80)
   U10(f1_out1(T69), T67, T73, T80) -> f175_out1(T80, T69)
   f252_in(T94, T95) -> U11(f254_in(T94), T94, T95)
   U4(f252_out1(T97), plus(T94, T95)) -> f1_out1(T97)
   f254_in(s(T104)) -> U5(f254_in(T104), s(T104))
   f254_in(0) -> f254_out1
   U11(f254_out1, T94, T95) -> U12(f255_in(T95, T94), T94, T95)
   f255_in(T95, T94) -> U13(f254_in(T95), T95, T94)
   U12(f255_out1(T97), T94, T95) -> f252_out1(T97)
   U13(f254_out1, T95, T94) -> U14(f266_in(T94, T95), T95, T94)
   U5(f254_out1, s(T104)) -> f254_out1
   f266_in(s(T123), T124) -> U6(f266_in(T123, T124), s(T123), T124)
   f266_in(0, T132) -> f266_out1(T132)
   U14(f266_out1(T97), T95, T94) -> f255_out1(T97)
   U6(f266_out1(T126), s(T123), T124) -> f266_out1(s(T126))


----------------------------------------

(111)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(plus(T41, T42)) -> F1_IN(plus(T42, T41))
   F1_IN(plus(T19, plus(T20, T21))) -> F1_IN(plus(plus(T19, T20), T21))
   F1_IN(plus(T66, T67)) -> F53_IN(T66, T67)
   F175_IN(T67, T73) -> U9^1(f1_in(T67), T67, T73)
   U9^1(f1_out1(T80), T67, T73) -> F1_IN(plus(T73, T80))
   F175_IN(T67, T73) -> F1_IN(T67)

The TRS R consists of the following rules:

   f1_in(plus(T19, plus(T20, T21))) -> U1(f1_in(plus(plus(T19, T20), T21)), plus(T19, plus(T20, T21)))
   U1(f1_out1(T23), plus(T19, plus(T20, T21))) -> f1_out1(T23)
   f1_in(plus(T41, T42)) -> U2(f1_in(plus(T42, T41)), plus(T41, T42))
   U2(f1_out1(T44), plus(T41, T42)) -> f1_out1(T44)
   f1_in(plus(T53, 0)) -> f1_out1(T53)
   f1_in(plus(T66, T67)) -> U3(f53_in(T66, T67), plus(T66, T67))
   U3(f53_out1(X68, X69, T69), plus(T66, T67)) -> f1_out1(T69)
   f1_in(plus(T94, T95)) -> U4(f252_in(T94, T95), plus(T94, T95))
   U4(f252_out1(T97), plus(T94, T95)) -> f1_out1(T97)
   f254_in(s(T104)) -> U5(f254_in(T104), s(T104))
   U5(f254_out1, s(T104)) -> f254_out1
   f254_in(0) -> f254_out1
   f266_in(s(T123), T124) -> U6(f266_in(T123, T124), s(T123), T124)
   U6(f266_out1(T126), s(T123), T124) -> f266_out1(s(T126))
   f266_in(0, T132) -> f266_out1(T132)
   f53_in(T66, T67) -> U7(f1_in(T66), T66, T67)
   U7(f1_out1(T73), T66, T67) -> U8(f175_in(T67, T73), T66, T67, T73)
   U8(f175_out1(X69, T69), T66, T67, T73) -> f53_out1(T73, X69, T69)
   f175_in(T67, T73) -> U9(f1_in(T67), T67, T73)
   U9(f1_out1(T80), T67, T73) -> U10(f1_in(plus(T73, T80)), T67, T73, T80)
   U10(f1_out1(T69), T67, T73, T80) -> f175_out1(T80, T69)
   f252_in(T94, T95) -> U11(f254_in(T94), T94, T95)
   U11(f254_out1, T94, T95) -> U12(f255_in(T95, T94), T94, T95)
   U12(f255_out1(T97), T94, T95) -> f252_out1(T97)
   f255_in(T95, T94) -> U13(f254_in(T95), T95, T94)
   U13(f254_out1, T95, T94) -> U14(f266_in(T94, T95), T95, T94)
   U14(f266_out1(T97), T95, T94) -> f255_out1(T97)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(112) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 4 less nodes.
----------------------------------------

(113)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(plus(T19, plus(T20, T21))) -> F1_IN(plus(plus(T19, T20), T21))
   F1_IN(plus(T41, T42)) -> F1_IN(plus(T42, T41))

The TRS R consists of the following rules:

   f1_in(plus(T19, plus(T20, T21))) -> U1(f1_in(plus(plus(T19, T20), T21)), plus(T19, plus(T20, T21)))
   U1(f1_out1(T23), plus(T19, plus(T20, T21))) -> f1_out1(T23)
   f1_in(plus(T41, T42)) -> U2(f1_in(plus(T42, T41)), plus(T41, T42))
   U2(f1_out1(T44), plus(T41, T42)) -> f1_out1(T44)
   f1_in(plus(T53, 0)) -> f1_out1(T53)
   f1_in(plus(T66, T67)) -> U3(f53_in(T66, T67), plus(T66, T67))
   U3(f53_out1(X68, X69, T69), plus(T66, T67)) -> f1_out1(T69)
   f1_in(plus(T94, T95)) -> U4(f252_in(T94, T95), plus(T94, T95))
   U4(f252_out1(T97), plus(T94, T95)) -> f1_out1(T97)
   f254_in(s(T104)) -> U5(f254_in(T104), s(T104))
   U5(f254_out1, s(T104)) -> f254_out1
   f254_in(0) -> f254_out1
   f266_in(s(T123), T124) -> U6(f266_in(T123, T124), s(T123), T124)
   U6(f266_out1(T126), s(T123), T124) -> f266_out1(s(T126))
   f266_in(0, T132) -> f266_out1(T132)
   f53_in(T66, T67) -> U7(f1_in(T66), T66, T67)
   U7(f1_out1(T73), T66, T67) -> U8(f175_in(T67, T73), T66, T67, T73)
   U8(f175_out1(X69, T69), T66, T67, T73) -> f53_out1(T73, X69, T69)
   f175_in(T67, T73) -> U9(f1_in(T67), T67, T73)
   U9(f1_out1(T80), T67, T73) -> U10(f1_in(plus(T73, T80)), T67, T73, T80)
   U10(f1_out1(T69), T67, T73, T80) -> f175_out1(T80, T69)
   f252_in(T94, T95) -> U11(f254_in(T94), T94, T95)
   U11(f254_out1, T94, T95) -> U12(f255_in(T95, T94), T94, T95)
   U12(f255_out1(T97), T94, T95) -> f252_out1(T97)
   f255_in(T95, T94) -> U13(f254_in(T95), T95, T94)
   U13(f254_out1, T95, T94) -> U14(f266_in(T94, T95), T95, T94)
   U14(f266_out1(T97), T95, T94) -> f255_out1(T97)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(114) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(115)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(plus(T19, plus(T20, T21))) -> F1_IN(plus(plus(T19, T20), T21))
   F1_IN(plus(T41, T42)) -> F1_IN(plus(T42, T41))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(116) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = F1_IN(plus(T41, T42)) evaluates to  t =F1_IN(plus(T42, T41))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [T41 / T42, T42 / T41]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from F1_IN(plus(T41, T42)) to F1_IN(plus(T42, T41)).




----------------------------------------

(117)
NO

----------------------------------------

(118) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(s2 (plus A (plus B C)) D)",
                "(s2 (plus (plus A B) C) D)"
            ],
            [
                "(s2 (plus A B) C)",
                "(s2 (plus B A) C)"
            ],
            [
                "(s2 (plus X (0)) X)",
                null
            ],
            [
                "(s2 (plus X Y) Z)",
                "(',' (s2 X A) (',' (s2 Y B) (s2 (plus A B) Z)))"
            ],
            [
                "(s2 (plus A B) C)",
                "(',' (isNat A) (',' (isNat B) (add A B C)))"
            ],
            [
                "(isNat (s X))",
                "(isNat X)"
            ],
            [
                "(isNat (0))",
                null
            ],
            [
                "(add (s X) Y (s Z))",
                "(add X Y Z)"
            ],
            [
                "(add (0) X X)",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "190": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (s2 T67 X69) (s2 (plus T73 X69) T69))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T67",
                        "T73"
                    ],
                    "free": ["X69"],
                    "exprvars": []
                }
            },
            "290": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "194": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 T67 X69)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T67"],
                    "free": ["X69"],
                    "exprvars": []
                }
            },
            "195": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 (plus T73 T80) T69)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T73",
                        "T80"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "176": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(s2 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "177": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "232": {
                "goal": [{
                    "clause": 5,
                    "scope": 2,
                    "term": "(isNat T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "178": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 (plus T42 T41) T44)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T41",
                        "T42"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "233": {
                "goal": [{
                    "clause": 6,
                    "scope": 2,
                    "term": "(isNat T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "179": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "212": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (isNat T94) (',' (isNat T95) (add T94 T95 T97)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T95"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "213": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "237": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(isNat T104)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T104"],
                    "free": [],
                    "exprvars": []
                }
            },
            "239": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "16": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(s2 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "180": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(s2 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "181": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "182": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "183": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "184": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "185": {
                "goal": [{
                    "clause": 3,
                    "scope": 1,
                    "term": "(s2 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "240": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "186": {
                "goal": [{
                    "clause": 4,
                    "scope": 1,
                    "term": "(s2 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "241": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "187": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (s2 T66 X68) (',' (s2 T67 X69) (s2 (plus X68 X69) T69)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T66",
                        "T67"
                    ],
                    "free": [
                        "X68",
                        "X69"
                    ],
                    "exprvars": []
                }
            },
            "220": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(isNat T94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "242": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "188": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "243": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(isNat T95)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T95"],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "189": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 T66 X68)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T66"],
                    "free": ["X68"],
                    "exprvars": []
                }
            },
            "222": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (isNat T95) (add T94 T95 T97))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T95"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "244": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(add T94 T95 T97)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T95"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "288": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "245": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 3,
                        "term": "(add T94 T95 T97)"
                    },
                    {
                        "clause": 8,
                        "scope": 3,
                        "term": "(add T94 T95 T97)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T95"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "289": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "246": {
                "goal": [{
                    "clause": 7,
                    "scope": 3,
                    "term": "(add T94 T95 T97)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T95"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "247": {
                "goal": [{
                    "clause": 8,
                    "scope": 3,
                    "term": "(add T94 T95 T97)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T94",
                        "T95"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "248": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(add T123 T124 T126)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T123",
                        "T124"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "249": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "228": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 2,
                        "term": "(isNat T94)"
                    },
                    {
                        "clause": 6,
                        "scope": 2,
                        "term": "(isNat T94)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T94"],
                    "free": [],
                    "exprvars": []
                }
            },
            "20": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 (plus (plus T19 T20) T21) T23)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T19",
                        "T20",
                        "T21"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "21": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 16,
                "label": "PARALLEL"
            },
            {
                "from": 5,
                "to": 17,
                "label": "PARALLEL"
            },
            {
                "from": 16,
                "to": 20,
                "label": "EVAL with clause\ns2(plus(X17, plus(X18, X19)), X20) :- s2(plus(plus(X17, X18), X19), X20).\nand substitutionX17 -> T19,\nX18 -> T20,\nX19 -> T21,\nT1 -> plus(T19, plus(T20, T21)),\nT2 -> T23,\nX20 -> T23,\nT22 -> T23"
            },
            {
                "from": 16,
                "to": 21,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 17,
                "to": 176,
                "label": "PARALLEL"
            },
            {
                "from": 17,
                "to": 177,
                "label": "PARALLEL"
            },
            {
                "from": 20,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> plus(plus(T19, T20), T21)\nT2 -> T23"
            },
            {
                "from": 176,
                "to": 178,
                "label": "EVAL with clause\ns2(plus(X37, X38), X39) :- s2(plus(X38, X37), X39).\nand substitutionX37 -> T41,\nX38 -> T42,\nT1 -> plus(T41, T42),\nT2 -> T44,\nX39 -> T44,\nT43 -> T44"
            },
            {
                "from": 176,
                "to": 179,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 177,
                "to": 180,
                "label": "PARALLEL"
            },
            {
                "from": 177,
                "to": 181,
                "label": "PARALLEL"
            },
            {
                "from": 178,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> plus(T42, T41)\nT2 -> T44"
            },
            {
                "from": 180,
                "to": 182,
                "label": "EVAL with clause\ns2(plus(X48, 0), X48).\nand substitutionX48 -> T53,\nT1 -> plus(T53, 0),\nT2 -> T53"
            },
            {
                "from": 180,
                "to": 183,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 181,
                "to": 185,
                "label": "PARALLEL"
            },
            {
                "from": 181,
                "to": 186,
                "label": "PARALLEL"
            },
            {
                "from": 182,
                "to": 184,
                "label": "SUCCESS"
            },
            {
                "from": 185,
                "to": 187,
                "label": "EVAL with clause\ns2(plus(X65, X66), X67) :- ','(s2(X65, X68), ','(s2(X66, X69), s2(plus(X68, X69), X67))).\nand substitutionX65 -> T66,\nX66 -> T67,\nT1 -> plus(T66, T67),\nT2 -> T69,\nX67 -> T69,\nT68 -> T69"
            },
            {
                "from": 185,
                "to": 188,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 186,
                "to": 212,
                "label": "EVAL with clause\ns2(plus(X100, X101), X102) :- ','(isNat(X100), ','(isNat(X101), add(X100, X101, X102))).\nand substitutionX100 -> T94,\nX101 -> T95,\nT1 -> plus(T94, T95),\nT2 -> T97,\nX102 -> T97,\nT96 -> T97"
            },
            {
                "from": 186,
                "to": 213,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 187,
                "to": 189,
                "label": "SPLIT 1"
            },
            {
                "from": 187,
                "to": 190,
                "label": "SPLIT 2\nnew knowledge:\nT66 is ground\nT73 is ground\nreplacements:X68 -> T73"
            },
            {
                "from": 189,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T66\nT2 -> X68"
            },
            {
                "from": 190,
                "to": 194,
                "label": "SPLIT 1"
            },
            {
                "from": 190,
                "to": 195,
                "label": "SPLIT 2\nnew knowledge:\nT67 is ground\nT80 is ground\nreplacements:X69 -> T80"
            },
            {
                "from": 194,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T67\nT2 -> X69"
            },
            {
                "from": 195,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> plus(T73, T80)\nT2 -> T69"
            },
            {
                "from": 212,
                "to": 220,
                "label": "SPLIT 1"
            },
            {
                "from": 212,
                "to": 222,
                "label": "SPLIT 2\nnew knowledge:\nT94 is ground"
            },
            {
                "from": 220,
                "to": 228,
                "label": "CASE"
            },
            {
                "from": 222,
                "to": 243,
                "label": "SPLIT 1"
            },
            {
                "from": 222,
                "to": 244,
                "label": "SPLIT 2\nnew knowledge:\nT95 is ground"
            },
            {
                "from": 228,
                "to": 232,
                "label": "PARALLEL"
            },
            {
                "from": 228,
                "to": 233,
                "label": "PARALLEL"
            },
            {
                "from": 232,
                "to": 237,
                "label": "EVAL with clause\nisNat(s(X109)) :- isNat(X109).\nand substitutionX109 -> T104,\nT94 -> s(T104)"
            },
            {
                "from": 232,
                "to": 239,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 233,
                "to": 240,
                "label": "EVAL with clause\nisNat(0).\nand substitutionT94 -> 0"
            },
            {
                "from": 233,
                "to": 241,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 237,
                "to": 220,
                "label": "INSTANCE with matching:\nT94 -> T104"
            },
            {
                "from": 240,
                "to": 242,
                "label": "SUCCESS"
            },
            {
                "from": 243,
                "to": 220,
                "label": "INSTANCE with matching:\nT94 -> T95"
            },
            {
                "from": 244,
                "to": 245,
                "label": "CASE"
            },
            {
                "from": 245,
                "to": 246,
                "label": "PARALLEL"
            },
            {
                "from": 245,
                "to": 247,
                "label": "PARALLEL"
            },
            {
                "from": 246,
                "to": 248,
                "label": "EVAL with clause\nadd(s(X128), X129, s(X130)) :- add(X128, X129, X130).\nand substitutionX128 -> T123,\nT94 -> s(T123),\nT95 -> T124,\nX129 -> T124,\nX130 -> T126,\nT97 -> s(T126),\nT125 -> T126"
            },
            {
                "from": 246,
                "to": 249,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 247,
                "to": 288,
                "label": "EVAL with clause\nadd(0, X136, X136).\nand substitutionT94 -> 0,\nT95 -> T132,\nX136 -> T132,\nT97 -> T132"
            },
            {
                "from": 247,
                "to": 289,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 248,
                "to": 244,
                "label": "INSTANCE with matching:\nT94 -> T123\nT95 -> T124\nT97 -> T126"
            },
            {
                "from": 288,
                "to": 290,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(119)
Complex Obligation (AND)

----------------------------------------

(120)
Obligation:
Rules:
f244_in(T94, T95) -> f245_in(T94, T95) :|: TRUE
f245_out(x, x1) -> f244_out(x, x1) :|: TRUE
f249_out -> f246_out(x2, x3) :|: TRUE
f246_in(s(T123), T124) -> f248_in(T123, T124) :|: TRUE
f248_out(x4, x5) -> f246_out(s(x4), x5) :|: TRUE
f246_in(x6, x7) -> f249_in :|: TRUE
f247_out(x8, x9) -> f245_out(x8, x9) :|: TRUE
f245_in(x10, x11) -> f246_in(x10, x11) :|: TRUE
f246_out(x12, x13) -> f245_out(x12, x13) :|: TRUE
f245_in(x14, x15) -> f247_in(x14, x15) :|: TRUE
f244_out(x16, x17) -> f248_out(x16, x17) :|: TRUE
f248_in(x18, x19) -> f244_in(x18, x19) :|: TRUE
f5_out(T1) -> f2_out(T1) :|: TRUE
f2_in(x20) -> f5_in(x20) :|: TRUE
f17_out(x21) -> f5_out(x21) :|: TRUE
f16_out(x22) -> f5_out(x22) :|: TRUE
f5_in(x23) -> f16_in(x23) :|: TRUE
f5_in(x24) -> f17_in(x24) :|: TRUE
f17_in(x25) -> f176_in(x25) :|: TRUE
f176_out(x26) -> f17_out(x26) :|: TRUE
f177_out(x27) -> f17_out(x27) :|: TRUE
f17_in(x28) -> f177_in(x28) :|: TRUE
f180_out(x29) -> f177_out(x29) :|: TRUE
f181_out(x30) -> f177_out(x30) :|: TRUE
f177_in(x31) -> f180_in(x31) :|: TRUE
f177_in(x32) -> f181_in(x32) :|: TRUE
f181_in(x33) -> f186_in(x33) :|: TRUE
f181_in(x34) -> f185_in(x34) :|: TRUE
f185_out(x35) -> f181_out(x35) :|: TRUE
f186_out(x36) -> f181_out(x36) :|: TRUE
f186_in(plus(x37, x38)) -> f212_in(x37, x38) :|: TRUE
f186_in(x39) -> f213_in :|: TRUE
f212_out(x40, x41) -> f186_out(plus(x40, x41)) :|: TRUE
f213_out -> f186_out(x42) :|: TRUE
f220_out(x43) -> f222_in(x44, x43) :|: TRUE
f222_out(x45, x46) -> f212_out(x46, x45) :|: TRUE
f212_in(x47, x48) -> f220_in(x47) :|: TRUE
f222_in(x49, x50) -> f243_in(x49) :|: TRUE
f243_out(x51) -> f244_in(x52, x51) :|: TRUE
f244_out(x53, x54) -> f222_out(x54, x53) :|: TRUE
Start term: f2_in(T1)

----------------------------------------

(121) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:


----------------------------------------

(122)
TRUE

----------------------------------------

(123)
Obligation:
Rules:
f220_out(T104) -> f237_out(T104) :|: TRUE
f237_in(x) -> f220_in(x) :|: TRUE
f220_in(T94) -> f228_in(T94) :|: TRUE
f228_out(x1) -> f220_out(x1) :|: TRUE
f228_in(x2) -> f233_in(x2) :|: TRUE
f232_out(x3) -> f228_out(x3) :|: TRUE
f233_out(x4) -> f228_out(x4) :|: TRUE
f228_in(x5) -> f232_in(x5) :|: TRUE
f237_out(x6) -> f232_out(s(x6)) :|: TRUE
f232_in(x7) -> f239_in :|: TRUE
f239_out -> f232_out(x8) :|: TRUE
f232_in(s(x9)) -> f237_in(x9) :|: TRUE
f5_out(T1) -> f2_out(T1) :|: TRUE
f2_in(x10) -> f5_in(x10) :|: TRUE
f17_out(x11) -> f5_out(x11) :|: TRUE
f16_out(x12) -> f5_out(x12) :|: TRUE
f5_in(x13) -> f16_in(x13) :|: TRUE
f5_in(x14) -> f17_in(x14) :|: TRUE
f17_in(x15) -> f176_in(x15) :|: TRUE
f176_out(x16) -> f17_out(x16) :|: TRUE
f177_out(x17) -> f17_out(x17) :|: TRUE
f17_in(x18) -> f177_in(x18) :|: TRUE
f180_out(x19) -> f177_out(x19) :|: TRUE
f181_out(x20) -> f177_out(x20) :|: TRUE
f177_in(x21) -> f180_in(x21) :|: TRUE
f177_in(x22) -> f181_in(x22) :|: TRUE
f181_in(x23) -> f186_in(x23) :|: TRUE
f181_in(x24) -> f185_in(x24) :|: TRUE
f185_out(x25) -> f181_out(x25) :|: TRUE
f186_out(x26) -> f181_out(x26) :|: TRUE
f186_in(plus(x27, x28)) -> f212_in(x27, x28) :|: TRUE
f186_in(x29) -> f213_in :|: TRUE
f212_out(x30, x31) -> f186_out(plus(x30, x31)) :|: TRUE
f213_out -> f186_out(x32) :|: TRUE
f220_out(x33) -> f222_in(x34, x33) :|: TRUE
f222_out(x35, x36) -> f212_out(x36, x35) :|: TRUE
f212_in(x37, x38) -> f220_in(x37) :|: TRUE
f222_in(x39, x40) -> f243_in(x39) :|: TRUE
f243_out(x41) -> f244_in(x42, x41) :|: TRUE
f244_out(x43, x44) -> f222_out(x44, x43) :|: TRUE
f220_out(T95) -> f243_out(T95) :|: TRUE
f243_in(x45) -> f220_in(x45) :|: TRUE
Start term: f2_in(T1)

----------------------------------------

(124) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f237_in(x) -> f220_in(x) :|: TRUE
f220_in(T94) -> f228_in(T94) :|: TRUE
f228_in(x5) -> f232_in(x5) :|: TRUE
f232_in(s(x9)) -> f237_in(x9) :|: TRUE


----------------------------------------

(125)
Obligation:
Rules:
f237_in(x) -> f220_in(x) :|: TRUE
f220_in(T94) -> f228_in(T94) :|: TRUE
f228_in(x5) -> f232_in(x5) :|: TRUE
f232_in(s(x9)) -> f237_in(x9) :|: TRUE

----------------------------------------

(126) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(127)
Obligation:
Rules:
f237_in(s(x9:0)) -> f237_in(x9:0) :|: TRUE

----------------------------------------

(128) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(129)
Obligation:
Rules:
f237_in(s(x9:0)) -> f237_in(x9:0) :|: TRUE

----------------------------------------

(130) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f237_in(s(x9:0)) -> f237_in(x9:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(131)
Obligation:

Termination digraph:
Nodes:
(1) f237_in(s(x9:0)) -> f237_in(x9:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(132) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f237_in(VARIABLE)
s(VARIABLE)
Removed predefined arithmetic.
----------------------------------------

(133)
Obligation:
Rules:
f237_in(s(x9:0)) -> f237_in(x9:0)

----------------------------------------

(134) IRSwTToQDPProof (SOUND)
Removed the integers and created a QDP-Problem.
----------------------------------------

(135)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f237_in(s(x9:0)) -> f237_in(x9:0)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(136) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*f237_in(s(x9:0)) -> f237_in(x9:0)
The graph contains the following edges 1 > 1


----------------------------------------

(137)
YES

----------------------------------------

(138)
Obligation:
Rules:
f185_in(T1) -> f188_in :|: TRUE
f187_out(T66, T67) -> f185_out(plus(T66, T67)) :|: TRUE
f185_in(plus(x, x1)) -> f187_in(x, x1) :|: TRUE
f188_out -> f185_out(x2) :|: TRUE
f189_in(x3) -> f2_in(x3) :|: TRUE
f2_out(x4) -> f189_out(x4) :|: TRUE
f2_out(x5) -> f194_out(x5) :|: TRUE
f194_in(x6) -> f2_in(x6) :|: TRUE
f181_in(x7) -> f186_in(x7) :|: TRUE
f181_in(x8) -> f185_in(x8) :|: TRUE
f185_out(x9) -> f181_out(x9) :|: TRUE
f186_out(x10) -> f181_out(x10) :|: TRUE
f2_out(plus(T42, T41)) -> f178_out(T42, T41) :|: TRUE
f178_in(x11, x12) -> f2_in(plus(x11, x12)) :|: TRUE
f2_out(plus(T73, T80)) -> f195_out(T73, T80) :|: TRUE
f195_in(x13, x14) -> f2_in(plus(x13, x14)) :|: TRUE
f17_in(x15) -> f176_in(x15) :|: TRUE
f176_out(x16) -> f17_out(x16) :|: TRUE
f177_out(x17) -> f17_out(x17) :|: TRUE
f17_in(x18) -> f177_in(x18) :|: TRUE
f176_in(plus(x19, x20)) -> f178_in(x20, x19) :|: TRUE
f179_out -> f176_out(x21) :|: TRUE
f176_in(x22) -> f179_in :|: TRUE
f178_out(x23, x24) -> f176_out(plus(x24, x23)) :|: TRUE
f5_out(x25) -> f2_out(x25) :|: TRUE
f2_in(x26) -> f5_in(x26) :|: TRUE
f195_out(x27, x28) -> f190_out(x29, x27) :|: TRUE
f194_out(x30) -> f195_in(x31, x32) :|: TRUE
f190_in(x33, x34) -> f194_in(x33) :|: TRUE
f17_out(x35) -> f5_out(x35) :|: TRUE
f16_out(x36) -> f5_out(x36) :|: TRUE
f5_in(x37) -> f16_in(x37) :|: TRUE
f5_in(x38) -> f17_in(x38) :|: TRUE
f180_out(x39) -> f177_out(x39) :|: TRUE
f181_out(x40) -> f177_out(x40) :|: TRUE
f177_in(x41) -> f180_in(x41) :|: TRUE
f177_in(x42) -> f181_in(x42) :|: TRUE
f2_out(plus(plus(T19, T20), T21)) -> f20_out(T19, T20, T21) :|: TRUE
f20_in(x43, x44, x45) -> f2_in(plus(plus(x43, x44), x45)) :|: TRUE
f16_in(plus(x46, plus(x47, x48))) -> f20_in(x46, x47, x48) :|: TRUE
f21_out -> f16_out(x49) :|: TRUE
f20_out(x50, x51, x52) -> f16_out(plus(x50, plus(x51, x52))) :|: TRUE
f16_in(x53) -> f21_in :|: TRUE
f187_in(x54, x55) -> f189_in(x54) :|: TRUE
f190_out(x56, x57) -> f187_out(x58, x56) :|: TRUE
f189_out(x59) -> f190_in(x60, x61) :|: TRUE
Start term: f2_in(T1)

----------------------------------------

(139) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f185_in(plus(x, x1)) -> f187_in(x, x1) :|: TRUE
f189_in(x3) -> f2_in(x3) :|: TRUE
f181_in(x8) -> f185_in(x8) :|: TRUE
f178_in(x11, x12) -> f2_in(plus(x11, x12)) :|: TRUE
f17_in(x15) -> f176_in(x15) :|: TRUE
f17_in(x18) -> f177_in(x18) :|: TRUE
f176_in(plus(x19, x20)) -> f178_in(x20, x19) :|: TRUE
f2_in(x26) -> f5_in(x26) :|: TRUE
f5_in(x37) -> f16_in(x37) :|: TRUE
f5_in(x38) -> f17_in(x38) :|: TRUE
f177_in(x42) -> f181_in(x42) :|: TRUE
f20_in(x43, x44, x45) -> f2_in(plus(plus(x43, x44), x45)) :|: TRUE
f16_in(plus(x46, plus(x47, x48))) -> f20_in(x46, x47, x48) :|: TRUE
f187_in(x54, x55) -> f189_in(x54) :|: TRUE


----------------------------------------

(140)
Obligation:
Rules:
f185_in(plus(x, x1)) -> f187_in(x, x1) :|: TRUE
f189_in(x3) -> f2_in(x3) :|: TRUE
f181_in(x8) -> f185_in(x8) :|: TRUE
f178_in(x11, x12) -> f2_in(plus(x11, x12)) :|: TRUE
f17_in(x15) -> f176_in(x15) :|: TRUE
f17_in(x18) -> f177_in(x18) :|: TRUE
f176_in(plus(x19, x20)) -> f178_in(x20, x19) :|: TRUE
f2_in(x26) -> f5_in(x26) :|: TRUE
f5_in(x37) -> f16_in(x37) :|: TRUE
f5_in(x38) -> f17_in(x38) :|: TRUE
f177_in(x42) -> f181_in(x42) :|: TRUE
f20_in(x43, x44, x45) -> f2_in(plus(plus(x43, x44), x45)) :|: TRUE
f16_in(plus(x46, plus(x47, x48))) -> f20_in(x46, x47, x48) :|: TRUE
f187_in(x54, x55) -> f189_in(x54) :|: TRUE

----------------------------------------

(141) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(142)
Obligation:
Rules:
f5_in(plus(x19:0, x20:0)) -> f5_in(plus(x20:0, x19:0)) :|: TRUE
f5_in(plus(x46:0, plus(x47:0, x48:0))) -> f5_in(plus(plus(x46:0, x47:0), x48:0)) :|: TRUE
f5_in(plus(x:0, x1:0)) -> f5_in(x:0) :|: TRUE

----------------------------------------

(143) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(144)
Obligation:
Rules:
f5_in(plus(x19:0, x20:0)) -> f5_in(plus(x20:0, x19:0)) :|: TRUE
f5_in(plus(x46:0, plus(x47:0, x48:0))) -> f5_in(plus(plus(x46:0, x47:0), x48:0)) :|: TRUE
f5_in(plus(x:0, x1:0)) -> f5_in(x:0) :|: TRUE

----------------------------------------

(145) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f5_in(plus(x19:0, x20:0)) -> f5_in(plus(x20:0, x19:0)) :|: TRUE
(2) f5_in(plus(x46:0, plus(x47:0, x48:0))) -> f5_in(plus(plus(x46:0, x47:0), x48:0)) :|: TRUE
(3) f5_in(plus(x:0, x1:0)) -> f5_in(x:0) :|: TRUE

Arcs:
(1) -> (1), (2), (3)
(2) -> (1), (2), (3)
(3) -> (1), (2), (3)

This digraph is fully evaluated!
----------------------------------------

(146)
Obligation:

Termination digraph:
Nodes:
(1) f5_in(plus(x19:0, x20:0)) -> f5_in(plus(x20:0, x19:0)) :|: TRUE
(2) f5_in(plus(x46:0, plus(x47:0, x48:0))) -> f5_in(plus(plus(x46:0, x47:0), x48:0)) :|: TRUE
(3) f5_in(plus(x:0, x1:0)) -> f5_in(x:0) :|: TRUE

Arcs:
(1) -> (1), (2), (3)
(2) -> (1), (2), (3)
(3) -> (1), (2), (3)

This digraph is fully evaluated!

----------------------------------------

(147) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(s2 (plus A (plus B C)) D)",
                "(s2 (plus (plus A B) C) D)"
            ],
            [
                "(s2 (plus A B) C)",
                "(s2 (plus B A) C)"
            ],
            [
                "(s2 (plus X (0)) X)",
                null
            ],
            [
                "(s2 (plus X Y) Z)",
                "(',' (s2 X A) (',' (s2 Y B) (s2 (plus A B) Z)))"
            ],
            [
                "(s2 (plus A B) C)",
                "(',' (isNat A) (',' (isNat B) (add A B C)))"
            ],
            [
                "(isNat (s X))",
                "(isNat X)"
            ],
            [
                "(isNat (0))",
                null
            ],
            [
                "(add (s X) Y (s Z))",
                "(add X Y Z)"
            ],
            [
                "(add (0) X X)",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "type": "Nodes",
            "590": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(add T255 (plus T256 T257) T259)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T255",
                        "T256",
                        "T257"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "591": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 6,
                        "term": "(add T255 (plus T256 T257) T259)"
                    },
                    {
                        "clause": 8,
                        "scope": 6,
                        "term": "(add T255 (plus T256 T257) T259)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T255",
                        "T256",
                        "T257"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "592": {
                "goal": [{
                    "clause": 7,
                    "scope": 6,
                    "term": "(add T255 (plus T256 T257) T259)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T255",
                        "T256",
                        "T257"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "593": {
                "goal": [{
                    "clause": 8,
                    "scope": 6,
                    "term": "(add T255 (plus T256 T257) T259)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T255",
                        "T256",
                        "T257"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "594": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(add T282 (plus T283 T284) T286)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T282",
                        "T283",
                        "T284"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "595": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "870": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T300 T301) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T300",
                        "T301"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "596": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "871": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(s2 (plus T300 T301) T2)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T300 T301) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T300",
                        "T301"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "597": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "872": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T300 T301) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T300",
                        "T301"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "510": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "598": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "873": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "478": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(s2 (plus (plus T7 T8) T9) T11)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "511": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "874": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "479": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(s2 (plus (plus T7 T8) T9) T11)"
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(s2 (plus (plus T7 T8) T9) T11)"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "875": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "876": {
                "goal": [{
                    "clause": 3,
                    "scope": 1,
                    "term": "(s2 (plus T300 T301) T2)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T300 T301) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T300",
                        "T301"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "877": {
                "goal": [{
                    "clause": 4,
                    "scope": 1,
                    "term": "(s2 (plus T300 T301) T2)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T300 T301) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T300",
                        "T301"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "878": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (s2 T536 X548) (',' (s2 T537 X549) (s2 (plus X548 X549) T539)))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T536 T537) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T536",
                        "T537"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8",
                        "X548",
                        "X549"
                    ],
                    "exprvars": []
                }
            },
            "879": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 T536 X548)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T536 T537) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T536",
                        "T537"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8",
                        "X548"
                    ],
                    "exprvars": []
                }
            },
            "10": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(s2 T1 T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(s2 (plus (plus T7 T8) T9) T11)"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(s2 (plus (plus T7 T8) T9) T11)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(s2 (plus (plus T7 T8) T9) T11)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(s2 (plus (plus T7 T8) T9) T11)"
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(s2 (plus (plus T7 T8) T9) T11)"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(s2 (plus (plus T7 T8) T9) T11)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(s2 (plus (plus T7 T8) T9) T11)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(s2 (plus (plus T7 T8) T9) T11)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(s2 (plus (plus T7 T8) T9) T11)"
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(s2 (plus (plus T7 T8) T9) T11)"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "18": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 (plus (plus (plus T32 T33) T34) T35) T37)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T32",
                        "T33",
                        "T34",
                        "T35"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "480": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "481": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "482": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "483": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(s2 (plus (plus T7 T8) T9) T11)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "484": {
                "goal": [
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(s2 (plus (plus T7 T8) T9) T11)"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "880": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (s2 T537 X549) (s2 (plus T543 X549) T539))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T536 T537) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T536",
                        "T537",
                        "T543"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8",
                        "X549"
                    ],
                    "exprvars": []
                }
            },
            "485": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (s2 (plus T113 T114) X94) (',' (s2 T115 X95) (s2 (plus X94 X95) T117)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T113",
                        "T114",
                        "T115"
                    ],
                    "free": [
                        "X94",
                        "X95"
                    ],
                    "exprvars": []
                }
            },
            "881": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (isNat T566) (',' (isNat T567) (add T566 T567 T569)))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T566 T567) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T566",
                        "T567"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "486": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 (plus T113 T114) X94)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T113",
                        "T114"
                    ],
                    "free": ["X94"],
                    "exprvars": []
                }
            },
            "882": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(isNat T566)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T566 T567) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T566",
                        "T567"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "487": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (s2 T115 X95) (s2 (plus T121 X95) T117))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T115",
                        "T121"
                    ],
                    "free": ["X95"],
                    "exprvars": []
                }
            },
            "883": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (isNat T567) (add T566 T567 T569))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T566 T567) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T566",
                        "T567"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "488": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 T115 X95)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T115"],
                    "free": ["X95"],
                    "exprvars": []
                }
            },
            "884": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(isNat T567)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T566 T567) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T566",
                        "T567"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "489": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 (plus T121 T128) T117)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T121",
                        "T128"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "885": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(add T566 T567 T569)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T566 T567) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T566",
                        "T567"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "886": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [
                        [
                            "(s2 T1 T2)",
                            "(s2 (plus X5 (plus X6 X7)) X8)"
                        ],
                        [
                            "(s2 T1 T2)",
                            "(s2 (plus X270 X271) X272)"
                        ]
                    ],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8",
                        "X270",
                        "X271",
                        "X272"
                    ],
                    "exprvars": []
                }
            },
            "887": {
                "goal": [{
                    "clause": 4,
                    "scope": 1,
                    "term": "(s2 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [
                        [
                            "(s2 T1 T2)",
                            "(s2 (plus X5 (plus X6 X7)) X8)"
                        ],
                        [
                            "(s2 T1 T2)",
                            "(s2 (plus X270 X271) X272)"
                        ]
                    ],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8",
                        "X270",
                        "X271",
                        "X272"
                    ],
                    "exprvars": []
                }
            },
            "888": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(s2 (plus (plus T7 T8) T9) T11)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "490": {
                "goal": [{
                    "clause": 4,
                    "scope": 2,
                    "term": "(s2 (plus (plus T7 T8) T9) T11)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "491": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "492": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (isNat (plus T154 T155)) (',' (isNat T156) (add (plus T154 T155) T156 T158)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T154",
                        "T155",
                        "T156"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "493": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(isNat (plus T154 T155))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T154",
                        "T155"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "494": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (isNat T156) (add (plus T154 T155) T156 T158))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T154",
                        "T155",
                        "T156"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "495": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 3,
                        "term": "(isNat (plus T154 T155))"
                    },
                    {
                        "clause": 6,
                        "scope": 3,
                        "term": "(isNat (plus T154 T155))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T154",
                        "T155"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "496": {
                "goal": [{
                    "clause": 6,
                    "scope": 3,
                    "term": "(isNat (plus T154 T155))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T154",
                        "T155"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "497": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "498": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(isNat T156)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T156"],
                    "free": [],
                    "exprvars": []
                }
            },
            "499": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(add (plus T154 T155) T156 T158)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T154",
                        "T155",
                        "T156"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "813": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 9,
                        "term": "(add T479 T480 T482)"
                    },
                    {
                        "clause": 8,
                        "scope": 9,
                        "term": "(add T479 T480 T482)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T479",
                        "T480"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "264": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(s2 (plus (plus T7 T8) T9) T11)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "267": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(s2 (plus (plus T7 T8) T9) T11)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(s2 (plus (plus T7 T8) T9) T11)"
                    },
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(s2 (plus (plus T7 T8) T9) T11)"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "544": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "545": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "546": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 (plus (plus T196 T197) T195) T199)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T195",
                        "T196",
                        "T197"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "700": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 8,
                        "term": "(add T456 T457 T459)"
                    },
                    {
                        "clause": 8,
                        "scope": 8,
                        "term": "(add T456 T457 T459)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T457 T456) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T456",
                        "T457"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "547": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "701": {
                "goal": [{
                    "clause": 7,
                    "scope": 8,
                    "term": "(add T456 T457 T459)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T457 T456) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T456",
                        "T457"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "702": {
                "goal": [{
                    "clause": 8,
                    "scope": 8,
                    "term": "(add T456 T457 T459)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T457 T456) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T456",
                        "T457"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "794": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(add T479 T480 T482)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T479",
                        "T480"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "795": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "675": {
                "goal": [{
                    "clause": 4,
                    "scope": 7,
                    "term": "(s2 (plus T301 T300) T303)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T300 T301) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T300",
                        "T301"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "676": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 7,
                        "term": null
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T300 T301) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T300",
                        "T301"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "681": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (isNat T456) (',' (isNat T457) (add T456 T457 T459)))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T457 T456) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T456",
                        "T457"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "682": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(isNat T456)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T457 T456) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T456",
                        "T457"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "683": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (isNat T457) (add T456 T457 T459))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T457 T456) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T456",
                        "T457"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "684": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(isNat T457)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T457 T456) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T456",
                        "T457"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "685": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(add T456 T457 T459)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T457 T456) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T456",
                        "T457"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "600": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(s2 (plus T301 T300) T303)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T300 T301) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T300",
                        "T301"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "601": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [
                        [
                            "(s2 T1 T2)",
                            "(s2 (plus X5 (plus X6 X7)) X8)"
                        ],
                        [
                            "(s2 T1 T2)",
                            "(s2 (plus X270 X271) X272)"
                        ]
                    ],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8",
                        "X270",
                        "X271",
                        "X272"
                    ],
                    "exprvars": []
                }
            },
            "602": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 7,
                        "term": "(s2 (plus T301 T300) T303)"
                    },
                    {
                        "clause": 1,
                        "scope": 7,
                        "term": "(s2 (plus T301 T300) T303)"
                    },
                    {
                        "clause": 2,
                        "scope": 7,
                        "term": "(s2 (plus T301 T300) T303)"
                    },
                    {
                        "clause": 3,
                        "scope": 7,
                        "term": "(s2 (plus T301 T300) T303)"
                    },
                    {
                        "clause": 4,
                        "scope": 7,
                        "term": "(s2 (plus T301 T300) T303)"
                    },
                    {
                        "clause": -1,
                        "scope": 7,
                        "term": null
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T300 T301) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T300",
                        "T301"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "604": {
                "goal": [{
                    "clause": 0,
                    "scope": 7,
                    "term": "(s2 (plus T301 T300) T303)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T300 T301) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T300",
                        "T301"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "605": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 7,
                        "term": "(s2 (plus T301 T300) T303)"
                    },
                    {
                        "clause": 2,
                        "scope": 7,
                        "term": "(s2 (plus T301 T300) T303)"
                    },
                    {
                        "clause": 3,
                        "scope": 7,
                        "term": "(s2 (plus T301 T300) T303)"
                    },
                    {
                        "clause": 4,
                        "scope": 7,
                        "term": "(s2 (plus T301 T300) T303)"
                    },
                    {
                        "clause": -1,
                        "scope": 7,
                        "term": null
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T300 T301) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T300",
                        "T301"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "606": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 (plus (plus T320 T321) T322) T324)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus (plus T321 T322) T320) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T320",
                        "T321",
                        "T322"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "607": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "610": {
                "goal": [{
                    "clause": 1,
                    "scope": 7,
                    "term": "(s2 (plus T301 T300) T303)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T300 T301) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T300",
                        "T301"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "457": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 (plus T72 (plus T70 T71)) T74)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T70",
                        "T71",
                        "T72"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "611": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 7,
                        "term": "(s2 (plus T301 T300) T303)"
                    },
                    {
                        "clause": 3,
                        "scope": 7,
                        "term": "(s2 (plus T301 T300) T303)"
                    },
                    {
                        "clause": 4,
                        "scope": 7,
                        "term": "(s2 (plus T301 T300) T303)"
                    },
                    {
                        "clause": -1,
                        "scope": 7,
                        "term": null
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T300 T301) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T300",
                        "T301"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "612": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 (plus T359 T358) T361)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T359 T358) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T358",
                        "T359"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "613": {
                "goal": [{
                    "clause": 2,
                    "scope": 7,
                    "term": "(s2 (plus T301 T300) T303)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T300 T301) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T300",
                        "T301"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "614": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 7,
                        "term": "(s2 (plus T301 T300) T303)"
                    },
                    {
                        "clause": 4,
                        "scope": 7,
                        "term": "(s2 (plus T301 T300) T303)"
                    },
                    {
                        "clause": -1,
                        "scope": 7,
                        "term": null
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T300 T301) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T300",
                        "T301"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "615": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "616": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "617": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "618": {
                "goal": [{
                    "clause": 3,
                    "scope": 7,
                    "term": "(s2 (plus T301 T300) T303)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T300 T301) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T300",
                        "T301"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "619": {
                "goal": [
                    {
                        "clause": 4,
                        "scope": 7,
                        "term": "(s2 (plus T301 T300) T303)"
                    },
                    {
                        "clause": -1,
                        "scope": 7,
                        "term": null
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    },
                    {
                        "clause": 4,
                        "scope": 1,
                        "term": "(s2 (plus T300 T301) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T300 T301) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T300",
                        "T301"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "581": {
                "goal": [{
                    "clause": 3,
                    "scope": 1,
                    "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "582": {
                "goal": [{
                    "clause": 4,
                    "scope": 1,
                    "term": "(s2 (plus T7 (plus T8 T9)) T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "583": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (s2 T230 X212) (',' (s2 (plus T231 T232) X213) (s2 (plus X212 X213) T234)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T230",
                        "T231",
                        "T232"
                    ],
                    "free": [
                        "X212",
                        "X213"
                    ],
                    "exprvars": []
                }
            },
            "584": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 T230 X212)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T230"],
                    "free": ["X212"],
                    "exprvars": []
                }
            },
            "585": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (s2 (plus T231 T232) X213) (s2 (plus T238 X213) T234))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T231",
                        "T232",
                        "T238"
                    ],
                    "free": ["X213"],
                    "exprvars": []
                }
            },
            "860": {
                "goal": [{
                    "clause": 7,
                    "scope": 9,
                    "term": "(add T479 T480 T482)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T479",
                        "T480"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "586": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (isNat T255) (',' (isNat (plus T256 T257)) (add T255 (plus T256 T257) T259)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T255",
                        "T256",
                        "T257"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "861": {
                "goal": [{
                    "clause": 8,
                    "scope": 9,
                    "term": "(add T479 T480 T482)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T479",
                        "T480"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "587": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(isNat T255)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T255"],
                    "free": [],
                    "exprvars": []
                }
            },
            "620": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (s2 T410 X399) (',' (s2 T411 X400) (s2 (plus X399 X400) T413)))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T411 T410) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T410",
                        "T411"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8",
                        "X399",
                        "X400"
                    ],
                    "exprvars": []
                }
            },
            "862": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(add T498 T499 T501)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T498",
                        "T499"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "500": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(isNat T156)"
                    },
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(isNat T156)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T156"],
                    "free": [],
                    "exprvars": []
                }
            },
            "588": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (isNat (plus T256 T257)) (add T255 (plus T256 T257) T259))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T255",
                        "T256",
                        "T257"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "863": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "501": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(isNat T156)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T156"],
                    "free": [],
                    "exprvars": []
                }
            },
            "589": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(isNat (plus T256 T257))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T256",
                        "T257"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "864": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "502": {
                "goal": [{
                    "clause": 6,
                    "scope": 4,
                    "term": "(isNat T156)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T156"],
                    "free": [],
                    "exprvars": []
                }
            },
            "865": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "503": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(isNat T165)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T165"],
                    "free": [],
                    "exprvars": []
                }
            },
            "866": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "504": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "625": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(s2 T410 X399)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T411 T410) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T410",
                        "T411"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8",
                        "X399"
                    ],
                    "exprvars": []
                }
            },
            "867": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "505": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "626": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (s2 T411 X400) (s2 (plus T425 X400) T413))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(s2 (plus T411 T410) T2)",
                        "(s2 (plus X5 (plus X6 X7)) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T410",
                        "T411",
                        "T425"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8",
                        "X400"
                    ],
                    "exprvars": []
                }
            },
            "868": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "506": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "869": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "507": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "508": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(add (plus T154 T155) T156 T158)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(add (plus T154 T155) T156 T158)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T154",
                        "T155",
                        "T156"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "509": {
                "goal": [{
                    "clause": 8,
                    "scope": 5,
                    "term": "(add (plus T154 T155) T156 T158)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T154",
                        "T155",
                        "T156"
                    ],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 9,
                "label": "EVAL with clause\ns2(plus(X5, plus(X6, X7)), X8) :- s2(plus(plus(X5, X6), X7), X8).\nand substitutionX5 -> T7,\nX6 -> T8,\nX7 -> T9,\nT1 -> plus(T7, plus(T8, T9)),\nT2 -> T11,\nX8 -> T11,\nT10 -> T11"
            },
            {
                "from": 4,
                "to": 10,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 9,
                "to": 13,
                "label": "CASE"
            },
            {
                "from": 10,
                "to": 600,
                "label": "EVAL with clause\ns2(plus(X270, X271), X272) :- s2(plus(X271, X270), X272).\nand substitutionX270 -> T300,\nX271 -> T301,\nT1 -> plus(T300, T301),\nT2 -> T303,\nX272 -> T303,\nT302 -> T303"
            },
            {
                "from": 10,
                "to": 601,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 13,
                "to": 14,
                "label": "PARALLEL"
            },
            {
                "from": 13,
                "to": 15,
                "label": "PARALLEL"
            },
            {
                "from": 14,
                "to": 18,
                "label": "EVAL with clause\ns2(plus(X25, plus(X26, X27)), X28) :- s2(plus(plus(X25, X26), X27), X28).\nand substitutionT7 -> T32,\nT8 -> T33,\nX25 -> plus(T32, T33),\nX26 -> T34,\nX27 -> T35,\nT9 -> plus(T34, T35),\nT11 -> T37,\nX28 -> T37,\nT36 -> T37"
            },
            {
                "from": 14,
                "to": 19,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 15,
                "to": 264,
                "label": "PARALLEL"
            },
            {
                "from": 15,
                "to": 267,
                "label": "PARALLEL"
            },
            {
                "from": 18,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> plus(plus(plus(T32, T33), T34), T35)\nT2 -> T37"
            },
            {
                "from": 264,
                "to": 457,
                "label": "ONLY EVAL with clause\ns2(plus(X53, X54), X55) :- s2(plus(X54, X53), X55).\nand substitutionT7 -> T70,\nT8 -> T71,\nX53 -> plus(T70, T71),\nT9 -> T72,\nX54 -> T72,\nT11 -> T74,\nX55 -> T74,\nT73 -> T74"
            },
            {
                "from": 267,
                "to": 478,
                "label": "PARALLEL"
            },
            {
                "from": 267,
                "to": 479,
                "label": "PARALLEL"
            },
            {
                "from": 457,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> plus(T72, plus(T70, T71))\nT2 -> T74"
            },
            {
                "from": 478,
                "to": 480,
                "label": "EVAL with clause\ns2(plus(X64, 0), X64).\nand substitutionT7 -> T87,\nT8 -> T88,\nX64 -> plus(T87, T88),\nT9 -> 0,\nT11 -> plus(T87, T88)"
            },
            {
                "from": 478,
                "to": 481,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 479,
                "to": 483,
                "label": "PARALLEL"
            },
            {
                "from": 479,
                "to": 484,
                "label": "PARALLEL"
            },
            {
                "from": 480,
                "to": 482,
                "label": "SUCCESS"
            },
            {
                "from": 483,
                "to": 485,
                "label": "ONLY EVAL with clause\ns2(plus(X91, X92), X93) :- ','(s2(X91, X94), ','(s2(X92, X95), s2(plus(X94, X95), X93))).\nand substitutionT7 -> T113,\nT8 -> T114,\nX91 -> plus(T113, T114),\nT9 -> T115,\nX92 -> T115,\nT11 -> T117,\nX93 -> T117,\nT116 -> T117"
            },
            {
                "from": 484,
                "to": 490,
                "label": "PARALLEL"
            },
            {
                "from": 484,
                "to": 491,
                "label": "PARALLEL"
            },
            {
                "from": 485,
                "to": 486,
                "label": "SPLIT 1"
            },
            {
                "from": 485,
                "to": 487,
                "label": "SPLIT 2\nnew knowledge:\nT113 is ground\nT114 is ground\nT121 is ground\nreplacements:X94 -> T121"
            },
            {
                "from": 486,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> plus(T113, T114)\nT2 -> X94"
            },
            {
                "from": 487,
                "to": 488,
                "label": "SPLIT 1"
            },
            {
                "from": 487,
                "to": 489,
                "label": "SPLIT 2\nnew knowledge:\nT115 is ground\nT128 is ground\nreplacements:X95 -> T128"
            },
            {
                "from": 488,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T115\nT2 -> X95"
            },
            {
                "from": 489,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> plus(T121, T128)\nT2 -> T117"
            },
            {
                "from": 490,
                "to": 492,
                "label": "ONLY EVAL with clause\ns2(plus(X134, X135), X136) :- ','(isNat(X134), ','(isNat(X135), add(X134, X135, X136))).\nand substitutionT7 -> T154,\nT8 -> T155,\nX134 -> plus(T154, T155),\nT9 -> T156,\nX135 -> T156,\nT11 -> T158,\nX136 -> T158,\nT157 -> T158"
            },
            {
                "from": 491,
                "to": 511,
                "label": "FAILURE"
            },
            {
                "from": 492,
                "to": 493,
                "label": "SPLIT 1"
            },
            {
                "from": 492,
                "to": 494,
                "label": "SPLIT 2\nnew knowledge:\nT154 is ground\nT155 is ground"
            },
            {
                "from": 493,
                "to": 495,
                "label": "CASE"
            },
            {
                "from": 494,
                "to": 498,
                "label": "SPLIT 1"
            },
            {
                "from": 494,
                "to": 499,
                "label": "SPLIT 2\nnew knowledge:\nT156 is ground"
            },
            {
                "from": 495,
                "to": 496,
                "label": "BACKTRACK\nfor clause: isNat(s(X)) :- isNat(X)because of non-unification"
            },
            {
                "from": 496,
                "to": 497,
                "label": "BACKTRACK\nfor clause: isNat(0)because of non-unification"
            },
            {
                "from": 498,
                "to": 500,
                "label": "CASE"
            },
            {
                "from": 499,
                "to": 508,
                "label": "CASE"
            },
            {
                "from": 500,
                "to": 501,
                "label": "PARALLEL"
            },
            {
                "from": 500,
                "to": 502,
                "label": "PARALLEL"
            },
            {
                "from": 501,
                "to": 503,
                "label": "EVAL with clause\nisNat(s(X146)) :- isNat(X146).\nand substitutionX146 -> T165,\nT156 -> s(T165)"
            },
            {
                "from": 501,
                "to": 504,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 502,
                "to": 505,
                "label": "EVAL with clause\nisNat(0).\nand substitutionT156 -> 0"
            },
            {
                "from": 502,
                "to": 506,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 503,
                "to": 498,
                "label": "INSTANCE with matching:\nT156 -> T165"
            },
            {
                "from": 505,
                "to": 507,
                "label": "SUCCESS"
            },
            {
                "from": 508,
                "to": 509,
                "label": "BACKTRACK\nfor clause: add(s(X), Y, s(Z)) :- add(X, Y, Z)because of non-unification"
            },
            {
                "from": 509,
                "to": 510,
                "label": "BACKTRACK\nfor clause: add(0, X, X)because of non-unification"
            },
            {
                "from": 511,
                "to": 544,
                "label": "PARALLEL"
            },
            {
                "from": 511,
                "to": 545,
                "label": "PARALLEL"
            },
            {
                "from": 544,
                "to": 546,
                "label": "ONLY EVAL with clause\ns2(plus(X175, X176), X177) :- s2(plus(X176, X175), X177).\nand substitutionT7 -> T195,\nX175 -> T195,\nT8 -> T196,\nT9 -> T197,\nX176 -> plus(T196, T197),\nT2 -> T199,\nX177 -> T199,\nT198 -> T199"
            },
            {
                "from": 545,
                "to": 547,
                "label": "BACKTRACK\nfor clause: s2(plus(X, 0), X)because of non-unification"
            },
            {
                "from": 546,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> plus(plus(T196, T197), T195)\nT2 -> T199"
            },
            {
                "from": 547,
                "to": 581,
                "label": "PARALLEL"
            },
            {
                "from": 547,
                "to": 582,
                "label": "PARALLEL"
            },
            {
                "from": 581,
                "to": 583,
                "label": "ONLY EVAL with clause\ns2(plus(X209, X210), X211) :- ','(s2(X209, X212), ','(s2(X210, X213), s2(plus(X212, X213), X211))).\nand substitutionT7 -> T230,\nX209 -> T230,\nT8 -> T231,\nT9 -> T232,\nX210 -> plus(T231, T232),\nT2 -> T234,\nX211 -> T234,\nT233 -> T234"
            },
            {
                "from": 582,
                "to": 586,
                "label": "ONLY EVAL with clause\ns2(plus(X236, X237), X238) :- ','(isNat(X236), ','(isNat(X237), add(X236, X237, X238))).\nand substitutionT7 -> T255,\nX236 -> T255,\nT8 -> T256,\nT9 -> T257,\nX237 -> plus(T256, T257),\nT2 -> T259,\nX238 -> T259,\nT258 -> T259"
            },
            {
                "from": 583,
                "to": 584,
                "label": "SPLIT 1"
            },
            {
                "from": 583,
                "to": 585,
                "label": "SPLIT 2\nnew knowledge:\nT230 is ground\nT238 is ground\nreplacements:X212 -> T238"
            },
            {
                "from": 584,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T230\nT2 -> X212"
            },
            {
                "from": 585,
                "to": 487,
                "label": "INSTANCE with matching:\nT115 -> plus(T231, T232)\nX95 -> X213\nT121 -> T238\nT117 -> T234"
            },
            {
                "from": 586,
                "to": 587,
                "label": "SPLIT 1"
            },
            {
                "from": 586,
                "to": 588,
                "label": "SPLIT 2\nnew knowledge:\nT255 is ground"
            },
            {
                "from": 587,
                "to": 498,
                "label": "INSTANCE with matching:\nT156 -> T255"
            },
            {
                "from": 588,
                "to": 589,
                "label": "SPLIT 1"
            },
            {
                "from": 588,
                "to": 590,
                "label": "SPLIT 2\nnew knowledge:\nT256 is ground\nT257 is ground"
            },
            {
                "from": 589,
                "to": 493,
                "label": "INSTANCE with matching:\nT154 -> T256\nT155 -> T257"
            },
            {
                "from": 590,
                "to": 591,
                "label": "CASE"
            },
            {
                "from": 591,
                "to": 592,
                "label": "PARALLEL"
            },
            {
                "from": 591,
                "to": 593,
                "label": "PARALLEL"
            },
            {
                "from": 592,
                "to": 594,
                "label": "EVAL with clause\nadd(s(X258), X259, s(X260)) :- add(X258, X259, X260).\nand substitutionX258 -> T282,\nT255 -> s(T282),\nT256 -> T283,\nT257 -> T284,\nX259 -> plus(T283, T284),\nX260 -> T286,\nT259 -> s(T286),\nT285 -> T286"
            },
            {
                "from": 592,
                "to": 595,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 593,
                "to": 596,
                "label": "EVAL with clause\nadd(0, X266, X266).\nand substitutionT255 -> 0,\nT256 -> T295,\nT257 -> T296,\nX266 -> plus(T295, T296),\nT259 -> plus(T295, T296)"
            },
            {
                "from": 593,
                "to": 597,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 594,
                "to": 590,
                "label": "INSTANCE with matching:\nT255 -> T282\nT256 -> T283\nT257 -> T284\nT259 -> T286"
            },
            {
                "from": 596,
                "to": 598,
                "label": "SUCCESS"
            },
            {
                "from": 600,
                "to": 602,
                "label": "CASE"
            },
            {
                "from": 601,
                "to": 886,
                "label": "BACKTRACK\nfor clause: s2(plus(X, 0), X)\nwith clash: (s2(T1, T2), s2(plus(X270, X271), X272))"
            },
            {
                "from": 602,
                "to": 604,
                "label": "PARALLEL"
            },
            {
                "from": 602,
                "to": 605,
                "label": "PARALLEL"
            },
            {
                "from": 604,
                "to": 606,
                "label": "EVAL with clause\ns2(plus(X289, plus(X290, X291)), X292) :- s2(plus(plus(X289, X290), X291), X292).\nand substitutionT301 -> T320,\nX289 -> T320,\nX290 -> T321,\nX291 -> T322,\nT300 -> plus(T321, T322),\nT303 -> T324,\nX292 -> T324,\nT323 -> T324"
            },
            {
                "from": 604,
                "to": 607,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 605,
                "to": 610,
                "label": "PARALLEL"
            },
            {
                "from": 605,
                "to": 611,
                "label": "PARALLEL"
            },
            {
                "from": 606,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> plus(plus(T320, T321), T322)\nT2 -> T324"
            },
            {
                "from": 610,
                "to": 612,
                "label": "ONLY EVAL with clause\ns2(plus(X323, X324), X325) :- s2(plus(X324, X323), X325).\nand substitutionT301 -> T358,\nX323 -> T358,\nT300 -> T359,\nX324 -> T359,\nT303 -> T361,\nX325 -> T361,\nT360 -> T361"
            },
            {
                "from": 611,
                "to": 613,
                "label": "PARALLEL"
            },
            {
                "from": 611,
                "to": 614,
                "label": "PARALLEL"
            },
            {
                "from": 612,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> plus(T359, T358)\nT2 -> T361"
            },
            {
                "from": 613,
                "to": 615,
                "label": "EVAL with clause\ns2(plus(X337, 0), X337).\nand substitutionT301 -> T373,\nX337 -> T373,\nT300 -> 0,\nT303 -> T373"
            },
            {
                "from": 613,
                "to": 616,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 614,
                "to": 618,
                "label": "PARALLEL"
            },
            {
                "from": 614,
                "to": 619,
                "label": "PARALLEL"
            },
            {
                "from": 615,
                "to": 617,
                "label": "SUCCESS"
            },
            {
                "from": 618,
                "to": 620,
                "label": "ONLY EVAL with clause\ns2(plus(X396, X397), X398) :- ','(s2(X396, X399), ','(s2(X397, X400), s2(plus(X399, X400), X398))).\nand substitutionT301 -> T410,\nX396 -> T410,\nT300 -> T411,\nX397 -> T411,\nT303 -> T413,\nX398 -> T413,\nT412 -> T413"
            },
            {
                "from": 619,
                "to": 675,
                "label": "PARALLEL"
            },
            {
                "from": 619,
                "to": 676,
                "label": "PARALLEL"
            },
            {
                "from": 620,
                "to": 625,
                "label": "SPLIT 1"
            },
            {
                "from": 620,
                "to": 626,
                "label": "SPLIT 2\nnew knowledge:\nT410 is ground\nT425 is ground\nreplacements:X399 -> T425"
            },
            {
                "from": 625,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T410\nT2 -> X399"
            },
            {
                "from": 626,
                "to": 487,
                "label": "INSTANCE with matching:\nT115 -> T411\nX95 -> X400\nT121 -> T425\nT117 -> T413"
            },
            {
                "from": 675,
                "to": 681,
                "label": "ONLY EVAL with clause\ns2(plus(X462, X463), X464) :- ','(isNat(X462), ','(isNat(X463), add(X462, X463, X464))).\nand substitutionT301 -> T456,\nX462 -> T456,\nT300 -> T457,\nX463 -> T457,\nT303 -> T459,\nX464 -> T459,\nT458 -> T459"
            },
            {
                "from": 676,
                "to": 870,
                "label": "FAILURE"
            },
            {
                "from": 681,
                "to": 682,
                "label": "SPLIT 1"
            },
            {
                "from": 681,
                "to": 683,
                "label": "SPLIT 2\nnew knowledge:\nT456 is ground"
            },
            {
                "from": 682,
                "to": 498,
                "label": "INSTANCE with matching:\nT156 -> T456"
            },
            {
                "from": 683,
                "to": 684,
                "label": "SPLIT 1"
            },
            {
                "from": 683,
                "to": 685,
                "label": "SPLIT 2\nnew knowledge:\nT457 is ground"
            },
            {
                "from": 684,
                "to": 498,
                "label": "INSTANCE with matching:\nT156 -> T457"
            },
            {
                "from": 685,
                "to": 700,
                "label": "CASE"
            },
            {
                "from": 700,
                "to": 701,
                "label": "PARALLEL"
            },
            {
                "from": 700,
                "to": 702,
                "label": "PARALLEL"
            },
            {
                "from": 701,
                "to": 794,
                "label": "EVAL with clause\nadd(s(X484), X485, s(X486)) :- add(X484, X485, X486).\nand substitutionX484 -> T479,\nT456 -> s(T479),\nT457 -> T480,\nX485 -> T480,\nX486 -> T482,\nT459 -> s(T482),\nT481 -> T482"
            },
            {
                "from": 701,
                "to": 795,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 702,
                "to": 867,
                "label": "EVAL with clause\nadd(0, X513, X513).\nand substitutionT456 -> 0,\nT457 -> T510,\nX513 -> T510,\nT459 -> T510"
            },
            {
                "from": 702,
                "to": 868,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 794,
                "to": 813,
                "label": "CASE"
            },
            {
                "from": 813,
                "to": 860,
                "label": "PARALLEL"
            },
            {
                "from": 813,
                "to": 861,
                "label": "PARALLEL"
            },
            {
                "from": 860,
                "to": 862,
                "label": "EVAL with clause\nadd(s(X502), X503, s(X504)) :- add(X502, X503, X504).\nand substitutionX502 -> T498,\nT479 -> s(T498),\nT480 -> T499,\nX503 -> T499,\nX504 -> T501,\nT482 -> s(T501),\nT500 -> T501"
            },
            {
                "from": 860,
                "to": 863,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 861,
                "to": 864,
                "label": "EVAL with clause\nadd(0, X510, X510).\nand substitutionT479 -> 0,\nT480 -> T507,\nX510 -> T507,\nT482 -> T507"
            },
            {
                "from": 861,
                "to": 865,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 862,
                "to": 794,
                "label": "INSTANCE with matching:\nT479 -> T498\nT480 -> T499\nT482 -> T501"
            },
            {
                "from": 864,
                "to": 866,
                "label": "SUCCESS"
            },
            {
                "from": 867,
                "to": 869,
                "label": "SUCCESS"
            },
            {
                "from": 870,
                "to": 871,
                "label": "PARALLEL"
            },
            {
                "from": 870,
                "to": 872,
                "label": "PARALLEL"
            },
            {
                "from": 871,
                "to": 873,
                "label": "EVAL with clause\ns2(plus(X518, 0), X518).\nand substitutionT300 -> T515,\nX518 -> T515,\nT301 -> 0,\nT2 -> T515"
            },
            {
                "from": 871,
                "to": 874,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 872,
                "to": 876,
                "label": "PARALLEL"
            },
            {
                "from": 872,
                "to": 877,
                "label": "PARALLEL"
            },
            {
                "from": 873,
                "to": 875,
                "label": "SUCCESS"
            },
            {
                "from": 876,
                "to": 878,
                "label": "ONLY EVAL with clause\ns2(plus(X545, X546), X547) :- ','(s2(X545, X548), ','(s2(X546, X549), s2(plus(X548, X549), X547))).\nand substitutionT300 -> T536,\nX545 -> T536,\nT301 -> T537,\nX546 -> T537,\nT2 -> T539,\nX547 -> T539,\nT538 -> T539"
            },
            {
                "from": 877,
                "to": 881,
                "label": "ONLY EVAL with clause\ns2(plus(X588, X589), X590) :- ','(isNat(X588), ','(isNat(X589), add(X588, X589, X590))).\nand substitutionT300 -> T566,\nX588 -> T566,\nT301 -> T567,\nX589 -> T567,\nT2 -> T569,\nX590 -> T569,\nT568 -> T569"
            },
            {
                "from": 878,
                "to": 879,
                "label": "SPLIT 1"
            },
            {
                "from": 878,
                "to": 880,
                "label": "SPLIT 2\nnew knowledge:\nT536 is ground\nT543 is ground\nreplacements:X548 -> T543"
            },
            {
                "from": 879,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T536\nT2 -> X548"
            },
            {
                "from": 880,
                "to": 487,
                "label": "INSTANCE with matching:\nT115 -> T537\nX95 -> X549\nT121 -> T543\nT117 -> T539"
            },
            {
                "from": 881,
                "to": 882,
                "label": "SPLIT 1"
            },
            {
                "from": 881,
                "to": 883,
                "label": "SPLIT 2\nnew knowledge:\nT566 is ground"
            },
            {
                "from": 882,
                "to": 498,
                "label": "INSTANCE with matching:\nT156 -> T566"
            },
            {
                "from": 883,
                "to": 884,
                "label": "SPLIT 1"
            },
            {
                "from": 883,
                "to": 885,
                "label": "SPLIT 2\nnew knowledge:\nT567 is ground"
            },
            {
                "from": 884,
                "to": 498,
                "label": "INSTANCE with matching:\nT156 -> T567"
            },
            {
                "from": 885,
                "to": 794,
                "label": "INSTANCE with matching:\nT479 -> T566\nT480 -> T567\nT482 -> T569"
            },
            {
                "from": 886,
                "to": 887,
                "label": "BACKTRACK\nfor clause: s2(plus(X, Y), Z) :- ','(s2(X, A), ','(s2(Y, B), s2(plus(A, B), Z)))\nwith clash: (s2(T1, T2), s2(plus(X270, X271), X272))"
            },
            {
                "from": 887,
                "to": 888,
                "label": "BACKTRACK\nfor clause: s2(plus(A, B), C) :- ','(isNat(A), ','(isNat(B), add(A, B, C)))\nwith clash: (s2(T1, T2), s2(plus(X270, X271), X272))"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(148)
Obligation:
Triples:

isNatD(s(X1)) :- isNatD(X1).
pB(X1, X2, X3, X4) :- s2A(X1, X2).
pB(X1, X2, X3, X4) :- ','(s2cA(X1, X2), s2A(plus(X3, X2), X4)).
addC(s(X1), X2, X3, s(X4)) :- addC(X1, X2, X3, X4).
addF(s(X1), X2, s(X3)) :- addF(X1, X2, X3).
s2A(plus(X1, plus(X2, plus(X3, X4))), X5) :- s2A(plus(plus(plus(X1, X2), X3), X4), X5).
s2A(plus(X1, plus(X2, X3)), X4) :- s2A(plus(X3, plus(X1, X2)), X4).
s2A(plus(X1, plus(X2, X3)), X4) :- s2A(plus(X1, X2), X5).
s2A(plus(X1, plus(X2, X3)), X4) :- ','(s2cA(plus(X1, X2), X5), pB(X3, X6, X5, X4)).
s2A(plus(X1, plus(X2, X3)), X4) :- isNatE(X1, X2).
s2A(plus(X1, plus(X2, X3)), X4) :- ','(isNatcE(X1, X2), isNatD(X3)).
s2A(plus(X1, plus(X2, X3)), X4) :- s2A(plus(plus(X2, X3), X1), X4).
s2A(plus(X1, plus(X2, X3)), X4) :- s2A(X1, X5).
s2A(plus(X1, plus(X2, X3)), X4) :- ','(s2cA(X1, X5), pB(plus(X2, X3), X6, X5, X4)).
s2A(plus(X1, plus(X2, X3)), X4) :- isNatD(X1).
s2A(plus(X1, plus(X2, X3)), X4) :- ','(isNatcD(X1), isNatE(X2, X3)).
s2A(plus(X1, plus(X2, X3)), X4) :- ','(isNatcD(X1), ','(isNatcE(X2, X3), addC(X1, X2, X3, X4))).
s2A(plus(plus(X1, X2), X3), X4) :- s2A(plus(plus(X3, X1), X2), X4).
s2A(plus(X1, X2), X3) :- s2A(plus(X1, X2), X3).
s2A(plus(X1, X2), X3) :- s2A(X2, X4).
s2A(plus(X1, X2), X3) :- ','(s2cA(X2, X4), pB(X1, X5, X4, X3)).
s2A(plus(X1, X2), X3) :- isNatD(X2).
s2A(plus(X1, X2), X3) :- ','(isNatcD(X2), isNatD(X1)).
s2A(plus(X1, s(X2)), s(X3)) :- ','(isNatcD(s(X2)), ','(isNatcD(X1), addF(X2, X1, X3))).
s2A(plus(X1, X2), X3) :- s2A(X1, X4).
s2A(plus(X1, X2), X3) :- ','(s2cA(X1, X4), pB(X2, X5, X4, X3)).
s2A(plus(X1, X2), X3) :- isNatD(X1).
s2A(plus(X1, X2), X3) :- ','(isNatcD(X1), isNatD(X2)).
s2A(plus(X1, X2), X3) :- ','(isNatcD(X1), ','(isNatcD(X2), addF(X1, X2, X3))).

Clauses:

s2cA(plus(X1, plus(X2, plus(X3, X4))), X5) :- s2cA(plus(plus(plus(X1, X2), X3), X4), X5).
s2cA(plus(X1, plus(X2, X3)), X4) :- s2cA(plus(X3, plus(X1, X2)), X4).
s2cA(plus(X1, plus(X2, 0)), plus(X1, X2)).
s2cA(plus(X1, plus(X2, X3)), X4) :- ','(s2cA(plus(X1, X2), X5), qcB(X3, X6, X5, X4)).
s2cA(plus(X1, plus(X2, X3)), X4) :- s2cA(plus(plus(X2, X3), X1), X4).
s2cA(plus(X1, plus(X2, X3)), X4) :- ','(s2cA(X1, X5), qcB(plus(X2, X3), X6, X5, X4)).
s2cA(plus(X1, plus(X2, X3)), X4) :- ','(isNatcD(X1), ','(isNatcE(X2, X3), addcC(X1, X2, X3, X4))).
s2cA(plus(plus(X1, X2), X3), X4) :- s2cA(plus(plus(X3, X1), X2), X4).
s2cA(plus(X1, X2), X3) :- s2cA(plus(X1, X2), X3).
s2cA(plus(0, X1), X1).
s2cA(plus(X1, X2), X3) :- ','(s2cA(X2, X4), qcB(X1, X5, X4, X3)).
s2cA(plus(X1, s(X2)), s(X3)) :- ','(isNatcD(s(X2)), ','(isNatcD(X1), addcF(X2, X1, X3))).
s2cA(plus(X1, 0), X1) :- ','(isNatcD(0), isNatcD(X1)).
s2cA(plus(X1, 0), X1).
s2cA(plus(X1, X2), X3) :- ','(s2cA(X1, X4), qcB(X2, X5, X4, X3)).
s2cA(plus(X1, X2), X3) :- ','(isNatcD(X1), ','(isNatcD(X2), addcF(X1, X2, X3))).
isNatcD(s(X1)) :- isNatcD(X1).
isNatcD(0).
qcB(X1, X2, X3, X4) :- ','(s2cA(X1, X2), s2cA(plus(X3, X2), X4)).
addcC(s(X1), X2, X3, s(X4)) :- addcC(X1, X2, X3, X4).
addcC(0, X1, X2, plus(X1, X2)).
addcF(s(X1), X2, s(X3)) :- addcF(X1, X2, X3).
addcF(0, X1, X1).

Afs:

s2A(x1, x2)  =  s2A(x1)


----------------------------------------

(149) UndefinedPredicateInTriplesTransformerProof (SOUND)
Deleted triples and predicates having undefined goals [DT09].
----------------------------------------

(150)
Obligation:
Triples:

isNatD(s(X1)) :- isNatD(X1).
pB(X1, X2, X3, X4) :- s2A(X1, X2).
pB(X1, X2, X3, X4) :- ','(s2cA(X1, X2), s2A(plus(X3, X2), X4)).
addC(s(X1), X2, X3, s(X4)) :- addC(X1, X2, X3, X4).
addF(s(X1), X2, s(X3)) :- addF(X1, X2, X3).
s2A(plus(X1, plus(X2, plus(X3, X4))), X5) :- s2A(plus(plus(plus(X1, X2), X3), X4), X5).
s2A(plus(X1, plus(X2, X3)), X4) :- s2A(plus(X3, plus(X1, X2)), X4).
s2A(plus(X1, plus(X2, X3)), X4) :- s2A(plus(X1, X2), X5).
s2A(plus(X1, plus(X2, X3)), X4) :- ','(s2cA(plus(X1, X2), X5), pB(X3, X6, X5, X4)).
s2A(plus(X1, plus(X2, X3)), X4) :- s2A(plus(plus(X2, X3), X1), X4).
s2A(plus(X1, plus(X2, X3)), X4) :- s2A(X1, X5).
s2A(plus(X1, plus(X2, X3)), X4) :- ','(s2cA(X1, X5), pB(plus(X2, X3), X6, X5, X4)).
s2A(plus(X1, plus(X2, X3)), X4) :- isNatD(X1).
s2A(plus(plus(X1, X2), X3), X4) :- s2A(plus(plus(X3, X1), X2), X4).
s2A(plus(X1, X2), X3) :- s2A(plus(X1, X2), X3).
s2A(plus(X1, X2), X3) :- s2A(X2, X4).
s2A(plus(X1, X2), X3) :- ','(s2cA(X2, X4), pB(X1, X5, X4, X3)).
s2A(plus(X1, X2), X3) :- isNatD(X2).
s2A(plus(X1, X2), X3) :- ','(isNatcD(X2), isNatD(X1)).
s2A(plus(X1, s(X2)), s(X3)) :- ','(isNatcD(s(X2)), ','(isNatcD(X1), addF(X2, X1, X3))).
s2A(plus(X1, X2), X3) :- s2A(X1, X4).
s2A(plus(X1, X2), X3) :- ','(s2cA(X1, X4), pB(X2, X5, X4, X3)).
s2A(plus(X1, X2), X3) :- isNatD(X1).
s2A(plus(X1, X2), X3) :- ','(isNatcD(X1), isNatD(X2)).
s2A(plus(X1, X2), X3) :- ','(isNatcD(X1), ','(isNatcD(X2), addF(X1, X2, X3))).

Clauses:

s2cA(plus(X1, plus(X2, plus(X3, X4))), X5) :- s2cA(plus(plus(plus(X1, X2), X3), X4), X5).
s2cA(plus(X1, plus(X2, X3)), X4) :- s2cA(plus(X3, plus(X1, X2)), X4).
s2cA(plus(X1, plus(X2, 0)), plus(X1, X2)).
s2cA(plus(X1, plus(X2, X3)), X4) :- ','(s2cA(plus(X1, X2), X5), qcB(X3, X6, X5, X4)).
s2cA(plus(X1, plus(X2, X3)), X4) :- s2cA(plus(plus(X2, X3), X1), X4).
s2cA(plus(X1, plus(X2, X3)), X4) :- ','(s2cA(X1, X5), qcB(plus(X2, X3), X6, X5, X4)).
s2cA(plus(plus(X1, X2), X3), X4) :- s2cA(plus(plus(X3, X1), X2), X4).
s2cA(plus(X1, X2), X3) :- s2cA(plus(X1, X2), X3).
s2cA(plus(0, X1), X1).
s2cA(plus(X1, X2), X3) :- ','(s2cA(X2, X4), qcB(X1, X5, X4, X3)).
s2cA(plus(X1, s(X2)), s(X3)) :- ','(isNatcD(s(X2)), ','(isNatcD(X1), addcF(X2, X1, X3))).
s2cA(plus(X1, 0), X1) :- ','(isNatcD(0), isNatcD(X1)).
s2cA(plus(X1, 0), X1).
s2cA(plus(X1, X2), X3) :- ','(s2cA(X1, X4), qcB(X2, X5, X4, X3)).
s2cA(plus(X1, X2), X3) :- ','(isNatcD(X1), ','(isNatcD(X2), addcF(X1, X2, X3))).
isNatcD(s(X1)) :- isNatcD(X1).
isNatcD(0).
qcB(X1, X2, X3, X4) :- ','(s2cA(X1, X2), s2cA(plus(X3, X2), X4)).
addcC(s(X1), X2, X3, s(X4)) :- addcC(X1, X2, X3, X4).
addcC(0, X1, X2, plus(X1, X2)).
addcF(s(X1), X2, s(X3)) :- addcF(X1, X2, X3).
addcF(0, X1, X1).

Afs:

s2A(x1, x2)  =  s2A(x1)


----------------------------------------

(151) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

s2A_in_2: (b,f)

s2cA_in_2: (b,f)

isNatcD_in_1: (b)

addcF_in_3: (b,b,f)

qcB_in_4: (b,f,b,f)

pB_in_4: (b,f,b,f)

isNatD_in_1: (b)

addF_in_3: (b,b,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   S2A_IN_GA(plus(X1, plus(X2, plus(X3, X4))), X5) -> U7_GA(X1, X2, X3, X4, X5, s2A_in_ga(plus(plus(plus(X1, X2), X3), X4), X5))
   S2A_IN_GA(plus(X1, plus(X2, plus(X3, X4))), X5) -> S2A_IN_GA(plus(plus(plus(X1, X2), X3), X4), X5)
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> U8_GA(X1, X2, X3, X4, s2A_in_ga(plus(X3, plus(X1, X2)), X4))
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> S2A_IN_GA(plus(X3, plus(X1, X2)), X4)
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> U9_GA(X1, X2, X3, X4, s2A_in_ga(plus(X1, X2), X5))
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> S2A_IN_GA(plus(X1, X2), X5)
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> U10_GA(X1, X2, X3, X4, s2cA_in_ga(plus(X1, X2), X5))
   U10_GA(X1, X2, X3, X4, s2cA_out_ga(plus(X1, X2), X5)) -> U11_GA(X1, X2, X3, X4, pB_in_gaga(X3, X6, X5, X4))
   U10_GA(X1, X2, X3, X4, s2cA_out_ga(plus(X1, X2), X5)) -> PB_IN_GAGA(X3, X6, X5, X4)
   PB_IN_GAGA(X1, X2, X3, X4) -> U2_GAGA(X1, X2, X3, X4, s2A_in_ga(X1, X2))
   PB_IN_GAGA(X1, X2, X3, X4) -> S2A_IN_GA(X1, X2)
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> U12_GA(X1, X2, X3, X4, s2A_in_ga(plus(plus(X2, X3), X1), X4))
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> S2A_IN_GA(plus(plus(X2, X3), X1), X4)
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> U13_GA(X1, X2, X3, X4, s2A_in_ga(X1, X5))
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> S2A_IN_GA(X1, X5)
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> U14_GA(X1, X2, X3, X4, s2cA_in_ga(X1, X5))
   U14_GA(X1, X2, X3, X4, s2cA_out_ga(X1, X5)) -> U15_GA(X1, X2, X3, X4, pB_in_gaga(plus(X2, X3), X6, X5, X4))
   U14_GA(X1, X2, X3, X4, s2cA_out_ga(X1, X5)) -> PB_IN_GAGA(plus(X2, X3), X6, X5, X4)
   PB_IN_GAGA(X1, X2, X3, X4) -> U3_GAGA(X1, X2, X3, X4, s2cA_in_ga(X1, X2))
   U3_GAGA(X1, X2, X3, X4, s2cA_out_ga(X1, X2)) -> U4_GAGA(X1, X2, X3, X4, s2A_in_ga(plus(X3, X2), X4))
   U3_GAGA(X1, X2, X3, X4, s2cA_out_ga(X1, X2)) -> S2A_IN_GA(plus(X3, X2), X4)
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> U16_GA(X1, X2, X3, X4, isNatD_in_g(X1))
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> ISNATD_IN_G(X1)
   ISNATD_IN_G(s(X1)) -> U1_G(X1, isNatD_in_g(X1))
   ISNATD_IN_G(s(X1)) -> ISNATD_IN_G(X1)
   S2A_IN_GA(plus(plus(X1, X2), X3), X4) -> U17_GA(X1, X2, X3, X4, s2A_in_ga(plus(plus(X3, X1), X2), X4))
   S2A_IN_GA(plus(plus(X1, X2), X3), X4) -> S2A_IN_GA(plus(plus(X3, X1), X2), X4)
   S2A_IN_GA(plus(X1, X2), X3) -> U18_GA(X1, X2, X3, s2A_in_ga(plus(X1, X2), X3))
   S2A_IN_GA(plus(X1, X2), X3) -> S2A_IN_GA(plus(X1, X2), X3)
   S2A_IN_GA(plus(X1, X2), X3) -> U19_GA(X1, X2, X3, s2A_in_ga(X2, X4))
   S2A_IN_GA(plus(X1, X2), X3) -> S2A_IN_GA(X2, X4)
   S2A_IN_GA(plus(X1, X2), X3) -> U20_GA(X1, X2, X3, s2cA_in_ga(X2, X4))
   U20_GA(X1, X2, X3, s2cA_out_ga(X2, X4)) -> U21_GA(X1, X2, X3, pB_in_gaga(X1, X5, X4, X3))
   U20_GA(X1, X2, X3, s2cA_out_ga(X2, X4)) -> PB_IN_GAGA(X1, X5, X4, X3)
   S2A_IN_GA(plus(X1, X2), X3) -> U22_GA(X1, X2, X3, isNatD_in_g(X2))
   S2A_IN_GA(plus(X1, X2), X3) -> ISNATD_IN_G(X2)
   S2A_IN_GA(plus(X1, X2), X3) -> U23_GA(X1, X2, X3, isNatcD_in_g(X2))
   U23_GA(X1, X2, X3, isNatcD_out_g(X2)) -> U24_GA(X1, X2, X3, isNatD_in_g(X1))
   U23_GA(X1, X2, X3, isNatcD_out_g(X2)) -> ISNATD_IN_G(X1)
   S2A_IN_GA(plus(X1, s(X2)), s(X3)) -> U25_GA(X1, X2, X3, isNatcD_in_g(s(X2)))
   U25_GA(X1, X2, X3, isNatcD_out_g(s(X2))) -> U26_GA(X1, X2, X3, isNatcD_in_g(X1))
   U26_GA(X1, X2, X3, isNatcD_out_g(X1)) -> U27_GA(X1, X2, X3, addF_in_gga(X2, X1, X3))
   U26_GA(X1, X2, X3, isNatcD_out_g(X1)) -> ADDF_IN_GGA(X2, X1, X3)
   ADDF_IN_GGA(s(X1), X2, s(X3)) -> U6_GGA(X1, X2, X3, addF_in_gga(X1, X2, X3))
   ADDF_IN_GGA(s(X1), X2, s(X3)) -> ADDF_IN_GGA(X1, X2, X3)
   S2A_IN_GA(plus(X1, X2), X3) -> U28_GA(X1, X2, X3, s2A_in_ga(X1, X4))
   S2A_IN_GA(plus(X1, X2), X3) -> S2A_IN_GA(X1, X4)
   S2A_IN_GA(plus(X1, X2), X3) -> U29_GA(X1, X2, X3, s2cA_in_ga(X1, X4))
   U29_GA(X1, X2, X3, s2cA_out_ga(X1, X4)) -> U30_GA(X1, X2, X3, pB_in_gaga(X2, X5, X4, X3))
   U29_GA(X1, X2, X3, s2cA_out_ga(X1, X4)) -> PB_IN_GAGA(X2, X5, X4, X3)
   S2A_IN_GA(plus(X1, X2), X3) -> U31_GA(X1, X2, X3, isNatD_in_g(X1))
   S2A_IN_GA(plus(X1, X2), X3) -> ISNATD_IN_G(X1)
   S2A_IN_GA(plus(X1, X2), X3) -> U32_GA(X1, X2, X3, isNatcD_in_g(X1))
   U32_GA(X1, X2, X3, isNatcD_out_g(X1)) -> U33_GA(X1, X2, X3, isNatD_in_g(X2))
   U32_GA(X1, X2, X3, isNatcD_out_g(X1)) -> ISNATD_IN_G(X2)
   U32_GA(X1, X2, X3, isNatcD_out_g(X1)) -> U34_GA(X1, X2, X3, isNatcD_in_g(X2))
   U34_GA(X1, X2, X3, isNatcD_out_g(X2)) -> U35_GA(X1, X2, X3, addF_in_gga(X1, X2, X3))
   U34_GA(X1, X2, X3, isNatcD_out_g(X2)) -> ADDF_IN_GGA(X1, X2, X3)

The TRS R consists of the following rules:

   s2cA_in_ga(plus(X1, plus(X2, plus(X3, X4))), X5) -> U37_ga(X1, X2, X3, X4, X5, s2cA_in_ga(plus(plus(plus(X1, X2), X3), X4), X5))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U38_ga(X1, X2, X3, X4, s2cA_in_ga(plus(X3, plus(X1, X2)), X4))
   s2cA_in_ga(plus(X1, plus(X2, 0)), plus(X1, X2)) -> s2cA_out_ga(plus(X1, plus(X2, 0)), plus(X1, X2))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U39_ga(X1, X2, X3, X4, s2cA_in_ga(plus(X1, X2), X5))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U41_ga(X1, X2, X3, X4, s2cA_in_ga(plus(plus(X2, X3), X1), X4))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U42_ga(X1, X2, X3, X4, s2cA_in_ga(X1, X5))
   s2cA_in_ga(plus(plus(X1, X2), X3), X4) -> U44_ga(X1, X2, X3, X4, s2cA_in_ga(plus(plus(X3, X1), X2), X4))
   s2cA_in_ga(plus(X1, X2), X3) -> U45_ga(X1, X2, X3, s2cA_in_ga(plus(X1, X2), X3))
   s2cA_in_ga(plus(0, X1), X1) -> s2cA_out_ga(plus(0, X1), X1)
   s2cA_in_ga(plus(X1, X2), X3) -> U46_ga(X1, X2, X3, s2cA_in_ga(X2, X4))
   s2cA_in_ga(plus(X1, s(X2)), s(X3)) -> U48_ga(X1, X2, X3, isNatcD_in_g(s(X2)))
   isNatcD_in_g(s(X1)) -> U58_g(X1, isNatcD_in_g(X1))
   isNatcD_in_g(0) -> isNatcD_out_g(0)
   U58_g(X1, isNatcD_out_g(X1)) -> isNatcD_out_g(s(X1))
   U48_ga(X1, X2, X3, isNatcD_out_g(s(X2))) -> U49_ga(X1, X2, X3, isNatcD_in_g(X1))
   U49_ga(X1, X2, X3, isNatcD_out_g(X1)) -> U50_ga(X1, X2, X3, addcF_in_gga(X2, X1, X3))
   addcF_in_gga(s(X1), X2, s(X3)) -> U62_gga(X1, X2, X3, addcF_in_gga(X1, X2, X3))
   addcF_in_gga(0, X1, X1) -> addcF_out_gga(0, X1, X1)
   U62_gga(X1, X2, X3, addcF_out_gga(X1, X2, X3)) -> addcF_out_gga(s(X1), X2, s(X3))
   U50_ga(X1, X2, X3, addcF_out_gga(X2, X1, X3)) -> s2cA_out_ga(plus(X1, s(X2)), s(X3))
   s2cA_in_ga(plus(X1, 0), X1) -> U51_ga(X1, isNatcD_in_g(0))
   U51_ga(X1, isNatcD_out_g(0)) -> U52_ga(X1, isNatcD_in_g(X1))
   U52_ga(X1, isNatcD_out_g(X1)) -> s2cA_out_ga(plus(X1, 0), X1)
   s2cA_in_ga(plus(X1, 0), X1) -> s2cA_out_ga(plus(X1, 0), X1)
   s2cA_in_ga(plus(X1, X2), X3) -> U53_ga(X1, X2, X3, s2cA_in_ga(X1, X4))
   s2cA_in_ga(plus(X1, X2), X3) -> U55_ga(X1, X2, X3, isNatcD_in_g(X1))
   U55_ga(X1, X2, X3, isNatcD_out_g(X1)) -> U56_ga(X1, X2, X3, isNatcD_in_g(X2))
   U56_ga(X1, X2, X3, isNatcD_out_g(X2)) -> U57_ga(X1, X2, X3, addcF_in_gga(X1, X2, X3))
   U57_ga(X1, X2, X3, addcF_out_gga(X1, X2, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U53_ga(X1, X2, X3, s2cA_out_ga(X1, X4)) -> U54_ga(X1, X2, X3, qcB_in_gaga(X2, X5, X4, X3))
   qcB_in_gaga(X1, X2, X3, X4) -> U59_gaga(X1, X2, X3, X4, s2cA_in_ga(X1, X2))
   U59_gaga(X1, X2, X3, X4, s2cA_out_ga(X1, X2)) -> U60_gaga(X1, X2, X3, X4, s2cA_in_ga(plus(X3, X2), X4))
   U60_gaga(X1, X2, X3, X4, s2cA_out_ga(plus(X3, X2), X4)) -> qcB_out_gaga(X1, X2, X3, X4)
   U54_ga(X1, X2, X3, qcB_out_gaga(X2, X5, X4, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U46_ga(X1, X2, X3, s2cA_out_ga(X2, X4)) -> U47_ga(X1, X2, X3, qcB_in_gaga(X1, X5, X4, X3))
   U47_ga(X1, X2, X3, qcB_out_gaga(X1, X5, X4, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U45_ga(X1, X2, X3, s2cA_out_ga(plus(X1, X2), X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U44_ga(X1, X2, X3, X4, s2cA_out_ga(plus(plus(X3, X1), X2), X4)) -> s2cA_out_ga(plus(plus(X1, X2), X3), X4)
   U42_ga(X1, X2, X3, X4, s2cA_out_ga(X1, X5)) -> U43_ga(X1, X2, X3, X4, qcB_in_gaga(plus(X2, X3), X6, X5, X4))
   U43_ga(X1, X2, X3, X4, qcB_out_gaga(plus(X2, X3), X6, X5, X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U41_ga(X1, X2, X3, X4, s2cA_out_ga(plus(plus(X2, X3), X1), X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U39_ga(X1, X2, X3, X4, s2cA_out_ga(plus(X1, X2), X5)) -> U40_ga(X1, X2, X3, X4, qcB_in_gaga(X3, X6, X5, X4))
   U40_ga(X1, X2, X3, X4, qcB_out_gaga(X3, X6, X5, X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U38_ga(X1, X2, X3, X4, s2cA_out_ga(plus(X3, plus(X1, X2)), X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U37_ga(X1, X2, X3, X4, X5, s2cA_out_ga(plus(plus(plus(X1, X2), X3), X4), X5)) -> s2cA_out_ga(plus(X1, plus(X2, plus(X3, X4))), X5)

The argument filtering Pi contains the following mapping:
s2A_in_ga(x1, x2)  =  s2A_in_ga(x1)

plus(x1, x2)  =  plus(x1, x2)

s2cA_in_ga(x1, x2)  =  s2cA_in_ga(x1)

U37_ga(x1, x2, x3, x4, x5, x6)  =  U37_ga(x1, x2, x3, x4, x6)

U38_ga(x1, x2, x3, x4, x5)  =  U38_ga(x1, x2, x3, x5)

0  =  0

s2cA_out_ga(x1, x2)  =  s2cA_out_ga(x1, x2)

U39_ga(x1, x2, x3, x4, x5)  =  U39_ga(x1, x2, x3, x5)

U41_ga(x1, x2, x3, x4, x5)  =  U41_ga(x1, x2, x3, x5)

U42_ga(x1, x2, x3, x4, x5)  =  U42_ga(x1, x2, x3, x5)

U44_ga(x1, x2, x3, x4, x5)  =  U44_ga(x1, x2, x3, x5)

U45_ga(x1, x2, x3, x4)  =  U45_ga(x1, x2, x4)

U46_ga(x1, x2, x3, x4)  =  U46_ga(x1, x2, x4)

s(x1)  =  s(x1)

U48_ga(x1, x2, x3, x4)  =  U48_ga(x1, x2, x4)

isNatcD_in_g(x1)  =  isNatcD_in_g(x1)

U58_g(x1, x2)  =  U58_g(x1, x2)

isNatcD_out_g(x1)  =  isNatcD_out_g(x1)

U49_ga(x1, x2, x3, x4)  =  U49_ga(x1, x2, x4)

U50_ga(x1, x2, x3, x4)  =  U50_ga(x1, x2, x4)

addcF_in_gga(x1, x2, x3)  =  addcF_in_gga(x1, x2)

U62_gga(x1, x2, x3, x4)  =  U62_gga(x1, x2, x4)

addcF_out_gga(x1, x2, x3)  =  addcF_out_gga(x1, x2, x3)

U51_ga(x1, x2)  =  U51_ga(x1, x2)

U52_ga(x1, x2)  =  U52_ga(x1, x2)

U53_ga(x1, x2, x3, x4)  =  U53_ga(x1, x2, x4)

U55_ga(x1, x2, x3, x4)  =  U55_ga(x1, x2, x4)

U56_ga(x1, x2, x3, x4)  =  U56_ga(x1, x2, x4)

U57_ga(x1, x2, x3, x4)  =  U57_ga(x1, x2, x4)

U54_ga(x1, x2, x3, x4)  =  U54_ga(x1, x2, x4)

qcB_in_gaga(x1, x2, x3, x4)  =  qcB_in_gaga(x1, x3)

U59_gaga(x1, x2, x3, x4, x5)  =  U59_gaga(x1, x3, x5)

U60_gaga(x1, x2, x3, x4, x5)  =  U60_gaga(x1, x2, x3, x5)

qcB_out_gaga(x1, x2, x3, x4)  =  qcB_out_gaga(x1, x2, x3, x4)

U47_ga(x1, x2, x3, x4)  =  U47_ga(x1, x2, x4)

U43_ga(x1, x2, x3, x4, x5)  =  U43_ga(x1, x2, x3, x5)

U40_ga(x1, x2, x3, x4, x5)  =  U40_ga(x1, x2, x3, x5)

pB_in_gaga(x1, x2, x3, x4)  =  pB_in_gaga(x1, x3)

isNatD_in_g(x1)  =  isNatD_in_g(x1)

addF_in_gga(x1, x2, x3)  =  addF_in_gga(x1, x2)

S2A_IN_GA(x1, x2)  =  S2A_IN_GA(x1)

U7_GA(x1, x2, x3, x4, x5, x6)  =  U7_GA(x1, x2, x3, x4, x6)

U8_GA(x1, x2, x3, x4, x5)  =  U8_GA(x1, x2, x3, x5)

U9_GA(x1, x2, x3, x4, x5)  =  U9_GA(x1, x2, x3, x5)

U10_GA(x1, x2, x3, x4, x5)  =  U10_GA(x1, x2, x3, x5)

U11_GA(x1, x2, x3, x4, x5)  =  U11_GA(x1, x2, x3, x5)

PB_IN_GAGA(x1, x2, x3, x4)  =  PB_IN_GAGA(x1, x3)

U2_GAGA(x1, x2, x3, x4, x5)  =  U2_GAGA(x1, x3, x5)

U12_GA(x1, x2, x3, x4, x5)  =  U12_GA(x1, x2, x3, x5)

U13_GA(x1, x2, x3, x4, x5)  =  U13_GA(x1, x2, x3, x5)

U14_GA(x1, x2, x3, x4, x5)  =  U14_GA(x1, x2, x3, x5)

U15_GA(x1, x2, x3, x4, x5)  =  U15_GA(x1, x2, x3, x5)

U3_GAGA(x1, x2, x3, x4, x5)  =  U3_GAGA(x1, x3, x5)

U4_GAGA(x1, x2, x3, x4, x5)  =  U4_GAGA(x1, x3, x5)

U16_GA(x1, x2, x3, x4, x5)  =  U16_GA(x1, x2, x3, x5)

ISNATD_IN_G(x1)  =  ISNATD_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x1, x2)

U17_GA(x1, x2, x3, x4, x5)  =  U17_GA(x1, x2, x3, x5)

U18_GA(x1, x2, x3, x4)  =  U18_GA(x1, x2, x4)

U19_GA(x1, x2, x3, x4)  =  U19_GA(x1, x2, x4)

U20_GA(x1, x2, x3, x4)  =  U20_GA(x1, x2, x4)

U21_GA(x1, x2, x3, x4)  =  U21_GA(x1, x2, x4)

U22_GA(x1, x2, x3, x4)  =  U22_GA(x1, x2, x4)

U23_GA(x1, x2, x3, x4)  =  U23_GA(x1, x2, x4)

U24_GA(x1, x2, x3, x4)  =  U24_GA(x1, x2, x4)

U25_GA(x1, x2, x3, x4)  =  U25_GA(x1, x2, x4)

U26_GA(x1, x2, x3, x4)  =  U26_GA(x1, x2, x4)

U27_GA(x1, x2, x3, x4)  =  U27_GA(x1, x2, x4)

ADDF_IN_GGA(x1, x2, x3)  =  ADDF_IN_GGA(x1, x2)

U6_GGA(x1, x2, x3, x4)  =  U6_GGA(x1, x2, x4)

U28_GA(x1, x2, x3, x4)  =  U28_GA(x1, x2, x4)

U29_GA(x1, x2, x3, x4)  =  U29_GA(x1, x2, x4)

U30_GA(x1, x2, x3, x4)  =  U30_GA(x1, x2, x4)

U31_GA(x1, x2, x3, x4)  =  U31_GA(x1, x2, x4)

U32_GA(x1, x2, x3, x4)  =  U32_GA(x1, x2, x4)

U33_GA(x1, x2, x3, x4)  =  U33_GA(x1, x2, x4)

U34_GA(x1, x2, x3, x4)  =  U34_GA(x1, x2, x4)

U35_GA(x1, x2, x3, x4)  =  U35_GA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(152)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   S2A_IN_GA(plus(X1, plus(X2, plus(X3, X4))), X5) -> U7_GA(X1, X2, X3, X4, X5, s2A_in_ga(plus(plus(plus(X1, X2), X3), X4), X5))
   S2A_IN_GA(plus(X1, plus(X2, plus(X3, X4))), X5) -> S2A_IN_GA(plus(plus(plus(X1, X2), X3), X4), X5)
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> U8_GA(X1, X2, X3, X4, s2A_in_ga(plus(X3, plus(X1, X2)), X4))
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> S2A_IN_GA(plus(X3, plus(X1, X2)), X4)
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> U9_GA(X1, X2, X3, X4, s2A_in_ga(plus(X1, X2), X5))
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> S2A_IN_GA(plus(X1, X2), X5)
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> U10_GA(X1, X2, X3, X4, s2cA_in_ga(plus(X1, X2), X5))
   U10_GA(X1, X2, X3, X4, s2cA_out_ga(plus(X1, X2), X5)) -> U11_GA(X1, X2, X3, X4, pB_in_gaga(X3, X6, X5, X4))
   U10_GA(X1, X2, X3, X4, s2cA_out_ga(plus(X1, X2), X5)) -> PB_IN_GAGA(X3, X6, X5, X4)
   PB_IN_GAGA(X1, X2, X3, X4) -> U2_GAGA(X1, X2, X3, X4, s2A_in_ga(X1, X2))
   PB_IN_GAGA(X1, X2, X3, X4) -> S2A_IN_GA(X1, X2)
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> U12_GA(X1, X2, X3, X4, s2A_in_ga(plus(plus(X2, X3), X1), X4))
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> S2A_IN_GA(plus(plus(X2, X3), X1), X4)
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> U13_GA(X1, X2, X3, X4, s2A_in_ga(X1, X5))
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> S2A_IN_GA(X1, X5)
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> U14_GA(X1, X2, X3, X4, s2cA_in_ga(X1, X5))
   U14_GA(X1, X2, X3, X4, s2cA_out_ga(X1, X5)) -> U15_GA(X1, X2, X3, X4, pB_in_gaga(plus(X2, X3), X6, X5, X4))
   U14_GA(X1, X2, X3, X4, s2cA_out_ga(X1, X5)) -> PB_IN_GAGA(plus(X2, X3), X6, X5, X4)
   PB_IN_GAGA(X1, X2, X3, X4) -> U3_GAGA(X1, X2, X3, X4, s2cA_in_ga(X1, X2))
   U3_GAGA(X1, X2, X3, X4, s2cA_out_ga(X1, X2)) -> U4_GAGA(X1, X2, X3, X4, s2A_in_ga(plus(X3, X2), X4))
   U3_GAGA(X1, X2, X3, X4, s2cA_out_ga(X1, X2)) -> S2A_IN_GA(plus(X3, X2), X4)
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> U16_GA(X1, X2, X3, X4, isNatD_in_g(X1))
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> ISNATD_IN_G(X1)
   ISNATD_IN_G(s(X1)) -> U1_G(X1, isNatD_in_g(X1))
   ISNATD_IN_G(s(X1)) -> ISNATD_IN_G(X1)
   S2A_IN_GA(plus(plus(X1, X2), X3), X4) -> U17_GA(X1, X2, X3, X4, s2A_in_ga(plus(plus(X3, X1), X2), X4))
   S2A_IN_GA(plus(plus(X1, X2), X3), X4) -> S2A_IN_GA(plus(plus(X3, X1), X2), X4)
   S2A_IN_GA(plus(X1, X2), X3) -> U18_GA(X1, X2, X3, s2A_in_ga(plus(X1, X2), X3))
   S2A_IN_GA(plus(X1, X2), X3) -> S2A_IN_GA(plus(X1, X2), X3)
   S2A_IN_GA(plus(X1, X2), X3) -> U19_GA(X1, X2, X3, s2A_in_ga(X2, X4))
   S2A_IN_GA(plus(X1, X2), X3) -> S2A_IN_GA(X2, X4)
   S2A_IN_GA(plus(X1, X2), X3) -> U20_GA(X1, X2, X3, s2cA_in_ga(X2, X4))
   U20_GA(X1, X2, X3, s2cA_out_ga(X2, X4)) -> U21_GA(X1, X2, X3, pB_in_gaga(X1, X5, X4, X3))
   U20_GA(X1, X2, X3, s2cA_out_ga(X2, X4)) -> PB_IN_GAGA(X1, X5, X4, X3)
   S2A_IN_GA(plus(X1, X2), X3) -> U22_GA(X1, X2, X3, isNatD_in_g(X2))
   S2A_IN_GA(plus(X1, X2), X3) -> ISNATD_IN_G(X2)
   S2A_IN_GA(plus(X1, X2), X3) -> U23_GA(X1, X2, X3, isNatcD_in_g(X2))
   U23_GA(X1, X2, X3, isNatcD_out_g(X2)) -> U24_GA(X1, X2, X3, isNatD_in_g(X1))
   U23_GA(X1, X2, X3, isNatcD_out_g(X2)) -> ISNATD_IN_G(X1)
   S2A_IN_GA(plus(X1, s(X2)), s(X3)) -> U25_GA(X1, X2, X3, isNatcD_in_g(s(X2)))
   U25_GA(X1, X2, X3, isNatcD_out_g(s(X2))) -> U26_GA(X1, X2, X3, isNatcD_in_g(X1))
   U26_GA(X1, X2, X3, isNatcD_out_g(X1)) -> U27_GA(X1, X2, X3, addF_in_gga(X2, X1, X3))
   U26_GA(X1, X2, X3, isNatcD_out_g(X1)) -> ADDF_IN_GGA(X2, X1, X3)
   ADDF_IN_GGA(s(X1), X2, s(X3)) -> U6_GGA(X1, X2, X3, addF_in_gga(X1, X2, X3))
   ADDF_IN_GGA(s(X1), X2, s(X3)) -> ADDF_IN_GGA(X1, X2, X3)
   S2A_IN_GA(plus(X1, X2), X3) -> U28_GA(X1, X2, X3, s2A_in_ga(X1, X4))
   S2A_IN_GA(plus(X1, X2), X3) -> S2A_IN_GA(X1, X4)
   S2A_IN_GA(plus(X1, X2), X3) -> U29_GA(X1, X2, X3, s2cA_in_ga(X1, X4))
   U29_GA(X1, X2, X3, s2cA_out_ga(X1, X4)) -> U30_GA(X1, X2, X3, pB_in_gaga(X2, X5, X4, X3))
   U29_GA(X1, X2, X3, s2cA_out_ga(X1, X4)) -> PB_IN_GAGA(X2, X5, X4, X3)
   S2A_IN_GA(plus(X1, X2), X3) -> U31_GA(X1, X2, X3, isNatD_in_g(X1))
   S2A_IN_GA(plus(X1, X2), X3) -> ISNATD_IN_G(X1)
   S2A_IN_GA(plus(X1, X2), X3) -> U32_GA(X1, X2, X3, isNatcD_in_g(X1))
   U32_GA(X1, X2, X3, isNatcD_out_g(X1)) -> U33_GA(X1, X2, X3, isNatD_in_g(X2))
   U32_GA(X1, X2, X3, isNatcD_out_g(X1)) -> ISNATD_IN_G(X2)
   U32_GA(X1, X2, X3, isNatcD_out_g(X1)) -> U34_GA(X1, X2, X3, isNatcD_in_g(X2))
   U34_GA(X1, X2, X3, isNatcD_out_g(X2)) -> U35_GA(X1, X2, X3, addF_in_gga(X1, X2, X3))
   U34_GA(X1, X2, X3, isNatcD_out_g(X2)) -> ADDF_IN_GGA(X1, X2, X3)

The TRS R consists of the following rules:

   s2cA_in_ga(plus(X1, plus(X2, plus(X3, X4))), X5) -> U37_ga(X1, X2, X3, X4, X5, s2cA_in_ga(plus(plus(plus(X1, X2), X3), X4), X5))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U38_ga(X1, X2, X3, X4, s2cA_in_ga(plus(X3, plus(X1, X2)), X4))
   s2cA_in_ga(plus(X1, plus(X2, 0)), plus(X1, X2)) -> s2cA_out_ga(plus(X1, plus(X2, 0)), plus(X1, X2))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U39_ga(X1, X2, X3, X4, s2cA_in_ga(plus(X1, X2), X5))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U41_ga(X1, X2, X3, X4, s2cA_in_ga(plus(plus(X2, X3), X1), X4))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U42_ga(X1, X2, X3, X4, s2cA_in_ga(X1, X5))
   s2cA_in_ga(plus(plus(X1, X2), X3), X4) -> U44_ga(X1, X2, X3, X4, s2cA_in_ga(plus(plus(X3, X1), X2), X4))
   s2cA_in_ga(plus(X1, X2), X3) -> U45_ga(X1, X2, X3, s2cA_in_ga(plus(X1, X2), X3))
   s2cA_in_ga(plus(0, X1), X1) -> s2cA_out_ga(plus(0, X1), X1)
   s2cA_in_ga(plus(X1, X2), X3) -> U46_ga(X1, X2, X3, s2cA_in_ga(X2, X4))
   s2cA_in_ga(plus(X1, s(X2)), s(X3)) -> U48_ga(X1, X2, X3, isNatcD_in_g(s(X2)))
   isNatcD_in_g(s(X1)) -> U58_g(X1, isNatcD_in_g(X1))
   isNatcD_in_g(0) -> isNatcD_out_g(0)
   U58_g(X1, isNatcD_out_g(X1)) -> isNatcD_out_g(s(X1))
   U48_ga(X1, X2, X3, isNatcD_out_g(s(X2))) -> U49_ga(X1, X2, X3, isNatcD_in_g(X1))
   U49_ga(X1, X2, X3, isNatcD_out_g(X1)) -> U50_ga(X1, X2, X3, addcF_in_gga(X2, X1, X3))
   addcF_in_gga(s(X1), X2, s(X3)) -> U62_gga(X1, X2, X3, addcF_in_gga(X1, X2, X3))
   addcF_in_gga(0, X1, X1) -> addcF_out_gga(0, X1, X1)
   U62_gga(X1, X2, X3, addcF_out_gga(X1, X2, X3)) -> addcF_out_gga(s(X1), X2, s(X3))
   U50_ga(X1, X2, X3, addcF_out_gga(X2, X1, X3)) -> s2cA_out_ga(plus(X1, s(X2)), s(X3))
   s2cA_in_ga(plus(X1, 0), X1) -> U51_ga(X1, isNatcD_in_g(0))
   U51_ga(X1, isNatcD_out_g(0)) -> U52_ga(X1, isNatcD_in_g(X1))
   U52_ga(X1, isNatcD_out_g(X1)) -> s2cA_out_ga(plus(X1, 0), X1)
   s2cA_in_ga(plus(X1, 0), X1) -> s2cA_out_ga(plus(X1, 0), X1)
   s2cA_in_ga(plus(X1, X2), X3) -> U53_ga(X1, X2, X3, s2cA_in_ga(X1, X4))
   s2cA_in_ga(plus(X1, X2), X3) -> U55_ga(X1, X2, X3, isNatcD_in_g(X1))
   U55_ga(X1, X2, X3, isNatcD_out_g(X1)) -> U56_ga(X1, X2, X3, isNatcD_in_g(X2))
   U56_ga(X1, X2, X3, isNatcD_out_g(X2)) -> U57_ga(X1, X2, X3, addcF_in_gga(X1, X2, X3))
   U57_ga(X1, X2, X3, addcF_out_gga(X1, X2, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U53_ga(X1, X2, X3, s2cA_out_ga(X1, X4)) -> U54_ga(X1, X2, X3, qcB_in_gaga(X2, X5, X4, X3))
   qcB_in_gaga(X1, X2, X3, X4) -> U59_gaga(X1, X2, X3, X4, s2cA_in_ga(X1, X2))
   U59_gaga(X1, X2, X3, X4, s2cA_out_ga(X1, X2)) -> U60_gaga(X1, X2, X3, X4, s2cA_in_ga(plus(X3, X2), X4))
   U60_gaga(X1, X2, X3, X4, s2cA_out_ga(plus(X3, X2), X4)) -> qcB_out_gaga(X1, X2, X3, X4)
   U54_ga(X1, X2, X3, qcB_out_gaga(X2, X5, X4, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U46_ga(X1, X2, X3, s2cA_out_ga(X2, X4)) -> U47_ga(X1, X2, X3, qcB_in_gaga(X1, X5, X4, X3))
   U47_ga(X1, X2, X3, qcB_out_gaga(X1, X5, X4, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U45_ga(X1, X2, X3, s2cA_out_ga(plus(X1, X2), X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U44_ga(X1, X2, X3, X4, s2cA_out_ga(plus(plus(X3, X1), X2), X4)) -> s2cA_out_ga(plus(plus(X1, X2), X3), X4)
   U42_ga(X1, X2, X3, X4, s2cA_out_ga(X1, X5)) -> U43_ga(X1, X2, X3, X4, qcB_in_gaga(plus(X2, X3), X6, X5, X4))
   U43_ga(X1, X2, X3, X4, qcB_out_gaga(plus(X2, X3), X6, X5, X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U41_ga(X1, X2, X3, X4, s2cA_out_ga(plus(plus(X2, X3), X1), X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U39_ga(X1, X2, X3, X4, s2cA_out_ga(plus(X1, X2), X5)) -> U40_ga(X1, X2, X3, X4, qcB_in_gaga(X3, X6, X5, X4))
   U40_ga(X1, X2, X3, X4, qcB_out_gaga(X3, X6, X5, X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U38_ga(X1, X2, X3, X4, s2cA_out_ga(plus(X3, plus(X1, X2)), X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U37_ga(X1, X2, X3, X4, X5, s2cA_out_ga(plus(plus(plus(X1, X2), X3), X4), X5)) -> s2cA_out_ga(plus(X1, plus(X2, plus(X3, X4))), X5)

The argument filtering Pi contains the following mapping:
s2A_in_ga(x1, x2)  =  s2A_in_ga(x1)

plus(x1, x2)  =  plus(x1, x2)

s2cA_in_ga(x1, x2)  =  s2cA_in_ga(x1)

U37_ga(x1, x2, x3, x4, x5, x6)  =  U37_ga(x1, x2, x3, x4, x6)

U38_ga(x1, x2, x3, x4, x5)  =  U38_ga(x1, x2, x3, x5)

0  =  0

s2cA_out_ga(x1, x2)  =  s2cA_out_ga(x1, x2)

U39_ga(x1, x2, x3, x4, x5)  =  U39_ga(x1, x2, x3, x5)

U41_ga(x1, x2, x3, x4, x5)  =  U41_ga(x1, x2, x3, x5)

U42_ga(x1, x2, x3, x4, x5)  =  U42_ga(x1, x2, x3, x5)

U44_ga(x1, x2, x3, x4, x5)  =  U44_ga(x1, x2, x3, x5)

U45_ga(x1, x2, x3, x4)  =  U45_ga(x1, x2, x4)

U46_ga(x1, x2, x3, x4)  =  U46_ga(x1, x2, x4)

s(x1)  =  s(x1)

U48_ga(x1, x2, x3, x4)  =  U48_ga(x1, x2, x4)

isNatcD_in_g(x1)  =  isNatcD_in_g(x1)

U58_g(x1, x2)  =  U58_g(x1, x2)

isNatcD_out_g(x1)  =  isNatcD_out_g(x1)

U49_ga(x1, x2, x3, x4)  =  U49_ga(x1, x2, x4)

U50_ga(x1, x2, x3, x4)  =  U50_ga(x1, x2, x4)

addcF_in_gga(x1, x2, x3)  =  addcF_in_gga(x1, x2)

U62_gga(x1, x2, x3, x4)  =  U62_gga(x1, x2, x4)

addcF_out_gga(x1, x2, x3)  =  addcF_out_gga(x1, x2, x3)

U51_ga(x1, x2)  =  U51_ga(x1, x2)

U52_ga(x1, x2)  =  U52_ga(x1, x2)

U53_ga(x1, x2, x3, x4)  =  U53_ga(x1, x2, x4)

U55_ga(x1, x2, x3, x4)  =  U55_ga(x1, x2, x4)

U56_ga(x1, x2, x3, x4)  =  U56_ga(x1, x2, x4)

U57_ga(x1, x2, x3, x4)  =  U57_ga(x1, x2, x4)

U54_ga(x1, x2, x3, x4)  =  U54_ga(x1, x2, x4)

qcB_in_gaga(x1, x2, x3, x4)  =  qcB_in_gaga(x1, x3)

U59_gaga(x1, x2, x3, x4, x5)  =  U59_gaga(x1, x3, x5)

U60_gaga(x1, x2, x3, x4, x5)  =  U60_gaga(x1, x2, x3, x5)

qcB_out_gaga(x1, x2, x3, x4)  =  qcB_out_gaga(x1, x2, x3, x4)

U47_ga(x1, x2, x3, x4)  =  U47_ga(x1, x2, x4)

U43_ga(x1, x2, x3, x4, x5)  =  U43_ga(x1, x2, x3, x5)

U40_ga(x1, x2, x3, x4, x5)  =  U40_ga(x1, x2, x3, x5)

pB_in_gaga(x1, x2, x3, x4)  =  pB_in_gaga(x1, x3)

isNatD_in_g(x1)  =  isNatD_in_g(x1)

addF_in_gga(x1, x2, x3)  =  addF_in_gga(x1, x2)

S2A_IN_GA(x1, x2)  =  S2A_IN_GA(x1)

U7_GA(x1, x2, x3, x4, x5, x6)  =  U7_GA(x1, x2, x3, x4, x6)

U8_GA(x1, x2, x3, x4, x5)  =  U8_GA(x1, x2, x3, x5)

U9_GA(x1, x2, x3, x4, x5)  =  U9_GA(x1, x2, x3, x5)

U10_GA(x1, x2, x3, x4, x5)  =  U10_GA(x1, x2, x3, x5)

U11_GA(x1, x2, x3, x4, x5)  =  U11_GA(x1, x2, x3, x5)

PB_IN_GAGA(x1, x2, x3, x4)  =  PB_IN_GAGA(x1, x3)

U2_GAGA(x1, x2, x3, x4, x5)  =  U2_GAGA(x1, x3, x5)

U12_GA(x1, x2, x3, x4, x5)  =  U12_GA(x1, x2, x3, x5)

U13_GA(x1, x2, x3, x4, x5)  =  U13_GA(x1, x2, x3, x5)

U14_GA(x1, x2, x3, x4, x5)  =  U14_GA(x1, x2, x3, x5)

U15_GA(x1, x2, x3, x4, x5)  =  U15_GA(x1, x2, x3, x5)

U3_GAGA(x1, x2, x3, x4, x5)  =  U3_GAGA(x1, x3, x5)

U4_GAGA(x1, x2, x3, x4, x5)  =  U4_GAGA(x1, x3, x5)

U16_GA(x1, x2, x3, x4, x5)  =  U16_GA(x1, x2, x3, x5)

ISNATD_IN_G(x1)  =  ISNATD_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x1, x2)

U17_GA(x1, x2, x3, x4, x5)  =  U17_GA(x1, x2, x3, x5)

U18_GA(x1, x2, x3, x4)  =  U18_GA(x1, x2, x4)

U19_GA(x1, x2, x3, x4)  =  U19_GA(x1, x2, x4)

U20_GA(x1, x2, x3, x4)  =  U20_GA(x1, x2, x4)

U21_GA(x1, x2, x3, x4)  =  U21_GA(x1, x2, x4)

U22_GA(x1, x2, x3, x4)  =  U22_GA(x1, x2, x4)

U23_GA(x1, x2, x3, x4)  =  U23_GA(x1, x2, x4)

U24_GA(x1, x2, x3, x4)  =  U24_GA(x1, x2, x4)

U25_GA(x1, x2, x3, x4)  =  U25_GA(x1, x2, x4)

U26_GA(x1, x2, x3, x4)  =  U26_GA(x1, x2, x4)

U27_GA(x1, x2, x3, x4)  =  U27_GA(x1, x2, x4)

ADDF_IN_GGA(x1, x2, x3)  =  ADDF_IN_GGA(x1, x2)

U6_GGA(x1, x2, x3, x4)  =  U6_GGA(x1, x2, x4)

U28_GA(x1, x2, x3, x4)  =  U28_GA(x1, x2, x4)

U29_GA(x1, x2, x3, x4)  =  U29_GA(x1, x2, x4)

U30_GA(x1, x2, x3, x4)  =  U30_GA(x1, x2, x4)

U31_GA(x1, x2, x3, x4)  =  U31_GA(x1, x2, x4)

U32_GA(x1, x2, x3, x4)  =  U32_GA(x1, x2, x4)

U33_GA(x1, x2, x3, x4)  =  U33_GA(x1, x2, x4)

U34_GA(x1, x2, x3, x4)  =  U34_GA(x1, x2, x4)

U35_GA(x1, x2, x3, x4)  =  U35_GA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(153) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 36 less nodes.
----------------------------------------

(154)
Complex Obligation (AND)

----------------------------------------

(155)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ADDF_IN_GGA(s(X1), X2, s(X3)) -> ADDF_IN_GGA(X1, X2, X3)

The TRS R consists of the following rules:

   s2cA_in_ga(plus(X1, plus(X2, plus(X3, X4))), X5) -> U37_ga(X1, X2, X3, X4, X5, s2cA_in_ga(plus(plus(plus(X1, X2), X3), X4), X5))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U38_ga(X1, X2, X3, X4, s2cA_in_ga(plus(X3, plus(X1, X2)), X4))
   s2cA_in_ga(plus(X1, plus(X2, 0)), plus(X1, X2)) -> s2cA_out_ga(plus(X1, plus(X2, 0)), plus(X1, X2))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U39_ga(X1, X2, X3, X4, s2cA_in_ga(plus(X1, X2), X5))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U41_ga(X1, X2, X3, X4, s2cA_in_ga(plus(plus(X2, X3), X1), X4))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U42_ga(X1, X2, X3, X4, s2cA_in_ga(X1, X5))
   s2cA_in_ga(plus(plus(X1, X2), X3), X4) -> U44_ga(X1, X2, X3, X4, s2cA_in_ga(plus(plus(X3, X1), X2), X4))
   s2cA_in_ga(plus(X1, X2), X3) -> U45_ga(X1, X2, X3, s2cA_in_ga(plus(X1, X2), X3))
   s2cA_in_ga(plus(0, X1), X1) -> s2cA_out_ga(plus(0, X1), X1)
   s2cA_in_ga(plus(X1, X2), X3) -> U46_ga(X1, X2, X3, s2cA_in_ga(X2, X4))
   s2cA_in_ga(plus(X1, s(X2)), s(X3)) -> U48_ga(X1, X2, X3, isNatcD_in_g(s(X2)))
   isNatcD_in_g(s(X1)) -> U58_g(X1, isNatcD_in_g(X1))
   isNatcD_in_g(0) -> isNatcD_out_g(0)
   U58_g(X1, isNatcD_out_g(X1)) -> isNatcD_out_g(s(X1))
   U48_ga(X1, X2, X3, isNatcD_out_g(s(X2))) -> U49_ga(X1, X2, X3, isNatcD_in_g(X1))
   U49_ga(X1, X2, X3, isNatcD_out_g(X1)) -> U50_ga(X1, X2, X3, addcF_in_gga(X2, X1, X3))
   addcF_in_gga(s(X1), X2, s(X3)) -> U62_gga(X1, X2, X3, addcF_in_gga(X1, X2, X3))
   addcF_in_gga(0, X1, X1) -> addcF_out_gga(0, X1, X1)
   U62_gga(X1, X2, X3, addcF_out_gga(X1, X2, X3)) -> addcF_out_gga(s(X1), X2, s(X3))
   U50_ga(X1, X2, X3, addcF_out_gga(X2, X1, X3)) -> s2cA_out_ga(plus(X1, s(X2)), s(X3))
   s2cA_in_ga(plus(X1, 0), X1) -> U51_ga(X1, isNatcD_in_g(0))
   U51_ga(X1, isNatcD_out_g(0)) -> U52_ga(X1, isNatcD_in_g(X1))
   U52_ga(X1, isNatcD_out_g(X1)) -> s2cA_out_ga(plus(X1, 0), X1)
   s2cA_in_ga(plus(X1, 0), X1) -> s2cA_out_ga(plus(X1, 0), X1)
   s2cA_in_ga(plus(X1, X2), X3) -> U53_ga(X1, X2, X3, s2cA_in_ga(X1, X4))
   s2cA_in_ga(plus(X1, X2), X3) -> U55_ga(X1, X2, X3, isNatcD_in_g(X1))
   U55_ga(X1, X2, X3, isNatcD_out_g(X1)) -> U56_ga(X1, X2, X3, isNatcD_in_g(X2))
   U56_ga(X1, X2, X3, isNatcD_out_g(X2)) -> U57_ga(X1, X2, X3, addcF_in_gga(X1, X2, X3))
   U57_ga(X1, X2, X3, addcF_out_gga(X1, X2, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U53_ga(X1, X2, X3, s2cA_out_ga(X1, X4)) -> U54_ga(X1, X2, X3, qcB_in_gaga(X2, X5, X4, X3))
   qcB_in_gaga(X1, X2, X3, X4) -> U59_gaga(X1, X2, X3, X4, s2cA_in_ga(X1, X2))
   U59_gaga(X1, X2, X3, X4, s2cA_out_ga(X1, X2)) -> U60_gaga(X1, X2, X3, X4, s2cA_in_ga(plus(X3, X2), X4))
   U60_gaga(X1, X2, X3, X4, s2cA_out_ga(plus(X3, X2), X4)) -> qcB_out_gaga(X1, X2, X3, X4)
   U54_ga(X1, X2, X3, qcB_out_gaga(X2, X5, X4, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U46_ga(X1, X2, X3, s2cA_out_ga(X2, X4)) -> U47_ga(X1, X2, X3, qcB_in_gaga(X1, X5, X4, X3))
   U47_ga(X1, X2, X3, qcB_out_gaga(X1, X5, X4, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U45_ga(X1, X2, X3, s2cA_out_ga(plus(X1, X2), X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U44_ga(X1, X2, X3, X4, s2cA_out_ga(plus(plus(X3, X1), X2), X4)) -> s2cA_out_ga(plus(plus(X1, X2), X3), X4)
   U42_ga(X1, X2, X3, X4, s2cA_out_ga(X1, X5)) -> U43_ga(X1, X2, X3, X4, qcB_in_gaga(plus(X2, X3), X6, X5, X4))
   U43_ga(X1, X2, X3, X4, qcB_out_gaga(plus(X2, X3), X6, X5, X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U41_ga(X1, X2, X3, X4, s2cA_out_ga(plus(plus(X2, X3), X1), X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U39_ga(X1, X2, X3, X4, s2cA_out_ga(plus(X1, X2), X5)) -> U40_ga(X1, X2, X3, X4, qcB_in_gaga(X3, X6, X5, X4))
   U40_ga(X1, X2, X3, X4, qcB_out_gaga(X3, X6, X5, X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U38_ga(X1, X2, X3, X4, s2cA_out_ga(plus(X3, plus(X1, X2)), X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U37_ga(X1, X2, X3, X4, X5, s2cA_out_ga(plus(plus(plus(X1, X2), X3), X4), X5)) -> s2cA_out_ga(plus(X1, plus(X2, plus(X3, X4))), X5)

The argument filtering Pi contains the following mapping:
plus(x1, x2)  =  plus(x1, x2)

s2cA_in_ga(x1, x2)  =  s2cA_in_ga(x1)

U37_ga(x1, x2, x3, x4, x5, x6)  =  U37_ga(x1, x2, x3, x4, x6)

U38_ga(x1, x2, x3, x4, x5)  =  U38_ga(x1, x2, x3, x5)

0  =  0

s2cA_out_ga(x1, x2)  =  s2cA_out_ga(x1, x2)

U39_ga(x1, x2, x3, x4, x5)  =  U39_ga(x1, x2, x3, x5)

U41_ga(x1, x2, x3, x4, x5)  =  U41_ga(x1, x2, x3, x5)

U42_ga(x1, x2, x3, x4, x5)  =  U42_ga(x1, x2, x3, x5)

U44_ga(x1, x2, x3, x4, x5)  =  U44_ga(x1, x2, x3, x5)

U45_ga(x1, x2, x3, x4)  =  U45_ga(x1, x2, x4)

U46_ga(x1, x2, x3, x4)  =  U46_ga(x1, x2, x4)

s(x1)  =  s(x1)

U48_ga(x1, x2, x3, x4)  =  U48_ga(x1, x2, x4)

isNatcD_in_g(x1)  =  isNatcD_in_g(x1)

U58_g(x1, x2)  =  U58_g(x1, x2)

isNatcD_out_g(x1)  =  isNatcD_out_g(x1)

U49_ga(x1, x2, x3, x4)  =  U49_ga(x1, x2, x4)

U50_ga(x1, x2, x3, x4)  =  U50_ga(x1, x2, x4)

addcF_in_gga(x1, x2, x3)  =  addcF_in_gga(x1, x2)

U62_gga(x1, x2, x3, x4)  =  U62_gga(x1, x2, x4)

addcF_out_gga(x1, x2, x3)  =  addcF_out_gga(x1, x2, x3)

U51_ga(x1, x2)  =  U51_ga(x1, x2)

U52_ga(x1, x2)  =  U52_ga(x1, x2)

U53_ga(x1, x2, x3, x4)  =  U53_ga(x1, x2, x4)

U55_ga(x1, x2, x3, x4)  =  U55_ga(x1, x2, x4)

U56_ga(x1, x2, x3, x4)  =  U56_ga(x1, x2, x4)

U57_ga(x1, x2, x3, x4)  =  U57_ga(x1, x2, x4)

U54_ga(x1, x2, x3, x4)  =  U54_ga(x1, x2, x4)

qcB_in_gaga(x1, x2, x3, x4)  =  qcB_in_gaga(x1, x3)

U59_gaga(x1, x2, x3, x4, x5)  =  U59_gaga(x1, x3, x5)

U60_gaga(x1, x2, x3, x4, x5)  =  U60_gaga(x1, x2, x3, x5)

qcB_out_gaga(x1, x2, x3, x4)  =  qcB_out_gaga(x1, x2, x3, x4)

U47_ga(x1, x2, x3, x4)  =  U47_ga(x1, x2, x4)

U43_ga(x1, x2, x3, x4, x5)  =  U43_ga(x1, x2, x3, x5)

U40_ga(x1, x2, x3, x4, x5)  =  U40_ga(x1, x2, x3, x5)

ADDF_IN_GGA(x1, x2, x3)  =  ADDF_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(156) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(157)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ADDF_IN_GGA(s(X1), X2, s(X3)) -> ADDF_IN_GGA(X1, X2, X3)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

ADDF_IN_GGA(x1, x2, x3)  =  ADDF_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(158) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(159)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADDF_IN_GGA(s(X1), X2) -> ADDF_IN_GGA(X1, X2)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(160) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ADDF_IN_GGA(s(X1), X2) -> ADDF_IN_GGA(X1, X2)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(161)
YES

----------------------------------------

(162)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISNATD_IN_G(s(X1)) -> ISNATD_IN_G(X1)

The TRS R consists of the following rules:

   s2cA_in_ga(plus(X1, plus(X2, plus(X3, X4))), X5) -> U37_ga(X1, X2, X3, X4, X5, s2cA_in_ga(plus(plus(plus(X1, X2), X3), X4), X5))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U38_ga(X1, X2, X3, X4, s2cA_in_ga(plus(X3, plus(X1, X2)), X4))
   s2cA_in_ga(plus(X1, plus(X2, 0)), plus(X1, X2)) -> s2cA_out_ga(plus(X1, plus(X2, 0)), plus(X1, X2))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U39_ga(X1, X2, X3, X4, s2cA_in_ga(plus(X1, X2), X5))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U41_ga(X1, X2, X3, X4, s2cA_in_ga(plus(plus(X2, X3), X1), X4))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U42_ga(X1, X2, X3, X4, s2cA_in_ga(X1, X5))
   s2cA_in_ga(plus(plus(X1, X2), X3), X4) -> U44_ga(X1, X2, X3, X4, s2cA_in_ga(plus(plus(X3, X1), X2), X4))
   s2cA_in_ga(plus(X1, X2), X3) -> U45_ga(X1, X2, X3, s2cA_in_ga(plus(X1, X2), X3))
   s2cA_in_ga(plus(0, X1), X1) -> s2cA_out_ga(plus(0, X1), X1)
   s2cA_in_ga(plus(X1, X2), X3) -> U46_ga(X1, X2, X3, s2cA_in_ga(X2, X4))
   s2cA_in_ga(plus(X1, s(X2)), s(X3)) -> U48_ga(X1, X2, X3, isNatcD_in_g(s(X2)))
   isNatcD_in_g(s(X1)) -> U58_g(X1, isNatcD_in_g(X1))
   isNatcD_in_g(0) -> isNatcD_out_g(0)
   U58_g(X1, isNatcD_out_g(X1)) -> isNatcD_out_g(s(X1))
   U48_ga(X1, X2, X3, isNatcD_out_g(s(X2))) -> U49_ga(X1, X2, X3, isNatcD_in_g(X1))
   U49_ga(X1, X2, X3, isNatcD_out_g(X1)) -> U50_ga(X1, X2, X3, addcF_in_gga(X2, X1, X3))
   addcF_in_gga(s(X1), X2, s(X3)) -> U62_gga(X1, X2, X3, addcF_in_gga(X1, X2, X3))
   addcF_in_gga(0, X1, X1) -> addcF_out_gga(0, X1, X1)
   U62_gga(X1, X2, X3, addcF_out_gga(X1, X2, X3)) -> addcF_out_gga(s(X1), X2, s(X3))
   U50_ga(X1, X2, X3, addcF_out_gga(X2, X1, X3)) -> s2cA_out_ga(plus(X1, s(X2)), s(X3))
   s2cA_in_ga(plus(X1, 0), X1) -> U51_ga(X1, isNatcD_in_g(0))
   U51_ga(X1, isNatcD_out_g(0)) -> U52_ga(X1, isNatcD_in_g(X1))
   U52_ga(X1, isNatcD_out_g(X1)) -> s2cA_out_ga(plus(X1, 0), X1)
   s2cA_in_ga(plus(X1, 0), X1) -> s2cA_out_ga(plus(X1, 0), X1)
   s2cA_in_ga(plus(X1, X2), X3) -> U53_ga(X1, X2, X3, s2cA_in_ga(X1, X4))
   s2cA_in_ga(plus(X1, X2), X3) -> U55_ga(X1, X2, X3, isNatcD_in_g(X1))
   U55_ga(X1, X2, X3, isNatcD_out_g(X1)) -> U56_ga(X1, X2, X3, isNatcD_in_g(X2))
   U56_ga(X1, X2, X3, isNatcD_out_g(X2)) -> U57_ga(X1, X2, X3, addcF_in_gga(X1, X2, X3))
   U57_ga(X1, X2, X3, addcF_out_gga(X1, X2, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U53_ga(X1, X2, X3, s2cA_out_ga(X1, X4)) -> U54_ga(X1, X2, X3, qcB_in_gaga(X2, X5, X4, X3))
   qcB_in_gaga(X1, X2, X3, X4) -> U59_gaga(X1, X2, X3, X4, s2cA_in_ga(X1, X2))
   U59_gaga(X1, X2, X3, X4, s2cA_out_ga(X1, X2)) -> U60_gaga(X1, X2, X3, X4, s2cA_in_ga(plus(X3, X2), X4))
   U60_gaga(X1, X2, X3, X4, s2cA_out_ga(plus(X3, X2), X4)) -> qcB_out_gaga(X1, X2, X3, X4)
   U54_ga(X1, X2, X3, qcB_out_gaga(X2, X5, X4, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U46_ga(X1, X2, X3, s2cA_out_ga(X2, X4)) -> U47_ga(X1, X2, X3, qcB_in_gaga(X1, X5, X4, X3))
   U47_ga(X1, X2, X3, qcB_out_gaga(X1, X5, X4, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U45_ga(X1, X2, X3, s2cA_out_ga(plus(X1, X2), X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U44_ga(X1, X2, X3, X4, s2cA_out_ga(plus(plus(X3, X1), X2), X4)) -> s2cA_out_ga(plus(plus(X1, X2), X3), X4)
   U42_ga(X1, X2, X3, X4, s2cA_out_ga(X1, X5)) -> U43_ga(X1, X2, X3, X4, qcB_in_gaga(plus(X2, X3), X6, X5, X4))
   U43_ga(X1, X2, X3, X4, qcB_out_gaga(plus(X2, X3), X6, X5, X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U41_ga(X1, X2, X3, X4, s2cA_out_ga(plus(plus(X2, X3), X1), X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U39_ga(X1, X2, X3, X4, s2cA_out_ga(plus(X1, X2), X5)) -> U40_ga(X1, X2, X3, X4, qcB_in_gaga(X3, X6, X5, X4))
   U40_ga(X1, X2, X3, X4, qcB_out_gaga(X3, X6, X5, X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U38_ga(X1, X2, X3, X4, s2cA_out_ga(plus(X3, plus(X1, X2)), X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U37_ga(X1, X2, X3, X4, X5, s2cA_out_ga(plus(plus(plus(X1, X2), X3), X4), X5)) -> s2cA_out_ga(plus(X1, plus(X2, plus(X3, X4))), X5)

The argument filtering Pi contains the following mapping:
plus(x1, x2)  =  plus(x1, x2)

s2cA_in_ga(x1, x2)  =  s2cA_in_ga(x1)

U37_ga(x1, x2, x3, x4, x5, x6)  =  U37_ga(x1, x2, x3, x4, x6)

U38_ga(x1, x2, x3, x4, x5)  =  U38_ga(x1, x2, x3, x5)

0  =  0

s2cA_out_ga(x1, x2)  =  s2cA_out_ga(x1, x2)

U39_ga(x1, x2, x3, x4, x5)  =  U39_ga(x1, x2, x3, x5)

U41_ga(x1, x2, x3, x4, x5)  =  U41_ga(x1, x2, x3, x5)

U42_ga(x1, x2, x3, x4, x5)  =  U42_ga(x1, x2, x3, x5)

U44_ga(x1, x2, x3, x4, x5)  =  U44_ga(x1, x2, x3, x5)

U45_ga(x1, x2, x3, x4)  =  U45_ga(x1, x2, x4)

U46_ga(x1, x2, x3, x4)  =  U46_ga(x1, x2, x4)

s(x1)  =  s(x1)

U48_ga(x1, x2, x3, x4)  =  U48_ga(x1, x2, x4)

isNatcD_in_g(x1)  =  isNatcD_in_g(x1)

U58_g(x1, x2)  =  U58_g(x1, x2)

isNatcD_out_g(x1)  =  isNatcD_out_g(x1)

U49_ga(x1, x2, x3, x4)  =  U49_ga(x1, x2, x4)

U50_ga(x1, x2, x3, x4)  =  U50_ga(x1, x2, x4)

addcF_in_gga(x1, x2, x3)  =  addcF_in_gga(x1, x2)

U62_gga(x1, x2, x3, x4)  =  U62_gga(x1, x2, x4)

addcF_out_gga(x1, x2, x3)  =  addcF_out_gga(x1, x2, x3)

U51_ga(x1, x2)  =  U51_ga(x1, x2)

U52_ga(x1, x2)  =  U52_ga(x1, x2)

U53_ga(x1, x2, x3, x4)  =  U53_ga(x1, x2, x4)

U55_ga(x1, x2, x3, x4)  =  U55_ga(x1, x2, x4)

U56_ga(x1, x2, x3, x4)  =  U56_ga(x1, x2, x4)

U57_ga(x1, x2, x3, x4)  =  U57_ga(x1, x2, x4)

U54_ga(x1, x2, x3, x4)  =  U54_ga(x1, x2, x4)

qcB_in_gaga(x1, x2, x3, x4)  =  qcB_in_gaga(x1, x3)

U59_gaga(x1, x2, x3, x4, x5)  =  U59_gaga(x1, x3, x5)

U60_gaga(x1, x2, x3, x4, x5)  =  U60_gaga(x1, x2, x3, x5)

qcB_out_gaga(x1, x2, x3, x4)  =  qcB_out_gaga(x1, x2, x3, x4)

U47_ga(x1, x2, x3, x4)  =  U47_ga(x1, x2, x4)

U43_ga(x1, x2, x3, x4, x5)  =  U43_ga(x1, x2, x3, x5)

U40_ga(x1, x2, x3, x4, x5)  =  U40_ga(x1, x2, x3, x5)

ISNATD_IN_G(x1)  =  ISNATD_IN_G(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(163) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(164)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISNATD_IN_G(s(X1)) -> ISNATD_IN_G(X1)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(165) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(166)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISNATD_IN_G(s(X1)) -> ISNATD_IN_G(X1)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(167) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISNATD_IN_G(s(X1)) -> ISNATD_IN_G(X1)
The graph contains the following edges 1 > 1


----------------------------------------

(168)
YES

----------------------------------------

(169)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> S2A_IN_GA(plus(X3, plus(X1, X2)), X4)
   S2A_IN_GA(plus(X1, plus(X2, plus(X3, X4))), X5) -> S2A_IN_GA(plus(plus(plus(X1, X2), X3), X4), X5)
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> S2A_IN_GA(plus(X1, X2), X5)
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> U10_GA(X1, X2, X3, X4, s2cA_in_ga(plus(X1, X2), X5))
   U10_GA(X1, X2, X3, X4, s2cA_out_ga(plus(X1, X2), X5)) -> PB_IN_GAGA(X3, X6, X5, X4)
   PB_IN_GAGA(X1, X2, X3, X4) -> S2A_IN_GA(X1, X2)
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> S2A_IN_GA(plus(plus(X2, X3), X1), X4)
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> S2A_IN_GA(X1, X5)
   S2A_IN_GA(plus(X1, plus(X2, X3)), X4) -> U14_GA(X1, X2, X3, X4, s2cA_in_ga(X1, X5))
   U14_GA(X1, X2, X3, X4, s2cA_out_ga(X1, X5)) -> PB_IN_GAGA(plus(X2, X3), X6, X5, X4)
   PB_IN_GAGA(X1, X2, X3, X4) -> U3_GAGA(X1, X2, X3, X4, s2cA_in_ga(X1, X2))
   U3_GAGA(X1, X2, X3, X4, s2cA_out_ga(X1, X2)) -> S2A_IN_GA(plus(X3, X2), X4)
   S2A_IN_GA(plus(plus(X1, X2), X3), X4) -> S2A_IN_GA(plus(plus(X3, X1), X2), X4)
   S2A_IN_GA(plus(X1, X2), X3) -> S2A_IN_GA(plus(X1, X2), X3)
   S2A_IN_GA(plus(X1, X2), X3) -> S2A_IN_GA(X2, X4)
   S2A_IN_GA(plus(X1, X2), X3) -> U20_GA(X1, X2, X3, s2cA_in_ga(X2, X4))
   U20_GA(X1, X2, X3, s2cA_out_ga(X2, X4)) -> PB_IN_GAGA(X1, X5, X4, X3)
   S2A_IN_GA(plus(X1, X2), X3) -> S2A_IN_GA(X1, X4)
   S2A_IN_GA(plus(X1, X2), X3) -> U29_GA(X1, X2, X3, s2cA_in_ga(X1, X4))
   U29_GA(X1, X2, X3, s2cA_out_ga(X1, X4)) -> PB_IN_GAGA(X2, X5, X4, X3)

The TRS R consists of the following rules:

   s2cA_in_ga(plus(X1, plus(X2, plus(X3, X4))), X5) -> U37_ga(X1, X2, X3, X4, X5, s2cA_in_ga(plus(plus(plus(X1, X2), X3), X4), X5))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U38_ga(X1, X2, X3, X4, s2cA_in_ga(plus(X3, plus(X1, X2)), X4))
   s2cA_in_ga(plus(X1, plus(X2, 0)), plus(X1, X2)) -> s2cA_out_ga(plus(X1, plus(X2, 0)), plus(X1, X2))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U39_ga(X1, X2, X3, X4, s2cA_in_ga(plus(X1, X2), X5))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U41_ga(X1, X2, X3, X4, s2cA_in_ga(plus(plus(X2, X3), X1), X4))
   s2cA_in_ga(plus(X1, plus(X2, X3)), X4) -> U42_ga(X1, X2, X3, X4, s2cA_in_ga(X1, X5))
   s2cA_in_ga(plus(plus(X1, X2), X3), X4) -> U44_ga(X1, X2, X3, X4, s2cA_in_ga(plus(plus(X3, X1), X2), X4))
   s2cA_in_ga(plus(X1, X2), X3) -> U45_ga(X1, X2, X3, s2cA_in_ga(plus(X1, X2), X3))
   s2cA_in_ga(plus(0, X1), X1) -> s2cA_out_ga(plus(0, X1), X1)
   s2cA_in_ga(plus(X1, X2), X3) -> U46_ga(X1, X2, X3, s2cA_in_ga(X2, X4))
   s2cA_in_ga(plus(X1, s(X2)), s(X3)) -> U48_ga(X1, X2, X3, isNatcD_in_g(s(X2)))
   isNatcD_in_g(s(X1)) -> U58_g(X1, isNatcD_in_g(X1))
   isNatcD_in_g(0) -> isNatcD_out_g(0)
   U58_g(X1, isNatcD_out_g(X1)) -> isNatcD_out_g(s(X1))
   U48_ga(X1, X2, X3, isNatcD_out_g(s(X2))) -> U49_ga(X1, X2, X3, isNatcD_in_g(X1))
   U49_ga(X1, X2, X3, isNatcD_out_g(X1)) -> U50_ga(X1, X2, X3, addcF_in_gga(X2, X1, X3))
   addcF_in_gga(s(X1), X2, s(X3)) -> U62_gga(X1, X2, X3, addcF_in_gga(X1, X2, X3))
   addcF_in_gga(0, X1, X1) -> addcF_out_gga(0, X1, X1)
   U62_gga(X1, X2, X3, addcF_out_gga(X1, X2, X3)) -> addcF_out_gga(s(X1), X2, s(X3))
   U50_ga(X1, X2, X3, addcF_out_gga(X2, X1, X3)) -> s2cA_out_ga(plus(X1, s(X2)), s(X3))
   s2cA_in_ga(plus(X1, 0), X1) -> U51_ga(X1, isNatcD_in_g(0))
   U51_ga(X1, isNatcD_out_g(0)) -> U52_ga(X1, isNatcD_in_g(X1))
   U52_ga(X1, isNatcD_out_g(X1)) -> s2cA_out_ga(plus(X1, 0), X1)
   s2cA_in_ga(plus(X1, 0), X1) -> s2cA_out_ga(plus(X1, 0), X1)
   s2cA_in_ga(plus(X1, X2), X3) -> U53_ga(X1, X2, X3, s2cA_in_ga(X1, X4))
   s2cA_in_ga(plus(X1, X2), X3) -> U55_ga(X1, X2, X3, isNatcD_in_g(X1))
   U55_ga(X1, X2, X3, isNatcD_out_g(X1)) -> U56_ga(X1, X2, X3, isNatcD_in_g(X2))
   U56_ga(X1, X2, X3, isNatcD_out_g(X2)) -> U57_ga(X1, X2, X3, addcF_in_gga(X1, X2, X3))
   U57_ga(X1, X2, X3, addcF_out_gga(X1, X2, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U53_ga(X1, X2, X3, s2cA_out_ga(X1, X4)) -> U54_ga(X1, X2, X3, qcB_in_gaga(X2, X5, X4, X3))
   qcB_in_gaga(X1, X2, X3, X4) -> U59_gaga(X1, X2, X3, X4, s2cA_in_ga(X1, X2))
   U59_gaga(X1, X2, X3, X4, s2cA_out_ga(X1, X2)) -> U60_gaga(X1, X2, X3, X4, s2cA_in_ga(plus(X3, X2), X4))
   U60_gaga(X1, X2, X3, X4, s2cA_out_ga(plus(X3, X2), X4)) -> qcB_out_gaga(X1, X2, X3, X4)
   U54_ga(X1, X2, X3, qcB_out_gaga(X2, X5, X4, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U46_ga(X1, X2, X3, s2cA_out_ga(X2, X4)) -> U47_ga(X1, X2, X3, qcB_in_gaga(X1, X5, X4, X3))
   U47_ga(X1, X2, X3, qcB_out_gaga(X1, X5, X4, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U45_ga(X1, X2, X3, s2cA_out_ga(plus(X1, X2), X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U44_ga(X1, X2, X3, X4, s2cA_out_ga(plus(plus(X3, X1), X2), X4)) -> s2cA_out_ga(plus(plus(X1, X2), X3), X4)
   U42_ga(X1, X2, X3, X4, s2cA_out_ga(X1, X5)) -> U43_ga(X1, X2, X3, X4, qcB_in_gaga(plus(X2, X3), X6, X5, X4))
   U43_ga(X1, X2, X3, X4, qcB_out_gaga(plus(X2, X3), X6, X5, X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U41_ga(X1, X2, X3, X4, s2cA_out_ga(plus(plus(X2, X3), X1), X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U39_ga(X1, X2, X3, X4, s2cA_out_ga(plus(X1, X2), X5)) -> U40_ga(X1, X2, X3, X4, qcB_in_gaga(X3, X6, X5, X4))
   U40_ga(X1, X2, X3, X4, qcB_out_gaga(X3, X6, X5, X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U38_ga(X1, X2, X3, X4, s2cA_out_ga(plus(X3, plus(X1, X2)), X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U37_ga(X1, X2, X3, X4, X5, s2cA_out_ga(plus(plus(plus(X1, X2), X3), X4), X5)) -> s2cA_out_ga(plus(X1, plus(X2, plus(X3, X4))), X5)

The argument filtering Pi contains the following mapping:
plus(x1, x2)  =  plus(x1, x2)

s2cA_in_ga(x1, x2)  =  s2cA_in_ga(x1)

U37_ga(x1, x2, x3, x4, x5, x6)  =  U37_ga(x1, x2, x3, x4, x6)

U38_ga(x1, x2, x3, x4, x5)  =  U38_ga(x1, x2, x3, x5)

0  =  0

s2cA_out_ga(x1, x2)  =  s2cA_out_ga(x1, x2)

U39_ga(x1, x2, x3, x4, x5)  =  U39_ga(x1, x2, x3, x5)

U41_ga(x1, x2, x3, x4, x5)  =  U41_ga(x1, x2, x3, x5)

U42_ga(x1, x2, x3, x4, x5)  =  U42_ga(x1, x2, x3, x5)

U44_ga(x1, x2, x3, x4, x5)  =  U44_ga(x1, x2, x3, x5)

U45_ga(x1, x2, x3, x4)  =  U45_ga(x1, x2, x4)

U46_ga(x1, x2, x3, x4)  =  U46_ga(x1, x2, x4)

s(x1)  =  s(x1)

U48_ga(x1, x2, x3, x4)  =  U48_ga(x1, x2, x4)

isNatcD_in_g(x1)  =  isNatcD_in_g(x1)

U58_g(x1, x2)  =  U58_g(x1, x2)

isNatcD_out_g(x1)  =  isNatcD_out_g(x1)

U49_ga(x1, x2, x3, x4)  =  U49_ga(x1, x2, x4)

U50_ga(x1, x2, x3, x4)  =  U50_ga(x1, x2, x4)

addcF_in_gga(x1, x2, x3)  =  addcF_in_gga(x1, x2)

U62_gga(x1, x2, x3, x4)  =  U62_gga(x1, x2, x4)

addcF_out_gga(x1, x2, x3)  =  addcF_out_gga(x1, x2, x3)

U51_ga(x1, x2)  =  U51_ga(x1, x2)

U52_ga(x1, x2)  =  U52_ga(x1, x2)

U53_ga(x1, x2, x3, x4)  =  U53_ga(x1, x2, x4)

U55_ga(x1, x2, x3, x4)  =  U55_ga(x1, x2, x4)

U56_ga(x1, x2, x3, x4)  =  U56_ga(x1, x2, x4)

U57_ga(x1, x2, x3, x4)  =  U57_ga(x1, x2, x4)

U54_ga(x1, x2, x3, x4)  =  U54_ga(x1, x2, x4)

qcB_in_gaga(x1, x2, x3, x4)  =  qcB_in_gaga(x1, x3)

U59_gaga(x1, x2, x3, x4, x5)  =  U59_gaga(x1, x3, x5)

U60_gaga(x1, x2, x3, x4, x5)  =  U60_gaga(x1, x2, x3, x5)

qcB_out_gaga(x1, x2, x3, x4)  =  qcB_out_gaga(x1, x2, x3, x4)

U47_ga(x1, x2, x3, x4)  =  U47_ga(x1, x2, x4)

U43_ga(x1, x2, x3, x4, x5)  =  U43_ga(x1, x2, x3, x5)

U40_ga(x1, x2, x3, x4, x5)  =  U40_ga(x1, x2, x3, x5)

S2A_IN_GA(x1, x2)  =  S2A_IN_GA(x1)

U10_GA(x1, x2, x3, x4, x5)  =  U10_GA(x1, x2, x3, x5)

PB_IN_GAGA(x1, x2, x3, x4)  =  PB_IN_GAGA(x1, x3)

U14_GA(x1, x2, x3, x4, x5)  =  U14_GA(x1, x2, x3, x5)

U3_GAGA(x1, x2, x3, x4, x5)  =  U3_GAGA(x1, x3, x5)

U20_GA(x1, x2, x3, x4)  =  U20_GA(x1, x2, x4)

U29_GA(x1, x2, x3, x4)  =  U29_GA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(170) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(171)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2A_IN_GA(plus(X1, plus(X2, X3))) -> S2A_IN_GA(plus(X3, plus(X1, X2)))
   S2A_IN_GA(plus(X1, plus(X2, plus(X3, X4)))) -> S2A_IN_GA(plus(plus(plus(X1, X2), X3), X4))
   S2A_IN_GA(plus(X1, plus(X2, X3))) -> S2A_IN_GA(plus(X1, X2))
   S2A_IN_GA(plus(X1, plus(X2, X3))) -> U10_GA(X1, X2, X3, s2cA_in_ga(plus(X1, X2)))
   U10_GA(X1, X2, X3, s2cA_out_ga(plus(X1, X2), X5)) -> PB_IN_GAGA(X3, X5)
   PB_IN_GAGA(X1, X3) -> S2A_IN_GA(X1)
   S2A_IN_GA(plus(X1, plus(X2, X3))) -> S2A_IN_GA(plus(plus(X2, X3), X1))
   S2A_IN_GA(plus(X1, plus(X2, X3))) -> S2A_IN_GA(X1)
   S2A_IN_GA(plus(X1, plus(X2, X3))) -> U14_GA(X1, X2, X3, s2cA_in_ga(X1))
   U14_GA(X1, X2, X3, s2cA_out_ga(X1, X5)) -> PB_IN_GAGA(plus(X2, X3), X5)
   PB_IN_GAGA(X1, X3) -> U3_GAGA(X1, X3, s2cA_in_ga(X1))
   U3_GAGA(X1, X3, s2cA_out_ga(X1, X2)) -> S2A_IN_GA(plus(X3, X2))
   S2A_IN_GA(plus(plus(X1, X2), X3)) -> S2A_IN_GA(plus(plus(X3, X1), X2))
   S2A_IN_GA(plus(X1, X2)) -> S2A_IN_GA(plus(X1, X2))
   S2A_IN_GA(plus(X1, X2)) -> S2A_IN_GA(X2)
   S2A_IN_GA(plus(X1, X2)) -> U20_GA(X1, X2, s2cA_in_ga(X2))
   U20_GA(X1, X2, s2cA_out_ga(X2, X4)) -> PB_IN_GAGA(X1, X4)
   S2A_IN_GA(plus(X1, X2)) -> S2A_IN_GA(X1)
   S2A_IN_GA(plus(X1, X2)) -> U29_GA(X1, X2, s2cA_in_ga(X1))
   U29_GA(X1, X2, s2cA_out_ga(X1, X4)) -> PB_IN_GAGA(X2, X4)

The TRS R consists of the following rules:

   s2cA_in_ga(plus(X1, plus(X2, plus(X3, X4)))) -> U37_ga(X1, X2, X3, X4, s2cA_in_ga(plus(plus(plus(X1, X2), X3), X4)))
   s2cA_in_ga(plus(X1, plus(X2, X3))) -> U38_ga(X1, X2, X3, s2cA_in_ga(plus(X3, plus(X1, X2))))
   s2cA_in_ga(plus(X1, plus(X2, 0))) -> s2cA_out_ga(plus(X1, plus(X2, 0)), plus(X1, X2))
   s2cA_in_ga(plus(X1, plus(X2, X3))) -> U39_ga(X1, X2, X3, s2cA_in_ga(plus(X1, X2)))
   s2cA_in_ga(plus(X1, plus(X2, X3))) -> U41_ga(X1, X2, X3, s2cA_in_ga(plus(plus(X2, X3), X1)))
   s2cA_in_ga(plus(X1, plus(X2, X3))) -> U42_ga(X1, X2, X3, s2cA_in_ga(X1))
   s2cA_in_ga(plus(plus(X1, X2), X3)) -> U44_ga(X1, X2, X3, s2cA_in_ga(plus(plus(X3, X1), X2)))
   s2cA_in_ga(plus(X1, X2)) -> U45_ga(X1, X2, s2cA_in_ga(plus(X1, X2)))
   s2cA_in_ga(plus(0, X1)) -> s2cA_out_ga(plus(0, X1), X1)
   s2cA_in_ga(plus(X1, X2)) -> U46_ga(X1, X2, s2cA_in_ga(X2))
   s2cA_in_ga(plus(X1, s(X2))) -> U48_ga(X1, X2, isNatcD_in_g(s(X2)))
   isNatcD_in_g(s(X1)) -> U58_g(X1, isNatcD_in_g(X1))
   isNatcD_in_g(0) -> isNatcD_out_g(0)
   U58_g(X1, isNatcD_out_g(X1)) -> isNatcD_out_g(s(X1))
   U48_ga(X1, X2, isNatcD_out_g(s(X2))) -> U49_ga(X1, X2, isNatcD_in_g(X1))
   U49_ga(X1, X2, isNatcD_out_g(X1)) -> U50_ga(X1, X2, addcF_in_gga(X2, X1))
   addcF_in_gga(s(X1), X2) -> U62_gga(X1, X2, addcF_in_gga(X1, X2))
   addcF_in_gga(0, X1) -> addcF_out_gga(0, X1, X1)
   U62_gga(X1, X2, addcF_out_gga(X1, X2, X3)) -> addcF_out_gga(s(X1), X2, s(X3))
   U50_ga(X1, X2, addcF_out_gga(X2, X1, X3)) -> s2cA_out_ga(plus(X1, s(X2)), s(X3))
   s2cA_in_ga(plus(X1, 0)) -> U51_ga(X1, isNatcD_in_g(0))
   U51_ga(X1, isNatcD_out_g(0)) -> U52_ga(X1, isNatcD_in_g(X1))
   U52_ga(X1, isNatcD_out_g(X1)) -> s2cA_out_ga(plus(X1, 0), X1)
   s2cA_in_ga(plus(X1, 0)) -> s2cA_out_ga(plus(X1, 0), X1)
   s2cA_in_ga(plus(X1, X2)) -> U53_ga(X1, X2, s2cA_in_ga(X1))
   s2cA_in_ga(plus(X1, X2)) -> U55_ga(X1, X2, isNatcD_in_g(X1))
   U55_ga(X1, X2, isNatcD_out_g(X1)) -> U56_ga(X1, X2, isNatcD_in_g(X2))
   U56_ga(X1, X2, isNatcD_out_g(X2)) -> U57_ga(X1, X2, addcF_in_gga(X1, X2))
   U57_ga(X1, X2, addcF_out_gga(X1, X2, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U53_ga(X1, X2, s2cA_out_ga(X1, X4)) -> U54_ga(X1, X2, qcB_in_gaga(X2, X4))
   qcB_in_gaga(X1, X3) -> U59_gaga(X1, X3, s2cA_in_ga(X1))
   U59_gaga(X1, X3, s2cA_out_ga(X1, X2)) -> U60_gaga(X1, X2, X3, s2cA_in_ga(plus(X3, X2)))
   U60_gaga(X1, X2, X3, s2cA_out_ga(plus(X3, X2), X4)) -> qcB_out_gaga(X1, X2, X3, X4)
   U54_ga(X1, X2, qcB_out_gaga(X2, X5, X4, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U46_ga(X1, X2, s2cA_out_ga(X2, X4)) -> U47_ga(X1, X2, qcB_in_gaga(X1, X4))
   U47_ga(X1, X2, qcB_out_gaga(X1, X5, X4, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U45_ga(X1, X2, s2cA_out_ga(plus(X1, X2), X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U44_ga(X1, X2, X3, s2cA_out_ga(plus(plus(X3, X1), X2), X4)) -> s2cA_out_ga(plus(plus(X1, X2), X3), X4)
   U42_ga(X1, X2, X3, s2cA_out_ga(X1, X5)) -> U43_ga(X1, X2, X3, qcB_in_gaga(plus(X2, X3), X5))
   U43_ga(X1, X2, X3, qcB_out_gaga(plus(X2, X3), X6, X5, X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U41_ga(X1, X2, X3, s2cA_out_ga(plus(plus(X2, X3), X1), X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U39_ga(X1, X2, X3, s2cA_out_ga(plus(X1, X2), X5)) -> U40_ga(X1, X2, X3, qcB_in_gaga(X3, X5))
   U40_ga(X1, X2, X3, qcB_out_gaga(X3, X6, X5, X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U38_ga(X1, X2, X3, s2cA_out_ga(plus(X3, plus(X1, X2)), X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U37_ga(X1, X2, X3, X4, s2cA_out_ga(plus(plus(plus(X1, X2), X3), X4), X5)) -> s2cA_out_ga(plus(X1, plus(X2, plus(X3, X4))), X5)

The set Q consists of the following terms:

   s2cA_in_ga(x0)
   isNatcD_in_g(x0)
   U58_g(x0, x1)
   U48_ga(x0, x1, x2)
   U49_ga(x0, x1, x2)
   addcF_in_gga(x0, x1)
   U62_gga(x0, x1, x2)
   U50_ga(x0, x1, x2)
   U51_ga(x0, x1)
   U52_ga(x0, x1)
   U55_ga(x0, x1, x2)
   U56_ga(x0, x1, x2)
   U57_ga(x0, x1, x2)
   U53_ga(x0, x1, x2)
   qcB_in_gaga(x0, x1)
   U59_gaga(x0, x1, x2)
   U60_gaga(x0, x1, x2, x3)
   U54_ga(x0, x1, x2)
   U46_ga(x0, x1, x2)
   U47_ga(x0, x1, x2)
   U45_ga(x0, x1, x2)
   U44_ga(x0, x1, x2, x3)
   U42_ga(x0, x1, x2, x3)
   U43_ga(x0, x1, x2, x3)
   U41_ga(x0, x1, x2, x3)
   U39_ga(x0, x1, x2, x3)
   U40_ga(x0, x1, x2, x3)
   U38_ga(x0, x1, x2, x3)
   U37_ga(x0, x1, x2, x3, x4)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(172) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   S2A_IN_GA(plus(X1, plus(X2, X3))) -> S2A_IN_GA(plus(X1, X2))
   S2A_IN_GA(plus(X1, plus(X2, X3))) -> U10_GA(X1, X2, X3, s2cA_in_ga(plus(X1, X2)))
   U10_GA(X1, X2, X3, s2cA_out_ga(plus(X1, X2), X5)) -> PB_IN_GAGA(X3, X5)
   S2A_IN_GA(plus(X1, plus(X2, X3))) -> S2A_IN_GA(X1)
   S2A_IN_GA(plus(X1, plus(X2, X3))) -> U14_GA(X1, X2, X3, s2cA_in_ga(X1))
   U3_GAGA(X1, X3, s2cA_out_ga(X1, X2)) -> S2A_IN_GA(plus(X3, X2))
   S2A_IN_GA(plus(X1, X2)) -> S2A_IN_GA(X2)
   S2A_IN_GA(plus(X1, X2)) -> U20_GA(X1, X2, s2cA_in_ga(X2))
   U20_GA(X1, X2, s2cA_out_ga(X2, X4)) -> PB_IN_GAGA(X1, X4)
   S2A_IN_GA(plus(X1, X2)) -> S2A_IN_GA(X1)
   S2A_IN_GA(plus(X1, X2)) -> U29_GA(X1, X2, s2cA_in_ga(X1))
   U29_GA(X1, X2, s2cA_out_ga(X1, X4)) -> PB_IN_GAGA(X2, X4)
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U10_GA_4(x_1, ..., x_4) ) = 2x_3 + 2x_4 + 2
POL( U14_GA_4(x_1, ..., x_4) ) = 2x_2 + 2x_3 + 2x_4
POL( U20_GA_3(x_1, ..., x_3) ) = 2x_1 + 2x_3 + 1
POL( U29_GA_3(x_1, ..., x_3) ) = 2x_2 + 2x_3
POL( U3_GAGA_3(x_1, ..., x_3) ) = 2x_2 + 2x_3 + 2
POL( s2cA_in_ga_1(x_1) ) = max{0, x_1 - 1}
POL( plus_2(x_1, x_2) ) = x_1 + x_2 + 1
POL( U37_ga_5(x_1, ..., x_5) ) = x_5
POL( U38_ga_4(x_1, ..., x_4) ) = x_4
POL( 0 ) = 2
POL( s2cA_out_ga_2(x_1, x_2) ) = x_2 + 2
POL( U39_ga_4(x_1, ..., x_4) ) = x_3 + x_4
POL( U41_ga_4(x_1, ..., x_4) ) = x_4
POL( U42_ga_4(x_1, ..., x_4) ) = x_2 + x_3 + x_4
POL( U44_ga_4(x_1, ..., x_4) ) = x_4
POL( U45_ga_3(x_1, ..., x_3) ) = x_3
POL( U46_ga_3(x_1, ..., x_3) ) = max{0, x_1 + x_3 - 1}
POL( s_1(x_1) ) = x_1 + 2
POL( U48_ga_3(x_1, ..., x_3) ) = x_1 + x_2 + 2
POL( isNatcD_in_g_1(x_1) ) = max{0, -2}
POL( U51_ga_2(x_1, x_2) ) = x_1 + 2
POL( U53_ga_3(x_1, ..., x_3) ) = x_2 + x_3
POL( U55_ga_3(x_1, ..., x_3) ) = x_1 + x_2
POL( U54_ga_3(x_1, ..., x_3) ) = x_3 + 1
POL( qcB_in_gaga_2(x_1, x_2) ) = x_1 + x_2
POL( qcB_out_gaga_4(x_1, ..., x_4) ) = x_4 + 1
POL( U59_gaga_3(x_1, ..., x_3) ) = max{0, x_2 + x_3 - 2}
POL( U60_gaga_4(x_1, ..., x_4) ) = max{0, x_4 - 1}
POL( U47_ga_3(x_1, ..., x_3) ) = x_3 + 1
POL( U43_ga_4(x_1, ..., x_4) ) = x_4 + 1
POL( U40_ga_4(x_1, ..., x_4) ) = x_4 + 2
POL( U49_ga_3(x_1, ..., x_3) ) = x_1 + x_2 + 2
POL( U52_ga_2(x_1, x_2) ) = x_1 + 2
POL( U56_ga_3(x_1, ..., x_3) ) = x_1 + x_2
POL( U58_g_2(x_1, x_2) ) = 0
POL( isNatcD_out_g_1(x_1) ) = max{0, -2}
POL( U50_ga_3(x_1, ..., x_3) ) = x_3 + 2
POL( addcF_in_gga_2(x_1, x_2) ) = x_1 + x_2
POL( U57_ga_3(x_1, ..., x_3) ) = x_3
POL( U62_gga_3(x_1, ..., x_3) ) = x_3 + 2
POL( addcF_out_gga_3(x_1, ..., x_3) ) = x_3 + 2
POL( S2A_IN_GA_1(x_1) ) = 2x_1 + 2
POL( PB_IN_GAGA_2(x_1, x_2) ) = 2x_1 + 2x_2 + 2

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   s2cA_in_ga(plus(X1, plus(X2, plus(X3, X4)))) -> U37_ga(X1, X2, X3, X4, s2cA_in_ga(plus(plus(plus(X1, X2), X3), X4)))
   s2cA_in_ga(plus(X1, plus(X2, X3))) -> U38_ga(X1, X2, X3, s2cA_in_ga(plus(X3, plus(X1, X2))))
   s2cA_in_ga(plus(X1, plus(X2, 0))) -> s2cA_out_ga(plus(X1, plus(X2, 0)), plus(X1, X2))
   s2cA_in_ga(plus(X1, plus(X2, X3))) -> U39_ga(X1, X2, X3, s2cA_in_ga(plus(X1, X2)))
   s2cA_in_ga(plus(X1, plus(X2, X3))) -> U41_ga(X1, X2, X3, s2cA_in_ga(plus(plus(X2, X3), X1)))
   s2cA_in_ga(plus(X1, plus(X2, X3))) -> U42_ga(X1, X2, X3, s2cA_in_ga(X1))
   s2cA_in_ga(plus(plus(X1, X2), X3)) -> U44_ga(X1, X2, X3, s2cA_in_ga(plus(plus(X3, X1), X2)))
   s2cA_in_ga(plus(X1, X2)) -> U45_ga(X1, X2, s2cA_in_ga(plus(X1, X2)))
   s2cA_in_ga(plus(0, X1)) -> s2cA_out_ga(plus(0, X1), X1)
   s2cA_in_ga(plus(X1, X2)) -> U46_ga(X1, X2, s2cA_in_ga(X2))
   s2cA_in_ga(plus(X1, s(X2))) -> U48_ga(X1, X2, isNatcD_in_g(s(X2)))
   s2cA_in_ga(plus(X1, 0)) -> U51_ga(X1, isNatcD_in_g(0))
   s2cA_in_ga(plus(X1, 0)) -> s2cA_out_ga(plus(X1, 0), X1)
   s2cA_in_ga(plus(X1, X2)) -> U53_ga(X1, X2, s2cA_in_ga(X1))
   s2cA_in_ga(plus(X1, X2)) -> U55_ga(X1, X2, isNatcD_in_g(X1))
   U38_ga(X1, X2, X3, s2cA_out_ga(plus(X3, plus(X1, X2)), X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U37_ga(X1, X2, X3, X4, s2cA_out_ga(plus(plus(plus(X1, X2), X3), X4), X5)) -> s2cA_out_ga(plus(X1, plus(X2, plus(X3, X4))), X5)
   U41_ga(X1, X2, X3, s2cA_out_ga(plus(plus(X2, X3), X1), X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U44_ga(X1, X2, X3, s2cA_out_ga(plus(plus(X3, X1), X2), X4)) -> s2cA_out_ga(plus(plus(X1, X2), X3), X4)
   U45_ga(X1, X2, s2cA_out_ga(plus(X1, X2), X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U53_ga(X1, X2, s2cA_out_ga(X1, X4)) -> U54_ga(X1, X2, qcB_in_gaga(X2, X4))
   U54_ga(X1, X2, qcB_out_gaga(X2, X5, X4, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   qcB_in_gaga(X1, X3) -> U59_gaga(X1, X3, s2cA_in_ga(X1))
   U59_gaga(X1, X3, s2cA_out_ga(X1, X2)) -> U60_gaga(X1, X2, X3, s2cA_in_ga(plus(X3, X2)))
   U60_gaga(X1, X2, X3, s2cA_out_ga(plus(X3, X2), X4)) -> qcB_out_gaga(X1, X2, X3, X4)
   U46_ga(X1, X2, s2cA_out_ga(X2, X4)) -> U47_ga(X1, X2, qcB_in_gaga(X1, X4))
   U47_ga(X1, X2, qcB_out_gaga(X1, X5, X4, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U42_ga(X1, X2, X3, s2cA_out_ga(X1, X5)) -> U43_ga(X1, X2, X3, qcB_in_gaga(plus(X2, X3), X5))
   U43_ga(X1, X2, X3, qcB_out_gaga(plus(X2, X3), X6, X5, X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U39_ga(X1, X2, X3, s2cA_out_ga(plus(X1, X2), X5)) -> U40_ga(X1, X2, X3, qcB_in_gaga(X3, X5))
   U40_ga(X1, X2, X3, qcB_out_gaga(X3, X6, X5, X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U48_ga(X1, X2, isNatcD_out_g(s(X2))) -> U49_ga(X1, X2, isNatcD_in_g(X1))
   U49_ga(X1, X2, isNatcD_out_g(X1)) -> U50_ga(X1, X2, addcF_in_gga(X2, X1))
   U51_ga(X1, isNatcD_out_g(0)) -> U52_ga(X1, isNatcD_in_g(X1))
   U52_ga(X1, isNatcD_out_g(X1)) -> s2cA_out_ga(plus(X1, 0), X1)
   U55_ga(X1, X2, isNatcD_out_g(X1)) -> U56_ga(X1, X2, isNatcD_in_g(X2))
   U56_ga(X1, X2, isNatcD_out_g(X2)) -> U57_ga(X1, X2, addcF_in_gga(X1, X2))
   addcF_in_gga(s(X1), X2) -> U62_gga(X1, X2, addcF_in_gga(X1, X2))
   addcF_in_gga(0, X1) -> addcF_out_gga(0, X1, X1)
   U50_ga(X1, X2, addcF_out_gga(X2, X1, X3)) -> s2cA_out_ga(plus(X1, s(X2)), s(X3))
   U57_ga(X1, X2, addcF_out_gga(X1, X2, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U62_gga(X1, X2, addcF_out_gga(X1, X2, X3)) -> addcF_out_gga(s(X1), X2, s(X3))


----------------------------------------

(173)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2A_IN_GA(plus(X1, plus(X2, X3))) -> S2A_IN_GA(plus(X3, plus(X1, X2)))
   S2A_IN_GA(plus(X1, plus(X2, plus(X3, X4)))) -> S2A_IN_GA(plus(plus(plus(X1, X2), X3), X4))
   PB_IN_GAGA(X1, X3) -> S2A_IN_GA(X1)
   S2A_IN_GA(plus(X1, plus(X2, X3))) -> S2A_IN_GA(plus(plus(X2, X3), X1))
   U14_GA(X1, X2, X3, s2cA_out_ga(X1, X5)) -> PB_IN_GAGA(plus(X2, X3), X5)
   PB_IN_GAGA(X1, X3) -> U3_GAGA(X1, X3, s2cA_in_ga(X1))
   S2A_IN_GA(plus(plus(X1, X2), X3)) -> S2A_IN_GA(plus(plus(X3, X1), X2))
   S2A_IN_GA(plus(X1, X2)) -> S2A_IN_GA(plus(X1, X2))

The TRS R consists of the following rules:

   s2cA_in_ga(plus(X1, plus(X2, plus(X3, X4)))) -> U37_ga(X1, X2, X3, X4, s2cA_in_ga(plus(plus(plus(X1, X2), X3), X4)))
   s2cA_in_ga(plus(X1, plus(X2, X3))) -> U38_ga(X1, X2, X3, s2cA_in_ga(plus(X3, plus(X1, X2))))
   s2cA_in_ga(plus(X1, plus(X2, 0))) -> s2cA_out_ga(plus(X1, plus(X2, 0)), plus(X1, X2))
   s2cA_in_ga(plus(X1, plus(X2, X3))) -> U39_ga(X1, X2, X3, s2cA_in_ga(plus(X1, X2)))
   s2cA_in_ga(plus(X1, plus(X2, X3))) -> U41_ga(X1, X2, X3, s2cA_in_ga(plus(plus(X2, X3), X1)))
   s2cA_in_ga(plus(X1, plus(X2, X3))) -> U42_ga(X1, X2, X3, s2cA_in_ga(X1))
   s2cA_in_ga(plus(plus(X1, X2), X3)) -> U44_ga(X1, X2, X3, s2cA_in_ga(plus(plus(X3, X1), X2)))
   s2cA_in_ga(plus(X1, X2)) -> U45_ga(X1, X2, s2cA_in_ga(plus(X1, X2)))
   s2cA_in_ga(plus(0, X1)) -> s2cA_out_ga(plus(0, X1), X1)
   s2cA_in_ga(plus(X1, X2)) -> U46_ga(X1, X2, s2cA_in_ga(X2))
   s2cA_in_ga(plus(X1, s(X2))) -> U48_ga(X1, X2, isNatcD_in_g(s(X2)))
   isNatcD_in_g(s(X1)) -> U58_g(X1, isNatcD_in_g(X1))
   isNatcD_in_g(0) -> isNatcD_out_g(0)
   U58_g(X1, isNatcD_out_g(X1)) -> isNatcD_out_g(s(X1))
   U48_ga(X1, X2, isNatcD_out_g(s(X2))) -> U49_ga(X1, X2, isNatcD_in_g(X1))
   U49_ga(X1, X2, isNatcD_out_g(X1)) -> U50_ga(X1, X2, addcF_in_gga(X2, X1))
   addcF_in_gga(s(X1), X2) -> U62_gga(X1, X2, addcF_in_gga(X1, X2))
   addcF_in_gga(0, X1) -> addcF_out_gga(0, X1, X1)
   U62_gga(X1, X2, addcF_out_gga(X1, X2, X3)) -> addcF_out_gga(s(X1), X2, s(X3))
   U50_ga(X1, X2, addcF_out_gga(X2, X1, X3)) -> s2cA_out_ga(plus(X1, s(X2)), s(X3))
   s2cA_in_ga(plus(X1, 0)) -> U51_ga(X1, isNatcD_in_g(0))
   U51_ga(X1, isNatcD_out_g(0)) -> U52_ga(X1, isNatcD_in_g(X1))
   U52_ga(X1, isNatcD_out_g(X1)) -> s2cA_out_ga(plus(X1, 0), X1)
   s2cA_in_ga(plus(X1, 0)) -> s2cA_out_ga(plus(X1, 0), X1)
   s2cA_in_ga(plus(X1, X2)) -> U53_ga(X1, X2, s2cA_in_ga(X1))
   s2cA_in_ga(plus(X1, X2)) -> U55_ga(X1, X2, isNatcD_in_g(X1))
   U55_ga(X1, X2, isNatcD_out_g(X1)) -> U56_ga(X1, X2, isNatcD_in_g(X2))
   U56_ga(X1, X2, isNatcD_out_g(X2)) -> U57_ga(X1, X2, addcF_in_gga(X1, X2))
   U57_ga(X1, X2, addcF_out_gga(X1, X2, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U53_ga(X1, X2, s2cA_out_ga(X1, X4)) -> U54_ga(X1, X2, qcB_in_gaga(X2, X4))
   qcB_in_gaga(X1, X3) -> U59_gaga(X1, X3, s2cA_in_ga(X1))
   U59_gaga(X1, X3, s2cA_out_ga(X1, X2)) -> U60_gaga(X1, X2, X3, s2cA_in_ga(plus(X3, X2)))
   U60_gaga(X1, X2, X3, s2cA_out_ga(plus(X3, X2), X4)) -> qcB_out_gaga(X1, X2, X3, X4)
   U54_ga(X1, X2, qcB_out_gaga(X2, X5, X4, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U46_ga(X1, X2, s2cA_out_ga(X2, X4)) -> U47_ga(X1, X2, qcB_in_gaga(X1, X4))
   U47_ga(X1, X2, qcB_out_gaga(X1, X5, X4, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U45_ga(X1, X2, s2cA_out_ga(plus(X1, X2), X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U44_ga(X1, X2, X3, s2cA_out_ga(plus(plus(X3, X1), X2), X4)) -> s2cA_out_ga(plus(plus(X1, X2), X3), X4)
   U42_ga(X1, X2, X3, s2cA_out_ga(X1, X5)) -> U43_ga(X1, X2, X3, qcB_in_gaga(plus(X2, X3), X5))
   U43_ga(X1, X2, X3, qcB_out_gaga(plus(X2, X3), X6, X5, X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U41_ga(X1, X2, X3, s2cA_out_ga(plus(plus(X2, X3), X1), X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U39_ga(X1, X2, X3, s2cA_out_ga(plus(X1, X2), X5)) -> U40_ga(X1, X2, X3, qcB_in_gaga(X3, X5))
   U40_ga(X1, X2, X3, qcB_out_gaga(X3, X6, X5, X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U38_ga(X1, X2, X3, s2cA_out_ga(plus(X3, plus(X1, X2)), X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U37_ga(X1, X2, X3, X4, s2cA_out_ga(plus(plus(plus(X1, X2), X3), X4), X5)) -> s2cA_out_ga(plus(X1, plus(X2, plus(X3, X4))), X5)

The set Q consists of the following terms:

   s2cA_in_ga(x0)
   isNatcD_in_g(x0)
   U58_g(x0, x1)
   U48_ga(x0, x1, x2)
   U49_ga(x0, x1, x2)
   addcF_in_gga(x0, x1)
   U62_gga(x0, x1, x2)
   U50_ga(x0, x1, x2)
   U51_ga(x0, x1)
   U52_ga(x0, x1)
   U55_ga(x0, x1, x2)
   U56_ga(x0, x1, x2)
   U57_ga(x0, x1, x2)
   U53_ga(x0, x1, x2)
   qcB_in_gaga(x0, x1)
   U59_gaga(x0, x1, x2)
   U60_gaga(x0, x1, x2, x3)
   U54_ga(x0, x1, x2)
   U46_ga(x0, x1, x2)
   U47_ga(x0, x1, x2)
   U45_ga(x0, x1, x2)
   U44_ga(x0, x1, x2, x3)
   U42_ga(x0, x1, x2, x3)
   U43_ga(x0, x1, x2, x3)
   U41_ga(x0, x1, x2, x3)
   U39_ga(x0, x1, x2, x3)
   U40_ga(x0, x1, x2, x3)
   U38_ga(x0, x1, x2, x3)
   U37_ga(x0, x1, x2, x3, x4)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(174) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 3 less nodes.
----------------------------------------

(175)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2A_IN_GA(plus(X1, plus(X2, plus(X3, X4)))) -> S2A_IN_GA(plus(plus(plus(X1, X2), X3), X4))
   S2A_IN_GA(plus(X1, plus(X2, X3))) -> S2A_IN_GA(plus(X3, plus(X1, X2)))
   S2A_IN_GA(plus(X1, plus(X2, X3))) -> S2A_IN_GA(plus(plus(X2, X3), X1))
   S2A_IN_GA(plus(plus(X1, X2), X3)) -> S2A_IN_GA(plus(plus(X3, X1), X2))
   S2A_IN_GA(plus(X1, X2)) -> S2A_IN_GA(plus(X1, X2))

The TRS R consists of the following rules:

   s2cA_in_ga(plus(X1, plus(X2, plus(X3, X4)))) -> U37_ga(X1, X2, X3, X4, s2cA_in_ga(plus(plus(plus(X1, X2), X3), X4)))
   s2cA_in_ga(plus(X1, plus(X2, X3))) -> U38_ga(X1, X2, X3, s2cA_in_ga(plus(X3, plus(X1, X2))))
   s2cA_in_ga(plus(X1, plus(X2, 0))) -> s2cA_out_ga(plus(X1, plus(X2, 0)), plus(X1, X2))
   s2cA_in_ga(plus(X1, plus(X2, X3))) -> U39_ga(X1, X2, X3, s2cA_in_ga(plus(X1, X2)))
   s2cA_in_ga(plus(X1, plus(X2, X3))) -> U41_ga(X1, X2, X3, s2cA_in_ga(plus(plus(X2, X3), X1)))
   s2cA_in_ga(plus(X1, plus(X2, X3))) -> U42_ga(X1, X2, X3, s2cA_in_ga(X1))
   s2cA_in_ga(plus(plus(X1, X2), X3)) -> U44_ga(X1, X2, X3, s2cA_in_ga(plus(plus(X3, X1), X2)))
   s2cA_in_ga(plus(X1, X2)) -> U45_ga(X1, X2, s2cA_in_ga(plus(X1, X2)))
   s2cA_in_ga(plus(0, X1)) -> s2cA_out_ga(plus(0, X1), X1)
   s2cA_in_ga(plus(X1, X2)) -> U46_ga(X1, X2, s2cA_in_ga(X2))
   s2cA_in_ga(plus(X1, s(X2))) -> U48_ga(X1, X2, isNatcD_in_g(s(X2)))
   isNatcD_in_g(s(X1)) -> U58_g(X1, isNatcD_in_g(X1))
   isNatcD_in_g(0) -> isNatcD_out_g(0)
   U58_g(X1, isNatcD_out_g(X1)) -> isNatcD_out_g(s(X1))
   U48_ga(X1, X2, isNatcD_out_g(s(X2))) -> U49_ga(X1, X2, isNatcD_in_g(X1))
   U49_ga(X1, X2, isNatcD_out_g(X1)) -> U50_ga(X1, X2, addcF_in_gga(X2, X1))
   addcF_in_gga(s(X1), X2) -> U62_gga(X1, X2, addcF_in_gga(X1, X2))
   addcF_in_gga(0, X1) -> addcF_out_gga(0, X1, X1)
   U62_gga(X1, X2, addcF_out_gga(X1, X2, X3)) -> addcF_out_gga(s(X1), X2, s(X3))
   U50_ga(X1, X2, addcF_out_gga(X2, X1, X3)) -> s2cA_out_ga(plus(X1, s(X2)), s(X3))
   s2cA_in_ga(plus(X1, 0)) -> U51_ga(X1, isNatcD_in_g(0))
   U51_ga(X1, isNatcD_out_g(0)) -> U52_ga(X1, isNatcD_in_g(X1))
   U52_ga(X1, isNatcD_out_g(X1)) -> s2cA_out_ga(plus(X1, 0), X1)
   s2cA_in_ga(plus(X1, 0)) -> s2cA_out_ga(plus(X1, 0), X1)
   s2cA_in_ga(plus(X1, X2)) -> U53_ga(X1, X2, s2cA_in_ga(X1))
   s2cA_in_ga(plus(X1, X2)) -> U55_ga(X1, X2, isNatcD_in_g(X1))
   U55_ga(X1, X2, isNatcD_out_g(X1)) -> U56_ga(X1, X2, isNatcD_in_g(X2))
   U56_ga(X1, X2, isNatcD_out_g(X2)) -> U57_ga(X1, X2, addcF_in_gga(X1, X2))
   U57_ga(X1, X2, addcF_out_gga(X1, X2, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U53_ga(X1, X2, s2cA_out_ga(X1, X4)) -> U54_ga(X1, X2, qcB_in_gaga(X2, X4))
   qcB_in_gaga(X1, X3) -> U59_gaga(X1, X3, s2cA_in_ga(X1))
   U59_gaga(X1, X3, s2cA_out_ga(X1, X2)) -> U60_gaga(X1, X2, X3, s2cA_in_ga(plus(X3, X2)))
   U60_gaga(X1, X2, X3, s2cA_out_ga(plus(X3, X2), X4)) -> qcB_out_gaga(X1, X2, X3, X4)
   U54_ga(X1, X2, qcB_out_gaga(X2, X5, X4, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U46_ga(X1, X2, s2cA_out_ga(X2, X4)) -> U47_ga(X1, X2, qcB_in_gaga(X1, X4))
   U47_ga(X1, X2, qcB_out_gaga(X1, X5, X4, X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U45_ga(X1, X2, s2cA_out_ga(plus(X1, X2), X3)) -> s2cA_out_ga(plus(X1, X2), X3)
   U44_ga(X1, X2, X3, s2cA_out_ga(plus(plus(X3, X1), X2), X4)) -> s2cA_out_ga(plus(plus(X1, X2), X3), X4)
   U42_ga(X1, X2, X3, s2cA_out_ga(X1, X5)) -> U43_ga(X1, X2, X3, qcB_in_gaga(plus(X2, X3), X5))
   U43_ga(X1, X2, X3, qcB_out_gaga(plus(X2, X3), X6, X5, X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U41_ga(X1, X2, X3, s2cA_out_ga(plus(plus(X2, X3), X1), X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U39_ga(X1, X2, X3, s2cA_out_ga(plus(X1, X2), X5)) -> U40_ga(X1, X2, X3, qcB_in_gaga(X3, X5))
   U40_ga(X1, X2, X3, qcB_out_gaga(X3, X6, X5, X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U38_ga(X1, X2, X3, s2cA_out_ga(plus(X3, plus(X1, X2)), X4)) -> s2cA_out_ga(plus(X1, plus(X2, X3)), X4)
   U37_ga(X1, X2, X3, X4, s2cA_out_ga(plus(plus(plus(X1, X2), X3), X4), X5)) -> s2cA_out_ga(plus(X1, plus(X2, plus(X3, X4))), X5)

The set Q consists of the following terms:

   s2cA_in_ga(x0)
   isNatcD_in_g(x0)
   U58_g(x0, x1)
   U48_ga(x0, x1, x2)
   U49_ga(x0, x1, x2)
   addcF_in_gga(x0, x1)
   U62_gga(x0, x1, x2)
   U50_ga(x0, x1, x2)
   U51_ga(x0, x1)
   U52_ga(x0, x1)
   U55_ga(x0, x1, x2)
   U56_ga(x0, x1, x2)
   U57_ga(x0, x1, x2)
   U53_ga(x0, x1, x2)
   qcB_in_gaga(x0, x1)
   U59_gaga(x0, x1, x2)
   U60_gaga(x0, x1, x2, x3)
   U54_ga(x0, x1, x2)
   U46_ga(x0, x1, x2)
   U47_ga(x0, x1, x2)
   U45_ga(x0, x1, x2)
   U44_ga(x0, x1, x2, x3)
   U42_ga(x0, x1, x2, x3)
   U43_ga(x0, x1, x2, x3)
   U41_ga(x0, x1, x2, x3)
   U39_ga(x0, x1, x2, x3)
   U40_ga(x0, x1, x2, x3)
   U38_ga(x0, x1, x2, x3)
   U37_ga(x0, x1, x2, x3, x4)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(176) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(177)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2A_IN_GA(plus(X1, plus(X2, plus(X3, X4)))) -> S2A_IN_GA(plus(plus(plus(X1, X2), X3), X4))
   S2A_IN_GA(plus(X1, plus(X2, X3))) -> S2A_IN_GA(plus(X3, plus(X1, X2)))
   S2A_IN_GA(plus(X1, plus(X2, X3))) -> S2A_IN_GA(plus(plus(X2, X3), X1))
   S2A_IN_GA(plus(plus(X1, X2), X3)) -> S2A_IN_GA(plus(plus(X3, X1), X2))
   S2A_IN_GA(plus(X1, X2)) -> S2A_IN_GA(plus(X1, X2))

R is empty.
The set Q consists of the following terms:

   s2cA_in_ga(x0)
   isNatcD_in_g(x0)
   U58_g(x0, x1)
   U48_ga(x0, x1, x2)
   U49_ga(x0, x1, x2)
   addcF_in_gga(x0, x1)
   U62_gga(x0, x1, x2)
   U50_ga(x0, x1, x2)
   U51_ga(x0, x1)
   U52_ga(x0, x1)
   U55_ga(x0, x1, x2)
   U56_ga(x0, x1, x2)
   U57_ga(x0, x1, x2)
   U53_ga(x0, x1, x2)
   qcB_in_gaga(x0, x1)
   U59_gaga(x0, x1, x2)
   U60_gaga(x0, x1, x2, x3)
   U54_ga(x0, x1, x2)
   U46_ga(x0, x1, x2)
   U47_ga(x0, x1, x2)
   U45_ga(x0, x1, x2)
   U44_ga(x0, x1, x2, x3)
   U42_ga(x0, x1, x2, x3)
   U43_ga(x0, x1, x2, x3)
   U41_ga(x0, x1, x2, x3)
   U39_ga(x0, x1, x2, x3)
   U40_ga(x0, x1, x2, x3)
   U38_ga(x0, x1, x2, x3)
   U37_ga(x0, x1, x2, x3, x4)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(178) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   s2cA_in_ga(x0)
   isNatcD_in_g(x0)
   U58_g(x0, x1)
   U48_ga(x0, x1, x2)
   U49_ga(x0, x1, x2)
   addcF_in_gga(x0, x1)
   U62_gga(x0, x1, x2)
   U50_ga(x0, x1, x2)
   U51_ga(x0, x1)
   U52_ga(x0, x1)
   U55_ga(x0, x1, x2)
   U56_ga(x0, x1, x2)
   U57_ga(x0, x1, x2)
   U53_ga(x0, x1, x2)
   qcB_in_gaga(x0, x1)
   U59_gaga(x0, x1, x2)
   U60_gaga(x0, x1, x2, x3)
   U54_ga(x0, x1, x2)
   U46_ga(x0, x1, x2)
   U47_ga(x0, x1, x2)
   U45_ga(x0, x1, x2)
   U44_ga(x0, x1, x2, x3)
   U42_ga(x0, x1, x2, x3)
   U43_ga(x0, x1, x2, x3)
   U41_ga(x0, x1, x2, x3)
   U39_ga(x0, x1, x2, x3)
   U40_ga(x0, x1, x2, x3)
   U38_ga(x0, x1, x2, x3)
   U37_ga(x0, x1, x2, x3, x4)


----------------------------------------

(179)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   S2A_IN_GA(plus(X1, plus(X2, plus(X3, X4)))) -> S2A_IN_GA(plus(plus(plus(X1, X2), X3), X4))
   S2A_IN_GA(plus(X1, plus(X2, X3))) -> S2A_IN_GA(plus(X3, plus(X1, X2)))
   S2A_IN_GA(plus(X1, plus(X2, X3))) -> S2A_IN_GA(plus(plus(X2, X3), X1))
   S2A_IN_GA(plus(plus(X1, X2), X3)) -> S2A_IN_GA(plus(plus(X3, X1), X2))
   S2A_IN_GA(plus(X1, X2)) -> S2A_IN_GA(plus(X1, X2))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.