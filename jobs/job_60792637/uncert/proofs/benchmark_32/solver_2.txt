YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/GMVhY.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

insert(a,a,g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 4 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) PiDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) PiDP
        (24) PiDPToQDPProof [SOUND, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) PiDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) PiDP
        (31) PiDPToQDPProof [SOUND, 0 ms]
        (32) QDP
        (33) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (34) YES
    (35) PiDP
        (36) UsableRulesProof [EQUIVALENT, 0 ms]
        (37) PiDP
        (38) PiDPToQDPProof [SOUND, 0 ms]
        (39) QDP
        (40) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (41) YES


----------------------------------------

(0)
Obligation:
Clauses:

insert(X, void, tree(X, void, void)).
insert(X, tree(X, Left, Right), tree(X, Left, Right)).
insert(X, tree(Y, Left, Right), tree(Y, Left1, Right)) :- ','(less(X, Y), insert(X, Left, Left1)).
insert(X, tree(Y, Left, Right), tree(Y, Left, Right1)) :- ','(less(Y, X), insert(X, Right, Right1)).
less(0, s(X1)).
less(s(X), s(Y)) :- less(X, Y).


Query: insert(a,a,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

insert_in_3: (f,f,b) (b,f,b)

less_in_2: (f,b) (b,b) (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   insert_in_aag(X, void, tree(X, void, void)) -> insert_out_aag(X, void, tree(X, void, void))
   insert_in_aag(X, tree(X, Left, Right), tree(X, Left, Right)) -> insert_out_aag(X, tree(X, Left, Right), tree(X, Left, Right))
   insert_in_aag(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_aag(X, Y, Left, Right, Left1, less_in_ag(X, Y))
   less_in_ag(0, s(X1)) -> less_out_ag(0, s(X1))
   less_in_ag(s(X), s(Y)) -> U5_ag(X, Y, less_in_ag(X, Y))
   U5_ag(X, Y, less_out_ag(X, Y)) -> less_out_ag(s(X), s(Y))
   U1_aag(X, Y, Left, Right, Left1, less_out_ag(X, Y)) -> U2_aag(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   insert_in_gag(X, void, tree(X, void, void)) -> insert_out_gag(X, void, tree(X, void, void))
   insert_in_gag(X, tree(X, Left, Right), tree(X, Left, Right)) -> insert_out_gag(X, tree(X, Left, Right), tree(X, Left, Right))
   insert_in_gag(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_gag(X, Y, Left, Right, Left1, less_in_gg(X, Y))
   less_in_gg(0, s(X1)) -> less_out_gg(0, s(X1))
   less_in_gg(s(X), s(Y)) -> U5_gg(X, Y, less_in_gg(X, Y))
   U5_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U1_gag(X, Y, Left, Right, Left1, less_out_gg(X, Y)) -> U2_gag(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   insert_in_gag(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_gag(X, Y, Left, Right, Right1, less_in_gg(Y, X))
   U3_gag(X, Y, Left, Right, Right1, less_out_gg(Y, X)) -> U4_gag(X, Y, Left, Right, Right1, insert_in_gag(X, Right, Right1))
   U4_gag(X, Y, Left, Right, Right1, insert_out_gag(X, Right, Right1)) -> insert_out_gag(X, tree(Y, Left, Right), tree(Y, Left, Right1))
   U2_gag(X, Y, Left, Right, Left1, insert_out_gag(X, Left, Left1)) -> insert_out_gag(X, tree(Y, Left, Right), tree(Y, Left1, Right))
   U2_aag(X, Y, Left, Right, Left1, insert_out_gag(X, Left, Left1)) -> insert_out_aag(X, tree(Y, Left, Right), tree(Y, Left1, Right))
   insert_in_aag(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_aag(X, Y, Left, Right, Right1, less_in_ga(Y, X))
   less_in_ga(0, s(X1)) -> less_out_ga(0, s(X1))
   less_in_ga(s(X), s(Y)) -> U5_ga(X, Y, less_in_ga(X, Y))
   U5_ga(X, Y, less_out_ga(X, Y)) -> less_out_ga(s(X), s(Y))
   U3_aag(X, Y, Left, Right, Right1, less_out_ga(Y, X)) -> U4_aag(X, Y, Left, Right, Right1, insert_in_aag(X, Right, Right1))
   U4_aag(X, Y, Left, Right, Right1, insert_out_aag(X, Right, Right1)) -> insert_out_aag(X, tree(Y, Left, Right), tree(Y, Left, Right1))

The argument filtering Pi contains the following mapping:
insert_in_aag(x1, x2, x3)  =  insert_in_aag(x3)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

void  =  void

insert_out_aag(x1, x2, x3)  =  insert_out_aag(x1, x2, x3)

U1_aag(x1, x2, x3, x4, x5, x6)  =  U1_aag(x2, x4, x5, x6)

less_in_ag(x1, x2)  =  less_in_ag(x2)

s(x1)  =  s(x1)

less_out_ag(x1, x2)  =  less_out_ag(x1, x2)

U5_ag(x1, x2, x3)  =  U5_ag(x2, x3)

U2_aag(x1, x2, x3, x4, x5, x6)  =  U2_aag(x1, x2, x4, x5, x6)

insert_in_gag(x1, x2, x3)  =  insert_in_gag(x1, x3)

insert_out_gag(x1, x2, x3)  =  insert_out_gag(x1, x2, x3)

U1_gag(x1, x2, x3, x4, x5, x6)  =  U1_gag(x1, x2, x4, x5, x6)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

less_out_gg(x1, x2)  =  less_out_gg(x1, x2)

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

U2_gag(x1, x2, x3, x4, x5, x6)  =  U2_gag(x1, x2, x4, x5, x6)

U3_gag(x1, x2, x3, x4, x5, x6)  =  U3_gag(x1, x2, x3, x5, x6)

U4_gag(x1, x2, x3, x4, x5, x6)  =  U4_gag(x1, x2, x3, x5, x6)

U3_aag(x1, x2, x3, x4, x5, x6)  =  U3_aag(x2, x3, x5, x6)

less_in_ga(x1, x2)  =  less_in_ga(x1)

less_out_ga(x1, x2)  =  less_out_ga(x1)

U5_ga(x1, x2, x3)  =  U5_ga(x1, x3)

U4_aag(x1, x2, x3, x4, x5, x6)  =  U4_aag(x2, x3, x5, x6)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   insert_in_aag(X, void, tree(X, void, void)) -> insert_out_aag(X, void, tree(X, void, void))
   insert_in_aag(X, tree(X, Left, Right), tree(X, Left, Right)) -> insert_out_aag(X, tree(X, Left, Right), tree(X, Left, Right))
   insert_in_aag(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_aag(X, Y, Left, Right, Left1, less_in_ag(X, Y))
   less_in_ag(0, s(X1)) -> less_out_ag(0, s(X1))
   less_in_ag(s(X), s(Y)) -> U5_ag(X, Y, less_in_ag(X, Y))
   U5_ag(X, Y, less_out_ag(X, Y)) -> less_out_ag(s(X), s(Y))
   U1_aag(X, Y, Left, Right, Left1, less_out_ag(X, Y)) -> U2_aag(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   insert_in_gag(X, void, tree(X, void, void)) -> insert_out_gag(X, void, tree(X, void, void))
   insert_in_gag(X, tree(X, Left, Right), tree(X, Left, Right)) -> insert_out_gag(X, tree(X, Left, Right), tree(X, Left, Right))
   insert_in_gag(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_gag(X, Y, Left, Right, Left1, less_in_gg(X, Y))
   less_in_gg(0, s(X1)) -> less_out_gg(0, s(X1))
   less_in_gg(s(X), s(Y)) -> U5_gg(X, Y, less_in_gg(X, Y))
   U5_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U1_gag(X, Y, Left, Right, Left1, less_out_gg(X, Y)) -> U2_gag(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   insert_in_gag(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_gag(X, Y, Left, Right, Right1, less_in_gg(Y, X))
   U3_gag(X, Y, Left, Right, Right1, less_out_gg(Y, X)) -> U4_gag(X, Y, Left, Right, Right1, insert_in_gag(X, Right, Right1))
   U4_gag(X, Y, Left, Right, Right1, insert_out_gag(X, Right, Right1)) -> insert_out_gag(X, tree(Y, Left, Right), tree(Y, Left, Right1))
   U2_gag(X, Y, Left, Right, Left1, insert_out_gag(X, Left, Left1)) -> insert_out_gag(X, tree(Y, Left, Right), tree(Y, Left1, Right))
   U2_aag(X, Y, Left, Right, Left1, insert_out_gag(X, Left, Left1)) -> insert_out_aag(X, tree(Y, Left, Right), tree(Y, Left1, Right))
   insert_in_aag(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_aag(X, Y, Left, Right, Right1, less_in_ga(Y, X))
   less_in_ga(0, s(X1)) -> less_out_ga(0, s(X1))
   less_in_ga(s(X), s(Y)) -> U5_ga(X, Y, less_in_ga(X, Y))
   U5_ga(X, Y, less_out_ga(X, Y)) -> less_out_ga(s(X), s(Y))
   U3_aag(X, Y, Left, Right, Right1, less_out_ga(Y, X)) -> U4_aag(X, Y, Left, Right, Right1, insert_in_aag(X, Right, Right1))
   U4_aag(X, Y, Left, Right, Right1, insert_out_aag(X, Right, Right1)) -> insert_out_aag(X, tree(Y, Left, Right), tree(Y, Left, Right1))

The argument filtering Pi contains the following mapping:
insert_in_aag(x1, x2, x3)  =  insert_in_aag(x3)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

void  =  void

insert_out_aag(x1, x2, x3)  =  insert_out_aag(x1, x2, x3)

U1_aag(x1, x2, x3, x4, x5, x6)  =  U1_aag(x2, x4, x5, x6)

less_in_ag(x1, x2)  =  less_in_ag(x2)

s(x1)  =  s(x1)

less_out_ag(x1, x2)  =  less_out_ag(x1, x2)

U5_ag(x1, x2, x3)  =  U5_ag(x2, x3)

U2_aag(x1, x2, x3, x4, x5, x6)  =  U2_aag(x1, x2, x4, x5, x6)

insert_in_gag(x1, x2, x3)  =  insert_in_gag(x1, x3)

insert_out_gag(x1, x2, x3)  =  insert_out_gag(x1, x2, x3)

U1_gag(x1, x2, x3, x4, x5, x6)  =  U1_gag(x1, x2, x4, x5, x6)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

less_out_gg(x1, x2)  =  less_out_gg(x1, x2)

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

U2_gag(x1, x2, x3, x4, x5, x6)  =  U2_gag(x1, x2, x4, x5, x6)

U3_gag(x1, x2, x3, x4, x5, x6)  =  U3_gag(x1, x2, x3, x5, x6)

U4_gag(x1, x2, x3, x4, x5, x6)  =  U4_gag(x1, x2, x3, x5, x6)

U3_aag(x1, x2, x3, x4, x5, x6)  =  U3_aag(x2, x3, x5, x6)

less_in_ga(x1, x2)  =  less_in_ga(x1)

less_out_ga(x1, x2)  =  less_out_ga(x1)

U5_ga(x1, x2, x3)  =  U5_ga(x1, x3)

U4_aag(x1, x2, x3, x4, x5, x6)  =  U4_aag(x2, x3, x5, x6)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   INSERT_IN_AAG(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_AAG(X, Y, Left, Right, Left1, less_in_ag(X, Y))
   INSERT_IN_AAG(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> LESS_IN_AG(X, Y)
   LESS_IN_AG(s(X), s(Y)) -> U5_AG(X, Y, less_in_ag(X, Y))
   LESS_IN_AG(s(X), s(Y)) -> LESS_IN_AG(X, Y)
   U1_AAG(X, Y, Left, Right, Left1, less_out_ag(X, Y)) -> U2_AAG(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   U1_AAG(X, Y, Left, Right, Left1, less_out_ag(X, Y)) -> INSERT_IN_GAG(X, Left, Left1)
   INSERT_IN_GAG(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_GAG(X, Y, Left, Right, Left1, less_in_gg(X, Y))
   INSERT_IN_GAG(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> LESS_IN_GG(X, Y)
   LESS_IN_GG(s(X), s(Y)) -> U5_GG(X, Y, less_in_gg(X, Y))
   LESS_IN_GG(s(X), s(Y)) -> LESS_IN_GG(X, Y)
   U1_GAG(X, Y, Left, Right, Left1, less_out_gg(X, Y)) -> U2_GAG(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   U1_GAG(X, Y, Left, Right, Left1, less_out_gg(X, Y)) -> INSERT_IN_GAG(X, Left, Left1)
   INSERT_IN_GAG(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_GAG(X, Y, Left, Right, Right1, less_in_gg(Y, X))
   INSERT_IN_GAG(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> LESS_IN_GG(Y, X)
   U3_GAG(X, Y, Left, Right, Right1, less_out_gg(Y, X)) -> U4_GAG(X, Y, Left, Right, Right1, insert_in_gag(X, Right, Right1))
   U3_GAG(X, Y, Left, Right, Right1, less_out_gg(Y, X)) -> INSERT_IN_GAG(X, Right, Right1)
   INSERT_IN_AAG(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_AAG(X, Y, Left, Right, Right1, less_in_ga(Y, X))
   INSERT_IN_AAG(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> LESS_IN_GA(Y, X)
   LESS_IN_GA(s(X), s(Y)) -> U5_GA(X, Y, less_in_ga(X, Y))
   LESS_IN_GA(s(X), s(Y)) -> LESS_IN_GA(X, Y)
   U3_AAG(X, Y, Left, Right, Right1, less_out_ga(Y, X)) -> U4_AAG(X, Y, Left, Right, Right1, insert_in_aag(X, Right, Right1))
   U3_AAG(X, Y, Left, Right, Right1, less_out_ga(Y, X)) -> INSERT_IN_AAG(X, Right, Right1)

The TRS R consists of the following rules:

   insert_in_aag(X, void, tree(X, void, void)) -> insert_out_aag(X, void, tree(X, void, void))
   insert_in_aag(X, tree(X, Left, Right), tree(X, Left, Right)) -> insert_out_aag(X, tree(X, Left, Right), tree(X, Left, Right))
   insert_in_aag(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_aag(X, Y, Left, Right, Left1, less_in_ag(X, Y))
   less_in_ag(0, s(X1)) -> less_out_ag(0, s(X1))
   less_in_ag(s(X), s(Y)) -> U5_ag(X, Y, less_in_ag(X, Y))
   U5_ag(X, Y, less_out_ag(X, Y)) -> less_out_ag(s(X), s(Y))
   U1_aag(X, Y, Left, Right, Left1, less_out_ag(X, Y)) -> U2_aag(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   insert_in_gag(X, void, tree(X, void, void)) -> insert_out_gag(X, void, tree(X, void, void))
   insert_in_gag(X, tree(X, Left, Right), tree(X, Left, Right)) -> insert_out_gag(X, tree(X, Left, Right), tree(X, Left, Right))
   insert_in_gag(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_gag(X, Y, Left, Right, Left1, less_in_gg(X, Y))
   less_in_gg(0, s(X1)) -> less_out_gg(0, s(X1))
   less_in_gg(s(X), s(Y)) -> U5_gg(X, Y, less_in_gg(X, Y))
   U5_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U1_gag(X, Y, Left, Right, Left1, less_out_gg(X, Y)) -> U2_gag(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   insert_in_gag(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_gag(X, Y, Left, Right, Right1, less_in_gg(Y, X))
   U3_gag(X, Y, Left, Right, Right1, less_out_gg(Y, X)) -> U4_gag(X, Y, Left, Right, Right1, insert_in_gag(X, Right, Right1))
   U4_gag(X, Y, Left, Right, Right1, insert_out_gag(X, Right, Right1)) -> insert_out_gag(X, tree(Y, Left, Right), tree(Y, Left, Right1))
   U2_gag(X, Y, Left, Right, Left1, insert_out_gag(X, Left, Left1)) -> insert_out_gag(X, tree(Y, Left, Right), tree(Y, Left1, Right))
   U2_aag(X, Y, Left, Right, Left1, insert_out_gag(X, Left, Left1)) -> insert_out_aag(X, tree(Y, Left, Right), tree(Y, Left1, Right))
   insert_in_aag(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_aag(X, Y, Left, Right, Right1, less_in_ga(Y, X))
   less_in_ga(0, s(X1)) -> less_out_ga(0, s(X1))
   less_in_ga(s(X), s(Y)) -> U5_ga(X, Y, less_in_ga(X, Y))
   U5_ga(X, Y, less_out_ga(X, Y)) -> less_out_ga(s(X), s(Y))
   U3_aag(X, Y, Left, Right, Right1, less_out_ga(Y, X)) -> U4_aag(X, Y, Left, Right, Right1, insert_in_aag(X, Right, Right1))
   U4_aag(X, Y, Left, Right, Right1, insert_out_aag(X, Right, Right1)) -> insert_out_aag(X, tree(Y, Left, Right), tree(Y, Left, Right1))

The argument filtering Pi contains the following mapping:
insert_in_aag(x1, x2, x3)  =  insert_in_aag(x3)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

void  =  void

insert_out_aag(x1, x2, x3)  =  insert_out_aag(x1, x2, x3)

U1_aag(x1, x2, x3, x4, x5, x6)  =  U1_aag(x2, x4, x5, x6)

less_in_ag(x1, x2)  =  less_in_ag(x2)

s(x1)  =  s(x1)

less_out_ag(x1, x2)  =  less_out_ag(x1, x2)

U5_ag(x1, x2, x3)  =  U5_ag(x2, x3)

U2_aag(x1, x2, x3, x4, x5, x6)  =  U2_aag(x1, x2, x4, x5, x6)

insert_in_gag(x1, x2, x3)  =  insert_in_gag(x1, x3)

insert_out_gag(x1, x2, x3)  =  insert_out_gag(x1, x2, x3)

U1_gag(x1, x2, x3, x4, x5, x6)  =  U1_gag(x1, x2, x4, x5, x6)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

less_out_gg(x1, x2)  =  less_out_gg(x1, x2)

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

U2_gag(x1, x2, x3, x4, x5, x6)  =  U2_gag(x1, x2, x4, x5, x6)

U3_gag(x1, x2, x3, x4, x5, x6)  =  U3_gag(x1, x2, x3, x5, x6)

U4_gag(x1, x2, x3, x4, x5, x6)  =  U4_gag(x1, x2, x3, x5, x6)

U3_aag(x1, x2, x3, x4, x5, x6)  =  U3_aag(x2, x3, x5, x6)

less_in_ga(x1, x2)  =  less_in_ga(x1)

less_out_ga(x1, x2)  =  less_out_ga(x1)

U5_ga(x1, x2, x3)  =  U5_ga(x1, x3)

U4_aag(x1, x2, x3, x4, x5, x6)  =  U4_aag(x2, x3, x5, x6)

INSERT_IN_AAG(x1, x2, x3)  =  INSERT_IN_AAG(x3)

U1_AAG(x1, x2, x3, x4, x5, x6)  =  U1_AAG(x2, x4, x5, x6)

LESS_IN_AG(x1, x2)  =  LESS_IN_AG(x2)

U5_AG(x1, x2, x3)  =  U5_AG(x2, x3)

U2_AAG(x1, x2, x3, x4, x5, x6)  =  U2_AAG(x1, x2, x4, x5, x6)

INSERT_IN_GAG(x1, x2, x3)  =  INSERT_IN_GAG(x1, x3)

U1_GAG(x1, x2, x3, x4, x5, x6)  =  U1_GAG(x1, x2, x4, x5, x6)

LESS_IN_GG(x1, x2)  =  LESS_IN_GG(x1, x2)

U5_GG(x1, x2, x3)  =  U5_GG(x1, x2, x3)

U2_GAG(x1, x2, x3, x4, x5, x6)  =  U2_GAG(x1, x2, x4, x5, x6)

U3_GAG(x1, x2, x3, x4, x5, x6)  =  U3_GAG(x1, x2, x3, x5, x6)

U4_GAG(x1, x2, x3, x4, x5, x6)  =  U4_GAG(x1, x2, x3, x5, x6)

U3_AAG(x1, x2, x3, x4, x5, x6)  =  U3_AAG(x2, x3, x5, x6)

LESS_IN_GA(x1, x2)  =  LESS_IN_GA(x1)

U5_GA(x1, x2, x3)  =  U5_GA(x1, x3)

U4_AAG(x1, x2, x3, x4, x5, x6)  =  U4_AAG(x2, x3, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   INSERT_IN_AAG(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_AAG(X, Y, Left, Right, Left1, less_in_ag(X, Y))
   INSERT_IN_AAG(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> LESS_IN_AG(X, Y)
   LESS_IN_AG(s(X), s(Y)) -> U5_AG(X, Y, less_in_ag(X, Y))
   LESS_IN_AG(s(X), s(Y)) -> LESS_IN_AG(X, Y)
   U1_AAG(X, Y, Left, Right, Left1, less_out_ag(X, Y)) -> U2_AAG(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   U1_AAG(X, Y, Left, Right, Left1, less_out_ag(X, Y)) -> INSERT_IN_GAG(X, Left, Left1)
   INSERT_IN_GAG(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_GAG(X, Y, Left, Right, Left1, less_in_gg(X, Y))
   INSERT_IN_GAG(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> LESS_IN_GG(X, Y)
   LESS_IN_GG(s(X), s(Y)) -> U5_GG(X, Y, less_in_gg(X, Y))
   LESS_IN_GG(s(X), s(Y)) -> LESS_IN_GG(X, Y)
   U1_GAG(X, Y, Left, Right, Left1, less_out_gg(X, Y)) -> U2_GAG(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   U1_GAG(X, Y, Left, Right, Left1, less_out_gg(X, Y)) -> INSERT_IN_GAG(X, Left, Left1)
   INSERT_IN_GAG(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_GAG(X, Y, Left, Right, Right1, less_in_gg(Y, X))
   INSERT_IN_GAG(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> LESS_IN_GG(Y, X)
   U3_GAG(X, Y, Left, Right, Right1, less_out_gg(Y, X)) -> U4_GAG(X, Y, Left, Right, Right1, insert_in_gag(X, Right, Right1))
   U3_GAG(X, Y, Left, Right, Right1, less_out_gg(Y, X)) -> INSERT_IN_GAG(X, Right, Right1)
   INSERT_IN_AAG(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_AAG(X, Y, Left, Right, Right1, less_in_ga(Y, X))
   INSERT_IN_AAG(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> LESS_IN_GA(Y, X)
   LESS_IN_GA(s(X), s(Y)) -> U5_GA(X, Y, less_in_ga(X, Y))
   LESS_IN_GA(s(X), s(Y)) -> LESS_IN_GA(X, Y)
   U3_AAG(X, Y, Left, Right, Right1, less_out_ga(Y, X)) -> U4_AAG(X, Y, Left, Right, Right1, insert_in_aag(X, Right, Right1))
   U3_AAG(X, Y, Left, Right, Right1, less_out_ga(Y, X)) -> INSERT_IN_AAG(X, Right, Right1)

The TRS R consists of the following rules:

   insert_in_aag(X, void, tree(X, void, void)) -> insert_out_aag(X, void, tree(X, void, void))
   insert_in_aag(X, tree(X, Left, Right), tree(X, Left, Right)) -> insert_out_aag(X, tree(X, Left, Right), tree(X, Left, Right))
   insert_in_aag(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_aag(X, Y, Left, Right, Left1, less_in_ag(X, Y))
   less_in_ag(0, s(X1)) -> less_out_ag(0, s(X1))
   less_in_ag(s(X), s(Y)) -> U5_ag(X, Y, less_in_ag(X, Y))
   U5_ag(X, Y, less_out_ag(X, Y)) -> less_out_ag(s(X), s(Y))
   U1_aag(X, Y, Left, Right, Left1, less_out_ag(X, Y)) -> U2_aag(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   insert_in_gag(X, void, tree(X, void, void)) -> insert_out_gag(X, void, tree(X, void, void))
   insert_in_gag(X, tree(X, Left, Right), tree(X, Left, Right)) -> insert_out_gag(X, tree(X, Left, Right), tree(X, Left, Right))
   insert_in_gag(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_gag(X, Y, Left, Right, Left1, less_in_gg(X, Y))
   less_in_gg(0, s(X1)) -> less_out_gg(0, s(X1))
   less_in_gg(s(X), s(Y)) -> U5_gg(X, Y, less_in_gg(X, Y))
   U5_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U1_gag(X, Y, Left, Right, Left1, less_out_gg(X, Y)) -> U2_gag(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   insert_in_gag(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_gag(X, Y, Left, Right, Right1, less_in_gg(Y, X))
   U3_gag(X, Y, Left, Right, Right1, less_out_gg(Y, X)) -> U4_gag(X, Y, Left, Right, Right1, insert_in_gag(X, Right, Right1))
   U4_gag(X, Y, Left, Right, Right1, insert_out_gag(X, Right, Right1)) -> insert_out_gag(X, tree(Y, Left, Right), tree(Y, Left, Right1))
   U2_gag(X, Y, Left, Right, Left1, insert_out_gag(X, Left, Left1)) -> insert_out_gag(X, tree(Y, Left, Right), tree(Y, Left1, Right))
   U2_aag(X, Y, Left, Right, Left1, insert_out_gag(X, Left, Left1)) -> insert_out_aag(X, tree(Y, Left, Right), tree(Y, Left1, Right))
   insert_in_aag(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_aag(X, Y, Left, Right, Right1, less_in_ga(Y, X))
   less_in_ga(0, s(X1)) -> less_out_ga(0, s(X1))
   less_in_ga(s(X), s(Y)) -> U5_ga(X, Y, less_in_ga(X, Y))
   U5_ga(X, Y, less_out_ga(X, Y)) -> less_out_ga(s(X), s(Y))
   U3_aag(X, Y, Left, Right, Right1, less_out_ga(Y, X)) -> U4_aag(X, Y, Left, Right, Right1, insert_in_aag(X, Right, Right1))
   U4_aag(X, Y, Left, Right, Right1, insert_out_aag(X, Right, Right1)) -> insert_out_aag(X, tree(Y, Left, Right), tree(Y, Left, Right1))

The argument filtering Pi contains the following mapping:
insert_in_aag(x1, x2, x3)  =  insert_in_aag(x3)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

void  =  void

insert_out_aag(x1, x2, x3)  =  insert_out_aag(x1, x2, x3)

U1_aag(x1, x2, x3, x4, x5, x6)  =  U1_aag(x2, x4, x5, x6)

less_in_ag(x1, x2)  =  less_in_ag(x2)

s(x1)  =  s(x1)

less_out_ag(x1, x2)  =  less_out_ag(x1, x2)

U5_ag(x1, x2, x3)  =  U5_ag(x2, x3)

U2_aag(x1, x2, x3, x4, x5, x6)  =  U2_aag(x1, x2, x4, x5, x6)

insert_in_gag(x1, x2, x3)  =  insert_in_gag(x1, x3)

insert_out_gag(x1, x2, x3)  =  insert_out_gag(x1, x2, x3)

U1_gag(x1, x2, x3, x4, x5, x6)  =  U1_gag(x1, x2, x4, x5, x6)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

less_out_gg(x1, x2)  =  less_out_gg(x1, x2)

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

U2_gag(x1, x2, x3, x4, x5, x6)  =  U2_gag(x1, x2, x4, x5, x6)

U3_gag(x1, x2, x3, x4, x5, x6)  =  U3_gag(x1, x2, x3, x5, x6)

U4_gag(x1, x2, x3, x4, x5, x6)  =  U4_gag(x1, x2, x3, x5, x6)

U3_aag(x1, x2, x3, x4, x5, x6)  =  U3_aag(x2, x3, x5, x6)

less_in_ga(x1, x2)  =  less_in_ga(x1)

less_out_ga(x1, x2)  =  less_out_ga(x1)

U5_ga(x1, x2, x3)  =  U5_ga(x1, x3)

U4_aag(x1, x2, x3, x4, x5, x6)  =  U4_aag(x2, x3, x5, x6)

INSERT_IN_AAG(x1, x2, x3)  =  INSERT_IN_AAG(x3)

U1_AAG(x1, x2, x3, x4, x5, x6)  =  U1_AAG(x2, x4, x5, x6)

LESS_IN_AG(x1, x2)  =  LESS_IN_AG(x2)

U5_AG(x1, x2, x3)  =  U5_AG(x2, x3)

U2_AAG(x1, x2, x3, x4, x5, x6)  =  U2_AAG(x1, x2, x4, x5, x6)

INSERT_IN_GAG(x1, x2, x3)  =  INSERT_IN_GAG(x1, x3)

U1_GAG(x1, x2, x3, x4, x5, x6)  =  U1_GAG(x1, x2, x4, x5, x6)

LESS_IN_GG(x1, x2)  =  LESS_IN_GG(x1, x2)

U5_GG(x1, x2, x3)  =  U5_GG(x1, x2, x3)

U2_GAG(x1, x2, x3, x4, x5, x6)  =  U2_GAG(x1, x2, x4, x5, x6)

U3_GAG(x1, x2, x3, x4, x5, x6)  =  U3_GAG(x1, x2, x3, x5, x6)

U4_GAG(x1, x2, x3, x4, x5, x6)  =  U4_GAG(x1, x2, x3, x5, x6)

U3_AAG(x1, x2, x3, x4, x5, x6)  =  U3_AAG(x2, x3, x5, x6)

LESS_IN_GA(x1, x2)  =  LESS_IN_GA(x1)

U5_GA(x1, x2, x3)  =  U5_GA(x1, x3)

U4_AAG(x1, x2, x3, x4, x5, x6)  =  U4_AAG(x2, x3, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 5 SCCs with 13 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LESS_IN_GA(s(X), s(Y)) -> LESS_IN_GA(X, Y)

The TRS R consists of the following rules:

   insert_in_aag(X, void, tree(X, void, void)) -> insert_out_aag(X, void, tree(X, void, void))
   insert_in_aag(X, tree(X, Left, Right), tree(X, Left, Right)) -> insert_out_aag(X, tree(X, Left, Right), tree(X, Left, Right))
   insert_in_aag(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_aag(X, Y, Left, Right, Left1, less_in_ag(X, Y))
   less_in_ag(0, s(X1)) -> less_out_ag(0, s(X1))
   less_in_ag(s(X), s(Y)) -> U5_ag(X, Y, less_in_ag(X, Y))
   U5_ag(X, Y, less_out_ag(X, Y)) -> less_out_ag(s(X), s(Y))
   U1_aag(X, Y, Left, Right, Left1, less_out_ag(X, Y)) -> U2_aag(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   insert_in_gag(X, void, tree(X, void, void)) -> insert_out_gag(X, void, tree(X, void, void))
   insert_in_gag(X, tree(X, Left, Right), tree(X, Left, Right)) -> insert_out_gag(X, tree(X, Left, Right), tree(X, Left, Right))
   insert_in_gag(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_gag(X, Y, Left, Right, Left1, less_in_gg(X, Y))
   less_in_gg(0, s(X1)) -> less_out_gg(0, s(X1))
   less_in_gg(s(X), s(Y)) -> U5_gg(X, Y, less_in_gg(X, Y))
   U5_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U1_gag(X, Y, Left, Right, Left1, less_out_gg(X, Y)) -> U2_gag(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   insert_in_gag(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_gag(X, Y, Left, Right, Right1, less_in_gg(Y, X))
   U3_gag(X, Y, Left, Right, Right1, less_out_gg(Y, X)) -> U4_gag(X, Y, Left, Right, Right1, insert_in_gag(X, Right, Right1))
   U4_gag(X, Y, Left, Right, Right1, insert_out_gag(X, Right, Right1)) -> insert_out_gag(X, tree(Y, Left, Right), tree(Y, Left, Right1))
   U2_gag(X, Y, Left, Right, Left1, insert_out_gag(X, Left, Left1)) -> insert_out_gag(X, tree(Y, Left, Right), tree(Y, Left1, Right))
   U2_aag(X, Y, Left, Right, Left1, insert_out_gag(X, Left, Left1)) -> insert_out_aag(X, tree(Y, Left, Right), tree(Y, Left1, Right))
   insert_in_aag(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_aag(X, Y, Left, Right, Right1, less_in_ga(Y, X))
   less_in_ga(0, s(X1)) -> less_out_ga(0, s(X1))
   less_in_ga(s(X), s(Y)) -> U5_ga(X, Y, less_in_ga(X, Y))
   U5_ga(X, Y, less_out_ga(X, Y)) -> less_out_ga(s(X), s(Y))
   U3_aag(X, Y, Left, Right, Right1, less_out_ga(Y, X)) -> U4_aag(X, Y, Left, Right, Right1, insert_in_aag(X, Right, Right1))
   U4_aag(X, Y, Left, Right, Right1, insert_out_aag(X, Right, Right1)) -> insert_out_aag(X, tree(Y, Left, Right), tree(Y, Left, Right1))

The argument filtering Pi contains the following mapping:
insert_in_aag(x1, x2, x3)  =  insert_in_aag(x3)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

void  =  void

insert_out_aag(x1, x2, x3)  =  insert_out_aag(x1, x2, x3)

U1_aag(x1, x2, x3, x4, x5, x6)  =  U1_aag(x2, x4, x5, x6)

less_in_ag(x1, x2)  =  less_in_ag(x2)

s(x1)  =  s(x1)

less_out_ag(x1, x2)  =  less_out_ag(x1, x2)

U5_ag(x1, x2, x3)  =  U5_ag(x2, x3)

U2_aag(x1, x2, x3, x4, x5, x6)  =  U2_aag(x1, x2, x4, x5, x6)

insert_in_gag(x1, x2, x3)  =  insert_in_gag(x1, x3)

insert_out_gag(x1, x2, x3)  =  insert_out_gag(x1, x2, x3)

U1_gag(x1, x2, x3, x4, x5, x6)  =  U1_gag(x1, x2, x4, x5, x6)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

less_out_gg(x1, x2)  =  less_out_gg(x1, x2)

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

U2_gag(x1, x2, x3, x4, x5, x6)  =  U2_gag(x1, x2, x4, x5, x6)

U3_gag(x1, x2, x3, x4, x5, x6)  =  U3_gag(x1, x2, x3, x5, x6)

U4_gag(x1, x2, x3, x4, x5, x6)  =  U4_gag(x1, x2, x3, x5, x6)

U3_aag(x1, x2, x3, x4, x5, x6)  =  U3_aag(x2, x3, x5, x6)

less_in_ga(x1, x2)  =  less_in_ga(x1)

less_out_ga(x1, x2)  =  less_out_ga(x1)

U5_ga(x1, x2, x3)  =  U5_ga(x1, x3)

U4_aag(x1, x2, x3, x4, x5, x6)  =  U4_aag(x2, x3, x5, x6)

LESS_IN_GA(x1, x2)  =  LESS_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LESS_IN_GA(s(X), s(Y)) -> LESS_IN_GA(X, Y)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

LESS_IN_GA(x1, x2)  =  LESS_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LESS_IN_GA(s(X)) -> LESS_IN_GA(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LESS_IN_GA(s(X)) -> LESS_IN_GA(X)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LESS_IN_GG(s(X), s(Y)) -> LESS_IN_GG(X, Y)

The TRS R consists of the following rules:

   insert_in_aag(X, void, tree(X, void, void)) -> insert_out_aag(X, void, tree(X, void, void))
   insert_in_aag(X, tree(X, Left, Right), tree(X, Left, Right)) -> insert_out_aag(X, tree(X, Left, Right), tree(X, Left, Right))
   insert_in_aag(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_aag(X, Y, Left, Right, Left1, less_in_ag(X, Y))
   less_in_ag(0, s(X1)) -> less_out_ag(0, s(X1))
   less_in_ag(s(X), s(Y)) -> U5_ag(X, Y, less_in_ag(X, Y))
   U5_ag(X, Y, less_out_ag(X, Y)) -> less_out_ag(s(X), s(Y))
   U1_aag(X, Y, Left, Right, Left1, less_out_ag(X, Y)) -> U2_aag(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   insert_in_gag(X, void, tree(X, void, void)) -> insert_out_gag(X, void, tree(X, void, void))
   insert_in_gag(X, tree(X, Left, Right), tree(X, Left, Right)) -> insert_out_gag(X, tree(X, Left, Right), tree(X, Left, Right))
   insert_in_gag(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_gag(X, Y, Left, Right, Left1, less_in_gg(X, Y))
   less_in_gg(0, s(X1)) -> less_out_gg(0, s(X1))
   less_in_gg(s(X), s(Y)) -> U5_gg(X, Y, less_in_gg(X, Y))
   U5_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U1_gag(X, Y, Left, Right, Left1, less_out_gg(X, Y)) -> U2_gag(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   insert_in_gag(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_gag(X, Y, Left, Right, Right1, less_in_gg(Y, X))
   U3_gag(X, Y, Left, Right, Right1, less_out_gg(Y, X)) -> U4_gag(X, Y, Left, Right, Right1, insert_in_gag(X, Right, Right1))
   U4_gag(X, Y, Left, Right, Right1, insert_out_gag(X, Right, Right1)) -> insert_out_gag(X, tree(Y, Left, Right), tree(Y, Left, Right1))
   U2_gag(X, Y, Left, Right, Left1, insert_out_gag(X, Left, Left1)) -> insert_out_gag(X, tree(Y, Left, Right), tree(Y, Left1, Right))
   U2_aag(X, Y, Left, Right, Left1, insert_out_gag(X, Left, Left1)) -> insert_out_aag(X, tree(Y, Left, Right), tree(Y, Left1, Right))
   insert_in_aag(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_aag(X, Y, Left, Right, Right1, less_in_ga(Y, X))
   less_in_ga(0, s(X1)) -> less_out_ga(0, s(X1))
   less_in_ga(s(X), s(Y)) -> U5_ga(X, Y, less_in_ga(X, Y))
   U5_ga(X, Y, less_out_ga(X, Y)) -> less_out_ga(s(X), s(Y))
   U3_aag(X, Y, Left, Right, Right1, less_out_ga(Y, X)) -> U4_aag(X, Y, Left, Right, Right1, insert_in_aag(X, Right, Right1))
   U4_aag(X, Y, Left, Right, Right1, insert_out_aag(X, Right, Right1)) -> insert_out_aag(X, tree(Y, Left, Right), tree(Y, Left, Right1))

The argument filtering Pi contains the following mapping:
insert_in_aag(x1, x2, x3)  =  insert_in_aag(x3)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

void  =  void

insert_out_aag(x1, x2, x3)  =  insert_out_aag(x1, x2, x3)

U1_aag(x1, x2, x3, x4, x5, x6)  =  U1_aag(x2, x4, x5, x6)

less_in_ag(x1, x2)  =  less_in_ag(x2)

s(x1)  =  s(x1)

less_out_ag(x1, x2)  =  less_out_ag(x1, x2)

U5_ag(x1, x2, x3)  =  U5_ag(x2, x3)

U2_aag(x1, x2, x3, x4, x5, x6)  =  U2_aag(x1, x2, x4, x5, x6)

insert_in_gag(x1, x2, x3)  =  insert_in_gag(x1, x3)

insert_out_gag(x1, x2, x3)  =  insert_out_gag(x1, x2, x3)

U1_gag(x1, x2, x3, x4, x5, x6)  =  U1_gag(x1, x2, x4, x5, x6)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

less_out_gg(x1, x2)  =  less_out_gg(x1, x2)

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

U2_gag(x1, x2, x3, x4, x5, x6)  =  U2_gag(x1, x2, x4, x5, x6)

U3_gag(x1, x2, x3, x4, x5, x6)  =  U3_gag(x1, x2, x3, x5, x6)

U4_gag(x1, x2, x3, x4, x5, x6)  =  U4_gag(x1, x2, x3, x5, x6)

U3_aag(x1, x2, x3, x4, x5, x6)  =  U3_aag(x2, x3, x5, x6)

less_in_ga(x1, x2)  =  less_in_ga(x1)

less_out_ga(x1, x2)  =  less_out_ga(x1)

U5_ga(x1, x2, x3)  =  U5_ga(x1, x3)

U4_aag(x1, x2, x3, x4, x5, x6)  =  U4_aag(x2, x3, x5, x6)

LESS_IN_GG(x1, x2)  =  LESS_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LESS_IN_GG(s(X), s(Y)) -> LESS_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LESS_IN_GG(s(X), s(Y)) -> LESS_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LESS_IN_GG(s(X), s(Y)) -> LESS_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GAG(X, Y, Left, Right, Left1, less_out_gg(X, Y)) -> INSERT_IN_GAG(X, Left, Left1)
   INSERT_IN_GAG(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_GAG(X, Y, Left, Right, Left1, less_in_gg(X, Y))
   INSERT_IN_GAG(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_GAG(X, Y, Left, Right, Right1, less_in_gg(Y, X))
   U3_GAG(X, Y, Left, Right, Right1, less_out_gg(Y, X)) -> INSERT_IN_GAG(X, Right, Right1)

The TRS R consists of the following rules:

   insert_in_aag(X, void, tree(X, void, void)) -> insert_out_aag(X, void, tree(X, void, void))
   insert_in_aag(X, tree(X, Left, Right), tree(X, Left, Right)) -> insert_out_aag(X, tree(X, Left, Right), tree(X, Left, Right))
   insert_in_aag(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_aag(X, Y, Left, Right, Left1, less_in_ag(X, Y))
   less_in_ag(0, s(X1)) -> less_out_ag(0, s(X1))
   less_in_ag(s(X), s(Y)) -> U5_ag(X, Y, less_in_ag(X, Y))
   U5_ag(X, Y, less_out_ag(X, Y)) -> less_out_ag(s(X), s(Y))
   U1_aag(X, Y, Left, Right, Left1, less_out_ag(X, Y)) -> U2_aag(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   insert_in_gag(X, void, tree(X, void, void)) -> insert_out_gag(X, void, tree(X, void, void))
   insert_in_gag(X, tree(X, Left, Right), tree(X, Left, Right)) -> insert_out_gag(X, tree(X, Left, Right), tree(X, Left, Right))
   insert_in_gag(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_gag(X, Y, Left, Right, Left1, less_in_gg(X, Y))
   less_in_gg(0, s(X1)) -> less_out_gg(0, s(X1))
   less_in_gg(s(X), s(Y)) -> U5_gg(X, Y, less_in_gg(X, Y))
   U5_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U1_gag(X, Y, Left, Right, Left1, less_out_gg(X, Y)) -> U2_gag(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   insert_in_gag(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_gag(X, Y, Left, Right, Right1, less_in_gg(Y, X))
   U3_gag(X, Y, Left, Right, Right1, less_out_gg(Y, X)) -> U4_gag(X, Y, Left, Right, Right1, insert_in_gag(X, Right, Right1))
   U4_gag(X, Y, Left, Right, Right1, insert_out_gag(X, Right, Right1)) -> insert_out_gag(X, tree(Y, Left, Right), tree(Y, Left, Right1))
   U2_gag(X, Y, Left, Right, Left1, insert_out_gag(X, Left, Left1)) -> insert_out_gag(X, tree(Y, Left, Right), tree(Y, Left1, Right))
   U2_aag(X, Y, Left, Right, Left1, insert_out_gag(X, Left, Left1)) -> insert_out_aag(X, tree(Y, Left, Right), tree(Y, Left1, Right))
   insert_in_aag(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_aag(X, Y, Left, Right, Right1, less_in_ga(Y, X))
   less_in_ga(0, s(X1)) -> less_out_ga(0, s(X1))
   less_in_ga(s(X), s(Y)) -> U5_ga(X, Y, less_in_ga(X, Y))
   U5_ga(X, Y, less_out_ga(X, Y)) -> less_out_ga(s(X), s(Y))
   U3_aag(X, Y, Left, Right, Right1, less_out_ga(Y, X)) -> U4_aag(X, Y, Left, Right, Right1, insert_in_aag(X, Right, Right1))
   U4_aag(X, Y, Left, Right, Right1, insert_out_aag(X, Right, Right1)) -> insert_out_aag(X, tree(Y, Left, Right), tree(Y, Left, Right1))

The argument filtering Pi contains the following mapping:
insert_in_aag(x1, x2, x3)  =  insert_in_aag(x3)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

void  =  void

insert_out_aag(x1, x2, x3)  =  insert_out_aag(x1, x2, x3)

U1_aag(x1, x2, x3, x4, x5, x6)  =  U1_aag(x2, x4, x5, x6)

less_in_ag(x1, x2)  =  less_in_ag(x2)

s(x1)  =  s(x1)

less_out_ag(x1, x2)  =  less_out_ag(x1, x2)

U5_ag(x1, x2, x3)  =  U5_ag(x2, x3)

U2_aag(x1, x2, x3, x4, x5, x6)  =  U2_aag(x1, x2, x4, x5, x6)

insert_in_gag(x1, x2, x3)  =  insert_in_gag(x1, x3)

insert_out_gag(x1, x2, x3)  =  insert_out_gag(x1, x2, x3)

U1_gag(x1, x2, x3, x4, x5, x6)  =  U1_gag(x1, x2, x4, x5, x6)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

less_out_gg(x1, x2)  =  less_out_gg(x1, x2)

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

U2_gag(x1, x2, x3, x4, x5, x6)  =  U2_gag(x1, x2, x4, x5, x6)

U3_gag(x1, x2, x3, x4, x5, x6)  =  U3_gag(x1, x2, x3, x5, x6)

U4_gag(x1, x2, x3, x4, x5, x6)  =  U4_gag(x1, x2, x3, x5, x6)

U3_aag(x1, x2, x3, x4, x5, x6)  =  U3_aag(x2, x3, x5, x6)

less_in_ga(x1, x2)  =  less_in_ga(x1)

less_out_ga(x1, x2)  =  less_out_ga(x1)

U5_ga(x1, x2, x3)  =  U5_ga(x1, x3)

U4_aag(x1, x2, x3, x4, x5, x6)  =  U4_aag(x2, x3, x5, x6)

INSERT_IN_GAG(x1, x2, x3)  =  INSERT_IN_GAG(x1, x3)

U1_GAG(x1, x2, x3, x4, x5, x6)  =  U1_GAG(x1, x2, x4, x5, x6)

U3_GAG(x1, x2, x3, x4, x5, x6)  =  U3_GAG(x1, x2, x3, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(23)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GAG(X, Y, Left, Right, Left1, less_out_gg(X, Y)) -> INSERT_IN_GAG(X, Left, Left1)
   INSERT_IN_GAG(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_GAG(X, Y, Left, Right, Left1, less_in_gg(X, Y))
   INSERT_IN_GAG(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_GAG(X, Y, Left, Right, Right1, less_in_gg(Y, X))
   U3_GAG(X, Y, Left, Right, Right1, less_out_gg(Y, X)) -> INSERT_IN_GAG(X, Right, Right1)

The TRS R consists of the following rules:

   less_in_gg(0, s(X1)) -> less_out_gg(0, s(X1))
   less_in_gg(s(X), s(Y)) -> U5_gg(X, Y, less_in_gg(X, Y))
   U5_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))

The argument filtering Pi contains the following mapping:
tree(x1, x2, x3)  =  tree(x1, x2, x3)

s(x1)  =  s(x1)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

less_out_gg(x1, x2)  =  less_out_gg(x1, x2)

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

INSERT_IN_GAG(x1, x2, x3)  =  INSERT_IN_GAG(x1, x3)

U1_GAG(x1, x2, x3, x4, x5, x6)  =  U1_GAG(x1, x2, x4, x5, x6)

U3_GAG(x1, x2, x3, x4, x5, x6)  =  U3_GAG(x1, x2, x3, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(24) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GAG(X, Y, Right, Left1, less_out_gg(X, Y)) -> INSERT_IN_GAG(X, Left1)
   INSERT_IN_GAG(X, tree(Y, Left1, Right)) -> U1_GAG(X, Y, Right, Left1, less_in_gg(X, Y))
   INSERT_IN_GAG(X, tree(Y, Left, Right1)) -> U3_GAG(X, Y, Left, Right1, less_in_gg(Y, X))
   U3_GAG(X, Y, Left, Right1, less_out_gg(Y, X)) -> INSERT_IN_GAG(X, Right1)

The TRS R consists of the following rules:

   less_in_gg(0, s(X1)) -> less_out_gg(0, s(X1))
   less_in_gg(s(X), s(Y)) -> U5_gg(X, Y, less_in_gg(X, Y))
   U5_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))

The set Q consists of the following terms:

   less_in_gg(x0, x1)
   U5_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*INSERT_IN_GAG(X, tree(Y, Left1, Right)) -> U1_GAG(X, Y, Right, Left1, less_in_gg(X, Y))
The graph contains the following edges 1 >= 1, 2 > 2, 2 > 3, 2 > 4


*INSERT_IN_GAG(X, tree(Y, Left, Right1)) -> U3_GAG(X, Y, Left, Right1, less_in_gg(Y, X))
The graph contains the following edges 1 >= 1, 2 > 2, 2 > 3, 2 > 4


*U1_GAG(X, Y, Right, Left1, less_out_gg(X, Y)) -> INSERT_IN_GAG(X, Left1)
The graph contains the following edges 1 >= 1, 5 > 1, 4 >= 2


*U3_GAG(X, Y, Left, Right1, less_out_gg(Y, X)) -> INSERT_IN_GAG(X, Right1)
The graph contains the following edges 1 >= 1, 5 > 1, 4 >= 2


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LESS_IN_AG(s(X), s(Y)) -> LESS_IN_AG(X, Y)

The TRS R consists of the following rules:

   insert_in_aag(X, void, tree(X, void, void)) -> insert_out_aag(X, void, tree(X, void, void))
   insert_in_aag(X, tree(X, Left, Right), tree(X, Left, Right)) -> insert_out_aag(X, tree(X, Left, Right), tree(X, Left, Right))
   insert_in_aag(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_aag(X, Y, Left, Right, Left1, less_in_ag(X, Y))
   less_in_ag(0, s(X1)) -> less_out_ag(0, s(X1))
   less_in_ag(s(X), s(Y)) -> U5_ag(X, Y, less_in_ag(X, Y))
   U5_ag(X, Y, less_out_ag(X, Y)) -> less_out_ag(s(X), s(Y))
   U1_aag(X, Y, Left, Right, Left1, less_out_ag(X, Y)) -> U2_aag(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   insert_in_gag(X, void, tree(X, void, void)) -> insert_out_gag(X, void, tree(X, void, void))
   insert_in_gag(X, tree(X, Left, Right), tree(X, Left, Right)) -> insert_out_gag(X, tree(X, Left, Right), tree(X, Left, Right))
   insert_in_gag(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_gag(X, Y, Left, Right, Left1, less_in_gg(X, Y))
   less_in_gg(0, s(X1)) -> less_out_gg(0, s(X1))
   less_in_gg(s(X), s(Y)) -> U5_gg(X, Y, less_in_gg(X, Y))
   U5_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U1_gag(X, Y, Left, Right, Left1, less_out_gg(X, Y)) -> U2_gag(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   insert_in_gag(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_gag(X, Y, Left, Right, Right1, less_in_gg(Y, X))
   U3_gag(X, Y, Left, Right, Right1, less_out_gg(Y, X)) -> U4_gag(X, Y, Left, Right, Right1, insert_in_gag(X, Right, Right1))
   U4_gag(X, Y, Left, Right, Right1, insert_out_gag(X, Right, Right1)) -> insert_out_gag(X, tree(Y, Left, Right), tree(Y, Left, Right1))
   U2_gag(X, Y, Left, Right, Left1, insert_out_gag(X, Left, Left1)) -> insert_out_gag(X, tree(Y, Left, Right), tree(Y, Left1, Right))
   U2_aag(X, Y, Left, Right, Left1, insert_out_gag(X, Left, Left1)) -> insert_out_aag(X, tree(Y, Left, Right), tree(Y, Left1, Right))
   insert_in_aag(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_aag(X, Y, Left, Right, Right1, less_in_ga(Y, X))
   less_in_ga(0, s(X1)) -> less_out_ga(0, s(X1))
   less_in_ga(s(X), s(Y)) -> U5_ga(X, Y, less_in_ga(X, Y))
   U5_ga(X, Y, less_out_ga(X, Y)) -> less_out_ga(s(X), s(Y))
   U3_aag(X, Y, Left, Right, Right1, less_out_ga(Y, X)) -> U4_aag(X, Y, Left, Right, Right1, insert_in_aag(X, Right, Right1))
   U4_aag(X, Y, Left, Right, Right1, insert_out_aag(X, Right, Right1)) -> insert_out_aag(X, tree(Y, Left, Right), tree(Y, Left, Right1))

The argument filtering Pi contains the following mapping:
insert_in_aag(x1, x2, x3)  =  insert_in_aag(x3)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

void  =  void

insert_out_aag(x1, x2, x3)  =  insert_out_aag(x1, x2, x3)

U1_aag(x1, x2, x3, x4, x5, x6)  =  U1_aag(x2, x4, x5, x6)

less_in_ag(x1, x2)  =  less_in_ag(x2)

s(x1)  =  s(x1)

less_out_ag(x1, x2)  =  less_out_ag(x1, x2)

U5_ag(x1, x2, x3)  =  U5_ag(x2, x3)

U2_aag(x1, x2, x3, x4, x5, x6)  =  U2_aag(x1, x2, x4, x5, x6)

insert_in_gag(x1, x2, x3)  =  insert_in_gag(x1, x3)

insert_out_gag(x1, x2, x3)  =  insert_out_gag(x1, x2, x3)

U1_gag(x1, x2, x3, x4, x5, x6)  =  U1_gag(x1, x2, x4, x5, x6)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

less_out_gg(x1, x2)  =  less_out_gg(x1, x2)

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

U2_gag(x1, x2, x3, x4, x5, x6)  =  U2_gag(x1, x2, x4, x5, x6)

U3_gag(x1, x2, x3, x4, x5, x6)  =  U3_gag(x1, x2, x3, x5, x6)

U4_gag(x1, x2, x3, x4, x5, x6)  =  U4_gag(x1, x2, x3, x5, x6)

U3_aag(x1, x2, x3, x4, x5, x6)  =  U3_aag(x2, x3, x5, x6)

less_in_ga(x1, x2)  =  less_in_ga(x1)

less_out_ga(x1, x2)  =  less_out_ga(x1)

U5_ga(x1, x2, x3)  =  U5_ga(x1, x3)

U4_aag(x1, x2, x3, x4, x5, x6)  =  U4_aag(x2, x3, x5, x6)

LESS_IN_AG(x1, x2)  =  LESS_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(30)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LESS_IN_AG(s(X), s(Y)) -> LESS_IN_AG(X, Y)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

LESS_IN_AG(x1, x2)  =  LESS_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(31) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LESS_IN_AG(s(Y)) -> LESS_IN_AG(Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(33) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LESS_IN_AG(s(Y)) -> LESS_IN_AG(Y)
The graph contains the following edges 1 > 1


----------------------------------------

(34)
YES

----------------------------------------

(35)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   INSERT_IN_AAG(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_AAG(X, Y, Left, Right, Right1, less_in_ga(Y, X))
   U3_AAG(X, Y, Left, Right, Right1, less_out_ga(Y, X)) -> INSERT_IN_AAG(X, Right, Right1)

The TRS R consists of the following rules:

   insert_in_aag(X, void, tree(X, void, void)) -> insert_out_aag(X, void, tree(X, void, void))
   insert_in_aag(X, tree(X, Left, Right), tree(X, Left, Right)) -> insert_out_aag(X, tree(X, Left, Right), tree(X, Left, Right))
   insert_in_aag(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_aag(X, Y, Left, Right, Left1, less_in_ag(X, Y))
   less_in_ag(0, s(X1)) -> less_out_ag(0, s(X1))
   less_in_ag(s(X), s(Y)) -> U5_ag(X, Y, less_in_ag(X, Y))
   U5_ag(X, Y, less_out_ag(X, Y)) -> less_out_ag(s(X), s(Y))
   U1_aag(X, Y, Left, Right, Left1, less_out_ag(X, Y)) -> U2_aag(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   insert_in_gag(X, void, tree(X, void, void)) -> insert_out_gag(X, void, tree(X, void, void))
   insert_in_gag(X, tree(X, Left, Right), tree(X, Left, Right)) -> insert_out_gag(X, tree(X, Left, Right), tree(X, Left, Right))
   insert_in_gag(X, tree(Y, Left, Right), tree(Y, Left1, Right)) -> U1_gag(X, Y, Left, Right, Left1, less_in_gg(X, Y))
   less_in_gg(0, s(X1)) -> less_out_gg(0, s(X1))
   less_in_gg(s(X), s(Y)) -> U5_gg(X, Y, less_in_gg(X, Y))
   U5_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U1_gag(X, Y, Left, Right, Left1, less_out_gg(X, Y)) -> U2_gag(X, Y, Left, Right, Left1, insert_in_gag(X, Left, Left1))
   insert_in_gag(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_gag(X, Y, Left, Right, Right1, less_in_gg(Y, X))
   U3_gag(X, Y, Left, Right, Right1, less_out_gg(Y, X)) -> U4_gag(X, Y, Left, Right, Right1, insert_in_gag(X, Right, Right1))
   U4_gag(X, Y, Left, Right, Right1, insert_out_gag(X, Right, Right1)) -> insert_out_gag(X, tree(Y, Left, Right), tree(Y, Left, Right1))
   U2_gag(X, Y, Left, Right, Left1, insert_out_gag(X, Left, Left1)) -> insert_out_gag(X, tree(Y, Left, Right), tree(Y, Left1, Right))
   U2_aag(X, Y, Left, Right, Left1, insert_out_gag(X, Left, Left1)) -> insert_out_aag(X, tree(Y, Left, Right), tree(Y, Left1, Right))
   insert_in_aag(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_aag(X, Y, Left, Right, Right1, less_in_ga(Y, X))
   less_in_ga(0, s(X1)) -> less_out_ga(0, s(X1))
   less_in_ga(s(X), s(Y)) -> U5_ga(X, Y, less_in_ga(X, Y))
   U5_ga(X, Y, less_out_ga(X, Y)) -> less_out_ga(s(X), s(Y))
   U3_aag(X, Y, Left, Right, Right1, less_out_ga(Y, X)) -> U4_aag(X, Y, Left, Right, Right1, insert_in_aag(X, Right, Right1))
   U4_aag(X, Y, Left, Right, Right1, insert_out_aag(X, Right, Right1)) -> insert_out_aag(X, tree(Y, Left, Right), tree(Y, Left, Right1))

The argument filtering Pi contains the following mapping:
insert_in_aag(x1, x2, x3)  =  insert_in_aag(x3)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

void  =  void

insert_out_aag(x1, x2, x3)  =  insert_out_aag(x1, x2, x3)

U1_aag(x1, x2, x3, x4, x5, x6)  =  U1_aag(x2, x4, x5, x6)

less_in_ag(x1, x2)  =  less_in_ag(x2)

s(x1)  =  s(x1)

less_out_ag(x1, x2)  =  less_out_ag(x1, x2)

U5_ag(x1, x2, x3)  =  U5_ag(x2, x3)

U2_aag(x1, x2, x3, x4, x5, x6)  =  U2_aag(x1, x2, x4, x5, x6)

insert_in_gag(x1, x2, x3)  =  insert_in_gag(x1, x3)

insert_out_gag(x1, x2, x3)  =  insert_out_gag(x1, x2, x3)

U1_gag(x1, x2, x3, x4, x5, x6)  =  U1_gag(x1, x2, x4, x5, x6)

less_in_gg(x1, x2)  =  less_in_gg(x1, x2)

0  =  0

less_out_gg(x1, x2)  =  less_out_gg(x1, x2)

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

U2_gag(x1, x2, x3, x4, x5, x6)  =  U2_gag(x1, x2, x4, x5, x6)

U3_gag(x1, x2, x3, x4, x5, x6)  =  U3_gag(x1, x2, x3, x5, x6)

U4_gag(x1, x2, x3, x4, x5, x6)  =  U4_gag(x1, x2, x3, x5, x6)

U3_aag(x1, x2, x3, x4, x5, x6)  =  U3_aag(x2, x3, x5, x6)

less_in_ga(x1, x2)  =  less_in_ga(x1)

less_out_ga(x1, x2)  =  less_out_ga(x1)

U5_ga(x1, x2, x3)  =  U5_ga(x1, x3)

U4_aag(x1, x2, x3, x4, x5, x6)  =  U4_aag(x2, x3, x5, x6)

INSERT_IN_AAG(x1, x2, x3)  =  INSERT_IN_AAG(x3)

U3_AAG(x1, x2, x3, x4, x5, x6)  =  U3_AAG(x2, x3, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(36) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(37)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   INSERT_IN_AAG(X, tree(Y, Left, Right), tree(Y, Left, Right1)) -> U3_AAG(X, Y, Left, Right, Right1, less_in_ga(Y, X))
   U3_AAG(X, Y, Left, Right, Right1, less_out_ga(Y, X)) -> INSERT_IN_AAG(X, Right, Right1)

The TRS R consists of the following rules:

   less_in_ga(0, s(X1)) -> less_out_ga(0, s(X1))
   less_in_ga(s(X), s(Y)) -> U5_ga(X, Y, less_in_ga(X, Y))
   U5_ga(X, Y, less_out_ga(X, Y)) -> less_out_ga(s(X), s(Y))

The argument filtering Pi contains the following mapping:
tree(x1, x2, x3)  =  tree(x1, x2, x3)

s(x1)  =  s(x1)

0  =  0

less_in_ga(x1, x2)  =  less_in_ga(x1)

less_out_ga(x1, x2)  =  less_out_ga(x1)

U5_ga(x1, x2, x3)  =  U5_ga(x1, x3)

INSERT_IN_AAG(x1, x2, x3)  =  INSERT_IN_AAG(x3)

U3_AAG(x1, x2, x3, x4, x5, x6)  =  U3_AAG(x2, x3, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(38) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(39)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INSERT_IN_AAG(tree(Y, Left, Right1)) -> U3_AAG(Y, Left, Right1, less_in_ga(Y))
   U3_AAG(Y, Left, Right1, less_out_ga(Y)) -> INSERT_IN_AAG(Right1)

The TRS R consists of the following rules:

   less_in_ga(0) -> less_out_ga(0)
   less_in_ga(s(X)) -> U5_ga(X, less_in_ga(X))
   U5_ga(X, less_out_ga(X)) -> less_out_ga(s(X))

The set Q consists of the following terms:

   less_in_ga(x0)
   U5_ga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(40) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U3_AAG(Y, Left, Right1, less_out_ga(Y)) -> INSERT_IN_AAG(Right1)
The graph contains the following edges 3 >= 1


*INSERT_IN_AAG(tree(Y, Left, Right1)) -> U3_AAG(Y, Left, Right1, less_in_ga(Y))
The graph contains the following edges 1 > 1, 1 > 2, 1 > 3


----------------------------------------

(41)
YES
