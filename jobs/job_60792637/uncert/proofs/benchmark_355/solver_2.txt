YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/e95eB.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

f(g,g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) PiDPToQDPProof [SOUND, 0 ms]
(10) QDP
(11) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Clauses:

f(RES, [], RES).
f([], .(Head, Tail), RES) :- f(.(Head, Tail), Tail, RES).
f(.(Head, Tail), Y, RES) :- f(Y, Tail, RES).


Query: f(g,g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

f_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   f_in_gga(RES, [], RES) -> f_out_gga(RES, [], RES)
   f_in_gga([], .(Head, Tail), RES) -> U1_gga(Head, Tail, RES, f_in_gga(.(Head, Tail), Tail, RES))
   f_in_gga(.(Head, Tail), Y, RES) -> U2_gga(Head, Tail, Y, RES, f_in_gga(Y, Tail, RES))
   U2_gga(Head, Tail, Y, RES, f_out_gga(Y, Tail, RES)) -> f_out_gga(.(Head, Tail), Y, RES)
   U1_gga(Head, Tail, RES, f_out_gga(.(Head, Tail), Tail, RES)) -> f_out_gga([], .(Head, Tail), RES)

The argument filtering Pi contains the following mapping:
f_in_gga(x1, x2, x3)  =  f_in_gga(x1, x2)

[]  =  []

f_out_gga(x1, x2, x3)  =  f_out_gga(x3)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   f_in_gga(RES, [], RES) -> f_out_gga(RES, [], RES)
   f_in_gga([], .(Head, Tail), RES) -> U1_gga(Head, Tail, RES, f_in_gga(.(Head, Tail), Tail, RES))
   f_in_gga(.(Head, Tail), Y, RES) -> U2_gga(Head, Tail, Y, RES, f_in_gga(Y, Tail, RES))
   U2_gga(Head, Tail, Y, RES, f_out_gga(Y, Tail, RES)) -> f_out_gga(.(Head, Tail), Y, RES)
   U1_gga(Head, Tail, RES, f_out_gga(.(Head, Tail), Tail, RES)) -> f_out_gga([], .(Head, Tail), RES)

The argument filtering Pi contains the following mapping:
f_in_gga(x1, x2, x3)  =  f_in_gga(x1, x2)

[]  =  []

f_out_gga(x1, x2, x3)  =  f_out_gga(x3)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   F_IN_GGA([], .(Head, Tail), RES) -> U1_GGA(Head, Tail, RES, f_in_gga(.(Head, Tail), Tail, RES))
   F_IN_GGA([], .(Head, Tail), RES) -> F_IN_GGA(.(Head, Tail), Tail, RES)
   F_IN_GGA(.(Head, Tail), Y, RES) -> U2_GGA(Head, Tail, Y, RES, f_in_gga(Y, Tail, RES))
   F_IN_GGA(.(Head, Tail), Y, RES) -> F_IN_GGA(Y, Tail, RES)

The TRS R consists of the following rules:

   f_in_gga(RES, [], RES) -> f_out_gga(RES, [], RES)
   f_in_gga([], .(Head, Tail), RES) -> U1_gga(Head, Tail, RES, f_in_gga(.(Head, Tail), Tail, RES))
   f_in_gga(.(Head, Tail), Y, RES) -> U2_gga(Head, Tail, Y, RES, f_in_gga(Y, Tail, RES))
   U2_gga(Head, Tail, Y, RES, f_out_gga(Y, Tail, RES)) -> f_out_gga(.(Head, Tail), Y, RES)
   U1_gga(Head, Tail, RES, f_out_gga(.(Head, Tail), Tail, RES)) -> f_out_gga([], .(Head, Tail), RES)

The argument filtering Pi contains the following mapping:
f_in_gga(x1, x2, x3)  =  f_in_gga(x1, x2)

[]  =  []

f_out_gga(x1, x2, x3)  =  f_out_gga(x3)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

F_IN_GGA(x1, x2, x3)  =  F_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4)  =  U1_GGA(x4)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   F_IN_GGA([], .(Head, Tail), RES) -> U1_GGA(Head, Tail, RES, f_in_gga(.(Head, Tail), Tail, RES))
   F_IN_GGA([], .(Head, Tail), RES) -> F_IN_GGA(.(Head, Tail), Tail, RES)
   F_IN_GGA(.(Head, Tail), Y, RES) -> U2_GGA(Head, Tail, Y, RES, f_in_gga(Y, Tail, RES))
   F_IN_GGA(.(Head, Tail), Y, RES) -> F_IN_GGA(Y, Tail, RES)

The TRS R consists of the following rules:

   f_in_gga(RES, [], RES) -> f_out_gga(RES, [], RES)
   f_in_gga([], .(Head, Tail), RES) -> U1_gga(Head, Tail, RES, f_in_gga(.(Head, Tail), Tail, RES))
   f_in_gga(.(Head, Tail), Y, RES) -> U2_gga(Head, Tail, Y, RES, f_in_gga(Y, Tail, RES))
   U2_gga(Head, Tail, Y, RES, f_out_gga(Y, Tail, RES)) -> f_out_gga(.(Head, Tail), Y, RES)
   U1_gga(Head, Tail, RES, f_out_gga(.(Head, Tail), Tail, RES)) -> f_out_gga([], .(Head, Tail), RES)

The argument filtering Pi contains the following mapping:
f_in_gga(x1, x2, x3)  =  f_in_gga(x1, x2)

[]  =  []

f_out_gga(x1, x2, x3)  =  f_out_gga(x3)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

F_IN_GGA(x1, x2, x3)  =  F_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4)  =  U1_GGA(x4)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   F_IN_GGA([], .(Head, Tail), RES) -> F_IN_GGA(.(Head, Tail), Tail, RES)
   F_IN_GGA(.(Head, Tail), Y, RES) -> F_IN_GGA(Y, Tail, RES)

The TRS R consists of the following rules:

   f_in_gga(RES, [], RES) -> f_out_gga(RES, [], RES)
   f_in_gga([], .(Head, Tail), RES) -> U1_gga(Head, Tail, RES, f_in_gga(.(Head, Tail), Tail, RES))
   f_in_gga(.(Head, Tail), Y, RES) -> U2_gga(Head, Tail, Y, RES, f_in_gga(Y, Tail, RES))
   U2_gga(Head, Tail, Y, RES, f_out_gga(Y, Tail, RES)) -> f_out_gga(.(Head, Tail), Y, RES)
   U1_gga(Head, Tail, RES, f_out_gga(.(Head, Tail), Tail, RES)) -> f_out_gga([], .(Head, Tail), RES)

The argument filtering Pi contains the following mapping:
f_in_gga(x1, x2, x3)  =  f_in_gga(x1, x2)

[]  =  []

f_out_gga(x1, x2, x3)  =  f_out_gga(x3)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

F_IN_GGA(x1, x2, x3)  =  F_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   F_IN_GGA([], .(Head, Tail), RES) -> F_IN_GGA(.(Head, Tail), Tail, RES)
   F_IN_GGA(.(Head, Tail), Y, RES) -> F_IN_GGA(Y, Tail, RES)

R is empty.
The argument filtering Pi contains the following mapping:
[]  =  []

.(x1, x2)  =  .(x1, x2)

F_IN_GGA(x1, x2, x3)  =  F_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F_IN_GGA([], .(Head, Tail)) -> F_IN_GGA(.(Head, Tail), Tail)
   F_IN_GGA(.(Head, Tail), Y) -> F_IN_GGA(Y, Tail)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F_IN_GGA(.(Head, Tail), Y) -> F_IN_GGA(Y, Tail)
The graph contains the following edges 2 >= 1, 1 > 2


*F_IN_GGA([], .(Head, Tail)) -> F_IN_GGA(.(Head, Tail), Tail)
The graph contains the following edges 2 >= 1, 2 > 2


----------------------------------------

(12)
YES
