YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/DtOnv.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

member(a,g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) PiDPToQDPProof [SOUND, 0 ms]
(10) QDP
(11) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Clauses:

member(X, .(X, X1)).
member(X, .(X2, Xs)) :- member(X, Xs).


Query: member(a,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

member_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U1_ag(X, X2, Xs, member_in_ag(X, Xs))
   U1_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
member_in_ag(x1, x2)  =  member_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U1_ag(X, X2, Xs, member_in_ag(X, Xs))
   U1_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
member_in_ag(x1, x2)  =  member_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x4)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, Xs)) -> U1_AG(X, X2, Xs, member_in_ag(X, Xs))
   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)

The TRS R consists of the following rules:

   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U1_ag(X, X2, Xs, member_in_ag(X, Xs))
   U1_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
member_in_ag(x1, x2)  =  member_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, Xs)) -> U1_AG(X, X2, Xs, member_in_ag(X, Xs))
   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)

The TRS R consists of the following rules:

   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U1_ag(X, X2, Xs, member_in_ag(X, Xs))
   U1_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
member_in_ag(x1, x2)  =  member_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)

The TRS R consists of the following rules:

   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, Xs)) -> U1_ag(X, X2, Xs, member_in_ag(X, Xs))
   U1_ag(X, X2, Xs, member_out_ag(X, Xs)) -> member_out_ag(X, .(X2, Xs))

The argument filtering Pi contains the following mapping:
member_in_ag(x1, x2)  =  member_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, Xs)) -> MEMBER_IN_AG(X, Xs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(.(X2, Xs)) -> MEMBER_IN_AG(Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER_IN_AG(.(X2, Xs)) -> MEMBER_IN_AG(Xs)
The graph contains the following edges 1 > 1


----------------------------------------

(12)
YES
