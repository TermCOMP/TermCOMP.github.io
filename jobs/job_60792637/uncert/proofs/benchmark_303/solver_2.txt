YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/t6zdB.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

append3(g,g,g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(2) TRIPLES
(3) TriplesToPiDPProof [SOUND, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) PiDPToQDPProof [SOUND, 0 ms]
(10) QDP
(11) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Clauses:

append([], L, L).
append(.(H, L1), L2, .(H, L3)) :- append(L1, L2, L3).
append3(A, B, C, D) :- ','(append(A, B, E), append(E, C, D)).


Query: append3(g,g,g,a)
----------------------------------------

(1) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(append ([]) L L)",
                null
            ],
            [
                "(append (. H L1) L2 (. H L3))",
                "(append L1 L2 L3)"
            ],
            [
                "(append3 A B C D)",
                "(',' (append A B E) (append E C D))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "33": {
                "goal": [{
                    "clause": 0,
                    "scope": 3,
                    "term": "(append T18 T11 T13)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T11",
                        "T18"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "34": {
                "goal": [{
                    "clause": 1,
                    "scope": 3,
                    "term": "(append T18 T11 T13)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T11",
                        "T18"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "35": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "36": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "26": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (append T9 T10 X9) (append X9 T11 T13))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T9",
                        "T10",
                        "T11"
                    ],
                    "free": ["X9"],
                    "exprvars": []
                }
            },
            "37": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(',' (append T9 T10 X9) (append X9 T11 T13))"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(',' (append T9 T10 X9) (append X9 T11 T13))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T9",
                        "T10",
                        "T11"
                    ],
                    "free": ["X9"],
                    "exprvars": []
                }
            },
            "38": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T35 T36 T38)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T35",
                        "T36"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "28": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(',' (append T9 T10 X9) (append X9 T11 T13))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T9",
                        "T10",
                        "T11"
                    ],
                    "free": ["X9"],
                    "exprvars": []
                }
            },
            "39": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "29": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(',' (append T9 T10 X9) (append X9 T11 T13))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T9",
                        "T10",
                        "T11"
                    ],
                    "free": ["X9"],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append3 T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(append3 T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "40": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (append T48 T49 X50) (append (. T47 X50) T11 T13))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T11",
                        "T47",
                        "T48",
                        "T49"
                    ],
                    "free": ["X50"],
                    "exprvars": []
                }
            },
            "30": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T18 T11 T13)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T11",
                        "T18"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "41": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "31": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "42": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append T48 T49 X50)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T48",
                        "T49"
                    ],
                    "free": ["X50"],
                    "exprvars": []
                }
            },
            "32": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 3,
                        "term": "(append T18 T11 T13)"
                    },
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(append T18 T11 T13)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T11",
                        "T18"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "43": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append (. T47 T52) T11 T13)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T11",
                        "T47",
                        "T52"
                    ],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 26,
                "label": "ONLY EVAL with clause\nappend3(X5, X6, X7, X8) :- ','(append(X5, X6, X9), append(X9, X7, X8)).\nand substitutionT1 -> T9,\nX5 -> T9,\nT2 -> T10,\nX6 -> T10,\nT3 -> T11,\nX7 -> T11,\nT4 -> T13,\nX8 -> T13,\nT12 -> T13"
            },
            {
                "from": 26,
                "to": 27,
                "label": "CASE"
            },
            {
                "from": 27,
                "to": 28,
                "label": "PARALLEL"
            },
            {
                "from": 27,
                "to": 29,
                "label": "PARALLEL"
            },
            {
                "from": 28,
                "to": 30,
                "label": "EVAL with clause\nappend([], X14, X14).\nand substitutionT9 -> [],\nT10 -> T18,\nX14 -> T18,\nX9 -> T18"
            },
            {
                "from": 28,
                "to": 31,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 29,
                "to": 40,
                "label": "EVAL with clause\nappend(.(X46, X47), X48, .(X46, X49)) :- append(X47, X48, X49).\nand substitutionX46 -> T47,\nX47 -> T48,\nT9 -> .(T47, T48),\nT10 -> T49,\nX48 -> T49,\nX49 -> X50,\nX9 -> .(T47, X50)"
            },
            {
                "from": 29,
                "to": 41,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 30,
                "to": 32,
                "label": "CASE"
            },
            {
                "from": 32,
                "to": 33,
                "label": "PARALLEL"
            },
            {
                "from": 32,
                "to": 34,
                "label": "PARALLEL"
            },
            {
                "from": 33,
                "to": 35,
                "label": "EVAL with clause\nappend([], X21, X21).\nand substitutionT18 -> [],\nT11 -> T25,\nX21 -> T25,\nT13 -> T25"
            },
            {
                "from": 33,
                "to": 36,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 34,
                "to": 38,
                "label": "EVAL with clause\nappend(.(X30, X31), X32, .(X30, X33)) :- append(X31, X32, X33).\nand substitutionX30 -> T34,\nX31 -> T35,\nT18 -> .(T34, T35),\nT11 -> T36,\nX32 -> T36,\nX33 -> T38,\nT13 -> .(T34, T38),\nT37 -> T38"
            },
            {
                "from": 34,
                "to": 39,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 35,
                "to": 37,
                "label": "SUCCESS"
            },
            {
                "from": 38,
                "to": 30,
                "label": "INSTANCE with matching:\nT18 -> T35\nT11 -> T36\nT13 -> T38"
            },
            {
                "from": 40,
                "to": 42,
                "label": "SPLIT 1"
            },
            {
                "from": 40,
                "to": 43,
                "label": "SPLIT 2\nnew knowledge:\nT48 is ground\nT49 is ground\nT52 is ground\nreplacements:X50 -> T52"
            },
            {
                "from": 42,
                "to": 30,
                "label": "INSTANCE with matching:\nT18 -> T48\nT11 -> T49\nT13 -> X50"
            },
            {
                "from": 43,
                "to": 30,
                "label": "INSTANCE with matching:\nT18 -> .(T47, T52)"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Triples:

appendA(.(X1, X2), X3, .(X1, X4)) :- appendA(X2, X3, X4).
append3B([], X1, X2, X3) :- appendA(X1, X2, X3).
append3B(.(X1, X2), X3, X4, X5) :- appendA(X2, X3, X6).
append3B(.(X1, X2), X3, X4, X5) :- ','(appendcA(X2, X3, X6), appendA(.(X1, X6), X4, X5)).

Clauses:

appendcA([], X1, X1).
appendcA(.(X1, X2), X3, .(X1, X4)) :- appendcA(X2, X3, X4).

Afs:

append3B(x1, x2, x3, x4)  =  append3B(x1, x2, x3)


----------------------------------------

(3) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

append3B_in_4: (b,b,b,f)

appendA_in_3: (b,b,f)

appendcA_in_3: (b,b,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   APPEND3B_IN_GGGA([], X1, X2, X3) -> U2_GGGA(X1, X2, X3, appendA_in_gga(X1, X2, X3))
   APPEND3B_IN_GGGA([], X1, X2, X3) -> APPENDA_IN_GGA(X1, X2, X3)
   APPENDA_IN_GGA(.(X1, X2), X3, .(X1, X4)) -> U1_GGA(X1, X2, X3, X4, appendA_in_gga(X2, X3, X4))
   APPENDA_IN_GGA(.(X1, X2), X3, .(X1, X4)) -> APPENDA_IN_GGA(X2, X3, X4)
   APPEND3B_IN_GGGA(.(X1, X2), X3, X4, X5) -> U3_GGGA(X1, X2, X3, X4, X5, appendA_in_gga(X2, X3, X6))
   APPEND3B_IN_GGGA(.(X1, X2), X3, X4, X5) -> APPENDA_IN_GGA(X2, X3, X6)
   APPEND3B_IN_GGGA(.(X1, X2), X3, X4, X5) -> U4_GGGA(X1, X2, X3, X4, X5, appendcA_in_gga(X2, X3, X6))
   U4_GGGA(X1, X2, X3, X4, X5, appendcA_out_gga(X2, X3, X6)) -> U5_GGGA(X1, X2, X3, X4, X5, appendA_in_gga(.(X1, X6), X4, X5))
   U4_GGGA(X1, X2, X3, X4, X5, appendcA_out_gga(X2, X3, X6)) -> APPENDA_IN_GGA(.(X1, X6), X4, X5)

The TRS R consists of the following rules:

   appendcA_in_gga([], X1, X1) -> appendcA_out_gga([], X1, X1)
   appendcA_in_gga(.(X1, X2), X3, .(X1, X4)) -> U7_gga(X1, X2, X3, X4, appendcA_in_gga(X2, X3, X4))
   U7_gga(X1, X2, X3, X4, appendcA_out_gga(X2, X3, X4)) -> appendcA_out_gga(.(X1, X2), X3, .(X1, X4))

The argument filtering Pi contains the following mapping:
[]  =  []

appendA_in_gga(x1, x2, x3)  =  appendA_in_gga(x1, x2)

.(x1, x2)  =  .(x1, x2)

appendcA_in_gga(x1, x2, x3)  =  appendcA_in_gga(x1, x2)

appendcA_out_gga(x1, x2, x3)  =  appendcA_out_gga(x1, x2, x3)

U7_gga(x1, x2, x3, x4, x5)  =  U7_gga(x1, x2, x3, x5)

APPEND3B_IN_GGGA(x1, x2, x3, x4)  =  APPEND3B_IN_GGGA(x1, x2, x3)

U2_GGGA(x1, x2, x3, x4)  =  U2_GGGA(x1, x2, x4)

APPENDA_IN_GGA(x1, x2, x3)  =  APPENDA_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5)  =  U1_GGA(x1, x2, x3, x5)

U3_GGGA(x1, x2, x3, x4, x5, x6)  =  U3_GGGA(x1, x2, x3, x4, x6)

U4_GGGA(x1, x2, x3, x4, x5, x6)  =  U4_GGGA(x1, x2, x3, x4, x6)

U5_GGGA(x1, x2, x3, x4, x5, x6)  =  U5_GGGA(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND3B_IN_GGGA([], X1, X2, X3) -> U2_GGGA(X1, X2, X3, appendA_in_gga(X1, X2, X3))
   APPEND3B_IN_GGGA([], X1, X2, X3) -> APPENDA_IN_GGA(X1, X2, X3)
   APPENDA_IN_GGA(.(X1, X2), X3, .(X1, X4)) -> U1_GGA(X1, X2, X3, X4, appendA_in_gga(X2, X3, X4))
   APPENDA_IN_GGA(.(X1, X2), X3, .(X1, X4)) -> APPENDA_IN_GGA(X2, X3, X4)
   APPEND3B_IN_GGGA(.(X1, X2), X3, X4, X5) -> U3_GGGA(X1, X2, X3, X4, X5, appendA_in_gga(X2, X3, X6))
   APPEND3B_IN_GGGA(.(X1, X2), X3, X4, X5) -> APPENDA_IN_GGA(X2, X3, X6)
   APPEND3B_IN_GGGA(.(X1, X2), X3, X4, X5) -> U4_GGGA(X1, X2, X3, X4, X5, appendcA_in_gga(X2, X3, X6))
   U4_GGGA(X1, X2, X3, X4, X5, appendcA_out_gga(X2, X3, X6)) -> U5_GGGA(X1, X2, X3, X4, X5, appendA_in_gga(.(X1, X6), X4, X5))
   U4_GGGA(X1, X2, X3, X4, X5, appendcA_out_gga(X2, X3, X6)) -> APPENDA_IN_GGA(.(X1, X6), X4, X5)

The TRS R consists of the following rules:

   appendcA_in_gga([], X1, X1) -> appendcA_out_gga([], X1, X1)
   appendcA_in_gga(.(X1, X2), X3, .(X1, X4)) -> U7_gga(X1, X2, X3, X4, appendcA_in_gga(X2, X3, X4))
   U7_gga(X1, X2, X3, X4, appendcA_out_gga(X2, X3, X4)) -> appendcA_out_gga(.(X1, X2), X3, .(X1, X4))

The argument filtering Pi contains the following mapping:
[]  =  []

appendA_in_gga(x1, x2, x3)  =  appendA_in_gga(x1, x2)

.(x1, x2)  =  .(x1, x2)

appendcA_in_gga(x1, x2, x3)  =  appendcA_in_gga(x1, x2)

appendcA_out_gga(x1, x2, x3)  =  appendcA_out_gga(x1, x2, x3)

U7_gga(x1, x2, x3, x4, x5)  =  U7_gga(x1, x2, x3, x5)

APPEND3B_IN_GGGA(x1, x2, x3, x4)  =  APPEND3B_IN_GGGA(x1, x2, x3)

U2_GGGA(x1, x2, x3, x4)  =  U2_GGGA(x1, x2, x4)

APPENDA_IN_GGA(x1, x2, x3)  =  APPENDA_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5)  =  U1_GGA(x1, x2, x3, x5)

U3_GGGA(x1, x2, x3, x4, x5, x6)  =  U3_GGGA(x1, x2, x3, x4, x6)

U4_GGGA(x1, x2, x3, x4, x5, x6)  =  U4_GGGA(x1, x2, x3, x4, x6)

U5_GGGA(x1, x2, x3, x4, x5, x6)  =  U5_GGGA(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 8 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPENDA_IN_GGA(.(X1, X2), X3, .(X1, X4)) -> APPENDA_IN_GGA(X2, X3, X4)

The TRS R consists of the following rules:

   appendcA_in_gga([], X1, X1) -> appendcA_out_gga([], X1, X1)
   appendcA_in_gga(.(X1, X2), X3, .(X1, X4)) -> U7_gga(X1, X2, X3, X4, appendcA_in_gga(X2, X3, X4))
   U7_gga(X1, X2, X3, X4, appendcA_out_gga(X2, X3, X4)) -> appendcA_out_gga(.(X1, X2), X3, .(X1, X4))

The argument filtering Pi contains the following mapping:
[]  =  []

.(x1, x2)  =  .(x1, x2)

appendcA_in_gga(x1, x2, x3)  =  appendcA_in_gga(x1, x2)

appendcA_out_gga(x1, x2, x3)  =  appendcA_out_gga(x1, x2, x3)

U7_gga(x1, x2, x3, x4, x5)  =  U7_gga(x1, x2, x3, x5)

APPENDA_IN_GGA(x1, x2, x3)  =  APPENDA_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPENDA_IN_GGA(.(X1, X2), X3, .(X1, X4)) -> APPENDA_IN_GGA(X2, X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

APPENDA_IN_GGA(x1, x2, x3)  =  APPENDA_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPENDA_IN_GGA(.(X1, X2), X3) -> APPENDA_IN_GGA(X2, X3)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPENDA_IN_GGA(.(X1, X2), X3) -> APPENDA_IN_GGA(X2, X3)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(12)
YES
