YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/dsBtY.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

factor(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) PiDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) PiDP
        (24) PiDPToQDPProof [SOUND, 0 ms]
        (25) QDP
        (26) QDPOrderProof [EQUIVALENT, 21 ms]
        (27) QDP
        (28) DependencyGraphProof [EQUIVALENT, 0 ms]
        (29) TRUE


----------------------------------------

(0)
Obligation:
Clauses:

factor(cons(X, nil), X).
factor(cons(X, cons(Y, Xs)), T) :- ','(times(X, Y, Z), factor(cons(Z, Xs), T)).
times(0, X_, 0).
times(s(X), Y, Z) :- ','(times(X, Y, XY), plus(XY, Y, Z)).
plus(0, X, X).
plus(s(X), Y, s(Z)) :- plus(X, Y, Z).


Query: factor(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

factor_in_2: (b,f)

times_in_3: (b,b,f)

plus_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   factor_in_ga(cons(X, nil), X) -> factor_out_ga(cons(X, nil), X)
   factor_in_ga(cons(X, cons(Y, Xs)), T) -> U1_ga(X, Y, Xs, T, times_in_gga(X, Y, Z))
   times_in_gga(0, X_, 0) -> times_out_gga(0, X_, 0)
   times_in_gga(s(X), Y, Z) -> U3_gga(X, Y, Z, times_in_gga(X, Y, XY))
   U3_gga(X, Y, Z, times_out_gga(X, Y, XY)) -> U4_gga(X, Y, Z, plus_in_gga(XY, Y, Z))
   plus_in_gga(0, X, X) -> plus_out_gga(0, X, X)
   plus_in_gga(s(X), Y, s(Z)) -> U5_gga(X, Y, Z, plus_in_gga(X, Y, Z))
   U5_gga(X, Y, Z, plus_out_gga(X, Y, Z)) -> plus_out_gga(s(X), Y, s(Z))
   U4_gga(X, Y, Z, plus_out_gga(XY, Y, Z)) -> times_out_gga(s(X), Y, Z)
   U1_ga(X, Y, Xs, T, times_out_gga(X, Y, Z)) -> U2_ga(X, Y, Xs, T, factor_in_ga(cons(Z, Xs), T))
   U2_ga(X, Y, Xs, T, factor_out_ga(cons(Z, Xs), T)) -> factor_out_ga(cons(X, cons(Y, Xs)), T)

The argument filtering Pi contains the following mapping:
factor_in_ga(x1, x2)  =  factor_in_ga(x1)

cons(x1, x2)  =  cons(x1, x2)

nil  =  nil

factor_out_ga(x1, x2)  =  factor_out_ga(x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x3, x5)

times_in_gga(x1, x2, x3)  =  times_in_gga(x1, x2)

0  =  0

times_out_gga(x1, x2, x3)  =  times_out_gga(x3)

s(x1)  =  s(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x2, x4)

U4_gga(x1, x2, x3, x4)  =  U4_gga(x4)

plus_in_gga(x1, x2, x3)  =  plus_in_gga(x1, x2)

plus_out_gga(x1, x2, x3)  =  plus_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x4)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   factor_in_ga(cons(X, nil), X) -> factor_out_ga(cons(X, nil), X)
   factor_in_ga(cons(X, cons(Y, Xs)), T) -> U1_ga(X, Y, Xs, T, times_in_gga(X, Y, Z))
   times_in_gga(0, X_, 0) -> times_out_gga(0, X_, 0)
   times_in_gga(s(X), Y, Z) -> U3_gga(X, Y, Z, times_in_gga(X, Y, XY))
   U3_gga(X, Y, Z, times_out_gga(X, Y, XY)) -> U4_gga(X, Y, Z, plus_in_gga(XY, Y, Z))
   plus_in_gga(0, X, X) -> plus_out_gga(0, X, X)
   plus_in_gga(s(X), Y, s(Z)) -> U5_gga(X, Y, Z, plus_in_gga(X, Y, Z))
   U5_gga(X, Y, Z, plus_out_gga(X, Y, Z)) -> plus_out_gga(s(X), Y, s(Z))
   U4_gga(X, Y, Z, plus_out_gga(XY, Y, Z)) -> times_out_gga(s(X), Y, Z)
   U1_ga(X, Y, Xs, T, times_out_gga(X, Y, Z)) -> U2_ga(X, Y, Xs, T, factor_in_ga(cons(Z, Xs), T))
   U2_ga(X, Y, Xs, T, factor_out_ga(cons(Z, Xs), T)) -> factor_out_ga(cons(X, cons(Y, Xs)), T)

The argument filtering Pi contains the following mapping:
factor_in_ga(x1, x2)  =  factor_in_ga(x1)

cons(x1, x2)  =  cons(x1, x2)

nil  =  nil

factor_out_ga(x1, x2)  =  factor_out_ga(x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x3, x5)

times_in_gga(x1, x2, x3)  =  times_in_gga(x1, x2)

0  =  0

times_out_gga(x1, x2, x3)  =  times_out_gga(x3)

s(x1)  =  s(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x2, x4)

U4_gga(x1, x2, x3, x4)  =  U4_gga(x4)

plus_in_gga(x1, x2, x3)  =  plus_in_gga(x1, x2)

plus_out_gga(x1, x2, x3)  =  plus_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x4)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   FACTOR_IN_GA(cons(X, cons(Y, Xs)), T) -> U1_GA(X, Y, Xs, T, times_in_gga(X, Y, Z))
   FACTOR_IN_GA(cons(X, cons(Y, Xs)), T) -> TIMES_IN_GGA(X, Y, Z)
   TIMES_IN_GGA(s(X), Y, Z) -> U3_GGA(X, Y, Z, times_in_gga(X, Y, XY))
   TIMES_IN_GGA(s(X), Y, Z) -> TIMES_IN_GGA(X, Y, XY)
   U3_GGA(X, Y, Z, times_out_gga(X, Y, XY)) -> U4_GGA(X, Y, Z, plus_in_gga(XY, Y, Z))
   U3_GGA(X, Y, Z, times_out_gga(X, Y, XY)) -> PLUS_IN_GGA(XY, Y, Z)
   PLUS_IN_GGA(s(X), Y, s(Z)) -> U5_GGA(X, Y, Z, plus_in_gga(X, Y, Z))
   PLUS_IN_GGA(s(X), Y, s(Z)) -> PLUS_IN_GGA(X, Y, Z)
   U1_GA(X, Y, Xs, T, times_out_gga(X, Y, Z)) -> U2_GA(X, Y, Xs, T, factor_in_ga(cons(Z, Xs), T))
   U1_GA(X, Y, Xs, T, times_out_gga(X, Y, Z)) -> FACTOR_IN_GA(cons(Z, Xs), T)

The TRS R consists of the following rules:

   factor_in_ga(cons(X, nil), X) -> factor_out_ga(cons(X, nil), X)
   factor_in_ga(cons(X, cons(Y, Xs)), T) -> U1_ga(X, Y, Xs, T, times_in_gga(X, Y, Z))
   times_in_gga(0, X_, 0) -> times_out_gga(0, X_, 0)
   times_in_gga(s(X), Y, Z) -> U3_gga(X, Y, Z, times_in_gga(X, Y, XY))
   U3_gga(X, Y, Z, times_out_gga(X, Y, XY)) -> U4_gga(X, Y, Z, plus_in_gga(XY, Y, Z))
   plus_in_gga(0, X, X) -> plus_out_gga(0, X, X)
   plus_in_gga(s(X), Y, s(Z)) -> U5_gga(X, Y, Z, plus_in_gga(X, Y, Z))
   U5_gga(X, Y, Z, plus_out_gga(X, Y, Z)) -> plus_out_gga(s(X), Y, s(Z))
   U4_gga(X, Y, Z, plus_out_gga(XY, Y, Z)) -> times_out_gga(s(X), Y, Z)
   U1_ga(X, Y, Xs, T, times_out_gga(X, Y, Z)) -> U2_ga(X, Y, Xs, T, factor_in_ga(cons(Z, Xs), T))
   U2_ga(X, Y, Xs, T, factor_out_ga(cons(Z, Xs), T)) -> factor_out_ga(cons(X, cons(Y, Xs)), T)

The argument filtering Pi contains the following mapping:
factor_in_ga(x1, x2)  =  factor_in_ga(x1)

cons(x1, x2)  =  cons(x1, x2)

nil  =  nil

factor_out_ga(x1, x2)  =  factor_out_ga(x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x3, x5)

times_in_gga(x1, x2, x3)  =  times_in_gga(x1, x2)

0  =  0

times_out_gga(x1, x2, x3)  =  times_out_gga(x3)

s(x1)  =  s(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x2, x4)

U4_gga(x1, x2, x3, x4)  =  U4_gga(x4)

plus_in_gga(x1, x2, x3)  =  plus_in_gga(x1, x2)

plus_out_gga(x1, x2, x3)  =  plus_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x4)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

FACTOR_IN_GA(x1, x2)  =  FACTOR_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x3, x5)

TIMES_IN_GGA(x1, x2, x3)  =  TIMES_IN_GGA(x1, x2)

U3_GGA(x1, x2, x3, x4)  =  U3_GGA(x2, x4)

U4_GGA(x1, x2, x3, x4)  =  U4_GGA(x4)

PLUS_IN_GGA(x1, x2, x3)  =  PLUS_IN_GGA(x1, x2)

U5_GGA(x1, x2, x3, x4)  =  U5_GGA(x4)

U2_GA(x1, x2, x3, x4, x5)  =  U2_GA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FACTOR_IN_GA(cons(X, cons(Y, Xs)), T) -> U1_GA(X, Y, Xs, T, times_in_gga(X, Y, Z))
   FACTOR_IN_GA(cons(X, cons(Y, Xs)), T) -> TIMES_IN_GGA(X, Y, Z)
   TIMES_IN_GGA(s(X), Y, Z) -> U3_GGA(X, Y, Z, times_in_gga(X, Y, XY))
   TIMES_IN_GGA(s(X), Y, Z) -> TIMES_IN_GGA(X, Y, XY)
   U3_GGA(X, Y, Z, times_out_gga(X, Y, XY)) -> U4_GGA(X, Y, Z, plus_in_gga(XY, Y, Z))
   U3_GGA(X, Y, Z, times_out_gga(X, Y, XY)) -> PLUS_IN_GGA(XY, Y, Z)
   PLUS_IN_GGA(s(X), Y, s(Z)) -> U5_GGA(X, Y, Z, plus_in_gga(X, Y, Z))
   PLUS_IN_GGA(s(X), Y, s(Z)) -> PLUS_IN_GGA(X, Y, Z)
   U1_GA(X, Y, Xs, T, times_out_gga(X, Y, Z)) -> U2_GA(X, Y, Xs, T, factor_in_ga(cons(Z, Xs), T))
   U1_GA(X, Y, Xs, T, times_out_gga(X, Y, Z)) -> FACTOR_IN_GA(cons(Z, Xs), T)

The TRS R consists of the following rules:

   factor_in_ga(cons(X, nil), X) -> factor_out_ga(cons(X, nil), X)
   factor_in_ga(cons(X, cons(Y, Xs)), T) -> U1_ga(X, Y, Xs, T, times_in_gga(X, Y, Z))
   times_in_gga(0, X_, 0) -> times_out_gga(0, X_, 0)
   times_in_gga(s(X), Y, Z) -> U3_gga(X, Y, Z, times_in_gga(X, Y, XY))
   U3_gga(X, Y, Z, times_out_gga(X, Y, XY)) -> U4_gga(X, Y, Z, plus_in_gga(XY, Y, Z))
   plus_in_gga(0, X, X) -> plus_out_gga(0, X, X)
   plus_in_gga(s(X), Y, s(Z)) -> U5_gga(X, Y, Z, plus_in_gga(X, Y, Z))
   U5_gga(X, Y, Z, plus_out_gga(X, Y, Z)) -> plus_out_gga(s(X), Y, s(Z))
   U4_gga(X, Y, Z, plus_out_gga(XY, Y, Z)) -> times_out_gga(s(X), Y, Z)
   U1_ga(X, Y, Xs, T, times_out_gga(X, Y, Z)) -> U2_ga(X, Y, Xs, T, factor_in_ga(cons(Z, Xs), T))
   U2_ga(X, Y, Xs, T, factor_out_ga(cons(Z, Xs), T)) -> factor_out_ga(cons(X, cons(Y, Xs)), T)

The argument filtering Pi contains the following mapping:
factor_in_ga(x1, x2)  =  factor_in_ga(x1)

cons(x1, x2)  =  cons(x1, x2)

nil  =  nil

factor_out_ga(x1, x2)  =  factor_out_ga(x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x3, x5)

times_in_gga(x1, x2, x3)  =  times_in_gga(x1, x2)

0  =  0

times_out_gga(x1, x2, x3)  =  times_out_gga(x3)

s(x1)  =  s(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x2, x4)

U4_gga(x1, x2, x3, x4)  =  U4_gga(x4)

plus_in_gga(x1, x2, x3)  =  plus_in_gga(x1, x2)

plus_out_gga(x1, x2, x3)  =  plus_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x4)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

FACTOR_IN_GA(x1, x2)  =  FACTOR_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x3, x5)

TIMES_IN_GGA(x1, x2, x3)  =  TIMES_IN_GGA(x1, x2)

U3_GGA(x1, x2, x3, x4)  =  U3_GGA(x2, x4)

U4_GGA(x1, x2, x3, x4)  =  U4_GGA(x4)

PLUS_IN_GGA(x1, x2, x3)  =  PLUS_IN_GGA(x1, x2)

U5_GGA(x1, x2, x3, x4)  =  U5_GGA(x4)

U2_GA(x1, x2, x3, x4, x5)  =  U2_GA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 6 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PLUS_IN_GGA(s(X), Y, s(Z)) -> PLUS_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   factor_in_ga(cons(X, nil), X) -> factor_out_ga(cons(X, nil), X)
   factor_in_ga(cons(X, cons(Y, Xs)), T) -> U1_ga(X, Y, Xs, T, times_in_gga(X, Y, Z))
   times_in_gga(0, X_, 0) -> times_out_gga(0, X_, 0)
   times_in_gga(s(X), Y, Z) -> U3_gga(X, Y, Z, times_in_gga(X, Y, XY))
   U3_gga(X, Y, Z, times_out_gga(X, Y, XY)) -> U4_gga(X, Y, Z, plus_in_gga(XY, Y, Z))
   plus_in_gga(0, X, X) -> plus_out_gga(0, X, X)
   plus_in_gga(s(X), Y, s(Z)) -> U5_gga(X, Y, Z, plus_in_gga(X, Y, Z))
   U5_gga(X, Y, Z, plus_out_gga(X, Y, Z)) -> plus_out_gga(s(X), Y, s(Z))
   U4_gga(X, Y, Z, plus_out_gga(XY, Y, Z)) -> times_out_gga(s(X), Y, Z)
   U1_ga(X, Y, Xs, T, times_out_gga(X, Y, Z)) -> U2_ga(X, Y, Xs, T, factor_in_ga(cons(Z, Xs), T))
   U2_ga(X, Y, Xs, T, factor_out_ga(cons(Z, Xs), T)) -> factor_out_ga(cons(X, cons(Y, Xs)), T)

The argument filtering Pi contains the following mapping:
factor_in_ga(x1, x2)  =  factor_in_ga(x1)

cons(x1, x2)  =  cons(x1, x2)

nil  =  nil

factor_out_ga(x1, x2)  =  factor_out_ga(x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x3, x5)

times_in_gga(x1, x2, x3)  =  times_in_gga(x1, x2)

0  =  0

times_out_gga(x1, x2, x3)  =  times_out_gga(x3)

s(x1)  =  s(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x2, x4)

U4_gga(x1, x2, x3, x4)  =  U4_gga(x4)

plus_in_gga(x1, x2, x3)  =  plus_in_gga(x1, x2)

plus_out_gga(x1, x2, x3)  =  plus_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x4)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

PLUS_IN_GGA(x1, x2, x3)  =  PLUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PLUS_IN_GGA(s(X), Y, s(Z)) -> PLUS_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

PLUS_IN_GGA(x1, x2, x3)  =  PLUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PLUS_IN_GGA(s(X), Y) -> PLUS_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*PLUS_IN_GGA(s(X), Y) -> PLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TIMES_IN_GGA(s(X), Y, Z) -> TIMES_IN_GGA(X, Y, XY)

The TRS R consists of the following rules:

   factor_in_ga(cons(X, nil), X) -> factor_out_ga(cons(X, nil), X)
   factor_in_ga(cons(X, cons(Y, Xs)), T) -> U1_ga(X, Y, Xs, T, times_in_gga(X, Y, Z))
   times_in_gga(0, X_, 0) -> times_out_gga(0, X_, 0)
   times_in_gga(s(X), Y, Z) -> U3_gga(X, Y, Z, times_in_gga(X, Y, XY))
   U3_gga(X, Y, Z, times_out_gga(X, Y, XY)) -> U4_gga(X, Y, Z, plus_in_gga(XY, Y, Z))
   plus_in_gga(0, X, X) -> plus_out_gga(0, X, X)
   plus_in_gga(s(X), Y, s(Z)) -> U5_gga(X, Y, Z, plus_in_gga(X, Y, Z))
   U5_gga(X, Y, Z, plus_out_gga(X, Y, Z)) -> plus_out_gga(s(X), Y, s(Z))
   U4_gga(X, Y, Z, plus_out_gga(XY, Y, Z)) -> times_out_gga(s(X), Y, Z)
   U1_ga(X, Y, Xs, T, times_out_gga(X, Y, Z)) -> U2_ga(X, Y, Xs, T, factor_in_ga(cons(Z, Xs), T))
   U2_ga(X, Y, Xs, T, factor_out_ga(cons(Z, Xs), T)) -> factor_out_ga(cons(X, cons(Y, Xs)), T)

The argument filtering Pi contains the following mapping:
factor_in_ga(x1, x2)  =  factor_in_ga(x1)

cons(x1, x2)  =  cons(x1, x2)

nil  =  nil

factor_out_ga(x1, x2)  =  factor_out_ga(x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x3, x5)

times_in_gga(x1, x2, x3)  =  times_in_gga(x1, x2)

0  =  0

times_out_gga(x1, x2, x3)  =  times_out_gga(x3)

s(x1)  =  s(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x2, x4)

U4_gga(x1, x2, x3, x4)  =  U4_gga(x4)

plus_in_gga(x1, x2, x3)  =  plus_in_gga(x1, x2)

plus_out_gga(x1, x2, x3)  =  plus_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x4)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

TIMES_IN_GGA(x1, x2, x3)  =  TIMES_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TIMES_IN_GGA(s(X), Y, Z) -> TIMES_IN_GGA(X, Y, XY)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

TIMES_IN_GGA(x1, x2, x3)  =  TIMES_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TIMES_IN_GGA(s(X), Y) -> TIMES_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TIMES_IN_GGA(s(X), Y) -> TIMES_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(X, Y, Xs, T, times_out_gga(X, Y, Z)) -> FACTOR_IN_GA(cons(Z, Xs), T)
   FACTOR_IN_GA(cons(X, cons(Y, Xs)), T) -> U1_GA(X, Y, Xs, T, times_in_gga(X, Y, Z))

The TRS R consists of the following rules:

   factor_in_ga(cons(X, nil), X) -> factor_out_ga(cons(X, nil), X)
   factor_in_ga(cons(X, cons(Y, Xs)), T) -> U1_ga(X, Y, Xs, T, times_in_gga(X, Y, Z))
   times_in_gga(0, X_, 0) -> times_out_gga(0, X_, 0)
   times_in_gga(s(X), Y, Z) -> U3_gga(X, Y, Z, times_in_gga(X, Y, XY))
   U3_gga(X, Y, Z, times_out_gga(X, Y, XY)) -> U4_gga(X, Y, Z, plus_in_gga(XY, Y, Z))
   plus_in_gga(0, X, X) -> plus_out_gga(0, X, X)
   plus_in_gga(s(X), Y, s(Z)) -> U5_gga(X, Y, Z, plus_in_gga(X, Y, Z))
   U5_gga(X, Y, Z, plus_out_gga(X, Y, Z)) -> plus_out_gga(s(X), Y, s(Z))
   U4_gga(X, Y, Z, plus_out_gga(XY, Y, Z)) -> times_out_gga(s(X), Y, Z)
   U1_ga(X, Y, Xs, T, times_out_gga(X, Y, Z)) -> U2_ga(X, Y, Xs, T, factor_in_ga(cons(Z, Xs), T))
   U2_ga(X, Y, Xs, T, factor_out_ga(cons(Z, Xs), T)) -> factor_out_ga(cons(X, cons(Y, Xs)), T)

The argument filtering Pi contains the following mapping:
factor_in_ga(x1, x2)  =  factor_in_ga(x1)

cons(x1, x2)  =  cons(x1, x2)

nil  =  nil

factor_out_ga(x1, x2)  =  factor_out_ga(x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x3, x5)

times_in_gga(x1, x2, x3)  =  times_in_gga(x1, x2)

0  =  0

times_out_gga(x1, x2, x3)  =  times_out_gga(x3)

s(x1)  =  s(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x2, x4)

U4_gga(x1, x2, x3, x4)  =  U4_gga(x4)

plus_in_gga(x1, x2, x3)  =  plus_in_gga(x1, x2)

plus_out_gga(x1, x2, x3)  =  plus_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x4)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

FACTOR_IN_GA(x1, x2)  =  FACTOR_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x3, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(23)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(X, Y, Xs, T, times_out_gga(X, Y, Z)) -> FACTOR_IN_GA(cons(Z, Xs), T)
   FACTOR_IN_GA(cons(X, cons(Y, Xs)), T) -> U1_GA(X, Y, Xs, T, times_in_gga(X, Y, Z))

The TRS R consists of the following rules:

   times_in_gga(0, X_, 0) -> times_out_gga(0, X_, 0)
   times_in_gga(s(X), Y, Z) -> U3_gga(X, Y, Z, times_in_gga(X, Y, XY))
   U3_gga(X, Y, Z, times_out_gga(X, Y, XY)) -> U4_gga(X, Y, Z, plus_in_gga(XY, Y, Z))
   U4_gga(X, Y, Z, plus_out_gga(XY, Y, Z)) -> times_out_gga(s(X), Y, Z)
   plus_in_gga(0, X, X) -> plus_out_gga(0, X, X)
   plus_in_gga(s(X), Y, s(Z)) -> U5_gga(X, Y, Z, plus_in_gga(X, Y, Z))
   U5_gga(X, Y, Z, plus_out_gga(X, Y, Z)) -> plus_out_gga(s(X), Y, s(Z))

The argument filtering Pi contains the following mapping:
cons(x1, x2)  =  cons(x1, x2)

times_in_gga(x1, x2, x3)  =  times_in_gga(x1, x2)

0  =  0

times_out_gga(x1, x2, x3)  =  times_out_gga(x3)

s(x1)  =  s(x1)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x2, x4)

U4_gga(x1, x2, x3, x4)  =  U4_gga(x4)

plus_in_gga(x1, x2, x3)  =  plus_in_gga(x1, x2)

plus_out_gga(x1, x2, x3)  =  plus_out_gga(x3)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x4)

FACTOR_IN_GA(x1, x2)  =  FACTOR_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x3, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(24) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GA(Xs, times_out_gga(Z)) -> FACTOR_IN_GA(cons(Z, Xs))
   FACTOR_IN_GA(cons(X, cons(Y, Xs))) -> U1_GA(Xs, times_in_gga(X, Y))

The TRS R consists of the following rules:

   times_in_gga(0, X_) -> times_out_gga(0)
   times_in_gga(s(X), Y) -> U3_gga(Y, times_in_gga(X, Y))
   U3_gga(Y, times_out_gga(XY)) -> U4_gga(plus_in_gga(XY, Y))
   U4_gga(plus_out_gga(Z)) -> times_out_gga(Z)
   plus_in_gga(0, X) -> plus_out_gga(X)
   plus_in_gga(s(X), Y) -> U5_gga(plus_in_gga(X, Y))
   U5_gga(plus_out_gga(Z)) -> plus_out_gga(s(Z))

The set Q consists of the following terms:

   times_in_gga(x0, x1)
   U3_gga(x0, x1)
   U4_gga(x0)
   plus_in_gga(x0, x1)
   U5_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   FACTOR_IN_GA(cons(X, cons(Y, Xs))) -> U1_GA(Xs, times_in_gga(X, Y))
The remaining pairs can at least be oriented weakly.
Used ordering:  Polynomial Order [NEGPOLO,POLO] with Interpretation:

POL( U1_GA_2(x_1, x_2) ) = 2x_1
POL( times_in_gga_2(x_1, x_2) ) = 0
POL( 0 ) = 2
POL( times_out_gga_1(x_1) ) = max{0, 2x_1 - 2}
POL( s_1(x_1) ) = 2x_1
POL( U3_gga_2(x_1, x_2) ) = max{0, x_1 - 2}
POL( U4_gga_1(x_1) ) = 2
POL( plus_in_gga_2(x_1, x_2) ) = 0
POL( plus_out_gga_1(x_1) ) = max{0, x_1 - 2}
POL( U5_gga_1(x_1) ) = max{0, -2}
POL( FACTOR_IN_GA_1(x_1) ) = max{0, 2x_1 - 2}
POL( cons_2(x_1, x_2) ) = x_2 + 1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GA(Xs, times_out_gga(Z)) -> FACTOR_IN_GA(cons(Z, Xs))

The TRS R consists of the following rules:

   times_in_gga(0, X_) -> times_out_gga(0)
   times_in_gga(s(X), Y) -> U3_gga(Y, times_in_gga(X, Y))
   U3_gga(Y, times_out_gga(XY)) -> U4_gga(plus_in_gga(XY, Y))
   U4_gga(plus_out_gga(Z)) -> times_out_gga(Z)
   plus_in_gga(0, X) -> plus_out_gga(X)
   plus_in_gga(s(X), Y) -> U5_gga(plus_in_gga(X, Y))
   U5_gga(plus_out_gga(Z)) -> plus_out_gga(s(Z))

The set Q consists of the following terms:

   times_in_gga(x0, x1)
   U3_gga(x0, x1)
   U4_gga(x0)
   plus_in_gga(x0, x1)
   U5_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(29)
TRUE
