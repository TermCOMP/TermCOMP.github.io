YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/L2sEL.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

avg(g,g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) PiDPToQDPProof [SOUND, 0 ms]
(10) QDP
(11) MRRProof [EQUIVALENT, 2 ms]
(12) QDP
(13) PisEmptyProof [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
Clauses:

avg(s(X), Y, Z) :- avg(X, s(Y), Z).
avg(X, s(s(s(Y))), s(Z)) :- avg(s(X), Y, Z).
avg(0, 0, 0).
avg(0, s(0), 0).
avg(0, s(s(0)), s(0)).


Query: avg(g,g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

avg_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   avg_in_gga(s(X), Y, Z) -> U1_gga(X, Y, Z, avg_in_gga(X, s(Y), Z))
   avg_in_gga(X, s(s(s(Y))), s(Z)) -> U2_gga(X, Y, Z, avg_in_gga(s(X), Y, Z))
   avg_in_gga(0, 0, 0) -> avg_out_gga(0, 0, 0)
   avg_in_gga(0, s(0), 0) -> avg_out_gga(0, s(0), 0)
   avg_in_gga(0, s(s(0)), s(0)) -> avg_out_gga(0, s(s(0)), s(0))
   U2_gga(X, Y, Z, avg_out_gga(s(X), Y, Z)) -> avg_out_gga(X, s(s(s(Y))), s(Z))
   U1_gga(X, Y, Z, avg_out_gga(X, s(Y), Z)) -> avg_out_gga(s(X), Y, Z)

The argument filtering Pi contains the following mapping:
avg_in_gga(x1, x2, x3)  =  avg_in_gga(x1, x2)

s(x1)  =  s(x1)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x1, x2, x4)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x1, x2, x4)

0  =  0

avg_out_gga(x1, x2, x3)  =  avg_out_gga(x1, x2, x3)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   avg_in_gga(s(X), Y, Z) -> U1_gga(X, Y, Z, avg_in_gga(X, s(Y), Z))
   avg_in_gga(X, s(s(s(Y))), s(Z)) -> U2_gga(X, Y, Z, avg_in_gga(s(X), Y, Z))
   avg_in_gga(0, 0, 0) -> avg_out_gga(0, 0, 0)
   avg_in_gga(0, s(0), 0) -> avg_out_gga(0, s(0), 0)
   avg_in_gga(0, s(s(0)), s(0)) -> avg_out_gga(0, s(s(0)), s(0))
   U2_gga(X, Y, Z, avg_out_gga(s(X), Y, Z)) -> avg_out_gga(X, s(s(s(Y))), s(Z))
   U1_gga(X, Y, Z, avg_out_gga(X, s(Y), Z)) -> avg_out_gga(s(X), Y, Z)

The argument filtering Pi contains the following mapping:
avg_in_gga(x1, x2, x3)  =  avg_in_gga(x1, x2)

s(x1)  =  s(x1)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x1, x2, x4)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x1, x2, x4)

0  =  0

avg_out_gga(x1, x2, x3)  =  avg_out_gga(x1, x2, x3)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   AVG_IN_GGA(s(X), Y, Z) -> U1_GGA(X, Y, Z, avg_in_gga(X, s(Y), Z))
   AVG_IN_GGA(s(X), Y, Z) -> AVG_IN_GGA(X, s(Y), Z)
   AVG_IN_GGA(X, s(s(s(Y))), s(Z)) -> U2_GGA(X, Y, Z, avg_in_gga(s(X), Y, Z))
   AVG_IN_GGA(X, s(s(s(Y))), s(Z)) -> AVG_IN_GGA(s(X), Y, Z)

The TRS R consists of the following rules:

   avg_in_gga(s(X), Y, Z) -> U1_gga(X, Y, Z, avg_in_gga(X, s(Y), Z))
   avg_in_gga(X, s(s(s(Y))), s(Z)) -> U2_gga(X, Y, Z, avg_in_gga(s(X), Y, Z))
   avg_in_gga(0, 0, 0) -> avg_out_gga(0, 0, 0)
   avg_in_gga(0, s(0), 0) -> avg_out_gga(0, s(0), 0)
   avg_in_gga(0, s(s(0)), s(0)) -> avg_out_gga(0, s(s(0)), s(0))
   U2_gga(X, Y, Z, avg_out_gga(s(X), Y, Z)) -> avg_out_gga(X, s(s(s(Y))), s(Z))
   U1_gga(X, Y, Z, avg_out_gga(X, s(Y), Z)) -> avg_out_gga(s(X), Y, Z)

The argument filtering Pi contains the following mapping:
avg_in_gga(x1, x2, x3)  =  avg_in_gga(x1, x2)

s(x1)  =  s(x1)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x1, x2, x4)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x1, x2, x4)

0  =  0

avg_out_gga(x1, x2, x3)  =  avg_out_gga(x1, x2, x3)

AVG_IN_GGA(x1, x2, x3)  =  AVG_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4)  =  U1_GGA(x1, x2, x4)

U2_GGA(x1, x2, x3, x4)  =  U2_GGA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   AVG_IN_GGA(s(X), Y, Z) -> U1_GGA(X, Y, Z, avg_in_gga(X, s(Y), Z))
   AVG_IN_GGA(s(X), Y, Z) -> AVG_IN_GGA(X, s(Y), Z)
   AVG_IN_GGA(X, s(s(s(Y))), s(Z)) -> U2_GGA(X, Y, Z, avg_in_gga(s(X), Y, Z))
   AVG_IN_GGA(X, s(s(s(Y))), s(Z)) -> AVG_IN_GGA(s(X), Y, Z)

The TRS R consists of the following rules:

   avg_in_gga(s(X), Y, Z) -> U1_gga(X, Y, Z, avg_in_gga(X, s(Y), Z))
   avg_in_gga(X, s(s(s(Y))), s(Z)) -> U2_gga(X, Y, Z, avg_in_gga(s(X), Y, Z))
   avg_in_gga(0, 0, 0) -> avg_out_gga(0, 0, 0)
   avg_in_gga(0, s(0), 0) -> avg_out_gga(0, s(0), 0)
   avg_in_gga(0, s(s(0)), s(0)) -> avg_out_gga(0, s(s(0)), s(0))
   U2_gga(X, Y, Z, avg_out_gga(s(X), Y, Z)) -> avg_out_gga(X, s(s(s(Y))), s(Z))
   U1_gga(X, Y, Z, avg_out_gga(X, s(Y), Z)) -> avg_out_gga(s(X), Y, Z)

The argument filtering Pi contains the following mapping:
avg_in_gga(x1, x2, x3)  =  avg_in_gga(x1, x2)

s(x1)  =  s(x1)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x1, x2, x4)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x1, x2, x4)

0  =  0

avg_out_gga(x1, x2, x3)  =  avg_out_gga(x1, x2, x3)

AVG_IN_GGA(x1, x2, x3)  =  AVG_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4)  =  U1_GGA(x1, x2, x4)

U2_GGA(x1, x2, x3, x4)  =  U2_GGA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   AVG_IN_GGA(X, s(s(s(Y))), s(Z)) -> AVG_IN_GGA(s(X), Y, Z)
   AVG_IN_GGA(s(X), Y, Z) -> AVG_IN_GGA(X, s(Y), Z)

The TRS R consists of the following rules:

   avg_in_gga(s(X), Y, Z) -> U1_gga(X, Y, Z, avg_in_gga(X, s(Y), Z))
   avg_in_gga(X, s(s(s(Y))), s(Z)) -> U2_gga(X, Y, Z, avg_in_gga(s(X), Y, Z))
   avg_in_gga(0, 0, 0) -> avg_out_gga(0, 0, 0)
   avg_in_gga(0, s(0), 0) -> avg_out_gga(0, s(0), 0)
   avg_in_gga(0, s(s(0)), s(0)) -> avg_out_gga(0, s(s(0)), s(0))
   U2_gga(X, Y, Z, avg_out_gga(s(X), Y, Z)) -> avg_out_gga(X, s(s(s(Y))), s(Z))
   U1_gga(X, Y, Z, avg_out_gga(X, s(Y), Z)) -> avg_out_gga(s(X), Y, Z)

The argument filtering Pi contains the following mapping:
avg_in_gga(x1, x2, x3)  =  avg_in_gga(x1, x2)

s(x1)  =  s(x1)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x1, x2, x4)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x1, x2, x4)

0  =  0

avg_out_gga(x1, x2, x3)  =  avg_out_gga(x1, x2, x3)

AVG_IN_GGA(x1, x2, x3)  =  AVG_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   AVG_IN_GGA(X, s(s(s(Y))), s(Z)) -> AVG_IN_GGA(s(X), Y, Z)
   AVG_IN_GGA(s(X), Y, Z) -> AVG_IN_GGA(X, s(Y), Z)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

AVG_IN_GGA(x1, x2, x3)  =  AVG_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AVG_IN_GGA(X, s(s(s(Y)))) -> AVG_IN_GGA(s(X), Y)
   AVG_IN_GGA(s(X), Y) -> AVG_IN_GGA(X, s(Y))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   AVG_IN_GGA(X, s(s(s(Y)))) -> AVG_IN_GGA(s(X), Y)
   AVG_IN_GGA(s(X), Y) -> AVG_IN_GGA(X, s(Y))


Used ordering: Knuth-Bendix order [KBO] with precedence:s_1 > AVG_IN_GGA_2

and weight map:

   s_1=1
   AVG_IN_GGA_2=0

The variable weight is 1

----------------------------------------

(12)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(14)
YES
