YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/T46nY.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

average(g,a,g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) PiDPToQDPProof [SOUND, 0 ms]
(10) QDP
(11) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Clauses:

average(0, 0, 0).
average(0, s(0), 0).
average(0, s(s(0)), s(0)).
average(s(X), Y, Z) :- average(X, s(Y), Z).
average(X, s(s(s(Y))), s(Z)) :- average(s(X), Y, Z).


Query: average(g,a,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

average_in_3: (b,f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   average_in_gag(0, 0, 0) -> average_out_gag(0, 0, 0)
   average_in_gag(0, s(0), 0) -> average_out_gag(0, s(0), 0)
   average_in_gag(0, s(s(0)), s(0)) -> average_out_gag(0, s(s(0)), s(0))
   average_in_gag(s(X), Y, Z) -> U1_gag(X, Y, Z, average_in_gag(X, s(Y), Z))
   average_in_gag(X, s(s(s(Y))), s(Z)) -> U2_gag(X, Y, Z, average_in_gag(s(X), Y, Z))
   U2_gag(X, Y, Z, average_out_gag(s(X), Y, Z)) -> average_out_gag(X, s(s(s(Y))), s(Z))
   U1_gag(X, Y, Z, average_out_gag(X, s(Y), Z)) -> average_out_gag(s(X), Y, Z)

The argument filtering Pi contains the following mapping:
average_in_gag(x1, x2, x3)  =  average_in_gag(x1, x3)

0  =  0

average_out_gag(x1, x2, x3)  =  average_out_gag(x2)

s(x1)  =  s(x1)

U1_gag(x1, x2, x3, x4)  =  U1_gag(x4)

U2_gag(x1, x2, x3, x4)  =  U2_gag(x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   average_in_gag(0, 0, 0) -> average_out_gag(0, 0, 0)
   average_in_gag(0, s(0), 0) -> average_out_gag(0, s(0), 0)
   average_in_gag(0, s(s(0)), s(0)) -> average_out_gag(0, s(s(0)), s(0))
   average_in_gag(s(X), Y, Z) -> U1_gag(X, Y, Z, average_in_gag(X, s(Y), Z))
   average_in_gag(X, s(s(s(Y))), s(Z)) -> U2_gag(X, Y, Z, average_in_gag(s(X), Y, Z))
   U2_gag(X, Y, Z, average_out_gag(s(X), Y, Z)) -> average_out_gag(X, s(s(s(Y))), s(Z))
   U1_gag(X, Y, Z, average_out_gag(X, s(Y), Z)) -> average_out_gag(s(X), Y, Z)

The argument filtering Pi contains the following mapping:
average_in_gag(x1, x2, x3)  =  average_in_gag(x1, x3)

0  =  0

average_out_gag(x1, x2, x3)  =  average_out_gag(x2)

s(x1)  =  s(x1)

U1_gag(x1, x2, x3, x4)  =  U1_gag(x4)

U2_gag(x1, x2, x3, x4)  =  U2_gag(x4)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   AVERAGE_IN_GAG(s(X), Y, Z) -> U1_GAG(X, Y, Z, average_in_gag(X, s(Y), Z))
   AVERAGE_IN_GAG(s(X), Y, Z) -> AVERAGE_IN_GAG(X, s(Y), Z)
   AVERAGE_IN_GAG(X, s(s(s(Y))), s(Z)) -> U2_GAG(X, Y, Z, average_in_gag(s(X), Y, Z))
   AVERAGE_IN_GAG(X, s(s(s(Y))), s(Z)) -> AVERAGE_IN_GAG(s(X), Y, Z)

The TRS R consists of the following rules:

   average_in_gag(0, 0, 0) -> average_out_gag(0, 0, 0)
   average_in_gag(0, s(0), 0) -> average_out_gag(0, s(0), 0)
   average_in_gag(0, s(s(0)), s(0)) -> average_out_gag(0, s(s(0)), s(0))
   average_in_gag(s(X), Y, Z) -> U1_gag(X, Y, Z, average_in_gag(X, s(Y), Z))
   average_in_gag(X, s(s(s(Y))), s(Z)) -> U2_gag(X, Y, Z, average_in_gag(s(X), Y, Z))
   U2_gag(X, Y, Z, average_out_gag(s(X), Y, Z)) -> average_out_gag(X, s(s(s(Y))), s(Z))
   U1_gag(X, Y, Z, average_out_gag(X, s(Y), Z)) -> average_out_gag(s(X), Y, Z)

The argument filtering Pi contains the following mapping:
average_in_gag(x1, x2, x3)  =  average_in_gag(x1, x3)

0  =  0

average_out_gag(x1, x2, x3)  =  average_out_gag(x2)

s(x1)  =  s(x1)

U1_gag(x1, x2, x3, x4)  =  U1_gag(x4)

U2_gag(x1, x2, x3, x4)  =  U2_gag(x4)

AVERAGE_IN_GAG(x1, x2, x3)  =  AVERAGE_IN_GAG(x1, x3)

U1_GAG(x1, x2, x3, x4)  =  U1_GAG(x4)

U2_GAG(x1, x2, x3, x4)  =  U2_GAG(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   AVERAGE_IN_GAG(s(X), Y, Z) -> U1_GAG(X, Y, Z, average_in_gag(X, s(Y), Z))
   AVERAGE_IN_GAG(s(X), Y, Z) -> AVERAGE_IN_GAG(X, s(Y), Z)
   AVERAGE_IN_GAG(X, s(s(s(Y))), s(Z)) -> U2_GAG(X, Y, Z, average_in_gag(s(X), Y, Z))
   AVERAGE_IN_GAG(X, s(s(s(Y))), s(Z)) -> AVERAGE_IN_GAG(s(X), Y, Z)

The TRS R consists of the following rules:

   average_in_gag(0, 0, 0) -> average_out_gag(0, 0, 0)
   average_in_gag(0, s(0), 0) -> average_out_gag(0, s(0), 0)
   average_in_gag(0, s(s(0)), s(0)) -> average_out_gag(0, s(s(0)), s(0))
   average_in_gag(s(X), Y, Z) -> U1_gag(X, Y, Z, average_in_gag(X, s(Y), Z))
   average_in_gag(X, s(s(s(Y))), s(Z)) -> U2_gag(X, Y, Z, average_in_gag(s(X), Y, Z))
   U2_gag(X, Y, Z, average_out_gag(s(X), Y, Z)) -> average_out_gag(X, s(s(s(Y))), s(Z))
   U1_gag(X, Y, Z, average_out_gag(X, s(Y), Z)) -> average_out_gag(s(X), Y, Z)

The argument filtering Pi contains the following mapping:
average_in_gag(x1, x2, x3)  =  average_in_gag(x1, x3)

0  =  0

average_out_gag(x1, x2, x3)  =  average_out_gag(x2)

s(x1)  =  s(x1)

U1_gag(x1, x2, x3, x4)  =  U1_gag(x4)

U2_gag(x1, x2, x3, x4)  =  U2_gag(x4)

AVERAGE_IN_GAG(x1, x2, x3)  =  AVERAGE_IN_GAG(x1, x3)

U1_GAG(x1, x2, x3, x4)  =  U1_GAG(x4)

U2_GAG(x1, x2, x3, x4)  =  U2_GAG(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   AVERAGE_IN_GAG(X, s(s(s(Y))), s(Z)) -> AVERAGE_IN_GAG(s(X), Y, Z)
   AVERAGE_IN_GAG(s(X), Y, Z) -> AVERAGE_IN_GAG(X, s(Y), Z)

The TRS R consists of the following rules:

   average_in_gag(0, 0, 0) -> average_out_gag(0, 0, 0)
   average_in_gag(0, s(0), 0) -> average_out_gag(0, s(0), 0)
   average_in_gag(0, s(s(0)), s(0)) -> average_out_gag(0, s(s(0)), s(0))
   average_in_gag(s(X), Y, Z) -> U1_gag(X, Y, Z, average_in_gag(X, s(Y), Z))
   average_in_gag(X, s(s(s(Y))), s(Z)) -> U2_gag(X, Y, Z, average_in_gag(s(X), Y, Z))
   U2_gag(X, Y, Z, average_out_gag(s(X), Y, Z)) -> average_out_gag(X, s(s(s(Y))), s(Z))
   U1_gag(X, Y, Z, average_out_gag(X, s(Y), Z)) -> average_out_gag(s(X), Y, Z)

The argument filtering Pi contains the following mapping:
average_in_gag(x1, x2, x3)  =  average_in_gag(x1, x3)

0  =  0

average_out_gag(x1, x2, x3)  =  average_out_gag(x2)

s(x1)  =  s(x1)

U1_gag(x1, x2, x3, x4)  =  U1_gag(x4)

U2_gag(x1, x2, x3, x4)  =  U2_gag(x4)

AVERAGE_IN_GAG(x1, x2, x3)  =  AVERAGE_IN_GAG(x1, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   AVERAGE_IN_GAG(X, s(s(s(Y))), s(Z)) -> AVERAGE_IN_GAG(s(X), Y, Z)
   AVERAGE_IN_GAG(s(X), Y, Z) -> AVERAGE_IN_GAG(X, s(Y), Z)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

AVERAGE_IN_GAG(x1, x2, x3)  =  AVERAGE_IN_GAG(x1, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AVERAGE_IN_GAG(X, s(Z)) -> AVERAGE_IN_GAG(s(X), Z)
   AVERAGE_IN_GAG(s(X), Z) -> AVERAGE_IN_GAG(X, Z)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*AVERAGE_IN_GAG(X, s(Z)) -> AVERAGE_IN_GAG(s(X), Z)
The graph contains the following edges 2 > 2


*AVERAGE_IN_GAG(s(X), Z) -> AVERAGE_IN_GAG(X, Z)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(12)
YES
