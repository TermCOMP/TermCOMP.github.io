YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/mX6q3.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

ordered(g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 23 ms]
        (20) QDP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
Clauses:

ordered([]).
ordered(.(X1, [])).
ordered(.(X, .(Y, Xs))) :- ','(less(X, s(Y)), ordered(.(Y, Xs))).
less(0, s(X2)).
less(s(X), s(Y)) :- less(X, Y).


Query: ordered(g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

ordered_in_1: (b)

less_in_2: (b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   ordered_in_g([]) -> ordered_out_g([])
   ordered_in_g(.(X1, [])) -> ordered_out_g(.(X1, []))
   ordered_in_g(.(X, .(Y, Xs))) -> U1_g(X, Y, Xs, less_in_gg(X, s(Y)))
   less_in_gg(0, s(X2)) -> less_out_gg(0, s(X2))
   less_in_gg(s(X), s(Y)) -> U3_gg(X, Y, less_in_gg(X, Y))
   U3_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U1_g(X, Y, Xs, less_out_gg(X, s(Y))) -> U2_g(X, Y, Xs, ordered_in_g(.(Y, Xs)))
   U2_g(X, Y, Xs, ordered_out_g(.(Y, Xs))) -> ordered_out_g(.(X, .(Y, Xs)))

Pi is empty.



Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   ordered_in_g([]) -> ordered_out_g([])
   ordered_in_g(.(X1, [])) -> ordered_out_g(.(X1, []))
   ordered_in_g(.(X, .(Y, Xs))) -> U1_g(X, Y, Xs, less_in_gg(X, s(Y)))
   less_in_gg(0, s(X2)) -> less_out_gg(0, s(X2))
   less_in_gg(s(X), s(Y)) -> U3_gg(X, Y, less_in_gg(X, Y))
   U3_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U1_g(X, Y, Xs, less_out_gg(X, s(Y))) -> U2_g(X, Y, Xs, ordered_in_g(.(Y, Xs)))
   U2_g(X, Y, Xs, ordered_out_g(.(Y, Xs))) -> ordered_out_g(.(X, .(Y, Xs)))

Pi is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   ORDERED_IN_G(.(X, .(Y, Xs))) -> U1_G(X, Y, Xs, less_in_gg(X, s(Y)))
   ORDERED_IN_G(.(X, .(Y, Xs))) -> LESS_IN_GG(X, s(Y))
   LESS_IN_GG(s(X), s(Y)) -> U3_GG(X, Y, less_in_gg(X, Y))
   LESS_IN_GG(s(X), s(Y)) -> LESS_IN_GG(X, Y)
   U1_G(X, Y, Xs, less_out_gg(X, s(Y))) -> U2_G(X, Y, Xs, ordered_in_g(.(Y, Xs)))
   U1_G(X, Y, Xs, less_out_gg(X, s(Y))) -> ORDERED_IN_G(.(Y, Xs))

The TRS R consists of the following rules:

   ordered_in_g([]) -> ordered_out_g([])
   ordered_in_g(.(X1, [])) -> ordered_out_g(.(X1, []))
   ordered_in_g(.(X, .(Y, Xs))) -> U1_g(X, Y, Xs, less_in_gg(X, s(Y)))
   less_in_gg(0, s(X2)) -> less_out_gg(0, s(X2))
   less_in_gg(s(X), s(Y)) -> U3_gg(X, Y, less_in_gg(X, Y))
   U3_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U1_g(X, Y, Xs, less_out_gg(X, s(Y))) -> U2_g(X, Y, Xs, ordered_in_g(.(Y, Xs)))
   U2_g(X, Y, Xs, ordered_out_g(.(Y, Xs))) -> ordered_out_g(.(X, .(Y, Xs)))

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ORDERED_IN_G(.(X, .(Y, Xs))) -> U1_G(X, Y, Xs, less_in_gg(X, s(Y)))
   ORDERED_IN_G(.(X, .(Y, Xs))) -> LESS_IN_GG(X, s(Y))
   LESS_IN_GG(s(X), s(Y)) -> U3_GG(X, Y, less_in_gg(X, Y))
   LESS_IN_GG(s(X), s(Y)) -> LESS_IN_GG(X, Y)
   U1_G(X, Y, Xs, less_out_gg(X, s(Y))) -> U2_G(X, Y, Xs, ordered_in_g(.(Y, Xs)))
   U1_G(X, Y, Xs, less_out_gg(X, s(Y))) -> ORDERED_IN_G(.(Y, Xs))

The TRS R consists of the following rules:

   ordered_in_g([]) -> ordered_out_g([])
   ordered_in_g(.(X1, [])) -> ordered_out_g(.(X1, []))
   ordered_in_g(.(X, .(Y, Xs))) -> U1_g(X, Y, Xs, less_in_gg(X, s(Y)))
   less_in_gg(0, s(X2)) -> less_out_gg(0, s(X2))
   less_in_gg(s(X), s(Y)) -> U3_gg(X, Y, less_in_gg(X, Y))
   U3_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U1_g(X, Y, Xs, less_out_gg(X, s(Y))) -> U2_g(X, Y, Xs, ordered_in_g(.(Y, Xs)))
   U2_g(X, Y, Xs, ordered_out_g(.(Y, Xs))) -> ordered_out_g(.(X, .(Y, Xs)))

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LESS_IN_GG(s(X), s(Y)) -> LESS_IN_GG(X, Y)

The TRS R consists of the following rules:

   ordered_in_g([]) -> ordered_out_g([])
   ordered_in_g(.(X1, [])) -> ordered_out_g(.(X1, []))
   ordered_in_g(.(X, .(Y, Xs))) -> U1_g(X, Y, Xs, less_in_gg(X, s(Y)))
   less_in_gg(0, s(X2)) -> less_out_gg(0, s(X2))
   less_in_gg(s(X), s(Y)) -> U3_gg(X, Y, less_in_gg(X, Y))
   U3_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U1_g(X, Y, Xs, less_out_gg(X, s(Y))) -> U2_g(X, Y, Xs, ordered_in_g(.(Y, Xs)))
   U2_g(X, Y, Xs, ordered_out_g(.(Y, Xs))) -> ordered_out_g(.(X, .(Y, Xs)))

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LESS_IN_GG(s(X), s(Y)) -> LESS_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LESS_IN_GG(s(X), s(Y)) -> LESS_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LESS_IN_GG(s(X), s(Y)) -> LESS_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_G(X, Y, Xs, less_out_gg(X, s(Y))) -> ORDERED_IN_G(.(Y, Xs))
   ORDERED_IN_G(.(X, .(Y, Xs))) -> U1_G(X, Y, Xs, less_in_gg(X, s(Y)))

The TRS R consists of the following rules:

   ordered_in_g([]) -> ordered_out_g([])
   ordered_in_g(.(X1, [])) -> ordered_out_g(.(X1, []))
   ordered_in_g(.(X, .(Y, Xs))) -> U1_g(X, Y, Xs, less_in_gg(X, s(Y)))
   less_in_gg(0, s(X2)) -> less_out_gg(0, s(X2))
   less_in_gg(s(X), s(Y)) -> U3_gg(X, Y, less_in_gg(X, Y))
   U3_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))
   U1_g(X, Y, Xs, less_out_gg(X, s(Y))) -> U2_g(X, Y, Xs, ordered_in_g(.(Y, Xs)))
   U2_g(X, Y, Xs, ordered_out_g(.(Y, Xs))) -> ordered_out_g(.(X, .(Y, Xs)))

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_G(X, Y, Xs, less_out_gg(X, s(Y))) -> ORDERED_IN_G(.(Y, Xs))
   ORDERED_IN_G(.(X, .(Y, Xs))) -> U1_G(X, Y, Xs, less_in_gg(X, s(Y)))

The TRS R consists of the following rules:

   less_in_gg(0, s(X2)) -> less_out_gg(0, s(X2))
   less_in_gg(s(X), s(Y)) -> U3_gg(X, Y, less_in_gg(X, Y))
   U3_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_G(X, Y, Xs, less_out_gg(X, s(Y))) -> ORDERED_IN_G(.(Y, Xs))
   ORDERED_IN_G(.(X, .(Y, Xs))) -> U1_G(X, Y, Xs, less_in_gg(X, s(Y)))

The TRS R consists of the following rules:

   less_in_gg(0, s(X2)) -> less_out_gg(0, s(X2))
   less_in_gg(s(X), s(Y)) -> U3_gg(X, Y, less_in_gg(X, Y))
   U3_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))

The set Q consists of the following terms:

   less_in_gg(x0, x1)
   U3_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U1_G(X, Y, Xs, less_out_gg(X, s(Y))) -> ORDERED_IN_G(.(Y, Xs))
   ORDERED_IN_G(.(X, .(Y, Xs))) -> U1_G(X, Y, Xs, less_in_gg(X, s(Y)))


Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 2*x_1 + x_2
   POL(0) = 2
   POL(ORDERED_IN_G(x_1)) = 1 + 2*x_1
   POL(U1_G(x_1, x_2, x_3, x_4)) = 2*x_1 + 2*x_2 + 2*x_3 + x_4
   POL(U3_gg(x_1, x_2, x_3)) = 2*x_1 + x_2 + x_3
   POL(less_in_gg(x_1, x_2)) = 2*x_1 + x_2
   POL(less_out_gg(x_1, x_2)) = 2 + x_1 + x_2
   POL(s(x_1)) = 2*x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   less_in_gg(0, s(X2)) -> less_out_gg(0, s(X2))
   less_in_gg(s(X), s(Y)) -> U3_gg(X, Y, less_in_gg(X, Y))
   U3_gg(X, Y, less_out_gg(X, Y)) -> less_out_gg(s(X), s(Y))

The set Q consists of the following terms:

   less_in_gg(x0, x1)
   U3_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(22)
YES
