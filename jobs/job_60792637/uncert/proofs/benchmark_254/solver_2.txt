YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/uxtW2.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

perm(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) PiDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) PiDP
        (24) PiDPToQDPProof [SOUND, 0 ms]
        (25) QDP
        (26) MRRProof [EQUIVALENT, 17 ms]
        (27) QDP
        (28) PisEmptyProof [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
Clauses:

app1(.(X0, X), Y, .(X0, Z)) :- app1(X, Y, Z).
app1([], Y, Y).
app2(.(X0, X), Y, .(X0, Z)) :- app2(X, Y, Z).
app2([], Y, Y).
perm(X, .(X0, Y)) :- ','(app1(X1, .(X0, X2), X), ','(app2(X1, X2, Z), perm(Z, Y))).
perm([], []).


Query: perm(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

perm_in_2: (b,f)

app1_in_3: (f,f,b)

app2_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   perm_in_ga(X, .(X0, Y)) -> U3_ga(X, X0, Y, app1_in_aag(X1, .(X0, X2), X))
   app1_in_aag(.(X0, X), Y, .(X0, Z)) -> U1_aag(X0, X, Y, Z, app1_in_aag(X, Y, Z))
   app1_in_aag([], Y, Y) -> app1_out_aag([], Y, Y)
   U1_aag(X0, X, Y, Z, app1_out_aag(X, Y, Z)) -> app1_out_aag(.(X0, X), Y, .(X0, Z))
   U3_ga(X, X0, Y, app1_out_aag(X1, .(X0, X2), X)) -> U4_ga(X, X0, Y, X1, X2, app2_in_gga(X1, X2, Z))
   app2_in_gga(.(X0, X), Y, .(X0, Z)) -> U2_gga(X0, X, Y, Z, app2_in_gga(X, Y, Z))
   app2_in_gga([], Y, Y) -> app2_out_gga([], Y, Y)
   U2_gga(X0, X, Y, Z, app2_out_gga(X, Y, Z)) -> app2_out_gga(.(X0, X), Y, .(X0, Z))
   U4_ga(X, X0, Y, X1, X2, app2_out_gga(X1, X2, Z)) -> U5_ga(X, X0, Y, perm_in_ga(Z, Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   U5_ga(X, X0, Y, perm_out_ga(Z, Y)) -> perm_out_ga(X, .(X0, Y))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

app1_in_aag(x1, x2, x3)  =  app1_in_aag(x3)

.(x1, x2)  =  .(x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

app1_out_aag(x1, x2, x3)  =  app1_out_aag(x1, x2)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

app2_in_gga(x1, x2, x3)  =  app2_in_gga(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

[]  =  []

app2_out_gga(x1, x2, x3)  =  app2_out_gga(x3)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

perm_out_ga(x1, x2)  =  perm_out_ga(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   perm_in_ga(X, .(X0, Y)) -> U3_ga(X, X0, Y, app1_in_aag(X1, .(X0, X2), X))
   app1_in_aag(.(X0, X), Y, .(X0, Z)) -> U1_aag(X0, X, Y, Z, app1_in_aag(X, Y, Z))
   app1_in_aag([], Y, Y) -> app1_out_aag([], Y, Y)
   U1_aag(X0, X, Y, Z, app1_out_aag(X, Y, Z)) -> app1_out_aag(.(X0, X), Y, .(X0, Z))
   U3_ga(X, X0, Y, app1_out_aag(X1, .(X0, X2), X)) -> U4_ga(X, X0, Y, X1, X2, app2_in_gga(X1, X2, Z))
   app2_in_gga(.(X0, X), Y, .(X0, Z)) -> U2_gga(X0, X, Y, Z, app2_in_gga(X, Y, Z))
   app2_in_gga([], Y, Y) -> app2_out_gga([], Y, Y)
   U2_gga(X0, X, Y, Z, app2_out_gga(X, Y, Z)) -> app2_out_gga(.(X0, X), Y, .(X0, Z))
   U4_ga(X, X0, Y, X1, X2, app2_out_gga(X1, X2, Z)) -> U5_ga(X, X0, Y, perm_in_ga(Z, Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   U5_ga(X, X0, Y, perm_out_ga(Z, Y)) -> perm_out_ga(X, .(X0, Y))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

app1_in_aag(x1, x2, x3)  =  app1_in_aag(x3)

.(x1, x2)  =  .(x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

app1_out_aag(x1, x2, x3)  =  app1_out_aag(x1, x2)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

app2_in_gga(x1, x2, x3)  =  app2_in_gga(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

[]  =  []

app2_out_gga(x1, x2, x3)  =  app2_out_gga(x3)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

perm_out_ga(x1, x2)  =  perm_out_ga(x2)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   PERM_IN_GA(X, .(X0, Y)) -> U3_GA(X, X0, Y, app1_in_aag(X1, .(X0, X2), X))
   PERM_IN_GA(X, .(X0, Y)) -> APP1_IN_AAG(X1, .(X0, X2), X)
   APP1_IN_AAG(.(X0, X), Y, .(X0, Z)) -> U1_AAG(X0, X, Y, Z, app1_in_aag(X, Y, Z))
   APP1_IN_AAG(.(X0, X), Y, .(X0, Z)) -> APP1_IN_AAG(X, Y, Z)
   U3_GA(X, X0, Y, app1_out_aag(X1, .(X0, X2), X)) -> U4_GA(X, X0, Y, X1, X2, app2_in_gga(X1, X2, Z))
   U3_GA(X, X0, Y, app1_out_aag(X1, .(X0, X2), X)) -> APP2_IN_GGA(X1, X2, Z)
   APP2_IN_GGA(.(X0, X), Y, .(X0, Z)) -> U2_GGA(X0, X, Y, Z, app2_in_gga(X, Y, Z))
   APP2_IN_GGA(.(X0, X), Y, .(X0, Z)) -> APP2_IN_GGA(X, Y, Z)
   U4_GA(X, X0, Y, X1, X2, app2_out_gga(X1, X2, Z)) -> U5_GA(X, X0, Y, perm_in_ga(Z, Y))
   U4_GA(X, X0, Y, X1, X2, app2_out_gga(X1, X2, Z)) -> PERM_IN_GA(Z, Y)

The TRS R consists of the following rules:

   perm_in_ga(X, .(X0, Y)) -> U3_ga(X, X0, Y, app1_in_aag(X1, .(X0, X2), X))
   app1_in_aag(.(X0, X), Y, .(X0, Z)) -> U1_aag(X0, X, Y, Z, app1_in_aag(X, Y, Z))
   app1_in_aag([], Y, Y) -> app1_out_aag([], Y, Y)
   U1_aag(X0, X, Y, Z, app1_out_aag(X, Y, Z)) -> app1_out_aag(.(X0, X), Y, .(X0, Z))
   U3_ga(X, X0, Y, app1_out_aag(X1, .(X0, X2), X)) -> U4_ga(X, X0, Y, X1, X2, app2_in_gga(X1, X2, Z))
   app2_in_gga(.(X0, X), Y, .(X0, Z)) -> U2_gga(X0, X, Y, Z, app2_in_gga(X, Y, Z))
   app2_in_gga([], Y, Y) -> app2_out_gga([], Y, Y)
   U2_gga(X0, X, Y, Z, app2_out_gga(X, Y, Z)) -> app2_out_gga(.(X0, X), Y, .(X0, Z))
   U4_ga(X, X0, Y, X1, X2, app2_out_gga(X1, X2, Z)) -> U5_ga(X, X0, Y, perm_in_ga(Z, Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   U5_ga(X, X0, Y, perm_out_ga(Z, Y)) -> perm_out_ga(X, .(X0, Y))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

app1_in_aag(x1, x2, x3)  =  app1_in_aag(x3)

.(x1, x2)  =  .(x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

app1_out_aag(x1, x2, x3)  =  app1_out_aag(x1, x2)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

app2_in_gga(x1, x2, x3)  =  app2_in_gga(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

[]  =  []

app2_out_gga(x1, x2, x3)  =  app2_out_gga(x3)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

APP1_IN_AAG(x1, x2, x3)  =  APP1_IN_AAG(x3)

U1_AAG(x1, x2, x3, x4, x5)  =  U1_AAG(x5)

U4_GA(x1, x2, x3, x4, x5, x6)  =  U4_GA(x6)

APP2_IN_GGA(x1, x2, x3)  =  APP2_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x5)

U5_GA(x1, x2, x3, x4)  =  U5_GA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PERM_IN_GA(X, .(X0, Y)) -> U3_GA(X, X0, Y, app1_in_aag(X1, .(X0, X2), X))
   PERM_IN_GA(X, .(X0, Y)) -> APP1_IN_AAG(X1, .(X0, X2), X)
   APP1_IN_AAG(.(X0, X), Y, .(X0, Z)) -> U1_AAG(X0, X, Y, Z, app1_in_aag(X, Y, Z))
   APP1_IN_AAG(.(X0, X), Y, .(X0, Z)) -> APP1_IN_AAG(X, Y, Z)
   U3_GA(X, X0, Y, app1_out_aag(X1, .(X0, X2), X)) -> U4_GA(X, X0, Y, X1, X2, app2_in_gga(X1, X2, Z))
   U3_GA(X, X0, Y, app1_out_aag(X1, .(X0, X2), X)) -> APP2_IN_GGA(X1, X2, Z)
   APP2_IN_GGA(.(X0, X), Y, .(X0, Z)) -> U2_GGA(X0, X, Y, Z, app2_in_gga(X, Y, Z))
   APP2_IN_GGA(.(X0, X), Y, .(X0, Z)) -> APP2_IN_GGA(X, Y, Z)
   U4_GA(X, X0, Y, X1, X2, app2_out_gga(X1, X2, Z)) -> U5_GA(X, X0, Y, perm_in_ga(Z, Y))
   U4_GA(X, X0, Y, X1, X2, app2_out_gga(X1, X2, Z)) -> PERM_IN_GA(Z, Y)

The TRS R consists of the following rules:

   perm_in_ga(X, .(X0, Y)) -> U3_ga(X, X0, Y, app1_in_aag(X1, .(X0, X2), X))
   app1_in_aag(.(X0, X), Y, .(X0, Z)) -> U1_aag(X0, X, Y, Z, app1_in_aag(X, Y, Z))
   app1_in_aag([], Y, Y) -> app1_out_aag([], Y, Y)
   U1_aag(X0, X, Y, Z, app1_out_aag(X, Y, Z)) -> app1_out_aag(.(X0, X), Y, .(X0, Z))
   U3_ga(X, X0, Y, app1_out_aag(X1, .(X0, X2), X)) -> U4_ga(X, X0, Y, X1, X2, app2_in_gga(X1, X2, Z))
   app2_in_gga(.(X0, X), Y, .(X0, Z)) -> U2_gga(X0, X, Y, Z, app2_in_gga(X, Y, Z))
   app2_in_gga([], Y, Y) -> app2_out_gga([], Y, Y)
   U2_gga(X0, X, Y, Z, app2_out_gga(X, Y, Z)) -> app2_out_gga(.(X0, X), Y, .(X0, Z))
   U4_ga(X, X0, Y, X1, X2, app2_out_gga(X1, X2, Z)) -> U5_ga(X, X0, Y, perm_in_ga(Z, Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   U5_ga(X, X0, Y, perm_out_ga(Z, Y)) -> perm_out_ga(X, .(X0, Y))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

app1_in_aag(x1, x2, x3)  =  app1_in_aag(x3)

.(x1, x2)  =  .(x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

app1_out_aag(x1, x2, x3)  =  app1_out_aag(x1, x2)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

app2_in_gga(x1, x2, x3)  =  app2_in_gga(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

[]  =  []

app2_out_gga(x1, x2, x3)  =  app2_out_gga(x3)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

APP1_IN_AAG(x1, x2, x3)  =  APP1_IN_AAG(x3)

U1_AAG(x1, x2, x3, x4, x5)  =  U1_AAG(x5)

U4_GA(x1, x2, x3, x4, x5, x6)  =  U4_GA(x6)

APP2_IN_GGA(x1, x2, x3)  =  APP2_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x5)

U5_GA(x1, x2, x3, x4)  =  U5_GA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP2_IN_GGA(.(X0, X), Y, .(X0, Z)) -> APP2_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   perm_in_ga(X, .(X0, Y)) -> U3_ga(X, X0, Y, app1_in_aag(X1, .(X0, X2), X))
   app1_in_aag(.(X0, X), Y, .(X0, Z)) -> U1_aag(X0, X, Y, Z, app1_in_aag(X, Y, Z))
   app1_in_aag([], Y, Y) -> app1_out_aag([], Y, Y)
   U1_aag(X0, X, Y, Z, app1_out_aag(X, Y, Z)) -> app1_out_aag(.(X0, X), Y, .(X0, Z))
   U3_ga(X, X0, Y, app1_out_aag(X1, .(X0, X2), X)) -> U4_ga(X, X0, Y, X1, X2, app2_in_gga(X1, X2, Z))
   app2_in_gga(.(X0, X), Y, .(X0, Z)) -> U2_gga(X0, X, Y, Z, app2_in_gga(X, Y, Z))
   app2_in_gga([], Y, Y) -> app2_out_gga([], Y, Y)
   U2_gga(X0, X, Y, Z, app2_out_gga(X, Y, Z)) -> app2_out_gga(.(X0, X), Y, .(X0, Z))
   U4_ga(X, X0, Y, X1, X2, app2_out_gga(X1, X2, Z)) -> U5_ga(X, X0, Y, perm_in_ga(Z, Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   U5_ga(X, X0, Y, perm_out_ga(Z, Y)) -> perm_out_ga(X, .(X0, Y))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

app1_in_aag(x1, x2, x3)  =  app1_in_aag(x3)

.(x1, x2)  =  .(x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

app1_out_aag(x1, x2, x3)  =  app1_out_aag(x1, x2)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

app2_in_gga(x1, x2, x3)  =  app2_in_gga(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

[]  =  []

app2_out_gga(x1, x2, x3)  =  app2_out_gga(x3)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

APP2_IN_GGA(x1, x2, x3)  =  APP2_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP2_IN_GGA(.(X0, X), Y, .(X0, Z)) -> APP2_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APP2_IN_GGA(x1, x2, x3)  =  APP2_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP2_IN_GGA(.(X), Y) -> APP2_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP2_IN_GGA(.(X), Y) -> APP2_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP1_IN_AAG(.(X0, X), Y, .(X0, Z)) -> APP1_IN_AAG(X, Y, Z)

The TRS R consists of the following rules:

   perm_in_ga(X, .(X0, Y)) -> U3_ga(X, X0, Y, app1_in_aag(X1, .(X0, X2), X))
   app1_in_aag(.(X0, X), Y, .(X0, Z)) -> U1_aag(X0, X, Y, Z, app1_in_aag(X, Y, Z))
   app1_in_aag([], Y, Y) -> app1_out_aag([], Y, Y)
   U1_aag(X0, X, Y, Z, app1_out_aag(X, Y, Z)) -> app1_out_aag(.(X0, X), Y, .(X0, Z))
   U3_ga(X, X0, Y, app1_out_aag(X1, .(X0, X2), X)) -> U4_ga(X, X0, Y, X1, X2, app2_in_gga(X1, X2, Z))
   app2_in_gga(.(X0, X), Y, .(X0, Z)) -> U2_gga(X0, X, Y, Z, app2_in_gga(X, Y, Z))
   app2_in_gga([], Y, Y) -> app2_out_gga([], Y, Y)
   U2_gga(X0, X, Y, Z, app2_out_gga(X, Y, Z)) -> app2_out_gga(.(X0, X), Y, .(X0, Z))
   U4_ga(X, X0, Y, X1, X2, app2_out_gga(X1, X2, Z)) -> U5_ga(X, X0, Y, perm_in_ga(Z, Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   U5_ga(X, X0, Y, perm_out_ga(Z, Y)) -> perm_out_ga(X, .(X0, Y))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

app1_in_aag(x1, x2, x3)  =  app1_in_aag(x3)

.(x1, x2)  =  .(x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

app1_out_aag(x1, x2, x3)  =  app1_out_aag(x1, x2)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

app2_in_gga(x1, x2, x3)  =  app2_in_gga(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

[]  =  []

app2_out_gga(x1, x2, x3)  =  app2_out_gga(x3)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

APP1_IN_AAG(x1, x2, x3)  =  APP1_IN_AAG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP1_IN_AAG(.(X0, X), Y, .(X0, Z)) -> APP1_IN_AAG(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APP1_IN_AAG(x1, x2, x3)  =  APP1_IN_AAG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP1_IN_AAG(.(Z)) -> APP1_IN_AAG(Z)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP1_IN_AAG(.(Z)) -> APP1_IN_AAG(Z)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U3_GA(X, X0, Y, app1_out_aag(X1, .(X0, X2), X)) -> U4_GA(X, X0, Y, X1, X2, app2_in_gga(X1, X2, Z))
   U4_GA(X, X0, Y, X1, X2, app2_out_gga(X1, X2, Z)) -> PERM_IN_GA(Z, Y)
   PERM_IN_GA(X, .(X0, Y)) -> U3_GA(X, X0, Y, app1_in_aag(X1, .(X0, X2), X))

The TRS R consists of the following rules:

   perm_in_ga(X, .(X0, Y)) -> U3_ga(X, X0, Y, app1_in_aag(X1, .(X0, X2), X))
   app1_in_aag(.(X0, X), Y, .(X0, Z)) -> U1_aag(X0, X, Y, Z, app1_in_aag(X, Y, Z))
   app1_in_aag([], Y, Y) -> app1_out_aag([], Y, Y)
   U1_aag(X0, X, Y, Z, app1_out_aag(X, Y, Z)) -> app1_out_aag(.(X0, X), Y, .(X0, Z))
   U3_ga(X, X0, Y, app1_out_aag(X1, .(X0, X2), X)) -> U4_ga(X, X0, Y, X1, X2, app2_in_gga(X1, X2, Z))
   app2_in_gga(.(X0, X), Y, .(X0, Z)) -> U2_gga(X0, X, Y, Z, app2_in_gga(X, Y, Z))
   app2_in_gga([], Y, Y) -> app2_out_gga([], Y, Y)
   U2_gga(X0, X, Y, Z, app2_out_gga(X, Y, Z)) -> app2_out_gga(.(X0, X), Y, .(X0, Z))
   U4_ga(X, X0, Y, X1, X2, app2_out_gga(X1, X2, Z)) -> U5_ga(X, X0, Y, perm_in_ga(Z, Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   U5_ga(X, X0, Y, perm_out_ga(Z, Y)) -> perm_out_ga(X, .(X0, Y))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

app1_in_aag(x1, x2, x3)  =  app1_in_aag(x3)

.(x1, x2)  =  .(x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

app1_out_aag(x1, x2, x3)  =  app1_out_aag(x1, x2)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

app2_in_gga(x1, x2, x3)  =  app2_in_gga(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

[]  =  []

app2_out_gga(x1, x2, x3)  =  app2_out_gga(x3)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

U4_GA(x1, x2, x3, x4, x5, x6)  =  U4_GA(x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(23)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U3_GA(X, X0, Y, app1_out_aag(X1, .(X0, X2), X)) -> U4_GA(X, X0, Y, X1, X2, app2_in_gga(X1, X2, Z))
   U4_GA(X, X0, Y, X1, X2, app2_out_gga(X1, X2, Z)) -> PERM_IN_GA(Z, Y)
   PERM_IN_GA(X, .(X0, Y)) -> U3_GA(X, X0, Y, app1_in_aag(X1, .(X0, X2), X))

The TRS R consists of the following rules:

   app2_in_gga(.(X0, X), Y, .(X0, Z)) -> U2_gga(X0, X, Y, Z, app2_in_gga(X, Y, Z))
   app2_in_gga([], Y, Y) -> app2_out_gga([], Y, Y)
   app1_in_aag(.(X0, X), Y, .(X0, Z)) -> U1_aag(X0, X, Y, Z, app1_in_aag(X, Y, Z))
   app1_in_aag([], Y, Y) -> app1_out_aag([], Y, Y)
   U2_gga(X0, X, Y, Z, app2_out_gga(X, Y, Z)) -> app2_out_gga(.(X0, X), Y, .(X0, Z))
   U1_aag(X0, X, Y, Z, app1_out_aag(X, Y, Z)) -> app1_out_aag(.(X0, X), Y, .(X0, Z))

The argument filtering Pi contains the following mapping:
app1_in_aag(x1, x2, x3)  =  app1_in_aag(x3)

.(x1, x2)  =  .(x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

app1_out_aag(x1, x2, x3)  =  app1_out_aag(x1, x2)

app2_in_gga(x1, x2, x3)  =  app2_in_gga(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

[]  =  []

app2_out_gga(x1, x2, x3)  =  app2_out_gga(x3)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

U4_GA(x1, x2, x3, x4, x5, x6)  =  U4_GA(x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(24) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GA(app1_out_aag(X1, .(X2))) -> U4_GA(app2_in_gga(X1, X2))
   U4_GA(app2_out_gga(Z)) -> PERM_IN_GA(Z)
   PERM_IN_GA(X) -> U3_GA(app1_in_aag(X))

The TRS R consists of the following rules:

   app2_in_gga(.(X), Y) -> U2_gga(app2_in_gga(X, Y))
   app2_in_gga([], Y) -> app2_out_gga(Y)
   app1_in_aag(.(Z)) -> U1_aag(app1_in_aag(Z))
   app1_in_aag(Y) -> app1_out_aag([], Y)
   U2_gga(app2_out_gga(Z)) -> app2_out_gga(.(Z))
   U1_aag(app1_out_aag(X, Y)) -> app1_out_aag(.(X), Y)

The set Q consists of the following terms:

   app2_in_gga(x0, x1)
   app1_in_aag(x0)
   U2_gga(x0)
   U1_aag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U3_GA(app1_out_aag(X1, .(X2))) -> U4_GA(app2_in_gga(X1, X2))
   U4_GA(app2_out_gga(Z)) -> PERM_IN_GA(Z)
   PERM_IN_GA(X) -> U3_GA(app1_in_aag(X))

Strictly oriented rules of the TRS R:

   app2_in_gga(.(X), Y) -> U2_gga(app2_in_gga(X, Y))
   app2_in_gga([], Y) -> app2_out_gga(Y)
   app1_in_aag(.(Z)) -> U1_aag(app1_in_aag(Z))
   app1_in_aag(Y) -> app1_out_aag([], Y)
   U2_gga(app2_out_gga(Z)) -> app2_out_gga(.(Z))
   U1_aag(app1_out_aag(X, Y)) -> app1_out_aag(.(X), Y)

Used ordering: Knuth-Bendix order [KBO] with precedence:U3_GA_1 > app1_in_aag_1 > ._1 > app2_in_gga_2 > PERM_IN_GA_1 > U2_gga_1 > U1_aag_1 > U4_GA_1 > app1_out_aag_2 > app2_out_gga_1 > []

and weight map:

   []=2
   ._1=3
   U2_gga_1=3
   app2_out_gga_1=7
   app1_in_aag_1=4
   U1_aag_1=3
   U3_GA_1=2
   U4_GA_1=1
   PERM_IN_GA_1=7
   app2_in_gga_2=5
   app1_out_aag_2=1

The variable weight is 1

----------------------------------------

(27)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   app2_in_gga(x0, x1)
   app1_in_aag(x0)
   U2_gga(x0)
   U1_aag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(29)
YES
