YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/4Rc1l.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

mergesort(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) PiDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) PiDP
        (24) PiDPToQDPProof [SOUND, 0 ms]
        (25) QDP
        (26) MRRProof [EQUIVALENT, 24 ms]
        (27) QDP
        (28) DependencyGraphProof [EQUIVALENT, 0 ms]
        (29) QDP
        (30) UsableRulesProof [EQUIVALENT, 0 ms]
        (31) QDP
        (32) QReductionProof [EQUIVALENT, 1 ms]
        (33) QDP
        (34) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (35) YES
    (36) PiDP
        (37) UsableRulesProof [EQUIVALENT, 0 ms]
        (38) PiDP
        (39) PiDPToQDPProof [SOUND, 0 ms]
        (40) QDP
        (41) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (42) YES
    (43) PiDP
        (44) PiDPToQDPProof [SOUND, 0 ms]
        (45) QDP
        (46) QDPQMonotonicMRRProof [EQUIVALENT, 129 ms]
        (47) QDP
        (48) PisEmptyProof [EQUIVALENT, 0 ms]
        (49) YES


----------------------------------------

(0)
Obligation:
Clauses:

mergesort([], []).
mergesort(.(X, []), .(X, [])).
mergesort(.(X, .(Y, L1)), L2) :- ','(split2(.(X, .(Y, L1)), L3, L4), ','(mergesort(L3, L5), ','(mergesort(L4, L6), merge(L5, L6, L2)))).
split(L1, L2, L3) :- split0(L1, L2, L3).
split(L1, L2, L3) :- split1(L1, L2, L3).
split(L1, L2, L3) :- split2(L1, L2, L3).
split0([], [], []).
split1(.(X, []), .(X, []), []).
split2(.(X, .(Y, L1)), .(X, L2), .(Y, L3)) :- split(L1, L2, L3).
merge([], L1, L1).
merge(L1, [], L1).
merge(.(X, L1), .(Y, L2), .(X, L3)) :- ','(le(X, Y), merge(L1, .(Y, L2), L3)).
merge(.(X, L1), .(Y, L2), .(Y, L3)) :- ','(gt(X, Y), merge(.(X, L1), L2, L3)).
gt(s(X), s(Y)) :- gt(X, Y).
gt(s(X), 0).
le(s(X), s(Y)) :- le(X, Y).
le(0, s(Y)).
le(0, 0).


Query: mergesort(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

mergesort_in_2: (b,f)

split2_in_3: (b,f,f)

split_in_3: (b,f,f)

merge_in_3: (b,b,f)

le_in_2: (b,b)

gt_in_2: (b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   mergesort_in_ga([], []) -> mergesort_out_ga([], [])
   mergesort_in_ga(.(X, []), .(X, [])) -> mergesort_out_ga(.(X, []), .(X, []))
   mergesort_in_ga(.(X, .(Y, L1)), L2) -> U1_ga(X, Y, L1, L2, split2_in_gaa(.(X, .(Y, L1)), L3, L4))
   split2_in_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3)) -> U8_gaa(X, Y, L1, L2, L3, split_in_gaa(L1, L2, L3))
   split_in_gaa(L1, L2, L3) -> U5_gaa(L1, L2, L3, split0_in_gaa(L1, L2, L3))
   split0_in_gaa([], [], []) -> split0_out_gaa([], [], [])
   U5_gaa(L1, L2, L3, split0_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1, L2, L3) -> U6_gaa(L1, L2, L3, split1_in_gaa(L1, L2, L3))
   split1_in_gaa(.(X, []), .(X, []), []) -> split1_out_gaa(.(X, []), .(X, []), [])
   U6_gaa(L1, L2, L3, split1_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1, L2, L3) -> U7_gaa(L1, L2, L3, split2_in_gaa(L1, L2, L3))
   U7_gaa(L1, L2, L3, split2_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   U8_gaa(X, Y, L1, L2, L3, split_out_gaa(L1, L2, L3)) -> split2_out_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3))
   U1_ga(X, Y, L1, L2, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> U2_ga(X, Y, L1, L2, L4, mergesort_in_ga(L3, L5))
   U2_ga(X, Y, L1, L2, L4, mergesort_out_ga(L3, L5)) -> U3_ga(X, Y, L1, L2, L5, mergesort_in_ga(L4, L6))
   U3_ga(X, Y, L1, L2, L5, mergesort_out_ga(L4, L6)) -> U4_ga(X, Y, L1, L2, merge_in_gga(L5, L6, L2))
   merge_in_gga([], L1, L1) -> merge_out_gga([], L1, L1)
   merge_in_gga(L1, [], L1) -> merge_out_gga(L1, [], L1)
   merge_in_gga(.(X, L1), .(Y, L2), .(X, L3)) -> U9_gga(X, L1, Y, L2, L3, le_in_gg(X, Y))
   le_in_gg(s(X), s(Y)) -> U14_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(Y)) -> le_out_gg(0, s(Y))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   U14_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U9_gga(X, L1, Y, L2, L3, le_out_gg(X, Y)) -> U10_gga(X, L1, Y, L2, L3, merge_in_gga(L1, .(Y, L2), L3))
   merge_in_gga(.(X, L1), .(Y, L2), .(Y, L3)) -> U11_gga(X, L1, Y, L2, L3, gt_in_gg(X, Y))
   gt_in_gg(s(X), s(Y)) -> U13_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), 0) -> gt_out_gg(s(X), 0)
   U13_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))
   U11_gga(X, L1, Y, L2, L3, gt_out_gg(X, Y)) -> U12_gga(X, L1, Y, L2, L3, merge_in_gga(.(X, L1), L2, L3))
   U12_gga(X, L1, Y, L2, L3, merge_out_gga(.(X, L1), L2, L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(Y, L3))
   U10_gga(X, L1, Y, L2, L3, merge_out_gga(L1, .(Y, L2), L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(X, L3))
   U4_ga(X, Y, L1, L2, merge_out_gga(L5, L6, L2)) -> mergesort_out_ga(.(X, .(Y, L1)), L2)

The argument filtering Pi contains the following mapping:
mergesort_in_ga(x1, x2)  =  mergesort_in_ga(x1)

[]  =  []

mergesort_out_ga(x1, x2)  =  mergesort_out_ga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

split2_in_gaa(x1, x2, x3)  =  split2_in_gaa(x1)

U8_gaa(x1, x2, x3, x4, x5, x6)  =  U8_gaa(x1, x2, x3, x6)

split_in_gaa(x1, x2, x3)  =  split_in_gaa(x1)

U5_gaa(x1, x2, x3, x4)  =  U5_gaa(x1, x4)

split0_in_gaa(x1, x2, x3)  =  split0_in_gaa(x1)

split0_out_gaa(x1, x2, x3)  =  split0_out_gaa(x1, x2, x3)

split_out_gaa(x1, x2, x3)  =  split_out_gaa(x1, x2, x3)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

split1_in_gaa(x1, x2, x3)  =  split1_in_gaa(x1)

split1_out_gaa(x1, x2, x3)  =  split1_out_gaa(x1, x2, x3)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

split2_out_gaa(x1, x2, x3)  =  split2_out_gaa(x1, x2, x3)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x1, x2, x3, x5, x6)

U3_ga(x1, x2, x3, x4, x5, x6)  =  U3_ga(x1, x2, x3, x5, x6)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x1, x2, x3, x5)

merge_in_gga(x1, x2, x3)  =  merge_in_gga(x1, x2)

merge_out_gga(x1, x2, x3)  =  merge_out_gga(x1, x2, x3)

U9_gga(x1, x2, x3, x4, x5, x6)  =  U9_gga(x1, x2, x3, x4, x6)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

0  =  0

le_out_gg(x1, x2)  =  le_out_gg(x1, x2)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x3, x4, x6)

U11_gga(x1, x2, x3, x4, x5, x6)  =  U11_gga(x1, x2, x3, x4, x6)

gt_in_gg(x1, x2)  =  gt_in_gg(x1, x2)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

gt_out_gg(x1, x2)  =  gt_out_gg(x1, x2)

U12_gga(x1, x2, x3, x4, x5, x6)  =  U12_gga(x1, x2, x3, x4, x6)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   mergesort_in_ga([], []) -> mergesort_out_ga([], [])
   mergesort_in_ga(.(X, []), .(X, [])) -> mergesort_out_ga(.(X, []), .(X, []))
   mergesort_in_ga(.(X, .(Y, L1)), L2) -> U1_ga(X, Y, L1, L2, split2_in_gaa(.(X, .(Y, L1)), L3, L4))
   split2_in_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3)) -> U8_gaa(X, Y, L1, L2, L3, split_in_gaa(L1, L2, L3))
   split_in_gaa(L1, L2, L3) -> U5_gaa(L1, L2, L3, split0_in_gaa(L1, L2, L3))
   split0_in_gaa([], [], []) -> split0_out_gaa([], [], [])
   U5_gaa(L1, L2, L3, split0_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1, L2, L3) -> U6_gaa(L1, L2, L3, split1_in_gaa(L1, L2, L3))
   split1_in_gaa(.(X, []), .(X, []), []) -> split1_out_gaa(.(X, []), .(X, []), [])
   U6_gaa(L1, L2, L3, split1_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1, L2, L3) -> U7_gaa(L1, L2, L3, split2_in_gaa(L1, L2, L3))
   U7_gaa(L1, L2, L3, split2_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   U8_gaa(X, Y, L1, L2, L3, split_out_gaa(L1, L2, L3)) -> split2_out_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3))
   U1_ga(X, Y, L1, L2, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> U2_ga(X, Y, L1, L2, L4, mergesort_in_ga(L3, L5))
   U2_ga(X, Y, L1, L2, L4, mergesort_out_ga(L3, L5)) -> U3_ga(X, Y, L1, L2, L5, mergesort_in_ga(L4, L6))
   U3_ga(X, Y, L1, L2, L5, mergesort_out_ga(L4, L6)) -> U4_ga(X, Y, L1, L2, merge_in_gga(L5, L6, L2))
   merge_in_gga([], L1, L1) -> merge_out_gga([], L1, L1)
   merge_in_gga(L1, [], L1) -> merge_out_gga(L1, [], L1)
   merge_in_gga(.(X, L1), .(Y, L2), .(X, L3)) -> U9_gga(X, L1, Y, L2, L3, le_in_gg(X, Y))
   le_in_gg(s(X), s(Y)) -> U14_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(Y)) -> le_out_gg(0, s(Y))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   U14_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U9_gga(X, L1, Y, L2, L3, le_out_gg(X, Y)) -> U10_gga(X, L1, Y, L2, L3, merge_in_gga(L1, .(Y, L2), L3))
   merge_in_gga(.(X, L1), .(Y, L2), .(Y, L3)) -> U11_gga(X, L1, Y, L2, L3, gt_in_gg(X, Y))
   gt_in_gg(s(X), s(Y)) -> U13_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), 0) -> gt_out_gg(s(X), 0)
   U13_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))
   U11_gga(X, L1, Y, L2, L3, gt_out_gg(X, Y)) -> U12_gga(X, L1, Y, L2, L3, merge_in_gga(.(X, L1), L2, L3))
   U12_gga(X, L1, Y, L2, L3, merge_out_gga(.(X, L1), L2, L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(Y, L3))
   U10_gga(X, L1, Y, L2, L3, merge_out_gga(L1, .(Y, L2), L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(X, L3))
   U4_ga(X, Y, L1, L2, merge_out_gga(L5, L6, L2)) -> mergesort_out_ga(.(X, .(Y, L1)), L2)

The argument filtering Pi contains the following mapping:
mergesort_in_ga(x1, x2)  =  mergesort_in_ga(x1)

[]  =  []

mergesort_out_ga(x1, x2)  =  mergesort_out_ga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

split2_in_gaa(x1, x2, x3)  =  split2_in_gaa(x1)

U8_gaa(x1, x2, x3, x4, x5, x6)  =  U8_gaa(x1, x2, x3, x6)

split_in_gaa(x1, x2, x3)  =  split_in_gaa(x1)

U5_gaa(x1, x2, x3, x4)  =  U5_gaa(x1, x4)

split0_in_gaa(x1, x2, x3)  =  split0_in_gaa(x1)

split0_out_gaa(x1, x2, x3)  =  split0_out_gaa(x1, x2, x3)

split_out_gaa(x1, x2, x3)  =  split_out_gaa(x1, x2, x3)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

split1_in_gaa(x1, x2, x3)  =  split1_in_gaa(x1)

split1_out_gaa(x1, x2, x3)  =  split1_out_gaa(x1, x2, x3)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

split2_out_gaa(x1, x2, x3)  =  split2_out_gaa(x1, x2, x3)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x1, x2, x3, x5, x6)

U3_ga(x1, x2, x3, x4, x5, x6)  =  U3_ga(x1, x2, x3, x5, x6)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x1, x2, x3, x5)

merge_in_gga(x1, x2, x3)  =  merge_in_gga(x1, x2)

merge_out_gga(x1, x2, x3)  =  merge_out_gga(x1, x2, x3)

U9_gga(x1, x2, x3, x4, x5, x6)  =  U9_gga(x1, x2, x3, x4, x6)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

0  =  0

le_out_gg(x1, x2)  =  le_out_gg(x1, x2)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x3, x4, x6)

U11_gga(x1, x2, x3, x4, x5, x6)  =  U11_gga(x1, x2, x3, x4, x6)

gt_in_gg(x1, x2)  =  gt_in_gg(x1, x2)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

gt_out_gg(x1, x2)  =  gt_out_gg(x1, x2)

U12_gga(x1, x2, x3, x4, x5, x6)  =  U12_gga(x1, x2, x3, x4, x6)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MERGESORT_IN_GA(.(X, .(Y, L1)), L2) -> U1_GA(X, Y, L1, L2, split2_in_gaa(.(X, .(Y, L1)), L3, L4))
   MERGESORT_IN_GA(.(X, .(Y, L1)), L2) -> SPLIT2_IN_GAA(.(X, .(Y, L1)), L3, L4)
   SPLIT2_IN_GAA(.(X, .(Y, L1)), .(X, L2), .(Y, L3)) -> U8_GAA(X, Y, L1, L2, L3, split_in_gaa(L1, L2, L3))
   SPLIT2_IN_GAA(.(X, .(Y, L1)), .(X, L2), .(Y, L3)) -> SPLIT_IN_GAA(L1, L2, L3)
   SPLIT_IN_GAA(L1, L2, L3) -> U5_GAA(L1, L2, L3, split0_in_gaa(L1, L2, L3))
   SPLIT_IN_GAA(L1, L2, L3) -> SPLIT0_IN_GAA(L1, L2, L3)
   SPLIT_IN_GAA(L1, L2, L3) -> U6_GAA(L1, L2, L3, split1_in_gaa(L1, L2, L3))
   SPLIT_IN_GAA(L1, L2, L3) -> SPLIT1_IN_GAA(L1, L2, L3)
   SPLIT_IN_GAA(L1, L2, L3) -> U7_GAA(L1, L2, L3, split2_in_gaa(L1, L2, L3))
   SPLIT_IN_GAA(L1, L2, L3) -> SPLIT2_IN_GAA(L1, L2, L3)
   U1_GA(X, Y, L1, L2, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> U2_GA(X, Y, L1, L2, L4, mergesort_in_ga(L3, L5))
   U1_GA(X, Y, L1, L2, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> MERGESORT_IN_GA(L3, L5)
   U2_GA(X, Y, L1, L2, L4, mergesort_out_ga(L3, L5)) -> U3_GA(X, Y, L1, L2, L5, mergesort_in_ga(L4, L6))
   U2_GA(X, Y, L1, L2, L4, mergesort_out_ga(L3, L5)) -> MERGESORT_IN_GA(L4, L6)
   U3_GA(X, Y, L1, L2, L5, mergesort_out_ga(L4, L6)) -> U4_GA(X, Y, L1, L2, merge_in_gga(L5, L6, L2))
   U3_GA(X, Y, L1, L2, L5, mergesort_out_ga(L4, L6)) -> MERGE_IN_GGA(L5, L6, L2)
   MERGE_IN_GGA(.(X, L1), .(Y, L2), .(X, L3)) -> U9_GGA(X, L1, Y, L2, L3, le_in_gg(X, Y))
   MERGE_IN_GGA(.(X, L1), .(Y, L2), .(X, L3)) -> LE_IN_GG(X, Y)
   LE_IN_GG(s(X), s(Y)) -> U14_GG(X, Y, le_in_gg(X, Y))
   LE_IN_GG(s(X), s(Y)) -> LE_IN_GG(X, Y)
   U9_GGA(X, L1, Y, L2, L3, le_out_gg(X, Y)) -> U10_GGA(X, L1, Y, L2, L3, merge_in_gga(L1, .(Y, L2), L3))
   U9_GGA(X, L1, Y, L2, L3, le_out_gg(X, Y)) -> MERGE_IN_GGA(L1, .(Y, L2), L3)
   MERGE_IN_GGA(.(X, L1), .(Y, L2), .(Y, L3)) -> U11_GGA(X, L1, Y, L2, L3, gt_in_gg(X, Y))
   MERGE_IN_GGA(.(X, L1), .(Y, L2), .(Y, L3)) -> GT_IN_GG(X, Y)
   GT_IN_GG(s(X), s(Y)) -> U13_GG(X, Y, gt_in_gg(X, Y))
   GT_IN_GG(s(X), s(Y)) -> GT_IN_GG(X, Y)
   U11_GGA(X, L1, Y, L2, L3, gt_out_gg(X, Y)) -> U12_GGA(X, L1, Y, L2, L3, merge_in_gga(.(X, L1), L2, L3))
   U11_GGA(X, L1, Y, L2, L3, gt_out_gg(X, Y)) -> MERGE_IN_GGA(.(X, L1), L2, L3)

The TRS R consists of the following rules:

   mergesort_in_ga([], []) -> mergesort_out_ga([], [])
   mergesort_in_ga(.(X, []), .(X, [])) -> mergesort_out_ga(.(X, []), .(X, []))
   mergesort_in_ga(.(X, .(Y, L1)), L2) -> U1_ga(X, Y, L1, L2, split2_in_gaa(.(X, .(Y, L1)), L3, L4))
   split2_in_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3)) -> U8_gaa(X, Y, L1, L2, L3, split_in_gaa(L1, L2, L3))
   split_in_gaa(L1, L2, L3) -> U5_gaa(L1, L2, L3, split0_in_gaa(L1, L2, L3))
   split0_in_gaa([], [], []) -> split0_out_gaa([], [], [])
   U5_gaa(L1, L2, L3, split0_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1, L2, L3) -> U6_gaa(L1, L2, L3, split1_in_gaa(L1, L2, L3))
   split1_in_gaa(.(X, []), .(X, []), []) -> split1_out_gaa(.(X, []), .(X, []), [])
   U6_gaa(L1, L2, L3, split1_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1, L2, L3) -> U7_gaa(L1, L2, L3, split2_in_gaa(L1, L2, L3))
   U7_gaa(L1, L2, L3, split2_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   U8_gaa(X, Y, L1, L2, L3, split_out_gaa(L1, L2, L3)) -> split2_out_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3))
   U1_ga(X, Y, L1, L2, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> U2_ga(X, Y, L1, L2, L4, mergesort_in_ga(L3, L5))
   U2_ga(X, Y, L1, L2, L4, mergesort_out_ga(L3, L5)) -> U3_ga(X, Y, L1, L2, L5, mergesort_in_ga(L4, L6))
   U3_ga(X, Y, L1, L2, L5, mergesort_out_ga(L4, L6)) -> U4_ga(X, Y, L1, L2, merge_in_gga(L5, L6, L2))
   merge_in_gga([], L1, L1) -> merge_out_gga([], L1, L1)
   merge_in_gga(L1, [], L1) -> merge_out_gga(L1, [], L1)
   merge_in_gga(.(X, L1), .(Y, L2), .(X, L3)) -> U9_gga(X, L1, Y, L2, L3, le_in_gg(X, Y))
   le_in_gg(s(X), s(Y)) -> U14_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(Y)) -> le_out_gg(0, s(Y))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   U14_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U9_gga(X, L1, Y, L2, L3, le_out_gg(X, Y)) -> U10_gga(X, L1, Y, L2, L3, merge_in_gga(L1, .(Y, L2), L3))
   merge_in_gga(.(X, L1), .(Y, L2), .(Y, L3)) -> U11_gga(X, L1, Y, L2, L3, gt_in_gg(X, Y))
   gt_in_gg(s(X), s(Y)) -> U13_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), 0) -> gt_out_gg(s(X), 0)
   U13_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))
   U11_gga(X, L1, Y, L2, L3, gt_out_gg(X, Y)) -> U12_gga(X, L1, Y, L2, L3, merge_in_gga(.(X, L1), L2, L3))
   U12_gga(X, L1, Y, L2, L3, merge_out_gga(.(X, L1), L2, L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(Y, L3))
   U10_gga(X, L1, Y, L2, L3, merge_out_gga(L1, .(Y, L2), L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(X, L3))
   U4_ga(X, Y, L1, L2, merge_out_gga(L5, L6, L2)) -> mergesort_out_ga(.(X, .(Y, L1)), L2)

The argument filtering Pi contains the following mapping:
mergesort_in_ga(x1, x2)  =  mergesort_in_ga(x1)

[]  =  []

mergesort_out_ga(x1, x2)  =  mergesort_out_ga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

split2_in_gaa(x1, x2, x3)  =  split2_in_gaa(x1)

U8_gaa(x1, x2, x3, x4, x5, x6)  =  U8_gaa(x1, x2, x3, x6)

split_in_gaa(x1, x2, x3)  =  split_in_gaa(x1)

U5_gaa(x1, x2, x3, x4)  =  U5_gaa(x1, x4)

split0_in_gaa(x1, x2, x3)  =  split0_in_gaa(x1)

split0_out_gaa(x1, x2, x3)  =  split0_out_gaa(x1, x2, x3)

split_out_gaa(x1, x2, x3)  =  split_out_gaa(x1, x2, x3)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

split1_in_gaa(x1, x2, x3)  =  split1_in_gaa(x1)

split1_out_gaa(x1, x2, x3)  =  split1_out_gaa(x1, x2, x3)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

split2_out_gaa(x1, x2, x3)  =  split2_out_gaa(x1, x2, x3)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x1, x2, x3, x5, x6)

U3_ga(x1, x2, x3, x4, x5, x6)  =  U3_ga(x1, x2, x3, x5, x6)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x1, x2, x3, x5)

merge_in_gga(x1, x2, x3)  =  merge_in_gga(x1, x2)

merge_out_gga(x1, x2, x3)  =  merge_out_gga(x1, x2, x3)

U9_gga(x1, x2, x3, x4, x5, x6)  =  U9_gga(x1, x2, x3, x4, x6)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

0  =  0

le_out_gg(x1, x2)  =  le_out_gg(x1, x2)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x3, x4, x6)

U11_gga(x1, x2, x3, x4, x5, x6)  =  U11_gga(x1, x2, x3, x4, x6)

gt_in_gg(x1, x2)  =  gt_in_gg(x1, x2)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

gt_out_gg(x1, x2)  =  gt_out_gg(x1, x2)

U12_gga(x1, x2, x3, x4, x5, x6)  =  U12_gga(x1, x2, x3, x4, x6)

MERGESORT_IN_GA(x1, x2)  =  MERGESORT_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x1, x2, x3, x5)

SPLIT2_IN_GAA(x1, x2, x3)  =  SPLIT2_IN_GAA(x1)

U8_GAA(x1, x2, x3, x4, x5, x6)  =  U8_GAA(x1, x2, x3, x6)

SPLIT_IN_GAA(x1, x2, x3)  =  SPLIT_IN_GAA(x1)

U5_GAA(x1, x2, x3, x4)  =  U5_GAA(x1, x4)

SPLIT0_IN_GAA(x1, x2, x3)  =  SPLIT0_IN_GAA(x1)

U6_GAA(x1, x2, x3, x4)  =  U6_GAA(x1, x4)

SPLIT1_IN_GAA(x1, x2, x3)  =  SPLIT1_IN_GAA(x1)

U7_GAA(x1, x2, x3, x4)  =  U7_GAA(x1, x4)

U2_GA(x1, x2, x3, x4, x5, x6)  =  U2_GA(x1, x2, x3, x5, x6)

U3_GA(x1, x2, x3, x4, x5, x6)  =  U3_GA(x1, x2, x3, x5, x6)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x1, x2, x3, x5)

MERGE_IN_GGA(x1, x2, x3)  =  MERGE_IN_GGA(x1, x2)

U9_GGA(x1, x2, x3, x4, x5, x6)  =  U9_GGA(x1, x2, x3, x4, x6)

LE_IN_GG(x1, x2)  =  LE_IN_GG(x1, x2)

U14_GG(x1, x2, x3)  =  U14_GG(x1, x2, x3)

U10_GGA(x1, x2, x3, x4, x5, x6)  =  U10_GGA(x1, x2, x3, x4, x6)

U11_GGA(x1, x2, x3, x4, x5, x6)  =  U11_GGA(x1, x2, x3, x4, x6)

GT_IN_GG(x1, x2)  =  GT_IN_GG(x1, x2)

U13_GG(x1, x2, x3)  =  U13_GG(x1, x2, x3)

U12_GGA(x1, x2, x3, x4, x5, x6)  =  U12_GGA(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MERGESORT_IN_GA(.(X, .(Y, L1)), L2) -> U1_GA(X, Y, L1, L2, split2_in_gaa(.(X, .(Y, L1)), L3, L4))
   MERGESORT_IN_GA(.(X, .(Y, L1)), L2) -> SPLIT2_IN_GAA(.(X, .(Y, L1)), L3, L4)
   SPLIT2_IN_GAA(.(X, .(Y, L1)), .(X, L2), .(Y, L3)) -> U8_GAA(X, Y, L1, L2, L3, split_in_gaa(L1, L2, L3))
   SPLIT2_IN_GAA(.(X, .(Y, L1)), .(X, L2), .(Y, L3)) -> SPLIT_IN_GAA(L1, L2, L3)
   SPLIT_IN_GAA(L1, L2, L3) -> U5_GAA(L1, L2, L3, split0_in_gaa(L1, L2, L3))
   SPLIT_IN_GAA(L1, L2, L3) -> SPLIT0_IN_GAA(L1, L2, L3)
   SPLIT_IN_GAA(L1, L2, L3) -> U6_GAA(L1, L2, L3, split1_in_gaa(L1, L2, L3))
   SPLIT_IN_GAA(L1, L2, L3) -> SPLIT1_IN_GAA(L1, L2, L3)
   SPLIT_IN_GAA(L1, L2, L3) -> U7_GAA(L1, L2, L3, split2_in_gaa(L1, L2, L3))
   SPLIT_IN_GAA(L1, L2, L3) -> SPLIT2_IN_GAA(L1, L2, L3)
   U1_GA(X, Y, L1, L2, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> U2_GA(X, Y, L1, L2, L4, mergesort_in_ga(L3, L5))
   U1_GA(X, Y, L1, L2, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> MERGESORT_IN_GA(L3, L5)
   U2_GA(X, Y, L1, L2, L4, mergesort_out_ga(L3, L5)) -> U3_GA(X, Y, L1, L2, L5, mergesort_in_ga(L4, L6))
   U2_GA(X, Y, L1, L2, L4, mergesort_out_ga(L3, L5)) -> MERGESORT_IN_GA(L4, L6)
   U3_GA(X, Y, L1, L2, L5, mergesort_out_ga(L4, L6)) -> U4_GA(X, Y, L1, L2, merge_in_gga(L5, L6, L2))
   U3_GA(X, Y, L1, L2, L5, mergesort_out_ga(L4, L6)) -> MERGE_IN_GGA(L5, L6, L2)
   MERGE_IN_GGA(.(X, L1), .(Y, L2), .(X, L3)) -> U9_GGA(X, L1, Y, L2, L3, le_in_gg(X, Y))
   MERGE_IN_GGA(.(X, L1), .(Y, L2), .(X, L3)) -> LE_IN_GG(X, Y)
   LE_IN_GG(s(X), s(Y)) -> U14_GG(X, Y, le_in_gg(X, Y))
   LE_IN_GG(s(X), s(Y)) -> LE_IN_GG(X, Y)
   U9_GGA(X, L1, Y, L2, L3, le_out_gg(X, Y)) -> U10_GGA(X, L1, Y, L2, L3, merge_in_gga(L1, .(Y, L2), L3))
   U9_GGA(X, L1, Y, L2, L3, le_out_gg(X, Y)) -> MERGE_IN_GGA(L1, .(Y, L2), L3)
   MERGE_IN_GGA(.(X, L1), .(Y, L2), .(Y, L3)) -> U11_GGA(X, L1, Y, L2, L3, gt_in_gg(X, Y))
   MERGE_IN_GGA(.(X, L1), .(Y, L2), .(Y, L3)) -> GT_IN_GG(X, Y)
   GT_IN_GG(s(X), s(Y)) -> U13_GG(X, Y, gt_in_gg(X, Y))
   GT_IN_GG(s(X), s(Y)) -> GT_IN_GG(X, Y)
   U11_GGA(X, L1, Y, L2, L3, gt_out_gg(X, Y)) -> U12_GGA(X, L1, Y, L2, L3, merge_in_gga(.(X, L1), L2, L3))
   U11_GGA(X, L1, Y, L2, L3, gt_out_gg(X, Y)) -> MERGE_IN_GGA(.(X, L1), L2, L3)

The TRS R consists of the following rules:

   mergesort_in_ga([], []) -> mergesort_out_ga([], [])
   mergesort_in_ga(.(X, []), .(X, [])) -> mergesort_out_ga(.(X, []), .(X, []))
   mergesort_in_ga(.(X, .(Y, L1)), L2) -> U1_ga(X, Y, L1, L2, split2_in_gaa(.(X, .(Y, L1)), L3, L4))
   split2_in_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3)) -> U8_gaa(X, Y, L1, L2, L3, split_in_gaa(L1, L2, L3))
   split_in_gaa(L1, L2, L3) -> U5_gaa(L1, L2, L3, split0_in_gaa(L1, L2, L3))
   split0_in_gaa([], [], []) -> split0_out_gaa([], [], [])
   U5_gaa(L1, L2, L3, split0_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1, L2, L3) -> U6_gaa(L1, L2, L3, split1_in_gaa(L1, L2, L3))
   split1_in_gaa(.(X, []), .(X, []), []) -> split1_out_gaa(.(X, []), .(X, []), [])
   U6_gaa(L1, L2, L3, split1_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1, L2, L3) -> U7_gaa(L1, L2, L3, split2_in_gaa(L1, L2, L3))
   U7_gaa(L1, L2, L3, split2_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   U8_gaa(X, Y, L1, L2, L3, split_out_gaa(L1, L2, L3)) -> split2_out_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3))
   U1_ga(X, Y, L1, L2, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> U2_ga(X, Y, L1, L2, L4, mergesort_in_ga(L3, L5))
   U2_ga(X, Y, L1, L2, L4, mergesort_out_ga(L3, L5)) -> U3_ga(X, Y, L1, L2, L5, mergesort_in_ga(L4, L6))
   U3_ga(X, Y, L1, L2, L5, mergesort_out_ga(L4, L6)) -> U4_ga(X, Y, L1, L2, merge_in_gga(L5, L6, L2))
   merge_in_gga([], L1, L1) -> merge_out_gga([], L1, L1)
   merge_in_gga(L1, [], L1) -> merge_out_gga(L1, [], L1)
   merge_in_gga(.(X, L1), .(Y, L2), .(X, L3)) -> U9_gga(X, L1, Y, L2, L3, le_in_gg(X, Y))
   le_in_gg(s(X), s(Y)) -> U14_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(Y)) -> le_out_gg(0, s(Y))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   U14_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U9_gga(X, L1, Y, L2, L3, le_out_gg(X, Y)) -> U10_gga(X, L1, Y, L2, L3, merge_in_gga(L1, .(Y, L2), L3))
   merge_in_gga(.(X, L1), .(Y, L2), .(Y, L3)) -> U11_gga(X, L1, Y, L2, L3, gt_in_gg(X, Y))
   gt_in_gg(s(X), s(Y)) -> U13_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), 0) -> gt_out_gg(s(X), 0)
   U13_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))
   U11_gga(X, L1, Y, L2, L3, gt_out_gg(X, Y)) -> U12_gga(X, L1, Y, L2, L3, merge_in_gga(.(X, L1), L2, L3))
   U12_gga(X, L1, Y, L2, L3, merge_out_gga(.(X, L1), L2, L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(Y, L3))
   U10_gga(X, L1, Y, L2, L3, merge_out_gga(L1, .(Y, L2), L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(X, L3))
   U4_ga(X, Y, L1, L2, merge_out_gga(L5, L6, L2)) -> mergesort_out_ga(.(X, .(Y, L1)), L2)

The argument filtering Pi contains the following mapping:
mergesort_in_ga(x1, x2)  =  mergesort_in_ga(x1)

[]  =  []

mergesort_out_ga(x1, x2)  =  mergesort_out_ga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

split2_in_gaa(x1, x2, x3)  =  split2_in_gaa(x1)

U8_gaa(x1, x2, x3, x4, x5, x6)  =  U8_gaa(x1, x2, x3, x6)

split_in_gaa(x1, x2, x3)  =  split_in_gaa(x1)

U5_gaa(x1, x2, x3, x4)  =  U5_gaa(x1, x4)

split0_in_gaa(x1, x2, x3)  =  split0_in_gaa(x1)

split0_out_gaa(x1, x2, x3)  =  split0_out_gaa(x1, x2, x3)

split_out_gaa(x1, x2, x3)  =  split_out_gaa(x1, x2, x3)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

split1_in_gaa(x1, x2, x3)  =  split1_in_gaa(x1)

split1_out_gaa(x1, x2, x3)  =  split1_out_gaa(x1, x2, x3)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

split2_out_gaa(x1, x2, x3)  =  split2_out_gaa(x1, x2, x3)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x1, x2, x3, x5, x6)

U3_ga(x1, x2, x3, x4, x5, x6)  =  U3_ga(x1, x2, x3, x5, x6)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x1, x2, x3, x5)

merge_in_gga(x1, x2, x3)  =  merge_in_gga(x1, x2)

merge_out_gga(x1, x2, x3)  =  merge_out_gga(x1, x2, x3)

U9_gga(x1, x2, x3, x4, x5, x6)  =  U9_gga(x1, x2, x3, x4, x6)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

0  =  0

le_out_gg(x1, x2)  =  le_out_gg(x1, x2)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x3, x4, x6)

U11_gga(x1, x2, x3, x4, x5, x6)  =  U11_gga(x1, x2, x3, x4, x6)

gt_in_gg(x1, x2)  =  gt_in_gg(x1, x2)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

gt_out_gg(x1, x2)  =  gt_out_gg(x1, x2)

U12_gga(x1, x2, x3, x4, x5, x6)  =  U12_gga(x1, x2, x3, x4, x6)

MERGESORT_IN_GA(x1, x2)  =  MERGESORT_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x1, x2, x3, x5)

SPLIT2_IN_GAA(x1, x2, x3)  =  SPLIT2_IN_GAA(x1)

U8_GAA(x1, x2, x3, x4, x5, x6)  =  U8_GAA(x1, x2, x3, x6)

SPLIT_IN_GAA(x1, x2, x3)  =  SPLIT_IN_GAA(x1)

U5_GAA(x1, x2, x3, x4)  =  U5_GAA(x1, x4)

SPLIT0_IN_GAA(x1, x2, x3)  =  SPLIT0_IN_GAA(x1)

U6_GAA(x1, x2, x3, x4)  =  U6_GAA(x1, x4)

SPLIT1_IN_GAA(x1, x2, x3)  =  SPLIT1_IN_GAA(x1)

U7_GAA(x1, x2, x3, x4)  =  U7_GAA(x1, x4)

U2_GA(x1, x2, x3, x4, x5, x6)  =  U2_GA(x1, x2, x3, x5, x6)

U3_GA(x1, x2, x3, x4, x5, x6)  =  U3_GA(x1, x2, x3, x5, x6)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x1, x2, x3, x5)

MERGE_IN_GGA(x1, x2, x3)  =  MERGE_IN_GGA(x1, x2)

U9_GGA(x1, x2, x3, x4, x5, x6)  =  U9_GGA(x1, x2, x3, x4, x6)

LE_IN_GG(x1, x2)  =  LE_IN_GG(x1, x2)

U14_GG(x1, x2, x3)  =  U14_GG(x1, x2, x3)

U10_GGA(x1, x2, x3, x4, x5, x6)  =  U10_GGA(x1, x2, x3, x4, x6)

U11_GGA(x1, x2, x3, x4, x5, x6)  =  U11_GGA(x1, x2, x3, x4, x6)

GT_IN_GG(x1, x2)  =  GT_IN_GG(x1, x2)

U13_GG(x1, x2, x3)  =  U13_GG(x1, x2, x3)

U12_GGA(x1, x2, x3, x4, x5, x6)  =  U12_GGA(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 5 SCCs with 16 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GT_IN_GG(s(X), s(Y)) -> GT_IN_GG(X, Y)

The TRS R consists of the following rules:

   mergesort_in_ga([], []) -> mergesort_out_ga([], [])
   mergesort_in_ga(.(X, []), .(X, [])) -> mergesort_out_ga(.(X, []), .(X, []))
   mergesort_in_ga(.(X, .(Y, L1)), L2) -> U1_ga(X, Y, L1, L2, split2_in_gaa(.(X, .(Y, L1)), L3, L4))
   split2_in_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3)) -> U8_gaa(X, Y, L1, L2, L3, split_in_gaa(L1, L2, L3))
   split_in_gaa(L1, L2, L3) -> U5_gaa(L1, L2, L3, split0_in_gaa(L1, L2, L3))
   split0_in_gaa([], [], []) -> split0_out_gaa([], [], [])
   U5_gaa(L1, L2, L3, split0_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1, L2, L3) -> U6_gaa(L1, L2, L3, split1_in_gaa(L1, L2, L3))
   split1_in_gaa(.(X, []), .(X, []), []) -> split1_out_gaa(.(X, []), .(X, []), [])
   U6_gaa(L1, L2, L3, split1_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1, L2, L3) -> U7_gaa(L1, L2, L3, split2_in_gaa(L1, L2, L3))
   U7_gaa(L1, L2, L3, split2_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   U8_gaa(X, Y, L1, L2, L3, split_out_gaa(L1, L2, L3)) -> split2_out_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3))
   U1_ga(X, Y, L1, L2, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> U2_ga(X, Y, L1, L2, L4, mergesort_in_ga(L3, L5))
   U2_ga(X, Y, L1, L2, L4, mergesort_out_ga(L3, L5)) -> U3_ga(X, Y, L1, L2, L5, mergesort_in_ga(L4, L6))
   U3_ga(X, Y, L1, L2, L5, mergesort_out_ga(L4, L6)) -> U4_ga(X, Y, L1, L2, merge_in_gga(L5, L6, L2))
   merge_in_gga([], L1, L1) -> merge_out_gga([], L1, L1)
   merge_in_gga(L1, [], L1) -> merge_out_gga(L1, [], L1)
   merge_in_gga(.(X, L1), .(Y, L2), .(X, L3)) -> U9_gga(X, L1, Y, L2, L3, le_in_gg(X, Y))
   le_in_gg(s(X), s(Y)) -> U14_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(Y)) -> le_out_gg(0, s(Y))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   U14_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U9_gga(X, L1, Y, L2, L3, le_out_gg(X, Y)) -> U10_gga(X, L1, Y, L2, L3, merge_in_gga(L1, .(Y, L2), L3))
   merge_in_gga(.(X, L1), .(Y, L2), .(Y, L3)) -> U11_gga(X, L1, Y, L2, L3, gt_in_gg(X, Y))
   gt_in_gg(s(X), s(Y)) -> U13_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), 0) -> gt_out_gg(s(X), 0)
   U13_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))
   U11_gga(X, L1, Y, L2, L3, gt_out_gg(X, Y)) -> U12_gga(X, L1, Y, L2, L3, merge_in_gga(.(X, L1), L2, L3))
   U12_gga(X, L1, Y, L2, L3, merge_out_gga(.(X, L1), L2, L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(Y, L3))
   U10_gga(X, L1, Y, L2, L3, merge_out_gga(L1, .(Y, L2), L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(X, L3))
   U4_ga(X, Y, L1, L2, merge_out_gga(L5, L6, L2)) -> mergesort_out_ga(.(X, .(Y, L1)), L2)

The argument filtering Pi contains the following mapping:
mergesort_in_ga(x1, x2)  =  mergesort_in_ga(x1)

[]  =  []

mergesort_out_ga(x1, x2)  =  mergesort_out_ga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

split2_in_gaa(x1, x2, x3)  =  split2_in_gaa(x1)

U8_gaa(x1, x2, x3, x4, x5, x6)  =  U8_gaa(x1, x2, x3, x6)

split_in_gaa(x1, x2, x3)  =  split_in_gaa(x1)

U5_gaa(x1, x2, x3, x4)  =  U5_gaa(x1, x4)

split0_in_gaa(x1, x2, x3)  =  split0_in_gaa(x1)

split0_out_gaa(x1, x2, x3)  =  split0_out_gaa(x1, x2, x3)

split_out_gaa(x1, x2, x3)  =  split_out_gaa(x1, x2, x3)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

split1_in_gaa(x1, x2, x3)  =  split1_in_gaa(x1)

split1_out_gaa(x1, x2, x3)  =  split1_out_gaa(x1, x2, x3)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

split2_out_gaa(x1, x2, x3)  =  split2_out_gaa(x1, x2, x3)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x1, x2, x3, x5, x6)

U3_ga(x1, x2, x3, x4, x5, x6)  =  U3_ga(x1, x2, x3, x5, x6)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x1, x2, x3, x5)

merge_in_gga(x1, x2, x3)  =  merge_in_gga(x1, x2)

merge_out_gga(x1, x2, x3)  =  merge_out_gga(x1, x2, x3)

U9_gga(x1, x2, x3, x4, x5, x6)  =  U9_gga(x1, x2, x3, x4, x6)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

0  =  0

le_out_gg(x1, x2)  =  le_out_gg(x1, x2)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x3, x4, x6)

U11_gga(x1, x2, x3, x4, x5, x6)  =  U11_gga(x1, x2, x3, x4, x6)

gt_in_gg(x1, x2)  =  gt_in_gg(x1, x2)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

gt_out_gg(x1, x2)  =  gt_out_gg(x1, x2)

U12_gga(x1, x2, x3, x4, x5, x6)  =  U12_gga(x1, x2, x3, x4, x6)

GT_IN_GG(x1, x2)  =  GT_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GT_IN_GG(s(X), s(Y)) -> GT_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GT_IN_GG(s(X), s(Y)) -> GT_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*GT_IN_GG(s(X), s(Y)) -> GT_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LE_IN_GG(s(X), s(Y)) -> LE_IN_GG(X, Y)

The TRS R consists of the following rules:

   mergesort_in_ga([], []) -> mergesort_out_ga([], [])
   mergesort_in_ga(.(X, []), .(X, [])) -> mergesort_out_ga(.(X, []), .(X, []))
   mergesort_in_ga(.(X, .(Y, L1)), L2) -> U1_ga(X, Y, L1, L2, split2_in_gaa(.(X, .(Y, L1)), L3, L4))
   split2_in_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3)) -> U8_gaa(X, Y, L1, L2, L3, split_in_gaa(L1, L2, L3))
   split_in_gaa(L1, L2, L3) -> U5_gaa(L1, L2, L3, split0_in_gaa(L1, L2, L3))
   split0_in_gaa([], [], []) -> split0_out_gaa([], [], [])
   U5_gaa(L1, L2, L3, split0_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1, L2, L3) -> U6_gaa(L1, L2, L3, split1_in_gaa(L1, L2, L3))
   split1_in_gaa(.(X, []), .(X, []), []) -> split1_out_gaa(.(X, []), .(X, []), [])
   U6_gaa(L1, L2, L3, split1_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1, L2, L3) -> U7_gaa(L1, L2, L3, split2_in_gaa(L1, L2, L3))
   U7_gaa(L1, L2, L3, split2_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   U8_gaa(X, Y, L1, L2, L3, split_out_gaa(L1, L2, L3)) -> split2_out_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3))
   U1_ga(X, Y, L1, L2, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> U2_ga(X, Y, L1, L2, L4, mergesort_in_ga(L3, L5))
   U2_ga(X, Y, L1, L2, L4, mergesort_out_ga(L3, L5)) -> U3_ga(X, Y, L1, L2, L5, mergesort_in_ga(L4, L6))
   U3_ga(X, Y, L1, L2, L5, mergesort_out_ga(L4, L6)) -> U4_ga(X, Y, L1, L2, merge_in_gga(L5, L6, L2))
   merge_in_gga([], L1, L1) -> merge_out_gga([], L1, L1)
   merge_in_gga(L1, [], L1) -> merge_out_gga(L1, [], L1)
   merge_in_gga(.(X, L1), .(Y, L2), .(X, L3)) -> U9_gga(X, L1, Y, L2, L3, le_in_gg(X, Y))
   le_in_gg(s(X), s(Y)) -> U14_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(Y)) -> le_out_gg(0, s(Y))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   U14_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U9_gga(X, L1, Y, L2, L3, le_out_gg(X, Y)) -> U10_gga(X, L1, Y, L2, L3, merge_in_gga(L1, .(Y, L2), L3))
   merge_in_gga(.(X, L1), .(Y, L2), .(Y, L3)) -> U11_gga(X, L1, Y, L2, L3, gt_in_gg(X, Y))
   gt_in_gg(s(X), s(Y)) -> U13_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), 0) -> gt_out_gg(s(X), 0)
   U13_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))
   U11_gga(X, L1, Y, L2, L3, gt_out_gg(X, Y)) -> U12_gga(X, L1, Y, L2, L3, merge_in_gga(.(X, L1), L2, L3))
   U12_gga(X, L1, Y, L2, L3, merge_out_gga(.(X, L1), L2, L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(Y, L3))
   U10_gga(X, L1, Y, L2, L3, merge_out_gga(L1, .(Y, L2), L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(X, L3))
   U4_ga(X, Y, L1, L2, merge_out_gga(L5, L6, L2)) -> mergesort_out_ga(.(X, .(Y, L1)), L2)

The argument filtering Pi contains the following mapping:
mergesort_in_ga(x1, x2)  =  mergesort_in_ga(x1)

[]  =  []

mergesort_out_ga(x1, x2)  =  mergesort_out_ga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

split2_in_gaa(x1, x2, x3)  =  split2_in_gaa(x1)

U8_gaa(x1, x2, x3, x4, x5, x6)  =  U8_gaa(x1, x2, x3, x6)

split_in_gaa(x1, x2, x3)  =  split_in_gaa(x1)

U5_gaa(x1, x2, x3, x4)  =  U5_gaa(x1, x4)

split0_in_gaa(x1, x2, x3)  =  split0_in_gaa(x1)

split0_out_gaa(x1, x2, x3)  =  split0_out_gaa(x1, x2, x3)

split_out_gaa(x1, x2, x3)  =  split_out_gaa(x1, x2, x3)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

split1_in_gaa(x1, x2, x3)  =  split1_in_gaa(x1)

split1_out_gaa(x1, x2, x3)  =  split1_out_gaa(x1, x2, x3)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

split2_out_gaa(x1, x2, x3)  =  split2_out_gaa(x1, x2, x3)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x1, x2, x3, x5, x6)

U3_ga(x1, x2, x3, x4, x5, x6)  =  U3_ga(x1, x2, x3, x5, x6)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x1, x2, x3, x5)

merge_in_gga(x1, x2, x3)  =  merge_in_gga(x1, x2)

merge_out_gga(x1, x2, x3)  =  merge_out_gga(x1, x2, x3)

U9_gga(x1, x2, x3, x4, x5, x6)  =  U9_gga(x1, x2, x3, x4, x6)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

0  =  0

le_out_gg(x1, x2)  =  le_out_gg(x1, x2)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x3, x4, x6)

U11_gga(x1, x2, x3, x4, x5, x6)  =  U11_gga(x1, x2, x3, x4, x6)

gt_in_gg(x1, x2)  =  gt_in_gg(x1, x2)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

gt_out_gg(x1, x2)  =  gt_out_gg(x1, x2)

U12_gga(x1, x2, x3, x4, x5, x6)  =  U12_gga(x1, x2, x3, x4, x6)

LE_IN_GG(x1, x2)  =  LE_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LE_IN_GG(s(X), s(Y)) -> LE_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LE_IN_GG(s(X), s(Y)) -> LE_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LE_IN_GG(s(X), s(Y)) -> LE_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U9_GGA(X, L1, Y, L2, L3, le_out_gg(X, Y)) -> MERGE_IN_GGA(L1, .(Y, L2), L3)
   MERGE_IN_GGA(.(X, L1), .(Y, L2), .(X, L3)) -> U9_GGA(X, L1, Y, L2, L3, le_in_gg(X, Y))
   MERGE_IN_GGA(.(X, L1), .(Y, L2), .(Y, L3)) -> U11_GGA(X, L1, Y, L2, L3, gt_in_gg(X, Y))
   U11_GGA(X, L1, Y, L2, L3, gt_out_gg(X, Y)) -> MERGE_IN_GGA(.(X, L1), L2, L3)

The TRS R consists of the following rules:

   mergesort_in_ga([], []) -> mergesort_out_ga([], [])
   mergesort_in_ga(.(X, []), .(X, [])) -> mergesort_out_ga(.(X, []), .(X, []))
   mergesort_in_ga(.(X, .(Y, L1)), L2) -> U1_ga(X, Y, L1, L2, split2_in_gaa(.(X, .(Y, L1)), L3, L4))
   split2_in_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3)) -> U8_gaa(X, Y, L1, L2, L3, split_in_gaa(L1, L2, L3))
   split_in_gaa(L1, L2, L3) -> U5_gaa(L1, L2, L3, split0_in_gaa(L1, L2, L3))
   split0_in_gaa([], [], []) -> split0_out_gaa([], [], [])
   U5_gaa(L1, L2, L3, split0_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1, L2, L3) -> U6_gaa(L1, L2, L3, split1_in_gaa(L1, L2, L3))
   split1_in_gaa(.(X, []), .(X, []), []) -> split1_out_gaa(.(X, []), .(X, []), [])
   U6_gaa(L1, L2, L3, split1_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1, L2, L3) -> U7_gaa(L1, L2, L3, split2_in_gaa(L1, L2, L3))
   U7_gaa(L1, L2, L3, split2_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   U8_gaa(X, Y, L1, L2, L3, split_out_gaa(L1, L2, L3)) -> split2_out_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3))
   U1_ga(X, Y, L1, L2, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> U2_ga(X, Y, L1, L2, L4, mergesort_in_ga(L3, L5))
   U2_ga(X, Y, L1, L2, L4, mergesort_out_ga(L3, L5)) -> U3_ga(X, Y, L1, L2, L5, mergesort_in_ga(L4, L6))
   U3_ga(X, Y, L1, L2, L5, mergesort_out_ga(L4, L6)) -> U4_ga(X, Y, L1, L2, merge_in_gga(L5, L6, L2))
   merge_in_gga([], L1, L1) -> merge_out_gga([], L1, L1)
   merge_in_gga(L1, [], L1) -> merge_out_gga(L1, [], L1)
   merge_in_gga(.(X, L1), .(Y, L2), .(X, L3)) -> U9_gga(X, L1, Y, L2, L3, le_in_gg(X, Y))
   le_in_gg(s(X), s(Y)) -> U14_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(Y)) -> le_out_gg(0, s(Y))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   U14_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U9_gga(X, L1, Y, L2, L3, le_out_gg(X, Y)) -> U10_gga(X, L1, Y, L2, L3, merge_in_gga(L1, .(Y, L2), L3))
   merge_in_gga(.(X, L1), .(Y, L2), .(Y, L3)) -> U11_gga(X, L1, Y, L2, L3, gt_in_gg(X, Y))
   gt_in_gg(s(X), s(Y)) -> U13_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), 0) -> gt_out_gg(s(X), 0)
   U13_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))
   U11_gga(X, L1, Y, L2, L3, gt_out_gg(X, Y)) -> U12_gga(X, L1, Y, L2, L3, merge_in_gga(.(X, L1), L2, L3))
   U12_gga(X, L1, Y, L2, L3, merge_out_gga(.(X, L1), L2, L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(Y, L3))
   U10_gga(X, L1, Y, L2, L3, merge_out_gga(L1, .(Y, L2), L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(X, L3))
   U4_ga(X, Y, L1, L2, merge_out_gga(L5, L6, L2)) -> mergesort_out_ga(.(X, .(Y, L1)), L2)

The argument filtering Pi contains the following mapping:
mergesort_in_ga(x1, x2)  =  mergesort_in_ga(x1)

[]  =  []

mergesort_out_ga(x1, x2)  =  mergesort_out_ga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

split2_in_gaa(x1, x2, x3)  =  split2_in_gaa(x1)

U8_gaa(x1, x2, x3, x4, x5, x6)  =  U8_gaa(x1, x2, x3, x6)

split_in_gaa(x1, x2, x3)  =  split_in_gaa(x1)

U5_gaa(x1, x2, x3, x4)  =  U5_gaa(x1, x4)

split0_in_gaa(x1, x2, x3)  =  split0_in_gaa(x1)

split0_out_gaa(x1, x2, x3)  =  split0_out_gaa(x1, x2, x3)

split_out_gaa(x1, x2, x3)  =  split_out_gaa(x1, x2, x3)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

split1_in_gaa(x1, x2, x3)  =  split1_in_gaa(x1)

split1_out_gaa(x1, x2, x3)  =  split1_out_gaa(x1, x2, x3)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

split2_out_gaa(x1, x2, x3)  =  split2_out_gaa(x1, x2, x3)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x1, x2, x3, x5, x6)

U3_ga(x1, x2, x3, x4, x5, x6)  =  U3_ga(x1, x2, x3, x5, x6)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x1, x2, x3, x5)

merge_in_gga(x1, x2, x3)  =  merge_in_gga(x1, x2)

merge_out_gga(x1, x2, x3)  =  merge_out_gga(x1, x2, x3)

U9_gga(x1, x2, x3, x4, x5, x6)  =  U9_gga(x1, x2, x3, x4, x6)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

0  =  0

le_out_gg(x1, x2)  =  le_out_gg(x1, x2)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x3, x4, x6)

U11_gga(x1, x2, x3, x4, x5, x6)  =  U11_gga(x1, x2, x3, x4, x6)

gt_in_gg(x1, x2)  =  gt_in_gg(x1, x2)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

gt_out_gg(x1, x2)  =  gt_out_gg(x1, x2)

U12_gga(x1, x2, x3, x4, x5, x6)  =  U12_gga(x1, x2, x3, x4, x6)

MERGE_IN_GGA(x1, x2, x3)  =  MERGE_IN_GGA(x1, x2)

U9_GGA(x1, x2, x3, x4, x5, x6)  =  U9_GGA(x1, x2, x3, x4, x6)

U11_GGA(x1, x2, x3, x4, x5, x6)  =  U11_GGA(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(23)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U9_GGA(X, L1, Y, L2, L3, le_out_gg(X, Y)) -> MERGE_IN_GGA(L1, .(Y, L2), L3)
   MERGE_IN_GGA(.(X, L1), .(Y, L2), .(X, L3)) -> U9_GGA(X, L1, Y, L2, L3, le_in_gg(X, Y))
   MERGE_IN_GGA(.(X, L1), .(Y, L2), .(Y, L3)) -> U11_GGA(X, L1, Y, L2, L3, gt_in_gg(X, Y))
   U11_GGA(X, L1, Y, L2, L3, gt_out_gg(X, Y)) -> MERGE_IN_GGA(.(X, L1), L2, L3)

The TRS R consists of the following rules:

   le_in_gg(s(X), s(Y)) -> U14_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(Y)) -> le_out_gg(0, s(Y))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   gt_in_gg(s(X), s(Y)) -> U13_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), 0) -> gt_out_gg(s(X), 0)
   U14_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U13_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

0  =  0

le_out_gg(x1, x2)  =  le_out_gg(x1, x2)

gt_in_gg(x1, x2)  =  gt_in_gg(x1, x2)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

gt_out_gg(x1, x2)  =  gt_out_gg(x1, x2)

MERGE_IN_GGA(x1, x2, x3)  =  MERGE_IN_GGA(x1, x2)

U9_GGA(x1, x2, x3, x4, x5, x6)  =  U9_GGA(x1, x2, x3, x4, x6)

U11_GGA(x1, x2, x3, x4, x5, x6)  =  U11_GGA(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(24) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_GGA(X, L1, Y, L2, le_out_gg(X, Y)) -> MERGE_IN_GGA(L1, .(Y, L2))
   MERGE_IN_GGA(.(X, L1), .(Y, L2)) -> U9_GGA(X, L1, Y, L2, le_in_gg(X, Y))
   MERGE_IN_GGA(.(X, L1), .(Y, L2)) -> U11_GGA(X, L1, Y, L2, gt_in_gg(X, Y))
   U11_GGA(X, L1, Y, L2, gt_out_gg(X, Y)) -> MERGE_IN_GGA(.(X, L1), L2)

The TRS R consists of the following rules:

   le_in_gg(s(X), s(Y)) -> U14_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(Y)) -> le_out_gg(0, s(Y))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   gt_in_gg(s(X), s(Y)) -> U13_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), 0) -> gt_out_gg(s(X), 0)
   U14_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U13_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))

The set Q consists of the following terms:

   le_in_gg(x0, x1)
   gt_in_gg(x0, x1)
   U14_gg(x0, x1, x2)
   U13_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   MERGE_IN_GGA(.(X, L1), .(Y, L2)) -> U11_GGA(X, L1, Y, L2, gt_in_gg(X, Y))

Strictly oriented rules of the TRS R:

   le_in_gg(0, s(Y)) -> le_out_gg(0, s(Y))
   le_in_gg(0, 0) -> le_out_gg(0, 0)

Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(0) = 1
   POL(MERGE_IN_GGA(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U11_GGA(x_1, x_2, x_3, x_4, x_5)) = 2 + 2*x_1 + 2*x_2 + 2*x_3 + 2*x_4 + 2*x_5
   POL(U13_gg(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U14_gg(x_1, x_2, x_3)) = 2*x_1 + 2*x_2 + x_3
   POL(U9_GGA(x_1, x_2, x_3, x_4, x_5)) = 2 + x_1 + 2*x_2 + 2*x_3 + 2*x_4 + x_5
   POL(gt_in_gg(x_1, x_2)) = x_1 + x_2
   POL(gt_out_gg(x_1, x_2)) = x_1 + x_2
   POL(le_in_gg(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(le_out_gg(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(s(x_1)) = 2*x_1


----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_GGA(X, L1, Y, L2, le_out_gg(X, Y)) -> MERGE_IN_GGA(L1, .(Y, L2))
   MERGE_IN_GGA(.(X, L1), .(Y, L2)) -> U9_GGA(X, L1, Y, L2, le_in_gg(X, Y))
   U11_GGA(X, L1, Y, L2, gt_out_gg(X, Y)) -> MERGE_IN_GGA(.(X, L1), L2)

The TRS R consists of the following rules:

   le_in_gg(s(X), s(Y)) -> U14_gg(X, Y, le_in_gg(X, Y))
   gt_in_gg(s(X), s(Y)) -> U13_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), 0) -> gt_out_gg(s(X), 0)
   U14_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U13_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))

The set Q consists of the following terms:

   le_in_gg(x0, x1)
   gt_in_gg(x0, x1)
   U14_gg(x0, x1, x2)
   U13_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGE_IN_GGA(.(X, L1), .(Y, L2)) -> U9_GGA(X, L1, Y, L2, le_in_gg(X, Y))
   U9_GGA(X, L1, Y, L2, le_out_gg(X, Y)) -> MERGE_IN_GGA(L1, .(Y, L2))

The TRS R consists of the following rules:

   le_in_gg(s(X), s(Y)) -> U14_gg(X, Y, le_in_gg(X, Y))
   gt_in_gg(s(X), s(Y)) -> U13_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), 0) -> gt_out_gg(s(X), 0)
   U14_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U13_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))

The set Q consists of the following terms:

   le_in_gg(x0, x1)
   gt_in_gg(x0, x1)
   U14_gg(x0, x1, x2)
   U13_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGE_IN_GGA(.(X, L1), .(Y, L2)) -> U9_GGA(X, L1, Y, L2, le_in_gg(X, Y))
   U9_GGA(X, L1, Y, L2, le_out_gg(X, Y)) -> MERGE_IN_GGA(L1, .(Y, L2))

The TRS R consists of the following rules:

   le_in_gg(s(X), s(Y)) -> U14_gg(X, Y, le_in_gg(X, Y))
   U14_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))

The set Q consists of the following terms:

   le_in_gg(x0, x1)
   gt_in_gg(x0, x1)
   U14_gg(x0, x1, x2)
   U13_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(32) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   gt_in_gg(x0, x1)
   U13_gg(x0, x1, x2)


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MERGE_IN_GGA(.(X, L1), .(Y, L2)) -> U9_GGA(X, L1, Y, L2, le_in_gg(X, Y))
   U9_GGA(X, L1, Y, L2, le_out_gg(X, Y)) -> MERGE_IN_GGA(L1, .(Y, L2))

The TRS R consists of the following rules:

   le_in_gg(s(X), s(Y)) -> U14_gg(X, Y, le_in_gg(X, Y))
   U14_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))

The set Q consists of the following terms:

   le_in_gg(x0, x1)
   U14_gg(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(34) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U9_GGA(X, L1, Y, L2, le_out_gg(X, Y)) -> MERGE_IN_GGA(L1, .(Y, L2))
The graph contains the following edges 2 >= 1


*MERGE_IN_GGA(.(X, L1), .(Y, L2)) -> U9_GGA(X, L1, Y, L2, le_in_gg(X, Y))
The graph contains the following edges 1 > 1, 1 > 2, 2 > 3, 2 > 4


----------------------------------------

(35)
YES

----------------------------------------

(36)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SPLIT2_IN_GAA(.(X, .(Y, L1)), .(X, L2), .(Y, L3)) -> SPLIT_IN_GAA(L1, L2, L3)
   SPLIT_IN_GAA(L1, L2, L3) -> SPLIT2_IN_GAA(L1, L2, L3)

The TRS R consists of the following rules:

   mergesort_in_ga([], []) -> mergesort_out_ga([], [])
   mergesort_in_ga(.(X, []), .(X, [])) -> mergesort_out_ga(.(X, []), .(X, []))
   mergesort_in_ga(.(X, .(Y, L1)), L2) -> U1_ga(X, Y, L1, L2, split2_in_gaa(.(X, .(Y, L1)), L3, L4))
   split2_in_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3)) -> U8_gaa(X, Y, L1, L2, L3, split_in_gaa(L1, L2, L3))
   split_in_gaa(L1, L2, L3) -> U5_gaa(L1, L2, L3, split0_in_gaa(L1, L2, L3))
   split0_in_gaa([], [], []) -> split0_out_gaa([], [], [])
   U5_gaa(L1, L2, L3, split0_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1, L2, L3) -> U6_gaa(L1, L2, L3, split1_in_gaa(L1, L2, L3))
   split1_in_gaa(.(X, []), .(X, []), []) -> split1_out_gaa(.(X, []), .(X, []), [])
   U6_gaa(L1, L2, L3, split1_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1, L2, L3) -> U7_gaa(L1, L2, L3, split2_in_gaa(L1, L2, L3))
   U7_gaa(L1, L2, L3, split2_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   U8_gaa(X, Y, L1, L2, L3, split_out_gaa(L1, L2, L3)) -> split2_out_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3))
   U1_ga(X, Y, L1, L2, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> U2_ga(X, Y, L1, L2, L4, mergesort_in_ga(L3, L5))
   U2_ga(X, Y, L1, L2, L4, mergesort_out_ga(L3, L5)) -> U3_ga(X, Y, L1, L2, L5, mergesort_in_ga(L4, L6))
   U3_ga(X, Y, L1, L2, L5, mergesort_out_ga(L4, L6)) -> U4_ga(X, Y, L1, L2, merge_in_gga(L5, L6, L2))
   merge_in_gga([], L1, L1) -> merge_out_gga([], L1, L1)
   merge_in_gga(L1, [], L1) -> merge_out_gga(L1, [], L1)
   merge_in_gga(.(X, L1), .(Y, L2), .(X, L3)) -> U9_gga(X, L1, Y, L2, L3, le_in_gg(X, Y))
   le_in_gg(s(X), s(Y)) -> U14_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(Y)) -> le_out_gg(0, s(Y))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   U14_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U9_gga(X, L1, Y, L2, L3, le_out_gg(X, Y)) -> U10_gga(X, L1, Y, L2, L3, merge_in_gga(L1, .(Y, L2), L3))
   merge_in_gga(.(X, L1), .(Y, L2), .(Y, L3)) -> U11_gga(X, L1, Y, L2, L3, gt_in_gg(X, Y))
   gt_in_gg(s(X), s(Y)) -> U13_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), 0) -> gt_out_gg(s(X), 0)
   U13_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))
   U11_gga(X, L1, Y, L2, L3, gt_out_gg(X, Y)) -> U12_gga(X, L1, Y, L2, L3, merge_in_gga(.(X, L1), L2, L3))
   U12_gga(X, L1, Y, L2, L3, merge_out_gga(.(X, L1), L2, L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(Y, L3))
   U10_gga(X, L1, Y, L2, L3, merge_out_gga(L1, .(Y, L2), L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(X, L3))
   U4_ga(X, Y, L1, L2, merge_out_gga(L5, L6, L2)) -> mergesort_out_ga(.(X, .(Y, L1)), L2)

The argument filtering Pi contains the following mapping:
mergesort_in_ga(x1, x2)  =  mergesort_in_ga(x1)

[]  =  []

mergesort_out_ga(x1, x2)  =  mergesort_out_ga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

split2_in_gaa(x1, x2, x3)  =  split2_in_gaa(x1)

U8_gaa(x1, x2, x3, x4, x5, x6)  =  U8_gaa(x1, x2, x3, x6)

split_in_gaa(x1, x2, x3)  =  split_in_gaa(x1)

U5_gaa(x1, x2, x3, x4)  =  U5_gaa(x1, x4)

split0_in_gaa(x1, x2, x3)  =  split0_in_gaa(x1)

split0_out_gaa(x1, x2, x3)  =  split0_out_gaa(x1, x2, x3)

split_out_gaa(x1, x2, x3)  =  split_out_gaa(x1, x2, x3)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

split1_in_gaa(x1, x2, x3)  =  split1_in_gaa(x1)

split1_out_gaa(x1, x2, x3)  =  split1_out_gaa(x1, x2, x3)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

split2_out_gaa(x1, x2, x3)  =  split2_out_gaa(x1, x2, x3)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x1, x2, x3, x5, x6)

U3_ga(x1, x2, x3, x4, x5, x6)  =  U3_ga(x1, x2, x3, x5, x6)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x1, x2, x3, x5)

merge_in_gga(x1, x2, x3)  =  merge_in_gga(x1, x2)

merge_out_gga(x1, x2, x3)  =  merge_out_gga(x1, x2, x3)

U9_gga(x1, x2, x3, x4, x5, x6)  =  U9_gga(x1, x2, x3, x4, x6)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

0  =  0

le_out_gg(x1, x2)  =  le_out_gg(x1, x2)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x3, x4, x6)

U11_gga(x1, x2, x3, x4, x5, x6)  =  U11_gga(x1, x2, x3, x4, x6)

gt_in_gg(x1, x2)  =  gt_in_gg(x1, x2)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

gt_out_gg(x1, x2)  =  gt_out_gg(x1, x2)

U12_gga(x1, x2, x3, x4, x5, x6)  =  U12_gga(x1, x2, x3, x4, x6)

SPLIT2_IN_GAA(x1, x2, x3)  =  SPLIT2_IN_GAA(x1)

SPLIT_IN_GAA(x1, x2, x3)  =  SPLIT_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(37) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(38)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SPLIT2_IN_GAA(.(X, .(Y, L1)), .(X, L2), .(Y, L3)) -> SPLIT_IN_GAA(L1, L2, L3)
   SPLIT_IN_GAA(L1, L2, L3) -> SPLIT2_IN_GAA(L1, L2, L3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

SPLIT2_IN_GAA(x1, x2, x3)  =  SPLIT2_IN_GAA(x1)

SPLIT_IN_GAA(x1, x2, x3)  =  SPLIT_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(39) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SPLIT2_IN_GAA(.(X, .(Y, L1))) -> SPLIT_IN_GAA(L1)
   SPLIT_IN_GAA(L1) -> SPLIT2_IN_GAA(L1)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(41) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SPLIT_IN_GAA(L1) -> SPLIT2_IN_GAA(L1)
The graph contains the following edges 1 >= 1


*SPLIT2_IN_GAA(.(X, .(Y, L1))) -> SPLIT_IN_GAA(L1)
The graph contains the following edges 1 > 1


----------------------------------------

(42)
YES

----------------------------------------

(43)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(X, Y, L1, L2, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> U2_GA(X, Y, L1, L2, L4, mergesort_in_ga(L3, L5))
   U2_GA(X, Y, L1, L2, L4, mergesort_out_ga(L3, L5)) -> MERGESORT_IN_GA(L4, L6)
   MERGESORT_IN_GA(.(X, .(Y, L1)), L2) -> U1_GA(X, Y, L1, L2, split2_in_gaa(.(X, .(Y, L1)), L3, L4))
   U1_GA(X, Y, L1, L2, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> MERGESORT_IN_GA(L3, L5)

The TRS R consists of the following rules:

   mergesort_in_ga([], []) -> mergesort_out_ga([], [])
   mergesort_in_ga(.(X, []), .(X, [])) -> mergesort_out_ga(.(X, []), .(X, []))
   mergesort_in_ga(.(X, .(Y, L1)), L2) -> U1_ga(X, Y, L1, L2, split2_in_gaa(.(X, .(Y, L1)), L3, L4))
   split2_in_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3)) -> U8_gaa(X, Y, L1, L2, L3, split_in_gaa(L1, L2, L3))
   split_in_gaa(L1, L2, L3) -> U5_gaa(L1, L2, L3, split0_in_gaa(L1, L2, L3))
   split0_in_gaa([], [], []) -> split0_out_gaa([], [], [])
   U5_gaa(L1, L2, L3, split0_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1, L2, L3) -> U6_gaa(L1, L2, L3, split1_in_gaa(L1, L2, L3))
   split1_in_gaa(.(X, []), .(X, []), []) -> split1_out_gaa(.(X, []), .(X, []), [])
   U6_gaa(L1, L2, L3, split1_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1, L2, L3) -> U7_gaa(L1, L2, L3, split2_in_gaa(L1, L2, L3))
   U7_gaa(L1, L2, L3, split2_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   U8_gaa(X, Y, L1, L2, L3, split_out_gaa(L1, L2, L3)) -> split2_out_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3))
   U1_ga(X, Y, L1, L2, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> U2_ga(X, Y, L1, L2, L4, mergesort_in_ga(L3, L5))
   U2_ga(X, Y, L1, L2, L4, mergesort_out_ga(L3, L5)) -> U3_ga(X, Y, L1, L2, L5, mergesort_in_ga(L4, L6))
   U3_ga(X, Y, L1, L2, L5, mergesort_out_ga(L4, L6)) -> U4_ga(X, Y, L1, L2, merge_in_gga(L5, L6, L2))
   merge_in_gga([], L1, L1) -> merge_out_gga([], L1, L1)
   merge_in_gga(L1, [], L1) -> merge_out_gga(L1, [], L1)
   merge_in_gga(.(X, L1), .(Y, L2), .(X, L3)) -> U9_gga(X, L1, Y, L2, L3, le_in_gg(X, Y))
   le_in_gg(s(X), s(Y)) -> U14_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(Y)) -> le_out_gg(0, s(Y))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   U14_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U9_gga(X, L1, Y, L2, L3, le_out_gg(X, Y)) -> U10_gga(X, L1, Y, L2, L3, merge_in_gga(L1, .(Y, L2), L3))
   merge_in_gga(.(X, L1), .(Y, L2), .(Y, L3)) -> U11_gga(X, L1, Y, L2, L3, gt_in_gg(X, Y))
   gt_in_gg(s(X), s(Y)) -> U13_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), 0) -> gt_out_gg(s(X), 0)
   U13_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))
   U11_gga(X, L1, Y, L2, L3, gt_out_gg(X, Y)) -> U12_gga(X, L1, Y, L2, L3, merge_in_gga(.(X, L1), L2, L3))
   U12_gga(X, L1, Y, L2, L3, merge_out_gga(.(X, L1), L2, L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(Y, L3))
   U10_gga(X, L1, Y, L2, L3, merge_out_gga(L1, .(Y, L2), L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(X, L3))
   U4_ga(X, Y, L1, L2, merge_out_gga(L5, L6, L2)) -> mergesort_out_ga(.(X, .(Y, L1)), L2)

The argument filtering Pi contains the following mapping:
mergesort_in_ga(x1, x2)  =  mergesort_in_ga(x1)

[]  =  []

mergesort_out_ga(x1, x2)  =  mergesort_out_ga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

split2_in_gaa(x1, x2, x3)  =  split2_in_gaa(x1)

U8_gaa(x1, x2, x3, x4, x5, x6)  =  U8_gaa(x1, x2, x3, x6)

split_in_gaa(x1, x2, x3)  =  split_in_gaa(x1)

U5_gaa(x1, x2, x3, x4)  =  U5_gaa(x1, x4)

split0_in_gaa(x1, x2, x3)  =  split0_in_gaa(x1)

split0_out_gaa(x1, x2, x3)  =  split0_out_gaa(x1, x2, x3)

split_out_gaa(x1, x2, x3)  =  split_out_gaa(x1, x2, x3)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

split1_in_gaa(x1, x2, x3)  =  split1_in_gaa(x1)

split1_out_gaa(x1, x2, x3)  =  split1_out_gaa(x1, x2, x3)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

split2_out_gaa(x1, x2, x3)  =  split2_out_gaa(x1, x2, x3)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x1, x2, x3, x5, x6)

U3_ga(x1, x2, x3, x4, x5, x6)  =  U3_ga(x1, x2, x3, x5, x6)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x1, x2, x3, x5)

merge_in_gga(x1, x2, x3)  =  merge_in_gga(x1, x2)

merge_out_gga(x1, x2, x3)  =  merge_out_gga(x1, x2, x3)

U9_gga(x1, x2, x3, x4, x5, x6)  =  U9_gga(x1, x2, x3, x4, x6)

le_in_gg(x1, x2)  =  le_in_gg(x1, x2)

s(x1)  =  s(x1)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

0  =  0

le_out_gg(x1, x2)  =  le_out_gg(x1, x2)

U10_gga(x1, x2, x3, x4, x5, x6)  =  U10_gga(x1, x2, x3, x4, x6)

U11_gga(x1, x2, x3, x4, x5, x6)  =  U11_gga(x1, x2, x3, x4, x6)

gt_in_gg(x1, x2)  =  gt_in_gg(x1, x2)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

gt_out_gg(x1, x2)  =  gt_out_gg(x1, x2)

U12_gga(x1, x2, x3, x4, x5, x6)  =  U12_gga(x1, x2, x3, x4, x6)

MERGESORT_IN_GA(x1, x2)  =  MERGESORT_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x1, x2, x3, x5)

U2_GA(x1, x2, x3, x4, x5, x6)  =  U2_GA(x1, x2, x3, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(44) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(45)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GA(X, Y, L1, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> U2_GA(X, Y, L1, L4, mergesort_in_ga(L3))
   U2_GA(X, Y, L1, L4, mergesort_out_ga(L3, L5)) -> MERGESORT_IN_GA(L4)
   MERGESORT_IN_GA(.(X, .(Y, L1))) -> U1_GA(X, Y, L1, split2_in_gaa(.(X, .(Y, L1))))
   U1_GA(X, Y, L1, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> MERGESORT_IN_GA(L3)

The TRS R consists of the following rules:

   mergesort_in_ga([]) -> mergesort_out_ga([], [])
   mergesort_in_ga(.(X, [])) -> mergesort_out_ga(.(X, []), .(X, []))
   mergesort_in_ga(.(X, .(Y, L1))) -> U1_ga(X, Y, L1, split2_in_gaa(.(X, .(Y, L1))))
   split2_in_gaa(.(X, .(Y, L1))) -> U8_gaa(X, Y, L1, split_in_gaa(L1))
   split_in_gaa(L1) -> U5_gaa(L1, split0_in_gaa(L1))
   split0_in_gaa([]) -> split0_out_gaa([], [], [])
   U5_gaa(L1, split0_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1) -> U6_gaa(L1, split1_in_gaa(L1))
   split1_in_gaa(.(X, [])) -> split1_out_gaa(.(X, []), .(X, []), [])
   U6_gaa(L1, split1_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1) -> U7_gaa(L1, split2_in_gaa(L1))
   U7_gaa(L1, split2_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   U8_gaa(X, Y, L1, split_out_gaa(L1, L2, L3)) -> split2_out_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3))
   U1_ga(X, Y, L1, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> U2_ga(X, Y, L1, L4, mergesort_in_ga(L3))
   U2_ga(X, Y, L1, L4, mergesort_out_ga(L3, L5)) -> U3_ga(X, Y, L1, L5, mergesort_in_ga(L4))
   U3_ga(X, Y, L1, L5, mergesort_out_ga(L4, L6)) -> U4_ga(X, Y, L1, merge_in_gga(L5, L6))
   merge_in_gga([], L1) -> merge_out_gga([], L1, L1)
   merge_in_gga(L1, []) -> merge_out_gga(L1, [], L1)
   merge_in_gga(.(X, L1), .(Y, L2)) -> U9_gga(X, L1, Y, L2, le_in_gg(X, Y))
   le_in_gg(s(X), s(Y)) -> U14_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(Y)) -> le_out_gg(0, s(Y))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   U14_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U9_gga(X, L1, Y, L2, le_out_gg(X, Y)) -> U10_gga(X, L1, Y, L2, merge_in_gga(L1, .(Y, L2)))
   merge_in_gga(.(X, L1), .(Y, L2)) -> U11_gga(X, L1, Y, L2, gt_in_gg(X, Y))
   gt_in_gg(s(X), s(Y)) -> U13_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), 0) -> gt_out_gg(s(X), 0)
   U13_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))
   U11_gga(X, L1, Y, L2, gt_out_gg(X, Y)) -> U12_gga(X, L1, Y, L2, merge_in_gga(.(X, L1), L2))
   U12_gga(X, L1, Y, L2, merge_out_gga(.(X, L1), L2, L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(Y, L3))
   U10_gga(X, L1, Y, L2, merge_out_gga(L1, .(Y, L2), L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(X, L3))
   U4_ga(X, Y, L1, merge_out_gga(L5, L6, L2)) -> mergesort_out_ga(.(X, .(Y, L1)), L2)

The set Q consists of the following terms:

   mergesort_in_ga(x0)
   split2_in_gaa(x0)
   split_in_gaa(x0)
   split0_in_gaa(x0)
   U5_gaa(x0, x1)
   split1_in_gaa(x0)
   U6_gaa(x0, x1)
   U7_gaa(x0, x1)
   U8_gaa(x0, x1, x2, x3)
   U1_ga(x0, x1, x2, x3)
   U2_ga(x0, x1, x2, x3, x4)
   U3_ga(x0, x1, x2, x3, x4)
   merge_in_gga(x0, x1)
   le_in_gg(x0, x1)
   U14_gg(x0, x1, x2)
   U9_gga(x0, x1, x2, x3, x4)
   gt_in_gg(x0, x1)
   U13_gg(x0, x1, x2)
   U11_gga(x0, x1, x2, x3, x4)
   U12_gga(x0, x1, x2, x3, x4)
   U10_gga(x0, x1, x2, x3, x4)
   U4_ga(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(46) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.

Strictly oriented dependency pairs:

   U1_GA(X, Y, L1, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> U2_GA(X, Y, L1, L4, mergesort_in_ga(L3))
   U2_GA(X, Y, L1, L4, mergesort_out_ga(L3, L5)) -> MERGESORT_IN_GA(L4)
   MERGESORT_IN_GA(.(X, .(Y, L1))) -> U1_GA(X, Y, L1, split2_in_gaa(.(X, .(Y, L1))))
   U1_GA(X, Y, L1, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> MERGESORT_IN_GA(L3)


Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 2 + 2*x_2
   POL(0) = 2
   POL(MERGESORT_IN_GA(x_1)) = 1 + 2*x_1
   POL(U10_gga(x_1, x_2, x_3, x_4, x_5)) = 1 + x_4
   POL(U11_gga(x_1, x_2, x_3, x_4, x_5)) = 1
   POL(U12_gga(x_1, x_2, x_3, x_4, x_5)) = 1
   POL(U13_gg(x_1, x_2, x_3)) = 0
   POL(U14_gg(x_1, x_2, x_3)) = 0
   POL(U1_GA(x_1, x_2, x_3, x_4)) = 2*x_4
   POL(U1_ga(x_1, x_2, x_3, x_4)) = 1 + x_4
   POL(U2_GA(x_1, x_2, x_3, x_4, x_5)) = 2 + 2*x_4
   POL(U2_ga(x_1, x_2, x_3, x_4, x_5)) = 2
   POL(U3_ga(x_1, x_2, x_3, x_4, x_5)) = 1
   POL(U4_ga(x_1, x_2, x_3, x_4)) = 0
   POL(U5_gaa(x_1, x_2)) = 1 + x_2
   POL(U6_gaa(x_1, x_2)) = x_2
   POL(U7_gaa(x_1, x_2)) = 2*x_2
   POL(U8_gaa(x_1, x_2, x_3, x_4)) = 2 + 2*x_4
   POL(U9_gga(x_1, x_2, x_3, x_4, x_5)) = 2 + 2*x_4
   POL([]) = 0
   POL(gt_in_gg(x_1, x_2)) = 0
   POL(gt_out_gg(x_1, x_2)) = 0
   POL(le_in_gg(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(le_out_gg(x_1, x_2)) = 0
   POL(merge_in_gga(x_1, x_2)) = 2 + 2*x_2
   POL(merge_out_gga(x_1, x_2, x_3)) = 0
   POL(mergesort_in_ga(x_1)) = 1 + 2*x_1
   POL(mergesort_out_ga(x_1, x_2)) = 0
   POL(s(x_1)) = 2
   POL(split0_in_gaa(x_1)) = 1
   POL(split0_out_gaa(x_1, x_2, x_3)) = 1 + 2*x_2 + x_3
   POL(split1_in_gaa(x_1)) = 2 + 2*x_1
   POL(split1_out_gaa(x_1, x_2, x_3)) = 2 + 2*x_2 + x_3
   POL(split2_in_gaa(x_1)) = x_1
   POL(split2_out_gaa(x_1, x_2, x_3)) = 2 + x_2 + x_3
   POL(split_in_gaa(x_1)) = 2 + 2*x_1
   POL(split_out_gaa(x_1, x_2, x_3)) = 2 + 2*x_2 + x_3


----------------------------------------

(47)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   mergesort_in_ga([]) -> mergesort_out_ga([], [])
   mergesort_in_ga(.(X, [])) -> mergesort_out_ga(.(X, []), .(X, []))
   mergesort_in_ga(.(X, .(Y, L1))) -> U1_ga(X, Y, L1, split2_in_gaa(.(X, .(Y, L1))))
   split2_in_gaa(.(X, .(Y, L1))) -> U8_gaa(X, Y, L1, split_in_gaa(L1))
   split_in_gaa(L1) -> U5_gaa(L1, split0_in_gaa(L1))
   split0_in_gaa([]) -> split0_out_gaa([], [], [])
   U5_gaa(L1, split0_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1) -> U6_gaa(L1, split1_in_gaa(L1))
   split1_in_gaa(.(X, [])) -> split1_out_gaa(.(X, []), .(X, []), [])
   U6_gaa(L1, split1_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   split_in_gaa(L1) -> U7_gaa(L1, split2_in_gaa(L1))
   U7_gaa(L1, split2_out_gaa(L1, L2, L3)) -> split_out_gaa(L1, L2, L3)
   U8_gaa(X, Y, L1, split_out_gaa(L1, L2, L3)) -> split2_out_gaa(.(X, .(Y, L1)), .(X, L2), .(Y, L3))
   U1_ga(X, Y, L1, split2_out_gaa(.(X, .(Y, L1)), L3, L4)) -> U2_ga(X, Y, L1, L4, mergesort_in_ga(L3))
   U2_ga(X, Y, L1, L4, mergesort_out_ga(L3, L5)) -> U3_ga(X, Y, L1, L5, mergesort_in_ga(L4))
   U3_ga(X, Y, L1, L5, mergesort_out_ga(L4, L6)) -> U4_ga(X, Y, L1, merge_in_gga(L5, L6))
   merge_in_gga([], L1) -> merge_out_gga([], L1, L1)
   merge_in_gga(L1, []) -> merge_out_gga(L1, [], L1)
   merge_in_gga(.(X, L1), .(Y, L2)) -> U9_gga(X, L1, Y, L2, le_in_gg(X, Y))
   le_in_gg(s(X), s(Y)) -> U14_gg(X, Y, le_in_gg(X, Y))
   le_in_gg(0, s(Y)) -> le_out_gg(0, s(Y))
   le_in_gg(0, 0) -> le_out_gg(0, 0)
   U14_gg(X, Y, le_out_gg(X, Y)) -> le_out_gg(s(X), s(Y))
   U9_gga(X, L1, Y, L2, le_out_gg(X, Y)) -> U10_gga(X, L1, Y, L2, merge_in_gga(L1, .(Y, L2)))
   merge_in_gga(.(X, L1), .(Y, L2)) -> U11_gga(X, L1, Y, L2, gt_in_gg(X, Y))
   gt_in_gg(s(X), s(Y)) -> U13_gg(X, Y, gt_in_gg(X, Y))
   gt_in_gg(s(X), 0) -> gt_out_gg(s(X), 0)
   U13_gg(X, Y, gt_out_gg(X, Y)) -> gt_out_gg(s(X), s(Y))
   U11_gga(X, L1, Y, L2, gt_out_gg(X, Y)) -> U12_gga(X, L1, Y, L2, merge_in_gga(.(X, L1), L2))
   U12_gga(X, L1, Y, L2, merge_out_gga(.(X, L1), L2, L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(Y, L3))
   U10_gga(X, L1, Y, L2, merge_out_gga(L1, .(Y, L2), L3)) -> merge_out_gga(.(X, L1), .(Y, L2), .(X, L3))
   U4_ga(X, Y, L1, merge_out_gga(L5, L6, L2)) -> mergesort_out_ga(.(X, .(Y, L1)), L2)

The set Q consists of the following terms:

   mergesort_in_ga(x0)
   split2_in_gaa(x0)
   split_in_gaa(x0)
   split0_in_gaa(x0)
   U5_gaa(x0, x1)
   split1_in_gaa(x0)
   U6_gaa(x0, x1)
   U7_gaa(x0, x1)
   U8_gaa(x0, x1, x2, x3)
   U1_ga(x0, x1, x2, x3)
   U2_ga(x0, x1, x2, x3, x4)
   U3_ga(x0, x1, x2, x3, x4)
   merge_in_gga(x0, x1)
   le_in_gg(x0, x1)
   U14_gg(x0, x1, x2)
   U9_gga(x0, x1, x2, x3, x4)
   gt_in_gg(x0, x1)
   U13_gg(x0, x1, x2)
   U11_gga(x0, x1, x2, x3, x4)
   U12_gga(x0, x1, x2, x3, x4)
   U10_gga(x0, x1, x2, x3, x4)
   U4_ga(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(48) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(49)
YES
