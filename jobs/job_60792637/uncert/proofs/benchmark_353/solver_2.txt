YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/SgfRC.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

ackerman(g,g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) PiDPToQDPProof [SOUND, 0 ms]
(8) QDP
(9) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
Clauses:

ackerman(0, N, s(N)).
ackerman(s(M), 0, Res) :- ackerman(M, s(0), Res).
ackerman(s(M), s(N), Res) :- ','(ackerman(s(M), N, Res1), ackerman(M, Res1, Res)).


Query: ackerman(g,g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

ackerman_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   ackerman_in_gga(0, N, s(N)) -> ackerman_out_gga(0, N, s(N))
   ackerman_in_gga(s(M), 0, Res) -> U1_gga(M, Res, ackerman_in_gga(M, s(0), Res))
   ackerman_in_gga(s(M), s(N), Res) -> U2_gga(M, N, Res, ackerman_in_gga(s(M), N, Res1))
   U2_gga(M, N, Res, ackerman_out_gga(s(M), N, Res1)) -> U3_gga(M, N, Res, ackerman_in_gga(M, Res1, Res))
   U3_gga(M, N, Res, ackerman_out_gga(M, Res1, Res)) -> ackerman_out_gga(s(M), s(N), Res)
   U1_gga(M, Res, ackerman_out_gga(M, s(0), Res)) -> ackerman_out_gga(s(M), 0, Res)

The argument filtering Pi contains the following mapping:
ackerman_in_gga(x1, x2, x3)  =  ackerman_in_gga(x1, x2)

0  =  0

ackerman_out_gga(x1, x2, x3)  =  ackerman_out_gga(x3)

s(x1)  =  s(x1)

U1_gga(x1, x2, x3)  =  U1_gga(x3)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x1, x4)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   ackerman_in_gga(0, N, s(N)) -> ackerman_out_gga(0, N, s(N))
   ackerman_in_gga(s(M), 0, Res) -> U1_gga(M, Res, ackerman_in_gga(M, s(0), Res))
   ackerman_in_gga(s(M), s(N), Res) -> U2_gga(M, N, Res, ackerman_in_gga(s(M), N, Res1))
   U2_gga(M, N, Res, ackerman_out_gga(s(M), N, Res1)) -> U3_gga(M, N, Res, ackerman_in_gga(M, Res1, Res))
   U3_gga(M, N, Res, ackerman_out_gga(M, Res1, Res)) -> ackerman_out_gga(s(M), s(N), Res)
   U1_gga(M, Res, ackerman_out_gga(M, s(0), Res)) -> ackerman_out_gga(s(M), 0, Res)

The argument filtering Pi contains the following mapping:
ackerman_in_gga(x1, x2, x3)  =  ackerman_in_gga(x1, x2)

0  =  0

ackerman_out_gga(x1, x2, x3)  =  ackerman_out_gga(x3)

s(x1)  =  s(x1)

U1_gga(x1, x2, x3)  =  U1_gga(x3)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x1, x4)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x4)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   ACKERMAN_IN_GGA(s(M), 0, Res) -> U1_GGA(M, Res, ackerman_in_gga(M, s(0), Res))
   ACKERMAN_IN_GGA(s(M), 0, Res) -> ACKERMAN_IN_GGA(M, s(0), Res)
   ACKERMAN_IN_GGA(s(M), s(N), Res) -> U2_GGA(M, N, Res, ackerman_in_gga(s(M), N, Res1))
   ACKERMAN_IN_GGA(s(M), s(N), Res) -> ACKERMAN_IN_GGA(s(M), N, Res1)
   U2_GGA(M, N, Res, ackerman_out_gga(s(M), N, Res1)) -> U3_GGA(M, N, Res, ackerman_in_gga(M, Res1, Res))
   U2_GGA(M, N, Res, ackerman_out_gga(s(M), N, Res1)) -> ACKERMAN_IN_GGA(M, Res1, Res)

The TRS R consists of the following rules:

   ackerman_in_gga(0, N, s(N)) -> ackerman_out_gga(0, N, s(N))
   ackerman_in_gga(s(M), 0, Res) -> U1_gga(M, Res, ackerman_in_gga(M, s(0), Res))
   ackerman_in_gga(s(M), s(N), Res) -> U2_gga(M, N, Res, ackerman_in_gga(s(M), N, Res1))
   U2_gga(M, N, Res, ackerman_out_gga(s(M), N, Res1)) -> U3_gga(M, N, Res, ackerman_in_gga(M, Res1, Res))
   U3_gga(M, N, Res, ackerman_out_gga(M, Res1, Res)) -> ackerman_out_gga(s(M), s(N), Res)
   U1_gga(M, Res, ackerman_out_gga(M, s(0), Res)) -> ackerman_out_gga(s(M), 0, Res)

The argument filtering Pi contains the following mapping:
ackerman_in_gga(x1, x2, x3)  =  ackerman_in_gga(x1, x2)

0  =  0

ackerman_out_gga(x1, x2, x3)  =  ackerman_out_gga(x3)

s(x1)  =  s(x1)

U1_gga(x1, x2, x3)  =  U1_gga(x3)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x1, x4)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x4)

ACKERMAN_IN_GGA(x1, x2, x3)  =  ACKERMAN_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3)  =  U1_GGA(x3)

U2_GGA(x1, x2, x3, x4)  =  U2_GGA(x1, x4)

U3_GGA(x1, x2, x3, x4)  =  U3_GGA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ACKERMAN_IN_GGA(s(M), 0, Res) -> U1_GGA(M, Res, ackerman_in_gga(M, s(0), Res))
   ACKERMAN_IN_GGA(s(M), 0, Res) -> ACKERMAN_IN_GGA(M, s(0), Res)
   ACKERMAN_IN_GGA(s(M), s(N), Res) -> U2_GGA(M, N, Res, ackerman_in_gga(s(M), N, Res1))
   ACKERMAN_IN_GGA(s(M), s(N), Res) -> ACKERMAN_IN_GGA(s(M), N, Res1)
   U2_GGA(M, N, Res, ackerman_out_gga(s(M), N, Res1)) -> U3_GGA(M, N, Res, ackerman_in_gga(M, Res1, Res))
   U2_GGA(M, N, Res, ackerman_out_gga(s(M), N, Res1)) -> ACKERMAN_IN_GGA(M, Res1, Res)

The TRS R consists of the following rules:

   ackerman_in_gga(0, N, s(N)) -> ackerman_out_gga(0, N, s(N))
   ackerman_in_gga(s(M), 0, Res) -> U1_gga(M, Res, ackerman_in_gga(M, s(0), Res))
   ackerman_in_gga(s(M), s(N), Res) -> U2_gga(M, N, Res, ackerman_in_gga(s(M), N, Res1))
   U2_gga(M, N, Res, ackerman_out_gga(s(M), N, Res1)) -> U3_gga(M, N, Res, ackerman_in_gga(M, Res1, Res))
   U3_gga(M, N, Res, ackerman_out_gga(M, Res1, Res)) -> ackerman_out_gga(s(M), s(N), Res)
   U1_gga(M, Res, ackerman_out_gga(M, s(0), Res)) -> ackerman_out_gga(s(M), 0, Res)

The argument filtering Pi contains the following mapping:
ackerman_in_gga(x1, x2, x3)  =  ackerman_in_gga(x1, x2)

0  =  0

ackerman_out_gga(x1, x2, x3)  =  ackerman_out_gga(x3)

s(x1)  =  s(x1)

U1_gga(x1, x2, x3)  =  U1_gga(x3)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x1, x4)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x4)

ACKERMAN_IN_GGA(x1, x2, x3)  =  ACKERMAN_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3)  =  U1_GGA(x3)

U2_GGA(x1, x2, x3, x4)  =  U2_GGA(x1, x4)

U3_GGA(x1, x2, x3, x4)  =  U3_GGA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ACKERMAN_IN_GGA(s(M), 0, Res) -> ACKERMAN_IN_GGA(M, s(0), Res)
   ACKERMAN_IN_GGA(s(M), s(N), Res) -> U2_GGA(M, N, Res, ackerman_in_gga(s(M), N, Res1))
   U2_GGA(M, N, Res, ackerman_out_gga(s(M), N, Res1)) -> ACKERMAN_IN_GGA(M, Res1, Res)
   ACKERMAN_IN_GGA(s(M), s(N), Res) -> ACKERMAN_IN_GGA(s(M), N, Res1)

The TRS R consists of the following rules:

   ackerman_in_gga(0, N, s(N)) -> ackerman_out_gga(0, N, s(N))
   ackerman_in_gga(s(M), 0, Res) -> U1_gga(M, Res, ackerman_in_gga(M, s(0), Res))
   ackerman_in_gga(s(M), s(N), Res) -> U2_gga(M, N, Res, ackerman_in_gga(s(M), N, Res1))
   U2_gga(M, N, Res, ackerman_out_gga(s(M), N, Res1)) -> U3_gga(M, N, Res, ackerman_in_gga(M, Res1, Res))
   U3_gga(M, N, Res, ackerman_out_gga(M, Res1, Res)) -> ackerman_out_gga(s(M), s(N), Res)
   U1_gga(M, Res, ackerman_out_gga(M, s(0), Res)) -> ackerman_out_gga(s(M), 0, Res)

The argument filtering Pi contains the following mapping:
ackerman_in_gga(x1, x2, x3)  =  ackerman_in_gga(x1, x2)

0  =  0

ackerman_out_gga(x1, x2, x3)  =  ackerman_out_gga(x3)

s(x1)  =  s(x1)

U1_gga(x1, x2, x3)  =  U1_gga(x3)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x1, x4)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x4)

ACKERMAN_IN_GGA(x1, x2, x3)  =  ACKERMAN_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4)  =  U2_GGA(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACKERMAN_IN_GGA(s(M), 0) -> ACKERMAN_IN_GGA(M, s(0))
   ACKERMAN_IN_GGA(s(M), s(N)) -> U2_GGA(M, ackerman_in_gga(s(M), N))
   U2_GGA(M, ackerman_out_gga(Res1)) -> ACKERMAN_IN_GGA(M, Res1)
   ACKERMAN_IN_GGA(s(M), s(N)) -> ACKERMAN_IN_GGA(s(M), N)

The TRS R consists of the following rules:

   ackerman_in_gga(0, N) -> ackerman_out_gga(s(N))
   ackerman_in_gga(s(M), 0) -> U1_gga(ackerman_in_gga(M, s(0)))
   ackerman_in_gga(s(M), s(N)) -> U2_gga(M, ackerman_in_gga(s(M), N))
   U2_gga(M, ackerman_out_gga(Res1)) -> U3_gga(ackerman_in_gga(M, Res1))
   U3_gga(ackerman_out_gga(Res)) -> ackerman_out_gga(Res)
   U1_gga(ackerman_out_gga(Res)) -> ackerman_out_gga(Res)

The set Q consists of the following terms:

   ackerman_in_gga(x0, x1)
   U2_gga(x0, x1)
   U3_gga(x0)
   U1_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ACKERMAN_IN_GGA(s(M), s(N)) -> ACKERMAN_IN_GGA(s(M), N)
The graph contains the following edges 1 >= 1, 2 > 2


*ACKERMAN_IN_GGA(s(M), s(N)) -> U2_GGA(M, ackerman_in_gga(s(M), N))
The graph contains the following edges 1 > 1


*U2_GGA(M, ackerman_out_gga(Res1)) -> ACKERMAN_IN_GGA(M, Res1)
The graph contains the following edges 1 >= 1, 2 > 2


*ACKERMAN_IN_GGA(s(M), 0) -> ACKERMAN_IN_GGA(M, s(0))
The graph contains the following edges 1 > 1


----------------------------------------

(10)
YES
