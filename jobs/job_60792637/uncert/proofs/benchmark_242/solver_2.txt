YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/IPz3t.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

fold(g,g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(2) TRIPLES
(3) TriplesToPiDPProof [SOUND, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) TRUE


----------------------------------------

(0)
Obligation:
Clauses:

fold(X, .(Y, Ys), Z) :- ','(myop(X, Y, V), fold(V, Ys, Z)).
fold(X, [], X).
myop(a, b, c).


Query: fold(g,g,a)
----------------------------------------

(1) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(fold X (. Y Ys) Z)",
                "(',' (myop X Y V) (fold V Ys Z))"
            ],
            [
                "(fold X ([]) X)",
                null
            ],
            [
                "(myop (a) (b) (c))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "77": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (myop T8 T9 X9) (fold X9 T10 T12))"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(fold T8 (. T9 T10) T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T8",
                        "T9",
                        "T10"
                    ],
                    "free": ["X9"],
                    "exprvars": []
                }
            },
            "78": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(fold T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(fold T1 T2 T3)",
                        "(fold X5 (. X6 X7) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T1",
                        "T2"
                    ],
                    "free": [
                        "X5",
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "79": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(',' (myop T8 T9 X9) (fold X9 T10 T12))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(fold T8 (. T9 T10) T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T8",
                        "T9",
                        "T10"
                    ],
                    "free": ["X9"],
                    "exprvars": []
                }
            },
            "160": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "161": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "162": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "163": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "156": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(fold T8 (. T9 T10) T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T8",
                        "T9",
                        "T10"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(fold T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T1",
                        "T2"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(fold T1 T2 T3)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(fold T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T1",
                        "T2"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "80": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(',' (myop T8 T9 X9) (fold X9 T10 T12))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T8",
                        "T9",
                        "T10"
                    ],
                    "free": ["X9"],
                    "exprvars": []
                }
            },
            "81": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(fold T8 (. T9 T10) T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T8",
                        "T9",
                        "T10"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "82": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(fold (c) T10 T12)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": [],
                    "exprvars": []
                }
            },
            "83": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 77,
                "label": "EVAL with clause\nfold(X5, .(X6, X7), X8) :- ','(myop(X5, X6, X9), fold(X9, X7, X8)).\nand substitutionT1 -> T8,\nX5 -> T8,\nX6 -> T9,\nX7 -> T10,\nT2 -> .(T9, T10),\nT3 -> T12,\nX8 -> T12,\nT11 -> T12"
            },
            {
                "from": 4,
                "to": 78,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 77,
                "to": 79,
                "label": "CASE"
            },
            {
                "from": 78,
                "to": 161,
                "label": "EVAL with clause\nfold(X17, [], X17).\nand substitutionT1 -> T18,\nX17 -> T18,\nT2 -> [],\nT3 -> T18"
            },
            {
                "from": 78,
                "to": 162,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 79,
                "to": 80,
                "label": "PARALLEL"
            },
            {
                "from": 79,
                "to": 81,
                "label": "PARALLEL"
            },
            {
                "from": 80,
                "to": 82,
                "label": "EVAL with clause\nmyop(a, b, c).\nand substitutionT8 -> a,\nT9 -> b,\nX9 -> c"
            },
            {
                "from": 80,
                "to": 83,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 81,
                "to": 156,
                "label": "FAILURE"
            },
            {
                "from": 82,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> c\nT2 -> T10\nT3 -> T12"
            },
            {
                "from": 156,
                "to": 160,
                "label": "BACKTRACK\nfor clause: fold(X, [], X)because of non-unification"
            },
            {
                "from": 161,
                "to": 163,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Triples:

foldA(a, .(b, X1), X2) :- foldA(c, X1, X2).

Clauses:

foldcA(a, .(b, X1), X2) :- foldcA(c, X1, X2).
foldcA(X1, [], X1).

Afs:

foldA(x1, x2, x3)  =  foldA(x1, x2)


----------------------------------------

(3) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

foldA_in_3: (b,b,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   FOLDA_IN_GGA(a, .(b, X1), X2) -> U1_GGA(X1, X2, foldA_in_gga(c, X1, X2))
   FOLDA_IN_GGA(a, .(b, X1), X2) -> FOLDA_IN_GGA(c, X1, X2)

R is empty.
The argument filtering Pi contains the following mapping:
foldA_in_gga(x1, x2, x3)  =  foldA_in_gga(x1, x2)

a  =  a

.(x1, x2)  =  .(x1, x2)

b  =  b

c  =  c

FOLDA_IN_GGA(x1, x2, x3)  =  FOLDA_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3)  =  U1_GGA(x1, x3)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FOLDA_IN_GGA(a, .(b, X1), X2) -> U1_GGA(X1, X2, foldA_in_gga(c, X1, X2))
   FOLDA_IN_GGA(a, .(b, X1), X2) -> FOLDA_IN_GGA(c, X1, X2)

R is empty.
The argument filtering Pi contains the following mapping:
foldA_in_gga(x1, x2, x3)  =  foldA_in_gga(x1, x2)

a  =  a

.(x1, x2)  =  .(x1, x2)

b  =  b

c  =  c

FOLDA_IN_GGA(x1, x2, x3)  =  FOLDA_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3)  =  U1_GGA(x1, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(6)
TRUE
