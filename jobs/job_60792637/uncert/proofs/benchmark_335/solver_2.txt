YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/e3JxN.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

normal(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 19 ms]
        (20) QDP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
Clauses:

normal(F, N) :- ','(rewrite(F, F1), normal(F1, N)).
normal(F, F).
rewrite(op(op(A, B), C), op(A, op(B, C))).
rewrite(op(A, op(B, C)), op(A, L)) :- rewrite(op(B, C), L).


Query: normal(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

normal_in_2: (b,f)

rewrite_in_2: (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   normal_in_ga(F, N) -> U1_ga(F, N, rewrite_in_ga(F, F1))
   rewrite_in_ga(op(op(A, B), C), op(A, op(B, C))) -> rewrite_out_ga(op(op(A, B), C), op(A, op(B, C)))
   rewrite_in_ga(op(A, op(B, C)), op(A, L)) -> U3_ga(A, B, C, L, rewrite_in_ga(op(B, C), L))
   U3_ga(A, B, C, L, rewrite_out_ga(op(B, C), L)) -> rewrite_out_ga(op(A, op(B, C)), op(A, L))
   U1_ga(F, N, rewrite_out_ga(F, F1)) -> U2_ga(F, N, normal_in_ga(F1, N))
   normal_in_ga(F, F) -> normal_out_ga(F, F)
   U2_ga(F, N, normal_out_ga(F1, N)) -> normal_out_ga(F, N)

The argument filtering Pi contains the following mapping:
normal_in_ga(x1, x2)  =  normal_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

rewrite_in_ga(x1, x2)  =  rewrite_in_ga(x1)

op(x1, x2)  =  op(x1, x2)

rewrite_out_ga(x1, x2)  =  rewrite_out_ga(x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x5)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

normal_out_ga(x1, x2)  =  normal_out_ga(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   normal_in_ga(F, N) -> U1_ga(F, N, rewrite_in_ga(F, F1))
   rewrite_in_ga(op(op(A, B), C), op(A, op(B, C))) -> rewrite_out_ga(op(op(A, B), C), op(A, op(B, C)))
   rewrite_in_ga(op(A, op(B, C)), op(A, L)) -> U3_ga(A, B, C, L, rewrite_in_ga(op(B, C), L))
   U3_ga(A, B, C, L, rewrite_out_ga(op(B, C), L)) -> rewrite_out_ga(op(A, op(B, C)), op(A, L))
   U1_ga(F, N, rewrite_out_ga(F, F1)) -> U2_ga(F, N, normal_in_ga(F1, N))
   normal_in_ga(F, F) -> normal_out_ga(F, F)
   U2_ga(F, N, normal_out_ga(F1, N)) -> normal_out_ga(F, N)

The argument filtering Pi contains the following mapping:
normal_in_ga(x1, x2)  =  normal_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

rewrite_in_ga(x1, x2)  =  rewrite_in_ga(x1)

op(x1, x2)  =  op(x1, x2)

rewrite_out_ga(x1, x2)  =  rewrite_out_ga(x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x5)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

normal_out_ga(x1, x2)  =  normal_out_ga(x2)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   NORMAL_IN_GA(F, N) -> U1_GA(F, N, rewrite_in_ga(F, F1))
   NORMAL_IN_GA(F, N) -> REWRITE_IN_GA(F, F1)
   REWRITE_IN_GA(op(A, op(B, C)), op(A, L)) -> U3_GA(A, B, C, L, rewrite_in_ga(op(B, C), L))
   REWRITE_IN_GA(op(A, op(B, C)), op(A, L)) -> REWRITE_IN_GA(op(B, C), L)
   U1_GA(F, N, rewrite_out_ga(F, F1)) -> U2_GA(F, N, normal_in_ga(F1, N))
   U1_GA(F, N, rewrite_out_ga(F, F1)) -> NORMAL_IN_GA(F1, N)

The TRS R consists of the following rules:

   normal_in_ga(F, N) -> U1_ga(F, N, rewrite_in_ga(F, F1))
   rewrite_in_ga(op(op(A, B), C), op(A, op(B, C))) -> rewrite_out_ga(op(op(A, B), C), op(A, op(B, C)))
   rewrite_in_ga(op(A, op(B, C)), op(A, L)) -> U3_ga(A, B, C, L, rewrite_in_ga(op(B, C), L))
   U3_ga(A, B, C, L, rewrite_out_ga(op(B, C), L)) -> rewrite_out_ga(op(A, op(B, C)), op(A, L))
   U1_ga(F, N, rewrite_out_ga(F, F1)) -> U2_ga(F, N, normal_in_ga(F1, N))
   normal_in_ga(F, F) -> normal_out_ga(F, F)
   U2_ga(F, N, normal_out_ga(F1, N)) -> normal_out_ga(F, N)

The argument filtering Pi contains the following mapping:
normal_in_ga(x1, x2)  =  normal_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

rewrite_in_ga(x1, x2)  =  rewrite_in_ga(x1)

op(x1, x2)  =  op(x1, x2)

rewrite_out_ga(x1, x2)  =  rewrite_out_ga(x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x5)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

normal_out_ga(x1, x2)  =  normal_out_ga(x2)

NORMAL_IN_GA(x1, x2)  =  NORMAL_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

REWRITE_IN_GA(x1, x2)  =  REWRITE_IN_GA(x1)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x1, x5)

U2_GA(x1, x2, x3)  =  U2_GA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   NORMAL_IN_GA(F, N) -> U1_GA(F, N, rewrite_in_ga(F, F1))
   NORMAL_IN_GA(F, N) -> REWRITE_IN_GA(F, F1)
   REWRITE_IN_GA(op(A, op(B, C)), op(A, L)) -> U3_GA(A, B, C, L, rewrite_in_ga(op(B, C), L))
   REWRITE_IN_GA(op(A, op(B, C)), op(A, L)) -> REWRITE_IN_GA(op(B, C), L)
   U1_GA(F, N, rewrite_out_ga(F, F1)) -> U2_GA(F, N, normal_in_ga(F1, N))
   U1_GA(F, N, rewrite_out_ga(F, F1)) -> NORMAL_IN_GA(F1, N)

The TRS R consists of the following rules:

   normal_in_ga(F, N) -> U1_ga(F, N, rewrite_in_ga(F, F1))
   rewrite_in_ga(op(op(A, B), C), op(A, op(B, C))) -> rewrite_out_ga(op(op(A, B), C), op(A, op(B, C)))
   rewrite_in_ga(op(A, op(B, C)), op(A, L)) -> U3_ga(A, B, C, L, rewrite_in_ga(op(B, C), L))
   U3_ga(A, B, C, L, rewrite_out_ga(op(B, C), L)) -> rewrite_out_ga(op(A, op(B, C)), op(A, L))
   U1_ga(F, N, rewrite_out_ga(F, F1)) -> U2_ga(F, N, normal_in_ga(F1, N))
   normal_in_ga(F, F) -> normal_out_ga(F, F)
   U2_ga(F, N, normal_out_ga(F1, N)) -> normal_out_ga(F, N)

The argument filtering Pi contains the following mapping:
normal_in_ga(x1, x2)  =  normal_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

rewrite_in_ga(x1, x2)  =  rewrite_in_ga(x1)

op(x1, x2)  =  op(x1, x2)

rewrite_out_ga(x1, x2)  =  rewrite_out_ga(x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x5)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

normal_out_ga(x1, x2)  =  normal_out_ga(x2)

NORMAL_IN_GA(x1, x2)  =  NORMAL_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

REWRITE_IN_GA(x1, x2)  =  REWRITE_IN_GA(x1)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x1, x5)

U2_GA(x1, x2, x3)  =  U2_GA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REWRITE_IN_GA(op(A, op(B, C)), op(A, L)) -> REWRITE_IN_GA(op(B, C), L)

The TRS R consists of the following rules:

   normal_in_ga(F, N) -> U1_ga(F, N, rewrite_in_ga(F, F1))
   rewrite_in_ga(op(op(A, B), C), op(A, op(B, C))) -> rewrite_out_ga(op(op(A, B), C), op(A, op(B, C)))
   rewrite_in_ga(op(A, op(B, C)), op(A, L)) -> U3_ga(A, B, C, L, rewrite_in_ga(op(B, C), L))
   U3_ga(A, B, C, L, rewrite_out_ga(op(B, C), L)) -> rewrite_out_ga(op(A, op(B, C)), op(A, L))
   U1_ga(F, N, rewrite_out_ga(F, F1)) -> U2_ga(F, N, normal_in_ga(F1, N))
   normal_in_ga(F, F) -> normal_out_ga(F, F)
   U2_ga(F, N, normal_out_ga(F1, N)) -> normal_out_ga(F, N)

The argument filtering Pi contains the following mapping:
normal_in_ga(x1, x2)  =  normal_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

rewrite_in_ga(x1, x2)  =  rewrite_in_ga(x1)

op(x1, x2)  =  op(x1, x2)

rewrite_out_ga(x1, x2)  =  rewrite_out_ga(x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x5)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

normal_out_ga(x1, x2)  =  normal_out_ga(x2)

REWRITE_IN_GA(x1, x2)  =  REWRITE_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REWRITE_IN_GA(op(A, op(B, C)), op(A, L)) -> REWRITE_IN_GA(op(B, C), L)

R is empty.
The argument filtering Pi contains the following mapping:
op(x1, x2)  =  op(x1, x2)

REWRITE_IN_GA(x1, x2)  =  REWRITE_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REWRITE_IN_GA(op(A, op(B, C))) -> REWRITE_IN_GA(op(B, C))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*REWRITE_IN_GA(op(A, op(B, C))) -> REWRITE_IN_GA(op(B, C))
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(F, N, rewrite_out_ga(F, F1)) -> NORMAL_IN_GA(F1, N)
   NORMAL_IN_GA(F, N) -> U1_GA(F, N, rewrite_in_ga(F, F1))

The TRS R consists of the following rules:

   normal_in_ga(F, N) -> U1_ga(F, N, rewrite_in_ga(F, F1))
   rewrite_in_ga(op(op(A, B), C), op(A, op(B, C))) -> rewrite_out_ga(op(op(A, B), C), op(A, op(B, C)))
   rewrite_in_ga(op(A, op(B, C)), op(A, L)) -> U3_ga(A, B, C, L, rewrite_in_ga(op(B, C), L))
   U3_ga(A, B, C, L, rewrite_out_ga(op(B, C), L)) -> rewrite_out_ga(op(A, op(B, C)), op(A, L))
   U1_ga(F, N, rewrite_out_ga(F, F1)) -> U2_ga(F, N, normal_in_ga(F1, N))
   normal_in_ga(F, F) -> normal_out_ga(F, F)
   U2_ga(F, N, normal_out_ga(F1, N)) -> normal_out_ga(F, N)

The argument filtering Pi contains the following mapping:
normal_in_ga(x1, x2)  =  normal_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

rewrite_in_ga(x1, x2)  =  rewrite_in_ga(x1)

op(x1, x2)  =  op(x1, x2)

rewrite_out_ga(x1, x2)  =  rewrite_out_ga(x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x5)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

normal_out_ga(x1, x2)  =  normal_out_ga(x2)

NORMAL_IN_GA(x1, x2)  =  NORMAL_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(F, N, rewrite_out_ga(F, F1)) -> NORMAL_IN_GA(F1, N)
   NORMAL_IN_GA(F, N) -> U1_GA(F, N, rewrite_in_ga(F, F1))

The TRS R consists of the following rules:

   rewrite_in_ga(op(op(A, B), C), op(A, op(B, C))) -> rewrite_out_ga(op(op(A, B), C), op(A, op(B, C)))
   rewrite_in_ga(op(A, op(B, C)), op(A, L)) -> U3_ga(A, B, C, L, rewrite_in_ga(op(B, C), L))
   U3_ga(A, B, C, L, rewrite_out_ga(op(B, C), L)) -> rewrite_out_ga(op(A, op(B, C)), op(A, L))

The argument filtering Pi contains the following mapping:
rewrite_in_ga(x1, x2)  =  rewrite_in_ga(x1)

op(x1, x2)  =  op(x1, x2)

rewrite_out_ga(x1, x2)  =  rewrite_out_ga(x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x5)

NORMAL_IN_GA(x1, x2)  =  NORMAL_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GA(rewrite_out_ga(F1)) -> NORMAL_IN_GA(F1)
   NORMAL_IN_GA(F) -> U1_GA(rewrite_in_ga(F))

The TRS R consists of the following rules:

   rewrite_in_ga(op(op(A, B), C)) -> rewrite_out_ga(op(A, op(B, C)))
   rewrite_in_ga(op(A, op(B, C))) -> U3_ga(A, rewrite_in_ga(op(B, C)))
   U3_ga(A, rewrite_out_ga(L)) -> rewrite_out_ga(op(A, L))

The set Q consists of the following terms:

   rewrite_in_ga(x0)
   U3_ga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U1_GA(rewrite_out_ga(F1)) -> NORMAL_IN_GA(F1)
   NORMAL_IN_GA(F) -> U1_GA(rewrite_in_ga(F))


Used ordering: Polynomial interpretation [POLO]:

   POL(NORMAL_IN_GA(x_1)) = 1 + x_1
   POL(U1_GA(x_1)) = x_1
   POL(U3_ga(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(op(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(rewrite_in_ga(x_1)) = x_1
   POL(rewrite_out_ga(x_1)) = 2 + x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   rewrite_in_ga(op(op(A, B), C)) -> rewrite_out_ga(op(A, op(B, C)))
   rewrite_in_ga(op(A, op(B, C))) -> U3_ga(A, rewrite_in_ga(op(B, C)))
   U3_ga(A, rewrite_out_ga(L)) -> rewrite_out_ga(op(A, L))

The set Q consists of the following terms:

   rewrite_in_ga(x0)
   U3_ga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(22)
YES
