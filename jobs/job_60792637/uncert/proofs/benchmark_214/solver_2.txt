YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/2M9yD.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

log(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 6 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) MRRProof [EQUIVALENT, 22 ms]
        (20) QDP
        (21) DependencyGraphProof [EQUIVALENT, 0 ms]
        (22) TRUE


----------------------------------------

(0)
Obligation:
Clauses:

half(0, 0).
half(s(0), 0).
half(s(s(X)), s(Y)) :- half(X, Y).
log(0, s(0)).
log(s(X), s(Y)) :- ','(half(s(X), Z), log(Z, Y)).


Query: log(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

log_in_2: (b,f)

half_in_2: (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   log_in_ga(0, s(0)) -> log_out_ga(0, s(0))
   log_in_ga(s(X), s(Y)) -> U2_ga(X, Y, half_in_ga(s(X), Z))
   half_in_ga(0, 0) -> half_out_ga(0, 0)
   half_in_ga(s(0), 0) -> half_out_ga(s(0), 0)
   half_in_ga(s(s(X)), s(Y)) -> U1_ga(X, Y, half_in_ga(X, Y))
   U1_ga(X, Y, half_out_ga(X, Y)) -> half_out_ga(s(s(X)), s(Y))
   U2_ga(X, Y, half_out_ga(s(X), Z)) -> U3_ga(X, Y, log_in_ga(Z, Y))
   U3_ga(X, Y, log_out_ga(Z, Y)) -> log_out_ga(s(X), s(Y))

The argument filtering Pi contains the following mapping:
log_in_ga(x1, x2)  =  log_in_ga(x1)

0  =  0

log_out_ga(x1, x2)  =  log_out_ga(x2)

s(x1)  =  s(x1)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

half_in_ga(x1, x2)  =  half_in_ga(x1)

half_out_ga(x1, x2)  =  half_out_ga(x2)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

U3_ga(x1, x2, x3)  =  U3_ga(x3)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   log_in_ga(0, s(0)) -> log_out_ga(0, s(0))
   log_in_ga(s(X), s(Y)) -> U2_ga(X, Y, half_in_ga(s(X), Z))
   half_in_ga(0, 0) -> half_out_ga(0, 0)
   half_in_ga(s(0), 0) -> half_out_ga(s(0), 0)
   half_in_ga(s(s(X)), s(Y)) -> U1_ga(X, Y, half_in_ga(X, Y))
   U1_ga(X, Y, half_out_ga(X, Y)) -> half_out_ga(s(s(X)), s(Y))
   U2_ga(X, Y, half_out_ga(s(X), Z)) -> U3_ga(X, Y, log_in_ga(Z, Y))
   U3_ga(X, Y, log_out_ga(Z, Y)) -> log_out_ga(s(X), s(Y))

The argument filtering Pi contains the following mapping:
log_in_ga(x1, x2)  =  log_in_ga(x1)

0  =  0

log_out_ga(x1, x2)  =  log_out_ga(x2)

s(x1)  =  s(x1)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

half_in_ga(x1, x2)  =  half_in_ga(x1)

half_out_ga(x1, x2)  =  half_out_ga(x2)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

U3_ga(x1, x2, x3)  =  U3_ga(x3)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   LOG_IN_GA(s(X), s(Y)) -> U2_GA(X, Y, half_in_ga(s(X), Z))
   LOG_IN_GA(s(X), s(Y)) -> HALF_IN_GA(s(X), Z)
   HALF_IN_GA(s(s(X)), s(Y)) -> U1_GA(X, Y, half_in_ga(X, Y))
   HALF_IN_GA(s(s(X)), s(Y)) -> HALF_IN_GA(X, Y)
   U2_GA(X, Y, half_out_ga(s(X), Z)) -> U3_GA(X, Y, log_in_ga(Z, Y))
   U2_GA(X, Y, half_out_ga(s(X), Z)) -> LOG_IN_GA(Z, Y)

The TRS R consists of the following rules:

   log_in_ga(0, s(0)) -> log_out_ga(0, s(0))
   log_in_ga(s(X), s(Y)) -> U2_ga(X, Y, half_in_ga(s(X), Z))
   half_in_ga(0, 0) -> half_out_ga(0, 0)
   half_in_ga(s(0), 0) -> half_out_ga(s(0), 0)
   half_in_ga(s(s(X)), s(Y)) -> U1_ga(X, Y, half_in_ga(X, Y))
   U1_ga(X, Y, half_out_ga(X, Y)) -> half_out_ga(s(s(X)), s(Y))
   U2_ga(X, Y, half_out_ga(s(X), Z)) -> U3_ga(X, Y, log_in_ga(Z, Y))
   U3_ga(X, Y, log_out_ga(Z, Y)) -> log_out_ga(s(X), s(Y))

The argument filtering Pi contains the following mapping:
log_in_ga(x1, x2)  =  log_in_ga(x1)

0  =  0

log_out_ga(x1, x2)  =  log_out_ga(x2)

s(x1)  =  s(x1)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

half_in_ga(x1, x2)  =  half_in_ga(x1)

half_out_ga(x1, x2)  =  half_out_ga(x2)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

U3_ga(x1, x2, x3)  =  U3_ga(x3)

LOG_IN_GA(x1, x2)  =  LOG_IN_GA(x1)

U2_GA(x1, x2, x3)  =  U2_GA(x3)

HALF_IN_GA(x1, x2)  =  HALF_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

U3_GA(x1, x2, x3)  =  U3_GA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LOG_IN_GA(s(X), s(Y)) -> U2_GA(X, Y, half_in_ga(s(X), Z))
   LOG_IN_GA(s(X), s(Y)) -> HALF_IN_GA(s(X), Z)
   HALF_IN_GA(s(s(X)), s(Y)) -> U1_GA(X, Y, half_in_ga(X, Y))
   HALF_IN_GA(s(s(X)), s(Y)) -> HALF_IN_GA(X, Y)
   U2_GA(X, Y, half_out_ga(s(X), Z)) -> U3_GA(X, Y, log_in_ga(Z, Y))
   U2_GA(X, Y, half_out_ga(s(X), Z)) -> LOG_IN_GA(Z, Y)

The TRS R consists of the following rules:

   log_in_ga(0, s(0)) -> log_out_ga(0, s(0))
   log_in_ga(s(X), s(Y)) -> U2_ga(X, Y, half_in_ga(s(X), Z))
   half_in_ga(0, 0) -> half_out_ga(0, 0)
   half_in_ga(s(0), 0) -> half_out_ga(s(0), 0)
   half_in_ga(s(s(X)), s(Y)) -> U1_ga(X, Y, half_in_ga(X, Y))
   U1_ga(X, Y, half_out_ga(X, Y)) -> half_out_ga(s(s(X)), s(Y))
   U2_ga(X, Y, half_out_ga(s(X), Z)) -> U3_ga(X, Y, log_in_ga(Z, Y))
   U3_ga(X, Y, log_out_ga(Z, Y)) -> log_out_ga(s(X), s(Y))

The argument filtering Pi contains the following mapping:
log_in_ga(x1, x2)  =  log_in_ga(x1)

0  =  0

log_out_ga(x1, x2)  =  log_out_ga(x2)

s(x1)  =  s(x1)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

half_in_ga(x1, x2)  =  half_in_ga(x1)

half_out_ga(x1, x2)  =  half_out_ga(x2)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

U3_ga(x1, x2, x3)  =  U3_ga(x3)

LOG_IN_GA(x1, x2)  =  LOG_IN_GA(x1)

U2_GA(x1, x2, x3)  =  U2_GA(x3)

HALF_IN_GA(x1, x2)  =  HALF_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

U3_GA(x1, x2, x3)  =  U3_GA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   HALF_IN_GA(s(s(X)), s(Y)) -> HALF_IN_GA(X, Y)

The TRS R consists of the following rules:

   log_in_ga(0, s(0)) -> log_out_ga(0, s(0))
   log_in_ga(s(X), s(Y)) -> U2_ga(X, Y, half_in_ga(s(X), Z))
   half_in_ga(0, 0) -> half_out_ga(0, 0)
   half_in_ga(s(0), 0) -> half_out_ga(s(0), 0)
   half_in_ga(s(s(X)), s(Y)) -> U1_ga(X, Y, half_in_ga(X, Y))
   U1_ga(X, Y, half_out_ga(X, Y)) -> half_out_ga(s(s(X)), s(Y))
   U2_ga(X, Y, half_out_ga(s(X), Z)) -> U3_ga(X, Y, log_in_ga(Z, Y))
   U3_ga(X, Y, log_out_ga(Z, Y)) -> log_out_ga(s(X), s(Y))

The argument filtering Pi contains the following mapping:
log_in_ga(x1, x2)  =  log_in_ga(x1)

0  =  0

log_out_ga(x1, x2)  =  log_out_ga(x2)

s(x1)  =  s(x1)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

half_in_ga(x1, x2)  =  half_in_ga(x1)

half_out_ga(x1, x2)  =  half_out_ga(x2)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

U3_ga(x1, x2, x3)  =  U3_ga(x3)

HALF_IN_GA(x1, x2)  =  HALF_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   HALF_IN_GA(s(s(X)), s(Y)) -> HALF_IN_GA(X, Y)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

HALF_IN_GA(x1, x2)  =  HALF_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   HALF_IN_GA(s(s(X))) -> HALF_IN_GA(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*HALF_IN_GA(s(s(X))) -> HALF_IN_GA(X)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GA(X, Y, half_out_ga(s(X), Z)) -> LOG_IN_GA(Z, Y)
   LOG_IN_GA(s(X), s(Y)) -> U2_GA(X, Y, half_in_ga(s(X), Z))

The TRS R consists of the following rules:

   log_in_ga(0, s(0)) -> log_out_ga(0, s(0))
   log_in_ga(s(X), s(Y)) -> U2_ga(X, Y, half_in_ga(s(X), Z))
   half_in_ga(0, 0) -> half_out_ga(0, 0)
   half_in_ga(s(0), 0) -> half_out_ga(s(0), 0)
   half_in_ga(s(s(X)), s(Y)) -> U1_ga(X, Y, half_in_ga(X, Y))
   U1_ga(X, Y, half_out_ga(X, Y)) -> half_out_ga(s(s(X)), s(Y))
   U2_ga(X, Y, half_out_ga(s(X), Z)) -> U3_ga(X, Y, log_in_ga(Z, Y))
   U3_ga(X, Y, log_out_ga(Z, Y)) -> log_out_ga(s(X), s(Y))

The argument filtering Pi contains the following mapping:
log_in_ga(x1, x2)  =  log_in_ga(x1)

0  =  0

log_out_ga(x1, x2)  =  log_out_ga(x2)

s(x1)  =  s(x1)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

half_in_ga(x1, x2)  =  half_in_ga(x1)

half_out_ga(x1, x2)  =  half_out_ga(x2)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

U3_ga(x1, x2, x3)  =  U3_ga(x3)

LOG_IN_GA(x1, x2)  =  LOG_IN_GA(x1)

U2_GA(x1, x2, x3)  =  U2_GA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GA(X, Y, half_out_ga(s(X), Z)) -> LOG_IN_GA(Z, Y)
   LOG_IN_GA(s(X), s(Y)) -> U2_GA(X, Y, half_in_ga(s(X), Z))

The TRS R consists of the following rules:

   half_in_ga(s(0), 0) -> half_out_ga(s(0), 0)
   half_in_ga(s(s(X)), s(Y)) -> U1_ga(X, Y, half_in_ga(X, Y))
   U1_ga(X, Y, half_out_ga(X, Y)) -> half_out_ga(s(s(X)), s(Y))
   half_in_ga(0, 0) -> half_out_ga(0, 0)

The argument filtering Pi contains the following mapping:
0  =  0

s(x1)  =  s(x1)

half_in_ga(x1, x2)  =  half_in_ga(x1)

half_out_ga(x1, x2)  =  half_out_ga(x2)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

LOG_IN_GA(x1, x2)  =  LOG_IN_GA(x1)

U2_GA(x1, x2, x3)  =  U2_GA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GA(half_out_ga(Z)) -> LOG_IN_GA(Z)
   LOG_IN_GA(s(X)) -> U2_GA(half_in_ga(s(X)))

The TRS R consists of the following rules:

   half_in_ga(s(0)) -> half_out_ga(0)
   half_in_ga(s(s(X))) -> U1_ga(half_in_ga(X))
   U1_ga(half_out_ga(Y)) -> half_out_ga(s(Y))
   half_in_ga(0) -> half_out_ga(0)

The set Q consists of the following terms:

   half_in_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   half_in_ga(s(0)) -> half_out_ga(0)
   half_in_ga(s(s(X))) -> U1_ga(half_in_ga(X))

Used ordering: Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(LOG_IN_GA(x_1)) = 2*x_1
   POL(U1_ga(x_1)) = 2 + x_1
   POL(U2_GA(x_1)) = x_1
   POL(half_in_ga(x_1)) = 2*x_1
   POL(half_out_ga(x_1)) = 2*x_1
   POL(s(x_1)) = 1 + x_1


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GA(half_out_ga(Z)) -> LOG_IN_GA(Z)
   LOG_IN_GA(s(X)) -> U2_GA(half_in_ga(s(X)))

The TRS R consists of the following rules:

   U1_ga(half_out_ga(Y)) -> half_out_ga(s(Y))
   half_in_ga(0) -> half_out_ga(0)

The set Q consists of the following terms:

   half_in_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(22)
TRUE
