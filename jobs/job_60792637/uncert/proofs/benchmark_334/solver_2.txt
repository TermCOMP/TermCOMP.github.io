YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/gdDKA.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

factorial(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) PiDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) PiDP
        (24) PiDPToQDPProof [SOUND, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES


----------------------------------------

(0)
Obligation:
Clauses:

isNat(s(X)) :- isNat(X).
isNat(0).
notEq(s(X), s(Y)) :- notEq(X, Y).
notEq(s(X), 0).
notEq(0, s(X)).
lt(s(X), s(Y)) :- lt(X, Y).
lt(0, s(Y)).
gt(s(X), s(Y)) :- gt(X, Y).
gt(s(X), 0).
le(s(X), s(Y)) :- le(X, Y).
le(0, s(Y)).
le(0, 0).
even(s(X)) :- odd(X).
even(0).
odd(s(X)) :- even(X).
odd(s(0)).
add(s(X), Y, s(Z)) :- add(X, Y, Z).
add(0, X, X).
mult(s(X), Y, R) :- ','(mult(X, Y, Z), add(Y, Z, R)).
mult(0, Y, 0).
factorial(s(X), R) :- ','(factorial(X, Y), mult(s(X), Y, R)).
factorial(0, s(0)).


Query: factorial(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

factorial_in_2: (b,f)

mult_in_3: (b,b,f)

add_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   factorial_in_ga(s(X), R) -> U11_ga(X, R, factorial_in_ga(X, Y))
   factorial_in_ga(0, s(0)) -> factorial_out_ga(0, s(0))
   U11_ga(X, R, factorial_out_ga(X, Y)) -> U12_ga(X, R, mult_in_gga(s(X), Y, R))
   mult_in_gga(s(X), Y, R) -> U9_gga(X, Y, R, mult_in_gga(X, Y, Z))
   mult_in_gga(0, Y, 0) -> mult_out_gga(0, Y, 0)
   U9_gga(X, Y, R, mult_out_gga(X, Y, Z)) -> U10_gga(X, Y, R, add_in_gga(Y, Z, R))
   add_in_gga(s(X), Y, s(Z)) -> U8_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U8_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U10_gga(X, Y, R, add_out_gga(Y, Z, R)) -> mult_out_gga(s(X), Y, R)
   U12_ga(X, R, mult_out_gga(s(X), Y, R)) -> factorial_out_ga(s(X), R)

The argument filtering Pi contains the following mapping:
factorial_in_ga(x1, x2)  =  factorial_in_ga(x1)

s(x1)  =  s(x1)

U11_ga(x1, x2, x3)  =  U11_ga(x1, x3)

0  =  0

factorial_out_ga(x1, x2)  =  factorial_out_ga(x1, x2)

U12_ga(x1, x2, x3)  =  U12_ga(x1, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x1, x2, x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x1, x2, x3)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   factorial_in_ga(s(X), R) -> U11_ga(X, R, factorial_in_ga(X, Y))
   factorial_in_ga(0, s(0)) -> factorial_out_ga(0, s(0))
   U11_ga(X, R, factorial_out_ga(X, Y)) -> U12_ga(X, R, mult_in_gga(s(X), Y, R))
   mult_in_gga(s(X), Y, R) -> U9_gga(X, Y, R, mult_in_gga(X, Y, Z))
   mult_in_gga(0, Y, 0) -> mult_out_gga(0, Y, 0)
   U9_gga(X, Y, R, mult_out_gga(X, Y, Z)) -> U10_gga(X, Y, R, add_in_gga(Y, Z, R))
   add_in_gga(s(X), Y, s(Z)) -> U8_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U8_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U10_gga(X, Y, R, add_out_gga(Y, Z, R)) -> mult_out_gga(s(X), Y, R)
   U12_ga(X, R, mult_out_gga(s(X), Y, R)) -> factorial_out_ga(s(X), R)

The argument filtering Pi contains the following mapping:
factorial_in_ga(x1, x2)  =  factorial_in_ga(x1)

s(x1)  =  s(x1)

U11_ga(x1, x2, x3)  =  U11_ga(x1, x3)

0  =  0

factorial_out_ga(x1, x2)  =  factorial_out_ga(x1, x2)

U12_ga(x1, x2, x3)  =  U12_ga(x1, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x1, x2, x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x1, x2, x3)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   FACTORIAL_IN_GA(s(X), R) -> U11_GA(X, R, factorial_in_ga(X, Y))
   FACTORIAL_IN_GA(s(X), R) -> FACTORIAL_IN_GA(X, Y)
   U11_GA(X, R, factorial_out_ga(X, Y)) -> U12_GA(X, R, mult_in_gga(s(X), Y, R))
   U11_GA(X, R, factorial_out_ga(X, Y)) -> MULT_IN_GGA(s(X), Y, R)
   MULT_IN_GGA(s(X), Y, R) -> U9_GGA(X, Y, R, mult_in_gga(X, Y, Z))
   MULT_IN_GGA(s(X), Y, R) -> MULT_IN_GGA(X, Y, Z)
   U9_GGA(X, Y, R, mult_out_gga(X, Y, Z)) -> U10_GGA(X, Y, R, add_in_gga(Y, Z, R))
   U9_GGA(X, Y, R, mult_out_gga(X, Y, Z)) -> ADD_IN_GGA(Y, Z, R)
   ADD_IN_GGA(s(X), Y, s(Z)) -> U8_GGA(X, Y, Z, add_in_gga(X, Y, Z))
   ADD_IN_GGA(s(X), Y, s(Z)) -> ADD_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   factorial_in_ga(s(X), R) -> U11_ga(X, R, factorial_in_ga(X, Y))
   factorial_in_ga(0, s(0)) -> factorial_out_ga(0, s(0))
   U11_ga(X, R, factorial_out_ga(X, Y)) -> U12_ga(X, R, mult_in_gga(s(X), Y, R))
   mult_in_gga(s(X), Y, R) -> U9_gga(X, Y, R, mult_in_gga(X, Y, Z))
   mult_in_gga(0, Y, 0) -> mult_out_gga(0, Y, 0)
   U9_gga(X, Y, R, mult_out_gga(X, Y, Z)) -> U10_gga(X, Y, R, add_in_gga(Y, Z, R))
   add_in_gga(s(X), Y, s(Z)) -> U8_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U8_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U10_gga(X, Y, R, add_out_gga(Y, Z, R)) -> mult_out_gga(s(X), Y, R)
   U12_ga(X, R, mult_out_gga(s(X), Y, R)) -> factorial_out_ga(s(X), R)

The argument filtering Pi contains the following mapping:
factorial_in_ga(x1, x2)  =  factorial_in_ga(x1)

s(x1)  =  s(x1)

U11_ga(x1, x2, x3)  =  U11_ga(x1, x3)

0  =  0

factorial_out_ga(x1, x2)  =  factorial_out_ga(x1, x2)

U12_ga(x1, x2, x3)  =  U12_ga(x1, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x1, x2, x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x1, x2, x3)

FACTORIAL_IN_GA(x1, x2)  =  FACTORIAL_IN_GA(x1)

U11_GA(x1, x2, x3)  =  U11_GA(x1, x3)

U12_GA(x1, x2, x3)  =  U12_GA(x1, x3)

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)

U9_GGA(x1, x2, x3, x4)  =  U9_GGA(x1, x2, x4)

U10_GGA(x1, x2, x3, x4)  =  U10_GGA(x1, x2, x4)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)

U8_GGA(x1, x2, x3, x4)  =  U8_GGA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FACTORIAL_IN_GA(s(X), R) -> U11_GA(X, R, factorial_in_ga(X, Y))
   FACTORIAL_IN_GA(s(X), R) -> FACTORIAL_IN_GA(X, Y)
   U11_GA(X, R, factorial_out_ga(X, Y)) -> U12_GA(X, R, mult_in_gga(s(X), Y, R))
   U11_GA(X, R, factorial_out_ga(X, Y)) -> MULT_IN_GGA(s(X), Y, R)
   MULT_IN_GGA(s(X), Y, R) -> U9_GGA(X, Y, R, mult_in_gga(X, Y, Z))
   MULT_IN_GGA(s(X), Y, R) -> MULT_IN_GGA(X, Y, Z)
   U9_GGA(X, Y, R, mult_out_gga(X, Y, Z)) -> U10_GGA(X, Y, R, add_in_gga(Y, Z, R))
   U9_GGA(X, Y, R, mult_out_gga(X, Y, Z)) -> ADD_IN_GGA(Y, Z, R)
   ADD_IN_GGA(s(X), Y, s(Z)) -> U8_GGA(X, Y, Z, add_in_gga(X, Y, Z))
   ADD_IN_GGA(s(X), Y, s(Z)) -> ADD_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   factorial_in_ga(s(X), R) -> U11_ga(X, R, factorial_in_ga(X, Y))
   factorial_in_ga(0, s(0)) -> factorial_out_ga(0, s(0))
   U11_ga(X, R, factorial_out_ga(X, Y)) -> U12_ga(X, R, mult_in_gga(s(X), Y, R))
   mult_in_gga(s(X), Y, R) -> U9_gga(X, Y, R, mult_in_gga(X, Y, Z))
   mult_in_gga(0, Y, 0) -> mult_out_gga(0, Y, 0)
   U9_gga(X, Y, R, mult_out_gga(X, Y, Z)) -> U10_gga(X, Y, R, add_in_gga(Y, Z, R))
   add_in_gga(s(X), Y, s(Z)) -> U8_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U8_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U10_gga(X, Y, R, add_out_gga(Y, Z, R)) -> mult_out_gga(s(X), Y, R)
   U12_ga(X, R, mult_out_gga(s(X), Y, R)) -> factorial_out_ga(s(X), R)

The argument filtering Pi contains the following mapping:
factorial_in_ga(x1, x2)  =  factorial_in_ga(x1)

s(x1)  =  s(x1)

U11_ga(x1, x2, x3)  =  U11_ga(x1, x3)

0  =  0

factorial_out_ga(x1, x2)  =  factorial_out_ga(x1, x2)

U12_ga(x1, x2, x3)  =  U12_ga(x1, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x1, x2, x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x1, x2, x3)

FACTORIAL_IN_GA(x1, x2)  =  FACTORIAL_IN_GA(x1)

U11_GA(x1, x2, x3)  =  U11_GA(x1, x3)

U12_GA(x1, x2, x3)  =  U12_GA(x1, x3)

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)

U9_GGA(x1, x2, x3, x4)  =  U9_GGA(x1, x2, x4)

U10_GGA(x1, x2, x3, x4)  =  U10_GGA(x1, x2, x4)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)

U8_GGA(x1, x2, x3, x4)  =  U8_GGA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 7 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ADD_IN_GGA(s(X), Y, s(Z)) -> ADD_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   factorial_in_ga(s(X), R) -> U11_ga(X, R, factorial_in_ga(X, Y))
   factorial_in_ga(0, s(0)) -> factorial_out_ga(0, s(0))
   U11_ga(X, R, factorial_out_ga(X, Y)) -> U12_ga(X, R, mult_in_gga(s(X), Y, R))
   mult_in_gga(s(X), Y, R) -> U9_gga(X, Y, R, mult_in_gga(X, Y, Z))
   mult_in_gga(0, Y, 0) -> mult_out_gga(0, Y, 0)
   U9_gga(X, Y, R, mult_out_gga(X, Y, Z)) -> U10_gga(X, Y, R, add_in_gga(Y, Z, R))
   add_in_gga(s(X), Y, s(Z)) -> U8_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U8_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U10_gga(X, Y, R, add_out_gga(Y, Z, R)) -> mult_out_gga(s(X), Y, R)
   U12_ga(X, R, mult_out_gga(s(X), Y, R)) -> factorial_out_ga(s(X), R)

The argument filtering Pi contains the following mapping:
factorial_in_ga(x1, x2)  =  factorial_in_ga(x1)

s(x1)  =  s(x1)

U11_ga(x1, x2, x3)  =  U11_ga(x1, x3)

0  =  0

factorial_out_ga(x1, x2)  =  factorial_out_ga(x1, x2)

U12_ga(x1, x2, x3)  =  U12_ga(x1, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x1, x2, x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x1, x2, x3)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ADD_IN_GGA(s(X), Y, s(Z)) -> ADD_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

ADD_IN_GGA(x1, x2, x3)  =  ADD_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD_IN_GGA(s(X), Y) -> ADD_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ADD_IN_GGA(s(X), Y) -> ADD_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MULT_IN_GGA(s(X), Y, R) -> MULT_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   factorial_in_ga(s(X), R) -> U11_ga(X, R, factorial_in_ga(X, Y))
   factorial_in_ga(0, s(0)) -> factorial_out_ga(0, s(0))
   U11_ga(X, R, factorial_out_ga(X, Y)) -> U12_ga(X, R, mult_in_gga(s(X), Y, R))
   mult_in_gga(s(X), Y, R) -> U9_gga(X, Y, R, mult_in_gga(X, Y, Z))
   mult_in_gga(0, Y, 0) -> mult_out_gga(0, Y, 0)
   U9_gga(X, Y, R, mult_out_gga(X, Y, Z)) -> U10_gga(X, Y, R, add_in_gga(Y, Z, R))
   add_in_gga(s(X), Y, s(Z)) -> U8_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U8_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U10_gga(X, Y, R, add_out_gga(Y, Z, R)) -> mult_out_gga(s(X), Y, R)
   U12_ga(X, R, mult_out_gga(s(X), Y, R)) -> factorial_out_ga(s(X), R)

The argument filtering Pi contains the following mapping:
factorial_in_ga(x1, x2)  =  factorial_in_ga(x1)

s(x1)  =  s(x1)

U11_ga(x1, x2, x3)  =  U11_ga(x1, x3)

0  =  0

factorial_out_ga(x1, x2)  =  factorial_out_ga(x1, x2)

U12_ga(x1, x2, x3)  =  U12_ga(x1, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x1, x2, x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x1, x2, x3)

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MULT_IN_GGA(s(X), Y, R) -> MULT_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MULT_IN_GGA(s(X), Y) -> MULT_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MULT_IN_GGA(s(X), Y) -> MULT_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FACTORIAL_IN_GA(s(X), R) -> FACTORIAL_IN_GA(X, Y)

The TRS R consists of the following rules:

   factorial_in_ga(s(X), R) -> U11_ga(X, R, factorial_in_ga(X, Y))
   factorial_in_ga(0, s(0)) -> factorial_out_ga(0, s(0))
   U11_ga(X, R, factorial_out_ga(X, Y)) -> U12_ga(X, R, mult_in_gga(s(X), Y, R))
   mult_in_gga(s(X), Y, R) -> U9_gga(X, Y, R, mult_in_gga(X, Y, Z))
   mult_in_gga(0, Y, 0) -> mult_out_gga(0, Y, 0)
   U9_gga(X, Y, R, mult_out_gga(X, Y, Z)) -> U10_gga(X, Y, R, add_in_gga(Y, Z, R))
   add_in_gga(s(X), Y, s(Z)) -> U8_gga(X, Y, Z, add_in_gga(X, Y, Z))
   add_in_gga(0, X, X) -> add_out_gga(0, X, X)
   U8_gga(X, Y, Z, add_out_gga(X, Y, Z)) -> add_out_gga(s(X), Y, s(Z))
   U10_gga(X, Y, R, add_out_gga(Y, Z, R)) -> mult_out_gga(s(X), Y, R)
   U12_ga(X, R, mult_out_gga(s(X), Y, R)) -> factorial_out_ga(s(X), R)

The argument filtering Pi contains the following mapping:
factorial_in_ga(x1, x2)  =  factorial_in_ga(x1)

s(x1)  =  s(x1)

U11_ga(x1, x2, x3)  =  U11_ga(x1, x3)

0  =  0

factorial_out_ga(x1, x2)  =  factorial_out_ga(x1, x2)

U12_ga(x1, x2, x3)  =  U12_ga(x1, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x1, x2, x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

add_in_gga(x1, x2, x3)  =  add_in_gga(x1, x2)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

add_out_gga(x1, x2, x3)  =  add_out_gga(x1, x2, x3)

FACTORIAL_IN_GA(x1, x2)  =  FACTORIAL_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(23)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FACTORIAL_IN_GA(s(X), R) -> FACTORIAL_IN_GA(X, Y)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

FACTORIAL_IN_GA(x1, x2)  =  FACTORIAL_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(24) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FACTORIAL_IN_GA(s(X)) -> FACTORIAL_IN_GA(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*FACTORIAL_IN_GA(s(X)) -> FACTORIAL_IN_GA(X)
The graph contains the following edges 1 > 1


----------------------------------------

(27)
YES
