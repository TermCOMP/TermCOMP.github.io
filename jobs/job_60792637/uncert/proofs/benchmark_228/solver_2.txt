MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/4umFK.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

p(a,a,a)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) PiDP
    (7) UsableRulesProof [EQUIVALENT, 0 ms]
    (8) PiDP
    (9) PiDPToQDPProof [SOUND, 0 ms]
    (10) QDP
(11) PrologToPiTRSProof [SOUND, 0 ms]
(12) PiTRS
    (13) DependencyPairsProof [EQUIVALENT, 0 ms]
    (14) PiDP
    (15) DependencyGraphProof [EQUIVALENT, 0 ms]
    (16) PiDP
    (17) UsableRulesProof [EQUIVALENT, 0 ms]
    (18) PiDP
    (19) PiDPToQDPProof [SOUND, 0 ms]
    (20) QDP
(21) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(22) IRSwT
    (23) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (24) IRSwT
    (25) IntTRSCompressionProof [EQUIVALENT, 15 ms]
    (26) IRSwT
    (27) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (28) IRSwT
    (29) IRSwTTerminationDigraphProof [EQUIVALENT, 2 ms]
    (30) IRSwT
    (31) FilterProof [EQUIVALENT, 1 ms]
    (32) IntTRS
    (33) IntTRSPeriodicNontermProof [COMPLETE, 2 ms]
    (34) NO
(35) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(36) TRIPLES
    (37) TriplesToPiDPProof [SOUND, 0 ms]
    (38) PiDP
    (39) DependencyGraphProof [EQUIVALENT, 0 ms]
    (40) PiDP
    (41) PiDPToQDPProof [SOUND, 0 ms]
    (42) QDP
(43) PrologToTRSTransformerProof [SOUND, 0 ms]
(44) QTRS
    (45) QTRSRRRProof [EQUIVALENT, 17 ms]
    (46) QTRS
    (47) Overlay + Local Confluence [EQUIVALENT, 0 ms]
    (48) QTRS
    (49) DependencyPairsProof [EQUIVALENT, 0 ms]
    (50) QDP
    (51) UsableRulesProof [EQUIVALENT, 0 ms]
    (52) QDP
    (53) QReductionProof [EQUIVALENT, 0 ms]
    (54) QDP


----------------------------------------

(0)
Obligation:
Clauses:

p(X, Y, Z) :- append(.(X, Y), Z, Y).
append([], Y, Y).
append(.(H, Xs), Ys, .(H, Zs)) :- append(Xs, Ys, Zs).


Query: p(a,a,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

p_in_3: (f,f,f)

append_in_3: (f,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_aaa(X, Y, Z) -> U1_aaa(X, Y, Z, append_in_aaa(.(X, Y), Z, Y))
   append_in_aaa([], Y, Y) -> append_out_aaa([], Y, Y)
   append_in_aaa(.(H, Xs), Ys, .(H, Zs)) -> U2_aaa(H, Xs, Ys, Zs, append_in_aaa(Xs, Ys, Zs))
   U2_aaa(H, Xs, Ys, Zs, append_out_aaa(Xs, Ys, Zs)) -> append_out_aaa(.(H, Xs), Ys, .(H, Zs))
   U1_aaa(X, Y, Z, append_out_aaa(.(X, Y), Z, Y)) -> p_out_aaa(X, Y, Z)

The argument filtering Pi contains the following mapping:
p_in_aaa(x1, x2, x3)  =  p_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

.(x1, x2)  =  .(x2)

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

p_out_aaa(x1, x2, x3)  =  p_out_aaa(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_aaa(X, Y, Z) -> U1_aaa(X, Y, Z, append_in_aaa(.(X, Y), Z, Y))
   append_in_aaa([], Y, Y) -> append_out_aaa([], Y, Y)
   append_in_aaa(.(H, Xs), Ys, .(H, Zs)) -> U2_aaa(H, Xs, Ys, Zs, append_in_aaa(Xs, Ys, Zs))
   U2_aaa(H, Xs, Ys, Zs, append_out_aaa(Xs, Ys, Zs)) -> append_out_aaa(.(H, Xs), Ys, .(H, Zs))
   U1_aaa(X, Y, Z, append_out_aaa(.(X, Y), Z, Y)) -> p_out_aaa(X, Y, Z)

The argument filtering Pi contains the following mapping:
p_in_aaa(x1, x2, x3)  =  p_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

.(x1, x2)  =  .(x2)

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

p_out_aaa(x1, x2, x3)  =  p_out_aaa(x2)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_AAA(X, Y, Z) -> U1_AAA(X, Y, Z, append_in_aaa(.(X, Y), Z, Y))
   P_IN_AAA(X, Y, Z) -> APPEND_IN_AAA(.(X, Y), Z, Y)
   APPEND_IN_AAA(.(H, Xs), Ys, .(H, Zs)) -> U2_AAA(H, Xs, Ys, Zs, append_in_aaa(Xs, Ys, Zs))
   APPEND_IN_AAA(.(H, Xs), Ys, .(H, Zs)) -> APPEND_IN_AAA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   p_in_aaa(X, Y, Z) -> U1_aaa(X, Y, Z, append_in_aaa(.(X, Y), Z, Y))
   append_in_aaa([], Y, Y) -> append_out_aaa([], Y, Y)
   append_in_aaa(.(H, Xs), Ys, .(H, Zs)) -> U2_aaa(H, Xs, Ys, Zs, append_in_aaa(Xs, Ys, Zs))
   U2_aaa(H, Xs, Ys, Zs, append_out_aaa(Xs, Ys, Zs)) -> append_out_aaa(.(H, Xs), Ys, .(H, Zs))
   U1_aaa(X, Y, Z, append_out_aaa(.(X, Y), Z, Y)) -> p_out_aaa(X, Y, Z)

The argument filtering Pi contains the following mapping:
p_in_aaa(x1, x2, x3)  =  p_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

.(x1, x2)  =  .(x2)

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

p_out_aaa(x1, x2, x3)  =  p_out_aaa(x2)

P_IN_AAA(x1, x2, x3)  =  P_IN_AAA

U1_AAA(x1, x2, x3, x4)  =  U1_AAA(x4)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_AAA(X, Y, Z) -> U1_AAA(X, Y, Z, append_in_aaa(.(X, Y), Z, Y))
   P_IN_AAA(X, Y, Z) -> APPEND_IN_AAA(.(X, Y), Z, Y)
   APPEND_IN_AAA(.(H, Xs), Ys, .(H, Zs)) -> U2_AAA(H, Xs, Ys, Zs, append_in_aaa(Xs, Ys, Zs))
   APPEND_IN_AAA(.(H, Xs), Ys, .(H, Zs)) -> APPEND_IN_AAA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   p_in_aaa(X, Y, Z) -> U1_aaa(X, Y, Z, append_in_aaa(.(X, Y), Z, Y))
   append_in_aaa([], Y, Y) -> append_out_aaa([], Y, Y)
   append_in_aaa(.(H, Xs), Ys, .(H, Zs)) -> U2_aaa(H, Xs, Ys, Zs, append_in_aaa(Xs, Ys, Zs))
   U2_aaa(H, Xs, Ys, Zs, append_out_aaa(Xs, Ys, Zs)) -> append_out_aaa(.(H, Xs), Ys, .(H, Zs))
   U1_aaa(X, Y, Z, append_out_aaa(.(X, Y), Z, Y)) -> p_out_aaa(X, Y, Z)

The argument filtering Pi contains the following mapping:
p_in_aaa(x1, x2, x3)  =  p_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

.(x1, x2)  =  .(x2)

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

p_out_aaa(x1, x2, x3)  =  p_out_aaa(x2)

P_IN_AAA(x1, x2, x3)  =  P_IN_AAA

U1_AAA(x1, x2, x3, x4)  =  U1_AAA(x4)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA(.(H, Xs), Ys, .(H, Zs)) -> APPEND_IN_AAA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   p_in_aaa(X, Y, Z) -> U1_aaa(X, Y, Z, append_in_aaa(.(X, Y), Z, Y))
   append_in_aaa([], Y, Y) -> append_out_aaa([], Y, Y)
   append_in_aaa(.(H, Xs), Ys, .(H, Zs)) -> U2_aaa(H, Xs, Ys, Zs, append_in_aaa(Xs, Ys, Zs))
   U2_aaa(H, Xs, Ys, Zs, append_out_aaa(Xs, Ys, Zs)) -> append_out_aaa(.(H, Xs), Ys, .(H, Zs))
   U1_aaa(X, Y, Z, append_out_aaa(.(X, Y), Z, Y)) -> p_out_aaa(X, Y, Z)

The argument filtering Pi contains the following mapping:
p_in_aaa(x1, x2, x3)  =  p_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

.(x1, x2)  =  .(x2)

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

p_out_aaa(x1, x2, x3)  =  p_out_aaa(x2)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA(.(H, Xs), Ys, .(H, Zs)) -> APPEND_IN_AAA(Xs, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA -> APPEND_IN_AAA

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

p_in_3: (f,f,f)

append_in_3: (f,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_aaa(X, Y, Z) -> U1_aaa(X, Y, Z, append_in_aaa(.(X, Y), Z, Y))
   append_in_aaa([], Y, Y) -> append_out_aaa([], Y, Y)
   append_in_aaa(.(H, Xs), Ys, .(H, Zs)) -> U2_aaa(H, Xs, Ys, Zs, append_in_aaa(Xs, Ys, Zs))
   U2_aaa(H, Xs, Ys, Zs, append_out_aaa(Xs, Ys, Zs)) -> append_out_aaa(.(H, Xs), Ys, .(H, Zs))
   U1_aaa(X, Y, Z, append_out_aaa(.(X, Y), Z, Y)) -> p_out_aaa(X, Y, Z)

The argument filtering Pi contains the following mapping:
p_in_aaa(x1, x2, x3)  =  p_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

.(x1, x2)  =  .(x2)

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

p_out_aaa(x1, x2, x3)  =  p_out_aaa(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(12)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_aaa(X, Y, Z) -> U1_aaa(X, Y, Z, append_in_aaa(.(X, Y), Z, Y))
   append_in_aaa([], Y, Y) -> append_out_aaa([], Y, Y)
   append_in_aaa(.(H, Xs), Ys, .(H, Zs)) -> U2_aaa(H, Xs, Ys, Zs, append_in_aaa(Xs, Ys, Zs))
   U2_aaa(H, Xs, Ys, Zs, append_out_aaa(Xs, Ys, Zs)) -> append_out_aaa(.(H, Xs), Ys, .(H, Zs))
   U1_aaa(X, Y, Z, append_out_aaa(.(X, Y), Z, Y)) -> p_out_aaa(X, Y, Z)

The argument filtering Pi contains the following mapping:
p_in_aaa(x1, x2, x3)  =  p_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

.(x1, x2)  =  .(x2)

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

p_out_aaa(x1, x2, x3)  =  p_out_aaa(x2)



----------------------------------------

(13) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_AAA(X, Y, Z) -> U1_AAA(X, Y, Z, append_in_aaa(.(X, Y), Z, Y))
   P_IN_AAA(X, Y, Z) -> APPEND_IN_AAA(.(X, Y), Z, Y)
   APPEND_IN_AAA(.(H, Xs), Ys, .(H, Zs)) -> U2_AAA(H, Xs, Ys, Zs, append_in_aaa(Xs, Ys, Zs))
   APPEND_IN_AAA(.(H, Xs), Ys, .(H, Zs)) -> APPEND_IN_AAA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   p_in_aaa(X, Y, Z) -> U1_aaa(X, Y, Z, append_in_aaa(.(X, Y), Z, Y))
   append_in_aaa([], Y, Y) -> append_out_aaa([], Y, Y)
   append_in_aaa(.(H, Xs), Ys, .(H, Zs)) -> U2_aaa(H, Xs, Ys, Zs, append_in_aaa(Xs, Ys, Zs))
   U2_aaa(H, Xs, Ys, Zs, append_out_aaa(Xs, Ys, Zs)) -> append_out_aaa(.(H, Xs), Ys, .(H, Zs))
   U1_aaa(X, Y, Z, append_out_aaa(.(X, Y), Z, Y)) -> p_out_aaa(X, Y, Z)

The argument filtering Pi contains the following mapping:
p_in_aaa(x1, x2, x3)  =  p_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

.(x1, x2)  =  .(x2)

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

p_out_aaa(x1, x2, x3)  =  p_out_aaa(x2)

P_IN_AAA(x1, x2, x3)  =  P_IN_AAA

U1_AAA(x1, x2, x3, x4)  =  U1_AAA(x4)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_AAA(X, Y, Z) -> U1_AAA(X, Y, Z, append_in_aaa(.(X, Y), Z, Y))
   P_IN_AAA(X, Y, Z) -> APPEND_IN_AAA(.(X, Y), Z, Y)
   APPEND_IN_AAA(.(H, Xs), Ys, .(H, Zs)) -> U2_AAA(H, Xs, Ys, Zs, append_in_aaa(Xs, Ys, Zs))
   APPEND_IN_AAA(.(H, Xs), Ys, .(H, Zs)) -> APPEND_IN_AAA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   p_in_aaa(X, Y, Z) -> U1_aaa(X, Y, Z, append_in_aaa(.(X, Y), Z, Y))
   append_in_aaa([], Y, Y) -> append_out_aaa([], Y, Y)
   append_in_aaa(.(H, Xs), Ys, .(H, Zs)) -> U2_aaa(H, Xs, Ys, Zs, append_in_aaa(Xs, Ys, Zs))
   U2_aaa(H, Xs, Ys, Zs, append_out_aaa(Xs, Ys, Zs)) -> append_out_aaa(.(H, Xs), Ys, .(H, Zs))
   U1_aaa(X, Y, Z, append_out_aaa(.(X, Y), Z, Y)) -> p_out_aaa(X, Y, Z)

The argument filtering Pi contains the following mapping:
p_in_aaa(x1, x2, x3)  =  p_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

.(x1, x2)  =  .(x2)

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

p_out_aaa(x1, x2, x3)  =  p_out_aaa(x2)

P_IN_AAA(x1, x2, x3)  =  P_IN_AAA

U1_AAA(x1, x2, x3, x4)  =  U1_AAA(x4)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA(.(H, Xs), Ys, .(H, Zs)) -> APPEND_IN_AAA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   p_in_aaa(X, Y, Z) -> U1_aaa(X, Y, Z, append_in_aaa(.(X, Y), Z, Y))
   append_in_aaa([], Y, Y) -> append_out_aaa([], Y, Y)
   append_in_aaa(.(H, Xs), Ys, .(H, Zs)) -> U2_aaa(H, Xs, Ys, Zs, append_in_aaa(Xs, Ys, Zs))
   U2_aaa(H, Xs, Ys, Zs, append_out_aaa(Xs, Ys, Zs)) -> append_out_aaa(.(H, Xs), Ys, .(H, Zs))
   U1_aaa(X, Y, Z, append_out_aaa(.(X, Y), Z, Y)) -> p_out_aaa(X, Y, Z)

The argument filtering Pi contains the following mapping:
p_in_aaa(x1, x2, x3)  =  p_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

append_in_aaa(x1, x2, x3)  =  append_in_aaa

.(x1, x2)  =  .(x2)

append_out_aaa(x1, x2, x3)  =  append_out_aaa(x1)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

p_out_aaa(x1, x2, x3)  =  p_out_aaa(x2)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(18)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA(.(H, Xs), Ys, .(H, Zs)) -> APPEND_IN_AAA(Xs, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPEND_IN_AAA(x1, x2, x3)  =  APPEND_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(19) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND_IN_AAA -> APPEND_IN_AAA

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p X Y Z)",
                "(append (. X Y) Z Y)"
            ],
            [
                "(append ([]) Y Y)",
                null
            ],
            [
                "(append (. H Xs) Ys (. H Zs))",
                "(append Xs Ys Zs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(append (. T18 T17) T16 T17)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(append (. T18 T17) T16 T17)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "59": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append (. T33 T32) T31 T32)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "16": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(append (. T18 T17) T16 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append (. T18 T17) T16 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "60": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes"
        },
        "edges": [
            {
                "from": 2,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 8,
                "label": "ONLY EVAL with clause\np(X9, X10, X11) :- append(.(X9, X10), X11, X10).\nand substitutionT1 -> T18,\nX9 -> T18,\nT2 -> T17,\nX10 -> T17,\nT3 -> T16,\nX11 -> T16,\nT15 -> T16,\nT14 -> T17,\nT13 -> T18"
            },
            {
                "from": 8,
                "to": 15,
                "label": "CASE"
            },
            {
                "from": 15,
                "to": 16,
                "label": "BACKTRACK\nfor clause: append([], Y, Y)because of non-unification"
            },
            {
                "from": 16,
                "to": 59,
                "label": "EVAL with clause\nappend(.(X23, X24), X25, .(X23, X26)) :- append(X24, X25, X26).\nand substitutionT18 -> T33,\nX23 -> T33,\nT17 -> .(T33, T32),\nX24 -> .(T33, T32),\nT16 -> T31,\nX25 -> T31,\nX26 -> T32,\nT28 -> .(T33, T32),\nT29 -> T31,\nT30 -> T32,\nT27 -> T33"
            },
            {
                "from": 16,
                "to": 60,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 59,
                "to": 8,
                "label": "INSTANCE with matching:\nT18 -> T33\nT17 -> T32\nT16 -> T31"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(22)
Obligation:
Rules:
f60_out -> f16_out :|: TRUE
f16_in -> f60_in :|: TRUE
f59_out -> f16_out :|: TRUE
f16_in -> f59_in :|: TRUE
f16_out -> f15_out :|: TRUE
f15_in -> f16_in :|: TRUE
f8_out -> f59_out :|: TRUE
f59_in -> f8_in :|: TRUE
f15_out -> f8_out :|: TRUE
f8_in -> f15_in :|: TRUE
f2_in -> f5_in :|: TRUE
f5_out -> f2_out :|: TRUE
f5_in -> f8_in :|: TRUE
f8_out -> f5_out :|: TRUE
Start term: f2_in

----------------------------------------

(23) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f16_in -> f59_in :|: TRUE
f15_in -> f16_in :|: TRUE
f59_in -> f8_in :|: TRUE
f8_in -> f15_in :|: TRUE


----------------------------------------

(24)
Obligation:
Rules:
f16_in -> f59_in :|: TRUE
f15_in -> f16_in :|: TRUE
f59_in -> f8_in :|: TRUE
f8_in -> f15_in :|: TRUE

----------------------------------------

(25) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(26)
Obligation:
Rules:
f15_in -> f15_in :|: TRUE

----------------------------------------

(27) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(28)
Obligation:
Rules:
f15_in -> f15_in :|: TRUE

----------------------------------------

(29) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f15_in -> f15_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(30)
Obligation:

Termination digraph:
Nodes:
(1) f15_in -> f15_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(31) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f15_in()
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(32)
Obligation:
Rules:
f15_in -> f15_in :|: TRUE

----------------------------------------

(33) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc) -> f(1) :|: pc = 1 && TRUE
Witness term starting non-terminating reduction: f(1)
----------------------------------------

(34)
NO

----------------------------------------

(35) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p X Y Z)",
                "(append (. X Y) Z Y)"
            ],
            [
                "(append ([]) Y Y)",
                null
            ],
            [
                "(append (. H Xs) Ys (. H Zs))",
                "(append Xs Ys Zs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "121": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append (. T12 T11) T10 T11)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "122": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(append (. T12 T11) T10 T11)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(append (. T12 T11) T10 T11)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "123": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(append (. T12 T11) T10 T11)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "124": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append (. T27 T26) T25 T26)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "125": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes"
        },
        "edges": [
            {
                "from": 3,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 121,
                "label": "ONLY EVAL with clause\np(X4, X5, X6) :- append(.(X4, X5), X6, X5).\nand substitutionT1 -> T12,\nX4 -> T12,\nT2 -> T11,\nX5 -> T11,\nT3 -> T10,\nX6 -> T10,\nT9 -> T10,\nT8 -> T11,\nT7 -> T12"
            },
            {
                "from": 121,
                "to": 122,
                "label": "CASE"
            },
            {
                "from": 122,
                "to": 123,
                "label": "BACKTRACK\nfor clause: append([], Y, Y)because of non-unification"
            },
            {
                "from": 123,
                "to": 124,
                "label": "EVAL with clause\nappend(.(X16, X17), X18, .(X16, X19)) :- append(X17, X18, X19).\nand substitutionT12 -> T27,\nX16 -> T27,\nT11 -> .(T27, T26),\nX17 -> .(T27, T26),\nT10 -> T25,\nX18 -> T25,\nX19 -> T26,\nT22 -> .(T27, T26),\nT23 -> T25,\nT24 -> T26,\nT21 -> T27"
            },
            {
                "from": 123,
                "to": 125,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 124,
                "to": 121,
                "label": "INSTANCE with matching:\nT12 -> T27\nT11 -> T26\nT10 -> T25"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(36)
Obligation:
Triples:

appendA(X1, .(X1, X2), X3) :- appendA(X1, X2, X3).
pB(X1, X2, X3) :- appendA(X1, X2, X3).

Clauses:

appendcA(X1, .(X1, X2), X3) :- appendcA(X1, X2, X3).

Afs:

pB(x1, x2, x3)  =  pB


----------------------------------------

(37) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

pB_in_3: (f,f,f)

appendA_in_3: (f,f,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   PB_IN_AAA(X1, X2, X3) -> U2_AAA(X1, X2, X3, appendA_in_aaa(X1, X2, X3))
   PB_IN_AAA(X1, X2, X3) -> APPENDA_IN_AAA(X1, X2, X3)
   APPENDA_IN_AAA(X1, .(X1, X2), X3) -> U1_AAA(X1, X2, X3, appendA_in_aaa(X1, X2, X3))
   APPENDA_IN_AAA(X1, .(X1, X2), X3) -> APPENDA_IN_AAA(X1, X2, X3)

R is empty.
The argument filtering Pi contains the following mapping:
appendA_in_aaa(x1, x2, x3)  =  appendA_in_aaa

.(x1, x2)  =  .(x1, x2)

PB_IN_AAA(x1, x2, x3)  =  PB_IN_AAA

U2_AAA(x1, x2, x3, x4)  =  U2_AAA(x4)

APPENDA_IN_AAA(x1, x2, x3)  =  APPENDA_IN_AAA

U1_AAA(x1, x2, x3, x4)  =  U1_AAA(x4)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(38)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PB_IN_AAA(X1, X2, X3) -> U2_AAA(X1, X2, X3, appendA_in_aaa(X1, X2, X3))
   PB_IN_AAA(X1, X2, X3) -> APPENDA_IN_AAA(X1, X2, X3)
   APPENDA_IN_AAA(X1, .(X1, X2), X3) -> U1_AAA(X1, X2, X3, appendA_in_aaa(X1, X2, X3))
   APPENDA_IN_AAA(X1, .(X1, X2), X3) -> APPENDA_IN_AAA(X1, X2, X3)

R is empty.
The argument filtering Pi contains the following mapping:
appendA_in_aaa(x1, x2, x3)  =  appendA_in_aaa

.(x1, x2)  =  .(x1, x2)

PB_IN_AAA(x1, x2, x3)  =  PB_IN_AAA

U2_AAA(x1, x2, x3, x4)  =  U2_AAA(x4)

APPENDA_IN_AAA(x1, x2, x3)  =  APPENDA_IN_AAA

U1_AAA(x1, x2, x3, x4)  =  U1_AAA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(39) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(40)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPENDA_IN_AAA(X1, .(X1, X2), X3) -> APPENDA_IN_AAA(X1, X2, X3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

APPENDA_IN_AAA(x1, x2, x3)  =  APPENDA_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(41) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPENDA_IN_AAA -> APPENDA_IN_AAA

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(43) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p X Y Z)",
                "(append (. X Y) Z Y)"
            ],
            [
                "(append ([]) Y Y)",
                null
            ],
            [
                "(append (. H Xs) Ys (. H Zs))",
                "(append Xs Ys Zs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "134": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append (. T33 T32) T31 T32)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "135": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(append (. T18 T17) T16 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "119": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(append (. T18 T17) T16 T17)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(append (. T18 T17) T16 T17)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "120": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(append (. T18 T17) T16 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 7,
                "label": "ONLY EVAL with clause\np(X9, X10, X11) :- append(.(X9, X10), X11, X10).\nand substitutionT1 -> T18,\nX9 -> T18,\nT2 -> T17,\nX10 -> T17,\nT3 -> T16,\nX11 -> T16,\nT15 -> T16,\nT14 -> T17,\nT13 -> T18"
            },
            {
                "from": 7,
                "to": 119,
                "label": "CASE"
            },
            {
                "from": 119,
                "to": 120,
                "label": "BACKTRACK\nfor clause: append([], Y, Y)because of non-unification"
            },
            {
                "from": 120,
                "to": 134,
                "label": "EVAL with clause\nappend(.(X23, X24), X25, .(X23, X26)) :- append(X24, X25, X26).\nand substitutionT18 -> T33,\nX23 -> T33,\nT17 -> .(T33, T32),\nX24 -> .(T33, T32),\nT16 -> T31,\nX25 -> T31,\nX26 -> T32,\nT28 -> .(T33, T32),\nT29 -> T31,\nT30 -> T32,\nT27 -> T33"
            },
            {
                "from": 120,
                "to": 135,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 134,
                "to": 7,
                "label": "INSTANCE with matching:\nT18 -> T33\nT17 -> T32\nT16 -> T31"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(44)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f1_in -> U1(f7_in)
   U1(f7_out1) -> f1_out1
   f7_in -> U2(f7_in)
   U2(f7_out1) -> f7_out1

Q is empty.

----------------------------------------

(45) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1)) = 2*x_1
   POL(U2(x_1)) = 2*x_1
   POL(f1_in) = 1
   POL(f1_out1) = 0
   POL(f7_in) = 0
   POL(f7_out1) = 2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f1_in -> U1(f7_in)
   U1(f7_out1) -> f1_out1
   U2(f7_out1) -> f7_out1




----------------------------------------

(46)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f7_in -> U2(f7_in)

Q is empty.

----------------------------------------

(47) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(48)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f7_in -> U2(f7_in)

The set Q consists of the following terms:

   f7_in


----------------------------------------

(49) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F7_IN -> F7_IN

The TRS R consists of the following rules:

   f7_in -> U2(f7_in)

The set Q consists of the following terms:

   f7_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F7_IN -> F7_IN

R is empty.
The set Q consists of the following terms:

   f7_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(53) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f7_in


----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F7_IN -> F7_IN

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.