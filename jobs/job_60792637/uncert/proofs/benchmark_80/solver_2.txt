YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/LhSaU.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

t(g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 2 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) PiDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) PiDP
        (24) PiDPToQDPProof [SOUND, 0 ms]
        (25) QDP
        (26) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (27) YES
    (28) PiDP
        (29) UsableRulesProof [EQUIVALENT, 0 ms]
        (30) PiDP
        (31) PiDPToQDPProof [SOUND, 0 ms]
        (32) QDP
        (33) MRRProof [EQUIVALENT, 17 ms]
        (34) QDP
        (35) PisEmptyProof [EQUIVALENT, 0 ms]
        (36) YES


----------------------------------------

(0)
Obligation:
Clauses:

t(N) :- ','(ll(N, Xs), ','(select(X1, Xs, Xs1), ','(ll(M, Xs1), t(M)))).
t(0).
ll(s(N), .(X, Xs)) :- ll(N, Xs).
ll(0, []).
select(X, .(Y, Xs), .(Y, Ys)) :- select(X, Xs, Ys).
select(X, .(X, Xs), Xs).


Query: t(g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

t_in_1: (b)

ll_in_2: (b,f) (f,b)

select_in_3: (f,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   t_in_g(N) -> U1_g(N, ll_in_ga(N, Xs))
   ll_in_ga(s(N), .(X, Xs)) -> U5_ga(N, X, Xs, ll_in_ga(N, Xs))
   ll_in_ga(0, []) -> ll_out_ga(0, [])
   U5_ga(N, X, Xs, ll_out_ga(N, Xs)) -> ll_out_ga(s(N), .(X, Xs))
   U1_g(N, ll_out_ga(N, Xs)) -> U2_g(N, select_in_aga(X1, Xs, Xs1))
   select_in_aga(X, .(Y, Xs), .(Y, Ys)) -> U6_aga(X, Y, Xs, Ys, select_in_aga(X, Xs, Ys))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   U6_aga(X, Y, Xs, Ys, select_out_aga(X, Xs, Ys)) -> select_out_aga(X, .(Y, Xs), .(Y, Ys))
   U2_g(N, select_out_aga(X1, Xs, Xs1)) -> U3_g(N, ll_in_ag(M, Xs1))
   ll_in_ag(s(N), .(X, Xs)) -> U5_ag(N, X, Xs, ll_in_ag(N, Xs))
   ll_in_ag(0, []) -> ll_out_ag(0, [])
   U5_ag(N, X, Xs, ll_out_ag(N, Xs)) -> ll_out_ag(s(N), .(X, Xs))
   U3_g(N, ll_out_ag(M, Xs1)) -> U4_g(N, t_in_g(M))
   t_in_g(0) -> t_out_g(0)
   U4_g(N, t_out_g(M)) -> t_out_g(N)

The argument filtering Pi contains the following mapping:
t_in_g(x1)  =  t_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

ll_in_ga(x1, x2)  =  ll_in_ga(x1)

s(x1)  =  s(x1)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

0  =  0

ll_out_ga(x1, x2)  =  ll_out_ga(x2)

.(x1, x2)  =  .(x2)

U2_g(x1, x2)  =  U2_g(x2)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

U6_aga(x1, x2, x3, x4, x5)  =  U6_aga(x5)

select_out_aga(x1, x2, x3)  =  select_out_aga(x3)

U3_g(x1, x2)  =  U3_g(x2)

ll_in_ag(x1, x2)  =  ll_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x4)

[]  =  []

ll_out_ag(x1, x2)  =  ll_out_ag(x1)

U4_g(x1, x2)  =  U4_g(x2)

t_out_g(x1)  =  t_out_g





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   t_in_g(N) -> U1_g(N, ll_in_ga(N, Xs))
   ll_in_ga(s(N), .(X, Xs)) -> U5_ga(N, X, Xs, ll_in_ga(N, Xs))
   ll_in_ga(0, []) -> ll_out_ga(0, [])
   U5_ga(N, X, Xs, ll_out_ga(N, Xs)) -> ll_out_ga(s(N), .(X, Xs))
   U1_g(N, ll_out_ga(N, Xs)) -> U2_g(N, select_in_aga(X1, Xs, Xs1))
   select_in_aga(X, .(Y, Xs), .(Y, Ys)) -> U6_aga(X, Y, Xs, Ys, select_in_aga(X, Xs, Ys))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   U6_aga(X, Y, Xs, Ys, select_out_aga(X, Xs, Ys)) -> select_out_aga(X, .(Y, Xs), .(Y, Ys))
   U2_g(N, select_out_aga(X1, Xs, Xs1)) -> U3_g(N, ll_in_ag(M, Xs1))
   ll_in_ag(s(N), .(X, Xs)) -> U5_ag(N, X, Xs, ll_in_ag(N, Xs))
   ll_in_ag(0, []) -> ll_out_ag(0, [])
   U5_ag(N, X, Xs, ll_out_ag(N, Xs)) -> ll_out_ag(s(N), .(X, Xs))
   U3_g(N, ll_out_ag(M, Xs1)) -> U4_g(N, t_in_g(M))
   t_in_g(0) -> t_out_g(0)
   U4_g(N, t_out_g(M)) -> t_out_g(N)

The argument filtering Pi contains the following mapping:
t_in_g(x1)  =  t_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

ll_in_ga(x1, x2)  =  ll_in_ga(x1)

s(x1)  =  s(x1)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

0  =  0

ll_out_ga(x1, x2)  =  ll_out_ga(x2)

.(x1, x2)  =  .(x2)

U2_g(x1, x2)  =  U2_g(x2)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

U6_aga(x1, x2, x3, x4, x5)  =  U6_aga(x5)

select_out_aga(x1, x2, x3)  =  select_out_aga(x3)

U3_g(x1, x2)  =  U3_g(x2)

ll_in_ag(x1, x2)  =  ll_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x4)

[]  =  []

ll_out_ag(x1, x2)  =  ll_out_ag(x1)

U4_g(x1, x2)  =  U4_g(x2)

t_out_g(x1)  =  t_out_g



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   T_IN_G(N) -> U1_G(N, ll_in_ga(N, Xs))
   T_IN_G(N) -> LL_IN_GA(N, Xs)
   LL_IN_GA(s(N), .(X, Xs)) -> U5_GA(N, X, Xs, ll_in_ga(N, Xs))
   LL_IN_GA(s(N), .(X, Xs)) -> LL_IN_GA(N, Xs)
   U1_G(N, ll_out_ga(N, Xs)) -> U2_G(N, select_in_aga(X1, Xs, Xs1))
   U1_G(N, ll_out_ga(N, Xs)) -> SELECT_IN_AGA(X1, Xs, Xs1)
   SELECT_IN_AGA(X, .(Y, Xs), .(Y, Ys)) -> U6_AGA(X, Y, Xs, Ys, select_in_aga(X, Xs, Ys))
   SELECT_IN_AGA(X, .(Y, Xs), .(Y, Ys)) -> SELECT_IN_AGA(X, Xs, Ys)
   U2_G(N, select_out_aga(X1, Xs, Xs1)) -> U3_G(N, ll_in_ag(M, Xs1))
   U2_G(N, select_out_aga(X1, Xs, Xs1)) -> LL_IN_AG(M, Xs1)
   LL_IN_AG(s(N), .(X, Xs)) -> U5_AG(N, X, Xs, ll_in_ag(N, Xs))
   LL_IN_AG(s(N), .(X, Xs)) -> LL_IN_AG(N, Xs)
   U3_G(N, ll_out_ag(M, Xs1)) -> U4_G(N, t_in_g(M))
   U3_G(N, ll_out_ag(M, Xs1)) -> T_IN_G(M)

The TRS R consists of the following rules:

   t_in_g(N) -> U1_g(N, ll_in_ga(N, Xs))
   ll_in_ga(s(N), .(X, Xs)) -> U5_ga(N, X, Xs, ll_in_ga(N, Xs))
   ll_in_ga(0, []) -> ll_out_ga(0, [])
   U5_ga(N, X, Xs, ll_out_ga(N, Xs)) -> ll_out_ga(s(N), .(X, Xs))
   U1_g(N, ll_out_ga(N, Xs)) -> U2_g(N, select_in_aga(X1, Xs, Xs1))
   select_in_aga(X, .(Y, Xs), .(Y, Ys)) -> U6_aga(X, Y, Xs, Ys, select_in_aga(X, Xs, Ys))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   U6_aga(X, Y, Xs, Ys, select_out_aga(X, Xs, Ys)) -> select_out_aga(X, .(Y, Xs), .(Y, Ys))
   U2_g(N, select_out_aga(X1, Xs, Xs1)) -> U3_g(N, ll_in_ag(M, Xs1))
   ll_in_ag(s(N), .(X, Xs)) -> U5_ag(N, X, Xs, ll_in_ag(N, Xs))
   ll_in_ag(0, []) -> ll_out_ag(0, [])
   U5_ag(N, X, Xs, ll_out_ag(N, Xs)) -> ll_out_ag(s(N), .(X, Xs))
   U3_g(N, ll_out_ag(M, Xs1)) -> U4_g(N, t_in_g(M))
   t_in_g(0) -> t_out_g(0)
   U4_g(N, t_out_g(M)) -> t_out_g(N)

The argument filtering Pi contains the following mapping:
t_in_g(x1)  =  t_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

ll_in_ga(x1, x2)  =  ll_in_ga(x1)

s(x1)  =  s(x1)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

0  =  0

ll_out_ga(x1, x2)  =  ll_out_ga(x2)

.(x1, x2)  =  .(x2)

U2_g(x1, x2)  =  U2_g(x2)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

U6_aga(x1, x2, x3, x4, x5)  =  U6_aga(x5)

select_out_aga(x1, x2, x3)  =  select_out_aga(x3)

U3_g(x1, x2)  =  U3_g(x2)

ll_in_ag(x1, x2)  =  ll_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x4)

[]  =  []

ll_out_ag(x1, x2)  =  ll_out_ag(x1)

U4_g(x1, x2)  =  U4_g(x2)

t_out_g(x1)  =  t_out_g

T_IN_G(x1)  =  T_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x2)

LL_IN_GA(x1, x2)  =  LL_IN_GA(x1)

U5_GA(x1, x2, x3, x4)  =  U5_GA(x4)

U2_G(x1, x2)  =  U2_G(x2)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U6_AGA(x1, x2, x3, x4, x5)  =  U6_AGA(x5)

U3_G(x1, x2)  =  U3_G(x2)

LL_IN_AG(x1, x2)  =  LL_IN_AG(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x4)

U4_G(x1, x2)  =  U4_G(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   T_IN_G(N) -> U1_G(N, ll_in_ga(N, Xs))
   T_IN_G(N) -> LL_IN_GA(N, Xs)
   LL_IN_GA(s(N), .(X, Xs)) -> U5_GA(N, X, Xs, ll_in_ga(N, Xs))
   LL_IN_GA(s(N), .(X, Xs)) -> LL_IN_GA(N, Xs)
   U1_G(N, ll_out_ga(N, Xs)) -> U2_G(N, select_in_aga(X1, Xs, Xs1))
   U1_G(N, ll_out_ga(N, Xs)) -> SELECT_IN_AGA(X1, Xs, Xs1)
   SELECT_IN_AGA(X, .(Y, Xs), .(Y, Ys)) -> U6_AGA(X, Y, Xs, Ys, select_in_aga(X, Xs, Ys))
   SELECT_IN_AGA(X, .(Y, Xs), .(Y, Ys)) -> SELECT_IN_AGA(X, Xs, Ys)
   U2_G(N, select_out_aga(X1, Xs, Xs1)) -> U3_G(N, ll_in_ag(M, Xs1))
   U2_G(N, select_out_aga(X1, Xs, Xs1)) -> LL_IN_AG(M, Xs1)
   LL_IN_AG(s(N), .(X, Xs)) -> U5_AG(N, X, Xs, ll_in_ag(N, Xs))
   LL_IN_AG(s(N), .(X, Xs)) -> LL_IN_AG(N, Xs)
   U3_G(N, ll_out_ag(M, Xs1)) -> U4_G(N, t_in_g(M))
   U3_G(N, ll_out_ag(M, Xs1)) -> T_IN_G(M)

The TRS R consists of the following rules:

   t_in_g(N) -> U1_g(N, ll_in_ga(N, Xs))
   ll_in_ga(s(N), .(X, Xs)) -> U5_ga(N, X, Xs, ll_in_ga(N, Xs))
   ll_in_ga(0, []) -> ll_out_ga(0, [])
   U5_ga(N, X, Xs, ll_out_ga(N, Xs)) -> ll_out_ga(s(N), .(X, Xs))
   U1_g(N, ll_out_ga(N, Xs)) -> U2_g(N, select_in_aga(X1, Xs, Xs1))
   select_in_aga(X, .(Y, Xs), .(Y, Ys)) -> U6_aga(X, Y, Xs, Ys, select_in_aga(X, Xs, Ys))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   U6_aga(X, Y, Xs, Ys, select_out_aga(X, Xs, Ys)) -> select_out_aga(X, .(Y, Xs), .(Y, Ys))
   U2_g(N, select_out_aga(X1, Xs, Xs1)) -> U3_g(N, ll_in_ag(M, Xs1))
   ll_in_ag(s(N), .(X, Xs)) -> U5_ag(N, X, Xs, ll_in_ag(N, Xs))
   ll_in_ag(0, []) -> ll_out_ag(0, [])
   U5_ag(N, X, Xs, ll_out_ag(N, Xs)) -> ll_out_ag(s(N), .(X, Xs))
   U3_g(N, ll_out_ag(M, Xs1)) -> U4_g(N, t_in_g(M))
   t_in_g(0) -> t_out_g(0)
   U4_g(N, t_out_g(M)) -> t_out_g(N)

The argument filtering Pi contains the following mapping:
t_in_g(x1)  =  t_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

ll_in_ga(x1, x2)  =  ll_in_ga(x1)

s(x1)  =  s(x1)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

0  =  0

ll_out_ga(x1, x2)  =  ll_out_ga(x2)

.(x1, x2)  =  .(x2)

U2_g(x1, x2)  =  U2_g(x2)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

U6_aga(x1, x2, x3, x4, x5)  =  U6_aga(x5)

select_out_aga(x1, x2, x3)  =  select_out_aga(x3)

U3_g(x1, x2)  =  U3_g(x2)

ll_in_ag(x1, x2)  =  ll_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x4)

[]  =  []

ll_out_ag(x1, x2)  =  ll_out_ag(x1)

U4_g(x1, x2)  =  U4_g(x2)

t_out_g(x1)  =  t_out_g

T_IN_G(x1)  =  T_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x2)

LL_IN_GA(x1, x2)  =  LL_IN_GA(x1)

U5_GA(x1, x2, x3, x4)  =  U5_GA(x4)

U2_G(x1, x2)  =  U2_G(x2)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U6_AGA(x1, x2, x3, x4, x5)  =  U6_AGA(x5)

U3_G(x1, x2)  =  U3_G(x2)

LL_IN_AG(x1, x2)  =  LL_IN_AG(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x4)

U4_G(x1, x2)  =  U4_G(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 4 SCCs with 7 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LL_IN_AG(s(N), .(X, Xs)) -> LL_IN_AG(N, Xs)

The TRS R consists of the following rules:

   t_in_g(N) -> U1_g(N, ll_in_ga(N, Xs))
   ll_in_ga(s(N), .(X, Xs)) -> U5_ga(N, X, Xs, ll_in_ga(N, Xs))
   ll_in_ga(0, []) -> ll_out_ga(0, [])
   U5_ga(N, X, Xs, ll_out_ga(N, Xs)) -> ll_out_ga(s(N), .(X, Xs))
   U1_g(N, ll_out_ga(N, Xs)) -> U2_g(N, select_in_aga(X1, Xs, Xs1))
   select_in_aga(X, .(Y, Xs), .(Y, Ys)) -> U6_aga(X, Y, Xs, Ys, select_in_aga(X, Xs, Ys))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   U6_aga(X, Y, Xs, Ys, select_out_aga(X, Xs, Ys)) -> select_out_aga(X, .(Y, Xs), .(Y, Ys))
   U2_g(N, select_out_aga(X1, Xs, Xs1)) -> U3_g(N, ll_in_ag(M, Xs1))
   ll_in_ag(s(N), .(X, Xs)) -> U5_ag(N, X, Xs, ll_in_ag(N, Xs))
   ll_in_ag(0, []) -> ll_out_ag(0, [])
   U5_ag(N, X, Xs, ll_out_ag(N, Xs)) -> ll_out_ag(s(N), .(X, Xs))
   U3_g(N, ll_out_ag(M, Xs1)) -> U4_g(N, t_in_g(M))
   t_in_g(0) -> t_out_g(0)
   U4_g(N, t_out_g(M)) -> t_out_g(N)

The argument filtering Pi contains the following mapping:
t_in_g(x1)  =  t_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

ll_in_ga(x1, x2)  =  ll_in_ga(x1)

s(x1)  =  s(x1)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

0  =  0

ll_out_ga(x1, x2)  =  ll_out_ga(x2)

.(x1, x2)  =  .(x2)

U2_g(x1, x2)  =  U2_g(x2)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

U6_aga(x1, x2, x3, x4, x5)  =  U6_aga(x5)

select_out_aga(x1, x2, x3)  =  select_out_aga(x3)

U3_g(x1, x2)  =  U3_g(x2)

ll_in_ag(x1, x2)  =  ll_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x4)

[]  =  []

ll_out_ag(x1, x2)  =  ll_out_ag(x1)

U4_g(x1, x2)  =  U4_g(x2)

t_out_g(x1)  =  t_out_g

LL_IN_AG(x1, x2)  =  LL_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LL_IN_AG(s(N), .(X, Xs)) -> LL_IN_AG(N, Xs)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

.(x1, x2)  =  .(x2)

LL_IN_AG(x1, x2)  =  LL_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LL_IN_AG(.(Xs)) -> LL_IN_AG(Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LL_IN_AG(.(Xs)) -> LL_IN_AG(Xs)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Xs), .(Y, Ys)) -> SELECT_IN_AGA(X, Xs, Ys)

The TRS R consists of the following rules:

   t_in_g(N) -> U1_g(N, ll_in_ga(N, Xs))
   ll_in_ga(s(N), .(X, Xs)) -> U5_ga(N, X, Xs, ll_in_ga(N, Xs))
   ll_in_ga(0, []) -> ll_out_ga(0, [])
   U5_ga(N, X, Xs, ll_out_ga(N, Xs)) -> ll_out_ga(s(N), .(X, Xs))
   U1_g(N, ll_out_ga(N, Xs)) -> U2_g(N, select_in_aga(X1, Xs, Xs1))
   select_in_aga(X, .(Y, Xs), .(Y, Ys)) -> U6_aga(X, Y, Xs, Ys, select_in_aga(X, Xs, Ys))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   U6_aga(X, Y, Xs, Ys, select_out_aga(X, Xs, Ys)) -> select_out_aga(X, .(Y, Xs), .(Y, Ys))
   U2_g(N, select_out_aga(X1, Xs, Xs1)) -> U3_g(N, ll_in_ag(M, Xs1))
   ll_in_ag(s(N), .(X, Xs)) -> U5_ag(N, X, Xs, ll_in_ag(N, Xs))
   ll_in_ag(0, []) -> ll_out_ag(0, [])
   U5_ag(N, X, Xs, ll_out_ag(N, Xs)) -> ll_out_ag(s(N), .(X, Xs))
   U3_g(N, ll_out_ag(M, Xs1)) -> U4_g(N, t_in_g(M))
   t_in_g(0) -> t_out_g(0)
   U4_g(N, t_out_g(M)) -> t_out_g(N)

The argument filtering Pi contains the following mapping:
t_in_g(x1)  =  t_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

ll_in_ga(x1, x2)  =  ll_in_ga(x1)

s(x1)  =  s(x1)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

0  =  0

ll_out_ga(x1, x2)  =  ll_out_ga(x2)

.(x1, x2)  =  .(x2)

U2_g(x1, x2)  =  U2_g(x2)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

U6_aga(x1, x2, x3, x4, x5)  =  U6_aga(x5)

select_out_aga(x1, x2, x3)  =  select_out_aga(x3)

U3_g(x1, x2)  =  U3_g(x2)

ll_in_ag(x1, x2)  =  ll_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x4)

[]  =  []

ll_out_ag(x1, x2)  =  ll_out_ag(x1)

U4_g(x1, x2)  =  U4_g(x2)

t_out_g(x1)  =  t_out_g

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Xs), .(Y, Ys)) -> SELECT_IN_AGA(X, Xs, Ys)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(.(Xs)) -> SELECT_IN_AGA(Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SELECT_IN_AGA(.(Xs)) -> SELECT_IN_AGA(Xs)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LL_IN_GA(s(N), .(X, Xs)) -> LL_IN_GA(N, Xs)

The TRS R consists of the following rules:

   t_in_g(N) -> U1_g(N, ll_in_ga(N, Xs))
   ll_in_ga(s(N), .(X, Xs)) -> U5_ga(N, X, Xs, ll_in_ga(N, Xs))
   ll_in_ga(0, []) -> ll_out_ga(0, [])
   U5_ga(N, X, Xs, ll_out_ga(N, Xs)) -> ll_out_ga(s(N), .(X, Xs))
   U1_g(N, ll_out_ga(N, Xs)) -> U2_g(N, select_in_aga(X1, Xs, Xs1))
   select_in_aga(X, .(Y, Xs), .(Y, Ys)) -> U6_aga(X, Y, Xs, Ys, select_in_aga(X, Xs, Ys))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   U6_aga(X, Y, Xs, Ys, select_out_aga(X, Xs, Ys)) -> select_out_aga(X, .(Y, Xs), .(Y, Ys))
   U2_g(N, select_out_aga(X1, Xs, Xs1)) -> U3_g(N, ll_in_ag(M, Xs1))
   ll_in_ag(s(N), .(X, Xs)) -> U5_ag(N, X, Xs, ll_in_ag(N, Xs))
   ll_in_ag(0, []) -> ll_out_ag(0, [])
   U5_ag(N, X, Xs, ll_out_ag(N, Xs)) -> ll_out_ag(s(N), .(X, Xs))
   U3_g(N, ll_out_ag(M, Xs1)) -> U4_g(N, t_in_g(M))
   t_in_g(0) -> t_out_g(0)
   U4_g(N, t_out_g(M)) -> t_out_g(N)

The argument filtering Pi contains the following mapping:
t_in_g(x1)  =  t_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

ll_in_ga(x1, x2)  =  ll_in_ga(x1)

s(x1)  =  s(x1)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

0  =  0

ll_out_ga(x1, x2)  =  ll_out_ga(x2)

.(x1, x2)  =  .(x2)

U2_g(x1, x2)  =  U2_g(x2)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

U6_aga(x1, x2, x3, x4, x5)  =  U6_aga(x5)

select_out_aga(x1, x2, x3)  =  select_out_aga(x3)

U3_g(x1, x2)  =  U3_g(x2)

ll_in_ag(x1, x2)  =  ll_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x4)

[]  =  []

ll_out_ag(x1, x2)  =  ll_out_ag(x1)

U4_g(x1, x2)  =  U4_g(x2)

t_out_g(x1)  =  t_out_g

LL_IN_GA(x1, x2)  =  LL_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(23)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LL_IN_GA(s(N), .(X, Xs)) -> LL_IN_GA(N, Xs)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

.(x1, x2)  =  .(x2)

LL_IN_GA(x1, x2)  =  LL_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(24) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   LL_IN_GA(s(N)) -> LL_IN_GA(N)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LL_IN_GA(s(N)) -> LL_IN_GA(N)
The graph contains the following edges 1 > 1


----------------------------------------

(27)
YES

----------------------------------------

(28)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_G(N, ll_out_ga(N, Xs)) -> U2_G(N, select_in_aga(X1, Xs, Xs1))
   U2_G(N, select_out_aga(X1, Xs, Xs1)) -> U3_G(N, ll_in_ag(M, Xs1))
   U3_G(N, ll_out_ag(M, Xs1)) -> T_IN_G(M)
   T_IN_G(N) -> U1_G(N, ll_in_ga(N, Xs))

The TRS R consists of the following rules:

   t_in_g(N) -> U1_g(N, ll_in_ga(N, Xs))
   ll_in_ga(s(N), .(X, Xs)) -> U5_ga(N, X, Xs, ll_in_ga(N, Xs))
   ll_in_ga(0, []) -> ll_out_ga(0, [])
   U5_ga(N, X, Xs, ll_out_ga(N, Xs)) -> ll_out_ga(s(N), .(X, Xs))
   U1_g(N, ll_out_ga(N, Xs)) -> U2_g(N, select_in_aga(X1, Xs, Xs1))
   select_in_aga(X, .(Y, Xs), .(Y, Ys)) -> U6_aga(X, Y, Xs, Ys, select_in_aga(X, Xs, Ys))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   U6_aga(X, Y, Xs, Ys, select_out_aga(X, Xs, Ys)) -> select_out_aga(X, .(Y, Xs), .(Y, Ys))
   U2_g(N, select_out_aga(X1, Xs, Xs1)) -> U3_g(N, ll_in_ag(M, Xs1))
   ll_in_ag(s(N), .(X, Xs)) -> U5_ag(N, X, Xs, ll_in_ag(N, Xs))
   ll_in_ag(0, []) -> ll_out_ag(0, [])
   U5_ag(N, X, Xs, ll_out_ag(N, Xs)) -> ll_out_ag(s(N), .(X, Xs))
   U3_g(N, ll_out_ag(M, Xs1)) -> U4_g(N, t_in_g(M))
   t_in_g(0) -> t_out_g(0)
   U4_g(N, t_out_g(M)) -> t_out_g(N)

The argument filtering Pi contains the following mapping:
t_in_g(x1)  =  t_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

ll_in_ga(x1, x2)  =  ll_in_ga(x1)

s(x1)  =  s(x1)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

0  =  0

ll_out_ga(x1, x2)  =  ll_out_ga(x2)

.(x1, x2)  =  .(x2)

U2_g(x1, x2)  =  U2_g(x2)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

U6_aga(x1, x2, x3, x4, x5)  =  U6_aga(x5)

select_out_aga(x1, x2, x3)  =  select_out_aga(x3)

U3_g(x1, x2)  =  U3_g(x2)

ll_in_ag(x1, x2)  =  ll_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x4)

[]  =  []

ll_out_ag(x1, x2)  =  ll_out_ag(x1)

U4_g(x1, x2)  =  U4_g(x2)

t_out_g(x1)  =  t_out_g

T_IN_G(x1)  =  T_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x2)

U2_G(x1, x2)  =  U2_G(x2)

U3_G(x1, x2)  =  U3_G(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(30)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_G(N, ll_out_ga(N, Xs)) -> U2_G(N, select_in_aga(X1, Xs, Xs1))
   U2_G(N, select_out_aga(X1, Xs, Xs1)) -> U3_G(N, ll_in_ag(M, Xs1))
   U3_G(N, ll_out_ag(M, Xs1)) -> T_IN_G(M)
   T_IN_G(N) -> U1_G(N, ll_in_ga(N, Xs))

The TRS R consists of the following rules:

   select_in_aga(X, .(Y, Xs), .(Y, Ys)) -> U6_aga(X, Y, Xs, Ys, select_in_aga(X, Xs, Ys))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   ll_in_ag(s(N), .(X, Xs)) -> U5_ag(N, X, Xs, ll_in_ag(N, Xs))
   ll_in_ag(0, []) -> ll_out_ag(0, [])
   ll_in_ga(s(N), .(X, Xs)) -> U5_ga(N, X, Xs, ll_in_ga(N, Xs))
   ll_in_ga(0, []) -> ll_out_ga(0, [])
   U6_aga(X, Y, Xs, Ys, select_out_aga(X, Xs, Ys)) -> select_out_aga(X, .(Y, Xs), .(Y, Ys))
   U5_ag(N, X, Xs, ll_out_ag(N, Xs)) -> ll_out_ag(s(N), .(X, Xs))
   U5_ga(N, X, Xs, ll_out_ga(N, Xs)) -> ll_out_ga(s(N), .(X, Xs))

The argument filtering Pi contains the following mapping:
ll_in_ga(x1, x2)  =  ll_in_ga(x1)

s(x1)  =  s(x1)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

0  =  0

ll_out_ga(x1, x2)  =  ll_out_ga(x2)

.(x1, x2)  =  .(x2)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

U6_aga(x1, x2, x3, x4, x5)  =  U6_aga(x5)

select_out_aga(x1, x2, x3)  =  select_out_aga(x3)

ll_in_ag(x1, x2)  =  ll_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x4)

[]  =  []

ll_out_ag(x1, x2)  =  ll_out_ag(x1)

T_IN_G(x1)  =  T_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x2)

U2_G(x1, x2)  =  U2_G(x2)

U3_G(x1, x2)  =  U3_G(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(31) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_G(ll_out_ga(Xs)) -> U2_G(select_in_aga(Xs))
   U2_G(select_out_aga(Xs1)) -> U3_G(ll_in_ag(Xs1))
   U3_G(ll_out_ag(M)) -> T_IN_G(M)
   T_IN_G(N) -> U1_G(ll_in_ga(N))

The TRS R consists of the following rules:

   select_in_aga(.(Xs)) -> U6_aga(select_in_aga(Xs))
   select_in_aga(.(Xs)) -> select_out_aga(Xs)
   ll_in_ag(.(Xs)) -> U5_ag(ll_in_ag(Xs))
   ll_in_ag([]) -> ll_out_ag(0)
   ll_in_ga(s(N)) -> U5_ga(ll_in_ga(N))
   ll_in_ga(0) -> ll_out_ga([])
   U6_aga(select_out_aga(Ys)) -> select_out_aga(.(Ys))
   U5_ag(ll_out_ag(N)) -> ll_out_ag(s(N))
   U5_ga(ll_out_ga(Xs)) -> ll_out_ga(.(Xs))

The set Q consists of the following terms:

   select_in_aga(x0)
   ll_in_ag(x0)
   ll_in_ga(x0)
   U6_aga(x0)
   U5_ag(x0)
   U5_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(33) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U1_G(ll_out_ga(Xs)) -> U2_G(select_in_aga(Xs))
   U2_G(select_out_aga(Xs1)) -> U3_G(ll_in_ag(Xs1))
   U3_G(ll_out_ag(M)) -> T_IN_G(M)
   T_IN_G(N) -> U1_G(ll_in_ga(N))

Strictly oriented rules of the TRS R:

   select_in_aga(.(Xs)) -> U6_aga(select_in_aga(Xs))
   select_in_aga(.(Xs)) -> select_out_aga(Xs)
   ll_in_ag(.(Xs)) -> U5_ag(ll_in_ag(Xs))
   ll_in_ag([]) -> ll_out_ag(0)
   ll_in_ga(s(N)) -> U5_ga(ll_in_ga(N))
   ll_in_ga(0) -> ll_out_ga([])
   U6_aga(select_out_aga(Ys)) -> select_out_aga(.(Ys))
   U5_ag(ll_out_ag(N)) -> ll_out_ag(s(N))
   U5_ga(ll_out_ga(Xs)) -> ll_out_ga(.(Xs))

Used ordering: Knuth-Bendix order [KBO] with precedence:s_1 > select_in_aga_1 > ll_in_ag_1 > 0 > U6_aga_1 > U5_ag_1 > select_out_aga_1 > ll_in_ga_1 > U5_ga_1 > ll_out_ga_1 > ll_out_ag_1 > U1_G_1 > [] > U2_G_1 > U3_G_1 > T_IN_G_1 > ._1

and weight map:

   []=2
   0=1
   select_in_aga_1=2
   ._1=8
   U6_aga_1=8
   select_out_aga_1=10
   ll_in_ag_1=11
   U5_ag_1=8
   ll_out_ag_1=7
   ll_in_ga_1=3
   s_1=8
   U5_ga_1=8
   ll_out_ga_1=1
   U1_G_1=4
   U2_G_1=2
   U3_G_1=1
   T_IN_G_1=8

The variable weight is 1

----------------------------------------

(34)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   select_in_aga(x0)
   ll_in_ag(x0)
   ll_in_ga(x0)
   U6_aga(x0)
   U5_ag(x0)
   U5_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(35) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(36)
YES
