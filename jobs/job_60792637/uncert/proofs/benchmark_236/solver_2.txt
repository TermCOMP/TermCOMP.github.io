YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/jZqg5.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

times(g,g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) PiDPToQDPProof [SOUND, 0 ms]
(10) QDP
(11) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Clauses:

times(X, Y, Z) :- mult(X, Y, 0, Z).
mult(0, Y, 0, 0).
mult(s(U), Y, 0, Z) :- mult(U, Y, Y, Z).
mult(X, Y, s(W), s(Z)) :- mult(X, Y, W, Z).


Query: times(g,g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

times_in_3: (b,b,f)

mult_in_4: (b,b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   times_in_gga(X, Y, Z) -> U1_gga(X, Y, Z, mult_in_ggga(X, Y, 0, Z))
   mult_in_ggga(0, Y, 0, 0) -> mult_out_ggga(0, Y, 0, 0)
   mult_in_ggga(s(U), Y, 0, Z) -> U2_ggga(U, Y, Z, mult_in_ggga(U, Y, Y, Z))
   mult_in_ggga(X, Y, s(W), s(Z)) -> U3_ggga(X, Y, W, Z, mult_in_ggga(X, Y, W, Z))
   U3_ggga(X, Y, W, Z, mult_out_ggga(X, Y, W, Z)) -> mult_out_ggga(X, Y, s(W), s(Z))
   U2_ggga(U, Y, Z, mult_out_ggga(U, Y, Y, Z)) -> mult_out_ggga(s(U), Y, 0, Z)
   U1_gga(X, Y, Z, mult_out_ggga(X, Y, 0, Z)) -> times_out_gga(X, Y, Z)

The argument filtering Pi contains the following mapping:
times_in_gga(x1, x2, x3)  =  times_in_gga(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

mult_in_ggga(x1, x2, x3, x4)  =  mult_in_ggga(x1, x2, x3)

0  =  0

mult_out_ggga(x1, x2, x3, x4)  =  mult_out_ggga(x4)

s(x1)  =  s(x1)

U2_ggga(x1, x2, x3, x4)  =  U2_ggga(x4)

U3_ggga(x1, x2, x3, x4, x5)  =  U3_ggga(x5)

times_out_gga(x1, x2, x3)  =  times_out_gga(x3)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   times_in_gga(X, Y, Z) -> U1_gga(X, Y, Z, mult_in_ggga(X, Y, 0, Z))
   mult_in_ggga(0, Y, 0, 0) -> mult_out_ggga(0, Y, 0, 0)
   mult_in_ggga(s(U), Y, 0, Z) -> U2_ggga(U, Y, Z, mult_in_ggga(U, Y, Y, Z))
   mult_in_ggga(X, Y, s(W), s(Z)) -> U3_ggga(X, Y, W, Z, mult_in_ggga(X, Y, W, Z))
   U3_ggga(X, Y, W, Z, mult_out_ggga(X, Y, W, Z)) -> mult_out_ggga(X, Y, s(W), s(Z))
   U2_ggga(U, Y, Z, mult_out_ggga(U, Y, Y, Z)) -> mult_out_ggga(s(U), Y, 0, Z)
   U1_gga(X, Y, Z, mult_out_ggga(X, Y, 0, Z)) -> times_out_gga(X, Y, Z)

The argument filtering Pi contains the following mapping:
times_in_gga(x1, x2, x3)  =  times_in_gga(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

mult_in_ggga(x1, x2, x3, x4)  =  mult_in_ggga(x1, x2, x3)

0  =  0

mult_out_ggga(x1, x2, x3, x4)  =  mult_out_ggga(x4)

s(x1)  =  s(x1)

U2_ggga(x1, x2, x3, x4)  =  U2_ggga(x4)

U3_ggga(x1, x2, x3, x4, x5)  =  U3_ggga(x5)

times_out_gga(x1, x2, x3)  =  times_out_gga(x3)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   TIMES_IN_GGA(X, Y, Z) -> U1_GGA(X, Y, Z, mult_in_ggga(X, Y, 0, Z))
   TIMES_IN_GGA(X, Y, Z) -> MULT_IN_GGGA(X, Y, 0, Z)
   MULT_IN_GGGA(s(U), Y, 0, Z) -> U2_GGGA(U, Y, Z, mult_in_ggga(U, Y, Y, Z))
   MULT_IN_GGGA(s(U), Y, 0, Z) -> MULT_IN_GGGA(U, Y, Y, Z)
   MULT_IN_GGGA(X, Y, s(W), s(Z)) -> U3_GGGA(X, Y, W, Z, mult_in_ggga(X, Y, W, Z))
   MULT_IN_GGGA(X, Y, s(W), s(Z)) -> MULT_IN_GGGA(X, Y, W, Z)

The TRS R consists of the following rules:

   times_in_gga(X, Y, Z) -> U1_gga(X, Y, Z, mult_in_ggga(X, Y, 0, Z))
   mult_in_ggga(0, Y, 0, 0) -> mult_out_ggga(0, Y, 0, 0)
   mult_in_ggga(s(U), Y, 0, Z) -> U2_ggga(U, Y, Z, mult_in_ggga(U, Y, Y, Z))
   mult_in_ggga(X, Y, s(W), s(Z)) -> U3_ggga(X, Y, W, Z, mult_in_ggga(X, Y, W, Z))
   U3_ggga(X, Y, W, Z, mult_out_ggga(X, Y, W, Z)) -> mult_out_ggga(X, Y, s(W), s(Z))
   U2_ggga(U, Y, Z, mult_out_ggga(U, Y, Y, Z)) -> mult_out_ggga(s(U), Y, 0, Z)
   U1_gga(X, Y, Z, mult_out_ggga(X, Y, 0, Z)) -> times_out_gga(X, Y, Z)

The argument filtering Pi contains the following mapping:
times_in_gga(x1, x2, x3)  =  times_in_gga(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

mult_in_ggga(x1, x2, x3, x4)  =  mult_in_ggga(x1, x2, x3)

0  =  0

mult_out_ggga(x1, x2, x3, x4)  =  mult_out_ggga(x4)

s(x1)  =  s(x1)

U2_ggga(x1, x2, x3, x4)  =  U2_ggga(x4)

U3_ggga(x1, x2, x3, x4, x5)  =  U3_ggga(x5)

times_out_gga(x1, x2, x3)  =  times_out_gga(x3)

TIMES_IN_GGA(x1, x2, x3)  =  TIMES_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4)  =  U1_GGA(x4)

MULT_IN_GGGA(x1, x2, x3, x4)  =  MULT_IN_GGGA(x1, x2, x3)

U2_GGGA(x1, x2, x3, x4)  =  U2_GGGA(x4)

U3_GGGA(x1, x2, x3, x4, x5)  =  U3_GGGA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TIMES_IN_GGA(X, Y, Z) -> U1_GGA(X, Y, Z, mult_in_ggga(X, Y, 0, Z))
   TIMES_IN_GGA(X, Y, Z) -> MULT_IN_GGGA(X, Y, 0, Z)
   MULT_IN_GGGA(s(U), Y, 0, Z) -> U2_GGGA(U, Y, Z, mult_in_ggga(U, Y, Y, Z))
   MULT_IN_GGGA(s(U), Y, 0, Z) -> MULT_IN_GGGA(U, Y, Y, Z)
   MULT_IN_GGGA(X, Y, s(W), s(Z)) -> U3_GGGA(X, Y, W, Z, mult_in_ggga(X, Y, W, Z))
   MULT_IN_GGGA(X, Y, s(W), s(Z)) -> MULT_IN_GGGA(X, Y, W, Z)

The TRS R consists of the following rules:

   times_in_gga(X, Y, Z) -> U1_gga(X, Y, Z, mult_in_ggga(X, Y, 0, Z))
   mult_in_ggga(0, Y, 0, 0) -> mult_out_ggga(0, Y, 0, 0)
   mult_in_ggga(s(U), Y, 0, Z) -> U2_ggga(U, Y, Z, mult_in_ggga(U, Y, Y, Z))
   mult_in_ggga(X, Y, s(W), s(Z)) -> U3_ggga(X, Y, W, Z, mult_in_ggga(X, Y, W, Z))
   U3_ggga(X, Y, W, Z, mult_out_ggga(X, Y, W, Z)) -> mult_out_ggga(X, Y, s(W), s(Z))
   U2_ggga(U, Y, Z, mult_out_ggga(U, Y, Y, Z)) -> mult_out_ggga(s(U), Y, 0, Z)
   U1_gga(X, Y, Z, mult_out_ggga(X, Y, 0, Z)) -> times_out_gga(X, Y, Z)

The argument filtering Pi contains the following mapping:
times_in_gga(x1, x2, x3)  =  times_in_gga(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

mult_in_ggga(x1, x2, x3, x4)  =  mult_in_ggga(x1, x2, x3)

0  =  0

mult_out_ggga(x1, x2, x3, x4)  =  mult_out_ggga(x4)

s(x1)  =  s(x1)

U2_ggga(x1, x2, x3, x4)  =  U2_ggga(x4)

U3_ggga(x1, x2, x3, x4, x5)  =  U3_ggga(x5)

times_out_gga(x1, x2, x3)  =  times_out_gga(x3)

TIMES_IN_GGA(x1, x2, x3)  =  TIMES_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4)  =  U1_GGA(x4)

MULT_IN_GGGA(x1, x2, x3, x4)  =  MULT_IN_GGGA(x1, x2, x3)

U2_GGGA(x1, x2, x3, x4)  =  U2_GGGA(x4)

U3_GGGA(x1, x2, x3, x4, x5)  =  U3_GGGA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 4 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MULT_IN_GGGA(X, Y, s(W), s(Z)) -> MULT_IN_GGGA(X, Y, W, Z)
   MULT_IN_GGGA(s(U), Y, 0, Z) -> MULT_IN_GGGA(U, Y, Y, Z)

The TRS R consists of the following rules:

   times_in_gga(X, Y, Z) -> U1_gga(X, Y, Z, mult_in_ggga(X, Y, 0, Z))
   mult_in_ggga(0, Y, 0, 0) -> mult_out_ggga(0, Y, 0, 0)
   mult_in_ggga(s(U), Y, 0, Z) -> U2_ggga(U, Y, Z, mult_in_ggga(U, Y, Y, Z))
   mult_in_ggga(X, Y, s(W), s(Z)) -> U3_ggga(X, Y, W, Z, mult_in_ggga(X, Y, W, Z))
   U3_ggga(X, Y, W, Z, mult_out_ggga(X, Y, W, Z)) -> mult_out_ggga(X, Y, s(W), s(Z))
   U2_ggga(U, Y, Z, mult_out_ggga(U, Y, Y, Z)) -> mult_out_ggga(s(U), Y, 0, Z)
   U1_gga(X, Y, Z, mult_out_ggga(X, Y, 0, Z)) -> times_out_gga(X, Y, Z)

The argument filtering Pi contains the following mapping:
times_in_gga(x1, x2, x3)  =  times_in_gga(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

mult_in_ggga(x1, x2, x3, x4)  =  mult_in_ggga(x1, x2, x3)

0  =  0

mult_out_ggga(x1, x2, x3, x4)  =  mult_out_ggga(x4)

s(x1)  =  s(x1)

U2_ggga(x1, x2, x3, x4)  =  U2_ggga(x4)

U3_ggga(x1, x2, x3, x4, x5)  =  U3_ggga(x5)

times_out_gga(x1, x2, x3)  =  times_out_gga(x3)

MULT_IN_GGGA(x1, x2, x3, x4)  =  MULT_IN_GGGA(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MULT_IN_GGGA(X, Y, s(W), s(Z)) -> MULT_IN_GGGA(X, Y, W, Z)
   MULT_IN_GGGA(s(U), Y, 0, Z) -> MULT_IN_GGGA(U, Y, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
0  =  0

s(x1)  =  s(x1)

MULT_IN_GGGA(x1, x2, x3, x4)  =  MULT_IN_GGGA(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MULT_IN_GGGA(X, Y, s(W)) -> MULT_IN_GGGA(X, Y, W)
   MULT_IN_GGGA(s(U), Y, 0) -> MULT_IN_GGGA(U, Y, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MULT_IN_GGGA(X, Y, s(W)) -> MULT_IN_GGGA(X, Y, W)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


*MULT_IN_GGGA(s(U), Y, 0) -> MULT_IN_GGGA(U, Y, Y)
The graph contains the following edges 1 > 1, 2 >= 2, 2 >= 3


----------------------------------------

(12)
YES
