YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/uhubo.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

samefringe(g,g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) MRRProof [EQUIVALENT, 3 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) PiDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) PiDP
        (19) PiDPToQDPProof [SOUND, 0 ms]
        (20) QDP
        (21) MRRProof [EQUIVALENT, 6 ms]
        (22) QDP
        (23) PisEmptyProof [EQUIVALENT, 0 ms]
        (24) YES


----------------------------------------

(0)
Obligation:
Clauses:

gopher(nil, nil).
gopher(cons(nil, Y), cons(nil, Y)).
gopher(cons(cons(U, V), W), X) :- gopher(cons(U, cons(V, W)), X).
samefringe(nil, nil).
samefringe(cons(U, V), cons(X, Y)) :- ','(gopher(cons(U, V), cons(U1, V1)), ','(gopher(cons(X, Y), cons(X1, Y1)), samefringe(V1, Y1))).


Query: samefringe(g,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

samefringe_in_2: (b,b)

gopher_in_2: (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   samefringe_in_gg(nil, nil) -> samefringe_out_gg(nil, nil)
   samefringe_in_gg(cons(U, V), cons(X, Y)) -> U2_gg(U, V, X, Y, gopher_in_ga(cons(U, V), cons(U1, V1)))
   gopher_in_ga(nil, nil) -> gopher_out_ga(nil, nil)
   gopher_in_ga(cons(nil, Y), cons(nil, Y)) -> gopher_out_ga(cons(nil, Y), cons(nil, Y))
   gopher_in_ga(cons(cons(U, V), W), X) -> U1_ga(U, V, W, X, gopher_in_ga(cons(U, cons(V, W)), X))
   U1_ga(U, V, W, X, gopher_out_ga(cons(U, cons(V, W)), X)) -> gopher_out_ga(cons(cons(U, V), W), X)
   U2_gg(U, V, X, Y, gopher_out_ga(cons(U, V), cons(U1, V1))) -> U3_gg(U, V, X, Y, U1, V1, gopher_in_ga(cons(X, Y), cons(X1, Y1)))
   U3_gg(U, V, X, Y, U1, V1, gopher_out_ga(cons(X, Y), cons(X1, Y1))) -> U4_gg(U, V, X, Y, samefringe_in_gg(V1, Y1))
   U4_gg(U, V, X, Y, samefringe_out_gg(V1, Y1)) -> samefringe_out_gg(cons(U, V), cons(X, Y))

The argument filtering Pi contains the following mapping:
samefringe_in_gg(x1, x2)  =  samefringe_in_gg(x1, x2)

nil  =  nil

samefringe_out_gg(x1, x2)  =  samefringe_out_gg

cons(x1, x2)  =  cons(x1, x2)

U2_gg(x1, x2, x3, x4, x5)  =  U2_gg(x3, x4, x5)

gopher_in_ga(x1, x2)  =  gopher_in_ga(x1)

gopher_out_ga(x1, x2)  =  gopher_out_ga(x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

U3_gg(x1, x2, x3, x4, x5, x6, x7)  =  U3_gg(x6, x7)

U4_gg(x1, x2, x3, x4, x5)  =  U4_gg(x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   samefringe_in_gg(nil, nil) -> samefringe_out_gg(nil, nil)
   samefringe_in_gg(cons(U, V), cons(X, Y)) -> U2_gg(U, V, X, Y, gopher_in_ga(cons(U, V), cons(U1, V1)))
   gopher_in_ga(nil, nil) -> gopher_out_ga(nil, nil)
   gopher_in_ga(cons(nil, Y), cons(nil, Y)) -> gopher_out_ga(cons(nil, Y), cons(nil, Y))
   gopher_in_ga(cons(cons(U, V), W), X) -> U1_ga(U, V, W, X, gopher_in_ga(cons(U, cons(V, W)), X))
   U1_ga(U, V, W, X, gopher_out_ga(cons(U, cons(V, W)), X)) -> gopher_out_ga(cons(cons(U, V), W), X)
   U2_gg(U, V, X, Y, gopher_out_ga(cons(U, V), cons(U1, V1))) -> U3_gg(U, V, X, Y, U1, V1, gopher_in_ga(cons(X, Y), cons(X1, Y1)))
   U3_gg(U, V, X, Y, U1, V1, gopher_out_ga(cons(X, Y), cons(X1, Y1))) -> U4_gg(U, V, X, Y, samefringe_in_gg(V1, Y1))
   U4_gg(U, V, X, Y, samefringe_out_gg(V1, Y1)) -> samefringe_out_gg(cons(U, V), cons(X, Y))

The argument filtering Pi contains the following mapping:
samefringe_in_gg(x1, x2)  =  samefringe_in_gg(x1, x2)

nil  =  nil

samefringe_out_gg(x1, x2)  =  samefringe_out_gg

cons(x1, x2)  =  cons(x1, x2)

U2_gg(x1, x2, x3, x4, x5)  =  U2_gg(x3, x4, x5)

gopher_in_ga(x1, x2)  =  gopher_in_ga(x1)

gopher_out_ga(x1, x2)  =  gopher_out_ga(x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

U3_gg(x1, x2, x3, x4, x5, x6, x7)  =  U3_gg(x6, x7)

U4_gg(x1, x2, x3, x4, x5)  =  U4_gg(x5)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   SAMEFRINGE_IN_GG(cons(U, V), cons(X, Y)) -> U2_GG(U, V, X, Y, gopher_in_ga(cons(U, V), cons(U1, V1)))
   SAMEFRINGE_IN_GG(cons(U, V), cons(X, Y)) -> GOPHER_IN_GA(cons(U, V), cons(U1, V1))
   GOPHER_IN_GA(cons(cons(U, V), W), X) -> U1_GA(U, V, W, X, gopher_in_ga(cons(U, cons(V, W)), X))
   GOPHER_IN_GA(cons(cons(U, V), W), X) -> GOPHER_IN_GA(cons(U, cons(V, W)), X)
   U2_GG(U, V, X, Y, gopher_out_ga(cons(U, V), cons(U1, V1))) -> U3_GG(U, V, X, Y, U1, V1, gopher_in_ga(cons(X, Y), cons(X1, Y1)))
   U2_GG(U, V, X, Y, gopher_out_ga(cons(U, V), cons(U1, V1))) -> GOPHER_IN_GA(cons(X, Y), cons(X1, Y1))
   U3_GG(U, V, X, Y, U1, V1, gopher_out_ga(cons(X, Y), cons(X1, Y1))) -> U4_GG(U, V, X, Y, samefringe_in_gg(V1, Y1))
   U3_GG(U, V, X, Y, U1, V1, gopher_out_ga(cons(X, Y), cons(X1, Y1))) -> SAMEFRINGE_IN_GG(V1, Y1)

The TRS R consists of the following rules:

   samefringe_in_gg(nil, nil) -> samefringe_out_gg(nil, nil)
   samefringe_in_gg(cons(U, V), cons(X, Y)) -> U2_gg(U, V, X, Y, gopher_in_ga(cons(U, V), cons(U1, V1)))
   gopher_in_ga(nil, nil) -> gopher_out_ga(nil, nil)
   gopher_in_ga(cons(nil, Y), cons(nil, Y)) -> gopher_out_ga(cons(nil, Y), cons(nil, Y))
   gopher_in_ga(cons(cons(U, V), W), X) -> U1_ga(U, V, W, X, gopher_in_ga(cons(U, cons(V, W)), X))
   U1_ga(U, V, W, X, gopher_out_ga(cons(U, cons(V, W)), X)) -> gopher_out_ga(cons(cons(U, V), W), X)
   U2_gg(U, V, X, Y, gopher_out_ga(cons(U, V), cons(U1, V1))) -> U3_gg(U, V, X, Y, U1, V1, gopher_in_ga(cons(X, Y), cons(X1, Y1)))
   U3_gg(U, V, X, Y, U1, V1, gopher_out_ga(cons(X, Y), cons(X1, Y1))) -> U4_gg(U, V, X, Y, samefringe_in_gg(V1, Y1))
   U4_gg(U, V, X, Y, samefringe_out_gg(V1, Y1)) -> samefringe_out_gg(cons(U, V), cons(X, Y))

The argument filtering Pi contains the following mapping:
samefringe_in_gg(x1, x2)  =  samefringe_in_gg(x1, x2)

nil  =  nil

samefringe_out_gg(x1, x2)  =  samefringe_out_gg

cons(x1, x2)  =  cons(x1, x2)

U2_gg(x1, x2, x3, x4, x5)  =  U2_gg(x3, x4, x5)

gopher_in_ga(x1, x2)  =  gopher_in_ga(x1)

gopher_out_ga(x1, x2)  =  gopher_out_ga(x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

U3_gg(x1, x2, x3, x4, x5, x6, x7)  =  U3_gg(x6, x7)

U4_gg(x1, x2, x3, x4, x5)  =  U4_gg(x5)

SAMEFRINGE_IN_GG(x1, x2)  =  SAMEFRINGE_IN_GG(x1, x2)

U2_GG(x1, x2, x3, x4, x5)  =  U2_GG(x3, x4, x5)

GOPHER_IN_GA(x1, x2)  =  GOPHER_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x5)

U3_GG(x1, x2, x3, x4, x5, x6, x7)  =  U3_GG(x6, x7)

U4_GG(x1, x2, x3, x4, x5)  =  U4_GG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SAMEFRINGE_IN_GG(cons(U, V), cons(X, Y)) -> U2_GG(U, V, X, Y, gopher_in_ga(cons(U, V), cons(U1, V1)))
   SAMEFRINGE_IN_GG(cons(U, V), cons(X, Y)) -> GOPHER_IN_GA(cons(U, V), cons(U1, V1))
   GOPHER_IN_GA(cons(cons(U, V), W), X) -> U1_GA(U, V, W, X, gopher_in_ga(cons(U, cons(V, W)), X))
   GOPHER_IN_GA(cons(cons(U, V), W), X) -> GOPHER_IN_GA(cons(U, cons(V, W)), X)
   U2_GG(U, V, X, Y, gopher_out_ga(cons(U, V), cons(U1, V1))) -> U3_GG(U, V, X, Y, U1, V1, gopher_in_ga(cons(X, Y), cons(X1, Y1)))
   U2_GG(U, V, X, Y, gopher_out_ga(cons(U, V), cons(U1, V1))) -> GOPHER_IN_GA(cons(X, Y), cons(X1, Y1))
   U3_GG(U, V, X, Y, U1, V1, gopher_out_ga(cons(X, Y), cons(X1, Y1))) -> U4_GG(U, V, X, Y, samefringe_in_gg(V1, Y1))
   U3_GG(U, V, X, Y, U1, V1, gopher_out_ga(cons(X, Y), cons(X1, Y1))) -> SAMEFRINGE_IN_GG(V1, Y1)

The TRS R consists of the following rules:

   samefringe_in_gg(nil, nil) -> samefringe_out_gg(nil, nil)
   samefringe_in_gg(cons(U, V), cons(X, Y)) -> U2_gg(U, V, X, Y, gopher_in_ga(cons(U, V), cons(U1, V1)))
   gopher_in_ga(nil, nil) -> gopher_out_ga(nil, nil)
   gopher_in_ga(cons(nil, Y), cons(nil, Y)) -> gopher_out_ga(cons(nil, Y), cons(nil, Y))
   gopher_in_ga(cons(cons(U, V), W), X) -> U1_ga(U, V, W, X, gopher_in_ga(cons(U, cons(V, W)), X))
   U1_ga(U, V, W, X, gopher_out_ga(cons(U, cons(V, W)), X)) -> gopher_out_ga(cons(cons(U, V), W), X)
   U2_gg(U, V, X, Y, gopher_out_ga(cons(U, V), cons(U1, V1))) -> U3_gg(U, V, X, Y, U1, V1, gopher_in_ga(cons(X, Y), cons(X1, Y1)))
   U3_gg(U, V, X, Y, U1, V1, gopher_out_ga(cons(X, Y), cons(X1, Y1))) -> U4_gg(U, V, X, Y, samefringe_in_gg(V1, Y1))
   U4_gg(U, V, X, Y, samefringe_out_gg(V1, Y1)) -> samefringe_out_gg(cons(U, V), cons(X, Y))

The argument filtering Pi contains the following mapping:
samefringe_in_gg(x1, x2)  =  samefringe_in_gg(x1, x2)

nil  =  nil

samefringe_out_gg(x1, x2)  =  samefringe_out_gg

cons(x1, x2)  =  cons(x1, x2)

U2_gg(x1, x2, x3, x4, x5)  =  U2_gg(x3, x4, x5)

gopher_in_ga(x1, x2)  =  gopher_in_ga(x1)

gopher_out_ga(x1, x2)  =  gopher_out_ga(x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

U3_gg(x1, x2, x3, x4, x5, x6, x7)  =  U3_gg(x6, x7)

U4_gg(x1, x2, x3, x4, x5)  =  U4_gg(x5)

SAMEFRINGE_IN_GG(x1, x2)  =  SAMEFRINGE_IN_GG(x1, x2)

U2_GG(x1, x2, x3, x4, x5)  =  U2_GG(x3, x4, x5)

GOPHER_IN_GA(x1, x2)  =  GOPHER_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x5)

U3_GG(x1, x2, x3, x4, x5, x6, x7)  =  U3_GG(x6, x7)

U4_GG(x1, x2, x3, x4, x5)  =  U4_GG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GOPHER_IN_GA(cons(cons(U, V), W), X) -> GOPHER_IN_GA(cons(U, cons(V, W)), X)

The TRS R consists of the following rules:

   samefringe_in_gg(nil, nil) -> samefringe_out_gg(nil, nil)
   samefringe_in_gg(cons(U, V), cons(X, Y)) -> U2_gg(U, V, X, Y, gopher_in_ga(cons(U, V), cons(U1, V1)))
   gopher_in_ga(nil, nil) -> gopher_out_ga(nil, nil)
   gopher_in_ga(cons(nil, Y), cons(nil, Y)) -> gopher_out_ga(cons(nil, Y), cons(nil, Y))
   gopher_in_ga(cons(cons(U, V), W), X) -> U1_ga(U, V, W, X, gopher_in_ga(cons(U, cons(V, W)), X))
   U1_ga(U, V, W, X, gopher_out_ga(cons(U, cons(V, W)), X)) -> gopher_out_ga(cons(cons(U, V), W), X)
   U2_gg(U, V, X, Y, gopher_out_ga(cons(U, V), cons(U1, V1))) -> U3_gg(U, V, X, Y, U1, V1, gopher_in_ga(cons(X, Y), cons(X1, Y1)))
   U3_gg(U, V, X, Y, U1, V1, gopher_out_ga(cons(X, Y), cons(X1, Y1))) -> U4_gg(U, V, X, Y, samefringe_in_gg(V1, Y1))
   U4_gg(U, V, X, Y, samefringe_out_gg(V1, Y1)) -> samefringe_out_gg(cons(U, V), cons(X, Y))

The argument filtering Pi contains the following mapping:
samefringe_in_gg(x1, x2)  =  samefringe_in_gg(x1, x2)

nil  =  nil

samefringe_out_gg(x1, x2)  =  samefringe_out_gg

cons(x1, x2)  =  cons(x1, x2)

U2_gg(x1, x2, x3, x4, x5)  =  U2_gg(x3, x4, x5)

gopher_in_ga(x1, x2)  =  gopher_in_ga(x1)

gopher_out_ga(x1, x2)  =  gopher_out_ga(x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

U3_gg(x1, x2, x3, x4, x5, x6, x7)  =  U3_gg(x6, x7)

U4_gg(x1, x2, x3, x4, x5)  =  U4_gg(x5)

GOPHER_IN_GA(x1, x2)  =  GOPHER_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GOPHER_IN_GA(cons(cons(U, V), W), X) -> GOPHER_IN_GA(cons(U, cons(V, W)), X)

R is empty.
The argument filtering Pi contains the following mapping:
cons(x1, x2)  =  cons(x1, x2)

GOPHER_IN_GA(x1, x2)  =  GOPHER_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GOPHER_IN_GA(cons(cons(U, V), W)) -> GOPHER_IN_GA(cons(U, cons(V, W)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   GOPHER_IN_GA(cons(cons(U, V), W)) -> GOPHER_IN_GA(cons(U, cons(V, W)))


Used ordering: Knuth-Bendix order [KBO] with precedence:cons_2 > GOPHER_IN_GA_1

and weight map:

   GOPHER_IN_GA_1=1
   cons_2=0

The variable weight is 1

----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GG(U, V, X, Y, gopher_out_ga(cons(U, V), cons(U1, V1))) -> U3_GG(U, V, X, Y, U1, V1, gopher_in_ga(cons(X, Y), cons(X1, Y1)))
   U3_GG(U, V, X, Y, U1, V1, gopher_out_ga(cons(X, Y), cons(X1, Y1))) -> SAMEFRINGE_IN_GG(V1, Y1)
   SAMEFRINGE_IN_GG(cons(U, V), cons(X, Y)) -> U2_GG(U, V, X, Y, gopher_in_ga(cons(U, V), cons(U1, V1)))

The TRS R consists of the following rules:

   samefringe_in_gg(nil, nil) -> samefringe_out_gg(nil, nil)
   samefringe_in_gg(cons(U, V), cons(X, Y)) -> U2_gg(U, V, X, Y, gopher_in_ga(cons(U, V), cons(U1, V1)))
   gopher_in_ga(nil, nil) -> gopher_out_ga(nil, nil)
   gopher_in_ga(cons(nil, Y), cons(nil, Y)) -> gopher_out_ga(cons(nil, Y), cons(nil, Y))
   gopher_in_ga(cons(cons(U, V), W), X) -> U1_ga(U, V, W, X, gopher_in_ga(cons(U, cons(V, W)), X))
   U1_ga(U, V, W, X, gopher_out_ga(cons(U, cons(V, W)), X)) -> gopher_out_ga(cons(cons(U, V), W), X)
   U2_gg(U, V, X, Y, gopher_out_ga(cons(U, V), cons(U1, V1))) -> U3_gg(U, V, X, Y, U1, V1, gopher_in_ga(cons(X, Y), cons(X1, Y1)))
   U3_gg(U, V, X, Y, U1, V1, gopher_out_ga(cons(X, Y), cons(X1, Y1))) -> U4_gg(U, V, X, Y, samefringe_in_gg(V1, Y1))
   U4_gg(U, V, X, Y, samefringe_out_gg(V1, Y1)) -> samefringe_out_gg(cons(U, V), cons(X, Y))

The argument filtering Pi contains the following mapping:
samefringe_in_gg(x1, x2)  =  samefringe_in_gg(x1, x2)

nil  =  nil

samefringe_out_gg(x1, x2)  =  samefringe_out_gg

cons(x1, x2)  =  cons(x1, x2)

U2_gg(x1, x2, x3, x4, x5)  =  U2_gg(x3, x4, x5)

gopher_in_ga(x1, x2)  =  gopher_in_ga(x1)

gopher_out_ga(x1, x2)  =  gopher_out_ga(x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

U3_gg(x1, x2, x3, x4, x5, x6, x7)  =  U3_gg(x6, x7)

U4_gg(x1, x2, x3, x4, x5)  =  U4_gg(x5)

SAMEFRINGE_IN_GG(x1, x2)  =  SAMEFRINGE_IN_GG(x1, x2)

U2_GG(x1, x2, x3, x4, x5)  =  U2_GG(x3, x4, x5)

U3_GG(x1, x2, x3, x4, x5, x6, x7)  =  U3_GG(x6, x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(18)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GG(U, V, X, Y, gopher_out_ga(cons(U, V), cons(U1, V1))) -> U3_GG(U, V, X, Y, U1, V1, gopher_in_ga(cons(X, Y), cons(X1, Y1)))
   U3_GG(U, V, X, Y, U1, V1, gopher_out_ga(cons(X, Y), cons(X1, Y1))) -> SAMEFRINGE_IN_GG(V1, Y1)
   SAMEFRINGE_IN_GG(cons(U, V), cons(X, Y)) -> U2_GG(U, V, X, Y, gopher_in_ga(cons(U, V), cons(U1, V1)))

The TRS R consists of the following rules:

   gopher_in_ga(cons(nil, Y), cons(nil, Y)) -> gopher_out_ga(cons(nil, Y), cons(nil, Y))
   gopher_in_ga(cons(cons(U, V), W), X) -> U1_ga(U, V, W, X, gopher_in_ga(cons(U, cons(V, W)), X))
   U1_ga(U, V, W, X, gopher_out_ga(cons(U, cons(V, W)), X)) -> gopher_out_ga(cons(cons(U, V), W), X)

The argument filtering Pi contains the following mapping:
nil  =  nil

cons(x1, x2)  =  cons(x1, x2)

gopher_in_ga(x1, x2)  =  gopher_in_ga(x1)

gopher_out_ga(x1, x2)  =  gopher_out_ga(x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x5)

SAMEFRINGE_IN_GG(x1, x2)  =  SAMEFRINGE_IN_GG(x1, x2)

U2_GG(x1, x2, x3, x4, x5)  =  U2_GG(x3, x4, x5)

U3_GG(x1, x2, x3, x4, x5, x6, x7)  =  U3_GG(x6, x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(19) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GG(X, Y, gopher_out_ga(cons(U1, V1))) -> U3_GG(V1, gopher_in_ga(cons(X, Y)))
   U3_GG(V1, gopher_out_ga(cons(X1, Y1))) -> SAMEFRINGE_IN_GG(V1, Y1)
   SAMEFRINGE_IN_GG(cons(U, V), cons(X, Y)) -> U2_GG(X, Y, gopher_in_ga(cons(U, V)))

The TRS R consists of the following rules:

   gopher_in_ga(cons(nil, Y)) -> gopher_out_ga(cons(nil, Y))
   gopher_in_ga(cons(cons(U, V), W)) -> U1_ga(gopher_in_ga(cons(U, cons(V, W))))
   U1_ga(gopher_out_ga(X)) -> gopher_out_ga(X)

The set Q consists of the following terms:

   gopher_in_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U2_GG(X, Y, gopher_out_ga(cons(U1, V1))) -> U3_GG(V1, gopher_in_ga(cons(X, Y)))
   U3_GG(V1, gopher_out_ga(cons(X1, Y1))) -> SAMEFRINGE_IN_GG(V1, Y1)
   SAMEFRINGE_IN_GG(cons(U, V), cons(X, Y)) -> U2_GG(X, Y, gopher_in_ga(cons(U, V)))


Used ordering: Polynomial interpretation [POLO]:

   POL(SAMEFRINGE_IN_GG(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(U1_ga(x_1)) = x_1
   POL(U2_GG(x_1, x_2, x_3)) = 2 + 2*x_1 + 2*x_2 + x_3
   POL(U3_GG(x_1, x_2)) = 2*x_1 + x_2
   POL(cons(x_1, x_2)) = 2 + x_1 + x_2
   POL(gopher_in_ga(x_1)) = 2*x_1
   POL(gopher_out_ga(x_1)) = 2*x_1
   POL(nil) = 0


----------------------------------------

(22)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   gopher_in_ga(cons(nil, Y)) -> gopher_out_ga(cons(nil, Y))
   gopher_in_ga(cons(cons(U, V), W)) -> U1_ga(gopher_in_ga(cons(U, cons(V, W))))
   U1_ga(gopher_out_ga(X)) -> gopher_out_ga(X)

The set Q consists of the following terms:

   gopher_in_ga(x0)
   U1_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(24)
YES
