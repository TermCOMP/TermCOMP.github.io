YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ePFng.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

bin_tree(g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) PiDPToQDPProof [SOUND, 3 ms]
(8) QDP
(9) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
Clauses:

bin_tree(void).
bin_tree(tree(X1, Left, Right)) :- ','(bin_tree(Left), bin_tree(Right)).


Query: bin_tree(g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

bin_tree_in_1: (b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   bin_tree_in_g(void) -> bin_tree_out_g(void)
   bin_tree_in_g(tree(X1, Left, Right)) -> U1_g(X1, Left, Right, bin_tree_in_g(Left))
   U1_g(X1, Left, Right, bin_tree_out_g(Left)) -> U2_g(X1, Left, Right, bin_tree_in_g(Right))
   U2_g(X1, Left, Right, bin_tree_out_g(Right)) -> bin_tree_out_g(tree(X1, Left, Right))

The argument filtering Pi contains the following mapping:
bin_tree_in_g(x1)  =  bin_tree_in_g(x1)

void  =  void

bin_tree_out_g(x1)  =  bin_tree_out_g

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U1_g(x1, x2, x3, x4)  =  U1_g(x3, x4)

U2_g(x1, x2, x3, x4)  =  U2_g(x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   bin_tree_in_g(void) -> bin_tree_out_g(void)
   bin_tree_in_g(tree(X1, Left, Right)) -> U1_g(X1, Left, Right, bin_tree_in_g(Left))
   U1_g(X1, Left, Right, bin_tree_out_g(Left)) -> U2_g(X1, Left, Right, bin_tree_in_g(Right))
   U2_g(X1, Left, Right, bin_tree_out_g(Right)) -> bin_tree_out_g(tree(X1, Left, Right))

The argument filtering Pi contains the following mapping:
bin_tree_in_g(x1)  =  bin_tree_in_g(x1)

void  =  void

bin_tree_out_g(x1)  =  bin_tree_out_g

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U1_g(x1, x2, x3, x4)  =  U1_g(x3, x4)

U2_g(x1, x2, x3, x4)  =  U2_g(x4)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   BIN_TREE_IN_G(tree(X1, Left, Right)) -> U1_G(X1, Left, Right, bin_tree_in_g(Left))
   BIN_TREE_IN_G(tree(X1, Left, Right)) -> BIN_TREE_IN_G(Left)
   U1_G(X1, Left, Right, bin_tree_out_g(Left)) -> U2_G(X1, Left, Right, bin_tree_in_g(Right))
   U1_G(X1, Left, Right, bin_tree_out_g(Left)) -> BIN_TREE_IN_G(Right)

The TRS R consists of the following rules:

   bin_tree_in_g(void) -> bin_tree_out_g(void)
   bin_tree_in_g(tree(X1, Left, Right)) -> U1_g(X1, Left, Right, bin_tree_in_g(Left))
   U1_g(X1, Left, Right, bin_tree_out_g(Left)) -> U2_g(X1, Left, Right, bin_tree_in_g(Right))
   U2_g(X1, Left, Right, bin_tree_out_g(Right)) -> bin_tree_out_g(tree(X1, Left, Right))

The argument filtering Pi contains the following mapping:
bin_tree_in_g(x1)  =  bin_tree_in_g(x1)

void  =  void

bin_tree_out_g(x1)  =  bin_tree_out_g

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U1_g(x1, x2, x3, x4)  =  U1_g(x3, x4)

U2_g(x1, x2, x3, x4)  =  U2_g(x4)

BIN_TREE_IN_G(x1)  =  BIN_TREE_IN_G(x1)

U1_G(x1, x2, x3, x4)  =  U1_G(x3, x4)

U2_G(x1, x2, x3, x4)  =  U2_G(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   BIN_TREE_IN_G(tree(X1, Left, Right)) -> U1_G(X1, Left, Right, bin_tree_in_g(Left))
   BIN_TREE_IN_G(tree(X1, Left, Right)) -> BIN_TREE_IN_G(Left)
   U1_G(X1, Left, Right, bin_tree_out_g(Left)) -> U2_G(X1, Left, Right, bin_tree_in_g(Right))
   U1_G(X1, Left, Right, bin_tree_out_g(Left)) -> BIN_TREE_IN_G(Right)

The TRS R consists of the following rules:

   bin_tree_in_g(void) -> bin_tree_out_g(void)
   bin_tree_in_g(tree(X1, Left, Right)) -> U1_g(X1, Left, Right, bin_tree_in_g(Left))
   U1_g(X1, Left, Right, bin_tree_out_g(Left)) -> U2_g(X1, Left, Right, bin_tree_in_g(Right))
   U2_g(X1, Left, Right, bin_tree_out_g(Right)) -> bin_tree_out_g(tree(X1, Left, Right))

The argument filtering Pi contains the following mapping:
bin_tree_in_g(x1)  =  bin_tree_in_g(x1)

void  =  void

bin_tree_out_g(x1)  =  bin_tree_out_g

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U1_g(x1, x2, x3, x4)  =  U1_g(x3, x4)

U2_g(x1, x2, x3, x4)  =  U2_g(x4)

BIN_TREE_IN_G(x1)  =  BIN_TREE_IN_G(x1)

U1_G(x1, x2, x3, x4)  =  U1_G(x3, x4)

U2_G(x1, x2, x3, x4)  =  U2_G(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_G(X1, Left, Right, bin_tree_out_g(Left)) -> BIN_TREE_IN_G(Right)
   BIN_TREE_IN_G(tree(X1, Left, Right)) -> U1_G(X1, Left, Right, bin_tree_in_g(Left))
   BIN_TREE_IN_G(tree(X1, Left, Right)) -> BIN_TREE_IN_G(Left)

The TRS R consists of the following rules:

   bin_tree_in_g(void) -> bin_tree_out_g(void)
   bin_tree_in_g(tree(X1, Left, Right)) -> U1_g(X1, Left, Right, bin_tree_in_g(Left))
   U1_g(X1, Left, Right, bin_tree_out_g(Left)) -> U2_g(X1, Left, Right, bin_tree_in_g(Right))
   U2_g(X1, Left, Right, bin_tree_out_g(Right)) -> bin_tree_out_g(tree(X1, Left, Right))

The argument filtering Pi contains the following mapping:
bin_tree_in_g(x1)  =  bin_tree_in_g(x1)

void  =  void

bin_tree_out_g(x1)  =  bin_tree_out_g

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U1_g(x1, x2, x3, x4)  =  U1_g(x3, x4)

U2_g(x1, x2, x3, x4)  =  U2_g(x4)

BIN_TREE_IN_G(x1)  =  BIN_TREE_IN_G(x1)

U1_G(x1, x2, x3, x4)  =  U1_G(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_G(Right, bin_tree_out_g) -> BIN_TREE_IN_G(Right)
   BIN_TREE_IN_G(tree(X1, Left, Right)) -> U1_G(Right, bin_tree_in_g(Left))
   BIN_TREE_IN_G(tree(X1, Left, Right)) -> BIN_TREE_IN_G(Left)

The TRS R consists of the following rules:

   bin_tree_in_g(void) -> bin_tree_out_g
   bin_tree_in_g(tree(X1, Left, Right)) -> U1_g(Right, bin_tree_in_g(Left))
   U1_g(Right, bin_tree_out_g) -> U2_g(bin_tree_in_g(Right))
   U2_g(bin_tree_out_g) -> bin_tree_out_g

The set Q consists of the following terms:

   bin_tree_in_g(x0)
   U1_g(x0, x1)
   U2_g(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*BIN_TREE_IN_G(tree(X1, Left, Right)) -> U1_G(Right, bin_tree_in_g(Left))
The graph contains the following edges 1 > 1


*BIN_TREE_IN_G(tree(X1, Left, Right)) -> BIN_TREE_IN_G(Left)
The graph contains the following edges 1 > 1


*U1_G(Right, bin_tree_out_g) -> BIN_TREE_IN_G(Right)
The graph contains the following edges 1 >= 1


----------------------------------------

(10)
YES
