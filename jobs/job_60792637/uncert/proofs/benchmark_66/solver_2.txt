MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/PrCny.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

select(g,a,a)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToTRSTransformerProof [SOUND, 0 ms]
(2) QTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) QDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) QDP
    (7) MNOCProof [EQUIVALENT, 0 ms]
    (8) QDP
    (9) UsableRulesProof [EQUIVALENT, 0 ms]
    (10) QDP
    (11) QReductionProof [EQUIVALENT, 0 ms]
    (12) QDP
(13) PrologToPiTRSProof [SOUND, 0 ms]
(14) PiTRS
    (15) DependencyPairsProof [EQUIVALENT, 0 ms]
    (16) PiDP
    (17) DependencyGraphProof [EQUIVALENT, 0 ms]
    (18) PiDP
    (19) UsableRulesProof [EQUIVALENT, 0 ms]
    (20) PiDP
    (21) PiDPToQDPProof [SOUND, 0 ms]
    (22) QDP
(23) PrologToPiTRSProof [SOUND, 0 ms]
(24) PiTRS
    (25) DependencyPairsProof [EQUIVALENT, 0 ms]
    (26) PiDP
    (27) DependencyGraphProof [EQUIVALENT, 0 ms]
    (28) PiDP
    (29) UsableRulesProof [EQUIVALENT, 0 ms]
    (30) PiDP
    (31) PiDPToQDPProof [SOUND, 0 ms]
    (32) QDP
(33) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(34) TRIPLES
    (35) TriplesToPiDPProof [SOUND, 0 ms]
    (36) PiDP
    (37) DependencyGraphProof [EQUIVALENT, 0 ms]
    (38) PiDP
    (39) PiDPToQDPProof [SOUND, 0 ms]
    (40) QDP
(41) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(42) IRSwT
    (43) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (44) IRSwT
    (45) IntTRSCompressionProof [EQUIVALENT, 9 ms]
    (46) IRSwT
    (47) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (48) IRSwT
    (49) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
    (50) IRSwT
    (51) FilterProof [EQUIVALENT, 0 ms]
    (52) IntTRS
    (53) IntTRSPeriodicNontermProof [COMPLETE, 0 ms]
    (54) NO


----------------------------------------

(0)
Obligation:
Clauses:

select(X, .(X, Xs), Xs).
select(X, .(Y, Xs), .(Y, Zs)) :- select(X, Xs, Zs).


Query: select(g,a,a)
----------------------------------------

(1) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(select X (. X Xs) Xs)",
                null
            ],
            [
                "(select X (. Y Xs) (. Y Zs))",
                "(select X Xs Zs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "33": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "34": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T22 T26 T27)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T22"],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "35": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(select T1 T2 T3)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(select T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(select T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(select T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "31": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "32": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 7,
                "label": "PARALLEL"
            },
            {
                "from": 5,
                "to": 8,
                "label": "PARALLEL"
            },
            {
                "from": 7,
                "to": 31,
                "label": "EVAL with clause\nselect(X9, .(X9, X10), X10).\nand substitutionT1 -> T12,\nX9 -> T12,\nX10 -> T13,\nT2 -> .(T12, T13),\nT3 -> T13"
            },
            {
                "from": 7,
                "to": 32,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 8,
                "to": 34,
                "label": "EVAL with clause\nselect(X19, .(X20, X21), .(X20, X22)) :- select(X19, X21, X22).\nand substitutionT1 -> T22,\nX19 -> T22,\nX20 -> T23,\nX21 -> T26,\nT2 -> .(T23, T26),\nX22 -> T27,\nT3 -> .(T23, T27),\nT24 -> T26,\nT25 -> T27"
            },
            {
                "from": 8,
                "to": 35,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 31,
                "to": 33,
                "label": "SUCCESS"
            },
            {
                "from": 34,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T22\nT2 -> T26\nT3 -> T27"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in(T12) -> f2_out1
   f2_in(T22) -> U1(f2_in(T22), T22)
   U1(f2_out1, T22) -> f2_out1

Q is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(4)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN(T22) -> U1^1(f2_in(T22), T22)
   F2_IN(T22) -> F2_IN(T22)

The TRS R consists of the following rules:

   f2_in(T12) -> f2_out1
   f2_in(T22) -> U1(f2_in(T22), T22)
   U1(f2_out1, T22) -> f2_out1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN(T22) -> F2_IN(T22)

The TRS R consists of the following rules:

   f2_in(T12) -> f2_out1
   f2_in(T22) -> U1(f2_in(T22), T22)
   U1(f2_out1, T22) -> f2_out1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(7) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN(T22) -> F2_IN(T22)

The TRS R consists of the following rules:

   f2_in(T12) -> f2_out1
   f2_in(T22) -> U1(f2_in(T22), T22)
   U1(f2_out1, T22) -> f2_out1

The set Q consists of the following terms:

   f2_in(x0)
   U1(f2_out1, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN(T22) -> F2_IN(T22)

R is empty.
The set Q consists of the following terms:

   f2_in(x0)
   U1(f2_out1, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(11) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f2_in(x0)
   U1(f2_out1, x0)


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN(T22) -> F2_IN(T22)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(13) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

select_in_3: (b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   select_in_gaa(X, .(X, Xs), Xs) -> select_out_gaa(X, .(X, Xs), Xs)
   select_in_gaa(X, .(Y, Xs), .(Y, Zs)) -> U1_gaa(X, Y, Xs, Zs, select_in_gaa(X, Xs, Zs))
   U1_gaa(X, Y, Xs, Zs, select_out_gaa(X, Xs, Zs)) -> select_out_gaa(X, .(Y, Xs), .(Y, Zs))

The argument filtering Pi contains the following mapping:
select_in_gaa(x1, x2, x3)  =  select_in_gaa(x1)

select_out_gaa(x1, x2, x3)  =  select_out_gaa(x1)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(14)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   select_in_gaa(X, .(X, Xs), Xs) -> select_out_gaa(X, .(X, Xs), Xs)
   select_in_gaa(X, .(Y, Xs), .(Y, Zs)) -> U1_gaa(X, Y, Xs, Zs, select_in_gaa(X, Xs, Zs))
   U1_gaa(X, Y, Xs, Zs, select_out_gaa(X, Xs, Zs)) -> select_out_gaa(X, .(Y, Xs), .(Y, Zs))

The argument filtering Pi contains the following mapping:
select_in_gaa(x1, x2, x3)  =  select_in_gaa(x1)

select_out_gaa(x1, x2, x3)  =  select_out_gaa(x1)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)



----------------------------------------

(15) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_GAA(X, .(Y, Xs), .(Y, Zs)) -> U1_GAA(X, Y, Xs, Zs, select_in_gaa(X, Xs, Zs))
   SELECT_IN_GAA(X, .(Y, Xs), .(Y, Zs)) -> SELECT_IN_GAA(X, Xs, Zs)

The TRS R consists of the following rules:

   select_in_gaa(X, .(X, Xs), Xs) -> select_out_gaa(X, .(X, Xs), Xs)
   select_in_gaa(X, .(Y, Xs), .(Y, Zs)) -> U1_gaa(X, Y, Xs, Zs, select_in_gaa(X, Xs, Zs))
   U1_gaa(X, Y, Xs, Zs, select_out_gaa(X, Xs, Zs)) -> select_out_gaa(X, .(Y, Xs), .(Y, Zs))

The argument filtering Pi contains the following mapping:
select_in_gaa(x1, x2, x3)  =  select_in_gaa(x1)

select_out_gaa(x1, x2, x3)  =  select_out_gaa(x1)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

SELECT_IN_GAA(x1, x2, x3)  =  SELECT_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_GAA(X, .(Y, Xs), .(Y, Zs)) -> U1_GAA(X, Y, Xs, Zs, select_in_gaa(X, Xs, Zs))
   SELECT_IN_GAA(X, .(Y, Xs), .(Y, Zs)) -> SELECT_IN_GAA(X, Xs, Zs)

The TRS R consists of the following rules:

   select_in_gaa(X, .(X, Xs), Xs) -> select_out_gaa(X, .(X, Xs), Xs)
   select_in_gaa(X, .(Y, Xs), .(Y, Zs)) -> U1_gaa(X, Y, Xs, Zs, select_in_gaa(X, Xs, Zs))
   U1_gaa(X, Y, Xs, Zs, select_out_gaa(X, Xs, Zs)) -> select_out_gaa(X, .(Y, Xs), .(Y, Zs))

The argument filtering Pi contains the following mapping:
select_in_gaa(x1, x2, x3)  =  select_in_gaa(x1)

select_out_gaa(x1, x2, x3)  =  select_out_gaa(x1)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

SELECT_IN_GAA(x1, x2, x3)  =  SELECT_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x1, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(18)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_GAA(X, .(Y, Xs), .(Y, Zs)) -> SELECT_IN_GAA(X, Xs, Zs)

The TRS R consists of the following rules:

   select_in_gaa(X, .(X, Xs), Xs) -> select_out_gaa(X, .(X, Xs), Xs)
   select_in_gaa(X, .(Y, Xs), .(Y, Zs)) -> U1_gaa(X, Y, Xs, Zs, select_in_gaa(X, Xs, Zs))
   U1_gaa(X, Y, Xs, Zs, select_out_gaa(X, Xs, Zs)) -> select_out_gaa(X, .(Y, Xs), .(Y, Zs))

The argument filtering Pi contains the following mapping:
select_in_gaa(x1, x2, x3)  =  select_in_gaa(x1)

select_out_gaa(x1, x2, x3)  =  select_out_gaa(x1)

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x1, x5)

SELECT_IN_GAA(x1, x2, x3)  =  SELECT_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(20)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_GAA(X, .(Y, Xs), .(Y, Zs)) -> SELECT_IN_GAA(X, Xs, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
SELECT_IN_GAA(x1, x2, x3)  =  SELECT_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(21) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SELECT_IN_GAA(X) -> SELECT_IN_GAA(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

select_in_3: (b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   select_in_gaa(X, .(X, Xs), Xs) -> select_out_gaa(X, .(X, Xs), Xs)
   select_in_gaa(X, .(Y, Xs), .(Y, Zs)) -> U1_gaa(X, Y, Xs, Zs, select_in_gaa(X, Xs, Zs))
   U1_gaa(X, Y, Xs, Zs, select_out_gaa(X, Xs, Zs)) -> select_out_gaa(X, .(Y, Xs), .(Y, Zs))

The argument filtering Pi contains the following mapping:
select_in_gaa(x1, x2, x3)  =  select_in_gaa(x1)

select_out_gaa(x1, x2, x3)  =  select_out_gaa

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(24)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   select_in_gaa(X, .(X, Xs), Xs) -> select_out_gaa(X, .(X, Xs), Xs)
   select_in_gaa(X, .(Y, Xs), .(Y, Zs)) -> U1_gaa(X, Y, Xs, Zs, select_in_gaa(X, Xs, Zs))
   U1_gaa(X, Y, Xs, Zs, select_out_gaa(X, Xs, Zs)) -> select_out_gaa(X, .(Y, Xs), .(Y, Zs))

The argument filtering Pi contains the following mapping:
select_in_gaa(x1, x2, x3)  =  select_in_gaa(x1)

select_out_gaa(x1, x2, x3)  =  select_out_gaa

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)



----------------------------------------

(25) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_GAA(X, .(Y, Xs), .(Y, Zs)) -> U1_GAA(X, Y, Xs, Zs, select_in_gaa(X, Xs, Zs))
   SELECT_IN_GAA(X, .(Y, Xs), .(Y, Zs)) -> SELECT_IN_GAA(X, Xs, Zs)

The TRS R consists of the following rules:

   select_in_gaa(X, .(X, Xs), Xs) -> select_out_gaa(X, .(X, Xs), Xs)
   select_in_gaa(X, .(Y, Xs), .(Y, Zs)) -> U1_gaa(X, Y, Xs, Zs, select_in_gaa(X, Xs, Zs))
   U1_gaa(X, Y, Xs, Zs, select_out_gaa(X, Xs, Zs)) -> select_out_gaa(X, .(Y, Xs), .(Y, Zs))

The argument filtering Pi contains the following mapping:
select_in_gaa(x1, x2, x3)  =  select_in_gaa(x1)

select_out_gaa(x1, x2, x3)  =  select_out_gaa

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)

SELECT_IN_GAA(x1, x2, x3)  =  SELECT_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(26)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_GAA(X, .(Y, Xs), .(Y, Zs)) -> U1_GAA(X, Y, Xs, Zs, select_in_gaa(X, Xs, Zs))
   SELECT_IN_GAA(X, .(Y, Xs), .(Y, Zs)) -> SELECT_IN_GAA(X, Xs, Zs)

The TRS R consists of the following rules:

   select_in_gaa(X, .(X, Xs), Xs) -> select_out_gaa(X, .(X, Xs), Xs)
   select_in_gaa(X, .(Y, Xs), .(Y, Zs)) -> U1_gaa(X, Y, Xs, Zs, select_in_gaa(X, Xs, Zs))
   U1_gaa(X, Y, Xs, Zs, select_out_gaa(X, Xs, Zs)) -> select_out_gaa(X, .(Y, Xs), .(Y, Zs))

The argument filtering Pi contains the following mapping:
select_in_gaa(x1, x2, x3)  =  select_in_gaa(x1)

select_out_gaa(x1, x2, x3)  =  select_out_gaa

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)

SELECT_IN_GAA(x1, x2, x3)  =  SELECT_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5)  =  U1_GAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(27) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(28)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_GAA(X, .(Y, Xs), .(Y, Zs)) -> SELECT_IN_GAA(X, Xs, Zs)

The TRS R consists of the following rules:

   select_in_gaa(X, .(X, Xs), Xs) -> select_out_gaa(X, .(X, Xs), Xs)
   select_in_gaa(X, .(Y, Xs), .(Y, Zs)) -> U1_gaa(X, Y, Xs, Zs, select_in_gaa(X, Xs, Zs))
   U1_gaa(X, Y, Xs, Zs, select_out_gaa(X, Xs, Zs)) -> select_out_gaa(X, .(Y, Xs), .(Y, Zs))

The argument filtering Pi contains the following mapping:
select_in_gaa(x1, x2, x3)  =  select_in_gaa(x1)

select_out_gaa(x1, x2, x3)  =  select_out_gaa

U1_gaa(x1, x2, x3, x4, x5)  =  U1_gaa(x5)

SELECT_IN_GAA(x1, x2, x3)  =  SELECT_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(29) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(30)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_GAA(X, .(Y, Xs), .(Y, Zs)) -> SELECT_IN_GAA(X, Xs, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
SELECT_IN_GAA(x1, x2, x3)  =  SELECT_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(31) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SELECT_IN_GAA(X) -> SELECT_IN_GAA(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(33) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(select X (. X Xs) Xs)",
                null
            ],
            [
                "(select X (. Y Xs) (. Y Zs))",
                "(select X Xs Zs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "22": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(select T12 T16 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": [],
                    "exprvars": []
                }
            },
            "23": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(select T12 T16 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": [],
                    "exprvars": []
                }
            },
            "24": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "26": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T36 T40 T41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T36"],
                    "free": [],
                    "exprvars": []
                }
            },
            "28": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "29": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T50 T54 T55)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(select T50 T2 T3)",
                        "(select X3 (. X3 X4) X4)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T50"],
                    "free": [
                        "X3",
                        "X4"
                    ],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "110": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "111": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T74 T78 T79)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(select T74 T2 T3)",
                        "(select X3 (. X3 X4) X4)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T74"],
                    "free": [
                        "X3",
                        "X4"
                    ],
                    "exprvars": []
                }
            },
            "112": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "70": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 3,
                        "term": "(select T50 T54 T55)"
                    },
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(select T50 T54 T55)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(select T50 T2 T3)",
                        "(select X3 (. X3 X4) X4)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T50"],
                    "free": [
                        "X3",
                        "X4"
                    ],
                    "exprvars": []
                }
            },
            "72": {
                "goal": [{
                    "clause": 0,
                    "scope": 3,
                    "term": "(select T50 T54 T55)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(select T50 T2 T3)",
                        "(select X3 (. X3 X4) X4)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T50"],
                    "free": [
                        "X3",
                        "X4"
                    ],
                    "exprvars": []
                }
            },
            "73": {
                "goal": [{
                    "clause": 1,
                    "scope": 3,
                    "term": "(select T50 T54 T55)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(select T50 T2 T3)",
                        "(select X3 (. X3 X4) X4)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T50"],
                    "free": [
                        "X3",
                        "X4"
                    ],
                    "exprvars": []
                }
            },
            "30": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "16": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(select T6 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(select T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(select T1 T2 T3)",
                        "(select X3 (. X3 X4) X4)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [
                        "X3",
                        "X4"
                    ],
                    "exprvars": []
                }
            },
            "18": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(select T6 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": [],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T12 T16 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(select T1 T2 T3)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(select T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "108": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "109": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "20": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "21": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(select T12 T16 T17)"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(select T12 T16 T17)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 16,
                "label": "EVAL with clause\nselect(X3, .(X3, X4), X4).\nand substitutionT1 -> T6,\nX3 -> T6,\nX4 -> T7,\nT2 -> .(T6, T7),\nT3 -> T7"
            },
            {
                "from": 6,
                "to": 17,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 16,
                "to": 18,
                "label": "SUCCESS"
            },
            {
                "from": 17,
                "to": 29,
                "label": "EVAL with clause\nselect(X43, .(X44, X45), .(X44, X46)) :- select(X43, X45, X46).\nand substitutionT1 -> T50,\nX43 -> T50,\nX44 -> T51,\nX45 -> T54,\nT2 -> .(T51, T54),\nX46 -> T55,\nT3 -> .(T51, T55),\nT52 -> T54,\nT53 -> T55"
            },
            {
                "from": 17,
                "to": 30,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 18,
                "to": 19,
                "label": "EVAL with clause\nselect(X9, .(X10, X11), .(X10, X12)) :- select(X9, X11, X12).\nand substitutionT6 -> T12,\nX9 -> T12,\nX10 -> T13,\nX11 -> T16,\nT2 -> .(T13, T16),\nX12 -> T17,\nT3 -> .(T13, T17),\nT14 -> T16,\nT15 -> T17"
            },
            {
                "from": 18,
                "to": 20,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 19,
                "to": 21,
                "label": "CASE"
            },
            {
                "from": 21,
                "to": 22,
                "label": "PARALLEL"
            },
            {
                "from": 21,
                "to": 23,
                "label": "PARALLEL"
            },
            {
                "from": 22,
                "to": 24,
                "label": "EVAL with clause\nselect(X21, .(X21, X22), X22).\nand substitutionT12 -> T26,\nX21 -> T26,\nX22 -> T27,\nT16 -> .(T26, T27),\nT17 -> T27"
            },
            {
                "from": 22,
                "to": 25,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 23,
                "to": 27,
                "label": "EVAL with clause\nselect(X31, .(X32, X33), .(X32, X34)) :- select(X31, X33, X34).\nand substitutionT12 -> T36,\nX31 -> T36,\nX32 -> T37,\nX33 -> T40,\nT16 -> .(T37, T40),\nX34 -> T41,\nT17 -> .(T37, T41),\nT38 -> T40,\nT39 -> T41"
            },
            {
                "from": 23,
                "to": 28,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 24,
                "to": 26,
                "label": "SUCCESS"
            },
            {
                "from": 27,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T36\nT2 -> T40\nT3 -> T41"
            },
            {
                "from": 29,
                "to": 70,
                "label": "CASE"
            },
            {
                "from": 70,
                "to": 72,
                "label": "PARALLEL"
            },
            {
                "from": 70,
                "to": 73,
                "label": "PARALLEL"
            },
            {
                "from": 72,
                "to": 108,
                "label": "EVAL with clause\nselect(X55, .(X55, X56), X56).\nand substitutionT50 -> T64,\nX55 -> T64,\nX56 -> T65,\nT54 -> .(T64, T65),\nT55 -> T65"
            },
            {
                "from": 72,
                "to": 109,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 73,
                "to": 111,
                "label": "EVAL with clause\nselect(X65, .(X66, X67), .(X66, X68)) :- select(X65, X67, X68).\nand substitutionT50 -> T74,\nX65 -> T74,\nX66 -> T75,\nX67 -> T78,\nT54 -> .(T75, T78),\nX68 -> T79,\nT55 -> .(T75, T79),\nT76 -> T78,\nT77 -> T79"
            },
            {
                "from": 73,
                "to": 112,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 108,
                "to": 110,
                "label": "SUCCESS"
            },
            {
                "from": 111,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T74\nT2 -> T78\nT3 -> T79"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(34)
Obligation:
Triples:

selectA(X1, .(X2, .(X3, X4)), .(X2, .(X3, X5))) :- selectA(X1, X4, X5).
selectA(X1, .(X2, .(X3, X4)), .(X2, .(X3, X5))) :- selectA(X1, X4, X5).

Clauses:

selectcA(X1, .(X1, X2), X2).
selectcA(X1, .(X2, .(X1, X3)), .(X2, X3)).
selectcA(X1, .(X2, .(X3, X4)), .(X2, .(X3, X5))) :- selectcA(X1, X4, X5).
selectcA(X1, .(X2, .(X1, X3)), .(X2, X3)).
selectcA(X1, .(X2, .(X3, X4)), .(X2, .(X3, X5))) :- selectcA(X1, X4, X5).

Afs:

selectA(x1, x2, x3)  =  selectA(x1)


----------------------------------------

(35) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

selectA_in_3: (b,f,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   SELECTA_IN_GAA(X1, .(X2, .(X3, X4)), .(X2, .(X3, X5))) -> U1_GAA(X1, X2, X3, X4, X5, selectA_in_gaa(X1, X4, X5))
   SELECTA_IN_GAA(X1, .(X2, .(X3, X4)), .(X2, .(X3, X5))) -> SELECTA_IN_GAA(X1, X4, X5)

R is empty.
The argument filtering Pi contains the following mapping:
selectA_in_gaa(x1, x2, x3)  =  selectA_in_gaa(x1)

.(x1, x2)  =  .(x2)

SELECTA_IN_GAA(x1, x2, x3)  =  SELECTA_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5, x6)  =  U1_GAA(x1, x6)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(36)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECTA_IN_GAA(X1, .(X2, .(X3, X4)), .(X2, .(X3, X5))) -> U1_GAA(X1, X2, X3, X4, X5, selectA_in_gaa(X1, X4, X5))
   SELECTA_IN_GAA(X1, .(X2, .(X3, X4)), .(X2, .(X3, X5))) -> SELECTA_IN_GAA(X1, X4, X5)

R is empty.
The argument filtering Pi contains the following mapping:
selectA_in_gaa(x1, x2, x3)  =  selectA_in_gaa(x1)

.(x1, x2)  =  .(x2)

SELECTA_IN_GAA(x1, x2, x3)  =  SELECTA_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4, x5, x6)  =  U1_GAA(x1, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(37) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(38)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECTA_IN_GAA(X1, .(X2, .(X3, X4)), .(X2, .(X3, X5))) -> SELECTA_IN_GAA(X1, X4, X5)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

SELECTA_IN_GAA(x1, x2, x3)  =  SELECTA_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(39) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SELECTA_IN_GAA(X1) -> SELECTA_IN_GAA(X1)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(41) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(select X (. X Xs) Xs)",
                null
            ],
            [
                "(select X (. Y Xs) (. Y Zs))",
                "(select X Xs Zs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "11": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T22 T26 T27)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T22"],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(select T1 T2 T3)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(select T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(select T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "10": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(select T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 9,
                "label": "PARALLEL"
            },
            {
                "from": 4,
                "to": 10,
                "label": "PARALLEL"
            },
            {
                "from": 9,
                "to": 11,
                "label": "EVAL with clause\nselect(X9, .(X9, X10), X10).\nand substitutionT1 -> T12,\nX9 -> T12,\nX10 -> T13,\nT2 -> .(T12, T13),\nT3 -> T13"
            },
            {
                "from": 9,
                "to": 12,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 10,
                "to": 14,
                "label": "EVAL with clause\nselect(X19, .(X20, X21), .(X20, X22)) :- select(X19, X21, X22).\nand substitutionT1 -> T22,\nX19 -> T22,\nX20 -> T23,\nX21 -> T26,\nT2 -> .(T23, T26),\nX22 -> T27,\nT3 -> .(T23, T27),\nT24 -> T26,\nT25 -> T27"
            },
            {
                "from": 10,
                "to": 15,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 11,
                "to": 13,
                "label": "SUCCESS"
            },
            {
                "from": 14,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T22\nT2 -> T26\nT3 -> T27"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(42)
Obligation:
Rules:
f4_in(T1) -> f9_in(T1) :|: TRUE
f4_in(x) -> f10_in(x) :|: TRUE
f9_out(x1) -> f4_out(x1) :|: TRUE
f10_out(x2) -> f4_out(x2) :|: TRUE
f10_in(x3) -> f15_in :|: TRUE
f15_out -> f10_out(x4) :|: TRUE
f10_in(T22) -> f14_in(T22) :|: TRUE
f14_out(x5) -> f10_out(x5) :|: TRUE
f1_out(x6) -> f14_out(x6) :|: TRUE
f14_in(x7) -> f1_in(x7) :|: TRUE
f4_out(x8) -> f1_out(x8) :|: TRUE
f1_in(x9) -> f4_in(x9) :|: TRUE
Start term: f1_in(T1)

----------------------------------------

(43) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f4_in(x) -> f10_in(x) :|: TRUE
f10_in(T22) -> f14_in(T22) :|: TRUE
f14_in(x7) -> f1_in(x7) :|: TRUE
f1_in(x9) -> f4_in(x9) :|: TRUE


----------------------------------------

(44)
Obligation:
Rules:
f4_in(x) -> f10_in(x) :|: TRUE
f10_in(T22) -> f14_in(T22) :|: TRUE
f14_in(x7) -> f1_in(x7) :|: TRUE
f1_in(x9) -> f4_in(x9) :|: TRUE

----------------------------------------

(45) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(46)
Obligation:
Rules:
f4_in(x:0) -> f4_in(x:0) :|: TRUE

----------------------------------------

(47) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(48)
Obligation:
Rules:
f4_in(x:0) -> f4_in(x:0) :|: TRUE

----------------------------------------

(49) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f4_in(x:0) -> f4_in(x:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(50)
Obligation:

Termination digraph:
Nodes:
(1) f4_in(x:0) -> f4_in(x:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(51) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f4_in(VARIABLE)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(52)
Obligation:
Rules:
f4_in(x:0) -> f4_in(x:0) :|: TRUE

----------------------------------------

(53) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, x:0) -> f(1, x:0) :|: pc = 1 && TRUE
Witness term starting non-terminating reduction: f(1, -8)
----------------------------------------

(54)
NO
