YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/dfKmo.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

f(g,g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Clauses:

f(A, [], RES) :- g(A, [], RES).
f(.(A, As), .(B, Bs), RES) :- f(.(B, .(A, As)), Bs, RES).
g([], RES, RES).
g(.(C, Cs), D, RES) :- g(Cs, .(C, D), RES).


Query: f(g,g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

f_in_3: (b,b,f)

g_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   f_in_gga(A, [], RES) -> U1_gga(A, RES, g_in_gga(A, [], RES))
   g_in_gga([], RES, RES) -> g_out_gga([], RES, RES)
   g_in_gga(.(C, Cs), D, RES) -> U3_gga(C, Cs, D, RES, g_in_gga(Cs, .(C, D), RES))
   U3_gga(C, Cs, D, RES, g_out_gga(Cs, .(C, D), RES)) -> g_out_gga(.(C, Cs), D, RES)
   U1_gga(A, RES, g_out_gga(A, [], RES)) -> f_out_gga(A, [], RES)
   f_in_gga(.(A, As), .(B, Bs), RES) -> U2_gga(A, As, B, Bs, RES, f_in_gga(.(B, .(A, As)), Bs, RES))
   U2_gga(A, As, B, Bs, RES, f_out_gga(.(B, .(A, As)), Bs, RES)) -> f_out_gga(.(A, As), .(B, Bs), RES)

The argument filtering Pi contains the following mapping:
f_in_gga(x1, x2, x3)  =  f_in_gga(x1, x2)

[]  =  []

U1_gga(x1, x2, x3)  =  U1_gga(x1, x3)

g_in_gga(x1, x2, x3)  =  g_in_gga(x1, x2)

g_out_gga(x1, x2, x3)  =  g_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x1, x2, x3, x5)

f_out_gga(x1, x2, x3)  =  f_out_gga(x1, x2, x3)

U2_gga(x1, x2, x3, x4, x5, x6)  =  U2_gga(x1, x2, x3, x4, x6)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   f_in_gga(A, [], RES) -> U1_gga(A, RES, g_in_gga(A, [], RES))
   g_in_gga([], RES, RES) -> g_out_gga([], RES, RES)
   g_in_gga(.(C, Cs), D, RES) -> U3_gga(C, Cs, D, RES, g_in_gga(Cs, .(C, D), RES))
   U3_gga(C, Cs, D, RES, g_out_gga(Cs, .(C, D), RES)) -> g_out_gga(.(C, Cs), D, RES)
   U1_gga(A, RES, g_out_gga(A, [], RES)) -> f_out_gga(A, [], RES)
   f_in_gga(.(A, As), .(B, Bs), RES) -> U2_gga(A, As, B, Bs, RES, f_in_gga(.(B, .(A, As)), Bs, RES))
   U2_gga(A, As, B, Bs, RES, f_out_gga(.(B, .(A, As)), Bs, RES)) -> f_out_gga(.(A, As), .(B, Bs), RES)

The argument filtering Pi contains the following mapping:
f_in_gga(x1, x2, x3)  =  f_in_gga(x1, x2)

[]  =  []

U1_gga(x1, x2, x3)  =  U1_gga(x1, x3)

g_in_gga(x1, x2, x3)  =  g_in_gga(x1, x2)

g_out_gga(x1, x2, x3)  =  g_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x1, x2, x3, x5)

f_out_gga(x1, x2, x3)  =  f_out_gga(x1, x2, x3)

U2_gga(x1, x2, x3, x4, x5, x6)  =  U2_gga(x1, x2, x3, x4, x6)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   F_IN_GGA(A, [], RES) -> U1_GGA(A, RES, g_in_gga(A, [], RES))
   F_IN_GGA(A, [], RES) -> G_IN_GGA(A, [], RES)
   G_IN_GGA(.(C, Cs), D, RES) -> U3_GGA(C, Cs, D, RES, g_in_gga(Cs, .(C, D), RES))
   G_IN_GGA(.(C, Cs), D, RES) -> G_IN_GGA(Cs, .(C, D), RES)
   F_IN_GGA(.(A, As), .(B, Bs), RES) -> U2_GGA(A, As, B, Bs, RES, f_in_gga(.(B, .(A, As)), Bs, RES))
   F_IN_GGA(.(A, As), .(B, Bs), RES) -> F_IN_GGA(.(B, .(A, As)), Bs, RES)

The TRS R consists of the following rules:

   f_in_gga(A, [], RES) -> U1_gga(A, RES, g_in_gga(A, [], RES))
   g_in_gga([], RES, RES) -> g_out_gga([], RES, RES)
   g_in_gga(.(C, Cs), D, RES) -> U3_gga(C, Cs, D, RES, g_in_gga(Cs, .(C, D), RES))
   U3_gga(C, Cs, D, RES, g_out_gga(Cs, .(C, D), RES)) -> g_out_gga(.(C, Cs), D, RES)
   U1_gga(A, RES, g_out_gga(A, [], RES)) -> f_out_gga(A, [], RES)
   f_in_gga(.(A, As), .(B, Bs), RES) -> U2_gga(A, As, B, Bs, RES, f_in_gga(.(B, .(A, As)), Bs, RES))
   U2_gga(A, As, B, Bs, RES, f_out_gga(.(B, .(A, As)), Bs, RES)) -> f_out_gga(.(A, As), .(B, Bs), RES)

The argument filtering Pi contains the following mapping:
f_in_gga(x1, x2, x3)  =  f_in_gga(x1, x2)

[]  =  []

U1_gga(x1, x2, x3)  =  U1_gga(x1, x3)

g_in_gga(x1, x2, x3)  =  g_in_gga(x1, x2)

g_out_gga(x1, x2, x3)  =  g_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x1, x2, x3, x5)

f_out_gga(x1, x2, x3)  =  f_out_gga(x1, x2, x3)

U2_gga(x1, x2, x3, x4, x5, x6)  =  U2_gga(x1, x2, x3, x4, x6)

F_IN_GGA(x1, x2, x3)  =  F_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3)  =  U1_GGA(x1, x3)

G_IN_GGA(x1, x2, x3)  =  G_IN_GGA(x1, x2)

U3_GGA(x1, x2, x3, x4, x5)  =  U3_GGA(x1, x2, x3, x5)

U2_GGA(x1, x2, x3, x4, x5, x6)  =  U2_GGA(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   F_IN_GGA(A, [], RES) -> U1_GGA(A, RES, g_in_gga(A, [], RES))
   F_IN_GGA(A, [], RES) -> G_IN_GGA(A, [], RES)
   G_IN_GGA(.(C, Cs), D, RES) -> U3_GGA(C, Cs, D, RES, g_in_gga(Cs, .(C, D), RES))
   G_IN_GGA(.(C, Cs), D, RES) -> G_IN_GGA(Cs, .(C, D), RES)
   F_IN_GGA(.(A, As), .(B, Bs), RES) -> U2_GGA(A, As, B, Bs, RES, f_in_gga(.(B, .(A, As)), Bs, RES))
   F_IN_GGA(.(A, As), .(B, Bs), RES) -> F_IN_GGA(.(B, .(A, As)), Bs, RES)

The TRS R consists of the following rules:

   f_in_gga(A, [], RES) -> U1_gga(A, RES, g_in_gga(A, [], RES))
   g_in_gga([], RES, RES) -> g_out_gga([], RES, RES)
   g_in_gga(.(C, Cs), D, RES) -> U3_gga(C, Cs, D, RES, g_in_gga(Cs, .(C, D), RES))
   U3_gga(C, Cs, D, RES, g_out_gga(Cs, .(C, D), RES)) -> g_out_gga(.(C, Cs), D, RES)
   U1_gga(A, RES, g_out_gga(A, [], RES)) -> f_out_gga(A, [], RES)
   f_in_gga(.(A, As), .(B, Bs), RES) -> U2_gga(A, As, B, Bs, RES, f_in_gga(.(B, .(A, As)), Bs, RES))
   U2_gga(A, As, B, Bs, RES, f_out_gga(.(B, .(A, As)), Bs, RES)) -> f_out_gga(.(A, As), .(B, Bs), RES)

The argument filtering Pi contains the following mapping:
f_in_gga(x1, x2, x3)  =  f_in_gga(x1, x2)

[]  =  []

U1_gga(x1, x2, x3)  =  U1_gga(x1, x3)

g_in_gga(x1, x2, x3)  =  g_in_gga(x1, x2)

g_out_gga(x1, x2, x3)  =  g_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x1, x2, x3, x5)

f_out_gga(x1, x2, x3)  =  f_out_gga(x1, x2, x3)

U2_gga(x1, x2, x3, x4, x5, x6)  =  U2_gga(x1, x2, x3, x4, x6)

F_IN_GGA(x1, x2, x3)  =  F_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3)  =  U1_GGA(x1, x3)

G_IN_GGA(x1, x2, x3)  =  G_IN_GGA(x1, x2)

U3_GGA(x1, x2, x3, x4, x5)  =  U3_GGA(x1, x2, x3, x5)

U2_GGA(x1, x2, x3, x4, x5, x6)  =  U2_GGA(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   G_IN_GGA(.(C, Cs), D, RES) -> G_IN_GGA(Cs, .(C, D), RES)

The TRS R consists of the following rules:

   f_in_gga(A, [], RES) -> U1_gga(A, RES, g_in_gga(A, [], RES))
   g_in_gga([], RES, RES) -> g_out_gga([], RES, RES)
   g_in_gga(.(C, Cs), D, RES) -> U3_gga(C, Cs, D, RES, g_in_gga(Cs, .(C, D), RES))
   U3_gga(C, Cs, D, RES, g_out_gga(Cs, .(C, D), RES)) -> g_out_gga(.(C, Cs), D, RES)
   U1_gga(A, RES, g_out_gga(A, [], RES)) -> f_out_gga(A, [], RES)
   f_in_gga(.(A, As), .(B, Bs), RES) -> U2_gga(A, As, B, Bs, RES, f_in_gga(.(B, .(A, As)), Bs, RES))
   U2_gga(A, As, B, Bs, RES, f_out_gga(.(B, .(A, As)), Bs, RES)) -> f_out_gga(.(A, As), .(B, Bs), RES)

The argument filtering Pi contains the following mapping:
f_in_gga(x1, x2, x3)  =  f_in_gga(x1, x2)

[]  =  []

U1_gga(x1, x2, x3)  =  U1_gga(x1, x3)

g_in_gga(x1, x2, x3)  =  g_in_gga(x1, x2)

g_out_gga(x1, x2, x3)  =  g_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x1, x2, x3, x5)

f_out_gga(x1, x2, x3)  =  f_out_gga(x1, x2, x3)

U2_gga(x1, x2, x3, x4, x5, x6)  =  U2_gga(x1, x2, x3, x4, x6)

G_IN_GGA(x1, x2, x3)  =  G_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   G_IN_GGA(.(C, Cs), D, RES) -> G_IN_GGA(Cs, .(C, D), RES)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

G_IN_GGA(x1, x2, x3)  =  G_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G_IN_GGA(.(C, Cs), D) -> G_IN_GGA(Cs, .(C, D))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*G_IN_GGA(.(C, Cs), D) -> G_IN_GGA(Cs, .(C, D))
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   F_IN_GGA(.(A, As), .(B, Bs), RES) -> F_IN_GGA(.(B, .(A, As)), Bs, RES)

The TRS R consists of the following rules:

   f_in_gga(A, [], RES) -> U1_gga(A, RES, g_in_gga(A, [], RES))
   g_in_gga([], RES, RES) -> g_out_gga([], RES, RES)
   g_in_gga(.(C, Cs), D, RES) -> U3_gga(C, Cs, D, RES, g_in_gga(Cs, .(C, D), RES))
   U3_gga(C, Cs, D, RES, g_out_gga(Cs, .(C, D), RES)) -> g_out_gga(.(C, Cs), D, RES)
   U1_gga(A, RES, g_out_gga(A, [], RES)) -> f_out_gga(A, [], RES)
   f_in_gga(.(A, As), .(B, Bs), RES) -> U2_gga(A, As, B, Bs, RES, f_in_gga(.(B, .(A, As)), Bs, RES))
   U2_gga(A, As, B, Bs, RES, f_out_gga(.(B, .(A, As)), Bs, RES)) -> f_out_gga(.(A, As), .(B, Bs), RES)

The argument filtering Pi contains the following mapping:
f_in_gga(x1, x2, x3)  =  f_in_gga(x1, x2)

[]  =  []

U1_gga(x1, x2, x3)  =  U1_gga(x1, x3)

g_in_gga(x1, x2, x3)  =  g_in_gga(x1, x2)

g_out_gga(x1, x2, x3)  =  g_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x1, x2, x3, x5)

f_out_gga(x1, x2, x3)  =  f_out_gga(x1, x2, x3)

U2_gga(x1, x2, x3, x4, x5, x6)  =  U2_gga(x1, x2, x3, x4, x6)

F_IN_GGA(x1, x2, x3)  =  F_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   F_IN_GGA(.(A, As), .(B, Bs), RES) -> F_IN_GGA(.(B, .(A, As)), Bs, RES)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

F_IN_GGA(x1, x2, x3)  =  F_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F_IN_GGA(.(A, As), .(B, Bs)) -> F_IN_GGA(.(B, .(A, As)), Bs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F_IN_GGA(.(A, As), .(B, Bs)) -> F_IN_GGA(.(B, .(A, As)), Bs)
The graph contains the following edges 2 > 2


----------------------------------------

(20)
YES
