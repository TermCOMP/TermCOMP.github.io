YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/HamUf.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

map(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) PiDPToQDPProof [SOUND, 0 ms]
(10) QDP
(11) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Clauses:

p(X, Y).
map(.(X, Xs), .(Y, Ys)) :- ','(p(X, Y), map(Xs, Ys)).
map([], []).


Query: map(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

map_in_2: (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   map_in_ga(.(X, Xs), .(Y, Ys)) -> U1_ga(X, Xs, Y, Ys, p_in_aa(X, Y))
   p_in_aa(X, Y) -> p_out_aa(X, Y)
   U1_ga(X, Xs, Y, Ys, p_out_aa(X, Y)) -> U2_ga(X, Xs, Y, Ys, map_in_ga(Xs, Ys))
   map_in_ga([], []) -> map_out_ga([], [])
   U2_ga(X, Xs, Y, Ys, map_out_ga(Xs, Ys)) -> map_out_ga(.(X, Xs), .(Y, Ys))

The argument filtering Pi contains the following mapping:
map_in_ga(x1, x2)  =  map_in_ga(x1)

.(x1, x2)  =  .(x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x2, x5)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

[]  =  []

map_out_ga(x1, x2)  =  map_out_ga(x2)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   map_in_ga(.(X, Xs), .(Y, Ys)) -> U1_ga(X, Xs, Y, Ys, p_in_aa(X, Y))
   p_in_aa(X, Y) -> p_out_aa(X, Y)
   U1_ga(X, Xs, Y, Ys, p_out_aa(X, Y)) -> U2_ga(X, Xs, Y, Ys, map_in_ga(Xs, Ys))
   map_in_ga([], []) -> map_out_ga([], [])
   U2_ga(X, Xs, Y, Ys, map_out_ga(Xs, Ys)) -> map_out_ga(.(X, Xs), .(Y, Ys))

The argument filtering Pi contains the following mapping:
map_in_ga(x1, x2)  =  map_in_ga(x1)

.(x1, x2)  =  .(x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x2, x5)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

[]  =  []

map_out_ga(x1, x2)  =  map_out_ga(x2)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MAP_IN_GA(.(X, Xs), .(Y, Ys)) -> U1_GA(X, Xs, Y, Ys, p_in_aa(X, Y))
   MAP_IN_GA(.(X, Xs), .(Y, Ys)) -> P_IN_AA(X, Y)
   U1_GA(X, Xs, Y, Ys, p_out_aa(X, Y)) -> U2_GA(X, Xs, Y, Ys, map_in_ga(Xs, Ys))
   U1_GA(X, Xs, Y, Ys, p_out_aa(X, Y)) -> MAP_IN_GA(Xs, Ys)

The TRS R consists of the following rules:

   map_in_ga(.(X, Xs), .(Y, Ys)) -> U1_ga(X, Xs, Y, Ys, p_in_aa(X, Y))
   p_in_aa(X, Y) -> p_out_aa(X, Y)
   U1_ga(X, Xs, Y, Ys, p_out_aa(X, Y)) -> U2_ga(X, Xs, Y, Ys, map_in_ga(Xs, Ys))
   map_in_ga([], []) -> map_out_ga([], [])
   U2_ga(X, Xs, Y, Ys, map_out_ga(Xs, Ys)) -> map_out_ga(.(X, Xs), .(Y, Ys))

The argument filtering Pi contains the following mapping:
map_in_ga(x1, x2)  =  map_in_ga(x1)

.(x1, x2)  =  .(x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x2, x5)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

[]  =  []

map_out_ga(x1, x2)  =  map_out_ga(x2)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa

MAP_IN_GA(x1, x2)  =  MAP_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x2, x5)

P_IN_AA(x1, x2)  =  P_IN_AA

U2_GA(x1, x2, x3, x4, x5)  =  U2_GA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MAP_IN_GA(.(X, Xs), .(Y, Ys)) -> U1_GA(X, Xs, Y, Ys, p_in_aa(X, Y))
   MAP_IN_GA(.(X, Xs), .(Y, Ys)) -> P_IN_AA(X, Y)
   U1_GA(X, Xs, Y, Ys, p_out_aa(X, Y)) -> U2_GA(X, Xs, Y, Ys, map_in_ga(Xs, Ys))
   U1_GA(X, Xs, Y, Ys, p_out_aa(X, Y)) -> MAP_IN_GA(Xs, Ys)

The TRS R consists of the following rules:

   map_in_ga(.(X, Xs), .(Y, Ys)) -> U1_ga(X, Xs, Y, Ys, p_in_aa(X, Y))
   p_in_aa(X, Y) -> p_out_aa(X, Y)
   U1_ga(X, Xs, Y, Ys, p_out_aa(X, Y)) -> U2_ga(X, Xs, Y, Ys, map_in_ga(Xs, Ys))
   map_in_ga([], []) -> map_out_ga([], [])
   U2_ga(X, Xs, Y, Ys, map_out_ga(Xs, Ys)) -> map_out_ga(.(X, Xs), .(Y, Ys))

The argument filtering Pi contains the following mapping:
map_in_ga(x1, x2)  =  map_in_ga(x1)

.(x1, x2)  =  .(x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x2, x5)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

[]  =  []

map_out_ga(x1, x2)  =  map_out_ga(x2)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa

MAP_IN_GA(x1, x2)  =  MAP_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x2, x5)

P_IN_AA(x1, x2)  =  P_IN_AA

U2_GA(x1, x2, x3, x4, x5)  =  U2_GA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(X, Xs, Y, Ys, p_out_aa(X, Y)) -> MAP_IN_GA(Xs, Ys)
   MAP_IN_GA(.(X, Xs), .(Y, Ys)) -> U1_GA(X, Xs, Y, Ys, p_in_aa(X, Y))

The TRS R consists of the following rules:

   map_in_ga(.(X, Xs), .(Y, Ys)) -> U1_ga(X, Xs, Y, Ys, p_in_aa(X, Y))
   p_in_aa(X, Y) -> p_out_aa(X, Y)
   U1_ga(X, Xs, Y, Ys, p_out_aa(X, Y)) -> U2_ga(X, Xs, Y, Ys, map_in_ga(Xs, Ys))
   map_in_ga([], []) -> map_out_ga([], [])
   U2_ga(X, Xs, Y, Ys, map_out_ga(Xs, Ys)) -> map_out_ga(.(X, Xs), .(Y, Ys))

The argument filtering Pi contains the following mapping:
map_in_ga(x1, x2)  =  map_in_ga(x1)

.(x1, x2)  =  .(x2)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x2, x5)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

[]  =  []

map_out_ga(x1, x2)  =  map_out_ga(x2)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa

MAP_IN_GA(x1, x2)  =  MAP_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(X, Xs, Y, Ys, p_out_aa(X, Y)) -> MAP_IN_GA(Xs, Ys)
   MAP_IN_GA(.(X, Xs), .(Y, Ys)) -> U1_GA(X, Xs, Y, Ys, p_in_aa(X, Y))

The TRS R consists of the following rules:

   p_in_aa(X, Y) -> p_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa

MAP_IN_GA(x1, x2)  =  MAP_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GA(Xs, p_out_aa) -> MAP_IN_GA(Xs)
   MAP_IN_GA(.(Xs)) -> U1_GA(Xs, p_in_aa)

The TRS R consists of the following rules:

   p_in_aa -> p_out_aa

The set Q consists of the following terms:

   p_in_aa

We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MAP_IN_GA(.(Xs)) -> U1_GA(Xs, p_in_aa)
The graph contains the following edges 1 > 1


*U1_GA(Xs, p_out_aa) -> MAP_IN_GA(Xs)
The graph contains the following edges 1 >= 1


----------------------------------------

(12)
YES
