YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/ZtK7y.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

perm(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) PiDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) PiDP
        (24) PiDPToQDPProof [SOUND, 0 ms]
        (25) QDP
        (26) MRRProof [EQUIVALENT, 1 ms]
        (27) QDP
        (28) PisEmptyProof [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
Clauses:

ap1(nil, X, X).
ap1(cons(H, X), Y, cons(H, Z)) :- ap1(X, Y, Z).
ap2(nil, X, X).
ap2(cons(H, X), Y, cons(H, Z)) :- ap2(X, Y, Z).
perm(nil, nil).
perm(Xs, cons(X, Ys)) :- ','(ap1(X1s, cons(X, X2s), Xs), ','(ap2(X1s, X2s, Zs), perm(Zs, Ys))).


Query: perm(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

perm_in_2: (b,f)

ap1_in_3: (f,f,b)

ap2_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   perm_in_ga(nil, nil) -> perm_out_ga(nil, nil)
   perm_in_ga(Xs, cons(X, Ys)) -> U3_ga(Xs, X, Ys, ap1_in_aag(X1s, cons(X, X2s), Xs))
   ap1_in_aag(nil, X, X) -> ap1_out_aag(nil, X, X)
   ap1_in_aag(cons(H, X), Y, cons(H, Z)) -> U1_aag(H, X, Y, Z, ap1_in_aag(X, Y, Z))
   U1_aag(H, X, Y, Z, ap1_out_aag(X, Y, Z)) -> ap1_out_aag(cons(H, X), Y, cons(H, Z))
   U3_ga(Xs, X, Ys, ap1_out_aag(X1s, cons(X, X2s), Xs)) -> U4_ga(Xs, X, Ys, X1s, X2s, ap2_in_gga(X1s, X2s, Zs))
   ap2_in_gga(nil, X, X) -> ap2_out_gga(nil, X, X)
   ap2_in_gga(cons(H, X), Y, cons(H, Z)) -> U2_gga(H, X, Y, Z, ap2_in_gga(X, Y, Z))
   U2_gga(H, X, Y, Z, ap2_out_gga(X, Y, Z)) -> ap2_out_gga(cons(H, X), Y, cons(H, Z))
   U4_ga(Xs, X, Ys, X1s, X2s, ap2_out_gga(X1s, X2s, Zs)) -> U5_ga(Xs, X, Ys, perm_in_ga(Zs, Ys))
   U5_ga(Xs, X, Ys, perm_out_ga(Zs, Ys)) -> perm_out_ga(Xs, cons(X, Ys))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

nil  =  nil

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

ap1_in_aag(x1, x2, x3)  =  ap1_in_aag(x3)

cons(x1, x2)  =  cons(x2)

ap1_out_aag(x1, x2, x3)  =  ap1_out_aag(x1, x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

ap2_in_gga(x1, x2, x3)  =  ap2_in_gga(x1, x2)

ap2_out_gga(x1, x2, x3)  =  ap2_out_gga(x3)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   perm_in_ga(nil, nil) -> perm_out_ga(nil, nil)
   perm_in_ga(Xs, cons(X, Ys)) -> U3_ga(Xs, X, Ys, ap1_in_aag(X1s, cons(X, X2s), Xs))
   ap1_in_aag(nil, X, X) -> ap1_out_aag(nil, X, X)
   ap1_in_aag(cons(H, X), Y, cons(H, Z)) -> U1_aag(H, X, Y, Z, ap1_in_aag(X, Y, Z))
   U1_aag(H, X, Y, Z, ap1_out_aag(X, Y, Z)) -> ap1_out_aag(cons(H, X), Y, cons(H, Z))
   U3_ga(Xs, X, Ys, ap1_out_aag(X1s, cons(X, X2s), Xs)) -> U4_ga(Xs, X, Ys, X1s, X2s, ap2_in_gga(X1s, X2s, Zs))
   ap2_in_gga(nil, X, X) -> ap2_out_gga(nil, X, X)
   ap2_in_gga(cons(H, X), Y, cons(H, Z)) -> U2_gga(H, X, Y, Z, ap2_in_gga(X, Y, Z))
   U2_gga(H, X, Y, Z, ap2_out_gga(X, Y, Z)) -> ap2_out_gga(cons(H, X), Y, cons(H, Z))
   U4_ga(Xs, X, Ys, X1s, X2s, ap2_out_gga(X1s, X2s, Zs)) -> U5_ga(Xs, X, Ys, perm_in_ga(Zs, Ys))
   U5_ga(Xs, X, Ys, perm_out_ga(Zs, Ys)) -> perm_out_ga(Xs, cons(X, Ys))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

nil  =  nil

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

ap1_in_aag(x1, x2, x3)  =  ap1_in_aag(x3)

cons(x1, x2)  =  cons(x2)

ap1_out_aag(x1, x2, x3)  =  ap1_out_aag(x1, x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

ap2_in_gga(x1, x2, x3)  =  ap2_in_gga(x1, x2)

ap2_out_gga(x1, x2, x3)  =  ap2_out_gga(x3)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   PERM_IN_GA(Xs, cons(X, Ys)) -> U3_GA(Xs, X, Ys, ap1_in_aag(X1s, cons(X, X2s), Xs))
   PERM_IN_GA(Xs, cons(X, Ys)) -> AP1_IN_AAG(X1s, cons(X, X2s), Xs)
   AP1_IN_AAG(cons(H, X), Y, cons(H, Z)) -> U1_AAG(H, X, Y, Z, ap1_in_aag(X, Y, Z))
   AP1_IN_AAG(cons(H, X), Y, cons(H, Z)) -> AP1_IN_AAG(X, Y, Z)
   U3_GA(Xs, X, Ys, ap1_out_aag(X1s, cons(X, X2s), Xs)) -> U4_GA(Xs, X, Ys, X1s, X2s, ap2_in_gga(X1s, X2s, Zs))
   U3_GA(Xs, X, Ys, ap1_out_aag(X1s, cons(X, X2s), Xs)) -> AP2_IN_GGA(X1s, X2s, Zs)
   AP2_IN_GGA(cons(H, X), Y, cons(H, Z)) -> U2_GGA(H, X, Y, Z, ap2_in_gga(X, Y, Z))
   AP2_IN_GGA(cons(H, X), Y, cons(H, Z)) -> AP2_IN_GGA(X, Y, Z)
   U4_GA(Xs, X, Ys, X1s, X2s, ap2_out_gga(X1s, X2s, Zs)) -> U5_GA(Xs, X, Ys, perm_in_ga(Zs, Ys))
   U4_GA(Xs, X, Ys, X1s, X2s, ap2_out_gga(X1s, X2s, Zs)) -> PERM_IN_GA(Zs, Ys)

The TRS R consists of the following rules:

   perm_in_ga(nil, nil) -> perm_out_ga(nil, nil)
   perm_in_ga(Xs, cons(X, Ys)) -> U3_ga(Xs, X, Ys, ap1_in_aag(X1s, cons(X, X2s), Xs))
   ap1_in_aag(nil, X, X) -> ap1_out_aag(nil, X, X)
   ap1_in_aag(cons(H, X), Y, cons(H, Z)) -> U1_aag(H, X, Y, Z, ap1_in_aag(X, Y, Z))
   U1_aag(H, X, Y, Z, ap1_out_aag(X, Y, Z)) -> ap1_out_aag(cons(H, X), Y, cons(H, Z))
   U3_ga(Xs, X, Ys, ap1_out_aag(X1s, cons(X, X2s), Xs)) -> U4_ga(Xs, X, Ys, X1s, X2s, ap2_in_gga(X1s, X2s, Zs))
   ap2_in_gga(nil, X, X) -> ap2_out_gga(nil, X, X)
   ap2_in_gga(cons(H, X), Y, cons(H, Z)) -> U2_gga(H, X, Y, Z, ap2_in_gga(X, Y, Z))
   U2_gga(H, X, Y, Z, ap2_out_gga(X, Y, Z)) -> ap2_out_gga(cons(H, X), Y, cons(H, Z))
   U4_ga(Xs, X, Ys, X1s, X2s, ap2_out_gga(X1s, X2s, Zs)) -> U5_ga(Xs, X, Ys, perm_in_ga(Zs, Ys))
   U5_ga(Xs, X, Ys, perm_out_ga(Zs, Ys)) -> perm_out_ga(Xs, cons(X, Ys))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

nil  =  nil

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

ap1_in_aag(x1, x2, x3)  =  ap1_in_aag(x3)

cons(x1, x2)  =  cons(x2)

ap1_out_aag(x1, x2, x3)  =  ap1_out_aag(x1, x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

ap2_in_gga(x1, x2, x3)  =  ap2_in_gga(x1, x2)

ap2_out_gga(x1, x2, x3)  =  ap2_out_gga(x3)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

AP1_IN_AAG(x1, x2, x3)  =  AP1_IN_AAG(x3)

U1_AAG(x1, x2, x3, x4, x5)  =  U1_AAG(x5)

U4_GA(x1, x2, x3, x4, x5, x6)  =  U4_GA(x6)

AP2_IN_GGA(x1, x2, x3)  =  AP2_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x5)

U5_GA(x1, x2, x3, x4)  =  U5_GA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PERM_IN_GA(Xs, cons(X, Ys)) -> U3_GA(Xs, X, Ys, ap1_in_aag(X1s, cons(X, X2s), Xs))
   PERM_IN_GA(Xs, cons(X, Ys)) -> AP1_IN_AAG(X1s, cons(X, X2s), Xs)
   AP1_IN_AAG(cons(H, X), Y, cons(H, Z)) -> U1_AAG(H, X, Y, Z, ap1_in_aag(X, Y, Z))
   AP1_IN_AAG(cons(H, X), Y, cons(H, Z)) -> AP1_IN_AAG(X, Y, Z)
   U3_GA(Xs, X, Ys, ap1_out_aag(X1s, cons(X, X2s), Xs)) -> U4_GA(Xs, X, Ys, X1s, X2s, ap2_in_gga(X1s, X2s, Zs))
   U3_GA(Xs, X, Ys, ap1_out_aag(X1s, cons(X, X2s), Xs)) -> AP2_IN_GGA(X1s, X2s, Zs)
   AP2_IN_GGA(cons(H, X), Y, cons(H, Z)) -> U2_GGA(H, X, Y, Z, ap2_in_gga(X, Y, Z))
   AP2_IN_GGA(cons(H, X), Y, cons(H, Z)) -> AP2_IN_GGA(X, Y, Z)
   U4_GA(Xs, X, Ys, X1s, X2s, ap2_out_gga(X1s, X2s, Zs)) -> U5_GA(Xs, X, Ys, perm_in_ga(Zs, Ys))
   U4_GA(Xs, X, Ys, X1s, X2s, ap2_out_gga(X1s, X2s, Zs)) -> PERM_IN_GA(Zs, Ys)

The TRS R consists of the following rules:

   perm_in_ga(nil, nil) -> perm_out_ga(nil, nil)
   perm_in_ga(Xs, cons(X, Ys)) -> U3_ga(Xs, X, Ys, ap1_in_aag(X1s, cons(X, X2s), Xs))
   ap1_in_aag(nil, X, X) -> ap1_out_aag(nil, X, X)
   ap1_in_aag(cons(H, X), Y, cons(H, Z)) -> U1_aag(H, X, Y, Z, ap1_in_aag(X, Y, Z))
   U1_aag(H, X, Y, Z, ap1_out_aag(X, Y, Z)) -> ap1_out_aag(cons(H, X), Y, cons(H, Z))
   U3_ga(Xs, X, Ys, ap1_out_aag(X1s, cons(X, X2s), Xs)) -> U4_ga(Xs, X, Ys, X1s, X2s, ap2_in_gga(X1s, X2s, Zs))
   ap2_in_gga(nil, X, X) -> ap2_out_gga(nil, X, X)
   ap2_in_gga(cons(H, X), Y, cons(H, Z)) -> U2_gga(H, X, Y, Z, ap2_in_gga(X, Y, Z))
   U2_gga(H, X, Y, Z, ap2_out_gga(X, Y, Z)) -> ap2_out_gga(cons(H, X), Y, cons(H, Z))
   U4_ga(Xs, X, Ys, X1s, X2s, ap2_out_gga(X1s, X2s, Zs)) -> U5_ga(Xs, X, Ys, perm_in_ga(Zs, Ys))
   U5_ga(Xs, X, Ys, perm_out_ga(Zs, Ys)) -> perm_out_ga(Xs, cons(X, Ys))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

nil  =  nil

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

ap1_in_aag(x1, x2, x3)  =  ap1_in_aag(x3)

cons(x1, x2)  =  cons(x2)

ap1_out_aag(x1, x2, x3)  =  ap1_out_aag(x1, x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

ap2_in_gga(x1, x2, x3)  =  ap2_in_gga(x1, x2)

ap2_out_gga(x1, x2, x3)  =  ap2_out_gga(x3)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

AP1_IN_AAG(x1, x2, x3)  =  AP1_IN_AAG(x3)

U1_AAG(x1, x2, x3, x4, x5)  =  U1_AAG(x5)

U4_GA(x1, x2, x3, x4, x5, x6)  =  U4_GA(x6)

AP2_IN_GGA(x1, x2, x3)  =  AP2_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x5)

U5_GA(x1, x2, x3, x4)  =  U5_GA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   AP2_IN_GGA(cons(H, X), Y, cons(H, Z)) -> AP2_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   perm_in_ga(nil, nil) -> perm_out_ga(nil, nil)
   perm_in_ga(Xs, cons(X, Ys)) -> U3_ga(Xs, X, Ys, ap1_in_aag(X1s, cons(X, X2s), Xs))
   ap1_in_aag(nil, X, X) -> ap1_out_aag(nil, X, X)
   ap1_in_aag(cons(H, X), Y, cons(H, Z)) -> U1_aag(H, X, Y, Z, ap1_in_aag(X, Y, Z))
   U1_aag(H, X, Y, Z, ap1_out_aag(X, Y, Z)) -> ap1_out_aag(cons(H, X), Y, cons(H, Z))
   U3_ga(Xs, X, Ys, ap1_out_aag(X1s, cons(X, X2s), Xs)) -> U4_ga(Xs, X, Ys, X1s, X2s, ap2_in_gga(X1s, X2s, Zs))
   ap2_in_gga(nil, X, X) -> ap2_out_gga(nil, X, X)
   ap2_in_gga(cons(H, X), Y, cons(H, Z)) -> U2_gga(H, X, Y, Z, ap2_in_gga(X, Y, Z))
   U2_gga(H, X, Y, Z, ap2_out_gga(X, Y, Z)) -> ap2_out_gga(cons(H, X), Y, cons(H, Z))
   U4_ga(Xs, X, Ys, X1s, X2s, ap2_out_gga(X1s, X2s, Zs)) -> U5_ga(Xs, X, Ys, perm_in_ga(Zs, Ys))
   U5_ga(Xs, X, Ys, perm_out_ga(Zs, Ys)) -> perm_out_ga(Xs, cons(X, Ys))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

nil  =  nil

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

ap1_in_aag(x1, x2, x3)  =  ap1_in_aag(x3)

cons(x1, x2)  =  cons(x2)

ap1_out_aag(x1, x2, x3)  =  ap1_out_aag(x1, x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

ap2_in_gga(x1, x2, x3)  =  ap2_in_gga(x1, x2)

ap2_out_gga(x1, x2, x3)  =  ap2_out_gga(x3)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

AP2_IN_GGA(x1, x2, x3)  =  AP2_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   AP2_IN_GGA(cons(H, X), Y, cons(H, Z)) -> AP2_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
cons(x1, x2)  =  cons(x2)

AP2_IN_GGA(x1, x2, x3)  =  AP2_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AP2_IN_GGA(cons(X), Y) -> AP2_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*AP2_IN_GGA(cons(X), Y) -> AP2_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   AP1_IN_AAG(cons(H, X), Y, cons(H, Z)) -> AP1_IN_AAG(X, Y, Z)

The TRS R consists of the following rules:

   perm_in_ga(nil, nil) -> perm_out_ga(nil, nil)
   perm_in_ga(Xs, cons(X, Ys)) -> U3_ga(Xs, X, Ys, ap1_in_aag(X1s, cons(X, X2s), Xs))
   ap1_in_aag(nil, X, X) -> ap1_out_aag(nil, X, X)
   ap1_in_aag(cons(H, X), Y, cons(H, Z)) -> U1_aag(H, X, Y, Z, ap1_in_aag(X, Y, Z))
   U1_aag(H, X, Y, Z, ap1_out_aag(X, Y, Z)) -> ap1_out_aag(cons(H, X), Y, cons(H, Z))
   U3_ga(Xs, X, Ys, ap1_out_aag(X1s, cons(X, X2s), Xs)) -> U4_ga(Xs, X, Ys, X1s, X2s, ap2_in_gga(X1s, X2s, Zs))
   ap2_in_gga(nil, X, X) -> ap2_out_gga(nil, X, X)
   ap2_in_gga(cons(H, X), Y, cons(H, Z)) -> U2_gga(H, X, Y, Z, ap2_in_gga(X, Y, Z))
   U2_gga(H, X, Y, Z, ap2_out_gga(X, Y, Z)) -> ap2_out_gga(cons(H, X), Y, cons(H, Z))
   U4_ga(Xs, X, Ys, X1s, X2s, ap2_out_gga(X1s, X2s, Zs)) -> U5_ga(Xs, X, Ys, perm_in_ga(Zs, Ys))
   U5_ga(Xs, X, Ys, perm_out_ga(Zs, Ys)) -> perm_out_ga(Xs, cons(X, Ys))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

nil  =  nil

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

ap1_in_aag(x1, x2, x3)  =  ap1_in_aag(x3)

cons(x1, x2)  =  cons(x2)

ap1_out_aag(x1, x2, x3)  =  ap1_out_aag(x1, x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

ap2_in_gga(x1, x2, x3)  =  ap2_in_gga(x1, x2)

ap2_out_gga(x1, x2, x3)  =  ap2_out_gga(x3)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

AP1_IN_AAG(x1, x2, x3)  =  AP1_IN_AAG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   AP1_IN_AAG(cons(H, X), Y, cons(H, Z)) -> AP1_IN_AAG(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
cons(x1, x2)  =  cons(x2)

AP1_IN_AAG(x1, x2, x3)  =  AP1_IN_AAG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   AP1_IN_AAG(cons(Z)) -> AP1_IN_AAG(Z)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*AP1_IN_AAG(cons(Z)) -> AP1_IN_AAG(Z)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U3_GA(Xs, X, Ys, ap1_out_aag(X1s, cons(X, X2s), Xs)) -> U4_GA(Xs, X, Ys, X1s, X2s, ap2_in_gga(X1s, X2s, Zs))
   U4_GA(Xs, X, Ys, X1s, X2s, ap2_out_gga(X1s, X2s, Zs)) -> PERM_IN_GA(Zs, Ys)
   PERM_IN_GA(Xs, cons(X, Ys)) -> U3_GA(Xs, X, Ys, ap1_in_aag(X1s, cons(X, X2s), Xs))

The TRS R consists of the following rules:

   perm_in_ga(nil, nil) -> perm_out_ga(nil, nil)
   perm_in_ga(Xs, cons(X, Ys)) -> U3_ga(Xs, X, Ys, ap1_in_aag(X1s, cons(X, X2s), Xs))
   ap1_in_aag(nil, X, X) -> ap1_out_aag(nil, X, X)
   ap1_in_aag(cons(H, X), Y, cons(H, Z)) -> U1_aag(H, X, Y, Z, ap1_in_aag(X, Y, Z))
   U1_aag(H, X, Y, Z, ap1_out_aag(X, Y, Z)) -> ap1_out_aag(cons(H, X), Y, cons(H, Z))
   U3_ga(Xs, X, Ys, ap1_out_aag(X1s, cons(X, X2s), Xs)) -> U4_ga(Xs, X, Ys, X1s, X2s, ap2_in_gga(X1s, X2s, Zs))
   ap2_in_gga(nil, X, X) -> ap2_out_gga(nil, X, X)
   ap2_in_gga(cons(H, X), Y, cons(H, Z)) -> U2_gga(H, X, Y, Z, ap2_in_gga(X, Y, Z))
   U2_gga(H, X, Y, Z, ap2_out_gga(X, Y, Z)) -> ap2_out_gga(cons(H, X), Y, cons(H, Z))
   U4_ga(Xs, X, Ys, X1s, X2s, ap2_out_gga(X1s, X2s, Zs)) -> U5_ga(Xs, X, Ys, perm_in_ga(Zs, Ys))
   U5_ga(Xs, X, Ys, perm_out_ga(Zs, Ys)) -> perm_out_ga(Xs, cons(X, Ys))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

nil  =  nil

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

ap1_in_aag(x1, x2, x3)  =  ap1_in_aag(x3)

cons(x1, x2)  =  cons(x2)

ap1_out_aag(x1, x2, x3)  =  ap1_out_aag(x1, x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

ap2_in_gga(x1, x2, x3)  =  ap2_in_gga(x1, x2)

ap2_out_gga(x1, x2, x3)  =  ap2_out_gga(x3)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

U4_GA(x1, x2, x3, x4, x5, x6)  =  U4_GA(x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(23)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U3_GA(Xs, X, Ys, ap1_out_aag(X1s, cons(X, X2s), Xs)) -> U4_GA(Xs, X, Ys, X1s, X2s, ap2_in_gga(X1s, X2s, Zs))
   U4_GA(Xs, X, Ys, X1s, X2s, ap2_out_gga(X1s, X2s, Zs)) -> PERM_IN_GA(Zs, Ys)
   PERM_IN_GA(Xs, cons(X, Ys)) -> U3_GA(Xs, X, Ys, ap1_in_aag(X1s, cons(X, X2s), Xs))

The TRS R consists of the following rules:

   ap2_in_gga(nil, X, X) -> ap2_out_gga(nil, X, X)
   ap2_in_gga(cons(H, X), Y, cons(H, Z)) -> U2_gga(H, X, Y, Z, ap2_in_gga(X, Y, Z))
   ap1_in_aag(nil, X, X) -> ap1_out_aag(nil, X, X)
   ap1_in_aag(cons(H, X), Y, cons(H, Z)) -> U1_aag(H, X, Y, Z, ap1_in_aag(X, Y, Z))
   U2_gga(H, X, Y, Z, ap2_out_gga(X, Y, Z)) -> ap2_out_gga(cons(H, X), Y, cons(H, Z))
   U1_aag(H, X, Y, Z, ap1_out_aag(X, Y, Z)) -> ap1_out_aag(cons(H, X), Y, cons(H, Z))

The argument filtering Pi contains the following mapping:
nil  =  nil

ap1_in_aag(x1, x2, x3)  =  ap1_in_aag(x3)

cons(x1, x2)  =  cons(x2)

ap1_out_aag(x1, x2, x3)  =  ap1_out_aag(x1, x2)

U1_aag(x1, x2, x3, x4, x5)  =  U1_aag(x5)

ap2_in_gga(x1, x2, x3)  =  ap2_in_gga(x1, x2)

ap2_out_gga(x1, x2, x3)  =  ap2_out_gga(x3)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

U4_GA(x1, x2, x3, x4, x5, x6)  =  U4_GA(x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(24) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GA(ap1_out_aag(X1s, cons(X2s))) -> U4_GA(ap2_in_gga(X1s, X2s))
   U4_GA(ap2_out_gga(Zs)) -> PERM_IN_GA(Zs)
   PERM_IN_GA(Xs) -> U3_GA(ap1_in_aag(Xs))

The TRS R consists of the following rules:

   ap2_in_gga(nil, X) -> ap2_out_gga(X)
   ap2_in_gga(cons(X), Y) -> U2_gga(ap2_in_gga(X, Y))
   ap1_in_aag(X) -> ap1_out_aag(nil, X)
   ap1_in_aag(cons(Z)) -> U1_aag(ap1_in_aag(Z))
   U2_gga(ap2_out_gga(Z)) -> ap2_out_gga(cons(Z))
   U1_aag(ap1_out_aag(X, Y)) -> ap1_out_aag(cons(X), Y)

The set Q consists of the following terms:

   ap2_in_gga(x0, x1)
   ap1_in_aag(x0)
   U2_gga(x0)
   U1_aag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U3_GA(ap1_out_aag(X1s, cons(X2s))) -> U4_GA(ap2_in_gga(X1s, X2s))
   U4_GA(ap2_out_gga(Zs)) -> PERM_IN_GA(Zs)
   PERM_IN_GA(Xs) -> U3_GA(ap1_in_aag(Xs))

Strictly oriented rules of the TRS R:

   ap2_in_gga(nil, X) -> ap2_out_gga(X)
   ap2_in_gga(cons(X), Y) -> U2_gga(ap2_in_gga(X, Y))
   ap1_in_aag(X) -> ap1_out_aag(nil, X)
   ap1_in_aag(cons(Z)) -> U1_aag(ap1_in_aag(Z))
   U2_gga(ap2_out_gga(Z)) -> ap2_out_gga(cons(Z))
   U1_aag(ap1_out_aag(X, Y)) -> ap1_out_aag(cons(X), Y)

Used ordering: Knuth-Bendix order [KBO] with precedence:ap2_in_gga_2 > nil > PERM_IN_GA_1 > cons_1 > U4_GA_1 > ap1_in_aag_1 > U3_GA_1 > U1_aag_1 > ap1_out_aag_2 > U2_gga_1 > ap2_out_gga_1

and weight map:

   nil=2
   ap2_out_gga_1=6
   cons_1=7
   U2_gga_1=7
   ap1_in_aag_1=2
   U1_aag_1=7
   U3_GA_1=3
   U4_GA_1=1
   PERM_IN_GA_1=6
   ap2_in_gga_2=8
   ap1_out_aag_2=0

The variable weight is 1

----------------------------------------

(27)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   ap2_in_gga(x0, x1)
   ap1_in_aag(x0)
   U2_gga(x0)
   U1_aag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(29)
YES
