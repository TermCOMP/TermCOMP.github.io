MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/V1aDc.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

color_map(a,g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) AND
        (7) PiDP
            (8) UsableRulesProof [EQUIVALENT, 0 ms]
            (9) PiDP
            (10) PiDPToQDPProof [SOUND, 0 ms]
            (11) QDP
            (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (13) YES
        (14) PiDP
            (15) UsableRulesProof [EQUIVALENT, 0 ms]
            (16) PiDP
            (17) PiDPToQDPProof [SOUND, 0 ms]
            (18) QDP
            (19) TransformationProof [SOUND, 0 ms]
            (20) QDP
            (21) TransformationProof [EQUIVALENT, 0 ms]
            (22) QDP
            (23) NonTerminationLoopProof [COMPLETE, 0 ms]
            (24) NO
        (25) PiDP
            (26) UsableRulesProof [EQUIVALENT, 0 ms]
            (27) PiDP
            (28) PiDPToQDPProof [SOUND, 0 ms]
            (29) QDP
            (30) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (31) YES
        (32) PiDP
            (33) UsableRulesProof [EQUIVALENT, 0 ms]
            (34) PiDP
            (35) PiDPToQDPProof [SOUND, 0 ms]
            (36) QDP
(37) PrologToPiTRSProof [SOUND, 0 ms]
(38) PiTRS
    (39) DependencyPairsProof [EQUIVALENT, 0 ms]
    (40) PiDP
    (41) DependencyGraphProof [EQUIVALENT, 0 ms]
    (42) AND
        (43) PiDP
            (44) UsableRulesProof [EQUIVALENT, 0 ms]
            (45) PiDP
            (46) PiDPToQDPProof [SOUND, 3 ms]
            (47) QDP
            (48) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (49) YES
        (50) PiDP
            (51) UsableRulesProof [EQUIVALENT, 0 ms]
            (52) PiDP
            (53) PiDPToQDPProof [SOUND, 0 ms]
            (54) QDP
            (55) TransformationProof [SOUND, 0 ms]
            (56) QDP
            (57) TransformationProof [EQUIVALENT, 0 ms]
            (58) QDP
            (59) NonTerminationLoopProof [COMPLETE, 0 ms]
            (60) NO
        (61) PiDP
            (62) UsableRulesProof [EQUIVALENT, 0 ms]
            (63) PiDP
            (64) PiDPToQDPProof [SOUND, 0 ms]
            (65) QDP
            (66) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (67) YES
        (68) PiDP
            (69) UsableRulesProof [EQUIVALENT, 0 ms]
            (70) PiDP
            (71) PiDPToQDPProof [SOUND, 0 ms]
            (72) QDP
(73) PrologToTRSTransformerProof [SOUND, 0 ms]
(74) QTRS
    (75) DependencyPairsProof [EQUIVALENT, 0 ms]
    (76) QDP
    (77) DependencyGraphProof [EQUIVALENT, 0 ms]
    (78) AND
        (79) QDP
            (80) UsableRulesProof [EQUIVALENT, 0 ms]
            (81) QDP
            (82) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (83) YES
        (84) QDP
            (85) NonTerminationLoopProof [COMPLETE, 0 ms]
            (86) NO
        (87) QDP
            (88) UsableRulesProof [EQUIVALENT, 0 ms]
            (89) QDP
            (90) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (91) YES
        (92) QDP
            (93) NonTerminationLoopProof [COMPLETE, 0 ms]
            (94) NO
(95) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(96) TRIPLES
    (97) TriplesToPiDPProof [SOUND, 3 ms]
    (98) PiDP
    (99) DependencyGraphProof [EQUIVALENT, 0 ms]
    (100) AND
        (101) PiDP
            (102) UsableRulesProof [EQUIVALENT, 0 ms]
            (103) PiDP
            (104) PiDPToQDPProof [SOUND, 0 ms]
            (105) QDP
            (106) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (107) YES
        (108) PiDP
            (109) UsableRulesProof [EQUIVALENT, 0 ms]
            (110) PiDP
            (111) PiDPToQDPProof [SOUND, 0 ms]
            (112) QDP
            (113) TransformationProof [SOUND, 0 ms]
            (114) QDP
            (115) TransformationProof [EQUIVALENT, 0 ms]
            (116) QDP
            (117) NonTerminationLoopProof [COMPLETE, 0 ms]
            (118) NO
        (119) PiDP
            (120) UsableRulesProof [EQUIVALENT, 0 ms]
            (121) PiDP
            (122) PiDPToQDPProof [SOUND, 0 ms]
            (123) QDP
            (124) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (125) YES
        (126) PiDP
            (127) PiDPToQDPProof [SOUND, 0 ms]
            (128) QDP
(129) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(130) AND
    (131) IRSwT
        (132) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (133) TRUE
    (134) IRSwT
        (135) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (136) TRUE
    (137) IRSwT
        (138) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (139) IRSwT
        (140) IntTRSCompressionProof [EQUIVALENT, 10 ms]
        (141) IRSwT
        (142) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (143) IRSwT
        (144) IRSwTTerminationDigraphProof [EQUIVALENT, 2 ms]
        (145) IRSwT
        (146) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (147) IRSwT
        (148) TempFilterProof [SOUND, 1 ms]
        (149) IRSwT
        (150) IRSwTToQDPProof [SOUND, 0 ms]
        (151) QDP
        (152) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (153) YES
    (154) IRSwT
        (155) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (156) IRSwT
        (157) IntTRSCompressionProof [EQUIVALENT, 14 ms]
        (158) IRSwT
        (159) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (160) IRSwT
        (161) IRSwTTerminationDigraphProof [EQUIVALENT, 36 ms]
        (162) IRSwT
        (163) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (164) IRSwT


----------------------------------------

(0)
Obligation:
Clauses:

color_map(.(Region, Regions), Colors) :- ','(color_region(Region, Colors), color_map(Regions, Colors)).
color_map([], Colors).
color_region(region(Color, Neighbors), Colors) :- ','(select(Color, Colors, Colors1), members(Neighbors, Colors1)).
select(X, .(X, Xs), Xs).
select(X, .(Y, Ys), .(Y, Zs)) :- select(X, Ys, Zs).
members(.(X, Xs), Ys) :- ','(member(X, Ys), members(Xs, Ys)).
members([], Ys).
member(X, .(X, X1)).
member(X, .(X2, T)) :- member(X, T).
test_color(Name, Pairs) :- ','(colors(Name, Colors), ','(color_map(Map, Colors), ','(map(Name, Symbols, Map), symbols(Symbols, Map, Pairs)))).
symbols([], [], []).
symbols(.(S, Ss), .(region(C, N), Rs), .(pair(S, C), Ps)) :- symbols(Ss, Rs, Ps).
map(test, .(a, .(b, .(c, .(d, .(e, .(f, [])))))), .(region(A, .(B, .(C, .(D, [])))), .(region(B, .(A, .(C, .(E, [])))), .(region(C, .(A, .(B, .(D, .(E, .(F, [])))))), .(region(D, .(A, .(C, .(F, [])))), .(region(E, .(B, .(C, .(F, [])))), .(region(F, .(C, .(D, .(E, [])))), []))))))).
map(west_europe, .(portugal, .(spain, .(france, .(belgium, .(holland, .(west_germany, .(luxembourg, .(italy, .(switzerland, .(austria, [])))))))))), .(region(P, .(E, [])), .(region(E, .(F, .(P, []))), .(region(F, .(E, .(I, .(S, .(B, .(WG, .(L, []))))))), .(region(B, .(F, .(H, .(L, .(WG, []))))), .(region(H, .(B, .(WG, []))), .(region(WG, .(F, .(A, .(S, .(H, .(B, .(L, []))))))), .(region(L, .(F, .(B, .(WG, [])))), .(region(I, .(F, .(A, .(S, [])))), .(region(S, .(F, .(I, .(A, .(WG, []))))), .(region(A, .(I, .(S, .(WG, [])))), []))))))))))).
colors(X, .(red, .(yellow, .(blue, .(white, []))))).


Query: color_map(a,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

color_map_in_2: (f,b)

color_region_in_2: (f,b)

select_in_3: (f,b,f)

members_in_2: (f,b)

member_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Color, Neighbors), Colors) -> U3_ag(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x3, x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x1, x3, x4)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

region(x1, x2)  =  region(x1, x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Color, Neighbors), Colors) -> U3_ag(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x3, x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x1, x3, x4)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

region(x1, x2)  =  region(x1, x2)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> COLOR_REGION_IN_AG(Region, Colors)
   COLOR_REGION_IN_AG(region(Color, Neighbors), Colors) -> U3_AG(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   COLOR_REGION_IN_AG(region(Color, Neighbors), Colors) -> SELECT_IN_AGA(Color, Colors, Colors1)
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> U5_AGA(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)
   U3_AG(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_AG(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   U3_AG(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> MEMBERS_IN_AG(Neighbors, Colors1)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))
   MEMBERS_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X2, T)) -> U8_AG(X, X2, T, member_in_ag(X, T))
   MEMBER_IN_AG(X, .(X2, T)) -> MEMBER_IN_AG(X, T)
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_AG(X, Xs, Ys, members_in_ag(Xs, Ys))
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_AG(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Color, Neighbors), Colors) -> U3_ag(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x3, x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x1, x3, x4)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

region(x1, x2)  =  region(x1, x2)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

COLOR_REGION_IN_AG(x1, x2)  =  COLOR_REGION_IN_AG(x2)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x3, x4)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x3, x5)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x1, x3, x4)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U8_AG(x1, x2, x3, x4)  =  U8_AG(x2, x3, x4)

U7_AG(x1, x2, x3, x4)  =  U7_AG(x1, x3, x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> COLOR_REGION_IN_AG(Region, Colors)
   COLOR_REGION_IN_AG(region(Color, Neighbors), Colors) -> U3_AG(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   COLOR_REGION_IN_AG(region(Color, Neighbors), Colors) -> SELECT_IN_AGA(Color, Colors, Colors1)
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> U5_AGA(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)
   U3_AG(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_AG(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   U3_AG(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> MEMBERS_IN_AG(Neighbors, Colors1)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))
   MEMBERS_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X2, T)) -> U8_AG(X, X2, T, member_in_ag(X, T))
   MEMBER_IN_AG(X, .(X2, T)) -> MEMBER_IN_AG(X, T)
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_AG(X, Xs, Ys, members_in_ag(Xs, Ys))
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_AG(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Color, Neighbors), Colors) -> U3_ag(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x3, x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x1, x3, x4)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

region(x1, x2)  =  region(x1, x2)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

COLOR_REGION_IN_AG(x1, x2)  =  COLOR_REGION_IN_AG(x2)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x3, x4)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x3, x5)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x1, x3, x4)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U8_AG(x1, x2, x3, x4)  =  U8_AG(x2, x3, x4)

U7_AG(x1, x2, x3, x4)  =  U7_AG(x1, x3, x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 4 SCCs with 10 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, T)) -> MEMBER_IN_AG(X, T)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Color, Neighbors), Colors) -> U3_ag(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x3, x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x1, x3, x4)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

region(x1, x2)  =  region(x1, x2)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, T)) -> MEMBER_IN_AG(X, T)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(.(X2, T)) -> MEMBER_IN_AG(T)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER_IN_AG(.(X2, T)) -> MEMBER_IN_AG(T)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Color, Neighbors), Colors) -> U3_ag(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x3, x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x1, x3, x4)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

region(x1, x2)  =  region(x1, x2)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_AG(Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Ys)
   MEMBERS_IN_AG(Ys) -> U6_AG(Ys, member_in_ag(Ys))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(.(X2, T)) -> U8_ag(X2, T, member_in_ag(T))
   U8_ag(X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) TransformationProof (SOUND)
By narrowing [LPAR04] the rule MEMBERS_IN_AG(Ys) -> U6_AG(Ys, member_in_ag(Ys)) at position [1] we obtained the following new rules [LPAR04]:

   (MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0, .(x0, x1))),MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0, .(x0, x1))))
   (MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(x0, x1, member_in_ag(x1))),MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(x0, x1, member_in_ag(x1))))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_AG(Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Ys)
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0, .(x0, x1)))
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(x0, x1, member_in_ag(x1)))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(.(X2, T)) -> U8_ag(X2, T, member_in_ag(T))
   U8_ag(X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_AG(Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Ys) we obtained the following new rules [LPAR04]:

   (U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1)),U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1)))
   (U6_AG(.(z0, z1), member_out_ag(x1, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1)),U6_AG(.(z0, z1), member_out_ag(x1, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1)))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0, .(x0, x1)))
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(x0, x1, member_in_ag(x1)))
   U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1))
   U6_AG(.(z0, z1), member_out_ag(x1, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(.(X2, T)) -> U8_ag(X2, T, member_in_ag(T))
   U8_ag(X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) evaluates to  t =U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1)))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1))) -> MEMBERS_IN_AG(.(z0, z1))
with rule U6_AG(.(z0', z1'), member_out_ag(z0', .(z0', z1'))) -> MEMBERS_IN_AG(.(z0', z1')) at position [] and matcher [z0' / z0, z1' / z1]

MEMBERS_IN_AG(.(z0, z1)) -> U6_AG(.(z0, z1), member_out_ag(z0, .(z0, z1)))
with rule MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0, .(x0, x1)))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(24)
NO

----------------------------------------

(25)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Color, Neighbors), Colors) -> U3_ag(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x3, x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x1, x3, x4)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

region(x1, x2)  =  region(x1, x2)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(27)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(28) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(.(Y, Ys)) -> SELECT_IN_AGA(Ys)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SELECT_IN_AGA(.(Y, Ys)) -> SELECT_IN_AGA(Ys)
The graph contains the following edges 1 > 1


----------------------------------------

(31)
YES

----------------------------------------

(32)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Color, Neighbors), Colors) -> U3_ag(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x3, x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x1, x3, x4)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x3, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1, x2)

region(x1, x2)  =  region(x1, x2)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(33) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(34)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))

The TRS R consists of the following rules:

   color_region_in_ag(region(Color, Neighbors), Colors) -> U3_ag(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   U3_ag(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U4_ag(Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))

The argument filtering Pi contains the following mapping:
color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x3, x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x2, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x3, x5)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x1, x3, x4)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1, x2)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x2, x3, x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x3, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1, x2)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1, x2)

region(x1, x2)  =  region(x1, x2)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(35) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_AG(Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Colors)
   COLOR_MAP_IN_AG(Colors) -> U1_AG(Colors, color_region_in_ag(Colors))

The TRS R consists of the following rules:

   color_region_in_ag(Colors) -> U3_ag(Colors, select_in_aga(Colors))
   U3_ag(Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Colors, members_in_ag(Colors1))
   select_in_aga(.(X, Xs)) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(.(Y, Ys)) -> U5_aga(Y, Ys, select_in_aga(Ys))
   U4_ag(Color, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U5_aga(Y, Ys, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   members_in_ag(Ys) -> U6_ag(Ys, member_in_ag(Ys))
   members_in_ag(Ys) -> members_out_ag([], Ys)
   U6_ag(Ys, member_out_ag(X, Ys)) -> U7_ag(X, Ys, members_in_ag(Ys))
   member_in_ag(.(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(.(X2, T)) -> U8_ag(X2, T, member_in_ag(T))
   U7_ag(X, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U8_ag(X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))

The set Q consists of the following terms:

   color_region_in_ag(x0)
   U3_ag(x0, x1)
   select_in_aga(x0)
   U4_ag(x0, x1, x2)
   U5_aga(x0, x1, x2)
   members_in_ag(x0)
   U6_ag(x0, x1)
   member_in_ag(x0)
   U7_ag(x0, x1, x2)
   U8_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(37) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

color_map_in_2: (f,b)

color_region_in_2: (f,b)

select_in_3: (f,b,f)

members_in_2: (f,b)

member_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Color, Neighbors), Colors) -> U3_ag(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x1, x4)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

region(x1, x2)  =  region(x1, x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(38)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Color, Neighbors), Colors) -> U3_ag(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x1, x4)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

region(x1, x2)  =  region(x1, x2)



----------------------------------------

(39) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> COLOR_REGION_IN_AG(Region, Colors)
   COLOR_REGION_IN_AG(region(Color, Neighbors), Colors) -> U3_AG(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   COLOR_REGION_IN_AG(region(Color, Neighbors), Colors) -> SELECT_IN_AGA(Color, Colors, Colors1)
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> U5_AGA(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)
   U3_AG(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_AG(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   U3_AG(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> MEMBERS_IN_AG(Neighbors, Colors1)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))
   MEMBERS_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X2, T)) -> U8_AG(X, X2, T, member_in_ag(X, T))
   MEMBER_IN_AG(X, .(X2, T)) -> MEMBER_IN_AG(X, T)
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_AG(X, Xs, Ys, members_in_ag(Xs, Ys))
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_AG(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Color, Neighbors), Colors) -> U3_ag(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x1, x4)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

region(x1, x2)  =  region(x1, x2)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

COLOR_REGION_IN_AG(x1, x2)  =  COLOR_REGION_IN_AG(x2)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x4)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x5)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x1, x4)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U8_AG(x1, x2, x3, x4)  =  U8_AG(x4)

U7_AG(x1, x2, x3, x4)  =  U7_AG(x1, x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(40)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> COLOR_REGION_IN_AG(Region, Colors)
   COLOR_REGION_IN_AG(region(Color, Neighbors), Colors) -> U3_AG(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   COLOR_REGION_IN_AG(region(Color, Neighbors), Colors) -> SELECT_IN_AGA(Color, Colors, Colors1)
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> U5_AGA(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)
   U3_AG(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_AG(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   U3_AG(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> MEMBERS_IN_AG(Neighbors, Colors1)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))
   MEMBERS_IN_AG(.(X, Xs), Ys) -> MEMBER_IN_AG(X, Ys)
   MEMBER_IN_AG(X, .(X2, T)) -> U8_AG(X, X2, T, member_in_ag(X, T))
   MEMBER_IN_AG(X, .(X2, T)) -> MEMBER_IN_AG(X, T)
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_AG(X, Xs, Ys, members_in_ag(Xs, Ys))
   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_AG(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Color, Neighbors), Colors) -> U3_ag(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x1, x4)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

region(x1, x2)  =  region(x1, x2)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)

COLOR_REGION_IN_AG(x1, x2)  =  COLOR_REGION_IN_AG(x2)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x4)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x5)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x1, x4)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)

U8_AG(x1, x2, x3, x4)  =  U8_AG(x4)

U7_AG(x1, x2, x3, x4)  =  U7_AG(x1, x4)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(41) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 4 SCCs with 10 less nodes.
----------------------------------------

(42)
Complex Obligation (AND)

----------------------------------------

(43)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, T)) -> MEMBER_IN_AG(X, T)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Color, Neighbors), Colors) -> U3_ag(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x1, x4)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

region(x1, x2)  =  region(x1, x2)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(44) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(45)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(X, .(X2, T)) -> MEMBER_IN_AG(X, T)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBER_IN_AG(x1, x2)  =  MEMBER_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(46) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_AG(.(X2, T)) -> MEMBER_IN_AG(T)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(48) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER_IN_AG(.(X2, T)) -> MEMBER_IN_AG(T)
The graph contains the following edges 1 > 1


----------------------------------------

(49)
YES

----------------------------------------

(50)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Color, Neighbors), Colors) -> U3_ag(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x1, x4)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

region(x1, x2)  =  region(x1, x2)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(51) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(52)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_AG(X, Xs, Ys, member_out_ag(X, Ys)) -> MEMBERS_IN_AG(Xs, Ys)
   MEMBERS_IN_AG(.(X, Xs), Ys) -> U6_AG(X, Xs, Ys, member_in_ag(X, Ys))

The TRS R consists of the following rules:

   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

MEMBERS_IN_AG(x1, x2)  =  MEMBERS_IN_AG(x2)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(53) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_AG(Ys, member_out_ag(X)) -> MEMBERS_IN_AG(Ys)
   MEMBERS_IN_AG(Ys) -> U6_AG(Ys, member_in_ag(Ys))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X)
   member_in_ag(.(X2, T)) -> U8_ag(member_in_ag(T))
   U8_ag(member_out_ag(X)) -> member_out_ag(X)

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(55) TransformationProof (SOUND)
By narrowing [LPAR04] the rule MEMBERS_IN_AG(Ys) -> U6_AG(Ys, member_in_ag(Ys)) at position [1] we obtained the following new rules [LPAR04]:

   (MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0)),MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0)))
   (MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(member_in_ag(x1))),MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(member_in_ag(x1))))


----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_AG(Ys, member_out_ag(X)) -> MEMBERS_IN_AG(Ys)
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0))
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(member_in_ag(x1)))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X)
   member_in_ag(.(X2, T)) -> U8_ag(member_in_ag(T))
   U8_ag(member_out_ag(X)) -> member_out_ag(X)

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(57) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U6_AG(Ys, member_out_ag(X)) -> MEMBERS_IN_AG(Ys) we obtained the following new rules [LPAR04]:

   (U6_AG(.(z0, z1), member_out_ag(z0)) -> MEMBERS_IN_AG(.(z0, z1)),U6_AG(.(z0, z1), member_out_ag(z0)) -> MEMBERS_IN_AG(.(z0, z1)))
   (U6_AG(.(z0, z1), member_out_ag(x1)) -> MEMBERS_IN_AG(.(z0, z1)),U6_AG(.(z0, z1), member_out_ag(x1)) -> MEMBERS_IN_AG(.(z0, z1)))


----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0))
   MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), U8_ag(member_in_ag(x1)))
   U6_AG(.(z0, z1), member_out_ag(z0)) -> MEMBERS_IN_AG(.(z0, z1))
   U6_AG(.(z0, z1), member_out_ag(x1)) -> MEMBERS_IN_AG(.(z0, z1))

The TRS R consists of the following rules:

   member_in_ag(.(X, X1)) -> member_out_ag(X)
   member_in_ag(.(X2, T)) -> U8_ag(member_in_ag(T))
   U8_ag(member_out_ag(X)) -> member_out_ag(X)

The set Q consists of the following terms:

   member_in_ag(x0)
   U8_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(59) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = U6_AG(.(z0, z1), member_out_ag(z0)) evaluates to  t =U6_AG(.(z0, z1), member_out_ag(z0))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

U6_AG(.(z0, z1), member_out_ag(z0)) -> MEMBERS_IN_AG(.(z0, z1))
with rule U6_AG(.(z0', z1'), member_out_ag(z0')) -> MEMBERS_IN_AG(.(z0', z1')) at position [] and matcher [z0' / z0, z1' / z1]

MEMBERS_IN_AG(.(z0, z1)) -> U6_AG(.(z0, z1), member_out_ag(z0))
with rule MEMBERS_IN_AG(.(x0, x1)) -> U6_AG(.(x0, x1), member_out_ag(x0))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(60)
NO

----------------------------------------

(61)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Color, Neighbors), Colors) -> U3_ag(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x1, x4)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

region(x1, x2)  =  region(x1, x2)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(62) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(63)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(X, .(Y, Ys), .(Y, Zs)) -> SELECT_IN_AGA(X, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

SELECT_IN_AGA(x1, x2, x3)  =  SELECT_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(64) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(65)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SELECT_IN_AGA(.(Y, Ys)) -> SELECT_IN_AGA(Ys)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(66) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SELECT_IN_AGA(.(Y, Ys)) -> SELECT_IN_AGA(Ys)
The graph contains the following edges 1 > 1


----------------------------------------

(67)
YES

----------------------------------------

(68)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))

The TRS R consists of the following rules:

   color_map_in_ag(.(Region, Regions), Colors) -> U1_ag(Region, Regions, Colors, color_region_in_ag(Region, Colors))
   color_region_in_ag(region(Color, Neighbors), Colors) -> U3_ag(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   U3_ag(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U4_ag(Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U1_ag(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> U2_ag(Region, Regions, Colors, color_map_in_ag(Regions, Colors))
   color_map_in_ag([], Colors) -> color_map_out_ag([], Colors)
   U2_ag(Region, Regions, Colors, color_map_out_ag(Regions, Colors)) -> color_map_out_ag(.(Region, Regions), Colors)

The argument filtering Pi contains the following mapping:
color_map_in_ag(x1, x2)  =  color_map_in_ag(x2)

U1_ag(x1, x2, x3, x4)  =  U1_ag(x3, x4)

color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x1, x4)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x1, x4)

color_map_out_ag(x1, x2)  =  color_map_out_ag(x1)

region(x1, x2)  =  region(x1, x2)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(69) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(70)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AG(Region, Regions, Colors, color_region_out_ag(Region, Colors)) -> COLOR_MAP_IN_AG(Regions, Colors)
   COLOR_MAP_IN_AG(.(Region, Regions), Colors) -> U1_AG(Region, Regions, Colors, color_region_in_ag(Region, Colors))

The TRS R consists of the following rules:

   color_region_in_ag(region(Color, Neighbors), Colors) -> U3_ag(Color, Neighbors, Colors, select_in_aga(Color, Colors, Colors1))
   U3_ag(Color, Neighbors, Colors, select_out_aga(Color, Colors, Colors1)) -> U4_ag(Color, Neighbors, Colors, members_in_ag(Neighbors, Colors1))
   select_in_aga(X, .(X, Xs), Xs) -> select_out_aga(X, .(X, Xs), Xs)
   select_in_aga(X, .(Y, Ys), .(Y, Zs)) -> U5_aga(X, Y, Ys, Zs, select_in_aga(X, Ys, Zs))
   U4_ag(Color, Neighbors, Colors, members_out_ag(Neighbors, Colors1)) -> color_region_out_ag(region(Color, Neighbors), Colors)
   U5_aga(X, Y, Ys, Zs, select_out_aga(X, Ys, Zs)) -> select_out_aga(X, .(Y, Ys), .(Y, Zs))
   members_in_ag(.(X, Xs), Ys) -> U6_ag(X, Xs, Ys, member_in_ag(X, Ys))
   members_in_ag([], Ys) -> members_out_ag([], Ys)
   U6_ag(X, Xs, Ys, member_out_ag(X, Ys)) -> U7_ag(X, Xs, Ys, members_in_ag(Xs, Ys))
   member_in_ag(X, .(X, X1)) -> member_out_ag(X, .(X, X1))
   member_in_ag(X, .(X2, T)) -> U8_ag(X, X2, T, member_in_ag(X, T))
   U7_ag(X, Xs, Ys, members_out_ag(Xs, Ys)) -> members_out_ag(.(X, Xs), Ys)
   U8_ag(X, X2, T, member_out_ag(X, T)) -> member_out_ag(X, .(X2, T))

The argument filtering Pi contains the following mapping:
color_region_in_ag(x1, x2)  =  color_region_in_ag(x2)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x4)

select_in_aga(x1, x2, x3)  =  select_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

select_out_aga(x1, x2, x3)  =  select_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x1, x4)

members_in_ag(x1, x2)  =  members_in_ag(x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x3, x4)

member_in_ag(x1, x2)  =  member_in_ag(x2)

member_out_ag(x1, x2)  =  member_out_ag(x1)

U8_ag(x1, x2, x3, x4)  =  U8_ag(x4)

U7_ag(x1, x2, x3, x4)  =  U7_ag(x1, x4)

members_out_ag(x1, x2)  =  members_out_ag(x1)

color_region_out_ag(x1, x2)  =  color_region_out_ag(x1)

region(x1, x2)  =  region(x1, x2)

COLOR_MAP_IN_AG(x1, x2)  =  COLOR_MAP_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(71) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(72)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_AG(Colors, color_region_out_ag(Region)) -> COLOR_MAP_IN_AG(Colors)
   COLOR_MAP_IN_AG(Colors) -> U1_AG(Colors, color_region_in_ag(Colors))

The TRS R consists of the following rules:

   color_region_in_ag(Colors) -> U3_ag(select_in_aga(Colors))
   U3_ag(select_out_aga(Color, Colors1)) -> U4_ag(Color, members_in_ag(Colors1))
   select_in_aga(.(X, Xs)) -> select_out_aga(X, Xs)
   select_in_aga(.(Y, Ys)) -> U5_aga(Y, select_in_aga(Ys))
   U4_ag(Color, members_out_ag(Neighbors)) -> color_region_out_ag(region(Color, Neighbors))
   U5_aga(Y, select_out_aga(X, Zs)) -> select_out_aga(X, .(Y, Zs))
   members_in_ag(Ys) -> U6_ag(Ys, member_in_ag(Ys))
   members_in_ag(Ys) -> members_out_ag([])
   U6_ag(Ys, member_out_ag(X)) -> U7_ag(X, members_in_ag(Ys))
   member_in_ag(.(X, X1)) -> member_out_ag(X)
   member_in_ag(.(X2, T)) -> U8_ag(member_in_ag(T))
   U7_ag(X, members_out_ag(Xs)) -> members_out_ag(.(X, Xs))
   U8_ag(member_out_ag(X)) -> member_out_ag(X)

The set Q consists of the following terms:

   color_region_in_ag(x0)
   U3_ag(x0)
   select_in_aga(x0)
   U4_ag(x0, x1)
   U5_aga(x0, x1)
   members_in_ag(x0)
   U6_ag(x0, x1)
   member_in_ag(x0)
   U7_ag(x0, x1)
   U8_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(73) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(color_map (. Region Regions) Colors)",
                "(',' (color_region Region Colors) (color_map Regions Colors))"
            ],
            [
                "(color_map ([]) Colors)",
                null
            ],
            [
                "(color_region (region Color Neighbors) Colors)",
                "(',' (select Color Colors Colors1) (members Neighbors Colors1))"
            ],
            [
                "(select X (. X Xs) Xs)",
                null
            ],
            [
                "(select X (. Y Ys) (. Y Zs))",
                "(select X Ys Zs)"
            ],
            [
                "(members (. X Xs) Ys)",
                "(',' (member X Ys) (members Xs Ys))"
            ],
            [
                "(members ([]) Ys)",
                null
            ],
            [
                "(member X (. X X1))",
                null
            ],
            [
                "(member X (. X2 T))",
                "(member X T)"
            ],
            [
                "(test_color Name Pairs)",
                "(',' (colors Name Colors) (',' (color_map Map Colors) (',' (map Name Symbols Map) (symbols Symbols Map Pairs))))"
            ],
            [
                "(symbols ([]) ([]) ([]))",
                null
            ],
            [
                "(symbols (. S Ss) (. (region C N) Rs) (. (pair S C) Ps))",
                "(symbols Ss Rs Ps)"
            ],
            [
                "(map (test) (. (a) (. (b) (. (c) (. (d) (. (e) (. (f) ([]))))))) (. (region A (. B (. C (. D ([]))))) (. (region B (. A (. C (. E ([]))))) (. (region C (. A (. B (. D (. E (. F ([]))))))) (. (region D (. A (. C (. F ([]))))) (. (region E (. B (. C (. F ([]))))) (. (region F (. C (. D (. E ([]))))) ([]))))))))",
                null
            ],
            [
                "(map (west_europe) (. (portugal) (. (spain) (. (france) (. (belgium) (. (holland) (. (west_germany) (. (luxembourg) (. (italy) (. (switzerland) (. (austria) ([]))))))))))) (. (region P (. E ([]))) (. (region E (. F (. P ([])))) (. (region F (. E (. I (. S (. B (. WG (. L ([])))))))) (. (region B (. F (. H (. L (. WG ([])))))) (. (region H (. B (. WG ([])))) (. (region WG (. F (. A (. S (. H (. B (. L ([])))))))) (. (region L (. F (. B (. WG ([]))))) (. (region I (. F (. A (. S ([]))))) (. (region S (. F (. I (. A (. WG ([])))))) (. (region A (. I (. S (. WG ([]))))) ([]))))))))))))",
                null
            ],
            [
                "(colors X (. (red) (. (yellow) (. (blue) (. (white) ([]))))))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "44": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T23 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "45": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(color_region T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "294": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(select T36 T35 X36)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T35"],
                    "free": ["X36"],
                    "exprvars": []
                }
            },
            "295": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(select T36 T35 X36)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T35"],
                    "free": ["X36"],
                    "exprvars": []
                }
            },
            "296": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "297": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "177": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "298": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "611": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(members T43 T42)"
                    },
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(members T43 T42)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T42"],
                    "free": [],
                    "exprvars": []
                }
            },
            "612": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(members T43 T42)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T42"],
                    "free": [],
                    "exprvars": []
                }
            },
            "613": {
                "goal": [{
                    "clause": 6,
                    "scope": 4,
                    "term": "(members T43 T42)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T42"],
                    "free": [],
                    "exprvars": []
                }
            },
            "614": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T90 T89) (members T91 T89))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T89"],
                    "free": [],
                    "exprvars": []
                }
            },
            "615": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "616": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T90 T89)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T89"],
                    "free": [],
                    "exprvars": []
                }
            },
            "617": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T96 T89)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T89"],
                    "free": [],
                    "exprvars": []
                }
            },
            "618": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(member T90 T89)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(member T90 T89)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T89"],
                    "free": [],
                    "exprvars": []
                }
            },
            "619": {
                "goal": [{
                    "clause": 7,
                    "scope": 5,
                    "term": "(member T90 T89)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T89"],
                    "free": [],
                    "exprvars": []
                }
            },
            "39": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (color_region T18 T17) (color_map T19 T17))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "581": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T67 T66 X69)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T66"],
                    "free": ["X69"],
                    "exprvars": []
                }
            },
            "582": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "265": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T36 T35 X36)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T35"],
                    "free": ["X36"],
                    "exprvars": []
                }
            },
            "266": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T43 T42)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T42"],
                    "free": [],
                    "exprvars": []
                }
            },
            "288": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(select T36 T35 X36)"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(select T36 T35 X36)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T35"],
                    "free": ["X36"],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "168": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (select T36 T35 X36) (members T37 X36))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T35"],
                    "free": ["X36"],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "620": {
                "goal": [{
                    "clause": 8,
                    "scope": 5,
                    "term": "(member T90 T89)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T89"],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "621": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "687": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "622": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "688": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "623": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "624": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T120 T119)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T119"],
                    "free": [],
                    "exprvars": []
                }
            },
            "625": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "626": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "627": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "628": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "629": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "42": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "43": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_region T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 5,
                "label": "PARALLEL"
            },
            {
                "from": 4,
                "to": 6,
                "label": "PARALLEL"
            },
            {
                "from": 5,
                "to": 39,
                "label": "EVAL with clause\ncolor_map(.(X15, X16), X17) :- ','(color_region(X15, X17), color_map(X16, X17)).\nand substitutionX15 -> T18,\nX16 -> T19,\nT1 -> .(T18, T19),\nT2 -> T17,\nX17 -> T17,\nT15 -> T18,\nT16 -> T19"
            },
            {
                "from": 5,
                "to": 42,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 6,
                "to": 629,
                "label": "EVAL with clause\ncolor_map([], X134).\nand substitutionT1 -> [],\nT2 -> T136,\nX134 -> T136"
            },
            {
                "from": 6,
                "to": 687,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 39,
                "to": 43,
                "label": "SPLIT 1"
            },
            {
                "from": 39,
                "to": 44,
                "label": "SPLIT 2\nnew knowledge:\nT18 is ground\nT17 is ground\nreplacements:T19 -> T23"
            },
            {
                "from": 43,
                "to": 45,
                "label": "CASE"
            },
            {
                "from": 44,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T23\nT2 -> T17"
            },
            {
                "from": 45,
                "to": 168,
                "label": "EVAL with clause\ncolor_region(region(X33, X34), X35) :- ','(select(X33, X35, X36), members(X34, X36)).\nand substitutionX33 -> T36,\nX34 -> T37,\nT18 -> region(T36, T37),\nT17 -> T35,\nX35 -> T35,\nT33 -> T36,\nT34 -> T37"
            },
            {
                "from": 45,
                "to": 177,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 168,
                "to": 265,
                "label": "SPLIT 1"
            },
            {
                "from": 168,
                "to": 266,
                "label": "SPLIT 2\nnew knowledge:\nT36 is ground\nT35 is ground\nT42 is ground\nreplacements:X36 -> T42,\nT37 -> T43"
            },
            {
                "from": 265,
                "to": 288,
                "label": "CASE"
            },
            {
                "from": 266,
                "to": 611,
                "label": "CASE"
            },
            {
                "from": 288,
                "to": 294,
                "label": "PARALLEL"
            },
            {
                "from": 288,
                "to": 295,
                "label": "PARALLEL"
            },
            {
                "from": 294,
                "to": 296,
                "label": "EVAL with clause\nselect(X53, .(X53, X54), X54).\nand substitutionT36 -> T56,\nX53 -> T56,\nX54 -> T57,\nT35 -> .(T56, T57),\nX36 -> T57"
            },
            {
                "from": 294,
                "to": 297,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 295,
                "to": 581,
                "label": "EVAL with clause\nselect(X65, .(X66, X67), .(X66, X68)) :- select(X65, X67, X68).\nand substitutionT36 -> T67,\nX65 -> T67,\nX66 -> T65,\nX67 -> T66,\nT35 -> .(T65, T66),\nX68 -> X69,\nX36 -> .(T65, X69),\nT64 -> T67"
            },
            {
                "from": 295,
                "to": 582,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 296,
                "to": 298,
                "label": "SUCCESS"
            },
            {
                "from": 581,
                "to": 265,
                "label": "INSTANCE with matching:\nT36 -> T67\nT35 -> T66\nX36 -> X69"
            },
            {
                "from": 611,
                "to": 612,
                "label": "PARALLEL"
            },
            {
                "from": 611,
                "to": 613,
                "label": "PARALLEL"
            },
            {
                "from": 612,
                "to": 614,
                "label": "EVAL with clause\nmembers(.(X89, X90), X91) :- ','(member(X89, X91), members(X90, X91)).\nand substitutionX89 -> T90,\nX90 -> T91,\nT43 -> .(T90, T91),\nT42 -> T89,\nX91 -> T89,\nT87 -> T90,\nT88 -> T91"
            },
            {
                "from": 612,
                "to": 615,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 613,
                "to": 626,
                "label": "EVAL with clause\nmembers([], X128).\nand substitutionT43 -> [],\nT42 -> T130,\nX128 -> T130"
            },
            {
                "from": 613,
                "to": 627,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 614,
                "to": 616,
                "label": "SPLIT 1"
            },
            {
                "from": 614,
                "to": 617,
                "label": "SPLIT 2\nnew knowledge:\nT90 is ground\nT89 is ground\nreplacements:T91 -> T96"
            },
            {
                "from": 616,
                "to": 618,
                "label": "CASE"
            },
            {
                "from": 617,
                "to": 266,
                "label": "INSTANCE with matching:\nT43 -> T96\nT42 -> T89"
            },
            {
                "from": 618,
                "to": 619,
                "label": "PARALLEL"
            },
            {
                "from": 618,
                "to": 620,
                "label": "PARALLEL"
            },
            {
                "from": 619,
                "to": 621,
                "label": "EVAL with clause\nmember(X108, .(X108, X109)).\nand substitutionT90 -> T109,\nX108 -> T109,\nX109 -> T110,\nT89 -> .(T109, T110)"
            },
            {
                "from": 619,
                "to": 622,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 620,
                "to": 624,
                "label": "EVAL with clause\nmember(X116, .(X117, X118)) :- member(X116, X118).\nand substitutionT90 -> T120,\nX116 -> T120,\nX117 -> T118,\nX118 -> T119,\nT89 -> .(T118, T119),\nT117 -> T120"
            },
            {
                "from": 620,
                "to": 625,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 621,
                "to": 623,
                "label": "SUCCESS"
            },
            {
                "from": 624,
                "to": 616,
                "label": "INSTANCE with matching:\nT90 -> T120\nT89 -> T119"
            },
            {
                "from": 626,
                "to": 628,
                "label": "SUCCESS"
            },
            {
                "from": 629,
                "to": 688,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(74)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f3_in(T17) -> U1(f39_in(T17), T17)
   U1(f39_out1(T18, T19), T17) -> f3_out1(.(T18, T19))
   f3_in(T136) -> f3_out1([])
   f265_in(.(T56, T57)) -> f265_out1(T56, T57)
   f265_in(.(T65, T66)) -> U2(f265_in(T66), .(T65, T66))
   U2(f265_out1(T67, X69), .(T65, T66)) -> f265_out1(T67, .(T65, X69))
   f266_in(T89) -> U3(f614_in(T89), T89)
   U3(f614_out1(T90, T91), T89) -> f266_out1(.(T90, T91))
   f266_in(T130) -> f266_out1([])
   f616_in(.(T109, T110)) -> f616_out1(T109)
   f616_in(.(T118, T119)) -> U4(f616_in(T119), .(T118, T119))
   U4(f616_out1(T120), .(T118, T119)) -> f616_out1(T120)
   f43_in(T35) -> U5(f168_in(T35), T35)
   U5(f168_out1(T36, X36, T37), T35) -> f43_out1(region(T36, T37))
   f39_in(T17) -> U6(f43_in(T17), T17)
   U6(f43_out1(T18), T17) -> U7(f3_in(T17), T17, T18)
   U7(f3_out1(T23), T17, T18) -> f39_out1(T18, T23)
   f168_in(T35) -> U8(f265_in(T35), T35)
   U8(f265_out1(T36, T42), T35) -> U9(f266_in(T42), T35, T36, T42)
   U9(f266_out1(T43), T35, T36, T42) -> f168_out1(T36, T42, T43)
   f614_in(T89) -> U10(f616_in(T89), T89)
   U10(f616_out1(T90), T89) -> U11(f266_in(T89), T89, T90)
   U11(f266_out1(T96), T89, T90) -> f614_out1(T90, T96)

Q is empty.

----------------------------------------

(75) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(76)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F3_IN(T17) -> U1^1(f39_in(T17), T17)
   F3_IN(T17) -> F39_IN(T17)
   F265_IN(.(T65, T66)) -> U2^1(f265_in(T66), .(T65, T66))
   F265_IN(.(T65, T66)) -> F265_IN(T66)
   F266_IN(T89) -> U3^1(f614_in(T89), T89)
   F266_IN(T89) -> F614_IN(T89)
   F616_IN(.(T118, T119)) -> U4^1(f616_in(T119), .(T118, T119))
   F616_IN(.(T118, T119)) -> F616_IN(T119)
   F43_IN(T35) -> U5^1(f168_in(T35), T35)
   F43_IN(T35) -> F168_IN(T35)
   F39_IN(T17) -> U6^1(f43_in(T17), T17)
   F39_IN(T17) -> F43_IN(T17)
   U6^1(f43_out1(T18), T17) -> U7^1(f3_in(T17), T17, T18)
   U6^1(f43_out1(T18), T17) -> F3_IN(T17)
   F168_IN(T35) -> U8^1(f265_in(T35), T35)
   F168_IN(T35) -> F265_IN(T35)
   U8^1(f265_out1(T36, T42), T35) -> U9^1(f266_in(T42), T35, T36, T42)
   U8^1(f265_out1(T36, T42), T35) -> F266_IN(T42)
   F614_IN(T89) -> U10^1(f616_in(T89), T89)
   F614_IN(T89) -> F616_IN(T89)
   U10^1(f616_out1(T90), T89) -> U11^1(f266_in(T89), T89, T90)
   U10^1(f616_out1(T90), T89) -> F266_IN(T89)

The TRS R consists of the following rules:

   f3_in(T17) -> U1(f39_in(T17), T17)
   U1(f39_out1(T18, T19), T17) -> f3_out1(.(T18, T19))
   f3_in(T136) -> f3_out1([])
   f265_in(.(T56, T57)) -> f265_out1(T56, T57)
   f265_in(.(T65, T66)) -> U2(f265_in(T66), .(T65, T66))
   U2(f265_out1(T67, X69), .(T65, T66)) -> f265_out1(T67, .(T65, X69))
   f266_in(T89) -> U3(f614_in(T89), T89)
   U3(f614_out1(T90, T91), T89) -> f266_out1(.(T90, T91))
   f266_in(T130) -> f266_out1([])
   f616_in(.(T109, T110)) -> f616_out1(T109)
   f616_in(.(T118, T119)) -> U4(f616_in(T119), .(T118, T119))
   U4(f616_out1(T120), .(T118, T119)) -> f616_out1(T120)
   f43_in(T35) -> U5(f168_in(T35), T35)
   U5(f168_out1(T36, X36, T37), T35) -> f43_out1(region(T36, T37))
   f39_in(T17) -> U6(f43_in(T17), T17)
   U6(f43_out1(T18), T17) -> U7(f3_in(T17), T17, T18)
   U7(f3_out1(T23), T17, T18) -> f39_out1(T18, T23)
   f168_in(T35) -> U8(f265_in(T35), T35)
   U8(f265_out1(T36, T42), T35) -> U9(f266_in(T42), T35, T36, T42)
   U9(f266_out1(T43), T35, T36, T42) -> f168_out1(T36, T42, T43)
   f614_in(T89) -> U10(f616_in(T89), T89)
   U10(f616_out1(T90), T89) -> U11(f266_in(T89), T89, T90)
   U11(f266_out1(T96), T89, T90) -> f614_out1(T90, T96)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(77) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 4 SCCs with 14 less nodes.
----------------------------------------

(78)
Complex Obligation (AND)

----------------------------------------

(79)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F616_IN(.(T118, T119)) -> F616_IN(T119)

The TRS R consists of the following rules:

   f3_in(T17) -> U1(f39_in(T17), T17)
   U1(f39_out1(T18, T19), T17) -> f3_out1(.(T18, T19))
   f3_in(T136) -> f3_out1([])
   f265_in(.(T56, T57)) -> f265_out1(T56, T57)
   f265_in(.(T65, T66)) -> U2(f265_in(T66), .(T65, T66))
   U2(f265_out1(T67, X69), .(T65, T66)) -> f265_out1(T67, .(T65, X69))
   f266_in(T89) -> U3(f614_in(T89), T89)
   U3(f614_out1(T90, T91), T89) -> f266_out1(.(T90, T91))
   f266_in(T130) -> f266_out1([])
   f616_in(.(T109, T110)) -> f616_out1(T109)
   f616_in(.(T118, T119)) -> U4(f616_in(T119), .(T118, T119))
   U4(f616_out1(T120), .(T118, T119)) -> f616_out1(T120)
   f43_in(T35) -> U5(f168_in(T35), T35)
   U5(f168_out1(T36, X36, T37), T35) -> f43_out1(region(T36, T37))
   f39_in(T17) -> U6(f43_in(T17), T17)
   U6(f43_out1(T18), T17) -> U7(f3_in(T17), T17, T18)
   U7(f3_out1(T23), T17, T18) -> f39_out1(T18, T23)
   f168_in(T35) -> U8(f265_in(T35), T35)
   U8(f265_out1(T36, T42), T35) -> U9(f266_in(T42), T35, T36, T42)
   U9(f266_out1(T43), T35, T36, T42) -> f168_out1(T36, T42, T43)
   f614_in(T89) -> U10(f616_in(T89), T89)
   U10(f616_out1(T90), T89) -> U11(f266_in(T89), T89, T90)
   U11(f266_out1(T96), T89, T90) -> f614_out1(T90, T96)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(80) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(81)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F616_IN(.(T118, T119)) -> F616_IN(T119)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(82) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F616_IN(.(T118, T119)) -> F616_IN(T119)
The graph contains the following edges 1 > 1


----------------------------------------

(83)
YES

----------------------------------------

(84)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F266_IN(T89) -> F614_IN(T89)
   F614_IN(T89) -> U10^1(f616_in(T89), T89)
   U10^1(f616_out1(T90), T89) -> F266_IN(T89)

The TRS R consists of the following rules:

   f3_in(T17) -> U1(f39_in(T17), T17)
   U1(f39_out1(T18, T19), T17) -> f3_out1(.(T18, T19))
   f3_in(T136) -> f3_out1([])
   f265_in(.(T56, T57)) -> f265_out1(T56, T57)
   f265_in(.(T65, T66)) -> U2(f265_in(T66), .(T65, T66))
   U2(f265_out1(T67, X69), .(T65, T66)) -> f265_out1(T67, .(T65, X69))
   f266_in(T89) -> U3(f614_in(T89), T89)
   U3(f614_out1(T90, T91), T89) -> f266_out1(.(T90, T91))
   f266_in(T130) -> f266_out1([])
   f616_in(.(T109, T110)) -> f616_out1(T109)
   f616_in(.(T118, T119)) -> U4(f616_in(T119), .(T118, T119))
   U4(f616_out1(T120), .(T118, T119)) -> f616_out1(T120)
   f43_in(T35) -> U5(f168_in(T35), T35)
   U5(f168_out1(T36, X36, T37), T35) -> f43_out1(region(T36, T37))
   f39_in(T17) -> U6(f43_in(T17), T17)
   U6(f43_out1(T18), T17) -> U7(f3_in(T17), T17, T18)
   U7(f3_out1(T23), T17, T18) -> f39_out1(T18, T23)
   f168_in(T35) -> U8(f265_in(T35), T35)
   U8(f265_out1(T36, T42), T35) -> U9(f266_in(T42), T35, T36, T42)
   U9(f266_out1(T43), T35, T36, T42) -> f168_out1(T36, T42, T43)
   f614_in(T89) -> U10(f616_in(T89), T89)
   U10(f616_out1(T90), T89) -> U11(f266_in(T89), T89, T90)
   U11(f266_out1(T96), T89, T90) -> f614_out1(T90, T96)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(85) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F614_IN(.(T109, T110)) evaluates to  t =F614_IN(.(T109, T110))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

F614_IN(.(T109, T110)) -> U10^1(f616_in(.(T109, T110)), .(T109, T110))
with rule F614_IN(T89) -> U10^1(f616_in(T89), T89) at position [] and matcher [T89 / .(T109, T110)]

U10^1(f616_in(.(T109, T110)), .(T109, T110)) -> U10^1(f616_out1(T109), .(T109, T110))
with rule f616_in(.(T109', T110')) -> f616_out1(T109') at position [0] and matcher [T109' / T109, T110' / T110]

U10^1(f616_out1(T109), .(T109, T110)) -> F266_IN(.(T109, T110))
with rule U10^1(f616_out1(T90), T89') -> F266_IN(T89') at position [] and matcher [T90 / T109, T89' / .(T109, T110)]

F266_IN(.(T109, T110)) -> F614_IN(.(T109, T110))
with rule F266_IN(T89) -> F614_IN(T89)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(86)
NO

----------------------------------------

(87)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F265_IN(.(T65, T66)) -> F265_IN(T66)

The TRS R consists of the following rules:

   f3_in(T17) -> U1(f39_in(T17), T17)
   U1(f39_out1(T18, T19), T17) -> f3_out1(.(T18, T19))
   f3_in(T136) -> f3_out1([])
   f265_in(.(T56, T57)) -> f265_out1(T56, T57)
   f265_in(.(T65, T66)) -> U2(f265_in(T66), .(T65, T66))
   U2(f265_out1(T67, X69), .(T65, T66)) -> f265_out1(T67, .(T65, X69))
   f266_in(T89) -> U3(f614_in(T89), T89)
   U3(f614_out1(T90, T91), T89) -> f266_out1(.(T90, T91))
   f266_in(T130) -> f266_out1([])
   f616_in(.(T109, T110)) -> f616_out1(T109)
   f616_in(.(T118, T119)) -> U4(f616_in(T119), .(T118, T119))
   U4(f616_out1(T120), .(T118, T119)) -> f616_out1(T120)
   f43_in(T35) -> U5(f168_in(T35), T35)
   U5(f168_out1(T36, X36, T37), T35) -> f43_out1(region(T36, T37))
   f39_in(T17) -> U6(f43_in(T17), T17)
   U6(f43_out1(T18), T17) -> U7(f3_in(T17), T17, T18)
   U7(f3_out1(T23), T17, T18) -> f39_out1(T18, T23)
   f168_in(T35) -> U8(f265_in(T35), T35)
   U8(f265_out1(T36, T42), T35) -> U9(f266_in(T42), T35, T36, T42)
   U9(f266_out1(T43), T35, T36, T42) -> f168_out1(T36, T42, T43)
   f614_in(T89) -> U10(f616_in(T89), T89)
   U10(f616_out1(T90), T89) -> U11(f266_in(T89), T89, T90)
   U11(f266_out1(T96), T89, T90) -> f614_out1(T90, T96)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(88) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(89)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F265_IN(.(T65, T66)) -> F265_IN(T66)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(90) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F265_IN(.(T65, T66)) -> F265_IN(T66)
The graph contains the following edges 1 > 1


----------------------------------------

(91)
YES

----------------------------------------

(92)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F3_IN(T17) -> F39_IN(T17)
   F39_IN(T17) -> U6^1(f43_in(T17), T17)
   U6^1(f43_out1(T18), T17) -> F3_IN(T17)

The TRS R consists of the following rules:

   f3_in(T17) -> U1(f39_in(T17), T17)
   U1(f39_out1(T18, T19), T17) -> f3_out1(.(T18, T19))
   f3_in(T136) -> f3_out1([])
   f265_in(.(T56, T57)) -> f265_out1(T56, T57)
   f265_in(.(T65, T66)) -> U2(f265_in(T66), .(T65, T66))
   U2(f265_out1(T67, X69), .(T65, T66)) -> f265_out1(T67, .(T65, X69))
   f266_in(T89) -> U3(f614_in(T89), T89)
   U3(f614_out1(T90, T91), T89) -> f266_out1(.(T90, T91))
   f266_in(T130) -> f266_out1([])
   f616_in(.(T109, T110)) -> f616_out1(T109)
   f616_in(.(T118, T119)) -> U4(f616_in(T119), .(T118, T119))
   U4(f616_out1(T120), .(T118, T119)) -> f616_out1(T120)
   f43_in(T35) -> U5(f168_in(T35), T35)
   U5(f168_out1(T36, X36, T37), T35) -> f43_out1(region(T36, T37))
   f39_in(T17) -> U6(f43_in(T17), T17)
   U6(f43_out1(T18), T17) -> U7(f3_in(T17), T17, T18)
   U7(f3_out1(T23), T17, T18) -> f39_out1(T18, T23)
   f168_in(T35) -> U8(f265_in(T35), T35)
   U8(f265_out1(T36, T42), T35) -> U9(f266_in(T42), T35, T36, T42)
   U9(f266_out1(T43), T35, T36, T42) -> f168_out1(T36, T42, T43)
   f614_in(T89) -> U10(f616_in(T89), T89)
   U10(f616_out1(T90), T89) -> U11(f266_in(T89), T89, T90)
   U11(f266_out1(T96), T89, T90) -> f614_out1(T90, T96)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(93) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F39_IN(.(T56, T57)) evaluates to  t =F39_IN(.(T56, T57))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

F39_IN(.(T56, T57)) -> U6^1(f43_in(.(T56, T57)), .(T56, T57))
with rule F39_IN(T17) -> U6^1(f43_in(T17), T17) at position [] and matcher [T17 / .(T56, T57)]

U6^1(f43_in(.(T56, T57)), .(T56, T57)) -> U6^1(U5(f168_in(.(T56, T57)), .(T56, T57)), .(T56, T57))
with rule f43_in(T35') -> U5(f168_in(T35'), T35') at position [0] and matcher [T35' / .(T56, T57)]

U6^1(U5(f168_in(.(T56, T57)), .(T56, T57)), .(T56, T57)) -> U6^1(U5(U8(f265_in(.(T56, T57)), .(T56, T57)), .(T56, T57)), .(T56, T57))
with rule f168_in(T35') -> U8(f265_in(T35'), T35') at position [0,0] and matcher [T35' / .(T56, T57)]

U6^1(U5(U8(f265_in(.(T56, T57)), .(T56, T57)), .(T56, T57)), .(T56, T57)) -> U6^1(U5(U8(f265_out1(T56, T57), .(T56, T57)), .(T56, T57)), .(T56, T57))
with rule f265_in(.(T56', T57')) -> f265_out1(T56', T57') at position [0,0,0] and matcher [T56' / T56, T57' / T57]

U6^1(U5(U8(f265_out1(T56, T57), .(T56, T57)), .(T56, T57)), .(T56, T57)) -> U6^1(U5(U9(f266_in(T57), .(T56, T57), T56, T57), .(T56, T57)), .(T56, T57))
with rule U8(f265_out1(T36, T42'), T35'') -> U9(f266_in(T42'), T35'', T36, T42') at position [0,0] and matcher [T36 / T56, T42' / T57, T35'' / .(T56, T57)]

U6^1(U5(U9(f266_in(T57), .(T56, T57), T56, T57), .(T56, T57)), .(T56, T57)) -> U6^1(U5(U9(f266_out1([]), .(T56, T57), T56, T57), .(T56, T57)), .(T56, T57))
with rule f266_in(T130) -> f266_out1([]) at position [0,0,0] and matcher [T130 / T57]

U6^1(U5(U9(f266_out1([]), .(T56, T57), T56, T57), .(T56, T57)), .(T56, T57)) -> U6^1(U5(f168_out1(T56, T57, []), .(T56, T57)), .(T56, T57))
with rule U9(f266_out1(T43), T35', T36', T42) -> f168_out1(T36', T42, T43) at position [0,0] and matcher [T43 / [], T35' / .(T56, T57), T36' / T56, T42 / T57]

U6^1(U5(f168_out1(T56, T57, []), .(T56, T57)), .(T56, T57)) -> U6^1(f43_out1(region(T56, [])), .(T56, T57))
with rule U5(f168_out1(T36, X36, T37), T35) -> f43_out1(region(T36, T37)) at position [0] and matcher [T36 / T56, X36 / T57, T37 / [], T35 / .(T56, T57)]

U6^1(f43_out1(region(T56, [])), .(T56, T57)) -> F3_IN(.(T56, T57))
with rule U6^1(f43_out1(T18), T17') -> F3_IN(T17') at position [] and matcher [T18 / region(T56, []), T17' / .(T56, T57)]

F3_IN(.(T56, T57)) -> F39_IN(.(T56, T57))
with rule F3_IN(T17) -> F39_IN(T17)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(94)
NO

----------------------------------------

(95) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(color_map (. Region Regions) Colors)",
                "(',' (color_region Region Colors) (color_map Regions Colors))"
            ],
            [
                "(color_map ([]) Colors)",
                null
            ],
            [
                "(color_region (region Color Neighbors) Colors)",
                "(',' (select Color Colors Colors1) (members Neighbors Colors1))"
            ],
            [
                "(select X (. X Xs) Xs)",
                null
            ],
            [
                "(select X (. Y Ys) (. Y Zs))",
                "(select X Ys Zs)"
            ],
            [
                "(members (. X Xs) Ys)",
                "(',' (member X Ys) (members Xs Ys))"
            ],
            [
                "(members ([]) Ys)",
                null
            ],
            [
                "(member X (. X X1))",
                null
            ],
            [
                "(member X (. X2 T))",
                "(member X T)"
            ],
            [
                "(test_color Name Pairs)",
                "(',' (colors Name Colors) (',' (color_map Map Colors) (',' (map Name Symbols Map) (symbols Symbols Map Pairs))))"
            ],
            [
                "(symbols ([]) ([]) ([]))",
                null
            ],
            [
                "(symbols (. S Ss) (. (region C N) Rs) (. (pair S C) Ps))",
                "(symbols Ss Rs Ps)"
            ],
            [
                "(map (test) (. (a) (. (b) (. (c) (. (d) (. (e) (. (f) ([]))))))) (. (region A (. B (. C (. D ([]))))) (. (region B (. A (. C (. E ([]))))) (. (region C (. A (. B (. D (. E (. F ([]))))))) (. (region D (. A (. C (. F ([]))))) (. (region E (. B (. C (. F ([]))))) (. (region F (. C (. D (. E ([]))))) ([]))))))))",
                null
            ],
            [
                "(map (west_europe) (. (portugal) (. (spain) (. (france) (. (belgium) (. (holland) (. (west_germany) (. (luxembourg) (. (italy) (. (switzerland) (. (austria) ([]))))))))))) (. (region P (. E ([]))) (. (region E (. F (. P ([])))) (. (region F (. E (. I (. S (. B (. WG (. L ([])))))))) (. (region B (. F (. H (. L (. WG ([])))))) (. (region H (. B (. WG ([])))) (. (region WG (. F (. A (. S (. H (. B (. L ([])))))))) (. (region L (. F (. B (. WG ([]))))) (. (region I (. F (. A (. S ([]))))) (. (region S (. F (. I (. A (. WG ([])))))) (. (region A (. I (. S (. WG ([]))))) ([]))))))))))))",
                null
            ],
            [
                "(colors X (. (red) (. (yellow) (. (blue) (. (white) ([]))))))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "490": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(select T26 T25 X26)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T25"],
                    "free": ["X26"],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "592": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T59 T58 X59)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T58"],
                    "free": ["X59"],
                    "exprvars": []
                }
            },
            "330": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T26 T25 X26)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T25"],
                    "free": ["X26"],
                    "exprvars": []
                }
            },
            "594": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "331": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (members T34 T33) (color_map T35 T25))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T25",
                        "T33"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "750": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "751": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(color_map T1 T8)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "752": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "555": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "753": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "754": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "755": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "756": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "757": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "637": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T34 T33)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T33"],
                    "free": [],
                    "exprvars": []
                }
            },
            "638": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T67 T25)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T25"],
                    "free": [],
                    "exprvars": []
                }
            },
            "738": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T86 T85)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T85"],
                    "free": [],
                    "exprvars": []
                }
            },
            "739": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T92 T85)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T85"],
                    "free": [],
                    "exprvars": []
                }
            },
            "10": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(',' (color_region T9 T8) (color_map T10 T8))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "11": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "682": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(members T34 T33)"
                    },
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(members T34 T33)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T33"],
                    "free": [],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "485": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(select T26 T25 X26)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T25"],
                    "free": ["X26"],
                    "exprvars": []
                }
            },
            "683": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(members T34 T33)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T33"],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "563": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "684": {
                "goal": [{
                    "clause": 6,
                    "scope": 4,
                    "term": "(members T34 T33)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T33"],
                    "free": [],
                    "exprvars": []
                }
            },
            "685": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T86 T85) (members T87 T85))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T85"],
                    "free": [],
                    "exprvars": []
                }
            },
            "740": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(member T86 T85)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(member T86 T85)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T85"],
                    "free": [],
                    "exprvars": []
                }
            },
            "686": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "741": {
                "goal": [{
                    "clause": 7,
                    "scope": 5,
                    "term": "(member T86 T85)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T85"],
                    "free": [],
                    "exprvars": []
                }
            },
            "742": {
                "goal": [{
                    "clause": 8,
                    "scope": 5,
                    "term": "(member T86 T85)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T85"],
                    "free": [],
                    "exprvars": []
                }
            },
            "567": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "743": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (color_region T9 T8) (color_map T10 T8))"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "744": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(color_map T1 T2)",
                        "(color_map (. X6 X7) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "745": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(',' (color_region T9 T8) (color_map T10 T8))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "328": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (',' (select T26 T25 X26) (members T27 X26)) (color_map T28 T25))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T25"],
                    "free": ["X26"],
                    "exprvars": []
                }
            },
            "746": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T116 T115)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T115"],
                    "free": [],
                    "exprvars": []
                }
            },
            "329": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "747": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "748": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "749": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "409": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(select T26 T25 X26)"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(select T26 T25 X26)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T25"],
                    "free": ["X26"],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 2,
                "label": "CASE"
            },
            {
                "from": 2,
                "to": 7,
                "label": "EVAL with clause\ncolor_map(.(X6, X7), X8) :- ','(color_region(X6, X8), color_map(X7, X8)).\nand substitutionX6 -> T9,\nX7 -> T10,\nT1 -> .(T9, T10),\nT2 -> T8,\nX8 -> T8,\nT6 -> T9,\nT7 -> T10"
            },
            {
                "from": 2,
                "to": 8,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 7,
                "to": 9,
                "label": "CASE"
            },
            {
                "from": 8,
                "to": 755,
                "label": "EVAL with clause\ncolor_map([], X129).\nand substitutionT1 -> [],\nT2 -> T134,\nX129 -> T134"
            },
            {
                "from": 8,
                "to": 756,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 9,
                "to": 10,
                "label": "PARALLEL"
            },
            {
                "from": 9,
                "to": 11,
                "label": "PARALLEL"
            },
            {
                "from": 10,
                "to": 328,
                "label": "EVAL with clause\ncolor_region(region(X23, X24), X25) :- ','(select(X23, X25, X26), members(X24, X26)).\nand substitutionX23 -> T26,\nX24 -> T27,\nT9 -> region(T26, T27),\nT8 -> T25,\nX25 -> T25,\nT23 -> T26,\nT24 -> T27,\nT10 -> T28"
            },
            {
                "from": 10,
                "to": 329,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 11,
                "to": 751,
                "label": "FAILURE"
            },
            {
                "from": 328,
                "to": 330,
                "label": "SPLIT 1"
            },
            {
                "from": 328,
                "to": 331,
                "label": "SPLIT 2\nnew knowledge:\nT26 is ground\nT25 is ground\nT33 is ground\nreplacements:X26 -> T33,\nT27 -> T34,\nT28 -> T35"
            },
            {
                "from": 330,
                "to": 409,
                "label": "CASE"
            },
            {
                "from": 331,
                "to": 637,
                "label": "SPLIT 1"
            },
            {
                "from": 331,
                "to": 638,
                "label": "SPLIT 2\nnew knowledge:\nT34 is ground\nT33 is ground\nreplacements:T35 -> T67"
            },
            {
                "from": 409,
                "to": 485,
                "label": "PARALLEL"
            },
            {
                "from": 409,
                "to": 490,
                "label": "PARALLEL"
            },
            {
                "from": 485,
                "to": 555,
                "label": "EVAL with clause\nselect(X43, .(X43, X44), X44).\nand substitutionT26 -> T48,\nX43 -> T48,\nX44 -> T49,\nT25 -> .(T48, T49),\nX26 -> T49"
            },
            {
                "from": 485,
                "to": 563,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 490,
                "to": 592,
                "label": "EVAL with clause\nselect(X55, .(X56, X57), .(X56, X58)) :- select(X55, X57, X58).\nand substitutionT26 -> T59,\nX55 -> T59,\nX56 -> T57,\nX57 -> T58,\nT25 -> .(T57, T58),\nX58 -> X59,\nX26 -> .(T57, X59),\nT56 -> T59"
            },
            {
                "from": 490,
                "to": 594,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 555,
                "to": 567,
                "label": "SUCCESS"
            },
            {
                "from": 592,
                "to": 330,
                "label": "INSTANCE with matching:\nT26 -> T59\nT25 -> T58\nX26 -> X59"
            },
            {
                "from": 637,
                "to": 682,
                "label": "CASE"
            },
            {
                "from": 638,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T67\nT2 -> T25"
            },
            {
                "from": 682,
                "to": 683,
                "label": "PARALLEL"
            },
            {
                "from": 682,
                "to": 684,
                "label": "PARALLEL"
            },
            {
                "from": 683,
                "to": 685,
                "label": "EVAL with clause\nmembers(.(X82, X83), X84) :- ','(member(X82, X84), members(X83, X84)).\nand substitutionX82 -> T86,\nX83 -> T87,\nT34 -> .(T86, T87),\nT33 -> T85,\nX84 -> T85,\nT83 -> T86,\nT84 -> T87"
            },
            {
                "from": 683,
                "to": 686,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 684,
                "to": 748,
                "label": "EVAL with clause\nmembers([], X121).\nand substitutionT34 -> [],\nT33 -> T126,\nX121 -> T126"
            },
            {
                "from": 684,
                "to": 749,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 685,
                "to": 738,
                "label": "SPLIT 1"
            },
            {
                "from": 685,
                "to": 739,
                "label": "SPLIT 2\nnew knowledge:\nT86 is ground\nT85 is ground\nreplacements:T87 -> T92"
            },
            {
                "from": 738,
                "to": 740,
                "label": "CASE"
            },
            {
                "from": 739,
                "to": 637,
                "label": "INSTANCE with matching:\nT34 -> T92\nT33 -> T85"
            },
            {
                "from": 740,
                "to": 741,
                "label": "PARALLEL"
            },
            {
                "from": 740,
                "to": 742,
                "label": "PARALLEL"
            },
            {
                "from": 741,
                "to": 743,
                "label": "EVAL with clause\nmember(X101, .(X101, X102)).\nand substitutionT86 -> T105,\nX101 -> T105,\nX102 -> T106,\nT85 -> .(T105, T106)"
            },
            {
                "from": 741,
                "to": 744,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 742,
                "to": 746,
                "label": "EVAL with clause\nmember(X109, .(X110, X111)) :- member(X109, X111).\nand substitutionT86 -> T116,\nX109 -> T116,\nX110 -> T114,\nX111 -> T115,\nT85 -> .(T114, T115),\nT113 -> T116"
            },
            {
                "from": 742,
                "to": 747,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 743,
                "to": 745,
                "label": "SUCCESS"
            },
            {
                "from": 746,
                "to": 738,
                "label": "INSTANCE with matching:\nT86 -> T116\nT85 -> T115"
            },
            {
                "from": 748,
                "to": 750,
                "label": "SUCCESS"
            },
            {
                "from": 751,
                "to": 752,
                "label": "EVAL with clause\ncolor_map([], X127).\nand substitutionT1 -> [],\nT8 -> T132,\nX127 -> T132"
            },
            {
                "from": 751,
                "to": 753,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 752,
                "to": 754,
                "label": "SUCCESS"
            },
            {
                "from": 755,
                "to": 757,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(96)
Obligation:
Triples:

selectA(X1, .(X2, X3), .(X2, X4)) :- selectA(X1, X3, X4).
membersC(.(X1, X2), X3) :- memberD(X1, X3).
membersC(.(X1, X2), X3) :- ','(membercD(X1, X3), membersC(X2, X3)).
memberD(X1, .(X2, X3)) :- memberD(X1, X3).
color_mapB(.(region(X1, X2), X3), X4) :- selectA(X1, X4, X5).
color_mapB(.(region(X1, X2), X3), X4) :- ','(selectcA(X1, X4, X5), membersC(X2, X5)).
color_mapB(.(region(X1, X2), X3), X4) :- ','(selectcA(X1, X4, X5), ','(memberscC(X2, X5), color_mapB(X3, X4))).

Clauses:

selectcA(X1, .(X1, X2), X2).
selectcA(X1, .(X2, X3), .(X2, X4)) :- selectcA(X1, X3, X4).
color_mapcB(.(region(X1, X2), X3), X4) :- ','(selectcA(X1, X4, X5), ','(memberscC(X2, X5), color_mapcB(X3, X4))).
color_mapcB([], X1).
color_mapcB([], X1).
memberscC(.(X1, X2), X3) :- ','(membercD(X1, X3), memberscC(X2, X3)).
memberscC([], X1).
membercD(X1, .(X1, X2)).
membercD(X1, .(X2, X3)) :- membercD(X1, X3).

Afs:

color_mapB(x1, x2)  =  color_mapB(x2)


----------------------------------------

(97) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

color_mapB_in_2: (f,b)

selectA_in_3: (f,b,f)

selectcA_in_3: (f,b,f)

membersC_in_2: (f,b)

memberD_in_2: (f,b)

membercD_in_2: (f,b)

memberscC_in_2: (f,b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAPB_IN_AG(.(region(X1, X2), X3), X4) -> U6_AG(X1, X2, X3, X4, selectA_in_aga(X1, X4, X5))
   COLOR_MAPB_IN_AG(.(region(X1, X2), X3), X4) -> SELECTA_IN_AGA(X1, X4, X5)
   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> U1_AGA(X1, X2, X3, X4, selectA_in_aga(X1, X3, X4))
   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> SELECTA_IN_AGA(X1, X3, X4)
   COLOR_MAPB_IN_AG(.(region(X1, X2), X3), X4) -> U7_AG(X1, X2, X3, X4, selectcA_in_aga(X1, X4, X5))
   U7_AG(X1, X2, X3, X4, selectcA_out_aga(X1, X4, X5)) -> U8_AG(X1, X2, X3, X4, membersC_in_ag(X2, X5))
   U7_AG(X1, X2, X3, X4, selectcA_out_aga(X1, X4, X5)) -> MEMBERSC_IN_AG(X2, X5)
   MEMBERSC_IN_AG(.(X1, X2), X3) -> U2_AG(X1, X2, X3, memberD_in_ag(X1, X3))
   MEMBERSC_IN_AG(.(X1, X2), X3) -> MEMBERD_IN_AG(X1, X3)
   MEMBERD_IN_AG(X1, .(X2, X3)) -> U5_AG(X1, X2, X3, memberD_in_ag(X1, X3))
   MEMBERD_IN_AG(X1, .(X2, X3)) -> MEMBERD_IN_AG(X1, X3)
   MEMBERSC_IN_AG(.(X1, X2), X3) -> U3_AG(X1, X2, X3, membercD_in_ag(X1, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> U4_AG(X1, X2, X3, membersC_in_ag(X2, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X2, X3)
   U7_AG(X1, X2, X3, X4, selectcA_out_aga(X1, X4, X5)) -> U9_AG(X1, X2, X3, X4, memberscC_in_ag(X2, X5))
   U9_AG(X1, X2, X3, X4, memberscC_out_ag(X2, X5)) -> U10_AG(X1, X2, X3, X4, color_mapB_in_ag(X3, X4))
   U9_AG(X1, X2, X3, X4, memberscC_out_ag(X2, X5)) -> COLOR_MAPB_IN_AG(X3, X4)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
color_mapB_in_ag(x1, x2)  =  color_mapB_in_ag(x2)

selectA_in_aga(x1, x2, x3)  =  selectA_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membersC_in_ag(x1, x2)  =  membersC_in_ag(x2)

memberD_in_ag(x1, x2)  =  memberD_in_ag(x2)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

COLOR_MAPB_IN_AG(x1, x2)  =  COLOR_MAPB_IN_AG(x2)

U6_AG(x1, x2, x3, x4, x5)  =  U6_AG(x4, x5)

SELECTA_IN_AGA(x1, x2, x3)  =  SELECTA_IN_AGA(x2)

U1_AGA(x1, x2, x3, x4, x5)  =  U1_AGA(x2, x3, x5)

U7_AG(x1, x2, x3, x4, x5)  =  U7_AG(x4, x5)

U8_AG(x1, x2, x3, x4, x5)  =  U8_AG(x4, x5)

MEMBERSC_IN_AG(x1, x2)  =  MEMBERSC_IN_AG(x2)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x3, x4)

MEMBERD_IN_AG(x1, x2)  =  MEMBERD_IN_AG(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x2, x3, x4)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x3, x4)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x3, x4)

U9_AG(x1, x2, x3, x4, x5)  =  U9_AG(x4, x5)

U10_AG(x1, x2, x3, x4, x5)  =  U10_AG(x4, x5)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(98)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAPB_IN_AG(.(region(X1, X2), X3), X4) -> U6_AG(X1, X2, X3, X4, selectA_in_aga(X1, X4, X5))
   COLOR_MAPB_IN_AG(.(region(X1, X2), X3), X4) -> SELECTA_IN_AGA(X1, X4, X5)
   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> U1_AGA(X1, X2, X3, X4, selectA_in_aga(X1, X3, X4))
   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> SELECTA_IN_AGA(X1, X3, X4)
   COLOR_MAPB_IN_AG(.(region(X1, X2), X3), X4) -> U7_AG(X1, X2, X3, X4, selectcA_in_aga(X1, X4, X5))
   U7_AG(X1, X2, X3, X4, selectcA_out_aga(X1, X4, X5)) -> U8_AG(X1, X2, X3, X4, membersC_in_ag(X2, X5))
   U7_AG(X1, X2, X3, X4, selectcA_out_aga(X1, X4, X5)) -> MEMBERSC_IN_AG(X2, X5)
   MEMBERSC_IN_AG(.(X1, X2), X3) -> U2_AG(X1, X2, X3, memberD_in_ag(X1, X3))
   MEMBERSC_IN_AG(.(X1, X2), X3) -> MEMBERD_IN_AG(X1, X3)
   MEMBERD_IN_AG(X1, .(X2, X3)) -> U5_AG(X1, X2, X3, memberD_in_ag(X1, X3))
   MEMBERD_IN_AG(X1, .(X2, X3)) -> MEMBERD_IN_AG(X1, X3)
   MEMBERSC_IN_AG(.(X1, X2), X3) -> U3_AG(X1, X2, X3, membercD_in_ag(X1, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> U4_AG(X1, X2, X3, membersC_in_ag(X2, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X2, X3)
   U7_AG(X1, X2, X3, X4, selectcA_out_aga(X1, X4, X5)) -> U9_AG(X1, X2, X3, X4, memberscC_in_ag(X2, X5))
   U9_AG(X1, X2, X3, X4, memberscC_out_ag(X2, X5)) -> U10_AG(X1, X2, X3, X4, color_mapB_in_ag(X3, X4))
   U9_AG(X1, X2, X3, X4, memberscC_out_ag(X2, X5)) -> COLOR_MAPB_IN_AG(X3, X4)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
color_mapB_in_ag(x1, x2)  =  color_mapB_in_ag(x2)

selectA_in_aga(x1, x2, x3)  =  selectA_in_aga(x2)

.(x1, x2)  =  .(x1, x2)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membersC_in_ag(x1, x2)  =  membersC_in_ag(x2)

memberD_in_ag(x1, x2)  =  memberD_in_ag(x2)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

COLOR_MAPB_IN_AG(x1, x2)  =  COLOR_MAPB_IN_AG(x2)

U6_AG(x1, x2, x3, x4, x5)  =  U6_AG(x4, x5)

SELECTA_IN_AGA(x1, x2, x3)  =  SELECTA_IN_AGA(x2)

U1_AGA(x1, x2, x3, x4, x5)  =  U1_AGA(x2, x3, x5)

U7_AG(x1, x2, x3, x4, x5)  =  U7_AG(x4, x5)

U8_AG(x1, x2, x3, x4, x5)  =  U8_AG(x4, x5)

MEMBERSC_IN_AG(x1, x2)  =  MEMBERSC_IN_AG(x2)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x3, x4)

MEMBERD_IN_AG(x1, x2)  =  MEMBERD_IN_AG(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x2, x3, x4)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x3, x4)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x3, x4)

U9_AG(x1, x2, x3, x4, x5)  =  U9_AG(x4, x5)

U10_AG(x1, x2, x3, x4, x5)  =  U10_AG(x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(99) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 4 SCCs with 10 less nodes.
----------------------------------------

(100)
Complex Obligation (AND)

----------------------------------------

(101)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERD_IN_AG(X1, .(X2, X3)) -> MEMBERD_IN_AG(X1, X3)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

MEMBERD_IN_AG(x1, x2)  =  MEMBERD_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(102) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(103)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERD_IN_AG(X1, .(X2, X3)) -> MEMBERD_IN_AG(X1, X3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBERD_IN_AG(x1, x2)  =  MEMBERD_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(104) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(105)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERD_IN_AG(.(X2, X3)) -> MEMBERD_IN_AG(X3)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(106) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBERD_IN_AG(.(X2, X3)) -> MEMBERD_IN_AG(X3)
The graph contains the following edges 1 > 1


----------------------------------------

(107)
YES

----------------------------------------

(108)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERSC_IN_AG(.(X1, X2), X3) -> U3_AG(X1, X2, X3, membercD_in_ag(X1, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X2, X3)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

MEMBERSC_IN_AG(x1, x2)  =  MEMBERSC_IN_AG(x2)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(109) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(110)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERSC_IN_AG(.(X1, X2), X3) -> U3_AG(X1, X2, X3, membercD_in_ag(X1, X3))
   U3_AG(X1, X2, X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X2, X3)

The TRS R consists of the following rules:

   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

MEMBERSC_IN_AG(x1, x2)  =  MEMBERSC_IN_AG(x2)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(111) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(112)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERSC_IN_AG(X3) -> U3_AG(X3, membercD_in_ag(X3))
   U3_AG(X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X3)

The TRS R consists of the following rules:

   membercD_in_ag(.(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(.(X2, X3)) -> U18_ag(X2, X3, membercD_in_ag(X3))
   U18_ag(X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))

The set Q consists of the following terms:

   membercD_in_ag(x0)
   U18_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(113) TransformationProof (SOUND)
By narrowing [LPAR04] the rule MEMBERSC_IN_AG(X3) -> U3_AG(X3, membercD_in_ag(X3)) at position [1] we obtained the following new rules [LPAR04]:

   (MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), membercD_out_ag(x0, .(x0, x1))),MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), membercD_out_ag(x0, .(x0, x1))))
   (MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), U18_ag(x0, x1, membercD_in_ag(x1))),MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), U18_ag(x0, x1, membercD_in_ag(x1))))


----------------------------------------

(114)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_AG(X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X3)
   MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), membercD_out_ag(x0, .(x0, x1)))
   MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), U18_ag(x0, x1, membercD_in_ag(x1)))

The TRS R consists of the following rules:

   membercD_in_ag(.(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(.(X2, X3)) -> U18_ag(X2, X3, membercD_in_ag(X3))
   U18_ag(X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))

The set Q consists of the following terms:

   membercD_in_ag(x0)
   U18_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(115) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U3_AG(X3, membercD_out_ag(X1, X3)) -> MEMBERSC_IN_AG(X3) we obtained the following new rules [LPAR04]:

   (U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1)),U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1)))
   (U3_AG(.(z0, z1), membercD_out_ag(x1, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1)),U3_AG(.(z0, z1), membercD_out_ag(x1, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1)))


----------------------------------------

(116)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), membercD_out_ag(x0, .(x0, x1)))
   MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), U18_ag(x0, x1, membercD_in_ag(x1)))
   U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1))
   U3_AG(.(z0, z1), membercD_out_ag(x1, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1))

The TRS R consists of the following rules:

   membercD_in_ag(.(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(.(X2, X3)) -> U18_ag(X2, X3, membercD_in_ag(X3))
   U18_ag(X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))

The set Q consists of the following terms:

   membercD_in_ag(x0)
   U18_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(117) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1))) evaluates to  t =U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1)))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1))) -> MEMBERSC_IN_AG(.(z0, z1))
with rule U3_AG(.(z0', z1'), membercD_out_ag(z0', .(z0', z1'))) -> MEMBERSC_IN_AG(.(z0', z1')) at position [] and matcher [z0' / z0, z1' / z1]

MEMBERSC_IN_AG(.(z0, z1)) -> U3_AG(.(z0, z1), membercD_out_ag(z0, .(z0, z1)))
with rule MEMBERSC_IN_AG(.(x0, x1)) -> U3_AG(.(x0, x1), membercD_out_ag(x0, .(x0, x1)))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(118)
NO

----------------------------------------

(119)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> SELECTA_IN_AGA(X1, X3, X4)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

SELECTA_IN_AGA(x1, x2, x3)  =  SELECTA_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(120) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(121)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SELECTA_IN_AGA(X1, .(X2, X3), .(X2, X4)) -> SELECTA_IN_AGA(X1, X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

SELECTA_IN_AGA(x1, x2, x3)  =  SELECTA_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(122) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(123)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SELECTA_IN_AGA(.(X2, X3)) -> SELECTA_IN_AGA(X3)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(124) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SELECTA_IN_AGA(.(X2, X3)) -> SELECTA_IN_AGA(X3)
The graph contains the following edges 1 > 1


----------------------------------------

(125)
YES

----------------------------------------

(126)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COLOR_MAPB_IN_AG(.(region(X1, X2), X3), X4) -> U7_AG(X1, X2, X3, X4, selectcA_in_aga(X1, X4, X5))
   U7_AG(X1, X2, X3, X4, selectcA_out_aga(X1, X4, X5)) -> U9_AG(X1, X2, X3, X4, memberscC_in_ag(X2, X5))
   U9_AG(X1, X2, X3, X4, memberscC_out_ag(X2, X5)) -> COLOR_MAPB_IN_AG(X3, X4)

The TRS R consists of the following rules:

   selectcA_in_aga(X1, .(X1, X2), X2) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(X1, .(X2, X3), .(X2, X4)) -> U12_aga(X1, X2, X3, X4, selectcA_in_aga(X1, X3, X4))
   U12_aga(X1, X2, X3, X4, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(X1, .(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(X1, .(X2, X3)) -> U18_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U18_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(.(X1, X2), X3) -> U16_ag(X1, X2, X3, membercD_in_ag(X1, X3))
   U16_ag(X1, X2, X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X2, X3, memberscC_in_ag(X2, X3))
   memberscC_in_ag([], X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X2, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

selectcA_in_aga(x1, x2, x3)  =  selectcA_in_aga(x2)

selectcA_out_aga(x1, x2, x3)  =  selectcA_out_aga(x1, x2, x3)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x3, x5)

membercD_in_ag(x1, x2)  =  membercD_in_ag(x2)

membercD_out_ag(x1, x2)  =  membercD_out_ag(x1, x2)

U18_ag(x1, x2, x3, x4)  =  U18_ag(x2, x3, x4)

memberscC_in_ag(x1, x2)  =  memberscC_in_ag(x2)

U16_ag(x1, x2, x3, x4)  =  U16_ag(x3, x4)

U17_ag(x1, x2, x3, x4)  =  U17_ag(x1, x3, x4)

memberscC_out_ag(x1, x2)  =  memberscC_out_ag(x1, x2)

COLOR_MAPB_IN_AG(x1, x2)  =  COLOR_MAPB_IN_AG(x2)

U7_AG(x1, x2, x3, x4, x5)  =  U7_AG(x4, x5)

U9_AG(x1, x2, x3, x4, x5)  =  U9_AG(x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(127) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(128)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COLOR_MAPB_IN_AG(X4) -> U7_AG(X4, selectcA_in_aga(X4))
   U7_AG(X4, selectcA_out_aga(X1, X4, X5)) -> U9_AG(X4, memberscC_in_ag(X5))
   U9_AG(X4, memberscC_out_ag(X2, X5)) -> COLOR_MAPB_IN_AG(X4)

The TRS R consists of the following rules:

   selectcA_in_aga(.(X1, X2)) -> selectcA_out_aga(X1, .(X1, X2), X2)
   selectcA_in_aga(.(X2, X3)) -> U12_aga(X2, X3, selectcA_in_aga(X3))
   U12_aga(X2, X3, selectcA_out_aga(X1, X3, X4)) -> selectcA_out_aga(X1, .(X2, X3), .(X2, X4))
   membercD_in_ag(.(X1, X2)) -> membercD_out_ag(X1, .(X1, X2))
   membercD_in_ag(.(X2, X3)) -> U18_ag(X2, X3, membercD_in_ag(X3))
   U18_ag(X2, X3, membercD_out_ag(X1, X3)) -> membercD_out_ag(X1, .(X2, X3))
   memberscC_in_ag(X3) -> U16_ag(X3, membercD_in_ag(X3))
   U16_ag(X3, membercD_out_ag(X1, X3)) -> U17_ag(X1, X3, memberscC_in_ag(X3))
   memberscC_in_ag(X1) -> memberscC_out_ag([], X1)
   U17_ag(X1, X3, memberscC_out_ag(X2, X3)) -> memberscC_out_ag(.(X1, X2), X3)

The set Q consists of the following terms:

   selectcA_in_aga(x0)
   U12_aga(x0, x1, x2)
   membercD_in_ag(x0)
   U18_ag(x0, x1, x2)
   memberscC_in_ag(x0)
   U16_ag(x0, x1)
   U17_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(129) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 583,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(color_map (. Region Regions) Colors)",
                "(',' (color_region Region Colors) (color_map Regions Colors))"
            ],
            [
                "(color_map ([]) Colors)",
                null
            ],
            [
                "(color_region (region Color Neighbors) Colors)",
                "(',' (select Color Colors Colors1) (members Neighbors Colors1))"
            ],
            [
                "(select X (. X Xs) Xs)",
                null
            ],
            [
                "(select X (. Y Ys) (. Y Zs))",
                "(select X Ys Zs)"
            ],
            [
                "(members (. X Xs) Ys)",
                "(',' (member X Ys) (members Xs Ys))"
            ],
            [
                "(members ([]) Ys)",
                null
            ],
            [
                "(member X (. X X1))",
                null
            ],
            [
                "(member X (. X2 T))",
                "(member X T)"
            ],
            [
                "(test_color Name Pairs)",
                "(',' (colors Name Colors) (',' (color_map Map Colors) (',' (map Name Symbols Map) (symbols Symbols Map Pairs))))"
            ],
            [
                "(symbols ([]) ([]) ([]))",
                null
            ],
            [
                "(symbols (. S Ss) (. (region C N) Rs) (. (pair S C) Ps))",
                "(symbols Ss Rs Ps)"
            ],
            [
                "(map (test) (. (a) (. (b) (. (c) (. (d) (. (e) (. (f) ([]))))))) (. (region A (. B (. C (. D ([]))))) (. (region B (. A (. C (. E ([]))))) (. (region C (. A (. B (. D (. E (. F ([]))))))) (. (region D (. A (. C (. F ([]))))) (. (region E (. B (. C (. F ([]))))) (. (region F (. C (. D (. E ([]))))) ([]))))))))",
                null
            ],
            [
                "(map (west_europe) (. (portugal) (. (spain) (. (france) (. (belgium) (. (holland) (. (west_germany) (. (luxembourg) (. (italy) (. (switzerland) (. (austria) ([]))))))))))) (. (region P (. E ([]))) (. (region E (. F (. P ([])))) (. (region F (. E (. I (. S (. B (. WG (. L ([])))))))) (. (region B (. F (. H (. L (. WG ([])))))) (. (region H (. B (. WG ([])))) (. (region WG (. F (. A (. S (. H (. B (. L ([])))))))) (. (region L (. F (. B (. WG ([]))))) (. (region I (. F (. A (. S ([]))))) (. (region S (. F (. I (. A (. WG ([])))))) (. (region A (. I (. S (. WG ([]))))) ([]))))))))))))",
                null
            ],
            [
                "(colors X (. (red) (. (yellow) (. (blue) (. (white) ([]))))))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "709": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(select T36 T35 X36)"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(select T36 T35 X36)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T35"],
                    "free": ["X36"],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "590": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T23 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "591": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(color_region T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "730": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T120 T119)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T119"],
                    "free": [],
                    "exprvars": []
                }
            },
            "731": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "710": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(select T36 T35 X36)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T35"],
                    "free": ["X36"],
                    "exprvars": []
                }
            },
            "732": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "711": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(select T36 T35 X36)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T35"],
                    "free": ["X36"],
                    "exprvars": []
                }
            },
            "733": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "712": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "734": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "713": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "735": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "714": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "736": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "715": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T67 T66 X69)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T66"],
                    "free": ["X69"],
                    "exprvars": []
                }
            },
            "737": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "716": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "717": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 4,
                        "term": "(members T43 T42)"
                    },
                    {
                        "clause": 6,
                        "scope": 4,
                        "term": "(members T43 T42)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T42"],
                    "free": [],
                    "exprvars": []
                }
            },
            "718": {
                "goal": [{
                    "clause": 5,
                    "scope": 4,
                    "term": "(members T43 T42)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T42"],
                    "free": [],
                    "exprvars": []
                }
            },
            "719": {
                "goal": [{
                    "clause": 6,
                    "scope": 4,
                    "term": "(members T43 T42)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T42"],
                    "free": [],
                    "exprvars": []
                }
            },
            "583": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "584": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(color_map T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "585": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "586": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(color_map T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "587": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (color_region T18 T17) (color_map T19 T17))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "588": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "720": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T90 T89) (members T91 T89))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T89"],
                    "free": [],
                    "exprvars": []
                }
            },
            "589": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(color_region T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "721": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "722": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T90 T89)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T89"],
                    "free": [],
                    "exprvars": []
                }
            },
            "723": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T96 T89)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T89"],
                    "free": [],
                    "exprvars": []
                }
            },
            "724": {
                "goal": [
                    {
                        "clause": 7,
                        "scope": 5,
                        "term": "(member T90 T89)"
                    },
                    {
                        "clause": 8,
                        "scope": 5,
                        "term": "(member T90 T89)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T89"],
                    "free": [],
                    "exprvars": []
                }
            },
            "725": {
                "goal": [{
                    "clause": 7,
                    "scope": 5,
                    "term": "(member T90 T89)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T89"],
                    "free": [],
                    "exprvars": []
                }
            },
            "726": {
                "goal": [{
                    "clause": 8,
                    "scope": 5,
                    "term": "(member T90 T89)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T89"],
                    "free": [],
                    "exprvars": []
                }
            },
            "705": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (select T36 T35 X36) (members T37 X36))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T35"],
                    "free": ["X36"],
                    "exprvars": []
                }
            },
            "727": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "706": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "728": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "707": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(select T36 T35 X36)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T35"],
                    "free": ["X36"],
                    "exprvars": []
                }
            },
            "729": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "708": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(members T43 T42)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T42"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 583,
                "to": 584,
                "label": "CASE"
            },
            {
                "from": 584,
                "to": 585,
                "label": "PARALLEL"
            },
            {
                "from": 584,
                "to": 586,
                "label": "PARALLEL"
            },
            {
                "from": 585,
                "to": 587,
                "label": "EVAL with clause\ncolor_map(.(X15, X16), X17) :- ','(color_region(X15, X17), color_map(X16, X17)).\nand substitutionX15 -> T18,\nX16 -> T19,\nT1 -> .(T18, T19),\nT2 -> T17,\nX17 -> T17,\nT15 -> T18,\nT16 -> T19"
            },
            {
                "from": 585,
                "to": 588,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 586,
                "to": 735,
                "label": "EVAL with clause\ncolor_map([], X134).\nand substitutionT1 -> [],\nT2 -> T136,\nX134 -> T136"
            },
            {
                "from": 586,
                "to": 736,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 587,
                "to": 589,
                "label": "SPLIT 1"
            },
            {
                "from": 587,
                "to": 590,
                "label": "SPLIT 2\nnew knowledge:\nT18 is ground\nT17 is ground\nreplacements:T19 -> T23"
            },
            {
                "from": 589,
                "to": 591,
                "label": "CASE"
            },
            {
                "from": 590,
                "to": 583,
                "label": "INSTANCE with matching:\nT1 -> T23\nT2 -> T17"
            },
            {
                "from": 591,
                "to": 705,
                "label": "EVAL with clause\ncolor_region(region(X33, X34), X35) :- ','(select(X33, X35, X36), members(X34, X36)).\nand substitutionX33 -> T36,\nX34 -> T37,\nT18 -> region(T36, T37),\nT17 -> T35,\nX35 -> T35,\nT33 -> T36,\nT34 -> T37"
            },
            {
                "from": 591,
                "to": 706,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 705,
                "to": 707,
                "label": "SPLIT 1"
            },
            {
                "from": 705,
                "to": 708,
                "label": "SPLIT 2\nnew knowledge:\nT36 is ground\nT35 is ground\nT42 is ground\nreplacements:X36 -> T42,\nT37 -> T43"
            },
            {
                "from": 707,
                "to": 709,
                "label": "CASE"
            },
            {
                "from": 708,
                "to": 717,
                "label": "CASE"
            },
            {
                "from": 709,
                "to": 710,
                "label": "PARALLEL"
            },
            {
                "from": 709,
                "to": 711,
                "label": "PARALLEL"
            },
            {
                "from": 710,
                "to": 712,
                "label": "EVAL with clause\nselect(X53, .(X53, X54), X54).\nand substitutionT36 -> T56,\nX53 -> T56,\nX54 -> T57,\nT35 -> .(T56, T57),\nX36 -> T57"
            },
            {
                "from": 710,
                "to": 713,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 711,
                "to": 715,
                "label": "EVAL with clause\nselect(X65, .(X66, X67), .(X66, X68)) :- select(X65, X67, X68).\nand substitutionT36 -> T67,\nX65 -> T67,\nX66 -> T65,\nX67 -> T66,\nT35 -> .(T65, T66),\nX68 -> X69,\nX36 -> .(T65, X69),\nT64 -> T67"
            },
            {
                "from": 711,
                "to": 716,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 712,
                "to": 714,
                "label": "SUCCESS"
            },
            {
                "from": 715,
                "to": 707,
                "label": "INSTANCE with matching:\nT36 -> T67\nT35 -> T66\nX36 -> X69"
            },
            {
                "from": 717,
                "to": 718,
                "label": "PARALLEL"
            },
            {
                "from": 717,
                "to": 719,
                "label": "PARALLEL"
            },
            {
                "from": 718,
                "to": 720,
                "label": "EVAL with clause\nmembers(.(X89, X90), X91) :- ','(member(X89, X91), members(X90, X91)).\nand substitutionX89 -> T90,\nX90 -> T91,\nT43 -> .(T90, T91),\nT42 -> T89,\nX91 -> T89,\nT87 -> T90,\nT88 -> T91"
            },
            {
                "from": 718,
                "to": 721,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 719,
                "to": 732,
                "label": "EVAL with clause\nmembers([], X128).\nand substitutionT43 -> [],\nT42 -> T130,\nX128 -> T130"
            },
            {
                "from": 719,
                "to": 733,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 720,
                "to": 722,
                "label": "SPLIT 1"
            },
            {
                "from": 720,
                "to": 723,
                "label": "SPLIT 2\nnew knowledge:\nT90 is ground\nT89 is ground\nreplacements:T91 -> T96"
            },
            {
                "from": 722,
                "to": 724,
                "label": "CASE"
            },
            {
                "from": 723,
                "to": 708,
                "label": "INSTANCE with matching:\nT43 -> T96\nT42 -> T89"
            },
            {
                "from": 724,
                "to": 725,
                "label": "PARALLEL"
            },
            {
                "from": 724,
                "to": 726,
                "label": "PARALLEL"
            },
            {
                "from": 725,
                "to": 727,
                "label": "EVAL with clause\nmember(X108, .(X108, X109)).\nand substitutionT90 -> T109,\nX108 -> T109,\nX109 -> T110,\nT89 -> .(T109, T110)"
            },
            {
                "from": 725,
                "to": 728,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 726,
                "to": 730,
                "label": "EVAL with clause\nmember(X116, .(X117, X118)) :- member(X116, X118).\nand substitutionT90 -> T120,\nX116 -> T120,\nX117 -> T118,\nX118 -> T119,\nT89 -> .(T118, T119),\nT117 -> T120"
            },
            {
                "from": 726,
                "to": 731,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 727,
                "to": 729,
                "label": "SUCCESS"
            },
            {
                "from": 730,
                "to": 722,
                "label": "INSTANCE with matching:\nT90 -> T120\nT89 -> T119"
            },
            {
                "from": 732,
                "to": 734,
                "label": "SUCCESS"
            },
            {
                "from": 735,
                "to": 737,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(130)
Complex Obligation (AND)

----------------------------------------

(131)
Obligation:
Rules:
f730_in(T119) -> f722_in(T119) :|: TRUE
f722_out(x) -> f730_out(x) :|: TRUE
f724_out(T89) -> f722_out(T89) :|: TRUE
f722_in(x1) -> f724_in(x1) :|: TRUE
f726_out(x2) -> f724_out(x2) :|: TRUE
f725_out(x3) -> f724_out(x3) :|: TRUE
f724_in(x4) -> f725_in(x4) :|: TRUE
f724_in(x5) -> f726_in(x5) :|: TRUE
f726_in(.(x6, x7)) -> f730_in(x7) :|: TRUE
f726_in(x8) -> f731_in :|: TRUE
f730_out(x9) -> f726_out(.(x10, x9)) :|: TRUE
f731_out -> f726_out(x11) :|: TRUE
f584_out(T2) -> f583_out(T2) :|: TRUE
f583_in(x12) -> f584_in(x12) :|: TRUE
f586_out(x13) -> f584_out(x13) :|: TRUE
f585_out(x14) -> f584_out(x14) :|: TRUE
f584_in(x15) -> f585_in(x15) :|: TRUE
f584_in(x16) -> f586_in(x16) :|: TRUE
f588_out -> f585_out(x17) :|: TRUE
f585_in(T17) -> f587_in(T17) :|: TRUE
f585_in(x18) -> f588_in :|: TRUE
f587_out(x19) -> f585_out(x19) :|: TRUE
f589_out(x20) -> f590_in(x20) :|: TRUE
f590_out(x21) -> f587_out(x21) :|: TRUE
f587_in(x22) -> f589_in(x22) :|: TRUE
f591_out(x23) -> f589_out(x23) :|: TRUE
f589_in(x24) -> f591_in(x24) :|: TRUE
f705_out(T35) -> f591_out(T35) :|: TRUE
f591_in(x25) -> f706_in :|: TRUE
f706_out -> f591_out(x26) :|: TRUE
f591_in(x27) -> f705_in(x27) :|: TRUE
f708_out(x28) -> f705_out(x29) :|: TRUE
f705_in(x30) -> f707_in(x30) :|: TRUE
f707_out(x31) -> f708_in(x32) :|: TRUE
f717_out(T42) -> f708_out(T42) :|: TRUE
f708_in(x33) -> f717_in(x33) :|: TRUE
f717_in(x34) -> f718_in(x34) :|: TRUE
f718_out(x35) -> f717_out(x35) :|: TRUE
f719_out(x36) -> f717_out(x36) :|: TRUE
f717_in(x37) -> f719_in(x37) :|: TRUE
f718_in(x38) -> f720_in(x38) :|: TRUE
f720_out(x39) -> f718_out(x39) :|: TRUE
f718_in(x40) -> f721_in :|: TRUE
f721_out -> f718_out(x41) :|: TRUE
f720_in(x42) -> f722_in(x42) :|: TRUE
f723_out(x43) -> f720_out(x43) :|: TRUE
f722_out(x44) -> f723_in(x44) :|: TRUE
Start term: f583_in(T2)

----------------------------------------

(132) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:


----------------------------------------

(133)
TRUE

----------------------------------------

(134)
Obligation:
Rules:
f720_in(T89) -> f722_in(T89) :|: TRUE
f723_out(x) -> f720_out(x) :|: TRUE
f722_out(x1) -> f723_in(x1) :|: TRUE
f727_in -> f727_out :|: TRUE
f728_out -> f725_out(x2) :|: TRUE
f725_in(x3) -> f728_in :|: TRUE
f727_out -> f725_out(.(T109, T110)) :|: TRUE
f725_in(.(x4, x5)) -> f727_in :|: TRUE
f717_out(T42) -> f708_out(T42) :|: TRUE
f708_in(x6) -> f717_in(x6) :|: TRUE
f730_in(T119) -> f722_in(T119) :|: TRUE
f722_out(x7) -> f730_out(x7) :|: TRUE
f718_in(x8) -> f720_in(x8) :|: TRUE
f720_out(x9) -> f718_out(x9) :|: TRUE
f718_in(x10) -> f721_in :|: TRUE
f721_out -> f718_out(x11) :|: TRUE
f723_in(x12) -> f708_in(x12) :|: TRUE
f708_out(x13) -> f723_out(x13) :|: TRUE
f724_out(x14) -> f722_out(x14) :|: TRUE
f722_in(x15) -> f724_in(x15) :|: TRUE
f726_out(x16) -> f724_out(x16) :|: TRUE
f725_out(x17) -> f724_out(x17) :|: TRUE
f724_in(x18) -> f725_in(x18) :|: TRUE
f724_in(x19) -> f726_in(x19) :|: TRUE
f726_in(.(x20, x21)) -> f730_in(x21) :|: TRUE
f726_in(x22) -> f731_in :|: TRUE
f730_out(x23) -> f726_out(.(x24, x23)) :|: TRUE
f731_out -> f726_out(x25) :|: TRUE
f717_in(x26) -> f718_in(x26) :|: TRUE
f718_out(x27) -> f717_out(x27) :|: TRUE
f719_out(x28) -> f717_out(x28) :|: TRUE
f717_in(x29) -> f719_in(x29) :|: TRUE
f584_out(T2) -> f583_out(T2) :|: TRUE
f583_in(x30) -> f584_in(x30) :|: TRUE
f586_out(x31) -> f584_out(x31) :|: TRUE
f585_out(x32) -> f584_out(x32) :|: TRUE
f584_in(x33) -> f585_in(x33) :|: TRUE
f584_in(x34) -> f586_in(x34) :|: TRUE
f588_out -> f585_out(x35) :|: TRUE
f585_in(T17) -> f587_in(T17) :|: TRUE
f585_in(x36) -> f588_in :|: TRUE
f587_out(x37) -> f585_out(x37) :|: TRUE
f589_out(x38) -> f590_in(x38) :|: TRUE
f590_out(x39) -> f587_out(x39) :|: TRUE
f587_in(x40) -> f589_in(x40) :|: TRUE
f591_out(x41) -> f589_out(x41) :|: TRUE
f589_in(x42) -> f591_in(x42) :|: TRUE
f705_out(T35) -> f591_out(T35) :|: TRUE
f591_in(x43) -> f706_in :|: TRUE
f706_out -> f591_out(x44) :|: TRUE
f591_in(x45) -> f705_in(x45) :|: TRUE
f708_out(x46) -> f705_out(x47) :|: TRUE
f705_in(x48) -> f707_in(x48) :|: TRUE
f707_out(x49) -> f708_in(x50) :|: TRUE
Start term: f583_in(T2)

----------------------------------------

(135) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:


----------------------------------------

(136)
TRUE

----------------------------------------

(137)
Obligation:
Rules:
f707_in(T35) -> f709_in(T35) :|: TRUE
f709_out(x) -> f707_out(x) :|: TRUE
f709_in(x1) -> f710_in(x1) :|: TRUE
f709_in(x2) -> f711_in(x2) :|: TRUE
f710_out(x3) -> f709_out(x3) :|: TRUE
f711_out(x4) -> f709_out(x4) :|: TRUE
f715_in(T66) -> f707_in(T66) :|: TRUE
f707_out(x5) -> f715_out(x5) :|: TRUE
f711_in(x6) -> f716_in :|: TRUE
f715_out(x7) -> f711_out(.(x8, x7)) :|: TRUE
f716_out -> f711_out(x9) :|: TRUE
f711_in(.(x10, x11)) -> f715_in(x11) :|: TRUE
f584_out(T2) -> f583_out(T2) :|: TRUE
f583_in(x12) -> f584_in(x12) :|: TRUE
f586_out(x13) -> f584_out(x13) :|: TRUE
f585_out(x14) -> f584_out(x14) :|: TRUE
f584_in(x15) -> f585_in(x15) :|: TRUE
f584_in(x16) -> f586_in(x16) :|: TRUE
f588_out -> f585_out(x17) :|: TRUE
f585_in(T17) -> f587_in(T17) :|: TRUE
f585_in(x18) -> f588_in :|: TRUE
f587_out(x19) -> f585_out(x19) :|: TRUE
f589_out(x20) -> f590_in(x20) :|: TRUE
f590_out(x21) -> f587_out(x21) :|: TRUE
f587_in(x22) -> f589_in(x22) :|: TRUE
f591_out(x23) -> f589_out(x23) :|: TRUE
f589_in(x24) -> f591_in(x24) :|: TRUE
f705_out(x25) -> f591_out(x25) :|: TRUE
f591_in(x26) -> f706_in :|: TRUE
f706_out -> f591_out(x27) :|: TRUE
f591_in(x28) -> f705_in(x28) :|: TRUE
f708_out(x29) -> f705_out(x30) :|: TRUE
f705_in(x31) -> f707_in(x31) :|: TRUE
f707_out(x32) -> f708_in(x33) :|: TRUE
Start term: f583_in(T2)

----------------------------------------

(138) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f707_in(T35) -> f709_in(T35) :|: TRUE
f709_in(x2) -> f711_in(x2) :|: TRUE
f715_in(T66) -> f707_in(T66) :|: TRUE
f711_in(.(x10, x11)) -> f715_in(x11) :|: TRUE


----------------------------------------

(139)
Obligation:
Rules:
f707_in(T35) -> f709_in(T35) :|: TRUE
f709_in(x2) -> f711_in(x2) :|: TRUE
f715_in(T66) -> f707_in(T66) :|: TRUE
f711_in(.(x10, x11)) -> f715_in(x11) :|: TRUE

----------------------------------------

(140) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(141)
Obligation:
Rules:
f715_in(.(x10:0, x11:0)) -> f715_in(x11:0) :|: TRUE

----------------------------------------

(142) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(143)
Obligation:
Rules:
f715_in(.(x10:0, x11:0)) -> f715_in(x11:0) :|: TRUE

----------------------------------------

(144) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f715_in(.(x10:0, x11:0)) -> f715_in(x11:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(145)
Obligation:

Termination digraph:
Nodes:
(1) f715_in(.(x10:0, x11:0)) -> f715_in(x11:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(146) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   .(x1, x2) -> .(x2)

----------------------------------------

(147)
Obligation:
Rules:
f715_in(.(x11:0)) -> f715_in(x11:0) :|: TRUE

----------------------------------------

(148) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f715_in(VARIABLE)
.(VARIABLE)
Removed predefined arithmetic.
----------------------------------------

(149)
Obligation:
Rules:
f715_in(.(x11:0)) -> f715_in(x11:0)

----------------------------------------

(150) IRSwTToQDPProof (SOUND)
Removed the integers and created a QDP-Problem.
----------------------------------------

(151)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f715_in(.(x11:0)) -> f715_in(x11:0)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(152) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*f715_in(.(x11:0)) -> f715_in(x11:0)
The graph contains the following edges 1 > 1


----------------------------------------

(153)
YES

----------------------------------------

(154)
Obligation:
Rules:
f719_in(T42) -> f733_in :|: TRUE
f733_out -> f719_out(x) :|: TRUE
f732_out -> f719_out(T130) :|: TRUE
f719_in(x1) -> f732_in :|: TRUE
f720_in(T89) -> f722_in(T89) :|: TRUE
f723_out(x2) -> f720_out(x2) :|: TRUE
f722_out(x3) -> f723_in(x3) :|: TRUE
f727_in -> f727_out :|: TRUE
f589_out(T17) -> f590_in(T17) :|: TRUE
f590_out(x4) -> f587_out(x4) :|: TRUE
f587_in(x5) -> f589_in(x5) :|: TRUE
f708_out(x6) -> f705_out(x7) :|: TRUE
f705_in(T35) -> f707_in(T35) :|: TRUE
f707_out(x8) -> f708_in(x9) :|: TRUE
f586_out(T2) -> f584_out(T2) :|: TRUE
f585_out(x10) -> f584_out(x10) :|: TRUE
f584_in(x11) -> f585_in(x11) :|: TRUE
f584_in(x12) -> f586_in(x12) :|: TRUE
f718_in(x13) -> f720_in(x13) :|: TRUE
f720_out(x14) -> f718_out(x14) :|: TRUE
f718_in(x15) -> f721_in :|: TRUE
f721_out -> f718_out(x16) :|: TRUE
f724_out(x17) -> f722_out(x17) :|: TRUE
f722_in(x18) -> f724_in(x18) :|: TRUE
f723_in(x19) -> f708_in(x19) :|: TRUE
f708_out(x20) -> f723_out(x20) :|: TRUE
f726_in(.(T118, T119)) -> f730_in(T119) :|: TRUE
f726_in(x21) -> f731_in :|: TRUE
f730_out(x22) -> f726_out(.(x23, x22)) :|: TRUE
f731_out -> f726_out(x24) :|: TRUE
f715_in(T66) -> f707_in(T66) :|: TRUE
f707_out(x25) -> f715_out(x25) :|: TRUE
f711_in(x26) -> f716_in :|: TRUE
f715_out(x27) -> f711_out(.(x28, x27)) :|: TRUE
f716_out -> f711_out(x29) :|: TRUE
f711_in(.(x30, x31)) -> f715_in(x31) :|: TRUE
f584_out(x32) -> f583_out(x32) :|: TRUE
f583_in(x33) -> f584_in(x33) :|: TRUE
f707_in(x34) -> f709_in(x34) :|: TRUE
f709_out(x35) -> f707_out(x35) :|: TRUE
f712_in -> f712_out :|: TRUE
f728_out -> f725_out(x36) :|: TRUE
f725_in(x37) -> f728_in :|: TRUE
f727_out -> f725_out(.(T109, T110)) :|: TRUE
f725_in(.(x38, x39)) -> f727_in :|: TRUE
f709_in(x40) -> f710_in(x40) :|: TRUE
f709_in(x41) -> f711_in(x41) :|: TRUE
f710_out(x42) -> f709_out(x42) :|: TRUE
f711_out(x43) -> f709_out(x43) :|: TRUE
f591_out(x44) -> f589_out(x44) :|: TRUE
f589_in(x45) -> f591_in(x45) :|: TRUE
f717_out(x46) -> f708_out(x46) :|: TRUE
f708_in(x47) -> f717_in(x47) :|: TRUE
f732_in -> f732_out :|: TRUE
f588_out -> f585_out(x48) :|: TRUE
f585_in(x49) -> f587_in(x49) :|: TRUE
f585_in(x50) -> f588_in :|: TRUE
f587_out(x51) -> f585_out(x51) :|: TRUE
f705_out(x52) -> f591_out(x52) :|: TRUE
f591_in(x53) -> f706_in :|: TRUE
f706_out -> f591_out(x54) :|: TRUE
f591_in(x55) -> f705_in(x55) :|: TRUE
f712_out -> f710_out(.(T56, T57)) :|: TRUE
f710_in(x56) -> f713_in :|: TRUE
f710_in(.(x57, x58)) -> f712_in :|: TRUE
f713_out -> f710_out(x59) :|: TRUE
f730_in(x60) -> f722_in(x60) :|: TRUE
f722_out(x61) -> f730_out(x61) :|: TRUE
f583_out(x62) -> f590_out(x62) :|: TRUE
f590_in(x63) -> f583_in(x63) :|: TRUE
f726_out(x64) -> f724_out(x64) :|: TRUE
f725_out(x65) -> f724_out(x65) :|: TRUE
f724_in(x66) -> f725_in(x66) :|: TRUE
f724_in(x67) -> f726_in(x67) :|: TRUE
f717_in(x68) -> f718_in(x68) :|: TRUE
f718_out(x69) -> f717_out(x69) :|: TRUE
f719_out(x70) -> f717_out(x70) :|: TRUE
f717_in(x71) -> f719_in(x71) :|: TRUE
Start term: f583_in(T2)

----------------------------------------

(155) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f732_out -> f719_out(T130) :|: TRUE
f719_in(x1) -> f732_in :|: TRUE
f720_in(T89) -> f722_in(T89) :|: TRUE
f723_out(x2) -> f720_out(x2) :|: TRUE
f722_out(x3) -> f723_in(x3) :|: TRUE
f727_in -> f727_out :|: TRUE
f589_out(T17) -> f590_in(T17) :|: TRUE
f587_in(x5) -> f589_in(x5) :|: TRUE
f708_out(x6) -> f705_out(x7) :|: TRUE
f705_in(T35) -> f707_in(T35) :|: TRUE
f707_out(x8) -> f708_in(x9) :|: TRUE
f584_in(x11) -> f585_in(x11) :|: TRUE
f718_in(x13) -> f720_in(x13) :|: TRUE
f720_out(x14) -> f718_out(x14) :|: TRUE
f724_out(x17) -> f722_out(x17) :|: TRUE
f722_in(x18) -> f724_in(x18) :|: TRUE
f723_in(x19) -> f708_in(x19) :|: TRUE
f708_out(x20) -> f723_out(x20) :|: TRUE
f726_in(.(T118, T119)) -> f730_in(T119) :|: TRUE
f730_out(x22) -> f726_out(.(x23, x22)) :|: TRUE
f715_in(T66) -> f707_in(T66) :|: TRUE
f707_out(x25) -> f715_out(x25) :|: TRUE
f715_out(x27) -> f711_out(.(x28, x27)) :|: TRUE
f711_in(.(x30, x31)) -> f715_in(x31) :|: TRUE
f583_in(x33) -> f584_in(x33) :|: TRUE
f707_in(x34) -> f709_in(x34) :|: TRUE
f709_out(x35) -> f707_out(x35) :|: TRUE
f712_in -> f712_out :|: TRUE
f727_out -> f725_out(.(T109, T110)) :|: TRUE
f725_in(.(x38, x39)) -> f727_in :|: TRUE
f709_in(x40) -> f710_in(x40) :|: TRUE
f709_in(x41) -> f711_in(x41) :|: TRUE
f710_out(x42) -> f709_out(x42) :|: TRUE
f711_out(x43) -> f709_out(x43) :|: TRUE
f591_out(x44) -> f589_out(x44) :|: TRUE
f589_in(x45) -> f591_in(x45) :|: TRUE
f717_out(x46) -> f708_out(x46) :|: TRUE
f708_in(x47) -> f717_in(x47) :|: TRUE
f732_in -> f732_out :|: TRUE
f585_in(x49) -> f587_in(x49) :|: TRUE
f705_out(x52) -> f591_out(x52) :|: TRUE
f591_in(x55) -> f705_in(x55) :|: TRUE
f712_out -> f710_out(.(T56, T57)) :|: TRUE
f710_in(.(x57, x58)) -> f712_in :|: TRUE
f730_in(x60) -> f722_in(x60) :|: TRUE
f722_out(x61) -> f730_out(x61) :|: TRUE
f590_in(x63) -> f583_in(x63) :|: TRUE
f726_out(x64) -> f724_out(x64) :|: TRUE
f725_out(x65) -> f724_out(x65) :|: TRUE
f724_in(x66) -> f725_in(x66) :|: TRUE
f724_in(x67) -> f726_in(x67) :|: TRUE
f717_in(x68) -> f718_in(x68) :|: TRUE
f718_out(x69) -> f717_out(x69) :|: TRUE
f719_out(x70) -> f717_out(x70) :|: TRUE
f717_in(x71) -> f719_in(x71) :|: TRUE


----------------------------------------

(156)
Obligation:
Rules:
f732_out -> f719_out(T130) :|: TRUE
f719_in(x1) -> f732_in :|: TRUE
f720_in(T89) -> f722_in(T89) :|: TRUE
f723_out(x2) -> f720_out(x2) :|: TRUE
f722_out(x3) -> f723_in(x3) :|: TRUE
f727_in -> f727_out :|: TRUE
f589_out(T17) -> f590_in(T17) :|: TRUE
f587_in(x5) -> f589_in(x5) :|: TRUE
f708_out(x6) -> f705_out(x7) :|: TRUE
f705_in(T35) -> f707_in(T35) :|: TRUE
f707_out(x8) -> f708_in(x9) :|: TRUE
f584_in(x11) -> f585_in(x11) :|: TRUE
f718_in(x13) -> f720_in(x13) :|: TRUE
f720_out(x14) -> f718_out(x14) :|: TRUE
f724_out(x17) -> f722_out(x17) :|: TRUE
f722_in(x18) -> f724_in(x18) :|: TRUE
f723_in(x19) -> f708_in(x19) :|: TRUE
f708_out(x20) -> f723_out(x20) :|: TRUE
f726_in(.(T118, T119)) -> f730_in(T119) :|: TRUE
f730_out(x22) -> f726_out(.(x23, x22)) :|: TRUE
f715_in(T66) -> f707_in(T66) :|: TRUE
f707_out(x25) -> f715_out(x25) :|: TRUE
f715_out(x27) -> f711_out(.(x28, x27)) :|: TRUE
f711_in(.(x30, x31)) -> f715_in(x31) :|: TRUE
f583_in(x33) -> f584_in(x33) :|: TRUE
f707_in(x34) -> f709_in(x34) :|: TRUE
f709_out(x35) -> f707_out(x35) :|: TRUE
f712_in -> f712_out :|: TRUE
f727_out -> f725_out(.(T109, T110)) :|: TRUE
f725_in(.(x38, x39)) -> f727_in :|: TRUE
f709_in(x40) -> f710_in(x40) :|: TRUE
f709_in(x41) -> f711_in(x41) :|: TRUE
f710_out(x42) -> f709_out(x42) :|: TRUE
f711_out(x43) -> f709_out(x43) :|: TRUE
f591_out(x44) -> f589_out(x44) :|: TRUE
f589_in(x45) -> f591_in(x45) :|: TRUE
f717_out(x46) -> f708_out(x46) :|: TRUE
f708_in(x47) -> f717_in(x47) :|: TRUE
f732_in -> f732_out :|: TRUE
f585_in(x49) -> f587_in(x49) :|: TRUE
f705_out(x52) -> f591_out(x52) :|: TRUE
f591_in(x55) -> f705_in(x55) :|: TRUE
f712_out -> f710_out(.(T56, T57)) :|: TRUE
f710_in(.(x57, x58)) -> f712_in :|: TRUE
f730_in(x60) -> f722_in(x60) :|: TRUE
f722_out(x61) -> f730_out(x61) :|: TRUE
f590_in(x63) -> f583_in(x63) :|: TRUE
f726_out(x64) -> f724_out(x64) :|: TRUE
f725_out(x65) -> f724_out(x65) :|: TRUE
f724_in(x66) -> f725_in(x66) :|: TRUE
f724_in(x67) -> f726_in(x67) :|: TRUE
f717_in(x68) -> f718_in(x68) :|: TRUE
f718_out(x69) -> f717_out(x69) :|: TRUE
f719_out(x70) -> f717_out(x70) :|: TRUE
f717_in(x71) -> f719_in(x71) :|: TRUE

----------------------------------------

(157) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(158)
Obligation:
Rules:
f709_in(.(x30:0, x31:0)) -> f709_in(x31:0) :|: TRUE
f717_in(x68:0) -> f724_in(x68:0) :|: TRUE
f709_out(x35:0) -> f709_out(.(x28:0, x35:0)) :|: TRUE
f717_out(x46:0) -> f717_out(x46:0) :|: TRUE
f724_out(x17:0) -> f724_out(.(x23:0, x17:0)) :|: TRUE
f717_in(x71:0) -> f717_out(T130:0) :|: TRUE
f709_in(.(x57:0, x58:0)) -> f709_out(.(T56:0, T57:0)) :|: TRUE
f724_in(.(x38:0, x39:0)) -> f724_out(.(T109:0, T110:0)) :|: TRUE
f724_in(.(T118:0, T119:0)) -> f724_in(T119:0) :|: TRUE
f724_out(x) -> f717_in(x) :|: TRUE
f709_out(x1) -> f717_in(x2) :|: TRUE
f717_out(x3) -> f709_in(x4) :|: TRUE

----------------------------------------

(159) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(160)
Obligation:
Rules:
f709_in(.(x30:0, x31:0)) -> f709_in(x31:0) :|: TRUE
f717_in(x68:0) -> f724_in(x68:0) :|: TRUE
f709_out(x35:0) -> f709_out(.(x28:0, x35:0)) :|: TRUE
f717_out(x46:0) -> f717_out(x46:0) :|: TRUE
f724_out(x17:0) -> f724_out(.(x23:0, x17:0)) :|: TRUE
f717_in(x71:0) -> f717_out(T130:0) :|: TRUE
f709_in(.(x57:0, x58:0)) -> f709_out(.(T56:0, T57:0)) :|: TRUE
f724_in(.(x38:0, x39:0)) -> f724_out(.(T109:0, T110:0)) :|: TRUE
f724_in(.(T118:0, T119:0)) -> f724_in(T119:0) :|: TRUE
f724_out(x) -> f717_in(x) :|: TRUE
f709_out(x1) -> f717_in(x2) :|: TRUE
f717_out(x3) -> f709_in(x4) :|: TRUE

----------------------------------------

(161) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f709_in(.(x30:0, x31:0)) -> f709_in(x31:0) :|: TRUE
(2) f717_in(x68:0) -> f724_in(x68:0) :|: TRUE
(3) f709_out(x35:0) -> f709_out(.(x28:0, x35:0)) :|: TRUE
(4) f717_out(x46:0) -> f717_out(x46:0) :|: TRUE
(5) f724_out(x17:0) -> f724_out(.(x23:0, x17:0)) :|: TRUE
(6) f717_in(x71:0) -> f717_out(T130:0) :|: TRUE
(7) f709_in(.(x57:0, x58:0)) -> f709_out(.(T56:0, T57:0)) :|: TRUE
(8) f724_in(.(x38:0, x39:0)) -> f724_out(.(T109:0, T110:0)) :|: TRUE
(9) f724_in(.(T118:0, T119:0)) -> f724_in(T119:0) :|: TRUE
(10) f724_out(x) -> f717_in(x) :|: TRUE
(11) f709_out(x1) -> f717_in(x2) :|: TRUE
(12) f717_out(x3) -> f709_in(x4) :|: TRUE

Arcs:
(1) -> (1), (7)
(2) -> (8), (9)
(3) -> (3), (11)
(4) -> (4), (12)
(5) -> (5), (10)
(6) -> (4), (12)
(7) -> (3), (11)
(8) -> (5), (10)
(9) -> (8), (9)
(10) -> (2), (6)
(11) -> (2), (6)
(12) -> (1), (7)

This digraph is fully evaluated!
----------------------------------------

(162)
Obligation:

Termination digraph:
Nodes:
(1) f709_in(.(x30:0, x31:0)) -> f709_in(x31:0) :|: TRUE
(2) f717_out(x3) -> f709_in(x4) :|: TRUE
(3) f717_out(x46:0) -> f717_out(x46:0) :|: TRUE
(4) f717_in(x71:0) -> f717_out(T130:0) :|: TRUE
(5) f724_out(x) -> f717_in(x) :|: TRUE
(6) f724_out(x17:0) -> f724_out(.(x23:0, x17:0)) :|: TRUE
(7) f724_in(.(x38:0, x39:0)) -> f724_out(.(T109:0, T110:0)) :|: TRUE
(8) f724_in(.(T118:0, T119:0)) -> f724_in(T119:0) :|: TRUE
(9) f717_in(x68:0) -> f724_in(x68:0) :|: TRUE
(10) f709_out(x1) -> f717_in(x2) :|: TRUE
(11) f709_out(x35:0) -> f709_out(.(x28:0, x35:0)) :|: TRUE
(12) f709_in(.(x57:0, x58:0)) -> f709_out(.(T56:0, T57:0)) :|: TRUE

Arcs:
(1) -> (1), (12)
(2) -> (1), (12)
(3) -> (2), (3)
(4) -> (2), (3)
(5) -> (4), (9)
(6) -> (5), (6)
(7) -> (5), (6)
(8) -> (7), (8)
(9) -> (7), (8)
(10) -> (4), (9)
(11) -> (10), (11)
(12) -> (10), (11)

This digraph is fully evaluated!

----------------------------------------

(163) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   .(x1, x2) -> .(x2)

----------------------------------------

(164)
Obligation:
Rules:
f709_in(.(x31:0)) -> f709_in(x31:0) :|: TRUE
f717_out(x3) -> f709_in(x4) :|: TRUE
f717_out(x46:0) -> f717_out(x46:0) :|: TRUE
f717_in(x71:0) -> f717_out(T130:0) :|: TRUE
f724_out(x) -> f717_in(x) :|: TRUE
f724_out(x17:0) -> f724_out(.(x17:0)) :|: TRUE
f724_in(.(x39:0)) -> f724_out(.(T110:0)) :|: TRUE
f724_in(.(T119:0)) -> f724_in(T119:0) :|: TRUE
f717_in(x68:0) -> f724_in(x68:0) :|: TRUE
f709_out(x1) -> f717_in(x2) :|: TRUE
f709_out(x35:0) -> f709_out(.(x35:0)) :|: TRUE
f709_in(.(x58:0)) -> f709_out(.(T57:0)) :|: TRUE
