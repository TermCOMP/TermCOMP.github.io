MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/winYY.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

flat(a,g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) PiDP
    (7) UsableRulesProof [EQUIVALENT, 0 ms]
    (8) PiDP
    (9) PiDPToQDPProof [SOUND, 0 ms]
    (10) QDP
    (11) UsableRulesReductionPairsProof [EQUIVALENT, 13 ms]
    (12) QDP
    (13) NonTerminationLoopProof [COMPLETE, 0 ms]
    (14) NO
(15) PrologToPiTRSProof [SOUND, 0 ms]
(16) PiTRS
    (17) DependencyPairsProof [EQUIVALENT, 0 ms]
    (18) PiDP
    (19) DependencyGraphProof [EQUIVALENT, 0 ms]
    (20) PiDP
    (21) UsableRulesProof [EQUIVALENT, 0 ms]
    (22) PiDP
    (23) PiDPToQDPProof [SOUND, 0 ms]
    (24) QDP
    (25) UsableRulesReductionPairsProof [EQUIVALENT, 9 ms]
    (26) QDP
    (27) NonTerminationLoopProof [COMPLETE, 0 ms]
    (28) NO
(29) PrologToTRSTransformerProof [SOUND, 0 ms]
(30) QTRS
    (31) DependencyPairsProof [EQUIVALENT, 0 ms]
    (32) QDP
    (33) DependencyGraphProof [EQUIVALENT, 0 ms]
    (34) QDP
    (35) UsableRulesProof [EQUIVALENT, 0 ms]
    (36) QDP
    (37) UsableRulesReductionPairsProof [EQUIVALENT, 0 ms]
    (38) QDP
    (39) NonTerminationLoopProof [COMPLETE, 0 ms]
    (40) NO
(41) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(42) IRSwT
    (43) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (44) IRSwT
    (45) IntTRSCompressionProof [EQUIVALENT, 11 ms]
    (46) IRSwT
    (47) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (48) IRSwT
    (49) IRSwTTerminationDigraphProof [EQUIVALENT, 5 ms]
    (50) IRSwT
    (51) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
    (52) IRSwT
(53) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(54) TRIPLES
    (55) TriplesToPiDPProof [SOUND, 10 ms]
    (56) PiDP
    (57) DependencyGraphProof [EQUIVALENT, 0 ms]
    (58) PiDP
    (59) PiDPToQDPProof [SOUND, 0 ms]
    (60) QDP
    (61) UsableRulesReductionPairsProof [EQUIVALENT, 4 ms]
    (62) QDP
    (63) NonTerminationLoopProof [COMPLETE, 0 ms]
    (64) NO


----------------------------------------

(0)
Obligation:
Clauses:

flat([], []).
flat(.([], T), R) :- flat(T, R).
flat(.(.(H, T), TT), .(H, R)) :- flat(.(T, TT), R).


Query: flat(a,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

flat_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   flat_in_ag([], []) -> flat_out_ag([], [])
   flat_in_ag(.([], T), R) -> U1_ag(T, R, flat_in_ag(T, R))
   flat_in_ag(.(.(H, T), TT), .(H, R)) -> U2_ag(H, T, TT, R, flat_in_ag(.(T, TT), R))
   U2_ag(H, T, TT, R, flat_out_ag(.(T, TT), R)) -> flat_out_ag(.(.(H, T), TT), .(H, R))
   U1_ag(T, R, flat_out_ag(T, R)) -> flat_out_ag(.([], T), R)

The argument filtering Pi contains the following mapping:
flat_in_ag(x1, x2)  =  flat_in_ag(x2)

[]  =  []

flat_out_ag(x1, x2)  =  flat_out_ag(x1)

U1_ag(x1, x2, x3)  =  U1_ag(x3)

.(x1, x2)  =  .(x1, x2)

U2_ag(x1, x2, x3, x4, x5)  =  U2_ag(x1, x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   flat_in_ag([], []) -> flat_out_ag([], [])
   flat_in_ag(.([], T), R) -> U1_ag(T, R, flat_in_ag(T, R))
   flat_in_ag(.(.(H, T), TT), .(H, R)) -> U2_ag(H, T, TT, R, flat_in_ag(.(T, TT), R))
   U2_ag(H, T, TT, R, flat_out_ag(.(T, TT), R)) -> flat_out_ag(.(.(H, T), TT), .(H, R))
   U1_ag(T, R, flat_out_ag(T, R)) -> flat_out_ag(.([], T), R)

The argument filtering Pi contains the following mapping:
flat_in_ag(x1, x2)  =  flat_in_ag(x2)

[]  =  []

flat_out_ag(x1, x2)  =  flat_out_ag(x1)

U1_ag(x1, x2, x3)  =  U1_ag(x3)

.(x1, x2)  =  .(x1, x2)

U2_ag(x1, x2, x3, x4, x5)  =  U2_ag(x1, x5)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   FLAT_IN_AG(.([], T), R) -> U1_AG(T, R, flat_in_ag(T, R))
   FLAT_IN_AG(.([], T), R) -> FLAT_IN_AG(T, R)
   FLAT_IN_AG(.(.(H, T), TT), .(H, R)) -> U2_AG(H, T, TT, R, flat_in_ag(.(T, TT), R))
   FLAT_IN_AG(.(.(H, T), TT), .(H, R)) -> FLAT_IN_AG(.(T, TT), R)

The TRS R consists of the following rules:

   flat_in_ag([], []) -> flat_out_ag([], [])
   flat_in_ag(.([], T), R) -> U1_ag(T, R, flat_in_ag(T, R))
   flat_in_ag(.(.(H, T), TT), .(H, R)) -> U2_ag(H, T, TT, R, flat_in_ag(.(T, TT), R))
   U2_ag(H, T, TT, R, flat_out_ag(.(T, TT), R)) -> flat_out_ag(.(.(H, T), TT), .(H, R))
   U1_ag(T, R, flat_out_ag(T, R)) -> flat_out_ag(.([], T), R)

The argument filtering Pi contains the following mapping:
flat_in_ag(x1, x2)  =  flat_in_ag(x2)

[]  =  []

flat_out_ag(x1, x2)  =  flat_out_ag(x1)

U1_ag(x1, x2, x3)  =  U1_ag(x3)

.(x1, x2)  =  .(x1, x2)

U2_ag(x1, x2, x3, x4, x5)  =  U2_ag(x1, x5)

FLAT_IN_AG(x1, x2)  =  FLAT_IN_AG(x2)

U1_AG(x1, x2, x3)  =  U1_AG(x3)

U2_AG(x1, x2, x3, x4, x5)  =  U2_AG(x1, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FLAT_IN_AG(.([], T), R) -> U1_AG(T, R, flat_in_ag(T, R))
   FLAT_IN_AG(.([], T), R) -> FLAT_IN_AG(T, R)
   FLAT_IN_AG(.(.(H, T), TT), .(H, R)) -> U2_AG(H, T, TT, R, flat_in_ag(.(T, TT), R))
   FLAT_IN_AG(.(.(H, T), TT), .(H, R)) -> FLAT_IN_AG(.(T, TT), R)

The TRS R consists of the following rules:

   flat_in_ag([], []) -> flat_out_ag([], [])
   flat_in_ag(.([], T), R) -> U1_ag(T, R, flat_in_ag(T, R))
   flat_in_ag(.(.(H, T), TT), .(H, R)) -> U2_ag(H, T, TT, R, flat_in_ag(.(T, TT), R))
   U2_ag(H, T, TT, R, flat_out_ag(.(T, TT), R)) -> flat_out_ag(.(.(H, T), TT), .(H, R))
   U1_ag(T, R, flat_out_ag(T, R)) -> flat_out_ag(.([], T), R)

The argument filtering Pi contains the following mapping:
flat_in_ag(x1, x2)  =  flat_in_ag(x2)

[]  =  []

flat_out_ag(x1, x2)  =  flat_out_ag(x1)

U1_ag(x1, x2, x3)  =  U1_ag(x3)

.(x1, x2)  =  .(x1, x2)

U2_ag(x1, x2, x3, x4, x5)  =  U2_ag(x1, x5)

FLAT_IN_AG(x1, x2)  =  FLAT_IN_AG(x2)

U1_AG(x1, x2, x3)  =  U1_AG(x3)

U2_AG(x1, x2, x3, x4, x5)  =  U2_AG(x1, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FLAT_IN_AG(.(.(H, T), TT), .(H, R)) -> FLAT_IN_AG(.(T, TT), R)
   FLAT_IN_AG(.([], T), R) -> FLAT_IN_AG(T, R)

The TRS R consists of the following rules:

   flat_in_ag([], []) -> flat_out_ag([], [])
   flat_in_ag(.([], T), R) -> U1_ag(T, R, flat_in_ag(T, R))
   flat_in_ag(.(.(H, T), TT), .(H, R)) -> U2_ag(H, T, TT, R, flat_in_ag(.(T, TT), R))
   U2_ag(H, T, TT, R, flat_out_ag(.(T, TT), R)) -> flat_out_ag(.(.(H, T), TT), .(H, R))
   U1_ag(T, R, flat_out_ag(T, R)) -> flat_out_ag(.([], T), R)

The argument filtering Pi contains the following mapping:
flat_in_ag(x1, x2)  =  flat_in_ag(x2)

[]  =  []

flat_out_ag(x1, x2)  =  flat_out_ag(x1)

U1_ag(x1, x2, x3)  =  U1_ag(x3)

.(x1, x2)  =  .(x1, x2)

U2_ag(x1, x2, x3, x4, x5)  =  U2_ag(x1, x5)

FLAT_IN_AG(x1, x2)  =  FLAT_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FLAT_IN_AG(.(.(H, T), TT), .(H, R)) -> FLAT_IN_AG(.(T, TT), R)
   FLAT_IN_AG(.([], T), R) -> FLAT_IN_AG(T, R)

R is empty.
The argument filtering Pi contains the following mapping:
[]  =  []

.(x1, x2)  =  .(x1, x2)

FLAT_IN_AG(x1, x2)  =  FLAT_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FLAT_IN_AG(.(H, R)) -> FLAT_IN_AG(R)
   FLAT_IN_AG(R) -> FLAT_IN_AG(R)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   FLAT_IN_AG(.(H, R)) -> FLAT_IN_AG(R)
No rules are removed from R.

Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + x_2
   POL(FLAT_IN_AG(x_1)) = 2*x_1


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FLAT_IN_AG(R) -> FLAT_IN_AG(R)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = FLAT_IN_AG(R) evaluates to  t =FLAT_IN_AG(R)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from FLAT_IN_AG(R) to FLAT_IN_AG(R).




----------------------------------------

(14)
NO

----------------------------------------

(15) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

flat_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   flat_in_ag([], []) -> flat_out_ag([], [])
   flat_in_ag(.([], T), R) -> U1_ag(T, R, flat_in_ag(T, R))
   flat_in_ag(.(.(H, T), TT), .(H, R)) -> U2_ag(H, T, TT, R, flat_in_ag(.(T, TT), R))
   U2_ag(H, T, TT, R, flat_out_ag(.(T, TT), R)) -> flat_out_ag(.(.(H, T), TT), .(H, R))
   U1_ag(T, R, flat_out_ag(T, R)) -> flat_out_ag(.([], T), R)

The argument filtering Pi contains the following mapping:
flat_in_ag(x1, x2)  =  flat_in_ag(x2)

[]  =  []

flat_out_ag(x1, x2)  =  flat_out_ag(x1, x2)

U1_ag(x1, x2, x3)  =  U1_ag(x2, x3)

.(x1, x2)  =  .(x1, x2)

U2_ag(x1, x2, x3, x4, x5)  =  U2_ag(x1, x4, x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(16)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   flat_in_ag([], []) -> flat_out_ag([], [])
   flat_in_ag(.([], T), R) -> U1_ag(T, R, flat_in_ag(T, R))
   flat_in_ag(.(.(H, T), TT), .(H, R)) -> U2_ag(H, T, TT, R, flat_in_ag(.(T, TT), R))
   U2_ag(H, T, TT, R, flat_out_ag(.(T, TT), R)) -> flat_out_ag(.(.(H, T), TT), .(H, R))
   U1_ag(T, R, flat_out_ag(T, R)) -> flat_out_ag(.([], T), R)

The argument filtering Pi contains the following mapping:
flat_in_ag(x1, x2)  =  flat_in_ag(x2)

[]  =  []

flat_out_ag(x1, x2)  =  flat_out_ag(x1, x2)

U1_ag(x1, x2, x3)  =  U1_ag(x2, x3)

.(x1, x2)  =  .(x1, x2)

U2_ag(x1, x2, x3, x4, x5)  =  U2_ag(x1, x4, x5)



----------------------------------------

(17) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   FLAT_IN_AG(.([], T), R) -> U1_AG(T, R, flat_in_ag(T, R))
   FLAT_IN_AG(.([], T), R) -> FLAT_IN_AG(T, R)
   FLAT_IN_AG(.(.(H, T), TT), .(H, R)) -> U2_AG(H, T, TT, R, flat_in_ag(.(T, TT), R))
   FLAT_IN_AG(.(.(H, T), TT), .(H, R)) -> FLAT_IN_AG(.(T, TT), R)

The TRS R consists of the following rules:

   flat_in_ag([], []) -> flat_out_ag([], [])
   flat_in_ag(.([], T), R) -> U1_ag(T, R, flat_in_ag(T, R))
   flat_in_ag(.(.(H, T), TT), .(H, R)) -> U2_ag(H, T, TT, R, flat_in_ag(.(T, TT), R))
   U2_ag(H, T, TT, R, flat_out_ag(.(T, TT), R)) -> flat_out_ag(.(.(H, T), TT), .(H, R))
   U1_ag(T, R, flat_out_ag(T, R)) -> flat_out_ag(.([], T), R)

The argument filtering Pi contains the following mapping:
flat_in_ag(x1, x2)  =  flat_in_ag(x2)

[]  =  []

flat_out_ag(x1, x2)  =  flat_out_ag(x1, x2)

U1_ag(x1, x2, x3)  =  U1_ag(x2, x3)

.(x1, x2)  =  .(x1, x2)

U2_ag(x1, x2, x3, x4, x5)  =  U2_ag(x1, x4, x5)

FLAT_IN_AG(x1, x2)  =  FLAT_IN_AG(x2)

U1_AG(x1, x2, x3)  =  U1_AG(x2, x3)

U2_AG(x1, x2, x3, x4, x5)  =  U2_AG(x1, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(18)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FLAT_IN_AG(.([], T), R) -> U1_AG(T, R, flat_in_ag(T, R))
   FLAT_IN_AG(.([], T), R) -> FLAT_IN_AG(T, R)
   FLAT_IN_AG(.(.(H, T), TT), .(H, R)) -> U2_AG(H, T, TT, R, flat_in_ag(.(T, TT), R))
   FLAT_IN_AG(.(.(H, T), TT), .(H, R)) -> FLAT_IN_AG(.(T, TT), R)

The TRS R consists of the following rules:

   flat_in_ag([], []) -> flat_out_ag([], [])
   flat_in_ag(.([], T), R) -> U1_ag(T, R, flat_in_ag(T, R))
   flat_in_ag(.(.(H, T), TT), .(H, R)) -> U2_ag(H, T, TT, R, flat_in_ag(.(T, TT), R))
   U2_ag(H, T, TT, R, flat_out_ag(.(T, TT), R)) -> flat_out_ag(.(.(H, T), TT), .(H, R))
   U1_ag(T, R, flat_out_ag(T, R)) -> flat_out_ag(.([], T), R)

The argument filtering Pi contains the following mapping:
flat_in_ag(x1, x2)  =  flat_in_ag(x2)

[]  =  []

flat_out_ag(x1, x2)  =  flat_out_ag(x1, x2)

U1_ag(x1, x2, x3)  =  U1_ag(x2, x3)

.(x1, x2)  =  .(x1, x2)

U2_ag(x1, x2, x3, x4, x5)  =  U2_ag(x1, x4, x5)

FLAT_IN_AG(x1, x2)  =  FLAT_IN_AG(x2)

U1_AG(x1, x2, x3)  =  U1_AG(x2, x3)

U2_AG(x1, x2, x3, x4, x5)  =  U2_AG(x1, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(19) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 2 less nodes.
----------------------------------------

(20)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FLAT_IN_AG(.(.(H, T), TT), .(H, R)) -> FLAT_IN_AG(.(T, TT), R)
   FLAT_IN_AG(.([], T), R) -> FLAT_IN_AG(T, R)

The TRS R consists of the following rules:

   flat_in_ag([], []) -> flat_out_ag([], [])
   flat_in_ag(.([], T), R) -> U1_ag(T, R, flat_in_ag(T, R))
   flat_in_ag(.(.(H, T), TT), .(H, R)) -> U2_ag(H, T, TT, R, flat_in_ag(.(T, TT), R))
   U2_ag(H, T, TT, R, flat_out_ag(.(T, TT), R)) -> flat_out_ag(.(.(H, T), TT), .(H, R))
   U1_ag(T, R, flat_out_ag(T, R)) -> flat_out_ag(.([], T), R)

The argument filtering Pi contains the following mapping:
flat_in_ag(x1, x2)  =  flat_in_ag(x2)

[]  =  []

flat_out_ag(x1, x2)  =  flat_out_ag(x1, x2)

U1_ag(x1, x2, x3)  =  U1_ag(x2, x3)

.(x1, x2)  =  .(x1, x2)

U2_ag(x1, x2, x3, x4, x5)  =  U2_ag(x1, x4, x5)

FLAT_IN_AG(x1, x2)  =  FLAT_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(22)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FLAT_IN_AG(.(.(H, T), TT), .(H, R)) -> FLAT_IN_AG(.(T, TT), R)
   FLAT_IN_AG(.([], T), R) -> FLAT_IN_AG(T, R)

R is empty.
The argument filtering Pi contains the following mapping:
[]  =  []

.(x1, x2)  =  .(x1, x2)

FLAT_IN_AG(x1, x2)  =  FLAT_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(23) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FLAT_IN_AG(.(H, R)) -> FLAT_IN_AG(R)
   FLAT_IN_AG(R) -> FLAT_IN_AG(R)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   FLAT_IN_AG(.(H, R)) -> FLAT_IN_AG(R)
No rules are removed from R.

Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + x_2
   POL(FLAT_IN_AG(x_1)) = 2*x_1


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FLAT_IN_AG(R) -> FLAT_IN_AG(R)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(27) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = FLAT_IN_AG(R) evaluates to  t =FLAT_IN_AG(R)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from FLAT_IN_AG(R) to FLAT_IN_AG(R).




----------------------------------------

(28)
NO

----------------------------------------

(29) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(flat ([]) ([]))",
                null
            ],
            [
                "(flat (. ([]) T) R)",
                "(flat T R)"
            ],
            [
                "(flat (. (. H T) TT) (. H R))",
                "(flat (. T TT) R)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "66": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(flat T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "67": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(flat T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "89": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(flat T13 T12)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(flat T1 T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(flat T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "68": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(flat T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "16": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(flat T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "145": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(flat (. T26 T27) T25)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T25"],
                    "free": [],
                    "exprvars": []
                }
            },
            "146": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(flat T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(flat T1 T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(flat T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "93": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 12,
                "label": "PARALLEL"
            },
            {
                "from": 6,
                "to": 13,
                "label": "PARALLEL"
            },
            {
                "from": 12,
                "to": 16,
                "label": "EVAL with clause\nflat([], []).\nand substitutionT1 -> [],\nT2 -> []"
            },
            {
                "from": 12,
                "to": 17,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 13,
                "to": 67,
                "label": "PARALLEL"
            },
            {
                "from": 13,
                "to": 68,
                "label": "PARALLEL"
            },
            {
                "from": 16,
                "to": 66,
                "label": "SUCCESS"
            },
            {
                "from": 67,
                "to": 89,
                "label": "EVAL with clause\nflat(.([], X9), X10) :- flat(X9, X10).\nand substitutionX9 -> T13,\nT1 -> .([], T13),\nT2 -> T12,\nX10 -> T12,\nT11 -> T13"
            },
            {
                "from": 67,
                "to": 93,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 68,
                "to": 145,
                "label": "EVAL with clause\nflat(.(.(X19, X20), X21), .(X19, X22)) :- flat(.(X20, X21), X22).\nand substitutionX19 -> T22,\nX20 -> T26,\nX21 -> T27,\nT1 -> .(.(T22, T26), T27),\nX22 -> T25,\nT2 -> .(T22, T25),\nT23 -> T26,\nT24 -> T27"
            },
            {
                "from": 68,
                "to": 146,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 89,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T13\nT2 -> T12"
            },
            {
                "from": 145,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> .(T26, T27)\nT2 -> T25"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(30)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in([]) -> f2_out1([])
   f2_in(T12) -> U1(f2_in(T12), T12)
   U1(f2_out1(T13), T12) -> f2_out1(.([], T13))
   f2_in(.(T22, T25)) -> U2(f2_in(T25), .(T22, T25))
   U2(f2_out1(.(T26, T27)), .(T22, T25)) -> f2_out1(.(.(T22, T26), T27))

Q is empty.

----------------------------------------

(31) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN(T12) -> U1^1(f2_in(T12), T12)
   F2_IN(T12) -> F2_IN(T12)
   F2_IN(.(T22, T25)) -> U2^1(f2_in(T25), .(T22, T25))
   F2_IN(.(T22, T25)) -> F2_IN(T25)

The TRS R consists of the following rules:

   f2_in([]) -> f2_out1([])
   f2_in(T12) -> U1(f2_in(T12), T12)
   U1(f2_out1(T13), T12) -> f2_out1(.([], T13))
   f2_in(.(T22, T25)) -> U2(f2_in(T25), .(T22, T25))
   U2(f2_out1(.(T26, T27)), .(T22, T25)) -> f2_out1(.(.(T22, T26), T27))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(33) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN(.(T22, T25)) -> F2_IN(T25)
   F2_IN(T12) -> F2_IN(T12)

The TRS R consists of the following rules:

   f2_in([]) -> f2_out1([])
   f2_in(T12) -> U1(f2_in(T12), T12)
   U1(f2_out1(T13), T12) -> f2_out1(.([], T13))
   f2_in(.(T22, T25)) -> U2(f2_in(T25), .(T22, T25))
   U2(f2_out1(.(T26, T27)), .(T22, T25)) -> f2_out1(.(.(T22, T26), T27))

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(35) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN(.(T22, T25)) -> F2_IN(T25)
   F2_IN(T12) -> F2_IN(T12)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   F2_IN(.(T22, T25)) -> F2_IN(T25)
No rules are removed from R.

Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + x_2
   POL(F2_IN(x_1)) = 2*x_1


----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN(T12) -> F2_IN(T12)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = F2_IN(T12) evaluates to  t =F2_IN(T12)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from F2_IN(T12) to F2_IN(T12).




----------------------------------------

(40)
NO

----------------------------------------

(41) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(flat ([]) ([]))",
                null
            ],
            [
                "(flat (. ([]) T) R)",
                "(flat T R)"
            ],
            [
                "(flat (. (. H T) TT) (. H R))",
                "(flat (. T TT) R)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "type": "Nodes",
            "140": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "130": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "120": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(flat T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "121": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(flat T1 T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(flat T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "122": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "123": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(flat T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "124": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "126": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(flat T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "127": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(flat T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "139": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(flat (. T26 T27) T25)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T25"],
                    "free": [],
                    "exprvars": []
                }
            },
            "118": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(flat T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(flat T1 T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(flat T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "129": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(flat T13 T12)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T12"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 118,
                "label": "CASE"
            },
            {
                "from": 118,
                "to": 120,
                "label": "PARALLEL"
            },
            {
                "from": 118,
                "to": 121,
                "label": "PARALLEL"
            },
            {
                "from": 120,
                "to": 122,
                "label": "EVAL with clause\nflat([], []).\nand substitutionT1 -> [],\nT2 -> []"
            },
            {
                "from": 120,
                "to": 123,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 121,
                "to": 126,
                "label": "PARALLEL"
            },
            {
                "from": 121,
                "to": 127,
                "label": "PARALLEL"
            },
            {
                "from": 122,
                "to": 124,
                "label": "SUCCESS"
            },
            {
                "from": 126,
                "to": 129,
                "label": "EVAL with clause\nflat(.([], X9), X10) :- flat(X9, X10).\nand substitutionX9 -> T13,\nT1 -> .([], T13),\nT2 -> T12,\nX10 -> T12,\nT11 -> T13"
            },
            {
                "from": 126,
                "to": 130,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 127,
                "to": 139,
                "label": "EVAL with clause\nflat(.(.(X19, X20), X21), .(X19, X22)) :- flat(.(X20, X21), X22).\nand substitutionX19 -> T22,\nX20 -> T26,\nX21 -> T27,\nT1 -> .(.(T22, T26), T27),\nX22 -> T25,\nT2 -> .(T22, T25),\nT23 -> T26,\nT24 -> T27"
            },
            {
                "from": 127,
                "to": 140,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 129,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T13\nT2 -> T12"
            },
            {
                "from": 139,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> .(T26, T27)\nT2 -> T25"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(42)
Obligation:
Rules:
f118_in(T2) -> f121_in(T2) :|: TRUE
f121_out(x) -> f118_out(x) :|: TRUE
f120_out(x1) -> f118_out(x1) :|: TRUE
f118_in(x2) -> f120_in(x2) :|: TRUE
f3_in(x3) -> f118_in(x3) :|: TRUE
f118_out(x4) -> f3_out(x4) :|: TRUE
f121_in(x5) -> f127_in(x5) :|: TRUE
f126_out(x6) -> f121_out(x6) :|: TRUE
f127_out(x7) -> f121_out(x7) :|: TRUE
f121_in(x8) -> f126_in(x8) :|: TRUE
f130_out -> f126_out(x9) :|: TRUE
f126_in(x10) -> f130_in :|: TRUE
f129_out(T12) -> f126_out(T12) :|: TRUE
f126_in(x11) -> f129_in(x11) :|: TRUE
f129_in(x12) -> f3_in(x12) :|: TRUE
f3_out(x13) -> f129_out(x13) :|: TRUE
f140_out -> f127_out(x14) :|: TRUE
f127_in(x15) -> f140_in :|: TRUE
f127_in(.(T22, T25)) -> f139_in(T25) :|: TRUE
f139_out(x16) -> f127_out(.(x17, x16)) :|: TRUE
f139_in(x18) -> f3_in(x18) :|: TRUE
f3_out(x19) -> f139_out(x19) :|: TRUE
Start term: f3_in(T2)

----------------------------------------

(43) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f118_in(T2) -> f121_in(T2) :|: TRUE
f3_in(x3) -> f118_in(x3) :|: TRUE
f121_in(x5) -> f127_in(x5) :|: TRUE
f121_in(x8) -> f126_in(x8) :|: TRUE
f126_in(x11) -> f129_in(x11) :|: TRUE
f129_in(x12) -> f3_in(x12) :|: TRUE
f127_in(.(T22, T25)) -> f139_in(T25) :|: TRUE
f139_in(x18) -> f3_in(x18) :|: TRUE


----------------------------------------

(44)
Obligation:
Rules:
f118_in(T2) -> f121_in(T2) :|: TRUE
f3_in(x3) -> f118_in(x3) :|: TRUE
f121_in(x5) -> f127_in(x5) :|: TRUE
f121_in(x8) -> f126_in(x8) :|: TRUE
f126_in(x11) -> f129_in(x11) :|: TRUE
f129_in(x12) -> f3_in(x12) :|: TRUE
f127_in(.(T22, T25)) -> f139_in(T25) :|: TRUE
f139_in(x18) -> f3_in(x18) :|: TRUE

----------------------------------------

(45) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(46)
Obligation:
Rules:
f3_in(.(T22:0, T25:0)) -> f3_in(T25:0) :|: TRUE
f3_in(x3:0) -> f3_in(x3:0) :|: TRUE

----------------------------------------

(47) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(48)
Obligation:
Rules:
f3_in(.(T22:0, T25:0)) -> f3_in(T25:0) :|: TRUE
f3_in(x3:0) -> f3_in(x3:0) :|: TRUE

----------------------------------------

(49) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f3_in(.(T22:0, T25:0)) -> f3_in(T25:0) :|: TRUE
(2) f3_in(x3:0) -> f3_in(x3:0) :|: TRUE

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(50)
Obligation:

Termination digraph:
Nodes:
(1) f3_in(.(T22:0, T25:0)) -> f3_in(T25:0) :|: TRUE
(2) f3_in(x3:0) -> f3_in(x3:0) :|: TRUE

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(51) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   .(x1, x2) -> .(x2)

----------------------------------------

(52)
Obligation:
Rules:
f3_in(.(T25:0)) -> f3_in(T25:0) :|: TRUE
f3_in(x3:0) -> f3_in(x3:0) :|: TRUE

----------------------------------------

(53) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(flat ([]) ([]))",
                null
            ],
            [
                "(flat (. ([]) T) R)",
                "(flat T R)"
            ],
            [
                "(flat (. (. H T) TT) (. H R))",
                "(flat (. T TT) R)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "45": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "150": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "151": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(flat T1 T24)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(flat T1 T24)",
                        "(flat ([]) ([]))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T24"],
                    "free": [],
                    "exprvars": []
                }
            },
            "156": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(flat (. T71 T72) T70)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T70"],
                    "free": [],
                    "exprvars": []
                }
            },
            "157": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "158": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(flat (. T81 T82) T80)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(flat T1 (. T77 T80))",
                        "(flat (. ([]) X29) X30)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T77",
                        "T80"
                    ],
                    "free": [
                        "X29",
                        "X30"
                    ],
                    "exprvars": []
                }
            },
            "159": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "117": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(flat T1 ([]))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "119": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(flat T1 ([]))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "51": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "56": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "57": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(flat T5 ([]))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(flat T1 ([]))"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(flat T1 ([]))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "58": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(flat T5 ([]))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(flat T1 ([]))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(flat T1 T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(flat T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(flat T1 T2)",
                        "(flat ([]) ([]))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "59": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(flat T11 ([]))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "18": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(flat T1 ([]))"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(flat T1 ([]))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(flat T5 ([]))"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(flat T1 ([]))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "160": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 4,
                        "term": "(flat (. T81 T82) T80)"
                    },
                    {
                        "clause": 1,
                        "scope": 4,
                        "term": "(flat (. T81 T82) T80)"
                    },
                    {
                        "clause": 2,
                        "scope": 4,
                        "term": "(flat (. T81 T82) T80)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(flat T1 (. T77 T80))",
                        "(flat (. ([]) X29) X30)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T77",
                        "T80"
                    ],
                    "free": [
                        "X29",
                        "X30"
                    ],
                    "exprvars": []
                }
            },
            "161": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 4,
                        "term": "(flat (. T81 T82) T80)"
                    },
                    {
                        "clause": 2,
                        "scope": 4,
                        "term": "(flat (. T81 T82) T80)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(flat T1 (. T77 T80))",
                        "(flat (. ([]) X29) X30)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T77",
                        "T80"
                    ],
                    "free": [
                        "X29",
                        "X30"
                    ],
                    "exprvars": []
                }
            },
            "162": {
                "goal": [{
                    "clause": 1,
                    "scope": 4,
                    "term": "(flat (. T81 T82) T80)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(flat T1 (. T77 T80))",
                        "(flat (. ([]) X29) X30)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T77",
                        "T80"
                    ],
                    "free": [
                        "X29",
                        "X30"
                    ],
                    "exprvars": []
                }
            },
            "163": {
                "goal": [{
                    "clause": 2,
                    "scope": 4,
                    "term": "(flat (. T81 T82) T80)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(flat T1 (. T77 T80))",
                        "(flat (. ([]) X29) X30)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T77",
                        "T80"
                    ],
                    "free": [
                        "X29",
                        "X30"
                    ],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(flat T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "168": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(flat T93 T92)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(flat T1 (. T77 T92))",
                        "(flat (. ([]) X29) X30)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T77",
                        "T92"
                    ],
                    "free": [
                        "X29",
                        "X30"
                    ],
                    "exprvars": []
                }
            },
            "125": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "169": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(flat T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(flat T1 T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(flat T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "128": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "60": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "20": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(flat T1 ([]))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(flat T1 ([]))",
                        "(flat (. ([]) X3) X4)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X3",
                        "X4"
                    ],
                    "exprvars": []
                }
            },
            "26": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(flat T5 ([]))"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(flat T5 ([]))"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(flat T5 ([]))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(flat T1 ([]))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "29": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(flat T5 ([]))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "170": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(flat (. T106 T107) T105)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(flat T1 (. T77 (. T102 T105)))",
                        "(flat (. ([]) X29) X30)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T77",
                        "T102",
                        "T105"
                    ],
                    "free": [
                        "X29",
                        "X30"
                    ],
                    "exprvars": []
                }
            },
            "171": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "131": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(flat T25 T24)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(flat T1 T24)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(flat T1 T24)",
                        "(flat ([]) ([]))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T24"],
                    "free": [],
                    "exprvars": []
                }
            },
            "132": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(flat T1 T2)"
                }],
                "kb": {
                    "nonunifying": [
                        [
                            "(flat T1 T2)",
                            "(flat ([]) ([]))"
                        ],
                        [
                            "(flat T1 T2)",
                            "(flat (. ([]) X29) X30)"
                        ]
                    ],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [
                        "X29",
                        "X30"
                    ],
                    "exprvars": []
                }
            },
            "133": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 3,
                        "term": "(flat T25 T24)"
                    },
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(flat T25 T24)"
                    },
                    {
                        "clause": 2,
                        "scope": 3,
                        "term": "(flat T25 T24)"
                    },
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(flat T1 T24)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(flat T1 T24)",
                        "(flat ([]) ([]))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T24"],
                    "free": [],
                    "exprvars": []
                }
            },
            "134": {
                "goal": [{
                    "clause": 0,
                    "scope": 3,
                    "term": "(flat T25 T24)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(flat T1 T24)",
                        "(flat ([]) ([]))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T24"],
                    "free": [],
                    "exprvars": []
                }
            },
            "135": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(flat T25 T24)"
                    },
                    {
                        "clause": 2,
                        "scope": 3,
                        "term": "(flat T25 T24)"
                    },
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(flat T1 T24)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(flat T1 T24)",
                        "(flat ([]) ([]))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T24"],
                    "free": [],
                    "exprvars": []
                }
            },
            "136": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "137": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "138": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "33": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(flat T5 ([]))"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(flat T5 ([]))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(flat T1 ([]))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "141": {
                "goal": [{
                    "clause": 1,
                    "scope": 3,
                    "term": "(flat T25 T24)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(flat T1 T24)",
                        "(flat ([]) ([]))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T24"],
                    "free": [],
                    "exprvars": []
                }
            },
            "142": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 3,
                        "term": "(flat T25 T24)"
                    },
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(flat T1 T24)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(flat T1 T24)",
                        "(flat ([]) ([]))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T24"],
                    "free": [],
                    "exprvars": []
                }
            },
            "143": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(flat T36 T35)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(flat T1 T35)",
                        "(flat ([]) ([]))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T35"],
                    "free": [],
                    "exprvars": []
                }
            },
            "144": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "147": {
                "goal": [{
                    "clause": 2,
                    "scope": 3,
                    "term": "(flat T25 T24)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(flat T1 T24)",
                        "(flat ([]) ([]))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T24"],
                    "free": [],
                    "exprvars": []
                }
            },
            "148": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(flat T1 T24)"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(flat T1 T24)",
                        "(flat ([]) ([]))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T24"],
                    "free": [],
                    "exprvars": []
                }
            },
            "149": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(flat (. T57 T58) T56)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T56"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 7,
                "label": "CASE"
            },
            {
                "from": 7,
                "to": 14,
                "label": "EVAL with clause\nflat([], []).\nand substitutionT1 -> [],\nT2 -> []"
            },
            {
                "from": 7,
                "to": 15,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 14,
                "to": 18,
                "label": "SUCCESS"
            },
            {
                "from": 15,
                "to": 131,
                "label": "EVAL with clause\nflat(.([], X29), X30) :- flat(X29, X30).\nand substitutionX29 -> T25,\nT1 -> .([], T25),\nT2 -> T24,\nX30 -> T24,\nT23 -> T25"
            },
            {
                "from": 15,
                "to": 132,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 18,
                "to": 19,
                "label": "EVAL with clause\nflat(.([], X3), X4) :- flat(X3, X4).\nand substitutionX3 -> T5,\nT1 -> .([], T5),\nX4 -> [],\nT4 -> T5"
            },
            {
                "from": 18,
                "to": 20,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 19,
                "to": 26,
                "label": "CASE"
            },
            {
                "from": 20,
                "to": 128,
                "label": "BACKTRACK\nfor clause: flat(.(.(H, T), TT), .(H, R)) :- flat(.(T, TT), R)because of non-unification"
            },
            {
                "from": 26,
                "to": 29,
                "label": "PARALLEL"
            },
            {
                "from": 26,
                "to": 33,
                "label": "PARALLEL"
            },
            {
                "from": 29,
                "to": 45,
                "label": "EVAL with clause\nflat([], []).\nand substitutionT5 -> []"
            },
            {
                "from": 29,
                "to": 51,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 33,
                "to": 57,
                "label": "PARALLEL"
            },
            {
                "from": 33,
                "to": 58,
                "label": "PARALLEL"
            },
            {
                "from": 45,
                "to": 56,
                "label": "SUCCESS"
            },
            {
                "from": 57,
                "to": 59,
                "label": "EVAL with clause\nflat(.([], X13), X14) :- flat(X13, X14).\nand substitutionX13 -> T11,\nT5 -> .([], T11),\nX14 -> [],\nT10 -> T11"
            },
            {
                "from": 57,
                "to": 60,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 58,
                "to": 117,
                "label": "BACKTRACK\nfor clause: flat(.(.(H, T), TT), .(H, R)) :- flat(.(T, TT), R)because of non-unification"
            },
            {
                "from": 59,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T11\nT2 -> []"
            },
            {
                "from": 117,
                "to": 119,
                "label": "FAILURE"
            },
            {
                "from": 119,
                "to": 125,
                "label": "BACKTRACK\nfor clause: flat(.(.(H, T), TT), .(H, R)) :- flat(.(T, TT), R)because of non-unification"
            },
            {
                "from": 131,
                "to": 133,
                "label": "CASE"
            },
            {
                "from": 132,
                "to": 158,
                "label": "EVAL with clause\nflat(.(.(X77, X78), X79), .(X77, X80)) :- flat(.(X78, X79), X80).\nand substitutionX77 -> T77,\nX78 -> T81,\nX79 -> T82,\nT1 -> .(.(T77, T81), T82),\nX80 -> T80,\nT2 -> .(T77, T80),\nT78 -> T81,\nT79 -> T82"
            },
            {
                "from": 132,
                "to": 159,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 133,
                "to": 134,
                "label": "PARALLEL"
            },
            {
                "from": 133,
                "to": 135,
                "label": "PARALLEL"
            },
            {
                "from": 134,
                "to": 136,
                "label": "EVAL with clause\nflat([], []).\nand substitutionT25 -> [],\nT24 -> []"
            },
            {
                "from": 134,
                "to": 137,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 135,
                "to": 141,
                "label": "PARALLEL"
            },
            {
                "from": 135,
                "to": 142,
                "label": "PARALLEL"
            },
            {
                "from": 136,
                "to": 138,
                "label": "SUCCESS"
            },
            {
                "from": 141,
                "to": 143,
                "label": "EVAL with clause\nflat(.([], X39), X40) :- flat(X39, X40).\nand substitutionX39 -> T36,\nT25 -> .([], T36),\nT24 -> T35,\nX40 -> T35,\nT34 -> T36"
            },
            {
                "from": 141,
                "to": 144,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 142,
                "to": 147,
                "label": "PARALLEL"
            },
            {
                "from": 142,
                "to": 148,
                "label": "PARALLEL"
            },
            {
                "from": 143,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T36\nT2 -> T35"
            },
            {
                "from": 147,
                "to": 149,
                "label": "EVAL with clause\nflat(.(.(X57, X58), X59), .(X57, X60)) :- flat(.(X58, X59), X60).\nand substitutionX57 -> T53,\nX58 -> T57,\nX59 -> T58,\nT25 -> .(.(T53, T57), T58),\nX60 -> T56,\nT24 -> .(T53, T56),\nT54 -> T57,\nT55 -> T58"
            },
            {
                "from": 147,
                "to": 150,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 148,
                "to": 151,
                "label": "FAILURE"
            },
            {
                "from": 149,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> .(T57, T58)\nT2 -> T56"
            },
            {
                "from": 151,
                "to": 156,
                "label": "EVAL with clause\nflat(.(.(X69, X70), X71), .(X69, X72)) :- flat(.(X70, X71), X72).\nand substitutionX69 -> T67,\nX70 -> T71,\nX71 -> T72,\nT1 -> .(.(T67, T71), T72),\nX72 -> T70,\nT24 -> .(T67, T70),\nT68 -> T71,\nT69 -> T72"
            },
            {
                "from": 151,
                "to": 157,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 156,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> .(T71, T72)\nT2 -> T70"
            },
            {
                "from": 158,
                "to": 160,
                "label": "CASE"
            },
            {
                "from": 160,
                "to": 161,
                "label": "BACKTRACK\nfor clause: flat([], [])because of non-unification"
            },
            {
                "from": 161,
                "to": 162,
                "label": "PARALLEL"
            },
            {
                "from": 161,
                "to": 163,
                "label": "PARALLEL"
            },
            {
                "from": 162,
                "to": 168,
                "label": "EVAL with clause\nflat(.([], X89), X90) :- flat(X89, X90).\nand substitutionT81 -> [],\nT82 -> T93,\nX89 -> T93,\nT80 -> T92,\nX90 -> T92,\nT91 -> T93"
            },
            {
                "from": 162,
                "to": 169,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 163,
                "to": 170,
                "label": "EVAL with clause\nflat(.(.(X99, X100), X101), .(X99, X102)) :- flat(.(X100, X101), X102).\nand substitutionX99 -> T102,\nX100 -> T106,\nT81 -> .(T102, T106),\nT82 -> T107,\nX101 -> T107,\nX102 -> T105,\nT80 -> .(T102, T105),\nT103 -> T106,\nT104 -> T107"
            },
            {
                "from": 163,
                "to": 171,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 168,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T93\nT2 -> T92"
            },
            {
                "from": 170,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> .(T106, T107)\nT2 -> T105"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(54)
Obligation:
Triples:

flatA(.([], .([], X1)), []) :- flatA(X1, []).
flatA(.([], .([], X1)), X2) :- flatA(X1, X2).
flatA(.([], .(.(X1, X2), X3)), .(X1, X4)) :- flatA(.(X2, X3), X4).
flatA(.(.(X1, X2), X3), .(X1, X4)) :- flatA(.(X2, X3), X4).
flatA(.(.(X1, []), X2), .(X1, X3)) :- flatA(X2, X3).
flatA(.(.(X1, .(X2, X3)), X4), .(X1, .(X2, X5))) :- flatA(.(X3, X4), X5).

Clauses:

flatcA([], []).
flatcA(.([], []), []).
flatcA(.([], .([], X1)), []) :- flatcA(X1, []).
flatcA(.([], []), []).
flatcA(.([], .([], X1)), X2) :- flatcA(X1, X2).
flatcA(.([], .(.(X1, X2), X3)), .(X1, X4)) :- flatcA(.(X2, X3), X4).
flatcA(.(.(X1, X2), X3), .(X1, X4)) :- flatcA(.(X2, X3), X4).
flatcA(.(.(X1, []), X2), .(X1, X3)) :- flatcA(X2, X3).
flatcA(.(.(X1, .(X2, X3)), X4), .(X1, .(X2, X5))) :- flatcA(.(X3, X4), X5).

Afs:

flatA(x1, x2)  =  flatA(x2)


----------------------------------------

(55) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

flatA_in_2: (f,b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   FLATA_IN_AG(.([], .([], X1)), []) -> U1_AG(X1, flatA_in_ag(X1, []))
   FLATA_IN_AG(.([], .([], X1)), []) -> FLATA_IN_AG(X1, [])
   FLATA_IN_AG(.([], .([], X1)), X2) -> U2_AG(X1, X2, flatA_in_ag(X1, X2))
   FLATA_IN_AG(.([], .([], X1)), X2) -> FLATA_IN_AG(X1, X2)
   FLATA_IN_AG(.([], .(.(X1, X2), X3)), .(X1, X4)) -> U3_AG(X1, X2, X3, X4, flatA_in_ag(.(X2, X3), X4))
   FLATA_IN_AG(.([], .(.(X1, X2), X3)), .(X1, X4)) -> FLATA_IN_AG(.(X2, X3), X4)
   FLATA_IN_AG(.(.(X1, X2), X3), .(X1, X4)) -> U4_AG(X1, X2, X3, X4, flatA_in_ag(.(X2, X3), X4))
   FLATA_IN_AG(.(.(X1, X2), X3), .(X1, X4)) -> FLATA_IN_AG(.(X2, X3), X4)
   FLATA_IN_AG(.(.(X1, []), X2), .(X1, X3)) -> U5_AG(X1, X2, X3, flatA_in_ag(X2, X3))
   FLATA_IN_AG(.(.(X1, []), X2), .(X1, X3)) -> FLATA_IN_AG(X2, X3)
   FLATA_IN_AG(.(.(X1, .(X2, X3)), X4), .(X1, .(X2, X5))) -> U6_AG(X1, X2, X3, X4, X5, flatA_in_ag(.(X3, X4), X5))
   FLATA_IN_AG(.(.(X1, .(X2, X3)), X4), .(X1, .(X2, X5))) -> FLATA_IN_AG(.(X3, X4), X5)

R is empty.
The argument filtering Pi contains the following mapping:
flatA_in_ag(x1, x2)  =  flatA_in_ag(x2)

[]  =  []

.(x1, x2)  =  .(x1, x2)

FLATA_IN_AG(x1, x2)  =  FLATA_IN_AG(x2)

U1_AG(x1, x2)  =  U1_AG(x2)

U2_AG(x1, x2, x3)  =  U2_AG(x2, x3)

U3_AG(x1, x2, x3, x4, x5)  =  U3_AG(x1, x4, x5)

U4_AG(x1, x2, x3, x4, x5)  =  U4_AG(x1, x4, x5)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x1, x3, x4)

U6_AG(x1, x2, x3, x4, x5, x6)  =  U6_AG(x1, x2, x5, x6)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(56)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FLATA_IN_AG(.([], .([], X1)), []) -> U1_AG(X1, flatA_in_ag(X1, []))
   FLATA_IN_AG(.([], .([], X1)), []) -> FLATA_IN_AG(X1, [])
   FLATA_IN_AG(.([], .([], X1)), X2) -> U2_AG(X1, X2, flatA_in_ag(X1, X2))
   FLATA_IN_AG(.([], .([], X1)), X2) -> FLATA_IN_AG(X1, X2)
   FLATA_IN_AG(.([], .(.(X1, X2), X3)), .(X1, X4)) -> U3_AG(X1, X2, X3, X4, flatA_in_ag(.(X2, X3), X4))
   FLATA_IN_AG(.([], .(.(X1, X2), X3)), .(X1, X4)) -> FLATA_IN_AG(.(X2, X3), X4)
   FLATA_IN_AG(.(.(X1, X2), X3), .(X1, X4)) -> U4_AG(X1, X2, X3, X4, flatA_in_ag(.(X2, X3), X4))
   FLATA_IN_AG(.(.(X1, X2), X3), .(X1, X4)) -> FLATA_IN_AG(.(X2, X3), X4)
   FLATA_IN_AG(.(.(X1, []), X2), .(X1, X3)) -> U5_AG(X1, X2, X3, flatA_in_ag(X2, X3))
   FLATA_IN_AG(.(.(X1, []), X2), .(X1, X3)) -> FLATA_IN_AG(X2, X3)
   FLATA_IN_AG(.(.(X1, .(X2, X3)), X4), .(X1, .(X2, X5))) -> U6_AG(X1, X2, X3, X4, X5, flatA_in_ag(.(X3, X4), X5))
   FLATA_IN_AG(.(.(X1, .(X2, X3)), X4), .(X1, .(X2, X5))) -> FLATA_IN_AG(.(X3, X4), X5)

R is empty.
The argument filtering Pi contains the following mapping:
flatA_in_ag(x1, x2)  =  flatA_in_ag(x2)

[]  =  []

.(x1, x2)  =  .(x1, x2)

FLATA_IN_AG(x1, x2)  =  FLATA_IN_AG(x2)

U1_AG(x1, x2)  =  U1_AG(x2)

U2_AG(x1, x2, x3)  =  U2_AG(x2, x3)

U3_AG(x1, x2, x3, x4, x5)  =  U3_AG(x1, x4, x5)

U4_AG(x1, x2, x3, x4, x5)  =  U4_AG(x1, x4, x5)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x1, x3, x4)

U6_AG(x1, x2, x3, x4, x5, x6)  =  U6_AG(x1, x2, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(57) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 6 less nodes.
----------------------------------------

(58)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FLATA_IN_AG(.([], .([], X1)), X2) -> FLATA_IN_AG(X1, X2)
   FLATA_IN_AG(.([], .([], X1)), []) -> FLATA_IN_AG(X1, [])
   FLATA_IN_AG(.([], .(.(X1, X2), X3)), .(X1, X4)) -> FLATA_IN_AG(.(X2, X3), X4)
   FLATA_IN_AG(.(.(X1, X2), X3), .(X1, X4)) -> FLATA_IN_AG(.(X2, X3), X4)
   FLATA_IN_AG(.(.(X1, []), X2), .(X1, X3)) -> FLATA_IN_AG(X2, X3)
   FLATA_IN_AG(.(.(X1, .(X2, X3)), X4), .(X1, .(X2, X5))) -> FLATA_IN_AG(.(X3, X4), X5)

R is empty.
The argument filtering Pi contains the following mapping:
[]  =  []

.(x1, x2)  =  .(x1, x2)

FLATA_IN_AG(x1, x2)  =  FLATA_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(59) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FLATA_IN_AG(X2) -> FLATA_IN_AG(X2)
   FLATA_IN_AG([]) -> FLATA_IN_AG([])
   FLATA_IN_AG(.(X1, X4)) -> FLATA_IN_AG(X4)
   FLATA_IN_AG(.(X1, .(X2, X5))) -> FLATA_IN_AG(X5)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(61) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   FLATA_IN_AG(.(X1, X4)) -> FLATA_IN_AG(X4)
   FLATA_IN_AG(.(X1, .(X2, X5))) -> FLATA_IN_AG(X5)
No rules are removed from R.

Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + x_2
   POL(FLATA_IN_AG(x_1)) = 2*x_1
   POL([]) = 0


----------------------------------------

(62)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FLATA_IN_AG(X2) -> FLATA_IN_AG(X2)
   FLATA_IN_AG([]) -> FLATA_IN_AG([])

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(63) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = FLATA_IN_AG(X2) evaluates to  t =FLATA_IN_AG(X2)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from FLATA_IN_AG(X2) to FLATA_IN_AG(X2).




----------------------------------------

(64)
NO
