YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/UpOXm.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

div(g,g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) PiDPToQDPProof [SOUND, 0 ms]
(10) QDP
(11) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Clauses:

div(X, Y, Z) :- quot(X, Y, Y, Z).
quot(0, s(Y), s(Z), 0).
quot(s(X), s(Y), Z, U) :- quot(X, Y, Z, U).
quot(X, 0, s(Z), s(U)) :- quot(X, s(Z), s(Z), U).


Query: div(g,g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

div_in_3: (b,b,f)

quot_in_4: (b,b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   div_in_gga(X, Y, Z) -> U1_gga(X, Y, Z, quot_in_ggga(X, Y, Y, Z))
   quot_in_ggga(0, s(Y), s(Z), 0) -> quot_out_ggga(0, s(Y), s(Z), 0)
   quot_in_ggga(s(X), s(Y), Z, U) -> U2_ggga(X, Y, Z, U, quot_in_ggga(X, Y, Z, U))
   quot_in_ggga(X, 0, s(Z), s(U)) -> U3_ggga(X, Z, U, quot_in_ggga(X, s(Z), s(Z), U))
   U3_ggga(X, Z, U, quot_out_ggga(X, s(Z), s(Z), U)) -> quot_out_ggga(X, 0, s(Z), s(U))
   U2_ggga(X, Y, Z, U, quot_out_ggga(X, Y, Z, U)) -> quot_out_ggga(s(X), s(Y), Z, U)
   U1_gga(X, Y, Z, quot_out_ggga(X, Y, Y, Z)) -> div_out_gga(X, Y, Z)

The argument filtering Pi contains the following mapping:
div_in_gga(x1, x2, x3)  =  div_in_gga(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

quot_in_ggga(x1, x2, x3, x4)  =  quot_in_ggga(x1, x2, x3)

0  =  0

s(x1)  =  s(x1)

quot_out_ggga(x1, x2, x3, x4)  =  quot_out_ggga(x4)

U2_ggga(x1, x2, x3, x4, x5)  =  U2_ggga(x5)

U3_ggga(x1, x2, x3, x4)  =  U3_ggga(x4)

div_out_gga(x1, x2, x3)  =  div_out_gga(x3)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   div_in_gga(X, Y, Z) -> U1_gga(X, Y, Z, quot_in_ggga(X, Y, Y, Z))
   quot_in_ggga(0, s(Y), s(Z), 0) -> quot_out_ggga(0, s(Y), s(Z), 0)
   quot_in_ggga(s(X), s(Y), Z, U) -> U2_ggga(X, Y, Z, U, quot_in_ggga(X, Y, Z, U))
   quot_in_ggga(X, 0, s(Z), s(U)) -> U3_ggga(X, Z, U, quot_in_ggga(X, s(Z), s(Z), U))
   U3_ggga(X, Z, U, quot_out_ggga(X, s(Z), s(Z), U)) -> quot_out_ggga(X, 0, s(Z), s(U))
   U2_ggga(X, Y, Z, U, quot_out_ggga(X, Y, Z, U)) -> quot_out_ggga(s(X), s(Y), Z, U)
   U1_gga(X, Y, Z, quot_out_ggga(X, Y, Y, Z)) -> div_out_gga(X, Y, Z)

The argument filtering Pi contains the following mapping:
div_in_gga(x1, x2, x3)  =  div_in_gga(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

quot_in_ggga(x1, x2, x3, x4)  =  quot_in_ggga(x1, x2, x3)

0  =  0

s(x1)  =  s(x1)

quot_out_ggga(x1, x2, x3, x4)  =  quot_out_ggga(x4)

U2_ggga(x1, x2, x3, x4, x5)  =  U2_ggga(x5)

U3_ggga(x1, x2, x3, x4)  =  U3_ggga(x4)

div_out_gga(x1, x2, x3)  =  div_out_gga(x3)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   DIV_IN_GGA(X, Y, Z) -> U1_GGA(X, Y, Z, quot_in_ggga(X, Y, Y, Z))
   DIV_IN_GGA(X, Y, Z) -> QUOT_IN_GGGA(X, Y, Y, Z)
   QUOT_IN_GGGA(s(X), s(Y), Z, U) -> U2_GGGA(X, Y, Z, U, quot_in_ggga(X, Y, Z, U))
   QUOT_IN_GGGA(s(X), s(Y), Z, U) -> QUOT_IN_GGGA(X, Y, Z, U)
   QUOT_IN_GGGA(X, 0, s(Z), s(U)) -> U3_GGGA(X, Z, U, quot_in_ggga(X, s(Z), s(Z), U))
   QUOT_IN_GGGA(X, 0, s(Z), s(U)) -> QUOT_IN_GGGA(X, s(Z), s(Z), U)

The TRS R consists of the following rules:

   div_in_gga(X, Y, Z) -> U1_gga(X, Y, Z, quot_in_ggga(X, Y, Y, Z))
   quot_in_ggga(0, s(Y), s(Z), 0) -> quot_out_ggga(0, s(Y), s(Z), 0)
   quot_in_ggga(s(X), s(Y), Z, U) -> U2_ggga(X, Y, Z, U, quot_in_ggga(X, Y, Z, U))
   quot_in_ggga(X, 0, s(Z), s(U)) -> U3_ggga(X, Z, U, quot_in_ggga(X, s(Z), s(Z), U))
   U3_ggga(X, Z, U, quot_out_ggga(X, s(Z), s(Z), U)) -> quot_out_ggga(X, 0, s(Z), s(U))
   U2_ggga(X, Y, Z, U, quot_out_ggga(X, Y, Z, U)) -> quot_out_ggga(s(X), s(Y), Z, U)
   U1_gga(X, Y, Z, quot_out_ggga(X, Y, Y, Z)) -> div_out_gga(X, Y, Z)

The argument filtering Pi contains the following mapping:
div_in_gga(x1, x2, x3)  =  div_in_gga(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

quot_in_ggga(x1, x2, x3, x4)  =  quot_in_ggga(x1, x2, x3)

0  =  0

s(x1)  =  s(x1)

quot_out_ggga(x1, x2, x3, x4)  =  quot_out_ggga(x4)

U2_ggga(x1, x2, x3, x4, x5)  =  U2_ggga(x5)

U3_ggga(x1, x2, x3, x4)  =  U3_ggga(x4)

div_out_gga(x1, x2, x3)  =  div_out_gga(x3)

DIV_IN_GGA(x1, x2, x3)  =  DIV_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4)  =  U1_GGA(x4)

QUOT_IN_GGGA(x1, x2, x3, x4)  =  QUOT_IN_GGGA(x1, x2, x3)

U2_GGGA(x1, x2, x3, x4, x5)  =  U2_GGGA(x5)

U3_GGGA(x1, x2, x3, x4)  =  U3_GGGA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DIV_IN_GGA(X, Y, Z) -> U1_GGA(X, Y, Z, quot_in_ggga(X, Y, Y, Z))
   DIV_IN_GGA(X, Y, Z) -> QUOT_IN_GGGA(X, Y, Y, Z)
   QUOT_IN_GGGA(s(X), s(Y), Z, U) -> U2_GGGA(X, Y, Z, U, quot_in_ggga(X, Y, Z, U))
   QUOT_IN_GGGA(s(X), s(Y), Z, U) -> QUOT_IN_GGGA(X, Y, Z, U)
   QUOT_IN_GGGA(X, 0, s(Z), s(U)) -> U3_GGGA(X, Z, U, quot_in_ggga(X, s(Z), s(Z), U))
   QUOT_IN_GGGA(X, 0, s(Z), s(U)) -> QUOT_IN_GGGA(X, s(Z), s(Z), U)

The TRS R consists of the following rules:

   div_in_gga(X, Y, Z) -> U1_gga(X, Y, Z, quot_in_ggga(X, Y, Y, Z))
   quot_in_ggga(0, s(Y), s(Z), 0) -> quot_out_ggga(0, s(Y), s(Z), 0)
   quot_in_ggga(s(X), s(Y), Z, U) -> U2_ggga(X, Y, Z, U, quot_in_ggga(X, Y, Z, U))
   quot_in_ggga(X, 0, s(Z), s(U)) -> U3_ggga(X, Z, U, quot_in_ggga(X, s(Z), s(Z), U))
   U3_ggga(X, Z, U, quot_out_ggga(X, s(Z), s(Z), U)) -> quot_out_ggga(X, 0, s(Z), s(U))
   U2_ggga(X, Y, Z, U, quot_out_ggga(X, Y, Z, U)) -> quot_out_ggga(s(X), s(Y), Z, U)
   U1_gga(X, Y, Z, quot_out_ggga(X, Y, Y, Z)) -> div_out_gga(X, Y, Z)

The argument filtering Pi contains the following mapping:
div_in_gga(x1, x2, x3)  =  div_in_gga(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

quot_in_ggga(x1, x2, x3, x4)  =  quot_in_ggga(x1, x2, x3)

0  =  0

s(x1)  =  s(x1)

quot_out_ggga(x1, x2, x3, x4)  =  quot_out_ggga(x4)

U2_ggga(x1, x2, x3, x4, x5)  =  U2_ggga(x5)

U3_ggga(x1, x2, x3, x4)  =  U3_ggga(x4)

div_out_gga(x1, x2, x3)  =  div_out_gga(x3)

DIV_IN_GGA(x1, x2, x3)  =  DIV_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4)  =  U1_GGA(x4)

QUOT_IN_GGGA(x1, x2, x3, x4)  =  QUOT_IN_GGGA(x1, x2, x3)

U2_GGGA(x1, x2, x3, x4, x5)  =  U2_GGGA(x5)

U3_GGGA(x1, x2, x3, x4)  =  U3_GGGA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 4 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   QUOT_IN_GGGA(X, 0, s(Z), s(U)) -> QUOT_IN_GGGA(X, s(Z), s(Z), U)
   QUOT_IN_GGGA(s(X), s(Y), Z, U) -> QUOT_IN_GGGA(X, Y, Z, U)

The TRS R consists of the following rules:

   div_in_gga(X, Y, Z) -> U1_gga(X, Y, Z, quot_in_ggga(X, Y, Y, Z))
   quot_in_ggga(0, s(Y), s(Z), 0) -> quot_out_ggga(0, s(Y), s(Z), 0)
   quot_in_ggga(s(X), s(Y), Z, U) -> U2_ggga(X, Y, Z, U, quot_in_ggga(X, Y, Z, U))
   quot_in_ggga(X, 0, s(Z), s(U)) -> U3_ggga(X, Z, U, quot_in_ggga(X, s(Z), s(Z), U))
   U3_ggga(X, Z, U, quot_out_ggga(X, s(Z), s(Z), U)) -> quot_out_ggga(X, 0, s(Z), s(U))
   U2_ggga(X, Y, Z, U, quot_out_ggga(X, Y, Z, U)) -> quot_out_ggga(s(X), s(Y), Z, U)
   U1_gga(X, Y, Z, quot_out_ggga(X, Y, Y, Z)) -> div_out_gga(X, Y, Z)

The argument filtering Pi contains the following mapping:
div_in_gga(x1, x2, x3)  =  div_in_gga(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x4)

quot_in_ggga(x1, x2, x3, x4)  =  quot_in_ggga(x1, x2, x3)

0  =  0

s(x1)  =  s(x1)

quot_out_ggga(x1, x2, x3, x4)  =  quot_out_ggga(x4)

U2_ggga(x1, x2, x3, x4, x5)  =  U2_ggga(x5)

U3_ggga(x1, x2, x3, x4)  =  U3_ggga(x4)

div_out_gga(x1, x2, x3)  =  div_out_gga(x3)

QUOT_IN_GGGA(x1, x2, x3, x4)  =  QUOT_IN_GGGA(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   QUOT_IN_GGGA(X, 0, s(Z), s(U)) -> QUOT_IN_GGGA(X, s(Z), s(Z), U)
   QUOT_IN_GGGA(s(X), s(Y), Z, U) -> QUOT_IN_GGGA(X, Y, Z, U)

R is empty.
The argument filtering Pi contains the following mapping:
0  =  0

s(x1)  =  s(x1)

QUOT_IN_GGGA(x1, x2, x3, x4)  =  QUOT_IN_GGGA(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   QUOT_IN_GGGA(X, 0, s(Z)) -> QUOT_IN_GGGA(X, s(Z), s(Z))
   QUOT_IN_GGGA(s(X), s(Y), Z) -> QUOT_IN_GGGA(X, Y, Z)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*QUOT_IN_GGGA(s(X), s(Y), Z) -> QUOT_IN_GGGA(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


*QUOT_IN_GGGA(X, 0, s(Z)) -> QUOT_IN_GGGA(X, s(Z), s(Z))
The graph contains the following edges 1 >= 1, 3 >= 2, 3 >= 3


----------------------------------------

(12)
YES
