MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/hLZy4.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

reverse(a,g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) AND
        (7) PiDP
            (8) UsableRulesProof [EQUIVALENT, 0 ms]
            (9) PiDP
            (10) PiDPToQDPProof [SOUND, 0 ms]
            (11) QDP
            (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (13) YES
        (14) PiDP
            (15) UsableRulesProof [EQUIVALENT, 0 ms]
            (16) PiDP
            (17) PiDPToQDPProof [SOUND, 0 ms]
            (18) QDP
            (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (20) YES
        (21) PiDP
            (22) UsableRulesProof [EQUIVALENT, 0 ms]
            (23) PiDP
            (24) PiDPToQDPProof [SOUND, 0 ms]
            (25) QDP
(26) PrologToPiTRSProof [SOUND, 0 ms]
(27) PiTRS
    (28) DependencyPairsProof [EQUIVALENT, 0 ms]
    (29) PiDP
    (30) DependencyGraphProof [EQUIVALENT, 0 ms]
    (31) AND
        (32) PiDP
            (33) UsableRulesProof [EQUIVALENT, 0 ms]
            (34) PiDP
            (35) PiDPToQDPProof [SOUND, 0 ms]
            (36) QDP
            (37) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (38) YES
        (39) PiDP
            (40) UsableRulesProof [EQUIVALENT, 0 ms]
            (41) PiDP
            (42) PiDPToQDPProof [SOUND, 0 ms]
            (43) QDP
            (44) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (45) YES
        (46) PiDP
            (47) UsableRulesProof [EQUIVALENT, 0 ms]
            (48) PiDP
            (49) PiDPToQDPProof [SOUND, 0 ms]
            (50) QDP
(51) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(52) TRIPLES
    (53) TriplesToPiDPProof [SOUND, 0 ms]
    (54) PiDP
    (55) DependencyGraphProof [EQUIVALENT, 0 ms]
    (56) AND
        (57) PiDP
            (58) UsableRulesProof [EQUIVALENT, 0 ms]
            (59) PiDP
            (60) PiDPToQDPProof [SOUND, 0 ms]
            (61) QDP
            (62) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (63) YES
        (64) PiDP
            (65) UsableRulesProof [EQUIVALENT, 0 ms]
            (66) PiDP
            (67) PiDPToQDPProof [SOUND, 0 ms]
            (68) QDP
            (69) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (70) YES
        (71) PiDP
            (72) UsableRulesProof [EQUIVALENT, 0 ms]
            (73) PiDP
            (74) PiDPToQDPProof [SOUND, 0 ms]
            (75) QDP
(76) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(77) AND
    (78) IRSwT
        (79) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (80) TRUE
    (81) IRSwT
        (82) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (83) TRUE
    (84) IRSwT
        (85) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (86) IRSwT
        (87) IntTRSCompressionProof [EQUIVALENT, 18 ms]
        (88) IRSwT
        (89) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (90) IRSwT
        (91) IRSwTTerminationDigraphProof [EQUIVALENT, 3 ms]
        (92) IRSwT
        (93) FilterProof [EQUIVALENT, 0 ms]
        (94) IntTRS
        (95) IntTRSNonPeriodicNontermProof [COMPLETE, 4 ms]
        (96) NO
(97) PrologToTRSTransformerProof [SOUND, 0 ms]
(98) QTRS
    (99) QTRSRRRProof [EQUIVALENT, 56 ms]
    (100) QTRS
    (101) QTRSRRRProof [EQUIVALENT, 0 ms]
    (102) QTRS
    (103) QTRSRRRProof [EQUIVALENT, 0 ms]
    (104) QTRS
    (105) QTRSRRRProof [EQUIVALENT, 2 ms]
    (106) QTRS


----------------------------------------

(0)
Obligation:
Clauses:

app(.(X, Xs), Ys, .(X, Zs)) :- app(Xs, Ys, Zs).
app([], Ys, Ys).
reverse(.(X, Xs), Ys) :- ','(reverse(Xs, Zs), app(Zs, .(X, []), Ys)).
reverse([], []).


Query: reverse(a,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

reverse_in_2: (f,b) (f,f)

app_in_3: (b,b,f) (b,b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   reverse_in_ag(.(X, Xs), Ys) -> U2_ag(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa(.(X, Xs), Ys) -> U2_aa(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa([], []) -> reverse_out_aa([], [])
   U2_aa(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_aa(X, Xs, Ys, app_in_gga(Zs, .(X, []), Ys))
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U1_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   app_in_gga([], Ys, Ys) -> app_out_gga([], Ys, Ys)
   U1_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_aa(X, Xs, Ys, app_out_gga(Zs, .(X, []), Ys)) -> reverse_out_aa(.(X, Xs), Ys)
   U2_ag(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_ag(X, Xs, Ys, app_in_ggg(Zs, .(X, []), Ys))
   app_in_ggg(.(X, Xs), Ys, .(X, Zs)) -> U1_ggg(X, Xs, Ys, Zs, app_in_ggg(Xs, Ys, Zs))
   app_in_ggg([], Ys, Ys) -> app_out_ggg([], Ys, Ys)
   U1_ggg(X, Xs, Ys, Zs, app_out_ggg(Xs, Ys, Zs)) -> app_out_ggg(.(X, Xs), Ys, .(X, Zs))
   U3_ag(X, Xs, Ys, app_out_ggg(Zs, .(X, []), Ys)) -> reverse_out_ag(.(X, Xs), Ys)
   reverse_in_ag([], []) -> reverse_out_ag([], [])

The argument filtering Pi contains the following mapping:
reverse_in_ag(x1, x2)  =  reverse_in_ag(x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x3, x4)

reverse_in_aa(x1, x2)  =  reverse_in_aa

U2_aa(x1, x2, x3, x4)  =  U2_aa(x4)

reverse_out_aa(x1, x2)  =  reverse_out_aa(x1, x2)

U3_aa(x1, x2, x3, x4)  =  U3_aa(x2, x4)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

.(x1, x2)  =  .(x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x5)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x3)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x4)

app_in_ggg(x1, x2, x3)  =  app_in_ggg(x1, x2, x3)

U1_ggg(x1, x2, x3, x4, x5)  =  U1_ggg(x5)

app_out_ggg(x1, x2, x3)  =  app_out_ggg

reverse_out_ag(x1, x2)  =  reverse_out_ag(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   reverse_in_ag(.(X, Xs), Ys) -> U2_ag(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa(.(X, Xs), Ys) -> U2_aa(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa([], []) -> reverse_out_aa([], [])
   U2_aa(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_aa(X, Xs, Ys, app_in_gga(Zs, .(X, []), Ys))
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U1_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   app_in_gga([], Ys, Ys) -> app_out_gga([], Ys, Ys)
   U1_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_aa(X, Xs, Ys, app_out_gga(Zs, .(X, []), Ys)) -> reverse_out_aa(.(X, Xs), Ys)
   U2_ag(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_ag(X, Xs, Ys, app_in_ggg(Zs, .(X, []), Ys))
   app_in_ggg(.(X, Xs), Ys, .(X, Zs)) -> U1_ggg(X, Xs, Ys, Zs, app_in_ggg(Xs, Ys, Zs))
   app_in_ggg([], Ys, Ys) -> app_out_ggg([], Ys, Ys)
   U1_ggg(X, Xs, Ys, Zs, app_out_ggg(Xs, Ys, Zs)) -> app_out_ggg(.(X, Xs), Ys, .(X, Zs))
   U3_ag(X, Xs, Ys, app_out_ggg(Zs, .(X, []), Ys)) -> reverse_out_ag(.(X, Xs), Ys)
   reverse_in_ag([], []) -> reverse_out_ag([], [])

The argument filtering Pi contains the following mapping:
reverse_in_ag(x1, x2)  =  reverse_in_ag(x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x3, x4)

reverse_in_aa(x1, x2)  =  reverse_in_aa

U2_aa(x1, x2, x3, x4)  =  U2_aa(x4)

reverse_out_aa(x1, x2)  =  reverse_out_aa(x1, x2)

U3_aa(x1, x2, x3, x4)  =  U3_aa(x2, x4)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

.(x1, x2)  =  .(x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x5)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x3)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x4)

app_in_ggg(x1, x2, x3)  =  app_in_ggg(x1, x2, x3)

U1_ggg(x1, x2, x3, x4, x5)  =  U1_ggg(x5)

app_out_ggg(x1, x2, x3)  =  app_out_ggg

reverse_out_ag(x1, x2)  =  reverse_out_ag(x1)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   REVERSE_IN_AG(.(X, Xs), Ys) -> U2_AG(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   REVERSE_IN_AG(.(X, Xs), Ys) -> REVERSE_IN_AA(Xs, Zs)
   REVERSE_IN_AA(.(X, Xs), Ys) -> U2_AA(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   REVERSE_IN_AA(.(X, Xs), Ys) -> REVERSE_IN_AA(Xs, Zs)
   U2_AA(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_AA(X, Xs, Ys, app_in_gga(Zs, .(X, []), Ys))
   U2_AA(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> APP_IN_GGA(Zs, .(X, []), Ys)
   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> U1_GGA(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGA(Xs, Ys, Zs)
   U2_AG(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_AG(X, Xs, Ys, app_in_ggg(Zs, .(X, []), Ys))
   U2_AG(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> APP_IN_GGG(Zs, .(X, []), Ys)
   APP_IN_GGG(.(X, Xs), Ys, .(X, Zs)) -> U1_GGG(X, Xs, Ys, Zs, app_in_ggg(Xs, Ys, Zs))
   APP_IN_GGG(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGG(Xs, Ys, Zs)

The TRS R consists of the following rules:

   reverse_in_ag(.(X, Xs), Ys) -> U2_ag(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa(.(X, Xs), Ys) -> U2_aa(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa([], []) -> reverse_out_aa([], [])
   U2_aa(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_aa(X, Xs, Ys, app_in_gga(Zs, .(X, []), Ys))
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U1_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   app_in_gga([], Ys, Ys) -> app_out_gga([], Ys, Ys)
   U1_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_aa(X, Xs, Ys, app_out_gga(Zs, .(X, []), Ys)) -> reverse_out_aa(.(X, Xs), Ys)
   U2_ag(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_ag(X, Xs, Ys, app_in_ggg(Zs, .(X, []), Ys))
   app_in_ggg(.(X, Xs), Ys, .(X, Zs)) -> U1_ggg(X, Xs, Ys, Zs, app_in_ggg(Xs, Ys, Zs))
   app_in_ggg([], Ys, Ys) -> app_out_ggg([], Ys, Ys)
   U1_ggg(X, Xs, Ys, Zs, app_out_ggg(Xs, Ys, Zs)) -> app_out_ggg(.(X, Xs), Ys, .(X, Zs))
   U3_ag(X, Xs, Ys, app_out_ggg(Zs, .(X, []), Ys)) -> reverse_out_ag(.(X, Xs), Ys)
   reverse_in_ag([], []) -> reverse_out_ag([], [])

The argument filtering Pi contains the following mapping:
reverse_in_ag(x1, x2)  =  reverse_in_ag(x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x3, x4)

reverse_in_aa(x1, x2)  =  reverse_in_aa

U2_aa(x1, x2, x3, x4)  =  U2_aa(x4)

reverse_out_aa(x1, x2)  =  reverse_out_aa(x1, x2)

U3_aa(x1, x2, x3, x4)  =  U3_aa(x2, x4)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

.(x1, x2)  =  .(x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x5)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x3)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x4)

app_in_ggg(x1, x2, x3)  =  app_in_ggg(x1, x2, x3)

U1_ggg(x1, x2, x3, x4, x5)  =  U1_ggg(x5)

app_out_ggg(x1, x2, x3)  =  app_out_ggg

reverse_out_ag(x1, x2)  =  reverse_out_ag(x1)

REVERSE_IN_AG(x1, x2)  =  REVERSE_IN_AG(x2)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x3, x4)

REVERSE_IN_AA(x1, x2)  =  REVERSE_IN_AA

U2_AA(x1, x2, x3, x4)  =  U2_AA(x4)

U3_AA(x1, x2, x3, x4)  =  U3_AA(x2, x4)

APP_IN_GGA(x1, x2, x3)  =  APP_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5)  =  U1_GGA(x5)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x2, x4)

APP_IN_GGG(x1, x2, x3)  =  APP_IN_GGG(x1, x2, x3)

U1_GGG(x1, x2, x3, x4, x5)  =  U1_GGG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REVERSE_IN_AG(.(X, Xs), Ys) -> U2_AG(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   REVERSE_IN_AG(.(X, Xs), Ys) -> REVERSE_IN_AA(Xs, Zs)
   REVERSE_IN_AA(.(X, Xs), Ys) -> U2_AA(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   REVERSE_IN_AA(.(X, Xs), Ys) -> REVERSE_IN_AA(Xs, Zs)
   U2_AA(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_AA(X, Xs, Ys, app_in_gga(Zs, .(X, []), Ys))
   U2_AA(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> APP_IN_GGA(Zs, .(X, []), Ys)
   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> U1_GGA(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGA(Xs, Ys, Zs)
   U2_AG(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_AG(X, Xs, Ys, app_in_ggg(Zs, .(X, []), Ys))
   U2_AG(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> APP_IN_GGG(Zs, .(X, []), Ys)
   APP_IN_GGG(.(X, Xs), Ys, .(X, Zs)) -> U1_GGG(X, Xs, Ys, Zs, app_in_ggg(Xs, Ys, Zs))
   APP_IN_GGG(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGG(Xs, Ys, Zs)

The TRS R consists of the following rules:

   reverse_in_ag(.(X, Xs), Ys) -> U2_ag(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa(.(X, Xs), Ys) -> U2_aa(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa([], []) -> reverse_out_aa([], [])
   U2_aa(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_aa(X, Xs, Ys, app_in_gga(Zs, .(X, []), Ys))
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U1_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   app_in_gga([], Ys, Ys) -> app_out_gga([], Ys, Ys)
   U1_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_aa(X, Xs, Ys, app_out_gga(Zs, .(X, []), Ys)) -> reverse_out_aa(.(X, Xs), Ys)
   U2_ag(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_ag(X, Xs, Ys, app_in_ggg(Zs, .(X, []), Ys))
   app_in_ggg(.(X, Xs), Ys, .(X, Zs)) -> U1_ggg(X, Xs, Ys, Zs, app_in_ggg(Xs, Ys, Zs))
   app_in_ggg([], Ys, Ys) -> app_out_ggg([], Ys, Ys)
   U1_ggg(X, Xs, Ys, Zs, app_out_ggg(Xs, Ys, Zs)) -> app_out_ggg(.(X, Xs), Ys, .(X, Zs))
   U3_ag(X, Xs, Ys, app_out_ggg(Zs, .(X, []), Ys)) -> reverse_out_ag(.(X, Xs), Ys)
   reverse_in_ag([], []) -> reverse_out_ag([], [])

The argument filtering Pi contains the following mapping:
reverse_in_ag(x1, x2)  =  reverse_in_ag(x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x3, x4)

reverse_in_aa(x1, x2)  =  reverse_in_aa

U2_aa(x1, x2, x3, x4)  =  U2_aa(x4)

reverse_out_aa(x1, x2)  =  reverse_out_aa(x1, x2)

U3_aa(x1, x2, x3, x4)  =  U3_aa(x2, x4)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

.(x1, x2)  =  .(x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x5)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x3)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x4)

app_in_ggg(x1, x2, x3)  =  app_in_ggg(x1, x2, x3)

U1_ggg(x1, x2, x3, x4, x5)  =  U1_ggg(x5)

app_out_ggg(x1, x2, x3)  =  app_out_ggg

reverse_out_ag(x1, x2)  =  reverse_out_ag(x1)

REVERSE_IN_AG(x1, x2)  =  REVERSE_IN_AG(x2)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x3, x4)

REVERSE_IN_AA(x1, x2)  =  REVERSE_IN_AA

U2_AA(x1, x2, x3, x4)  =  U2_AA(x4)

U3_AA(x1, x2, x3, x4)  =  U3_AA(x2, x4)

APP_IN_GGA(x1, x2, x3)  =  APP_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5)  =  U1_GGA(x5)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x2, x4)

APP_IN_GGG(x1, x2, x3)  =  APP_IN_GGG(x1, x2, x3)

U1_GGG(x1, x2, x3, x4, x5)  =  U1_GGG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 9 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GGG(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGG(Xs, Ys, Zs)

The TRS R consists of the following rules:

   reverse_in_ag(.(X, Xs), Ys) -> U2_ag(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa(.(X, Xs), Ys) -> U2_aa(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa([], []) -> reverse_out_aa([], [])
   U2_aa(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_aa(X, Xs, Ys, app_in_gga(Zs, .(X, []), Ys))
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U1_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   app_in_gga([], Ys, Ys) -> app_out_gga([], Ys, Ys)
   U1_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_aa(X, Xs, Ys, app_out_gga(Zs, .(X, []), Ys)) -> reverse_out_aa(.(X, Xs), Ys)
   U2_ag(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_ag(X, Xs, Ys, app_in_ggg(Zs, .(X, []), Ys))
   app_in_ggg(.(X, Xs), Ys, .(X, Zs)) -> U1_ggg(X, Xs, Ys, Zs, app_in_ggg(Xs, Ys, Zs))
   app_in_ggg([], Ys, Ys) -> app_out_ggg([], Ys, Ys)
   U1_ggg(X, Xs, Ys, Zs, app_out_ggg(Xs, Ys, Zs)) -> app_out_ggg(.(X, Xs), Ys, .(X, Zs))
   U3_ag(X, Xs, Ys, app_out_ggg(Zs, .(X, []), Ys)) -> reverse_out_ag(.(X, Xs), Ys)
   reverse_in_ag([], []) -> reverse_out_ag([], [])

The argument filtering Pi contains the following mapping:
reverse_in_ag(x1, x2)  =  reverse_in_ag(x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x3, x4)

reverse_in_aa(x1, x2)  =  reverse_in_aa

U2_aa(x1, x2, x3, x4)  =  U2_aa(x4)

reverse_out_aa(x1, x2)  =  reverse_out_aa(x1, x2)

U3_aa(x1, x2, x3, x4)  =  U3_aa(x2, x4)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

.(x1, x2)  =  .(x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x5)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x3)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x4)

app_in_ggg(x1, x2, x3)  =  app_in_ggg(x1, x2, x3)

U1_ggg(x1, x2, x3, x4, x5)  =  U1_ggg(x5)

app_out_ggg(x1, x2, x3)  =  app_out_ggg

reverse_out_ag(x1, x2)  =  reverse_out_ag(x1)

APP_IN_GGG(x1, x2, x3)  =  APP_IN_GGG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GGG(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGG(Xs, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APP_IN_GGG(x1, x2, x3)  =  APP_IN_GGG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP_IN_GGG(.(Xs), Ys, .(Zs)) -> APP_IN_GGG(Xs, Ys, Zs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP_IN_GGG(.(Xs), Ys, .(Zs)) -> APP_IN_GGG(Xs, Ys, Zs)
The graph contains the following edges 1 > 1, 2 >= 2, 3 > 3


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   reverse_in_ag(.(X, Xs), Ys) -> U2_ag(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa(.(X, Xs), Ys) -> U2_aa(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa([], []) -> reverse_out_aa([], [])
   U2_aa(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_aa(X, Xs, Ys, app_in_gga(Zs, .(X, []), Ys))
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U1_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   app_in_gga([], Ys, Ys) -> app_out_gga([], Ys, Ys)
   U1_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_aa(X, Xs, Ys, app_out_gga(Zs, .(X, []), Ys)) -> reverse_out_aa(.(X, Xs), Ys)
   U2_ag(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_ag(X, Xs, Ys, app_in_ggg(Zs, .(X, []), Ys))
   app_in_ggg(.(X, Xs), Ys, .(X, Zs)) -> U1_ggg(X, Xs, Ys, Zs, app_in_ggg(Xs, Ys, Zs))
   app_in_ggg([], Ys, Ys) -> app_out_ggg([], Ys, Ys)
   U1_ggg(X, Xs, Ys, Zs, app_out_ggg(Xs, Ys, Zs)) -> app_out_ggg(.(X, Xs), Ys, .(X, Zs))
   U3_ag(X, Xs, Ys, app_out_ggg(Zs, .(X, []), Ys)) -> reverse_out_ag(.(X, Xs), Ys)
   reverse_in_ag([], []) -> reverse_out_ag([], [])

The argument filtering Pi contains the following mapping:
reverse_in_ag(x1, x2)  =  reverse_in_ag(x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x3, x4)

reverse_in_aa(x1, x2)  =  reverse_in_aa

U2_aa(x1, x2, x3, x4)  =  U2_aa(x4)

reverse_out_aa(x1, x2)  =  reverse_out_aa(x1, x2)

U3_aa(x1, x2, x3, x4)  =  U3_aa(x2, x4)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

.(x1, x2)  =  .(x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x5)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x3)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x4)

app_in_ggg(x1, x2, x3)  =  app_in_ggg(x1, x2, x3)

U1_ggg(x1, x2, x3, x4, x5)  =  U1_ggg(x5)

app_out_ggg(x1, x2, x3)  =  app_out_ggg

reverse_out_ag(x1, x2)  =  reverse_out_ag(x1)

APP_IN_GGA(x1, x2, x3)  =  APP_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGA(Xs, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APP_IN_GGA(x1, x2, x3)  =  APP_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP_IN_GGA(.(Xs), Ys) -> APP_IN_GGA(Xs, Ys)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP_IN_GGA(.(Xs), Ys) -> APP_IN_GGA(Xs, Ys)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REVERSE_IN_AA(.(X, Xs), Ys) -> REVERSE_IN_AA(Xs, Zs)

The TRS R consists of the following rules:

   reverse_in_ag(.(X, Xs), Ys) -> U2_ag(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa(.(X, Xs), Ys) -> U2_aa(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa([], []) -> reverse_out_aa([], [])
   U2_aa(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_aa(X, Xs, Ys, app_in_gga(Zs, .(X, []), Ys))
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U1_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   app_in_gga([], Ys, Ys) -> app_out_gga([], Ys, Ys)
   U1_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_aa(X, Xs, Ys, app_out_gga(Zs, .(X, []), Ys)) -> reverse_out_aa(.(X, Xs), Ys)
   U2_ag(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_ag(X, Xs, Ys, app_in_ggg(Zs, .(X, []), Ys))
   app_in_ggg(.(X, Xs), Ys, .(X, Zs)) -> U1_ggg(X, Xs, Ys, Zs, app_in_ggg(Xs, Ys, Zs))
   app_in_ggg([], Ys, Ys) -> app_out_ggg([], Ys, Ys)
   U1_ggg(X, Xs, Ys, Zs, app_out_ggg(Xs, Ys, Zs)) -> app_out_ggg(.(X, Xs), Ys, .(X, Zs))
   U3_ag(X, Xs, Ys, app_out_ggg(Zs, .(X, []), Ys)) -> reverse_out_ag(.(X, Xs), Ys)
   reverse_in_ag([], []) -> reverse_out_ag([], [])

The argument filtering Pi contains the following mapping:
reverse_in_ag(x1, x2)  =  reverse_in_ag(x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x3, x4)

reverse_in_aa(x1, x2)  =  reverse_in_aa

U2_aa(x1, x2, x3, x4)  =  U2_aa(x4)

reverse_out_aa(x1, x2)  =  reverse_out_aa(x1, x2)

U3_aa(x1, x2, x3, x4)  =  U3_aa(x2, x4)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

.(x1, x2)  =  .(x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x5)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x3)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x4)

app_in_ggg(x1, x2, x3)  =  app_in_ggg(x1, x2, x3)

U1_ggg(x1, x2, x3, x4, x5)  =  U1_ggg(x5)

app_out_ggg(x1, x2, x3)  =  app_out_ggg

reverse_out_ag(x1, x2)  =  reverse_out_ag(x1)

REVERSE_IN_AA(x1, x2)  =  REVERSE_IN_AA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(23)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REVERSE_IN_AA(.(X, Xs), Ys) -> REVERSE_IN_AA(Xs, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

REVERSE_IN_AA(x1, x2)  =  REVERSE_IN_AA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(24) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVERSE_IN_AA -> REVERSE_IN_AA

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

reverse_in_2: (f,b) (f,f)

app_in_3: (b,b,f) (b,b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   reverse_in_ag(.(X, Xs), Ys) -> U2_ag(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa(.(X, Xs), Ys) -> U2_aa(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa([], []) -> reverse_out_aa([], [])
   U2_aa(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_aa(X, Xs, Ys, app_in_gga(Zs, .(X, []), Ys))
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U1_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   app_in_gga([], Ys, Ys) -> app_out_gga([], Ys, Ys)
   U1_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_aa(X, Xs, Ys, app_out_gga(Zs, .(X, []), Ys)) -> reverse_out_aa(.(X, Xs), Ys)
   U2_ag(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_ag(X, Xs, Ys, app_in_ggg(Zs, .(X, []), Ys))
   app_in_ggg(.(X, Xs), Ys, .(X, Zs)) -> U1_ggg(X, Xs, Ys, Zs, app_in_ggg(Xs, Ys, Zs))
   app_in_ggg([], Ys, Ys) -> app_out_ggg([], Ys, Ys)
   U1_ggg(X, Xs, Ys, Zs, app_out_ggg(Xs, Ys, Zs)) -> app_out_ggg(.(X, Xs), Ys, .(X, Zs))
   U3_ag(X, Xs, Ys, app_out_ggg(Zs, .(X, []), Ys)) -> reverse_out_ag(.(X, Xs), Ys)
   reverse_in_ag([], []) -> reverse_out_ag([], [])

The argument filtering Pi contains the following mapping:
reverse_in_ag(x1, x2)  =  reverse_in_ag(x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x3, x4)

reverse_in_aa(x1, x2)  =  reverse_in_aa

U2_aa(x1, x2, x3, x4)  =  U2_aa(x4)

reverse_out_aa(x1, x2)  =  reverse_out_aa(x1, x2)

U3_aa(x1, x2, x3, x4)  =  U3_aa(x2, x4)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

.(x1, x2)  =  .(x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x2, x3, x5)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x1, x2, x3)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x3, x4)

app_in_ggg(x1, x2, x3)  =  app_in_ggg(x1, x2, x3)

U1_ggg(x1, x2, x3, x4, x5)  =  U1_ggg(x2, x3, x4, x5)

app_out_ggg(x1, x2, x3)  =  app_out_ggg(x1, x2, x3)

reverse_out_ag(x1, x2)  =  reverse_out_ag(x1, x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(27)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   reverse_in_ag(.(X, Xs), Ys) -> U2_ag(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa(.(X, Xs), Ys) -> U2_aa(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa([], []) -> reverse_out_aa([], [])
   U2_aa(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_aa(X, Xs, Ys, app_in_gga(Zs, .(X, []), Ys))
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U1_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   app_in_gga([], Ys, Ys) -> app_out_gga([], Ys, Ys)
   U1_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_aa(X, Xs, Ys, app_out_gga(Zs, .(X, []), Ys)) -> reverse_out_aa(.(X, Xs), Ys)
   U2_ag(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_ag(X, Xs, Ys, app_in_ggg(Zs, .(X, []), Ys))
   app_in_ggg(.(X, Xs), Ys, .(X, Zs)) -> U1_ggg(X, Xs, Ys, Zs, app_in_ggg(Xs, Ys, Zs))
   app_in_ggg([], Ys, Ys) -> app_out_ggg([], Ys, Ys)
   U1_ggg(X, Xs, Ys, Zs, app_out_ggg(Xs, Ys, Zs)) -> app_out_ggg(.(X, Xs), Ys, .(X, Zs))
   U3_ag(X, Xs, Ys, app_out_ggg(Zs, .(X, []), Ys)) -> reverse_out_ag(.(X, Xs), Ys)
   reverse_in_ag([], []) -> reverse_out_ag([], [])

The argument filtering Pi contains the following mapping:
reverse_in_ag(x1, x2)  =  reverse_in_ag(x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x3, x4)

reverse_in_aa(x1, x2)  =  reverse_in_aa

U2_aa(x1, x2, x3, x4)  =  U2_aa(x4)

reverse_out_aa(x1, x2)  =  reverse_out_aa(x1, x2)

U3_aa(x1, x2, x3, x4)  =  U3_aa(x2, x4)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

.(x1, x2)  =  .(x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x2, x3, x5)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x1, x2, x3)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x3, x4)

app_in_ggg(x1, x2, x3)  =  app_in_ggg(x1, x2, x3)

U1_ggg(x1, x2, x3, x4, x5)  =  U1_ggg(x2, x3, x4, x5)

app_out_ggg(x1, x2, x3)  =  app_out_ggg(x1, x2, x3)

reverse_out_ag(x1, x2)  =  reverse_out_ag(x1, x2)



----------------------------------------

(28) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   REVERSE_IN_AG(.(X, Xs), Ys) -> U2_AG(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   REVERSE_IN_AG(.(X, Xs), Ys) -> REVERSE_IN_AA(Xs, Zs)
   REVERSE_IN_AA(.(X, Xs), Ys) -> U2_AA(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   REVERSE_IN_AA(.(X, Xs), Ys) -> REVERSE_IN_AA(Xs, Zs)
   U2_AA(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_AA(X, Xs, Ys, app_in_gga(Zs, .(X, []), Ys))
   U2_AA(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> APP_IN_GGA(Zs, .(X, []), Ys)
   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> U1_GGA(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGA(Xs, Ys, Zs)
   U2_AG(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_AG(X, Xs, Ys, app_in_ggg(Zs, .(X, []), Ys))
   U2_AG(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> APP_IN_GGG(Zs, .(X, []), Ys)
   APP_IN_GGG(.(X, Xs), Ys, .(X, Zs)) -> U1_GGG(X, Xs, Ys, Zs, app_in_ggg(Xs, Ys, Zs))
   APP_IN_GGG(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGG(Xs, Ys, Zs)

The TRS R consists of the following rules:

   reverse_in_ag(.(X, Xs), Ys) -> U2_ag(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa(.(X, Xs), Ys) -> U2_aa(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa([], []) -> reverse_out_aa([], [])
   U2_aa(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_aa(X, Xs, Ys, app_in_gga(Zs, .(X, []), Ys))
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U1_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   app_in_gga([], Ys, Ys) -> app_out_gga([], Ys, Ys)
   U1_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_aa(X, Xs, Ys, app_out_gga(Zs, .(X, []), Ys)) -> reverse_out_aa(.(X, Xs), Ys)
   U2_ag(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_ag(X, Xs, Ys, app_in_ggg(Zs, .(X, []), Ys))
   app_in_ggg(.(X, Xs), Ys, .(X, Zs)) -> U1_ggg(X, Xs, Ys, Zs, app_in_ggg(Xs, Ys, Zs))
   app_in_ggg([], Ys, Ys) -> app_out_ggg([], Ys, Ys)
   U1_ggg(X, Xs, Ys, Zs, app_out_ggg(Xs, Ys, Zs)) -> app_out_ggg(.(X, Xs), Ys, .(X, Zs))
   U3_ag(X, Xs, Ys, app_out_ggg(Zs, .(X, []), Ys)) -> reverse_out_ag(.(X, Xs), Ys)
   reverse_in_ag([], []) -> reverse_out_ag([], [])

The argument filtering Pi contains the following mapping:
reverse_in_ag(x1, x2)  =  reverse_in_ag(x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x3, x4)

reverse_in_aa(x1, x2)  =  reverse_in_aa

U2_aa(x1, x2, x3, x4)  =  U2_aa(x4)

reverse_out_aa(x1, x2)  =  reverse_out_aa(x1, x2)

U3_aa(x1, x2, x3, x4)  =  U3_aa(x2, x4)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

.(x1, x2)  =  .(x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x2, x3, x5)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x1, x2, x3)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x3, x4)

app_in_ggg(x1, x2, x3)  =  app_in_ggg(x1, x2, x3)

U1_ggg(x1, x2, x3, x4, x5)  =  U1_ggg(x2, x3, x4, x5)

app_out_ggg(x1, x2, x3)  =  app_out_ggg(x1, x2, x3)

reverse_out_ag(x1, x2)  =  reverse_out_ag(x1, x2)

REVERSE_IN_AG(x1, x2)  =  REVERSE_IN_AG(x2)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x3, x4)

REVERSE_IN_AA(x1, x2)  =  REVERSE_IN_AA

U2_AA(x1, x2, x3, x4)  =  U2_AA(x4)

U3_AA(x1, x2, x3, x4)  =  U3_AA(x2, x4)

APP_IN_GGA(x1, x2, x3)  =  APP_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5)  =  U1_GGA(x2, x3, x5)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x2, x3, x4)

APP_IN_GGG(x1, x2, x3)  =  APP_IN_GGG(x1, x2, x3)

U1_GGG(x1, x2, x3, x4, x5)  =  U1_GGG(x2, x3, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(29)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REVERSE_IN_AG(.(X, Xs), Ys) -> U2_AG(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   REVERSE_IN_AG(.(X, Xs), Ys) -> REVERSE_IN_AA(Xs, Zs)
   REVERSE_IN_AA(.(X, Xs), Ys) -> U2_AA(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   REVERSE_IN_AA(.(X, Xs), Ys) -> REVERSE_IN_AA(Xs, Zs)
   U2_AA(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_AA(X, Xs, Ys, app_in_gga(Zs, .(X, []), Ys))
   U2_AA(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> APP_IN_GGA(Zs, .(X, []), Ys)
   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> U1_GGA(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGA(Xs, Ys, Zs)
   U2_AG(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_AG(X, Xs, Ys, app_in_ggg(Zs, .(X, []), Ys))
   U2_AG(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> APP_IN_GGG(Zs, .(X, []), Ys)
   APP_IN_GGG(.(X, Xs), Ys, .(X, Zs)) -> U1_GGG(X, Xs, Ys, Zs, app_in_ggg(Xs, Ys, Zs))
   APP_IN_GGG(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGG(Xs, Ys, Zs)

The TRS R consists of the following rules:

   reverse_in_ag(.(X, Xs), Ys) -> U2_ag(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa(.(X, Xs), Ys) -> U2_aa(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa([], []) -> reverse_out_aa([], [])
   U2_aa(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_aa(X, Xs, Ys, app_in_gga(Zs, .(X, []), Ys))
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U1_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   app_in_gga([], Ys, Ys) -> app_out_gga([], Ys, Ys)
   U1_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_aa(X, Xs, Ys, app_out_gga(Zs, .(X, []), Ys)) -> reverse_out_aa(.(X, Xs), Ys)
   U2_ag(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_ag(X, Xs, Ys, app_in_ggg(Zs, .(X, []), Ys))
   app_in_ggg(.(X, Xs), Ys, .(X, Zs)) -> U1_ggg(X, Xs, Ys, Zs, app_in_ggg(Xs, Ys, Zs))
   app_in_ggg([], Ys, Ys) -> app_out_ggg([], Ys, Ys)
   U1_ggg(X, Xs, Ys, Zs, app_out_ggg(Xs, Ys, Zs)) -> app_out_ggg(.(X, Xs), Ys, .(X, Zs))
   U3_ag(X, Xs, Ys, app_out_ggg(Zs, .(X, []), Ys)) -> reverse_out_ag(.(X, Xs), Ys)
   reverse_in_ag([], []) -> reverse_out_ag([], [])

The argument filtering Pi contains the following mapping:
reverse_in_ag(x1, x2)  =  reverse_in_ag(x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x3, x4)

reverse_in_aa(x1, x2)  =  reverse_in_aa

U2_aa(x1, x2, x3, x4)  =  U2_aa(x4)

reverse_out_aa(x1, x2)  =  reverse_out_aa(x1, x2)

U3_aa(x1, x2, x3, x4)  =  U3_aa(x2, x4)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

.(x1, x2)  =  .(x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x2, x3, x5)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x1, x2, x3)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x3, x4)

app_in_ggg(x1, x2, x3)  =  app_in_ggg(x1, x2, x3)

U1_ggg(x1, x2, x3, x4, x5)  =  U1_ggg(x2, x3, x4, x5)

app_out_ggg(x1, x2, x3)  =  app_out_ggg(x1, x2, x3)

reverse_out_ag(x1, x2)  =  reverse_out_ag(x1, x2)

REVERSE_IN_AG(x1, x2)  =  REVERSE_IN_AG(x2)

U2_AG(x1, x2, x3, x4)  =  U2_AG(x3, x4)

REVERSE_IN_AA(x1, x2)  =  REVERSE_IN_AA

U2_AA(x1, x2, x3, x4)  =  U2_AA(x4)

U3_AA(x1, x2, x3, x4)  =  U3_AA(x2, x4)

APP_IN_GGA(x1, x2, x3)  =  APP_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5)  =  U1_GGA(x2, x3, x5)

U3_AG(x1, x2, x3, x4)  =  U3_AG(x2, x3, x4)

APP_IN_GGG(x1, x2, x3)  =  APP_IN_GGG(x1, x2, x3)

U1_GGG(x1, x2, x3, x4, x5)  =  U1_GGG(x2, x3, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(30) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 9 less nodes.
----------------------------------------

(31)
Complex Obligation (AND)

----------------------------------------

(32)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GGG(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGG(Xs, Ys, Zs)

The TRS R consists of the following rules:

   reverse_in_ag(.(X, Xs), Ys) -> U2_ag(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa(.(X, Xs), Ys) -> U2_aa(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa([], []) -> reverse_out_aa([], [])
   U2_aa(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_aa(X, Xs, Ys, app_in_gga(Zs, .(X, []), Ys))
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U1_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   app_in_gga([], Ys, Ys) -> app_out_gga([], Ys, Ys)
   U1_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_aa(X, Xs, Ys, app_out_gga(Zs, .(X, []), Ys)) -> reverse_out_aa(.(X, Xs), Ys)
   U2_ag(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_ag(X, Xs, Ys, app_in_ggg(Zs, .(X, []), Ys))
   app_in_ggg(.(X, Xs), Ys, .(X, Zs)) -> U1_ggg(X, Xs, Ys, Zs, app_in_ggg(Xs, Ys, Zs))
   app_in_ggg([], Ys, Ys) -> app_out_ggg([], Ys, Ys)
   U1_ggg(X, Xs, Ys, Zs, app_out_ggg(Xs, Ys, Zs)) -> app_out_ggg(.(X, Xs), Ys, .(X, Zs))
   U3_ag(X, Xs, Ys, app_out_ggg(Zs, .(X, []), Ys)) -> reverse_out_ag(.(X, Xs), Ys)
   reverse_in_ag([], []) -> reverse_out_ag([], [])

The argument filtering Pi contains the following mapping:
reverse_in_ag(x1, x2)  =  reverse_in_ag(x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x3, x4)

reverse_in_aa(x1, x2)  =  reverse_in_aa

U2_aa(x1, x2, x3, x4)  =  U2_aa(x4)

reverse_out_aa(x1, x2)  =  reverse_out_aa(x1, x2)

U3_aa(x1, x2, x3, x4)  =  U3_aa(x2, x4)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

.(x1, x2)  =  .(x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x2, x3, x5)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x1, x2, x3)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x3, x4)

app_in_ggg(x1, x2, x3)  =  app_in_ggg(x1, x2, x3)

U1_ggg(x1, x2, x3, x4, x5)  =  U1_ggg(x2, x3, x4, x5)

app_out_ggg(x1, x2, x3)  =  app_out_ggg(x1, x2, x3)

reverse_out_ag(x1, x2)  =  reverse_out_ag(x1, x2)

APP_IN_GGG(x1, x2, x3)  =  APP_IN_GGG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(33) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(34)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GGG(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGG(Xs, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APP_IN_GGG(x1, x2, x3)  =  APP_IN_GGG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(35) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP_IN_GGG(.(Xs), Ys, .(Zs)) -> APP_IN_GGG(Xs, Ys, Zs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(37) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP_IN_GGG(.(Xs), Ys, .(Zs)) -> APP_IN_GGG(Xs, Ys, Zs)
The graph contains the following edges 1 > 1, 2 >= 2, 3 > 3


----------------------------------------

(38)
YES

----------------------------------------

(39)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   reverse_in_ag(.(X, Xs), Ys) -> U2_ag(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa(.(X, Xs), Ys) -> U2_aa(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa([], []) -> reverse_out_aa([], [])
   U2_aa(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_aa(X, Xs, Ys, app_in_gga(Zs, .(X, []), Ys))
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U1_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   app_in_gga([], Ys, Ys) -> app_out_gga([], Ys, Ys)
   U1_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_aa(X, Xs, Ys, app_out_gga(Zs, .(X, []), Ys)) -> reverse_out_aa(.(X, Xs), Ys)
   U2_ag(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_ag(X, Xs, Ys, app_in_ggg(Zs, .(X, []), Ys))
   app_in_ggg(.(X, Xs), Ys, .(X, Zs)) -> U1_ggg(X, Xs, Ys, Zs, app_in_ggg(Xs, Ys, Zs))
   app_in_ggg([], Ys, Ys) -> app_out_ggg([], Ys, Ys)
   U1_ggg(X, Xs, Ys, Zs, app_out_ggg(Xs, Ys, Zs)) -> app_out_ggg(.(X, Xs), Ys, .(X, Zs))
   U3_ag(X, Xs, Ys, app_out_ggg(Zs, .(X, []), Ys)) -> reverse_out_ag(.(X, Xs), Ys)
   reverse_in_ag([], []) -> reverse_out_ag([], [])

The argument filtering Pi contains the following mapping:
reverse_in_ag(x1, x2)  =  reverse_in_ag(x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x3, x4)

reverse_in_aa(x1, x2)  =  reverse_in_aa

U2_aa(x1, x2, x3, x4)  =  U2_aa(x4)

reverse_out_aa(x1, x2)  =  reverse_out_aa(x1, x2)

U3_aa(x1, x2, x3, x4)  =  U3_aa(x2, x4)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

.(x1, x2)  =  .(x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x2, x3, x5)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x1, x2, x3)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x3, x4)

app_in_ggg(x1, x2, x3)  =  app_in_ggg(x1, x2, x3)

U1_ggg(x1, x2, x3, x4, x5)  =  U1_ggg(x2, x3, x4, x5)

app_out_ggg(x1, x2, x3)  =  app_out_ggg(x1, x2, x3)

reverse_out_ag(x1, x2)  =  reverse_out_ag(x1, x2)

APP_IN_GGA(x1, x2, x3)  =  APP_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(40) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(41)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGA(Xs, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APP_IN_GGA(x1, x2, x3)  =  APP_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(42) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(43)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP_IN_GGA(.(Xs), Ys) -> APP_IN_GGA(Xs, Ys)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(44) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP_IN_GGA(.(Xs), Ys) -> APP_IN_GGA(Xs, Ys)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(45)
YES

----------------------------------------

(46)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REVERSE_IN_AA(.(X, Xs), Ys) -> REVERSE_IN_AA(Xs, Zs)

The TRS R consists of the following rules:

   reverse_in_ag(.(X, Xs), Ys) -> U2_ag(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa(.(X, Xs), Ys) -> U2_aa(X, Xs, Ys, reverse_in_aa(Xs, Zs))
   reverse_in_aa([], []) -> reverse_out_aa([], [])
   U2_aa(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_aa(X, Xs, Ys, app_in_gga(Zs, .(X, []), Ys))
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U1_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   app_in_gga([], Ys, Ys) -> app_out_gga([], Ys, Ys)
   U1_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_aa(X, Xs, Ys, app_out_gga(Zs, .(X, []), Ys)) -> reverse_out_aa(.(X, Xs), Ys)
   U2_ag(X, Xs, Ys, reverse_out_aa(Xs, Zs)) -> U3_ag(X, Xs, Ys, app_in_ggg(Zs, .(X, []), Ys))
   app_in_ggg(.(X, Xs), Ys, .(X, Zs)) -> U1_ggg(X, Xs, Ys, Zs, app_in_ggg(Xs, Ys, Zs))
   app_in_ggg([], Ys, Ys) -> app_out_ggg([], Ys, Ys)
   U1_ggg(X, Xs, Ys, Zs, app_out_ggg(Xs, Ys, Zs)) -> app_out_ggg(.(X, Xs), Ys, .(X, Zs))
   U3_ag(X, Xs, Ys, app_out_ggg(Zs, .(X, []), Ys)) -> reverse_out_ag(.(X, Xs), Ys)
   reverse_in_ag([], []) -> reverse_out_ag([], [])

The argument filtering Pi contains the following mapping:
reverse_in_ag(x1, x2)  =  reverse_in_ag(x2)

U2_ag(x1, x2, x3, x4)  =  U2_ag(x3, x4)

reverse_in_aa(x1, x2)  =  reverse_in_aa

U2_aa(x1, x2, x3, x4)  =  U2_aa(x4)

reverse_out_aa(x1, x2)  =  reverse_out_aa(x1, x2)

U3_aa(x1, x2, x3, x4)  =  U3_aa(x2, x4)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

.(x1, x2)  =  .(x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x2, x3, x5)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x1, x2, x3)

U3_ag(x1, x2, x3, x4)  =  U3_ag(x2, x3, x4)

app_in_ggg(x1, x2, x3)  =  app_in_ggg(x1, x2, x3)

U1_ggg(x1, x2, x3, x4, x5)  =  U1_ggg(x2, x3, x4, x5)

app_out_ggg(x1, x2, x3)  =  app_out_ggg(x1, x2, x3)

reverse_out_ag(x1, x2)  =  reverse_out_ag(x1, x2)

REVERSE_IN_AA(x1, x2)  =  REVERSE_IN_AA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(47) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(48)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REVERSE_IN_AA(.(X, Xs), Ys) -> REVERSE_IN_AA(Xs, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

REVERSE_IN_AA(x1, x2)  =  REVERSE_IN_AA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(49) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVERSE_IN_AA -> REVERSE_IN_AA

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(51) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 4,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(app (. X Xs) Ys (. X Zs))",
                "(app Xs Ys Zs)"
            ],
            [
                "(app ([]) Ys Ys)",
                null
            ],
            [
                "(reverse (. X Xs) Ys)",
                "(',' (reverse Xs Zs) (app Zs (. X ([])) Ys))"
            ],
            [
                "(reverse ([]) ([]))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "type": "Nodes",
            "274": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 5,
                        "term": "(app T78 (. T79 ([])) T8)"
                    },
                    {
                        "clause": 1,
                        "scope": 5,
                        "term": "(app T78 (. T79 ([])) T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "275": {
                "goal": [{
                    "clause": 0,
                    "scope": 5,
                    "term": "(app T78 (. T79 ([])) T8)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "276": {
                "goal": [{
                    "clause": 1,
                    "scope": 5,
                    "term": "(app T78 (. T79 ([])) T8)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "233": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (reverse T41 X62) (app X62 (. T42 ([])) X63))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X63",
                        "X62"
                    ],
                    "exprvars": []
                }
            },
            "277": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T107 (. T108 ([])) T106)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T106"],
                    "free": [],
                    "exprvars": []
                }
            },
            "234": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "278": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "279": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "237": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(reverse T41 X62)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X62"],
                    "exprvars": []
                }
            },
            "238": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T45 (. T46 ([])) X63)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X63"],
                    "exprvars": []
                }
            },
            "280": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "281": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "282": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(',' (reverse T9 X7) (app X7 (. T10 ([])) T8))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": ["X7"],
                    "exprvars": []
                }
            },
            "162": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(',' (reverse T9 X7) (app X7 (. T10 ([])) T8))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": ["X7"],
                    "exprvars": []
                }
            },
            "283": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(reverse T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "284": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app ([]) (. T116 ([])) T8)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "164": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(',' (reverse T9 X7) (app X7 (. T10 ([])) T8))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(reverse T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": ["X7"],
                    "exprvars": []
                }
            },
            "285": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "242": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 4,
                        "term": "(app T45 (. T46 ([])) X63)"
                    },
                    {
                        "clause": 1,
                        "scope": 4,
                        "term": "(app T45 (. T46 ([])) X63)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X63"],
                    "exprvars": []
                }
            },
            "286": {
                "goal": [{
                    "clause": 3,
                    "scope": 1,
                    "term": "(reverse T1 T8)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "287": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "288": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "289": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(reverse T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "246": {
                "goal": [{
                    "clause": 0,
                    "scope": 4,
                    "term": "(app T45 (. T46 ([])) X63)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X63"],
                    "exprvars": []
                }
            },
            "247": {
                "goal": [{
                    "clause": 1,
                    "scope": 4,
                    "term": "(app T45 (. T46 ([])) X63)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X63"],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(reverse T1 T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(reverse T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "248": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T67 (. T68 ([])) X103)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X103"],
                    "exprvars": []
                }
            },
            "249": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "208": {
                "goal": [{
                    "clause": 2,
                    "scope": 3,
                    "term": "(reverse T21 X29)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X29"],
                    "exprvars": []
                }
            },
            "209": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(reverse T21 X29)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X29"],
                    "exprvars": []
                }
            },
            "290": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "291": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "292": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "250": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "251": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "252": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "176": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (',' (reverse T21 X29) (app X29 (. T22 ([])) X30)) (app X30 (. T23 ([])) T8))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [
                        "X30",
                        "X29"
                    ],
                    "exprvars": []
                }
            },
            "253": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "177": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "254": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "255": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "135": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (reverse T9 X7) (app X7 (. T10 ([])) T8))"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(reverse T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": ["X7"],
                    "exprvars": []
                }
            },
            "256": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T26 (. T27 ([])) X30)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X30"],
                    "exprvars": []
                }
            },
            "136": {
                "goal": [{
                    "clause": 3,
                    "scope": 1,
                    "term": "(reverse T1 T2)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(reverse T1 T2)",
                        "(reverse (. X4 X5) X6)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [
                        "X4",
                        "X5",
                        "X6"
                    ],
                    "exprvars": []
                }
            },
            "257": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T78 (. T79 ([])) T8)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "180": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(reverse T21 X29)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X29"],
                    "exprvars": []
                }
            },
            "181": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (app T26 (. T27 ([])) X30) (app X30 (. T28 ([])) T8))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": ["X30"],
                    "exprvars": []
                }
            },
            "184": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 3,
                        "term": "(reverse T21 X29)"
                    },
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(reverse T21 X29)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X29"],
                    "exprvars": []
                }
            },
            "143": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(',' (reverse T9 X7) (app X7 (. T10 ([])) T8))"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(',' (reverse T9 X7) (app X7 (. T10 ([])) T8))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(reverse T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": ["X7"],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 4,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 135,
                "label": "EVAL with clause\nreverse(.(X4, X5), X6) :- ','(reverse(X5, X7), app(X7, .(X4, []), X6)).\nand substitutionX4 -> T10,\nX5 -> T9,\nT1 -> .(T10, T9),\nT2 -> T8,\nX6 -> T8,\nT7 -> T9,\nT6 -> T10"
            },
            {
                "from": 6,
                "to": 136,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 135,
                "to": 143,
                "label": "CASE"
            },
            {
                "from": 136,
                "to": 290,
                "label": "EVAL with clause\nreverse([], []).\nand substitutionT1 -> [],\nT2 -> []"
            },
            {
                "from": 136,
                "to": 291,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 143,
                "to": 162,
                "label": "PARALLEL"
            },
            {
                "from": 143,
                "to": 164,
                "label": "PARALLEL"
            },
            {
                "from": 162,
                "to": 176,
                "label": "EVAL with clause\nreverse(.(X26, X27), X28) :- ','(reverse(X27, X29), app(X29, .(X26, []), X28)).\nand substitutionX26 -> T22,\nX27 -> T21,\nT9 -> .(T22, T21),\nX7 -> X30,\nX28 -> X30,\nT20 -> T21,\nT19 -> T22,\nT10 -> T23"
            },
            {
                "from": 162,
                "to": 177,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 164,
                "to": 282,
                "label": "PARALLEL"
            },
            {
                "from": 164,
                "to": 283,
                "label": "PARALLEL"
            },
            {
                "from": 176,
                "to": 180,
                "label": "SPLIT 1"
            },
            {
                "from": 176,
                "to": 181,
                "label": "SPLIT 2\nreplacements:X29 -> T26,\nT22 -> T27,\nT23 -> T28"
            },
            {
                "from": 180,
                "to": 184,
                "label": "CASE"
            },
            {
                "from": 181,
                "to": 256,
                "label": "SPLIT 1"
            },
            {
                "from": 181,
                "to": 257,
                "label": "SPLIT 2\nreplacements:X30 -> T78,\nT28 -> T79"
            },
            {
                "from": 184,
                "to": 208,
                "label": "PARALLEL"
            },
            {
                "from": 184,
                "to": 209,
                "label": "PARALLEL"
            },
            {
                "from": 208,
                "to": 233,
                "label": "EVAL with clause\nreverse(.(X59, X60), X61) :- ','(reverse(X60, X62), app(X62, .(X59, []), X61)).\nand substitutionX59 -> T42,\nX60 -> T41,\nT21 -> .(T42, T41),\nX29 -> X63,\nX61 -> X63,\nT40 -> T41,\nT39 -> T42"
            },
            {
                "from": 208,
                "to": 234,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 209,
                "to": 253,
                "label": "EVAL with clause\nreverse([], []).\nand substitutionT21 -> [],\nX29 -> []"
            },
            {
                "from": 209,
                "to": 254,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 233,
                "to": 237,
                "label": "SPLIT 1"
            },
            {
                "from": 233,
                "to": 238,
                "label": "SPLIT 2\nreplacements:X62 -> T45,\nT42 -> T46"
            },
            {
                "from": 237,
                "to": 180,
                "label": "INSTANCE with matching:\nT21 -> T41\nX29 -> X62"
            },
            {
                "from": 238,
                "to": 242,
                "label": "CASE"
            },
            {
                "from": 242,
                "to": 246,
                "label": "PARALLEL"
            },
            {
                "from": 242,
                "to": 247,
                "label": "PARALLEL"
            },
            {
                "from": 246,
                "to": 248,
                "label": "EVAL with clause\napp(.(X99, X100), X101, .(X99, X102)) :- app(X100, X101, X102).\nand substitutionX99 -> T64,\nX100 -> T67,\nT45 -> .(T64, T67),\nT46 -> T68,\nX101 -> .(T68, []),\nX102 -> X103,\nX63 -> .(T64, X103),\nT65 -> T67,\nT66 -> T68"
            },
            {
                "from": 246,
                "to": 249,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 247,
                "to": 250,
                "label": "EVAL with clause\napp([], X111, X111).\nand substitutionT45 -> [],\nT46 -> T74,\nX111 -> .(T74, []),\nX63 -> .(T74, [])"
            },
            {
                "from": 247,
                "to": 251,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 248,
                "to": 238,
                "label": "INSTANCE with matching:\nT45 -> T67\nT46 -> T68\nX63 -> X103"
            },
            {
                "from": 250,
                "to": 252,
                "label": "SUCCESS"
            },
            {
                "from": 253,
                "to": 255,
                "label": "SUCCESS"
            },
            {
                "from": 256,
                "to": 238,
                "label": "INSTANCE with matching:\nT45 -> T26\nT46 -> T27\nX63 -> X30"
            },
            {
                "from": 257,
                "to": 274,
                "label": "CASE"
            },
            {
                "from": 274,
                "to": 275,
                "label": "PARALLEL"
            },
            {
                "from": 274,
                "to": 276,
                "label": "PARALLEL"
            },
            {
                "from": 275,
                "to": 277,
                "label": "EVAL with clause\napp(.(X142, X143), X144, .(X142, X145)) :- app(X143, X144, X145).\nand substitutionX142 -> T103,\nX143 -> T107,\nT78 -> .(T103, T107),\nT79 -> T108,\nX144 -> .(T108, []),\nX145 -> T106,\nT8 -> .(T103, T106),\nT104 -> T107,\nT105 -> T108"
            },
            {
                "from": 275,
                "to": 278,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 276,
                "to": 279,
                "label": "EVAL with clause\napp([], X152, X152).\nand substitutionT78 -> [],\nT79 -> T115,\nX152 -> .(T115, []),\nT8 -> .(T115, [])"
            },
            {
                "from": 276,
                "to": 280,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 277,
                "to": 257,
                "label": "INSTANCE with matching:\nT78 -> T107\nT79 -> T108\nT8 -> T106"
            },
            {
                "from": 279,
                "to": 281,
                "label": "SUCCESS"
            },
            {
                "from": 282,
                "to": 284,
                "label": "EVAL with clause\nreverse([], []).\nand substitutionT9 -> [],\nX7 -> [],\nT10 -> T116"
            },
            {
                "from": 282,
                "to": 285,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 283,
                "to": 286,
                "label": "FAILURE"
            },
            {
                "from": 284,
                "to": 257,
                "label": "INSTANCE with matching:\nT78 -> []\nT79 -> T116"
            },
            {
                "from": 286,
                "to": 287,
                "label": "EVAL with clause\nreverse([], []).\nand substitutionT1 -> [],\nT8 -> []"
            },
            {
                "from": 286,
                "to": 288,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 287,
                "to": 289,
                "label": "SUCCESS"
            },
            {
                "from": 290,
                "to": 292,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(52)
Obligation:
Triples:

reverseA(.(X1, X2), X3) :- reverseA(X2, X4).
reverseA(.(X1, X2), X3) :- ','(reversecA(X2, X4), appB(X4, X1, X3)).
appB(.(X1, X2), X3, .(X1, X4)) :- appB(X2, X3, X4).
appC(.(X1, X2), X3, .(X1, X4)) :- appC(X2, X3, X4).
reverseD(.(X1, .(X2, X3)), X4) :- reverseA(X3, X5).
reverseD(.(X1, .(X2, X3)), X4) :- ','(reversecA(X3, X5), appB(X5, X2, X6)).
reverseD(.(X1, .(X2, X3)), X4) :- ','(reversecA(X3, X5), ','(appcB(X5, X2, X6), appC(X6, X1, X4))).
reverseD(.(X1, []), X2) :- appC([], X1, X2).

Clauses:

reversecA(.(X1, X2), X3) :- ','(reversecA(X2, X4), appcB(X4, X1, X3)).
reversecA([], []).
appcB(.(X1, X2), X3, .(X1, X4)) :- appcB(X2, X3, X4).
appcB([], X1, .(X1, [])).
appcC(.(X1, X2), X3, .(X1, X4)) :- appcC(X2, X3, X4).
appcC([], X1, .(X1, [])).

Afs:

reverseD(x1, x2)  =  reverseD(x2)


----------------------------------------

(53) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

reverseD_in_2: (f,b)

reverseA_in_2: (f,f)

reversecA_in_2: (f,f)

appcB_in_3: (b,f,f)

appB_in_3: (b,f,f)

appC_in_3: (b,f,b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   REVERSED_IN_AG(.(X1, .(X2, X3)), X4) -> U6_AG(X1, X2, X3, X4, reverseA_in_aa(X3, X5))
   REVERSED_IN_AG(.(X1, .(X2, X3)), X4) -> REVERSEA_IN_AA(X3, X5)
   REVERSEA_IN_AA(.(X1, X2), X3) -> U1_AA(X1, X2, X3, reverseA_in_aa(X2, X4))
   REVERSEA_IN_AA(.(X1, X2), X3) -> REVERSEA_IN_AA(X2, X4)
   REVERSEA_IN_AA(.(X1, X2), X3) -> U2_AA(X1, X2, X3, reversecA_in_aa(X2, X4))
   U2_AA(X1, X2, X3, reversecA_out_aa(X2, X4)) -> U3_AA(X1, X2, X3, appB_in_gaa(X4, X1, X3))
   U2_AA(X1, X2, X3, reversecA_out_aa(X2, X4)) -> APPB_IN_GAA(X4, X1, X3)
   APPB_IN_GAA(.(X1, X2), X3, .(X1, X4)) -> U4_GAA(X1, X2, X3, X4, appB_in_gaa(X2, X3, X4))
   APPB_IN_GAA(.(X1, X2), X3, .(X1, X4)) -> APPB_IN_GAA(X2, X3, X4)
   REVERSED_IN_AG(.(X1, .(X2, X3)), X4) -> U7_AG(X1, X2, X3, X4, reversecA_in_aa(X3, X5))
   U7_AG(X1, X2, X3, X4, reversecA_out_aa(X3, X5)) -> U8_AG(X1, X2, X3, X4, appB_in_gaa(X5, X2, X6))
   U7_AG(X1, X2, X3, X4, reversecA_out_aa(X3, X5)) -> APPB_IN_GAA(X5, X2, X6)
   U7_AG(X1, X2, X3, X4, reversecA_out_aa(X3, X5)) -> U9_AG(X1, X2, X3, X4, appcB_in_gaa(X5, X2, X6))
   U9_AG(X1, X2, X3, X4, appcB_out_gaa(X5, X2, X6)) -> U10_AG(X1, X2, X3, X4, appC_in_gag(X6, X1, X4))
   U9_AG(X1, X2, X3, X4, appcB_out_gaa(X5, X2, X6)) -> APPC_IN_GAG(X6, X1, X4)
   APPC_IN_GAG(.(X1, X2), X3, .(X1, X4)) -> U5_GAG(X1, X2, X3, X4, appC_in_gag(X2, X3, X4))
   APPC_IN_GAG(.(X1, X2), X3, .(X1, X4)) -> APPC_IN_GAG(X2, X3, X4)
   REVERSED_IN_AG(.(X1, []), X2) -> U11_AG(X1, X2, appC_in_gag([], X1, X2))
   REVERSED_IN_AG(.(X1, []), X2) -> APPC_IN_GAG([], X1, X2)

The TRS R consists of the following rules:

   reversecA_in_aa(.(X1, X2), X3) -> U13_aa(X1, X2, X3, reversecA_in_aa(X2, X4))
   reversecA_in_aa([], []) -> reversecA_out_aa([], [])
   U13_aa(X1, X2, X3, reversecA_out_aa(X2, X4)) -> U14_aa(X1, X2, X3, appcB_in_gaa(X4, X1, X3))
   appcB_in_gaa(.(X1, X2), X3, .(X1, X4)) -> U15_gaa(X1, X2, X3, X4, appcB_in_gaa(X2, X3, X4))
   appcB_in_gaa([], X1, .(X1, [])) -> appcB_out_gaa([], X1, .(X1, []))
   U15_gaa(X1, X2, X3, X4, appcB_out_gaa(X2, X3, X4)) -> appcB_out_gaa(.(X1, X2), X3, .(X1, X4))
   U14_aa(X1, X2, X3, appcB_out_gaa(X4, X1, X3)) -> reversecA_out_aa(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
reverseA_in_aa(x1, x2)  =  reverseA_in_aa

reversecA_in_aa(x1, x2)  =  reversecA_in_aa

U13_aa(x1, x2, x3, x4)  =  U13_aa(x4)

reversecA_out_aa(x1, x2)  =  reversecA_out_aa(x1, x2)

U14_aa(x1, x2, x3, x4)  =  U14_aa(x2, x4)

appcB_in_gaa(x1, x2, x3)  =  appcB_in_gaa(x1)

.(x1, x2)  =  .(x2)

U15_gaa(x1, x2, x3, x4, x5)  =  U15_gaa(x2, x5)

[]  =  []

appcB_out_gaa(x1, x2, x3)  =  appcB_out_gaa(x1, x3)

appB_in_gaa(x1, x2, x3)  =  appB_in_gaa(x1)

appC_in_gag(x1, x2, x3)  =  appC_in_gag(x1, x3)

REVERSED_IN_AG(x1, x2)  =  REVERSED_IN_AG(x2)

U6_AG(x1, x2, x3, x4, x5)  =  U6_AG(x4, x5)

REVERSEA_IN_AA(x1, x2)  =  REVERSEA_IN_AA

U1_AA(x1, x2, x3, x4)  =  U1_AA(x4)

U2_AA(x1, x2, x3, x4)  =  U2_AA(x4)

U3_AA(x1, x2, x3, x4)  =  U3_AA(x2, x4)

APPB_IN_GAA(x1, x2, x3)  =  APPB_IN_GAA(x1)

U4_GAA(x1, x2, x3, x4, x5)  =  U4_GAA(x2, x5)

U7_AG(x1, x2, x3, x4, x5)  =  U7_AG(x4, x5)

U8_AG(x1, x2, x3, x4, x5)  =  U8_AG(x3, x4, x5)

U9_AG(x1, x2, x3, x4, x5)  =  U9_AG(x3, x4, x5)

U10_AG(x1, x2, x3, x4, x5)  =  U10_AG(x3, x4, x5)

APPC_IN_GAG(x1, x2, x3)  =  APPC_IN_GAG(x1, x3)

U5_GAG(x1, x2, x3, x4, x5)  =  U5_GAG(x2, x4, x5)

U11_AG(x1, x2, x3)  =  U11_AG(x2, x3)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(54)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REVERSED_IN_AG(.(X1, .(X2, X3)), X4) -> U6_AG(X1, X2, X3, X4, reverseA_in_aa(X3, X5))
   REVERSED_IN_AG(.(X1, .(X2, X3)), X4) -> REVERSEA_IN_AA(X3, X5)
   REVERSEA_IN_AA(.(X1, X2), X3) -> U1_AA(X1, X2, X3, reverseA_in_aa(X2, X4))
   REVERSEA_IN_AA(.(X1, X2), X3) -> REVERSEA_IN_AA(X2, X4)
   REVERSEA_IN_AA(.(X1, X2), X3) -> U2_AA(X1, X2, X3, reversecA_in_aa(X2, X4))
   U2_AA(X1, X2, X3, reversecA_out_aa(X2, X4)) -> U3_AA(X1, X2, X3, appB_in_gaa(X4, X1, X3))
   U2_AA(X1, X2, X3, reversecA_out_aa(X2, X4)) -> APPB_IN_GAA(X4, X1, X3)
   APPB_IN_GAA(.(X1, X2), X3, .(X1, X4)) -> U4_GAA(X1, X2, X3, X4, appB_in_gaa(X2, X3, X4))
   APPB_IN_GAA(.(X1, X2), X3, .(X1, X4)) -> APPB_IN_GAA(X2, X3, X4)
   REVERSED_IN_AG(.(X1, .(X2, X3)), X4) -> U7_AG(X1, X2, X3, X4, reversecA_in_aa(X3, X5))
   U7_AG(X1, X2, X3, X4, reversecA_out_aa(X3, X5)) -> U8_AG(X1, X2, X3, X4, appB_in_gaa(X5, X2, X6))
   U7_AG(X1, X2, X3, X4, reversecA_out_aa(X3, X5)) -> APPB_IN_GAA(X5, X2, X6)
   U7_AG(X1, X2, X3, X4, reversecA_out_aa(X3, X5)) -> U9_AG(X1, X2, X3, X4, appcB_in_gaa(X5, X2, X6))
   U9_AG(X1, X2, X3, X4, appcB_out_gaa(X5, X2, X6)) -> U10_AG(X1, X2, X3, X4, appC_in_gag(X6, X1, X4))
   U9_AG(X1, X2, X3, X4, appcB_out_gaa(X5, X2, X6)) -> APPC_IN_GAG(X6, X1, X4)
   APPC_IN_GAG(.(X1, X2), X3, .(X1, X4)) -> U5_GAG(X1, X2, X3, X4, appC_in_gag(X2, X3, X4))
   APPC_IN_GAG(.(X1, X2), X3, .(X1, X4)) -> APPC_IN_GAG(X2, X3, X4)
   REVERSED_IN_AG(.(X1, []), X2) -> U11_AG(X1, X2, appC_in_gag([], X1, X2))
   REVERSED_IN_AG(.(X1, []), X2) -> APPC_IN_GAG([], X1, X2)

The TRS R consists of the following rules:

   reversecA_in_aa(.(X1, X2), X3) -> U13_aa(X1, X2, X3, reversecA_in_aa(X2, X4))
   reversecA_in_aa([], []) -> reversecA_out_aa([], [])
   U13_aa(X1, X2, X3, reversecA_out_aa(X2, X4)) -> U14_aa(X1, X2, X3, appcB_in_gaa(X4, X1, X3))
   appcB_in_gaa(.(X1, X2), X3, .(X1, X4)) -> U15_gaa(X1, X2, X3, X4, appcB_in_gaa(X2, X3, X4))
   appcB_in_gaa([], X1, .(X1, [])) -> appcB_out_gaa([], X1, .(X1, []))
   U15_gaa(X1, X2, X3, X4, appcB_out_gaa(X2, X3, X4)) -> appcB_out_gaa(.(X1, X2), X3, .(X1, X4))
   U14_aa(X1, X2, X3, appcB_out_gaa(X4, X1, X3)) -> reversecA_out_aa(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
reverseA_in_aa(x1, x2)  =  reverseA_in_aa

reversecA_in_aa(x1, x2)  =  reversecA_in_aa

U13_aa(x1, x2, x3, x4)  =  U13_aa(x4)

reversecA_out_aa(x1, x2)  =  reversecA_out_aa(x1, x2)

U14_aa(x1, x2, x3, x4)  =  U14_aa(x2, x4)

appcB_in_gaa(x1, x2, x3)  =  appcB_in_gaa(x1)

.(x1, x2)  =  .(x2)

U15_gaa(x1, x2, x3, x4, x5)  =  U15_gaa(x2, x5)

[]  =  []

appcB_out_gaa(x1, x2, x3)  =  appcB_out_gaa(x1, x3)

appB_in_gaa(x1, x2, x3)  =  appB_in_gaa(x1)

appC_in_gag(x1, x2, x3)  =  appC_in_gag(x1, x3)

REVERSED_IN_AG(x1, x2)  =  REVERSED_IN_AG(x2)

U6_AG(x1, x2, x3, x4, x5)  =  U6_AG(x4, x5)

REVERSEA_IN_AA(x1, x2)  =  REVERSEA_IN_AA

U1_AA(x1, x2, x3, x4)  =  U1_AA(x4)

U2_AA(x1, x2, x3, x4)  =  U2_AA(x4)

U3_AA(x1, x2, x3, x4)  =  U3_AA(x2, x4)

APPB_IN_GAA(x1, x2, x3)  =  APPB_IN_GAA(x1)

U4_GAA(x1, x2, x3, x4, x5)  =  U4_GAA(x2, x5)

U7_AG(x1, x2, x3, x4, x5)  =  U7_AG(x4, x5)

U8_AG(x1, x2, x3, x4, x5)  =  U8_AG(x3, x4, x5)

U9_AG(x1, x2, x3, x4, x5)  =  U9_AG(x3, x4, x5)

U10_AG(x1, x2, x3, x4, x5)  =  U10_AG(x3, x4, x5)

APPC_IN_GAG(x1, x2, x3)  =  APPC_IN_GAG(x1, x3)

U5_GAG(x1, x2, x3, x4, x5)  =  U5_GAG(x2, x4, x5)

U11_AG(x1, x2, x3)  =  U11_AG(x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(55) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 16 less nodes.
----------------------------------------

(56)
Complex Obligation (AND)

----------------------------------------

(57)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPC_IN_GAG(.(X1, X2), X3, .(X1, X4)) -> APPC_IN_GAG(X2, X3, X4)

The TRS R consists of the following rules:

   reversecA_in_aa(.(X1, X2), X3) -> U13_aa(X1, X2, X3, reversecA_in_aa(X2, X4))
   reversecA_in_aa([], []) -> reversecA_out_aa([], [])
   U13_aa(X1, X2, X3, reversecA_out_aa(X2, X4)) -> U14_aa(X1, X2, X3, appcB_in_gaa(X4, X1, X3))
   appcB_in_gaa(.(X1, X2), X3, .(X1, X4)) -> U15_gaa(X1, X2, X3, X4, appcB_in_gaa(X2, X3, X4))
   appcB_in_gaa([], X1, .(X1, [])) -> appcB_out_gaa([], X1, .(X1, []))
   U15_gaa(X1, X2, X3, X4, appcB_out_gaa(X2, X3, X4)) -> appcB_out_gaa(.(X1, X2), X3, .(X1, X4))
   U14_aa(X1, X2, X3, appcB_out_gaa(X4, X1, X3)) -> reversecA_out_aa(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
reversecA_in_aa(x1, x2)  =  reversecA_in_aa

U13_aa(x1, x2, x3, x4)  =  U13_aa(x4)

reversecA_out_aa(x1, x2)  =  reversecA_out_aa(x1, x2)

U14_aa(x1, x2, x3, x4)  =  U14_aa(x2, x4)

appcB_in_gaa(x1, x2, x3)  =  appcB_in_gaa(x1)

.(x1, x2)  =  .(x2)

U15_gaa(x1, x2, x3, x4, x5)  =  U15_gaa(x2, x5)

[]  =  []

appcB_out_gaa(x1, x2, x3)  =  appcB_out_gaa(x1, x3)

APPC_IN_GAG(x1, x2, x3)  =  APPC_IN_GAG(x1, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(58) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(59)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPC_IN_GAG(.(X1, X2), X3, .(X1, X4)) -> APPC_IN_GAG(X2, X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPC_IN_GAG(x1, x2, x3)  =  APPC_IN_GAG(x1, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(60) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(61)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPC_IN_GAG(.(X2), .(X4)) -> APPC_IN_GAG(X2, X4)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(62) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPC_IN_GAG(.(X2), .(X4)) -> APPC_IN_GAG(X2, X4)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(63)
YES

----------------------------------------

(64)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPB_IN_GAA(.(X1, X2), X3, .(X1, X4)) -> APPB_IN_GAA(X2, X3, X4)

The TRS R consists of the following rules:

   reversecA_in_aa(.(X1, X2), X3) -> U13_aa(X1, X2, X3, reversecA_in_aa(X2, X4))
   reversecA_in_aa([], []) -> reversecA_out_aa([], [])
   U13_aa(X1, X2, X3, reversecA_out_aa(X2, X4)) -> U14_aa(X1, X2, X3, appcB_in_gaa(X4, X1, X3))
   appcB_in_gaa(.(X1, X2), X3, .(X1, X4)) -> U15_gaa(X1, X2, X3, X4, appcB_in_gaa(X2, X3, X4))
   appcB_in_gaa([], X1, .(X1, [])) -> appcB_out_gaa([], X1, .(X1, []))
   U15_gaa(X1, X2, X3, X4, appcB_out_gaa(X2, X3, X4)) -> appcB_out_gaa(.(X1, X2), X3, .(X1, X4))
   U14_aa(X1, X2, X3, appcB_out_gaa(X4, X1, X3)) -> reversecA_out_aa(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
reversecA_in_aa(x1, x2)  =  reversecA_in_aa

U13_aa(x1, x2, x3, x4)  =  U13_aa(x4)

reversecA_out_aa(x1, x2)  =  reversecA_out_aa(x1, x2)

U14_aa(x1, x2, x3, x4)  =  U14_aa(x2, x4)

appcB_in_gaa(x1, x2, x3)  =  appcB_in_gaa(x1)

.(x1, x2)  =  .(x2)

U15_gaa(x1, x2, x3, x4, x5)  =  U15_gaa(x2, x5)

[]  =  []

appcB_out_gaa(x1, x2, x3)  =  appcB_out_gaa(x1, x3)

APPB_IN_GAA(x1, x2, x3)  =  APPB_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(65) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(66)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPB_IN_GAA(.(X1, X2), X3, .(X1, X4)) -> APPB_IN_GAA(X2, X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPB_IN_GAA(x1, x2, x3)  =  APPB_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(67) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(68)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPB_IN_GAA(.(X2)) -> APPB_IN_GAA(X2)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(69) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPB_IN_GAA(.(X2)) -> APPB_IN_GAA(X2)
The graph contains the following edges 1 > 1


----------------------------------------

(70)
YES

----------------------------------------

(71)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REVERSEA_IN_AA(.(X1, X2), X3) -> REVERSEA_IN_AA(X2, X4)

The TRS R consists of the following rules:

   reversecA_in_aa(.(X1, X2), X3) -> U13_aa(X1, X2, X3, reversecA_in_aa(X2, X4))
   reversecA_in_aa([], []) -> reversecA_out_aa([], [])
   U13_aa(X1, X2, X3, reversecA_out_aa(X2, X4)) -> U14_aa(X1, X2, X3, appcB_in_gaa(X4, X1, X3))
   appcB_in_gaa(.(X1, X2), X3, .(X1, X4)) -> U15_gaa(X1, X2, X3, X4, appcB_in_gaa(X2, X3, X4))
   appcB_in_gaa([], X1, .(X1, [])) -> appcB_out_gaa([], X1, .(X1, []))
   U15_gaa(X1, X2, X3, X4, appcB_out_gaa(X2, X3, X4)) -> appcB_out_gaa(.(X1, X2), X3, .(X1, X4))
   U14_aa(X1, X2, X3, appcB_out_gaa(X4, X1, X3)) -> reversecA_out_aa(.(X1, X2), X3)

The argument filtering Pi contains the following mapping:
reversecA_in_aa(x1, x2)  =  reversecA_in_aa

U13_aa(x1, x2, x3, x4)  =  U13_aa(x4)

reversecA_out_aa(x1, x2)  =  reversecA_out_aa(x1, x2)

U14_aa(x1, x2, x3, x4)  =  U14_aa(x2, x4)

appcB_in_gaa(x1, x2, x3)  =  appcB_in_gaa(x1)

.(x1, x2)  =  .(x2)

U15_gaa(x1, x2, x3, x4, x5)  =  U15_gaa(x2, x5)

[]  =  []

appcB_out_gaa(x1, x2, x3)  =  appcB_out_gaa(x1, x3)

REVERSEA_IN_AA(x1, x2)  =  REVERSEA_IN_AA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(72) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(73)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REVERSEA_IN_AA(.(X1, X2), X3) -> REVERSEA_IN_AA(X2, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

REVERSEA_IN_AA(x1, x2)  =  REVERSEA_IN_AA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(74) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(75)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   REVERSEA_IN_AA -> REVERSEA_IN_AA

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(76) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 9,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(app (. X Xs) Ys (. X Zs))",
                "(app Xs Ys Zs)"
            ],
            [
                "(app ([]) Ys Ys)",
                null
            ],
            [
                "(reverse (. X Xs) Ys)",
                "(',' (reverse Xs Zs) (app Zs (. X ([])) Ys))"
            ],
            [
                "(reverse ([]) ([]))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "190": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(reverse T18 X18)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X18"],
                    "exprvars": []
                }
            },
            "191": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T22 (. T23 ([])) T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "192": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(reverse T18 X18)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(reverse T18 X18)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X18"],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "195": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(reverse T18 X18)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X18"],
                    "exprvars": []
                }
            },
            "196": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(reverse T18 X18)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X18"],
                    "exprvars": []
                }
            },
            "230": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 4,
                        "term": "(app T22 (. T23 ([])) T17)"
                    },
                    {
                        "clause": 1,
                        "scope": 4,
                        "term": "(app T22 (. T23 ([])) T17)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "231": {
                "goal": [{
                    "clause": 0,
                    "scope": 4,
                    "term": "(app T22 (. T23 ([])) T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "199": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (reverse T36 X50) (app X50 (. T37 ([])) X51))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X51",
                        "X50"
                    ],
                    "exprvars": []
                }
            },
            "232": {
                "goal": [{
                    "clause": 1,
                    "scope": 4,
                    "term": "(app T22 (. T23 ([])) T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "235": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T94 (. T95 ([])) T93)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T93"],
                    "free": [],
                    "exprvars": []
                }
            },
            "236": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "239": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "10": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(reverse T1 T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(reverse T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "182": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(reverse T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "183": {
                "goal": [{
                    "clause": 3,
                    "scope": 1,
                    "term": "(reverse T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "185": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (reverse T18 X18) (app X18 (. T19 ([])) T17))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": ["X18"],
                    "exprvars": []
                }
            },
            "240": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "186": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "241": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "243": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "200": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "222": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T62 (. T63 ([])) X91)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X91"],
                    "exprvars": []
                }
            },
            "244": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "223": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "245": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "224": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "203": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(reverse T36 X50)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X50"],
                    "exprvars": []
                }
            },
            "225": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "204": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T40 (. T41 ([])) X51)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X51"],
                    "exprvars": []
                }
            },
            "226": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "205": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 3,
                        "term": "(app T40 (. T41 ([])) X51)"
                    },
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(app T40 (. T41 ([])) X51)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X51"],
                    "exprvars": []
                }
            },
            "227": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "206": {
                "goal": [{
                    "clause": 0,
                    "scope": 3,
                    "term": "(app T40 (. T41 ([])) X51)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X51"],
                    "exprvars": []
                }
            },
            "228": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(reverse T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "207": {
                "goal": [{
                    "clause": 1,
                    "scope": 3,
                    "term": "(app T40 (. T41 ([])) X51)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X51"],
                    "exprvars": []
                }
            },
            "229": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 9,
                "to": 10,
                "label": "CASE"
            },
            {
                "from": 10,
                "to": 182,
                "label": "PARALLEL"
            },
            {
                "from": 10,
                "to": 183,
                "label": "PARALLEL"
            },
            {
                "from": 182,
                "to": 185,
                "label": "EVAL with clause\nreverse(.(X15, X16), X17) :- ','(reverse(X16, X18), app(X18, .(X15, []), X17)).\nand substitutionX15 -> T19,\nX16 -> T18,\nT1 -> .(T19, T18),\nT2 -> T17,\nX17 -> T17,\nT16 -> T18,\nT15 -> T19"
            },
            {
                "from": 182,
                "to": 186,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 183,
                "to": 243,
                "label": "EVAL with clause\nreverse([], []).\nand substitutionT1 -> [],\nT2 -> []"
            },
            {
                "from": 183,
                "to": 244,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 185,
                "to": 190,
                "label": "SPLIT 1"
            },
            {
                "from": 185,
                "to": 191,
                "label": "SPLIT 2\nreplacements:X18 -> T22,\nT19 -> T23"
            },
            {
                "from": 190,
                "to": 192,
                "label": "CASE"
            },
            {
                "from": 191,
                "to": 230,
                "label": "CASE"
            },
            {
                "from": 192,
                "to": 195,
                "label": "PARALLEL"
            },
            {
                "from": 192,
                "to": 196,
                "label": "PARALLEL"
            },
            {
                "from": 195,
                "to": 199,
                "label": "EVAL with clause\nreverse(.(X47, X48), X49) :- ','(reverse(X48, X50), app(X50, .(X47, []), X49)).\nand substitutionX47 -> T37,\nX48 -> T36,\nT18 -> .(T37, T36),\nX18 -> X51,\nX49 -> X51,\nT35 -> T36,\nT34 -> T37"
            },
            {
                "from": 195,
                "to": 200,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 196,
                "to": 227,
                "label": "EVAL with clause\nreverse([], []).\nand substitutionT18 -> [],\nX18 -> []"
            },
            {
                "from": 196,
                "to": 228,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 199,
                "to": 203,
                "label": "SPLIT 1"
            },
            {
                "from": 199,
                "to": 204,
                "label": "SPLIT 2\nreplacements:X50 -> T40,\nT37 -> T41"
            },
            {
                "from": 203,
                "to": 190,
                "label": "INSTANCE with matching:\nT18 -> T36\nX18 -> X50"
            },
            {
                "from": 204,
                "to": 205,
                "label": "CASE"
            },
            {
                "from": 205,
                "to": 206,
                "label": "PARALLEL"
            },
            {
                "from": 205,
                "to": 207,
                "label": "PARALLEL"
            },
            {
                "from": 206,
                "to": 222,
                "label": "EVAL with clause\napp(.(X87, X88), X89, .(X87, X90)) :- app(X88, X89, X90).\nand substitutionX87 -> T59,\nX88 -> T62,\nT40 -> .(T59, T62),\nT41 -> T63,\nX89 -> .(T63, []),\nX90 -> X91,\nX51 -> .(T59, X91),\nT60 -> T62,\nT61 -> T63"
            },
            {
                "from": 206,
                "to": 223,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 207,
                "to": 224,
                "label": "EVAL with clause\napp([], X99, X99).\nand substitutionT40 -> [],\nT41 -> T69,\nX99 -> .(T69, []),\nX51 -> .(T69, [])"
            },
            {
                "from": 207,
                "to": 225,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 222,
                "to": 204,
                "label": "INSTANCE with matching:\nT40 -> T62\nT41 -> T63\nX51 -> X91"
            },
            {
                "from": 224,
                "to": 226,
                "label": "SUCCESS"
            },
            {
                "from": 227,
                "to": 229,
                "label": "SUCCESS"
            },
            {
                "from": 230,
                "to": 231,
                "label": "PARALLEL"
            },
            {
                "from": 230,
                "to": 232,
                "label": "PARALLEL"
            },
            {
                "from": 231,
                "to": 235,
                "label": "EVAL with clause\napp(.(X120, X121), X122, .(X120, X123)) :- app(X121, X122, X123).\nand substitutionX120 -> T90,\nX121 -> T94,\nT22 -> .(T90, T94),\nT23 -> T95,\nX122 -> .(T95, []),\nX123 -> T93,\nT17 -> .(T90, T93),\nT91 -> T94,\nT92 -> T95"
            },
            {
                "from": 231,
                "to": 236,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 232,
                "to": 239,
                "label": "EVAL with clause\napp([], X130, X130).\nand substitutionT22 -> [],\nT23 -> T102,\nX130 -> .(T102, []),\nT17 -> .(T102, [])"
            },
            {
                "from": 232,
                "to": 240,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 235,
                "to": 191,
                "label": "INSTANCE with matching:\nT22 -> T94\nT23 -> T95\nT17 -> T93"
            },
            {
                "from": 239,
                "to": 241,
                "label": "SUCCESS"
            },
            {
                "from": 243,
                "to": 245,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(77)
Complex Obligation (AND)

----------------------------------------

(78)
Obligation:
Rules:
f222_out -> f206_out :|: TRUE
f223_out -> f206_out :|: TRUE
f206_in -> f222_in :|: TRUE
f206_in -> f223_in :|: TRUE
f204_in -> f205_in :|: TRUE
f205_out -> f204_out :|: TRUE
f205_in -> f206_in :|: TRUE
f205_in -> f207_in :|: TRUE
f207_out -> f205_out :|: TRUE
f206_out -> f205_out :|: TRUE
f204_out -> f222_out :|: TRUE
f222_in -> f204_in :|: TRUE
f9_in(T2) -> f10_in(T2) :|: TRUE
f10_out(x) -> f9_out(x) :|: TRUE
f10_in(x1) -> f182_in(x1) :|: TRUE
f183_out(x2) -> f10_out(x2) :|: TRUE
f182_out(x3) -> f10_out(x3) :|: TRUE
f10_in(x4) -> f183_in(x4) :|: TRUE
f182_in(x5) -> f186_in :|: TRUE
f186_out -> f182_out(x6) :|: TRUE
f185_out(T17) -> f182_out(T17) :|: TRUE
f182_in(x7) -> f185_in(x7) :|: TRUE
f190_out -> f191_in(x8) :|: TRUE
f191_out(x9) -> f185_out(x9) :|: TRUE
f185_in(x10) -> f190_in :|: TRUE
f192_out -> f190_out :|: TRUE
f190_in -> f192_in :|: TRUE
f192_in -> f195_in :|: TRUE
f196_out -> f192_out :|: TRUE
f195_out -> f192_out :|: TRUE
f192_in -> f196_in :|: TRUE
f195_in -> f199_in :|: TRUE
f199_out -> f195_out :|: TRUE
f200_out -> f195_out :|: TRUE
f195_in -> f200_in :|: TRUE
f199_in -> f203_in :|: TRUE
f203_out -> f204_in :|: TRUE
f204_out -> f199_out :|: TRUE
Start term: f9_in(T2)

----------------------------------------

(79) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:


----------------------------------------

(80)
TRUE

----------------------------------------

(81)
Obligation:
Rules:
f235_out(T93) -> f231_out(.(T90, T93)) :|: TRUE
f231_in(.(x, x1)) -> f235_in(x1) :|: TRUE
f231_in(T17) -> f236_in :|: TRUE
f236_out -> f231_out(x2) :|: TRUE
f191_out(x3) -> f235_out(x3) :|: TRUE
f235_in(x4) -> f191_in(x4) :|: TRUE
f230_in(x5) -> f232_in(x5) :|: TRUE
f232_out(x6) -> f230_out(x6) :|: TRUE
f231_out(x7) -> f230_out(x7) :|: TRUE
f230_in(x8) -> f231_in(x8) :|: TRUE
f230_out(x9) -> f191_out(x9) :|: TRUE
f191_in(x10) -> f230_in(x10) :|: TRUE
f9_in(T2) -> f10_in(T2) :|: TRUE
f10_out(x11) -> f9_out(x11) :|: TRUE
f10_in(x12) -> f182_in(x12) :|: TRUE
f183_out(x13) -> f10_out(x13) :|: TRUE
f182_out(x14) -> f10_out(x14) :|: TRUE
f10_in(x15) -> f183_in(x15) :|: TRUE
f182_in(x16) -> f186_in :|: TRUE
f186_out -> f182_out(x17) :|: TRUE
f185_out(x18) -> f182_out(x18) :|: TRUE
f182_in(x19) -> f185_in(x19) :|: TRUE
f190_out -> f191_in(x20) :|: TRUE
f191_out(x21) -> f185_out(x21) :|: TRUE
f185_in(x22) -> f190_in :|: TRUE
Start term: f9_in(T2)

----------------------------------------

(82) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:


----------------------------------------

(83)
TRUE

----------------------------------------

(84)
Obligation:
Rules:
f222_out -> f206_out :|: TRUE
f223_out -> f206_out :|: TRUE
f206_in -> f222_in :|: TRUE
f206_in -> f223_in :|: TRUE
f192_in -> f195_in :|: TRUE
f196_out -> f192_out :|: TRUE
f195_out -> f192_out :|: TRUE
f192_in -> f196_in :|: TRUE
f199_in -> f203_in :|: TRUE
f203_out -> f204_in :|: TRUE
f204_out -> f199_out :|: TRUE
f203_in -> f190_in :|: TRUE
f190_out -> f203_out :|: TRUE
f205_in -> f206_in :|: TRUE
f205_in -> f207_in :|: TRUE
f207_out -> f205_out :|: TRUE
f206_out -> f205_out :|: TRUE
f195_in -> f199_in :|: TRUE
f199_out -> f195_out :|: TRUE
f200_out -> f195_out :|: TRUE
f195_in -> f200_in :|: TRUE
f224_in -> f224_out :|: TRUE
f192_out -> f190_out :|: TRUE
f190_in -> f192_in :|: TRUE
f204_in -> f205_in :|: TRUE
f205_out -> f204_out :|: TRUE
f207_in -> f224_in :|: TRUE
f224_out -> f207_out :|: TRUE
f207_in -> f225_in :|: TRUE
f225_out -> f207_out :|: TRUE
f204_out -> f222_out :|: TRUE
f222_in -> f204_in :|: TRUE
f9_in(T2) -> f10_in(T2) :|: TRUE
f10_out(x) -> f9_out(x) :|: TRUE
f10_in(x1) -> f182_in(x1) :|: TRUE
f183_out(x2) -> f10_out(x2) :|: TRUE
f182_out(x3) -> f10_out(x3) :|: TRUE
f10_in(x4) -> f183_in(x4) :|: TRUE
f182_in(x5) -> f186_in :|: TRUE
f186_out -> f182_out(x6) :|: TRUE
f185_out(T17) -> f182_out(T17) :|: TRUE
f182_in(x7) -> f185_in(x7) :|: TRUE
f190_out -> f191_in(x8) :|: TRUE
f191_out(x9) -> f185_out(x9) :|: TRUE
f185_in(x10) -> f190_in :|: TRUE
Start term: f9_in(T2)

----------------------------------------

(85) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f192_in -> f195_in :|: TRUE
f199_in -> f203_in :|: TRUE
f203_in -> f190_in :|: TRUE
f195_in -> f199_in :|: TRUE
f190_in -> f192_in :|: TRUE


----------------------------------------

(86)
Obligation:
Rules:
f192_in -> f195_in :|: TRUE
f199_in -> f203_in :|: TRUE
f203_in -> f190_in :|: TRUE
f195_in -> f199_in :|: TRUE
f190_in -> f192_in :|: TRUE

----------------------------------------

(87) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(88)
Obligation:
Rules:
f192_in -> f192_in :|: TRUE

----------------------------------------

(89) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(90)
Obligation:
Rules:
f192_in -> f192_in :|: TRUE

----------------------------------------

(91) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f192_in -> f192_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(92)
Obligation:

Termination digraph:
Nodes:
(1) f192_in -> f192_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(93) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f192_in()
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(94)
Obligation:
Rules:
f192_in -> f192_in :|: TRUE

----------------------------------------

(95) IntTRSNonPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc) -> f(1) :|: pc = 1 && TRUE
Proved unsatisfiability of the following formula, indicating that the system is never left after entering:
((run2_0 = ((1 * 1)) and (((run1_0 * 1)) = ((1 * 1)) and T)) and !(((run2_0 * 1)) = ((1 * 1)) and T))
Proved satisfiability of the following formula, indicating that the system is entered at least once:
(run2_0 = ((1 * 1)) and (((run1_0 * 1)) = ((1 * 1)) and T))

----------------------------------------

(96)
NO

----------------------------------------

(97) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(app (. X Xs) Ys (. X Zs))",
                "(app Xs Ys Zs)"
            ],
            [
                "(app ([]) Ys Ys)",
                null
            ],
            [
                "(reverse (. X Xs) Ys)",
                "(',' (reverse Xs Zs) (app Zs (. X ([])) Ys))"
            ],
            [
                "(reverse ([]) ([]))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "193": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(reverse T18 X18)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X18"],
                    "exprvars": []
                }
            },
            "270": {
                "goal": [{
                    "clause": 0,
                    "scope": 4,
                    "term": "(app T22 (. T23 ([])) T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "194": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(reverse T18 X18)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X18"],
                    "exprvars": []
                }
            },
            "271": {
                "goal": [{
                    "clause": 1,
                    "scope": 4,
                    "term": "(app T22 (. T23 ([])) T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "293": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "272": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T94 (. T95 ([])) T93)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T93"],
                    "free": [],
                    "exprvars": []
                }
            },
            "294": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "174": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(reverse T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "273": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "295": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "175": {
                "goal": [{
                    "clause": 3,
                    "scope": 1,
                    "term": "(reverse T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "197": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (reverse T36 X50) (app X50 (. T37 ([])) X51))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X51",
                        "X50"
                    ],
                    "exprvars": []
                }
            },
            "296": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "198": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "297": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "298": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "178": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (reverse T18 X18) (app X18 (. T19 ([])) T17))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": ["X18"],
                    "exprvars": []
                }
            },
            "179": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "258": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 3,
                        "term": "(app T40 (. T41 ([])) X51)"
                    },
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(app T40 (. T41 ([])) X51)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X51"],
                    "exprvars": []
                }
            },
            "259": {
                "goal": [{
                    "clause": 0,
                    "scope": 3,
                    "term": "(app T40 (. T41 ([])) X51)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X51"],
                    "exprvars": []
                }
            },
            "260": {
                "goal": [{
                    "clause": 1,
                    "scope": 3,
                    "term": "(app T40 (. T41 ([])) X51)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X51"],
                    "exprvars": []
                }
            },
            "261": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T62 (. T63 ([])) X91)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X91"],
                    "exprvars": []
                }
            },
            "262": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "263": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "187": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(reverse T18 X18)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X18"],
                    "exprvars": []
                }
            },
            "264": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(reverse T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "188": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T22 (. T23 ([])) T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "265": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "189": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(reverse T18 X18)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(reverse T18 X18)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X18"],
                    "exprvars": []
                }
            },
            "266": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(reverse T1 T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(reverse T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "201": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(reverse T36 X50)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X50"],
                    "exprvars": []
                }
            },
            "267": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "202": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T40 (. T41 ([])) X51)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X51"],
                    "exprvars": []
                }
            },
            "268": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "269": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 4,
                        "term": "(app T22 (. T23 ([])) T17)"
                    },
                    {
                        "clause": 1,
                        "scope": 4,
                        "term": "(app T22 (. T23 ([])) T17)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 3,
                "label": "CASE"
            },
            {
                "from": 3,
                "to": 174,
                "label": "PARALLEL"
            },
            {
                "from": 3,
                "to": 175,
                "label": "PARALLEL"
            },
            {
                "from": 174,
                "to": 178,
                "label": "EVAL with clause\nreverse(.(X15, X16), X17) :- ','(reverse(X16, X18), app(X18, .(X15, []), X17)).\nand substitutionX15 -> T19,\nX16 -> T18,\nT1 -> .(T19, T18),\nT2 -> T17,\nX17 -> T17,\nT16 -> T18,\nT15 -> T19"
            },
            {
                "from": 174,
                "to": 179,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 175,
                "to": 296,
                "label": "EVAL with clause\nreverse([], []).\nand substitutionT1 -> [],\nT2 -> []"
            },
            {
                "from": 175,
                "to": 297,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 178,
                "to": 187,
                "label": "SPLIT 1"
            },
            {
                "from": 178,
                "to": 188,
                "label": "SPLIT 2\nreplacements:X18 -> T22,\nT19 -> T23"
            },
            {
                "from": 187,
                "to": 189,
                "label": "CASE"
            },
            {
                "from": 188,
                "to": 269,
                "label": "CASE"
            },
            {
                "from": 189,
                "to": 193,
                "label": "PARALLEL"
            },
            {
                "from": 189,
                "to": 194,
                "label": "PARALLEL"
            },
            {
                "from": 193,
                "to": 197,
                "label": "EVAL with clause\nreverse(.(X47, X48), X49) :- ','(reverse(X48, X50), app(X50, .(X47, []), X49)).\nand substitutionX47 -> T37,\nX48 -> T36,\nT18 -> .(T37, T36),\nX18 -> X51,\nX49 -> X51,\nT35 -> T36,\nT34 -> T37"
            },
            {
                "from": 193,
                "to": 198,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 194,
                "to": 266,
                "label": "EVAL with clause\nreverse([], []).\nand substitutionT18 -> [],\nX18 -> []"
            },
            {
                "from": 194,
                "to": 267,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 197,
                "to": 201,
                "label": "SPLIT 1"
            },
            {
                "from": 197,
                "to": 202,
                "label": "SPLIT 2\nreplacements:X50 -> T40,\nT37 -> T41"
            },
            {
                "from": 201,
                "to": 187,
                "label": "INSTANCE with matching:\nT18 -> T36\nX18 -> X50"
            },
            {
                "from": 202,
                "to": 258,
                "label": "CASE"
            },
            {
                "from": 258,
                "to": 259,
                "label": "PARALLEL"
            },
            {
                "from": 258,
                "to": 260,
                "label": "PARALLEL"
            },
            {
                "from": 259,
                "to": 261,
                "label": "EVAL with clause\napp(.(X87, X88), X89, .(X87, X90)) :- app(X88, X89, X90).\nand substitutionX87 -> T59,\nX88 -> T62,\nT40 -> .(T59, T62),\nT41 -> T63,\nX89 -> .(T63, []),\nX90 -> X91,\nX51 -> .(T59, X91),\nT60 -> T62,\nT61 -> T63"
            },
            {
                "from": 259,
                "to": 262,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 260,
                "to": 263,
                "label": "EVAL with clause\napp([], X99, X99).\nand substitutionT40 -> [],\nT41 -> T69,\nX99 -> .(T69, []),\nX51 -> .(T69, [])"
            },
            {
                "from": 260,
                "to": 264,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 261,
                "to": 202,
                "label": "INSTANCE with matching:\nT40 -> T62\nT41 -> T63\nX51 -> X91"
            },
            {
                "from": 263,
                "to": 265,
                "label": "SUCCESS"
            },
            {
                "from": 266,
                "to": 268,
                "label": "SUCCESS"
            },
            {
                "from": 269,
                "to": 270,
                "label": "PARALLEL"
            },
            {
                "from": 269,
                "to": 271,
                "label": "PARALLEL"
            },
            {
                "from": 270,
                "to": 272,
                "label": "EVAL with clause\napp(.(X120, X121), X122, .(X120, X123)) :- app(X121, X122, X123).\nand substitutionX120 -> T90,\nX121 -> T94,\nT22 -> .(T90, T94),\nT23 -> T95,\nX122 -> .(T95, []),\nX123 -> T93,\nT17 -> .(T90, T93),\nT91 -> T94,\nT92 -> T95"
            },
            {
                "from": 270,
                "to": 273,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 271,
                "to": 293,
                "label": "EVAL with clause\napp([], X130, X130).\nand substitutionT22 -> [],\nT23 -> T102,\nX130 -> .(T102, []),\nT17 -> .(T102, [])"
            },
            {
                "from": 271,
                "to": 294,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 272,
                "to": 188,
                "label": "INSTANCE with matching:\nT22 -> T94\nT23 -> T95\nT17 -> T93"
            },
            {
                "from": 293,
                "to": 295,
                "label": "SUCCESS"
            },
            {
                "from": 296,
                "to": 298,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(98)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f1_in(T17) -> U1(f178_in(T17), T17)
   U1(f178_out1(X18, T19), T17) -> f1_out1
   f1_in([]) -> f1_out1
   f187_in -> U2(f197_in)
   U2(f197_out1) -> f187_out1
   f187_in -> f187_out1
   f202_in -> U3(f202_in)
   U3(f202_out1) -> f202_out1
   f202_in -> f202_out1
   f188_in(.(T90, T93)) -> U4(f188_in(T93), .(T90, T93))
   U4(f188_out1(T94, T95), .(T90, T93)) -> f188_out1(.(T90, T94), T95)
   f188_in(.(T102, [])) -> f188_out1([], T102)
   f178_in(T17) -> U5(f187_in, T17)
   U5(f187_out1, T17) -> U6(f188_in(T17), T17)
   U6(f188_out1(T22, T23), T17) -> f178_out1(T22, T23)
   f197_in -> U7(f187_in)
   U7(f187_out1) -> U8(f202_in)
   U8(f202_out1) -> f197_out1

Q is empty.

----------------------------------------

(99) QTRSRRRProof (EQUIVALENT)
Used ordering:
f1_in/1(YES)
U1/2(YES,YES)
f178_in/1(YES)
f178_out1/2(YES,YES)
f1_out1/0)
[]/0)
f187_in/0)
U2/1)YES(
f197_in/0)
f197_out1/0)
f187_out1/0)
f202_in/0)
U3/1)YES(
f202_out1/0)
f188_in/1(YES)
./2(YES,YES)
U4/2(YES,YES)
f188_out1/2(YES,YES)
U5/2(YES,YES)
U6/2(YES,YES)
U7/1)YES(
U8/1)YES(

Quasi precedence:
f1_in_1 > U1_2 > f1_out1
f1_in_1 > [f178_in_1, f187_in, f197_in] > [f197_out1, f187_out1, f202_in, f202_out1] > U6_2 > f1_out1
f1_in_1 > [f178_in_1, f187_in, f197_in] > [f188_in_1, U5_2] > U4_2 > f188_out1_2 > f178_out1_2 > f1_out1
f1_in_1 > [f178_in_1, f187_in, f197_in] > [f188_in_1, U5_2] > U4_2 > f188_out1_2 > [[], ._2] > f1_out1
f1_in_1 > [f178_in_1, f187_in, f197_in] > [f188_in_1, U5_2] > U6_2 > f1_out1


Status:
f1_in_1: multiset status
U1_2: multiset status
f178_in_1: multiset status
f178_out1_2: multiset status
f1_out1: multiset status
[]: multiset status
f187_in: multiset status
f197_in: multiset status
f197_out1: multiset status
f187_out1: multiset status
f202_in: multiset status
f202_out1: multiset status
f188_in_1: multiset status
._2: multiset status
U4_2: multiset status
f188_out1_2: multiset status
U5_2: multiset status
U6_2: multiset status

With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f1_in(T17) -> U1(f178_in(T17), T17)
   U1(f178_out1(X18, T19), T17) -> f1_out1
   f1_in([]) -> f1_out1
   f187_in -> f187_out1
   f188_in(.(T90, T93)) -> U4(f188_in(T93), .(T90, T93))
   U4(f188_out1(T94, T95), .(T90, T93)) -> f188_out1(.(T90, T94), T95)
   f188_in(.(T102, [])) -> f188_out1([], T102)
   f178_in(T17) -> U5(f187_in, T17)
   U5(f187_out1, T17) -> U6(f188_in(T17), T17)
   U6(f188_out1(T22, T23), T17) -> f178_out1(T22, T23)




----------------------------------------

(100)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f187_in -> U2(f197_in)
   U2(f197_out1) -> f187_out1
   f202_in -> U3(f202_in)
   U3(f202_out1) -> f202_out1
   f202_in -> f202_out1
   f197_in -> U7(f187_in)
   U7(f187_out1) -> U8(f202_in)
   U8(f202_out1) -> f197_out1

Q is empty.

----------------------------------------

(101) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U2(x_1)) = 2*x_1
   POL(U3(x_1)) = x_1
   POL(U7(x_1)) = 2*x_1
   POL(U8(x_1)) = 2 + x_1
   POL(f187_in) = 0
   POL(f187_out1) = 2
   POL(f197_in) = 0
   POL(f197_out1) = 1
   POL(f202_in) = 1
   POL(f202_out1) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f202_in -> f202_out1
   U7(f187_out1) -> U8(f202_in)
   U8(f202_out1) -> f197_out1




----------------------------------------

(102)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f187_in -> U2(f197_in)
   U2(f197_out1) -> f187_out1
   f202_in -> U3(f202_in)
   U3(f202_out1) -> f202_out1
   f197_in -> U7(f187_in)

Q is empty.

----------------------------------------

(103) QTRSRRRProof (EQUIVALENT)
Used ordering:
f187_in/0)
U2/1)YES(
f197_in/0)
f197_out1/0)
f187_out1/0)
f202_in/0)
U3/1)YES(
f202_out1/0)
U7/1)YES(

Quasi precedence:
[f187_in, f197_in]
f197_out1 > f187_out1


Status:
f187_in: multiset status
f197_in: multiset status
f197_out1: multiset status
f187_out1: multiset status
f202_in: multiset status
f202_out1: multiset status

With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U2(f197_out1) -> f187_out1




----------------------------------------

(104)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f187_in -> U2(f197_in)
   f202_in -> U3(f202_in)
   U3(f202_out1) -> f202_out1
   f197_in -> U7(f187_in)

Q is empty.

----------------------------------------

(105) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U2(x_1)) = 2*x_1
   POL(U3(x_1)) = 2*x_1
   POL(U7(x_1)) = 2*x_1
   POL(f187_in) = 0
   POL(f197_in) = 0
   POL(f202_in) = 0
   POL(f202_out1) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U3(f202_out1) -> f202_out1




----------------------------------------

(106)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f187_in -> U2(f197_in)
   f202_in -> U3(f202_in)
   f197_in -> U7(f187_in)

Q is empty.
