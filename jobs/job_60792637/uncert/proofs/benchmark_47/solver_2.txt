YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/HpHr2.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

mult(g,g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Clauses:

mult(X1, 0, 0).
mult(X, s(Y), Z) :- ','(mult(X, Y, W), sum(W, X, Z)).
sum(X, 0, X).
sum(X, s(Y), s(Z)) :- sum(X, Y, Z).


Query: mult(g,g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

mult_in_3: (b,b,f)

sum_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   mult_in_gga(X1, 0, 0) -> mult_out_gga(X1, 0, 0)
   mult_in_gga(X, s(Y), Z) -> U1_gga(X, Y, Z, mult_in_gga(X, Y, W))
   U1_gga(X, Y, Z, mult_out_gga(X, Y, W)) -> U2_gga(X, Y, Z, sum_in_gga(W, X, Z))
   sum_in_gga(X, 0, X) -> sum_out_gga(X, 0, X)
   sum_in_gga(X, s(Y), s(Z)) -> U3_gga(X, Y, Z, sum_in_gga(X, Y, Z))
   U3_gga(X, Y, Z, sum_out_gga(X, Y, Z)) -> sum_out_gga(X, s(Y), s(Z))
   U2_gga(X, Y, Z, sum_out_gga(W, X, Z)) -> mult_out_gga(X, s(Y), Z)

The argument filtering Pi contains the following mapping:
mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

0  =  0

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

s(x1)  =  s(x1)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x1, x2, x4)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x1, x2, x4)

sum_in_gga(x1, x2, x3)  =  sum_in_gga(x1, x2)

sum_out_gga(x1, x2, x3)  =  sum_out_gga(x1, x2, x3)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   mult_in_gga(X1, 0, 0) -> mult_out_gga(X1, 0, 0)
   mult_in_gga(X, s(Y), Z) -> U1_gga(X, Y, Z, mult_in_gga(X, Y, W))
   U1_gga(X, Y, Z, mult_out_gga(X, Y, W)) -> U2_gga(X, Y, Z, sum_in_gga(W, X, Z))
   sum_in_gga(X, 0, X) -> sum_out_gga(X, 0, X)
   sum_in_gga(X, s(Y), s(Z)) -> U3_gga(X, Y, Z, sum_in_gga(X, Y, Z))
   U3_gga(X, Y, Z, sum_out_gga(X, Y, Z)) -> sum_out_gga(X, s(Y), s(Z))
   U2_gga(X, Y, Z, sum_out_gga(W, X, Z)) -> mult_out_gga(X, s(Y), Z)

The argument filtering Pi contains the following mapping:
mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

0  =  0

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

s(x1)  =  s(x1)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x1, x2, x4)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x1, x2, x4)

sum_in_gga(x1, x2, x3)  =  sum_in_gga(x1, x2)

sum_out_gga(x1, x2, x3)  =  sum_out_gga(x1, x2, x3)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x4)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MULT_IN_GGA(X, s(Y), Z) -> U1_GGA(X, Y, Z, mult_in_gga(X, Y, W))
   MULT_IN_GGA(X, s(Y), Z) -> MULT_IN_GGA(X, Y, W)
   U1_GGA(X, Y, Z, mult_out_gga(X, Y, W)) -> U2_GGA(X, Y, Z, sum_in_gga(W, X, Z))
   U1_GGA(X, Y, Z, mult_out_gga(X, Y, W)) -> SUM_IN_GGA(W, X, Z)
   SUM_IN_GGA(X, s(Y), s(Z)) -> U3_GGA(X, Y, Z, sum_in_gga(X, Y, Z))
   SUM_IN_GGA(X, s(Y), s(Z)) -> SUM_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   mult_in_gga(X1, 0, 0) -> mult_out_gga(X1, 0, 0)
   mult_in_gga(X, s(Y), Z) -> U1_gga(X, Y, Z, mult_in_gga(X, Y, W))
   U1_gga(X, Y, Z, mult_out_gga(X, Y, W)) -> U2_gga(X, Y, Z, sum_in_gga(W, X, Z))
   sum_in_gga(X, 0, X) -> sum_out_gga(X, 0, X)
   sum_in_gga(X, s(Y), s(Z)) -> U3_gga(X, Y, Z, sum_in_gga(X, Y, Z))
   U3_gga(X, Y, Z, sum_out_gga(X, Y, Z)) -> sum_out_gga(X, s(Y), s(Z))
   U2_gga(X, Y, Z, sum_out_gga(W, X, Z)) -> mult_out_gga(X, s(Y), Z)

The argument filtering Pi contains the following mapping:
mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

0  =  0

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

s(x1)  =  s(x1)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x1, x2, x4)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x1, x2, x4)

sum_in_gga(x1, x2, x3)  =  sum_in_gga(x1, x2)

sum_out_gga(x1, x2, x3)  =  sum_out_gga(x1, x2, x3)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x4)

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4)  =  U1_GGA(x1, x2, x4)

U2_GGA(x1, x2, x3, x4)  =  U2_GGA(x1, x2, x4)

SUM_IN_GGA(x1, x2, x3)  =  SUM_IN_GGA(x1, x2)

U3_GGA(x1, x2, x3, x4)  =  U3_GGA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MULT_IN_GGA(X, s(Y), Z) -> U1_GGA(X, Y, Z, mult_in_gga(X, Y, W))
   MULT_IN_GGA(X, s(Y), Z) -> MULT_IN_GGA(X, Y, W)
   U1_GGA(X, Y, Z, mult_out_gga(X, Y, W)) -> U2_GGA(X, Y, Z, sum_in_gga(W, X, Z))
   U1_GGA(X, Y, Z, mult_out_gga(X, Y, W)) -> SUM_IN_GGA(W, X, Z)
   SUM_IN_GGA(X, s(Y), s(Z)) -> U3_GGA(X, Y, Z, sum_in_gga(X, Y, Z))
   SUM_IN_GGA(X, s(Y), s(Z)) -> SUM_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   mult_in_gga(X1, 0, 0) -> mult_out_gga(X1, 0, 0)
   mult_in_gga(X, s(Y), Z) -> U1_gga(X, Y, Z, mult_in_gga(X, Y, W))
   U1_gga(X, Y, Z, mult_out_gga(X, Y, W)) -> U2_gga(X, Y, Z, sum_in_gga(W, X, Z))
   sum_in_gga(X, 0, X) -> sum_out_gga(X, 0, X)
   sum_in_gga(X, s(Y), s(Z)) -> U3_gga(X, Y, Z, sum_in_gga(X, Y, Z))
   U3_gga(X, Y, Z, sum_out_gga(X, Y, Z)) -> sum_out_gga(X, s(Y), s(Z))
   U2_gga(X, Y, Z, sum_out_gga(W, X, Z)) -> mult_out_gga(X, s(Y), Z)

The argument filtering Pi contains the following mapping:
mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

0  =  0

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

s(x1)  =  s(x1)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x1, x2, x4)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x1, x2, x4)

sum_in_gga(x1, x2, x3)  =  sum_in_gga(x1, x2)

sum_out_gga(x1, x2, x3)  =  sum_out_gga(x1, x2, x3)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x4)

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4)  =  U1_GGA(x1, x2, x4)

U2_GGA(x1, x2, x3, x4)  =  U2_GGA(x1, x2, x4)

SUM_IN_GGA(x1, x2, x3)  =  SUM_IN_GGA(x1, x2)

U3_GGA(x1, x2, x3, x4)  =  U3_GGA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUM_IN_GGA(X, s(Y), s(Z)) -> SUM_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   mult_in_gga(X1, 0, 0) -> mult_out_gga(X1, 0, 0)
   mult_in_gga(X, s(Y), Z) -> U1_gga(X, Y, Z, mult_in_gga(X, Y, W))
   U1_gga(X, Y, Z, mult_out_gga(X, Y, W)) -> U2_gga(X, Y, Z, sum_in_gga(W, X, Z))
   sum_in_gga(X, 0, X) -> sum_out_gga(X, 0, X)
   sum_in_gga(X, s(Y), s(Z)) -> U3_gga(X, Y, Z, sum_in_gga(X, Y, Z))
   U3_gga(X, Y, Z, sum_out_gga(X, Y, Z)) -> sum_out_gga(X, s(Y), s(Z))
   U2_gga(X, Y, Z, sum_out_gga(W, X, Z)) -> mult_out_gga(X, s(Y), Z)

The argument filtering Pi contains the following mapping:
mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

0  =  0

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

s(x1)  =  s(x1)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x1, x2, x4)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x1, x2, x4)

sum_in_gga(x1, x2, x3)  =  sum_in_gga(x1, x2)

sum_out_gga(x1, x2, x3)  =  sum_out_gga(x1, x2, x3)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x4)

SUM_IN_GGA(x1, x2, x3)  =  SUM_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUM_IN_GGA(X, s(Y), s(Z)) -> SUM_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

SUM_IN_GGA(x1, x2, x3)  =  SUM_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUM_IN_GGA(X, s(Y)) -> SUM_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SUM_IN_GGA(X, s(Y)) -> SUM_IN_GGA(X, Y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MULT_IN_GGA(X, s(Y), Z) -> MULT_IN_GGA(X, Y, W)

The TRS R consists of the following rules:

   mult_in_gga(X1, 0, 0) -> mult_out_gga(X1, 0, 0)
   mult_in_gga(X, s(Y), Z) -> U1_gga(X, Y, Z, mult_in_gga(X, Y, W))
   U1_gga(X, Y, Z, mult_out_gga(X, Y, W)) -> U2_gga(X, Y, Z, sum_in_gga(W, X, Z))
   sum_in_gga(X, 0, X) -> sum_out_gga(X, 0, X)
   sum_in_gga(X, s(Y), s(Z)) -> U3_gga(X, Y, Z, sum_in_gga(X, Y, Z))
   U3_gga(X, Y, Z, sum_out_gga(X, Y, Z)) -> sum_out_gga(X, s(Y), s(Z))
   U2_gga(X, Y, Z, sum_out_gga(W, X, Z)) -> mult_out_gga(X, s(Y), Z)

The argument filtering Pi contains the following mapping:
mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

0  =  0

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

s(x1)  =  s(x1)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x1, x2, x4)

U2_gga(x1, x2, x3, x4)  =  U2_gga(x1, x2, x4)

sum_in_gga(x1, x2, x3)  =  sum_in_gga(x1, x2)

sum_out_gga(x1, x2, x3)  =  sum_out_gga(x1, x2, x3)

U3_gga(x1, x2, x3, x4)  =  U3_gga(x1, x2, x4)

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MULT_IN_GGA(X, s(Y), Z) -> MULT_IN_GGA(X, Y, W)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MULT_IN_GGA(X, s(Y)) -> MULT_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MULT_IN_GGA(X, s(Y)) -> MULT_IN_GGA(X, Y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(20)
YES
