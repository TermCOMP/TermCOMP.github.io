YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/pmNvF.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

rev(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) PiDPToQDPProof [SOUND, 0 ms]
(10) QDP
(11) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Clauses:

rev(LS, RES) :- r1(LS, [], RES).
r1([], RES, RES).
r1(.(X, Xs), Accm, RES) :- r1(Xs, .(X, Accm), RES).


Query: rev(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

rev_in_2: (b,f)

r1_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   rev_in_ga(LS, RES) -> U1_ga(LS, RES, r1_in_gga(LS, [], RES))
   r1_in_gga([], RES, RES) -> r1_out_gga([], RES, RES)
   r1_in_gga(.(X, Xs), Accm, RES) -> U2_gga(X, Xs, Accm, RES, r1_in_gga(Xs, .(X, Accm), RES))
   U2_gga(X, Xs, Accm, RES, r1_out_gga(Xs, .(X, Accm), RES)) -> r1_out_gga(.(X, Xs), Accm, RES)
   U1_ga(LS, RES, r1_out_gga(LS, [], RES)) -> rev_out_ga(LS, RES)

The argument filtering Pi contains the following mapping:
rev_in_ga(x1, x2)  =  rev_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

r1_in_gga(x1, x2, x3)  =  r1_in_gga(x1, x2)

[]  =  []

r1_out_gga(x1, x2, x3)  =  r1_out_gga(x3)

.(x1, x2)  =  .(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

rev_out_ga(x1, x2)  =  rev_out_ga(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   rev_in_ga(LS, RES) -> U1_ga(LS, RES, r1_in_gga(LS, [], RES))
   r1_in_gga([], RES, RES) -> r1_out_gga([], RES, RES)
   r1_in_gga(.(X, Xs), Accm, RES) -> U2_gga(X, Xs, Accm, RES, r1_in_gga(Xs, .(X, Accm), RES))
   U2_gga(X, Xs, Accm, RES, r1_out_gga(Xs, .(X, Accm), RES)) -> r1_out_gga(.(X, Xs), Accm, RES)
   U1_ga(LS, RES, r1_out_gga(LS, [], RES)) -> rev_out_ga(LS, RES)

The argument filtering Pi contains the following mapping:
rev_in_ga(x1, x2)  =  rev_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

r1_in_gga(x1, x2, x3)  =  r1_in_gga(x1, x2)

[]  =  []

r1_out_gga(x1, x2, x3)  =  r1_out_gga(x3)

.(x1, x2)  =  .(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

rev_out_ga(x1, x2)  =  rev_out_ga(x2)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   REV_IN_GA(LS, RES) -> U1_GA(LS, RES, r1_in_gga(LS, [], RES))
   REV_IN_GA(LS, RES) -> R1_IN_GGA(LS, [], RES)
   R1_IN_GGA(.(X, Xs), Accm, RES) -> U2_GGA(X, Xs, Accm, RES, r1_in_gga(Xs, .(X, Accm), RES))
   R1_IN_GGA(.(X, Xs), Accm, RES) -> R1_IN_GGA(Xs, .(X, Accm), RES)

The TRS R consists of the following rules:

   rev_in_ga(LS, RES) -> U1_ga(LS, RES, r1_in_gga(LS, [], RES))
   r1_in_gga([], RES, RES) -> r1_out_gga([], RES, RES)
   r1_in_gga(.(X, Xs), Accm, RES) -> U2_gga(X, Xs, Accm, RES, r1_in_gga(Xs, .(X, Accm), RES))
   U2_gga(X, Xs, Accm, RES, r1_out_gga(Xs, .(X, Accm), RES)) -> r1_out_gga(.(X, Xs), Accm, RES)
   U1_ga(LS, RES, r1_out_gga(LS, [], RES)) -> rev_out_ga(LS, RES)

The argument filtering Pi contains the following mapping:
rev_in_ga(x1, x2)  =  rev_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

r1_in_gga(x1, x2, x3)  =  r1_in_gga(x1, x2)

[]  =  []

r1_out_gga(x1, x2, x3)  =  r1_out_gga(x3)

.(x1, x2)  =  .(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

rev_out_ga(x1, x2)  =  rev_out_ga(x2)

REV_IN_GA(x1, x2)  =  REV_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

R1_IN_GGA(x1, x2, x3)  =  R1_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REV_IN_GA(LS, RES) -> U1_GA(LS, RES, r1_in_gga(LS, [], RES))
   REV_IN_GA(LS, RES) -> R1_IN_GGA(LS, [], RES)
   R1_IN_GGA(.(X, Xs), Accm, RES) -> U2_GGA(X, Xs, Accm, RES, r1_in_gga(Xs, .(X, Accm), RES))
   R1_IN_GGA(.(X, Xs), Accm, RES) -> R1_IN_GGA(Xs, .(X, Accm), RES)

The TRS R consists of the following rules:

   rev_in_ga(LS, RES) -> U1_ga(LS, RES, r1_in_gga(LS, [], RES))
   r1_in_gga([], RES, RES) -> r1_out_gga([], RES, RES)
   r1_in_gga(.(X, Xs), Accm, RES) -> U2_gga(X, Xs, Accm, RES, r1_in_gga(Xs, .(X, Accm), RES))
   U2_gga(X, Xs, Accm, RES, r1_out_gga(Xs, .(X, Accm), RES)) -> r1_out_gga(.(X, Xs), Accm, RES)
   U1_ga(LS, RES, r1_out_gga(LS, [], RES)) -> rev_out_ga(LS, RES)

The argument filtering Pi contains the following mapping:
rev_in_ga(x1, x2)  =  rev_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

r1_in_gga(x1, x2, x3)  =  r1_in_gga(x1, x2)

[]  =  []

r1_out_gga(x1, x2, x3)  =  r1_out_gga(x3)

.(x1, x2)  =  .(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

rev_out_ga(x1, x2)  =  rev_out_ga(x2)

REV_IN_GA(x1, x2)  =  REV_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

R1_IN_GGA(x1, x2, x3)  =  R1_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   R1_IN_GGA(.(X, Xs), Accm, RES) -> R1_IN_GGA(Xs, .(X, Accm), RES)

The TRS R consists of the following rules:

   rev_in_ga(LS, RES) -> U1_ga(LS, RES, r1_in_gga(LS, [], RES))
   r1_in_gga([], RES, RES) -> r1_out_gga([], RES, RES)
   r1_in_gga(.(X, Xs), Accm, RES) -> U2_gga(X, Xs, Accm, RES, r1_in_gga(Xs, .(X, Accm), RES))
   U2_gga(X, Xs, Accm, RES, r1_out_gga(Xs, .(X, Accm), RES)) -> r1_out_gga(.(X, Xs), Accm, RES)
   U1_ga(LS, RES, r1_out_gga(LS, [], RES)) -> rev_out_ga(LS, RES)

The argument filtering Pi contains the following mapping:
rev_in_ga(x1, x2)  =  rev_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

r1_in_gga(x1, x2, x3)  =  r1_in_gga(x1, x2)

[]  =  []

r1_out_gga(x1, x2, x3)  =  r1_out_gga(x3)

.(x1, x2)  =  .(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

rev_out_ga(x1, x2)  =  rev_out_ga(x2)

R1_IN_GGA(x1, x2, x3)  =  R1_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   R1_IN_GGA(.(X, Xs), Accm, RES) -> R1_IN_GGA(Xs, .(X, Accm), RES)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

R1_IN_GGA(x1, x2, x3)  =  R1_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   R1_IN_GGA(.(X, Xs), Accm) -> R1_IN_GGA(Xs, .(X, Accm))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*R1_IN_GGA(.(X, Xs), Accm) -> R1_IN_GGA(Xs, .(X, Accm))
The graph contains the following edges 1 > 1


----------------------------------------

(12)
YES
