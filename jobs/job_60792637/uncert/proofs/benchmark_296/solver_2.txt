YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/u4716.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

perm(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) PiDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) PiDP
        (24) PiDPToQDPProof [SOUND, 0 ms]
        (25) QDP
        (26) MRRProof [EQUIVALENT, 16 ms]
        (27) QDP
        (28) PisEmptyProof [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
Clauses:

perm([], []).
perm(L, .(H, T)) :- ','(append2(V, .(H, U), L), ','(append1(V, U, W), perm(W, T))).
append1([], L, L).
append1(.(H, L1), L2, .(H, L3)) :- append1(L1, L2, L3).
append2([], L, L).
append2(.(H, L1), L2, .(H, L3)) :- append2(L1, L2, L3).


Query: perm(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

perm_in_2: (b,f)

append2_in_3: (f,f,b)

append1_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(L, .(H, T)) -> U1_ga(L, H, T, append2_in_aag(V, .(H, U), L))
   append2_in_aag([], L, L) -> append2_out_aag([], L, L)
   append2_in_aag(.(H, L1), L2, .(H, L3)) -> U5_aag(H, L1, L2, L3, append2_in_aag(L1, L2, L3))
   U5_aag(H, L1, L2, L3, append2_out_aag(L1, L2, L3)) -> append2_out_aag(.(H, L1), L2, .(H, L3))
   U1_ga(L, H, T, append2_out_aag(V, .(H, U), L)) -> U2_ga(L, H, T, append1_in_gga(V, U, W))
   append1_in_gga([], L, L) -> append1_out_gga([], L, L)
   append1_in_gga(.(H, L1), L2, .(H, L3)) -> U4_gga(H, L1, L2, L3, append1_in_gga(L1, L2, L3))
   U4_gga(H, L1, L2, L3, append1_out_gga(L1, L2, L3)) -> append1_out_gga(.(H, L1), L2, .(H, L3))
   U2_ga(L, H, T, append1_out_gga(V, U, W)) -> U3_ga(L, H, T, perm_in_ga(W, T))
   U3_ga(L, H, T, perm_out_ga(W, T)) -> perm_out_ga(L, .(H, T))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

append2_in_aag(x1, x2, x3)  =  append2_in_aag(x3)

.(x1, x2)  =  .(x2)

append2_out_aag(x1, x2, x3)  =  append2_out_aag(x1, x2)

U5_aag(x1, x2, x3, x4, x5)  =  U5_aag(x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)

append1_in_gga(x1, x2, x3)  =  append1_in_gga(x1, x2)

append1_out_gga(x1, x2, x3)  =  append1_out_gga(x3)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x5)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(L, .(H, T)) -> U1_ga(L, H, T, append2_in_aag(V, .(H, U), L))
   append2_in_aag([], L, L) -> append2_out_aag([], L, L)
   append2_in_aag(.(H, L1), L2, .(H, L3)) -> U5_aag(H, L1, L2, L3, append2_in_aag(L1, L2, L3))
   U5_aag(H, L1, L2, L3, append2_out_aag(L1, L2, L3)) -> append2_out_aag(.(H, L1), L2, .(H, L3))
   U1_ga(L, H, T, append2_out_aag(V, .(H, U), L)) -> U2_ga(L, H, T, append1_in_gga(V, U, W))
   append1_in_gga([], L, L) -> append1_out_gga([], L, L)
   append1_in_gga(.(H, L1), L2, .(H, L3)) -> U4_gga(H, L1, L2, L3, append1_in_gga(L1, L2, L3))
   U4_gga(H, L1, L2, L3, append1_out_gga(L1, L2, L3)) -> append1_out_gga(.(H, L1), L2, .(H, L3))
   U2_ga(L, H, T, append1_out_gga(V, U, W)) -> U3_ga(L, H, T, perm_in_ga(W, T))
   U3_ga(L, H, T, perm_out_ga(W, T)) -> perm_out_ga(L, .(H, T))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

append2_in_aag(x1, x2, x3)  =  append2_in_aag(x3)

.(x1, x2)  =  .(x2)

append2_out_aag(x1, x2, x3)  =  append2_out_aag(x1, x2)

U5_aag(x1, x2, x3, x4, x5)  =  U5_aag(x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)

append1_in_gga(x1, x2, x3)  =  append1_in_gga(x1, x2)

append1_out_gga(x1, x2, x3)  =  append1_out_gga(x3)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x5)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   PERM_IN_GA(L, .(H, T)) -> U1_GA(L, H, T, append2_in_aag(V, .(H, U), L))
   PERM_IN_GA(L, .(H, T)) -> APPEND2_IN_AAG(V, .(H, U), L)
   APPEND2_IN_AAG(.(H, L1), L2, .(H, L3)) -> U5_AAG(H, L1, L2, L3, append2_in_aag(L1, L2, L3))
   APPEND2_IN_AAG(.(H, L1), L2, .(H, L3)) -> APPEND2_IN_AAG(L1, L2, L3)
   U1_GA(L, H, T, append2_out_aag(V, .(H, U), L)) -> U2_GA(L, H, T, append1_in_gga(V, U, W))
   U1_GA(L, H, T, append2_out_aag(V, .(H, U), L)) -> APPEND1_IN_GGA(V, U, W)
   APPEND1_IN_GGA(.(H, L1), L2, .(H, L3)) -> U4_GGA(H, L1, L2, L3, append1_in_gga(L1, L2, L3))
   APPEND1_IN_GGA(.(H, L1), L2, .(H, L3)) -> APPEND1_IN_GGA(L1, L2, L3)
   U2_GA(L, H, T, append1_out_gga(V, U, W)) -> U3_GA(L, H, T, perm_in_ga(W, T))
   U2_GA(L, H, T, append1_out_gga(V, U, W)) -> PERM_IN_GA(W, T)

The TRS R consists of the following rules:

   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(L, .(H, T)) -> U1_ga(L, H, T, append2_in_aag(V, .(H, U), L))
   append2_in_aag([], L, L) -> append2_out_aag([], L, L)
   append2_in_aag(.(H, L1), L2, .(H, L3)) -> U5_aag(H, L1, L2, L3, append2_in_aag(L1, L2, L3))
   U5_aag(H, L1, L2, L3, append2_out_aag(L1, L2, L3)) -> append2_out_aag(.(H, L1), L2, .(H, L3))
   U1_ga(L, H, T, append2_out_aag(V, .(H, U), L)) -> U2_ga(L, H, T, append1_in_gga(V, U, W))
   append1_in_gga([], L, L) -> append1_out_gga([], L, L)
   append1_in_gga(.(H, L1), L2, .(H, L3)) -> U4_gga(H, L1, L2, L3, append1_in_gga(L1, L2, L3))
   U4_gga(H, L1, L2, L3, append1_out_gga(L1, L2, L3)) -> append1_out_gga(.(H, L1), L2, .(H, L3))
   U2_ga(L, H, T, append1_out_gga(V, U, W)) -> U3_ga(L, H, T, perm_in_ga(W, T))
   U3_ga(L, H, T, perm_out_ga(W, T)) -> perm_out_ga(L, .(H, T))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

append2_in_aag(x1, x2, x3)  =  append2_in_aag(x3)

.(x1, x2)  =  .(x2)

append2_out_aag(x1, x2, x3)  =  append2_out_aag(x1, x2)

U5_aag(x1, x2, x3, x4, x5)  =  U5_aag(x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)

append1_in_gga(x1, x2, x3)  =  append1_in_gga(x1, x2)

append1_out_gga(x1, x2, x3)  =  append1_out_gga(x3)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x5)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x4)

APPEND2_IN_AAG(x1, x2, x3)  =  APPEND2_IN_AAG(x3)

U5_AAG(x1, x2, x3, x4, x5)  =  U5_AAG(x5)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x4)

APPEND1_IN_GGA(x1, x2, x3)  =  APPEND1_IN_GGA(x1, x2)

U4_GGA(x1, x2, x3, x4, x5)  =  U4_GGA(x5)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PERM_IN_GA(L, .(H, T)) -> U1_GA(L, H, T, append2_in_aag(V, .(H, U), L))
   PERM_IN_GA(L, .(H, T)) -> APPEND2_IN_AAG(V, .(H, U), L)
   APPEND2_IN_AAG(.(H, L1), L2, .(H, L3)) -> U5_AAG(H, L1, L2, L3, append2_in_aag(L1, L2, L3))
   APPEND2_IN_AAG(.(H, L1), L2, .(H, L3)) -> APPEND2_IN_AAG(L1, L2, L3)
   U1_GA(L, H, T, append2_out_aag(V, .(H, U), L)) -> U2_GA(L, H, T, append1_in_gga(V, U, W))
   U1_GA(L, H, T, append2_out_aag(V, .(H, U), L)) -> APPEND1_IN_GGA(V, U, W)
   APPEND1_IN_GGA(.(H, L1), L2, .(H, L3)) -> U4_GGA(H, L1, L2, L3, append1_in_gga(L1, L2, L3))
   APPEND1_IN_GGA(.(H, L1), L2, .(H, L3)) -> APPEND1_IN_GGA(L1, L2, L3)
   U2_GA(L, H, T, append1_out_gga(V, U, W)) -> U3_GA(L, H, T, perm_in_ga(W, T))
   U2_GA(L, H, T, append1_out_gga(V, U, W)) -> PERM_IN_GA(W, T)

The TRS R consists of the following rules:

   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(L, .(H, T)) -> U1_ga(L, H, T, append2_in_aag(V, .(H, U), L))
   append2_in_aag([], L, L) -> append2_out_aag([], L, L)
   append2_in_aag(.(H, L1), L2, .(H, L3)) -> U5_aag(H, L1, L2, L3, append2_in_aag(L1, L2, L3))
   U5_aag(H, L1, L2, L3, append2_out_aag(L1, L2, L3)) -> append2_out_aag(.(H, L1), L2, .(H, L3))
   U1_ga(L, H, T, append2_out_aag(V, .(H, U), L)) -> U2_ga(L, H, T, append1_in_gga(V, U, W))
   append1_in_gga([], L, L) -> append1_out_gga([], L, L)
   append1_in_gga(.(H, L1), L2, .(H, L3)) -> U4_gga(H, L1, L2, L3, append1_in_gga(L1, L2, L3))
   U4_gga(H, L1, L2, L3, append1_out_gga(L1, L2, L3)) -> append1_out_gga(.(H, L1), L2, .(H, L3))
   U2_ga(L, H, T, append1_out_gga(V, U, W)) -> U3_ga(L, H, T, perm_in_ga(W, T))
   U3_ga(L, H, T, perm_out_ga(W, T)) -> perm_out_ga(L, .(H, T))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

append2_in_aag(x1, x2, x3)  =  append2_in_aag(x3)

.(x1, x2)  =  .(x2)

append2_out_aag(x1, x2, x3)  =  append2_out_aag(x1, x2)

U5_aag(x1, x2, x3, x4, x5)  =  U5_aag(x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)

append1_in_gga(x1, x2, x3)  =  append1_in_gga(x1, x2)

append1_out_gga(x1, x2, x3)  =  append1_out_gga(x3)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x5)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x4)

APPEND2_IN_AAG(x1, x2, x3)  =  APPEND2_IN_AAG(x3)

U5_AAG(x1, x2, x3, x4, x5)  =  U5_AAG(x5)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x4)

APPEND1_IN_GGA(x1, x2, x3)  =  APPEND1_IN_GGA(x1, x2)

U4_GGA(x1, x2, x3, x4, x5)  =  U4_GGA(x5)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND1_IN_GGA(.(H, L1), L2, .(H, L3)) -> APPEND1_IN_GGA(L1, L2, L3)

The TRS R consists of the following rules:

   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(L, .(H, T)) -> U1_ga(L, H, T, append2_in_aag(V, .(H, U), L))
   append2_in_aag([], L, L) -> append2_out_aag([], L, L)
   append2_in_aag(.(H, L1), L2, .(H, L3)) -> U5_aag(H, L1, L2, L3, append2_in_aag(L1, L2, L3))
   U5_aag(H, L1, L2, L3, append2_out_aag(L1, L2, L3)) -> append2_out_aag(.(H, L1), L2, .(H, L3))
   U1_ga(L, H, T, append2_out_aag(V, .(H, U), L)) -> U2_ga(L, H, T, append1_in_gga(V, U, W))
   append1_in_gga([], L, L) -> append1_out_gga([], L, L)
   append1_in_gga(.(H, L1), L2, .(H, L3)) -> U4_gga(H, L1, L2, L3, append1_in_gga(L1, L2, L3))
   U4_gga(H, L1, L2, L3, append1_out_gga(L1, L2, L3)) -> append1_out_gga(.(H, L1), L2, .(H, L3))
   U2_ga(L, H, T, append1_out_gga(V, U, W)) -> U3_ga(L, H, T, perm_in_ga(W, T))
   U3_ga(L, H, T, perm_out_ga(W, T)) -> perm_out_ga(L, .(H, T))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

append2_in_aag(x1, x2, x3)  =  append2_in_aag(x3)

.(x1, x2)  =  .(x2)

append2_out_aag(x1, x2, x3)  =  append2_out_aag(x1, x2)

U5_aag(x1, x2, x3, x4, x5)  =  U5_aag(x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)

append1_in_gga(x1, x2, x3)  =  append1_in_gga(x1, x2)

append1_out_gga(x1, x2, x3)  =  append1_out_gga(x3)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x5)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

APPEND1_IN_GGA(x1, x2, x3)  =  APPEND1_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND1_IN_GGA(.(H, L1), L2, .(H, L3)) -> APPEND1_IN_GGA(L1, L2, L3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPEND1_IN_GGA(x1, x2, x3)  =  APPEND1_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND1_IN_GGA(.(L1), L2) -> APPEND1_IN_GGA(L1, L2)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPEND1_IN_GGA(.(L1), L2) -> APPEND1_IN_GGA(L1, L2)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND2_IN_AAG(.(H, L1), L2, .(H, L3)) -> APPEND2_IN_AAG(L1, L2, L3)

The TRS R consists of the following rules:

   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(L, .(H, T)) -> U1_ga(L, H, T, append2_in_aag(V, .(H, U), L))
   append2_in_aag([], L, L) -> append2_out_aag([], L, L)
   append2_in_aag(.(H, L1), L2, .(H, L3)) -> U5_aag(H, L1, L2, L3, append2_in_aag(L1, L2, L3))
   U5_aag(H, L1, L2, L3, append2_out_aag(L1, L2, L3)) -> append2_out_aag(.(H, L1), L2, .(H, L3))
   U1_ga(L, H, T, append2_out_aag(V, .(H, U), L)) -> U2_ga(L, H, T, append1_in_gga(V, U, W))
   append1_in_gga([], L, L) -> append1_out_gga([], L, L)
   append1_in_gga(.(H, L1), L2, .(H, L3)) -> U4_gga(H, L1, L2, L3, append1_in_gga(L1, L2, L3))
   U4_gga(H, L1, L2, L3, append1_out_gga(L1, L2, L3)) -> append1_out_gga(.(H, L1), L2, .(H, L3))
   U2_ga(L, H, T, append1_out_gga(V, U, W)) -> U3_ga(L, H, T, perm_in_ga(W, T))
   U3_ga(L, H, T, perm_out_ga(W, T)) -> perm_out_ga(L, .(H, T))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

append2_in_aag(x1, x2, x3)  =  append2_in_aag(x3)

.(x1, x2)  =  .(x2)

append2_out_aag(x1, x2, x3)  =  append2_out_aag(x1, x2)

U5_aag(x1, x2, x3, x4, x5)  =  U5_aag(x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)

append1_in_gga(x1, x2, x3)  =  append1_in_gga(x1, x2)

append1_out_gga(x1, x2, x3)  =  append1_out_gga(x3)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x5)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

APPEND2_IN_AAG(x1, x2, x3)  =  APPEND2_IN_AAG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND2_IN_AAG(.(H, L1), L2, .(H, L3)) -> APPEND2_IN_AAG(L1, L2, L3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

APPEND2_IN_AAG(x1, x2, x3)  =  APPEND2_IN_AAG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND2_IN_AAG(.(L3)) -> APPEND2_IN_AAG(L3)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPEND2_IN_AAG(.(L3)) -> APPEND2_IN_AAG(L3)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(L, H, T, append2_out_aag(V, .(H, U), L)) -> U2_GA(L, H, T, append1_in_gga(V, U, W))
   U2_GA(L, H, T, append1_out_gga(V, U, W)) -> PERM_IN_GA(W, T)
   PERM_IN_GA(L, .(H, T)) -> U1_GA(L, H, T, append2_in_aag(V, .(H, U), L))

The TRS R consists of the following rules:

   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(L, .(H, T)) -> U1_ga(L, H, T, append2_in_aag(V, .(H, U), L))
   append2_in_aag([], L, L) -> append2_out_aag([], L, L)
   append2_in_aag(.(H, L1), L2, .(H, L3)) -> U5_aag(H, L1, L2, L3, append2_in_aag(L1, L2, L3))
   U5_aag(H, L1, L2, L3, append2_out_aag(L1, L2, L3)) -> append2_out_aag(.(H, L1), L2, .(H, L3))
   U1_ga(L, H, T, append2_out_aag(V, .(H, U), L)) -> U2_ga(L, H, T, append1_in_gga(V, U, W))
   append1_in_gga([], L, L) -> append1_out_gga([], L, L)
   append1_in_gga(.(H, L1), L2, .(H, L3)) -> U4_gga(H, L1, L2, L3, append1_in_gga(L1, L2, L3))
   U4_gga(H, L1, L2, L3, append1_out_gga(L1, L2, L3)) -> append1_out_gga(.(H, L1), L2, .(H, L3))
   U2_ga(L, H, T, append1_out_gga(V, U, W)) -> U3_ga(L, H, T, perm_in_ga(W, T))
   U3_ga(L, H, T, perm_out_ga(W, T)) -> perm_out_ga(L, .(H, T))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

append2_in_aag(x1, x2, x3)  =  append2_in_aag(x3)

.(x1, x2)  =  .(x2)

append2_out_aag(x1, x2, x3)  =  append2_out_aag(x1, x2)

U5_aag(x1, x2, x3, x4, x5)  =  U5_aag(x5)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)

append1_in_gga(x1, x2, x3)  =  append1_in_gga(x1, x2)

append1_out_gga(x1, x2, x3)  =  append1_out_gga(x3)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x5)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x4)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(23)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(L, H, T, append2_out_aag(V, .(H, U), L)) -> U2_GA(L, H, T, append1_in_gga(V, U, W))
   U2_GA(L, H, T, append1_out_gga(V, U, W)) -> PERM_IN_GA(W, T)
   PERM_IN_GA(L, .(H, T)) -> U1_GA(L, H, T, append2_in_aag(V, .(H, U), L))

The TRS R consists of the following rules:

   append1_in_gga([], L, L) -> append1_out_gga([], L, L)
   append1_in_gga(.(H, L1), L2, .(H, L3)) -> U4_gga(H, L1, L2, L3, append1_in_gga(L1, L2, L3))
   append2_in_aag([], L, L) -> append2_out_aag([], L, L)
   append2_in_aag(.(H, L1), L2, .(H, L3)) -> U5_aag(H, L1, L2, L3, append2_in_aag(L1, L2, L3))
   U4_gga(H, L1, L2, L3, append1_out_gga(L1, L2, L3)) -> append1_out_gga(.(H, L1), L2, .(H, L3))
   U5_aag(H, L1, L2, L3, append2_out_aag(L1, L2, L3)) -> append2_out_aag(.(H, L1), L2, .(H, L3))

The argument filtering Pi contains the following mapping:
[]  =  []

append2_in_aag(x1, x2, x3)  =  append2_in_aag(x3)

.(x1, x2)  =  .(x2)

append2_out_aag(x1, x2, x3)  =  append2_out_aag(x1, x2)

U5_aag(x1, x2, x3, x4, x5)  =  U5_aag(x5)

append1_in_gga(x1, x2, x3)  =  append1_in_gga(x1, x2)

append1_out_gga(x1, x2, x3)  =  append1_out_gga(x3)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x5)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x4)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(24) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GA(append2_out_aag(V, .(U))) -> U2_GA(append1_in_gga(V, U))
   U2_GA(append1_out_gga(W)) -> PERM_IN_GA(W)
   PERM_IN_GA(L) -> U1_GA(append2_in_aag(L))

The TRS R consists of the following rules:

   append1_in_gga([], L) -> append1_out_gga(L)
   append1_in_gga(.(L1), L2) -> U4_gga(append1_in_gga(L1, L2))
   append2_in_aag(L) -> append2_out_aag([], L)
   append2_in_aag(.(L3)) -> U5_aag(append2_in_aag(L3))
   U4_gga(append1_out_gga(L3)) -> append1_out_gga(.(L3))
   U5_aag(append2_out_aag(L1, L2)) -> append2_out_aag(.(L1), L2)

The set Q consists of the following terms:

   append1_in_gga(x0, x1)
   append2_in_aag(x0)
   U4_gga(x0)
   U5_aag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U1_GA(append2_out_aag(V, .(U))) -> U2_GA(append1_in_gga(V, U))
   U2_GA(append1_out_gga(W)) -> PERM_IN_GA(W)
   PERM_IN_GA(L) -> U1_GA(append2_in_aag(L))

Strictly oriented rules of the TRS R:

   append1_in_gga([], L) -> append1_out_gga(L)
   append1_in_gga(.(L1), L2) -> U4_gga(append1_in_gga(L1, L2))
   append2_in_aag(L) -> append2_out_aag([], L)
   append2_in_aag(.(L3)) -> U5_aag(append2_in_aag(L3))
   U4_gga(append1_out_gga(L3)) -> append1_out_gga(.(L3))
   U5_aag(append2_out_aag(L1, L2)) -> append2_out_aag(.(L1), L2)

Used ordering: Knuth-Bendix order [KBO] with precedence:append1_in_gga_2 > [] > PERM_IN_GA_1 > ._1 > U2_GA_1 > append2_in_aag_1 > U1_GA_1 > U5_aag_1 > append2_out_aag_2 > U4_gga_1 > append1_out_gga_1

and weight map:

   []=2
   append1_out_gga_1=6
   ._1=7
   U4_gga_1=7
   append2_in_aag_1=2
   U5_aag_1=7
   U1_GA_1=3
   U2_GA_1=1
   PERM_IN_GA_1=6
   append1_in_gga_2=8
   append2_out_aag_2=0

The variable weight is 1

----------------------------------------

(27)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   append1_in_gga(x0, x1)
   append2_in_aag(x0)
   U4_gga(x0)
   U5_aag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(29)
YES
