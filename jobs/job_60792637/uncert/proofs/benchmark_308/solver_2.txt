MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/ai9NH.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

p(g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) PiDP
    (7) UsableRulesProof [EQUIVALENT, 0 ms]
    (8) PiDP
    (9) PiDPToQDPProof [EQUIVALENT, 0 ms]
    (10) QDP
    (11) TransformationProof [EQUIVALENT, 0 ms]
    (12) QDP
    (13) NonTerminationLoopProof [COMPLETE, 0 ms]
    (14) NO
(15) PrologToPiTRSProof [SOUND, 0 ms]
(16) PiTRS
    (17) DependencyPairsProof [EQUIVALENT, 0 ms]
    (18) PiDP
    (19) DependencyGraphProof [EQUIVALENT, 0 ms]
    (20) PiDP
    (21) UsableRulesProof [EQUIVALENT, 0 ms]
    (22) PiDP
    (23) PiDPToQDPProof [EQUIVALENT, 0 ms]
    (24) QDP
    (25) TransformationProof [EQUIVALENT, 0 ms]
    (26) QDP
    (27) NonTerminationLoopProof [COMPLETE, 0 ms]
    (28) NO
(29) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(30) IRSwT
    (31) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (32) IRSwT
    (33) IntTRSCompressionProof [EQUIVALENT, 20 ms]
    (34) IRSwT
    (35) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (36) IRSwT
    (37) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
    (38) IRSwT
(39) PrologToTRSTransformerProof [SOUND, 0 ms]
(40) QTRS
    (41) QTRSRRRProof [EQUIVALENT, 30 ms]
    (42) QTRS
    (43) QTRSRRRProof [EQUIVALENT, 3 ms]
    (44) QTRS
    (45) Overlay + Local Confluence [EQUIVALENT, 0 ms]
    (46) QTRS
    (47) DependencyPairsProof [EQUIVALENT, 0 ms]
    (48) QDP
    (49) UsableRulesProof [EQUIVALENT, 0 ms]
    (50) QDP
    (51) QReductionProof [EQUIVALENT, 0 ms]
    (52) QDP
    (53) TransformationProof [EQUIVALENT, 0 ms]
    (54) QDP
    (55) NonTerminationLoopProof [COMPLETE, 0 ms]
    (56) NO
(57) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(58) TRIPLES
    (59) TriplesToPiDPProof [SOUND, 0 ms]
    (60) PiDP
    (61) DependencyGraphProof [EQUIVALENT, 0 ms]
    (62) PiDP
    (63) PiDPToQDPProof [EQUIVALENT, 0 ms]
    (64) QDP
    (65) TransformationProof [EQUIVALENT, 0 ms]
    (66) QDP
    (67) TransformationProof [EQUIVALENT, 0 ms]
    (68) QDP


----------------------------------------

(0)
Obligation:
Clauses:

p(a).
p(X) :- p(a).
q(b).


Query: p(g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

p_in_1: (b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_g(a) -> p_out_g(a)
   p_in_g(X) -> U1_g(X, p_in_g(a))
   U1_g(X, p_out_g(a)) -> p_out_g(X)

Pi is empty.



Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_g(a) -> p_out_g(a)
   p_in_g(X) -> U1_g(X, p_in_g(a))
   U1_g(X, p_out_g(a)) -> p_out_g(X)

Pi is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_G(X) -> U1_G(X, p_in_g(a))
   P_IN_G(X) -> P_IN_G(a)

The TRS R consists of the following rules:

   p_in_g(a) -> p_out_g(a)
   p_in_g(X) -> U1_g(X, p_in_g(a))
   U1_g(X, p_out_g(a)) -> p_out_g(X)

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_G(X) -> U1_G(X, p_in_g(a))
   P_IN_G(X) -> P_IN_G(a)

The TRS R consists of the following rules:

   p_in_g(a) -> p_out_g(a)
   p_in_g(X) -> U1_g(X, p_in_g(a))
   U1_g(X, p_out_g(a)) -> p_out_g(X)

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_G(X) -> P_IN_G(a)

The TRS R consists of the following rules:

   p_in_g(a) -> p_out_g(a)
   p_in_g(X) -> U1_g(X, p_in_g(a))
   U1_g(X, p_out_g(a)) -> p_out_g(X)

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_G(X) -> P_IN_G(a)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_G(X) -> P_IN_G(a)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule P_IN_G(X) -> P_IN_G(a) we obtained the following new rules [LPAR04]:

   (P_IN_G(a) -> P_IN_G(a),P_IN_G(a) -> P_IN_G(a))


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_G(a) -> P_IN_G(a)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = P_IN_G(a) evaluates to  t =P_IN_G(a)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from P_IN_G(a) to P_IN_G(a).




----------------------------------------

(14)
NO

----------------------------------------

(15) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

p_in_1: (b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_g(a) -> p_out_g(a)
   p_in_g(X) -> U1_g(X, p_in_g(a))
   U1_g(X, p_out_g(a)) -> p_out_g(X)

The argument filtering Pi contains the following mapping:
p_in_g(x1)  =  p_in_g(x1)

a  =  a

p_out_g(x1)  =  p_out_g

U1_g(x1, x2)  =  U1_g(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(16)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_g(a) -> p_out_g(a)
   p_in_g(X) -> U1_g(X, p_in_g(a))
   U1_g(X, p_out_g(a)) -> p_out_g(X)

The argument filtering Pi contains the following mapping:
p_in_g(x1)  =  p_in_g(x1)

a  =  a

p_out_g(x1)  =  p_out_g

U1_g(x1, x2)  =  U1_g(x2)



----------------------------------------

(17) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_G(X) -> U1_G(X, p_in_g(a))
   P_IN_G(X) -> P_IN_G(a)

The TRS R consists of the following rules:

   p_in_g(a) -> p_out_g(a)
   p_in_g(X) -> U1_g(X, p_in_g(a))
   U1_g(X, p_out_g(a)) -> p_out_g(X)

The argument filtering Pi contains the following mapping:
p_in_g(x1)  =  p_in_g(x1)

a  =  a

p_out_g(x1)  =  p_out_g

U1_g(x1, x2)  =  U1_g(x2)

P_IN_G(x1)  =  P_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(18)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_G(X) -> U1_G(X, p_in_g(a))
   P_IN_G(X) -> P_IN_G(a)

The TRS R consists of the following rules:

   p_in_g(a) -> p_out_g(a)
   p_in_g(X) -> U1_g(X, p_in_g(a))
   U1_g(X, p_out_g(a)) -> p_out_g(X)

The argument filtering Pi contains the following mapping:
p_in_g(x1)  =  p_in_g(x1)

a  =  a

p_out_g(x1)  =  p_out_g

U1_g(x1, x2)  =  U1_g(x2)

P_IN_G(x1)  =  P_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(19) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(20)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_G(X) -> P_IN_G(a)

The TRS R consists of the following rules:

   p_in_g(a) -> p_out_g(a)
   p_in_g(X) -> U1_g(X, p_in_g(a))
   U1_g(X, p_out_g(a)) -> p_out_g(X)

The argument filtering Pi contains the following mapping:
p_in_g(x1)  =  p_in_g(x1)

a  =  a

p_out_g(x1)  =  p_out_g

U1_g(x1, x2)  =  U1_g(x2)

P_IN_G(x1)  =  P_IN_G(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(21) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(22)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_G(X) -> P_IN_G(a)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(23) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_G(X) -> P_IN_G(a)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule P_IN_G(X) -> P_IN_G(a) we obtained the following new rules [LPAR04]:

   (P_IN_G(a) -> P_IN_G(a),P_IN_G(a) -> P_IN_G(a))


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_G(a) -> P_IN_G(a)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(27) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = P_IN_G(a) evaluates to  t =P_IN_G(a)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from P_IN_G(a) to P_IN_G(a).




----------------------------------------

(28)
NO

----------------------------------------

(29) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p (a))",
                null
            ],
            [
                "(p X)",
                "(p (a))"
            ],
            [
                "(q (b))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "11": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "22": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(p T1)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "10": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 10,
                "label": "PARALLEL"
            },
            {
                "from": 4,
                "to": 11,
                "label": "PARALLEL"
            },
            {
                "from": 10,
                "to": 12,
                "label": "EVAL with clause\np(a).\nand substitutionT1 -> a"
            },
            {
                "from": 10,
                "to": 13,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 11,
                "to": 27,
                "label": "ONLY EVAL with clause\np(X3) :- p(a).\nand substitutionT1 -> T4,\nX3 -> T4"
            },
            {
                "from": 12,
                "to": 22,
                "label": "SUCCESS"
            },
            {
                "from": 27,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> a"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(30)
Obligation:
Rules:
f27_out -> f11_out(T4) :|: TRUE
f11_in(x) -> f27_in :|: TRUE
f2_in(T1) -> f4_in(T1) :|: TRUE
f4_out(x1) -> f2_out(x1) :|: TRUE
f27_in -> f2_in(a) :|: TRUE
f2_out(a) -> f27_out :|: TRUE
f4_in(x2) -> f11_in(x2) :|: TRUE
f4_in(x3) -> f10_in(x3) :|: TRUE
f10_out(x4) -> f4_out(x4) :|: TRUE
f11_out(x5) -> f4_out(x5) :|: TRUE
Start term: f2_in(T1)

----------------------------------------

(31) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f11_in(x) -> f27_in :|: TRUE
f2_in(T1) -> f4_in(T1) :|: TRUE
f27_in -> f2_in(a) :|: TRUE
f4_in(x2) -> f11_in(x2) :|: TRUE


----------------------------------------

(32)
Obligation:
Rules:
f11_in(x) -> f27_in :|: TRUE
f2_in(T1) -> f4_in(T1) :|: TRUE
f27_in -> f2_in(a) :|: TRUE
f4_in(x2) -> f11_in(x2) :|: TRUE

----------------------------------------

(33) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(34)
Obligation:
Rules:
f11_in(x:0) -> f11_in(a) :|: TRUE

----------------------------------------

(35) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(36)
Obligation:
Rules:
f11_in(x:0) -> f11_in(a) :|: TRUE

----------------------------------------

(37) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f11_in(x:0) -> f11_in(a) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(38)
Obligation:

Termination digraph:
Nodes:
(1) f11_in(x:0) -> f11_in(a) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(39) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p (a))",
                null
            ],
            [
                "(p X)",
                "(p (a))"
            ],
            [
                "(q (b))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "77": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "78": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "72": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(p T1)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "73": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "74": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "75": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "76": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 72,
                "label": "CASE"
            },
            {
                "from": 72,
                "to": 73,
                "label": "PARALLEL"
            },
            {
                "from": 72,
                "to": 74,
                "label": "PARALLEL"
            },
            {
                "from": 73,
                "to": 75,
                "label": "EVAL with clause\np(a).\nand substitutionT1 -> a"
            },
            {
                "from": 73,
                "to": 76,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 74,
                "to": 78,
                "label": "ONLY EVAL with clause\np(X3) :- p(a).\nand substitutionT1 -> T4,\nX3 -> T4"
            },
            {
                "from": 75,
                "to": 77,
                "label": "SUCCESS"
            },
            {
                "from": 78,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> a"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(40)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f3_in(a) -> f3_out1
   f3_in(T4) -> U1(f3_in(a), T4)
   U1(f3_out1, T4) -> f3_out1

Q is empty.

----------------------------------------

(41) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1, x_2)) = x_1 + 2*x_2
   POL(a) = 0
   POL(f3_in(x_1)) = 1 + 2*x_1
   POL(f3_out1) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f3_in(a) -> f3_out1




----------------------------------------

(42)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f3_in(T4) -> U1(f3_in(a), T4)
   U1(f3_out1, T4) -> f3_out1

Q is empty.

----------------------------------------

(43) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(a) = 0
   POL(f3_in(x_1)) = 2*x_1
   POL(f3_out1) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U1(f3_out1, T4) -> f3_out1




----------------------------------------

(44)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f3_in(T4) -> U1(f3_in(a), T4)

Q is empty.

----------------------------------------

(45) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(46)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f3_in(T4) -> U1(f3_in(a), T4)

The set Q consists of the following terms:

   f3_in(x0)


----------------------------------------

(47) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F3_IN(T4) -> F3_IN(a)

The TRS R consists of the following rules:

   f3_in(T4) -> U1(f3_in(a), T4)

The set Q consists of the following terms:

   f3_in(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(49) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F3_IN(T4) -> F3_IN(a)

R is empty.
The set Q consists of the following terms:

   f3_in(x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f3_in(x0)


----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F3_IN(T4) -> F3_IN(a)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(53) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule F3_IN(T4) -> F3_IN(a) we obtained the following new rules [LPAR04]:

   (F3_IN(a) -> F3_IN(a),F3_IN(a) -> F3_IN(a))


----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F3_IN(a) -> F3_IN(a)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(55) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = F3_IN(a) evaluates to  t =F3_IN(a)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from F3_IN(a) to F3_IN(a).




----------------------------------------

(56)
NO

----------------------------------------

(57) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p (a))",
                null
            ],
            [
                "(p X)",
                "(p (a))"
            ],
            [
                "(q (b))",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "33": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(p (a))"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(p (a))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "44": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "34": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(p (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "45": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "35": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(p (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "36": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "37": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "38": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "28": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(p T1)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "39": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "29": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p (a))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "40": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 3,
                        "term": "(p (a))"
                    },
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(p (a))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "30": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(p T1)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(p T1)",
                        "(p (a))"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "41": {
                "goal": [{
                    "clause": 0,
                    "scope": 3,
                    "term": "(p (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "31": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(p (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "42": {
                "goal": [{
                    "clause": 1,
                    "scope": 3,
                    "term": "(p (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "32": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (a))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "43": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 28,
                "label": "CASE"
            },
            {
                "from": 28,
                "to": 29,
                "label": "EVAL with clause\np(a).\nand substitutionT1 -> a"
            },
            {
                "from": 28,
                "to": 30,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 29,
                "to": 31,
                "label": "SUCCESS"
            },
            {
                "from": 30,
                "to": 39,
                "label": "ONLY EVAL with clause\np(X7) :- p(a).\nand substitutionT1 -> T3,\nX7 -> T3"
            },
            {
                "from": 31,
                "to": 32,
                "label": "ONLY EVAL with clause\np(X2) :- p(a).\nand substitutionX2 -> a"
            },
            {
                "from": 32,
                "to": 33,
                "label": "CASE"
            },
            {
                "from": 33,
                "to": 34,
                "label": "PARALLEL"
            },
            {
                "from": 33,
                "to": 35,
                "label": "PARALLEL"
            },
            {
                "from": 34,
                "to": 36,
                "label": "ONLY EVAL with clause\np(a).\nand substitution"
            },
            {
                "from": 35,
                "to": 38,
                "label": "ONLY EVAL with clause\np(X5) :- p(a).\nand substitutionX5 -> a"
            },
            {
                "from": 36,
                "to": 37,
                "label": "SUCCESS"
            },
            {
                "from": 38,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> a"
            },
            {
                "from": 39,
                "to": 40,
                "label": "CASE"
            },
            {
                "from": 40,
                "to": 41,
                "label": "PARALLEL"
            },
            {
                "from": 40,
                "to": 42,
                "label": "PARALLEL"
            },
            {
                "from": 41,
                "to": 43,
                "label": "ONLY EVAL with clause\np(a).\nand substitution"
            },
            {
                "from": 42,
                "to": 45,
                "label": "ONLY EVAL with clause\np(X10) :- p(a).\nand substitutionX10 -> a"
            },
            {
                "from": 43,
                "to": 44,
                "label": "SUCCESS"
            },
            {
                "from": 45,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> a"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(58)
Obligation:
Triples:

pA(a) :- pA(a).
pA(X1) :- pA(a).

Clauses:

pcA(a).
pcA(a).
pcA(a) :- pcA(a).
pcA(X1).
pcA(X1) :- pcA(a).

Afs:

pA(x1)  =  pA(x1)


----------------------------------------

(59) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

pA_in_1: (b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_G(a) -> U1_G(pA_in_g(a))
   PA_IN_G(a) -> PA_IN_G(a)
   PA_IN_G(X1) -> U2_G(X1, pA_in_g(a))
   PA_IN_G(X1) -> PA_IN_G(a)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(60)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_G(a) -> U1_G(pA_in_g(a))
   PA_IN_G(a) -> PA_IN_G(a)
   PA_IN_G(X1) -> U2_G(X1, pA_in_g(a))
   PA_IN_G(X1) -> PA_IN_G(a)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(61) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 2 less nodes.
----------------------------------------

(62)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_G(X1) -> PA_IN_G(a)
   PA_IN_G(a) -> PA_IN_G(a)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(63) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(64)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_G(X1) -> PA_IN_G(a)
   PA_IN_G(a) -> PA_IN_G(a)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(65) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule PA_IN_G(X1) -> PA_IN_G(a) we obtained the following new rules [LPAR04]:

   (PA_IN_G(a) -> PA_IN_G(a),PA_IN_G(a) -> PA_IN_G(a))


----------------------------------------

(66)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_G(a) -> PA_IN_G(a)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(67) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule PA_IN_G(X1) -> PA_IN_G(a) we obtained the following new rules [LPAR04]:

   (PA_IN_G(a) -> PA_IN_G(a),PA_IN_G(a) -> PA_IN_G(a))


----------------------------------------

(68)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_G(a) -> PA_IN_G(a)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.