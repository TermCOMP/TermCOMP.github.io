YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/mbET2.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

count(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) UsableRulesReductionPairsProof [EQUIVALENT, 10 ms]
        (13) QDP
        (14) PisEmptyProof [EQUIVALENT, 0 ms]
        (15) YES
    (16) PiDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) PiDP
        (19) PiDPToQDPProof [SOUND, 0 ms]
        (20) QDP
        (21) UsableRulesReductionPairsProof [EQUIVALENT, 8 ms]
        (22) QDP
        (23) DependencyGraphProof [EQUIVALENT, 0 ms]
        (24) TRUE


----------------------------------------

(0)
Obligation:
Clauses:

flatten(atom(X), .(X, [])).
flatten(cons(atom(X), U), .(X, Y)) :- flatten(U, Y).
flatten(cons(cons(U, V), W), X) :- flatten(cons(U, cons(V, W)), X).
count(atom(X), s(0)).
count(cons(atom(X), Y), s(Z)) :- count(Y, Z).
count(cons(cons(U, V), W), Z) :- ','(flatten(cons(cons(U, V), W), X), count(X, Z)).


Query: count(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

count_in_2: (b,f)

flatten_in_2: (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   count_in_ga(atom(X), s(0)) -> count_out_ga(atom(X), s(0))
   count_in_ga(cons(atom(X), Y), s(Z)) -> U3_ga(X, Y, Z, count_in_ga(Y, Z))
   count_in_ga(cons(cons(U, V), W), Z) -> U4_ga(U, V, W, Z, flatten_in_ga(cons(cons(U, V), W), X))
   flatten_in_ga(atom(X), .(X, [])) -> flatten_out_ga(atom(X), .(X, []))
   flatten_in_ga(cons(atom(X), U), .(X, Y)) -> U1_ga(X, U, Y, flatten_in_ga(U, Y))
   flatten_in_ga(cons(cons(U, V), W), X) -> U2_ga(U, V, W, X, flatten_in_ga(cons(U, cons(V, W)), X))
   U2_ga(U, V, W, X, flatten_out_ga(cons(U, cons(V, W)), X)) -> flatten_out_ga(cons(cons(U, V), W), X)
   U1_ga(X, U, Y, flatten_out_ga(U, Y)) -> flatten_out_ga(cons(atom(X), U), .(X, Y))
   U4_ga(U, V, W, Z, flatten_out_ga(cons(cons(U, V), W), X)) -> U5_ga(U, V, W, Z, count_in_ga(X, Z))
   U5_ga(U, V, W, Z, count_out_ga(X, Z)) -> count_out_ga(cons(cons(U, V), W), Z)
   U3_ga(X, Y, Z, count_out_ga(Y, Z)) -> count_out_ga(cons(atom(X), Y), s(Z))

The argument filtering Pi contains the following mapping:
count_in_ga(x1, x2)  =  count_in_ga(x1)

atom(x1)  =  atom(x1)

count_out_ga(x1, x2)  =  count_out_ga(x2)

cons(x1, x2)  =  cons(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x5)

flatten_in_ga(x1, x2)  =  flatten_in_ga(x1)

flatten_out_ga(x1, x2)  =  flatten_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

U5_ga(x1, x2, x3, x4, x5)  =  U5_ga(x5)

.(x1, x2)  =  .(x1, x2)

s(x1)  =  s(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   count_in_ga(atom(X), s(0)) -> count_out_ga(atom(X), s(0))
   count_in_ga(cons(atom(X), Y), s(Z)) -> U3_ga(X, Y, Z, count_in_ga(Y, Z))
   count_in_ga(cons(cons(U, V), W), Z) -> U4_ga(U, V, W, Z, flatten_in_ga(cons(cons(U, V), W), X))
   flatten_in_ga(atom(X), .(X, [])) -> flatten_out_ga(atom(X), .(X, []))
   flatten_in_ga(cons(atom(X), U), .(X, Y)) -> U1_ga(X, U, Y, flatten_in_ga(U, Y))
   flatten_in_ga(cons(cons(U, V), W), X) -> U2_ga(U, V, W, X, flatten_in_ga(cons(U, cons(V, W)), X))
   U2_ga(U, V, W, X, flatten_out_ga(cons(U, cons(V, W)), X)) -> flatten_out_ga(cons(cons(U, V), W), X)
   U1_ga(X, U, Y, flatten_out_ga(U, Y)) -> flatten_out_ga(cons(atom(X), U), .(X, Y))
   U4_ga(U, V, W, Z, flatten_out_ga(cons(cons(U, V), W), X)) -> U5_ga(U, V, W, Z, count_in_ga(X, Z))
   U5_ga(U, V, W, Z, count_out_ga(X, Z)) -> count_out_ga(cons(cons(U, V), W), Z)
   U3_ga(X, Y, Z, count_out_ga(Y, Z)) -> count_out_ga(cons(atom(X), Y), s(Z))

The argument filtering Pi contains the following mapping:
count_in_ga(x1, x2)  =  count_in_ga(x1)

atom(x1)  =  atom(x1)

count_out_ga(x1, x2)  =  count_out_ga(x2)

cons(x1, x2)  =  cons(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x5)

flatten_in_ga(x1, x2)  =  flatten_in_ga(x1)

flatten_out_ga(x1, x2)  =  flatten_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

U5_ga(x1, x2, x3, x4, x5)  =  U5_ga(x5)

.(x1, x2)  =  .(x1, x2)

s(x1)  =  s(x1)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   COUNT_IN_GA(cons(atom(X), Y), s(Z)) -> U3_GA(X, Y, Z, count_in_ga(Y, Z))
   COUNT_IN_GA(cons(atom(X), Y), s(Z)) -> COUNT_IN_GA(Y, Z)
   COUNT_IN_GA(cons(cons(U, V), W), Z) -> U4_GA(U, V, W, Z, flatten_in_ga(cons(cons(U, V), W), X))
   COUNT_IN_GA(cons(cons(U, V), W), Z) -> FLATTEN_IN_GA(cons(cons(U, V), W), X)
   FLATTEN_IN_GA(cons(atom(X), U), .(X, Y)) -> U1_GA(X, U, Y, flatten_in_ga(U, Y))
   FLATTEN_IN_GA(cons(atom(X), U), .(X, Y)) -> FLATTEN_IN_GA(U, Y)
   FLATTEN_IN_GA(cons(cons(U, V), W), X) -> U2_GA(U, V, W, X, flatten_in_ga(cons(U, cons(V, W)), X))
   FLATTEN_IN_GA(cons(cons(U, V), W), X) -> FLATTEN_IN_GA(cons(U, cons(V, W)), X)
   U4_GA(U, V, W, Z, flatten_out_ga(cons(cons(U, V), W), X)) -> U5_GA(U, V, W, Z, count_in_ga(X, Z))
   U4_GA(U, V, W, Z, flatten_out_ga(cons(cons(U, V), W), X)) -> COUNT_IN_GA(X, Z)

The TRS R consists of the following rules:

   count_in_ga(atom(X), s(0)) -> count_out_ga(atom(X), s(0))
   count_in_ga(cons(atom(X), Y), s(Z)) -> U3_ga(X, Y, Z, count_in_ga(Y, Z))
   count_in_ga(cons(cons(U, V), W), Z) -> U4_ga(U, V, W, Z, flatten_in_ga(cons(cons(U, V), W), X))
   flatten_in_ga(atom(X), .(X, [])) -> flatten_out_ga(atom(X), .(X, []))
   flatten_in_ga(cons(atom(X), U), .(X, Y)) -> U1_ga(X, U, Y, flatten_in_ga(U, Y))
   flatten_in_ga(cons(cons(U, V), W), X) -> U2_ga(U, V, W, X, flatten_in_ga(cons(U, cons(V, W)), X))
   U2_ga(U, V, W, X, flatten_out_ga(cons(U, cons(V, W)), X)) -> flatten_out_ga(cons(cons(U, V), W), X)
   U1_ga(X, U, Y, flatten_out_ga(U, Y)) -> flatten_out_ga(cons(atom(X), U), .(X, Y))
   U4_ga(U, V, W, Z, flatten_out_ga(cons(cons(U, V), W), X)) -> U5_ga(U, V, W, Z, count_in_ga(X, Z))
   U5_ga(U, V, W, Z, count_out_ga(X, Z)) -> count_out_ga(cons(cons(U, V), W), Z)
   U3_ga(X, Y, Z, count_out_ga(Y, Z)) -> count_out_ga(cons(atom(X), Y), s(Z))

The argument filtering Pi contains the following mapping:
count_in_ga(x1, x2)  =  count_in_ga(x1)

atom(x1)  =  atom(x1)

count_out_ga(x1, x2)  =  count_out_ga(x2)

cons(x1, x2)  =  cons(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x5)

flatten_in_ga(x1, x2)  =  flatten_in_ga(x1)

flatten_out_ga(x1, x2)  =  flatten_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

U5_ga(x1, x2, x3, x4, x5)  =  U5_ga(x5)

.(x1, x2)  =  .(x1, x2)

s(x1)  =  s(x1)

COUNT_IN_GA(x1, x2)  =  COUNT_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x5)

FLATTEN_IN_GA(x1, x2)  =  FLATTEN_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x4)

U2_GA(x1, x2, x3, x4, x5)  =  U2_GA(x5)

U5_GA(x1, x2, x3, x4, x5)  =  U5_GA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COUNT_IN_GA(cons(atom(X), Y), s(Z)) -> U3_GA(X, Y, Z, count_in_ga(Y, Z))
   COUNT_IN_GA(cons(atom(X), Y), s(Z)) -> COUNT_IN_GA(Y, Z)
   COUNT_IN_GA(cons(cons(U, V), W), Z) -> U4_GA(U, V, W, Z, flatten_in_ga(cons(cons(U, V), W), X))
   COUNT_IN_GA(cons(cons(U, V), W), Z) -> FLATTEN_IN_GA(cons(cons(U, V), W), X)
   FLATTEN_IN_GA(cons(atom(X), U), .(X, Y)) -> U1_GA(X, U, Y, flatten_in_ga(U, Y))
   FLATTEN_IN_GA(cons(atom(X), U), .(X, Y)) -> FLATTEN_IN_GA(U, Y)
   FLATTEN_IN_GA(cons(cons(U, V), W), X) -> U2_GA(U, V, W, X, flatten_in_ga(cons(U, cons(V, W)), X))
   FLATTEN_IN_GA(cons(cons(U, V), W), X) -> FLATTEN_IN_GA(cons(U, cons(V, W)), X)
   U4_GA(U, V, W, Z, flatten_out_ga(cons(cons(U, V), W), X)) -> U5_GA(U, V, W, Z, count_in_ga(X, Z))
   U4_GA(U, V, W, Z, flatten_out_ga(cons(cons(U, V), W), X)) -> COUNT_IN_GA(X, Z)

The TRS R consists of the following rules:

   count_in_ga(atom(X), s(0)) -> count_out_ga(atom(X), s(0))
   count_in_ga(cons(atom(X), Y), s(Z)) -> U3_ga(X, Y, Z, count_in_ga(Y, Z))
   count_in_ga(cons(cons(U, V), W), Z) -> U4_ga(U, V, W, Z, flatten_in_ga(cons(cons(U, V), W), X))
   flatten_in_ga(atom(X), .(X, [])) -> flatten_out_ga(atom(X), .(X, []))
   flatten_in_ga(cons(atom(X), U), .(X, Y)) -> U1_ga(X, U, Y, flatten_in_ga(U, Y))
   flatten_in_ga(cons(cons(U, V), W), X) -> U2_ga(U, V, W, X, flatten_in_ga(cons(U, cons(V, W)), X))
   U2_ga(U, V, W, X, flatten_out_ga(cons(U, cons(V, W)), X)) -> flatten_out_ga(cons(cons(U, V), W), X)
   U1_ga(X, U, Y, flatten_out_ga(U, Y)) -> flatten_out_ga(cons(atom(X), U), .(X, Y))
   U4_ga(U, V, W, Z, flatten_out_ga(cons(cons(U, V), W), X)) -> U5_ga(U, V, W, Z, count_in_ga(X, Z))
   U5_ga(U, V, W, Z, count_out_ga(X, Z)) -> count_out_ga(cons(cons(U, V), W), Z)
   U3_ga(X, Y, Z, count_out_ga(Y, Z)) -> count_out_ga(cons(atom(X), Y), s(Z))

The argument filtering Pi contains the following mapping:
count_in_ga(x1, x2)  =  count_in_ga(x1)

atom(x1)  =  atom(x1)

count_out_ga(x1, x2)  =  count_out_ga(x2)

cons(x1, x2)  =  cons(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x5)

flatten_in_ga(x1, x2)  =  flatten_in_ga(x1)

flatten_out_ga(x1, x2)  =  flatten_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

U5_ga(x1, x2, x3, x4, x5)  =  U5_ga(x5)

.(x1, x2)  =  .(x1, x2)

s(x1)  =  s(x1)

COUNT_IN_GA(x1, x2)  =  COUNT_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x5)

FLATTEN_IN_GA(x1, x2)  =  FLATTEN_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x4)

U2_GA(x1, x2, x3, x4, x5)  =  U2_GA(x5)

U5_GA(x1, x2, x3, x4, x5)  =  U5_GA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FLATTEN_IN_GA(cons(cons(U, V), W), X) -> FLATTEN_IN_GA(cons(U, cons(V, W)), X)
   FLATTEN_IN_GA(cons(atom(X), U), .(X, Y)) -> FLATTEN_IN_GA(U, Y)

The TRS R consists of the following rules:

   count_in_ga(atom(X), s(0)) -> count_out_ga(atom(X), s(0))
   count_in_ga(cons(atom(X), Y), s(Z)) -> U3_ga(X, Y, Z, count_in_ga(Y, Z))
   count_in_ga(cons(cons(U, V), W), Z) -> U4_ga(U, V, W, Z, flatten_in_ga(cons(cons(U, V), W), X))
   flatten_in_ga(atom(X), .(X, [])) -> flatten_out_ga(atom(X), .(X, []))
   flatten_in_ga(cons(atom(X), U), .(X, Y)) -> U1_ga(X, U, Y, flatten_in_ga(U, Y))
   flatten_in_ga(cons(cons(U, V), W), X) -> U2_ga(U, V, W, X, flatten_in_ga(cons(U, cons(V, W)), X))
   U2_ga(U, V, W, X, flatten_out_ga(cons(U, cons(V, W)), X)) -> flatten_out_ga(cons(cons(U, V), W), X)
   U1_ga(X, U, Y, flatten_out_ga(U, Y)) -> flatten_out_ga(cons(atom(X), U), .(X, Y))
   U4_ga(U, V, W, Z, flatten_out_ga(cons(cons(U, V), W), X)) -> U5_ga(U, V, W, Z, count_in_ga(X, Z))
   U5_ga(U, V, W, Z, count_out_ga(X, Z)) -> count_out_ga(cons(cons(U, V), W), Z)
   U3_ga(X, Y, Z, count_out_ga(Y, Z)) -> count_out_ga(cons(atom(X), Y), s(Z))

The argument filtering Pi contains the following mapping:
count_in_ga(x1, x2)  =  count_in_ga(x1)

atom(x1)  =  atom(x1)

count_out_ga(x1, x2)  =  count_out_ga(x2)

cons(x1, x2)  =  cons(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x5)

flatten_in_ga(x1, x2)  =  flatten_in_ga(x1)

flatten_out_ga(x1, x2)  =  flatten_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

U5_ga(x1, x2, x3, x4, x5)  =  U5_ga(x5)

.(x1, x2)  =  .(x1, x2)

s(x1)  =  s(x1)

FLATTEN_IN_GA(x1, x2)  =  FLATTEN_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FLATTEN_IN_GA(cons(cons(U, V), W), X) -> FLATTEN_IN_GA(cons(U, cons(V, W)), X)
   FLATTEN_IN_GA(cons(atom(X), U), .(X, Y)) -> FLATTEN_IN_GA(U, Y)

R is empty.
The argument filtering Pi contains the following mapping:
atom(x1)  =  atom(x1)

cons(x1, x2)  =  cons(x1, x2)

.(x1, x2)  =  .(x1, x2)

FLATTEN_IN_GA(x1, x2)  =  FLATTEN_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   FLATTEN_IN_GA(cons(cons(U, V), W)) -> FLATTEN_IN_GA(cons(U, cons(V, W)))
   FLATTEN_IN_GA(cons(atom(X), U)) -> FLATTEN_IN_GA(U)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   FLATTEN_IN_GA(cons(cons(U, V), W)) -> FLATTEN_IN_GA(cons(U, cons(V, W)))
   FLATTEN_IN_GA(cons(atom(X), U)) -> FLATTEN_IN_GA(U)
No rules are removed from R.

Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(FLATTEN_IN_GA(x_1)) = 2*x_1
   POL(atom(x_1)) = x_1
   POL(cons(x_1, x_2)) = 1 + 2*x_1 + x_2


----------------------------------------

(13)
Obligation:
Q DP problem:
P is empty.
R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(14) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(15)
YES

----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COUNT_IN_GA(cons(cons(U, V), W), Z) -> U4_GA(U, V, W, Z, flatten_in_ga(cons(cons(U, V), W), X))
   U4_GA(U, V, W, Z, flatten_out_ga(cons(cons(U, V), W), X)) -> COUNT_IN_GA(X, Z)
   COUNT_IN_GA(cons(atom(X), Y), s(Z)) -> COUNT_IN_GA(Y, Z)

The TRS R consists of the following rules:

   count_in_ga(atom(X), s(0)) -> count_out_ga(atom(X), s(0))
   count_in_ga(cons(atom(X), Y), s(Z)) -> U3_ga(X, Y, Z, count_in_ga(Y, Z))
   count_in_ga(cons(cons(U, V), W), Z) -> U4_ga(U, V, W, Z, flatten_in_ga(cons(cons(U, V), W), X))
   flatten_in_ga(atom(X), .(X, [])) -> flatten_out_ga(atom(X), .(X, []))
   flatten_in_ga(cons(atom(X), U), .(X, Y)) -> U1_ga(X, U, Y, flatten_in_ga(U, Y))
   flatten_in_ga(cons(cons(U, V), W), X) -> U2_ga(U, V, W, X, flatten_in_ga(cons(U, cons(V, W)), X))
   U2_ga(U, V, W, X, flatten_out_ga(cons(U, cons(V, W)), X)) -> flatten_out_ga(cons(cons(U, V), W), X)
   U1_ga(X, U, Y, flatten_out_ga(U, Y)) -> flatten_out_ga(cons(atom(X), U), .(X, Y))
   U4_ga(U, V, W, Z, flatten_out_ga(cons(cons(U, V), W), X)) -> U5_ga(U, V, W, Z, count_in_ga(X, Z))
   U5_ga(U, V, W, Z, count_out_ga(X, Z)) -> count_out_ga(cons(cons(U, V), W), Z)
   U3_ga(X, Y, Z, count_out_ga(Y, Z)) -> count_out_ga(cons(atom(X), Y), s(Z))

The argument filtering Pi contains the following mapping:
count_in_ga(x1, x2)  =  count_in_ga(x1)

atom(x1)  =  atom(x1)

count_out_ga(x1, x2)  =  count_out_ga(x2)

cons(x1, x2)  =  cons(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x5)

flatten_in_ga(x1, x2)  =  flatten_in_ga(x1)

flatten_out_ga(x1, x2)  =  flatten_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

U5_ga(x1, x2, x3, x4, x5)  =  U5_ga(x5)

.(x1, x2)  =  .(x1, x2)

s(x1)  =  s(x1)

COUNT_IN_GA(x1, x2)  =  COUNT_IN_GA(x1)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(18)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COUNT_IN_GA(cons(cons(U, V), W), Z) -> U4_GA(U, V, W, Z, flatten_in_ga(cons(cons(U, V), W), X))
   U4_GA(U, V, W, Z, flatten_out_ga(cons(cons(U, V), W), X)) -> COUNT_IN_GA(X, Z)
   COUNT_IN_GA(cons(atom(X), Y), s(Z)) -> COUNT_IN_GA(Y, Z)

The TRS R consists of the following rules:

   flatten_in_ga(cons(cons(U, V), W), X) -> U2_ga(U, V, W, X, flatten_in_ga(cons(U, cons(V, W)), X))
   U2_ga(U, V, W, X, flatten_out_ga(cons(U, cons(V, W)), X)) -> flatten_out_ga(cons(cons(U, V), W), X)
   flatten_in_ga(cons(atom(X), U), .(X, Y)) -> U1_ga(X, U, Y, flatten_in_ga(U, Y))
   U1_ga(X, U, Y, flatten_out_ga(U, Y)) -> flatten_out_ga(cons(atom(X), U), .(X, Y))
   flatten_in_ga(atom(X), .(X, [])) -> flatten_out_ga(atom(X), .(X, []))

The argument filtering Pi contains the following mapping:
atom(x1)  =  atom(x1)

cons(x1, x2)  =  cons(x1, x2)

flatten_in_ga(x1, x2)  =  flatten_in_ga(x1)

flatten_out_ga(x1, x2)  =  flatten_out_ga(x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x4)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

.(x1, x2)  =  .(x1, x2)

s(x1)  =  s(x1)

COUNT_IN_GA(x1, x2)  =  COUNT_IN_GA(x1)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(19) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   COUNT_IN_GA(cons(cons(U, V), W)) -> U4_GA(flatten_in_ga(cons(cons(U, V), W)))
   U4_GA(flatten_out_ga(X)) -> COUNT_IN_GA(X)
   COUNT_IN_GA(cons(atom(X), Y)) -> COUNT_IN_GA(Y)

The TRS R consists of the following rules:

   flatten_in_ga(cons(cons(U, V), W)) -> U2_ga(flatten_in_ga(cons(U, cons(V, W))))
   U2_ga(flatten_out_ga(X)) -> flatten_out_ga(X)
   flatten_in_ga(cons(atom(X), U)) -> U1_ga(X, flatten_in_ga(U))
   U1_ga(X, flatten_out_ga(Y)) -> flatten_out_ga(.(X, Y))
   flatten_in_ga(atom(X)) -> flatten_out_ga(.(X, []))

The set Q consists of the following terms:

   flatten_in_ga(x0)
   U2_ga(x0)
   U1_ga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) UsableRulesReductionPairsProof (EQUIVALENT)
By using the usable rules with reduction pair processor [LPAR04] with a polynomial ordering [POLO], all dependency pairs and the corresponding usable rules [FROCOS05] can be oriented non-strictly. All non-usable rules are removed, and those dependency pairs and usable rules that have been oriented strictly or contain non-usable symbols in their left-hand side are removed as well.

The following dependency pairs can be deleted:

   COUNT_IN_GA(cons(cons(U, V), W)) -> U4_GA(flatten_in_ga(cons(cons(U, V), W)))
   COUNT_IN_GA(cons(atom(X), Y)) -> COUNT_IN_GA(Y)
The following rules are removed from R:

   flatten_in_ga(cons(atom(X), U)) -> U1_ga(X, flatten_in_ga(U))
   flatten_in_ga(atom(X)) -> flatten_out_ga(.(X, []))
Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = 1 + x_1 + x_2
   POL(COUNT_IN_GA(x_1)) = 1 + x_1
   POL(U1_ga(x_1, x_2)) = 1 + x_1 + x_2
   POL(U2_ga(x_1)) = x_1
   POL(U4_GA(x_1)) = x_1
   POL([]) = 0
   POL(atom(x_1)) = 2 + x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(flatten_in_ga(x_1)) = x_1
   POL(flatten_out_ga(x_1)) = 1 + x_1


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U4_GA(flatten_out_ga(X)) -> COUNT_IN_GA(X)

The TRS R consists of the following rules:

   flatten_in_ga(cons(cons(U, V), W)) -> U2_ga(flatten_in_ga(cons(U, cons(V, W))))
   U2_ga(flatten_out_ga(X)) -> flatten_out_ga(X)
   U1_ga(X, flatten_out_ga(Y)) -> flatten_out_ga(.(X, Y))

The set Q consists of the following terms:

   flatten_in_ga(x0)
   U2_ga(x0)
   U1_ga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 1 less node.
----------------------------------------

(24)
TRUE
