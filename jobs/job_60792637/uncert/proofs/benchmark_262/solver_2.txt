MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/Fzzg1.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

subset1(a,g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) AND
        (7) PiDP
            (8) UsableRulesProof [EQUIVALENT, 0 ms]
            (9) PiDP
            (10) PiDPToQDPProof [SOUND, 1 ms]
            (11) QDP
            (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (13) YES
        (14) PiDP
            (15) UsableRulesProof [EQUIVALENT, 0 ms]
            (16) PiDP
            (17) PiDPToQDPProof [SOUND, 0 ms]
            (18) QDP
            (19) TransformationProof [SOUND, 0 ms]
            (20) QDP
            (21) TransformationProof [EQUIVALENT, 0 ms]
            (22) QDP
(23) PrologToPiTRSProof [SOUND, 0 ms]
(24) PiTRS
    (25) DependencyPairsProof [EQUIVALENT, 0 ms]
    (26) PiDP
    (27) DependencyGraphProof [EQUIVALENT, 0 ms]
    (28) AND
        (29) PiDP
            (30) UsableRulesProof [EQUIVALENT, 0 ms]
            (31) PiDP
            (32) PiDPToQDPProof [SOUND, 6 ms]
            (33) QDP
            (34) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (35) YES
        (36) PiDP
            (37) UsableRulesProof [EQUIVALENT, 0 ms]
            (38) PiDP
            (39) PiDPToQDPProof [SOUND, 0 ms]
            (40) QDP
            (41) TransformationProof [SOUND, 0 ms]
            (42) QDP
            (43) TransformationProof [EQUIVALENT, 0 ms]
            (44) QDP
(45) PrologToTRSTransformerProof [SOUND, 0 ms]
(46) QTRS
    (47) DependencyPairsProof [EQUIVALENT, 0 ms]
    (48) QDP
    (49) DependencyGraphProof [EQUIVALENT, 0 ms]
    (50) AND
        (51) QDP
            (52) UsableRulesProof [EQUIVALENT, 0 ms]
            (53) QDP
            (54) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (55) YES
        (56) QDP
            (57) NonTerminationLoopProof [COMPLETE, 0 ms]
            (58) NO
(59) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(60) TRIPLES
    (61) TriplesToPiDPProof [SOUND, 7 ms]
    (62) PiDP
    (63) DependencyGraphProof [EQUIVALENT, 0 ms]
    (64) AND
        (65) PiDP
            (66) UsableRulesProof [EQUIVALENT, 0 ms]
            (67) PiDP
            (68) PiDPToQDPProof [SOUND, 0 ms]
            (69) QDP
            (70) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (71) YES
        (72) PiDP
            (73) PiDPToQDPProof [SOUND, 0 ms]
            (74) QDP
            (75) TransformationProof [SOUND, 0 ms]
            (76) QDP
            (77) TransformationProof [EQUIVALENT, 0 ms]
            (78) QDP
(79) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(80) AND
    (81) IRSwT
        (82) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (83) IRSwT
        (84) IntTRSCompressionProof [EQUIVALENT, 10 ms]
        (85) IRSwT
        (86) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (87) IRSwT
        (88) IRSwTTerminationDigraphProof [EQUIVALENT, 3 ms]
        (89) IRSwT
        (90) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
        (91) IRSwT
        (92) TempFilterProof [SOUND, 2 ms]
        (93) IRSwT
        (94) IRSwTToQDPProof [SOUND, 0 ms]
        (95) QDP
        (96) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (97) YES
    (98) IRSwT
        (99) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (100) IRSwT
        (101) IntTRSCompressionProof [EQUIVALENT, 5 ms]
        (102) IRSwT
        (103) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (104) IRSwT


----------------------------------------

(0)
Obligation:
Clauses:

member(X, .(Y, Xs)) :- member(X, Xs).
member(X, .(X, Xs)).
subset(.(X, Xs), Ys) :- ','(member(X, Ys), subset(Xs, Ys)).
subset([], Ys).
member1(X, .(Y, Xs)) :- member1(X, Xs).
member1(X, .(X, Xs)).
subset1(.(X, Xs), Ys) :- ','(member1(X, Ys), subset1(Xs, Ys)).
subset1([], Ys).


Query: subset1(a,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

subset1_in_2: (f,b)

member1_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   subset1_in_ag(.(X, Xs), Ys) -> U5_ag(X, Xs, Ys, member1_in_ag(X, Ys))
   member1_in_ag(X, .(Y, Xs)) -> U4_ag(X, Y, Xs, member1_in_ag(X, Xs))
   member1_in_ag(X, .(X, Xs)) -> member1_out_ag(X, .(X, Xs))
   U4_ag(X, Y, Xs, member1_out_ag(X, Xs)) -> member1_out_ag(X, .(Y, Xs))
   U5_ag(X, Xs, Ys, member1_out_ag(X, Ys)) -> U6_ag(X, Xs, Ys, subset1_in_ag(Xs, Ys))
   subset1_in_ag([], Ys) -> subset1_out_ag([], Ys)
   U6_ag(X, Xs, Ys, subset1_out_ag(Xs, Ys)) -> subset1_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset1_in_ag(x1, x2)  =  subset1_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x3, x4)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x2, x3, x4)

member1_out_ag(x1, x2)  =  member1_out_ag(x1, x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x1, x3, x4)

subset1_out_ag(x1, x2)  =  subset1_out_ag(x1, x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   subset1_in_ag(.(X, Xs), Ys) -> U5_ag(X, Xs, Ys, member1_in_ag(X, Ys))
   member1_in_ag(X, .(Y, Xs)) -> U4_ag(X, Y, Xs, member1_in_ag(X, Xs))
   member1_in_ag(X, .(X, Xs)) -> member1_out_ag(X, .(X, Xs))
   U4_ag(X, Y, Xs, member1_out_ag(X, Xs)) -> member1_out_ag(X, .(Y, Xs))
   U5_ag(X, Xs, Ys, member1_out_ag(X, Ys)) -> U6_ag(X, Xs, Ys, subset1_in_ag(Xs, Ys))
   subset1_in_ag([], Ys) -> subset1_out_ag([], Ys)
   U6_ag(X, Xs, Ys, subset1_out_ag(Xs, Ys)) -> subset1_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset1_in_ag(x1, x2)  =  subset1_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x3, x4)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x2, x3, x4)

member1_out_ag(x1, x2)  =  member1_out_ag(x1, x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x1, x3, x4)

subset1_out_ag(x1, x2)  =  subset1_out_ag(x1, x2)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSET1_IN_AG(.(X, Xs), Ys) -> U5_AG(X, Xs, Ys, member1_in_ag(X, Ys))
   SUBSET1_IN_AG(.(X, Xs), Ys) -> MEMBER1_IN_AG(X, Ys)
   MEMBER1_IN_AG(X, .(Y, Xs)) -> U4_AG(X, Y, Xs, member1_in_ag(X, Xs))
   MEMBER1_IN_AG(X, .(Y, Xs)) -> MEMBER1_IN_AG(X, Xs)
   U5_AG(X, Xs, Ys, member1_out_ag(X, Ys)) -> U6_AG(X, Xs, Ys, subset1_in_ag(Xs, Ys))
   U5_AG(X, Xs, Ys, member1_out_ag(X, Ys)) -> SUBSET1_IN_AG(Xs, Ys)

The TRS R consists of the following rules:

   subset1_in_ag(.(X, Xs), Ys) -> U5_ag(X, Xs, Ys, member1_in_ag(X, Ys))
   member1_in_ag(X, .(Y, Xs)) -> U4_ag(X, Y, Xs, member1_in_ag(X, Xs))
   member1_in_ag(X, .(X, Xs)) -> member1_out_ag(X, .(X, Xs))
   U4_ag(X, Y, Xs, member1_out_ag(X, Xs)) -> member1_out_ag(X, .(Y, Xs))
   U5_ag(X, Xs, Ys, member1_out_ag(X, Ys)) -> U6_ag(X, Xs, Ys, subset1_in_ag(Xs, Ys))
   subset1_in_ag([], Ys) -> subset1_out_ag([], Ys)
   U6_ag(X, Xs, Ys, subset1_out_ag(Xs, Ys)) -> subset1_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset1_in_ag(x1, x2)  =  subset1_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x3, x4)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x2, x3, x4)

member1_out_ag(x1, x2)  =  member1_out_ag(x1, x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x1, x3, x4)

subset1_out_ag(x1, x2)  =  subset1_out_ag(x1, x2)

SUBSET1_IN_AG(x1, x2)  =  SUBSET1_IN_AG'(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x3, x4)

MEMBER1_IN_AG(x1, x2)  =  MEMBER1_IN_AG(x2)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x2, x3, x4)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x1, x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSET1_IN_AG(.(X, Xs), Ys) -> U5_AG(X, Xs, Ys, member1_in_ag(X, Ys))
   SUBSET1_IN_AG(.(X, Xs), Ys) -> MEMBER1_IN_AG(X, Ys)
   MEMBER1_IN_AG(X, .(Y, Xs)) -> U4_AG(X, Y, Xs, member1_in_ag(X, Xs))
   MEMBER1_IN_AG(X, .(Y, Xs)) -> MEMBER1_IN_AG(X, Xs)
   U5_AG(X, Xs, Ys, member1_out_ag(X, Ys)) -> U6_AG(X, Xs, Ys, subset1_in_ag(Xs, Ys))
   U5_AG(X, Xs, Ys, member1_out_ag(X, Ys)) -> SUBSET1_IN_AG(Xs, Ys)

The TRS R consists of the following rules:

   subset1_in_ag(.(X, Xs), Ys) -> U5_ag(X, Xs, Ys, member1_in_ag(X, Ys))
   member1_in_ag(X, .(Y, Xs)) -> U4_ag(X, Y, Xs, member1_in_ag(X, Xs))
   member1_in_ag(X, .(X, Xs)) -> member1_out_ag(X, .(X, Xs))
   U4_ag(X, Y, Xs, member1_out_ag(X, Xs)) -> member1_out_ag(X, .(Y, Xs))
   U5_ag(X, Xs, Ys, member1_out_ag(X, Ys)) -> U6_ag(X, Xs, Ys, subset1_in_ag(Xs, Ys))
   subset1_in_ag([], Ys) -> subset1_out_ag([], Ys)
   U6_ag(X, Xs, Ys, subset1_out_ag(Xs, Ys)) -> subset1_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset1_in_ag(x1, x2)  =  subset1_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x3, x4)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x2, x3, x4)

member1_out_ag(x1, x2)  =  member1_out_ag(x1, x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x1, x3, x4)

subset1_out_ag(x1, x2)  =  subset1_out_ag(x1, x2)

SUBSET1_IN_AG(x1, x2)  =  SUBSET1_IN_AG(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x3, x4)

MEMBER1_IN_AG(x1, x2)  =  MEMBER1_IN_AG(x2)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x2, x3, x4)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x1, x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER1_IN_AG(X, .(Y, Xs)) -> MEMBER1_IN_AG(X, Xs)

The TRS R consists of the following rules:

   subset1_in_ag(.(X, Xs), Ys) -> U5_ag(X, Xs, Ys, member1_in_ag(X, Ys))
   member1_in_ag(X, .(Y, Xs)) -> U4_ag(X, Y, Xs, member1_in_ag(X, Xs))
   member1_in_ag(X, .(X, Xs)) -> member1_out_ag(X, .(X, Xs))
   U4_ag(X, Y, Xs, member1_out_ag(X, Xs)) -> member1_out_ag(X, .(Y, Xs))
   U5_ag(X, Xs, Ys, member1_out_ag(X, Ys)) -> U6_ag(X, Xs, Ys, subset1_in_ag(Xs, Ys))
   subset1_in_ag([], Ys) -> subset1_out_ag([], Ys)
   U6_ag(X, Xs, Ys, subset1_out_ag(Xs, Ys)) -> subset1_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset1_in_ag(x1, x2)  =  subset1_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x3, x4)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x2, x3, x4)

member1_out_ag(x1, x2)  =  member1_out_ag(x1, x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x1, x3, x4)

subset1_out_ag(x1, x2)  =  subset1_out_ag(x1, x2)

MEMBER1_IN_AG(x1, x2)  =  MEMBER1_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER1_IN_AG(X, .(Y, Xs)) -> MEMBER1_IN_AG(X, Xs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBER1_IN_AG(x1, x2)  =  MEMBER1_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER1_IN_AG(.(Y, Xs)) -> MEMBER1_IN_AG(Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER1_IN_AG(.(Y, Xs)) -> MEMBER1_IN_AG(Xs)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U5_AG(X, Xs, Ys, member1_out_ag(X, Ys)) -> SUBSET1_IN_AG(Xs, Ys)
   SUBSET1_IN_AG(.(X, Xs), Ys) -> U5_AG(X, Xs, Ys, member1_in_ag(X, Ys))

The TRS R consists of the following rules:

   subset1_in_ag(.(X, Xs), Ys) -> U5_ag(X, Xs, Ys, member1_in_ag(X, Ys))
   member1_in_ag(X, .(Y, Xs)) -> U4_ag(X, Y, Xs, member1_in_ag(X, Xs))
   member1_in_ag(X, .(X, Xs)) -> member1_out_ag(X, .(X, Xs))
   U4_ag(X, Y, Xs, member1_out_ag(X, Xs)) -> member1_out_ag(X, .(Y, Xs))
   U5_ag(X, Xs, Ys, member1_out_ag(X, Ys)) -> U6_ag(X, Xs, Ys, subset1_in_ag(Xs, Ys))
   subset1_in_ag([], Ys) -> subset1_out_ag([], Ys)
   U6_ag(X, Xs, Ys, subset1_out_ag(Xs, Ys)) -> subset1_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset1_in_ag(x1, x2)  =  subset1_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x3, x4)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x2, x3, x4)

member1_out_ag(x1, x2)  =  member1_out_ag(x1, x2)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x1, x3, x4)

subset1_out_ag(x1, x2)  =  subset1_out_ag(x1, x2)

SUBSET1_IN_AG(x1, x2)  =  SUBSET1_IN_AG(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U5_AG(X, Xs, Ys, member1_out_ag(X, Ys)) -> SUBSET1_IN_AG(Xs, Ys)
   SUBSET1_IN_AG(.(X, Xs), Ys) -> U5_AG(X, Xs, Ys, member1_in_ag(X, Ys))

The TRS R consists of the following rules:

   member1_in_ag(X, .(Y, Xs)) -> U4_ag(X, Y, Xs, member1_in_ag(X, Xs))
   member1_in_ag(X, .(X, Xs)) -> member1_out_ag(X, .(X, Xs))
   U4_ag(X, Y, Xs, member1_out_ag(X, Xs)) -> member1_out_ag(X, .(Y, Xs))

The argument filtering Pi contains the following mapping:
member1_in_ag(x1, x2)  =  member1_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x2, x3, x4)

member1_out_ag(x1, x2)  =  member1_out_ag(x1, x2)

SUBSET1_IN_AG(x1, x2)  =  SUBSET1_IN_AG(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U5_AG(Ys, member1_out_ag(X, Ys)) -> SUBSET1_IN_AG(Ys)
   SUBSET1_IN_AG(Ys) -> U5_AG(Ys, member1_in_ag(Ys))

The TRS R consists of the following rules:

   member1_in_ag(.(Y, Xs)) -> U4_ag(Y, Xs, member1_in_ag(Xs))
   member1_in_ag(.(X, Xs)) -> member1_out_ag(X, .(X, Xs))
   U4_ag(Y, Xs, member1_out_ag(X, Xs)) -> member1_out_ag(X, .(Y, Xs))

The set Q consists of the following terms:

   member1_in_ag(x0)
   U4_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) TransformationProof (SOUND)
By narrowing [LPAR04] the rule SUBSET1_IN_AG(Ys) -> U5_AG(Ys, member1_in_ag(Ys)) at position [1] we obtained the following new rules [LPAR04]:

   (SUBSET1_IN_AG(.(x0, x1)) -> U5_AG(.(x0, x1), U4_ag(x0, x1, member1_in_ag(x1))),SUBSET1_IN_AG(.(x0, x1)) -> U5_AG(.(x0, x1), U4_ag(x0, x1, member1_in_ag(x1))))
   (SUBSET1_IN_AG(.(x0, x1)) -> U5_AG(.(x0, x1), member1_out_ag(x0, .(x0, x1))),SUBSET1_IN_AG(.(x0, x1)) -> U5_AG(.(x0, x1), member1_out_ag(x0, .(x0, x1))))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U5_AG(Ys, member1_out_ag(X, Ys)) -> SUBSET1_IN_AG(Ys)
   SUBSET1_IN_AG(.(x0, x1)) -> U5_AG(.(x0, x1), U4_ag(x0, x1, member1_in_ag(x1)))
   SUBSET1_IN_AG(.(x0, x1)) -> U5_AG(.(x0, x1), member1_out_ag(x0, .(x0, x1)))

The TRS R consists of the following rules:

   member1_in_ag(.(Y, Xs)) -> U4_ag(Y, Xs, member1_in_ag(Xs))
   member1_in_ag(.(X, Xs)) -> member1_out_ag(X, .(X, Xs))
   U4_ag(Y, Xs, member1_out_ag(X, Xs)) -> member1_out_ag(X, .(Y, Xs))

The set Q consists of the following terms:

   member1_in_ag(x0)
   U4_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U5_AG(Ys, member1_out_ag(X, Ys)) -> SUBSET1_IN_AG(Ys) we obtained the following new rules [LPAR04]:

   (U5_AG(.(z0, z1), member1_out_ag(x1, .(z0, z1))) -> SUBSET1_IN_AG(.(z0, z1)),U5_AG(.(z0, z1), member1_out_ag(x1, .(z0, z1))) -> SUBSET1_IN_AG(.(z0, z1)))
   (U5_AG(.(z0, z1), member1_out_ag(z0, .(z0, z1))) -> SUBSET1_IN_AG(.(z0, z1)),U5_AG(.(z0, z1), member1_out_ag(z0, .(z0, z1))) -> SUBSET1_IN_AG(.(z0, z1)))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUBSET1_IN_AG(.(x0, x1)) -> U5_AG(.(x0, x1), U4_ag(x0, x1, member1_in_ag(x1)))
   SUBSET1_IN_AG(.(x0, x1)) -> U5_AG(.(x0, x1), member1_out_ag(x0, .(x0, x1)))
   U5_AG(.(z0, z1), member1_out_ag(x1, .(z0, z1))) -> SUBSET1_IN_AG(.(z0, z1))
   U5_AG(.(z0, z1), member1_out_ag(z0, .(z0, z1))) -> SUBSET1_IN_AG(.(z0, z1))

The TRS R consists of the following rules:

   member1_in_ag(.(Y, Xs)) -> U4_ag(Y, Xs, member1_in_ag(Xs))
   member1_in_ag(.(X, Xs)) -> member1_out_ag(X, .(X, Xs))
   U4_ag(Y, Xs, member1_out_ag(X, Xs)) -> member1_out_ag(X, .(Y, Xs))

The set Q consists of the following terms:

   member1_in_ag(x0)
   U4_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

subset1_in_2: (f,b)

member1_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   subset1_in_ag(.(X, Xs), Ys) -> U5_ag(X, Xs, Ys, member1_in_ag(X, Ys))
   member1_in_ag(X, .(Y, Xs)) -> U4_ag(X, Y, Xs, member1_in_ag(X, Xs))
   member1_in_ag(X, .(X, Xs)) -> member1_out_ag(X, .(X, Xs))
   U4_ag(X, Y, Xs, member1_out_ag(X, Xs)) -> member1_out_ag(X, .(Y, Xs))
   U5_ag(X, Xs, Ys, member1_out_ag(X, Ys)) -> U6_ag(X, Xs, Ys, subset1_in_ag(Xs, Ys))
   subset1_in_ag([], Ys) -> subset1_out_ag([], Ys)
   U6_ag(X, Xs, Ys, subset1_out_ag(Xs, Ys)) -> subset1_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset1_in_ag(x1, x2)  =  subset1_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x3, x4)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x4)

member1_out_ag(x1, x2)  =  member1_out_ag(x1)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x1, x4)

subset1_out_ag(x1, x2)  =  subset1_out_ag(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(24)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   subset1_in_ag(.(X, Xs), Ys) -> U5_ag(X, Xs, Ys, member1_in_ag(X, Ys))
   member1_in_ag(X, .(Y, Xs)) -> U4_ag(X, Y, Xs, member1_in_ag(X, Xs))
   member1_in_ag(X, .(X, Xs)) -> member1_out_ag(X, .(X, Xs))
   U4_ag(X, Y, Xs, member1_out_ag(X, Xs)) -> member1_out_ag(X, .(Y, Xs))
   U5_ag(X, Xs, Ys, member1_out_ag(X, Ys)) -> U6_ag(X, Xs, Ys, subset1_in_ag(Xs, Ys))
   subset1_in_ag([], Ys) -> subset1_out_ag([], Ys)
   U6_ag(X, Xs, Ys, subset1_out_ag(Xs, Ys)) -> subset1_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset1_in_ag(x1, x2)  =  subset1_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x3, x4)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x4)

member1_out_ag(x1, x2)  =  member1_out_ag(x1)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x1, x4)

subset1_out_ag(x1, x2)  =  subset1_out_ag(x1)



----------------------------------------

(25) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSET1_IN_AG(.(X, Xs), Ys) -> U5_AG(X, Xs, Ys, member1_in_ag(X, Ys))
   SUBSET1_IN_AG(.(X, Xs), Ys) -> MEMBER1_IN_AG(X, Ys)
   MEMBER1_IN_AG(X, .(Y, Xs)) -> U4_AG(X, Y, Xs, member1_in_ag(X, Xs))
   MEMBER1_IN_AG(X, .(Y, Xs)) -> MEMBER1_IN_AG(X, Xs)
   U5_AG(X, Xs, Ys, member1_out_ag(X, Ys)) -> U6_AG(X, Xs, Ys, subset1_in_ag(Xs, Ys))
   U5_AG(X, Xs, Ys, member1_out_ag(X, Ys)) -> SUBSET1_IN_AG(Xs, Ys)

The TRS R consists of the following rules:

   subset1_in_ag(.(X, Xs), Ys) -> U5_ag(X, Xs, Ys, member1_in_ag(X, Ys))
   member1_in_ag(X, .(Y, Xs)) -> U4_ag(X, Y, Xs, member1_in_ag(X, Xs))
   member1_in_ag(X, .(X, Xs)) -> member1_out_ag(X, .(X, Xs))
   U4_ag(X, Y, Xs, member1_out_ag(X, Xs)) -> member1_out_ag(X, .(Y, Xs))
   U5_ag(X, Xs, Ys, member1_out_ag(X, Ys)) -> U6_ag(X, Xs, Ys, subset1_in_ag(Xs, Ys))
   subset1_in_ag([], Ys) -> subset1_out_ag([], Ys)
   U6_ag(X, Xs, Ys, subset1_out_ag(Xs, Ys)) -> subset1_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset1_in_ag(x1, x2)  =  subset1_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x3, x4)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x4)

member1_out_ag(x1, x2)  =  member1_out_ag(x1)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x1, x4)

subset1_out_ag(x1, x2)  =  subset1_out_ag(x1)

SUBSET1_IN_AG(x1, x2)  =  SUBSET1_IN_AG(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x3, x4)

MEMBER1_IN_AG(x1, x2)  =  MEMBER1_IN_AG(x2)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x4)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(26)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSET1_IN_AG(.(X, Xs), Ys) -> U5_AG(X, Xs, Ys, member1_in_ag(X, Ys))
   SUBSET1_IN_AG(.(X, Xs), Ys) -> MEMBER1_IN_AG(X, Ys)
   MEMBER1_IN_AG(X, .(Y, Xs)) -> U4_AG(X, Y, Xs, member1_in_ag(X, Xs))
   MEMBER1_IN_AG(X, .(Y, Xs)) -> MEMBER1_IN_AG(X, Xs)
   U5_AG(X, Xs, Ys, member1_out_ag(X, Ys)) -> U6_AG(X, Xs, Ys, subset1_in_ag(Xs, Ys))
   U5_AG(X, Xs, Ys, member1_out_ag(X, Ys)) -> SUBSET1_IN_AG(Xs, Ys)

The TRS R consists of the following rules:

   subset1_in_ag(.(X, Xs), Ys) -> U5_ag(X, Xs, Ys, member1_in_ag(X, Ys))
   member1_in_ag(X, .(Y, Xs)) -> U4_ag(X, Y, Xs, member1_in_ag(X, Xs))
   member1_in_ag(X, .(X, Xs)) -> member1_out_ag(X, .(X, Xs))
   U4_ag(X, Y, Xs, member1_out_ag(X, Xs)) -> member1_out_ag(X, .(Y, Xs))
   U5_ag(X, Xs, Ys, member1_out_ag(X, Ys)) -> U6_ag(X, Xs, Ys, subset1_in_ag(Xs, Ys))
   subset1_in_ag([], Ys) -> subset1_out_ag([], Ys)
   U6_ag(X, Xs, Ys, subset1_out_ag(Xs, Ys)) -> subset1_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset1_in_ag(x1, x2)  =  subset1_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x3, x4)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x4)

member1_out_ag(x1, x2)  =  member1_out_ag(x1)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x1, x4)

subset1_out_ag(x1, x2)  =  subset1_out_ag(x1)

SUBSET1_IN_AG(x1, x2)  =  SUBSET1_IN_AG(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x3, x4)

MEMBER1_IN_AG(x1, x2)  =  MEMBER1_IN_AG(x2)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x4)

U6_AG(x1, x2, x3, x4)  =  U6_AG(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(27) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(28)
Complex Obligation (AND)

----------------------------------------

(29)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER1_IN_AG(X, .(Y, Xs)) -> MEMBER1_IN_AG(X, Xs)

The TRS R consists of the following rules:

   subset1_in_ag(.(X, Xs), Ys) -> U5_ag(X, Xs, Ys, member1_in_ag(X, Ys))
   member1_in_ag(X, .(Y, Xs)) -> U4_ag(X, Y, Xs, member1_in_ag(X, Xs))
   member1_in_ag(X, .(X, Xs)) -> member1_out_ag(X, .(X, Xs))
   U4_ag(X, Y, Xs, member1_out_ag(X, Xs)) -> member1_out_ag(X, .(Y, Xs))
   U5_ag(X, Xs, Ys, member1_out_ag(X, Ys)) -> U6_ag(X, Xs, Ys, subset1_in_ag(Xs, Ys))
   subset1_in_ag([], Ys) -> subset1_out_ag([], Ys)
   U6_ag(X, Xs, Ys, subset1_out_ag(Xs, Ys)) -> subset1_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset1_in_ag(x1, x2)  =  subset1_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x3, x4)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x4)

member1_out_ag(x1, x2)  =  member1_out_ag(x1)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x1, x4)

subset1_out_ag(x1, x2)  =  subset1_out_ag(x1)

MEMBER1_IN_AG(x1, x2)  =  MEMBER1_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(30) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(31)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER1_IN_AG(X, .(Y, Xs)) -> MEMBER1_IN_AG(X, Xs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBER1_IN_AG(x1, x2)  =  MEMBER1_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(32) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER1_IN_AG(.(Y, Xs)) -> MEMBER1_IN_AG(Xs)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(34) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER1_IN_AG(.(Y, Xs)) -> MEMBER1_IN_AG(Xs)
The graph contains the following edges 1 > 1


----------------------------------------

(35)
YES

----------------------------------------

(36)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U5_AG(X, Xs, Ys, member1_out_ag(X, Ys)) -> SUBSET1_IN_AG(Xs, Ys)
   SUBSET1_IN_AG(.(X, Xs), Ys) -> U5_AG(X, Xs, Ys, member1_in_ag(X, Ys))

The TRS R consists of the following rules:

   subset1_in_ag(.(X, Xs), Ys) -> U5_ag(X, Xs, Ys, member1_in_ag(X, Ys))
   member1_in_ag(X, .(Y, Xs)) -> U4_ag(X, Y, Xs, member1_in_ag(X, Xs))
   member1_in_ag(X, .(X, Xs)) -> member1_out_ag(X, .(X, Xs))
   U4_ag(X, Y, Xs, member1_out_ag(X, Xs)) -> member1_out_ag(X, .(Y, Xs))
   U5_ag(X, Xs, Ys, member1_out_ag(X, Ys)) -> U6_ag(X, Xs, Ys, subset1_in_ag(Xs, Ys))
   subset1_in_ag([], Ys) -> subset1_out_ag([], Ys)
   U6_ag(X, Xs, Ys, subset1_out_ag(Xs, Ys)) -> subset1_out_ag(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset1_in_ag(x1, x2)  =  subset1_in_ag(x2)

U5_ag(x1, x2, x3, x4)  =  U5_ag(x3, x4)

member1_in_ag(x1, x2)  =  member1_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x4)

member1_out_ag(x1, x2)  =  member1_out_ag(x1)

U6_ag(x1, x2, x3, x4)  =  U6_ag(x1, x4)

subset1_out_ag(x1, x2)  =  subset1_out_ag(x1)

SUBSET1_IN_AG(x1, x2)  =  SUBSET1_IN_AG(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(37) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(38)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U5_AG(X, Xs, Ys, member1_out_ag(X, Ys)) -> SUBSET1_IN_AG(Xs, Ys)
   SUBSET1_IN_AG(.(X, Xs), Ys) -> U5_AG(X, Xs, Ys, member1_in_ag(X, Ys))

The TRS R consists of the following rules:

   member1_in_ag(X, .(Y, Xs)) -> U4_ag(X, Y, Xs, member1_in_ag(X, Xs))
   member1_in_ag(X, .(X, Xs)) -> member1_out_ag(X, .(X, Xs))
   U4_ag(X, Y, Xs, member1_out_ag(X, Xs)) -> member1_out_ag(X, .(Y, Xs))

The argument filtering Pi contains the following mapping:
member1_in_ag(x1, x2)  =  member1_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x4)

member1_out_ag(x1, x2)  =  member1_out_ag(x1)

SUBSET1_IN_AG(x1, x2)  =  SUBSET1_IN_AG(x2)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(39) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U5_AG(Ys, member1_out_ag(X)) -> SUBSET1_IN_AG(Ys)
   SUBSET1_IN_AG(Ys) -> U5_AG(Ys, member1_in_ag(Ys))

The TRS R consists of the following rules:

   member1_in_ag(.(Y, Xs)) -> U4_ag(member1_in_ag(Xs))
   member1_in_ag(.(X, Xs)) -> member1_out_ag(X)
   U4_ag(member1_out_ag(X)) -> member1_out_ag(X)

The set Q consists of the following terms:

   member1_in_ag(x0)
   U4_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(41) TransformationProof (SOUND)
By narrowing [LPAR04] the rule SUBSET1_IN_AG(Ys) -> U5_AG(Ys, member1_in_ag(Ys)) at position [1] we obtained the following new rules [LPAR04]:

   (SUBSET1_IN_AG(.(x0, x1)) -> U5_AG(.(x0, x1), U4_ag(member1_in_ag(x1))),SUBSET1_IN_AG(.(x0, x1)) -> U5_AG(.(x0, x1), U4_ag(member1_in_ag(x1))))
   (SUBSET1_IN_AG(.(x0, x1)) -> U5_AG(.(x0, x1), member1_out_ag(x0)),SUBSET1_IN_AG(.(x0, x1)) -> U5_AG(.(x0, x1), member1_out_ag(x0)))


----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U5_AG(Ys, member1_out_ag(X)) -> SUBSET1_IN_AG(Ys)
   SUBSET1_IN_AG(.(x0, x1)) -> U5_AG(.(x0, x1), U4_ag(member1_in_ag(x1)))
   SUBSET1_IN_AG(.(x0, x1)) -> U5_AG(.(x0, x1), member1_out_ag(x0))

The TRS R consists of the following rules:

   member1_in_ag(.(Y, Xs)) -> U4_ag(member1_in_ag(Xs))
   member1_in_ag(.(X, Xs)) -> member1_out_ag(X)
   U4_ag(member1_out_ag(X)) -> member1_out_ag(X)

The set Q consists of the following terms:

   member1_in_ag(x0)
   U4_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(43) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U5_AG(Ys, member1_out_ag(X)) -> SUBSET1_IN_AG(Ys) we obtained the following new rules [LPAR04]:

   (U5_AG(.(z0, z1), member1_out_ag(x1)) -> SUBSET1_IN_AG(.(z0, z1)),U5_AG(.(z0, z1), member1_out_ag(x1)) -> SUBSET1_IN_AG(.(z0, z1)))
   (U5_AG(.(z0, z1), member1_out_ag(z0)) -> SUBSET1_IN_AG(.(z0, z1)),U5_AG(.(z0, z1), member1_out_ag(z0)) -> SUBSET1_IN_AG(.(z0, z1)))


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUBSET1_IN_AG(.(x0, x1)) -> U5_AG(.(x0, x1), U4_ag(member1_in_ag(x1)))
   SUBSET1_IN_AG(.(x0, x1)) -> U5_AG(.(x0, x1), member1_out_ag(x0))
   U5_AG(.(z0, z1), member1_out_ag(x1)) -> SUBSET1_IN_AG(.(z0, z1))
   U5_AG(.(z0, z1), member1_out_ag(z0)) -> SUBSET1_IN_AG(.(z0, z1))

The TRS R consists of the following rules:

   member1_in_ag(.(Y, Xs)) -> U4_ag(member1_in_ag(Xs))
   member1_in_ag(.(X, Xs)) -> member1_out_ag(X)
   U4_ag(member1_out_ag(X)) -> member1_out_ag(X)

The set Q consists of the following terms:

   member1_in_ag(x0)
   U4_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(45) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(member X (. Y Xs))",
                "(member X Xs)"
            ],
            [
                "(member X (. X Xs))",
                null
            ],
            [
                "(subset (. X Xs) Ys)",
                "(',' (member X Ys) (subset Xs Ys))"
            ],
            [
                "(subset ([]) Ys)",
                null
            ],
            [
                "(member1 X (. Y Xs))",
                "(member1 X Xs)"
            ],
            [
                "(member1 X (. X Xs))",
                null
            ],
            [
                "(subset1 (. X Xs) Ys)",
                "(',' (member1 X Ys) (subset1 Xs Ys))"
            ],
            [
                "(subset1 ([]) Ys)",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "39": {
                "goal": [{
                    "clause": 6,
                    "scope": 1,
                    "term": "(subset1 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "240": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member1 T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "241": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset1 T23 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "242": {
                "goal": [
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(member1 T18 T17)"
                    },
                    {
                        "clause": 5,
                        "scope": 2,
                        "term": "(member1 T18 T17)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset1 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "243": {
                "goal": [{
                    "clause": 4,
                    "scope": 2,
                    "term": "(member1 T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [
                    {
                        "clause": 6,
                        "scope": 1,
                        "term": "(subset1 T1 T2)"
                    },
                    {
                        "clause": 7,
                        "scope": 1,
                        "term": "(subset1 T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "244": {
                "goal": [{
                    "clause": 5,
                    "scope": 2,
                    "term": "(member1 T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "255": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "245": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member1 T42 T41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T41"],
                    "free": [],
                    "exprvars": []
                }
            },
            "256": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "246": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "257": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "247": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "248": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "238": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member1 T18 T17) (subset1 T19 T17))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "249": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "239": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "40": {
                "goal": [{
                    "clause": 7,
                    "scope": 1,
                    "term": "(subset1 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 2,
                "label": "CASE"
            },
            {
                "from": 2,
                "to": 39,
                "label": "PARALLEL"
            },
            {
                "from": 2,
                "to": 40,
                "label": "PARALLEL"
            },
            {
                "from": 39,
                "to": 238,
                "label": "EVAL with clause\nsubset1(.(X13, X14), X15) :- ','(member1(X13, X15), subset1(X14, X15)).\nand substitutionX13 -> T18,\nX14 -> T19,\nT1 -> .(T18, T19),\nT2 -> T17,\nX15 -> T17,\nT15 -> T18,\nT16 -> T19"
            },
            {
                "from": 39,
                "to": 239,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 40,
                "to": 255,
                "label": "EVAL with clause\nsubset1([], X51).\nand substitutionT1 -> [],\nT2 -> T57,\nX51 -> T57"
            },
            {
                "from": 40,
                "to": 256,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 238,
                "to": 240,
                "label": "SPLIT 1"
            },
            {
                "from": 238,
                "to": 241,
                "label": "SPLIT 2\nnew knowledge:\nT18 is ground\nT17 is ground\nreplacements:T19 -> T23"
            },
            {
                "from": 240,
                "to": 242,
                "label": "CASE"
            },
            {
                "from": 241,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T23\nT2 -> T17"
            },
            {
                "from": 242,
                "to": 243,
                "label": "PARALLEL"
            },
            {
                "from": 242,
                "to": 244,
                "label": "PARALLEL"
            },
            {
                "from": 243,
                "to": 245,
                "label": "EVAL with clause\nmember1(X34, .(X35, X36)) :- member1(X34, X36).\nand substitutionT18 -> T42,\nX34 -> T42,\nX35 -> T40,\nX36 -> T41,\nT17 -> .(T40, T41),\nT39 -> T42"
            },
            {
                "from": 243,
                "to": 246,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 244,
                "to": 247,
                "label": "EVAL with clause\nmember1(X44, .(X44, X45)).\nand substitutionT18 -> T50,\nX44 -> T50,\nX45 -> T51,\nT17 -> .(T50, T51)"
            },
            {
                "from": 244,
                "to": 248,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 245,
                "to": 240,
                "label": "INSTANCE with matching:\nT18 -> T42\nT17 -> T41"
            },
            {
                "from": 247,
                "to": 249,
                "label": "SUCCESS"
            },
            {
                "from": 255,
                "to": 257,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(46)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f1_in(T17) -> U1(f238_in(T17), T17)
   U1(f238_out1(T18, T19), T17) -> f1_out1(.(T18, T19))
   f1_in(T57) -> f1_out1([])
   f240_in(.(T40, T41)) -> U2(f240_in(T41), .(T40, T41))
   U2(f240_out1(T42), .(T40, T41)) -> f240_out1(T42)
   f240_in(.(T50, T51)) -> f240_out1(T50)
   f238_in(T17) -> U3(f240_in(T17), T17)
   U3(f240_out1(T18), T17) -> U4(f1_in(T17), T17, T18)
   U4(f1_out1(T23), T17, T18) -> f238_out1(T18, T23)

Q is empty.

----------------------------------------

(47) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(T17) -> U1^1(f238_in(T17), T17)
   F1_IN(T17) -> F238_IN(T17)
   F240_IN(.(T40, T41)) -> U2^1(f240_in(T41), .(T40, T41))
   F240_IN(.(T40, T41)) -> F240_IN(T41)
   F238_IN(T17) -> U3^1(f240_in(T17), T17)
   F238_IN(T17) -> F240_IN(T17)
   U3^1(f240_out1(T18), T17) -> U4^1(f1_in(T17), T17, T18)
   U3^1(f240_out1(T18), T17) -> F1_IN(T17)

The TRS R consists of the following rules:

   f1_in(T17) -> U1(f238_in(T17), T17)
   U1(f238_out1(T18, T19), T17) -> f1_out1(.(T18, T19))
   f1_in(T57) -> f1_out1([])
   f240_in(.(T40, T41)) -> U2(f240_in(T41), .(T40, T41))
   U2(f240_out1(T42), .(T40, T41)) -> f240_out1(T42)
   f240_in(.(T50, T51)) -> f240_out1(T50)
   f238_in(T17) -> U3(f240_in(T17), T17)
   U3(f240_out1(T18), T17) -> U4(f1_in(T17), T17, T18)
   U4(f1_out1(T23), T17, T18) -> f238_out1(T18, T23)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(49) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 4 less nodes.
----------------------------------------

(50)
Complex Obligation (AND)

----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F240_IN(.(T40, T41)) -> F240_IN(T41)

The TRS R consists of the following rules:

   f1_in(T17) -> U1(f238_in(T17), T17)
   U1(f238_out1(T18, T19), T17) -> f1_out1(.(T18, T19))
   f1_in(T57) -> f1_out1([])
   f240_in(.(T40, T41)) -> U2(f240_in(T41), .(T40, T41))
   U2(f240_out1(T42), .(T40, T41)) -> f240_out1(T42)
   f240_in(.(T50, T51)) -> f240_out1(T50)
   f238_in(T17) -> U3(f240_in(T17), T17)
   U3(f240_out1(T18), T17) -> U4(f1_in(T17), T17, T18)
   U4(f1_out1(T23), T17, T18) -> f238_out1(T18, T23)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(52) UsableRulesProof (EQUIVALENT)
We can use the usable rules and reduction pair processor [LPAR04] with the Ce-compatible extension of the polynomial order that maps every function symbol to the sum of its arguments. Then, we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F240_IN(.(T40, T41)) -> F240_IN(T41)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(54) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F240_IN(.(T40, T41)) -> F240_IN(T41)
The graph contains the following edges 1 > 1


----------------------------------------

(55)
YES

----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(T17) -> F238_IN(T17)
   F238_IN(T17) -> U3^1(f240_in(T17), T17)
   U3^1(f240_out1(T18), T17) -> F1_IN(T17)

The TRS R consists of the following rules:

   f1_in(T17) -> U1(f238_in(T17), T17)
   U1(f238_out1(T18, T19), T17) -> f1_out1(.(T18, T19))
   f1_in(T57) -> f1_out1([])
   f240_in(.(T40, T41)) -> U2(f240_in(T41), .(T40, T41))
   U2(f240_out1(T42), .(T40, T41)) -> f240_out1(T42)
   f240_in(.(T50, T51)) -> f240_out1(T50)
   f238_in(T17) -> U3(f240_in(T17), T17)
   U3(f240_out1(T18), T17) -> U4(f1_in(T17), T17, T18)
   U4(f1_out1(T23), T17, T18) -> f238_out1(T18, T23)

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(57) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F238_IN(.(T50, T51)) evaluates to  t =F238_IN(.(T50, T51))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

F238_IN(.(T50, T51)) -> U3^1(f240_in(.(T50, T51)), .(T50, T51))
with rule F238_IN(T17) -> U3^1(f240_in(T17), T17) at position [] and matcher [T17 / .(T50, T51)]

U3^1(f240_in(.(T50, T51)), .(T50, T51)) -> U3^1(f240_out1(T50), .(T50, T51))
with rule f240_in(.(T50', T51')) -> f240_out1(T50') at position [0] and matcher [T50' / T50, T51' / T51]

U3^1(f240_out1(T50), .(T50, T51)) -> F1_IN(.(T50, T51))
with rule U3^1(f240_out1(T18), T17') -> F1_IN(T17') at position [] and matcher [T18 / T50, T17' / .(T50, T51)]

F1_IN(.(T50, T51)) -> F238_IN(.(T50, T51))
with rule F1_IN(T17) -> F238_IN(T17)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(58)
NO

----------------------------------------

(59) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 5,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(member X (. Y Xs))",
                "(member X Xs)"
            ],
            [
                "(member X (. X Xs))",
                null
            ],
            [
                "(subset (. X Xs) Ys)",
                "(',' (member X Ys) (subset Xs Ys))"
            ],
            [
                "(subset ([]) Ys)",
                null
            ],
            [
                "(member1 X (. Y Xs))",
                "(member1 X Xs)"
            ],
            [
                "(member1 X (. X Xs))",
                null
            ],
            [
                "(subset1 (. X Xs) Ys)",
                "(',' (member1 X Ys) (subset1 Xs Ys))"
            ],
            [
                "(subset1 ([]) Ys)",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "270": {
                "goal": [{
                    "clause": 5,
                    "scope": 3,
                    "term": "(member1 T26 T25)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T25"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "250": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (member1 T9 T8) (subset1 T10 T8))"
                    },
                    {
                        "clause": 7,
                        "scope": 1,
                        "term": "(subset1 T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "251": {
                "goal": [{
                    "clause": 7,
                    "scope": 1,
                    "term": "(subset1 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(subset1 T1 T2)",
                        "(subset1 (. X4 X5) X6)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [
                        "X4",
                        "X5",
                        "X6"
                    ],
                    "exprvars": []
                }
            },
            "252": {
                "goal": [
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(',' (member1 T9 T8) (subset1 T10 T8))"
                    },
                    {
                        "clause": 5,
                        "scope": 2,
                        "term": "(',' (member1 T9 T8) (subset1 T10 T8))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 7,
                        "scope": 1,
                        "term": "(subset1 T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "253": {
                "goal": [{
                    "clause": 4,
                    "scope": 2,
                    "term": "(',' (member1 T9 T8) (subset1 T10 T8))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "254": {
                "goal": [
                    {
                        "clause": 5,
                        "scope": 2,
                        "term": "(',' (member1 T9 T8) (subset1 T10 T8))"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 7,
                        "scope": 1,
                        "term": "(subset1 T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "277": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member1 T50 T49)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T49"],
                    "free": [],
                    "exprvars": []
                }
            },
            "278": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "279": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "258": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member1 T26 T25) (subset1 T27 (. T24 T25)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T24",
                        "T25"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "259": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "280": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "281": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "260": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member1 T26 T25)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T25"],
                    "free": [],
                    "exprvars": []
                }
            },
            "282": {
                "goal": [{
                    "clause": 5,
                    "scope": 2,
                    "term": "(',' (member1 T9 T8) (subset1 T10 T8))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "261": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset1 T31 (. T24 T25))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T24",
                        "T25"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "283": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 7,
                        "scope": 1,
                        "term": "(subset1 T1 T8)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "284": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset1 T74 (. T72 T73))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T72",
                        "T73"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "285": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "286": {
                "goal": [{
                    "clause": 7,
                    "scope": 1,
                    "term": "(subset1 T1 T8)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "268": {
                "goal": [
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(member1 T26 T25)"
                    },
                    {
                        "clause": 5,
                        "scope": 3,
                        "term": "(member1 T26 T25)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T25"],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset1 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "269": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(member1 T26 T25)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T25"],
                    "free": [],
                    "exprvars": []
                }
            },
            "302": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "303": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [
                    {
                        "clause": 6,
                        "scope": 1,
                        "term": "(subset1 T1 T2)"
                    },
                    {
                        "clause": 7,
                        "scope": 1,
                        "term": "(subset1 T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "304": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "305": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "306": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "307": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 5,
                "to": 7,
                "label": "CASE"
            },
            {
                "from": 7,
                "to": 250,
                "label": "EVAL with clause\nsubset1(.(X4, X5), X6) :- ','(member1(X4, X6), subset1(X5, X6)).\nand substitutionX4 -> T9,\nX5 -> T10,\nT1 -> .(T9, T10),\nT2 -> T8,\nX6 -> T8,\nT6 -> T9,\nT7 -> T10"
            },
            {
                "from": 7,
                "to": 251,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 250,
                "to": 252,
                "label": "CASE"
            },
            {
                "from": 251,
                "to": 305,
                "label": "EVAL with clause\nsubset1([], X72).\nand substitutionT1 -> [],\nT2 -> T83,\nX72 -> T83"
            },
            {
                "from": 251,
                "to": 306,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 252,
                "to": 253,
                "label": "PARALLEL"
            },
            {
                "from": 252,
                "to": 254,
                "label": "PARALLEL"
            },
            {
                "from": 253,
                "to": 258,
                "label": "EVAL with clause\nmember1(X19, .(X20, X21)) :- member1(X19, X21).\nand substitutionT9 -> T26,\nX19 -> T26,\nX20 -> T24,\nX21 -> T25,\nT8 -> .(T24, T25),\nT23 -> T26,\nT10 -> T27"
            },
            {
                "from": 253,
                "to": 259,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 254,
                "to": 282,
                "label": "PARALLEL"
            },
            {
                "from": 254,
                "to": 283,
                "label": "PARALLEL"
            },
            {
                "from": 258,
                "to": 260,
                "label": "SPLIT 1"
            },
            {
                "from": 258,
                "to": 261,
                "label": "SPLIT 2\nnew knowledge:\nT26 is ground\nT25 is ground\nreplacements:T27 -> T31"
            },
            {
                "from": 260,
                "to": 268,
                "label": "CASE"
            },
            {
                "from": 261,
                "to": 5,
                "label": "INSTANCE with matching:\nT1 -> T31\nT2 -> .(T24, T25)"
            },
            {
                "from": 268,
                "to": 269,
                "label": "PARALLEL"
            },
            {
                "from": 268,
                "to": 270,
                "label": "PARALLEL"
            },
            {
                "from": 269,
                "to": 277,
                "label": "EVAL with clause\nmember1(X40, .(X41, X42)) :- member1(X40, X42).\nand substitutionT26 -> T50,\nX40 -> T50,\nX41 -> T48,\nX42 -> T49,\nT25 -> .(T48, T49),\nT47 -> T50"
            },
            {
                "from": 269,
                "to": 278,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 270,
                "to": 279,
                "label": "EVAL with clause\nmember1(X50, .(X50, X51)).\nand substitutionT26 -> T58,\nX50 -> T58,\nX51 -> T59,\nT25 -> .(T58, T59)"
            },
            {
                "from": 270,
                "to": 280,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 277,
                "to": 260,
                "label": "INSTANCE with matching:\nT26 -> T50\nT25 -> T49"
            },
            {
                "from": 279,
                "to": 281,
                "label": "SUCCESS"
            },
            {
                "from": 282,
                "to": 284,
                "label": "EVAL with clause\nmember1(X63, .(X63, X64)).\nand substitutionT9 -> T72,\nX63 -> T72,\nX64 -> T73,\nT8 -> .(T72, T73),\nT10 -> T74"
            },
            {
                "from": 282,
                "to": 285,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 283,
                "to": 286,
                "label": "FAILURE"
            },
            {
                "from": 284,
                "to": 5,
                "label": "INSTANCE with matching:\nT1 -> T74\nT2 -> .(T72, T73)"
            },
            {
                "from": 286,
                "to": 302,
                "label": "EVAL with clause\nsubset1([], X70).\nand substitutionT1 -> [],\nT8 -> T81,\nX70 -> T81"
            },
            {
                "from": 286,
                "to": 303,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 302,
                "to": 304,
                "label": "SUCCESS"
            },
            {
                "from": 305,
                "to": 307,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(60)
Obligation:
Triples:

member1B(X1, .(X2, X3)) :- member1B(X1, X3).
subset1A(.(X1, X2), .(X3, X4)) :- member1B(X1, X4).
subset1A(.(X1, X2), .(X3, X4)) :- ','(member1cB(X1, X4), subset1A(X2, .(X3, X4))).
subset1A(.(X1, X2), .(X1, X3)) :- subset1A(X2, .(X1, X3)).

Clauses:

subset1cA(.(X1, X2), .(X3, X4)) :- ','(member1cB(X1, X4), subset1cA(X2, .(X3, X4))).
subset1cA(.(X1, X2), .(X1, X3)) :- subset1cA(X2, .(X1, X3)).
subset1cA([], X1).
subset1cA([], X1).
member1cB(X1, .(X2, X3)) :- member1cB(X1, X3).
member1cB(X1, .(X1, X2)).

Afs:

subset1A(x1, x2)  =  subset1A(x2)


----------------------------------------

(61) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

subset1A_in_2: (f,b)

member1B_in_2: (f,b)

member1cB_in_2: (f,b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   SUBSET1A_IN_AG(.(X1, X2), .(X3, X4)) -> U2_AG(X1, X2, X3, X4, member1B_in_ag(X1, X4))
   SUBSET1A_IN_AG(.(X1, X2), .(X3, X4)) -> MEMBER1B_IN_AG(X1, X4)
   MEMBER1B_IN_AG(X1, .(X2, X3)) -> U1_AG(X1, X2, X3, member1B_in_ag(X1, X3))
   MEMBER1B_IN_AG(X1, .(X2, X3)) -> MEMBER1B_IN_AG(X1, X3)
   SUBSET1A_IN_AG(.(X1, X2), .(X3, X4)) -> U3_AG(X1, X2, X3, X4, member1cB_in_ag(X1, X4))
   U3_AG(X1, X2, X3, X4, member1cB_out_ag(X1, X4)) -> U4_AG(X1, X2, X3, X4, subset1A_in_ag(X2, .(X3, X4)))
   U3_AG(X1, X2, X3, X4, member1cB_out_ag(X1, X4)) -> SUBSET1A_IN_AG(X2, .(X3, X4))
   SUBSET1A_IN_AG(.(X1, X2), .(X1, X3)) -> U5_AG(X1, X2, X3, subset1A_in_ag(X2, .(X1, X3)))
   SUBSET1A_IN_AG(.(X1, X2), .(X1, X3)) -> SUBSET1A_IN_AG(X2, .(X1, X3))

The TRS R consists of the following rules:

   member1cB_in_ag(X1, .(X2, X3)) -> U10_ag(X1, X2, X3, member1cB_in_ag(X1, X3))
   member1cB_in_ag(X1, .(X1, X2)) -> member1cB_out_ag(X1, .(X1, X2))
   U10_ag(X1, X2, X3, member1cB_out_ag(X1, X3)) -> member1cB_out_ag(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
subset1A_in_ag(x1, x2)  =  subset1A_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member1B_in_ag(x1, x2)  =  member1B_in_ag(x2)

member1cB_in_ag(x1, x2)  =  member1cB_in_ag(x2)

U10_ag(x1, x2, x3, x4)  =  U10_ag(x2, x3, x4)

member1cB_out_ag(x1, x2)  =  member1cB_out_ag(x1, x2)

SUBSET1A_IN_AG(x1, x2)  =  SUBSET1A_IN_AG(x2)

U2_AG(x1, x2, x3, x4, x5)  =  U2_AG(x3, x4, x5)

MEMBER1B_IN_AG(x1, x2)  =  MEMBER1B_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x2, x3, x4)

U3_AG(x1, x2, x3, x4, x5)  =  U3_AG(x3, x4, x5)

U4_AG(x1, x2, x3, x4, x5)  =  U4_AG(x3, x4, x5)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x1, x3, x4)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(62)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSET1A_IN_AG(.(X1, X2), .(X3, X4)) -> U2_AG(X1, X2, X3, X4, member1B_in_ag(X1, X4))
   SUBSET1A_IN_AG(.(X1, X2), .(X3, X4)) -> MEMBER1B_IN_AG(X1, X4)
   MEMBER1B_IN_AG(X1, .(X2, X3)) -> U1_AG(X1, X2, X3, member1B_in_ag(X1, X3))
   MEMBER1B_IN_AG(X1, .(X2, X3)) -> MEMBER1B_IN_AG(X1, X3)
   SUBSET1A_IN_AG(.(X1, X2), .(X3, X4)) -> U3_AG(X1, X2, X3, X4, member1cB_in_ag(X1, X4))
   U3_AG(X1, X2, X3, X4, member1cB_out_ag(X1, X4)) -> U4_AG(X1, X2, X3, X4, subset1A_in_ag(X2, .(X3, X4)))
   U3_AG(X1, X2, X3, X4, member1cB_out_ag(X1, X4)) -> SUBSET1A_IN_AG(X2, .(X3, X4))
   SUBSET1A_IN_AG(.(X1, X2), .(X1, X3)) -> U5_AG(X1, X2, X3, subset1A_in_ag(X2, .(X1, X3)))
   SUBSET1A_IN_AG(.(X1, X2), .(X1, X3)) -> SUBSET1A_IN_AG(X2, .(X1, X3))

The TRS R consists of the following rules:

   member1cB_in_ag(X1, .(X2, X3)) -> U10_ag(X1, X2, X3, member1cB_in_ag(X1, X3))
   member1cB_in_ag(X1, .(X1, X2)) -> member1cB_out_ag(X1, .(X1, X2))
   U10_ag(X1, X2, X3, member1cB_out_ag(X1, X3)) -> member1cB_out_ag(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
subset1A_in_ag(x1, x2)  =  subset1A_in_ag(x2)

.(x1, x2)  =  .(x1, x2)

member1B_in_ag(x1, x2)  =  member1B_in_ag(x2)

member1cB_in_ag(x1, x2)  =  member1cB_in_ag(x2)

U10_ag(x1, x2, x3, x4)  =  U10_ag(x2, x3, x4)

member1cB_out_ag(x1, x2)  =  member1cB_out_ag(x1, x2)

SUBSET1A_IN_AG(x1, x2)  =  SUBSET1A_IN_AG(x2)

U2_AG(x1, x2, x3, x4, x5)  =  U2_AG(x3, x4, x5)

MEMBER1B_IN_AG(x1, x2)  =  MEMBER1B_IN_AG(x2)

U1_AG(x1, x2, x3, x4)  =  U1_AG(x2, x3, x4)

U3_AG(x1, x2, x3, x4, x5)  =  U3_AG(x3, x4, x5)

U4_AG(x1, x2, x3, x4, x5)  =  U4_AG(x3, x4, x5)

U5_AG(x1, x2, x3, x4)  =  U5_AG(x1, x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(63) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 5 less nodes.
----------------------------------------

(64)
Complex Obligation (AND)

----------------------------------------

(65)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER1B_IN_AG(X1, .(X2, X3)) -> MEMBER1B_IN_AG(X1, X3)

The TRS R consists of the following rules:

   member1cB_in_ag(X1, .(X2, X3)) -> U10_ag(X1, X2, X3, member1cB_in_ag(X1, X3))
   member1cB_in_ag(X1, .(X1, X2)) -> member1cB_out_ag(X1, .(X1, X2))
   U10_ag(X1, X2, X3, member1cB_out_ag(X1, X3)) -> member1cB_out_ag(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

member1cB_in_ag(x1, x2)  =  member1cB_in_ag(x2)

U10_ag(x1, x2, x3, x4)  =  U10_ag(x2, x3, x4)

member1cB_out_ag(x1, x2)  =  member1cB_out_ag(x1, x2)

MEMBER1B_IN_AG(x1, x2)  =  MEMBER1B_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(66) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(67)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER1B_IN_AG(X1, .(X2, X3)) -> MEMBER1B_IN_AG(X1, X3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBER1B_IN_AG(x1, x2)  =  MEMBER1B_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(68) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(69)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER1B_IN_AG(.(X2, X3)) -> MEMBER1B_IN_AG(X3)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(70) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MEMBER1B_IN_AG(.(X2, X3)) -> MEMBER1B_IN_AG(X3)
The graph contains the following edges 1 > 1


----------------------------------------

(71)
YES

----------------------------------------

(72)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSET1A_IN_AG(.(X1, X2), .(X3, X4)) -> U3_AG(X1, X2, X3, X4, member1cB_in_ag(X1, X4))
   U3_AG(X1, X2, X3, X4, member1cB_out_ag(X1, X4)) -> SUBSET1A_IN_AG(X2, .(X3, X4))
   SUBSET1A_IN_AG(.(X1, X2), .(X1, X3)) -> SUBSET1A_IN_AG(X2, .(X1, X3))

The TRS R consists of the following rules:

   member1cB_in_ag(X1, .(X2, X3)) -> U10_ag(X1, X2, X3, member1cB_in_ag(X1, X3))
   member1cB_in_ag(X1, .(X1, X2)) -> member1cB_out_ag(X1, .(X1, X2))
   U10_ag(X1, X2, X3, member1cB_out_ag(X1, X3)) -> member1cB_out_ag(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

member1cB_in_ag(x1, x2)  =  member1cB_in_ag(x2)

U10_ag(x1, x2, x3, x4)  =  U10_ag(x2, x3, x4)

member1cB_out_ag(x1, x2)  =  member1cB_out_ag(x1, x2)

SUBSET1A_IN_AG(x1, x2)  =  SUBSET1A_IN_AG(x2)

U3_AG(x1, x2, x3, x4, x5)  =  U3_AG(x3, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(73) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(74)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUBSET1A_IN_AG(.(X3, X4)) -> U3_AG(X3, X4, member1cB_in_ag(X4))
   U3_AG(X3, X4, member1cB_out_ag(X1, X4)) -> SUBSET1A_IN_AG(.(X3, X4))
   SUBSET1A_IN_AG(.(X1, X3)) -> SUBSET1A_IN_AG(.(X1, X3))

The TRS R consists of the following rules:

   member1cB_in_ag(.(X2, X3)) -> U10_ag(X2, X3, member1cB_in_ag(X3))
   member1cB_in_ag(.(X1, X2)) -> member1cB_out_ag(X1, .(X1, X2))
   U10_ag(X2, X3, member1cB_out_ag(X1, X3)) -> member1cB_out_ag(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_ag(x0)
   U10_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(75) TransformationProof (SOUND)
By narrowing [LPAR04] the rule SUBSET1A_IN_AG(.(X3, X4)) -> U3_AG(X3, X4, member1cB_in_ag(X4)) at position [2] we obtained the following new rules [LPAR04]:

   (SUBSET1A_IN_AG(.(y0, .(x0, x1))) -> U3_AG(y0, .(x0, x1), U10_ag(x0, x1, member1cB_in_ag(x1))),SUBSET1A_IN_AG(.(y0, .(x0, x1))) -> U3_AG(y0, .(x0, x1), U10_ag(x0, x1, member1cB_in_ag(x1))))
   (SUBSET1A_IN_AG(.(y0, .(x0, x1))) -> U3_AG(y0, .(x0, x1), member1cB_out_ag(x0, .(x0, x1))),SUBSET1A_IN_AG(.(y0, .(x0, x1))) -> U3_AG(y0, .(x0, x1), member1cB_out_ag(x0, .(x0, x1))))


----------------------------------------

(76)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_AG(X3, X4, member1cB_out_ag(X1, X4)) -> SUBSET1A_IN_AG(.(X3, X4))
   SUBSET1A_IN_AG(.(X1, X3)) -> SUBSET1A_IN_AG(.(X1, X3))
   SUBSET1A_IN_AG(.(y0, .(x0, x1))) -> U3_AG(y0, .(x0, x1), U10_ag(x0, x1, member1cB_in_ag(x1)))
   SUBSET1A_IN_AG(.(y0, .(x0, x1))) -> U3_AG(y0, .(x0, x1), member1cB_out_ag(x0, .(x0, x1)))

The TRS R consists of the following rules:

   member1cB_in_ag(.(X2, X3)) -> U10_ag(X2, X3, member1cB_in_ag(X3))
   member1cB_in_ag(.(X1, X2)) -> member1cB_out_ag(X1, .(X1, X2))
   U10_ag(X2, X3, member1cB_out_ag(X1, X3)) -> member1cB_out_ag(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_ag(x0)
   U10_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(77) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U3_AG(X3, X4, member1cB_out_ag(X1, X4)) -> SUBSET1A_IN_AG(.(X3, X4)) we obtained the following new rules [LPAR04]:

   (U3_AG(z0, .(z1, z2), member1cB_out_ag(x2, .(z1, z2))) -> SUBSET1A_IN_AG(.(z0, .(z1, z2))),U3_AG(z0, .(z1, z2), member1cB_out_ag(x2, .(z1, z2))) -> SUBSET1A_IN_AG(.(z0, .(z1, z2))))
   (U3_AG(z0, .(z1, z2), member1cB_out_ag(z1, .(z1, z2))) -> SUBSET1A_IN_AG(.(z0, .(z1, z2))),U3_AG(z0, .(z1, z2), member1cB_out_ag(z1, .(z1, z2))) -> SUBSET1A_IN_AG(.(z0, .(z1, z2))))


----------------------------------------

(78)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUBSET1A_IN_AG(.(X1, X3)) -> SUBSET1A_IN_AG(.(X1, X3))
   SUBSET1A_IN_AG(.(y0, .(x0, x1))) -> U3_AG(y0, .(x0, x1), U10_ag(x0, x1, member1cB_in_ag(x1)))
   SUBSET1A_IN_AG(.(y0, .(x0, x1))) -> U3_AG(y0, .(x0, x1), member1cB_out_ag(x0, .(x0, x1)))
   U3_AG(z0, .(z1, z2), member1cB_out_ag(x2, .(z1, z2))) -> SUBSET1A_IN_AG(.(z0, .(z1, z2)))
   U3_AG(z0, .(z1, z2), member1cB_out_ag(z1, .(z1, z2))) -> SUBSET1A_IN_AG(.(z0, .(z1, z2)))

The TRS R consists of the following rules:

   member1cB_in_ag(.(X2, X3)) -> U10_ag(X2, X3, member1cB_in_ag(X3))
   member1cB_in_ag(.(X1, X2)) -> member1cB_out_ag(X1, .(X1, X2))
   U10_ag(X2, X3, member1cB_out_ag(X1, X3)) -> member1cB_out_ag(X1, .(X2, X3))

The set Q consists of the following terms:

   member1cB_in_ag(x0)
   U10_ag(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(79) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(member X (. Y Xs))",
                "(member X Xs)"
            ],
            [
                "(member X (. X Xs))",
                null
            ],
            [
                "(subset (. X Xs) Ys)",
                "(',' (member X Ys) (subset Xs Ys))"
            ],
            [
                "(subset ([]) Ys)",
                null
            ],
            [
                "(member1 X (. Y Xs))",
                "(member1 X Xs)"
            ],
            [
                "(member1 X (. X Xs))",
                null
            ],
            [
                "(subset1 (. X Xs) Ys)",
                "(',' (member1 X Ys) (subset1 Xs Ys))"
            ],
            [
                "(subset1 ([]) Ys)",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "23": {
                "goal": [{
                    "clause": 6,
                    "scope": 1,
                    "term": "(subset1 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "24": {
                "goal": [{
                    "clause": 7,
                    "scope": 1,
                    "term": "(subset1 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "290": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset1 T23 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "291": {
                "goal": [
                    {
                        "clause": 4,
                        "scope": 2,
                        "term": "(member1 T18 T17)"
                    },
                    {
                        "clause": 5,
                        "scope": 2,
                        "term": "(member1 T18 T17)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "292": {
                "goal": [{
                    "clause": 4,
                    "scope": 2,
                    "term": "(member1 T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "293": {
                "goal": [{
                    "clause": 5,
                    "scope": 2,
                    "term": "(member1 T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "294": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member1 T42 T41)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T41"],
                    "free": [],
                    "exprvars": []
                }
            },
            "295": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "296": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "297": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "287": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member1 T18 T17) (subset1 T19 T17))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "298": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "288": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "299": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset1 T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "289": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member1 T18 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T17"],
                    "free": [],
                    "exprvars": []
                }
            },
            "300": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 6,
                        "scope": 1,
                        "term": "(subset1 T1 T2)"
                    },
                    {
                        "clause": 7,
                        "scope": 1,
                        "term": "(subset1 T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "301": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 23,
                "label": "PARALLEL"
            },
            {
                "from": 4,
                "to": 24,
                "label": "PARALLEL"
            },
            {
                "from": 23,
                "to": 287,
                "label": "EVAL with clause\nsubset1(.(X13, X14), X15) :- ','(member1(X13, X15), subset1(X14, X15)).\nand substitutionX13 -> T18,\nX14 -> T19,\nT1 -> .(T18, T19),\nT2 -> T17,\nX15 -> T17,\nT15 -> T18,\nT16 -> T19"
            },
            {
                "from": 23,
                "to": 288,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 24,
                "to": 299,
                "label": "EVAL with clause\nsubset1([], X51).\nand substitutionT1 -> [],\nT2 -> T57,\nX51 -> T57"
            },
            {
                "from": 24,
                "to": 300,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 287,
                "to": 289,
                "label": "SPLIT 1"
            },
            {
                "from": 287,
                "to": 290,
                "label": "SPLIT 2\nnew knowledge:\nT18 is ground\nT17 is ground\nreplacements:T19 -> T23"
            },
            {
                "from": 289,
                "to": 291,
                "label": "CASE"
            },
            {
                "from": 290,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T23\nT2 -> T17"
            },
            {
                "from": 291,
                "to": 292,
                "label": "PARALLEL"
            },
            {
                "from": 291,
                "to": 293,
                "label": "PARALLEL"
            },
            {
                "from": 292,
                "to": 294,
                "label": "EVAL with clause\nmember1(X34, .(X35, X36)) :- member1(X34, X36).\nand substitutionT18 -> T42,\nX34 -> T42,\nX35 -> T40,\nX36 -> T41,\nT17 -> .(T40, T41),\nT39 -> T42"
            },
            {
                "from": 292,
                "to": 295,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 293,
                "to": 296,
                "label": "EVAL with clause\nmember1(X44, .(X44, X45)).\nand substitutionT18 -> T50,\nX44 -> T50,\nX45 -> T51,\nT17 -> .(T50, T51)"
            },
            {
                "from": 293,
                "to": 297,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 294,
                "to": 289,
                "label": "INSTANCE with matching:\nT18 -> T42\nT17 -> T41"
            },
            {
                "from": 296,
                "to": 298,
                "label": "SUCCESS"
            },
            {
                "from": 299,
                "to": 301,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(80)
Complex Obligation (AND)

----------------------------------------

(81)
Obligation:
Rules:
f295_out -> f292_out(T17) :|: TRUE
f294_out(T41) -> f292_out(.(T40, T41)) :|: TRUE
f292_in(.(x, x1)) -> f294_in(x1) :|: TRUE
f292_in(x2) -> f295_in :|: TRUE
f291_out(x3) -> f289_out(x3) :|: TRUE
f289_in(x4) -> f291_in(x4) :|: TRUE
f292_out(x5) -> f291_out(x5) :|: TRUE
f291_in(x6) -> f293_in(x6) :|: TRUE
f291_in(x7) -> f292_in(x7) :|: TRUE
f293_out(x8) -> f291_out(x8) :|: TRUE
f294_in(x9) -> f289_in(x9) :|: TRUE
f289_out(x10) -> f294_out(x10) :|: TRUE
f4_out(T2) -> f3_out(T2) :|: TRUE
f3_in(x11) -> f4_in(x11) :|: TRUE
f4_in(x12) -> f24_in(x12) :|: TRUE
f4_in(x13) -> f23_in(x13) :|: TRUE
f23_out(x14) -> f4_out(x14) :|: TRUE
f24_out(x15) -> f4_out(x15) :|: TRUE
f23_in(x16) -> f288_in :|: TRUE
f23_in(x17) -> f287_in(x17) :|: TRUE
f287_out(x18) -> f23_out(x18) :|: TRUE
f288_out -> f23_out(x19) :|: TRUE
f290_out(x20) -> f287_out(x20) :|: TRUE
f289_out(x21) -> f290_in(x21) :|: TRUE
f287_in(x22) -> f289_in(x22) :|: TRUE
Start term: f3_in(T2)

----------------------------------------

(82) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f292_in(.(x, x1)) -> f294_in(x1) :|: TRUE
f289_in(x4) -> f291_in(x4) :|: TRUE
f291_in(x7) -> f292_in(x7) :|: TRUE
f294_in(x9) -> f289_in(x9) :|: TRUE


----------------------------------------

(83)
Obligation:
Rules:
f292_in(.(x, x1)) -> f294_in(x1) :|: TRUE
f289_in(x4) -> f291_in(x4) :|: TRUE
f291_in(x7) -> f292_in(x7) :|: TRUE
f294_in(x9) -> f289_in(x9) :|: TRUE

----------------------------------------

(84) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(85)
Obligation:
Rules:
f289_in(.(x:0, x1:0)) -> f289_in(x1:0) :|: TRUE

----------------------------------------

(86) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(87)
Obligation:
Rules:
f289_in(.(x:0, x1:0)) -> f289_in(x1:0) :|: TRUE

----------------------------------------

(88) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f289_in(.(x:0, x1:0)) -> f289_in(x1:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(89)
Obligation:

Termination digraph:
Nodes:
(1) f289_in(.(x:0, x1:0)) -> f289_in(x1:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(90) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   .(x1, x2) -> .(x2)

----------------------------------------

(91)
Obligation:
Rules:
f289_in(.(x1:0)) -> f289_in(x1:0) :|: TRUE

----------------------------------------

(92) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f289_in(VARIABLE)
.(VARIABLE)
Removed predefined arithmetic.
----------------------------------------

(93)
Obligation:
Rules:
f289_in(.(x1:0)) -> f289_in(x1:0)

----------------------------------------

(94) IRSwTToQDPProof (SOUND)
Removed the integers and created a QDP-Problem.
----------------------------------------

(95)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   f289_in(.(x1:0)) -> f289_in(x1:0)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(96) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*f289_in(.(x1:0)) -> f289_in(x1:0)
The graph contains the following edges 1 > 1


----------------------------------------

(97)
YES

----------------------------------------

(98)
Obligation:
Rules:
f4_out(T2) -> f3_out(T2) :|: TRUE
f3_in(x) -> f4_in(x) :|: TRUE
f294_in(T41) -> f289_in(T41) :|: TRUE
f289_out(x1) -> f294_out(x1) :|: TRUE
f23_in(x2) -> f288_in :|: TRUE
f23_in(T17) -> f287_in(T17) :|: TRUE
f287_out(x3) -> f23_out(x3) :|: TRUE
f288_out -> f23_out(x4) :|: TRUE
f295_out -> f292_out(x5) :|: TRUE
f294_out(x6) -> f292_out(.(x7, x6)) :|: TRUE
f292_in(.(x8, x9)) -> f294_in(x9) :|: TRUE
f292_in(x10) -> f295_in :|: TRUE
f291_out(x11) -> f289_out(x11) :|: TRUE
f289_in(x12) -> f291_in(x12) :|: TRUE
f296_out -> f293_out(.(T50, T51)) :|: TRUE
f297_out -> f293_out(x13) :|: TRUE
f293_in(.(x14, x15)) -> f296_in :|: TRUE
f293_in(x16) -> f297_in :|: TRUE
f290_in(x17) -> f3_in(x17) :|: TRUE
f3_out(x18) -> f290_out(x18) :|: TRUE
f290_out(x19) -> f287_out(x19) :|: TRUE
f289_out(x20) -> f290_in(x20) :|: TRUE
f287_in(x21) -> f289_in(x21) :|: TRUE
f4_in(x22) -> f24_in(x22) :|: TRUE
f4_in(x23) -> f23_in(x23) :|: TRUE
f23_out(x24) -> f4_out(x24) :|: TRUE
f24_out(x25) -> f4_out(x25) :|: TRUE
f292_out(x26) -> f291_out(x26) :|: TRUE
f291_in(x27) -> f293_in(x27) :|: TRUE
f291_in(x28) -> f292_in(x28) :|: TRUE
f293_out(x29) -> f291_out(x29) :|: TRUE
f296_in -> f296_out :|: TRUE
Start term: f3_in(T2)

----------------------------------------

(99) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f3_in(x) -> f4_in(x) :|: TRUE
f294_in(T41) -> f289_in(T41) :|: TRUE
f289_out(x1) -> f294_out(x1) :|: TRUE
f23_in(T17) -> f287_in(T17) :|: TRUE
f294_out(x6) -> f292_out(.(x7, x6)) :|: TRUE
f292_in(.(x8, x9)) -> f294_in(x9) :|: TRUE
f291_out(x11) -> f289_out(x11) :|: TRUE
f289_in(x12) -> f291_in(x12) :|: TRUE
f296_out -> f293_out(.(T50, T51)) :|: TRUE
f293_in(.(x14, x15)) -> f296_in :|: TRUE
f290_in(x17) -> f3_in(x17) :|: TRUE
f289_out(x20) -> f290_in(x20) :|: TRUE
f287_in(x21) -> f289_in(x21) :|: TRUE
f4_in(x23) -> f23_in(x23) :|: TRUE
f292_out(x26) -> f291_out(x26) :|: TRUE
f291_in(x27) -> f293_in(x27) :|: TRUE
f291_in(x28) -> f292_in(x28) :|: TRUE
f293_out(x29) -> f291_out(x29) :|: TRUE
f296_in -> f296_out :|: TRUE


----------------------------------------

(100)
Obligation:
Rules:
f3_in(x) -> f4_in(x) :|: TRUE
f294_in(T41) -> f289_in(T41) :|: TRUE
f289_out(x1) -> f294_out(x1) :|: TRUE
f23_in(T17) -> f287_in(T17) :|: TRUE
f294_out(x6) -> f292_out(.(x7, x6)) :|: TRUE
f292_in(.(x8, x9)) -> f294_in(x9) :|: TRUE
f291_out(x11) -> f289_out(x11) :|: TRUE
f289_in(x12) -> f291_in(x12) :|: TRUE
f296_out -> f293_out(.(T50, T51)) :|: TRUE
f293_in(.(x14, x15)) -> f296_in :|: TRUE
f290_in(x17) -> f3_in(x17) :|: TRUE
f289_out(x20) -> f290_in(x20) :|: TRUE
f287_in(x21) -> f289_in(x21) :|: TRUE
f4_in(x23) -> f23_in(x23) :|: TRUE
f292_out(x26) -> f291_out(x26) :|: TRUE
f291_in(x27) -> f293_in(x27) :|: TRUE
f291_in(x28) -> f292_in(x28) :|: TRUE
f293_out(x29) -> f291_out(x29) :|: TRUE
f296_in -> f296_out :|: TRUE

----------------------------------------

(101) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(102)
Obligation:
Rules:
f291_out(x11:0) -> f291_in(x11:0) :|: TRUE
f291_out(x) -> f291_out(.(x1, x)) :|: TRUE
f291_in(.(x14:0, x15:0)) -> f291_out(.(T50:0, T51:0)) :|: TRUE
f291_in(.(x8:0, x9:0)) -> f291_in(x9:0) :|: TRUE

----------------------------------------

(103) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(104)
Obligation:
Rules:
f291_out(x11:0) -> f291_in(x11:0) :|: TRUE
f291_out(x) -> f291_out(.(x1, x)) :|: TRUE
f291_in(.(x14:0, x15:0)) -> f291_out(.(T50:0, T51:0)) :|: TRUE
f291_in(.(x8:0, x9:0)) -> f291_in(x9:0) :|: TRUE
