YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/72Th4.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

front(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) PiDPToQDPProof [SOUND, 0 ms]
        (16) QDP
        (17) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (18) YES


----------------------------------------

(0)
Obligation:
Clauses:

front(void, []).
front(tree(X, void, void), .(X, [])).
front(tree(X1, L, R), Xs) :- ','(front(L, Ls), ','(front(R, Rs), app(Ls, Rs, Xs))).
app([], X, X).
app(.(X, Xs), Ys, .(X, Zs)) :- app(Xs, Ys, Zs).


Query: front(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

front_in_2: (b,f)

app_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   front_in_ga(void, []) -> front_out_ga(void, [])
   front_in_ga(tree(X, void, void), .(X, [])) -> front_out_ga(tree(X, void, void), .(X, []))
   front_in_ga(tree(X1, L, R), Xs) -> U1_ga(X1, L, R, Xs, front_in_ga(L, Ls))
   U1_ga(X1, L, R, Xs, front_out_ga(L, Ls)) -> U2_ga(X1, L, R, Xs, Ls, front_in_ga(R, Rs))
   U2_ga(X1, L, R, Xs, Ls, front_out_ga(R, Rs)) -> U3_ga(X1, L, R, Xs, app_in_gga(Ls, Rs, Xs))
   app_in_gga([], X, X) -> app_out_gga([], X, X)
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U4_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   U4_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_ga(X1, L, R, Xs, app_out_gga(Ls, Rs, Xs)) -> front_out_ga(tree(X1, L, R), Xs)

The argument filtering Pi contains the following mapping:
front_in_ga(x1, x2)  =  front_in_ga(x1)

void  =  void

front_out_ga(x1, x2)  =  front_out_ga(x1, x2)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x1, x2, x3, x5, x6)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x2, x3, x5)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x1, x2, x3, x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   front_in_ga(void, []) -> front_out_ga(void, [])
   front_in_ga(tree(X, void, void), .(X, [])) -> front_out_ga(tree(X, void, void), .(X, []))
   front_in_ga(tree(X1, L, R), Xs) -> U1_ga(X1, L, R, Xs, front_in_ga(L, Ls))
   U1_ga(X1, L, R, Xs, front_out_ga(L, Ls)) -> U2_ga(X1, L, R, Xs, Ls, front_in_ga(R, Rs))
   U2_ga(X1, L, R, Xs, Ls, front_out_ga(R, Rs)) -> U3_ga(X1, L, R, Xs, app_in_gga(Ls, Rs, Xs))
   app_in_gga([], X, X) -> app_out_gga([], X, X)
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U4_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   U4_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_ga(X1, L, R, Xs, app_out_gga(Ls, Rs, Xs)) -> front_out_ga(tree(X1, L, R), Xs)

The argument filtering Pi contains the following mapping:
front_in_ga(x1, x2)  =  front_in_ga(x1)

void  =  void

front_out_ga(x1, x2)  =  front_out_ga(x1, x2)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x1, x2, x3, x5, x6)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x2, x3, x5)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x1, x2, x3, x5)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   FRONT_IN_GA(tree(X1, L, R), Xs) -> U1_GA(X1, L, R, Xs, front_in_ga(L, Ls))
   FRONT_IN_GA(tree(X1, L, R), Xs) -> FRONT_IN_GA(L, Ls)
   U1_GA(X1, L, R, Xs, front_out_ga(L, Ls)) -> U2_GA(X1, L, R, Xs, Ls, front_in_ga(R, Rs))
   U1_GA(X1, L, R, Xs, front_out_ga(L, Ls)) -> FRONT_IN_GA(R, Rs)
   U2_GA(X1, L, R, Xs, Ls, front_out_ga(R, Rs)) -> U3_GA(X1, L, R, Xs, app_in_gga(Ls, Rs, Xs))
   U2_GA(X1, L, R, Xs, Ls, front_out_ga(R, Rs)) -> APP_IN_GGA(Ls, Rs, Xs)
   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> U4_GGA(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   front_in_ga(void, []) -> front_out_ga(void, [])
   front_in_ga(tree(X, void, void), .(X, [])) -> front_out_ga(tree(X, void, void), .(X, []))
   front_in_ga(tree(X1, L, R), Xs) -> U1_ga(X1, L, R, Xs, front_in_ga(L, Ls))
   U1_ga(X1, L, R, Xs, front_out_ga(L, Ls)) -> U2_ga(X1, L, R, Xs, Ls, front_in_ga(R, Rs))
   U2_ga(X1, L, R, Xs, Ls, front_out_ga(R, Rs)) -> U3_ga(X1, L, R, Xs, app_in_gga(Ls, Rs, Xs))
   app_in_gga([], X, X) -> app_out_gga([], X, X)
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U4_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   U4_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_ga(X1, L, R, Xs, app_out_gga(Ls, Rs, Xs)) -> front_out_ga(tree(X1, L, R), Xs)

The argument filtering Pi contains the following mapping:
front_in_ga(x1, x2)  =  front_in_ga(x1)

void  =  void

front_out_ga(x1, x2)  =  front_out_ga(x1, x2)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x1, x2, x3, x5, x6)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x2, x3, x5)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x1, x2, x3, x5)

FRONT_IN_GA(x1, x2)  =  FRONT_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x1, x2, x3, x5)

U2_GA(x1, x2, x3, x4, x5, x6)  =  U2_GA(x1, x2, x3, x5, x6)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x1, x2, x3, x5)

APP_IN_GGA(x1, x2, x3)  =  APP_IN_GGA(x1, x2)

U4_GGA(x1, x2, x3, x4, x5)  =  U4_GGA(x1, x2, x3, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   FRONT_IN_GA(tree(X1, L, R), Xs) -> U1_GA(X1, L, R, Xs, front_in_ga(L, Ls))
   FRONT_IN_GA(tree(X1, L, R), Xs) -> FRONT_IN_GA(L, Ls)
   U1_GA(X1, L, R, Xs, front_out_ga(L, Ls)) -> U2_GA(X1, L, R, Xs, Ls, front_in_ga(R, Rs))
   U1_GA(X1, L, R, Xs, front_out_ga(L, Ls)) -> FRONT_IN_GA(R, Rs)
   U2_GA(X1, L, R, Xs, Ls, front_out_ga(R, Rs)) -> U3_GA(X1, L, R, Xs, app_in_gga(Ls, Rs, Xs))
   U2_GA(X1, L, R, Xs, Ls, front_out_ga(R, Rs)) -> APP_IN_GGA(Ls, Rs, Xs)
   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> U4_GGA(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   front_in_ga(void, []) -> front_out_ga(void, [])
   front_in_ga(tree(X, void, void), .(X, [])) -> front_out_ga(tree(X, void, void), .(X, []))
   front_in_ga(tree(X1, L, R), Xs) -> U1_ga(X1, L, R, Xs, front_in_ga(L, Ls))
   U1_ga(X1, L, R, Xs, front_out_ga(L, Ls)) -> U2_ga(X1, L, R, Xs, Ls, front_in_ga(R, Rs))
   U2_ga(X1, L, R, Xs, Ls, front_out_ga(R, Rs)) -> U3_ga(X1, L, R, Xs, app_in_gga(Ls, Rs, Xs))
   app_in_gga([], X, X) -> app_out_gga([], X, X)
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U4_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   U4_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_ga(X1, L, R, Xs, app_out_gga(Ls, Rs, Xs)) -> front_out_ga(tree(X1, L, R), Xs)

The argument filtering Pi contains the following mapping:
front_in_ga(x1, x2)  =  front_in_ga(x1)

void  =  void

front_out_ga(x1, x2)  =  front_out_ga(x1, x2)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x1, x2, x3, x5, x6)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x2, x3, x5)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x1, x2, x3, x5)

FRONT_IN_GA(x1, x2)  =  FRONT_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x1, x2, x3, x5)

U2_GA(x1, x2, x3, x4, x5, x6)  =  U2_GA(x1, x2, x3, x5, x6)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x1, x2, x3, x5)

APP_IN_GGA(x1, x2, x3)  =  APP_IN_GGA(x1, x2)

U4_GGA(x1, x2, x3, x4, x5)  =  U4_GGA(x1, x2, x3, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 4 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGA(Xs, Ys, Zs)

The TRS R consists of the following rules:

   front_in_ga(void, []) -> front_out_ga(void, [])
   front_in_ga(tree(X, void, void), .(X, [])) -> front_out_ga(tree(X, void, void), .(X, []))
   front_in_ga(tree(X1, L, R), Xs) -> U1_ga(X1, L, R, Xs, front_in_ga(L, Ls))
   U1_ga(X1, L, R, Xs, front_out_ga(L, Ls)) -> U2_ga(X1, L, R, Xs, Ls, front_in_ga(R, Rs))
   U2_ga(X1, L, R, Xs, Ls, front_out_ga(R, Rs)) -> U3_ga(X1, L, R, Xs, app_in_gga(Ls, Rs, Xs))
   app_in_gga([], X, X) -> app_out_gga([], X, X)
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U4_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   U4_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_ga(X1, L, R, Xs, app_out_gga(Ls, Rs, Xs)) -> front_out_ga(tree(X1, L, R), Xs)

The argument filtering Pi contains the following mapping:
front_in_ga(x1, x2)  =  front_in_ga(x1)

void  =  void

front_out_ga(x1, x2)  =  front_out_ga(x1, x2)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x1, x2, x3, x5, x6)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x2, x3, x5)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x1, x2, x3, x5)

APP_IN_GGA(x1, x2, x3)  =  APP_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APP_IN_GGA(.(X, Xs), Ys, .(X, Zs)) -> APP_IN_GGA(Xs, Ys, Zs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

APP_IN_GGA(x1, x2, x3)  =  APP_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APP_IN_GGA(.(X, Xs), Ys) -> APP_IN_GGA(Xs, Ys)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APP_IN_GGA(.(X, Xs), Ys) -> APP_IN_GGA(Xs, Ys)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(X1, L, R, Xs, front_out_ga(L, Ls)) -> FRONT_IN_GA(R, Rs)
   FRONT_IN_GA(tree(X1, L, R), Xs) -> U1_GA(X1, L, R, Xs, front_in_ga(L, Ls))
   FRONT_IN_GA(tree(X1, L, R), Xs) -> FRONT_IN_GA(L, Ls)

The TRS R consists of the following rules:

   front_in_ga(void, []) -> front_out_ga(void, [])
   front_in_ga(tree(X, void, void), .(X, [])) -> front_out_ga(tree(X, void, void), .(X, []))
   front_in_ga(tree(X1, L, R), Xs) -> U1_ga(X1, L, R, Xs, front_in_ga(L, Ls))
   U1_ga(X1, L, R, Xs, front_out_ga(L, Ls)) -> U2_ga(X1, L, R, Xs, Ls, front_in_ga(R, Rs))
   U2_ga(X1, L, R, Xs, Ls, front_out_ga(R, Rs)) -> U3_ga(X1, L, R, Xs, app_in_gga(Ls, Rs, Xs))
   app_in_gga([], X, X) -> app_out_gga([], X, X)
   app_in_gga(.(X, Xs), Ys, .(X, Zs)) -> U4_gga(X, Xs, Ys, Zs, app_in_gga(Xs, Ys, Zs))
   U4_gga(X, Xs, Ys, Zs, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_ga(X1, L, R, Xs, app_out_gga(Ls, Rs, Xs)) -> front_out_ga(tree(X1, L, R), Xs)

The argument filtering Pi contains the following mapping:
front_in_ga(x1, x2)  =  front_in_ga(x1)

void  =  void

front_out_ga(x1, x2)  =  front_out_ga(x1, x2)

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U1_ga(x1, x2, x3, x4, x5)  =  U1_ga(x1, x2, x3, x5)

U2_ga(x1, x2, x3, x4, x5, x6)  =  U2_ga(x1, x2, x3, x5, x6)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x1, x2, x3, x5)

app_in_gga(x1, x2, x3)  =  app_in_gga(x1, x2)

[]  =  []

app_out_gga(x1, x2, x3)  =  app_out_gga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x1, x2, x3, x5)

FRONT_IN_GA(x1, x2)  =  FRONT_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x1, x2, x3, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GA(X1, L, R, front_out_ga(L, Ls)) -> FRONT_IN_GA(R)
   FRONT_IN_GA(tree(X1, L, R)) -> U1_GA(X1, L, R, front_in_ga(L))
   FRONT_IN_GA(tree(X1, L, R)) -> FRONT_IN_GA(L)

The TRS R consists of the following rules:

   front_in_ga(void) -> front_out_ga(void, [])
   front_in_ga(tree(X, void, void)) -> front_out_ga(tree(X, void, void), .(X, []))
   front_in_ga(tree(X1, L, R)) -> U1_ga(X1, L, R, front_in_ga(L))
   U1_ga(X1, L, R, front_out_ga(L, Ls)) -> U2_ga(X1, L, R, Ls, front_in_ga(R))
   U2_ga(X1, L, R, Ls, front_out_ga(R, Rs)) -> U3_ga(X1, L, R, app_in_gga(Ls, Rs))
   app_in_gga([], X) -> app_out_gga([], X, X)
   app_in_gga(.(X, Xs), Ys) -> U4_gga(X, Xs, Ys, app_in_gga(Xs, Ys))
   U4_gga(X, Xs, Ys, app_out_gga(Xs, Ys, Zs)) -> app_out_gga(.(X, Xs), Ys, .(X, Zs))
   U3_ga(X1, L, R, app_out_gga(Ls, Rs, Xs)) -> front_out_ga(tree(X1, L, R), Xs)

The set Q consists of the following terms:

   front_in_ga(x0)
   U1_ga(x0, x1, x2, x3)
   U2_ga(x0, x1, x2, x3, x4)
   app_in_gga(x0, x1)
   U4_gga(x0, x1, x2, x3)
   U3_ga(x0, x1, x2, x3)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*FRONT_IN_GA(tree(X1, L, R)) -> U1_GA(X1, L, R, front_in_ga(L))
The graph contains the following edges 1 > 1, 1 > 2, 1 > 3


*FRONT_IN_GA(tree(X1, L, R)) -> FRONT_IN_GA(L)
The graph contains the following edges 1 > 1


*U1_GA(X1, L, R, front_out_ga(L, Ls)) -> FRONT_IN_GA(R)
The graph contains the following edges 3 >= 1


----------------------------------------

(18)
YES
