YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/S6nM7.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

delmin(a,a,g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) UsableRulesProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) PiDPToQDPProof [SOUND, 0 ms]
(10) QDP
(11) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Clauses:

delete(X, tree(X, void, Right), Right).
delete(X, tree(X, Left, void), Left).
delete(X, tree(X, Left, Right), tree(Y, Left, Right1)) :- delmin(Right, Y, Right1).
delete(X, tree(Y, Left, Right), tree(Y, Left1, Right)) :- ','(less(X, Y), delete(X, Left, Left1)).
delete(X, tree(Y, Left, Right), tree(Y, Left, Right1)) :- ','(less(Y, X), delete(X, Right, Right1)).
delmin(tree(Y, void, Right), Y, Right).
delmin(tree(X, Left, X1), Y, tree(X, Left1, X2)) :- delmin(Left, Y, Left1).
less(0, s(X3)).
less(s(X), s(Y)) :- less(X, Y).


Query: delmin(a,a,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

delmin_in_3: (f,f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   delmin_in_aag(tree(Y, void, Right), Y, Right) -> delmin_out_aag(tree(Y, void, Right), Y, Right)
   delmin_in_aag(tree(X, Left, X1), Y, tree(X, Left1, X2)) -> U6_aag(X, Left, X1, Y, Left1, X2, delmin_in_aag(Left, Y, Left1))
   U6_aag(X, Left, X1, Y, Left1, X2, delmin_out_aag(Left, Y, Left1)) -> delmin_out_aag(tree(X, Left, X1), Y, tree(X, Left1, X2))

The argument filtering Pi contains the following mapping:
delmin_in_aag(x1, x2, x3)  =  delmin_in_aag(x3)

delmin_out_aag(x1, x2, x3)  =  delmin_out_aag

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U6_aag(x1, x2, x3, x4, x5, x6, x7)  =  U6_aag(x7)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   delmin_in_aag(tree(Y, void, Right), Y, Right) -> delmin_out_aag(tree(Y, void, Right), Y, Right)
   delmin_in_aag(tree(X, Left, X1), Y, tree(X, Left1, X2)) -> U6_aag(X, Left, X1, Y, Left1, X2, delmin_in_aag(Left, Y, Left1))
   U6_aag(X, Left, X1, Y, Left1, X2, delmin_out_aag(Left, Y, Left1)) -> delmin_out_aag(tree(X, Left, X1), Y, tree(X, Left1, X2))

The argument filtering Pi contains the following mapping:
delmin_in_aag(x1, x2, x3)  =  delmin_in_aag(x3)

delmin_out_aag(x1, x2, x3)  =  delmin_out_aag

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U6_aag(x1, x2, x3, x4, x5, x6, x7)  =  U6_aag(x7)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   DELMIN_IN_AAG(tree(X, Left, X1), Y, tree(X, Left1, X2)) -> U6_AAG(X, Left, X1, Y, Left1, X2, delmin_in_aag(Left, Y, Left1))
   DELMIN_IN_AAG(tree(X, Left, X1), Y, tree(X, Left1, X2)) -> DELMIN_IN_AAG(Left, Y, Left1)

The TRS R consists of the following rules:

   delmin_in_aag(tree(Y, void, Right), Y, Right) -> delmin_out_aag(tree(Y, void, Right), Y, Right)
   delmin_in_aag(tree(X, Left, X1), Y, tree(X, Left1, X2)) -> U6_aag(X, Left, X1, Y, Left1, X2, delmin_in_aag(Left, Y, Left1))
   U6_aag(X, Left, X1, Y, Left1, X2, delmin_out_aag(Left, Y, Left1)) -> delmin_out_aag(tree(X, Left, X1), Y, tree(X, Left1, X2))

The argument filtering Pi contains the following mapping:
delmin_in_aag(x1, x2, x3)  =  delmin_in_aag(x3)

delmin_out_aag(x1, x2, x3)  =  delmin_out_aag

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U6_aag(x1, x2, x3, x4, x5, x6, x7)  =  U6_aag(x7)

DELMIN_IN_AAG(x1, x2, x3)  =  DELMIN_IN_AAG(x3)

U6_AAG(x1, x2, x3, x4, x5, x6, x7)  =  U6_AAG(x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DELMIN_IN_AAG(tree(X, Left, X1), Y, tree(X, Left1, X2)) -> U6_AAG(X, Left, X1, Y, Left1, X2, delmin_in_aag(Left, Y, Left1))
   DELMIN_IN_AAG(tree(X, Left, X1), Y, tree(X, Left1, X2)) -> DELMIN_IN_AAG(Left, Y, Left1)

The TRS R consists of the following rules:

   delmin_in_aag(tree(Y, void, Right), Y, Right) -> delmin_out_aag(tree(Y, void, Right), Y, Right)
   delmin_in_aag(tree(X, Left, X1), Y, tree(X, Left1, X2)) -> U6_aag(X, Left, X1, Y, Left1, X2, delmin_in_aag(Left, Y, Left1))
   U6_aag(X, Left, X1, Y, Left1, X2, delmin_out_aag(Left, Y, Left1)) -> delmin_out_aag(tree(X, Left, X1), Y, tree(X, Left1, X2))

The argument filtering Pi contains the following mapping:
delmin_in_aag(x1, x2, x3)  =  delmin_in_aag(x3)

delmin_out_aag(x1, x2, x3)  =  delmin_out_aag

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U6_aag(x1, x2, x3, x4, x5, x6, x7)  =  U6_aag(x7)

DELMIN_IN_AAG(x1, x2, x3)  =  DELMIN_IN_AAG(x3)

U6_AAG(x1, x2, x3, x4, x5, x6, x7)  =  U6_AAG(x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DELMIN_IN_AAG(tree(X, Left, X1), Y, tree(X, Left1, X2)) -> DELMIN_IN_AAG(Left, Y, Left1)

The TRS R consists of the following rules:

   delmin_in_aag(tree(Y, void, Right), Y, Right) -> delmin_out_aag(tree(Y, void, Right), Y, Right)
   delmin_in_aag(tree(X, Left, X1), Y, tree(X, Left1, X2)) -> U6_aag(X, Left, X1, Y, Left1, X2, delmin_in_aag(Left, Y, Left1))
   U6_aag(X, Left, X1, Y, Left1, X2, delmin_out_aag(Left, Y, Left1)) -> delmin_out_aag(tree(X, Left, X1), Y, tree(X, Left1, X2))

The argument filtering Pi contains the following mapping:
delmin_in_aag(x1, x2, x3)  =  delmin_in_aag(x3)

delmin_out_aag(x1, x2, x3)  =  delmin_out_aag

tree(x1, x2, x3)  =  tree(x1, x2, x3)

U6_aag(x1, x2, x3, x4, x5, x6, x7)  =  U6_aag(x7)

DELMIN_IN_AAG(x1, x2, x3)  =  DELMIN_IN_AAG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DELMIN_IN_AAG(tree(X, Left, X1), Y, tree(X, Left1, X2)) -> DELMIN_IN_AAG(Left, Y, Left1)

R is empty.
The argument filtering Pi contains the following mapping:
tree(x1, x2, x3)  =  tree(x1, x2, x3)

DELMIN_IN_AAG(x1, x2, x3)  =  DELMIN_IN_AAG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DELMIN_IN_AAG(tree(X, Left1, X2)) -> DELMIN_IN_AAG(Left1)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DELMIN_IN_AAG(tree(X, Left1, X2)) -> DELMIN_IN_AAG(Left1)
The graph contains the following edges 1 > 1


----------------------------------------

(12)
YES
