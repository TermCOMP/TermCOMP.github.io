MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/nztw5.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

subset(g,a)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) AND
        (7) PiDP
            (8) UsableRulesProof [EQUIVALENT, 0 ms]
            (9) PiDP
            (10) PiDPToQDPProof [SOUND, 0 ms]
            (11) QDP
            (12) NonTerminationLoopProof [COMPLETE, 0 ms]
            (13) NO
        (14) PiDP
            (15) UsableRulesProof [EQUIVALENT, 0 ms]
            (16) PiDP
            (17) PiDPToQDPProof [SOUND, 0 ms]
            (18) QDP
            (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (20) YES
(21) PrologToTRSTransformerProof [SOUND, 0 ms]
(22) QTRS
    (23) DependencyPairsProof [EQUIVALENT, 0 ms]
    (24) QDP
    (25) DependencyGraphProof [EQUIVALENT, 0 ms]
    (26) AND
        (27) QDP
            (28) MNOCProof [EQUIVALENT, 0 ms]
            (29) QDP
            (30) UsableRulesProof [EQUIVALENT, 0 ms]
            (31) QDP
            (32) QReductionProof [EQUIVALENT, 0 ms]
            (33) QDP
            (34) NonTerminationLoopProof [COMPLETE, 0 ms]
            (35) NO
        (36) QDP
            (37) MNOCProof [EQUIVALENT, 0 ms]
            (38) QDP
            (39) UsableRulesProof [EQUIVALENT, 0 ms]
            (40) QDP
            (41) QReductionProof [EQUIVALENT, 0 ms]
            (42) QDP
            (43) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (44) YES
(45) PrologToPiTRSProof [SOUND, 0 ms]
(46) PiTRS
    (47) DependencyPairsProof [EQUIVALENT, 0 ms]
    (48) PiDP
    (49) DependencyGraphProof [EQUIVALENT, 0 ms]
    (50) AND
        (51) PiDP
            (52) UsableRulesProof [EQUIVALENT, 0 ms]
            (53) PiDP
            (54) PiDPToQDPProof [SOUND, 0 ms]
            (55) QDP
            (56) NonTerminationLoopProof [COMPLETE, 0 ms]
            (57) NO
        (58) PiDP
            (59) UsableRulesProof [EQUIVALENT, 0 ms]
            (60) PiDP
            (61) PiDPToQDPProof [SOUND, 0 ms]
            (62) QDP
            (63) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (64) YES
(65) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(66) TRIPLES
    (67) TriplesToPiDPProof [SOUND, 0 ms]
    (68) PiDP
    (69) DependencyGraphProof [EQUIVALENT, 0 ms]
    (70) AND
        (71) PiDP
            (72) UsableRulesProof [EQUIVALENT, 0 ms]
            (73) PiDP
            (74) PiDPToQDPProof [SOUND, 0 ms]
            (75) QDP
            (76) NonTerminationLoopProof [COMPLETE, 0 ms]
            (77) NO
        (78) PiDP
            (79) PiDPToQDPProof [SOUND, 0 ms]
            (80) QDP
            (81) QDPSizeChangeProof [EQUIVALENT, 0 ms]
            (82) YES
(83) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(84) AND
    (85) IRSwT
        (86) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (87) IRSwT
        (88) IntTRSCompressionProof [EQUIVALENT, 10 ms]
        (89) IRSwT
        (90) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (91) IRSwT
        (92) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
        (93) IRSwT
        (94) FilterProof [EQUIVALENT, 0 ms]
        (95) IntTRS
        (96) IntTRSNonPeriodicNontermProof [COMPLETE, 4 ms]
        (97) NO
    (98) IRSwT
        (99) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (100) IRSwT
        (101) IntTRSCompressionProof [EQUIVALENT, 4 ms]
        (102) IRSwT
        (103) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (104) IRSwT


----------------------------------------

(0)
Obligation:
Clauses:

subset([], X1).
subset(.(X, Xs), Ys) :- ','(member(X, Ys), subset(Xs, Ys)).
member(X, .(X, X2)).
member(X, .(X3, Xs)) :- member(X, Xs).


Query: subset(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

subset_in_2: (b,f)

member_in_2: (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   subset_in_ga([], X1) -> subset_out_ga([], X1)
   subset_in_ga(.(X, Xs), Ys) -> U1_ga(X, Xs, Ys, member_in_ga(X, Ys))
   member_in_ga(X, .(X, X2)) -> member_out_ga(X, .(X, X2))
   member_in_ga(X, .(X3, Xs)) -> U3_ga(X, X3, Xs, member_in_ga(X, Xs))
   U3_ga(X, X3, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X3, Xs))
   U1_ga(X, Xs, Ys, member_out_ga(X, Ys)) -> U2_ga(X, Xs, Ys, subset_in_ga(Xs, Ys))
   U2_ga(X, Xs, Ys, subset_out_ga(Xs, Ys)) -> subset_out_ga(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ga(x1, x2)  =  subset_in_ga(x1)

[]  =  []

subset_out_ga(x1, x2)  =  subset_out_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x1, x4)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x2, x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   subset_in_ga([], X1) -> subset_out_ga([], X1)
   subset_in_ga(.(X, Xs), Ys) -> U1_ga(X, Xs, Ys, member_in_ga(X, Ys))
   member_in_ga(X, .(X, X2)) -> member_out_ga(X, .(X, X2))
   member_in_ga(X, .(X3, Xs)) -> U3_ga(X, X3, Xs, member_in_ga(X, Xs))
   U3_ga(X, X3, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X3, Xs))
   U1_ga(X, Xs, Ys, member_out_ga(X, Ys)) -> U2_ga(X, Xs, Ys, subset_in_ga(Xs, Ys))
   U2_ga(X, Xs, Ys, subset_out_ga(Xs, Ys)) -> subset_out_ga(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ga(x1, x2)  =  subset_in_ga(x1)

[]  =  []

subset_out_ga(x1, x2)  =  subset_out_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x1, x4)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x2, x4)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSET_IN_GA(.(X, Xs), Ys) -> U1_GA(X, Xs, Ys, member_in_ga(X, Ys))
   SUBSET_IN_GA(.(X, Xs), Ys) -> MEMBER_IN_GA(X, Ys)
   MEMBER_IN_GA(X, .(X3, Xs)) -> U3_GA(X, X3, Xs, member_in_ga(X, Xs))
   MEMBER_IN_GA(X, .(X3, Xs)) -> MEMBER_IN_GA(X, Xs)
   U1_GA(X, Xs, Ys, member_out_ga(X, Ys)) -> U2_GA(X, Xs, Ys, subset_in_ga(Xs, Ys))
   U1_GA(X, Xs, Ys, member_out_ga(X, Ys)) -> SUBSET_IN_GA(Xs, Ys)

The TRS R consists of the following rules:

   subset_in_ga([], X1) -> subset_out_ga([], X1)
   subset_in_ga(.(X, Xs), Ys) -> U1_ga(X, Xs, Ys, member_in_ga(X, Ys))
   member_in_ga(X, .(X, X2)) -> member_out_ga(X, .(X, X2))
   member_in_ga(X, .(X3, Xs)) -> U3_ga(X, X3, Xs, member_in_ga(X, Xs))
   U3_ga(X, X3, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X3, Xs))
   U1_ga(X, Xs, Ys, member_out_ga(X, Ys)) -> U2_ga(X, Xs, Ys, subset_in_ga(Xs, Ys))
   U2_ga(X, Xs, Ys, subset_out_ga(Xs, Ys)) -> subset_out_ga(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ga(x1, x2)  =  subset_in_ga(x1)

[]  =  []

subset_out_ga(x1, x2)  =  subset_out_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x1, x4)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x2, x4)

SUBSET_IN_GA(x1, x2)  =  SUBSET_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x2, x4)

MEMBER_IN_GA(x1, x2)  =  MEMBER_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x1, x4)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSET_IN_GA(.(X, Xs), Ys) -> U1_GA(X, Xs, Ys, member_in_ga(X, Ys))
   SUBSET_IN_GA(.(X, Xs), Ys) -> MEMBER_IN_GA(X, Ys)
   MEMBER_IN_GA(X, .(X3, Xs)) -> U3_GA(X, X3, Xs, member_in_ga(X, Xs))
   MEMBER_IN_GA(X, .(X3, Xs)) -> MEMBER_IN_GA(X, Xs)
   U1_GA(X, Xs, Ys, member_out_ga(X, Ys)) -> U2_GA(X, Xs, Ys, subset_in_ga(Xs, Ys))
   U1_GA(X, Xs, Ys, member_out_ga(X, Ys)) -> SUBSET_IN_GA(Xs, Ys)

The TRS R consists of the following rules:

   subset_in_ga([], X1) -> subset_out_ga([], X1)
   subset_in_ga(.(X, Xs), Ys) -> U1_ga(X, Xs, Ys, member_in_ga(X, Ys))
   member_in_ga(X, .(X, X2)) -> member_out_ga(X, .(X, X2))
   member_in_ga(X, .(X3, Xs)) -> U3_ga(X, X3, Xs, member_in_ga(X, Xs))
   U3_ga(X, X3, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X3, Xs))
   U1_ga(X, Xs, Ys, member_out_ga(X, Ys)) -> U2_ga(X, Xs, Ys, subset_in_ga(Xs, Ys))
   U2_ga(X, Xs, Ys, subset_out_ga(Xs, Ys)) -> subset_out_ga(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ga(x1, x2)  =  subset_in_ga(x1)

[]  =  []

subset_out_ga(x1, x2)  =  subset_out_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x1, x4)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x2, x4)

SUBSET_IN_GA(x1, x2)  =  SUBSET_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x2, x4)

MEMBER_IN_GA(x1, x2)  =  MEMBER_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x1, x4)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GA(X, .(X3, Xs)) -> MEMBER_IN_GA(X, Xs)

The TRS R consists of the following rules:

   subset_in_ga([], X1) -> subset_out_ga([], X1)
   subset_in_ga(.(X, Xs), Ys) -> U1_ga(X, Xs, Ys, member_in_ga(X, Ys))
   member_in_ga(X, .(X, X2)) -> member_out_ga(X, .(X, X2))
   member_in_ga(X, .(X3, Xs)) -> U3_ga(X, X3, Xs, member_in_ga(X, Xs))
   U3_ga(X, X3, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X3, Xs))
   U1_ga(X, Xs, Ys, member_out_ga(X, Ys)) -> U2_ga(X, Xs, Ys, subset_in_ga(Xs, Ys))
   U2_ga(X, Xs, Ys, subset_out_ga(Xs, Ys)) -> subset_out_ga(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ga(x1, x2)  =  subset_in_ga(x1)

[]  =  []

subset_out_ga(x1, x2)  =  subset_out_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x1, x4)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x2, x4)

MEMBER_IN_GA(x1, x2)  =  MEMBER_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GA(X, .(X3, Xs)) -> MEMBER_IN_GA(X, Xs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBER_IN_GA(x1, x2)  =  MEMBER_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GA(X) -> MEMBER_IN_GA(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = MEMBER_IN_GA(X) evaluates to  t =MEMBER_IN_GA(X)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from MEMBER_IN_GA(X) to MEMBER_IN_GA(X).




----------------------------------------

(13)
NO

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(X, Xs, Ys, member_out_ga(X, Ys)) -> SUBSET_IN_GA(Xs, Ys)
   SUBSET_IN_GA(.(X, Xs), Ys) -> U1_GA(X, Xs, Ys, member_in_ga(X, Ys))

The TRS R consists of the following rules:

   subset_in_ga([], X1) -> subset_out_ga([], X1)
   subset_in_ga(.(X, Xs), Ys) -> U1_ga(X, Xs, Ys, member_in_ga(X, Ys))
   member_in_ga(X, .(X, X2)) -> member_out_ga(X, .(X, X2))
   member_in_ga(X, .(X3, Xs)) -> U3_ga(X, X3, Xs, member_in_ga(X, Xs))
   U3_ga(X, X3, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X3, Xs))
   U1_ga(X, Xs, Ys, member_out_ga(X, Ys)) -> U2_ga(X, Xs, Ys, subset_in_ga(Xs, Ys))
   U2_ga(X, Xs, Ys, subset_out_ga(Xs, Ys)) -> subset_out_ga(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ga(x1, x2)  =  subset_in_ga(x1)

[]  =  []

subset_out_ga(x1, x2)  =  subset_out_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x1, x4)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x2, x4)

SUBSET_IN_GA(x1, x2)  =  SUBSET_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(X, Xs, Ys, member_out_ga(X, Ys)) -> SUBSET_IN_GA(Xs, Ys)
   SUBSET_IN_GA(.(X, Xs), Ys) -> U1_GA(X, Xs, Ys, member_in_ga(X, Ys))

The TRS R consists of the following rules:

   member_in_ga(X, .(X, X2)) -> member_out_ga(X, .(X, X2))
   member_in_ga(X, .(X3, Xs)) -> U3_ga(X, X3, Xs, member_in_ga(X, Xs))
   U3_ga(X, X3, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X3, Xs))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga(x1)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x1, x4)

SUBSET_IN_GA(x1, x2)  =  SUBSET_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GA(X, Xs, member_out_ga(X)) -> SUBSET_IN_GA(Xs)
   SUBSET_IN_GA(.(X, Xs)) -> U1_GA(X, Xs, member_in_ga(X))

The TRS R consists of the following rules:

   member_in_ga(X) -> member_out_ga(X)
   member_in_ga(X) -> U3_ga(X, member_in_ga(X))
   U3_ga(X, member_out_ga(X)) -> member_out_ga(X)

The set Q consists of the following terms:

   member_in_ga(x0)
   U3_ga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SUBSET_IN_GA(.(X, Xs)) -> U1_GA(X, Xs, member_in_ga(X))
The graph contains the following edges 1 > 1, 1 > 2


*U1_GA(X, Xs, member_out_ga(X)) -> SUBSET_IN_GA(Xs)
The graph contains the following edges 2 >= 1


----------------------------------------

(20)
YES

----------------------------------------

(21) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(subset ([]) X1)",
                null
            ],
            [
                "(subset (. X Xs) Ys)",
                "(',' (member X Ys) (subset Xs Ys))"
            ],
            [
                "(member X (. X X2))",
                null
            ],
            [
                "(member X (. X3 Xs))",
                "(member X Xs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "34": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T14 T17) (subset T15 T17))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T14",
                        "T15"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "35": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "28": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "29": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(subset T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(subset T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(subset T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "90": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(member T14 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T14"],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(subset T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "91": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(member T14 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T14"],
                    "free": [],
                    "exprvars": []
                }
            },
            "82": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T14 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T14"],
                    "free": [],
                    "exprvars": []
                }
            },
            "83": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset T15 T22)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T15"],
                    "free": [],
                    "exprvars": []
                }
            },
            "94": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "95": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "96": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "97": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T43 T46)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T43"],
                    "free": [],
                    "exprvars": []
                }
            },
            "87": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(member T14 T17)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(member T14 T17)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T14"],
                    "free": [],
                    "exprvars": []
                }
            },
            "98": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 7,
                "label": "PARALLEL"
            },
            {
                "from": 4,
                "to": 8,
                "label": "PARALLEL"
            },
            {
                "from": 7,
                "to": 27,
                "label": "EVAL with clause\nsubset([], X8).\nand substitutionT1 -> [],\nT2 -> T7,\nX8 -> T7"
            },
            {
                "from": 7,
                "to": 28,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 8,
                "to": 34,
                "label": "EVAL with clause\nsubset(.(X15, X16), X17) :- ','(member(X15, X17), subset(X16, X17)).\nand substitutionX15 -> T14,\nX16 -> T15,\nT1 -> .(T14, T15),\nT2 -> T17,\nX17 -> T17,\nT16 -> T17"
            },
            {
                "from": 8,
                "to": 35,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 27,
                "to": 29,
                "label": "SUCCESS"
            },
            {
                "from": 34,
                "to": 82,
                "label": "SPLIT 1"
            },
            {
                "from": 34,
                "to": 83,
                "label": "SPLIT 2\nnew knowledge:\nT14 is ground\nreplacements:T17 -> T22"
            },
            {
                "from": 82,
                "to": 87,
                "label": "CASE"
            },
            {
                "from": 83,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T15\nT2 -> T22"
            },
            {
                "from": 87,
                "to": 90,
                "label": "PARALLEL"
            },
            {
                "from": 87,
                "to": 91,
                "label": "PARALLEL"
            },
            {
                "from": 90,
                "to": 94,
                "label": "EVAL with clause\nmember(X34, .(X34, X35)).\nand substitutionT14 -> T35,\nX34 -> T35,\nX35 -> T36,\nT17 -> .(T35, T36)"
            },
            {
                "from": 90,
                "to": 95,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 91,
                "to": 97,
                "label": "EVAL with clause\nmember(X42, .(X43, X44)) :- member(X42, X44).\nand substitutionT14 -> T43,\nX42 -> T43,\nX43 -> T44,\nX44 -> T46,\nT17 -> .(T44, T46),\nT45 -> T46"
            },
            {
                "from": 91,
                "to": 98,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 94,
                "to": 96,
                "label": "SUCCESS"
            },
            {
                "from": 97,
                "to": 82,
                "label": "INSTANCE with matching:\nT14 -> T43\nT17 -> T46"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(22)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f1_in([]) -> f1_out1
   f1_in(.(T14, T15)) -> U1(f34_in(T14, T15), .(T14, T15))
   U1(f34_out1, .(T14, T15)) -> f1_out1
   f82_in(T35) -> f82_out1
   f82_in(T43) -> U2(f82_in(T43), T43)
   U2(f82_out1, T43) -> f82_out1
   f34_in(T14, T15) -> U3(f82_in(T14), T14, T15)
   U3(f82_out1, T14, T15) -> U4(f1_in(T15), T14, T15)
   U4(f1_out1, T14, T15) -> f34_out1

Q is empty.

----------------------------------------

(23) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(.(T14, T15)) -> U1^1(f34_in(T14, T15), .(T14, T15))
   F1_IN(.(T14, T15)) -> F34_IN(T14, T15)
   F82_IN(T43) -> U2^1(f82_in(T43), T43)
   F82_IN(T43) -> F82_IN(T43)
   F34_IN(T14, T15) -> U3^1(f82_in(T14), T14, T15)
   F34_IN(T14, T15) -> F82_IN(T14)
   U3^1(f82_out1, T14, T15) -> U4^1(f1_in(T15), T14, T15)
   U3^1(f82_out1, T14, T15) -> F1_IN(T15)

The TRS R consists of the following rules:

   f1_in([]) -> f1_out1
   f1_in(.(T14, T15)) -> U1(f34_in(T14, T15), .(T14, T15))
   U1(f34_out1, .(T14, T15)) -> f1_out1
   f82_in(T35) -> f82_out1
   f82_in(T43) -> U2(f82_in(T43), T43)
   U2(f82_out1, T43) -> f82_out1
   f34_in(T14, T15) -> U3(f82_in(T14), T14, T15)
   U3(f82_out1, T14, T15) -> U4(f1_in(T15), T14, T15)
   U4(f1_out1, T14, T15) -> f34_out1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(25) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs with 4 less nodes.
----------------------------------------

(26)
Complex Obligation (AND)

----------------------------------------

(27)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F82_IN(T43) -> F82_IN(T43)

The TRS R consists of the following rules:

   f1_in([]) -> f1_out1
   f1_in(.(T14, T15)) -> U1(f34_in(T14, T15), .(T14, T15))
   U1(f34_out1, .(T14, T15)) -> f1_out1
   f82_in(T35) -> f82_out1
   f82_in(T43) -> U2(f82_in(T43), T43)
   U2(f82_out1, T43) -> f82_out1
   f34_in(T14, T15) -> U3(f82_in(T14), T14, T15)
   U3(f82_out1, T14, T15) -> U4(f1_in(T15), T14, T15)
   U4(f1_out1, T14, T15) -> f34_out1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(28) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F82_IN(T43) -> F82_IN(T43)

The TRS R consists of the following rules:

   f1_in([]) -> f1_out1
   f1_in(.(T14, T15)) -> U1(f34_in(T14, T15), .(T14, T15))
   U1(f34_out1, .(T14, T15)) -> f1_out1
   f82_in(T35) -> f82_out1
   f82_in(T43) -> U2(f82_in(T43), T43)
   U2(f82_out1, T43) -> f82_out1
   f34_in(T14, T15) -> U3(f82_in(T14), T14, T15)
   U3(f82_out1, T14, T15) -> U4(f1_in(T15), T14, T15)
   U4(f1_out1, T14, T15) -> f34_out1

The set Q consists of the following terms:

   f1_in([])
   f1_in(.(x0, x1))
   U1(f34_out1, .(x0, x1))
   f82_in(x0)
   U2(f82_out1, x0)
   f34_in(x0, x1)
   U3(f82_out1, x0, x1)
   U4(f1_out1, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(30) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(31)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F82_IN(T43) -> F82_IN(T43)

R is empty.
The set Q consists of the following terms:

   f1_in([])
   f1_in(.(x0, x1))
   U1(f34_out1, .(x0, x1))
   f82_in(x0)
   U2(f82_out1, x0)
   f34_in(x0, x1)
   U3(f82_out1, x0, x1)
   U4(f1_out1, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(32) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f1_in([])
   f1_in(.(x0, x1))
   U1(f34_out1, .(x0, x1))
   f82_in(x0)
   U2(f82_out1, x0)
   f34_in(x0, x1)
   U3(f82_out1, x0, x1)
   U4(f1_out1, x0, x1)


----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F82_IN(T43) -> F82_IN(T43)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(34) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = F82_IN(T43) evaluates to  t =F82_IN(T43)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from F82_IN(T43) to F82_IN(T43).




----------------------------------------

(35)
NO

----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(.(T14, T15)) -> F34_IN(T14, T15)
   F34_IN(T14, T15) -> U3^1(f82_in(T14), T14, T15)
   U3^1(f82_out1, T14, T15) -> F1_IN(T15)

The TRS R consists of the following rules:

   f1_in([]) -> f1_out1
   f1_in(.(T14, T15)) -> U1(f34_in(T14, T15), .(T14, T15))
   U1(f34_out1, .(T14, T15)) -> f1_out1
   f82_in(T35) -> f82_out1
   f82_in(T43) -> U2(f82_in(T43), T43)
   U2(f82_out1, T43) -> f82_out1
   f34_in(T14, T15) -> U3(f82_in(T14), T14, T15)
   U3(f82_out1, T14, T15) -> U4(f1_in(T15), T14, T15)
   U4(f1_out1, T14, T15) -> f34_out1

Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(37) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [LPAR04] to enlarge Q to all left-hand sides of R.
----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(.(T14, T15)) -> F34_IN(T14, T15)
   F34_IN(T14, T15) -> U3^1(f82_in(T14), T14, T15)
   U3^1(f82_out1, T14, T15) -> F1_IN(T15)

The TRS R consists of the following rules:

   f1_in([]) -> f1_out1
   f1_in(.(T14, T15)) -> U1(f34_in(T14, T15), .(T14, T15))
   U1(f34_out1, .(T14, T15)) -> f1_out1
   f82_in(T35) -> f82_out1
   f82_in(T43) -> U2(f82_in(T43), T43)
   U2(f82_out1, T43) -> f82_out1
   f34_in(T14, T15) -> U3(f82_in(T14), T14, T15)
   U3(f82_out1, T14, T15) -> U4(f1_in(T15), T14, T15)
   U4(f1_out1, T14, T15) -> f34_out1

The set Q consists of the following terms:

   f1_in([])
   f1_in(.(x0, x1))
   U1(f34_out1, .(x0, x1))
   f82_in(x0)
   U2(f82_out1, x0)
   f34_in(x0, x1)
   U3(f82_out1, x0, x1)
   U4(f1_out1, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(.(T14, T15)) -> F34_IN(T14, T15)
   F34_IN(T14, T15) -> U3^1(f82_in(T14), T14, T15)
   U3^1(f82_out1, T14, T15) -> F1_IN(T15)

The TRS R consists of the following rules:

   f82_in(T35) -> f82_out1
   f82_in(T43) -> U2(f82_in(T43), T43)
   U2(f82_out1, T43) -> f82_out1

The set Q consists of the following terms:

   f1_in([])
   f1_in(.(x0, x1))
   U1(f34_out1, .(x0, x1))
   f82_in(x0)
   U2(f82_out1, x0)
   f34_in(x0, x1)
   U3(f82_out1, x0, x1)
   U4(f1_out1, x0, x1)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f1_in([])
   f1_in(.(x0, x1))
   U1(f34_out1, .(x0, x1))
   f34_in(x0, x1)
   U3(f82_out1, x0, x1)
   U4(f1_out1, x0, x1)


----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN(.(T14, T15)) -> F34_IN(T14, T15)
   F34_IN(T14, T15) -> U3^1(f82_in(T14), T14, T15)
   U3^1(f82_out1, T14, T15) -> F1_IN(T15)

The TRS R consists of the following rules:

   f82_in(T35) -> f82_out1
   f82_in(T43) -> U2(f82_in(T43), T43)
   U2(f82_out1, T43) -> f82_out1

The set Q consists of the following terms:

   f82_in(x0)
   U2(f82_out1, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*F34_IN(T14, T15) -> U3^1(f82_in(T14), T14, T15)
The graph contains the following edges 1 >= 2, 2 >= 3


*U3^1(f82_out1, T14, T15) -> F1_IN(T15)
The graph contains the following edges 3 >= 1


*F1_IN(.(T14, T15)) -> F34_IN(T14, T15)
The graph contains the following edges 1 > 1, 1 > 2


----------------------------------------

(44)
YES

----------------------------------------

(45) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

subset_in_2: (b,f)

member_in_2: (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   subset_in_ga([], X1) -> subset_out_ga([], X1)
   subset_in_ga(.(X, Xs), Ys) -> U1_ga(X, Xs, Ys, member_in_ga(X, Ys))
   member_in_ga(X, .(X, X2)) -> member_out_ga(X, .(X, X2))
   member_in_ga(X, .(X3, Xs)) -> U3_ga(X, X3, Xs, member_in_ga(X, Xs))
   U3_ga(X, X3, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X3, Xs))
   U1_ga(X, Xs, Ys, member_out_ga(X, Ys)) -> U2_ga(X, Xs, Ys, subset_in_ga(Xs, Ys))
   U2_ga(X, Xs, Ys, subset_out_ga(Xs, Ys)) -> subset_out_ga(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ga(x1, x2)  =  subset_in_ga(x1)

[]  =  []

subset_out_ga(x1, x2)  =  subset_out_ga

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x2, x4)

member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(46)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   subset_in_ga([], X1) -> subset_out_ga([], X1)
   subset_in_ga(.(X, Xs), Ys) -> U1_ga(X, Xs, Ys, member_in_ga(X, Ys))
   member_in_ga(X, .(X, X2)) -> member_out_ga(X, .(X, X2))
   member_in_ga(X, .(X3, Xs)) -> U3_ga(X, X3, Xs, member_in_ga(X, Xs))
   U3_ga(X, X3, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X3, Xs))
   U1_ga(X, Xs, Ys, member_out_ga(X, Ys)) -> U2_ga(X, Xs, Ys, subset_in_ga(Xs, Ys))
   U2_ga(X, Xs, Ys, subset_out_ga(Xs, Ys)) -> subset_out_ga(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ga(x1, x2)  =  subset_in_ga(x1)

[]  =  []

subset_out_ga(x1, x2)  =  subset_out_ga

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x2, x4)

member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)



----------------------------------------

(47) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSET_IN_GA(.(X, Xs), Ys) -> U1_GA(X, Xs, Ys, member_in_ga(X, Ys))
   SUBSET_IN_GA(.(X, Xs), Ys) -> MEMBER_IN_GA(X, Ys)
   MEMBER_IN_GA(X, .(X3, Xs)) -> U3_GA(X, X3, Xs, member_in_ga(X, Xs))
   MEMBER_IN_GA(X, .(X3, Xs)) -> MEMBER_IN_GA(X, Xs)
   U1_GA(X, Xs, Ys, member_out_ga(X, Ys)) -> U2_GA(X, Xs, Ys, subset_in_ga(Xs, Ys))
   U1_GA(X, Xs, Ys, member_out_ga(X, Ys)) -> SUBSET_IN_GA(Xs, Ys)

The TRS R consists of the following rules:

   subset_in_ga([], X1) -> subset_out_ga([], X1)
   subset_in_ga(.(X, Xs), Ys) -> U1_ga(X, Xs, Ys, member_in_ga(X, Ys))
   member_in_ga(X, .(X, X2)) -> member_out_ga(X, .(X, X2))
   member_in_ga(X, .(X3, Xs)) -> U3_ga(X, X3, Xs, member_in_ga(X, Xs))
   U3_ga(X, X3, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X3, Xs))
   U1_ga(X, Xs, Ys, member_out_ga(X, Ys)) -> U2_ga(X, Xs, Ys, subset_in_ga(Xs, Ys))
   U2_ga(X, Xs, Ys, subset_out_ga(Xs, Ys)) -> subset_out_ga(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ga(x1, x2)  =  subset_in_ga(x1)

[]  =  []

subset_out_ga(x1, x2)  =  subset_out_ga

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x2, x4)

member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)

SUBSET_IN_GA(x1, x2)  =  SUBSET_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x2, x4)

MEMBER_IN_GA(x1, x2)  =  MEMBER_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(48)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSET_IN_GA(.(X, Xs), Ys) -> U1_GA(X, Xs, Ys, member_in_ga(X, Ys))
   SUBSET_IN_GA(.(X, Xs), Ys) -> MEMBER_IN_GA(X, Ys)
   MEMBER_IN_GA(X, .(X3, Xs)) -> U3_GA(X, X3, Xs, member_in_ga(X, Xs))
   MEMBER_IN_GA(X, .(X3, Xs)) -> MEMBER_IN_GA(X, Xs)
   U1_GA(X, Xs, Ys, member_out_ga(X, Ys)) -> U2_GA(X, Xs, Ys, subset_in_ga(Xs, Ys))
   U1_GA(X, Xs, Ys, member_out_ga(X, Ys)) -> SUBSET_IN_GA(Xs, Ys)

The TRS R consists of the following rules:

   subset_in_ga([], X1) -> subset_out_ga([], X1)
   subset_in_ga(.(X, Xs), Ys) -> U1_ga(X, Xs, Ys, member_in_ga(X, Ys))
   member_in_ga(X, .(X, X2)) -> member_out_ga(X, .(X, X2))
   member_in_ga(X, .(X3, Xs)) -> U3_ga(X, X3, Xs, member_in_ga(X, Xs))
   U3_ga(X, X3, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X3, Xs))
   U1_ga(X, Xs, Ys, member_out_ga(X, Ys)) -> U2_ga(X, Xs, Ys, subset_in_ga(Xs, Ys))
   U2_ga(X, Xs, Ys, subset_out_ga(Xs, Ys)) -> subset_out_ga(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ga(x1, x2)  =  subset_in_ga(x1)

[]  =  []

subset_out_ga(x1, x2)  =  subset_out_ga

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x2, x4)

member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)

SUBSET_IN_GA(x1, x2)  =  SUBSET_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x2, x4)

MEMBER_IN_GA(x1, x2)  =  MEMBER_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(49) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 3 less nodes.
----------------------------------------

(50)
Complex Obligation (AND)

----------------------------------------

(51)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GA(X, .(X3, Xs)) -> MEMBER_IN_GA(X, Xs)

The TRS R consists of the following rules:

   subset_in_ga([], X1) -> subset_out_ga([], X1)
   subset_in_ga(.(X, Xs), Ys) -> U1_ga(X, Xs, Ys, member_in_ga(X, Ys))
   member_in_ga(X, .(X, X2)) -> member_out_ga(X, .(X, X2))
   member_in_ga(X, .(X3, Xs)) -> U3_ga(X, X3, Xs, member_in_ga(X, Xs))
   U3_ga(X, X3, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X3, Xs))
   U1_ga(X, Xs, Ys, member_out_ga(X, Ys)) -> U2_ga(X, Xs, Ys, subset_in_ga(Xs, Ys))
   U2_ga(X, Xs, Ys, subset_out_ga(Xs, Ys)) -> subset_out_ga(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ga(x1, x2)  =  subset_in_ga(x1)

[]  =  []

subset_out_ga(x1, x2)  =  subset_out_ga

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x2, x4)

member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)

MEMBER_IN_GA(x1, x2)  =  MEMBER_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(52) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(53)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GA(X, .(X3, Xs)) -> MEMBER_IN_GA(X, Xs)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MEMBER_IN_GA(x1, x2)  =  MEMBER_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(54) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(55)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBER_IN_GA(X) -> MEMBER_IN_GA(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(56) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = MEMBER_IN_GA(X) evaluates to  t =MEMBER_IN_GA(X)

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from MEMBER_IN_GA(X) to MEMBER_IN_GA(X).




----------------------------------------

(57)
NO

----------------------------------------

(58)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(X, Xs, Ys, member_out_ga(X, Ys)) -> SUBSET_IN_GA(Xs, Ys)
   SUBSET_IN_GA(.(X, Xs), Ys) -> U1_GA(X, Xs, Ys, member_in_ga(X, Ys))

The TRS R consists of the following rules:

   subset_in_ga([], X1) -> subset_out_ga([], X1)
   subset_in_ga(.(X, Xs), Ys) -> U1_ga(X, Xs, Ys, member_in_ga(X, Ys))
   member_in_ga(X, .(X, X2)) -> member_out_ga(X, .(X, X2))
   member_in_ga(X, .(X3, Xs)) -> U3_ga(X, X3, Xs, member_in_ga(X, Xs))
   U3_ga(X, X3, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X3, Xs))
   U1_ga(X, Xs, Ys, member_out_ga(X, Ys)) -> U2_ga(X, Xs, Ys, subset_in_ga(Xs, Ys))
   U2_ga(X, Xs, Ys, subset_out_ga(Xs, Ys)) -> subset_out_ga(.(X, Xs), Ys)

The argument filtering Pi contains the following mapping:
subset_in_ga(x1, x2)  =  subset_in_ga(x1)

[]  =  []

subset_out_ga(x1, x2)  =  subset_out_ga

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x2, x4)

member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

U2_ga(x1, x2, x3, x4)  =  U2_ga(x4)

SUBSET_IN_GA(x1, x2)  =  SUBSET_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(59) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(60)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(X, Xs, Ys, member_out_ga(X, Ys)) -> SUBSET_IN_GA(Xs, Ys)
   SUBSET_IN_GA(.(X, Xs), Ys) -> U1_GA(X, Xs, Ys, member_in_ga(X, Ys))

The TRS R consists of the following rules:

   member_in_ga(X, .(X, X2)) -> member_out_ga(X, .(X, X2))
   member_in_ga(X, .(X3, Xs)) -> U3_ga(X, X3, Xs, member_in_ga(X, Xs))
   U3_ga(X, X3, Xs, member_out_ga(X, Xs)) -> member_out_ga(X, .(X3, Xs))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

member_in_ga(x1, x2)  =  member_in_ga(x1)

member_out_ga(x1, x2)  =  member_out_ga

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

SUBSET_IN_GA(x1, x2)  =  SUBSET_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(61) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(62)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GA(Xs, member_out_ga) -> SUBSET_IN_GA(Xs)
   SUBSET_IN_GA(.(X, Xs)) -> U1_GA(Xs, member_in_ga(X))

The TRS R consists of the following rules:

   member_in_ga(X) -> member_out_ga
   member_in_ga(X) -> U3_ga(member_in_ga(X))
   U3_ga(member_out_ga) -> member_out_ga

The set Q consists of the following terms:

   member_in_ga(x0)
   U3_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(63) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SUBSET_IN_GA(.(X, Xs)) -> U1_GA(Xs, member_in_ga(X))
The graph contains the following edges 1 > 1


*U1_GA(Xs, member_out_ga) -> SUBSET_IN_GA(Xs)
The graph contains the following edges 1 >= 1


----------------------------------------

(64)
YES

----------------------------------------

(65) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(subset ([]) X1)",
                null
            ],
            [
                "(subset (. X Xs) Ys)",
                "(',' (member X Ys) (subset Xs Ys))"
            ],
            [
                "(member X (. X X2))",
                null
            ],
            [
                "(member X (. X3 Xs))",
                "(member X Xs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "88": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(',' (member T8 T11) (subset T9 T11))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "89": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(',' (member T8 T11) (subset T9 T11))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "153": {
                "goal": [{
                    "clause": 2,
                    "scope": 3,
                    "term": "(member T33 T36)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T33"],
                    "free": [],
                    "exprvars": []
                }
            },
            "154": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(member T33 T36)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T33"],
                    "free": [],
                    "exprvars": []
                }
            },
            "155": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "156": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "157": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "158": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T64 T67)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T64"],
                    "free": [],
                    "exprvars": []
                }
            },
            "159": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "92": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset T9 (. T20 T22))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T9",
                        "T20"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "93": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "30": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(subset ([]) T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "31": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(subset T1 T2)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(subset T1 T2)",
                        "(subset ([]) X5)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": ["X5"],
                    "exprvars": []
                }
            },
            "32": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(subset ([]) T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "33": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "99": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T33 T36) (subset T9 (. T37 T36)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T9",
                        "T33"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "100": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "101": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T33 T36)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T33"],
                    "free": [],
                    "exprvars": []
                }
            },
            "102": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset T9 (. T42 T43))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T9"],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(subset T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(subset T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "149": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 3,
                        "term": "(member T33 T36)"
                    },
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(member T33 T36)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T33"],
                    "free": [],
                    "exprvars": []
                }
            },
            "84": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T8 T11) (subset T9 T11))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "85": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "86": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(',' (member T8 T11) (subset T9 T11))"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(',' (member T8 T11) (subset T9 T11))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T8",
                        "T9"
                    ],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 30,
                "label": "EVAL with clause\nsubset([], X5).\nand substitutionT1 -> [],\nT2 -> T4,\nX5 -> T4"
            },
            {
                "from": 5,
                "to": 31,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 30,
                "to": 32,
                "label": "SUCCESS"
            },
            {
                "from": 31,
                "to": 84,
                "label": "EVAL with clause\nsubset(.(X12, X13), X14) :- ','(member(X12, X14), subset(X13, X14)).\nand substitutionX12 -> T8,\nX13 -> T9,\nT1 -> .(T8, T9),\nT2 -> T11,\nX14 -> T11,\nT10 -> T11"
            },
            {
                "from": 31,
                "to": 85,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 32,
                "to": 33,
                "label": "BACKTRACK\nfor clause: subset(.(X, Xs), Ys) :- ','(member(X, Ys), subset(Xs, Ys))because of non-unification"
            },
            {
                "from": 84,
                "to": 86,
                "label": "CASE"
            },
            {
                "from": 86,
                "to": 88,
                "label": "PARALLEL"
            },
            {
                "from": 86,
                "to": 89,
                "label": "PARALLEL"
            },
            {
                "from": 88,
                "to": 92,
                "label": "EVAL with clause\nmember(X23, .(X23, X24)).\nand substitutionT8 -> T20,\nX23 -> T20,\nX24 -> T22,\nT11 -> .(T20, T22),\nT21 -> T22"
            },
            {
                "from": 88,
                "to": 93,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 89,
                "to": 99,
                "label": "EVAL with clause\nmember(X33, .(X34, X35)) :- member(X33, X35).\nand substitutionT8 -> T33,\nX33 -> T33,\nX34 -> T37,\nX35 -> T36,\nT11 -> .(T37, T36),\nT35 -> T36,\nT34 -> T37"
            },
            {
                "from": 89,
                "to": 100,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 92,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T9\nT2 -> .(T20, T22)"
            },
            {
                "from": 99,
                "to": 101,
                "label": "SPLIT 1"
            },
            {
                "from": 99,
                "to": 102,
                "label": "SPLIT 2\nnew knowledge:\nT33 is ground\nreplacements:T37 -> T42,\nT36 -> T43"
            },
            {
                "from": 101,
                "to": 149,
                "label": "CASE"
            },
            {
                "from": 102,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T9\nT2 -> .(T42, T43)"
            },
            {
                "from": 149,
                "to": 153,
                "label": "PARALLEL"
            },
            {
                "from": 149,
                "to": 154,
                "label": "PARALLEL"
            },
            {
                "from": 153,
                "to": 155,
                "label": "EVAL with clause\nmember(X52, .(X52, X53)).\nand substitutionT33 -> T56,\nX52 -> T56,\nX53 -> T57,\nT36 -> .(T56, T57)"
            },
            {
                "from": 153,
                "to": 156,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 154,
                "to": 158,
                "label": "EVAL with clause\nmember(X60, .(X61, X62)) :- member(X60, X62).\nand substitutionT33 -> T64,\nX60 -> T64,\nX61 -> T65,\nX62 -> T67,\nT36 -> .(T65, T67),\nT66 -> T67"
            },
            {
                "from": 154,
                "to": 159,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 155,
                "to": 157,
                "label": "SUCCESS"
            },
            {
                "from": 158,
                "to": 101,
                "label": "INSTANCE with matching:\nT33 -> T64\nT36 -> T67"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(66)
Obligation:
Triples:

memberB(X1, .(X2, X3)) :- memberB(X1, X3).
subsetA(.(X1, X2), .(X1, X3)) :- subsetA(X2, .(X1, X3)).
subsetA(.(X1, X2), .(X3, X4)) :- memberB(X1, X4).
subsetA(.(X1, X2), .(X3, X4)) :- ','(membercB(X1, X4), subsetA(X2, .(X3, X4))).

Clauses:

subsetcA([], X1).
subsetcA(.(X1, X2), .(X1, X3)) :- subsetcA(X2, .(X1, X3)).
subsetcA(.(X1, X2), .(X3, X4)) :- ','(membercB(X1, X4), subsetcA(X2, .(X3, X4))).
membercB(X1, .(X1, X2)).
membercB(X1, .(X2, X3)) :- membercB(X1, X3).

Afs:

subsetA(x1, x2)  =  subsetA(x1)


----------------------------------------

(67) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

subsetA_in_2: (b,f)

memberB_in_2: (f,f)

membercB_in_2: (f,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   SUBSETA_IN_GA(.(X1, X2), .(X1, X3)) -> U2_GA(X1, X2, X3, subsetA_in_ga(X2, .(X1, X3)))
   SUBSETA_IN_GA(.(X1, X2), .(X1, X3)) -> SUBSETA_IN_GA(X2, .(X1, X3))
   SUBSETA_IN_GA(.(X1, X2), .(X3, X4)) -> U3_GA(X1, X2, X3, X4, memberB_in_aa(X1, X4))
   SUBSETA_IN_GA(.(X1, X2), .(X3, X4)) -> MEMBERB_IN_AA(X1, X4)
   MEMBERB_IN_AA(X1, .(X2, X3)) -> U1_AA(X1, X2, X3, memberB_in_aa(X1, X3))
   MEMBERB_IN_AA(X1, .(X2, X3)) -> MEMBERB_IN_AA(X1, X3)
   SUBSETA_IN_GA(.(X1, X2), .(X3, X4)) -> U4_GA(X1, X2, X3, X4, membercB_in_aa(X1, X4))
   U4_GA(X1, X2, X3, X4, membercB_out_aa(X1, X4)) -> U5_GA(X1, X2, X3, X4, subsetA_in_ga(X2, .(X3, X4)))
   U4_GA(X1, X2, X3, X4, membercB_out_aa(X1, X4)) -> SUBSETA_IN_GA(X2, .(X3, X4))

The TRS R consists of the following rules:

   membercB_in_aa(X1, .(X1, X2)) -> membercB_out_aa(X1, .(X1, X2))
   membercB_in_aa(X1, .(X2, X3)) -> U10_aa(X1, X2, X3, membercB_in_aa(X1, X3))
   U10_aa(X1, X2, X3, membercB_out_aa(X1, X3)) -> membercB_out_aa(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
subsetA_in_ga(x1, x2)  =  subsetA_in_ga(x1)

.(x1, x2)  =  .(x2)

memberB_in_aa(x1, x2)  =  memberB_in_aa

membercB_in_aa(x1, x2)  =  membercB_in_aa

membercB_out_aa(x1, x2)  =  membercB_out_aa

U10_aa(x1, x2, x3, x4)  =  U10_aa(x4)

SUBSETA_IN_GA(x1, x2)  =  SUBSETA_IN_GA(x1)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x2, x4)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x2, x5)

MEMBERB_IN_AA(x1, x2)  =  MEMBERB_IN_AA

U1_AA(x1, x2, x3, x4)  =  U1_AA(x4)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x2, x5)

U5_GA(x1, x2, x3, x4, x5)  =  U5_GA(x2, x5)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(68)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSETA_IN_GA(.(X1, X2), .(X1, X3)) -> U2_GA(X1, X2, X3, subsetA_in_ga(X2, .(X1, X3)))
   SUBSETA_IN_GA(.(X1, X2), .(X1, X3)) -> SUBSETA_IN_GA(X2, .(X1, X3))
   SUBSETA_IN_GA(.(X1, X2), .(X3, X4)) -> U3_GA(X1, X2, X3, X4, memberB_in_aa(X1, X4))
   SUBSETA_IN_GA(.(X1, X2), .(X3, X4)) -> MEMBERB_IN_AA(X1, X4)
   MEMBERB_IN_AA(X1, .(X2, X3)) -> U1_AA(X1, X2, X3, memberB_in_aa(X1, X3))
   MEMBERB_IN_AA(X1, .(X2, X3)) -> MEMBERB_IN_AA(X1, X3)
   SUBSETA_IN_GA(.(X1, X2), .(X3, X4)) -> U4_GA(X1, X2, X3, X4, membercB_in_aa(X1, X4))
   U4_GA(X1, X2, X3, X4, membercB_out_aa(X1, X4)) -> U5_GA(X1, X2, X3, X4, subsetA_in_ga(X2, .(X3, X4)))
   U4_GA(X1, X2, X3, X4, membercB_out_aa(X1, X4)) -> SUBSETA_IN_GA(X2, .(X3, X4))

The TRS R consists of the following rules:

   membercB_in_aa(X1, .(X1, X2)) -> membercB_out_aa(X1, .(X1, X2))
   membercB_in_aa(X1, .(X2, X3)) -> U10_aa(X1, X2, X3, membercB_in_aa(X1, X3))
   U10_aa(X1, X2, X3, membercB_out_aa(X1, X3)) -> membercB_out_aa(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
subsetA_in_ga(x1, x2)  =  subsetA_in_ga(x1)

.(x1, x2)  =  .(x2)

memberB_in_aa(x1, x2)  =  memberB_in_aa

membercB_in_aa(x1, x2)  =  membercB_in_aa

membercB_out_aa(x1, x2)  =  membercB_out_aa

U10_aa(x1, x2, x3, x4)  =  U10_aa(x4)

SUBSETA_IN_GA(x1, x2)  =  SUBSETA_IN_GA(x1)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x2, x4)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x2, x5)

MEMBERB_IN_AA(x1, x2)  =  MEMBERB_IN_AA

U1_AA(x1, x2, x3, x4)  =  U1_AA(x4)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x2, x5)

U5_GA(x1, x2, x3, x4, x5)  =  U5_GA(x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(69) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 5 less nodes.
----------------------------------------

(70)
Complex Obligation (AND)

----------------------------------------

(71)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERB_IN_AA(X1, .(X2, X3)) -> MEMBERB_IN_AA(X1, X3)

The TRS R consists of the following rules:

   membercB_in_aa(X1, .(X1, X2)) -> membercB_out_aa(X1, .(X1, X2))
   membercB_in_aa(X1, .(X2, X3)) -> U10_aa(X1, X2, X3, membercB_in_aa(X1, X3))
   U10_aa(X1, X2, X3, membercB_out_aa(X1, X3)) -> membercB_out_aa(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

membercB_in_aa(x1, x2)  =  membercB_in_aa

membercB_out_aa(x1, x2)  =  membercB_out_aa

U10_aa(x1, x2, x3, x4)  =  U10_aa(x4)

MEMBERB_IN_AA(x1, x2)  =  MEMBERB_IN_AA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(72) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(73)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MEMBERB_IN_AA(X1, .(X2, X3)) -> MEMBERB_IN_AA(X1, X3)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

MEMBERB_IN_AA(x1, x2)  =  MEMBERB_IN_AA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(74) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(75)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MEMBERB_IN_AA -> MEMBERB_IN_AA

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(76) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = MEMBERB_IN_AA evaluates to  t =MEMBERB_IN_AA

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from MEMBERB_IN_AA to MEMBERB_IN_AA.




----------------------------------------

(77)
NO

----------------------------------------

(78)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SUBSETA_IN_GA(.(X1, X2), .(X3, X4)) -> U4_GA(X1, X2, X3, X4, membercB_in_aa(X1, X4))
   U4_GA(X1, X2, X3, X4, membercB_out_aa(X1, X4)) -> SUBSETA_IN_GA(X2, .(X3, X4))
   SUBSETA_IN_GA(.(X1, X2), .(X1, X3)) -> SUBSETA_IN_GA(X2, .(X1, X3))

The TRS R consists of the following rules:

   membercB_in_aa(X1, .(X1, X2)) -> membercB_out_aa(X1, .(X1, X2))
   membercB_in_aa(X1, .(X2, X3)) -> U10_aa(X1, X2, X3, membercB_in_aa(X1, X3))
   U10_aa(X1, X2, X3, membercB_out_aa(X1, X3)) -> membercB_out_aa(X1, .(X2, X3))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

membercB_in_aa(x1, x2)  =  membercB_in_aa

membercB_out_aa(x1, x2)  =  membercB_out_aa

U10_aa(x1, x2, x3, x4)  =  U10_aa(x4)

SUBSETA_IN_GA(x1, x2)  =  SUBSETA_IN_GA(x1)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(79) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(80)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SUBSETA_IN_GA(.(X2)) -> U4_GA(X2, membercB_in_aa)
   U4_GA(X2, membercB_out_aa) -> SUBSETA_IN_GA(X2)
   SUBSETA_IN_GA(.(X2)) -> SUBSETA_IN_GA(X2)

The TRS R consists of the following rules:

   membercB_in_aa -> membercB_out_aa
   membercB_in_aa -> U10_aa(membercB_in_aa)
   U10_aa(membercB_out_aa) -> membercB_out_aa

The set Q consists of the following terms:

   membercB_in_aa
   U10_aa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(81) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U4_GA(X2, membercB_out_aa) -> SUBSETA_IN_GA(X2)
The graph contains the following edges 1 >= 1


*SUBSETA_IN_GA(.(X2)) -> SUBSETA_IN_GA(X2)
The graph contains the following edges 1 > 1


*SUBSETA_IN_GA(.(X2)) -> U4_GA(X2, membercB_in_aa)
The graph contains the following edges 1 > 1


----------------------------------------

(82)
YES

----------------------------------------

(83) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(subset ([]) X1)",
                null
            ],
            [
                "(subset (. X Xs) Ys)",
                "(',' (member X Ys) (subset Xs Ys))"
            ],
            [
                "(member X (. X X2))",
                null
            ],
            [
                "(member X (. X3 Xs))",
                "(member X Xs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "25": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(subset T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "26": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(subset T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "160": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (member T14 T17) (subset T15 T17))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T14",
                        "T15"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "150": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "161": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "172": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(member T14 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T14"],
                    "free": [],
                    "exprvars": []
                }
            },
            "151": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "173": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(member T14 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T14"],
                    "free": [],
                    "exprvars": []
                }
            },
            "152": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "163": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T14 T17)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T14"],
                    "free": [],
                    "exprvars": []
                }
            },
            "174": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "164": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset T15 T22)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T15"],
                    "free": [],
                    "exprvars": []
                }
            },
            "175": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "176": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "166": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(member T14 T17)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(member T14 T17)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T14"],
                    "free": [],
                    "exprvars": []
                }
            },
            "177": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(member T43 T46)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T43"],
                    "free": [],
                    "exprvars": []
                }
            },
            "178": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(subset T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(subset T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(subset T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 25,
                "label": "PARALLEL"
            },
            {
                "from": 6,
                "to": 26,
                "label": "PARALLEL"
            },
            {
                "from": 25,
                "to": 150,
                "label": "EVAL with clause\nsubset([], X8).\nand substitutionT1 -> [],\nT2 -> T7,\nX8 -> T7"
            },
            {
                "from": 25,
                "to": 151,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 26,
                "to": 160,
                "label": "EVAL with clause\nsubset(.(X15, X16), X17) :- ','(member(X15, X17), subset(X16, X17)).\nand substitutionX15 -> T14,\nX16 -> T15,\nT1 -> .(T14, T15),\nT2 -> T17,\nX17 -> T17,\nT16 -> T17"
            },
            {
                "from": 26,
                "to": 161,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 150,
                "to": 152,
                "label": "SUCCESS"
            },
            {
                "from": 160,
                "to": 163,
                "label": "SPLIT 1"
            },
            {
                "from": 160,
                "to": 164,
                "label": "SPLIT 2\nnew knowledge:\nT14 is ground\nreplacements:T17 -> T22"
            },
            {
                "from": 163,
                "to": 166,
                "label": "CASE"
            },
            {
                "from": 164,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T15\nT2 -> T22"
            },
            {
                "from": 166,
                "to": 172,
                "label": "PARALLEL"
            },
            {
                "from": 166,
                "to": 173,
                "label": "PARALLEL"
            },
            {
                "from": 172,
                "to": 174,
                "label": "EVAL with clause\nmember(X34, .(X34, X35)).\nand substitutionT14 -> T35,\nX34 -> T35,\nX35 -> T36,\nT17 -> .(T35, T36)"
            },
            {
                "from": 172,
                "to": 175,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 173,
                "to": 177,
                "label": "EVAL with clause\nmember(X42, .(X43, X44)) :- member(X42, X44).\nand substitutionT14 -> T43,\nX42 -> T43,\nX43 -> T44,\nX44 -> T46,\nT17 -> .(T44, T46),\nT45 -> T46"
            },
            {
                "from": 173,
                "to": 178,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 174,
                "to": 176,
                "label": "SUCCESS"
            },
            {
                "from": 177,
                "to": 163,
                "label": "INSTANCE with matching:\nT14 -> T43\nT17 -> T46"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(84)
Complex Obligation (AND)

----------------------------------------

(85)
Obligation:
Rules:
f166_out(T14) -> f163_out(T14) :|: TRUE
f163_in(x) -> f166_in(x) :|: TRUE
f166_in(x1) -> f172_in(x1) :|: TRUE
f172_out(x2) -> f166_out(x2) :|: TRUE
f173_out(x3) -> f166_out(x3) :|: TRUE
f166_in(x4) -> f173_in(x4) :|: TRUE
f177_in(T43) -> f163_in(T43) :|: TRUE
f163_out(x5) -> f177_out(x5) :|: TRUE
f177_out(x6) -> f173_out(x6) :|: TRUE
f173_in(x7) -> f178_in :|: TRUE
f178_out -> f173_out(x8) :|: TRUE
f173_in(x9) -> f177_in(x9) :|: TRUE
f6_out(T1) -> f3_out(T1) :|: TRUE
f3_in(x10) -> f6_in(x10) :|: TRUE
f25_out(x11) -> f6_out(x11) :|: TRUE
f6_in(x12) -> f26_in(x12) :|: TRUE
f26_out(x13) -> f6_out(x13) :|: TRUE
f6_in(x14) -> f25_in(x14) :|: TRUE
f26_in(.(x15, x16)) -> f160_in(x15, x16) :|: TRUE
f26_in(x17) -> f161_in :|: TRUE
f161_out -> f26_out(x18) :|: TRUE
f160_out(x19, x20) -> f26_out(.(x19, x20)) :|: TRUE
f163_out(x21) -> f164_in(x22) :|: TRUE
f160_in(x23, x24) -> f163_in(x23) :|: TRUE
f164_out(x25) -> f160_out(x26, x25) :|: TRUE
Start term: f3_in(T1)

----------------------------------------

(86) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f163_in(x) -> f166_in(x) :|: TRUE
f166_in(x4) -> f173_in(x4) :|: TRUE
f177_in(T43) -> f163_in(T43) :|: TRUE
f173_in(x9) -> f177_in(x9) :|: TRUE


----------------------------------------

(87)
Obligation:
Rules:
f163_in(x) -> f166_in(x) :|: TRUE
f166_in(x4) -> f173_in(x4) :|: TRUE
f177_in(T43) -> f163_in(T43) :|: TRUE
f173_in(x9) -> f177_in(x9) :|: TRUE

----------------------------------------

(88) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(89)
Obligation:
Rules:
f177_in(T43:0) -> f177_in(T43:0) :|: TRUE

----------------------------------------

(90) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(91)
Obligation:
Rules:
f177_in(T43:0) -> f177_in(T43:0) :|: TRUE

----------------------------------------

(92) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f177_in(T43:0) -> f177_in(T43:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(93)
Obligation:

Termination digraph:
Nodes:
(1) f177_in(T43:0) -> f177_in(T43:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(94) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f177_in(VARIABLE)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(95)
Obligation:
Rules:
f177_in(T43:0) -> f177_in(T43:0) :|: TRUE

----------------------------------------

(96) IntTRSNonPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, T43:0) -> f(1, T43:0) :|: pc = 1 && TRUE
Proved unsatisfiability of the following formula, indicating that the system is never left after entering:
(((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and T)) and !(((run2_0 * 1)) = ((1 * 1)) and T))
Proved satisfiability of the following formula, indicating that the system is entered at least once:
((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and T))

----------------------------------------

(97)
NO

----------------------------------------

(98)
Obligation:
Rules:
f6_out(T1) -> f3_out(T1) :|: TRUE
f3_in(x) -> f6_in(x) :|: TRUE
f166_out(T14) -> f163_out(T14) :|: TRUE
f163_in(x1) -> f166_in(x1) :|: TRUE
f174_in -> f174_out :|: TRUE
f166_in(x2) -> f172_in(x2) :|: TRUE
f172_out(x3) -> f166_out(x3) :|: TRUE
f173_out(x4) -> f166_out(x4) :|: TRUE
f166_in(x5) -> f173_in(x5) :|: TRUE
f163_out(x6) -> f164_in(x7) :|: TRUE
f160_in(x8, x9) -> f163_in(x8) :|: TRUE
f164_out(x10) -> f160_out(x11, x10) :|: TRUE
f3_out(T15) -> f164_out(T15) :|: TRUE
f164_in(x12) -> f3_in(x12) :|: TRUE
f172_in(x13) -> f175_in :|: TRUE
f175_out -> f172_out(x14) :|: TRUE
f172_in(T35) -> f174_in :|: TRUE
f174_out -> f172_out(x15) :|: TRUE
f25_out(x16) -> f6_out(x16) :|: TRUE
f6_in(x17) -> f26_in(x17) :|: TRUE
f26_out(x18) -> f6_out(x18) :|: TRUE
f6_in(x19) -> f25_in(x19) :|: TRUE
f26_in(.(x20, x21)) -> f160_in(x20, x21) :|: TRUE
f26_in(x22) -> f161_in :|: TRUE
f161_out -> f26_out(x23) :|: TRUE
f160_out(x24, x25) -> f26_out(.(x24, x25)) :|: TRUE
f177_in(T43) -> f163_in(T43) :|: TRUE
f163_out(x26) -> f177_out(x26) :|: TRUE
f177_out(x27) -> f173_out(x27) :|: TRUE
f173_in(x28) -> f178_in :|: TRUE
f178_out -> f173_out(x29) :|: TRUE
f173_in(x30) -> f177_in(x30) :|: TRUE
Start term: f3_in(T1)

----------------------------------------

(99) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f3_in(x) -> f6_in(x) :|: TRUE
f166_out(T14) -> f163_out(T14) :|: TRUE
f163_in(x1) -> f166_in(x1) :|: TRUE
f174_in -> f174_out :|: TRUE
f166_in(x2) -> f172_in(x2) :|: TRUE
f172_out(x3) -> f166_out(x3) :|: TRUE
f173_out(x4) -> f166_out(x4) :|: TRUE
f166_in(x5) -> f173_in(x5) :|: TRUE
f163_out(x6) -> f164_in(x7) :|: TRUE
f160_in(x8, x9) -> f163_in(x8) :|: TRUE
f164_in(x12) -> f3_in(x12) :|: TRUE
f172_in(T35) -> f174_in :|: TRUE
f174_out -> f172_out(x15) :|: TRUE
f6_in(x17) -> f26_in(x17) :|: TRUE
f26_in(.(x20, x21)) -> f160_in(x20, x21) :|: TRUE
f177_in(T43) -> f163_in(T43) :|: TRUE
f163_out(x26) -> f177_out(x26) :|: TRUE
f177_out(x27) -> f173_out(x27) :|: TRUE
f173_in(x30) -> f177_in(x30) :|: TRUE


----------------------------------------

(100)
Obligation:
Rules:
f3_in(x) -> f6_in(x) :|: TRUE
f166_out(T14) -> f163_out(T14) :|: TRUE
f163_in(x1) -> f166_in(x1) :|: TRUE
f174_in -> f174_out :|: TRUE
f166_in(x2) -> f172_in(x2) :|: TRUE
f172_out(x3) -> f166_out(x3) :|: TRUE
f173_out(x4) -> f166_out(x4) :|: TRUE
f166_in(x5) -> f173_in(x5) :|: TRUE
f163_out(x6) -> f164_in(x7) :|: TRUE
f160_in(x8, x9) -> f163_in(x8) :|: TRUE
f164_in(x12) -> f3_in(x12) :|: TRUE
f172_in(T35) -> f174_in :|: TRUE
f174_out -> f172_out(x15) :|: TRUE
f6_in(x17) -> f26_in(x17) :|: TRUE
f26_in(.(x20, x21)) -> f160_in(x20, x21) :|: TRUE
f177_in(T43) -> f163_in(T43) :|: TRUE
f163_out(x26) -> f177_out(x26) :|: TRUE
f177_out(x27) -> f173_out(x27) :|: TRUE
f173_in(x30) -> f177_in(x30) :|: TRUE

----------------------------------------

(101) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(102)
Obligation:
Rules:
f166_out(T14:0) -> f166_out(T14:0) :|: TRUE
f163_in(x1:0) -> f163_in(x1:0) :|: TRUE
f163_in(x) -> f166_out(x1) :|: TRUE
f166_out(x2) -> f163_in(x3) :|: TRUE

----------------------------------------

(103) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(104)
Obligation:
Rules:
f166_out(T14:0) -> f166_out(T14:0) :|: TRUE
f163_in(x1:0) -> f163_in(x1:0) :|: TRUE
f163_in(x) -> f166_out(x1) :|: TRUE
f166_out(x2) -> f163_in(x3) :|: TRUE
