YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/zns1W.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

cnfequiv(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPOrderProof [EQUIVALENT, 26 ms]
        (20) QDP
        (21) PisEmptyProof [EQUIVALENT, 0 ms]
        (22) YES


----------------------------------------

(0)
Obligation:
Clauses:

cnfequiv(X, Y) :- ','(transform(X, Z), cnfequiv(Z, Y)).
cnfequiv(X, X).
transform(n(n(X)), X).
transform(n(a(X, Y)), o(n(X), n(Y))).
transform(n(o(X, Y)), a(n(X), n(Y))).
transform(o(X, a(Y, Z)), a(o(X, Y), o(X, Z))).
transform(o(a(X, Y), Z), a(o(X, Z), o(Y, Z))).
transform(o(X1, Y), o(X2, Y)) :- transform(X1, X2).
transform(o(X, Y1), o(X, Y2)) :- transform(Y1, Y2).
transform(a(X1, Y), a(X2, Y)) :- transform(X1, X2).
transform(a(X, Y1), a(X, Y2)) :- transform(Y1, Y2).
transform(n(X1), n(X2)) :- transform(X1, X2).


Query: cnfequiv(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

cnfequiv_in_2: (b,f)

transform_in_2: (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   cnfequiv_in_ga(X, Y) -> U1_ga(X, Y, transform_in_ga(X, Z))
   transform_in_ga(n(n(X)), X) -> transform_out_ga(n(n(X)), X)
   transform_in_ga(n(a(X, Y)), o(n(X), n(Y))) -> transform_out_ga(n(a(X, Y)), o(n(X), n(Y)))
   transform_in_ga(n(o(X, Y)), a(n(X), n(Y))) -> transform_out_ga(n(o(X, Y)), a(n(X), n(Y)))
   transform_in_ga(o(X, a(Y, Z)), a(o(X, Y), o(X, Z))) -> transform_out_ga(o(X, a(Y, Z)), a(o(X, Y), o(X, Z)))
   transform_in_ga(o(a(X, Y), Z), a(o(X, Z), o(Y, Z))) -> transform_out_ga(o(a(X, Y), Z), a(o(X, Z), o(Y, Z)))
   transform_in_ga(o(X1, Y), o(X2, Y)) -> U3_ga(X1, Y, X2, transform_in_ga(X1, X2))
   transform_in_ga(o(X, Y1), o(X, Y2)) -> U4_ga(X, Y1, Y2, transform_in_ga(Y1, Y2))
   transform_in_ga(a(X1, Y), a(X2, Y)) -> U5_ga(X1, Y, X2, transform_in_ga(X1, X2))
   transform_in_ga(a(X, Y1), a(X, Y2)) -> U6_ga(X, Y1, Y2, transform_in_ga(Y1, Y2))
   transform_in_ga(n(X1), n(X2)) -> U7_ga(X1, X2, transform_in_ga(X1, X2))
   U7_ga(X1, X2, transform_out_ga(X1, X2)) -> transform_out_ga(n(X1), n(X2))
   U6_ga(X, Y1, Y2, transform_out_ga(Y1, Y2)) -> transform_out_ga(a(X, Y1), a(X, Y2))
   U5_ga(X1, Y, X2, transform_out_ga(X1, X2)) -> transform_out_ga(a(X1, Y), a(X2, Y))
   U4_ga(X, Y1, Y2, transform_out_ga(Y1, Y2)) -> transform_out_ga(o(X, Y1), o(X, Y2))
   U3_ga(X1, Y, X2, transform_out_ga(X1, X2)) -> transform_out_ga(o(X1, Y), o(X2, Y))
   U1_ga(X, Y, transform_out_ga(X, Z)) -> U2_ga(X, Y, cnfequiv_in_ga(Z, Y))
   cnfequiv_in_ga(X, X) -> cnfequiv_out_ga(X, X)
   U2_ga(X, Y, cnfequiv_out_ga(Z, Y)) -> cnfequiv_out_ga(X, Y)

The argument filtering Pi contains the following mapping:
cnfequiv_in_ga(x1, x2)  =  cnfequiv_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

transform_in_ga(x1, x2)  =  transform_in_ga(x1)

n(x1)  =  n(x1)

transform_out_ga(x1, x2)  =  transform_out_ga(x2)

a(x1, x2)  =  a(x1, x2)

o(x1, x2)  =  o(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x2, x4)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x1, x4)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x4)

U7_ga(x1, x2, x3)  =  U7_ga(x3)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

cnfequiv_out_ga(x1, x2)  =  cnfequiv_out_ga(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   cnfequiv_in_ga(X, Y) -> U1_ga(X, Y, transform_in_ga(X, Z))
   transform_in_ga(n(n(X)), X) -> transform_out_ga(n(n(X)), X)
   transform_in_ga(n(a(X, Y)), o(n(X), n(Y))) -> transform_out_ga(n(a(X, Y)), o(n(X), n(Y)))
   transform_in_ga(n(o(X, Y)), a(n(X), n(Y))) -> transform_out_ga(n(o(X, Y)), a(n(X), n(Y)))
   transform_in_ga(o(X, a(Y, Z)), a(o(X, Y), o(X, Z))) -> transform_out_ga(o(X, a(Y, Z)), a(o(X, Y), o(X, Z)))
   transform_in_ga(o(a(X, Y), Z), a(o(X, Z), o(Y, Z))) -> transform_out_ga(o(a(X, Y), Z), a(o(X, Z), o(Y, Z)))
   transform_in_ga(o(X1, Y), o(X2, Y)) -> U3_ga(X1, Y, X2, transform_in_ga(X1, X2))
   transform_in_ga(o(X, Y1), o(X, Y2)) -> U4_ga(X, Y1, Y2, transform_in_ga(Y1, Y2))
   transform_in_ga(a(X1, Y), a(X2, Y)) -> U5_ga(X1, Y, X2, transform_in_ga(X1, X2))
   transform_in_ga(a(X, Y1), a(X, Y2)) -> U6_ga(X, Y1, Y2, transform_in_ga(Y1, Y2))
   transform_in_ga(n(X1), n(X2)) -> U7_ga(X1, X2, transform_in_ga(X1, X2))
   U7_ga(X1, X2, transform_out_ga(X1, X2)) -> transform_out_ga(n(X1), n(X2))
   U6_ga(X, Y1, Y2, transform_out_ga(Y1, Y2)) -> transform_out_ga(a(X, Y1), a(X, Y2))
   U5_ga(X1, Y, X2, transform_out_ga(X1, X2)) -> transform_out_ga(a(X1, Y), a(X2, Y))
   U4_ga(X, Y1, Y2, transform_out_ga(Y1, Y2)) -> transform_out_ga(o(X, Y1), o(X, Y2))
   U3_ga(X1, Y, X2, transform_out_ga(X1, X2)) -> transform_out_ga(o(X1, Y), o(X2, Y))
   U1_ga(X, Y, transform_out_ga(X, Z)) -> U2_ga(X, Y, cnfequiv_in_ga(Z, Y))
   cnfequiv_in_ga(X, X) -> cnfequiv_out_ga(X, X)
   U2_ga(X, Y, cnfequiv_out_ga(Z, Y)) -> cnfequiv_out_ga(X, Y)

The argument filtering Pi contains the following mapping:
cnfequiv_in_ga(x1, x2)  =  cnfequiv_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

transform_in_ga(x1, x2)  =  transform_in_ga(x1)

n(x1)  =  n(x1)

transform_out_ga(x1, x2)  =  transform_out_ga(x2)

a(x1, x2)  =  a(x1, x2)

o(x1, x2)  =  o(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x2, x4)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x1, x4)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x4)

U7_ga(x1, x2, x3)  =  U7_ga(x3)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

cnfequiv_out_ga(x1, x2)  =  cnfequiv_out_ga(x2)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   CNFEQUIV_IN_GA(X, Y) -> U1_GA(X, Y, transform_in_ga(X, Z))
   CNFEQUIV_IN_GA(X, Y) -> TRANSFORM_IN_GA(X, Z)
   TRANSFORM_IN_GA(o(X1, Y), o(X2, Y)) -> U3_GA(X1, Y, X2, transform_in_ga(X1, X2))
   TRANSFORM_IN_GA(o(X1, Y), o(X2, Y)) -> TRANSFORM_IN_GA(X1, X2)
   TRANSFORM_IN_GA(o(X, Y1), o(X, Y2)) -> U4_GA(X, Y1, Y2, transform_in_ga(Y1, Y2))
   TRANSFORM_IN_GA(o(X, Y1), o(X, Y2)) -> TRANSFORM_IN_GA(Y1, Y2)
   TRANSFORM_IN_GA(a(X1, Y), a(X2, Y)) -> U5_GA(X1, Y, X2, transform_in_ga(X1, X2))
   TRANSFORM_IN_GA(a(X1, Y), a(X2, Y)) -> TRANSFORM_IN_GA(X1, X2)
   TRANSFORM_IN_GA(a(X, Y1), a(X, Y2)) -> U6_GA(X, Y1, Y2, transform_in_ga(Y1, Y2))
   TRANSFORM_IN_GA(a(X, Y1), a(X, Y2)) -> TRANSFORM_IN_GA(Y1, Y2)
   TRANSFORM_IN_GA(n(X1), n(X2)) -> U7_GA(X1, X2, transform_in_ga(X1, X2))
   TRANSFORM_IN_GA(n(X1), n(X2)) -> TRANSFORM_IN_GA(X1, X2)
   U1_GA(X, Y, transform_out_ga(X, Z)) -> U2_GA(X, Y, cnfequiv_in_ga(Z, Y))
   U1_GA(X, Y, transform_out_ga(X, Z)) -> CNFEQUIV_IN_GA(Z, Y)

The TRS R consists of the following rules:

   cnfequiv_in_ga(X, Y) -> U1_ga(X, Y, transform_in_ga(X, Z))
   transform_in_ga(n(n(X)), X) -> transform_out_ga(n(n(X)), X)
   transform_in_ga(n(a(X, Y)), o(n(X), n(Y))) -> transform_out_ga(n(a(X, Y)), o(n(X), n(Y)))
   transform_in_ga(n(o(X, Y)), a(n(X), n(Y))) -> transform_out_ga(n(o(X, Y)), a(n(X), n(Y)))
   transform_in_ga(o(X, a(Y, Z)), a(o(X, Y), o(X, Z))) -> transform_out_ga(o(X, a(Y, Z)), a(o(X, Y), o(X, Z)))
   transform_in_ga(o(a(X, Y), Z), a(o(X, Z), o(Y, Z))) -> transform_out_ga(o(a(X, Y), Z), a(o(X, Z), o(Y, Z)))
   transform_in_ga(o(X1, Y), o(X2, Y)) -> U3_ga(X1, Y, X2, transform_in_ga(X1, X2))
   transform_in_ga(o(X, Y1), o(X, Y2)) -> U4_ga(X, Y1, Y2, transform_in_ga(Y1, Y2))
   transform_in_ga(a(X1, Y), a(X2, Y)) -> U5_ga(X1, Y, X2, transform_in_ga(X1, X2))
   transform_in_ga(a(X, Y1), a(X, Y2)) -> U6_ga(X, Y1, Y2, transform_in_ga(Y1, Y2))
   transform_in_ga(n(X1), n(X2)) -> U7_ga(X1, X2, transform_in_ga(X1, X2))
   U7_ga(X1, X2, transform_out_ga(X1, X2)) -> transform_out_ga(n(X1), n(X2))
   U6_ga(X, Y1, Y2, transform_out_ga(Y1, Y2)) -> transform_out_ga(a(X, Y1), a(X, Y2))
   U5_ga(X1, Y, X2, transform_out_ga(X1, X2)) -> transform_out_ga(a(X1, Y), a(X2, Y))
   U4_ga(X, Y1, Y2, transform_out_ga(Y1, Y2)) -> transform_out_ga(o(X, Y1), o(X, Y2))
   U3_ga(X1, Y, X2, transform_out_ga(X1, X2)) -> transform_out_ga(o(X1, Y), o(X2, Y))
   U1_ga(X, Y, transform_out_ga(X, Z)) -> U2_ga(X, Y, cnfequiv_in_ga(Z, Y))
   cnfequiv_in_ga(X, X) -> cnfequiv_out_ga(X, X)
   U2_ga(X, Y, cnfequiv_out_ga(Z, Y)) -> cnfequiv_out_ga(X, Y)

The argument filtering Pi contains the following mapping:
cnfequiv_in_ga(x1, x2)  =  cnfequiv_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

transform_in_ga(x1, x2)  =  transform_in_ga(x1)

n(x1)  =  n(x1)

transform_out_ga(x1, x2)  =  transform_out_ga(x2)

a(x1, x2)  =  a(x1, x2)

o(x1, x2)  =  o(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x2, x4)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x1, x4)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x4)

U7_ga(x1, x2, x3)  =  U7_ga(x3)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

cnfequiv_out_ga(x1, x2)  =  cnfequiv_out_ga(x2)

CNFEQUIV_IN_GA(x1, x2)  =  CNFEQUIV_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

TRANSFORM_IN_GA(x1, x2)  =  TRANSFORM_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x2, x4)

U4_GA(x1, x2, x3, x4)  =  U4_GA(x1, x4)

U5_GA(x1, x2, x3, x4)  =  U5_GA(x2, x4)

U6_GA(x1, x2, x3, x4)  =  U6_GA(x1, x4)

U7_GA(x1, x2, x3)  =  U7_GA(x3)

U2_GA(x1, x2, x3)  =  U2_GA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   CNFEQUIV_IN_GA(X, Y) -> U1_GA(X, Y, transform_in_ga(X, Z))
   CNFEQUIV_IN_GA(X, Y) -> TRANSFORM_IN_GA(X, Z)
   TRANSFORM_IN_GA(o(X1, Y), o(X2, Y)) -> U3_GA(X1, Y, X2, transform_in_ga(X1, X2))
   TRANSFORM_IN_GA(o(X1, Y), o(X2, Y)) -> TRANSFORM_IN_GA(X1, X2)
   TRANSFORM_IN_GA(o(X, Y1), o(X, Y2)) -> U4_GA(X, Y1, Y2, transform_in_ga(Y1, Y2))
   TRANSFORM_IN_GA(o(X, Y1), o(X, Y2)) -> TRANSFORM_IN_GA(Y1, Y2)
   TRANSFORM_IN_GA(a(X1, Y), a(X2, Y)) -> U5_GA(X1, Y, X2, transform_in_ga(X1, X2))
   TRANSFORM_IN_GA(a(X1, Y), a(X2, Y)) -> TRANSFORM_IN_GA(X1, X2)
   TRANSFORM_IN_GA(a(X, Y1), a(X, Y2)) -> U6_GA(X, Y1, Y2, transform_in_ga(Y1, Y2))
   TRANSFORM_IN_GA(a(X, Y1), a(X, Y2)) -> TRANSFORM_IN_GA(Y1, Y2)
   TRANSFORM_IN_GA(n(X1), n(X2)) -> U7_GA(X1, X2, transform_in_ga(X1, X2))
   TRANSFORM_IN_GA(n(X1), n(X2)) -> TRANSFORM_IN_GA(X1, X2)
   U1_GA(X, Y, transform_out_ga(X, Z)) -> U2_GA(X, Y, cnfequiv_in_ga(Z, Y))
   U1_GA(X, Y, transform_out_ga(X, Z)) -> CNFEQUIV_IN_GA(Z, Y)

The TRS R consists of the following rules:

   cnfequiv_in_ga(X, Y) -> U1_ga(X, Y, transform_in_ga(X, Z))
   transform_in_ga(n(n(X)), X) -> transform_out_ga(n(n(X)), X)
   transform_in_ga(n(a(X, Y)), o(n(X), n(Y))) -> transform_out_ga(n(a(X, Y)), o(n(X), n(Y)))
   transform_in_ga(n(o(X, Y)), a(n(X), n(Y))) -> transform_out_ga(n(o(X, Y)), a(n(X), n(Y)))
   transform_in_ga(o(X, a(Y, Z)), a(o(X, Y), o(X, Z))) -> transform_out_ga(o(X, a(Y, Z)), a(o(X, Y), o(X, Z)))
   transform_in_ga(o(a(X, Y), Z), a(o(X, Z), o(Y, Z))) -> transform_out_ga(o(a(X, Y), Z), a(o(X, Z), o(Y, Z)))
   transform_in_ga(o(X1, Y), o(X2, Y)) -> U3_ga(X1, Y, X2, transform_in_ga(X1, X2))
   transform_in_ga(o(X, Y1), o(X, Y2)) -> U4_ga(X, Y1, Y2, transform_in_ga(Y1, Y2))
   transform_in_ga(a(X1, Y), a(X2, Y)) -> U5_ga(X1, Y, X2, transform_in_ga(X1, X2))
   transform_in_ga(a(X, Y1), a(X, Y2)) -> U6_ga(X, Y1, Y2, transform_in_ga(Y1, Y2))
   transform_in_ga(n(X1), n(X2)) -> U7_ga(X1, X2, transform_in_ga(X1, X2))
   U7_ga(X1, X2, transform_out_ga(X1, X2)) -> transform_out_ga(n(X1), n(X2))
   U6_ga(X, Y1, Y2, transform_out_ga(Y1, Y2)) -> transform_out_ga(a(X, Y1), a(X, Y2))
   U5_ga(X1, Y, X2, transform_out_ga(X1, X2)) -> transform_out_ga(a(X1, Y), a(X2, Y))
   U4_ga(X, Y1, Y2, transform_out_ga(Y1, Y2)) -> transform_out_ga(o(X, Y1), o(X, Y2))
   U3_ga(X1, Y, X2, transform_out_ga(X1, X2)) -> transform_out_ga(o(X1, Y), o(X2, Y))
   U1_ga(X, Y, transform_out_ga(X, Z)) -> U2_ga(X, Y, cnfequiv_in_ga(Z, Y))
   cnfequiv_in_ga(X, X) -> cnfequiv_out_ga(X, X)
   U2_ga(X, Y, cnfequiv_out_ga(Z, Y)) -> cnfequiv_out_ga(X, Y)

The argument filtering Pi contains the following mapping:
cnfequiv_in_ga(x1, x2)  =  cnfequiv_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

transform_in_ga(x1, x2)  =  transform_in_ga(x1)

n(x1)  =  n(x1)

transform_out_ga(x1, x2)  =  transform_out_ga(x2)

a(x1, x2)  =  a(x1, x2)

o(x1, x2)  =  o(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x2, x4)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x1, x4)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x4)

U7_ga(x1, x2, x3)  =  U7_ga(x3)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

cnfequiv_out_ga(x1, x2)  =  cnfequiv_out_ga(x2)

CNFEQUIV_IN_GA(x1, x2)  =  CNFEQUIV_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

TRANSFORM_IN_GA(x1, x2)  =  TRANSFORM_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x2, x4)

U4_GA(x1, x2, x3, x4)  =  U4_GA(x1, x4)

U5_GA(x1, x2, x3, x4)  =  U5_GA(x2, x4)

U6_GA(x1, x2, x3, x4)  =  U6_GA(x1, x4)

U7_GA(x1, x2, x3)  =  U7_GA(x3)

U2_GA(x1, x2, x3)  =  U2_GA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 7 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TRANSFORM_IN_GA(o(X, Y1), o(X, Y2)) -> TRANSFORM_IN_GA(Y1, Y2)
   TRANSFORM_IN_GA(o(X1, Y), o(X2, Y)) -> TRANSFORM_IN_GA(X1, X2)
   TRANSFORM_IN_GA(a(X1, Y), a(X2, Y)) -> TRANSFORM_IN_GA(X1, X2)
   TRANSFORM_IN_GA(a(X, Y1), a(X, Y2)) -> TRANSFORM_IN_GA(Y1, Y2)
   TRANSFORM_IN_GA(n(X1), n(X2)) -> TRANSFORM_IN_GA(X1, X2)

The TRS R consists of the following rules:

   cnfequiv_in_ga(X, Y) -> U1_ga(X, Y, transform_in_ga(X, Z))
   transform_in_ga(n(n(X)), X) -> transform_out_ga(n(n(X)), X)
   transform_in_ga(n(a(X, Y)), o(n(X), n(Y))) -> transform_out_ga(n(a(X, Y)), o(n(X), n(Y)))
   transform_in_ga(n(o(X, Y)), a(n(X), n(Y))) -> transform_out_ga(n(o(X, Y)), a(n(X), n(Y)))
   transform_in_ga(o(X, a(Y, Z)), a(o(X, Y), o(X, Z))) -> transform_out_ga(o(X, a(Y, Z)), a(o(X, Y), o(X, Z)))
   transform_in_ga(o(a(X, Y), Z), a(o(X, Z), o(Y, Z))) -> transform_out_ga(o(a(X, Y), Z), a(o(X, Z), o(Y, Z)))
   transform_in_ga(o(X1, Y), o(X2, Y)) -> U3_ga(X1, Y, X2, transform_in_ga(X1, X2))
   transform_in_ga(o(X, Y1), o(X, Y2)) -> U4_ga(X, Y1, Y2, transform_in_ga(Y1, Y2))
   transform_in_ga(a(X1, Y), a(X2, Y)) -> U5_ga(X1, Y, X2, transform_in_ga(X1, X2))
   transform_in_ga(a(X, Y1), a(X, Y2)) -> U6_ga(X, Y1, Y2, transform_in_ga(Y1, Y2))
   transform_in_ga(n(X1), n(X2)) -> U7_ga(X1, X2, transform_in_ga(X1, X2))
   U7_ga(X1, X2, transform_out_ga(X1, X2)) -> transform_out_ga(n(X1), n(X2))
   U6_ga(X, Y1, Y2, transform_out_ga(Y1, Y2)) -> transform_out_ga(a(X, Y1), a(X, Y2))
   U5_ga(X1, Y, X2, transform_out_ga(X1, X2)) -> transform_out_ga(a(X1, Y), a(X2, Y))
   U4_ga(X, Y1, Y2, transform_out_ga(Y1, Y2)) -> transform_out_ga(o(X, Y1), o(X, Y2))
   U3_ga(X1, Y, X2, transform_out_ga(X1, X2)) -> transform_out_ga(o(X1, Y), o(X2, Y))
   U1_ga(X, Y, transform_out_ga(X, Z)) -> U2_ga(X, Y, cnfequiv_in_ga(Z, Y))
   cnfequiv_in_ga(X, X) -> cnfequiv_out_ga(X, X)
   U2_ga(X, Y, cnfequiv_out_ga(Z, Y)) -> cnfequiv_out_ga(X, Y)

The argument filtering Pi contains the following mapping:
cnfequiv_in_ga(x1, x2)  =  cnfequiv_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

transform_in_ga(x1, x2)  =  transform_in_ga(x1)

n(x1)  =  n(x1)

transform_out_ga(x1, x2)  =  transform_out_ga(x2)

a(x1, x2)  =  a(x1, x2)

o(x1, x2)  =  o(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x2, x4)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x1, x4)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x4)

U7_ga(x1, x2, x3)  =  U7_ga(x3)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

cnfequiv_out_ga(x1, x2)  =  cnfequiv_out_ga(x2)

TRANSFORM_IN_GA(x1, x2)  =  TRANSFORM_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TRANSFORM_IN_GA(o(X, Y1), o(X, Y2)) -> TRANSFORM_IN_GA(Y1, Y2)
   TRANSFORM_IN_GA(o(X1, Y), o(X2, Y)) -> TRANSFORM_IN_GA(X1, X2)
   TRANSFORM_IN_GA(a(X1, Y), a(X2, Y)) -> TRANSFORM_IN_GA(X1, X2)
   TRANSFORM_IN_GA(a(X, Y1), a(X, Y2)) -> TRANSFORM_IN_GA(Y1, Y2)
   TRANSFORM_IN_GA(n(X1), n(X2)) -> TRANSFORM_IN_GA(X1, X2)

R is empty.
The argument filtering Pi contains the following mapping:
n(x1)  =  n(x1)

a(x1, x2)  =  a(x1, x2)

o(x1, x2)  =  o(x1, x2)

TRANSFORM_IN_GA(x1, x2)  =  TRANSFORM_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TRANSFORM_IN_GA(o(X, Y1)) -> TRANSFORM_IN_GA(Y1)
   TRANSFORM_IN_GA(o(X1, Y)) -> TRANSFORM_IN_GA(X1)
   TRANSFORM_IN_GA(a(X1, Y)) -> TRANSFORM_IN_GA(X1)
   TRANSFORM_IN_GA(a(X, Y1)) -> TRANSFORM_IN_GA(Y1)
   TRANSFORM_IN_GA(n(X1)) -> TRANSFORM_IN_GA(X1)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TRANSFORM_IN_GA(o(X, Y1)) -> TRANSFORM_IN_GA(Y1)
The graph contains the following edges 1 > 1


*TRANSFORM_IN_GA(o(X1, Y)) -> TRANSFORM_IN_GA(X1)
The graph contains the following edges 1 > 1


*TRANSFORM_IN_GA(a(X1, Y)) -> TRANSFORM_IN_GA(X1)
The graph contains the following edges 1 > 1


*TRANSFORM_IN_GA(a(X, Y1)) -> TRANSFORM_IN_GA(Y1)
The graph contains the following edges 1 > 1


*TRANSFORM_IN_GA(n(X1)) -> TRANSFORM_IN_GA(X1)
The graph contains the following edges 1 > 1


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(X, Y, transform_out_ga(X, Z)) -> CNFEQUIV_IN_GA(Z, Y)
   CNFEQUIV_IN_GA(X, Y) -> U1_GA(X, Y, transform_in_ga(X, Z))

The TRS R consists of the following rules:

   cnfequiv_in_ga(X, Y) -> U1_ga(X, Y, transform_in_ga(X, Z))
   transform_in_ga(n(n(X)), X) -> transform_out_ga(n(n(X)), X)
   transform_in_ga(n(a(X, Y)), o(n(X), n(Y))) -> transform_out_ga(n(a(X, Y)), o(n(X), n(Y)))
   transform_in_ga(n(o(X, Y)), a(n(X), n(Y))) -> transform_out_ga(n(o(X, Y)), a(n(X), n(Y)))
   transform_in_ga(o(X, a(Y, Z)), a(o(X, Y), o(X, Z))) -> transform_out_ga(o(X, a(Y, Z)), a(o(X, Y), o(X, Z)))
   transform_in_ga(o(a(X, Y), Z), a(o(X, Z), o(Y, Z))) -> transform_out_ga(o(a(X, Y), Z), a(o(X, Z), o(Y, Z)))
   transform_in_ga(o(X1, Y), o(X2, Y)) -> U3_ga(X1, Y, X2, transform_in_ga(X1, X2))
   transform_in_ga(o(X, Y1), o(X, Y2)) -> U4_ga(X, Y1, Y2, transform_in_ga(Y1, Y2))
   transform_in_ga(a(X1, Y), a(X2, Y)) -> U5_ga(X1, Y, X2, transform_in_ga(X1, X2))
   transform_in_ga(a(X, Y1), a(X, Y2)) -> U6_ga(X, Y1, Y2, transform_in_ga(Y1, Y2))
   transform_in_ga(n(X1), n(X2)) -> U7_ga(X1, X2, transform_in_ga(X1, X2))
   U7_ga(X1, X2, transform_out_ga(X1, X2)) -> transform_out_ga(n(X1), n(X2))
   U6_ga(X, Y1, Y2, transform_out_ga(Y1, Y2)) -> transform_out_ga(a(X, Y1), a(X, Y2))
   U5_ga(X1, Y, X2, transform_out_ga(X1, X2)) -> transform_out_ga(a(X1, Y), a(X2, Y))
   U4_ga(X, Y1, Y2, transform_out_ga(Y1, Y2)) -> transform_out_ga(o(X, Y1), o(X, Y2))
   U3_ga(X1, Y, X2, transform_out_ga(X1, X2)) -> transform_out_ga(o(X1, Y), o(X2, Y))
   U1_ga(X, Y, transform_out_ga(X, Z)) -> U2_ga(X, Y, cnfequiv_in_ga(Z, Y))
   cnfequiv_in_ga(X, X) -> cnfequiv_out_ga(X, X)
   U2_ga(X, Y, cnfequiv_out_ga(Z, Y)) -> cnfequiv_out_ga(X, Y)

The argument filtering Pi contains the following mapping:
cnfequiv_in_ga(x1, x2)  =  cnfequiv_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

transform_in_ga(x1, x2)  =  transform_in_ga(x1)

n(x1)  =  n(x1)

transform_out_ga(x1, x2)  =  transform_out_ga(x2)

a(x1, x2)  =  a(x1, x2)

o(x1, x2)  =  o(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x2, x4)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x1, x4)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x4)

U7_ga(x1, x2, x3)  =  U7_ga(x3)

U2_ga(x1, x2, x3)  =  U2_ga(x3)

cnfequiv_out_ga(x1, x2)  =  cnfequiv_out_ga(x2)

CNFEQUIV_IN_GA(x1, x2)  =  CNFEQUIV_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(X, Y, transform_out_ga(X, Z)) -> CNFEQUIV_IN_GA(Z, Y)
   CNFEQUIV_IN_GA(X, Y) -> U1_GA(X, Y, transform_in_ga(X, Z))

The TRS R consists of the following rules:

   transform_in_ga(n(n(X)), X) -> transform_out_ga(n(n(X)), X)
   transform_in_ga(n(a(X, Y)), o(n(X), n(Y))) -> transform_out_ga(n(a(X, Y)), o(n(X), n(Y)))
   transform_in_ga(n(o(X, Y)), a(n(X), n(Y))) -> transform_out_ga(n(o(X, Y)), a(n(X), n(Y)))
   transform_in_ga(o(X, a(Y, Z)), a(o(X, Y), o(X, Z))) -> transform_out_ga(o(X, a(Y, Z)), a(o(X, Y), o(X, Z)))
   transform_in_ga(o(a(X, Y), Z), a(o(X, Z), o(Y, Z))) -> transform_out_ga(o(a(X, Y), Z), a(o(X, Z), o(Y, Z)))
   transform_in_ga(o(X1, Y), o(X2, Y)) -> U3_ga(X1, Y, X2, transform_in_ga(X1, X2))
   transform_in_ga(o(X, Y1), o(X, Y2)) -> U4_ga(X, Y1, Y2, transform_in_ga(Y1, Y2))
   transform_in_ga(a(X1, Y), a(X2, Y)) -> U5_ga(X1, Y, X2, transform_in_ga(X1, X2))
   transform_in_ga(a(X, Y1), a(X, Y2)) -> U6_ga(X, Y1, Y2, transform_in_ga(Y1, Y2))
   transform_in_ga(n(X1), n(X2)) -> U7_ga(X1, X2, transform_in_ga(X1, X2))
   U3_ga(X1, Y, X2, transform_out_ga(X1, X2)) -> transform_out_ga(o(X1, Y), o(X2, Y))
   U4_ga(X, Y1, Y2, transform_out_ga(Y1, Y2)) -> transform_out_ga(o(X, Y1), o(X, Y2))
   U5_ga(X1, Y, X2, transform_out_ga(X1, X2)) -> transform_out_ga(a(X1, Y), a(X2, Y))
   U6_ga(X, Y1, Y2, transform_out_ga(Y1, Y2)) -> transform_out_ga(a(X, Y1), a(X, Y2))
   U7_ga(X1, X2, transform_out_ga(X1, X2)) -> transform_out_ga(n(X1), n(X2))

The argument filtering Pi contains the following mapping:
transform_in_ga(x1, x2)  =  transform_in_ga(x1)

n(x1)  =  n(x1)

transform_out_ga(x1, x2)  =  transform_out_ga(x2)

a(x1, x2)  =  a(x1, x2)

o(x1, x2)  =  o(x1, x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x2, x4)

U4_ga(x1, x2, x3, x4)  =  U4_ga(x1, x4)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x2, x4)

U6_ga(x1, x2, x3, x4)  =  U6_ga(x1, x4)

U7_ga(x1, x2, x3)  =  U7_ga(x3)

CNFEQUIV_IN_GA(x1, x2)  =  CNFEQUIV_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GA(transform_out_ga(Z)) -> CNFEQUIV_IN_GA(Z)
   CNFEQUIV_IN_GA(X) -> U1_GA(transform_in_ga(X))

The TRS R consists of the following rules:

   transform_in_ga(n(n(X))) -> transform_out_ga(X)
   transform_in_ga(n(a(X, Y))) -> transform_out_ga(o(n(X), n(Y)))
   transform_in_ga(n(o(X, Y))) -> transform_out_ga(a(n(X), n(Y)))
   transform_in_ga(o(X, a(Y, Z))) -> transform_out_ga(a(o(X, Y), o(X, Z)))
   transform_in_ga(o(a(X, Y), Z)) -> transform_out_ga(a(o(X, Z), o(Y, Z)))
   transform_in_ga(o(X1, Y)) -> U3_ga(Y, transform_in_ga(X1))
   transform_in_ga(o(X, Y1)) -> U4_ga(X, transform_in_ga(Y1))
   transform_in_ga(a(X1, Y)) -> U5_ga(Y, transform_in_ga(X1))
   transform_in_ga(a(X, Y1)) -> U6_ga(X, transform_in_ga(Y1))
   transform_in_ga(n(X1)) -> U7_ga(transform_in_ga(X1))
   U3_ga(Y, transform_out_ga(X2)) -> transform_out_ga(o(X2, Y))
   U4_ga(X, transform_out_ga(Y2)) -> transform_out_ga(o(X, Y2))
   U5_ga(Y, transform_out_ga(X2)) -> transform_out_ga(a(X2, Y))
   U6_ga(X, transform_out_ga(Y2)) -> transform_out_ga(a(X, Y2))
   U7_ga(transform_out_ga(X2)) -> transform_out_ga(n(X2))

The set Q consists of the following terms:

   transform_in_ga(x0)
   U3_ga(x0, x1)
   U4_ga(x0, x1)
   U5_ga(x0, x1)
   U6_ga(x0, x1)
   U7_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   U1_GA(transform_out_ga(Z)) -> CNFEQUIV_IN_GA(Z)
   CNFEQUIV_IN_GA(X) -> U1_GA(transform_in_ga(X))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
U1_GA(x1)  =  U1_GA(x1)

transform_out_ga(x1)  =  transform_out_ga(x1)

CNFEQUIV_IN_GA(x1)  =  CNFEQUIV_IN_GA(x1)

transform_in_ga(x1)  =  x1

n(x1)  =  n(x1)

a(x1, x2)  =  a(x1, x2)

o(x1, x2)  =  o(x1, x2)

U3_ga(x1, x2)  =  U3_ga(x1, x2)

U4_ga(x1, x2)  =  U4_ga(x1, x2)

U5_ga(x1, x2)  =  U5_ga(x1, x2)

U6_ga(x1, x2)  =  U6_ga(x1, x2)

U7_ga(x1)  =  U7_ga(x1)


Recursive path order with status [RPO].
Quasi-Precedence: [n_1, U7_ga_1] > [o_2, U3_ga_2, U4_ga_2] > [a_2, U5_ga_2, U6_ga_2] > transform_out_ga_1 > CNFEQUIV_IN_GA_1 > U1_GA_1

Status: U1_GA_1: multiset status
transform_out_ga_1: multiset status
CNFEQUIV_IN_GA_1: multiset status
n_1: [1]
a_2: [2,1]
o_2: multiset status
U3_ga_2: multiset status
U4_ga_2: multiset status
U5_ga_2: [1,2]
U6_ga_2: [2,1]
U7_ga_1: [1]


The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:

   transform_in_ga(n(n(X))) -> transform_out_ga(X)
   transform_in_ga(n(a(X, Y))) -> transform_out_ga(o(n(X), n(Y)))
   transform_in_ga(n(o(X, Y))) -> transform_out_ga(a(n(X), n(Y)))
   transform_in_ga(o(X, a(Y, Z))) -> transform_out_ga(a(o(X, Y), o(X, Z)))
   transform_in_ga(o(a(X, Y), Z)) -> transform_out_ga(a(o(X, Z), o(Y, Z)))
   transform_in_ga(o(X1, Y)) -> U3_ga(Y, transform_in_ga(X1))
   transform_in_ga(o(X, Y1)) -> U4_ga(X, transform_in_ga(Y1))
   transform_in_ga(a(X1, Y)) -> U5_ga(Y, transform_in_ga(X1))
   transform_in_ga(a(X, Y1)) -> U6_ga(X, transform_in_ga(Y1))
   transform_in_ga(n(X1)) -> U7_ga(transform_in_ga(X1))
   U4_ga(X, transform_out_ga(Y2)) -> transform_out_ga(o(X, Y2))
   U3_ga(Y, transform_out_ga(X2)) -> transform_out_ga(o(X2, Y))
   U5_ga(Y, transform_out_ga(X2)) -> transform_out_ga(a(X2, Y))
   U6_ga(X, transform_out_ga(Y2)) -> transform_out_ga(a(X, Y2))
   U7_ga(transform_out_ga(X2)) -> transform_out_ga(n(X2))


----------------------------------------

(20)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   transform_in_ga(n(n(X))) -> transform_out_ga(X)
   transform_in_ga(n(a(X, Y))) -> transform_out_ga(o(n(X), n(Y)))
   transform_in_ga(n(o(X, Y))) -> transform_out_ga(a(n(X), n(Y)))
   transform_in_ga(o(X, a(Y, Z))) -> transform_out_ga(a(o(X, Y), o(X, Z)))
   transform_in_ga(o(a(X, Y), Z)) -> transform_out_ga(a(o(X, Z), o(Y, Z)))
   transform_in_ga(o(X1, Y)) -> U3_ga(Y, transform_in_ga(X1))
   transform_in_ga(o(X, Y1)) -> U4_ga(X, transform_in_ga(Y1))
   transform_in_ga(a(X1, Y)) -> U5_ga(Y, transform_in_ga(X1))
   transform_in_ga(a(X, Y1)) -> U6_ga(X, transform_in_ga(Y1))
   transform_in_ga(n(X1)) -> U7_ga(transform_in_ga(X1))
   U3_ga(Y, transform_out_ga(X2)) -> transform_out_ga(o(X2, Y))
   U4_ga(X, transform_out_ga(Y2)) -> transform_out_ga(o(X, Y2))
   U5_ga(Y, transform_out_ga(X2)) -> transform_out_ga(a(X2, Y))
   U6_ga(X, transform_out_ga(Y2)) -> transform_out_ga(a(X, Y2))
   U7_ga(transform_out_ga(X2)) -> transform_out_ga(n(X2))

The set Q consists of the following terms:

   transform_in_ga(x0)
   U3_ga(x0, x1)
   U4_ga(x0, x1)
   U5_ga(x0, x1)
   U6_ga(x0, x1)
   U7_ga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(22)
YES
