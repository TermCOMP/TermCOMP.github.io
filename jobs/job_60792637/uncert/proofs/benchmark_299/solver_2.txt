MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/IqtGk.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

a()

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) AND
        (7) PiDP
            (8) UsableRulesProof [EQUIVALENT, 0 ms]
            (9) PiDP
            (10) PiDPToQDPProof [EQUIVALENT, 0 ms]
            (11) QDP
            (12) NonTerminationLoopProof [COMPLETE, 0 ms]
            (13) NO
        (14) PiDP
            (15) UsableRulesProof [EQUIVALENT, 0 ms]
            (16) PiDP
            (17) PiDPToQDPProof [EQUIVALENT, 0 ms]
            (18) QDP
(19) PrologToPiTRSProof [SOUND, 0 ms]
(20) PiTRS
    (21) DependencyPairsProof [EQUIVALENT, 0 ms]
    (22) PiDP
    (23) DependencyGraphProof [EQUIVALENT, 0 ms]
    (24) AND
        (25) PiDP
            (26) UsableRulesProof [EQUIVALENT, 0 ms]
            (27) PiDP
            (28) PiDPToQDPProof [EQUIVALENT, 0 ms]
            (29) QDP
            (30) NonTerminationLoopProof [COMPLETE, 0 ms]
            (31) NO
        (32) PiDP
            (33) UsableRulesProof [EQUIVALENT, 0 ms]
            (34) PiDP
            (35) PiDPToQDPProof [EQUIVALENT, 0 ms]
            (36) QDP
(37) PrologToTRSTransformerProof [SOUND, 0 ms]
(38) QTRS
    (39) QTRSRRRProof [EQUIVALENT, 23 ms]
    (40) QTRS
    (41) QTRSRRRProof [EQUIVALENT, 3 ms]
    (42) QTRS
    (43) Overlay + Local Confluence [EQUIVALENT, 0 ms]
    (44) QTRS
    (45) DependencyPairsProof [EQUIVALENT, 0 ms]
    (46) QDP
    (47) DependencyGraphProof [EQUIVALENT, 0 ms]
    (48) AND
        (49) QDP
            (50) UsableRulesProof [EQUIVALENT, 0 ms]
            (51) QDP
            (52) QReductionProof [EQUIVALENT, 0 ms]
            (53) QDP
        (54) QDP
            (55) UsableRulesProof [EQUIVALENT, 0 ms]
            (56) QDP
            (57) QReductionProof [EQUIVALENT, 0 ms]
            (58) QDP
            (59) NonTerminationLoopProof [COMPLETE, 0 ms]
            (60) NO
(61) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(62) AND
    (63) IRSwT
        (64) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (65) IRSwT
        (66) IntTRSCompressionProof [EQUIVALENT, 9 ms]
        (67) IRSwT
        (68) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (69) IRSwT
        (70) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
        (71) IRSwT
        (72) FilterProof [EQUIVALENT, 0 ms]
        (73) IntTRS
        (74) IntTRSPeriodicNontermProof [COMPLETE, 2 ms]
        (75) NO
    (76) IRSwT
        (77) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
        (78) IRSwT
        (79) IntTRSCompressionProof [EQUIVALENT, 1 ms]
        (80) IRSwT
        (81) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
        (82) IRSwT
        (83) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
        (84) IRSwT
        (85) FilterProof [EQUIVALENT, 0 ms]
        (86) IntTRS
        (87) IntTRSNonPeriodicNontermProof [COMPLETE, 1 ms]
        (88) NO
(89) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(90) TRIPLES
    (91) TriplesToPiDPProof [SOUND, 0 ms]
    (92) PiDP
    (93) DependencyGraphProof [EQUIVALENT, 0 ms]
    (94) AND
        (95) PiDP
            (96) PiDPToQDPProof [EQUIVALENT, 0 ms]
            (97) QDP
            (98) NonTerminationLoopProof [COMPLETE, 0 ms]
            (99) NO
        (100) PiDP
            (101) PiDPToQDPProof [EQUIVALENT, 0 ms]
            (102) QDP


----------------------------------------

(0)
Obligation:
Clauses:

a :- b.
a :- e.
b :- c.
c :- d.
d :- b.
e :- f.
f :- g.
g :- e.


Query: a()
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   a_in_ -> U1_(b_in_)
   b_in_ -> U3_(c_in_)
   c_in_ -> U4_(d_in_)
   d_in_ -> U5_(b_in_)
   U5_(b_out_) -> d_out_
   U4_(d_out_) -> c_out_
   U3_(c_out_) -> b_out_
   U1_(b_out_) -> a_out_
   a_in_ -> U2_(e_in_)
   e_in_ -> U6_(f_in_)
   f_in_ -> U7_(g_in_)
   g_in_ -> U8_(e_in_)
   U8_(e_out_) -> g_out_
   U7_(g_out_) -> f_out_
   U6_(f_out_) -> e_out_
   U2_(e_out_) -> a_out_

Pi is empty.



Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   a_in_ -> U1_(b_in_)
   b_in_ -> U3_(c_in_)
   c_in_ -> U4_(d_in_)
   d_in_ -> U5_(b_in_)
   U5_(b_out_) -> d_out_
   U4_(d_out_) -> c_out_
   U3_(c_out_) -> b_out_
   U1_(b_out_) -> a_out_
   a_in_ -> U2_(e_in_)
   e_in_ -> U6_(f_in_)
   f_in_ -> U7_(g_in_)
   g_in_ -> U8_(e_in_)
   U8_(e_out_) -> g_out_
   U7_(g_out_) -> f_out_
   U6_(f_out_) -> e_out_
   U2_(e_out_) -> a_out_

Pi is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   A_IN_ -> U1_^1(b_in_)
   A_IN_ -> B_IN_
   B_IN_ -> U3_^1(c_in_)
   B_IN_ -> C_IN_
   C_IN_ -> U4_^1(d_in_)
   C_IN_ -> D_IN_
   D_IN_ -> U5_^1(b_in_)
   D_IN_ -> B_IN_
   A_IN_ -> U2_^1(e_in_)
   A_IN_ -> E_IN_
   E_IN_ -> U6_^1(f_in_)
   E_IN_ -> F_IN_
   F_IN_ -> U7_^1(g_in_)
   F_IN_ -> G_IN_
   G_IN_ -> U8_^1(e_in_)
   G_IN_ -> E_IN_

The TRS R consists of the following rules:

   a_in_ -> U1_(b_in_)
   b_in_ -> U3_(c_in_)
   c_in_ -> U4_(d_in_)
   d_in_ -> U5_(b_in_)
   U5_(b_out_) -> d_out_
   U4_(d_out_) -> c_out_
   U3_(c_out_) -> b_out_
   U1_(b_out_) -> a_out_
   a_in_ -> U2_(e_in_)
   e_in_ -> U6_(f_in_)
   f_in_ -> U7_(g_in_)
   g_in_ -> U8_(e_in_)
   U8_(e_out_) -> g_out_
   U7_(g_out_) -> f_out_
   U6_(f_out_) -> e_out_
   U2_(e_out_) -> a_out_

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   A_IN_ -> U1_^1(b_in_)
   A_IN_ -> B_IN_
   B_IN_ -> U3_^1(c_in_)
   B_IN_ -> C_IN_
   C_IN_ -> U4_^1(d_in_)
   C_IN_ -> D_IN_
   D_IN_ -> U5_^1(b_in_)
   D_IN_ -> B_IN_
   A_IN_ -> U2_^1(e_in_)
   A_IN_ -> E_IN_
   E_IN_ -> U6_^1(f_in_)
   E_IN_ -> F_IN_
   F_IN_ -> U7_^1(g_in_)
   F_IN_ -> G_IN_
   G_IN_ -> U8_^1(e_in_)
   G_IN_ -> E_IN_

The TRS R consists of the following rules:

   a_in_ -> U1_(b_in_)
   b_in_ -> U3_(c_in_)
   c_in_ -> U4_(d_in_)
   d_in_ -> U5_(b_in_)
   U5_(b_out_) -> d_out_
   U4_(d_out_) -> c_out_
   U3_(c_out_) -> b_out_
   U1_(b_out_) -> a_out_
   a_in_ -> U2_(e_in_)
   e_in_ -> U6_(f_in_)
   f_in_ -> U7_(g_in_)
   g_in_ -> U8_(e_in_)
   U8_(e_out_) -> g_out_
   U7_(g_out_) -> f_out_
   U6_(f_out_) -> e_out_
   U2_(e_out_) -> a_out_

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 10 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   E_IN_ -> F_IN_
   F_IN_ -> G_IN_
   G_IN_ -> E_IN_

The TRS R consists of the following rules:

   a_in_ -> U1_(b_in_)
   b_in_ -> U3_(c_in_)
   c_in_ -> U4_(d_in_)
   d_in_ -> U5_(b_in_)
   U5_(b_out_) -> d_out_
   U4_(d_out_) -> c_out_
   U3_(c_out_) -> b_out_
   U1_(b_out_) -> a_out_
   a_in_ -> U2_(e_in_)
   e_in_ -> U6_(f_in_)
   f_in_ -> U7_(g_in_)
   g_in_ -> U8_(e_in_)
   U8_(e_out_) -> g_out_
   U7_(g_out_) -> f_out_
   U6_(f_out_) -> e_out_
   U2_(e_out_) -> a_out_

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   E_IN_ -> F_IN_
   F_IN_ -> G_IN_
   G_IN_ -> E_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   E_IN_ -> F_IN_
   F_IN_ -> G_IN_
   G_IN_ -> E_IN_

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F_IN_ evaluates to  t =F_IN_

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

F_IN_ -> G_IN_
with rule F_IN_ -> G_IN_ at position [] and matcher [ ]

G_IN_ -> E_IN_
with rule G_IN_ -> E_IN_ at position [] and matcher [ ]

E_IN_ -> F_IN_
with rule E_IN_ -> F_IN_

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(13)
NO

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   B_IN_ -> C_IN_
   C_IN_ -> D_IN_
   D_IN_ -> B_IN_

The TRS R consists of the following rules:

   a_in_ -> U1_(b_in_)
   b_in_ -> U3_(c_in_)
   c_in_ -> U4_(d_in_)
   d_in_ -> U5_(b_in_)
   U5_(b_out_) -> d_out_
   U4_(d_out_) -> c_out_
   U3_(c_out_) -> b_out_
   U1_(b_out_) -> a_out_
   a_in_ -> U2_(e_in_)
   e_in_ -> U6_(f_in_)
   f_in_ -> U7_(g_in_)
   g_in_ -> U8_(e_in_)
   U8_(e_out_) -> g_out_
   U7_(g_out_) -> f_out_
   U6_(f_out_) -> e_out_
   U2_(e_out_) -> a_out_

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   B_IN_ -> C_IN_
   C_IN_ -> D_IN_
   D_IN_ -> B_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B_IN_ -> C_IN_
   C_IN_ -> D_IN_
   D_IN_ -> B_IN_

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   a_in_ -> U1_(b_in_)
   b_in_ -> U3_(c_in_)
   c_in_ -> U4_(d_in_)
   d_in_ -> U5_(b_in_)
   U5_(b_out_) -> d_out_
   U4_(d_out_) -> c_out_
   U3_(c_out_) -> b_out_
   U1_(b_out_) -> a_out_
   a_in_ -> U2_(e_in_)
   e_in_ -> U6_(f_in_)
   f_in_ -> U7_(g_in_)
   g_in_ -> U8_(e_in_)
   U8_(e_out_) -> g_out_
   U7_(g_out_) -> f_out_
   U6_(f_out_) -> e_out_
   U2_(e_out_) -> a_out_

Pi is empty.



Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(20)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   a_in_ -> U1_(b_in_)
   b_in_ -> U3_(c_in_)
   c_in_ -> U4_(d_in_)
   d_in_ -> U5_(b_in_)
   U5_(b_out_) -> d_out_
   U4_(d_out_) -> c_out_
   U3_(c_out_) -> b_out_
   U1_(b_out_) -> a_out_
   a_in_ -> U2_(e_in_)
   e_in_ -> U6_(f_in_)
   f_in_ -> U7_(g_in_)
   g_in_ -> U8_(e_in_)
   U8_(e_out_) -> g_out_
   U7_(g_out_) -> f_out_
   U6_(f_out_) -> e_out_
   U2_(e_out_) -> a_out_

Pi is empty.

----------------------------------------

(21) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   A_IN_ -> U1_^1(b_in_)
   A_IN_ -> B_IN_
   B_IN_ -> U3_^1(c_in_)
   B_IN_ -> C_IN_
   C_IN_ -> U4_^1(d_in_)
   C_IN_ -> D_IN_
   D_IN_ -> U5_^1(b_in_)
   D_IN_ -> B_IN_
   A_IN_ -> U2_^1(e_in_)
   A_IN_ -> E_IN_
   E_IN_ -> U6_^1(f_in_)
   E_IN_ -> F_IN_
   F_IN_ -> U7_^1(g_in_)
   F_IN_ -> G_IN_
   G_IN_ -> U8_^1(e_in_)
   G_IN_ -> E_IN_

The TRS R consists of the following rules:

   a_in_ -> U1_(b_in_)
   b_in_ -> U3_(c_in_)
   c_in_ -> U4_(d_in_)
   d_in_ -> U5_(b_in_)
   U5_(b_out_) -> d_out_
   U4_(d_out_) -> c_out_
   U3_(c_out_) -> b_out_
   U1_(b_out_) -> a_out_
   a_in_ -> U2_(e_in_)
   e_in_ -> U6_(f_in_)
   f_in_ -> U7_(g_in_)
   g_in_ -> U8_(e_in_)
   U8_(e_out_) -> g_out_
   U7_(g_out_) -> f_out_
   U6_(f_out_) -> e_out_
   U2_(e_out_) -> a_out_

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(22)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   A_IN_ -> U1_^1(b_in_)
   A_IN_ -> B_IN_
   B_IN_ -> U3_^1(c_in_)
   B_IN_ -> C_IN_
   C_IN_ -> U4_^1(d_in_)
   C_IN_ -> D_IN_
   D_IN_ -> U5_^1(b_in_)
   D_IN_ -> B_IN_
   A_IN_ -> U2_^1(e_in_)
   A_IN_ -> E_IN_
   E_IN_ -> U6_^1(f_in_)
   E_IN_ -> F_IN_
   F_IN_ -> U7_^1(g_in_)
   F_IN_ -> G_IN_
   G_IN_ -> U8_^1(e_in_)
   G_IN_ -> E_IN_

The TRS R consists of the following rules:

   a_in_ -> U1_(b_in_)
   b_in_ -> U3_(c_in_)
   c_in_ -> U4_(d_in_)
   d_in_ -> U5_(b_in_)
   U5_(b_out_) -> d_out_
   U4_(d_out_) -> c_out_
   U3_(c_out_) -> b_out_
   U1_(b_out_) -> a_out_
   a_in_ -> U2_(e_in_)
   e_in_ -> U6_(f_in_)
   f_in_ -> U7_(g_in_)
   g_in_ -> U8_(e_in_)
   U8_(e_out_) -> g_out_
   U7_(g_out_) -> f_out_
   U6_(f_out_) -> e_out_
   U2_(e_out_) -> a_out_

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(23) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 10 less nodes.
----------------------------------------

(24)
Complex Obligation (AND)

----------------------------------------

(25)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   E_IN_ -> F_IN_
   F_IN_ -> G_IN_
   G_IN_ -> E_IN_

The TRS R consists of the following rules:

   a_in_ -> U1_(b_in_)
   b_in_ -> U3_(c_in_)
   c_in_ -> U4_(d_in_)
   d_in_ -> U5_(b_in_)
   U5_(b_out_) -> d_out_
   U4_(d_out_) -> c_out_
   U3_(c_out_) -> b_out_
   U1_(b_out_) -> a_out_
   a_in_ -> U2_(e_in_)
   e_in_ -> U6_(f_in_)
   f_in_ -> U7_(g_in_)
   g_in_ -> U8_(e_in_)
   U8_(e_out_) -> g_out_
   U7_(g_out_) -> f_out_
   U6_(f_out_) -> e_out_
   U2_(e_out_) -> a_out_

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(27)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   E_IN_ -> F_IN_
   F_IN_ -> G_IN_
   G_IN_ -> E_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(28) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   E_IN_ -> F_IN_
   F_IN_ -> G_IN_
   G_IN_ -> E_IN_

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(30) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = F_IN_ evaluates to  t =F_IN_

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

F_IN_ -> G_IN_
with rule F_IN_ -> G_IN_ at position [] and matcher [ ]

G_IN_ -> E_IN_
with rule G_IN_ -> E_IN_ at position [] and matcher [ ]

E_IN_ -> F_IN_
with rule E_IN_ -> F_IN_

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(31)
NO

----------------------------------------

(32)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   B_IN_ -> C_IN_
   C_IN_ -> D_IN_
   D_IN_ -> B_IN_

The TRS R consists of the following rules:

   a_in_ -> U1_(b_in_)
   b_in_ -> U3_(c_in_)
   c_in_ -> U4_(d_in_)
   d_in_ -> U5_(b_in_)
   U5_(b_out_) -> d_out_
   U4_(d_out_) -> c_out_
   U3_(c_out_) -> b_out_
   U1_(b_out_) -> a_out_
   a_in_ -> U2_(e_in_)
   e_in_ -> U6_(f_in_)
   f_in_ -> U7_(g_in_)
   g_in_ -> U8_(e_in_)
   U8_(e_out_) -> g_out_
   U7_(g_out_) -> f_out_
   U6_(f_out_) -> e_out_
   U2_(e_out_) -> a_out_

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(33) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(34)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   B_IN_ -> C_IN_
   C_IN_ -> D_IN_
   D_IN_ -> B_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(35) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   B_IN_ -> C_IN_
   C_IN_ -> D_IN_
   D_IN_ -> B_IN_

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(37) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(a)",
                "(b)"
            ],
            [
                "(a)",
                "(e)"
            ],
            [
                "(b)",
                "(c)"
            ],
            [
                "(c)",
                "(d)"
            ],
            [
                "(d)",
                "(b)"
            ],
            [
                "(e)",
                "(f)"
            ],
            [
                "(f)",
                "(g)"
            ],
            [
                "(g)",
                "(e)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "99": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(a)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "110": {
                "goal": [{
                    "clause": 6,
                    "scope": 6,
                    "term": "(f)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "100": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(b)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "111": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(g)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(a)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "101": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(b)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "112": {
                "goal": [{
                    "clause": 7,
                    "scope": 7,
                    "term": "(g)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "102": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(c)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "113": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(e)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(a)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(a)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "103": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(c)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "104": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(d)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "105": {
                "goal": [{
                    "clause": 4,
                    "scope": 4,
                    "term": "(d)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "106": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(b)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "107": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(e)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "108": {
                "goal": [{
                    "clause": 5,
                    "scope": 5,
                    "term": "(e)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "109": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(f)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "98": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(a)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 98,
                "label": "PARALLEL"
            },
            {
                "from": 4,
                "to": 99,
                "label": "PARALLEL"
            },
            {
                "from": 98,
                "to": 100,
                "label": "ONLY EVAL with clause\na :- b.\nand substitution"
            },
            {
                "from": 99,
                "to": 107,
                "label": "ONLY EVAL with clause\na :- e.\nand substitution"
            },
            {
                "from": 100,
                "to": 101,
                "label": "CASE"
            },
            {
                "from": 101,
                "to": 102,
                "label": "ONLY EVAL with clause\nb :- c.\nand substitution"
            },
            {
                "from": 102,
                "to": 103,
                "label": "CASE"
            },
            {
                "from": 103,
                "to": 104,
                "label": "ONLY EVAL with clause\nc :- d.\nand substitution"
            },
            {
                "from": 104,
                "to": 105,
                "label": "CASE"
            },
            {
                "from": 105,
                "to": 106,
                "label": "ONLY EVAL with clause\nd :- b.\nand substitution"
            },
            {
                "from": 106,
                "to": 100,
                "label": "INSTANCE"
            },
            {
                "from": 107,
                "to": 108,
                "label": "CASE"
            },
            {
                "from": 108,
                "to": 109,
                "label": "ONLY EVAL with clause\ne :- f.\nand substitution"
            },
            {
                "from": 109,
                "to": 110,
                "label": "CASE"
            },
            {
                "from": 110,
                "to": 111,
                "label": "ONLY EVAL with clause\nf :- g.\nand substitution"
            },
            {
                "from": 111,
                "to": 112,
                "label": "CASE"
            },
            {
                "from": 112,
                "to": 113,
                "label": "ONLY EVAL with clause\ng :- e.\nand substitution"
            },
            {
                "from": 113,
                "to": 107,
                "label": "INSTANCE"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(38)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in -> U1(f100_in)
   U1(f100_out1) -> f2_out1
   f2_in -> U2(f107_in)
   U2(f107_out1) -> f2_out1
   f100_in -> U3(f100_in)
   U3(f100_out1) -> f100_out1
   f107_in -> U4(f107_in)
   U4(f107_out1) -> f107_out1

Q is empty.

----------------------------------------

(39) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1)) = 2 + 2*x_1
   POL(U2(x_1)) = 2*x_1
   POL(U3(x_1)) = 2*x_1
   POL(U4(x_1)) = 2*x_1
   POL(f100_in) = 0
   POL(f100_out1) = 1
   POL(f107_in) = 0
   POL(f107_out1) = 1
   POL(f2_in) = 2
   POL(f2_out1) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U1(f100_out1) -> f2_out1
   f2_in -> U2(f107_in)
   U2(f107_out1) -> f2_out1
   U3(f100_out1) -> f100_out1
   U4(f107_out1) -> f107_out1




----------------------------------------

(40)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in -> U1(f100_in)
   f100_in -> U3(f100_in)
   f107_in -> U4(f107_in)

Q is empty.

----------------------------------------

(41) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1)) = 1 + 2*x_1
   POL(U3(x_1)) = 2*x_1
   POL(U4(x_1)) = x_1
   POL(f100_in) = 0
   POL(f107_in) = 0
   POL(f2_in) = 2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f2_in -> U1(f100_in)




----------------------------------------

(42)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f100_in -> U3(f100_in)
   f107_in -> U4(f107_in)

Q is empty.

----------------------------------------

(43) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(44)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f100_in -> U3(f100_in)
   f107_in -> U4(f107_in)

The set Q consists of the following terms:

   f100_in
   f107_in


----------------------------------------

(45) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F100_IN -> F100_IN
   F107_IN -> F107_IN

The TRS R consists of the following rules:

   f100_in -> U3(f100_in)
   f107_in -> U4(f107_in)

The set Q consists of the following terms:

   f100_in
   f107_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(47) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(48)
Complex Obligation (AND)

----------------------------------------

(49)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F107_IN -> F107_IN

The TRS R consists of the following rules:

   f100_in -> U3(f100_in)
   f107_in -> U4(f107_in)

The set Q consists of the following terms:

   f100_in
   f107_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(50) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F107_IN -> F107_IN

R is empty.
The set Q consists of the following terms:

   f100_in
   f107_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(52) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f100_in
   f107_in


----------------------------------------

(53)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F107_IN -> F107_IN

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F100_IN -> F100_IN

The TRS R consists of the following rules:

   f100_in -> U3(f100_in)
   f107_in -> U4(f107_in)

The set Q consists of the following terms:

   f100_in
   f107_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(55) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F100_IN -> F100_IN

R is empty.
The set Q consists of the following terms:

   f100_in
   f107_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(57) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f100_in
   f107_in


----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F100_IN -> F100_IN

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(59) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = F100_IN evaluates to  t =F100_IN

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from F100_IN to F100_IN.




----------------------------------------

(60)
NO

----------------------------------------

(61) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(a)",
                "(b)"
            ],
            [
                "(a)",
                "(e)"
            ],
            [
                "(b)",
                "(c)"
            ],
            [
                "(c)",
                "(d)"
            ],
            [
                "(d)",
                "(b)"
            ],
            [
                "(e)",
                "(f)"
            ],
            [
                "(f)",
                "(g)"
            ],
            [
                "(g)",
                "(e)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "45": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(b)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "69": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(b)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(a)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(a)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(a)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "70": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(c)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "92": {
                "goal": [{
                    "clause": 5,
                    "scope": 5,
                    "term": "(e)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "71": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(c)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "93": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(f)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "72": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(d)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "94": {
                "goal": [{
                    "clause": 6,
                    "scope": 6,
                    "term": "(f)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "73": {
                "goal": [{
                    "clause": 4,
                    "scope": 4,
                    "term": "(d)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "95": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(g)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "74": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(b)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "85": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(e)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "96": {
                "goal": [{
                    "clause": 7,
                    "scope": 7,
                    "term": "(g)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "42": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(a)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "97": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(e)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "43": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(a)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 3,
                "label": "CASE"
            },
            {
                "from": 3,
                "to": 42,
                "label": "PARALLEL"
            },
            {
                "from": 3,
                "to": 43,
                "label": "PARALLEL"
            },
            {
                "from": 42,
                "to": 45,
                "label": "ONLY EVAL with clause\na :- b.\nand substitution"
            },
            {
                "from": 43,
                "to": 85,
                "label": "ONLY EVAL with clause\na :- e.\nand substitution"
            },
            {
                "from": 45,
                "to": 69,
                "label": "CASE"
            },
            {
                "from": 69,
                "to": 70,
                "label": "ONLY EVAL with clause\nb :- c.\nand substitution"
            },
            {
                "from": 70,
                "to": 71,
                "label": "CASE"
            },
            {
                "from": 71,
                "to": 72,
                "label": "ONLY EVAL with clause\nc :- d.\nand substitution"
            },
            {
                "from": 72,
                "to": 73,
                "label": "CASE"
            },
            {
                "from": 73,
                "to": 74,
                "label": "ONLY EVAL with clause\nd :- b.\nand substitution"
            },
            {
                "from": 74,
                "to": 45,
                "label": "INSTANCE"
            },
            {
                "from": 85,
                "to": 92,
                "label": "CASE"
            },
            {
                "from": 92,
                "to": 93,
                "label": "ONLY EVAL with clause\ne :- f.\nand substitution"
            },
            {
                "from": 93,
                "to": 94,
                "label": "CASE"
            },
            {
                "from": 94,
                "to": 95,
                "label": "ONLY EVAL with clause\nf :- g.\nand substitution"
            },
            {
                "from": 95,
                "to": 96,
                "label": "CASE"
            },
            {
                "from": 96,
                "to": 97,
                "label": "ONLY EVAL with clause\ng :- e.\nand substitution"
            },
            {
                "from": 97,
                "to": 85,
                "label": "INSTANCE"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(62)
Complex Obligation (AND)

----------------------------------------

(63)
Obligation:
Rules:
f92_in -> f93_in :|: TRUE
f93_out -> f92_out :|: TRUE
f93_in -> f94_in :|: TRUE
f94_out -> f93_out :|: TRUE
f96_in -> f97_in :|: TRUE
f97_out -> f96_out :|: TRUE
f97_in -> f85_in :|: TRUE
f85_out -> f97_out :|: TRUE
f95_in -> f96_in :|: TRUE
f96_out -> f95_out :|: TRUE
f94_in -> f95_in :|: TRUE
f95_out -> f94_out :|: TRUE
f92_out -> f85_out :|: TRUE
f85_in -> f92_in :|: TRUE
f3_out -> f1_out :|: TRUE
f1_in -> f3_in :|: TRUE
f3_in -> f43_in :|: TRUE
f42_out -> f3_out :|: TRUE
f43_out -> f3_out :|: TRUE
f3_in -> f42_in :|: TRUE
f43_in -> f85_in :|: TRUE
f85_out -> f43_out :|: TRUE
Start term: f1_in

----------------------------------------

(64) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f92_in -> f93_in :|: TRUE
f93_in -> f94_in :|: TRUE
f96_in -> f97_in :|: TRUE
f97_in -> f85_in :|: TRUE
f95_in -> f96_in :|: TRUE
f94_in -> f95_in :|: TRUE
f85_in -> f92_in :|: TRUE


----------------------------------------

(65)
Obligation:
Rules:
f92_in -> f93_in :|: TRUE
f93_in -> f94_in :|: TRUE
f96_in -> f97_in :|: TRUE
f97_in -> f85_in :|: TRUE
f95_in -> f96_in :|: TRUE
f94_in -> f95_in :|: TRUE
f85_in -> f92_in :|: TRUE

----------------------------------------

(66) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(67)
Obligation:
Rules:
f92_in -> f92_in :|: TRUE

----------------------------------------

(68) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(69)
Obligation:
Rules:
f92_in -> f92_in :|: TRUE

----------------------------------------

(70) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f92_in -> f92_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(71)
Obligation:

Termination digraph:
Nodes:
(1) f92_in -> f92_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(72) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f92_in()
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(73)
Obligation:
Rules:
f92_in -> f92_in :|: TRUE

----------------------------------------

(74) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc) -> f(1) :|: pc = 1 && TRUE
Witness term starting non-terminating reduction: f(1)
----------------------------------------

(75)
NO

----------------------------------------

(76)
Obligation:
Rules:
f73_in -> f74_in :|: TRUE
f74_out -> f73_out :|: TRUE
f45_out -> f74_out :|: TRUE
f74_in -> f45_in :|: TRUE
f72_in -> f73_in :|: TRUE
f73_out -> f72_out :|: TRUE
f45_in -> f69_in :|: TRUE
f69_out -> f45_out :|: TRUE
f71_out -> f70_out :|: TRUE
f70_in -> f71_in :|: TRUE
f70_out -> f69_out :|: TRUE
f69_in -> f70_in :|: TRUE
f72_out -> f71_out :|: TRUE
f71_in -> f72_in :|: TRUE
f3_out -> f1_out :|: TRUE
f1_in -> f3_in :|: TRUE
f3_in -> f43_in :|: TRUE
f42_out -> f3_out :|: TRUE
f43_out -> f3_out :|: TRUE
f3_in -> f42_in :|: TRUE
f45_out -> f42_out :|: TRUE
f42_in -> f45_in :|: TRUE
Start term: f1_in

----------------------------------------

(77) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f73_in -> f74_in :|: TRUE
f74_in -> f45_in :|: TRUE
f72_in -> f73_in :|: TRUE
f45_in -> f69_in :|: TRUE
f70_in -> f71_in :|: TRUE
f69_in -> f70_in :|: TRUE
f71_in -> f72_in :|: TRUE


----------------------------------------

(78)
Obligation:
Rules:
f73_in -> f74_in :|: TRUE
f74_in -> f45_in :|: TRUE
f72_in -> f73_in :|: TRUE
f45_in -> f69_in :|: TRUE
f70_in -> f71_in :|: TRUE
f69_in -> f70_in :|: TRUE
f71_in -> f72_in :|: TRUE

----------------------------------------

(79) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(80)
Obligation:
Rules:
f72_in -> f72_in :|: TRUE

----------------------------------------

(81) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(82)
Obligation:
Rules:
f72_in -> f72_in :|: TRUE

----------------------------------------

(83) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f72_in -> f72_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(84)
Obligation:

Termination digraph:
Nodes:
(1) f72_in -> f72_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(85) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f72_in()
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(86)
Obligation:
Rules:
f72_in -> f72_in :|: TRUE

----------------------------------------

(87) IntTRSNonPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc) -> f(1) :|: pc = 1 && TRUE
Proved unsatisfiability of the following formula, indicating that the system is never left after entering:
((run2_0 = ((1 * 1)) and (((run1_0 * 1)) = ((1 * 1)) and T)) and !(((run2_0 * 1)) = ((1 * 1)) and T))
Proved satisfiability of the following formula, indicating that the system is entered at least once:
(run2_0 = ((1 * 1)) and (((run1_0 * 1)) = ((1 * 1)) and T))

----------------------------------------

(88)
NO

----------------------------------------

(89) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 25,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(a)",
                "(b)"
            ],
            [
                "(a)",
                "(e)"
            ],
            [
                "(b)",
                "(c)"
            ],
            [
                "(c)",
                "(d)"
            ],
            [
                "(d)",
                "(b)"
            ],
            [
                "(e)",
                "(f)"
            ],
            [
                "(f)",
                "(g)"
            ],
            [
                "(g)",
                "(e)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "44": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(b)"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(a)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "46": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(b)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(a)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "47": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(a)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "26": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(a)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(a)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "48": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(c)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(b)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(a)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "140": {
                "goal": [{
                    "clause": 6,
                    "scope": 7,
                    "term": "(f)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "141": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(g)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "120": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(a)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "142": {
                "goal": [{
                    "clause": 7,
                    "scope": 8,
                    "term": "(g)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "121": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(e)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "143": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(e)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "114": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(c)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "115": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(d)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "116": {
                "goal": [{
                    "clause": 4,
                    "scope": 4,
                    "term": "(d)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "138": {
                "goal": [{
                    "clause": 5,
                    "scope": 6,
                    "term": "(e)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "117": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(b)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "139": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(f)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "118": {
                "goal": [{
                    "clause": 2,
                    "scope": 5,
                    "term": "(b)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "119": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(c)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 25,
                "to": 26,
                "label": "CASE"
            },
            {
                "from": 26,
                "to": 27,
                "label": "ONLY EVAL with clause\na :- b.\nand substitution"
            },
            {
                "from": 27,
                "to": 44,
                "label": "CASE"
            },
            {
                "from": 44,
                "to": 46,
                "label": "PARALLEL"
            },
            {
                "from": 44,
                "to": 47,
                "label": "PARALLEL"
            },
            {
                "from": 46,
                "to": 48,
                "label": "ONLY EVAL with clause\nb :- c.\nand substitution"
            },
            {
                "from": 47,
                "to": 120,
                "label": "FAILURE"
            },
            {
                "from": 48,
                "to": 114,
                "label": "CASE"
            },
            {
                "from": 114,
                "to": 115,
                "label": "ONLY EVAL with clause\nc :- d.\nand substitution"
            },
            {
                "from": 115,
                "to": 116,
                "label": "CASE"
            },
            {
                "from": 116,
                "to": 117,
                "label": "ONLY EVAL with clause\nd :- b.\nand substitution"
            },
            {
                "from": 117,
                "to": 118,
                "label": "CASE"
            },
            {
                "from": 118,
                "to": 119,
                "label": "ONLY EVAL with clause\nb :- c.\nand substitution"
            },
            {
                "from": 119,
                "to": 48,
                "label": "INSTANCE"
            },
            {
                "from": 120,
                "to": 121,
                "label": "ONLY EVAL with clause\na :- e.\nand substitution"
            },
            {
                "from": 121,
                "to": 138,
                "label": "CASE"
            },
            {
                "from": 138,
                "to": 139,
                "label": "ONLY EVAL with clause\ne :- f.\nand substitution"
            },
            {
                "from": 139,
                "to": 140,
                "label": "CASE"
            },
            {
                "from": 140,
                "to": 141,
                "label": "ONLY EVAL with clause\nf :- g.\nand substitution"
            },
            {
                "from": 141,
                "to": 142,
                "label": "CASE"
            },
            {
                "from": 142,
                "to": 143,
                "label": "ONLY EVAL with clause\ng :- e.\nand substitution"
            },
            {
                "from": 143,
                "to": 121,
                "label": "INSTANCE"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(90)
Obligation:
Triples:

cA :- cA.
eB :- eB.
aC :- cA.
aC :- eB.

Clauses:

ccA :- ccA.
ecB :- ecB.

Afs:

aC  =  aC


----------------------------------------

(91) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   AC_IN_ -> U3_^1(cA_in_)
   AC_IN_ -> CA_IN_
   CA_IN_ -> U1_^1(cA_in_)
   CA_IN_ -> CA_IN_
   AC_IN_ -> U4_^1(eB_in_)
   AC_IN_ -> EB_IN_
   EB_IN_ -> U2_^1(eB_in_)
   EB_IN_ -> EB_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(92)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   AC_IN_ -> U3_^1(cA_in_)
   AC_IN_ -> CA_IN_
   CA_IN_ -> U1_^1(cA_in_)
   CA_IN_ -> CA_IN_
   AC_IN_ -> U4_^1(eB_in_)
   AC_IN_ -> EB_IN_
   EB_IN_ -> U2_^1(eB_in_)
   EB_IN_ -> EB_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(93) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(94)
Complex Obligation (AND)

----------------------------------------

(95)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   EB_IN_ -> EB_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(96) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(97)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EB_IN_ -> EB_IN_

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(98) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = EB_IN_ evaluates to  t =EB_IN_

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from EB_IN_ to EB_IN_.




----------------------------------------

(99)
NO

----------------------------------------

(100)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   CA_IN_ -> CA_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(101) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(102)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   CA_IN_ -> CA_IN_

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.