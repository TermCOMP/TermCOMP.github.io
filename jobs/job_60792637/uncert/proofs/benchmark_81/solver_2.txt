YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/pbqxD.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

transpose(g,g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES


----------------------------------------

(0)
Obligation:
Clauses:

transpose(A, B) :- transpose_aux(A, [], B).
transpose_aux(.(R, Rs), X1, .(C, Cs)) :- ','(row2col(R, .(C, Cs), Cols1, Accm), transpose_aux(Rs, Accm, Cols1)).
transpose_aux([], X, X).
row2col(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As)) :- row2col(Xs, Cols, Cols1, As).
row2col([], [], [], []).


Query: transpose(g,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

transpose_in_2: (b,b)

transpose_aux_in_3: (b,b,b)

row2col_in_4: (b,b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   transpose_in_gg(A, B) -> U1_gg(A, B, transpose_aux_in_ggg(A, [], B))
   transpose_aux_in_ggg(.(R, Rs), X1, .(C, Cs)) -> U2_ggg(R, Rs, X1, C, Cs, row2col_in_ggaa(R, .(C, Cs), Cols1, Accm))
   row2col_in_ggaa(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As)) -> U4_ggaa(X, Xs, Ys, Cols, Cols1, As, row2col_in_ggaa(Xs, Cols, Cols1, As))
   row2col_in_ggaa([], [], [], []) -> row2col_out_ggaa([], [], [], [])
   U4_ggaa(X, Xs, Ys, Cols, Cols1, As, row2col_out_ggaa(Xs, Cols, Cols1, As)) -> row2col_out_ggaa(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As))
   U2_ggg(R, Rs, X1, C, Cs, row2col_out_ggaa(R, .(C, Cs), Cols1, Accm)) -> U3_ggg(R, Rs, X1, C, Cs, transpose_aux_in_ggg(Rs, Accm, Cols1))
   transpose_aux_in_ggg([], X, X) -> transpose_aux_out_ggg([], X, X)
   U3_ggg(R, Rs, X1, C, Cs, transpose_aux_out_ggg(Rs, Accm, Cols1)) -> transpose_aux_out_ggg(.(R, Rs), X1, .(C, Cs))
   U1_gg(A, B, transpose_aux_out_ggg(A, [], B)) -> transpose_out_gg(A, B)

The argument filtering Pi contains the following mapping:
transpose_in_gg(x1, x2)  =  transpose_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

transpose_aux_in_ggg(x1, x2, x3)  =  transpose_aux_in_ggg(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U2_ggg(x1, x2, x3, x4, x5, x6)  =  U2_ggg(x1, x2, x3, x4, x5, x6)

row2col_in_ggaa(x1, x2, x3, x4)  =  row2col_in_ggaa(x1, x2)

U4_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U4_ggaa(x1, x2, x3, x4, x7)

[]  =  []

row2col_out_ggaa(x1, x2, x3, x4)  =  row2col_out_ggaa(x1, x2, x3, x4)

U3_ggg(x1, x2, x3, x4, x5, x6)  =  U3_ggg(x1, x2, x3, x4, x5, x6)

transpose_aux_out_ggg(x1, x2, x3)  =  transpose_aux_out_ggg(x1, x2, x3)

transpose_out_gg(x1, x2)  =  transpose_out_gg(x1, x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   transpose_in_gg(A, B) -> U1_gg(A, B, transpose_aux_in_ggg(A, [], B))
   transpose_aux_in_ggg(.(R, Rs), X1, .(C, Cs)) -> U2_ggg(R, Rs, X1, C, Cs, row2col_in_ggaa(R, .(C, Cs), Cols1, Accm))
   row2col_in_ggaa(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As)) -> U4_ggaa(X, Xs, Ys, Cols, Cols1, As, row2col_in_ggaa(Xs, Cols, Cols1, As))
   row2col_in_ggaa([], [], [], []) -> row2col_out_ggaa([], [], [], [])
   U4_ggaa(X, Xs, Ys, Cols, Cols1, As, row2col_out_ggaa(Xs, Cols, Cols1, As)) -> row2col_out_ggaa(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As))
   U2_ggg(R, Rs, X1, C, Cs, row2col_out_ggaa(R, .(C, Cs), Cols1, Accm)) -> U3_ggg(R, Rs, X1, C, Cs, transpose_aux_in_ggg(Rs, Accm, Cols1))
   transpose_aux_in_ggg([], X, X) -> transpose_aux_out_ggg([], X, X)
   U3_ggg(R, Rs, X1, C, Cs, transpose_aux_out_ggg(Rs, Accm, Cols1)) -> transpose_aux_out_ggg(.(R, Rs), X1, .(C, Cs))
   U1_gg(A, B, transpose_aux_out_ggg(A, [], B)) -> transpose_out_gg(A, B)

The argument filtering Pi contains the following mapping:
transpose_in_gg(x1, x2)  =  transpose_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

transpose_aux_in_ggg(x1, x2, x3)  =  transpose_aux_in_ggg(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U2_ggg(x1, x2, x3, x4, x5, x6)  =  U2_ggg(x1, x2, x3, x4, x5, x6)

row2col_in_ggaa(x1, x2, x3, x4)  =  row2col_in_ggaa(x1, x2)

U4_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U4_ggaa(x1, x2, x3, x4, x7)

[]  =  []

row2col_out_ggaa(x1, x2, x3, x4)  =  row2col_out_ggaa(x1, x2, x3, x4)

U3_ggg(x1, x2, x3, x4, x5, x6)  =  U3_ggg(x1, x2, x3, x4, x5, x6)

transpose_aux_out_ggg(x1, x2, x3)  =  transpose_aux_out_ggg(x1, x2, x3)

transpose_out_gg(x1, x2)  =  transpose_out_gg(x1, x2)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   TRANSPOSE_IN_GG(A, B) -> U1_GG(A, B, transpose_aux_in_ggg(A, [], B))
   TRANSPOSE_IN_GG(A, B) -> TRANSPOSE_AUX_IN_GGG(A, [], B)
   TRANSPOSE_AUX_IN_GGG(.(R, Rs), X1, .(C, Cs)) -> U2_GGG(R, Rs, X1, C, Cs, row2col_in_ggaa(R, .(C, Cs), Cols1, Accm))
   TRANSPOSE_AUX_IN_GGG(.(R, Rs), X1, .(C, Cs)) -> ROW2COL_IN_GGAA(R, .(C, Cs), Cols1, Accm)
   ROW2COL_IN_GGAA(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As)) -> U4_GGAA(X, Xs, Ys, Cols, Cols1, As, row2col_in_ggaa(Xs, Cols, Cols1, As))
   ROW2COL_IN_GGAA(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As)) -> ROW2COL_IN_GGAA(Xs, Cols, Cols1, As)
   U2_GGG(R, Rs, X1, C, Cs, row2col_out_ggaa(R, .(C, Cs), Cols1, Accm)) -> U3_GGG(R, Rs, X1, C, Cs, transpose_aux_in_ggg(Rs, Accm, Cols1))
   U2_GGG(R, Rs, X1, C, Cs, row2col_out_ggaa(R, .(C, Cs), Cols1, Accm)) -> TRANSPOSE_AUX_IN_GGG(Rs, Accm, Cols1)

The TRS R consists of the following rules:

   transpose_in_gg(A, B) -> U1_gg(A, B, transpose_aux_in_ggg(A, [], B))
   transpose_aux_in_ggg(.(R, Rs), X1, .(C, Cs)) -> U2_ggg(R, Rs, X1, C, Cs, row2col_in_ggaa(R, .(C, Cs), Cols1, Accm))
   row2col_in_ggaa(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As)) -> U4_ggaa(X, Xs, Ys, Cols, Cols1, As, row2col_in_ggaa(Xs, Cols, Cols1, As))
   row2col_in_ggaa([], [], [], []) -> row2col_out_ggaa([], [], [], [])
   U4_ggaa(X, Xs, Ys, Cols, Cols1, As, row2col_out_ggaa(Xs, Cols, Cols1, As)) -> row2col_out_ggaa(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As))
   U2_ggg(R, Rs, X1, C, Cs, row2col_out_ggaa(R, .(C, Cs), Cols1, Accm)) -> U3_ggg(R, Rs, X1, C, Cs, transpose_aux_in_ggg(Rs, Accm, Cols1))
   transpose_aux_in_ggg([], X, X) -> transpose_aux_out_ggg([], X, X)
   U3_ggg(R, Rs, X1, C, Cs, transpose_aux_out_ggg(Rs, Accm, Cols1)) -> transpose_aux_out_ggg(.(R, Rs), X1, .(C, Cs))
   U1_gg(A, B, transpose_aux_out_ggg(A, [], B)) -> transpose_out_gg(A, B)

The argument filtering Pi contains the following mapping:
transpose_in_gg(x1, x2)  =  transpose_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

transpose_aux_in_ggg(x1, x2, x3)  =  transpose_aux_in_ggg(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U2_ggg(x1, x2, x3, x4, x5, x6)  =  U2_ggg(x1, x2, x3, x4, x5, x6)

row2col_in_ggaa(x1, x2, x3, x4)  =  row2col_in_ggaa(x1, x2)

U4_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U4_ggaa(x1, x2, x3, x4, x7)

[]  =  []

row2col_out_ggaa(x1, x2, x3, x4)  =  row2col_out_ggaa(x1, x2, x3, x4)

U3_ggg(x1, x2, x3, x4, x5, x6)  =  U3_ggg(x1, x2, x3, x4, x5, x6)

transpose_aux_out_ggg(x1, x2, x3)  =  transpose_aux_out_ggg(x1, x2, x3)

transpose_out_gg(x1, x2)  =  transpose_out_gg(x1, x2)

TRANSPOSE_IN_GG(x1, x2)  =  TRANSPOSE_IN_GG(x1, x2)

U1_GG(x1, x2, x3)  =  U1_GG(x1, x2, x3)

TRANSPOSE_AUX_IN_GGG(x1, x2, x3)  =  TRANSPOSE_AUX_IN_GGG(x1, x2, x3)

U2_GGG(x1, x2, x3, x4, x5, x6)  =  U2_GGG(x1, x2, x3, x4, x5, x6)

ROW2COL_IN_GGAA(x1, x2, x3, x4)  =  ROW2COL_IN_GGAA(x1, x2)

U4_GGAA(x1, x2, x3, x4, x5, x6, x7)  =  U4_GGAA(x1, x2, x3, x4, x7)

U3_GGG(x1, x2, x3, x4, x5, x6)  =  U3_GGG(x1, x2, x3, x4, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TRANSPOSE_IN_GG(A, B) -> U1_GG(A, B, transpose_aux_in_ggg(A, [], B))
   TRANSPOSE_IN_GG(A, B) -> TRANSPOSE_AUX_IN_GGG(A, [], B)
   TRANSPOSE_AUX_IN_GGG(.(R, Rs), X1, .(C, Cs)) -> U2_GGG(R, Rs, X1, C, Cs, row2col_in_ggaa(R, .(C, Cs), Cols1, Accm))
   TRANSPOSE_AUX_IN_GGG(.(R, Rs), X1, .(C, Cs)) -> ROW2COL_IN_GGAA(R, .(C, Cs), Cols1, Accm)
   ROW2COL_IN_GGAA(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As)) -> U4_GGAA(X, Xs, Ys, Cols, Cols1, As, row2col_in_ggaa(Xs, Cols, Cols1, As))
   ROW2COL_IN_GGAA(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As)) -> ROW2COL_IN_GGAA(Xs, Cols, Cols1, As)
   U2_GGG(R, Rs, X1, C, Cs, row2col_out_ggaa(R, .(C, Cs), Cols1, Accm)) -> U3_GGG(R, Rs, X1, C, Cs, transpose_aux_in_ggg(Rs, Accm, Cols1))
   U2_GGG(R, Rs, X1, C, Cs, row2col_out_ggaa(R, .(C, Cs), Cols1, Accm)) -> TRANSPOSE_AUX_IN_GGG(Rs, Accm, Cols1)

The TRS R consists of the following rules:

   transpose_in_gg(A, B) -> U1_gg(A, B, transpose_aux_in_ggg(A, [], B))
   transpose_aux_in_ggg(.(R, Rs), X1, .(C, Cs)) -> U2_ggg(R, Rs, X1, C, Cs, row2col_in_ggaa(R, .(C, Cs), Cols1, Accm))
   row2col_in_ggaa(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As)) -> U4_ggaa(X, Xs, Ys, Cols, Cols1, As, row2col_in_ggaa(Xs, Cols, Cols1, As))
   row2col_in_ggaa([], [], [], []) -> row2col_out_ggaa([], [], [], [])
   U4_ggaa(X, Xs, Ys, Cols, Cols1, As, row2col_out_ggaa(Xs, Cols, Cols1, As)) -> row2col_out_ggaa(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As))
   U2_ggg(R, Rs, X1, C, Cs, row2col_out_ggaa(R, .(C, Cs), Cols1, Accm)) -> U3_ggg(R, Rs, X1, C, Cs, transpose_aux_in_ggg(Rs, Accm, Cols1))
   transpose_aux_in_ggg([], X, X) -> transpose_aux_out_ggg([], X, X)
   U3_ggg(R, Rs, X1, C, Cs, transpose_aux_out_ggg(Rs, Accm, Cols1)) -> transpose_aux_out_ggg(.(R, Rs), X1, .(C, Cs))
   U1_gg(A, B, transpose_aux_out_ggg(A, [], B)) -> transpose_out_gg(A, B)

The argument filtering Pi contains the following mapping:
transpose_in_gg(x1, x2)  =  transpose_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

transpose_aux_in_ggg(x1, x2, x3)  =  transpose_aux_in_ggg(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U2_ggg(x1, x2, x3, x4, x5, x6)  =  U2_ggg(x1, x2, x3, x4, x5, x6)

row2col_in_ggaa(x1, x2, x3, x4)  =  row2col_in_ggaa(x1, x2)

U4_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U4_ggaa(x1, x2, x3, x4, x7)

[]  =  []

row2col_out_ggaa(x1, x2, x3, x4)  =  row2col_out_ggaa(x1, x2, x3, x4)

U3_ggg(x1, x2, x3, x4, x5, x6)  =  U3_ggg(x1, x2, x3, x4, x5, x6)

transpose_aux_out_ggg(x1, x2, x3)  =  transpose_aux_out_ggg(x1, x2, x3)

transpose_out_gg(x1, x2)  =  transpose_out_gg(x1, x2)

TRANSPOSE_IN_GG(x1, x2)  =  TRANSPOSE_IN_GG(x1, x2)

U1_GG(x1, x2, x3)  =  U1_GG(x1, x2, x3)

TRANSPOSE_AUX_IN_GGG(x1, x2, x3)  =  TRANSPOSE_AUX_IN_GGG(x1, x2, x3)

U2_GGG(x1, x2, x3, x4, x5, x6)  =  U2_GGG(x1, x2, x3, x4, x5, x6)

ROW2COL_IN_GGAA(x1, x2, x3, x4)  =  ROW2COL_IN_GGAA(x1, x2)

U4_GGAA(x1, x2, x3, x4, x5, x6, x7)  =  U4_GGAA(x1, x2, x3, x4, x7)

U3_GGG(x1, x2, x3, x4, x5, x6)  =  U3_GGG(x1, x2, x3, x4, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ROW2COL_IN_GGAA(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As)) -> ROW2COL_IN_GGAA(Xs, Cols, Cols1, As)

The TRS R consists of the following rules:

   transpose_in_gg(A, B) -> U1_gg(A, B, transpose_aux_in_ggg(A, [], B))
   transpose_aux_in_ggg(.(R, Rs), X1, .(C, Cs)) -> U2_ggg(R, Rs, X1, C, Cs, row2col_in_ggaa(R, .(C, Cs), Cols1, Accm))
   row2col_in_ggaa(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As)) -> U4_ggaa(X, Xs, Ys, Cols, Cols1, As, row2col_in_ggaa(Xs, Cols, Cols1, As))
   row2col_in_ggaa([], [], [], []) -> row2col_out_ggaa([], [], [], [])
   U4_ggaa(X, Xs, Ys, Cols, Cols1, As, row2col_out_ggaa(Xs, Cols, Cols1, As)) -> row2col_out_ggaa(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As))
   U2_ggg(R, Rs, X1, C, Cs, row2col_out_ggaa(R, .(C, Cs), Cols1, Accm)) -> U3_ggg(R, Rs, X1, C, Cs, transpose_aux_in_ggg(Rs, Accm, Cols1))
   transpose_aux_in_ggg([], X, X) -> transpose_aux_out_ggg([], X, X)
   U3_ggg(R, Rs, X1, C, Cs, transpose_aux_out_ggg(Rs, Accm, Cols1)) -> transpose_aux_out_ggg(.(R, Rs), X1, .(C, Cs))
   U1_gg(A, B, transpose_aux_out_ggg(A, [], B)) -> transpose_out_gg(A, B)

The argument filtering Pi contains the following mapping:
transpose_in_gg(x1, x2)  =  transpose_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

transpose_aux_in_ggg(x1, x2, x3)  =  transpose_aux_in_ggg(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U2_ggg(x1, x2, x3, x4, x5, x6)  =  U2_ggg(x1, x2, x3, x4, x5, x6)

row2col_in_ggaa(x1, x2, x3, x4)  =  row2col_in_ggaa(x1, x2)

U4_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U4_ggaa(x1, x2, x3, x4, x7)

[]  =  []

row2col_out_ggaa(x1, x2, x3, x4)  =  row2col_out_ggaa(x1, x2, x3, x4)

U3_ggg(x1, x2, x3, x4, x5, x6)  =  U3_ggg(x1, x2, x3, x4, x5, x6)

transpose_aux_out_ggg(x1, x2, x3)  =  transpose_aux_out_ggg(x1, x2, x3)

transpose_out_gg(x1, x2)  =  transpose_out_gg(x1, x2)

ROW2COL_IN_GGAA(x1, x2, x3, x4)  =  ROW2COL_IN_GGAA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ROW2COL_IN_GGAA(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As)) -> ROW2COL_IN_GGAA(Xs, Cols, Cols1, As)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

[]  =  []

ROW2COL_IN_GGAA(x1, x2, x3, x4)  =  ROW2COL_IN_GGAA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ROW2COL_IN_GGAA(.(X, Xs), .(.(X, Ys), Cols)) -> ROW2COL_IN_GGAA(Xs, Cols)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ROW2COL_IN_GGAA(.(X, Xs), .(.(X, Ys), Cols)) -> ROW2COL_IN_GGAA(Xs, Cols)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GGG(R, Rs, X1, C, Cs, row2col_out_ggaa(R, .(C, Cs), Cols1, Accm)) -> TRANSPOSE_AUX_IN_GGG(Rs, Accm, Cols1)
   TRANSPOSE_AUX_IN_GGG(.(R, Rs), X1, .(C, Cs)) -> U2_GGG(R, Rs, X1, C, Cs, row2col_in_ggaa(R, .(C, Cs), Cols1, Accm))

The TRS R consists of the following rules:

   transpose_in_gg(A, B) -> U1_gg(A, B, transpose_aux_in_ggg(A, [], B))
   transpose_aux_in_ggg(.(R, Rs), X1, .(C, Cs)) -> U2_ggg(R, Rs, X1, C, Cs, row2col_in_ggaa(R, .(C, Cs), Cols1, Accm))
   row2col_in_ggaa(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As)) -> U4_ggaa(X, Xs, Ys, Cols, Cols1, As, row2col_in_ggaa(Xs, Cols, Cols1, As))
   row2col_in_ggaa([], [], [], []) -> row2col_out_ggaa([], [], [], [])
   U4_ggaa(X, Xs, Ys, Cols, Cols1, As, row2col_out_ggaa(Xs, Cols, Cols1, As)) -> row2col_out_ggaa(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As))
   U2_ggg(R, Rs, X1, C, Cs, row2col_out_ggaa(R, .(C, Cs), Cols1, Accm)) -> U3_ggg(R, Rs, X1, C, Cs, transpose_aux_in_ggg(Rs, Accm, Cols1))
   transpose_aux_in_ggg([], X, X) -> transpose_aux_out_ggg([], X, X)
   U3_ggg(R, Rs, X1, C, Cs, transpose_aux_out_ggg(Rs, Accm, Cols1)) -> transpose_aux_out_ggg(.(R, Rs), X1, .(C, Cs))
   U1_gg(A, B, transpose_aux_out_ggg(A, [], B)) -> transpose_out_gg(A, B)

The argument filtering Pi contains the following mapping:
transpose_in_gg(x1, x2)  =  transpose_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

transpose_aux_in_ggg(x1, x2, x3)  =  transpose_aux_in_ggg(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U2_ggg(x1, x2, x3, x4, x5, x6)  =  U2_ggg(x1, x2, x3, x4, x5, x6)

row2col_in_ggaa(x1, x2, x3, x4)  =  row2col_in_ggaa(x1, x2)

U4_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U4_ggaa(x1, x2, x3, x4, x7)

[]  =  []

row2col_out_ggaa(x1, x2, x3, x4)  =  row2col_out_ggaa(x1, x2, x3, x4)

U3_ggg(x1, x2, x3, x4, x5, x6)  =  U3_ggg(x1, x2, x3, x4, x5, x6)

transpose_aux_out_ggg(x1, x2, x3)  =  transpose_aux_out_ggg(x1, x2, x3)

transpose_out_gg(x1, x2)  =  transpose_out_gg(x1, x2)

TRANSPOSE_AUX_IN_GGG(x1, x2, x3)  =  TRANSPOSE_AUX_IN_GGG(x1, x2, x3)

U2_GGG(x1, x2, x3, x4, x5, x6)  =  U2_GGG(x1, x2, x3, x4, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GGG(R, Rs, X1, C, Cs, row2col_out_ggaa(R, .(C, Cs), Cols1, Accm)) -> TRANSPOSE_AUX_IN_GGG(Rs, Accm, Cols1)
   TRANSPOSE_AUX_IN_GGG(.(R, Rs), X1, .(C, Cs)) -> U2_GGG(R, Rs, X1, C, Cs, row2col_in_ggaa(R, .(C, Cs), Cols1, Accm))

The TRS R consists of the following rules:

   row2col_in_ggaa(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As)) -> U4_ggaa(X, Xs, Ys, Cols, Cols1, As, row2col_in_ggaa(Xs, Cols, Cols1, As))
   U4_ggaa(X, Xs, Ys, Cols, Cols1, As, row2col_out_ggaa(Xs, Cols, Cols1, As)) -> row2col_out_ggaa(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As))
   row2col_in_ggaa([], [], [], []) -> row2col_out_ggaa([], [], [], [])

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

row2col_in_ggaa(x1, x2, x3, x4)  =  row2col_in_ggaa(x1, x2)

U4_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U4_ggaa(x1, x2, x3, x4, x7)

[]  =  []

row2col_out_ggaa(x1, x2, x3, x4)  =  row2col_out_ggaa(x1, x2, x3, x4)

TRANSPOSE_AUX_IN_GGG(x1, x2, x3)  =  TRANSPOSE_AUX_IN_GGG(x1, x2, x3)

U2_GGG(x1, x2, x3, x4, x5, x6)  =  U2_GGG(x1, x2, x3, x4, x5, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGG(R, Rs, X1, C, Cs, row2col_out_ggaa(R, .(C, Cs), Cols1, Accm)) -> TRANSPOSE_AUX_IN_GGG(Rs, Accm, Cols1)
   TRANSPOSE_AUX_IN_GGG(.(R, Rs), X1, .(C, Cs)) -> U2_GGG(R, Rs, X1, C, Cs, row2col_in_ggaa(R, .(C, Cs)))

The TRS R consists of the following rules:

   row2col_in_ggaa(.(X, Xs), .(.(X, Ys), Cols)) -> U4_ggaa(X, Xs, Ys, Cols, row2col_in_ggaa(Xs, Cols))
   U4_ggaa(X, Xs, Ys, Cols, row2col_out_ggaa(Xs, Cols, Cols1, As)) -> row2col_out_ggaa(.(X, Xs), .(.(X, Ys), Cols), .(Ys, Cols1), .([], As))
   row2col_in_ggaa([], []) -> row2col_out_ggaa([], [], [], [])

The set Q consists of the following terms:

   row2col_in_ggaa(x0, x1)
   U4_ggaa(x0, x1, x2, x3, x4)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TRANSPOSE_AUX_IN_GGG(.(R, Rs), X1, .(C, Cs)) -> U2_GGG(R, Rs, X1, C, Cs, row2col_in_ggaa(R, .(C, Cs)))
The graph contains the following edges 1 > 1, 1 > 2, 2 >= 3, 3 > 4, 3 > 5


*U2_GGG(R, Rs, X1, C, Cs, row2col_out_ggaa(R, .(C, Cs), Cols1, Accm)) -> TRANSPOSE_AUX_IN_GGG(Rs, Accm, Cols1)
The graph contains the following edges 2 >= 1, 6 > 2, 6 > 3


----------------------------------------

(20)
YES
