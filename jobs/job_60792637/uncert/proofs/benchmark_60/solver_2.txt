YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/i89bX.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

prefix(a,g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(2) TRIPLES
(3) TriplesToPiDPProof [SOUND, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) PiDPToQDPProof [SOUND, 0 ms]
(8) QDP
(9) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
Clauses:

prefix(Xs, Ys) :- app(Xs, X1, Ys).
app([], X, X).
app(.(X, Xs), Ys, .(X, Zs)) :- app(Xs, Ys, Zs).


Query: prefix(a,g)
----------------------------------------

(1) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(prefix Xs Ys)",
                "(app Xs X1 Ys)"
            ],
            [
                "(app ([]) X X)",
                null
            ],
            [
                "(app (. X Xs) Ys (. X Zs))",
                "(app Xs Ys Zs)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "33": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(app T7 X6 T6)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": ["X6"],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(prefix T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "34": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(app T7 X6 T6)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": ["X6"],
                    "exprvars": []
                }
            },
            "112": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(prefix T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T2"],
                    "free": [],
                    "exprvars": []
                }
            },
            "113": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "114": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "115": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T22 X31 T21)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T21"],
                    "free": ["X31"],
                    "exprvars": []
                }
            },
            "116": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(app T7 X6 T6)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": ["X6"],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "20": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(app T7 X6 T6)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(app T7 X6 T6)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": ["X6"],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 12,
                "label": "CASE"
            },
            {
                "from": 12,
                "to": 19,
                "label": "ONLY EVAL with clause\nprefix(X4, X5) :- app(X4, X6, X5).\nand substitutionT1 -> T7,\nX4 -> T7,\nT2 -> T6,\nX5 -> T6,\nT5 -> T7"
            },
            {
                "from": 19,
                "to": 20,
                "label": "CASE"
            },
            {
                "from": 20,
                "to": 33,
                "label": "PARALLEL"
            },
            {
                "from": 20,
                "to": 34,
                "label": "PARALLEL"
            },
            {
                "from": 33,
                "to": 112,
                "label": "EVAL with clause\napp([], X15, X15).\nand substitutionT7 -> [],\nX6 -> T12,\nX15 -> T12,\nT6 -> T12,\nX16 -> T12"
            },
            {
                "from": 33,
                "to": 113,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 34,
                "to": 115,
                "label": "EVAL with clause\napp(.(X27, X28), X29, .(X27, X30)) :- app(X28, X29, X30).\nand substitutionX27 -> T19,\nX28 -> T22,\nT7 -> .(T19, T22),\nX6 -> X31,\nX29 -> X31,\nX30 -> T21,\nT6 -> .(T19, T21),\nT20 -> T22"
            },
            {
                "from": 34,
                "to": 116,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 112,
                "to": 114,
                "label": "SUCCESS"
            },
            {
                "from": 115,
                "to": 19,
                "label": "INSTANCE with matching:\nT7 -> T22\nX6 -> X31\nT6 -> T21"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Triples:

appA(.(X1, X2), X3, .(X1, X4)) :- appA(X2, X3, X4).
prefixB(X1, X2) :- appA(X1, X3, X2).

Clauses:

appcA([], X1, X1).
appcA(.(X1, X2), X3, .(X1, X4)) :- appcA(X2, X3, X4).

Afs:

prefixB(x1, x2)  =  prefixB(x2)


----------------------------------------

(3) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

prefixB_in_2: (f,b)

appA_in_3: (f,f,b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   PREFIXB_IN_AG(X1, X2) -> U2_AG(X1, X2, appA_in_aag(X1, X3, X2))
   PREFIXB_IN_AG(X1, X2) -> APPA_IN_AAG(X1, X3, X2)
   APPA_IN_AAG(.(X1, X2), X3, .(X1, X4)) -> U1_AAG(X1, X2, X3, X4, appA_in_aag(X2, X3, X4))
   APPA_IN_AAG(.(X1, X2), X3, .(X1, X4)) -> APPA_IN_AAG(X2, X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
appA_in_aag(x1, x2, x3)  =  appA_in_aag(x3)

.(x1, x2)  =  .(x1, x2)

PREFIXB_IN_AG(x1, x2)  =  PREFIXB_IN_AG(x2)

U2_AG(x1, x2, x3)  =  U2_AG(x2, x3)

APPA_IN_AAG(x1, x2, x3)  =  APPA_IN_AAG(x3)

U1_AAG(x1, x2, x3, x4, x5)  =  U1_AAG(x1, x4, x5)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PREFIXB_IN_AG(X1, X2) -> U2_AG(X1, X2, appA_in_aag(X1, X3, X2))
   PREFIXB_IN_AG(X1, X2) -> APPA_IN_AAG(X1, X3, X2)
   APPA_IN_AAG(.(X1, X2), X3, .(X1, X4)) -> U1_AAG(X1, X2, X3, X4, appA_in_aag(X2, X3, X4))
   APPA_IN_AAG(.(X1, X2), X3, .(X1, X4)) -> APPA_IN_AAG(X2, X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
appA_in_aag(x1, x2, x3)  =  appA_in_aag(x3)

.(x1, x2)  =  .(x1, x2)

PREFIXB_IN_AG(x1, x2)  =  PREFIXB_IN_AG(x2)

U2_AG(x1, x2, x3)  =  U2_AG(x2, x3)

APPA_IN_AAG(x1, x2, x3)  =  APPA_IN_AAG(x3)

U1_AAG(x1, x2, x3, x4, x5)  =  U1_AAG(x1, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPA_IN_AAG(.(X1, X2), X3, .(X1, X4)) -> APPA_IN_AAG(X2, X3, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

APPA_IN_AAG(x1, x2, x3)  =  APPA_IN_AAG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPA_IN_AAG(.(X1, X4)) -> APPA_IN_AAG(X4)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPA_IN_AAG(.(X1, X4)) -> APPA_IN_AAG(X4)
The graph contains the following edges 1 > 1


----------------------------------------

(10)
YES
