YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Mo4Ks.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

perm(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
(3) DependencyPairsProof [EQUIVALENT, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) AND
    (7) PiDP
        (8) UsableRulesProof [EQUIVALENT, 0 ms]
        (9) PiDP
        (10) PiDPToQDPProof [SOUND, 0 ms]
        (11) QDP
        (12) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (13) YES
    (14) PiDP
        (15) UsableRulesProof [EQUIVALENT, 0 ms]
        (16) PiDP
        (17) PiDPToQDPProof [SOUND, 0 ms]
        (18) QDP
        (19) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (20) YES
    (21) PiDP
        (22) UsableRulesProof [EQUIVALENT, 0 ms]
        (23) PiDP
        (24) PiDPToQDPProof [SOUND, 0 ms]
        (25) QDP
        (26) MRRProof [EQUIVALENT, 1 ms]
        (27) QDP
        (28) PisEmptyProof [EQUIVALENT, 0 ms]
        (29) YES


----------------------------------------

(0)
Obligation:
Clauses:

append(nil, XS, XS).
append(cons(X, XS1), XS2, cons(X, YS)) :- append(XS1, XS2, YS).
split(XS, nil, XS).
split(cons(X, XS), cons(X, YS1), YS2) :- split(XS, YS1, YS2).
perm(nil, nil).
perm(XS, cons(Y, YS)) :- ','(split(XS, YS1, cons(Y, YS2)), ','(append(YS1, YS2, ZS), perm(ZS, YS))).


Query: perm(g,a)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

perm_in_2: (b,f)

split_in_3: (b,f,f)

append_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   perm_in_ga(nil, nil) -> perm_out_ga(nil, nil)
   perm_in_ga(XS, cons(Y, YS)) -> U3_ga(XS, Y, YS, split_in_gaa(XS, YS1, cons(Y, YS2)))
   split_in_gaa(XS, nil, XS) -> split_out_gaa(XS, nil, XS)
   split_in_gaa(cons(X, XS), cons(X, YS1), YS2) -> U2_gaa(X, XS, YS1, YS2, split_in_gaa(XS, YS1, YS2))
   U2_gaa(X, XS, YS1, YS2, split_out_gaa(XS, YS1, YS2)) -> split_out_gaa(cons(X, XS), cons(X, YS1), YS2)
   U3_ga(XS, Y, YS, split_out_gaa(XS, YS1, cons(Y, YS2))) -> U4_ga(XS, Y, YS, YS1, YS2, append_in_gga(YS1, YS2, ZS))
   append_in_gga(nil, XS, XS) -> append_out_gga(nil, XS, XS)
   append_in_gga(cons(X, XS1), XS2, cons(X, YS)) -> U1_gga(X, XS1, XS2, YS, append_in_gga(XS1, XS2, YS))
   U1_gga(X, XS1, XS2, YS, append_out_gga(XS1, XS2, YS)) -> append_out_gga(cons(X, XS1), XS2, cons(X, YS))
   U4_ga(XS, Y, YS, YS1, YS2, append_out_gga(YS1, YS2, ZS)) -> U5_ga(XS, Y, YS, perm_in_ga(ZS, YS))
   U5_ga(XS, Y, YS, perm_out_ga(ZS, YS)) -> perm_out_ga(XS, cons(Y, YS))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

nil  =  nil

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

split_in_gaa(x1, x2, x3)  =  split_in_gaa(x1)

cons(x1, x2)  =  cons(x2)

split_out_gaa(x1, x2, x3)  =  split_out_gaa(x2, x3)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x5)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   perm_in_ga(nil, nil) -> perm_out_ga(nil, nil)
   perm_in_ga(XS, cons(Y, YS)) -> U3_ga(XS, Y, YS, split_in_gaa(XS, YS1, cons(Y, YS2)))
   split_in_gaa(XS, nil, XS) -> split_out_gaa(XS, nil, XS)
   split_in_gaa(cons(X, XS), cons(X, YS1), YS2) -> U2_gaa(X, XS, YS1, YS2, split_in_gaa(XS, YS1, YS2))
   U2_gaa(X, XS, YS1, YS2, split_out_gaa(XS, YS1, YS2)) -> split_out_gaa(cons(X, XS), cons(X, YS1), YS2)
   U3_ga(XS, Y, YS, split_out_gaa(XS, YS1, cons(Y, YS2))) -> U4_ga(XS, Y, YS, YS1, YS2, append_in_gga(YS1, YS2, ZS))
   append_in_gga(nil, XS, XS) -> append_out_gga(nil, XS, XS)
   append_in_gga(cons(X, XS1), XS2, cons(X, YS)) -> U1_gga(X, XS1, XS2, YS, append_in_gga(XS1, XS2, YS))
   U1_gga(X, XS1, XS2, YS, append_out_gga(XS1, XS2, YS)) -> append_out_gga(cons(X, XS1), XS2, cons(X, YS))
   U4_ga(XS, Y, YS, YS1, YS2, append_out_gga(YS1, YS2, ZS)) -> U5_ga(XS, Y, YS, perm_in_ga(ZS, YS))
   U5_ga(XS, Y, YS, perm_out_ga(ZS, YS)) -> perm_out_ga(XS, cons(Y, YS))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

nil  =  nil

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

split_in_gaa(x1, x2, x3)  =  split_in_gaa(x1)

cons(x1, x2)  =  cons(x2)

split_out_gaa(x1, x2, x3)  =  split_out_gaa(x2, x3)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x5)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   PERM_IN_GA(XS, cons(Y, YS)) -> U3_GA(XS, Y, YS, split_in_gaa(XS, YS1, cons(Y, YS2)))
   PERM_IN_GA(XS, cons(Y, YS)) -> SPLIT_IN_GAA(XS, YS1, cons(Y, YS2))
   SPLIT_IN_GAA(cons(X, XS), cons(X, YS1), YS2) -> U2_GAA(X, XS, YS1, YS2, split_in_gaa(XS, YS1, YS2))
   SPLIT_IN_GAA(cons(X, XS), cons(X, YS1), YS2) -> SPLIT_IN_GAA(XS, YS1, YS2)
   U3_GA(XS, Y, YS, split_out_gaa(XS, YS1, cons(Y, YS2))) -> U4_GA(XS, Y, YS, YS1, YS2, append_in_gga(YS1, YS2, ZS))
   U3_GA(XS, Y, YS, split_out_gaa(XS, YS1, cons(Y, YS2))) -> APPEND_IN_GGA(YS1, YS2, ZS)
   APPEND_IN_GGA(cons(X, XS1), XS2, cons(X, YS)) -> U1_GGA(X, XS1, XS2, YS, append_in_gga(XS1, XS2, YS))
   APPEND_IN_GGA(cons(X, XS1), XS2, cons(X, YS)) -> APPEND_IN_GGA(XS1, XS2, YS)
   U4_GA(XS, Y, YS, YS1, YS2, append_out_gga(YS1, YS2, ZS)) -> U5_GA(XS, Y, YS, perm_in_ga(ZS, YS))
   U4_GA(XS, Y, YS, YS1, YS2, append_out_gga(YS1, YS2, ZS)) -> PERM_IN_GA(ZS, YS)

The TRS R consists of the following rules:

   perm_in_ga(nil, nil) -> perm_out_ga(nil, nil)
   perm_in_ga(XS, cons(Y, YS)) -> U3_ga(XS, Y, YS, split_in_gaa(XS, YS1, cons(Y, YS2)))
   split_in_gaa(XS, nil, XS) -> split_out_gaa(XS, nil, XS)
   split_in_gaa(cons(X, XS), cons(X, YS1), YS2) -> U2_gaa(X, XS, YS1, YS2, split_in_gaa(XS, YS1, YS2))
   U2_gaa(X, XS, YS1, YS2, split_out_gaa(XS, YS1, YS2)) -> split_out_gaa(cons(X, XS), cons(X, YS1), YS2)
   U3_ga(XS, Y, YS, split_out_gaa(XS, YS1, cons(Y, YS2))) -> U4_ga(XS, Y, YS, YS1, YS2, append_in_gga(YS1, YS2, ZS))
   append_in_gga(nil, XS, XS) -> append_out_gga(nil, XS, XS)
   append_in_gga(cons(X, XS1), XS2, cons(X, YS)) -> U1_gga(X, XS1, XS2, YS, append_in_gga(XS1, XS2, YS))
   U1_gga(X, XS1, XS2, YS, append_out_gga(XS1, XS2, YS)) -> append_out_gga(cons(X, XS1), XS2, cons(X, YS))
   U4_ga(XS, Y, YS, YS1, YS2, append_out_gga(YS1, YS2, ZS)) -> U5_ga(XS, Y, YS, perm_in_ga(ZS, YS))
   U5_ga(XS, Y, YS, perm_out_ga(ZS, YS)) -> perm_out_ga(XS, cons(Y, YS))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

nil  =  nil

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

split_in_gaa(x1, x2, x3)  =  split_in_gaa(x1)

cons(x1, x2)  =  cons(x2)

split_out_gaa(x1, x2, x3)  =  split_out_gaa(x2, x3)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x5)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

SPLIT_IN_GAA(x1, x2, x3)  =  SPLIT_IN_GAA(x1)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x5)

U4_GA(x1, x2, x3, x4, x5, x6)  =  U4_GA(x6)

APPEND_IN_GGA(x1, x2, x3)  =  APPEND_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5)  =  U1_GGA(x5)

U5_GA(x1, x2, x3, x4)  =  U5_GA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PERM_IN_GA(XS, cons(Y, YS)) -> U3_GA(XS, Y, YS, split_in_gaa(XS, YS1, cons(Y, YS2)))
   PERM_IN_GA(XS, cons(Y, YS)) -> SPLIT_IN_GAA(XS, YS1, cons(Y, YS2))
   SPLIT_IN_GAA(cons(X, XS), cons(X, YS1), YS2) -> U2_GAA(X, XS, YS1, YS2, split_in_gaa(XS, YS1, YS2))
   SPLIT_IN_GAA(cons(X, XS), cons(X, YS1), YS2) -> SPLIT_IN_GAA(XS, YS1, YS2)
   U3_GA(XS, Y, YS, split_out_gaa(XS, YS1, cons(Y, YS2))) -> U4_GA(XS, Y, YS, YS1, YS2, append_in_gga(YS1, YS2, ZS))
   U3_GA(XS, Y, YS, split_out_gaa(XS, YS1, cons(Y, YS2))) -> APPEND_IN_GGA(YS1, YS2, ZS)
   APPEND_IN_GGA(cons(X, XS1), XS2, cons(X, YS)) -> U1_GGA(X, XS1, XS2, YS, append_in_gga(XS1, XS2, YS))
   APPEND_IN_GGA(cons(X, XS1), XS2, cons(X, YS)) -> APPEND_IN_GGA(XS1, XS2, YS)
   U4_GA(XS, Y, YS, YS1, YS2, append_out_gga(YS1, YS2, ZS)) -> U5_GA(XS, Y, YS, perm_in_ga(ZS, YS))
   U4_GA(XS, Y, YS, YS1, YS2, append_out_gga(YS1, YS2, ZS)) -> PERM_IN_GA(ZS, YS)

The TRS R consists of the following rules:

   perm_in_ga(nil, nil) -> perm_out_ga(nil, nil)
   perm_in_ga(XS, cons(Y, YS)) -> U3_ga(XS, Y, YS, split_in_gaa(XS, YS1, cons(Y, YS2)))
   split_in_gaa(XS, nil, XS) -> split_out_gaa(XS, nil, XS)
   split_in_gaa(cons(X, XS), cons(X, YS1), YS2) -> U2_gaa(X, XS, YS1, YS2, split_in_gaa(XS, YS1, YS2))
   U2_gaa(X, XS, YS1, YS2, split_out_gaa(XS, YS1, YS2)) -> split_out_gaa(cons(X, XS), cons(X, YS1), YS2)
   U3_ga(XS, Y, YS, split_out_gaa(XS, YS1, cons(Y, YS2))) -> U4_ga(XS, Y, YS, YS1, YS2, append_in_gga(YS1, YS2, ZS))
   append_in_gga(nil, XS, XS) -> append_out_gga(nil, XS, XS)
   append_in_gga(cons(X, XS1), XS2, cons(X, YS)) -> U1_gga(X, XS1, XS2, YS, append_in_gga(XS1, XS2, YS))
   U1_gga(X, XS1, XS2, YS, append_out_gga(XS1, XS2, YS)) -> append_out_gga(cons(X, XS1), XS2, cons(X, YS))
   U4_ga(XS, Y, YS, YS1, YS2, append_out_gga(YS1, YS2, ZS)) -> U5_ga(XS, Y, YS, perm_in_ga(ZS, YS))
   U5_ga(XS, Y, YS, perm_out_ga(ZS, YS)) -> perm_out_ga(XS, cons(Y, YS))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

nil  =  nil

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

split_in_gaa(x1, x2, x3)  =  split_in_gaa(x1)

cons(x1, x2)  =  cons(x2)

split_out_gaa(x1, x2, x3)  =  split_out_gaa(x2, x3)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x5)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

SPLIT_IN_GAA(x1, x2, x3)  =  SPLIT_IN_GAA(x1)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x5)

U4_GA(x1, x2, x3, x4, x5, x6)  =  U4_GA(x6)

APPEND_IN_GGA(x1, x2, x3)  =  APPEND_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5)  =  U1_GGA(x5)

U5_GA(x1, x2, x3, x4)  =  U5_GA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 3 SCCs with 5 less nodes.
----------------------------------------

(6)
Complex Obligation (AND)

----------------------------------------

(7)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_GGA(cons(X, XS1), XS2, cons(X, YS)) -> APPEND_IN_GGA(XS1, XS2, YS)

The TRS R consists of the following rules:

   perm_in_ga(nil, nil) -> perm_out_ga(nil, nil)
   perm_in_ga(XS, cons(Y, YS)) -> U3_ga(XS, Y, YS, split_in_gaa(XS, YS1, cons(Y, YS2)))
   split_in_gaa(XS, nil, XS) -> split_out_gaa(XS, nil, XS)
   split_in_gaa(cons(X, XS), cons(X, YS1), YS2) -> U2_gaa(X, XS, YS1, YS2, split_in_gaa(XS, YS1, YS2))
   U2_gaa(X, XS, YS1, YS2, split_out_gaa(XS, YS1, YS2)) -> split_out_gaa(cons(X, XS), cons(X, YS1), YS2)
   U3_ga(XS, Y, YS, split_out_gaa(XS, YS1, cons(Y, YS2))) -> U4_ga(XS, Y, YS, YS1, YS2, append_in_gga(YS1, YS2, ZS))
   append_in_gga(nil, XS, XS) -> append_out_gga(nil, XS, XS)
   append_in_gga(cons(X, XS1), XS2, cons(X, YS)) -> U1_gga(X, XS1, XS2, YS, append_in_gga(XS1, XS2, YS))
   U1_gga(X, XS1, XS2, YS, append_out_gga(XS1, XS2, YS)) -> append_out_gga(cons(X, XS1), XS2, cons(X, YS))
   U4_ga(XS, Y, YS, YS1, YS2, append_out_gga(YS1, YS2, ZS)) -> U5_ga(XS, Y, YS, perm_in_ga(ZS, YS))
   U5_ga(XS, Y, YS, perm_out_ga(ZS, YS)) -> perm_out_ga(XS, cons(Y, YS))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

nil  =  nil

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

split_in_gaa(x1, x2, x3)  =  split_in_gaa(x1)

cons(x1, x2)  =  cons(x2)

split_out_gaa(x1, x2, x3)  =  split_out_gaa(x2, x3)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x5)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

APPEND_IN_GGA(x1, x2, x3)  =  APPEND_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(9)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   APPEND_IN_GGA(cons(X, XS1), XS2, cons(X, YS)) -> APPEND_IN_GGA(XS1, XS2, YS)

R is empty.
The argument filtering Pi contains the following mapping:
cons(x1, x2)  =  cons(x2)

APPEND_IN_GGA(x1, x2, x3)  =  APPEND_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(10) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(11)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   APPEND_IN_GGA(cons(XS1), XS2) -> APPEND_IN_GGA(XS1, XS2)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(12) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*APPEND_IN_GGA(cons(XS1), XS2) -> APPEND_IN_GGA(XS1, XS2)
The graph contains the following edges 1 > 1, 2 >= 2


----------------------------------------

(13)
YES

----------------------------------------

(14)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SPLIT_IN_GAA(cons(X, XS), cons(X, YS1), YS2) -> SPLIT_IN_GAA(XS, YS1, YS2)

The TRS R consists of the following rules:

   perm_in_ga(nil, nil) -> perm_out_ga(nil, nil)
   perm_in_ga(XS, cons(Y, YS)) -> U3_ga(XS, Y, YS, split_in_gaa(XS, YS1, cons(Y, YS2)))
   split_in_gaa(XS, nil, XS) -> split_out_gaa(XS, nil, XS)
   split_in_gaa(cons(X, XS), cons(X, YS1), YS2) -> U2_gaa(X, XS, YS1, YS2, split_in_gaa(XS, YS1, YS2))
   U2_gaa(X, XS, YS1, YS2, split_out_gaa(XS, YS1, YS2)) -> split_out_gaa(cons(X, XS), cons(X, YS1), YS2)
   U3_ga(XS, Y, YS, split_out_gaa(XS, YS1, cons(Y, YS2))) -> U4_ga(XS, Y, YS, YS1, YS2, append_in_gga(YS1, YS2, ZS))
   append_in_gga(nil, XS, XS) -> append_out_gga(nil, XS, XS)
   append_in_gga(cons(X, XS1), XS2, cons(X, YS)) -> U1_gga(X, XS1, XS2, YS, append_in_gga(XS1, XS2, YS))
   U1_gga(X, XS1, XS2, YS, append_out_gga(XS1, XS2, YS)) -> append_out_gga(cons(X, XS1), XS2, cons(X, YS))
   U4_ga(XS, Y, YS, YS1, YS2, append_out_gga(YS1, YS2, ZS)) -> U5_ga(XS, Y, YS, perm_in_ga(ZS, YS))
   U5_ga(XS, Y, YS, perm_out_ga(ZS, YS)) -> perm_out_ga(XS, cons(Y, YS))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

nil  =  nil

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

split_in_gaa(x1, x2, x3)  =  split_in_gaa(x1)

cons(x1, x2)  =  cons(x2)

split_out_gaa(x1, x2, x3)  =  split_out_gaa(x2, x3)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x5)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

SPLIT_IN_GAA(x1, x2, x3)  =  SPLIT_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SPLIT_IN_GAA(cons(X, XS), cons(X, YS1), YS2) -> SPLIT_IN_GAA(XS, YS1, YS2)

R is empty.
The argument filtering Pi contains the following mapping:
cons(x1, x2)  =  cons(x2)

SPLIT_IN_GAA(x1, x2, x3)  =  SPLIT_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   SPLIT_IN_GAA(cons(XS)) -> SPLIT_IN_GAA(XS)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SPLIT_IN_GAA(cons(XS)) -> SPLIT_IN_GAA(XS)
The graph contains the following edges 1 > 1


----------------------------------------

(20)
YES

----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U3_GA(XS, Y, YS, split_out_gaa(XS, YS1, cons(Y, YS2))) -> U4_GA(XS, Y, YS, YS1, YS2, append_in_gga(YS1, YS2, ZS))
   U4_GA(XS, Y, YS, YS1, YS2, append_out_gga(YS1, YS2, ZS)) -> PERM_IN_GA(ZS, YS)
   PERM_IN_GA(XS, cons(Y, YS)) -> U3_GA(XS, Y, YS, split_in_gaa(XS, YS1, cons(Y, YS2)))

The TRS R consists of the following rules:

   perm_in_ga(nil, nil) -> perm_out_ga(nil, nil)
   perm_in_ga(XS, cons(Y, YS)) -> U3_ga(XS, Y, YS, split_in_gaa(XS, YS1, cons(Y, YS2)))
   split_in_gaa(XS, nil, XS) -> split_out_gaa(XS, nil, XS)
   split_in_gaa(cons(X, XS), cons(X, YS1), YS2) -> U2_gaa(X, XS, YS1, YS2, split_in_gaa(XS, YS1, YS2))
   U2_gaa(X, XS, YS1, YS2, split_out_gaa(XS, YS1, YS2)) -> split_out_gaa(cons(X, XS), cons(X, YS1), YS2)
   U3_ga(XS, Y, YS, split_out_gaa(XS, YS1, cons(Y, YS2))) -> U4_ga(XS, Y, YS, YS1, YS2, append_in_gga(YS1, YS2, ZS))
   append_in_gga(nil, XS, XS) -> append_out_gga(nil, XS, XS)
   append_in_gga(cons(X, XS1), XS2, cons(X, YS)) -> U1_gga(X, XS1, XS2, YS, append_in_gga(XS1, XS2, YS))
   U1_gga(X, XS1, XS2, YS, append_out_gga(XS1, XS2, YS)) -> append_out_gga(cons(X, XS1), XS2, cons(X, YS))
   U4_ga(XS, Y, YS, YS1, YS2, append_out_gga(YS1, YS2, ZS)) -> U5_ga(XS, Y, YS, perm_in_ga(ZS, YS))
   U5_ga(XS, Y, YS, perm_out_ga(ZS, YS)) -> perm_out_ga(XS, cons(Y, YS))

The argument filtering Pi contains the following mapping:
perm_in_ga(x1, x2)  =  perm_in_ga(x1)

nil  =  nil

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

U3_ga(x1, x2, x3, x4)  =  U3_ga(x4)

split_in_gaa(x1, x2, x3)  =  split_in_gaa(x1)

cons(x1, x2)  =  cons(x2)

split_out_gaa(x1, x2, x3)  =  split_out_gaa(x2, x3)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x5)

U4_ga(x1, x2, x3, x4, x5, x6)  =  U4_ga(x6)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x5)

U5_ga(x1, x2, x3, x4)  =  U5_ga(x4)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

U4_GA(x1, x2, x3, x4, x5, x6)  =  U4_GA(x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(23)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U3_GA(XS, Y, YS, split_out_gaa(XS, YS1, cons(Y, YS2))) -> U4_GA(XS, Y, YS, YS1, YS2, append_in_gga(YS1, YS2, ZS))
   U4_GA(XS, Y, YS, YS1, YS2, append_out_gga(YS1, YS2, ZS)) -> PERM_IN_GA(ZS, YS)
   PERM_IN_GA(XS, cons(Y, YS)) -> U3_GA(XS, Y, YS, split_in_gaa(XS, YS1, cons(Y, YS2)))

The TRS R consists of the following rules:

   append_in_gga(nil, XS, XS) -> append_out_gga(nil, XS, XS)
   append_in_gga(cons(X, XS1), XS2, cons(X, YS)) -> U1_gga(X, XS1, XS2, YS, append_in_gga(XS1, XS2, YS))
   split_in_gaa(XS, nil, XS) -> split_out_gaa(XS, nil, XS)
   split_in_gaa(cons(X, XS), cons(X, YS1), YS2) -> U2_gaa(X, XS, YS1, YS2, split_in_gaa(XS, YS1, YS2))
   U1_gga(X, XS1, XS2, YS, append_out_gga(XS1, XS2, YS)) -> append_out_gga(cons(X, XS1), XS2, cons(X, YS))
   U2_gaa(X, XS, YS1, YS2, split_out_gaa(XS, YS1, YS2)) -> split_out_gaa(cons(X, XS), cons(X, YS1), YS2)

The argument filtering Pi contains the following mapping:
nil  =  nil

split_in_gaa(x1, x2, x3)  =  split_in_gaa(x1)

cons(x1, x2)  =  cons(x2)

split_out_gaa(x1, x2, x3)  =  split_out_gaa(x2, x3)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x5)

append_in_gga(x1, x2, x3)  =  append_in_gga(x1, x2)

append_out_gga(x1, x2, x3)  =  append_out_gga(x3)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x5)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x4)

U4_GA(x1, x2, x3, x4, x5, x6)  =  U4_GA(x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(24) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(25)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GA(split_out_gaa(YS1, cons(YS2))) -> U4_GA(append_in_gga(YS1, YS2))
   U4_GA(append_out_gga(ZS)) -> PERM_IN_GA(ZS)
   PERM_IN_GA(XS) -> U3_GA(split_in_gaa(XS))

The TRS R consists of the following rules:

   append_in_gga(nil, XS) -> append_out_gga(XS)
   append_in_gga(cons(XS1), XS2) -> U1_gga(append_in_gga(XS1, XS2))
   split_in_gaa(XS) -> split_out_gaa(nil, XS)
   split_in_gaa(cons(XS)) -> U2_gaa(split_in_gaa(XS))
   U1_gga(append_out_gga(YS)) -> append_out_gga(cons(YS))
   U2_gaa(split_out_gaa(YS1, YS2)) -> split_out_gaa(cons(YS1), YS2)

The set Q consists of the following terms:

   append_in_gga(x0, x1)
   split_in_gaa(x0)
   U1_gga(x0)
   U2_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(26) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U3_GA(split_out_gaa(YS1, cons(YS2))) -> U4_GA(append_in_gga(YS1, YS2))
   U4_GA(append_out_gga(ZS)) -> PERM_IN_GA(ZS)
   PERM_IN_GA(XS) -> U3_GA(split_in_gaa(XS))

Strictly oriented rules of the TRS R:

   append_in_gga(nil, XS) -> append_out_gga(XS)
   append_in_gga(cons(XS1), XS2) -> U1_gga(append_in_gga(XS1, XS2))
   split_in_gaa(XS) -> split_out_gaa(nil, XS)
   split_in_gaa(cons(XS)) -> U2_gaa(split_in_gaa(XS))
   U1_gga(append_out_gga(YS)) -> append_out_gga(cons(YS))
   U2_gaa(split_out_gaa(YS1, YS2)) -> split_out_gaa(cons(YS1), YS2)

Used ordering: Knuth-Bendix order [KBO] with precedence:append_in_gga_2 > nil > PERM_IN_GA_1 > cons_1 > U4_GA_1 > split_in_gaa_1 > U3_GA_1 > U2_gaa_1 > split_out_gaa_2 > U1_gga_1 > append_out_gga_1

and weight map:

   nil=2
   append_out_gga_1=6
   cons_1=7
   U1_gga_1=7
   split_in_gaa_1=2
   U2_gaa_1=7
   U3_GA_1=3
   U4_GA_1=1
   PERM_IN_GA_1=6
   append_in_gga_2=8
   split_out_gaa_2=0

The variable weight is 1

----------------------------------------

(27)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   append_in_gga(x0, x1)
   split_in_gaa(x0)
   U1_gga(x0)
   U2_gaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(28) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(29)
YES
