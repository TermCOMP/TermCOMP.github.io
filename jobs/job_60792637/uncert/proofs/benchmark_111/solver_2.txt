MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/hUQFy.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

p(g,g,g,g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) PiDP
    (7) UsableRulesProof [EQUIVALENT, 0 ms]
    (8) PiDP
    (9) PiDPToQDPProof [EQUIVALENT, 0 ms]
    (10) QDP
    (11) TransformationProof [EQUIVALENT, 1 ms]
    (12) QDP
    (13) TransformationProof [EQUIVALENT, 0 ms]
    (14) QDP
    (15) TransformationProof [EQUIVALENT, 0 ms]
    (16) QDP
    (17) TransformationProof [EQUIVALENT, 0 ms]
    (18) QDP
    (19) TransformationProof [EQUIVALENT, 0 ms]
    (20) QDP
    (21) TransformationProof [EQUIVALENT, 0 ms]
    (22) QDP
    (23) TransformationProof [EQUIVALENT, 0 ms]
    (24) QDP
    (25) TransformationProof [EQUIVALENT, 0 ms]
    (26) QDP
    (27) QDPOrderProof [EQUIVALENT, 0 ms]
    (28) QDP
    (29) QDPOrderProof [EQUIVALENT, 0 ms]
    (30) QDP
(31) PrologToPiTRSProof [SOUND, 0 ms]
(32) PiTRS
    (33) DependencyPairsProof [EQUIVALENT, 0 ms]
    (34) PiDP
    (35) DependencyGraphProof [EQUIVALENT, 0 ms]
    (36) PiDP
    (37) UsableRulesProof [EQUIVALENT, 0 ms]
    (38) PiDP
    (39) PiDPToQDPProof [EQUIVALENT, 0 ms]
    (40) QDP
    (41) TransformationProof [EQUIVALENT, 0 ms]
    (42) QDP
    (43) TransformationProof [EQUIVALENT, 0 ms]
    (44) QDP
    (45) TransformationProof [EQUIVALENT, 0 ms]
    (46) QDP
    (47) TransformationProof [EQUIVALENT, 0 ms]
    (48) QDP
    (49) TransformationProof [EQUIVALENT, 0 ms]
    (50) QDP
    (51) TransformationProof [EQUIVALENT, 0 ms]
    (52) QDP
    (53) TransformationProof [EQUIVALENT, 0 ms]
    (54) QDP
    (55) TransformationProof [EQUIVALENT, 0 ms]
    (56) QDP
    (57) QDPOrderProof [EQUIVALENT, 0 ms]
    (58) QDP
    (59) QDPOrderProof [EQUIVALENT, 0 ms]
    (60) QDP
(61) PrologToTRSTransformerProof [SOUND, 0 ms]
(62) QTRS
    (63) Overlay + Local Confluence [EQUIVALENT, 0 ms]
    (64) QTRS
    (65) DependencyPairsProof [EQUIVALENT, 0 ms]
    (66) QDP
    (67) DependencyGraphProof [EQUIVALENT, 0 ms]
    (68) QDP
    (69) MNOCProof [EQUIVALENT, 0 ms]
    (70) QDP
    (71) NonLoopProof [COMPLETE, 5 ms]
    (72) NO
(73) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(74) IRSwT
    (75) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (76) IRSwT
    (77) IntTRSCompressionProof [EQUIVALENT, 20 ms]
    (78) IRSwT
    (79) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (80) IRSwT
    (81) IRSwTTerminationDigraphProof [EQUIVALENT, 8 ms]
    (82) IRSwT
    (83) IntTRSCompressionProof [EQUIVALENT, 2 ms]
    (84) IRSwT
    (85) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 2 ms]
    (86) IRSwT
    (87) IRSwTToIntTRSProof [SOUND, 7 ms]
    (88) IRSwT
    (89) IntTRSCompressionProof [EQUIVALENT, 0 ms]
    (90) IRSwT
(91) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(92) TRIPLES
    (93) TriplesToPiDPProof [SOUND, 6 ms]
    (94) PiDP
    (95) DependencyGraphProof [EQUIVALENT, 0 ms]
    (96) PiDP
    (97) PiDPToQDPProof [EQUIVALENT, 0 ms]
    (98) QDP
    (99) TransformationProof [EQUIVALENT, 0 ms]
    (100) QDP
    (101) TransformationProof [EQUIVALENT, 0 ms]
    (102) QDP
    (103) TransformationProof [EQUIVALENT, 0 ms]
    (104) QDP
    (105) TransformationProof [EQUIVALENT, 0 ms]
    (106) QDP
    (107) QDPOrderProof [EQUIVALENT, 0 ms]
    (108) QDP
    (109) MRRProof [EQUIVALENT, 5 ms]
    (110) QDP
    (111) TransformationProof [EQUIVALENT, 0 ms]
    (112) QDP
    (113) DependencyGraphProof [EQUIVALENT, 0 ms]
    (114) AND
        (115) QDP
            (116) NonTerminationLoopProof [COMPLETE, 0 ms]
            (117) NO
        (118) QDP
            (119) TransformationProof [EQUIVALENT, 0 ms]
            (120) QDP


----------------------------------------

(0)
Obligation:
Clauses:

p(s(X1), X, .(0, []), Y) :- p(s(0), g(.(0, []), .(0, [])), X, Y).
p(Z, X, g(Y, Y), s(X2)) :- p(Z, X, Y, s(s(0))).


Query: p(g,g,g,g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

p_in_4: (b,b,b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_gggg(s(X1), X, .(0, []), Y) -> U1_gggg(X1, X, Y, p_in_gggg(s(0), g(.(0, []), .(0, [])), X, Y))
   p_in_gggg(Z, X, g(Y, Y), s(X2)) -> U2_gggg(Z, X, Y, X2, p_in_gggg(Z, X, Y, s(s(0))))
   U2_gggg(Z, X, Y, X2, p_out_gggg(Z, X, Y, s(s(0)))) -> p_out_gggg(Z, X, g(Y, Y), s(X2))
   U1_gggg(X1, X, Y, p_out_gggg(s(0), g(.(0, []), .(0, [])), X, Y)) -> p_out_gggg(s(X1), X, .(0, []), Y)

Pi is empty.



Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_gggg(s(X1), X, .(0, []), Y) -> U1_gggg(X1, X, Y, p_in_gggg(s(0), g(.(0, []), .(0, [])), X, Y))
   p_in_gggg(Z, X, g(Y, Y), s(X2)) -> U2_gggg(Z, X, Y, X2, p_in_gggg(Z, X, Y, s(s(0))))
   U2_gggg(Z, X, Y, X2, p_out_gggg(Z, X, Y, s(s(0)))) -> p_out_gggg(Z, X, g(Y, Y), s(X2))
   U1_gggg(X1, X, Y, p_out_gggg(s(0), g(.(0, []), .(0, [])), X, Y)) -> p_out_gggg(s(X1), X, .(0, []), Y)

Pi is empty.

----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(s(X1), X, .(0, []), Y) -> U1_GGGG(X1, X, Y, p_in_gggg(s(0), g(.(0, []), .(0, [])), X, Y))
   P_IN_GGGG(s(X1), X, .(0, []), Y) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), X, Y)
   P_IN_GGGG(Z, X, g(Y, Y), s(X2)) -> U2_GGGG(Z, X, Y, X2, p_in_gggg(Z, X, Y, s(s(0))))
   P_IN_GGGG(Z, X, g(Y, Y), s(X2)) -> P_IN_GGGG(Z, X, Y, s(s(0)))

The TRS R consists of the following rules:

   p_in_gggg(s(X1), X, .(0, []), Y) -> U1_gggg(X1, X, Y, p_in_gggg(s(0), g(.(0, []), .(0, [])), X, Y))
   p_in_gggg(Z, X, g(Y, Y), s(X2)) -> U2_gggg(Z, X, Y, X2, p_in_gggg(Z, X, Y, s(s(0))))
   U2_gggg(Z, X, Y, X2, p_out_gggg(Z, X, Y, s(s(0)))) -> p_out_gggg(Z, X, g(Y, Y), s(X2))
   U1_gggg(X1, X, Y, p_out_gggg(s(0), g(.(0, []), .(0, [])), X, Y)) -> p_out_gggg(s(X1), X, .(0, []), Y)

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(s(X1), X, .(0, []), Y) -> U1_GGGG(X1, X, Y, p_in_gggg(s(0), g(.(0, []), .(0, [])), X, Y))
   P_IN_GGGG(s(X1), X, .(0, []), Y) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), X, Y)
   P_IN_GGGG(Z, X, g(Y, Y), s(X2)) -> U2_GGGG(Z, X, Y, X2, p_in_gggg(Z, X, Y, s(s(0))))
   P_IN_GGGG(Z, X, g(Y, Y), s(X2)) -> P_IN_GGGG(Z, X, Y, s(s(0)))

The TRS R consists of the following rules:

   p_in_gggg(s(X1), X, .(0, []), Y) -> U1_gggg(X1, X, Y, p_in_gggg(s(0), g(.(0, []), .(0, [])), X, Y))
   p_in_gggg(Z, X, g(Y, Y), s(X2)) -> U2_gggg(Z, X, Y, X2, p_in_gggg(Z, X, Y, s(s(0))))
   U2_gggg(Z, X, Y, X2, p_out_gggg(Z, X, Y, s(s(0)))) -> p_out_gggg(Z, X, g(Y, Y), s(X2))
   U1_gggg(X1, X, Y, p_out_gggg(s(0), g(.(0, []), .(0, [])), X, Y)) -> p_out_gggg(s(X1), X, .(0, []), Y)

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 2 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(Z, X, g(Y, Y), s(X2)) -> P_IN_GGGG(Z, X, Y, s(s(0)))
   P_IN_GGGG(s(X1), X, .(0, []), Y) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), X, Y)

The TRS R consists of the following rules:

   p_in_gggg(s(X1), X, .(0, []), Y) -> U1_gggg(X1, X, Y, p_in_gggg(s(0), g(.(0, []), .(0, [])), X, Y))
   p_in_gggg(Z, X, g(Y, Y), s(X2)) -> U2_gggg(Z, X, Y, X2, p_in_gggg(Z, X, Y, s(s(0))))
   U2_gggg(Z, X, Y, X2, p_out_gggg(Z, X, Y, s(s(0)))) -> p_out_gggg(Z, X, g(Y, Y), s(X2))
   U1_gggg(X1, X, Y, p_out_gggg(s(0), g(.(0, []), .(0, [])), X, Y)) -> p_out_gggg(s(X1), X, .(0, []), Y)

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(Z, X, g(Y, Y), s(X2)) -> P_IN_GGGG(Z, X, Y, s(s(0)))
   P_IN_GGGG(s(X1), X, .(0, []), Y) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(Z, X, g(Y, Y), s(X2)) -> P_IN_GGGG(Z, X, Y, s(s(0)))
   P_IN_GGGG(s(X1), X, .(0, []), Y) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule P_IN_GGGG(Z, X, g(Y, Y), s(X2)) -> P_IN_GGGG(Z, X, Y, s(s(0))) we obtained the following new rules [LPAR04]:

   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x2, x2), s(x3)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x2, s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x2, x2), s(x3)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x2, s(s(0))))
   (P_IN_GGGG(z0, z1, g(x2, x2), s(s(0))) -> P_IN_GGGG(z0, z1, x2, s(s(0))),P_IN_GGGG(z0, z1, g(x2, x2), s(s(0))) -> P_IN_GGGG(z0, z1, x2, s(s(0))))


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(s(X1), X, .(0, []), Y) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), X, Y)
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x2, x2), s(x3)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x2, s(s(0)))
   P_IN_GGGG(z0, z1, g(x2, x2), s(s(0))) -> P_IN_GGGG(z0, z1, x2, s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule P_IN_GGGG(s(X1), X, .(0, []), Y) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), X, Y) we obtained the following new rules [LPAR04]:

   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), z2) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), z2),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), z2) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), z2))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))))
   (P_IN_GGGG(s(x0), z1, .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0))),P_IN_GGGG(s(x0), z1, .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0))))


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x2, x2), s(x3)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x2, s(s(0)))
   P_IN_GGGG(z0, z1, g(x2, x2), s(s(0))) -> P_IN_GGGG(z0, z1, x2, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), z2) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), z2)
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), z1, .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x2, x2), s(x3)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x2, s(s(0))) we obtained the following new rules [LPAR04]:

   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x0, x0), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x0, s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x0, x0), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x0, s(s(0))))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(x1)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(x1)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(z0, z1, g(x2, x2), s(s(0))) -> P_IN_GGGG(z0, z1, x2, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), z2) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), z2)
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), z1, .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x0, x0), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x0, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(x1)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), z2) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), z2) we obtained the following new rules [LPAR04]:

   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(z0, z1, g(x2, x2), s(s(0))) -> P_IN_GGGG(z0, z1, x2, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), z1, .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x0, x0), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x0, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(x1)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(x1)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) we obtained the following new rules [LPAR04]:

   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))))


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(z0, z1, g(x2, x2), s(s(0))) -> P_IN_GGGG(z0, z1, x2, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), z1, .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x0, x0), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x0, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule P_IN_GGGG(z0, z1, g(x2, x2), s(s(0))) -> P_IN_GGGG(z0, z1, x2, s(s(0))) we obtained the following new rules [LPAR04]:

   (P_IN_GGGG(x0, x1, g(g(y_2, y_3), g(y_2, y_3)), s(s(0))) -> P_IN_GGGG(x0, x1, g(y_2, y_3), s(s(0))),P_IN_GGGG(x0, x1, g(g(y_2, y_3), g(y_2, y_3)), s(s(0))) -> P_IN_GGGG(x0, x1, g(y_2, y_3), s(s(0))))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))))
   (P_IN_GGGG(s(y_0), x1, g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(y_0), x1, .(0, []), s(s(0))),P_IN_GGGG(s(y_0), x1, g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(y_0), x1, .(0, []), s(s(0))))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_0, y_1), g(y_0, y_1)), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_0, y_1), g(y_0, y_1)), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0))))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))))


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), z1, .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x0, x0), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x0, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   P_IN_GGGG(x0, x1, g(g(y_2, y_3), g(y_2, y_3)), s(s(0))) -> P_IN_GGGG(x0, x1, g(y_2, y_3), s(s(0)))
   P_IN_GGGG(s(y_0), x1, g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(y_0), x1, .(0, []), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_0, y_1), g(y_0, y_1)), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule P_IN_GGGG(s(x0), z1, .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0))) we obtained the following new rules [LPAR04]:

   (P_IN_GGGG(s(x0), .(0, []), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))),P_IN_GGGG(s(x0), .(0, []), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))))
   (P_IN_GGGG(s(x0), g(y_0, y_1), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0))),P_IN_GGGG(s(x0), g(y_0, y_1), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0))))
   (P_IN_GGGG(s(x0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))),P_IN_GGGG(s(x0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))))
   (P_IN_GGGG(s(x0), g(g(y_2, y_3), g(y_4, y_5)), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0))),P_IN_GGGG(s(x0), g(g(y_2, y_3), g(y_4, y_5)), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0))))
   (P_IN_GGGG(s(x0), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))),P_IN_GGGG(s(x0), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))))


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x0, x0), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x0, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   P_IN_GGGG(x0, x1, g(g(y_2, y_3), g(y_2, y_3)), s(s(0))) -> P_IN_GGGG(x0, x1, g(y_2, y_3), s(s(0)))
   P_IN_GGGG(s(y_0), x1, g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(y_0), x1, .(0, []), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_0, y_1), g(y_0, y_1)), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), .(0, []), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   P_IN_GGGG(s(x0), g(y_0, y_1), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0)))
   P_IN_GGGG(s(x0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), g(g(y_2, y_3), g(y_4, y_5)), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0)))
   P_IN_GGGG(s(x0), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x0, x0), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x0, s(s(0))) we obtained the following new rules [LPAR04]:

   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_0, y_1), g(y_0, y_1)), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_0, y_1), g(y_0, y_1)), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0))))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(y_2, y_3), g(y_4, y_5)), g(g(y_2, y_3), g(y_4, y_5))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(y_2, y_3), g(y_4, y_5)), g(g(y_2, y_3), g(y_4, y_5))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0))))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, [])))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, [])))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))))


----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   P_IN_GGGG(x0, x1, g(g(y_2, y_3), g(y_2, y_3)), s(s(0))) -> P_IN_GGGG(x0, x1, g(y_2, y_3), s(s(0)))
   P_IN_GGGG(s(y_0), x1, g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(y_0), x1, .(0, []), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_0, y_1), g(y_0, y_1)), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), .(0, []), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   P_IN_GGGG(s(x0), g(y_0, y_1), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0)))
   P_IN_GGGG(s(x0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), g(g(y_2, y_3), g(y_4, y_5)), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0)))
   P_IN_GGGG(s(x0), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(y_2, y_3), g(y_4, y_5)), g(g(y_2, y_3), g(y_4, y_5))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, [])))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(27) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   P_IN_GGGG(s(x0), .(0, []), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
P_IN_GGGG(x1, x2, x3, x4)  =  x2

g(x1, x2)  =  g

.(x1, x2)  =  .

0  =  0

[]  =  []


Knuth-Bendix order [KBO] with precedence:. > g

and weight map:

   .=1
   g=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   P_IN_GGGG(x0, x1, g(g(y_2, y_3), g(y_2, y_3)), s(s(0))) -> P_IN_GGGG(x0, x1, g(y_2, y_3), s(s(0)))
   P_IN_GGGG(s(y_0), x1, g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(y_0), x1, .(0, []), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_0, y_1), g(y_0, y_1)), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), g(y_0, y_1), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0)))
   P_IN_GGGG(s(x0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), g(g(y_2, y_3), g(y_4, y_5)), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0)))
   P_IN_GGGG(s(x0), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(y_2, y_3), g(y_4, y_5)), g(g(y_2, y_3), g(y_4, y_5))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, [])))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(29) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   P_IN_GGGG(s(x0), g(g(y_2, y_3), g(y_4, y_5)), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0)))
   P_IN_GGGG(s(x0), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
P_IN_GGGG(x1, x2, x3, x4)  =  x2

g(x1, x2)  =  g(x2)

.(x1, x2)  =  .

0  =  0

[]  =  []


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   .=1
   g_1=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   P_IN_GGGG(x0, x1, g(g(y_2, y_3), g(y_2, y_3)), s(s(0))) -> P_IN_GGGG(x0, x1, g(y_2, y_3), s(s(0)))
   P_IN_GGGG(s(y_0), x1, g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(y_0), x1, .(0, []), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_0, y_1), g(y_0, y_1)), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), g(y_0, y_1), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0)))
   P_IN_GGGG(s(x0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(y_2, y_3), g(y_4, y_5)), g(g(y_2, y_3), g(y_4, y_5))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, [])))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(31) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

p_in_4: (b,b,b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_gggg(s(X1), X, .(0, []), Y) -> U1_gggg(X1, X, Y, p_in_gggg(s(0), g(.(0, []), .(0, [])), X, Y))
   p_in_gggg(Z, X, g(Y, Y), s(X2)) -> U2_gggg(Z, X, Y, X2, p_in_gggg(Z, X, Y, s(s(0))))
   U2_gggg(Z, X, Y, X2, p_out_gggg(Z, X, Y, s(s(0)))) -> p_out_gggg(Z, X, g(Y, Y), s(X2))
   U1_gggg(X1, X, Y, p_out_gggg(s(0), g(.(0, []), .(0, [])), X, Y)) -> p_out_gggg(s(X1), X, .(0, []), Y)

The argument filtering Pi contains the following mapping:
p_in_gggg(x1, x2, x3, x4)  =  p_in_gggg(x1, x2, x3, x4)

s(x1)  =  s(x1)

.(x1, x2)  =  .(x1, x2)

0  =  0

[]  =  []

U1_gggg(x1, x2, x3, x4)  =  U1_gggg(x4)

g(x1, x2)  =  g(x1, x2)

U2_gggg(x1, x2, x3, x4, x5)  =  U2_gggg(x5)

p_out_gggg(x1, x2, x3, x4)  =  p_out_gggg





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(32)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   p_in_gggg(s(X1), X, .(0, []), Y) -> U1_gggg(X1, X, Y, p_in_gggg(s(0), g(.(0, []), .(0, [])), X, Y))
   p_in_gggg(Z, X, g(Y, Y), s(X2)) -> U2_gggg(Z, X, Y, X2, p_in_gggg(Z, X, Y, s(s(0))))
   U2_gggg(Z, X, Y, X2, p_out_gggg(Z, X, Y, s(s(0)))) -> p_out_gggg(Z, X, g(Y, Y), s(X2))
   U1_gggg(X1, X, Y, p_out_gggg(s(0), g(.(0, []), .(0, [])), X, Y)) -> p_out_gggg(s(X1), X, .(0, []), Y)

The argument filtering Pi contains the following mapping:
p_in_gggg(x1, x2, x3, x4)  =  p_in_gggg(x1, x2, x3, x4)

s(x1)  =  s(x1)

.(x1, x2)  =  .(x1, x2)

0  =  0

[]  =  []

U1_gggg(x1, x2, x3, x4)  =  U1_gggg(x4)

g(x1, x2)  =  g(x1, x2)

U2_gggg(x1, x2, x3, x4, x5)  =  U2_gggg(x5)

p_out_gggg(x1, x2, x3, x4)  =  p_out_gggg



----------------------------------------

(33) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(s(X1), X, .(0, []), Y) -> U1_GGGG(X1, X, Y, p_in_gggg(s(0), g(.(0, []), .(0, [])), X, Y))
   P_IN_GGGG(s(X1), X, .(0, []), Y) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), X, Y)
   P_IN_GGGG(Z, X, g(Y, Y), s(X2)) -> U2_GGGG(Z, X, Y, X2, p_in_gggg(Z, X, Y, s(s(0))))
   P_IN_GGGG(Z, X, g(Y, Y), s(X2)) -> P_IN_GGGG(Z, X, Y, s(s(0)))

The TRS R consists of the following rules:

   p_in_gggg(s(X1), X, .(0, []), Y) -> U1_gggg(X1, X, Y, p_in_gggg(s(0), g(.(0, []), .(0, [])), X, Y))
   p_in_gggg(Z, X, g(Y, Y), s(X2)) -> U2_gggg(Z, X, Y, X2, p_in_gggg(Z, X, Y, s(s(0))))
   U2_gggg(Z, X, Y, X2, p_out_gggg(Z, X, Y, s(s(0)))) -> p_out_gggg(Z, X, g(Y, Y), s(X2))
   U1_gggg(X1, X, Y, p_out_gggg(s(0), g(.(0, []), .(0, [])), X, Y)) -> p_out_gggg(s(X1), X, .(0, []), Y)

The argument filtering Pi contains the following mapping:
p_in_gggg(x1, x2, x3, x4)  =  p_in_gggg(x1, x2, x3, x4)

s(x1)  =  s(x1)

.(x1, x2)  =  .(x1, x2)

0  =  0

[]  =  []

U1_gggg(x1, x2, x3, x4)  =  U1_gggg(x4)

g(x1, x2)  =  g(x1, x2)

U2_gggg(x1, x2, x3, x4, x5)  =  U2_gggg(x5)

p_out_gggg(x1, x2, x3, x4)  =  p_out_gggg

P_IN_GGGG(x1, x2, x3, x4)  =  P_IN_GGGG(x1, x2, x3, x4)

U1_GGGG(x1, x2, x3, x4)  =  U1_GGGG(x4)

U2_GGGG(x1, x2, x3, x4, x5)  =  U2_GGGG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(34)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(s(X1), X, .(0, []), Y) -> U1_GGGG(X1, X, Y, p_in_gggg(s(0), g(.(0, []), .(0, [])), X, Y))
   P_IN_GGGG(s(X1), X, .(0, []), Y) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), X, Y)
   P_IN_GGGG(Z, X, g(Y, Y), s(X2)) -> U2_GGGG(Z, X, Y, X2, p_in_gggg(Z, X, Y, s(s(0))))
   P_IN_GGGG(Z, X, g(Y, Y), s(X2)) -> P_IN_GGGG(Z, X, Y, s(s(0)))

The TRS R consists of the following rules:

   p_in_gggg(s(X1), X, .(0, []), Y) -> U1_gggg(X1, X, Y, p_in_gggg(s(0), g(.(0, []), .(0, [])), X, Y))
   p_in_gggg(Z, X, g(Y, Y), s(X2)) -> U2_gggg(Z, X, Y, X2, p_in_gggg(Z, X, Y, s(s(0))))
   U2_gggg(Z, X, Y, X2, p_out_gggg(Z, X, Y, s(s(0)))) -> p_out_gggg(Z, X, g(Y, Y), s(X2))
   U1_gggg(X1, X, Y, p_out_gggg(s(0), g(.(0, []), .(0, [])), X, Y)) -> p_out_gggg(s(X1), X, .(0, []), Y)

The argument filtering Pi contains the following mapping:
p_in_gggg(x1, x2, x3, x4)  =  p_in_gggg(x1, x2, x3, x4)

s(x1)  =  s(x1)

.(x1, x2)  =  .(x1, x2)

0  =  0

[]  =  []

U1_gggg(x1, x2, x3, x4)  =  U1_gggg(x4)

g(x1, x2)  =  g(x1, x2)

U2_gggg(x1, x2, x3, x4, x5)  =  U2_gggg(x5)

p_out_gggg(x1, x2, x3, x4)  =  p_out_gggg

P_IN_GGGG(x1, x2, x3, x4)  =  P_IN_GGGG(x1, x2, x3, x4)

U1_GGGG(x1, x2, x3, x4)  =  U1_GGGG(x4)

U2_GGGG(x1, x2, x3, x4, x5)  =  U2_GGGG(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(35) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 2 less nodes.
----------------------------------------

(36)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(Z, X, g(Y, Y), s(X2)) -> P_IN_GGGG(Z, X, Y, s(s(0)))
   P_IN_GGGG(s(X1), X, .(0, []), Y) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), X, Y)

The TRS R consists of the following rules:

   p_in_gggg(s(X1), X, .(0, []), Y) -> U1_gggg(X1, X, Y, p_in_gggg(s(0), g(.(0, []), .(0, [])), X, Y))
   p_in_gggg(Z, X, g(Y, Y), s(X2)) -> U2_gggg(Z, X, Y, X2, p_in_gggg(Z, X, Y, s(s(0))))
   U2_gggg(Z, X, Y, X2, p_out_gggg(Z, X, Y, s(s(0)))) -> p_out_gggg(Z, X, g(Y, Y), s(X2))
   U1_gggg(X1, X, Y, p_out_gggg(s(0), g(.(0, []), .(0, [])), X, Y)) -> p_out_gggg(s(X1), X, .(0, []), Y)

The argument filtering Pi contains the following mapping:
p_in_gggg(x1, x2, x3, x4)  =  p_in_gggg(x1, x2, x3, x4)

s(x1)  =  s(x1)

.(x1, x2)  =  .(x1, x2)

0  =  0

[]  =  []

U1_gggg(x1, x2, x3, x4)  =  U1_gggg(x4)

g(x1, x2)  =  g(x1, x2)

U2_gggg(x1, x2, x3, x4, x5)  =  U2_gggg(x5)

p_out_gggg(x1, x2, x3, x4)  =  p_out_gggg

P_IN_GGGG(x1, x2, x3, x4)  =  P_IN_GGGG(x1, x2, x3, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(37) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(38)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(Z, X, g(Y, Y), s(X2)) -> P_IN_GGGG(Z, X, Y, s(s(0)))
   P_IN_GGGG(s(X1), X, .(0, []), Y) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(39) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(Z, X, g(Y, Y), s(X2)) -> P_IN_GGGG(Z, X, Y, s(s(0)))
   P_IN_GGGG(s(X1), X, .(0, []), Y) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(41) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule P_IN_GGGG(Z, X, g(Y, Y), s(X2)) -> P_IN_GGGG(Z, X, Y, s(s(0))) we obtained the following new rules [LPAR04]:

   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x2, x2), s(x3)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x2, s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x2, x2), s(x3)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x2, s(s(0))))
   (P_IN_GGGG(z0, z1, g(x2, x2), s(s(0))) -> P_IN_GGGG(z0, z1, x2, s(s(0))),P_IN_GGGG(z0, z1, g(x2, x2), s(s(0))) -> P_IN_GGGG(z0, z1, x2, s(s(0))))


----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(s(X1), X, .(0, []), Y) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), X, Y)
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x2, x2), s(x3)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x2, s(s(0)))
   P_IN_GGGG(z0, z1, g(x2, x2), s(s(0))) -> P_IN_GGGG(z0, z1, x2, s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(43) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule P_IN_GGGG(s(X1), X, .(0, []), Y) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), X, Y) we obtained the following new rules [LPAR04]:

   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), z2) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), z2),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), z2) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), z2))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))))
   (P_IN_GGGG(s(x0), z1, .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0))),P_IN_GGGG(s(x0), z1, .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0))))


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x2, x2), s(x3)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x2, s(s(0)))
   P_IN_GGGG(z0, z1, g(x2, x2), s(s(0))) -> P_IN_GGGG(z0, z1, x2, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), z2) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), z2)
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), z1, .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(45) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x2, x2), s(x3)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x2, s(s(0))) we obtained the following new rules [LPAR04]:

   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x0, x0), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x0, s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x0, x0), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x0, s(s(0))))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(x1)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(x1)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))))


----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(z0, z1, g(x2, x2), s(s(0))) -> P_IN_GGGG(z0, z1, x2, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), z2) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), z2)
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), z1, .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x0, x0), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x0, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(x1)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(47) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), z2) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), z2) we obtained the following new rules [LPAR04]:

   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))))


----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(z0, z1, g(x2, x2), s(s(0))) -> P_IN_GGGG(z0, z1, x2, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), z1, .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x0, x0), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x0, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(x1)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(49) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(x1)) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) we obtained the following new rules [LPAR04]:

   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))))


----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(z0, z1, g(x2, x2), s(s(0))) -> P_IN_GGGG(z0, z1, x2, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), z1, .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x0, x0), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x0, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(51) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule P_IN_GGGG(z0, z1, g(x2, x2), s(s(0))) -> P_IN_GGGG(z0, z1, x2, s(s(0))) we obtained the following new rules [LPAR04]:

   (P_IN_GGGG(x0, x1, g(g(y_2, y_3), g(y_2, y_3)), s(s(0))) -> P_IN_GGGG(x0, x1, g(y_2, y_3), s(s(0))),P_IN_GGGG(x0, x1, g(g(y_2, y_3), g(y_2, y_3)), s(s(0))) -> P_IN_GGGG(x0, x1, g(y_2, y_3), s(s(0))))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))))
   (P_IN_GGGG(s(y_0), x1, g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(y_0), x1, .(0, []), s(s(0))),P_IN_GGGG(s(y_0), x1, g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(y_0), x1, .(0, []), s(s(0))))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_0, y_1), g(y_0, y_1)), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_0, y_1), g(y_0, y_1)), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0))))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))))


----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), z1, .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x0, x0), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x0, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   P_IN_GGGG(x0, x1, g(g(y_2, y_3), g(y_2, y_3)), s(s(0))) -> P_IN_GGGG(x0, x1, g(y_2, y_3), s(s(0)))
   P_IN_GGGG(s(y_0), x1, g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(y_0), x1, .(0, []), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_0, y_1), g(y_0, y_1)), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(53) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule P_IN_GGGG(s(x0), z1, .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0))) we obtained the following new rules [LPAR04]:

   (P_IN_GGGG(s(x0), .(0, []), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))),P_IN_GGGG(s(x0), .(0, []), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))))
   (P_IN_GGGG(s(x0), g(y_0, y_1), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0))),P_IN_GGGG(s(x0), g(y_0, y_1), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0))))
   (P_IN_GGGG(s(x0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))),P_IN_GGGG(s(x0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))))
   (P_IN_GGGG(s(x0), g(g(y_2, y_3), g(y_4, y_5)), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0))),P_IN_GGGG(s(x0), g(g(y_2, y_3), g(y_4, y_5)), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0))))
   (P_IN_GGGG(s(x0), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))),P_IN_GGGG(s(x0), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))))


----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x0, x0), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x0, s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   P_IN_GGGG(x0, x1, g(g(y_2, y_3), g(y_2, y_3)), s(s(0))) -> P_IN_GGGG(x0, x1, g(y_2, y_3), s(s(0)))
   P_IN_GGGG(s(y_0), x1, g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(y_0), x1, .(0, []), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_0, y_1), g(y_0, y_1)), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), .(0, []), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   P_IN_GGGG(s(x0), g(y_0, y_1), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0)))
   P_IN_GGGG(s(x0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), g(g(y_2, y_3), g(y_4, y_5)), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0)))
   P_IN_GGGG(s(x0), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(55) TransformationProof (EQUIVALENT)
By forward instantiating [JAR06] the rule P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(x0, x0), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), x0, s(s(0))) we obtained the following new rules [LPAR04]:

   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_0, y_1), g(y_0, y_1)), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_0, y_1), g(y_0, y_1)), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0))))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(y_2, y_3), g(y_4, y_5)), g(g(y_2, y_3), g(y_4, y_5))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(y_2, y_3), g(y_4, y_5)), g(g(y_2, y_3), g(y_4, y_5))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0))))
   (P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, [])))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))),P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, [])))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))))


----------------------------------------

(56)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   P_IN_GGGG(x0, x1, g(g(y_2, y_3), g(y_2, y_3)), s(s(0))) -> P_IN_GGGG(x0, x1, g(y_2, y_3), s(s(0)))
   P_IN_GGGG(s(y_0), x1, g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(y_0), x1, .(0, []), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_0, y_1), g(y_0, y_1)), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), .(0, []), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   P_IN_GGGG(s(x0), g(y_0, y_1), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0)))
   P_IN_GGGG(s(x0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), g(g(y_2, y_3), g(y_4, y_5)), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0)))
   P_IN_GGGG(s(x0), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(y_2, y_3), g(y_4, y_5)), g(g(y_2, y_3), g(y_4, y_5))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, [])))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(57) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   P_IN_GGGG(s(x0), .(0, []), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
P_IN_GGGG(x1, x2, x3, x4)  =  x2

g(x1, x2)  =  g

.(x1, x2)  =  .

0  =  0

[]  =  []


Knuth-Bendix order [KBO] with precedence:. > g

and weight map:

   .=1
   g=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   P_IN_GGGG(x0, x1, g(g(y_2, y_3), g(y_2, y_3)), s(s(0))) -> P_IN_GGGG(x0, x1, g(y_2, y_3), s(s(0)))
   P_IN_GGGG(s(y_0), x1, g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(y_0), x1, .(0, []), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_0, y_1), g(y_0, y_1)), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), g(y_0, y_1), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0)))
   P_IN_GGGG(s(x0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), g(g(y_2, y_3), g(y_4, y_5)), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0)))
   P_IN_GGGG(s(x0), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(y_2, y_3), g(y_4, y_5)), g(g(y_2, y_3), g(y_4, y_5))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, [])))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(59) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   P_IN_GGGG(s(x0), g(g(y_2, y_3), g(y_4, y_5)), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0)))
   P_IN_GGGG(s(x0), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
P_IN_GGGG(x1, x2, x3, x4)  =  x2

g(x1, x2)  =  g(x2)

.(x1, x2)  =  .

0  =  0

[]  =  []


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   .=1
   g_1=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   P_IN_GGGG(x0, x1, g(g(y_2, y_3), g(y_2, y_3)), s(s(0))) -> P_IN_GGGG(x0, x1, g(y_2, y_3), s(s(0)))
   P_IN_GGGG(s(y_0), x1, g(.(0, []), .(0, [])), s(s(0))) -> P_IN_GGGG(s(y_0), x1, .(0, []), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_0, y_1), g(y_0, y_1)), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(x0), g(y_0, y_1), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(y_0, y_1), s(s(0)))
   P_IN_GGGG(s(x0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(y_2, y_3), g(y_4, y_5)), g(g(y_2, y_3), g(y_4, y_5))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(y_2, y_3), g(y_4, y_5)), s(s(0)))
   P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, [])))), s(s(0))) -> P_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(.(0, []), .(0, [])), g(.(0, []), .(0, []))), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(61) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p (s X1) X (. (0) ([])) Y)",
                "(p (s (0)) (g (. (0) ([])) (. (0) ([]))) X Y)"
            ],
            [
                "(p Z X (g Y Y) (s X2))",
                "(p Z X Y (s (s (0))))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "12": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(p T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(p T1 T2 T3 T4)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1 T2 T3 T4)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "18": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (s (0)) (g (. (0) ([])) (. (0) ([]))) T18 T19)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T18",
                        "T19"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "83": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T29 T30 T31 (s (s (0))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T29",
                        "T30",
                        "T31"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "84": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 12,
                "label": "PARALLEL"
            },
            {
                "from": 4,
                "to": 13,
                "label": "PARALLEL"
            },
            {
                "from": 12,
                "to": 18,
                "label": "EVAL with clause\np(s(X15), X16, .(0, []), X17) :- p(s(0), g(.(0, []), .(0, [])), X16, X17).\nand substitutionX15 -> T17,\nT1 -> s(T17),\nT2 -> T18,\nX16 -> T18,\nT3 -> .(0, []),\nT4 -> T19,\nX17 -> T19"
            },
            {
                "from": 12,
                "to": 19,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 13,
                "to": 83,
                "label": "EVAL with clause\np(X29, X30, g(X31, X31), s(X32)) :- p(X29, X30, X31, s(s(0))).\nand substitutionT1 -> T29,\nX29 -> T29,\nT2 -> T30,\nX30 -> T30,\nX31 -> T31,\nT3 -> g(T31, T31),\nX32 -> T32,\nT4 -> s(T32)"
            },
            {
                "from": 13,
                "to": 84,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 18,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> s(0)\nT2 -> g(.(0, []), .(0, []))\nT3 -> T18\nT4 -> T19"
            },
            {
                "from": 83,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T29\nT2 -> T30\nT3 -> T31\nT4 -> s(s(0))"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(62)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f3_in(s(T17), T18, .(0, []), T19) -> U1(f3_in(s(0), g(.(0, []), .(0, [])), T18, T19), s(T17), T18, .(0, []), T19)
   U1(f3_out1, s(T17), T18, .(0, []), T19) -> f3_out1
   f3_in(T29, T30, g(T31, T31), s(T32)) -> U2(f3_in(T29, T30, T31, s(s(0))), T29, T30, g(T31, T31), s(T32))
   U2(f3_out1, T29, T30, g(T31, T31), s(T32)) -> f3_out1

Q is empty.

----------------------------------------

(63) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(64)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f3_in(s(T17), T18, .(0, []), T19) -> U1(f3_in(s(0), g(.(0, []), .(0, [])), T18, T19), s(T17), T18, .(0, []), T19)
   U1(f3_out1, s(T17), T18, .(0, []), T19) -> f3_out1
   f3_in(T29, T30, g(T31, T31), s(T32)) -> U2(f3_in(T29, T30, T31, s(s(0))), T29, T30, g(T31, T31), s(T32))
   U2(f3_out1, T29, T30, g(T31, T31), s(T32)) -> f3_out1

The set Q consists of the following terms:

   f3_in(s(x0), x1, .(0, []), x2)
   U1(f3_out1, s(x0), x1, .(0, []), x2)
   f3_in(x0, x1, g(x2, x2), s(x3))
   U2(f3_out1, x0, x1, g(x2, x2), s(x3))


----------------------------------------

(65) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(66)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F3_IN(s(T17), T18, .(0, []), T19) -> U1^1(f3_in(s(0), g(.(0, []), .(0, [])), T18, T19), s(T17), T18, .(0, []), T19)
   F3_IN(s(T17), T18, .(0, []), T19) -> F3_IN(s(0), g(.(0, []), .(0, [])), T18, T19)
   F3_IN(T29, T30, g(T31, T31), s(T32)) -> U2^1(f3_in(T29, T30, T31, s(s(0))), T29, T30, g(T31, T31), s(T32))
   F3_IN(T29, T30, g(T31, T31), s(T32)) -> F3_IN(T29, T30, T31, s(s(0)))

The TRS R consists of the following rules:

   f3_in(s(T17), T18, .(0, []), T19) -> U1(f3_in(s(0), g(.(0, []), .(0, [])), T18, T19), s(T17), T18, .(0, []), T19)
   U1(f3_out1, s(T17), T18, .(0, []), T19) -> f3_out1
   f3_in(T29, T30, g(T31, T31), s(T32)) -> U2(f3_in(T29, T30, T31, s(s(0))), T29, T30, g(T31, T31), s(T32))
   U2(f3_out1, T29, T30, g(T31, T31), s(T32)) -> f3_out1

The set Q consists of the following terms:

   f3_in(s(x0), x1, .(0, []), x2)
   U1(f3_out1, s(x0), x1, .(0, []), x2)
   f3_in(x0, x1, g(x2, x2), s(x3))
   U2(f3_out1, x0, x1, g(x2, x2), s(x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(67) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 2 less nodes.
----------------------------------------

(68)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F3_IN(T29, T30, g(T31, T31), s(T32)) -> F3_IN(T29, T30, T31, s(s(0)))
   F3_IN(s(T17), T18, .(0, []), T19) -> F3_IN(s(0), g(.(0, []), .(0, [])), T18, T19)

The TRS R consists of the following rules:

   f3_in(s(T17), T18, .(0, []), T19) -> U1(f3_in(s(0), g(.(0, []), .(0, [])), T18, T19), s(T17), T18, .(0, []), T19)
   U1(f3_out1, s(T17), T18, .(0, []), T19) -> f3_out1
   f3_in(T29, T30, g(T31, T31), s(T32)) -> U2(f3_in(T29, T30, T31, s(s(0))), T29, T30, g(T31, T31), s(T32))
   U2(f3_out1, T29, T30, g(T31, T31), s(T32)) -> f3_out1

The set Q consists of the following terms:

   f3_in(s(x0), x1, .(0, []), x2)
   U1(f3_out1, s(x0), x1, .(0, []), x2)
   f3_in(x0, x1, g(x2, x2), s(x3))
   U2(f3_out1, x0, x1, g(x2, x2), s(x3))

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(69) MNOCProof (EQUIVALENT)
We use the modular non-overlap check [FROCOS05] to decrease Q to the empty set.
----------------------------------------

(70)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F3_IN(T29, T30, g(T31, T31), s(T32)) -> F3_IN(T29, T30, T31, s(s(0)))
   F3_IN(s(T17), T18, .(0, []), T19) -> F3_IN(s(0), g(.(0, []), .(0, [])), T18, T19)

The TRS R consists of the following rules:

   f3_in(s(T17), T18, .(0, []), T19) -> U1(f3_in(s(0), g(.(0, []), .(0, [])), T18, T19), s(T17), T18, .(0, []), T19)
   U1(f3_out1, s(T17), T18, .(0, []), T19) -> f3_out1
   f3_in(T29, T30, g(T31, T31), s(T32)) -> U2(f3_in(T29, T30, T31, s(s(0))), T29, T30, g(T31, T31), s(T32))
   U2(f3_out1, T29, T30, g(T31, T31), s(T32)) -> f3_out1

Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(71) NonLoopProof (COMPLETE)
By Theorem 8 [NONLOOP] we deduce infiniteness of the QDP.
We apply the theorem with m = 1, b = 0, 
?' = [ ], and ?' = [ ] on the rule
F3_IN(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))[ ]^n[x0 / 0, x2 / .(0, []), x1 / s(0)] -> F3_IN(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))[ ]^n[x0 / 0, x2 / .(0, []), x1 / s(0)]
This rule is correct for the QDP as the following derivation shows:

F3_IN(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))[ ]^n[x0 / 0, x2 / .(0, []), x1 / s(0)] -> F3_IN(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))[ ]^n[x0 / 0, x2 / .(0, []), x1 / s(0)]
    by Equivalency by Simplifying Mu with mu1: [x0 / 0, x2 / .(0, []), x1 / s(0)] mu2: [x0 / 0, x2 / .(0, []), x1 / s(0)]
    intermediate steps: Equiv Smu (lhs) - Instantiate mu - Instantiation
    F3_IN(s(x0), g(y0, y0), .(0, []), s(y2))[ ]^n[ ] -> F3_IN(s(0), g(.(0, []), .(0, [])), y0, s(s(0)))[ ]^n[ ]
        by Narrowing at position: []
        intermediate steps: Instantiation - Instantiation - Instantiation - Instantiation
        F3_IN(s(T17), T18, .(0, []), T19)[ ]^n[ ] -> F3_IN(s(0), g(.(0, []), .(0, [])), T18, T19)[ ]^n[ ]
            by Rule from TRS P

        intermediate steps: Instantiation - Instantiation - Instantiation - Instantiation
        F3_IN(T29, T30, g(T31, T31), s(T32))[ ]^n[ ] -> F3_IN(T29, T30, T31, s(s(0)))[ ]^n[ ]
            by Rule from TRS P
----------------------------------------

(72)
NO

----------------------------------------

(73) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p (s X1) X (. (0) ([])) Y)",
                "(p (s (0)) (g (. (0) ([])) (. (0) ([]))) X Y)"
            ],
            [
                "(p Z X (g Y Y) (s X2))",
                "(p Z X Y (s (s (0))))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "11": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(p T1 T2 T3 T4)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1 T2 T3 T4)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(p T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "81": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (s (0)) (g (. (0) ([])) (. (0) ([]))) T18 T19)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T18",
                        "T19"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "82": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "151": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T29 T30 T31 (s (s (0))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T29",
                        "T30",
                        "T31"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "152": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 11,
                "label": "CASE"
            },
            {
                "from": 11,
                "to": 14,
                "label": "PARALLEL"
            },
            {
                "from": 11,
                "to": 15,
                "label": "PARALLEL"
            },
            {
                "from": 14,
                "to": 81,
                "label": "EVAL with clause\np(s(X15), X16, .(0, []), X17) :- p(s(0), g(.(0, []), .(0, [])), X16, X17).\nand substitutionX15 -> T17,\nT1 -> s(T17),\nT2 -> T18,\nX16 -> T18,\nT3 -> .(0, []),\nT4 -> T19,\nX17 -> T19"
            },
            {
                "from": 14,
                "to": 82,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 15,
                "to": 151,
                "label": "EVAL with clause\np(X29, X30, g(X31, X31), s(X32)) :- p(X29, X30, X31, s(s(0))).\nand substitutionT1 -> T29,\nX29 -> T29,\nT2 -> T30,\nX30 -> T30,\nX31 -> T31,\nT3 -> g(T31, T31),\nX32 -> T32,\nT4 -> s(T32)"
            },
            {
                "from": 15,
                "to": 152,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 81,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> s(0)\nT2 -> g(.(0, []), .(0, []))\nT3 -> T18\nT4 -> T19"
            },
            {
                "from": 151,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T29\nT2 -> T30\nT3 -> T31\nT4 -> s(s(0))"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(74)
Obligation:
Rules:
f15_in(T29, T30, g(T31, T31), s(T32)) -> f151_in(T29, T30, T31) :|: TRUE
f151_out(x, x1, x2) -> f15_out(x, x1, g(x2, x2), s(x3)) :|: TRUE
f15_in(T1, T2, T3, T4) -> f152_in :|: TRUE
f152_out -> f15_out(x4, x5, x6, x7) :|: TRUE
f11_out(x8, x9, x10, x11) -> f2_out(x8, x9, x10, x11) :|: TRUE
f2_in(x12, x13, x14, x15) -> f11_in(x12, x13, x14, x15) :|: TRUE
f15_out(x16, x17, x18, x19) -> f11_out(x16, x17, x18, x19) :|: TRUE
f14_out(x20, x21, x22, x23) -> f11_out(x20, x21, x22, x23) :|: TRUE
f11_in(x24, x25, x26, x27) -> f14_in(x24, x25, x26, x27) :|: TRUE
f11_in(x28, x29, x30, x31) -> f15_in(x28, x29, x30, x31) :|: TRUE
f2_out(x32, x33, x34, s(s(0))) -> f151_out(x32, x33, x34) :|: TRUE
f151_in(x35, x36, x37) -> f2_in(x35, x36, x37, s(s(0))) :|: TRUE
f2_out(s(0), g(.(0, []), .(0, [])), T18, T19) -> f81_out(T18, T19) :|: TRUE
f81_in(x38, x39) -> f2_in(s(0), g(.(0, []), .(0, [])), x38, x39) :|: TRUE
f81_out(x40, x41) -> f14_out(s(x42), x40, .(0, []), x41) :|: TRUE
f82_out -> f14_out(x43, x44, x45, x46) :|: TRUE
f14_in(x47, x48, x49, x50) -> f82_in :|: TRUE
f14_in(s(x51), x52, .(0, []), x53) -> f81_in(x52, x53) :|: TRUE
Start term: f2_in(T1, T2, T3, T4)

----------------------------------------

(75) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f15_in(T29, T30, g(T31, T31), s(T32)) -> f151_in(T29, T30, T31) :|: TRUE
f2_in(x12, x13, x14, x15) -> f11_in(x12, x13, x14, x15) :|: TRUE
f11_in(x24, x25, x26, x27) -> f14_in(x24, x25, x26, x27) :|: TRUE
f11_in(x28, x29, x30, x31) -> f15_in(x28, x29, x30, x31) :|: TRUE
f151_in(x35, x36, x37) -> f2_in(x35, x36, x37, s(s(0))) :|: TRUE
f81_in(x38, x39) -> f2_in(s(0), g(.(0, []), .(0, [])), x38, x39) :|: TRUE
f14_in(s(x51), x52, .(0, []), x53) -> f81_in(x52, x53) :|: TRUE


----------------------------------------

(76)
Obligation:
Rules:
f15_in(T29, T30, g(T31, T31), s(T32)) -> f151_in(T29, T30, T31) :|: TRUE
f2_in(x12, x13, x14, x15) -> f11_in(x12, x13, x14, x15) :|: TRUE
f11_in(x24, x25, x26, x27) -> f14_in(x24, x25, x26, x27) :|: TRUE
f11_in(x28, x29, x30, x31) -> f15_in(x28, x29, x30, x31) :|: TRUE
f151_in(x35, x36, x37) -> f2_in(x35, x36, x37, s(s(0))) :|: TRUE
f81_in(x38, x39) -> f2_in(s(0), g(.(0, []), .(0, [])), x38, x39) :|: TRUE
f14_in(s(x51), x52, .(0, []), x53) -> f81_in(x52, x53) :|: TRUE

----------------------------------------

(77) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(78)
Obligation:
Rules:
f2_in(x12:0, x13:0, g(T31:0, T31:0), s(T32:0)) -> f2_in(x12:0, x13:0, T31:0, s(s(0))) :|: TRUE
f2_in(s(x), x1, .(x2, []), x3) -> f2_in(s(0), g(.(0, []), .(0, [])), x1, x3) :|: TRUE && x2 = 0

----------------------------------------

(79) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(80)
Obligation:
Rules:
f2_in(x12:0, x13:0, g(T31:0, T31:0), s(T32:0)) -> f2_in(x12:0, x13:0, T31:0, s(s(0))) :|: TRUE
f2_in(s(x), x1, .(x2, []), x3) -> f2_in(s(0), g(.(0, []), .(0, [])), x1, x3) :|: TRUE && x2 = 0

----------------------------------------

(81) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f2_in(x12:0, x13:0, g(T31:0, T31:0), s(T32:0)) -> f2_in(x12:0, x13:0, T31:0, s(s(0))) :|: TRUE
(2) f2_in(s(x), x1, .(x2, []), x3) -> f2_in(s(0), g(.(0, []), .(0, [])), x1, x3) :|: TRUE && x2 = 0

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(82)
Obligation:

Termination digraph:
Nodes:
(1) f2_in(x12:0, x13:0, g(T31:0, T31:0), s(T32:0)) -> f2_in(x12:0, x13:0, T31:0, s(s(0))) :|: TRUE
(2) f2_in(s(x), x1, .(x2, []), x3) -> f2_in(s(0), g(.(0, []), .(0, [])), x1, x3) :|: TRUE && x2 = 0

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(83) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(84)
Obligation:
Rules:
f2_in(s(x:0), x1:0, .(cons_0, []), x3:0) -> f2_in(s(0), g(.(0, []), .(0, [])), x1:0, x3:0) :|: TRUE && cons_0 = 0
f2_in(x12:0:0, x13:0:0, g(T31:0:0, T31:0:0), s(T32:0:0)) -> f2_in(x12:0:0, x13:0:0, T31:0:0, s(s(0))) :|: TRUE

----------------------------------------

(85) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   .(x1, x2) -> .(x1)

----------------------------------------

(86)
Obligation:
Rules:
f2_in(s(x:0), x1:0, .(cons_0), x3:0) -> f2_in(s(0), g(.(0), .(0)), x1:0, x3:0) :|: TRUE && cons_0 = 0
f2_in(x12:0:0, x13:0:0, g(T31:0:0, T31:0:0), s(T32:0:0)) -> f2_in(x12:0:0, x13:0:0, T31:0:0, s(s(0))) :|: TRUE

----------------------------------------

(87) IRSwTToIntTRSProof (SOUND)
Applied path-length measure to transform intTRS with terms to intTRS.
----------------------------------------

(88)
Obligation:
Rules:
f2_in(s(x), x1, .(cons_0), x3) -> f2_in(s(0), g(.(0), .(0)), x1, x3) :|: TRUE && cons_0 = 0
f2_in(x4, x5, g(x6, x6), s(x7)) -> f2_in(x4, x5, x6, s(s(0))) :|: TRUE

----------------------------------------

(89) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(90)
Obligation:
Rules:
f2_in(s(x:0), x1:0, .(cons_0), x3:0) -> f2_in(s(0), g(.(0), .(0)), x1:0, x3:0) :|: TRUE && cons_0 = 0
f2_in(x4:0, x5:0, g(x6:0, x6:0), s(x7:0)) -> f2_in(x4:0, x5:0, x6:0, s(s(0))) :|: TRUE

----------------------------------------

(91) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p (s X1) X (. (0) ([])) Y)",
                "(p (s (0)) (g (. (0) ([])) (. (0) ([]))) X Y)"
            ],
            [
                "(p Z X (g Y Y) (s X2))",
                "(p Z X Y (s (s (0))))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "68": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(p (s (0)) (g (. (0) ([])) (. (0) ([]))) T9 T10)"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(p (s (0)) (g (. (0) ([])) (. (0) ([]))) T9 T10)"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p (s T8) T9 (. (0) ([])) T10)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T8",
                        "T9",
                        "T10"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "150": {
                "goal": [{
                    "clause": 1,
                    "scope": 3,
                    "term": "(p T32 T33 T34 (s (s (0))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T32",
                        "T33",
                        "T34"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "153": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (s (0)) (g (. (0) ([])) (. (0) ([]))) T45 (s (s (0))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T45"],
                    "free": [],
                    "exprvars": []
                }
            },
            "154": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "155": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T52 T53 T54 (s (s (0))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T52",
                        "T53",
                        "T54"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "156": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "71": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(p (s (0)) (g (. (0) ([])) (. (0) ([]))) T9 T10)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T9",
                        "T10"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "73": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(p (s (0)) (g (. (0) ([])) (. (0) ([]))) T9 T10)"
                    },
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p (s T8) T9 (. (0) ([])) T10)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T8",
                        "T9",
                        "T10"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "75": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (s (0)) (g (. (0) ([])) (. (0) ([]))) (g (. (0) ([])) (. (0) ([]))) T15)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T15"],
                    "free": [],
                    "exprvars": []
                }
            },
            "76": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "77": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(p (s (0)) (g (. (0) ([])) (. (0) ([]))) T9 T10)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T9",
                        "T10"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "78": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": 2,
                        "term": null
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p (s T8) T9 (. (0) ([])) T10)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T8",
                        "T9",
                        "T10"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "79": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p (s (0)) (g (. (0) ([])) (. (0) ([]))) T24 (s (s (0))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T24"],
                    "free": [],
                    "exprvars": []
                }
            },
            "16": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(p (s (0)) (g (. (0) ([])) (. (0) ([]))) T9 T10)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p (s T8) T9 (. (0) ([])) T10)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T8",
                        "T9",
                        "T10"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(p T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(p T1 T2 T3 T4)",
                        "(p (s X6) X7 (. (0) ([])) X8)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [
                        "X6",
                        "X7",
                        "X8"
                    ],
                    "exprvars": []
                }
            },
            "140": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(p (s T8) T9 (. (0) ([])) T10)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T8",
                        "T9",
                        "T10"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "141": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T1 T2 T3 T4)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "146": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p T32 T33 T34 (s (s (0))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T32",
                        "T33",
                        "T34"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "147": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(p T1 T2 T3 T4)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(p T1 T2 T3 T4)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T4",
                        "T1",
                        "T2",
                        "T3"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "148": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 3,
                        "term": "(p T32 T33 T34 (s (s (0))))"
                    },
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(p T32 T33 T34 (s (s (0))))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T32",
                        "T33",
                        "T34"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "149": {
                "goal": [{
                    "clause": 0,
                    "scope": 3,
                    "term": "(p T32 T33 T34 (s (s (0))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T32",
                        "T33",
                        "T34"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "80": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 16,
                "label": "EVAL with clause\np(s(X6), X7, .(0, []), X8) :- p(s(0), g(.(0, []), .(0, [])), X7, X8).\nand substitutionX6 -> T8,\nT1 -> s(T8),\nT2 -> T9,\nX7 -> T9,\nT3 -> .(0, []),\nT4 -> T10,\nX8 -> T10"
            },
            {
                "from": 5,
                "to": 17,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 16,
                "to": 68,
                "label": "CASE"
            },
            {
                "from": 17,
                "to": 146,
                "label": "EVAL with clause\np(X58, X59, g(X60, X60), s(X61)) :- p(X58, X59, X60, s(s(0))).\nand substitutionT1 -> T32,\nX58 -> T32,\nT2 -> T33,\nX59 -> T33,\nX60 -> T34,\nT3 -> g(T34, T34),\nX61 -> T35,\nT4 -> s(T35)"
            },
            {
                "from": 17,
                "to": 147,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 68,
                "to": 71,
                "label": "PARALLEL"
            },
            {
                "from": 68,
                "to": 73,
                "label": "PARALLEL"
            },
            {
                "from": 71,
                "to": 75,
                "label": "EVAL with clause\np(s(X21), X22, .(0, []), X23) :- p(s(0), g(.(0, []), .(0, [])), X22, X23).\nand substitutionX21 -> 0,\nX22 -> g(.(0, []), .(0, [])),\nT9 -> .(0, []),\nT10 -> T15,\nX23 -> T15"
            },
            {
                "from": 71,
                "to": 76,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 73,
                "to": 77,
                "label": "PARALLEL"
            },
            {
                "from": 73,
                "to": 78,
                "label": "PARALLEL"
            },
            {
                "from": 75,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> s(0)\nT2 -> g(.(0, []), .(0, []))\nT3 -> g(.(0, []), .(0, []))\nT4 -> T15"
            },
            {
                "from": 77,
                "to": 79,
                "label": "EVAL with clause\np(X43, X44, g(X45, X45), s(X46)) :- p(X43, X44, X45, s(s(0))).\nand substitutionX43 -> s(0),\nX44 -> g(.(0, []), .(0, [])),\nX45 -> T24,\nT9 -> g(T24, T24),\nX46 -> T25,\nT10 -> s(T25)"
            },
            {
                "from": 77,
                "to": 80,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 78,
                "to": 140,
                "label": "FAILURE"
            },
            {
                "from": 79,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> s(0)\nT2 -> g(.(0, []), .(0, []))\nT3 -> T24\nT4 -> s(s(0))"
            },
            {
                "from": 140,
                "to": 141,
                "label": "BACKTRACK\nfor clause: p(Z, X, g(Y, Y), s(X2)) :- p(Z, X, Y, s(s(0)))because of non-unification"
            },
            {
                "from": 146,
                "to": 148,
                "label": "CASE"
            },
            {
                "from": 148,
                "to": 149,
                "label": "PARALLEL"
            },
            {
                "from": 148,
                "to": 150,
                "label": "PARALLEL"
            },
            {
                "from": 149,
                "to": 153,
                "label": "EVAL with clause\np(s(X74), X75, .(0, []), X76) :- p(s(0), g(.(0, []), .(0, [])), X75, X76).\nand substitutionX74 -> T44,\nT32 -> s(T44),\nT33 -> T45,\nX75 -> T45,\nT34 -> .(0, []),\nX76 -> s(s(0))"
            },
            {
                "from": 149,
                "to": 154,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 150,
                "to": 155,
                "label": "EVAL with clause\np(X88, X89, g(X90, X90), s(X91)) :- p(X88, X89, X90, s(s(0))).\nand substitutionT32 -> T52,\nX88 -> T52,\nT33 -> T53,\nX89 -> T53,\nX90 -> T54,\nT34 -> g(T54, T54),\nX91 -> s(0)"
            },
            {
                "from": 150,
                "to": 156,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 153,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> s(0)\nT2 -> g(.(0, []), .(0, []))\nT3 -> T45\nT4 -> s(s(0))"
            },
            {
                "from": 155,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T52\nT2 -> T53\nT3 -> T54\nT4 -> s(s(0))"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(92)
Obligation:
Triples:

pA(s(X1), .(0, []), .(0, []), X2) :- pA(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), X2).
pA(s(X1), g(X2, X2), .(0, []), s(X3)) :- pA(s(0), g(.(0, []), .(0, [])), X2, s(s(0))).
pA(s(X1), X2, g(.(0, []), .(0, [])), s(X3)) :- pA(s(0), g(.(0, []), .(0, [])), X2, s(s(0))).
pA(X1, X2, g(g(X3, X3), g(X3, X3)), s(X4)) :- pA(X1, X2, X3, s(s(0))).

Clauses:

pcA(s(X1), .(0, []), .(0, []), X2) :- pcA(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), X2).
pcA(s(X1), g(X2, X2), .(0, []), s(X3)) :- pcA(s(0), g(.(0, []), .(0, [])), X2, s(s(0))).
pcA(s(X1), X2, g(.(0, []), .(0, [])), s(X3)) :- pcA(s(0), g(.(0, []), .(0, [])), X2, s(s(0))).
pcA(X1, X2, g(g(X3, X3), g(X3, X3)), s(X4)) :- pcA(X1, X2, X3, s(s(0))).

Afs:

pA(x1, x2, x3, x4)  =  pA(x1, x2, x3, x4)


----------------------------------------

(93) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

pA_in_4: (b,b,b,b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_GGGG(s(X1), .(0, []), .(0, []), X2) -> U1_GGGG(X1, X2, pA_in_gggg(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), X2))
   PA_IN_GGGG(s(X1), .(0, []), .(0, []), X2) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), X2)
   PA_IN_GGGG(s(X1), g(X2, X2), .(0, []), s(X3)) -> U2_GGGG(X1, X2, X3, pA_in_gggg(s(0), g(.(0, []), .(0, [])), X2, s(s(0))))
   PA_IN_GGGG(s(X1), g(X2, X2), .(0, []), s(X3)) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), X2, s(s(0)))
   PA_IN_GGGG(s(X1), X2, g(.(0, []), .(0, [])), s(X3)) -> U3_GGGG(X1, X2, X3, pA_in_gggg(s(0), g(.(0, []), .(0, [])), X2, s(s(0))))
   PA_IN_GGGG(s(X1), X2, g(.(0, []), .(0, [])), s(X3)) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), X2, s(s(0)))
   PA_IN_GGGG(X1, X2, g(g(X3, X3), g(X3, X3)), s(X4)) -> U4_GGGG(X1, X2, X3, X4, pA_in_gggg(X1, X2, X3, s(s(0))))
   PA_IN_GGGG(X1, X2, g(g(X3, X3), g(X3, X3)), s(X4)) -> PA_IN_GGGG(X1, X2, X3, s(s(0)))

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(94)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_GGGG(s(X1), .(0, []), .(0, []), X2) -> U1_GGGG(X1, X2, pA_in_gggg(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), X2))
   PA_IN_GGGG(s(X1), .(0, []), .(0, []), X2) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), X2)
   PA_IN_GGGG(s(X1), g(X2, X2), .(0, []), s(X3)) -> U2_GGGG(X1, X2, X3, pA_in_gggg(s(0), g(.(0, []), .(0, [])), X2, s(s(0))))
   PA_IN_GGGG(s(X1), g(X2, X2), .(0, []), s(X3)) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), X2, s(s(0)))
   PA_IN_GGGG(s(X1), X2, g(.(0, []), .(0, [])), s(X3)) -> U3_GGGG(X1, X2, X3, pA_in_gggg(s(0), g(.(0, []), .(0, [])), X2, s(s(0))))
   PA_IN_GGGG(s(X1), X2, g(.(0, []), .(0, [])), s(X3)) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), X2, s(s(0)))
   PA_IN_GGGG(X1, X2, g(g(X3, X3), g(X3, X3)), s(X4)) -> U4_GGGG(X1, X2, X3, X4, pA_in_gggg(X1, X2, X3, s(s(0))))
   PA_IN_GGGG(X1, X2, g(g(X3, X3), g(X3, X3)), s(X4)) -> PA_IN_GGGG(X1, X2, X3, s(s(0)))

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(95) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 4 less nodes.
----------------------------------------

(96)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PA_IN_GGGG(s(X1), .(0, []), .(0, []), X2) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), X2)
   PA_IN_GGGG(s(X1), X2, g(.(0, []), .(0, [])), s(X3)) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), X2, s(s(0)))
   PA_IN_GGGG(s(X1), g(X2, X2), .(0, []), s(X3)) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), X2, s(s(0)))
   PA_IN_GGGG(X1, X2, g(g(X3, X3), g(X3, X3)), s(X4)) -> PA_IN_GGGG(X1, X2, X3, s(s(0)))

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(97) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(98)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_GGGG(s(X1), .(0, []), .(0, []), X2) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), X2)
   PA_IN_GGGG(s(X1), X2, g(.(0, []), .(0, [])), s(X3)) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), X2, s(s(0)))
   PA_IN_GGGG(s(X1), g(X2, X2), .(0, []), s(X3)) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), X2, s(s(0)))
   PA_IN_GGGG(X1, X2, g(g(X3, X3), g(X3, X3)), s(X4)) -> PA_IN_GGGG(X1, X2, X3, s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(99) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule PA_IN_GGGG(s(X1), .(0, []), .(0, []), X2) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), X2) we obtained the following new rules [LPAR04]:

   (PA_IN_GGGG(s(x0), .(0, []), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))),PA_IN_GGGG(s(x0), .(0, []), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))))


----------------------------------------

(100)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_GGGG(s(X1), X2, g(.(0, []), .(0, [])), s(X3)) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), X2, s(s(0)))
   PA_IN_GGGG(s(X1), g(X2, X2), .(0, []), s(X3)) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), X2, s(s(0)))
   PA_IN_GGGG(X1, X2, g(g(X3, X3), g(X3, X3)), s(X4)) -> PA_IN_GGGG(X1, X2, X3, s(s(0)))
   PA_IN_GGGG(s(x0), .(0, []), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(101) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule PA_IN_GGGG(s(X1), X2, g(.(0, []), .(0, [])), s(X3)) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), X2, s(s(0))) we obtained the following new rules [LPAR04]:

   (PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))),PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))))
   (PA_IN_GGGG(s(x0), z1, g(.(0, []), .(0, [])), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0))),PA_IN_GGGG(s(x0), z1, g(.(0, []), .(0, [])), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0))))


----------------------------------------

(102)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_GGGG(s(X1), g(X2, X2), .(0, []), s(X3)) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), X2, s(s(0)))
   PA_IN_GGGG(X1, X2, g(g(X3, X3), g(X3, X3)), s(X4)) -> PA_IN_GGGG(X1, X2, X3, s(s(0)))
   PA_IN_GGGG(s(x0), .(0, []), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   PA_IN_GGGG(s(x0), z1, g(.(0, []), .(0, [])), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(103) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule PA_IN_GGGG(s(X1), g(X2, X2), .(0, []), s(X3)) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), X2, s(s(0))) we obtained the following new rules [LPAR04]:

   (PA_IN_GGGG(s(x0), g(x1, x1), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), x1, s(s(0))),PA_IN_GGGG(s(x0), g(x1, x1), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), x1, s(s(0))))
   (PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))),PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))))


----------------------------------------

(104)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_GGGG(X1, X2, g(g(X3, X3), g(X3, X3)), s(X4)) -> PA_IN_GGGG(X1, X2, X3, s(s(0)))
   PA_IN_GGGG(s(x0), .(0, []), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   PA_IN_GGGG(s(x0), z1, g(.(0, []), .(0, [])), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0)))
   PA_IN_GGGG(s(x0), g(x1, x1), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), x1, s(s(0)))
   PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(105) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule PA_IN_GGGG(X1, X2, g(g(X3, X3), g(X3, X3)), s(X4)) -> PA_IN_GGGG(X1, X2, X3, s(s(0))) we obtained the following new rules [LPAR04]:

   (PA_IN_GGGG(z0, z1, g(g(x2, x2), g(x2, x2)), s(s(0))) -> PA_IN_GGGG(z0, z1, x2, s(s(0))),PA_IN_GGGG(z0, z1, g(g(x2, x2), g(x2, x2)), s(s(0))) -> PA_IN_GGGG(z0, z1, x2, s(s(0))))
   (PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(x2, x2), g(x2, x2)), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), x2, s(s(0))),PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(x2, x2), g(x2, x2)), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), x2, s(s(0))))


----------------------------------------

(106)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_GGGG(s(x0), .(0, []), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   PA_IN_GGGG(s(x0), z1, g(.(0, []), .(0, [])), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0)))
   PA_IN_GGGG(s(x0), g(x1, x1), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), x1, s(s(0)))
   PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   PA_IN_GGGG(z0, z1, g(g(x2, x2), g(x2, x2)), s(s(0))) -> PA_IN_GGGG(z0, z1, x2, s(s(0)))
   PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(x2, x2), g(x2, x2)), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), x2, s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(107) QDPOrderProof (EQUIVALENT)
We use the reduction pair processor [LPAR04,JAR06].


The following pairs can be oriented strictly and are deleted.

   PA_IN_GGGG(s(x0), .(0, []), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
The remaining pairs can at least be oriented weakly.
Used ordering:  Combined order from the following AFS and order.
PA_IN_GGGG(x1, x2, x3, x4)  =  x2

.(x1, x2)  =  .

0  =  0

[]  =  []

g(x1, x2)  =  g


Knuth-Bendix order [KBO] with precedence:trivial

and weight map:

   .=2
   g=1

The following usable rules [FROCOS05] with respect to the argument filtering of the ordering [JAR06] were oriented:
none


----------------------------------------

(108)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   PA_IN_GGGG(s(x0), z1, g(.(0, []), .(0, [])), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0)))
   PA_IN_GGGG(s(x0), g(x1, x1), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), x1, s(s(0)))
   PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))
   PA_IN_GGGG(z0, z1, g(g(x2, x2), g(x2, x2)), s(s(0))) -> PA_IN_GGGG(z0, z1, x2, s(s(0)))
   PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(x2, x2), g(x2, x2)), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), x2, s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(109) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   PA_IN_GGGG(z0, z1, g(g(x2, x2), g(x2, x2)), s(s(0))) -> PA_IN_GGGG(z0, z1, x2, s(s(0)))
   PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(g(x2, x2), g(x2, x2)), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), x2, s(s(0)))


Used ordering: Polynomial interpretation [POLO]:

   POL(.(x_1, x_2)) = x_1 + 2*x_2
   POL(0) = 0
   POL(PA_IN_GGGG(x_1, x_2, x_3, x_4)) = 2*x_1 + x_2 + x_3 + x_4
   POL([]) = 0
   POL(g(x_1, x_2)) = 1 + x_1 + x_2
   POL(s(x_1)) = x_1


----------------------------------------

(110)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   PA_IN_GGGG(s(x0), z1, g(.(0, []), .(0, [])), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0)))
   PA_IN_GGGG(s(x0), g(x1, x1), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), x1, s(s(0)))
   PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(111) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule PA_IN_GGGG(s(x0), z1, g(.(0, []), .(0, [])), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), z1, s(s(0))) we obtained the following new rules [LPAR04]:

   (PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))),PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))))


----------------------------------------

(112)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))
   PA_IN_GGGG(s(x0), g(x1, x1), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), x1, s(s(0)))
   PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(113) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 2 SCCs.
----------------------------------------

(114)
Complex Obligation (AND)

----------------------------------------

(115)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(116) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) evaluates to  t =PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0)))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))) to PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), g(.(0, []), .(0, [])), s(s(0))).




----------------------------------------

(117)
NO

----------------------------------------

(118)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_GGGG(s(x0), g(x1, x1), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), x1, s(s(0)))
   PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(119) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule PA_IN_GGGG(s(x0), g(x1, x1), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), x1, s(s(0))) we obtained the following new rules [LPAR04]:

   (PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))),PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))))


----------------------------------------

(120)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0))) -> PA_IN_GGGG(s(0), g(.(0, []), .(0, [])), .(0, []), s(s(0)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.