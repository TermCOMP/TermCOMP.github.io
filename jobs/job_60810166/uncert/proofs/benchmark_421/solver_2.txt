WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_insertsort_3/4,eval_insertsort_4/5,eval_insertsort_bb3_in/4,eval_insertsort_bb4_in/4,eval_insertsort_bb5_in/5]
1. recursive  : [eval_insertsort_0/3,eval_insertsort_1/4,eval_insertsort__critedge_in/5,eval_insertsort_bb1_in/3,eval_insertsort_bb2_in/3,eval_insertsort_bb3_in_loop_cont/6]
2. non_recursive  : [eval_insertsort_stop/1]
3. non_recursive  : [eval_insertsort_bb6_in/1]
4. non_recursive  : [eval_insertsort_bb1_in_loop_cont/2]
5. non_recursive  : [eval_insertsort_bb0_in/2]
6. non_recursive  : [eval_insertsort_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_insertsort_bb3_in/4
1. SCC is partially evaluated into eval_insertsort_bb1_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_insertsort_bb0_in/2
6. SCC is partially evaluated into eval_insertsort_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_insertsort_bb3_in/4 
* CE 5 is refined into CE [8] 
* CE 7 is refined into CE [9] 
* CE 6 is refined into CE [10] 


### Cost equations --> "Loop" of eval_insertsort_bb3_in/4 
* CEs [10] --> Loop 8 
* CEs [8] --> Loop 9 
* CEs [9] --> Loop 10 

### Ranking functions of CR eval_insertsort_bb3_in(V_1,V_j_0,B,C) 
* RF of phase [8]: [V_j_0+1]

#### Partial ranking functions of CR eval_insertsort_bb3_in(V_1,V_j_0,B,C) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V_j_0+1


### Specialization of cost equations eval_insertsort_bb1_in/3 
* CE 4 is refined into CE [11] 
* CE 3 is refined into CE [12,13,14] 


### Cost equations --> "Loop" of eval_insertsort_bb1_in/3 
* CEs [14] --> Loop 11 
* CEs [12,13] --> Loop 12 
* CEs [11] --> Loop 13 

### Ranking functions of CR eval_insertsort_bb1_in(V_length,V_i_0,B) 
* RF of phase [11,12]: [V_length-V_i_0]

#### Partial ranking functions of CR eval_insertsort_bb1_in(V_length,V_i_0,B) 
* Partial RF of phase [11,12]:
  - RF of loop [11:1,12:1]:
    V_length-V_i_0


### Specialization of cost equations eval_insertsort_bb0_in/2 
* CE 2 is refined into CE [15,16] 


### Cost equations --> "Loop" of eval_insertsort_bb0_in/2 
* CEs [16] --> Loop 14 
* CEs [15] --> Loop 15 

### Ranking functions of CR eval_insertsort_bb0_in(V_length,B) 

#### Partial ranking functions of CR eval_insertsort_bb0_in(V_length,B) 


### Specialization of cost equations eval_insertsort_start/2 
* CE 1 is refined into CE [17,18] 


### Cost equations --> "Loop" of eval_insertsort_start/2 
* CEs [18] --> Loop 16 
* CEs [17] --> Loop 17 

### Ranking functions of CR eval_insertsort_start(V_length,B) 

#### Partial ranking functions of CR eval_insertsort_start(V_length,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_insertsort_bb3_in(V_1,V_j_0,B,C):
* Chain [[8],10]: 1*it(8)+0
  Such that:it(8) =< V_j_0+1

  with precondition: [B=2,C+1=0,V_j_0>=0] 

* Chain [[8],9]: 1*it(8)+0
  Such that:it(8) =< V_j_0-C

  with precondition: [B=2,C>=0,V_j_0>=C+1] 

* Chain [9]: 0
  with precondition: [B=2,V_j_0=C,V_j_0>=0] 


#### Cost of chains of eval_insertsort_bb1_in(V_length,V_i_0,B):
* Chain [[11,12],13]: 2*it(11)+1*s(5)+1*s(6)+0
  Such that:aux(1) =< V_length
aux(5) =< V_length-V_i_0
it(11) =< aux(5)
aux(2) =< aux(1)
s(5) =< it(11)*aux(1)
s(6) =< it(11)*aux(2)

  with precondition: [B=3,V_i_0>=1,V_length>=V_i_0+1] 

* Chain [13]: 0
  with precondition: [B=3,V_i_0>=1,V_i_0>=V_length] 


#### Cost of chains of eval_insertsort_bb0_in(V_length,B):
* Chain [15]: 0
  with precondition: [1>=V_length] 

* Chain [14]: 2*s(9)+1*s(11)+1*s(12)+0
  Such that:aux(6) =< V_length
s(9) =< aux(6)
s(10) =< aux(6)
s(11) =< s(9)*aux(6)
s(12) =< s(9)*s(10)

  with precondition: [V_length>=2] 


#### Cost of chains of eval_insertsort_start(V_length,B):
* Chain [17]: 0
  with precondition: [1>=V_length] 

* Chain [16]: 2*s(14)+1*s(16)+1*s(17)+0
  Such that:s(13) =< V_length
s(14) =< s(13)
s(15) =< s(13)
s(16) =< s(14)*s(13)
s(17) =< s(14)*s(15)

  with precondition: [V_length>=2] 


Closed-form bounds of eval_insertsort_start(V_length,B): 
-------------------------------------
* Chain [17] with precondition: [1>=V_length] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [16] with precondition: [V_length>=2] 
    - Upper bound: 2*V_length*V_length+2*V_length 
    - Complexity: n^2 

### Maximum cost of eval_insertsort_start(V_length,B): nat(V_length)*2*nat(V_length)+nat(V_length)*2 
Asymptotic class: n^2 
* Total analysis performed in 52 ms.

