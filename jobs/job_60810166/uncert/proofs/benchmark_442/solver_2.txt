WORST_CASE(?,O(n^3))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_realshellsort_4/5,eval_realshellsort_5/6,eval_realshellsort_bb4_in/5,eval_realshellsort_bb5_in/5,eval_realshellsort_bb6_in/6]
1. recursive  : [eval_realshellsort_2/5,eval_realshellsort_3/6,eval_realshellsort__critedge_in/7,eval_realshellsort_bb2_in/5,eval_realshellsort_bb3_in/5,eval_realshellsort_bb4_in_loop_cont/8]
2. recursive  : [eval_realshellsort_bb1_in/3,eval_realshellsort_bb2_in_loop_cont/5,eval_realshellsort_bb7_in/4]
3. non_recursive  : [eval_realshellsort_stop/1]
4. non_recursive  : [eval_realshellsort_bb8_in/1]
5. non_recursive  : [eval_realshellsort_bb1_in_loop_cont/2]
6. non_recursive  : [eval_realshellsort_bb0_in/2]
7. non_recursive  : [eval_realshellsort_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_realshellsort_bb4_in/5
1. SCC is partially evaluated into eval_realshellsort_bb2_in/5
2. SCC is partially evaluated into eval_realshellsort_bb1_in/3
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_realshellsort_bb0_in/2
7. SCC is partially evaluated into eval_realshellsort_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_realshellsort_bb4_in/5 
* CE 11 is refined into CE [12] 
* CE 9 is refined into CE [13] 
* CE 10 is refined into CE [14] 


### Cost equations --> "Loop" of eval_realshellsort_bb4_in/5 
* CEs [14] --> Loop 12 
* CEs [12] --> Loop 13 
* CEs [13] --> Loop 14 

### Ranking functions of CR eval_realshellsort_bb4_in(V_increment_0,V_3,V_j_0,B,C) 
* RF of phase [12]: [-V_increment_0+V_j_0+1,V_j_0]

#### Partial ranking functions of CR eval_realshellsort_bb4_in(V_increment_0,V_3,V_j_0,B,C) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    -V_increment_0+V_j_0+1
    V_j_0


### Specialization of cost equations eval_realshellsort_bb2_in/5 
* CE 8 is refined into CE [15] 
* CE 7 is refined into CE [16,17,18,19] 


### Cost equations --> "Loop" of eval_realshellsort_bb2_in/5 
* CEs [17] --> Loop 15 
* CEs [16] --> Loop 16 
* CEs [18] --> Loop 17 
* CEs [19] --> Loop 18 
* CEs [15] --> Loop 19 

### Ranking functions of CR eval_realshellsort_bb2_in(V_array_size,V_increment_0,V_i_0,B,C) 
* RF of phase [15]: [V_array_size/2-V_i_0,V_increment_0-V_i_0]
* RF of phase [16,17,18]: [V_array_size-V_i_0]

#### Partial ranking functions of CR eval_realshellsort_bb2_in(V_array_size,V_increment_0,V_i_0,B,C) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V_array_size/2-V_i_0
    V_increment_0-V_i_0
* Partial RF of phase [16,17,18]:
  - RF of loop [16:1,17:1,18:1]:
    V_array_size-V_i_0


### Specialization of cost equations eval_realshellsort_bb1_in/3 
* CE 6 is refined into CE [20] 
* CE 5 is refined into CE [21,22] 


### Cost equations --> "Loop" of eval_realshellsort_bb1_in/3 
* CEs [22] --> Loop 20 
* CEs [21] --> Loop 21 
* CEs [20] --> Loop 22 

### Ranking functions of CR eval_realshellsort_bb1_in(V_array_size,V_increment_0,B) 
* RF of phase [20]: [2*V_increment_0-1]

#### Partial ranking functions of CR eval_realshellsort_bb1_in(V_array_size,V_increment_0,B) 
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    2*V_increment_0-1


### Specialization of cost equations eval_realshellsort_bb0_in/2 
* CE 3 is refined into CE [23,24] 
* CE 4 is refined into CE [25] 
* CE 2 is refined into CE [26] 


### Cost equations --> "Loop" of eval_realshellsort_bb0_in/2 
* CEs [24] --> Loop 23 
* CEs [25] --> Loop 24 
* CEs [23] --> Loop 25 
* CEs [26] --> Loop 26 

### Ranking functions of CR eval_realshellsort_bb0_in(V_array_size,B) 

#### Partial ranking functions of CR eval_realshellsort_bb0_in(V_array_size,B) 


### Specialization of cost equations eval_realshellsort_start/2 
* CE 1 is refined into CE [27,28,29,30] 


### Cost equations --> "Loop" of eval_realshellsort_start/2 
* CEs [30] --> Loop 27 
* CEs [29] --> Loop 28 
* CEs [28] --> Loop 29 
* CEs [27] --> Loop 30 

### Ranking functions of CR eval_realshellsort_start(V_array_size,B) 

#### Partial ranking functions of CR eval_realshellsort_start(V_array_size,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_realshellsort_bb4_in(V_increment_0,V_3,V_j_0,B,C):
* Chain [[12],14]: 1*it(12)+0
  Such that:it(12) =< V_j_0-C

  with precondition: [B=2,V_increment_0>=1,C>=V_increment_0,V_j_0>=V_increment_0+C] 

* Chain [[12],13]: 1*it(12)+0
  Such that:it(12) =< -V_increment_0+V_j_0+1

  with precondition: [B=2,C>=0,V_increment_0>=C+1,V_j_0>=V_increment_0+C] 

* Chain [14]: 0
  with precondition: [B=2,V_j_0=C,V_increment_0>=1,V_j_0>=V_increment_0] 

* Chain [13]: 0
  with precondition: [B=2,V_j_0=C,V_j_0>=0,V_increment_0>=V_j_0+1] 


#### Cost of chains of eval_realshellsort_bb2_in(V_array_size,V_increment_0,V_i_0,B,C):
* Chain [[15],[16,17,18],19]: 1*it(15)+3*it(16)+1*s(5)+1*s(6)+0
  Such that:it(15) =< V_increment_0-V_i_0
it(15) =< -V_i_0+C/2
aux(6) =< -V_increment_0+C
it(16) =< aux(6)
aux(2) =< aux(6)
s(5) =< it(16)*aux(6)
s(6) =< it(16)*aux(2)

  with precondition: [B=3,V_array_size=C,V_i_0>=0,V_array_size+1>=2*V_increment_0,V_array_size>=V_increment_0+1,V_increment_0>=V_i_0+1] 

* Chain [[15],19]: 1*it(15)+0
  Such that:it(15) =< 1/2

  with precondition: [V_array_size=1,V_increment_0=1,V_i_0=0,B=3,C=1] 


#### Cost of chains of eval_realshellsort_bb1_in(V_array_size,V_increment_0,B):
* Chain [[20],22]: 1*it(20)+1*s(19)+3*s(20)+1*s(21)+1*s(22)+0
  Such that:s(13) =< V_array_size
aux(8) =< V_array_size/2
aux(11) =< 2*V_increment_0
it(20) =< aux(11)
s(19) =< aux(11)
aux(7) =< s(13)
s(19) =< it(20)*aux(8)
s(23) =< it(20)*aux(7)
s(20) =< s(23)
s(21) =< s(20)*s(13)
s(22) =< s(20)*aux(7)

  with precondition: [B=4,V_increment_0>=1,V_array_size+1>=2*V_increment_0,V_array_size>=V_increment_0+1] 

* Chain [22]: 0
  with precondition: [B=4,0>=V_increment_0,V_array_size+1>=2*V_increment_0] 

* Chain [21,22]: 1*s(24)+1
  Such that:s(24) =< 1/2

  with precondition: [V_array_size=1,V_increment_0=1,B=4] 


#### Cost of chains of eval_realshellsort_bb0_in(V_array_size,B):
* Chain [26]: 0
  with precondition: [V_array_size=0] 

* Chain [25]: 0
  with precondition: [V_array_size=1] 

* Chain [24]: 0
  with precondition: [0>=V_array_size+1] 

* Chain [23]: 1*s(28)+1*s(29)+3*s(32)+1*s(33)+1*s(34)+0
  Such that:s(26) =< V_array_size/2
aux(12) =< V_array_size
s(28) =< aux(12)
s(29) =< aux(12)
s(30) =< aux(12)
s(29) =< s(28)*s(26)
s(31) =< s(28)*s(30)
s(32) =< s(31)
s(33) =< s(32)*aux(12)
s(34) =< s(32)*s(30)

  with precondition: [V_array_size>=2] 


#### Cost of chains of eval_realshellsort_start(V_array_size,B):
* Chain [30]: 0
  with precondition: [V_array_size=0] 

* Chain [29]: 0
  with precondition: [V_array_size=1] 

* Chain [28]: 0
  with precondition: [0>=V_array_size+1] 

* Chain [27]: 1*s(37)+1*s(38)+3*s(41)+1*s(42)+1*s(43)+0
  Such that:s(36) =< V_array_size
s(35) =< V_array_size/2
s(37) =< s(36)
s(38) =< s(36)
s(39) =< s(36)
s(38) =< s(37)*s(35)
s(40) =< s(37)*s(39)
s(41) =< s(40)
s(42) =< s(41)*s(36)
s(43) =< s(41)*s(39)

  with precondition: [V_array_size>=2] 


Closed-form bounds of eval_realshellsort_start(V_array_size,B): 
-------------------------------------
* Chain [30] with precondition: [V_array_size=0] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [29] with precondition: [V_array_size=1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [28] with precondition: [0>=V_array_size+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [27] with precondition: [V_array_size>=2] 
    - Upper bound: 3*V_array_size*V_array_size+2*V_array_size+2*V_array_size*V_array_size*V_array_size 
    - Complexity: n^3 

### Maximum cost of eval_realshellsort_start(V_array_size,B): nat(V_array_size)*3*nat(V_array_size)+nat(V_array_size)*2+nat(V_array_size)*2*nat(V_array_size)*nat(V_array_size) 
Asymptotic class: n^3 
* Total analysis performed in 129 ms.

