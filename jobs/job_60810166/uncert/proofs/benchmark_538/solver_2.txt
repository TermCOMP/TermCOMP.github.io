WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_send_tree_bb5_in/5]
1. recursive  : [eval_send_tree_2/7,eval_send_tree_3/8,eval_send_tree_6/7,eval_send_tree_7/8,eval_send_tree_8/8,eval_send_tree_9/8,eval_send_tree_bb1_in/6,eval_send_tree_bb2_in/6,eval_send_tree_bb3_in/7,eval_send_tree_bb4_in/7,eval_send_tree_bb5_in_loop_cont/11,eval_send_tree_bb6_in/7,eval_send_tree_bb7_in/8,eval_send_tree_bb8_in/10]
2. non_recursive  : [eval_send_tree_stop/1]
3. non_recursive  : [eval_send_tree_bb9_in/1]
4. non_recursive  : [eval_send_tree_bb1_in_loop_cont/2]
5. non_recursive  : [eval_send_tree_bb0_in/4]
6. non_recursive  : [eval_send_tree_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_send_tree_bb5_in/5
1. SCC is partially evaluated into eval_send_tree_bb1_in/6
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_send_tree_bb0_in/4
6. SCC is partially evaluated into eval_send_tree_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_send_tree_bb5_in/5 
* CE 10 is refined into CE [11] 
* CE 9 is refined into CE [12] 


### Cost equations --> "Loop" of eval_send_tree_bb5_in/5 
* CEs [12] --> Loop 11 
* CEs [11] --> Loop 12 

### Ranking functions of CR eval_send_tree_bb5_in(V_count_1,B,C,D,E) 
* RF of phase [11]: [V_count_1-1]

#### Partial ranking functions of CR eval_send_tree_bb5_in(V_count_1,B,C,D,E) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    V_count_1-1


### Specialization of cost equations eval_send_tree_bb1_in/6 
* CE 8 is refined into CE [13] 
* CE 4 is refined into CE [14,15] 
* CE 6 is refined into CE [16,17] 
* CE 3 is refined into CE [18] 
* CE 5 is refined into CE [19] 
* CE 7 is refined into CE [20] 


### Cost equations --> "Loop" of eval_send_tree_bb1_in/6 
* CEs [18] --> Loop 13 
* CEs [19] --> Loop 14 
* CEs [20] --> Loop 15 
* CEs [14] --> Loop 16 
* CEs [16] --> Loop 17 
* CEs [15] --> Loop 18 
* CEs [17] --> Loop 19 
* CEs [13] --> Loop 20 

### Ranking functions of CR eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) 
* RF of phase [13,14,15,16,17,18,19]: [V_max_code-V_n_0+1]

#### Partial ranking functions of CR eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B) 
* Partial RF of phase [13,14,15,16,17,18,19]:
  - RF of loop [13:1]:
    V_max_code-V_count_0+1 depends on loops [14:1,15:1,16:1,17:1] 
    V_max_count-V_count_0-1 depends on loops [14:1,15:1,16:1,17:1] 
  - RF of loop [13:1,14:1,15:1,16:1,17:1,18:1,19:1]:
    V_max_code-V_n_0+1
  - RF of loop [16:1,17:1]:
    V_count_0 depends on loops [13:1] 
  - RF of loop [17:1]:
    -V_max_count+V_count_0+2 depends on loops [13:1] 


### Specialization of cost equations eval_send_tree_bb0_in/4 
* CE 2 is refined into CE [21,22] 


### Cost equations --> "Loop" of eval_send_tree_bb0_in/4 
* CEs [22] --> Loop 21 
* CEs [21] --> Loop 22 

### Ranking functions of CR eval_send_tree_bb0_in(V_max_code,V_max_count,V_min_count,B) 

#### Partial ranking functions of CR eval_send_tree_bb0_in(V_max_code,V_max_count,V_min_count,B) 


### Specialization of cost equations eval_send_tree_start/4 
* CE 1 is refined into CE [23,24] 


### Cost equations --> "Loop" of eval_send_tree_start/4 
* CEs [24] --> Loop 23 
* CEs [23] --> Loop 24 

### Ranking functions of CR eval_send_tree_start(V_max_code,V_max_count,V_min_count,B) 

#### Partial ranking functions of CR eval_send_tree_start(V_max_code,V_max_count,V_min_count,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_send_tree_bb5_in(V_count_1,B,C,D,E):
* Chain [[11],12]: 1*it(11)+0
  Such that:it(11) =< V_count_1

  with precondition: [B=2,D=1,E=0,V_count_1>=2] 

* Chain [12]: 0
  with precondition: [B=2,E=0,V_count_1=D,1>=V_count_1] 


#### Cost of chains of eval_send_tree_bb1_in(V_max_code,V_max_count,V_min_count,V_count_0,V_n_0,B):
* Chain [[13,14,15,16,17,18,19],20]: 4*it(13)+3*it(17)+2*s(5)+0
  Such that:aux(75) =< V_max_code+V_count_0-V_n_0+1
aux(76) =< V_max_code-V_n_0+1
it(17) =< aux(75)
s(5) =< aux(75)
it(13) =< aux(76)
it(17) =< aux(76)

  with precondition: [B=3,V_count_0>=0,V_n_0>=V_count_0,V_max_code>=V_n_0] 

* Chain [20]: 0
  with precondition: [B=3,V_count_0>=0,V_n_0>=V_max_code+1,V_n_0>=V_count_0] 


#### Cost of chains of eval_send_tree_bb0_in(V_max_code,V_max_count,V_min_count,B):
* Chain [22]: 0
  with precondition: [0>=V_max_code+1] 

* Chain [21]: 9*s(9)+0
  Such that:aux(77) =< V_max_code+1
s(9) =< aux(77)

  with precondition: [V_max_code>=0] 


#### Cost of chains of eval_send_tree_start(V_max_code,V_max_count,V_min_count,B):
* Chain [24]: 0
  with precondition: [0>=V_max_code+1] 

* Chain [23]: 9*s(13)+0
  Such that:s(12) =< V_max_code+1
s(13) =< s(12)

  with precondition: [V_max_code>=0] 


Closed-form bounds of eval_send_tree_start(V_max_code,V_max_count,V_min_count,B): 
-------------------------------------
* Chain [24] with precondition: [0>=V_max_code+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [23] with precondition: [V_max_code>=0] 
    - Upper bound: 9*V_max_code+9 
    - Complexity: n 

### Maximum cost of eval_send_tree_start(V_max_code,V_max_count,V_min_count,B): nat(V_max_code+1)*9 
Asymptotic class: n 
* Total analysis performed in 222 ms.

