WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_heapsort_4/5,eval_heapsort_5/6,eval_heapsort_7/6,eval_heapsort_8/7,eval_heapsort_bb10_in/7,eval_heapsort_bb1_in/3,eval_heapsort_bb2_in/3,eval_heapsort_bb3_in/5,eval_heapsort_bb4_in/5,eval_heapsort_bb5_in/6,eval_heapsort_bb6_in/6,eval_heapsort_bb7_in/6,eval_heapsort_bb8_in/7,eval_heapsort_bb9_in/7]
1. non_recursive  : [eval_heapsort_stop/1]
2. non_recursive  : [eval_heapsort_bb11_in/1]
3. non_recursive  : [eval_heapsort_bb1_in_loop_cont/2]
4. non_recursive  : [eval_heapsort_bb0_in/2]
5. non_recursive  : [eval_heapsort_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_heapsort_bb1_in/3
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_heapsort_bb0_in/2
5. SCC is partially evaluated into eval_heapsort_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_heapsort_bb1_in/3 
* CE 7 is refined into CE [11] 
* CE 3 is refined into CE [12] 
* CE 10 is discarded (unfeasible) 
* CE 9 is refined into CE [13] 
* CE 5 is refined into CE [14] 
* CE 6 is refined into CE [15] 
* CE 8 is refined into CE [16] 
* CE 4 is refined into CE [17] 


### Cost equations --> "Loop" of eval_heapsort_bb1_in/3 
* CEs [15] --> Loop 11 
* CEs [16] --> Loop 12 
* CEs [17] --> Loop 13 
* CEs [11] --> Loop 14 
* CEs [12] --> Loop 15 
* CEs [14] --> Loop 16 
* CEs [13] --> Loop 17 

### Ranking functions of CR eval_heapsort_bb1_in(V_size,V_i_0,B) 
* RF of phase [11,12]: [V_size/2-V_i_0]

#### Partial ranking functions of CR eval_heapsort_bb1_in(V_size,V_i_0,B) 
* Partial RF of phase [11,12]:
  - RF of loop [11:1]:
    V_size/4-V_i_0/2
  - RF of loop [12:1]:
    V_size/2-V_i_0


### Specialization of cost equations eval_heapsort_bb0_in/2 
* CE 2 is refined into CE [18,19,20,21,22,23,24] 


### Cost equations --> "Loop" of eval_heapsort_bb0_in/2 
* CEs [23] --> Loop 18 
* CEs [22] --> Loop 19 
* CEs [24] --> Loop 20 
* CEs [18] --> Loop 21 
* CEs [19,20] --> Loop 22 
* CEs [21] --> Loop 23 

### Ranking functions of CR eval_heapsort_bb0_in(V_size,B) 

#### Partial ranking functions of CR eval_heapsort_bb0_in(V_size,B) 


### Specialization of cost equations eval_heapsort_start/2 
* CE 1 is refined into CE [25,26,27,28,29,30] 


### Cost equations --> "Loop" of eval_heapsort_start/2 
* CEs [30] --> Loop 24 
* CEs [29] --> Loop 25 
* CEs [28] --> Loop 26 
* CEs [27] --> Loop 27 
* CEs [26] --> Loop 28 
* CEs [25] --> Loop 29 

### Ranking functions of CR eval_heapsort_start(V_size,B) 

#### Partial ranking functions of CR eval_heapsort_start(V_size,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_heapsort_bb1_in(V_size,V_i_0,B):
* Chain [[11,12],16]: 1*it(11)+1*it(12)+0
  Such that:it(11) =< V_size/4-V_i_0/2
aux(3) =< V_size/2-V_i_0
it(11) =< aux(3)
it(12) =< aux(3)

  with precondition: [B=2,V_i_0>=1,V_size>=4*V_i_0] 

* Chain [[11,12],15]: 1*it(11)+1*it(12)+0
  Such that:aux(2) =< V_size-V_i_0
aux(1) =< V_size/2-V_i_0
it(11) =< V_size/4-V_i_0/2
it(11) =< aux(1)
it(12) =< aux(1)
it(11) =< aux(2)
it(12) =< aux(2)

  with precondition: [B=2,V_i_0>=1,V_size>=2*V_i_0+1] 

* Chain [[11,12],14]: 1*it(11)+1*it(12)+0
  Such that:it(11) =< V_size/4-V_i_0/2
aux(4) =< V_size/2-V_i_0
it(11) =< aux(4)
it(12) =< aux(4)

  with precondition: [B=2,V_i_0>=1,V_size>=4*V_i_0+1] 

* Chain [[11,12],13,15]: 1*it(11)+1*it(12)+1
  Such that:it(11) =< V_size/4-V_i_0/2
aux(5) =< V_size/2-V_i_0
it(11) =< aux(5)
it(12) =< aux(5)

  with precondition: [B=2,V_i_0>=1,V_size>=4*V_i_0] 

* Chain [17]: 0
  with precondition: [V_i_0=1,B=2,0>=V_size] 

* Chain [16]: 0
  with precondition: [B=2,2*V_i_0=V_size,V_i_0>=1] 

* Chain [15]: 0
  with precondition: [B=2,V_size>=1,2*V_i_0>=V_size+1] 

* Chain [14]: 0
  with precondition: [B=2,V_i_0>=1,V_size>=2*V_i_0+1] 

* Chain [13,15]: 1
  with precondition: [B=2,V_size=2*V_i_0,V_size>=2] 


#### Cost of chains of eval_heapsort_bb0_in(V_size,B):
* Chain [23]: 0
  with precondition: [V_size=1] 

* Chain [22]: 1
  with precondition: [V_size=2] 

* Chain [21]: 0
  with precondition: [0>=V_size] 

* Chain [20]: 1*s(13)+1*s(14)+0
  Such that:s(11) =< V_size
s(12) =< V_size/2
s(13) =< V_size/4
s(13) =< s(12)
s(14) =< s(12)
s(13) =< s(11)
s(14) =< s(11)

  with precondition: [V_size>=3] 

* Chain [19]: 2*s(17)+2*s(18)+1
  Such that:s(15) =< V_size/2
s(16) =< V_size/4
s(17) =< s(16)
s(17) =< s(15)
s(18) =< s(15)

  with precondition: [V_size>=4] 

* Chain [18]: 1*s(19)+1*s(21)+0
  Such that:s(20) =< V_size/2
s(19) =< V_size/4
s(19) =< s(20)
s(21) =< s(20)

  with precondition: [V_size>=5] 


#### Cost of chains of eval_heapsort_start(V_size,B):
* Chain [29]: 0
  with precondition: [V_size=1] 

* Chain [28]: 1
  with precondition: [V_size=2] 

* Chain [27]: 0
  with precondition: [0>=V_size] 

* Chain [26]: 1*s(24)+1*s(25)+0
  Such that:s(22) =< V_size
s(23) =< V_size/2
s(24) =< V_size/4
s(24) =< s(23)
s(25) =< s(23)
s(24) =< s(22)
s(25) =< s(22)

  with precondition: [V_size>=3] 

* Chain [25]: 2*s(28)+2*s(29)+1
  Such that:s(26) =< V_size/2
s(27) =< V_size/4
s(28) =< s(27)
s(28) =< s(26)
s(29) =< s(26)

  with precondition: [V_size>=4] 

* Chain [24]: 1*s(31)+1*s(32)+0
  Such that:s(30) =< V_size/2
s(31) =< V_size/4
s(31) =< s(30)
s(32) =< s(30)

  with precondition: [V_size>=5] 


Closed-form bounds of eval_heapsort_start(V_size,B): 
-------------------------------------
* Chain [29] with precondition: [V_size=1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [28] with precondition: [V_size=2] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [27] with precondition: [0>=V_size] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [26] with precondition: [V_size>=3] 
    - Upper bound: 3/4*V_size 
    - Complexity: n 
* Chain [25] with precondition: [V_size>=4] 
    - Upper bound: 3/2*V_size+1 
    - Complexity: n 
* Chain [24] with precondition: [V_size>=5] 
    - Upper bound: 3/4*V_size 
    - Complexity: n 

### Maximum cost of eval_heapsort_start(V_size,B): max([1,nat(V_size/2)+1+nat(V_size/4)+(nat(V_size/4)+nat(V_size/2))]) 
Asymptotic class: n 
* Total analysis performed in 93 ms.

