WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_foo_bb1_in/3,eval_foo_bb2_in/3,eval_foo_bb3_in/3,eval_foo_bb4_in/3]
1. non_recursive  : [eval_foo_stop/1]
2. non_recursive  : [eval_foo_bb5_in/1]
3. non_recursive  : [eval_foo_bb1_in_loop_cont/2]
4. non_recursive  : [eval_foo_bb0_in/3]
5. non_recursive  : [eval_foo_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_foo_bb1_in/3
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_foo_bb0_in/3
5. SCC is partially evaluated into eval_foo_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_foo_bb1_in/3 
* CE 6 is refined into CE [7] 
* CE 3 is refined into CE [8] 
* CE 5 is refined into CE [9] 
* CE 4 is refined into CE [10] 


### Cost equations --> "Loop" of eval_foo_bb1_in/3 
* CEs [8] --> Loop 7 
* CEs [9] --> Loop 8 
* CEs [10] --> Loop 9 
* CEs [7] --> Loop 10 

### Ranking functions of CR eval_foo_bb1_in(V__01,V__0,B) 
* RF of phase [7,9]: [V__01+V__0]
* RF of phase [8]: [V__0,-V__01+V__0,V__01+V__0]

#### Partial ranking functions of CR eval_foo_bb1_in(V__01,V__0,B) 
* Partial RF of phase [7,9]:
  - RF of loop [7:1]:
    V__01
    V__01-V__0 depends on loops [9:1] 
    V__01+V__0
  - RF of loop [9:1]:
    V__0+1
    -V__01+V__0+1 depends on loops [7:1] 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V__0
    -V__01+V__0
    V__01+V__0


### Specialization of cost equations eval_foo_bb0_in/3 
* CE 2 is refined into CE [11,12,13,14] 


### Cost equations --> "Loop" of eval_foo_bb0_in/3 
* CEs [14] --> Loop 11 
* CEs [13] --> Loop 12 
* CEs [12] --> Loop 13 
* CEs [11] --> Loop 14 

### Ranking functions of CR eval_foo_bb0_in(V_x,V_y,B) 

#### Partial ranking functions of CR eval_foo_bb0_in(V_x,V_y,B) 


### Specialization of cost equations eval_foo_start/3 
* CE 1 is refined into CE [15,16,17,18] 


### Cost equations --> "Loop" of eval_foo_start/3 
* CEs [18] --> Loop 15 
* CEs [17] --> Loop 16 
* CEs [16] --> Loop 17 
* CEs [15] --> Loop 18 

### Ranking functions of CR eval_foo_start(V_x,V_y,B) 

#### Partial ranking functions of CR eval_foo_start(V_x,V_y,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_foo_bb1_in(V__01,V__0,B):
* Chain [[8],[7,9],10]: 1*it(7)+1*it(8)+1*it(9)+0
  Such that:it(8) =< -V__01+V__0
it(7) =< V__01
it(9) =< V__01+1
aux(7) =< 2*V__01
it(7) =< aux(7)
it(9) =< aux(7)

  with precondition: [B=2,2*V__01>=1,V__0>=V__01+1] 

* Chain [[8],10]: 1*it(8)+0
  Such that:it(8) =< V__01+V__0

  with precondition: [B=2,0>=V__01,V__0+V__01>=1] 

* Chain [[7,9],10]: 1*it(7)+1*it(9)+0
  Such that:it(7) =< V__01
it(9) =< V__0+1
aux(7) =< V__01+V__0
it(7) =< aux(7)
it(9) =< aux(7)

  with precondition: [B=2,V__01>=V__0,V__0+V__01>=1] 

* Chain [10]: 0
  with precondition: [B=2,0>=V__0+V__01] 


#### Cost of chains of eval_foo_bb0_in(V_x,V_y,B):
* Chain [14]: 1*s(1)+0
  Such that:s(1) =< V_x+V_y

  with precondition: [0>=V_y,V_x+V_y>=1] 

* Chain [13]: 1*s(2)+1*s(3)+1*s(4)+0
  Such that:s(2) =< V_x-V_y
s(3) =< V_y
s(4) =< V_y+1
s(5) =< 2*V_y
s(3) =< s(5)
s(4) =< s(5)

  with precondition: [2*V_y>=1,V_x>=V_y+1] 

* Chain [12]: 0
  with precondition: [0>=V_x+V_y] 

* Chain [11]: 1*s(6)+1*s(7)+0
  Such that:s(7) =< V_x+1
s(8) =< V_x+V_y
s(6) =< V_y
s(7) =< V_y+1
s(6) =< s(8)
s(7) =< s(8)

  with precondition: [V_y>=V_x,V_x+V_y>=1] 


#### Cost of chains of eval_foo_start(V_x,V_y,B):
* Chain [18]: 1*s(9)+0
  Such that:s(9) =< V_x+V_y

  with precondition: [0>=V_y,V_x+V_y>=1] 

* Chain [17]: 1*s(10)+1*s(11)+1*s(12)+0
  Such that:s(10) =< V_x-V_y
s(11) =< V_y
s(12) =< V_y+1
s(13) =< 2*V_y
s(11) =< s(13)
s(12) =< s(13)

  with precondition: [2*V_y>=1,V_x>=V_y+1] 

* Chain [16]: 0
  with precondition: [0>=V_x+V_y] 

* Chain [15]: 1*s(14)+1*s(16)+0
  Such that:s(14) =< V_x+1
s(15) =< V_x+V_y
s(16) =< V_y
s(14) =< V_y+1
s(16) =< s(15)
s(14) =< s(15)

  with precondition: [V_y>=V_x,V_x+V_y>=1] 


Closed-form bounds of eval_foo_start(V_x,V_y,B): 
-------------------------------------
* Chain [18] with precondition: [0>=V_y,V_x+V_y>=1] 
    - Upper bound: V_x+V_y 
    - Complexity: n 
* Chain [17] with precondition: [2*V_y>=1,V_x>=V_y+1] 
    - Upper bound: V_x+V_y+1 
    - Complexity: n 
* Chain [16] with precondition: [0>=V_x+V_y] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [15] with precondition: [V_y>=V_x,V_x+V_y>=1] 
    - Upper bound: nat(V_x+1)+V_y 
    - Complexity: n 

### Maximum cost of eval_foo_start(V_x,V_y,B): max([nat(V_x+V_y),nat(V_y)+max([nat(V_x+1),nat(V_x-V_y)+nat(V_y+1)])]) 
Asymptotic class: n 
* Total analysis performed in 57 ms.

