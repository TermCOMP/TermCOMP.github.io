MAYBE

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_amir4_bb2_in/11,eval_amir4_bb3_in/11]
1. recursive  : [eval_amir4_bb1_in/6,eval_amir4_bb2_in_loop_cont/7]
2. recursive  : [eval_amir4_bb4_in/2,eval_amir4_bb5_in/2]
3. non_recursive  : [eval_amir4_stop/1]
4. non_recursive  : [eval_amir4_bb6_in/1]
5. non_recursive  : [eval_amir4_bb4_in_loop_cont/2]
6. non_recursive  : [eval_amir4_bb1_in_loop_cont/3]
7. non_recursive  : [eval_amir4_bb0_in/5]
8. non_recursive  : [eval_amir4_start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_amir4_bb2_in/11
1. SCC is partially evaluated into eval_amir4_bb1_in/6
2. SCC is partially evaluated into eval_amir4_bb4_in/2
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_amir4_bb1_in_loop_cont/3
7. SCC is partially evaluated into eval_amir4_bb0_in/5
8. SCC is partially evaluated into eval_amir4_start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_amir4_bb2_in/11 
* CE 7 is refined into CE [10] 
* CE 6 is refined into CE [11] 


### Cost equations --> "Loop" of eval_amir4_bb2_in/11 
* CEs [11] --> Loop 10 
* CEs [10] --> Loop 11 

### Ranking functions of CR eval_amir4_bb2_in(V_x3,V__02,V__01,V__0,V_0,V_i_0,V__13,V__1,B,C,D) 
* RF of phase [10]: [V_0-V_i_0,V__0-V_i_0-1]

#### Partial ranking functions of CR eval_amir4_bb2_in(V_x3,V__02,V__01,V__0,V_0,V_i_0,V__13,V__1,B,C,D) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V_0-V_i_0
    V__0-V_i_0-1


### Specialization of cost equations eval_amir4_bb1_in/6 
* CE 4 is refined into CE [12] 
* CE 3 is refined into CE [13,14] 


### Cost equations --> "Loop" of eval_amir4_bb1_in/6 
* CEs [14] --> Loop 12 
* CEs [13] --> Loop 13 
* CEs [12] --> Loop 14 

### Ranking functions of CR eval_amir4_bb1_in(V_x3,V__02,V__01,V__0,B,C) 
* RF of phase [12]: [V__0-1]

#### Partial ranking functions of CR eval_amir4_bb1_in(V_x3,V__02,V__01,V__0,B,C) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V__0-1


### Specialization of cost equations eval_amir4_bb4_in/2 
* CE 9 is refined into CE [15] 
* CE 8 is refined into CE [16] 


### Cost equations --> "Loop" of eval_amir4_bb4_in/2 
* CEs [16] --> Loop 15 
* CEs [15] --> Loop 16 

### Ranking functions of CR eval_amir4_bb4_in(V__2,B) 
* RF of phase [15]: [V__2]

#### Partial ranking functions of CR eval_amir4_bb4_in(V__2,B) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V__2


### Specialization of cost equations eval_amir4_bb1_in_loop_cont/3 
* CE 5 is refined into CE [17,18] 


### Cost equations --> "Loop" of eval_amir4_bb1_in_loop_cont/3 
* CEs [18] --> Loop 17 
* CEs [17] --> Loop 18 

### Ranking functions of CR eval_amir4_bb1_in_loop_cont(A,B,C) 

#### Partial ranking functions of CR eval_amir4_bb1_in_loop_cont(A,B,C) 


### Specialization of cost equations eval_amir4_bb0_in/5 
* CE 2 is refined into CE [19,20,21,22,23,24] 


### Cost equations --> "Loop" of eval_amir4_bb0_in/5 
* CEs [23,24] --> Loop 19 
* CEs [22] --> Loop 20 
* CEs [21] --> Loop 21 
* CEs [20] --> Loop 22 
* CEs [19] --> Loop 23 

### Ranking functions of CR eval_amir4_bb0_in(V_x4,V_x1,V_x2,V_x3,B) 

#### Partial ranking functions of CR eval_amir4_bb0_in(V_x4,V_x1,V_x2,V_x3,B) 


### Specialization of cost equations eval_amir4_start/5 
* CE 1 is refined into CE [25,26,27,28,29] 


### Cost equations --> "Loop" of eval_amir4_start/5 
* CEs [29] --> Loop 24 
* CEs [28] --> Loop 25 
* CEs [27] --> Loop 26 
* CEs [26] --> Loop 27 
* CEs [25] --> Loop 28 

### Ranking functions of CR eval_amir4_start(V_x4,V_x1,V_x2,V_x3,B) 

#### Partial ranking functions of CR eval_amir4_start(V_x4,V_x1,V_x2,V_x3,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_amir4_bb2_in(V_x3,V__02,V__01,V__0,V_0,V_i_0,V__13,V__1,B,C,D):
* Chain [[10],11]: 1*it(10)+0
  Such that:it(10) =< V_0-V_i_0

  with precondition: [B=2,V__0=V_0+1,C=D,V_i_0>=0,V__0>=V_i_0+2] 

* Chain [11]: 0
  with precondition: [B=2,V__0=V_0+1,V__0=V_i_0+1,V__1=C,V__1=D,V__0>=1] 


#### Cost of chains of eval_amir4_bb1_in(V_x3,V__02,V__01,V__0,B,C):
* Chain [[12],13,14]: 1*it(12)+1*s(3)+1
  Such that:aux(3) =< V__0
it(12) =< aux(3)
s(3) =< it(12)*aux(3)

  with precondition: [B=4,V__0>=2] 

* Chain [14]: 0
  with precondition: [B=4,C=V__02,0>=V__0] 

* Chain [13,14]: 1
  with precondition: [V__0=1,B=4,V__01=C] 


#### Cost of chains of eval_amir4_bb4_in(V__2,B):
* Chain [[15],16]: 1*it(15)+0
  Such that:it(15) =< V__2

  with precondition: [B=3,V__2>=1] 

* Chain [16]: 0
  with precondition: [B=3,0>=V__2] 


#### Cost of chains of eval_amir4_bb1_in_loop_cont(A,B,C):
* Chain [18]: 0
  with precondition: [A=4,0>=B] 

* Chain [17]: 1*s(4)+0
  Such that:s(4) =< B

  with precondition: [A=4,B>=1] 


#### Cost of chains of eval_amir4_bb0_in(V_x4,V_x1,V_x2,V_x3,B):
* Chain [23]: 1
  with precondition: [V_x4=1,0>=V_x1] 

* Chain [22]: 1*s(5)+1
  Such that:s(5) =< V_x1

  with precondition: [V_x4=1,V_x1>=1] 

* Chain [21]: 0
  with precondition: [0>=V_x4,0>=V_x2] 

* Chain [20]: 1*s(6)+0
  Such that:s(6) =< V_x2

  with precondition: [0>=V_x4,V_x2>=1] 

* Chain [19]: 2*s(8)+2*s(9)+1*s(13)+1
  Such that:aux(4) =< V_x4
s(8) =< aux(4)
s(9) =< s(8)*aux(4)

  with precondition: [V_x4>=2] 


#### Cost of chains of eval_amir4_start(V_x4,V_x1,V_x2,V_x3,B):
* Chain [28]: 1
  with precondition: [V_x4=1,0>=V_x1] 

* Chain [27]: 1*s(14)+1
  Such that:s(14) =< V_x1

  with precondition: [V_x4=1,V_x1>=1] 

* Chain [26]: 0
  with precondition: [0>=V_x4,0>=V_x2] 

* Chain [25]: 1*s(15)+0
  Such that:s(15) =< V_x2

  with precondition: [0>=V_x4,V_x2>=1] 

* Chain [24]: 2*s(17)+2*s(18)+1*s(19)+1
  Such that:s(16) =< V_x4
s(17) =< s(16)
s(18) =< s(17)*s(16)

  with precondition: [V_x4>=2] 


Closed-form bounds of eval_amir4_start(V_x4,V_x1,V_x2,V_x3,B): 
-------------------------------------
* Chain [28] with precondition: [V_x4=1,0>=V_x1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [27] with precondition: [V_x4=1,V_x1>=1] 
    - Upper bound: V_x1+1 
    - Complexity: n 
* Chain [26] with precondition: [0>=V_x4,0>=V_x2] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [25] with precondition: [0>=V_x4,V_x2>=1] 
    - Upper bound: V_x2 
    - Complexity: n 
* Chain [24] with precondition: [V_x4>=2] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_amir4_start(V_x4,V_x1,V_x2,V_x3,B): inf 
Asymptotic class: infinity 
* Total analysis performed in 72 ms.

