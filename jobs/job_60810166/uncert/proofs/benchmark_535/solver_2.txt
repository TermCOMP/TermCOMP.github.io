MAYBE

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_PackBitsEncode_2/6,eval_PackBitsEncode_3/7,eval_PackBitsEncode_bb3_in/6,eval_PackBitsEncode_bb4_in/6,eval_PackBitsEncode_bb5_in/7]
1. recursive  : [eval_PackBitsEncode_14/13,eval_PackBitsEncode_15/14,eval_PackBitsEncode_16/14,eval_PackBitsEncode_17/15,eval_PackBitsEncode_LeafBlock1_in/13,eval_PackBitsEncode_LeafBlock3_in/13,eval_PackBitsEncode_LeafBlock5_in/13,eval_PackBitsEncode_LeafBlock_in/13,eval_PackBitsEncode_NodeBlock7_in/13,eval_PackBitsEncode_NodeBlock9_in/13,eval_PackBitsEncode_NodeBlock_in/13,eval_PackBitsEncode__critedge_in/13,eval_PackBitsEncode_bb10_in/13,eval_PackBitsEncode_bb12_in/13,eval_PackBitsEncode_bb13_in/13,eval_PackBitsEncode_bb14_in/13,eval_PackBitsEncode_bb15_in/13,eval_PackBitsEncode_bb16_in/14,eval_PackBitsEncode_bb6_in/13,eval_PackBitsEncode_bb7_in/13,eval_PackBitsEncode_bb8_in/13,eval_PackBitsEncode_bb9_in/13]
2. recursive  : [eval_PackBitsEncode_10/8,eval_PackBitsEncode_9/7,eval_PackBitsEncode_NewDefault_in/7,eval_PackBitsEncode__critedge_in_loop_cont/8,eval_PackBitsEncode_bb11_in/7,eval_PackBitsEncode_bb1_in/3,eval_PackBitsEncode_bb2_in/3,eval_PackBitsEncode_bb3_in_loop_cont/8]
3. non_recursive  : [eval_PackBitsEncode_stop/1]
4. non_recursive  : [eval_PackBitsEncode_bb17_in/1]
5. non_recursive  : [eval_PackBitsEncode_bb1_in_loop_cont/2]
6. non_recursive  : [eval_PackBitsEncode_bb0_in/2]
7. non_recursive  : [eval_PackBitsEncode_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_PackBitsEncode_bb3_in/6
1. SCC is partially evaluated into eval_PackBitsEncode__critedge_in/13
2. SCC is partially evaluated into eval_PackBitsEncode_bb1_in/3
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_PackBitsEncode_bb0_in/2
7. SCC is partially evaluated into eval_PackBitsEncode_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_PackBitsEncode_bb3_in/6 
* CE 8 is refined into CE [25] 
* CE 10 is refined into CE [26] 
* CE 9 is refined into CE [27] 


### Cost equations --> "Loop" of eval_PackBitsEncode_bb3_in/6 
* CEs [27] --> Loop 23 
* CEs [25] --> Loop 24 
* CEs [26] --> Loop 25 

### Ranking functions of CR eval_PackBitsEncode_bb3_in(V_n_0,V__1,B,C,D,E) 
* RF of phase [23]: [V__1]

#### Partial ranking functions of CR eval_PackBitsEncode_bb3_in(V_n_0,V__1,B,C,D,E) 
* Partial RF of phase [23]:
  - RF of loop [23:1]:
    V__1


### Specialization of cost equations eval_PackBitsEncode__critedge_in/13 
* CE 11 is refined into CE [28] 
* CE 24 is refined into CE [29] 
* CE 23 is refined into CE [30] 
* CE 21 is refined into CE [31] 
* CE 15 is refined into CE [32] 
* CE 17 is refined into CE [33] 
* CE 20 is refined into CE [34] 
* CE 18 is refined into CE [35] 
* CE 14 is refined into CE [36] 
* CE 13 is refined into CE [37] 
* CE 12 is refined into CE [38] 
* CE 22 is refined into CE [39] 
* CE 16 is refined into CE [40] 
* CE 19 is refined into CE [41] 


### Cost equations --> "Loop" of eval_PackBitsEncode__critedge_in/13 
* CEs [36] --> Loop 26 
* CEs [37] --> Loop 27 
* CEs [38] --> Loop 28 
* CEs [39] --> Loop 29 
* CEs [40] --> Loop 30 
* CEs [41] --> Loop 31 
* CEs [28] --> Loop 32 
* CEs [29] --> Loop 33 
* CEs [30] --> Loop 34 
* CEs [31] --> Loop 35 
* CEs [32] --> Loop 36 
* CEs [33] --> Loop 37 
* CEs [34] --> Loop 38 
* CEs [35] --> Loop 39 

### Ranking functions of CR eval_PackBitsEncode__critedge_in(V_state_0,V__0,V_n_0,V__1,V_state_1,V_n_1,B,C,D,E,F,G,H) 
* RF of phase [29]: [V_n_1/128-1]

#### Partial ranking functions of CR eval_PackBitsEncode__critedge_in(V_state_0,V__0,V_n_0,V__1,V_state_1,V_n_1,B,C,D,E,F,G,H) 
* Partial RF of phase [27,30]:
  - RF of loop [27:1]:
    V_state_1/2-1 depends on loops [30:1] 
  - RF of loop [30:1]:
    -V_state_1/2+1 depends on loops [27:1] 
* Partial RF of phase [29]:
  - RF of loop [29:1]:
    V_n_1/128-1


### Specialization of cost equations eval_PackBitsEncode_bb1_in/3 
* CE 7 is refined into CE [42] 
* CE 3 is refined into CE [43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98] 
* CE 4 is refined into CE [99,100,101,102,103,104,105,106,107,108,109,110] 
* CE 6 is refined into CE [111,112,113,114,115,116,117,118] 
* CE 5 is refined into CE [119,120,121,122,123,124,125,126] 


### Cost equations --> "Loop" of eval_PackBitsEncode_bb1_in/3 
* CEs [98,110,118] --> Loop 40 
* CEs [70,74,104,107,114,117] --> Loop 41 
* CEs [126] --> Loop 42 
* CEs [122,125] --> Loop 43 
* CEs [46,101,113] --> Loop 44 
* CEs [121] --> Loop 45 
* CEs [109] --> Loop 46 
* CEs [108] --> Loop 47 
* CEs [106] --> Loop 48 
* CEs [105] --> Loop 49 
* CEs [103] --> Loop 50 
* CEs [102] --> Loop 51 
* CEs [97] --> Loop 52 
* CEs [96] --> Loop 53 
* CEs [95] --> Loop 54 
* CEs [69] --> Loop 55 
* CEs [68] --> Loop 56 
* CEs [67] --> Loop 57 
* CEs [94] --> Loop 58 
* CEs [93] --> Loop 59 
* CEs [92] --> Loop 60 
* CEs [66] --> Loop 61 
* CEs [65] --> Loop 62 
* CEs [64] --> Loop 63 
* CEs [100] --> Loop 64 
* CEs [99] --> Loop 65 
* CEs [91] --> Loop 66 
* CEs [63] --> Loop 67 
* CEs [90] --> Loop 68 
* CEs [89] --> Loop 69 
* CEs [88] --> Loop 70 
* CEs [87] --> Loop 71 
* CEs [62] --> Loop 72 
* CEs [61] --> Loop 73 
* CEs [60] --> Loop 74 
* CEs [59] --> Loop 75 
* CEs [86] --> Loop 76 
* CEs [85] --> Loop 77 
* CEs [84] --> Loop 78 
* CEs [73,116] --> Loop 79 
* CEs [58] --> Loop 80 
* CEs [57] --> Loop 81 
* CEs [124] --> Loop 82 
* CEs [56] --> Loop 83 
* CEs [45,112] --> Loop 84 
* CEs [120] --> Loop 85 
* CEs [83] --> Loop 86 
* CEs [82] --> Loop 87 
* CEs [55] --> Loop 88 
* CEs [54] --> Loop 89 
* CEs [81] --> Loop 90 
* CEs [72] --> Loop 91 
* CEs [53] --> Loop 92 
* CEs [44] --> Loop 93 
* CEs [80] --> Loop 94 
* CEs [52] --> Loop 95 
* CEs [115] --> Loop 96 
* CEs [123] --> Loop 97 
* CEs [111] --> Loop 98 
* CEs [119] --> Loop 99 
* CEs [79] --> Loop 100 
* CEs [77] --> Loop 101 
* CEs [78] --> Loop 102 
* CEs [51] --> Loop 103 
* CEs [49] --> Loop 104 
* CEs [50] --> Loop 105 
* CEs [76] --> Loop 106 
* CEs [75] --> Loop 107 
* CEs [71] --> Loop 108 
* CEs [48] --> Loop 109 
* CEs [47] --> Loop 110 
* CEs [43] --> Loop 111 
* CEs [42] --> Loop 112 

### Ranking functions of CR eval_PackBitsEncode_bb1_in(V_state_0,V__0,B) 
* RF of phase [46,48]: [V__0-1]
* RF of phase [47,49]: [V__0-1]

#### Partial ranking functions of CR eval_PackBitsEncode_bb1_in(V_state_0,V__0,B) 
* Partial RF of phase [40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108]:
  - RF of loop [42:1,43:1,45:1,97:1]:
    V_state_0 depends on loops [40:1,41:1,44:1,52:1,53:1,54:1,94:1,100:1,101:1,102:1,106:1,107:1,108:1] 
  - RF of loop [52:1,68:1,100:1]:
    V__0/258-1 depends on loops [40:1,41:1,42:1,43:1,44:1,45:1] 
  - RF of loop [53:1,54:1,69:1,71:1,86:1,102:1]:
    V__0/130-1 depends on loops [40:1,41:1,42:1,43:1,44:1,45:1] 
  - RF of loop [58:1,76:1,106:1]:
    V__0/257-1 depends on loops [40:1,41:1,42:1,43:1,44:1,45:1] 
  - RF of loop [59:1,60:1,77:1,78:1,90:1,107:1]:
    V__0/129-1 depends on loops [40:1,41:1,42:1,43:1,44:1,45:1] 
  - RF of loop [66:1,70:1,87:1,94:1,101:1]:
    V__0/2-1 depends on loops [40:1,41:1,42:1,43:1,44:1,45:1] 
  - RF of loop [68:1,69:1,70:1,71:1]:
    V_state_0-2 depends on loops [40:1,41:1,44:1,52:1,53:1,54:1,94:1,100:1,101:1,102:1,106:1,107:1,108:1] 
  - RF of loop [76:1,77:1,78:1,79:1]:
    V_state_0/2-1 depends on loops [40:1,41:1,44:1,52:1,53:1,54:1,94:1,100:1,101:1,102:1,106:1,107:1,108:1] 
  - RF of loop [79:1,82:1,91:1,96:1,97:1,108:1]:
    V__0-1 depends on loops [40:1,41:1,42:1,43:1,44:1,45:1] 
  - RF of loop [82:1]:
    V_state_0/3-2/3 depends on loops [40:1,41:1,44:1,52:1,53:1,54:1,94:1,100:1,101:1,102:1,106:1,107:1,108:1] 
  - RF of loop [90:1,91:1]:
    V_state_0-1 depends on loops [40:1,41:1,44:1,52:1,53:1,54:1,94:1,100:1,101:1,102:1,106:1,107:1,108:1] 
  - RF of loop [94:1]:
    -V_state_0/2+1 depends on loops [40:1,41:1,42:1,43:1,44:1,45:1,52:1,53:1,54:1,58:1,59:1,60:1,68:1,69:1,70:1,71:1,76:1,77:1,78:1,79:1,82:1,90:1,91:1,97:1] 
  - RF of loop [100:1,101:1,102:1]:
    -V_state_0/2+1/2 depends on loops [40:1,41:1,42:1,43:1,44:1,45:1,52:1,53:1,54:1,58:1,59:1,60:1,68:1,69:1,70:1,71:1,76:1,77:1,78:1,79:1,82:1,90:1,91:1,97:1] 
  - RF of loop [106:1,107:1,108:1]:
    -V_state_0+1 depends on loops [40:1,41:1,42:1,43:1,44:1,45:1,52:1,53:1,54:1,58:1,59:1,60:1,68:1,69:1,70:1,71:1,76:1,77:1,78:1,79:1,82:1,90:1,91:1,97:1] 
* Partial RF of phase [46,48]:
  - RF of loop [46:1]:
    V__0/2-1
  - RF of loop [48:1]:
    V__0-1
* Partial RF of phase [47,49]:
  - RF of loop [47:1]:
    V__0/2-1
  - RF of loop [49:1]:
    V__0-1


### Specialization of cost equations eval_PackBitsEncode_bb0_in/2 
* CE 2 is refined into CE [127,128,129,130,131,132,133,134,135] 


### Cost equations --> "Loop" of eval_PackBitsEncode_bb0_in/2 
* CEs [135] --> Loop 113 
* CEs [132] --> Loop 114 
* CEs [131] --> Loop 115 
* CEs [133] --> Loop 116 
* CEs [134] --> Loop 117 
* CEs [130] --> Loop 118 
* CEs [129] --> Loop 119 
* CEs [128] --> Loop 120 
* CEs [127] --> Loop 121 

### Ranking functions of CR eval_PackBitsEncode_bb0_in(V_cc,B) 

#### Partial ranking functions of CR eval_PackBitsEncode_bb0_in(V_cc,B) 


### Specialization of cost equations eval_PackBitsEncode_start/2 
* CE 1 is refined into CE [136,137,138,139,140,141,142,143,144] 


### Cost equations --> "Loop" of eval_PackBitsEncode_start/2 
* CEs [144] --> Loop 122 
* CEs [143] --> Loop 123 
* CEs [142] --> Loop 124 
* CEs [141] --> Loop 125 
* CEs [140] --> Loop 126 
* CEs [139] --> Loop 127 
* CEs [138] --> Loop 128 
* CEs [137] --> Loop 129 
* CEs [136] --> Loop 130 

### Ranking functions of CR eval_PackBitsEncode_start(V_cc,B) 

#### Partial ranking functions of CR eval_PackBitsEncode_start(V_cc,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_PackBitsEncode_bb3_in(V_n_0,V__1,B,C,D,E):
* Chain [[23],25]: 1*it(23)+0
  Such that:it(23) =< -V_n_0+E

  with precondition: [B=5,D=0,V__1+V_n_0=C,V__1+V_n_0=E,V_n_0>=1,V__1>=1] 

* Chain [[23],24]: 1*it(23)+0
  Such that:it(23) =< -V_n_0+E

  with precondition: [B=5,C=E,C+D=V__1+V_n_0,V_n_0>=1,C>=V_n_0+1,V__1+V_n_0>=C+1] 

* Chain [25]: 0
  with precondition: [V__1=0,B=5,D=0,V_n_0=C,V_n_0=E,V_n_0>=1] 

* Chain [24]: 0
  with precondition: [B=5,V_n_0=C,V__1=D,V_n_0=E,V_n_0>=1,V__1>=1] 


#### Cost of chains of eval_PackBitsEncode__critedge_in(V_state_0,V__0,V_n_0,V__1,V_state_1,V_n_1,B,C,D,E,F,G,H):
* Chain [[29],35]: 1*it(29)+0
  Such that:it(29) =< V_n_1/128

  with precondition: [V_state_1=2,B=3,C=1,V__1=D,V__0>=1,V_n_1>=129] 

* Chain [[29],34]: 1*it(29)+0
  Such that:it(29) =< V_n_1/128

  with precondition: [V_state_1=2,B=3,C=2,V__1=D,V__0>=1,V_n_1>=130] 

* Chain [[27,30]]...: 2*it(27)+0
  with precondition: [V__0>=1,3>=V_state_1,V_state_1>=1,B>=2,4>=B] 

* Chain [[27,30],37]: 2*it(27)+0
  with precondition: [V_state_1=3,B=3,C=3,V__1=D,128>=V_n_1,V__0>=1,V_n_1>=2] 

* Chain [[27,30],36]: 2*it(27)+0
  with precondition: [V_state_1=3,B=4,G=1,H=V_n_1,V_state_0=C,V__0=D,V_n_0=E,V__1=F,1>=H,V__0>=1] 

* Chain [[27,30],28,31,[29],35]: 2*it(27)+1*it(29)+2
  Such that:it(29) =< V_n_1/128

  with precondition: [B=3,C=1,V__1=D,3>=V_state_1,V__0>=1,V_state_1>=1,V_n_1>=257] 

* Chain [[27,30],28,31,[29],34]: 2*it(27)+1*it(29)+2
  Such that:it(29) =< V_n_1/128

  with precondition: [B=3,C=2,V__1=D,3>=V_state_1,V__0>=1,V_state_1>=1,V_n_1>=258] 

* Chain [[27,30],28,31,35]: 2*it(27)+2
  with precondition: [V_n_1=129,B=3,C=1,V__1=D,3>=V_state_1,V__0>=1,V_state_1>=1] 

* Chain [[27,30],28,31,34]: 2*it(27)+2
  with precondition: [B=3,C=2,V__1=D,3>=V_state_1,256>=V_n_1,V__0>=1,V_state_1>=1,V_n_1>=130] 

* Chain [[27,30],26,[29],35]: 2*it(27)+1*it(29)+1
  Such that:it(29) =< V_n_1/128

  with precondition: [B=3,C=1,V__1=D,3>=V_state_1,V__0>=1,V_state_1>=1,V_n_1>=129] 

* Chain [[27,30],26,[29],34]: 2*it(27)+1*it(29)+1
  Such that:it(29) =< V_n_1/128

  with precondition: [B=3,C=2,V__1=D,3>=V_state_1,V__0>=1,V_state_1>=1,V_n_1>=130] 

* Chain [39]: 0
  with precondition: [V_state_1=0,B=3,C=1,D=V__1,1>=V_n_1,V__0>=1] 

* Chain [38]: 0
  with precondition: [V_state_1=0,B=3,C=2,D=V__1,128>=V_n_1,V__0>=1,V_n_1>=2] 

* Chain [37]: 0
  with precondition: [V_state_1=1,B=3,C=3,D=V__1,128>=V_n_1,V__0>=1,V_n_1>=2] 

* Chain [36]: 0
  with precondition: [V_state_1=1,B=4,G=1,C=V_state_0,E=V_n_0,F=V__1,V__0=D,V_n_1=H,1>=V_n_1,V__0>=1] 

* Chain [35]: 0
  with precondition: [V_state_1=2,B=3,C=1,D=V__1,1>=V_n_1,V__0>=1] 

* Chain [34]: 0
  with precondition: [V_state_1=2,B=3,C=2,D=V__1,128>=V_n_1,V__0>=1,V_n_1>=2] 

* Chain [33]: 0
  with precondition: [B=2,V_state_1=V_state_0,E=V_n_0,F=V__1,H=V_n_1,V_state_1=C,V__0=D,V_state_1=G,0>=V_state_1+1,V__0>=1] 

* Chain [32]: 0
  with precondition: [B=2,V_state_1=V_state_0,E=V_n_0,F=V__1,H=V_n_1,V_state_1=C,V__0=D,V_state_1=G,V__0>=1,V_state_1>=4] 

* Chain [31,[29],35]: 1*it(29)+1
  Such that:it(29) =< V_n_1/128

  with precondition: [V_state_1=0,B=3,C=1,V__1=D,V__0>=1,V_n_1>=257] 

* Chain [31,[29],34]: 1*it(29)+1
  Such that:it(29) =< V_n_1/128

  with precondition: [V_state_1=0,B=3,C=2,V__1=D,V__0>=1,V_n_1>=258] 

* Chain [31,35]: 1
  with precondition: [V_state_1=0,V_n_1=129,B=3,C=1,V__1=D,V__0>=1] 

* Chain [31,34]: 1
  with precondition: [V_state_1=0,B=3,C=2,V__1=D,256>=V_n_1,V__0>=1,V_n_1>=130] 

* Chain [28,39]: 1
  with precondition: [V_state_1=3,B=3,C=1,V__1=D,1>=V_n_1,V__0>=1] 

* Chain [28,38]: 1
  with precondition: [V_state_1=3,B=3,C=2,V__1=D,128>=V_n_1,V__0>=1,V_n_1>=2] 

* Chain [28,31,[29],35]: 1*it(29)+2
  Such that:it(29) =< V_n_1/128

  with precondition: [V_state_1=3,B=3,C=1,V__1=D,V__0>=1,V_n_1>=257] 

* Chain [28,31,[29],34]: 1*it(29)+2
  Such that:it(29) =< V_n_1/128

  with precondition: [V_state_1=3,B=3,C=2,V__1=D,V__0>=1,V_n_1>=258] 

* Chain [28,31,35]: 2
  with precondition: [V_state_1=3,V_n_1=129,B=3,C=1,V__1=D,V__0>=1] 

* Chain [28,31,34]: 2
  with precondition: [V_state_1=3,B=3,C=2,V__1=D,256>=V_n_1,V__0>=1,V_n_1>=130] 

* Chain [26,[29],35]: 1*it(29)+1
  Such that:it(29) =< V_n_1/128

  with precondition: [V_state_1=3,B=3,C=1,V__1=D,V__0>=1,V_n_1>=129] 

* Chain [26,[29],34]: 1*it(29)+1
  Such that:it(29) =< V_n_1/128

  with precondition: [V_state_1=3,B=3,C=2,V__1=D,V__0>=1,V_n_1>=130] 

* Chain [26,35]: 1
  with precondition: [V_state_1=3,B=3,C=1,V__1=D,1>=V_n_1,V__0>=1] 

* Chain [26,34]: 1
  with precondition: [V_state_1=3,B=3,C=2,V__1=D,128>=V_n_1,V__0>=1,V_n_1>=2] 


#### Cost of chains of eval_PackBitsEncode_bb1_in(V_state_0,V__0,B):
* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108]]...: 145*it(40)+0
  with precondition: [V__0+V_state_0>=2,V__0>=1,V_state_0>=0,3>=V_state_0,B=6] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],[47,49],65,112]: 102*it(40)+1*it([[47,49],65,112])+3*s(125)+3*s(128)+2*s(131)+12*s(137)+12*s(138)+3*s(143)+3*s(151)+5*s(153)+1*s(184)+2*s(185)+0
  Such that:it([[47,49],65,112]) =< 1

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],[47,49],51,112]: 102*it(40)+1*it([[47,49],51,112])+3*s(125)+3*s(128)+2*s(131)+12*s(137)+12*s(138)+3*s(143)+3*s(151)+5*s(153)+1*s(188)+3*s(189)+0
  Such that:it([[47,49],51,112]) =< 1

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],[46,48],64,112]: 102*it(40)+1*it([[46,48],64,112])+3*s(125)+3*s(128)+2*s(131)+12*s(137)+12*s(138)+3*s(143)+3*s(151)+5*s(153)+1*s(194)+2*s(195)+0
  Such that:it([[46,48],64,112]) =< 1

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],[46,48],50,112]: 102*it(40)+1*it([[46,48],50,112])+3*s(125)+3*s(128)+2*s(131)+12*s(137)+12*s(138)+3*s(143)+3*s(151)+5*s(153)+1*s(198)+3*s(199)+0
  Such that:it([[46,48],50,112]) =< 1

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],112]: 145*it(40)+0
  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],111,112]: 145*it(40)+1
  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],110,112]: 145*it(40)+1*s(201)+2
  Such that:s(201) =< 128

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],109,112]: 102*it(40)+2*it([109,112])+3*s(125)+3*s(128)+2*s(131)+12*s(137)+12*s(138)+3*s(143)+3*s(151)+5*s(153)+1*s(204)+1*s(205)+0
  Such that:it([109,112]) =< 1

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],105,112]: 145*it(40)+1*s(206)+2
  Such that:s(206) =< 256

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],104,112]: 145*it(40)+1*s(207)+1
  Such that:s(207) =< 128

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],103,112]: 102*it(40)+2*it([103,112])+3*s(125)+3*s(128)+2*s(131)+12*s(137)+12*s(138)+3*s(143)+3*s(151)+5*s(153)+1*s(210)+1*s(211)+0
  Such that:it([103,112]) =< 1

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],99,112]: 145*it(40)+1
  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],98,112]: 145*it(40)+1
  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],95,112]: 145*it(40)+1*s(212)+1
  Such that:s(212) =< 128

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],93,112]: 145*it(40)+1
  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],92,112]: 102*it(40)+1*it([92,112])+3*s(125)+3*s(128)+2*s(131)+12*s(137)+12*s(138)+3*s(143)+3*s(151)+5*s(153)+1*s(215)+1*s(216)+0
  Such that:it([92,112]) =< 1

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],89,112]: 145*it(40)+1*s(217)+1
  Such that:s(217) =< 128

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],88,112]: 102*it(40)+1*it([88,112])+3*s(125)+3*s(128)+2*s(131)+12*s(137)+12*s(138)+3*s(143)+3*s(151)+5*s(153)+1*s(220)+1*s(221)+0
  Such that:it([88,112]) =< 1

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],85,112]: 147*it(40)+1
  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],84,112]: 146*aux(519)+0
  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],83,112]: 145*it(40)+1*s(224)+3
  Such that:s(224) =< 128

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],81,112]: 102*it(40)+2*it([81,112])+3*s(125)+3*s(128)+2*s(131)+12*s(137)+12*s(138)+3*s(143)+3*s(151)+5*s(153)+1*s(227)+1*s(228)+0
  Such that:it([81,112]) =< 1

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],80,112]: 102*it(40)+3*it([80,112])+3*s(125)+3*s(128)+2*s(131)+12*s(137)+12*s(138)+3*s(143)+3*s(151)+5*s(153)+1*s(231)+1*s(232)+0
  Such that:it([80,112]) =< 1

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],75,112]: 145*it(40)+1*s(233)+3
  Such that:s(233) =< 256

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],74,112]: 145*it(40)+1*s(234)+2
  Such that:s(234) =< 128

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],73,112]: 102*it(40)+2*it([73,112])+3*s(125)+3*s(128)+2*s(131)+12*s(137)+12*s(138)+3*s(143)+3*s(151)+5*s(153)+1*s(237)+1*s(238)+0
  Such that:it([73,112]) =< 1

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],72,112]: 102*it(40)+3*it([72,112])+3*s(125)+3*s(128)+2*s(131)+12*s(137)+12*s(138)+3*s(143)+3*s(151)+5*s(153)+1*s(241)+1*s(242)+0
  Such that:it([72,112]) =< 1

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],67,112]: 147*it(40)+1*s(243)+1
  Such that:s(243) =< 128

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],65,112]: 145*it(40)+1
  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],64,112]: 145*it(40)+1
  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],63,112]: 147*it(40)+1*s(245)+3
  Such that:s(245) =< 128

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],62,112]: 104*it(40)+2*it([62,112])+3*s(125)+3*s(128)+2*s(131)+12*s(137)+12*s(138)+3*s(143)+3*s(151)+5*s(153)+1*s(250)+1*s(251)+0
  Such that:it([62,112]) =< 1

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],61,112]: 104*it(40)+3*it([61,112])+3*s(125)+3*s(128)+2*s(131)+12*s(137)+12*s(138)+3*s(143)+3*s(151)+5*s(153)+1*s(256)+1*s(257)+0
  Such that:it([61,112]) =< 1

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],57,112]: 147*it(40)+1*s(259)+3
  Such that:s(259) =< 256

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],56,112]: 104*it(40)+2*it([56,112])+3*s(125)+3*s(128)+2*s(131)+12*s(137)+12*s(138)+3*s(143)+3*s(151)+5*s(153)+1*s(264)+1*s(265)+0
  Such that:it([56,112]) =< 1

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],55,112]: 104*it(40)+3*it([55,112])+3*s(125)+3*s(128)+2*s(131)+12*s(137)+12*s(138)+3*s(143)+3*s(151)+5*s(153)+1*s(270)+1*s(271)+0
  Such that:it([55,112]) =< 1

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],51,112]: 102*it(40)+1*it([51,112])+3*s(125)+3*s(128)+2*s(131)+12*s(137)+12*s(138)+3*s(143)+3*s(151)+5*s(153)+1*s(273)+0
  Such that:it([51,112]) =< 1

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [[40,41,42,43,44,45,52,53,54,58,59,60,66,68,69,70,71,76,77,78,79,82,86,87,90,91,94,96,97,100,101,102,106,107,108],50,112]: 102*it(40)+1*it([50,112])+3*s(125)+3*s(128)+2*s(131)+12*s(137)+12*s(138)+3*s(143)+3*s(151)+5*s(153)+1*s(274)+0
  Such that:it([50,112]) =< 1

  with precondition: [B=6,3>=V_state_0,V_state_0>=0,V__0>=1,V__0+V_state_0>=2] 

* Chain [112]: 0
  with precondition: [B=6,0>=V__0] 

* Chain [111,112]: 1
  with precondition: [V_state_0=0,V__0=1,B=6] 

* Chain [110,112]: 1*s(201)+2
  Such that:s(201) =< 128

  with precondition: [V_state_0=0,V__0=129,B=6] 

* Chain [109,112]: 1*s(202)+1*s(203)+2
  Such that:s(202) =< V__0
s(203) =< V__0/128

  with precondition: [V_state_0=0,B=6,V__0>=257] 

* Chain [105,112]: 1*s(206)+2
  Such that:s(206) =< V__0

  with precondition: [V_state_0=0,B=6,256>=V__0,V__0>=130] 

* Chain [104,112]: 1*s(207)+1
  Such that:s(207) =< V__0

  with precondition: [V_state_0=0,B=6,128>=V__0,V__0>=2] 

* Chain [103,112]: 1*s(208)+1*s(209)+2
  Such that:s(208) =< V__0
s(209) =< V__0/128

  with precondition: [V_state_0=0,B=6,V__0>=258] 


#### Cost of chains of eval_PackBitsEncode_bb0_in(V_cc,B):
* Chain [121]: 1
  with precondition: [V_cc=1] 

* Chain [120]: 1*s(520)+2
  Such that:s(520) =< 128

  with precondition: [V_cc=129] 

* Chain [119]: 1*s(521)+2
  Such that:s(521) =< V_cc

  with precondition: [256>=V_cc,V_cc>=130] 

* Chain [118]: 1*s(522)+1
  Such that:s(522) =< V_cc

  with precondition: [128>=V_cc,V_cc>=2] 

* Chain [117]: 0
  with precondition: [0>=V_cc] 

* Chain [116]: 1*s(523)+0
  with precondition: [V_cc>=2] 

* Chain [115]: 1*s(524)+1*s(525)+2
  Such that:s(524) =< V_cc
s(525) =< V_cc/128

  with precondition: [V_cc>=257] 

* Chain [114]: 1*s(526)+1*s(527)+2
  Such that:s(526) =< V_cc
s(527) =< V_cc/128

  with precondition: [V_cc>=258] 

* Chain [113]...: 145*s(528)+0
  with precondition: [V_cc>=2] 


#### Cost of chains of eval_PackBitsEncode_start(V_cc,B):
* Chain [130]: 1
  with precondition: [V_cc=1] 

* Chain [129]: 1*s(529)+2
  Such that:s(529) =< 128

  with precondition: [V_cc=129] 

* Chain [128]: 1*s(530)+2
  Such that:s(530) =< V_cc

  with precondition: [256>=V_cc,V_cc>=130] 

* Chain [127]: 1*s(531)+1
  Such that:s(531) =< V_cc

  with precondition: [128>=V_cc,V_cc>=2] 

* Chain [126]: 0
  with precondition: [0>=V_cc] 

* Chain [125]: 1*s(532)+0
  with precondition: [V_cc>=2] 

* Chain [124]: 1*s(533)+1*s(534)+2
  Such that:s(533) =< V_cc
s(534) =< V_cc/128

  with precondition: [V_cc>=257] 

* Chain [123]: 1*s(535)+1*s(536)+2
  Such that:s(535) =< V_cc
s(536) =< V_cc/128

  with precondition: [V_cc>=258] 

* Chain [122]...: 145*s(537)+0
  with precondition: [V_cc>=2] 


Closed-form bounds of eval_PackBitsEncode_start(V_cc,B): 
-------------------------------------
* Chain [130] with precondition: [V_cc=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [129] with precondition: [V_cc=129] 
    - Upper bound: 130 
    - Complexity: constant 
* Chain [128] with precondition: [256>=V_cc,V_cc>=130] 
    - Upper bound: V_cc+2 
    - Complexity: n 
* Chain [127] with precondition: [128>=V_cc,V_cc>=2] 
    - Upper bound: V_cc+1 
    - Complexity: n 
* Chain [126] with precondition: [0>=V_cc] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [125] with precondition: [V_cc>=2] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [124] with precondition: [V_cc>=257] 
    - Upper bound: 129/128*V_cc+2 
    - Complexity: n 
* Chain [123] with precondition: [V_cc>=258] 
    - Upper bound: 129/128*V_cc+2 
    - Complexity: n 
* Chain [122]... with precondition: [V_cc>=2] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_PackBitsEncode_start(V_cc,B): inf 
Asymptotic class: infinity 
* Total analysis performed in 4616 ms.

