WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_load_mems_2/3,eval_load_mems_3/4,eval_load_mems_bb4_in/3,eval_load_mems_bb5_in/3,eval_load_mems_bb6_in/4]
1. recursive  : [eval_load_mems_0/5,eval_load_mems_1/6,eval_load_mems_bb2_in/5,eval_load_mems_bb3_in/5,eval_load_mems_bb4_in_loop_cont/8,eval_load_mems_bb7_in/7]
2. recursive  : [eval_load_mems_bb1_in/4,eval_load_mems_bb2_in_loop_cont/7,eval_load_mems_bb8_in/6]
3. non_recursive  : [eval_load_mems_stop/1]
4. non_recursive  : [eval_load_mems_bb9_in/1]
5. non_recursive  : [eval_load_mems_bb1_in_loop_cont/2]
6. non_recursive  : [eval_load_mems_bb0_in/4]
7. non_recursive  : [eval_load_mems_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_load_mems_bb4_in/3
1. SCC is partially evaluated into eval_load_mems_bb2_in/5
2. SCC is partially evaluated into eval_load_mems_bb1_in/4
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_load_mems_bb0_in/4
7. SCC is partially evaluated into eval_load_mems_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_load_mems_bb4_in/3 
* CE 10 is refined into CE [11] 
* CE 8 is refined into CE [12] 
* CE 9 is refined into CE [13] 


### Cost equations --> "Loop" of eval_load_mems_bb4_in/3 
* CEs [13] --> Loop 10 
* CEs [11] --> Loop 11 
* CEs [12] --> Loop 12 

### Ranking functions of CR eval_load_mems_bb4_in(V__2,B,C) 
* RF of phase [10]: [-V__2+64]

#### Partial ranking functions of CR eval_load_mems_bb4_in(V__2,B,C) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    -V__2+64


### Specialization of cost equations eval_load_mems_bb2_in/5 
* CE 7 is refined into CE [14] 
* CE 5 is refined into CE [15] 
* CE 6 is refined into CE [16,17,18,19] 


### Cost equations --> "Loop" of eval_load_mems_bb2_in/5 
* CEs [18] --> Loop 13 
* CEs [15] --> Loop 14 
* CEs [19] --> Loop 15 
* CEs [16,17] --> Loop 16 
* CEs [14] --> Loop 17 

### Ranking functions of CR eval_load_mems_bb2_in(V__13,V__1,B,C,D) 
* RF of phase [14,15,16]: [-V__1+2]

#### Partial ranking functions of CR eval_load_mems_bb2_in(V__13,V__1,B,C,D) 
* Partial RF of phase [14,15,16]:
  - RF of loop [14:1,15:1,16:1]:
    -V__1+2


### Specialization of cost equations eval_load_mems_bb1_in/4 
* CE 4 is refined into CE [20] 
* CE 3 is refined into CE [21,22,23,24] 


### Cost equations --> "Loop" of eval_load_mems_bb1_in/4 
* CEs [24] --> Loop 18 
* CEs [23] --> Loop 19 
* CEs [22] --> Loop 20 
* CEs [21] --> Loop 21 
* CEs [20] --> Loop 22 

### Ranking functions of CR eval_load_mems_bb1_in(V__02,V__01,V__0,B) 
* RF of phase [20]: [V__0]

#### Partial ranking functions of CR eval_load_mems_bb1_in(V__02,V__01,V__0,B) 
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    V__0


### Specialization of cost equations eval_load_mems_bb0_in/4 
* CE 2 is refined into CE [25,26,27,28,29,30,31,32,33,34] 


### Cost equations --> "Loop" of eval_load_mems_bb0_in/4 
* CEs [33] --> Loop 23 
* CEs [34] --> Loop 24 
* CEs [31] --> Loop 25 
* CEs [30] --> Loop 26 
* CEs [32] --> Loop 27 
* CEs [26] --> Loop 28 
* CEs [29] --> Loop 29 
* CEs [28] --> Loop 30 
* CEs [27] --> Loop 31 
* CEs [25] --> Loop 32 

### Ranking functions of CR eval_load_mems_bb0_in(V_ptr,V_word_num_,V_bit_num_,B) 

#### Partial ranking functions of CR eval_load_mems_bb0_in(V_ptr,V_word_num_,V_bit_num_,B) 


### Specialization of cost equations eval_load_mems_start/4 
* CE 1 is refined into CE [35,36,37,38,39,40,41,42,43,44] 


### Cost equations --> "Loop" of eval_load_mems_start/4 
* CEs [44] --> Loop 33 
* CEs [43] --> Loop 34 
* CEs [42] --> Loop 35 
* CEs [41] --> Loop 36 
* CEs [40] --> Loop 37 
* CEs [39] --> Loop 38 
* CEs [38] --> Loop 39 
* CEs [37] --> Loop 40 
* CEs [36] --> Loop 41 
* CEs [35] --> Loop 42 

### Ranking functions of CR eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) 

#### Partial ranking functions of CR eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_load_mems_bb4_in(V__2,B,C):
* Chain [[10],12]: 1*it(10)+0
  Such that:it(10) =< -V__2+C

  with precondition: [B=2,63>=C,C>=V__2+1] 

* Chain [[10],11]: 1*it(10)+0
  Such that:it(10) =< -V__2+64

  with precondition: [B=2,C=64,63>=V__2] 

* Chain [12]: 0
  with precondition: [B=2,V__2=C,63>=V__2] 

* Chain [11]: 0
  with precondition: [B=2,V__2=C,V__2>=64] 


#### Cost of chains of eval_load_mems_bb2_in(V__13,V__1,B,C,D):
* Chain [[14,15,16],17]: 3*it(14)+1*s(5)+1*s(6)+0
  Such that:aux(5) =< 63
aux(4) =< -V__13+63
aux(8) =< -V__13-64*V__1+128
aux(2) =< -V__13-63*V__1+126
aux(6) =< -63*V__1+63
aux(13) =< -V__1+2
it(14) =< aux(13)
aux(3) =< max([aux(4),aux(5)])+it(14)*62+it(14)*63
aux(1) =< it(14)*aux(6)
aux(9) =< aux(3)+1
aux(7) =< aux(1)*(64/63)
s(5) =< aux(1)+aux(2)
s(5) =< it(14)*aux(3)
s(6) =< aux(7)+aux(8)
s(6) =< it(14)*aux(9)

  with precondition: [B=3,C=0,D=2,1>=V__1] 

* Chain [17]: 0
  with precondition: [B=3,C=V__13,V__1=D,V__1>=2] 

* Chain [13,[14,15,16],17]: 3*it(14)+1*s(5)+1*s(6)+1
  Such that:aux(8) =< -64*V__1+64
aux(6) =< -63*V__1
aux(2) =< -63*V__1+63
aux(13) =< -V__1+1
aux(14) =< 63
it(14) =< aux(13)
aux(3) =< max([aux(14),aux(14)])+it(14)*62+it(14)*63
aux(1) =< it(14)*aux(6)
aux(9) =< aux(3)+1
aux(7) =< aux(1)*(64/63)
s(5) =< aux(1)+aux(2)
s(5) =< it(14)*aux(3)
s(6) =< aux(7)+aux(8)
s(6) =< it(14)*aux(9)

  with precondition: [B=3,C=0,D=2,0>=V__1,V__13>=64] 

* Chain [13,17]: 1
  with precondition: [V__1=1,B=3,C=0,D=2,V__13>=64] 


#### Cost of chains of eval_load_mems_bb1_in(V__02,V__01,V__0,B):
* Chain [[20],22]: 1*it(20)+3*s(33)+1*s(34)+1*s(35)+0
  Such that:aux(23) =< 63
aux(22) =< 126
aux(19) =< 128
aux(15) =< -V__02+63
aux(18) =< -V__02-64*V__01+128
aux(21) =< -V__02-63*V__01+126
s(24) =< -63*V__01+126
s(24) =< -63*V__01+63*V__0
s(40) =< -V__01+2*V__0
it(20) =< V__0
aux(20) =< max([aux(21),aux(22)])
aux(17) =< max([aux(18),aux(19)])
s(25) =< s(24)*(1/63)+1
s(21) =< max([aux(15),aux(23)])
s(38) =< it(20)*aux(20)
s(36) =< it(20)*aux(17)
s(33) =< s(40)
s(27) =< max([s(21),aux(23)])+s(25)*62+s(25)*63
s(39) =< s(33)*s(24)
s(29) =< s(27)+1
s(37) =< s(39)*(64/63)
s(34) =< s(39)+s(38)
s(34) =< s(33)*s(27)
s(35) =< s(37)+s(36)
s(35) =< s(33)*s(29)

  with precondition: [B=4,1>=V__01,V__0>=1] 

* Chain [22]: 0
  with precondition: [B=4,0>=V__0] 

* Chain [21,[20],22]: 1*it(20)+3*s(33)+1*s(34)+1*s(35)+2
  Such that:it(20) =< V__0
s(40) =< 2*V__0
s(24) =< 63*V__0
aux(24) =< 63
aux(25) =< 126
aux(26) =< 128
s(24) =< aux(25)
aux(20) =< max([aux(25),aux(25)])
aux(17) =< max([aux(26),aux(26)])
s(25) =< s(24)*(1/63)+1
s(21) =< max([aux(24),aux(24)])
s(38) =< it(20)*aux(20)
s(36) =< it(20)*aux(17)
s(33) =< s(40)
s(27) =< max([s(21),aux(24)])+s(25)*62+s(25)*63
s(39) =< s(33)*s(24)
s(29) =< s(27)+1
s(37) =< s(39)*(64/63)
s(34) =< s(39)+s(38)
s(34) =< s(33)*s(27)
s(35) =< s(37)+s(36)
s(35) =< s(33)*s(29)

  with precondition: [V__01=1,B=4,V__02>=64,V__0>=2] 

* Chain [21,22]: 2
  with precondition: [V__01=1,V__0=1,B=4,V__02>=64] 

* Chain [19,[20],22]: 1*it(20)+3*s(33)+1*s(34)+1*s(35)+3*s(46)+1*s(51)+1*s(52)+2
  Such that:s(41) =< -64*V__01+64
s(42) =< -63*V__01
s(43) =< -63*V__01+63
s(44) =< -V__01+1
it(20) =< V__0
s(40) =< 2*V__0
s(24) =< 63*V__0
aux(27) =< 63
aux(28) =< 126
aux(29) =< 128
s(24) =< aux(28)
aux(20) =< max([aux(28),aux(28)])
aux(17) =< max([aux(29),aux(29)])
s(25) =< s(24)*(1/63)+1
s(21) =< max([aux(27),aux(27)])
s(38) =< it(20)*aux(20)
s(36) =< it(20)*aux(17)
s(33) =< s(40)
s(27) =< max([s(21),aux(27)])+s(25)*62+s(25)*63
s(39) =< s(33)*s(24)
s(29) =< s(27)+1
s(37) =< s(39)*(64/63)
s(34) =< s(39)+s(38)
s(34) =< s(33)*s(27)
s(35) =< s(37)+s(36)
s(35) =< s(33)*s(29)
s(46) =< s(44)
s(47) =< max([aux(27),aux(27)])+s(46)*62+s(46)*63
s(48) =< s(46)*s(42)
s(49) =< s(47)+1
s(50) =< s(48)*(64/63)
s(51) =< s(48)+s(43)
s(51) =< s(46)*s(47)
s(52) =< s(50)+s(41)
s(52) =< s(46)*s(49)

  with precondition: [B=4,0>=V__01,V__02>=64,V__0>=2] 

* Chain [19,22]: 3*s(46)+1*s(51)+1*s(52)+2
  Such that:s(45) =< 63
s(41) =< -64*V__01+64
s(42) =< -63*V__01
s(43) =< -63*V__01+63
s(44) =< -V__01+1
s(46) =< s(44)
s(47) =< max([s(45),s(45)])+s(46)*62+s(46)*63
s(48) =< s(46)*s(42)
s(49) =< s(47)+1
s(50) =< s(48)*(64/63)
s(51) =< s(48)+s(43)
s(51) =< s(46)*s(47)
s(52) =< s(50)+s(41)
s(52) =< s(46)*s(49)

  with precondition: [V__0=1,B=4,0>=V__01,V__02>=64] 

* Chain [18,[20],22]: 1*it(20)+3*s(33)+1*s(34)+1*s(35)+1
  Such that:aux(23) =< 63
aux(19) =< 128
aux(15) =< -V__02+63
aux(21) =< -V__02+126
aux(18) =< -V__02+128
it(20) =< V__0
s(40) =< 2*V__0
s(24) =< 63*V__0
aux(30) =< 126
s(24) =< aux(30)
aux(20) =< max([aux(21),aux(30)])
aux(17) =< max([aux(18),aux(19)])
s(25) =< s(24)*(1/63)+1
s(21) =< max([aux(15),aux(23)])
s(38) =< it(20)*aux(20)
s(36) =< it(20)*aux(17)
s(33) =< s(40)
s(27) =< max([s(21),aux(23)])+s(25)*62+s(25)*63
s(39) =< s(33)*s(24)
s(29) =< s(27)+1
s(37) =< s(39)*(64/63)
s(34) =< s(39)+s(38)
s(34) =< s(33)*s(27)
s(35) =< s(37)+s(36)
s(35) =< s(33)*s(29)

  with precondition: [B=4,V__01>=2,V__0>=2] 

* Chain [18,22]: 1
  with precondition: [V__0=1,B=4,V__01>=2] 

* Chain [18,19,[20],22]: 1*it(20)+3*s(33)+1*s(34)+1*s(35)+3*s(46)+1*s(51)+1*s(52)+3
  Such that:s(44) =< 1
s(41) =< 64
aux(28) =< 126
aux(29) =< 128
it(20) =< V__0
s(40) =< 2*V__0
s(24) =< 63*V__0
aux(31) =< 63
s(24) =< aux(28)
aux(20) =< max([aux(28),aux(28)])
aux(17) =< max([aux(29),aux(29)])
s(25) =< s(24)*(1/63)+1
s(21) =< max([aux(31),aux(31)])
s(38) =< it(20)*aux(20)
s(36) =< it(20)*aux(17)
s(33) =< s(40)
s(27) =< max([s(21),aux(31)])+s(25)*62+s(25)*63
s(39) =< s(33)*s(24)
s(29) =< s(27)+1
s(37) =< s(39)*(64/63)
s(34) =< s(39)+s(38)
s(34) =< s(33)*s(27)
s(35) =< s(37)+s(36)
s(35) =< s(33)*s(29)
s(46) =< s(44)
s(47) =< max([aux(31),aux(31)])+s(46)*62+s(46)*63
s(49) =< s(47)+1
s(51) =< aux(31)
s(51) =< s(46)*s(47)
s(52) =< s(41)
s(52) =< s(46)*s(49)

  with precondition: [B=4,V__02>=64,V__01>=2,V__0>=3] 

* Chain [18,19,22]: 3*s(46)+1*s(51)+1*s(52)+3
  Such that:s(44) =< 1
s(41) =< 64
aux(32) =< 63
s(46) =< s(44)
s(47) =< max([aux(32),aux(32)])+s(46)*62+s(46)*63
s(49) =< s(47)+1
s(51) =< aux(32)
s(51) =< s(46)*s(47)
s(52) =< s(41)
s(52) =< s(46)*s(49)

  with precondition: [V__0=2,B=4,V__02>=64,V__01>=2] 


#### Cost of chains of eval_load_mems_bb0_in(V_ptr,V_word_num_,V_bit_num_,B):
* Chain [32]: 2
  with precondition: [V_ptr=1,V_word_num_=1,V_bit_num_>=64] 

* Chain [31]: 3*s(58)+1*s(63)+1*s(64)+2
  Such that:s(53) =< 63
s(54) =< -64*V_word_num_+64
s(55) =< -63*V_word_num_
s(56) =< -63*V_word_num_+63
s(57) =< -V_word_num_+1
s(58) =< s(57)
s(59) =< max([s(53),s(53)])+s(58)*62+s(58)*63
s(60) =< s(58)*s(55)
s(61) =< s(59)+1
s(62) =< s(60)*(64/63)
s(63) =< s(60)+s(56)
s(63) =< s(58)*s(59)
s(64) =< s(62)+s(54)
s(64) =< s(58)*s(61)

  with precondition: [V_ptr=1,0>=V_word_num_,V_bit_num_>=64] 

* Chain [30]: 1
  with precondition: [V_ptr=1,V_word_num_>=2] 

* Chain [29]: 3*s(68)+1*s(71)+1*s(72)+3
  Such that:s(65) =< 1
s(67) =< 63
s(66) =< 64
s(68) =< s(65)
s(69) =< max([s(67),s(67)])+s(68)*62+s(68)*63
s(70) =< s(69)+1
s(71) =< s(67)
s(71) =< s(68)*s(69)
s(72) =< s(66)
s(72) =< s(68)*s(70)

  with precondition: [V_ptr=2,V_word_num_>=2,V_bit_num_>=64] 

* Chain [28]: 1*s(73)+3*s(85)+1*s(90)+1*s(91)+2
  Such that:s(76) =< 63
s(77) =< 126
s(78) =< 128
s(73) =< V_ptr
s(74) =< 2*V_ptr
s(75) =< 63*V_ptr
s(75) =< s(77)
s(79) =< max([s(77),s(77)])
s(80) =< max([s(78),s(78)])
s(81) =< s(75)*(1/63)+1
s(82) =< max([s(76),s(76)])
s(83) =< s(73)*s(79)
s(84) =< s(73)*s(80)
s(85) =< s(74)
s(86) =< max([s(82),s(76)])+s(81)*62+s(81)*63
s(87) =< s(85)*s(75)
s(88) =< s(86)+1
s(89) =< s(87)*(64/63)
s(90) =< s(87)+s(83)
s(90) =< s(85)*s(86)
s(91) =< s(89)+s(84)
s(91) =< s(85)*s(88)

  with precondition: [V_word_num_=1,V_ptr>=2,V_bit_num_>=64] 

* Chain [27]: 0
  with precondition: [0>=V_ptr] 

* Chain [26]: 1*s(100)+3*s(107)+1*s(112)+1*s(113)+0
  Such that:s(92) =< 63
s(93) =< 126
s(94) =< 128
s(100) =< V_ptr
s(99) =< 2*V_ptr-V_word_num_
s(98) =< 63*V_ptr-63*V_word_num_
s(96) =< -64*V_word_num_-V_bit_num_+128
s(98) =< -63*V_word_num_+126
s(97) =< -63*V_word_num_-V_bit_num_+126
s(95) =< -V_bit_num_+63
s(101) =< max([s(97),s(93)])
s(102) =< max([s(96),s(94)])
s(103) =< s(98)*(1/63)+1
s(104) =< max([s(95),s(92)])
s(105) =< s(100)*s(101)
s(106) =< s(100)*s(102)
s(107) =< s(99)
s(108) =< max([s(104),s(92)])+s(103)*62+s(103)*63
s(109) =< s(107)*s(98)
s(110) =< s(108)+1
s(111) =< s(109)*(64/63)
s(112) =< s(109)+s(105)
s(112) =< s(107)*s(108)
s(113) =< s(111)+s(106)
s(113) =< s(107)*s(110)

  with precondition: [1>=V_word_num_,V_ptr>=1] 

* Chain [25]: 1*s(118)+3*s(130)+1*s(135)+1*s(136)+3*s(137)+1*s(142)+1*s(143)+2
  Such that:s(121) =< 63
s(122) =< 126
s(123) =< 128
s(118) =< V_ptr
s(119) =< 2*V_ptr
s(120) =< 63*V_ptr
s(114) =< -64*V_word_num_+64
s(115) =< -63*V_word_num_
s(116) =< -63*V_word_num_+63
s(117) =< -V_word_num_+1
s(120) =< s(122)
s(124) =< max([s(122),s(122)])
s(125) =< max([s(123),s(123)])
s(126) =< s(120)*(1/63)+1
s(127) =< max([s(121),s(121)])
s(128) =< s(118)*s(124)
s(129) =< s(118)*s(125)
s(130) =< s(119)
s(131) =< max([s(127),s(121)])+s(126)*62+s(126)*63
s(132) =< s(130)*s(120)
s(133) =< s(131)+1
s(134) =< s(132)*(64/63)
s(135) =< s(132)+s(128)
s(135) =< s(130)*s(131)
s(136) =< s(134)+s(129)
s(136) =< s(130)*s(133)
s(137) =< s(117)
s(138) =< max([s(121),s(121)])+s(137)*62+s(137)*63
s(139) =< s(137)*s(115)
s(140) =< s(138)+1
s(141) =< s(139)*(64/63)
s(142) =< s(139)+s(116)
s(142) =< s(137)*s(138)
s(143) =< s(141)+s(114)
s(143) =< s(137)*s(140)

  with precondition: [0>=V_word_num_,V_ptr>=2,V_bit_num_>=64] 

* Chain [24]: 1*s(149)+3*s(159)+1*s(164)+1*s(165)+1
  Such that:s(144) =< 63
s(152) =< 126
s(145) =< 128
s(149) =< V_ptr
s(150) =< 2*V_ptr
s(151) =< 63*V_ptr
s(146) =< -V_bit_num_+63
s(147) =< -V_bit_num_+126
s(148) =< -V_bit_num_+128
s(151) =< s(152)
s(153) =< max([s(147),s(152)])
s(154) =< max([s(148),s(145)])
s(155) =< s(151)*(1/63)+1
s(156) =< max([s(146),s(144)])
s(157) =< s(149)*s(153)
s(158) =< s(149)*s(154)
s(159) =< s(150)
s(160) =< max([s(156),s(144)])+s(155)*62+s(155)*63
s(161) =< s(159)*s(151)
s(162) =< s(160)+1
s(163) =< s(161)*(64/63)
s(164) =< s(161)+s(157)
s(164) =< s(159)*s(160)
s(165) =< s(163)+s(158)
s(165) =< s(159)*s(162)

  with precondition: [V_ptr>=2,V_word_num_>=2] 

* Chain [23]: 1*s(170)+3*s(180)+1*s(185)+1*s(186)+3*s(187)+1*s(190)+1*s(191)+3
  Such that:s(166) =< 1
s(173) =< 63
s(167) =< 64
s(168) =< 126
s(169) =< 128
s(170) =< V_ptr
s(171) =< 2*V_ptr
s(172) =< 63*V_ptr
s(172) =< s(168)
s(174) =< max([s(168),s(168)])
s(175) =< max([s(169),s(169)])
s(176) =< s(172)*(1/63)+1
s(177) =< max([s(173),s(173)])
s(178) =< s(170)*s(174)
s(179) =< s(170)*s(175)
s(180) =< s(171)
s(181) =< max([s(177),s(173)])+s(176)*62+s(176)*63
s(182) =< s(180)*s(172)
s(183) =< s(181)+1
s(184) =< s(182)*(64/63)
s(185) =< s(182)+s(178)
s(185) =< s(180)*s(181)
s(186) =< s(184)+s(179)
s(186) =< s(180)*s(183)
s(187) =< s(166)
s(188) =< max([s(173),s(173)])+s(187)*62+s(187)*63
s(189) =< s(188)+1
s(190) =< s(173)
s(190) =< s(187)*s(188)
s(191) =< s(167)
s(191) =< s(187)*s(189)

  with precondition: [V_ptr>=3,V_word_num_>=2,V_bit_num_>=64] 


#### Cost of chains of eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B):
* Chain [42]: 2
  with precondition: [V_ptr=1,V_word_num_=1,V_bit_num_>=64] 

* Chain [41]: 3*s(197)+1*s(202)+1*s(203)+2
  Such that:s(192) =< 63
s(193) =< -64*V_word_num_+64
s(194) =< -63*V_word_num_
s(195) =< -63*V_word_num_+63
s(196) =< -V_word_num_+1
s(197) =< s(196)
s(198) =< max([s(192),s(192)])+s(197)*62+s(197)*63
s(199) =< s(197)*s(194)
s(200) =< s(198)+1
s(201) =< s(199)*(64/63)
s(202) =< s(199)+s(195)
s(202) =< s(197)*s(198)
s(203) =< s(201)+s(193)
s(203) =< s(197)*s(200)

  with precondition: [V_ptr=1,0>=V_word_num_,V_bit_num_>=64] 

* Chain [40]: 1
  with precondition: [V_ptr=1,V_word_num_>=2] 

* Chain [39]: 3*s(207)+1*s(210)+1*s(211)+3
  Such that:s(204) =< 1
s(205) =< 63
s(206) =< 64
s(207) =< s(204)
s(208) =< max([s(205),s(205)])+s(207)*62+s(207)*63
s(209) =< s(208)+1
s(210) =< s(205)
s(210) =< s(207)*s(208)
s(211) =< s(206)
s(211) =< s(207)*s(209)

  with precondition: [V_ptr=2,V_word_num_>=2,V_bit_num_>=64] 

* Chain [38]: 1*s(215)+3*s(224)+1*s(229)+1*s(230)+2
  Such that:s(212) =< 63
s(213) =< 126
s(214) =< 128
s(215) =< V_ptr
s(216) =< 2*V_ptr
s(217) =< 63*V_ptr
s(217) =< s(213)
s(218) =< max([s(213),s(213)])
s(219) =< max([s(214),s(214)])
s(220) =< s(217)*(1/63)+1
s(221) =< max([s(212),s(212)])
s(222) =< s(215)*s(218)
s(223) =< s(215)*s(219)
s(224) =< s(216)
s(225) =< max([s(221),s(212)])+s(220)*62+s(220)*63
s(226) =< s(224)*s(217)
s(227) =< s(225)+1
s(228) =< s(226)*(64/63)
s(229) =< s(226)+s(222)
s(229) =< s(224)*s(225)
s(230) =< s(228)+s(223)
s(230) =< s(224)*s(227)

  with precondition: [V_word_num_=1,V_ptr>=2,V_bit_num_>=64] 

* Chain [37]: 0
  with precondition: [0>=V_ptr] 

* Chain [36]: 1*s(234)+3*s(246)+1*s(251)+1*s(252)+0
  Such that:s(231) =< 63
s(232) =< 126
s(233) =< 128
s(234) =< V_ptr
s(235) =< 2*V_ptr-V_word_num_
s(236) =< 63*V_ptr-63*V_word_num_
s(237) =< -64*V_word_num_-V_bit_num_+128
s(236) =< -63*V_word_num_+126
s(238) =< -63*V_word_num_-V_bit_num_+126
s(239) =< -V_bit_num_+63
s(240) =< max([s(238),s(232)])
s(241) =< max([s(237),s(233)])
s(242) =< s(236)*(1/63)+1
s(243) =< max([s(239),s(231)])
s(244) =< s(234)*s(240)
s(245) =< s(234)*s(241)
s(246) =< s(235)
s(247) =< max([s(243),s(231)])+s(242)*62+s(242)*63
s(248) =< s(246)*s(236)
s(249) =< s(247)+1
s(250) =< s(248)*(64/63)
s(251) =< s(248)+s(244)
s(251) =< s(246)*s(247)
s(252) =< s(250)+s(245)
s(252) =< s(246)*s(249)

  with precondition: [1>=V_word_num_,V_ptr>=1] 

* Chain [35]: 1*s(256)+3*s(269)+1*s(274)+1*s(275)+3*s(276)+1*s(281)+1*s(282)+2
  Such that:s(253) =< 63
s(254) =< 126
s(255) =< 128
s(256) =< V_ptr
s(257) =< 2*V_ptr
s(258) =< 63*V_ptr
s(259) =< -64*V_word_num_+64
s(260) =< -63*V_word_num_
s(261) =< -63*V_word_num_+63
s(262) =< -V_word_num_+1
s(258) =< s(254)
s(263) =< max([s(254),s(254)])
s(264) =< max([s(255),s(255)])
s(265) =< s(258)*(1/63)+1
s(266) =< max([s(253),s(253)])
s(267) =< s(256)*s(263)
s(268) =< s(256)*s(264)
s(269) =< s(257)
s(270) =< max([s(266),s(253)])+s(265)*62+s(265)*63
s(271) =< s(269)*s(258)
s(272) =< s(270)+1
s(273) =< s(271)*(64/63)
s(274) =< s(271)+s(267)
s(274) =< s(269)*s(270)
s(275) =< s(273)+s(268)
s(275) =< s(269)*s(272)
s(276) =< s(262)
s(277) =< max([s(253),s(253)])+s(276)*62+s(276)*63
s(278) =< s(276)*s(260)
s(279) =< s(277)+1
s(280) =< s(278)*(64/63)
s(281) =< s(278)+s(261)
s(281) =< s(276)*s(277)
s(282) =< s(280)+s(259)
s(282) =< s(276)*s(279)

  with precondition: [0>=V_word_num_,V_ptr>=2,V_bit_num_>=64] 

* Chain [34]: 1*s(286)+3*s(298)+1*s(303)+1*s(304)+1
  Such that:s(283) =< 63
s(284) =< 126
s(285) =< 128
s(286) =< V_ptr
s(287) =< 2*V_ptr
s(288) =< 63*V_ptr
s(289) =< -V_bit_num_+63
s(290) =< -V_bit_num_+126
s(291) =< -V_bit_num_+128
s(288) =< s(284)
s(292) =< max([s(290),s(284)])
s(293) =< max([s(291),s(285)])
s(294) =< s(288)*(1/63)+1
s(295) =< max([s(289),s(283)])
s(296) =< s(286)*s(292)
s(297) =< s(286)*s(293)
s(298) =< s(287)
s(299) =< max([s(295),s(283)])+s(294)*62+s(294)*63
s(300) =< s(298)*s(288)
s(301) =< s(299)+1
s(302) =< s(300)*(64/63)
s(303) =< s(300)+s(296)
s(303) =< s(298)*s(299)
s(304) =< s(302)+s(297)
s(304) =< s(298)*s(301)

  with precondition: [V_ptr>=2,V_word_num_>=2] 

* Chain [33]: 1*s(310)+3*s(319)+1*s(324)+1*s(325)+3*s(326)+1*s(329)+1*s(330)+3
  Such that:s(305) =< 1
s(306) =< 63
s(307) =< 64
s(308) =< 126
s(309) =< 128
s(310) =< V_ptr
s(311) =< 2*V_ptr
s(312) =< 63*V_ptr
s(312) =< s(308)
s(313) =< max([s(308),s(308)])
s(314) =< max([s(309),s(309)])
s(315) =< s(312)*(1/63)+1
s(316) =< max([s(306),s(306)])
s(317) =< s(310)*s(313)
s(318) =< s(310)*s(314)
s(319) =< s(311)
s(320) =< max([s(316),s(306)])+s(315)*62+s(315)*63
s(321) =< s(319)*s(312)
s(322) =< s(320)+1
s(323) =< s(321)*(64/63)
s(324) =< s(321)+s(317)
s(324) =< s(319)*s(320)
s(325) =< s(323)+s(318)
s(325) =< s(319)*s(322)
s(326) =< s(305)
s(327) =< max([s(306),s(306)])+s(326)*62+s(326)*63
s(328) =< s(327)+1
s(329) =< s(306)
s(329) =< s(326)*s(327)
s(330) =< s(307)
s(330) =< s(326)*s(328)

  with precondition: [V_ptr>=3,V_word_num_>=2,V_bit_num_>=64] 


Closed-form bounds of eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B): 
-------------------------------------
* Chain [42] with precondition: [V_ptr=1,V_word_num_=1,V_bit_num_>=64] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [41] with precondition: [V_ptr=1,0>=V_word_num_,V_bit_num_>=64] 
    - Upper bound: (-V_word_num_+1)*(-127*V_word_num_)+2+(-3*V_word_num_+3)+(-64*V_word_num_+64)+(-63*V_word_num_+63) 
    - Complexity: n^2 
* Chain [40] with precondition: [V_ptr=1,V_word_num_>=2] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [39] with precondition: [V_ptr=2,V_word_num_>=2,V_bit_num_>=64] 
    - Upper bound: 133 
    - Complexity: constant 
* Chain [38] with precondition: [V_word_num_=1,V_ptr>=2,V_bit_num_>=64] 
    - Upper bound: 769*V_ptr+2 
    - Complexity: n 
* Chain [37] with precondition: [0>=V_ptr] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [36] with precondition: [1>=V_word_num_,V_ptr>=1] 
    - Upper bound: 6*V_ptr-3*V_word_num_+(max([128,nat(-64*V_word_num_-V_bit_num_+128)])*V_ptr+max([126,nat(-63*V_word_num_-V_bit_num_+126)])*V_ptr+V_ptr)+(254/63*V_ptr-127/63*V_word_num_)*(63*V_ptr-63*V_word_num_) 
    - Complexity: n^2 
* Chain [35] with precondition: [0>=V_word_num_,V_ptr>=2,V_bit_num_>=64] 
    - Upper bound: 255*V_ptr+2+(-V_word_num_+1)*(-127*V_word_num_)+514*V_ptr+(-3*V_word_num_+3)+(-64*V_word_num_+64)+(-63*V_word_num_+63) 
    - Complexity: n^2 
* Chain [34] with precondition: [V_ptr>=2,V_word_num_>=2] 
    - Upper bound: max([126,nat(-V_bit_num_+126)])*V_ptr+1+max([128,nat(-V_bit_num_+128)])*V_ptr+V_ptr+514*V_ptr 
    - Complexity: n^2 
* Chain [33] with precondition: [V_ptr>=3,V_word_num_>=2,V_bit_num_>=64] 
    - Upper bound: 769*V_ptr+133 
    - Complexity: n 

### Maximum cost of eval_load_mems_start(V_ptr,V_word_num_,V_bit_num_,B): max([max([133,127/63*nat(-63*V_word_num_)*nat(-V_word_num_+1)+2+nat(-V_word_num_+1)*3+nat(-64*V_word_num_+64)+nat(-63*V_word_num_+63)]),nat(V_ptr)+max([nat(2*V_ptr)*257+1+max([nat(V_ptr)*max([128,nat(-V_bit_num_+128)])+nat(V_ptr)*max([126,nat(-V_bit_num_+126)]),nat(V_ptr)*126+1+nat(V_ptr)*128+max([131,127/63*nat(-63*V_word_num_)*nat(-V_word_num_+1)+nat(-V_word_num_+1)*3+nat(-64*V_word_num_+64)+nat(-63*V_word_num_+63)])]),nat(V_ptr)*max([128,nat(-64*V_word_num_-V_bit_num_+128)])+nat(V_ptr)*max([126,nat(-63*V_word_num_-V_bit_num_+126)])+nat(2*V_ptr-V_word_num_)*3+127/63*nat(2*V_ptr-V_word_num_)*nat(63*V_ptr-63*V_word_num_)])]) 
Asymptotic class: n^2 
* Total analysis performed in 202 ms.

