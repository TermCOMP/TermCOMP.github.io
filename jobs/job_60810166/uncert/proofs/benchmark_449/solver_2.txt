WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_sipmamergesort_init_12/6,eval_sipmamergesort_init_13/7,eval_sipmamergesort_init_bb3_in/6,eval_sipmamergesort_init_bb4_in/6,eval_sipmamergesort_init_bb5_in/7,eval_sipmamergesort_init_bb6_in/7]
1. recursive  : [eval_sipmamergesort_init_bb7_in/3,eval_sipmamergesort_init_bb8_in/3]
2. recursive  : [eval_sipmamergesort_init_bb10_in/3,eval_sipmamergesort_init_bb9_in/3]
3. recursive  : [eval_sipmamergesort_init_bb11_in/14,eval_sipmamergesort_init_bb2_in/9,eval_sipmamergesort_init_bb3_in_loop_cont/14,eval_sipmamergesort_init_bb7_in_loop_cont/15,eval_sipmamergesort_init_bb9_in_loop_cont/15]
4. recursive  : [eval_sipmamergesort_init_bb12_in/11,eval_sipmamergesort_init_bb1_in/5,eval_sipmamergesort_init_bb2_in_loop_cont/12]
5. recursive  : [eval_sipmamergesort_init_bb14_in/3,eval_sipmamergesort_init_bb15_in/3]
6. non_recursive  : [eval_sipmamergesort_init_stop/1]
7. non_recursive  : [eval_sipmamergesort_init_bb16_in/1]
8. non_recursive  : [eval_sipmamergesort_init_bb14_in_loop_cont/2]
9. non_recursive  : [eval_sipmamergesort_init_bb13_in/3]
10. non_recursive  : [eval_sipmamergesort_init_bb1_in_loop_cont/4]
11. non_recursive  : [eval_sipmamergesort_init_bb0_in/2]
12. non_recursive  : [eval_sipmamergesort_init_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_sipmamergesort_init_bb3_in/6
1. SCC is partially evaluated into eval_sipmamergesort_init_bb7_in/3
2. SCC is partially evaluated into eval_sipmamergesort_init_bb9_in/3
3. SCC is partially evaluated into eval_sipmamergesort_init_bb2_in/9
4. SCC is partially evaluated into eval_sipmamergesort_init_bb1_in/5
5. SCC is partially evaluated into eval_sipmamergesort_init_bb14_in/3
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into eval_sipmamergesort_init_bb13_in/3
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_sipmamergesort_init_bb0_in/2
12. SCC is partially evaluated into eval_sipmamergesort_init_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_sipmamergesort_init_bb3_in/6 
* CE 22 is refined into CE [28] 
* CE 23 is refined into CE [29] 
* CE 21 is refined into CE [30] 
* CE 20 is refined into CE [31] 


### Cost equations --> "Loop" of eval_sipmamergesort_init_bb3_in/6 
* CEs [30] --> Loop 28 
* CEs [31] --> Loop 29 
* CEs [28] --> Loop 30 
* CEs [29] --> Loop 31 

### Ranking functions of CR eval_sipmamergesort_init_bb3_in(V_r_1,V_q_1,B,C,D,E) 
* RF of phase [28,29]: [V_r_1+V_q_1-1]

#### Partial ranking functions of CR eval_sipmamergesort_init_bb3_in(V_r_1,V_q_1,B,C,D,E) 
* Partial RF of phase [28,29]:
  - RF of loop [28:1]:
    V_r_1
  - RF of loop [29:1]:
    V_q_1


### Specialization of cost equations eval_sipmamergesort_init_bb7_in/3 
* CE 25 is refined into CE [32] 
* CE 24 is refined into CE [33] 


### Cost equations --> "Loop" of eval_sipmamergesort_init_bb7_in/3 
* CEs [33] --> Loop 32 
* CEs [32] --> Loop 33 

### Ranking functions of CR eval_sipmamergesort_init_bb7_in(V_r_3,B,C) 
* RF of phase [32]: [V_r_3]

#### Partial ranking functions of CR eval_sipmamergesort_init_bb7_in(V_r_3,B,C) 
* Partial RF of phase [32]:
  - RF of loop [32:1]:
    V_r_3


### Specialization of cost equations eval_sipmamergesort_init_bb9_in/3 
* CE 27 is refined into CE [34] 
* CE 26 is refined into CE [35] 


### Cost equations --> "Loop" of eval_sipmamergesort_init_bb9_in/3 
* CEs [35] --> Loop 34 
* CEs [34] --> Loop 35 

### Ranking functions of CR eval_sipmamergesort_init_bb9_in(V_q_3,B,C) 
* RF of phase [34]: [V_q_3]

#### Partial ranking functions of CR eval_sipmamergesort_init_bb9_in(V_q_3,B,C) 
* Partial RF of phase [34]:
  - RF of loop [34:1]:
    V_q_3


### Specialization of cost equations eval_sipmamergesort_init_bb2_in/9 
* CE 17 is refined into CE [36,37] 
* CE 16 is discarded (unfeasible) 
* CE 14 is refined into CE [38,39,40] 
* CE 12 is refined into CE [41,42,43] 
* CE 15 is refined into CE [44,45] 
* CE 13 is discarded (unfeasible) 


### Cost equations --> "Loop" of eval_sipmamergesort_init_bb2_in/9 
* CEs [40] --> Loop 36 
* CEs [45] --> Loop 37 
* CEs [42,43] --> Loop 38 
* CEs [41] --> Loop 39 
* CEs [44] --> Loop 40 
* CEs [39] --> Loop 41 
* CEs [38] --> Loop 42 
* CEs [36,37] --> Loop 43 

### Ranking functions of CR eval_sipmamergesort_init_bb2_in(V_p_0,V_m_0,B,C,D,E,F,G,H) 
* RF of phase [43]: [V_m_0/2-1,-V_p_0+V_m_0/2]

#### Partial ranking functions of CR eval_sipmamergesort_init_bb2_in(V_p_0,V_m_0,B,C,D,E,F,G,H) 
* Partial RF of phase [43]:
  - RF of loop [43:1]:
    V_m_0/2-1
    -V_p_0+V_m_0/2


### Specialization of cost equations eval_sipmamergesort_init_bb1_in/5 
* CE 7 is refined into CE [46,47,48,49,50,51] 
* CE 8 is discarded (unfeasible) 
* CE 6 is refined into CE [52,53,54,55,56,57] 
* CE 4 is refined into CE [58,59,60,61,62,63,64] 
* CE 5 is discarded (unfeasible) 
* CE 3 is refined into CE [65,66,67,68,69,70,71] 


### Cost equations --> "Loop" of eval_sipmamergesort_init_bb1_in/5 
* CEs [59,64] --> Loop 44 
* CEs [61] --> Loop 45 
* CEs [62] --> Loop 46 
* CEs [58] --> Loop 47 
* CEs [60,63] --> Loop 48 
* CEs [66,71] --> Loop 49 
* CEs [68] --> Loop 50 
* CEs [69] --> Loop 51 
* CEs [65] --> Loop 52 
* CEs [67,70] --> Loop 53 
* CEs [46] --> Loop 54 
* CEs [48] --> Loop 55 
* CEs [49,51] --> Loop 56 
* CEs [47,50] --> Loop 57 
* CEs [52] --> Loop 58 
* CEs [54] --> Loop 59 
* CEs [53,56] --> Loop 60 
* CEs [55,57] --> Loop 61 

### Ranking functions of CR eval_sipmamergesort_init_bb1_in(V_n,V_up_0,V_p_0,B,C) 
* RF of phase [54,55,56,57,58,59,60,61]: [V_n/2-V_p_0,V_n/2+V_up_0/3-2/3*V_p_0-1,V_n/3+V_up_0/3-2/3*V_p_0]

#### Partial ranking functions of CR eval_sipmamergesort_init_bb1_in(V_n,V_up_0,V_p_0,B,C) 
* Partial RF of phase [54,55,56,57,58,59,60,61]:
  - RF of loop [54:1]:
    V_n/3-V_p_0+1/3
  - RF of loop [54:1,55:1,56:1,57:1]:
    V_up_0 depends on loops [58:1,59:1,60:1,61:1] 
  - RF of loop [55:1,59:1]:
    V_n/4-V_p_0/2
  - RF of loop [56:1,61:1]:
    V_n/6-V_p_0/2
  - RF of loop [57:1]:
    V_n/4-V_p_0+1/4
  - RF of loop [58:1]:
    V_n/6-V_p_0/2+1/6
  - RF of loop [58:1,59:1,60:1,61:1]:
    -V_up_0+1 depends on loops [54:1,55:1,56:1,57:1] 
  - RF of loop [60:1]:
    V_n/8-V_p_0/2+1/8


### Specialization of cost equations eval_sipmamergesort_init_bb14_in/3 
* CE 19 is refined into CE [72] 
* CE 18 is refined into CE [73] 


### Cost equations --> "Loop" of eval_sipmamergesort_init_bb14_in/3 
* CEs [73] --> Loop 62 
* CEs [72] --> Loop 63 

### Ranking functions of CR eval_sipmamergesort_init_bb14_in(V_n,V_i_5,B) 
* RF of phase [62]: [V_n-V_i_5+1]

#### Partial ranking functions of CR eval_sipmamergesort_init_bb14_in(V_n,V_i_5,B) 
* Partial RF of phase [62]:
  - RF of loop [62:1]:
    V_n-V_i_5+1


### Specialization of cost equations eval_sipmamergesort_init_bb13_in/3 
* CE 10 is refined into CE [74] 
* CE 9 is refined into CE [75] 
* CE 11 is refined into CE [76,77] 


### Cost equations --> "Loop" of eval_sipmamergesort_init_bb13_in/3 
* CEs [74] --> Loop 64 
* CEs [75] --> Loop 65 
* CEs [77] --> Loop 66 
* CEs [76] --> Loop 67 

### Ranking functions of CR eval_sipmamergesort_init_bb13_in(V_n,V_27,B) 

#### Partial ranking functions of CR eval_sipmamergesort_init_bb13_in(V_n,V_27,B) 


### Specialization of cost equations eval_sipmamergesort_init_bb0_in/2 
* CE 2 is refined into CE [78,79,80,81,82,83,84] 


### Cost equations --> "Loop" of eval_sipmamergesort_init_bb0_in/2 
* CEs [81] --> Loop 68 
* CEs [82] --> Loop 69 
* CEs [83] --> Loop 70 
* CEs [84] --> Loop 71 
* CEs [79] --> Loop 72 
* CEs [80] --> Loop 73 
* CEs [78] --> Loop 74 

### Ranking functions of CR eval_sipmamergesort_init_bb0_in(V_n,B) 

#### Partial ranking functions of CR eval_sipmamergesort_init_bb0_in(V_n,B) 


### Specialization of cost equations eval_sipmamergesort_init_start/2 
* CE 1 is refined into CE [85,86,87,88,89,90,91] 


### Cost equations --> "Loop" of eval_sipmamergesort_init_start/2 
* CEs [91] --> Loop 75 
* CEs [90] --> Loop 76 
* CEs [89] --> Loop 77 
* CEs [88] --> Loop 78 
* CEs [87] --> Loop 79 
* CEs [86] --> Loop 80 
* CEs [85] --> Loop 81 

### Ranking functions of CR eval_sipmamergesort_init_start(V_n,B) 

#### Partial ranking functions of CR eval_sipmamergesort_init_start(V_n,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_sipmamergesort_init_bb3_in(V_r_1,V_q_1,B,C,D,E):
* Chain [[28,29],31]: 1*it(28)+1*it(29)+0
  Such that:it(28) =< V_r_1
aux(1) =< V_r_1+V_q_1
aux(2) =< V_r_1+V_q_1-D
it(29) =< V_q_1-D
it(28) =< aux(1)
it(29) =< aux(1)
it(28) =< aux(2)
it(29) =< aux(2)

  with precondition: [B=4,C=0,E=0,V_r_1>=1,D>=1,V_q_1>=D] 

* Chain [[28,29],30]: 1*it(28)+1*it(29)+0
  Such that:aux(1) =< V_r_1+V_q_1
aux(2) =< V_r_1+V_q_1-E
it(28) =< V_r_1-E
it(29) =< V_q_1
it(28) =< aux(1)
it(29) =< aux(1)
it(28) =< aux(2)
it(29) =< aux(2)

  with precondition: [B=4,D=0,C=E,V_q_1>=1,C>=1,V_r_1>=C] 

* Chain [31]: 0
  with precondition: [V_r_1=0,B=4,C=0,E=0,D=V_q_1] 

* Chain [30]: 0
  with precondition: [B=4,V_r_1=C,V_q_1=D,V_r_1=E,0>=V_q_1,V_r_1>=0] 


#### Cost of chains of eval_sipmamergesort_init_bb7_in(V_r_3,B,C):
* Chain [[32],33]: 1*it(32)+0
  Such that:it(32) =< V_r_3

  with precondition: [B=3,C=0,V_r_3>=1] 

* Chain [33]: 0
  with precondition: [B=3,V_r_3=C,0>=V_r_3] 


#### Cost of chains of eval_sipmamergesort_init_bb9_in(V_q_3,B,C):
* Chain [[34],35]: 1*it(34)+0
  Such that:it(34) =< V_q_3

  with precondition: [B=2,C=0,V_q_3>=1] 

* Chain [35]: 0
  with precondition: [B=2,V_q_3=C,0>=V_q_3] 


#### Cost of chains of eval_sipmamergesort_init_bb2_in(V_p_0,V_m_0,B,C,D,E,F,G,H):
* Chain [[43],42]: 1*it(43)+1*s(1)+6*s(15)+0
  Such that:aux(10) =< V_m_0/2
it(43) =< V_m_0/2-F
aux(11) =< V_m_0/2-F/2
s(1) =< F
aux(9) =< aux(10)
it(43) =< aux(10)
aux(9) =< aux(11)
it(43) =< aux(11)
s(16) =< aux(9)*2
s(15) =< aux(9)
s(15) =< s(16)

  with precondition: [B=5,D=0,E=0,G=0,H=0,V_p_0=C,V_p_0=F,V_p_0>=1,V_m_0>=3*V_p_0] 

* Chain [[43],41]: 1*it(43)+6*s(15)+1*s(18)+2*s(21)+0
  Such that:it(43) =< -V_p_0+V_m_0/2
s(18) =< -V_p_0+C
aux(12) =< V_p_0
aux(10) =< V_m_0/2
aux(11) =< V_m_0/2-C/2
aux(13) =< C
s(21) =< aux(12)
s(21) =< aux(13)
s(18) =< aux(13)
aux(9) =< aux(10)
it(43) =< aux(10)
aux(9) =< aux(11)
it(43) =< aux(11)
s(16) =< aux(9)*2
s(15) =< aux(9)
s(15) =< s(16)

  with precondition: [B=5,D=0,E=0,G=0,H=0,F>=1,C>=V_p_0+1,2*V_p_0>=C+1,V_p_0>=F,V_m_0>=2*V_p_0+C] 

* Chain [[43],40]: 1*it(43)+6*s(15)+3*s(23)+0
  Such that:aux(15) =< V_p_0
aux(14) =< 2*V_p_0
aux(10) =< V_m_0/2
aux(16) =< -V_p_0+V_m_0/2
it(43) =< aux(16)
s(23) =< aux(14)
s(23) =< aux(15)
aux(9) =< aux(10)
it(43) =< aux(10)
aux(9) =< aux(16)
s(16) =< aux(9)*2
s(15) =< aux(9)
s(15) =< s(16)

  with precondition: [B=5,D=0,E=0,G=0,H=0,2*V_p_0=C,F>=1,V_m_0>=4*V_p_0,V_p_0>=F] 

* Chain [[43],39]: 1*it(43)+6*s(15)+1*s(28)+0
  Such that:it(43) =< -V_p_0+V_m_0/2
aux(10) =< V_m_0/2
aux(11) =< V_m_0/2-F/2
s(28) =< F
aux(9) =< aux(10)
it(43) =< aux(10)
aux(9) =< aux(11)
it(43) =< aux(11)
s(16) =< aux(9)*2
s(15) =< aux(9)
s(15) =< s(16)

  with precondition: [B=5,D=0,E=0,G=0,H=0,C=F,C>=1,V_p_0>=C+1,V_m_0>=2*V_p_0+C] 

* Chain [[43],37]: 1*it(43)+6*s(15)+3*s(31)+0
  Such that:aux(18) =< V_p_0
aux(17) =< 2*V_p_0
aux(10) =< V_m_0/2
aux(19) =< -V_p_0+V_m_0/2
it(43) =< aux(19)
s(31) =< aux(17)
s(31) =< aux(18)
aux(9) =< aux(10)
it(43) =< aux(10)
aux(9) =< aux(19)
s(16) =< aux(9)*2
s(15) =< aux(9)
s(15) =< s(16)

  with precondition: [B=5,D=0,F=0,G=0,H=0,2*V_p_0=C,E>=1,V_m_0>=4*V_p_0,V_p_0>=E] 

* Chain [[43],36]: 1*it(43)+6*s(15)+2*s(36)+1*s(37)+0
  Such that:it(43) =< -V_p_0+V_m_0/2
aux(20) =< -V_p_0+C
s(37) =< V_p_0
aux(10) =< V_m_0/2
aux(11) =< V_m_0/2-C/2
aux(21) =< C
s(36) =< aux(20)
s(36) =< aux(21)
s(37) =< aux(21)
aux(9) =< aux(10)
it(43) =< aux(10)
aux(9) =< aux(11)
it(43) =< aux(11)
s(16) =< aux(9)*2
s(15) =< aux(9)
s(15) =< s(16)

  with precondition: [B=5,D=0,F=0,G=0,H=0,E>=1,2*V_p_0>=C+1,V_m_0>=2*V_p_0+C,C>=V_p_0+E] 

* Chain [42]: 1*s(1)+0
  Such that:s(1) =< V_m_0

  with precondition: [B=5,D=0,E=0,G=0,H=0,V_p_0=V_m_0,V_p_0=C,V_p_0=F,V_p_0>=1] 

* Chain [41]: 1*s(18)+2*s(21)+0
  Such that:s(18) =< -V_p_0+V_m_0
aux(12) =< V_p_0
aux(13) =< V_m_0
s(21) =< aux(12)
s(21) =< aux(13)
s(18) =< aux(13)

  with precondition: [B=5,D=0,E=0,G=0,H=0,C=V_m_0,F>=1,C>=V_p_0+1,2*V_p_0>=C+1,V_p_0>=F] 

* Chain [40]: 3*s(23)+0
  Such that:aux(14) =< V_m_0
aux(15) =< V_m_0/2
s(23) =< aux(14)
s(23) =< aux(15)

  with precondition: [B=5,D=0,E=0,G=0,H=0,2*V_p_0=V_m_0,2*V_p_0=C,F>=1,V_p_0>=F] 

* Chain [39]: 1*s(28)+0
  Such that:s(28) =< V_m_0

  with precondition: [B=5,D=0,E=0,G=0,H=0,V_m_0=C,V_m_0=F,V_m_0>=1,V_p_0>=V_m_0+1] 

* Chain [38]: 0
  with precondition: [B=5,D=0,E=0,G=0,V_m_0=C,V_m_0=F,V_m_0=H,0>=V_m_0,V_p_0>=1] 

* Chain [37]: 3*s(31)+0
  Such that:aux(17) =< V_m_0
aux(18) =< V_m_0/2
s(31) =< aux(17)
s(31) =< aux(18)

  with precondition: [B=5,D=0,F=0,G=0,H=0,2*V_p_0=V_m_0,2*V_p_0=C,E>=1,V_p_0>=E] 

* Chain [36]: 2*s(36)+1*s(37)+0
  Such that:s(37) =< V_p_0
aux(20) =< -V_p_0+V_m_0
aux(21) =< V_m_0
s(36) =< aux(20)
s(36) =< aux(21)
s(37) =< aux(21)

  with precondition: [B=5,D=0,F=0,G=0,H=0,V_m_0=C,E>=1,2*V_p_0>=V_m_0+1,V_m_0>=V_p_0+E] 


#### Cost of chains of eval_sipmamergesort_init_bb1_in(V_n,V_up_0,V_p_0,B,C):
* Chain [[54,55,56,57,58,59,60,61],53]: 1*it(54)+1*it(55)+1*it(56)+1*it(57)+1*it(58)+1*it(59)+1*it(60)+1*it(61)+6*s(41)+1*s(229)+2*s(230)+6*s(231)+1*s(236)+1*s(237)+6*s(238)+2*s(244)+1*s(245)+3*s(246)+12*s(247)+2*s(248)+2*s(260)+12*s(261)+12*s(262)+1*s(269)+6*s(271)+1*s(276)+1*s(277)+6*s(278)+2*s(284)+12*s(286)+2*s(293)+1*s(294)+3*s(295)+12*s(296)+2*s(297)+0
  Such that:aux(23) =< V_n
aux(106) =< V_n-V_p_0
aux(108) =< V_n/2+V_up_0/3-2/3*V_p_0
aux(64) =< V_n/2-V_p_0/2
aux(114) =< V_n/3-V_p_0+1/3
it(57) =< V_n/4-V_p_0+1/4
aux(119) =< V_n/6-V_p_0/2
it(58) =< V_n/6-V_p_0/2+1/6
it(60) =< V_n/8-V_p_0/2+1/8
aux(122) =< 2/3*V_n-V_p_0
aux(124) =< 4/3*V_n-2*V_p_0
aux(130) =< V_n-2*V_p_0
aux(131) =< V_n/2
aux(132) =< V_n/2-V_p_0
aux(133) =< V_n/3+V_up_0/3-2/3*V_p_0
aux(134) =< V_n/4-V_p_0/2
s(41) =< aux(23)
s(41) =< aux(131)
it(58) =< aux(130)
it(59) =< aux(130)
it(60) =< aux(130)
it(61) =< aux(130)
it(56) =< aux(106)
it(57) =< aux(106)
it(58) =< aux(106)
it(59) =< aux(106)
it(60) =< aux(106)
it(61) =< aux(106)
s(237) =< aux(106)
s(277) =< aux(106)
it(56) =< aux(132)
it(57) =< aux(132)
it(58) =< aux(132)
it(59) =< aux(132)
it(60) =< aux(132)
it(61) =< aux(132)
s(237) =< aux(132)
s(277) =< aux(132)
it(54) =< aux(108)
it(55) =< aux(108)
it(56) =< aux(108)
it(57) =< aux(108)
it(58) =< aux(108)
it(59) =< aux(108)
it(60) =< aux(108)
it(61) =< aux(108)
it(54) =< aux(133)
it(55) =< aux(133)
it(56) =< aux(133)
it(57) =< aux(133)
it(58) =< aux(133)
it(59) =< aux(133)
it(60) =< aux(133)
it(61) =< aux(133)
it(54) =< aux(132)
it(55) =< aux(132)
it(54) =< aux(114)
it(60) =< aux(114)
it(55) =< aux(134)
it(59) =< aux(134)
it(60) =< aux(134)
it(56) =< aux(134)
it(58) =< aux(134)
it(61) =< aux(134)
it(56) =< aux(119)
it(61) =< aux(119)
it(55) =< aux(122)
it(56) =< aux(122)
it(57) =< aux(122)
it(58) =< aux(122)
it(59) =< aux(122)
it(60) =< aux(122)
it(61) =< aux(122)
s(230) =< aux(122)
s(230) =< aux(132)
aux(76) =< aux(124)
it(57) =< aux(124)
it(58) =< aux(124)
it(59) =< aux(124)
it(60) =< aux(124)
it(61) =< aux(124)
aux(76) =< aux(130)
it(57) =< aux(130)
aux(69) =< aux(132)
aux(73) =< aux(64)*2
aux(67) =< aux(131)*2
aux(79) =< aux(131)
aux(86) =< aux(64)
s(251) =< aux(76)*(1/2)
s(267) =< aux(130)*(1/2)
s(308) =< it(61)*aux(69)
aux(101) =< it(61)*aux(67)
s(301) =< it(61)*aux(73)
s(289) =< it(60)*aux(69)
s(290) =< it(60)*aux(79)
s(276) =< it(59)*aux(69)
aux(90) =< it(59)*aux(67)
s(274) =< it(58)*aux(86)
s(269) =< it(58)*aux(69)
s(275) =< it(58)*aux(79)
s(265) =< it(57)*aux(69)
s(266) =< it(57)*aux(79)
s(259) =< it(56)*aux(69)
aux(74) =< it(56)*aux(67)
s(252) =< it(56)*aux(73)
s(236) =< it(55)*aux(69)
aux(68) =< it(55)*aux(67)
s(234) =< it(54)*aux(64)
s(229) =< it(54)*aux(132)
s(235) =< it(54)*aux(131)
s(305) =< aux(101)*(1/2)
s(282) =< aux(90)*(1/2)
s(256) =< aux(74)*(1/2)
s(242) =< aux(68)*(1/2)
s(293) =< s(308)
s(298) =< aux(76)
s(304) =< aux(101)
s(298) =< aux(101)
s(294) =< s(301)
s(304) =< s(301)
s(294) =< s(251)
s(295) =< s(251)
s(295) =< s(298)
s(294) =< s(298)
s(303) =< s(305)
s(293) =< s(305)
s(303) =< s(304)
s(293) =< s(304)
s(302) =< s(303)*2
s(296) =< s(303)
s(296) =< s(302)
s(299) =< s(301)
s(299) =< s(251)
s(297) =< s(299)
s(297) =< s(298)
s(284) =< s(289)
s(261) =< aux(130)
s(261) =< s(267)
s(288) =< s(290)
s(284) =< s(290)
s(288) =< s(289)
s(287) =< s(288)*2
s(286) =< s(288)
s(286) =< s(287)
s(281) =< aux(90)
s(277) =< aux(90)
s(281) =< s(282)
s(280) =< s(282)
s(276) =< s(282)
s(280) =< s(281)
s(276) =< s(281)
s(279) =< s(280)*2
s(278) =< s(280)
s(278) =< s(279)
s(273) =< s(275)
s(269) =< s(275)
s(273) =< s(274)
s(269) =< s(274)
s(272) =< s(273)*2
s(271) =< s(273)
s(271) =< s(272)
s(260) =< s(265)
s(264) =< s(266)
s(260) =< s(266)
s(264) =< s(265)
s(263) =< s(264)*2
s(262) =< s(264)
s(262) =< s(263)
s(244) =< s(259)
s(249) =< aux(76)
s(255) =< aux(74)
s(249) =< aux(74)
s(245) =< s(252)
s(255) =< s(252)
s(245) =< s(251)
s(246) =< s(251)
s(246) =< s(249)
s(245) =< s(249)
s(254) =< s(256)
s(244) =< s(256)
s(254) =< s(255)
s(244) =< s(255)
s(253) =< s(254)*2
s(247) =< s(254)
s(247) =< s(253)
s(250) =< s(252)
s(250) =< s(251)
s(248) =< s(250)
s(248) =< s(249)
s(241) =< aux(68)
s(237) =< aux(68)
s(241) =< s(242)
s(240) =< s(242)
s(236) =< s(242)
s(240) =< s(241)
s(236) =< s(241)
s(239) =< s(240)*2
s(238) =< s(240)
s(238) =< s(239)
s(233) =< s(235)
s(229) =< s(235)
s(233) =< s(234)
s(229) =< s(234)
s(232) =< s(233)*2
s(231) =< s(233)
s(231) =< s(232)

  with precondition: [B=7,C=1,1>=V_up_0,V_up_0>=0,V_p_0+V_up_0>=2,V_n+8*V_up_0>=4*V_p_0+8] 

* Chain [[54,55,56,57,58,59,60,61],49]: 1*it(54)+1*it(55)+1*it(56)+1*it(57)+1*it(58)+1*it(59)+1*it(60)+1*it(61)+1*s(229)+2*s(230)+6*s(231)+1*s(236)+1*s(237)+6*s(238)+2*s(244)+1*s(245)+3*s(246)+12*s(247)+2*s(248)+2*s(260)+12*s(261)+12*s(262)+1*s(269)+6*s(271)+1*s(276)+1*s(277)+6*s(278)+2*s(284)+12*s(286)+2*s(293)+1*s(294)+3*s(295)+12*s(296)+2*s(297)+3*s(309)+3*s(312)+0
  Such that:aux(104) =< V_n-2*V_p_0
aux(62) =< V_n/2
aux(108) =< V_n/2+V_up_0/3-2/3*V_p_0
aux(110) =< V_n/2-V_p_0
aux(112) =< V_n/3+V_up_0/3-2/3*V_p_0
aux(114) =< V_n/3-V_p_0+1/3
it(57) =< V_n/4-V_p_0+1/4
aux(117) =< V_n/4-V_p_0/2
aux(119) =< V_n/6-V_p_0/2
it(58) =< V_n/6-V_p_0/2+1/6
it(60) =< V_n/8-V_p_0/2+1/8
aux(122) =< 2/3*V_n-V_p_0
aux(124) =< 4/3*V_n-2*V_p_0
aux(138) =< V_n
aux(139) =< V_n-V_p_0
aux(140) =< 2*V_n+V_up_0-2*V_p_0
aux(141) =< 2*V_n-2*V_p_0
aux(142) =< V_n/2-V_p_0/2
aux(143) =< 2/3*V_n+V_up_0/3-2/3*V_p_0
aux(136) =< aux(138)
aux(118) =< aux(139)
aux(109) =< aux(140)
aux(136) =< aux(141)
aux(118) =< aux(142)
aux(109) =< aux(143)
s(309) =< aux(136)
s(312) =< aux(138)
s(309) =< aux(138)
aux(81) =< aux(104)
it(58) =< aux(104)
it(59) =< aux(104)
it(60) =< aux(104)
it(61) =< aux(104)
aux(81) =< aux(141)
it(58) =< aux(141)
it(59) =< aux(141)
it(60) =< aux(141)
it(61) =< aux(141)
it(56) =< aux(139)
it(57) =< aux(139)
it(58) =< aux(139)
it(59) =< aux(139)
it(60) =< aux(139)
it(61) =< aux(139)
s(237) =< aux(139)
s(277) =< aux(139)
it(54) =< aux(108)
it(55) =< aux(108)
it(56) =< aux(108)
it(57) =< aux(108)
it(58) =< aux(108)
it(59) =< aux(108)
it(60) =< aux(108)
it(61) =< aux(108)
it(54) =< aux(109)
it(55) =< aux(109)
it(56) =< aux(109)
it(57) =< aux(109)
it(58) =< aux(109)
it(59) =< aux(109)
it(60) =< aux(109)
it(61) =< aux(109)
it(54) =< aux(110)
it(55) =< aux(110)
it(56) =< aux(110)
it(57) =< aux(110)
it(58) =< aux(110)
it(59) =< aux(110)
it(60) =< aux(110)
it(61) =< aux(110)
it(54) =< aux(139)
it(55) =< aux(139)
it(54) =< aux(112)
it(55) =< aux(112)
it(56) =< aux(112)
it(57) =< aux(112)
it(58) =< aux(112)
it(59) =< aux(112)
it(60) =< aux(112)
it(61) =< aux(112)
it(54) =< aux(114)
it(60) =< aux(114)
it(55) =< aux(117)
it(59) =< aux(117)
it(60) =< aux(117)
it(55) =< aux(118)
it(56) =< aux(118)
it(58) =< aux(118)
it(59) =< aux(118)
it(60) =< aux(118)
it(61) =< aux(118)
it(56) =< aux(119)
it(61) =< aux(119)
it(55) =< aux(122)
it(56) =< aux(122)
it(57) =< aux(122)
it(58) =< aux(122)
it(59) =< aux(122)
it(60) =< aux(122)
it(61) =< aux(122)
s(230) =< aux(122)
s(230) =< aux(139)
aux(76) =< aux(124)
it(57) =< aux(124)
it(58) =< aux(124)
it(59) =< aux(124)
it(60) =< aux(124)
it(61) =< aux(124)
aux(76) =< aux(141)
it(57) =< aux(141)
aux(69) =< aux(110)
aux(73) =< aux(142)*2
aux(67) =< aux(62)*2
aux(79) =< aux(62)
aux(86) =< aux(142)
s(251) =< aux(76)*(1/2)
s(267) =< aux(81)*(1/2)
s(308) =< it(61)*aux(69)
aux(101) =< it(61)*aux(67)
s(301) =< it(61)*aux(73)
s(289) =< it(60)*aux(69)
s(290) =< it(60)*aux(79)
s(276) =< it(59)*aux(69)
aux(90) =< it(59)*aux(67)
s(274) =< it(58)*aux(86)
s(269) =< it(58)*aux(69)
s(275) =< it(58)*aux(79)
s(265) =< it(57)*aux(69)
s(266) =< it(57)*aux(79)
s(259) =< it(56)*aux(69)
aux(74) =< it(56)*aux(67)
s(252) =< it(56)*aux(73)
s(236) =< it(55)*aux(69)
aux(68) =< it(55)*aux(67)
s(234) =< it(54)*aux(142)
s(229) =< it(54)*aux(110)
s(235) =< it(54)*aux(62)
s(305) =< aux(101)*(1/2)
s(282) =< aux(90)*(1/2)
s(256) =< aux(74)*(1/2)
s(242) =< aux(68)*(1/2)
s(293) =< s(308)
s(298) =< aux(76)
s(304) =< aux(101)
s(298) =< aux(101)
s(294) =< s(301)
s(304) =< s(301)
s(294) =< s(251)
s(295) =< s(251)
s(295) =< s(298)
s(294) =< s(298)
s(303) =< s(305)
s(293) =< s(305)
s(303) =< s(304)
s(293) =< s(304)
s(302) =< s(303)*2
s(296) =< s(303)
s(296) =< s(302)
s(299) =< s(301)
s(299) =< s(251)
s(297) =< s(299)
s(297) =< s(298)
s(284) =< s(289)
s(261) =< aux(81)
s(261) =< s(267)
s(288) =< s(290)
s(284) =< s(290)
s(288) =< s(289)
s(287) =< s(288)*2
s(286) =< s(288)
s(286) =< s(287)
s(281) =< aux(90)
s(277) =< aux(90)
s(281) =< s(282)
s(280) =< s(282)
s(276) =< s(282)
s(280) =< s(281)
s(276) =< s(281)
s(279) =< s(280)*2
s(278) =< s(280)
s(278) =< s(279)
s(273) =< s(275)
s(269) =< s(275)
s(273) =< s(274)
s(269) =< s(274)
s(272) =< s(273)*2
s(271) =< s(273)
s(271) =< s(272)
s(260) =< s(265)
s(264) =< s(266)
s(260) =< s(266)
s(264) =< s(265)
s(263) =< s(264)*2
s(262) =< s(264)
s(262) =< s(263)
s(244) =< s(259)
s(249) =< aux(76)
s(255) =< aux(74)
s(249) =< aux(74)
s(245) =< s(252)
s(255) =< s(252)
s(245) =< s(251)
s(246) =< s(251)
s(246) =< s(249)
s(245) =< s(249)
s(254) =< s(256)
s(244) =< s(256)
s(254) =< s(255)
s(244) =< s(255)
s(253) =< s(254)*2
s(247) =< s(254)
s(247) =< s(253)
s(250) =< s(252)
s(250) =< s(251)
s(248) =< s(250)
s(248) =< s(249)
s(241) =< aux(68)
s(237) =< aux(68)
s(241) =< s(242)
s(240) =< s(242)
s(236) =< s(242)
s(240) =< s(241)
s(236) =< s(241)
s(239) =< s(240)*2
s(238) =< s(240)
s(238) =< s(239)
s(233) =< s(235)
s(229) =< s(235)
s(233) =< s(234)
s(229) =< s(234)
s(232) =< s(233)*2
s(231) =< s(233)
s(231) =< s(232)

  with precondition: [B=7,C=1,1>=V_up_0,V_up_0>=0,V_p_0+V_up_0>=2,V_n+4*V_up_0>=2*V_p_0+5] 

* Chain [[54,55,56,57,58,59,60,61],48]: 1*it(54)+1*it(55)+1*it(56)+1*it(57)+1*it(58)+1*it(59)+1*it(60)+1*it(61)+1*s(229)+2*s(230)+6*s(231)+1*s(236)+1*s(237)+6*s(238)+2*s(244)+1*s(245)+3*s(246)+12*s(247)+2*s(248)+2*s(260)+12*s(261)+12*s(262)+1*s(269)+6*s(271)+1*s(276)+1*s(277)+6*s(278)+2*s(284)+12*s(286)+2*s(293)+1*s(294)+3*s(295)+12*s(296)+2*s(297)+6*s(319)+0
  Such that:aux(145) =< V_n
aux(106) =< V_n-V_p_0
aux(108) =< V_n/2+V_up_0/3-2/3*V_p_0
aux(64) =< V_n/2-V_p_0/2
aux(114) =< V_n/3-V_p_0+1/3
it(57) =< V_n/4-V_p_0+1/4
aux(119) =< V_n/6-V_p_0/2
it(58) =< V_n/6-V_p_0/2+1/6
it(60) =< V_n/8-V_p_0/2+1/8
aux(122) =< 2/3*V_n-V_p_0
aux(124) =< 4/3*V_n-2*V_p_0
aux(146) =< V_n-2*V_p_0
aux(147) =< V_n/2
aux(148) =< V_n/2-V_p_0
aux(149) =< V_n/3+V_up_0/3-2/3*V_p_0
aux(150) =< V_n/4-V_p_0/2
s(319) =< aux(145)
s(319) =< aux(147)
it(58) =< aux(146)
it(59) =< aux(146)
it(60) =< aux(146)
it(61) =< aux(146)
it(56) =< aux(106)
it(57) =< aux(106)
it(58) =< aux(106)
it(59) =< aux(106)
it(60) =< aux(106)
it(61) =< aux(106)
s(237) =< aux(106)
s(277) =< aux(106)
it(56) =< aux(148)
it(57) =< aux(148)
it(58) =< aux(148)
it(59) =< aux(148)
it(60) =< aux(148)
it(61) =< aux(148)
s(237) =< aux(148)
s(277) =< aux(148)
it(54) =< aux(108)
it(55) =< aux(108)
it(56) =< aux(108)
it(57) =< aux(108)
it(58) =< aux(108)
it(59) =< aux(108)
it(60) =< aux(108)
it(61) =< aux(108)
it(54) =< aux(149)
it(55) =< aux(149)
it(56) =< aux(149)
it(57) =< aux(149)
it(58) =< aux(149)
it(59) =< aux(149)
it(60) =< aux(149)
it(61) =< aux(149)
it(54) =< aux(148)
it(55) =< aux(148)
it(54) =< aux(114)
it(60) =< aux(114)
it(55) =< aux(150)
it(59) =< aux(150)
it(60) =< aux(150)
it(56) =< aux(150)
it(58) =< aux(150)
it(61) =< aux(150)
it(56) =< aux(119)
it(61) =< aux(119)
it(55) =< aux(122)
it(56) =< aux(122)
it(57) =< aux(122)
it(58) =< aux(122)
it(59) =< aux(122)
it(60) =< aux(122)
it(61) =< aux(122)
s(230) =< aux(122)
s(230) =< aux(148)
aux(76) =< aux(124)
it(57) =< aux(124)
it(58) =< aux(124)
it(59) =< aux(124)
it(60) =< aux(124)
it(61) =< aux(124)
aux(76) =< aux(146)
it(57) =< aux(146)
aux(69) =< aux(148)
aux(73) =< aux(64)*2
aux(67) =< aux(147)*2
aux(79) =< aux(147)
aux(86) =< aux(64)
s(251) =< aux(76)*(1/2)
s(267) =< aux(146)*(1/2)
s(308) =< it(61)*aux(69)
aux(101) =< it(61)*aux(67)
s(301) =< it(61)*aux(73)
s(289) =< it(60)*aux(69)
s(290) =< it(60)*aux(79)
s(276) =< it(59)*aux(69)
aux(90) =< it(59)*aux(67)
s(274) =< it(58)*aux(86)
s(269) =< it(58)*aux(69)
s(275) =< it(58)*aux(79)
s(265) =< it(57)*aux(69)
s(266) =< it(57)*aux(79)
s(259) =< it(56)*aux(69)
aux(74) =< it(56)*aux(67)
s(252) =< it(56)*aux(73)
s(236) =< it(55)*aux(69)
aux(68) =< it(55)*aux(67)
s(234) =< it(54)*aux(64)
s(229) =< it(54)*aux(148)
s(235) =< it(54)*aux(147)
s(305) =< aux(101)*(1/2)
s(282) =< aux(90)*(1/2)
s(256) =< aux(74)*(1/2)
s(242) =< aux(68)*(1/2)
s(293) =< s(308)
s(298) =< aux(76)
s(304) =< aux(101)
s(298) =< aux(101)
s(294) =< s(301)
s(304) =< s(301)
s(294) =< s(251)
s(295) =< s(251)
s(295) =< s(298)
s(294) =< s(298)
s(303) =< s(305)
s(293) =< s(305)
s(303) =< s(304)
s(293) =< s(304)
s(302) =< s(303)*2
s(296) =< s(303)
s(296) =< s(302)
s(299) =< s(301)
s(299) =< s(251)
s(297) =< s(299)
s(297) =< s(298)
s(284) =< s(289)
s(261) =< aux(146)
s(261) =< s(267)
s(288) =< s(290)
s(284) =< s(290)
s(288) =< s(289)
s(287) =< s(288)*2
s(286) =< s(288)
s(286) =< s(287)
s(281) =< aux(90)
s(277) =< aux(90)
s(281) =< s(282)
s(280) =< s(282)
s(276) =< s(282)
s(280) =< s(281)
s(276) =< s(281)
s(279) =< s(280)*2
s(278) =< s(280)
s(278) =< s(279)
s(273) =< s(275)
s(269) =< s(275)
s(273) =< s(274)
s(269) =< s(274)
s(272) =< s(273)*2
s(271) =< s(273)
s(271) =< s(272)
s(260) =< s(265)
s(264) =< s(266)
s(260) =< s(266)
s(264) =< s(265)
s(263) =< s(264)*2
s(262) =< s(264)
s(262) =< s(263)
s(244) =< s(259)
s(249) =< aux(76)
s(255) =< aux(74)
s(249) =< aux(74)
s(245) =< s(252)
s(255) =< s(252)
s(245) =< s(251)
s(246) =< s(251)
s(246) =< s(249)
s(245) =< s(249)
s(254) =< s(256)
s(244) =< s(256)
s(254) =< s(255)
s(244) =< s(255)
s(253) =< s(254)*2
s(247) =< s(254)
s(247) =< s(253)
s(250) =< s(252)
s(250) =< s(251)
s(248) =< s(250)
s(248) =< s(249)
s(241) =< aux(68)
s(237) =< aux(68)
s(241) =< s(242)
s(240) =< s(242)
s(236) =< s(242)
s(240) =< s(241)
s(236) =< s(241)
s(239) =< s(240)*2
s(238) =< s(240)
s(238) =< s(239)
s(233) =< s(235)
s(229) =< s(235)
s(233) =< s(234)
s(229) =< s(234)
s(232) =< s(233)*2
s(231) =< s(233)
s(231) =< s(232)

  with precondition: [B=7,C=0,1>=V_up_0,V_up_0>=0,V_p_0+V_up_0>=2,V_n>=4*V_p_0+4*V_up_0] 

* Chain [[54,55,56,57,58,59,60,61],44]: 1*it(54)+1*it(55)+1*it(56)+1*it(57)+1*it(58)+1*it(59)+1*it(60)+1*it(61)+1*s(229)+2*s(230)+6*s(231)+1*s(236)+1*s(237)+6*s(238)+2*s(244)+1*s(245)+3*s(246)+12*s(247)+2*s(248)+2*s(260)+12*s(261)+12*s(262)+1*s(269)+6*s(271)+1*s(276)+1*s(277)+6*s(278)+2*s(284)+12*s(286)+2*s(293)+1*s(294)+3*s(295)+12*s(296)+2*s(297)+3*s(323)+3*s(326)+0
  Such that:aux(104) =< V_n-2*V_p_0
aux(62) =< V_n/2
aux(108) =< V_n/2+V_up_0/3-2/3*V_p_0
aux(110) =< V_n/2-V_p_0
aux(112) =< V_n/3+V_up_0/3-2/3*V_p_0
aux(114) =< V_n/3-V_p_0+1/3
it(57) =< V_n/4-V_p_0+1/4
aux(117) =< V_n/4-V_p_0/2
aux(119) =< V_n/6-V_p_0/2
it(58) =< V_n/6-V_p_0/2+1/6
it(60) =< V_n/8-V_p_0/2+1/8
aux(122) =< 2/3*V_n-V_p_0
aux(124) =< 4/3*V_n-2*V_p_0
aux(154) =< V_n
aux(155) =< V_n-V_p_0
aux(156) =< 2*V_n+V_up_0-2*V_p_0
aux(157) =< 2*V_n-2*V_p_0
aux(158) =< V_n/2-V_p_0/2
aux(159) =< 2/3*V_n+V_up_0/3-2/3*V_p_0
aux(152) =< aux(154)
aux(118) =< aux(155)
aux(109) =< aux(156)
aux(152) =< aux(157)
aux(118) =< aux(158)
aux(109) =< aux(159)
s(323) =< aux(152)
s(326) =< aux(154)
s(323) =< aux(154)
aux(81) =< aux(104)
it(58) =< aux(104)
it(59) =< aux(104)
it(60) =< aux(104)
it(61) =< aux(104)
aux(81) =< aux(157)
it(58) =< aux(157)
it(59) =< aux(157)
it(60) =< aux(157)
it(61) =< aux(157)
it(56) =< aux(155)
it(57) =< aux(155)
it(58) =< aux(155)
it(59) =< aux(155)
it(60) =< aux(155)
it(61) =< aux(155)
s(237) =< aux(155)
s(277) =< aux(155)
it(54) =< aux(108)
it(55) =< aux(108)
it(56) =< aux(108)
it(57) =< aux(108)
it(58) =< aux(108)
it(59) =< aux(108)
it(60) =< aux(108)
it(61) =< aux(108)
it(54) =< aux(109)
it(55) =< aux(109)
it(56) =< aux(109)
it(57) =< aux(109)
it(58) =< aux(109)
it(59) =< aux(109)
it(60) =< aux(109)
it(61) =< aux(109)
it(54) =< aux(110)
it(55) =< aux(110)
it(56) =< aux(110)
it(57) =< aux(110)
it(58) =< aux(110)
it(59) =< aux(110)
it(60) =< aux(110)
it(61) =< aux(110)
it(54) =< aux(155)
it(55) =< aux(155)
it(54) =< aux(112)
it(55) =< aux(112)
it(56) =< aux(112)
it(57) =< aux(112)
it(58) =< aux(112)
it(59) =< aux(112)
it(60) =< aux(112)
it(61) =< aux(112)
it(54) =< aux(114)
it(60) =< aux(114)
it(55) =< aux(117)
it(59) =< aux(117)
it(60) =< aux(117)
it(55) =< aux(118)
it(56) =< aux(118)
it(58) =< aux(118)
it(59) =< aux(118)
it(60) =< aux(118)
it(61) =< aux(118)
it(56) =< aux(119)
it(61) =< aux(119)
it(55) =< aux(122)
it(56) =< aux(122)
it(57) =< aux(122)
it(58) =< aux(122)
it(59) =< aux(122)
it(60) =< aux(122)
it(61) =< aux(122)
s(230) =< aux(122)
s(230) =< aux(155)
aux(76) =< aux(124)
it(57) =< aux(124)
it(58) =< aux(124)
it(59) =< aux(124)
it(60) =< aux(124)
it(61) =< aux(124)
aux(76) =< aux(157)
it(57) =< aux(157)
aux(69) =< aux(110)
aux(73) =< aux(158)*2
aux(67) =< aux(62)*2
aux(79) =< aux(62)
aux(86) =< aux(158)
s(251) =< aux(76)*(1/2)
s(267) =< aux(81)*(1/2)
s(308) =< it(61)*aux(69)
aux(101) =< it(61)*aux(67)
s(301) =< it(61)*aux(73)
s(289) =< it(60)*aux(69)
s(290) =< it(60)*aux(79)
s(276) =< it(59)*aux(69)
aux(90) =< it(59)*aux(67)
s(274) =< it(58)*aux(86)
s(269) =< it(58)*aux(69)
s(275) =< it(58)*aux(79)
s(265) =< it(57)*aux(69)
s(266) =< it(57)*aux(79)
s(259) =< it(56)*aux(69)
aux(74) =< it(56)*aux(67)
s(252) =< it(56)*aux(73)
s(236) =< it(55)*aux(69)
aux(68) =< it(55)*aux(67)
s(234) =< it(54)*aux(158)
s(229) =< it(54)*aux(110)
s(235) =< it(54)*aux(62)
s(305) =< aux(101)*(1/2)
s(282) =< aux(90)*(1/2)
s(256) =< aux(74)*(1/2)
s(242) =< aux(68)*(1/2)
s(293) =< s(308)
s(298) =< aux(76)
s(304) =< aux(101)
s(298) =< aux(101)
s(294) =< s(301)
s(304) =< s(301)
s(294) =< s(251)
s(295) =< s(251)
s(295) =< s(298)
s(294) =< s(298)
s(303) =< s(305)
s(293) =< s(305)
s(303) =< s(304)
s(293) =< s(304)
s(302) =< s(303)*2
s(296) =< s(303)
s(296) =< s(302)
s(299) =< s(301)
s(299) =< s(251)
s(297) =< s(299)
s(297) =< s(298)
s(284) =< s(289)
s(261) =< aux(81)
s(261) =< s(267)
s(288) =< s(290)
s(284) =< s(290)
s(288) =< s(289)
s(287) =< s(288)*2
s(286) =< s(288)
s(286) =< s(287)
s(281) =< aux(90)
s(277) =< aux(90)
s(281) =< s(282)
s(280) =< s(282)
s(276) =< s(282)
s(280) =< s(281)
s(276) =< s(281)
s(279) =< s(280)*2
s(278) =< s(280)
s(278) =< s(279)
s(273) =< s(275)
s(269) =< s(275)
s(273) =< s(274)
s(269) =< s(274)
s(272) =< s(273)*2
s(271) =< s(273)
s(271) =< s(272)
s(260) =< s(265)
s(264) =< s(266)
s(260) =< s(266)
s(264) =< s(265)
s(263) =< s(264)*2
s(262) =< s(264)
s(262) =< s(263)
s(244) =< s(259)
s(249) =< aux(76)
s(255) =< aux(74)
s(249) =< aux(74)
s(245) =< s(252)
s(255) =< s(252)
s(245) =< s(251)
s(246) =< s(251)
s(246) =< s(249)
s(245) =< s(249)
s(254) =< s(256)
s(244) =< s(256)
s(254) =< s(255)
s(244) =< s(255)
s(253) =< s(254)*2
s(247) =< s(254)
s(247) =< s(253)
s(250) =< s(252)
s(250) =< s(251)
s(248) =< s(250)
s(248) =< s(249)
s(241) =< aux(68)
s(237) =< aux(68)
s(241) =< s(242)
s(240) =< s(242)
s(236) =< s(242)
s(240) =< s(241)
s(236) =< s(241)
s(239) =< s(240)*2
s(238) =< s(240)
s(238) =< s(239)
s(233) =< s(235)
s(229) =< s(235)
s(233) =< s(234)
s(229) =< s(234)
s(232) =< s(233)*2
s(231) =< s(233)
s(231) =< s(232)

  with precondition: [B=7,C=0,1>=V_up_0,V_up_0>=0,V_p_0+V_up_0>=2,V_n>=2*V_p_0+2*V_up_0+1] 

* Chain [48]: 6*s(319)+0
  Such that:aux(144) =< V_p_0
aux(145) =< 2*V_p_0
s(319) =< aux(145)
s(319) =< aux(144)

  with precondition: [V_up_0=1,B=7,C=0,2*V_p_0=V_n,V_p_0>=1] 

* Chain [47]: 1*s(331)+0
  Such that:s(331) =< 1

  with precondition: [V_n=1,V_up_0=1,V_p_0=1,B=7,C=0] 

* Chain [46]: 0
  with precondition: [V_up_0=1,V_p_0=1,B=7,C=0,0>=V_n] 


#### Cost of chains of eval_sipmamergesort_init_bb14_in(V_n,V_i_5,B):
* Chain [[62],63]: 1*it(62)+0
  Such that:it(62) =< V_n-V_i_5+1

  with precondition: [B=6,V_i_5>=1,V_n>=V_i_5] 

* Chain [63]: 0
  with precondition: [B=6,V_i_5>=1,V_i_5>=V_n+1] 


#### Cost of chains of eval_sipmamergesort_init_bb13_in(V_n,V_27,B):
* Chain [67]: 0
  with precondition: [V_27=0,0>=V_n] 

* Chain [66]: 1*s(332)+0
  Such that:s(332) =< V_n

  with precondition: [V_27=0,V_n>=1] 

* Chain [65]: 0
  with precondition: [0>=V_27+1] 

* Chain [64]: 0
  with precondition: [V_27>=1] 


#### Cost of chains of eval_sipmamergesort_init_bb0_in(V_n,B):
* Chain [74]: 2*s(333)+0
  Such that:aux(160) =< 1
s(333) =< aux(160)

  with precondition: [V_n=1] 

* Chain [73]: 6*s(337)+1*s(338)+0
  Such that:s(335) =< 1
aux(161) =< 2
s(338) =< aux(161)
s(337) =< aux(161)
s(337) =< s(335)

  with precondition: [V_n=2] 

* Chain [72]: 0
  with precondition: [0>=V_n] 

* Chain [71]: 1*s(345)+2*s(348)+1*s(349)+3*s(361)+3*s(362)+1*s(364)+1*s(366)+1*s(367)+1*s(368)+1*s(369)+1*s(370)+2*s(371)+1*s(385)+1*s(388)+1*s(395)+1*s(398)+2*s(404)+1*s(407)+3*s(408)+12*s(411)+2*s(413)+2*s(414)+12*s(415)+12*s(418)+6*s(422)+6*s(425)+2*s(426)+12*s(429)+2*s(430)+1*s(433)+3*s(434)+12*s(437)+2*s(439)+6*s(443)+6*s(446)+0
  Such that:s(349) =< V_n/8
s(351) =< 4/3*V_n
aux(162) =< V_n
aux(163) =< 2*V_n
aux(164) =< V_n/2
aux(165) =< V_n/3
aux(166) =< V_n/4
aux(167) =< V_n/6
aux(168) =< 2/3*V_n
s(345) =< aux(166)
s(348) =< aux(167)
s(358) =< aux(162)
s(359) =< aux(162)
s(360) =< aux(163)
s(358) =< aux(163)
s(359) =< aux(164)
s(360) =< aux(168)
s(361) =< s(358)
s(362) =< aux(162)
s(361) =< aux(162)
s(348) =< aux(162)
s(364) =< aux(162)
s(349) =< aux(162)
s(348) =< aux(163)
s(364) =< aux(163)
s(349) =< aux(163)
s(366) =< aux(162)
s(345) =< aux(162)
s(367) =< aux(162)
s(368) =< aux(162)
s(369) =< aux(164)
s(370) =< aux(164)
s(366) =< aux(164)
s(345) =< aux(164)
s(348) =< aux(164)
s(364) =< aux(164)
s(349) =< aux(164)
s(369) =< s(360)
s(370) =< s(360)
s(366) =< s(360)
s(345) =< s(360)
s(348) =< s(360)
s(364) =< s(360)
s(349) =< s(360)
s(369) =< aux(162)
s(370) =< aux(162)
s(369) =< aux(165)
s(370) =< aux(165)
s(366) =< aux(165)
s(345) =< aux(165)
s(348) =< aux(165)
s(364) =< aux(165)
s(349) =< aux(165)
s(370) =< aux(166)
s(364) =< aux(166)
s(349) =< aux(166)
s(370) =< s(359)
s(366) =< s(359)
s(348) =< s(359)
s(364) =< s(359)
s(349) =< s(359)
s(366) =< aux(167)
s(370) =< aux(168)
s(366) =< aux(168)
s(345) =< aux(168)
s(348) =< aux(168)
s(364) =< aux(168)
s(349) =< aux(168)
s(371) =< aux(168)
s(371) =< aux(162)
s(372) =< s(351)
s(345) =< s(351)
s(348) =< s(351)
s(364) =< s(351)
s(349) =< s(351)
s(372) =< aux(163)
s(345) =< aux(163)
s(373) =< aux(164)
s(374) =< aux(164)*2
s(378) =< s(372)*(1/2)
s(379) =< s(358)*(1/2)
s(380) =< s(348)*s(373)
s(381) =< s(348)*s(374)
s(383) =< s(349)*s(373)
s(385) =< s(364)*s(373)
s(386) =< s(364)*s(374)
s(388) =< s(348)*s(373)
s(390) =< s(345)*s(373)
s(392) =< s(366)*s(373)
s(393) =< s(366)*s(374)
s(395) =< s(370)*s(373)
s(396) =< s(370)*s(374)
s(397) =< s(369)*aux(164)
s(398) =< s(369)*aux(164)
s(400) =< s(381)*(1/2)
s(401) =< s(386)*(1/2)
s(402) =< s(393)*(1/2)
s(403) =< s(396)*(1/2)
s(404) =< s(380)
s(405) =< s(372)
s(405) =< s(381)
s(407) =< s(381)
s(407) =< s(378)
s(408) =< s(378)
s(408) =< s(405)
s(407) =< s(405)
s(409) =< s(400)
s(404) =< s(400)
s(409) =< s(381)
s(404) =< s(381)
s(410) =< s(409)*2
s(411) =< s(409)
s(411) =< s(410)
s(412) =< s(381)
s(412) =< s(378)
s(413) =< s(412)
s(413) =< s(405)
s(414) =< s(383)
s(415) =< s(358)
s(415) =< s(379)
s(417) =< s(383)*2
s(418) =< s(383)
s(418) =< s(417)
s(419) =< s(386)
s(368) =< s(386)
s(419) =< s(401)
s(420) =< s(401)
s(385) =< s(401)
s(420) =< s(419)
s(385) =< s(419)
s(421) =< s(420)*2
s(422) =< s(420)
s(422) =< s(421)
s(388) =< s(380)
s(424) =< s(380)*2
s(425) =< s(380)
s(425) =< s(424)
s(426) =< s(390)
s(428) =< s(390)*2
s(429) =< s(390)
s(429) =< s(428)
s(430) =< s(392)
s(431) =< s(372)
s(431) =< s(393)
s(433) =< s(393)
s(433) =< s(378)
s(434) =< s(378)
s(434) =< s(431)
s(433) =< s(431)
s(435) =< s(402)
s(430) =< s(402)
s(435) =< s(393)
s(430) =< s(393)
s(436) =< s(435)*2
s(437) =< s(435)
s(437) =< s(436)
s(438) =< s(393)
s(438) =< s(378)
s(439) =< s(438)
s(439) =< s(431)
s(440) =< s(396)
s(367) =< s(396)
s(440) =< s(403)
s(441) =< s(403)
s(395) =< s(403)
s(441) =< s(440)
s(395) =< s(440)
s(442) =< s(441)*2
s(443) =< s(441)
s(443) =< s(442)
s(398) =< s(397)
s(445) =< s(397)*2
s(446) =< s(397)
s(446) =< s(445)

  with precondition: [V_n>=3] 

* Chain [70]: 2*s(452)+2*s(454)+1*s(455)+6*s(463)+1*s(466)+1*s(467)+1*s(468)+1*s(469)+1*s(470)+2*s(471)+1*s(485)+1*s(488)+1*s(495)+1*s(498)+2*s(504)+1*s(507)+3*s(508)+12*s(511)+2*s(513)+2*s(514)+12*s(515)+12*s(518)+6*s(522)+6*s(525)+2*s(526)+12*s(529)+2*s(530)+1*s(533)+3*s(534)+12*s(537)+2*s(539)+6*s(543)+6*s(546)+0
  Such that:s(455) =< V_n/8
s(456) =< 2/3*V_n
s(457) =< 4/3*V_n
aux(169) =< V_n
aux(170) =< V_n/2
aux(171) =< V_n/3
aux(172) =< V_n/4
aux(173) =< V_n/6
s(452) =< aux(172)
s(454) =< aux(173)
s(463) =< aux(169)
s(463) =< aux(170)
s(454) =< aux(169)
s(452) =< aux(169)
s(455) =< aux(169)
s(466) =< aux(169)
s(467) =< aux(169)
s(468) =< aux(169)
s(466) =< aux(170)
s(452) =< aux(170)
s(454) =< aux(170)
s(455) =< aux(170)
s(467) =< aux(170)
s(468) =< aux(170)
s(469) =< aux(170)
s(470) =< aux(170)
s(469) =< aux(171)
s(470) =< aux(171)
s(466) =< aux(171)
s(452) =< aux(171)
s(454) =< aux(171)
s(455) =< aux(171)
s(470) =< aux(172)
s(455) =< aux(172)
s(466) =< aux(172)
s(454) =< aux(172)
s(466) =< aux(173)
s(470) =< s(456)
s(466) =< s(456)
s(452) =< s(456)
s(454) =< s(456)
s(455) =< s(456)
s(471) =< s(456)
s(471) =< aux(170)
s(472) =< s(457)
s(452) =< s(457)
s(454) =< s(457)
s(455) =< s(457)
s(472) =< aux(169)
s(473) =< aux(170)
s(474) =< aux(170)*2
s(478) =< s(472)*(1/2)
s(479) =< aux(169)*(1/2)
s(480) =< s(454)*s(473)
s(481) =< s(454)*s(474)
s(483) =< s(455)*s(473)
s(485) =< s(452)*s(473)
s(486) =< s(452)*s(474)
s(488) =< s(454)*s(473)
s(490) =< s(452)*s(473)
s(492) =< s(466)*s(473)
s(493) =< s(466)*s(474)
s(495) =< s(470)*s(473)
s(496) =< s(470)*s(474)
s(497) =< s(469)*aux(170)
s(498) =< s(469)*aux(170)
s(500) =< s(481)*(1/2)
s(501) =< s(486)*(1/2)
s(502) =< s(493)*(1/2)
s(503) =< s(496)*(1/2)
s(504) =< s(480)
s(505) =< s(472)
s(505) =< s(481)
s(507) =< s(481)
s(507) =< s(478)
s(508) =< s(478)
s(508) =< s(505)
s(507) =< s(505)
s(509) =< s(500)
s(504) =< s(500)
s(509) =< s(481)
s(504) =< s(481)
s(510) =< s(509)*2
s(511) =< s(509)
s(511) =< s(510)
s(512) =< s(481)
s(512) =< s(478)
s(513) =< s(512)
s(513) =< s(505)
s(514) =< s(483)
s(515) =< aux(169)
s(515) =< s(479)
s(517) =< s(483)*2
s(518) =< s(483)
s(518) =< s(517)
s(519) =< s(486)
s(468) =< s(486)
s(519) =< s(501)
s(520) =< s(501)
s(485) =< s(501)
s(520) =< s(519)
s(485) =< s(519)
s(521) =< s(520)*2
s(522) =< s(520)
s(522) =< s(521)
s(488) =< s(480)
s(524) =< s(480)*2
s(525) =< s(480)
s(525) =< s(524)
s(526) =< s(490)
s(528) =< s(490)*2
s(529) =< s(490)
s(529) =< s(528)
s(530) =< s(492)
s(531) =< s(472)
s(531) =< s(493)
s(533) =< s(493)
s(533) =< s(478)
s(534) =< s(478)
s(534) =< s(531)
s(533) =< s(531)
s(535) =< s(502)
s(530) =< s(502)
s(535) =< s(493)
s(530) =< s(493)
s(536) =< s(535)*2
s(537) =< s(535)
s(537) =< s(536)
s(538) =< s(493)
s(538) =< s(478)
s(539) =< s(538)
s(539) =< s(531)
s(540) =< s(496)
s(467) =< s(496)
s(540) =< s(503)
s(541) =< s(503)
s(495) =< s(503)
s(541) =< s(540)
s(495) =< s(540)
s(542) =< s(541)*2
s(543) =< s(541)
s(543) =< s(542)
s(498) =< s(497)
s(545) =< s(497)*2
s(546) =< s(497)
s(546) =< s(545)

  with precondition: [V_n>=4] 

* Chain [69]: 1*s(553)+2*s(556)+1*s(557)+3*s(569)+4*s(570)+1*s(572)+1*s(574)+1*s(575)+1*s(576)+1*s(577)+1*s(578)+2*s(579)+1*s(593)+1*s(596)+1*s(603)+1*s(606)+2*s(612)+1*s(615)+3*s(616)+12*s(619)+2*s(621)+2*s(622)+12*s(623)+12*s(626)+6*s(630)+6*s(633)+2*s(634)+12*s(637)+2*s(638)+1*s(641)+3*s(642)+12*s(645)+2*s(647)+6*s(651)+6*s(654)+0
  Such that:s(557) =< V_n/8
s(559) =< 4/3*V_n
aux(174) =< V_n
aux(175) =< 2*V_n
aux(176) =< V_n/2
aux(177) =< V_n/3
aux(178) =< V_n/4
aux(179) =< V_n/6
aux(180) =< 2/3*V_n
s(570) =< aux(174)
s(553) =< aux(178)
s(556) =< aux(179)
s(566) =< aux(174)
s(567) =< aux(174)
s(568) =< aux(175)
s(566) =< aux(175)
s(567) =< aux(176)
s(568) =< aux(180)
s(569) =< s(566)
s(569) =< aux(174)
s(556) =< aux(174)
s(572) =< aux(174)
s(557) =< aux(174)
s(556) =< aux(175)
s(572) =< aux(175)
s(557) =< aux(175)
s(574) =< aux(174)
s(553) =< aux(174)
s(575) =< aux(174)
s(576) =< aux(174)
s(577) =< aux(176)
s(578) =< aux(176)
s(574) =< aux(176)
s(553) =< aux(176)
s(556) =< aux(176)
s(572) =< aux(176)
s(557) =< aux(176)
s(577) =< s(568)
s(578) =< s(568)
s(574) =< s(568)
s(553) =< s(568)
s(556) =< s(568)
s(572) =< s(568)
s(557) =< s(568)
s(577) =< aux(174)
s(578) =< aux(174)
s(577) =< aux(177)
s(578) =< aux(177)
s(574) =< aux(177)
s(553) =< aux(177)
s(556) =< aux(177)
s(572) =< aux(177)
s(557) =< aux(177)
s(578) =< aux(178)
s(572) =< aux(178)
s(557) =< aux(178)
s(578) =< s(567)
s(574) =< s(567)
s(556) =< s(567)
s(572) =< s(567)
s(557) =< s(567)
s(574) =< aux(179)
s(578) =< aux(180)
s(574) =< aux(180)
s(553) =< aux(180)
s(556) =< aux(180)
s(572) =< aux(180)
s(557) =< aux(180)
s(579) =< aux(180)
s(579) =< aux(174)
s(580) =< s(559)
s(553) =< s(559)
s(556) =< s(559)
s(572) =< s(559)
s(557) =< s(559)
s(580) =< aux(175)
s(553) =< aux(175)
s(581) =< aux(176)
s(582) =< aux(176)*2
s(586) =< s(580)*(1/2)
s(587) =< s(566)*(1/2)
s(588) =< s(556)*s(581)
s(589) =< s(556)*s(582)
s(591) =< s(557)*s(581)
s(593) =< s(572)*s(581)
s(594) =< s(572)*s(582)
s(596) =< s(556)*s(581)
s(598) =< s(553)*s(581)
s(600) =< s(574)*s(581)
s(601) =< s(574)*s(582)
s(603) =< s(578)*s(581)
s(604) =< s(578)*s(582)
s(605) =< s(577)*aux(176)
s(606) =< s(577)*aux(176)
s(608) =< s(589)*(1/2)
s(609) =< s(594)*(1/2)
s(610) =< s(601)*(1/2)
s(611) =< s(604)*(1/2)
s(612) =< s(588)
s(613) =< s(580)
s(613) =< s(589)
s(615) =< s(589)
s(615) =< s(586)
s(616) =< s(586)
s(616) =< s(613)
s(615) =< s(613)
s(617) =< s(608)
s(612) =< s(608)
s(617) =< s(589)
s(612) =< s(589)
s(618) =< s(617)*2
s(619) =< s(617)
s(619) =< s(618)
s(620) =< s(589)
s(620) =< s(586)
s(621) =< s(620)
s(621) =< s(613)
s(622) =< s(591)
s(623) =< s(566)
s(623) =< s(587)
s(625) =< s(591)*2
s(626) =< s(591)
s(626) =< s(625)
s(627) =< s(594)
s(576) =< s(594)
s(627) =< s(609)
s(628) =< s(609)
s(593) =< s(609)
s(628) =< s(627)
s(593) =< s(627)
s(629) =< s(628)*2
s(630) =< s(628)
s(630) =< s(629)
s(596) =< s(588)
s(632) =< s(588)*2
s(633) =< s(588)
s(633) =< s(632)
s(634) =< s(598)
s(636) =< s(598)*2
s(637) =< s(598)
s(637) =< s(636)
s(638) =< s(600)
s(639) =< s(580)
s(639) =< s(601)
s(641) =< s(601)
s(641) =< s(586)
s(642) =< s(586)
s(642) =< s(639)
s(641) =< s(639)
s(643) =< s(610)
s(638) =< s(610)
s(643) =< s(601)
s(638) =< s(601)
s(644) =< s(643)*2
s(645) =< s(643)
s(645) =< s(644)
s(646) =< s(601)
s(646) =< s(586)
s(647) =< s(646)
s(647) =< s(639)
s(648) =< s(604)
s(575) =< s(604)
s(648) =< s(611)
s(649) =< s(611)
s(603) =< s(611)
s(649) =< s(648)
s(603) =< s(648)
s(650) =< s(649)*2
s(651) =< s(649)
s(651) =< s(650)
s(606) =< s(605)
s(653) =< s(605)*2
s(654) =< s(605)
s(654) =< s(653)

  with precondition: [V_n>=5] 

* Chain [68]: 2*s(661)+2*s(663)+1*s(664)+6*s(672)+1*s(675)+1*s(676)+1*s(677)+1*s(678)+1*s(679)+2*s(680)+1*s(694)+1*s(697)+1*s(704)+1*s(707)+2*s(713)+1*s(716)+3*s(717)+12*s(720)+2*s(722)+2*s(723)+12*s(724)+12*s(727)+6*s(731)+6*s(734)+2*s(735)+12*s(738)+2*s(739)+1*s(742)+3*s(743)+12*s(746)+2*s(748)+6*s(752)+6*s(755)+1*s(756)+0
  Such that:s(664) =< V_n/8
s(665) =< 2/3*V_n
s(666) =< 4/3*V_n
aux(181) =< V_n
aux(182) =< V_n/2
aux(183) =< V_n/3
aux(184) =< V_n/4
aux(185) =< V_n/6
s(756) =< aux(181)
s(661) =< aux(184)
s(663) =< aux(185)
s(672) =< aux(181)
s(672) =< aux(182)
s(663) =< aux(181)
s(661) =< aux(181)
s(664) =< aux(181)
s(675) =< aux(181)
s(676) =< aux(181)
s(677) =< aux(181)
s(675) =< aux(182)
s(661) =< aux(182)
s(663) =< aux(182)
s(664) =< aux(182)
s(676) =< aux(182)
s(677) =< aux(182)
s(678) =< aux(182)
s(679) =< aux(182)
s(678) =< aux(183)
s(679) =< aux(183)
s(675) =< aux(183)
s(661) =< aux(183)
s(663) =< aux(183)
s(664) =< aux(183)
s(679) =< aux(184)
s(664) =< aux(184)
s(675) =< aux(184)
s(663) =< aux(184)
s(675) =< aux(185)
s(679) =< s(665)
s(675) =< s(665)
s(661) =< s(665)
s(663) =< s(665)
s(664) =< s(665)
s(680) =< s(665)
s(680) =< aux(182)
s(681) =< s(666)
s(661) =< s(666)
s(663) =< s(666)
s(664) =< s(666)
s(681) =< aux(181)
s(682) =< aux(182)
s(683) =< aux(182)*2
s(687) =< s(681)*(1/2)
s(688) =< aux(181)*(1/2)
s(689) =< s(663)*s(682)
s(690) =< s(663)*s(683)
s(692) =< s(664)*s(682)
s(694) =< s(661)*s(682)
s(695) =< s(661)*s(683)
s(697) =< s(663)*s(682)
s(699) =< s(661)*s(682)
s(701) =< s(675)*s(682)
s(702) =< s(675)*s(683)
s(704) =< s(679)*s(682)
s(705) =< s(679)*s(683)
s(706) =< s(678)*aux(182)
s(707) =< s(678)*aux(182)
s(709) =< s(690)*(1/2)
s(710) =< s(695)*(1/2)
s(711) =< s(702)*(1/2)
s(712) =< s(705)*(1/2)
s(713) =< s(689)
s(714) =< s(681)
s(714) =< s(690)
s(716) =< s(690)
s(716) =< s(687)
s(717) =< s(687)
s(717) =< s(714)
s(716) =< s(714)
s(718) =< s(709)
s(713) =< s(709)
s(718) =< s(690)
s(713) =< s(690)
s(719) =< s(718)*2
s(720) =< s(718)
s(720) =< s(719)
s(721) =< s(690)
s(721) =< s(687)
s(722) =< s(721)
s(722) =< s(714)
s(723) =< s(692)
s(724) =< aux(181)
s(724) =< s(688)
s(726) =< s(692)*2
s(727) =< s(692)
s(727) =< s(726)
s(728) =< s(695)
s(677) =< s(695)
s(728) =< s(710)
s(729) =< s(710)
s(694) =< s(710)
s(729) =< s(728)
s(694) =< s(728)
s(730) =< s(729)*2
s(731) =< s(729)
s(731) =< s(730)
s(697) =< s(689)
s(733) =< s(689)*2
s(734) =< s(689)
s(734) =< s(733)
s(735) =< s(699)
s(737) =< s(699)*2
s(738) =< s(699)
s(738) =< s(737)
s(739) =< s(701)
s(740) =< s(681)
s(740) =< s(702)
s(742) =< s(702)
s(742) =< s(687)
s(743) =< s(687)
s(743) =< s(740)
s(742) =< s(740)
s(744) =< s(711)
s(739) =< s(711)
s(744) =< s(702)
s(739) =< s(702)
s(745) =< s(744)*2
s(746) =< s(744)
s(746) =< s(745)
s(747) =< s(702)
s(747) =< s(687)
s(748) =< s(747)
s(748) =< s(740)
s(749) =< s(705)
s(676) =< s(705)
s(749) =< s(712)
s(750) =< s(712)
s(704) =< s(712)
s(750) =< s(749)
s(704) =< s(749)
s(751) =< s(750)*2
s(752) =< s(750)
s(752) =< s(751)
s(707) =< s(706)
s(754) =< s(706)*2
s(755) =< s(706)
s(755) =< s(754)

  with precondition: [V_n>=8] 


#### Cost of chains of eval_sipmamergesort_init_start(V_n,B):
* Chain [81]: 2*s(758)+0
  Such that:s(757) =< 1
s(758) =< s(757)

  with precondition: [V_n=1] 

* Chain [80]: 1*s(761)+6*s(762)+0
  Such that:s(759) =< 1
s(760) =< 2
s(761) =< s(760)
s(762) =< s(760)
s(762) =< s(759)

  with precondition: [V_n=2] 

* Chain [79]: 0
  with precondition: [0>=V_n] 

* Chain [78]: 1*s(763)+1*s(772)+2*s(773)+3*s(777)+3*s(778)+1*s(779)+1*s(780)+1*s(781)+1*s(782)+1*s(783)+1*s(784)+2*s(785)+1*s(794)+1*s(796)+1*s(800)+1*s(803)+2*s(808)+1*s(810)+3*s(811)+12*s(814)+2*s(816)+2*s(817)+12*s(818)+12*s(820)+6*s(824)+6*s(826)+2*s(827)+12*s(829)+2*s(830)+1*s(832)+3*s(833)+12*s(836)+2*s(838)+6*s(842)+6*s(844)+0
  Such that:s(765) =< V_n
s(766) =< 2*V_n
s(767) =< V_n/2
s(768) =< V_n/3
s(769) =< V_n/4
s(770) =< V_n/6
s(763) =< V_n/8
s(771) =< 2/3*V_n
s(764) =< 4/3*V_n
s(772) =< s(769)
s(773) =< s(770)
s(774) =< s(765)
s(775) =< s(765)
s(776) =< s(766)
s(774) =< s(766)
s(775) =< s(767)
s(776) =< s(771)
s(777) =< s(774)
s(778) =< s(765)
s(777) =< s(765)
s(773) =< s(765)
s(779) =< s(765)
s(763) =< s(765)
s(773) =< s(766)
s(779) =< s(766)
s(763) =< s(766)
s(780) =< s(765)
s(772) =< s(765)
s(781) =< s(765)
s(782) =< s(765)
s(783) =< s(767)
s(784) =< s(767)
s(780) =< s(767)
s(772) =< s(767)
s(773) =< s(767)
s(779) =< s(767)
s(763) =< s(767)
s(783) =< s(776)
s(784) =< s(776)
s(780) =< s(776)
s(772) =< s(776)
s(773) =< s(776)
s(779) =< s(776)
s(763) =< s(776)
s(783) =< s(765)
s(784) =< s(765)
s(783) =< s(768)
s(784) =< s(768)
s(780) =< s(768)
s(772) =< s(768)
s(773) =< s(768)
s(779) =< s(768)
s(763) =< s(768)
s(784) =< s(769)
s(779) =< s(769)
s(763) =< s(769)
s(784) =< s(775)
s(780) =< s(775)
s(773) =< s(775)
s(779) =< s(775)
s(763) =< s(775)
s(780) =< s(770)
s(784) =< s(771)
s(780) =< s(771)
s(772) =< s(771)
s(773) =< s(771)
s(779) =< s(771)
s(763) =< s(771)
s(785) =< s(771)
s(785) =< s(765)
s(786) =< s(764)
s(772) =< s(764)
s(773) =< s(764)
s(779) =< s(764)
s(763) =< s(764)
s(786) =< s(766)
s(772) =< s(766)
s(787) =< s(767)
s(788) =< s(767)*2
s(789) =< s(786)*(1/2)
s(790) =< s(774)*(1/2)
s(791) =< s(773)*s(787)
s(792) =< s(773)*s(788)
s(793) =< s(763)*s(787)
s(794) =< s(779)*s(787)
s(795) =< s(779)*s(788)
s(796) =< s(773)*s(787)
s(797) =< s(772)*s(787)
s(798) =< s(780)*s(787)
s(799) =< s(780)*s(788)
s(800) =< s(784)*s(787)
s(801) =< s(784)*s(788)
s(802) =< s(783)*s(767)
s(803) =< s(783)*s(767)
s(804) =< s(792)*(1/2)
s(805) =< s(795)*(1/2)
s(806) =< s(799)*(1/2)
s(807) =< s(801)*(1/2)
s(808) =< s(791)
s(809) =< s(786)
s(809) =< s(792)
s(810) =< s(792)
s(810) =< s(789)
s(811) =< s(789)
s(811) =< s(809)
s(810) =< s(809)
s(812) =< s(804)
s(808) =< s(804)
s(812) =< s(792)
s(808) =< s(792)
s(813) =< s(812)*2
s(814) =< s(812)
s(814) =< s(813)
s(815) =< s(792)
s(815) =< s(789)
s(816) =< s(815)
s(816) =< s(809)
s(817) =< s(793)
s(818) =< s(774)
s(818) =< s(790)
s(819) =< s(793)*2
s(820) =< s(793)
s(820) =< s(819)
s(821) =< s(795)
s(782) =< s(795)
s(821) =< s(805)
s(822) =< s(805)
s(794) =< s(805)
s(822) =< s(821)
s(794) =< s(821)
s(823) =< s(822)*2
s(824) =< s(822)
s(824) =< s(823)
s(796) =< s(791)
s(825) =< s(791)*2
s(826) =< s(791)
s(826) =< s(825)
s(827) =< s(797)
s(828) =< s(797)*2
s(829) =< s(797)
s(829) =< s(828)
s(830) =< s(798)
s(831) =< s(786)
s(831) =< s(799)
s(832) =< s(799)
s(832) =< s(789)
s(833) =< s(789)
s(833) =< s(831)
s(832) =< s(831)
s(834) =< s(806)
s(830) =< s(806)
s(834) =< s(799)
s(830) =< s(799)
s(835) =< s(834)*2
s(836) =< s(834)
s(836) =< s(835)
s(837) =< s(799)
s(837) =< s(789)
s(838) =< s(837)
s(838) =< s(831)
s(839) =< s(801)
s(781) =< s(801)
s(839) =< s(807)
s(840) =< s(807)
s(800) =< s(807)
s(840) =< s(839)
s(800) =< s(839)
s(841) =< s(840)*2
s(842) =< s(840)
s(842) =< s(841)
s(803) =< s(802)
s(843) =< s(802)*2
s(844) =< s(802)
s(844) =< s(843)

  with precondition: [V_n>=3] 

* Chain [77]: 1*s(845)+2*s(853)+2*s(854)+6*s(855)+1*s(856)+1*s(857)+1*s(858)+1*s(859)+1*s(860)+2*s(861)+1*s(870)+1*s(872)+1*s(876)+1*s(879)+2*s(884)+1*s(886)+3*s(887)+12*s(890)+2*s(892)+2*s(893)+12*s(894)+12*s(896)+6*s(900)+6*s(902)+2*s(903)+12*s(905)+2*s(906)+1*s(908)+3*s(909)+12*s(912)+2*s(914)+6*s(918)+6*s(920)+0
  Such that:s(848) =< V_n
s(849) =< V_n/2
s(850) =< V_n/3
s(851) =< V_n/4
s(852) =< V_n/6
s(845) =< V_n/8
s(846) =< 2/3*V_n
s(847) =< 4/3*V_n
s(853) =< s(851)
s(854) =< s(852)
s(855) =< s(848)
s(855) =< s(849)
s(854) =< s(848)
s(853) =< s(848)
s(845) =< s(848)
s(856) =< s(848)
s(857) =< s(848)
s(858) =< s(848)
s(856) =< s(849)
s(853) =< s(849)
s(854) =< s(849)
s(845) =< s(849)
s(857) =< s(849)
s(858) =< s(849)
s(859) =< s(849)
s(860) =< s(849)
s(859) =< s(850)
s(860) =< s(850)
s(856) =< s(850)
s(853) =< s(850)
s(854) =< s(850)
s(845) =< s(850)
s(860) =< s(851)
s(845) =< s(851)
s(856) =< s(851)
s(854) =< s(851)
s(856) =< s(852)
s(860) =< s(846)
s(856) =< s(846)
s(853) =< s(846)
s(854) =< s(846)
s(845) =< s(846)
s(861) =< s(846)
s(861) =< s(849)
s(862) =< s(847)
s(853) =< s(847)
s(854) =< s(847)
s(845) =< s(847)
s(862) =< s(848)
s(863) =< s(849)
s(864) =< s(849)*2
s(865) =< s(862)*(1/2)
s(866) =< s(848)*(1/2)
s(867) =< s(854)*s(863)
s(868) =< s(854)*s(864)
s(869) =< s(845)*s(863)
s(870) =< s(853)*s(863)
s(871) =< s(853)*s(864)
s(872) =< s(854)*s(863)
s(873) =< s(853)*s(863)
s(874) =< s(856)*s(863)
s(875) =< s(856)*s(864)
s(876) =< s(860)*s(863)
s(877) =< s(860)*s(864)
s(878) =< s(859)*s(849)
s(879) =< s(859)*s(849)
s(880) =< s(868)*(1/2)
s(881) =< s(871)*(1/2)
s(882) =< s(875)*(1/2)
s(883) =< s(877)*(1/2)
s(884) =< s(867)
s(885) =< s(862)
s(885) =< s(868)
s(886) =< s(868)
s(886) =< s(865)
s(887) =< s(865)
s(887) =< s(885)
s(886) =< s(885)
s(888) =< s(880)
s(884) =< s(880)
s(888) =< s(868)
s(884) =< s(868)
s(889) =< s(888)*2
s(890) =< s(888)
s(890) =< s(889)
s(891) =< s(868)
s(891) =< s(865)
s(892) =< s(891)
s(892) =< s(885)
s(893) =< s(869)
s(894) =< s(848)
s(894) =< s(866)
s(895) =< s(869)*2
s(896) =< s(869)
s(896) =< s(895)
s(897) =< s(871)
s(858) =< s(871)
s(897) =< s(881)
s(898) =< s(881)
s(870) =< s(881)
s(898) =< s(897)
s(870) =< s(897)
s(899) =< s(898)*2
s(900) =< s(898)
s(900) =< s(899)
s(872) =< s(867)
s(901) =< s(867)*2
s(902) =< s(867)
s(902) =< s(901)
s(903) =< s(873)
s(904) =< s(873)*2
s(905) =< s(873)
s(905) =< s(904)
s(906) =< s(874)
s(907) =< s(862)
s(907) =< s(875)
s(908) =< s(875)
s(908) =< s(865)
s(909) =< s(865)
s(909) =< s(907)
s(908) =< s(907)
s(910) =< s(882)
s(906) =< s(882)
s(910) =< s(875)
s(906) =< s(875)
s(911) =< s(910)*2
s(912) =< s(910)
s(912) =< s(911)
s(913) =< s(875)
s(913) =< s(865)
s(914) =< s(913)
s(914) =< s(907)
s(915) =< s(877)
s(857) =< s(877)
s(915) =< s(883)
s(916) =< s(883)
s(876) =< s(883)
s(916) =< s(915)
s(876) =< s(915)
s(917) =< s(916)*2
s(918) =< s(916)
s(918) =< s(917)
s(879) =< s(878)
s(919) =< s(878)*2
s(920) =< s(878)
s(920) =< s(919)

  with precondition: [V_n>=4] 

* Chain [76]: 1*s(921)+4*s(930)+1*s(931)+2*s(932)+3*s(936)+1*s(937)+1*s(938)+1*s(939)+1*s(940)+1*s(941)+1*s(942)+2*s(943)+1*s(952)+1*s(954)+1*s(958)+1*s(961)+2*s(966)+1*s(968)+3*s(969)+12*s(972)+2*s(974)+2*s(975)+12*s(976)+12*s(978)+6*s(982)+6*s(984)+2*s(985)+12*s(987)+2*s(988)+1*s(990)+3*s(991)+12*s(994)+2*s(996)+6*s(1000)+6*s(1002)+0
  Such that:s(923) =< V_n
s(924) =< 2*V_n
s(925) =< V_n/2
s(926) =< V_n/3
s(927) =< V_n/4
s(928) =< V_n/6
s(921) =< V_n/8
s(929) =< 2/3*V_n
s(922) =< 4/3*V_n
s(930) =< s(923)
s(931) =< s(927)
s(932) =< s(928)
s(933) =< s(923)
s(934) =< s(923)
s(935) =< s(924)
s(933) =< s(924)
s(934) =< s(925)
s(935) =< s(929)
s(936) =< s(933)
s(936) =< s(923)
s(932) =< s(923)
s(937) =< s(923)
s(921) =< s(923)
s(932) =< s(924)
s(937) =< s(924)
s(921) =< s(924)
s(938) =< s(923)
s(931) =< s(923)
s(939) =< s(923)
s(940) =< s(923)
s(941) =< s(925)
s(942) =< s(925)
s(938) =< s(925)
s(931) =< s(925)
s(932) =< s(925)
s(937) =< s(925)
s(921) =< s(925)
s(941) =< s(935)
s(942) =< s(935)
s(938) =< s(935)
s(931) =< s(935)
s(932) =< s(935)
s(937) =< s(935)
s(921) =< s(935)
s(941) =< s(923)
s(942) =< s(923)
s(941) =< s(926)
s(942) =< s(926)
s(938) =< s(926)
s(931) =< s(926)
s(932) =< s(926)
s(937) =< s(926)
s(921) =< s(926)
s(942) =< s(927)
s(937) =< s(927)
s(921) =< s(927)
s(942) =< s(934)
s(938) =< s(934)
s(932) =< s(934)
s(937) =< s(934)
s(921) =< s(934)
s(938) =< s(928)
s(942) =< s(929)
s(938) =< s(929)
s(931) =< s(929)
s(932) =< s(929)
s(937) =< s(929)
s(921) =< s(929)
s(943) =< s(929)
s(943) =< s(923)
s(944) =< s(922)
s(931) =< s(922)
s(932) =< s(922)
s(937) =< s(922)
s(921) =< s(922)
s(944) =< s(924)
s(931) =< s(924)
s(945) =< s(925)
s(946) =< s(925)*2
s(947) =< s(944)*(1/2)
s(948) =< s(933)*(1/2)
s(949) =< s(932)*s(945)
s(950) =< s(932)*s(946)
s(951) =< s(921)*s(945)
s(952) =< s(937)*s(945)
s(953) =< s(937)*s(946)
s(954) =< s(932)*s(945)
s(955) =< s(931)*s(945)
s(956) =< s(938)*s(945)
s(957) =< s(938)*s(946)
s(958) =< s(942)*s(945)
s(959) =< s(942)*s(946)
s(960) =< s(941)*s(925)
s(961) =< s(941)*s(925)
s(962) =< s(950)*(1/2)
s(963) =< s(953)*(1/2)
s(964) =< s(957)*(1/2)
s(965) =< s(959)*(1/2)
s(966) =< s(949)
s(967) =< s(944)
s(967) =< s(950)
s(968) =< s(950)
s(968) =< s(947)
s(969) =< s(947)
s(969) =< s(967)
s(968) =< s(967)
s(970) =< s(962)
s(966) =< s(962)
s(970) =< s(950)
s(966) =< s(950)
s(971) =< s(970)*2
s(972) =< s(970)
s(972) =< s(971)
s(973) =< s(950)
s(973) =< s(947)
s(974) =< s(973)
s(974) =< s(967)
s(975) =< s(951)
s(976) =< s(933)
s(976) =< s(948)
s(977) =< s(951)*2
s(978) =< s(951)
s(978) =< s(977)
s(979) =< s(953)
s(940) =< s(953)
s(979) =< s(963)
s(980) =< s(963)
s(952) =< s(963)
s(980) =< s(979)
s(952) =< s(979)
s(981) =< s(980)*2
s(982) =< s(980)
s(982) =< s(981)
s(954) =< s(949)
s(983) =< s(949)*2
s(984) =< s(949)
s(984) =< s(983)
s(985) =< s(955)
s(986) =< s(955)*2
s(987) =< s(955)
s(987) =< s(986)
s(988) =< s(956)
s(989) =< s(944)
s(989) =< s(957)
s(990) =< s(957)
s(990) =< s(947)
s(991) =< s(947)
s(991) =< s(989)
s(990) =< s(989)
s(992) =< s(964)
s(988) =< s(964)
s(992) =< s(957)
s(988) =< s(957)
s(993) =< s(992)*2
s(994) =< s(992)
s(994) =< s(993)
s(995) =< s(957)
s(995) =< s(947)
s(996) =< s(995)
s(996) =< s(989)
s(997) =< s(959)
s(939) =< s(959)
s(997) =< s(965)
s(998) =< s(965)
s(958) =< s(965)
s(998) =< s(997)
s(958) =< s(997)
s(999) =< s(998)*2
s(1000) =< s(998)
s(1000) =< s(999)
s(961) =< s(960)
s(1001) =< s(960)*2
s(1002) =< s(960)
s(1002) =< s(1001)

  with precondition: [V_n>=5] 

* Chain [75]: 1*s(1003)+1*s(1011)+2*s(1012)+2*s(1013)+6*s(1014)+1*s(1015)+1*s(1016)+1*s(1017)+1*s(1018)+1*s(1019)+2*s(1020)+1*s(1029)+1*s(1031)+1*s(1035)+1*s(1038)+2*s(1043)+1*s(1045)+3*s(1046)+12*s(1049)+2*s(1051)+2*s(1052)+12*s(1053)+12*s(1055)+6*s(1059)+6*s(1061)+2*s(1062)+12*s(1064)+2*s(1065)+1*s(1067)+3*s(1068)+12*s(1071)+2*s(1073)+6*s(1077)+6*s(1079)+0
  Such that:s(1006) =< V_n
s(1007) =< V_n/2
s(1008) =< V_n/3
s(1009) =< V_n/4
s(1010) =< V_n/6
s(1003) =< V_n/8
s(1004) =< 2/3*V_n
s(1005) =< 4/3*V_n
s(1011) =< s(1006)
s(1012) =< s(1009)
s(1013) =< s(1010)
s(1014) =< s(1006)
s(1014) =< s(1007)
s(1013) =< s(1006)
s(1012) =< s(1006)
s(1003) =< s(1006)
s(1015) =< s(1006)
s(1016) =< s(1006)
s(1017) =< s(1006)
s(1015) =< s(1007)
s(1012) =< s(1007)
s(1013) =< s(1007)
s(1003) =< s(1007)
s(1016) =< s(1007)
s(1017) =< s(1007)
s(1018) =< s(1007)
s(1019) =< s(1007)
s(1018) =< s(1008)
s(1019) =< s(1008)
s(1015) =< s(1008)
s(1012) =< s(1008)
s(1013) =< s(1008)
s(1003) =< s(1008)
s(1019) =< s(1009)
s(1003) =< s(1009)
s(1015) =< s(1009)
s(1013) =< s(1009)
s(1015) =< s(1010)
s(1019) =< s(1004)
s(1015) =< s(1004)
s(1012) =< s(1004)
s(1013) =< s(1004)
s(1003) =< s(1004)
s(1020) =< s(1004)
s(1020) =< s(1007)
s(1021) =< s(1005)
s(1012) =< s(1005)
s(1013) =< s(1005)
s(1003) =< s(1005)
s(1021) =< s(1006)
s(1022) =< s(1007)
s(1023) =< s(1007)*2
s(1024) =< s(1021)*(1/2)
s(1025) =< s(1006)*(1/2)
s(1026) =< s(1013)*s(1022)
s(1027) =< s(1013)*s(1023)
s(1028) =< s(1003)*s(1022)
s(1029) =< s(1012)*s(1022)
s(1030) =< s(1012)*s(1023)
s(1031) =< s(1013)*s(1022)
s(1032) =< s(1012)*s(1022)
s(1033) =< s(1015)*s(1022)
s(1034) =< s(1015)*s(1023)
s(1035) =< s(1019)*s(1022)
s(1036) =< s(1019)*s(1023)
s(1037) =< s(1018)*s(1007)
s(1038) =< s(1018)*s(1007)
s(1039) =< s(1027)*(1/2)
s(1040) =< s(1030)*(1/2)
s(1041) =< s(1034)*(1/2)
s(1042) =< s(1036)*(1/2)
s(1043) =< s(1026)
s(1044) =< s(1021)
s(1044) =< s(1027)
s(1045) =< s(1027)
s(1045) =< s(1024)
s(1046) =< s(1024)
s(1046) =< s(1044)
s(1045) =< s(1044)
s(1047) =< s(1039)
s(1043) =< s(1039)
s(1047) =< s(1027)
s(1043) =< s(1027)
s(1048) =< s(1047)*2
s(1049) =< s(1047)
s(1049) =< s(1048)
s(1050) =< s(1027)
s(1050) =< s(1024)
s(1051) =< s(1050)
s(1051) =< s(1044)
s(1052) =< s(1028)
s(1053) =< s(1006)
s(1053) =< s(1025)
s(1054) =< s(1028)*2
s(1055) =< s(1028)
s(1055) =< s(1054)
s(1056) =< s(1030)
s(1017) =< s(1030)
s(1056) =< s(1040)
s(1057) =< s(1040)
s(1029) =< s(1040)
s(1057) =< s(1056)
s(1029) =< s(1056)
s(1058) =< s(1057)*2
s(1059) =< s(1057)
s(1059) =< s(1058)
s(1031) =< s(1026)
s(1060) =< s(1026)*2
s(1061) =< s(1026)
s(1061) =< s(1060)
s(1062) =< s(1032)
s(1063) =< s(1032)*2
s(1064) =< s(1032)
s(1064) =< s(1063)
s(1065) =< s(1033)
s(1066) =< s(1021)
s(1066) =< s(1034)
s(1067) =< s(1034)
s(1067) =< s(1024)
s(1068) =< s(1024)
s(1068) =< s(1066)
s(1067) =< s(1066)
s(1069) =< s(1041)
s(1065) =< s(1041)
s(1069) =< s(1034)
s(1065) =< s(1034)
s(1070) =< s(1069)*2
s(1071) =< s(1069)
s(1071) =< s(1070)
s(1072) =< s(1034)
s(1072) =< s(1024)
s(1073) =< s(1072)
s(1073) =< s(1066)
s(1074) =< s(1036)
s(1016) =< s(1036)
s(1074) =< s(1042)
s(1075) =< s(1042)
s(1035) =< s(1042)
s(1075) =< s(1074)
s(1035) =< s(1074)
s(1076) =< s(1075)*2
s(1077) =< s(1075)
s(1077) =< s(1076)
s(1038) =< s(1037)
s(1078) =< s(1037)*2
s(1079) =< s(1037)
s(1079) =< s(1078)

  with precondition: [V_n>=8] 


Closed-form bounds of eval_sipmamergesort_init_start(V_n,B): 
-------------------------------------
* Chain [81] with precondition: [V_n=1] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [80] with precondition: [V_n=2] 
    - Upper bound: 14 
    - Complexity: constant 
* Chain [79] with precondition: [0>=V_n] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [78] with precondition: [V_n>=3] 
    - Upper bound: V_n/8+(V_n/3+(V_n/4+(V_n/2*(21*V_n)+22*V_n+4/3*V_n+8*V_n+V_n+V_n/2*(7*V_n)+V_n/4*(7*V_n)+V_n/6*(21/2*V_n)+V_n/8*(7*V_n)))) 
    - Complexity: n^2 
* Chain [77] with precondition: [V_n>=4] 
    - Upper bound: V_n/8+(V_n/3+(V_n/2+(V_n/2*(14*V_n)+21*V_n+4/3*V_n+8*V_n+V_n+V_n/2*(7*V_n)+V_n/4*(21/2*V_n)+V_n/6*(21/2*V_n)+V_n/8*(7*V_n)))) 
    - Complexity: n^2 
* Chain [76] with precondition: [V_n>=5] 
    - Upper bound: V_n/8+(V_n/3+(V_n/4+(V_n/2*(21*V_n)+23*V_n+4/3*V_n+8*V_n+V_n+V_n/2*(7*V_n)+V_n/4*(7*V_n)+V_n/6*(21/2*V_n)+V_n/8*(7*V_n)))) 
    - Complexity: n^2 
* Chain [75] with precondition: [V_n>=8] 
    - Upper bound: V_n/8+(V_n/3+(V_n/2+(V_n/2*(14*V_n)+22*V_n+4/3*V_n+8*V_n+V_n+V_n/2*(7*V_n)+V_n/4*(21/2*V_n)+V_n/6*(21/2*V_n)+V_n/8*(7*V_n)))) 
    - Complexity: n^2 

### Maximum cost of eval_sipmamergesort_init_start(V_n,B): max([14,nat(V_n)*14*nat(V_n/2)+nat(V_n)*21+nat(2/3*V_n)*2+nat(4/3*V_n)*6+nat(V_n/2)*2+nat(V_n/2)*14*nat(V_n/2)+nat(V_n/2)*14*nat(V_n/4)+nat(V_n/2)*21*nat(V_n/6)+nat(V_n/2)*14*nat(V_n/8)+nat(V_n/4)+nat(V_n/6)*2+nat(V_n/8)+max([nat(V_n)+max([nat(V_n)*7*nat(V_n/2)+nat(V_n),nat(V_n/2)*7*nat(V_n/4)+nat(V_n/4)]),nat(V_n/2)*7*nat(V_n/4)+nat(V_n/4)])]) 
Asymptotic class: n^2 
* Total analysis performed in 1015 ms.

