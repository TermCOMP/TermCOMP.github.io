WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_xnu_bb3_in/8,eval_xnu_bb4_in/8]
1. recursive  : [eval_xnu_1/6,eval_xnu_2/7,eval_xnu_3/8,eval_xnu_4/9,eval_xnu_7/9,eval_xnu_8/10,eval_xnu_bb1_in/5,eval_xnu_bb2_in/5,eval_xnu_bb3_in_loop_cont/6,eval_xnu_bb5_in/9]
2. non_recursive  : [eval_xnu_stop/1]
3. non_recursive  : [eval_xnu_bb6_in/1]
4. non_recursive  : [eval_xnu_bb1_in_loop_cont/2]
5. non_recursive  : [eval_xnu_bb0_in/2]
6. non_recursive  : [eval_xnu_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_xnu_bb3_in/8
1. SCC is partially evaluated into eval_xnu_bb1_in/5
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_xnu_bb0_in/2
6. SCC is partially evaluated into eval_xnu_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_xnu_bb3_in/8 
* CE 14 is refined into CE [15] 
* CE 13 is refined into CE [16] 


### Cost equations --> "Loop" of eval_xnu_bb3_in/8 
* CEs [16] --> Loop 9 
* CEs [15] --> Loop 10 

### Ranking functions of CR eval_xnu_bb3_in(V_i_0,V_end_0,V_beg_0,V_2,V_end_1,V_4,V_k_0,B) 
* RF of phase [9]: [V_end_1-V_k_0,V_i_0-V_k_0+1]

#### Partial ranking functions of CR eval_xnu_bb3_in(V_i_0,V_end_0,V_beg_0,V_2,V_end_1,V_4,V_k_0,B) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    V_end_1-V_k_0
    V_i_0-V_k_0+1


### Specialization of cost equations eval_xnu_bb1_in/5 
* CE 12 is refined into CE [17] 
* CE 4 is refined into CE [18] 
* CE 5 is refined into CE [19] 
* CE 6 is refined into CE [20] 
* CE 7 is refined into CE [21] 
* CE 8 is refined into CE [22,23] 
* CE 9 is refined into CE [24] 
* CE 10 is refined into CE [25] 
* CE 11 is refined into CE [26,27] 
* CE 3 is refined into CE [28] 


### Cost equations --> "Loop" of eval_xnu_bb1_in/5 
* CEs [18] --> Loop 11 
* CEs [23,27] --> Loop 12 
* CEs [22,26] --> Loop 13 
* CEs [20,21,24,25] --> Loop 14 
* CEs [19] --> Loop 15 
* CEs [28] --> Loop 16 
* CEs [17] --> Loop 17 

### Ranking functions of CR eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) 
* RF of phase [11,12,13,14,15,16]: [V_len-V_i_0]

#### Partial ranking functions of CR eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B) 
* Partial RF of phase [11,12,13,14,15,16]:
  - RF of loop [11:1,12:1,13:1,14:1,15:1,16:1]:
    V_len-V_i_0
  - RF of loop [12:1]:
    V_end_0-V_beg_0 depends on loops [16:1] 
    V_i_0-V_beg_0 depends on loops [11:1,16:1] 
    V_len/2-V_beg_0/2-1/2
  - RF of loop [12:1,13:1,14:1,15:1,16:1]:
    V_len-V_end_0
  - RF of loop [13:1,14:1,15:1]:
    V_len-V_beg_0


### Specialization of cost equations eval_xnu_bb0_in/2 
* CE 2 is refined into CE [29,30] 


### Cost equations --> "Loop" of eval_xnu_bb0_in/2 
* CEs [30] --> Loop 18 
* CEs [29] --> Loop 19 

### Ranking functions of CR eval_xnu_bb0_in(V_len,B) 

#### Partial ranking functions of CR eval_xnu_bb0_in(V_len,B) 


### Specialization of cost equations eval_xnu_start/2 
* CE 1 is refined into CE [31,32] 


### Cost equations --> "Loop" of eval_xnu_start/2 
* CEs [32] --> Loop 20 
* CEs [31] --> Loop 21 

### Ranking functions of CR eval_xnu_start(V_len,B) 

#### Partial ranking functions of CR eval_xnu_start(V_len,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_xnu_bb3_in(V_i_0,V_end_0,V_beg_0,V_2,V_end_1,V_4,V_k_0,B):
* Chain [[9],10]: 1*it(9)+0
  Such that:it(9) =< V_end_1-V_k_0

  with precondition: [B=2,V_beg_0>=0,V_i_0>=V_end_0,V_end_1>=V_end_0,V_end_0>=V_beg_0,V_k_0>=V_beg_0,V_i_0+1>=V_end_1,V_end_1>=V_k_0+1] 

* Chain [10]: 0
  with precondition: [B=2,V_k_0=V_end_1,V_beg_0>=0,V_i_0>=V_end_0,V_k_0>=V_end_0,V_end_0>=V_beg_0,V_i_0+1>=V_k_0] 


#### Cost of chains of eval_xnu_bb1_in(V_len,V_i_0,V_end_0,V_beg_0,B):
* Chain [[11,12,13,14,15,16],17]: 1*it(11)+1*it(12)+3*it(13)+1*it(16)+2*s(11)+4*s(13)+0
  Such that:aux(16) =< V_len
it(12) =< V_len/2-V_beg_0/2
aux(25) =< V_len-V_i_0
aux(26) =< V_len-V_end_0
aux(27) =< V_len-V_beg_0
aux(28) =< V_i_0-V_beg_0
aux(29) =< V_end_0-V_beg_0
aux(24) =< aux(27)
aux(8) =< aux(28)
aux(24) =< aux(28)
aux(8) =< aux(29)
aux(14) =< aux(16)
it(11) =< aux(25)
it(12) =< aux(25)
it(13) =< aux(25)
it(16) =< aux(25)
it(12) =< aux(26)
it(13) =< aux(26)
it(16) =< aux(26)
it(13) =< aux(27)
s(12) =< aux(27)
aux(14) =< aux(16)
aux(13) =< it(16)*aux(16)
aux(4) =< it(16)*aux(16)
s(12) =< it(16)+it(11)+aux(24)
s(12) =< it(16)+it(11)+aux(28)
it(12) =< it(16)+it(11)+aux(24)
it(12) =< it(16)+it(11)+aux(28)
aux(15) =< it(16)*aux(14)
aux(4) =< it(16)*aux(14)
aux(7) =< aux(13)
aux(7) =< aux(15)
it(12) =< aux(4)+aux(29)
it(12) =< aux(7)+aux(8)
s(12) =< it(12)*aux(27)
s(13) =< aux(27)
s(11) =< s(12)

  with precondition: [B=3,V_beg_0>=0,V_len>=V_i_0+1,V_i_0>=V_end_0,V_end_0>=V_beg_0] 

* Chain [17]: 0
  with precondition: [B=3,V_beg_0>=0,V_i_0>=V_len,V_i_0>=V_end_0,V_end_0>=V_beg_0] 


#### Cost of chains of eval_xnu_bb0_in(V_len,B):
* Chain [19]: 0
  with precondition: [0>=V_len] 

* Chain [18]: 1*s(16)+9*s(25)+2*s(34)+0
  Such that:s(16) =< V_len/2
aux(31) =< V_len
s(24) =< aux(31)
s(25) =< aux(31)
s(16) =< aux(31)
s(28) =< aux(31)
s(24) =< aux(31)
s(29) =< s(25)*aux(31)
s(30) =< s(25)*aux(31)
s(28) =< s(25)+s(25)
s(28) =< s(25)+s(25)
s(16) =< s(25)+s(25)
s(16) =< s(25)+s(25)
s(31) =< s(25)*s(24)
s(30) =< s(25)*s(24)
s(32) =< s(29)
s(32) =< s(31)
s(16) =< s(30)
s(16) =< s(32)
s(28) =< s(16)*aux(31)
s(34) =< s(28)

  with precondition: [V_len>=1] 


#### Cost of chains of eval_xnu_start(V_len,B):
* Chain [21]: 0
  with precondition: [0>=V_len] 

* Chain [20]: 1*s(35)+9*s(38)+2*s(44)+0
  Such that:s(36) =< V_len
s(35) =< V_len/2
s(37) =< s(36)
s(38) =< s(36)
s(35) =< s(36)
s(39) =< s(36)
s(37) =< s(36)
s(40) =< s(38)*s(36)
s(41) =< s(38)*s(36)
s(39) =< s(38)+s(38)
s(39) =< s(38)+s(38)
s(35) =< s(38)+s(38)
s(35) =< s(38)+s(38)
s(42) =< s(38)*s(37)
s(41) =< s(38)*s(37)
s(43) =< s(40)
s(43) =< s(42)
s(35) =< s(41)
s(35) =< s(43)
s(39) =< s(35)*s(36)
s(44) =< s(39)

  with precondition: [V_len>=1] 


Closed-form bounds of eval_xnu_start(V_len,B): 
-------------------------------------
* Chain [21] with precondition: [0>=V_len] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [20] with precondition: [V_len>=1] 
    - Upper bound: 23/2*V_len 
    - Complexity: n 

### Maximum cost of eval_xnu_start(V_len,B): nat(V_len)*11+nat(V_len/2) 
Asymptotic class: n 
* Total analysis performed in 228 ms.

