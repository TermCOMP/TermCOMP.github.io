WORST_CASE(?,O(n^3))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_jama_ex6_bb4_in/5,eval_jama_ex6_bb5_in/5]
1. recursive  : [eval_jama_ex6_bb2_in/5,eval_jama_ex6_bb3_in/5,eval_jama_ex6_bb4_in_loop_cont/7,eval_jama_ex6_bb6_in/6]
2. recursive  : [eval_jama_ex6_bb1_in/5,eval_jama_ex6_bb2_in_loop_cont/7,eval_jama_ex6_bb7_in/6]
3. non_recursive  : [eval_jama_ex6_stop/1]
4. non_recursive  : [eval_jama_ex6_bb8_in/1]
5. non_recursive  : [eval_jama_ex6_bb1_in_loop_cont/2]
6. non_recursive  : [eval_jama_ex6_bb0_in/5]
7. non_recursive  : [eval_jama_ex6_start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_jama_ex6_bb4_in/5
1. SCC is partially evaluated into eval_jama_ex6_bb2_in/5
2. SCC is partially evaluated into eval_jama_ex6_bb1_in/5
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_jama_ex6_bb0_in/5
7. SCC is partially evaluated into eval_jama_ex6_start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_jama_ex6_bb4_in/5 
* CE 8 is refined into CE [9] 
* CE 7 is refined into CE [10] 


### Cost equations --> "Loop" of eval_jama_ex6_bb4_in/5 
* CEs [10] --> Loop 9 
* CEs [9] --> Loop 10 

### Ranking functions of CR eval_jama_ex6_bb4_in(V_i_0,V_j_0,V_k_0,B,C) 
* RF of phase [9]: [V_i_0+V_j_0-V_k_0+1]

#### Partial ranking functions of CR eval_jama_ex6_bb4_in(V_i_0,V_j_0,V_k_0,B,C) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    V_i_0+V_j_0-V_k_0+1


### Specialization of cost equations eval_jama_ex6_bb2_in/5 
* CE 6 is refined into CE [11] 
* CE 5 is refined into CE [12,13] 


### Cost equations --> "Loop" of eval_jama_ex6_bb2_in/5 
* CEs [13] --> Loop 11 
* CEs [12] --> Loop 12 
* CEs [11] --> Loop 13 

### Ranking functions of CR eval_jama_ex6_bb2_in(V_d,V_i_0,V_j_0,B,C) 
* RF of phase [11]: [V_d-V_j_0+1]
* RF of phase [12]: [V_d-V_j_0+1,-V_j_0+1]

#### Partial ranking functions of CR eval_jama_ex6_bb2_in(V_d,V_i_0,V_j_0,B,C) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    V_d-V_j_0+1
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V_d-V_j_0+1
    -V_j_0+1


### Specialization of cost equations eval_jama_ex6_bb1_in/5 
* CE 4 is refined into CE [14] 
* CE 3 is refined into CE [15,16,17,18] 


### Cost equations --> "Loop" of eval_jama_ex6_bb1_in/5 
* CEs [18] --> Loop 14 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 
* CEs [17] --> Loop 17 
* CEs [14] --> Loop 18 

### Ranking functions of CR eval_jama_ex6_bb1_in(V_b,V_c,V_d,V_i_0,B) 
* RF of phase [14]: [V_b-V_i_0+1]
* RF of phase [15]: [V_b-V_i_0+1]
* RF of phase [16]: [V_b-V_i_0+1]
* RF of phase [17]: [V_b-V_i_0+1]

#### Partial ranking functions of CR eval_jama_ex6_bb1_in(V_b,V_c,V_d,V_i_0,B) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    V_b-V_i_0+1
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V_b-V_i_0+1
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    V_b-V_i_0+1
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    V_b-V_i_0+1


### Specialization of cost equations eval_jama_ex6_bb0_in/5 
* CE 2 is refined into CE [19,20,21,22,23] 


### Cost equations --> "Loop" of eval_jama_ex6_bb0_in/5 
* CEs [22] --> Loop 19 
* CEs [23] --> Loop 20 
* CEs [21] --> Loop 21 
* CEs [20] --> Loop 22 
* CEs [19] --> Loop 23 

### Ranking functions of CR eval_jama_ex6_bb0_in(V_a,V_b,V_c,V_d,B) 

#### Partial ranking functions of CR eval_jama_ex6_bb0_in(V_a,V_b,V_c,V_d,B) 


### Specialization of cost equations eval_jama_ex6_start/5 
* CE 1 is refined into CE [24,25,26,27,28] 


### Cost equations --> "Loop" of eval_jama_ex6_start/5 
* CEs [28] --> Loop 24 
* CEs [27] --> Loop 25 
* CEs [26] --> Loop 26 
* CEs [25] --> Loop 27 
* CEs [24] --> Loop 28 

### Ranking functions of CR eval_jama_ex6_start(V_a,V_b,V_c,V_d,B) 

#### Partial ranking functions of CR eval_jama_ex6_start(V_a,V_b,V_c,V_d,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_jama_ex6_bb4_in(V_i_0,V_j_0,V_k_0,B,C):
* Chain [[9],10]: 1*it(9)+0
  Such that:it(9) =< -V_k_0+C

  with precondition: [B=2,V_i_0+V_j_0+1=C,V_j_0+V_k_0>=V_i_0,V_i_0+V_j_0>=V_k_0] 

* Chain [10]: 0
  with precondition: [B=2,V_k_0=C,V_k_0>=V_i_0+V_j_0+1,V_j_0+V_k_0>=V_i_0] 


#### Cost of chains of eval_jama_ex6_bb2_in(V_d,V_i_0,V_j_0,B,C):
* Chain [[12],[11],13]: 1*it(11)+1*it(12)+1*s(3)+0
  Such that:it(11) =< V_d+1
it(12) =< V_d-V_j_0
aux(1) =< 2*V_d+2
aux(2) =< V_d-V_j_0+1
it(11) =< aux(2)
it(12) =< aux(2)
s(3) =< it(11)*aux(1)

  with precondition: [B=3,V_d+1=C,0>=2*V_j_0+1,V_d>=0,V_d>=V_j_0+1] 

* Chain [[12],13]: 1*it(12)+0
  Such that:it(12) =< V_d-V_j_0+1

  with precondition: [B=3,V_d+1=C,0>=2*V_d+1,V_d>=V_j_0] 

* Chain [[11],13]: 1*it(11)+1*s(3)+0
  Such that:it(11) =< -V_j_0+C
aux(1) =< 2*C
s(3) =< it(11)*aux(1)

  with precondition: [B=3,V_d+1=C,V_j_0>=0,V_d>=V_j_0] 

* Chain [13]: 0
  with precondition: [B=3,V_j_0=C,V_j_0>=V_d+1] 


#### Cost of chains of eval_jama_ex6_bb1_in(V_b,V_c,V_d,V_i_0,B):
* Chain [[17],18]: 1*it(17)+1*s(10)+1*s(11)+0
  Such that:it(17) =< V_b-V_i_0+1
aux(3) =< -V_c+V_d+1
s(8) =< 2*V_d+2
aux(3) =< s(8)*(1/2)
s(10) =< it(17)*aux(3)
s(11) =< s(10)*s(8)

  with precondition: [B=4,V_c>=0,V_d>=V_c,V_b>=V_i_0] 

* Chain [[16],18]: 1*it(16)+1*s(22)+1*s(23)+1*s(24)+0
  Such that:it(16) =< V_b-V_i_0+1
aux(4) =< -V_c+V_d
s(20) =< 2*V_d+2
aux(6) =< s(20)*(1/2)
aux(5) =< aux(4)+1
s(23) =< it(16)*aux(4)
s(22) =< it(16)*aux(6)
s(25) =< it(16)*aux(5)
s(22) =< s(25)
s(23) =< s(25)
s(24) =< s(22)*s(20)

  with precondition: [B=4,0>=2*V_c+1,V_d>=0,V_d>=V_c+1,V_b>=V_i_0] 

* Chain [[15],18]: 1*it(15)+1*s(28)+0
  Such that:it(15) =< V_b-V_i_0+1
aux(7) =< -V_c+V_d+1
s(28) =< it(15)*aux(7)

  with precondition: [B=4,0>=2*V_d+1,V_d>=V_c,V_b>=V_i_0] 

* Chain [[14],18]: 1*it(14)+0
  Such that:it(14) =< V_b-V_i_0+1

  with precondition: [B=4,V_c>=V_d+1,V_b>=V_i_0] 

* Chain [18]: 0
  with precondition: [B=4,V_i_0>=V_b+1] 


#### Cost of chains of eval_jama_ex6_bb0_in(V_a,V_b,V_c,V_d,B):
* Chain [23]: 1*s(29)+1*s(34)+1*s(35)+1*s(37)+0
  Such that:s(29) =< -V_a+V_b+1
s(30) =< -V_c+V_d
s(31) =< 2*V_d+2
s(32) =< s(31)*(1/2)
s(33) =< s(30)+1
s(34) =< s(29)*s(30)
s(35) =< s(29)*s(32)
s(36) =< s(29)*s(33)
s(35) =< s(36)
s(34) =< s(36)
s(37) =< s(35)*s(31)

  with precondition: [0>=2*V_c+1,V_d>=0,V_b>=V_a,V_d>=V_c+1] 

* Chain [22]: 1*s(38)+1*s(40)+0
  Such that:s(38) =< -V_a+V_b+1
s(39) =< -V_c+V_d+1
s(40) =< s(38)*s(39)

  with precondition: [0>=2*V_d+1,V_b>=V_a,V_d>=V_c] 

* Chain [21]: 1*s(41)+1*s(44)+1*s(45)+0
  Such that:s(41) =< -V_a+V_b+1
s(42) =< -V_c+V_d+1
s(43) =< 2*V_d+2
s(42) =< s(43)*(1/2)
s(44) =< s(41)*s(42)
s(45) =< s(44)*s(43)

  with precondition: [V_c>=0,V_b>=V_a,V_d>=V_c] 

* Chain [20]: 1*s(46)+0
  Such that:s(46) =< -V_a+V_b+1

  with precondition: [V_b>=V_a,V_c>=V_d+1] 

* Chain [19]: 0
  with precondition: [V_a>=V_b+1] 


#### Cost of chains of eval_jama_ex6_start(V_a,V_b,V_c,V_d,B):
* Chain [28]: 1*s(47)+1*s(52)+1*s(53)+1*s(55)+0
  Such that:s(47) =< -V_a+V_b+1
s(48) =< -V_c+V_d
s(49) =< 2*V_d+2
s(50) =< s(49)*(1/2)
s(51) =< s(48)+1
s(52) =< s(47)*s(48)
s(53) =< s(47)*s(50)
s(54) =< s(47)*s(51)
s(53) =< s(54)
s(52) =< s(54)
s(55) =< s(53)*s(49)

  with precondition: [0>=2*V_c+1,V_d>=0,V_b>=V_a,V_d>=V_c+1] 

* Chain [27]: 1*s(56)+1*s(58)+0
  Such that:s(56) =< -V_a+V_b+1
s(57) =< -V_c+V_d+1
s(58) =< s(56)*s(57)

  with precondition: [0>=2*V_d+1,V_b>=V_a,V_d>=V_c] 

* Chain [26]: 1*s(59)+1*s(62)+1*s(63)+0
  Such that:s(59) =< -V_a+V_b+1
s(60) =< -V_c+V_d+1
s(61) =< 2*V_d+2
s(60) =< s(61)*(1/2)
s(62) =< s(59)*s(60)
s(63) =< s(62)*s(61)

  with precondition: [V_c>=0,V_b>=V_a,V_d>=V_c] 

* Chain [25]: 1*s(64)+0
  Such that:s(64) =< -V_a+V_b+1

  with precondition: [V_b>=V_a,V_c>=V_d+1] 

* Chain [24]: 0
  with precondition: [V_a>=V_b+1] 


Closed-form bounds of eval_jama_ex6_start(V_a,V_b,V_c,V_d,B): 
-------------------------------------
* Chain [28] with precondition: [0>=2*V_c+1,V_d>=0,V_b>=V_a,V_d>=V_c+1] 
    - Upper bound: (-V_a+V_b+1)*(-V_c+V_d)+(-V_a+V_b+1)*((2*V_d+2)*(V_d+1))+(-V_a+V_b+1)*(V_d+1)+(-V_a+V_b+1) 
    - Complexity: n^3 
* Chain [27] with precondition: [0>=2*V_d+1,V_b>=V_a,V_d>=V_c] 
    - Upper bound: -V_a+V_b+1+(-V_c+V_d+1)*(-V_a+V_b+1) 
    - Complexity: n^2 
* Chain [26] with precondition: [V_c>=0,V_b>=V_a,V_d>=V_c] 
    - Upper bound: -V_a+V_b+1+(-V_c+V_d+1)*((-V_a+V_b+1)*(2*V_d+2))+(-V_c+V_d+1)*(-V_a+V_b+1) 
    - Complexity: n^3 
* Chain [25] with precondition: [V_b>=V_a,V_c>=V_d+1] 
    - Upper bound: -V_a+V_b+1 
    - Complexity: n 
* Chain [24] with precondition: [V_a>=V_b+1] 
    - Upper bound: 0 
    - Complexity: constant 

### Maximum cost of eval_jama_ex6_start(V_a,V_b,V_c,V_d,B): nat(-V_a+V_b+1)+max([nat(-V_a+V_b+1)*nat(2*V_d+2)*nat(-V_c+V_d+1)+nat(-V_c+V_d+1)*nat(-V_a+V_b+1),1/2*nat(2*V_d+2)*nat(2*V_d+2)*nat(-V_a+V_b+1)+nat(-V_a+V_b+1)*nat(-V_c+V_d)+1/2*nat(2*V_d+2)*nat(-V_a+V_b+1)]) 
Asymptotic class: n^3 
* Total analysis performed in 138 ms.

