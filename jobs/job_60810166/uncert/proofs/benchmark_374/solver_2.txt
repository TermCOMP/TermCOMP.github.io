WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_speed_popl10_sequential_single_0/4,eval_speed_popl10_sequential_single_1/5,eval_speed_popl10_sequential_single_bb1_in/4,eval_speed_popl10_sequential_single_bb2_in/4,eval_speed_popl10_sequential_single_bb3_in/5]
1. recursive  : [eval_speed_popl10_sequential_single_bb4_in/3,eval_speed_popl10_sequential_single_bb5_in/3]
2. non_recursive  : [eval_speed_popl10_sequential_single_stop/1]
3. non_recursive  : [eval_speed_popl10_sequential_single_bb6_in/1]
4. non_recursive  : [eval_speed_popl10_sequential_single_bb4_in_loop_cont/2]
5. non_recursive  : [eval_speed_popl10_sequential_single_bb1_in_loop_cont/4]
6. non_recursive  : [eval_speed_popl10_sequential_single_bb0_in/2]
7. non_recursive  : [eval_speed_popl10_sequential_single_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_speed_popl10_sequential_single_bb1_in/4
1. SCC is partially evaluated into eval_speed_popl10_sequential_single_bb4_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_speed_popl10_sequential_single_bb1_in_loop_cont/4
6. SCC is partially evaluated into eval_speed_popl10_sequential_single_bb0_in/2
7. SCC is partially evaluated into eval_speed_popl10_sequential_single_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_speed_popl10_sequential_single_bb1_in/4 
* CE 3 is refined into CE [9] 
* CE 5 is refined into CE [10] 
* CE 4 is refined into CE [11] 


### Cost equations --> "Loop" of eval_speed_popl10_sequential_single_bb1_in/4 
* CEs [11] --> Loop 9 
* CEs [9] --> Loop 10 
* CEs [10] --> Loop 11 

### Ranking functions of CR eval_speed_popl10_sequential_single_bb1_in(V_n,V_x_0,B,C) 
* RF of phase [9]: [V_n-V_x_0]

#### Partial ranking functions of CR eval_speed_popl10_sequential_single_bb1_in(V_n,V_x_0,B,C) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    V_n-V_x_0


### Specialization of cost equations eval_speed_popl10_sequential_single_bb4_in/3 
* CE 8 is refined into CE [12] 
* CE 7 is refined into CE [13] 


### Cost equations --> "Loop" of eval_speed_popl10_sequential_single_bb4_in/3 
* CEs [13] --> Loop 12 
* CEs [12] --> Loop 13 

### Ranking functions of CR eval_speed_popl10_sequential_single_bb4_in(V_n,V_x_1,B) 
* RF of phase [12]: [V_n-V_x_1]

#### Partial ranking functions of CR eval_speed_popl10_sequential_single_bb4_in(V_n,V_x_1,B) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V_n-V_x_1


### Specialization of cost equations eval_speed_popl10_sequential_single_bb1_in_loop_cont/4 
* CE 6 is refined into CE [14,15] 


### Cost equations --> "Loop" of eval_speed_popl10_sequential_single_bb1_in_loop_cont/4 
* CEs [15] --> Loop 14 
* CEs [14] --> Loop 15 

### Ranking functions of CR eval_speed_popl10_sequential_single_bb1_in_loop_cont(A,B,C,D) 

#### Partial ranking functions of CR eval_speed_popl10_sequential_single_bb1_in_loop_cont(A,B,C,D) 


### Specialization of cost equations eval_speed_popl10_sequential_single_bb0_in/2 
* CE 2 is refined into CE [16,17,18,19] 


### Cost equations --> "Loop" of eval_speed_popl10_sequential_single_bb0_in/2 
* CEs [19] --> Loop 16 
* CEs [16,18] --> Loop 17 
* CEs [17] --> Loop 18 

### Ranking functions of CR eval_speed_popl10_sequential_single_bb0_in(V_n,B) 

#### Partial ranking functions of CR eval_speed_popl10_sequential_single_bb0_in(V_n,B) 


### Specialization of cost equations eval_speed_popl10_sequential_single_start/2 
* CE 1 is refined into CE [20,21,22] 


### Cost equations --> "Loop" of eval_speed_popl10_sequential_single_start/2 
* CEs [22] --> Loop 19 
* CEs [21] --> Loop 20 
* CEs [20] --> Loop 21 

### Ranking functions of CR eval_speed_popl10_sequential_single_start(V_n,B) 

#### Partial ranking functions of CR eval_speed_popl10_sequential_single_start(V_n,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_speed_popl10_sequential_single_bb1_in(V_n,V_x_0,B,C):
* Chain [[9],11]: 1*it(9)+0
  Such that:it(9) =< -V_x_0+C

  with precondition: [B=3,V_n=C,V_x_0>=0,V_n>=V_x_0+1] 

* Chain [[9],10]: 1*it(9)+0
  Such that:it(9) =< -V_x_0+C

  with precondition: [B=3,V_x_0>=0,C>=V_x_0+1,V_n>=C+1] 

* Chain [11]: 0
  with precondition: [B=3,V_x_0=C,V_x_0>=0,V_x_0>=V_n] 

* Chain [10]: 0
  with precondition: [B=3,V_x_0=C,V_x_0>=0,V_n>=V_x_0+1] 


#### Cost of chains of eval_speed_popl10_sequential_single_bb4_in(V_n,V_x_1,B):
* Chain [[12],13]: 1*it(12)+0
  Such that:it(12) =< V_n-V_x_1

  with precondition: [B=2,V_n>=V_x_1+1] 

* Chain [13]: 0
  with precondition: [B=2,V_x_1>=V_n] 


#### Cost of chains of eval_speed_popl10_sequential_single_bb1_in_loop_cont(A,B,C,D):
* Chain [15]: 0
  with precondition: [A=3,C>=B] 

* Chain [14]: 1*s(1)+0
  Such that:s(1) =< B-C

  with precondition: [A=3,B>=C+1] 


#### Cost of chains of eval_speed_popl10_sequential_single_bb0_in(V_n,B):
* Chain [18]: 0
  with precondition: [0>=V_n] 

* Chain [17]: 2*s(2)+0
  Such that:aux(1) =< V_n
s(2) =< aux(1)

  with precondition: [V_n>=1] 

* Chain [16]: 2*s(4)+0
  Such that:aux(2) =< V_n
s(4) =< aux(2)

  with precondition: [V_n>=2] 


#### Cost of chains of eval_speed_popl10_sequential_single_start(V_n,B):
* Chain [21]: 0
  with precondition: [0>=V_n] 

* Chain [20]: 2*s(7)+0
  Such that:s(6) =< V_n
s(7) =< s(6)

  with precondition: [V_n>=1] 

* Chain [19]: 2*s(9)+0
  Such that:s(8) =< V_n
s(9) =< s(8)

  with precondition: [V_n>=2] 


Closed-form bounds of eval_speed_popl10_sequential_single_start(V_n,B): 
-------------------------------------
* Chain [21] with precondition: [0>=V_n] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [20] with precondition: [V_n>=1] 
    - Upper bound: 2*V_n 
    - Complexity: n 
* Chain [19] with precondition: [V_n>=2] 
    - Upper bound: 2*V_n 
    - Complexity: n 

### Maximum cost of eval_speed_popl10_sequential_single_start(V_n,B): nat(V_n)*2 
Asymptotic class: n 
* Total analysis performed in 46 ms.

