MAYBE

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_amir1_3/8,eval_amir1_4/9,eval_amir1_bb1_in/6,eval_amir1_bb2_in/7]
1. recursive  : [eval_amir1_bb3_in/2,eval_amir1_bb4_in/2]
2. non_recursive  : [eval_amir1_stop/1]
3. non_recursive  : [eval_amir1_bb5_in/1]
4. non_recursive  : [eval_amir1_bb3_in_loop_cont/2]
5. non_recursive  : [eval_amir1_bb1_in_loop_cont/3]
6. non_recursive  : [eval_amir1_bb0_in/4]
7. non_recursive  : [eval_amir1_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_amir1_bb1_in/6
1. SCC is partially evaluated into eval_amir1_bb3_in/2
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_amir1_bb1_in_loop_cont/3
6. SCC is partially evaluated into eval_amir1_bb0_in/4
7. SCC is partially evaluated into eval_amir1_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_amir1_bb1_in/6 
* CE 5 is refined into CE [9] 
* CE 4 is refined into CE [10] 
* CE 3 is refined into CE [11] 


### Cost equations --> "Loop" of eval_amir1_bb1_in/6 
* CEs [10] --> Loop 9 
* CEs [11] --> Loop 10 
* CEs [9] --> Loop 11 

### Ranking functions of CR eval_amir1_bb1_in(V_x2,V_x3_0,V__01,V__0,B,C) 
* RF of phase [9,10]: [V__0]

#### Partial ranking functions of CR eval_amir1_bb1_in(V_x2,V_x3_0,V__01,V__0,B,C) 
* Partial RF of phase [9,10]:
  - RF of loop [9:1,10:1]:
    V__0


### Specialization of cost equations eval_amir1_bb3_in/2 
* CE 8 is refined into CE [12] 
* CE 7 is refined into CE [13] 


### Cost equations --> "Loop" of eval_amir1_bb3_in/2 
* CEs [13] --> Loop 12 
* CEs [12] --> Loop 13 

### Ranking functions of CR eval_amir1_bb3_in(V_x3_1,B) 
* RF of phase [12]: [V_x3_1]

#### Partial ranking functions of CR eval_amir1_bb3_in(V_x3_1,B) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V_x3_1


### Specialization of cost equations eval_amir1_bb1_in_loop_cont/3 
* CE 6 is refined into CE [14,15] 


### Cost equations --> "Loop" of eval_amir1_bb1_in_loop_cont/3 
* CEs [15] --> Loop 14 
* CEs [14] --> Loop 15 

### Ranking functions of CR eval_amir1_bb1_in_loop_cont(A,B,C) 

#### Partial ranking functions of CR eval_amir1_bb1_in_loop_cont(A,B,C) 


### Specialization of cost equations eval_amir1_bb0_in/4 
* CE 2 is refined into CE [16,17,18] 


### Cost equations --> "Loop" of eval_amir1_bb0_in/4 
* CEs [17,18] --> Loop 16 
* CEs [16] --> Loop 17 

### Ranking functions of CR eval_amir1_bb0_in(V_x4,V_x1,V_x2,B) 

#### Partial ranking functions of CR eval_amir1_bb0_in(V_x4,V_x1,V_x2,B) 


### Specialization of cost equations eval_amir1_start/4 
* CE 1 is refined into CE [19,20] 


### Cost equations --> "Loop" of eval_amir1_start/4 
* CEs [20] --> Loop 18 
* CEs [19] --> Loop 19 

### Ranking functions of CR eval_amir1_start(V_x4,V_x1,V_x2,B) 

#### Partial ranking functions of CR eval_amir1_start(V_x4,V_x1,V_x2,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_amir1_bb1_in(V_x2,V_x3_0,V__01,V__0,B,C):
* Chain [[9,10],11]: 2*it(9)+0
  Such that:aux(3) =< V__0
it(9) =< aux(3)

  with precondition: [B=3,V__0>=1] 

* Chain [11]: 0
  with precondition: [B=3,C=V_x3_0,0>=V__0] 


#### Cost of chains of eval_amir1_bb3_in(V_x3_1,B):
* Chain [[12],13]: 1*it(12)+0
  Such that:it(12) =< V_x3_1

  with precondition: [B=2,V_x3_1>=1] 

* Chain [13]: 0
  with precondition: [B=2,0>=V_x3_1] 


#### Cost of chains of eval_amir1_bb1_in_loop_cont(A,B,C):
* Chain [15]: 0
  with precondition: [A=3,0>=B] 

* Chain [14]: 1*s(1)+0
  Such that:s(1) =< B

  with precondition: [A=3,B>=1] 


#### Cost of chains of eval_amir1_bb0_in(V_x4,V_x1,V_x2,B):
* Chain [17]: 0
  with precondition: [0>=V_x4] 

* Chain [16]: 4*s(3)+1*s(6)+0
  Such that:aux(4) =< V_x4
s(3) =< aux(4)

  with precondition: [V_x4>=1] 


#### Cost of chains of eval_amir1_start(V_x4,V_x1,V_x2,B):
* Chain [19]: 0
  with precondition: [0>=V_x4] 

* Chain [18]: 4*s(8)+1*s(9)+0
  Such that:s(7) =< V_x4
s(8) =< s(7)

  with precondition: [V_x4>=1] 


Closed-form bounds of eval_amir1_start(V_x4,V_x1,V_x2,B): 
-------------------------------------
* Chain [19] with precondition: [0>=V_x4] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [18] with precondition: [V_x4>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_amir1_start(V_x4,V_x1,V_x2,B): inf 
Asymptotic class: infinity 
* Total analysis performed in 44 ms.

