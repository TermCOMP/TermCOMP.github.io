MAYBE
WARNING: Excluded non-linear constraints:[M=B+C*C-2*C+1]

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_size13_bb3_in/13,eval_size13_bb4_in/13]
1. recursive  : [eval_size13_bb1_in/8,eval_size13_bb2_in/8,eval_size13_bb3_in_loop_cont/9]
2. recursive  : [eval_size13_bb5_in/2,eval_size13_bb6_in/2]
3. non_recursive  : [eval_size13_stop/1]
4. non_recursive  : [eval_size13_bb7_in/1]
5. non_recursive  : [eval_size13_bb5_in_loop_cont/2]
6. non_recursive  : [eval_size13_bb1_in_loop_cont/3]
7. non_recursive  : [eval_size13_bb0_in/5]
8. non_recursive  : [eval_size13_start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_size13_bb3_in/13
1. SCC is partially evaluated into eval_size13_bb1_in/8
2. SCC is partially evaluated into eval_size13_bb5_in/2
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_size13_bb1_in_loop_cont/3
7. SCC is partially evaluated into eval_size13_bb0_in/5
8. SCC is partially evaluated into eval_size13_start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_size13_bb3_in/13 
* CE 7 is refined into CE [10] 
* CE 6 is refined into CE [11] 


### Cost equations --> "Loop" of eval_size13_bb3_in/13 
* CEs [11] --> Loop 10 
* CEs [10] --> Loop 11 

### Ranking functions of CR eval_size13_bb3_in(V_a,V_t3_0,V_t1_0,V__03,V__01,V__0,V_t2_0,V__12,V__1,B,C,D,E) 
* RF of phase [10]: [V_t2_0]

#### Partial ranking functions of CR eval_size13_bb3_in(V_a,V_t3_0,V_t1_0,V__03,V__01,V__0,V_t2_0,V__12,V__1,B,C,D,E) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V_t2_0


### Specialization of cost equations eval_size13_bb1_in/8 
* CE 4 is refined into CE [12] 
* CE 3 is refined into CE [13,14] 


### Cost equations --> "Loop" of eval_size13_bb1_in/8 
* CEs [13] --> Loop 12 
* CEs [14] --> Loop 13 
* CEs [12] --> Loop 14 

### Ranking functions of CR eval_size13_bb1_in(V_a,V_t3_0,V_t1_0,V__03,V__01,V__0,B,C) 
* RF of phase [12]: [V_t1_0]
* RF of phase [13]: [V_t1_0]

#### Partial ranking functions of CR eval_size13_bb1_in(V_a,V_t3_0,V_t1_0,V__03,V__01,V__0,B,C) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V_t1_0
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    V_t1_0


### Specialization of cost equations eval_size13_bb5_in/2 
* CE 9 is refined into CE [15] 
* CE 8 is refined into CE [16] 


### Cost equations --> "Loop" of eval_size13_bb5_in/2 
* CEs [16] --> Loop 15 
* CEs [15] --> Loop 16 

### Ranking functions of CR eval_size13_bb5_in(V_t3_1,B) 
* RF of phase [15]: [V_t3_1]

#### Partial ranking functions of CR eval_size13_bb5_in(V_t3_1,B) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V_t3_1


### Specialization of cost equations eval_size13_bb1_in_loop_cont/3 
* CE 5 is refined into CE [17,18] 


### Cost equations --> "Loop" of eval_size13_bb1_in_loop_cont/3 
* CEs [18] --> Loop 17 
* CEs [17] --> Loop 18 

### Ranking functions of CR eval_size13_bb1_in_loop_cont(A,B,C) 

#### Partial ranking functions of CR eval_size13_bb1_in_loop_cont(A,B,C) 


### Specialization of cost equations eval_size13_bb0_in/5 
* CE 2 is refined into CE [19,20,21,22,23,24,25] 


### Cost equations --> "Loop" of eval_size13_bb0_in/5 
* CEs [24,25] --> Loop 19 
* CEs [22,23] --> Loop 20 
* CEs [20,21] --> Loop 21 
* CEs [19] --> Loop 22 

### Ranking functions of CR eval_size13_bb0_in(V_a,V_b,V_c,V_d,B) 

#### Partial ranking functions of CR eval_size13_bb0_in(V_a,V_b,V_c,V_d,B) 


### Specialization of cost equations eval_size13_start/5 
* CE 1 is refined into CE [26,27,28,29] 


### Cost equations --> "Loop" of eval_size13_start/5 
* CEs [29] --> Loop 23 
* CEs [28] --> Loop 24 
* CEs [27] --> Loop 25 
* CEs [26] --> Loop 26 

### Ranking functions of CR eval_size13_start(V_a,V_b,V_c,V_d,B) 

#### Partial ranking functions of CR eval_size13_start(V_a,V_b,V_c,V_d,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_size13_bb3_in(V_a,V_t3_0,V_t1_0,V__03,V__01,V__0,V_t2_0,V__12,V__1,B,C,D,E):
* Chain [[10],11]: 1*it(10)+0
  Such that:it(10) =< V_t2_0

  with precondition: [B=2,V__03=C,V_a=D,V__03=E,V_t1_0>=1,V_t2_0>=1,V_a>=V_t1_0,V__0+V__01>=V_t2_0] 

* Chain [11]: 0
  with precondition: [B=2,D=V__12,V__1=C,V__1=E,0>=V_t2_0,V_t1_0>=1,V_a>=V_t1_0,V__0+V__01>=V_t2_0] 


#### Cost of chains of eval_size13_bb1_in(V_a,V_t3_0,V_t1_0,V__03,V__01,V__0,B,C):
* Chain [[13],[12],14]: 2*it(12)+1*s(3)+0
  Such that:aux(4) =< V_a+V__03
aux(2) =< V__01+V__0
aux(6) =< V_t1_0
it(12) =< aux(6)
aux(5) =< aux(4)
aux(3) =< it(12)*aux(4)
aux(3) =< it(12)*aux(5)
aux(1) =< aux(2)+aux(3)
s(3) =< it(12)*aux(1)

  with precondition: [B=4,V_t1_0>=2,0>=V__03+V_a,V_a>=V_t1_0,V__0+V__01>=1] 

* Chain [[13],14]: 1*it(13)+1*s(3)+0
  Such that:aux(4) =< V_a+V__03
it(13) =< V_t1_0
aux(2) =< V__01+V__0
aux(5) =< aux(4)
aux(3) =< it(13)*aux(4)
aux(3) =< it(13)*aux(5)
aux(1) =< aux(2)+aux(3)
s(3) =< it(13)*aux(1)

  with precondition: [B=4,V_t1_0>=1,V_a>=V_t1_0,V__0+V__01>=1] 

* Chain [[12],14]: 1*it(12)+0
  Such that:it(12) =< V_t1_0

  with precondition: [B=4,V_t1_0>=1,V_a>=V_t1_0,0>=V__0+V__01] 

* Chain [14]: 0
  with precondition: [B=4,C=V_t3_0,0>=V_t1_0,V_a>=V_t1_0] 


#### Cost of chains of eval_size13_bb5_in(V_t3_1,B):
* Chain [[15],16]: 1*it(15)+0
  Such that:it(15) =< V_t3_1

  with precondition: [B=3,V_t3_1>=1] 

* Chain [16]: 0
  with precondition: [B=3,0>=V_t3_1] 


#### Cost of chains of eval_size13_bb1_in_loop_cont(A,B,C):
* Chain [18]: 0
  with precondition: [A=4,0>=B] 

* Chain [17]: 1*s(4)+0
  Such that:s(4) =< B

  with precondition: [A=4,B>=1] 


#### Cost of chains of eval_size13_bb0_in(V_a,V_b,V_c,V_d,B):
* Chain [22]: 0
  with precondition: [0>=V_a] 

* Chain [21]: 2*s(5)+1*s(7)+0
  Such that:aux(7) =< V_a
s(5) =< aux(7)

  with precondition: [V_a>=1,0>=V_b+V_c] 

* Chain [20]: 2*s(9)+2*s(14)+1*s(22)+0
  Such that:aux(8) =< V_a
aux(9) =< V_a+V_d
aux(10) =< V_b+V_c
s(9) =< aux(8)
s(11) =< aux(9)
s(12) =< s(9)*aux(9)
s(12) =< s(9)*s(11)
s(13) =< aux(10)+s(12)
s(14) =< s(9)*s(13)

  with precondition: [V_a>=1,V_b+V_c>=1] 

* Chain [19]: 4*s(26)+2*s(30)+1*s(39)+0
  Such that:aux(11) =< V_a
aux(12) =< V_b+V_c
s(26) =< aux(11)
s(30) =< s(26)*aux(12)

  with precondition: [V_a>=2,0>=V_a+V_d,V_b+V_c>=1] 


#### Cost of chains of eval_size13_start(V_a,V_b,V_c,V_d,B):
* Chain [26]: 0
  with precondition: [0>=V_a] 

* Chain [25]: 2*s(41)+1*s(42)+0
  Such that:s(40) =< V_a
s(41) =< s(40)

  with precondition: [V_a>=1,0>=V_b+V_c] 

* Chain [24]: 2*s(46)+2*s(50)+1*s(51)+0
  Such that:s(43) =< V_a
s(44) =< V_a+V_d
s(45) =< V_b+V_c
s(46) =< s(43)
s(47) =< s(44)
s(48) =< s(46)*s(44)
s(48) =< s(46)*s(47)
s(49) =< s(45)+s(48)
s(50) =< s(46)*s(49)

  with precondition: [V_a>=1,V_b+V_c>=1] 

* Chain [23]: 4*s(54)+2*s(55)+1*s(56)+0
  Such that:s(52) =< V_a
s(53) =< V_b+V_c
s(54) =< s(52)
s(55) =< s(54)*s(53)

  with precondition: [V_a>=2,0>=V_a+V_d,V_b+V_c>=1] 


Closed-form bounds of eval_size13_start(V_a,V_b,V_c,V_d,B): 
-------------------------------------
* Chain [26] with precondition: [0>=V_a] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [25] with precondition: [V_a>=1,0>=V_b+V_c] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [24] with precondition: [V_a>=1,V_b+V_c>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [23] with precondition: [V_a>=2,0>=V_a+V_d,V_b+V_c>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_size13_start(V_a,V_b,V_c,V_d,B): inf 
Asymptotic class: infinity 
* Total analysis performed in 136 ms.

