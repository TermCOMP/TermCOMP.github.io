WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_xdr3dfcoord_10/12,eval_xdr3dfcoord_11/13,eval_xdr3dfcoord_bb5_in/10,eval_xdr3dfcoord_bb6_in/10,eval_xdr3dfcoord_bb7_in/12,eval_xdr3dfcoord_bb8_in/13]
1. recursive  : [eval_xdr3dfcoord_bb10_in/6,eval_xdr3dfcoord_bb9_in/6]
2. recursive  : [eval_xdr3dfcoord_2/4,eval_xdr3dfcoord_3/5,eval_xdr3dfcoord_bb1_in/4,eval_xdr3dfcoord_bb2_in/4,eval_xdr3dfcoord_bb3_in/4,eval_xdr3dfcoord_bb4_in/5,eval_xdr3dfcoord_bb5_in_loop_cont/10,eval_xdr3dfcoord_bb9_in_loop_cont/5]
3. non_recursive  : [eval_xdr3dfcoord_stop/1]
4. non_recursive  : [eval_xdr3dfcoord_bb11_in/1]
5. non_recursive  : [eval_xdr3dfcoord_bb1_in_loop_cont/2]
6. non_recursive  : [eval_xdr3dfcoord_bb0_in/3]
7. non_recursive  : [eval_xdr3dfcoord_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_xdr3dfcoord_bb5_in/10
1. SCC is partially evaluated into eval_xdr3dfcoord_bb9_in/6
2. SCC is partially evaluated into eval_xdr3dfcoord_bb1_in/4
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_xdr3dfcoord_bb0_in/3
7. SCC is partially evaluated into eval_xdr3dfcoord_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_xdr3dfcoord_bb5_in/10 
* CE 14 is refined into CE [17] 
* CE 13 is refined into CE [18] 
* CE 9 is refined into CE [19] 
* CE 10 is discarded (unfeasible) 
* CE 7 is refined into CE [20] 
* CE 11 is refined into CE [21] 
* CE 8 is discarded (unfeasible) 
* CE 12 is discarded (unfeasible) 


### Cost equations --> "Loop" of eval_xdr3dfcoord_bb5_in/10 
* CEs [19] --> Loop 16 
* CEs [20] --> Loop 17 
* CEs [21] --> Loop 18 
* CEs [17] --> Loop 19 
* CEs [18] --> Loop 20 

### Ranking functions of CR eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F) 
* RF of phase [16]: [V_limit-V_run_0,V_size-V_i_1-1]

#### Partial ranking functions of CR eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    V_limit-V_run_0
    V_size-V_i_1-1


### Specialization of cost equations eval_xdr3dfcoord_bb9_in/6 
* CE 16 is refined into CE [22] 
* CE 15 is refined into CE [23] 


### Cost equations --> "Loop" of eval_xdr3dfcoord_bb9_in/6 
* CEs [23] --> Loop 21 
* CEs [22] --> Loop 22 

### Ranking functions of CR eval_xdr3dfcoord_bb9_in(V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_k_0,B) 
* RF of phase [21]: [V_run_0/3-V_k_0/3]

#### Partial ranking functions of CR eval_xdr3dfcoord_bb9_in(V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_k_0,B) 
* Partial RF of phase [21]:
  - RF of loop [21:1]:
    V_run_0/3-V_k_0/3


### Specialization of cost equations eval_xdr3dfcoord_bb1_in/4 
* CE 6 is refined into CE [24] 
* CE 3 is refined into CE [25,26,27,28,29,30,31,32,33,34] 
* CE 4 is refined into CE [35,36] 
* CE 5 is refined into CE [37,38] 


### Cost equations --> "Loop" of eval_xdr3dfcoord_bb1_in/4 
* CEs [32] --> Loop 23 
* CEs [29] --> Loop 24 
* CEs [33] --> Loop 25 
* CEs [35] --> Loop 26 
* CEs [34,36] --> Loop 27 
* CEs [30] --> Loop 28 
* CEs [31] --> Loop 29 
* CEs [28] --> Loop 30 
* CEs [27] --> Loop 31 
* CEs [38] --> Loop 32 
* CEs [37] --> Loop 33 
* CEs [26] --> Loop 34 
* CEs [25] --> Loop 35 
* CEs [24] --> Loop 36 

### Ranking functions of CR eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) 
* RF of phase [23,24,25,26,27,28,34]: [V_size-V_i_0-1]

#### Partial ranking functions of CR eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B) 
* Partial RF of phase [23,24,25,26,27,28,34]:
  - RF of loop [23:1,24:1]:
    V_size/3-V_i_0/3-1
  - RF of loop [24:1]:
    V_size/3-V_limit/3-V_i_0/3-1/3
  - RF of loop [25:1]:
    V_size/2-V_limit/2-V_i_0/2-1/2
  - RF of loop [25:1,28:1,34:1]:
    V_size/2-V_i_0/2-1
  - RF of loop [26:1,27:1]:
    V_size-V_i_0-1


### Specialization of cost equations eval_xdr3dfcoord_bb0_in/3 
* CE 2 is refined into CE [39,40,41,42,43,44,45,46,47,48,49,50,51] 


### Cost equations --> "Loop" of eval_xdr3dfcoord_bb0_in/3 
* CEs [48] --> Loop 37 
* CEs [47] --> Loop 38 
* CEs [51] --> Loop 39 
* CEs [46] --> Loop 40 
* CEs [50] --> Loop 41 
* CEs [45] --> Loop 42 
* CEs [49] --> Loop 43 
* CEs [44] --> Loop 44 
* CEs [40] --> Loop 45 
* CEs [41] --> Loop 46 
* CEs [39] --> Loop 47 
* CEs [42] --> Loop 48 
* CEs [43] --> Loop 49 

### Ranking functions of CR eval_xdr3dfcoord_bb0_in(V_size,V_limit,B) 

#### Partial ranking functions of CR eval_xdr3dfcoord_bb0_in(V_size,V_limit,B) 


### Specialization of cost equations eval_xdr3dfcoord_start/3 
* CE 1 is refined into CE [52,53,54,55,56,57,58,59,60,61,62,63,64] 


### Cost equations --> "Loop" of eval_xdr3dfcoord_start/3 
* CEs [64] --> Loop 50 
* CEs [63] --> Loop 51 
* CEs [62] --> Loop 52 
* CEs [61] --> Loop 53 
* CEs [60] --> Loop 54 
* CEs [59] --> Loop 55 
* CEs [58] --> Loop 56 
* CEs [57] --> Loop 57 
* CEs [56] --> Loop 58 
* CEs [55] --> Loop 59 
* CEs [54] --> Loop 60 
* CEs [53] --> Loop 61 
* CEs [52] --> Loop 62 

### Ranking functions of CR eval_xdr3dfcoord_start(V_size,V_limit,B) 

#### Partial ranking functions of CR eval_xdr3dfcoord_start(V_size,V_limit,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_xdr3dfcoord_bb5_in(V_size,V_limit,V_run_0,V_is_small_2,V_i_1,B,C,D,E,F):
* Chain [[16],19]: 1*it(16)+0
  Such that:it(16) =< V_limit-V_run_0

  with precondition: [V_is_small_2=1,B=3,D=1,F=0,V_limit=C,V_i_1+V_limit=V_run_0+E,V_run_0>=0,V_limit>=V_run_0+1,V_run_0+V_size>=V_i_1+V_limit+1] 

* Chain [[16],18,20]: 1*it(16)+1
  Such that:it(16) =< -V_run_0+C

  with precondition: [V_is_small_2=1,B=3,D=0,F=0,V_size=E,V_run_0+V_size=V_i_1+C,V_run_0>=0,V_size>=V_i_1+2,V_i_1+V_limit>=V_run_0+V_size] 

* Chain [[16],18,19]: 1*it(16)+1
  Such that:it(16) =< V_limit-V_run_0

  with precondition: [V_is_small_2=1,B=3,D=0,F=0,V_limit=C,V_size=E,V_run_0+V_size=V_i_1+V_limit,V_size>=V_i_1+2,V_i_1+V_limit>=V_size] 

* Chain [[16],17,20]: 1*it(16)+1
  Such that:it(16) =< -V_run_0+C

  with precondition: [V_is_small_2=1,B=3,D=0,F=0,V_i_1+C=V_run_0+E,V_run_0>=0,C>=V_run_0+2,V_limit>=C,V_run_0+V_size>=V_i_1+C+1] 

* Chain [[16],17,19]: 1*it(16)+1
  Such that:it(16) =< V_limit-V_run_0

  with precondition: [V_is_small_2=1,B=3,D=0,F=0,V_limit=C,V_i_1+V_limit=V_run_0+E,V_run_0>=0,V_limit>=V_run_0+2,V_run_0+V_size>=V_i_1+V_limit+1] 

* Chain [20]: 0
  with precondition: [V_is_small_2=0,B=3,D=0,F=0,V_run_0=C,V_i_1=E,V_run_0>=0,V_size>=V_i_1] 

* Chain [19]: 0
  with precondition: [B=3,F=0,V_run_0=C,V_is_small_2=D,V_i_1=E,1>=V_is_small_2,V_run_0>=0,V_run_0>=V_limit,V_size>=V_i_1+V_is_small_2] 

* Chain [18,20]: 1
  with precondition: [V_is_small_2=1,B=3,D=0,F=0,V_size=V_i_1+1,V_run_0+1=C,V_size=E,V_run_0>=0,V_limit>=V_run_0+1] 

* Chain [18,19]: 1
  with precondition: [V_is_small_2=1,B=3,D=0,F=0,V_limit=V_run_0+1,V_size=V_i_1+1,V_limit=C,V_size=E,V_limit>=1] 

* Chain [17,20]: 1
  with precondition: [V_is_small_2=1,B=3,D=0,F=0,V_run_0+1=C,V_i_1+1=E,V_run_0>=0,V_limit>=V_run_0+1,V_size>=V_i_1+2] 

* Chain [17,19]: 1
  with precondition: [V_is_small_2=1,B=3,D=0,F=0,V_limit=V_run_0+1,E=V_i_1+1,V_limit=C,V_limit>=1,V_size>=E+1] 


#### Cost of chains of eval_xdr3dfcoord_bb9_in(V_i_0,V_is_small_1,V_run_0,V_is_small_2,V_k_0,B):
* Chain [[21],22]: 1*it(21)+0
  Such that:it(21) =< V_run_0/3-V_k_0/3

  with precondition: [B=2,1>=V_is_small_1,V_is_small_1>=0,V_run_0>=V_k_0+1] 

* Chain [22]: 0
  with precondition: [B=2,1>=V_is_small_1,V_is_small_1>=0,V_k_0>=V_run_0] 


#### Cost of chains of eval_xdr3dfcoord_bb1_in(V_size,V_limit,V_i_0,B):
* Chain [[23,24,25,26,27,28,34],35,36]: 4*it(23)+5*it(25)+5*it(26)+1*s(1)+2*s(19)+1*s(23)+2*s(24)+2
  Such that:s(1) =< 1/3
aux(16) =< V_size-V_i_0
aux(17) =< V_size/2-V_i_0/2
aux(18) =< V_size/3-V_i_0/3
aux(4) =< aux(16)
it(23) =< aux(16)
it(25) =< aux(16)
it(26) =< aux(16)
it(25) =< aux(17)
s(24) =< aux(17)
aux(4) =< aux(17)
it(23) =< aux(18)
s(24) =< aux(18)
s(23) =< aux(18)
s(24) =< aux(4)*(1/3)
s(23) =< aux(16)*(1/3)
s(19) =< aux(16)*(1/3)

  with precondition: [V_limit=1,B=4,V_i_0>=0,V_size>=V_i_0+3] 

* Chain [[23,24,25,26,27,28,34],33,36]: 2*it(23)+2*it(24)+1*it(25)+5*it(26)+4*it(28)+2*s(19)+1*s(23)+1*s(24)+1*s(25)+1
  Such that:aux(8) =< V_size/2-V_limit/2-V_i_0/2
aux(12) =< V_size/3-V_limit/3-V_i_0/3
aux(19) =< V_size-V_i_0
aux(20) =< V_size/2-V_i_0/2
aux(21) =< V_size/3-V_i_0/3
aux(4) =< aux(19)
it(23) =< aux(19)
it(24) =< aux(19)
it(25) =< aux(19)
it(26) =< aux(19)
it(28) =< aux(19)
it(25) =< aux(8)
s(25) =< aux(8)
it(25) =< aux(20)
it(28) =< aux(20)
aux(4) =< aux(20)
s(24) =< aux(20)
s(25) =< aux(20)
it(24) =< aux(12)
s(25) =< aux(12)
it(24) =< aux(21)
s(23) =< aux(21)
s(24) =< aux(21)
s(25) =< aux(21)
it(23) =< aux(21)
s(25) =< aux(4)*(1/3)
s(24) =< aux(4)*(1/3)
s(23) =< aux(19)*(1/3)
s(19) =< aux(19)*(1/3)

  with precondition: [B=4,V_i_0>=0,V_size>=V_i_0+2] 

* Chain [[23,24,25,26,27,28,34],32,36]: 2*it(23)+2*it(24)+1*it(25)+5*it(26)+4*it(28)+2*s(19)+1*s(23)+1*s(24)+1*s(25)+1
  Such that:aux(8) =< V_size/2-V_limit/2-V_i_0/2
aux(12) =< V_size/3-V_limit/3-V_i_0/3
aux(22) =< V_size-V_i_0
aux(23) =< V_size/2-V_i_0/2
aux(24) =< V_size/3-V_i_0/3
aux(4) =< aux(22)
it(23) =< aux(22)
it(24) =< aux(22)
it(25) =< aux(22)
it(26) =< aux(22)
it(28) =< aux(22)
it(25) =< aux(8)
s(25) =< aux(8)
it(25) =< aux(23)
it(28) =< aux(23)
aux(4) =< aux(23)
s(24) =< aux(23)
s(25) =< aux(23)
it(24) =< aux(12)
s(25) =< aux(12)
it(24) =< aux(24)
s(23) =< aux(24)
s(24) =< aux(24)
s(25) =< aux(24)
it(23) =< aux(24)
s(25) =< aux(4)*(1/3)
s(24) =< aux(4)*(1/3)
s(23) =< aux(22)*(1/3)
s(19) =< aux(22)*(1/3)

  with precondition: [B=4,0>=V_limit,V_i_0>=0,V_size>=V_i_0+2] 

* Chain [[23,24,25,26,27,28,34],31,36]: 2*it(23)+2*it(24)+1*it(25)+5*it(26)+4*it(28)+2*s(19)+1*s(23)+1*s(24)+1*s(25)+1*s(26)+2
  Such that:s(26) =< 1/3
aux(8) =< V_size/2-V_limit/2-V_i_0/2
aux(12) =< V_size/3-V_limit/3-V_i_0/3
aux(25) =< V_size-V_i_0
aux(26) =< V_size/2-V_i_0/2
aux(27) =< V_size/3-V_i_0/3
aux(4) =< aux(25)
it(23) =< aux(25)
it(24) =< aux(25)
it(25) =< aux(25)
it(26) =< aux(25)
it(28) =< aux(25)
it(25) =< aux(8)
s(25) =< aux(8)
it(25) =< aux(26)
it(28) =< aux(26)
aux(4) =< aux(26)
s(24) =< aux(26)
s(25) =< aux(26)
it(24) =< aux(12)
s(25) =< aux(12)
it(24) =< aux(27)
s(23) =< aux(27)
s(24) =< aux(27)
s(25) =< aux(27)
it(23) =< aux(27)
s(25) =< aux(4)*(1/3)
s(24) =< aux(4)*(1/3)
s(23) =< aux(25)*(1/3)
s(19) =< aux(25)*(1/3)

  with precondition: [B=4,V_limit>=1,V_i_0>=0,V_size>=V_i_0+3] 

* Chain [[23,24,25,26,27,28,34],30,36]: 4*it(23)+5*it(25)+5*it(26)+2*s(19)+1*s(23)+1*s(24)+1*s(25)+1*s(27)+1*s(28)+2
  Such that:aux(7) =< V_size-V_limit-V_i_0
aux(6) =< V_size-V_i_0
aux(10) =< V_size/2-V_i_0/2
aux(14) =< V_size/3-V_i_0/3
s(27) =< V_limit
s(28) =< V_limit/3
aux(28) =< V_size/2-V_limit/2-V_i_0/2
aux(29) =< V_size/3-V_limit/3-V_i_0/3
aux(1) =< aux(6)
aux(4) =< aux(6)
it(23) =< aux(6)
it(25) =< aux(6)
it(26) =< aux(6)
aux(1) =< aux(7)
aux(4) =< aux(7)
it(23) =< aux(7)
it(25) =< aux(7)
it(26) =< aux(7)
it(25) =< aux(28)
s(25) =< aux(28)
aux(4) =< aux(10)
it(25) =< aux(10)
s(24) =< aux(10)
s(25) =< aux(10)
aux(4) =< aux(28)
it(23) =< aux(29)
s(25) =< aux(29)
s(23) =< aux(29)
s(24) =< aux(29)
it(23) =< aux(14)
s(25) =< aux(4)*(1/3)
s(24) =< aux(4)*(1/3)
s(23) =< aux(1)*(1/3)
s(19) =< aux(1)*(1/3)

  with precondition: [B=4,V_limit>=2,V_i_0>=0,V_size>=V_i_0+V_limit+2] 

* Chain [[23,24,25,26,27,28,34],29,36]: 2*it(23)+2*it(24)+1*it(25)+6*it(26)+4*it(28)+2*s(19)+1*s(23)+1*s(24)+1*s(25)+1*s(30)+2
  Such that:aux(8) =< V_size/2-V_limit/2-V_i_0/2
aux(10) =< V_size/2-V_i_0/2
aux(12) =< V_size/3-V_limit/3-V_i_0/3
aux(30) =< V_size-V_i_0
aux(31) =< V_size/3-V_i_0/3
aux(13) =< aux(30)
it(26) =< aux(30)
s(30) =< aux(30)
aux(13) =< aux(31)
s(30) =< aux(31)
aux(4) =< aux(30)
it(23) =< aux(30)
it(24) =< aux(30)
it(25) =< aux(30)
it(28) =< aux(30)
it(25) =< aux(8)
s(25) =< aux(8)
aux(4) =< aux(10)
it(25) =< aux(10)
it(28) =< aux(10)
s(24) =< aux(10)
s(25) =< aux(10)
it(24) =< aux(12)
s(25) =< aux(12)
it(24) =< aux(13)
s(23) =< aux(13)
s(24) =< aux(13)
s(25) =< aux(13)
it(23) =< aux(31)
it(24) =< aux(31)
it(23) =< aux(13)
s(25) =< aux(4)*(1/3)
s(24) =< aux(4)*(1/3)
s(23) =< aux(30)*(1/3)
s(19) =< aux(30)*(1/3)

  with precondition: [B=4,V_limit>=2,V_i_0>=0,V_size>=V_i_0+4] 

* Chain [36]: 0
  with precondition: [B=4,V_i_0>=0,V_i_0>=V_size] 

* Chain [35,36]: 1*s(1)+2
  Such that:s(1) =< 1/3

  with precondition: [V_limit=1,B=4,V_i_0+2=V_size,V_i_0>=0] 

* Chain [33,36]: 1
  with precondition: [B=4,V_i_0+1=V_size,V_i_0>=0] 

* Chain [32,36]: 1
  with precondition: [B=4,V_i_0+1=V_size,0>=V_limit,V_i_0>=0] 

* Chain [31,36]: 1*s(26)+2
  Such that:s(26) =< 1/3

  with precondition: [B=4,V_i_0+2=V_size,V_limit>=1,V_i_0>=0] 

* Chain [30,36]: 1*s(27)+1*s(28)+2
  Such that:s(27) =< V_limit
s(28) =< V_limit/3

  with precondition: [B=4,V_i_0+V_limit+1=V_size,V_limit>=2,V_i_0>=0] 

* Chain [29,36]: 1*s(29)+1*s(30)+2
  Such that:s(29) =< V_size-V_i_0
s(30) =< V_size/3-V_i_0/3

  with precondition: [B=4,V_i_0>=0,V_size>=V_i_0+3,V_i_0+V_limit+1>=V_size] 


#### Cost of chains of eval_xdr3dfcoord_bb0_in(V_size,V_limit,B):
* Chain [49]: 1
  with precondition: [V_size=1] 

* Chain [48]: 1
  with precondition: [V_size=1,0>=V_limit] 

* Chain [47]: 1*s(31)+2
  Such that:s(31) =< 1/3

  with precondition: [V_size=2,V_limit=1] 

* Chain [46]: 1*s(32)+2
  Such that:s(32) =< 1/3

  with precondition: [V_size=2,V_limit>=1] 

* Chain [45]: 1*s(33)+4*s(38)+5*s(39)+5*s(40)+2*s(41)+1*s(42)+2*s(43)+2
  Such that:s(33) =< 1/3
s(34) =< V_size
s(35) =< V_size/2
s(36) =< V_size/3
s(37) =< s(34)
s(38) =< s(34)
s(39) =< s(34)
s(40) =< s(34)
s(39) =< s(35)
s(41) =< s(35)
s(37) =< s(35)
s(38) =< s(36)
s(41) =< s(36)
s(42) =< s(36)
s(41) =< s(37)*(1/3)
s(42) =< s(34)*(1/3)
s(43) =< s(34)*(1/3)

  with precondition: [V_limit=1,V_size>=3] 

* Chain [44]: 1*s(44)+1*s(45)+2
  Such that:s(44) =< V_limit
s(45) =< V_limit/3

  with precondition: [V_size=V_limit+1,V_size>=3] 

* Chain [43]: 0
  with precondition: [0>=V_size] 

* Chain [42]: 2*s(52)+2*s(53)+1*s(54)+5*s(55)+4*s(56)+1*s(57)+1*s(58)+1*s(59)+2*s(60)+1
  Such that:s(48) =< V_size
s(49) =< V_size/2
s(46) =< V_size/2-V_limit/2
s(50) =< V_size/3
s(47) =< V_size/3-V_limit/3
s(51) =< s(48)
s(52) =< s(48)
s(53) =< s(48)
s(54) =< s(48)
s(55) =< s(48)
s(56) =< s(48)
s(54) =< s(46)
s(57) =< s(46)
s(54) =< s(49)
s(56) =< s(49)
s(51) =< s(49)
s(58) =< s(49)
s(57) =< s(49)
s(53) =< s(47)
s(57) =< s(47)
s(53) =< s(50)
s(59) =< s(50)
s(58) =< s(50)
s(57) =< s(50)
s(52) =< s(50)
s(57) =< s(51)*(1/3)
s(58) =< s(51)*(1/3)
s(59) =< s(48)*(1/3)
s(60) =< s(48)*(1/3)

  with precondition: [0>=V_limit,V_size>=2] 

* Chain [41]: 2*s(67)+2*s(68)+1*s(69)+5*s(70)+4*s(71)+1*s(72)+1*s(73)+1*s(74)+2*s(75)+1
  Such that:s(63) =< V_size
s(64) =< V_size/2
s(61) =< V_size/2-V_limit/2
s(65) =< V_size/3
s(62) =< V_size/3-V_limit/3
s(66) =< s(63)
s(67) =< s(63)
s(68) =< s(63)
s(69) =< s(63)
s(70) =< s(63)
s(71) =< s(63)
s(69) =< s(61)
s(72) =< s(61)
s(69) =< s(64)
s(71) =< s(64)
s(66) =< s(64)
s(73) =< s(64)
s(72) =< s(64)
s(68) =< s(62)
s(72) =< s(62)
s(68) =< s(65)
s(74) =< s(65)
s(73) =< s(65)
s(72) =< s(65)
s(67) =< s(65)
s(72) =< s(66)*(1/3)
s(73) =< s(66)*(1/3)
s(74) =< s(63)*(1/3)
s(75) =< s(63)*(1/3)

  with precondition: [V_size>=2] 

* Chain [40]: 1*s(76)+2*s(83)+2*s(84)+1*s(85)+5*s(86)+4*s(87)+1*s(88)+1*s(89)+1*s(90)+2*s(91)+2
  Such that:s(76) =< 1/3
s(79) =< V_size
s(80) =< V_size/2
s(77) =< V_size/2-V_limit/2
s(81) =< V_size/3
s(78) =< V_size/3-V_limit/3
s(82) =< s(79)
s(83) =< s(79)
s(84) =< s(79)
s(85) =< s(79)
s(86) =< s(79)
s(87) =< s(79)
s(85) =< s(77)
s(88) =< s(77)
s(85) =< s(80)
s(87) =< s(80)
s(82) =< s(80)
s(89) =< s(80)
s(88) =< s(80)
s(84) =< s(78)
s(88) =< s(78)
s(84) =< s(81)
s(90) =< s(81)
s(89) =< s(81)
s(88) =< s(81)
s(83) =< s(81)
s(88) =< s(82)*(1/3)
s(89) =< s(82)*(1/3)
s(90) =< s(79)*(1/3)
s(91) =< s(79)*(1/3)

  with precondition: [V_size>=3,V_limit>=1] 

* Chain [39]: 1*s(92)+1*s(93)+2
  Such that:s(92) =< V_size
s(93) =< V_size/3

  with precondition: [V_size>=3,V_limit+1>=V_size] 

* Chain [38]: 6*s(100)+1*s(101)+2*s(103)+2*s(104)+1*s(105)+4*s(106)+1*s(107)+1*s(108)+1*s(109)+2*s(110)+2
  Such that:s(97) =< V_size
s(95) =< V_size/2
s(94) =< V_size/2-V_limit/2
s(98) =< V_size/3
s(96) =< V_size/3-V_limit/3
s(99) =< s(97)
s(100) =< s(97)
s(101) =< s(97)
s(99) =< s(98)
s(101) =< s(98)
s(102) =< s(97)
s(103) =< s(97)
s(104) =< s(97)
s(105) =< s(97)
s(106) =< s(97)
s(105) =< s(94)
s(107) =< s(94)
s(102) =< s(95)
s(105) =< s(95)
s(106) =< s(95)
s(108) =< s(95)
s(107) =< s(95)
s(104) =< s(96)
s(107) =< s(96)
s(104) =< s(99)
s(109) =< s(99)
s(108) =< s(99)
s(107) =< s(99)
s(103) =< s(98)
s(104) =< s(98)
s(103) =< s(99)
s(107) =< s(102)*(1/3)
s(108) =< s(102)*(1/3)
s(109) =< s(97)*(1/3)
s(110) =< s(97)*(1/3)

  with precondition: [V_size>=4,V_limit>=2] 

* Chain [37]: 1*s(115)+1*s(116)+4*s(121)+5*s(122)+5*s(123)+1*s(124)+1*s(125)+1*s(126)+2*s(127)+2
  Such that:s(112) =< V_size
s(111) =< V_size-V_limit
s(113) =< V_size/2
s(117) =< V_size/2-V_limit/2
s(114) =< V_size/3
s(118) =< V_size/3-V_limit/3
s(115) =< V_limit
s(116) =< V_limit/3
s(119) =< s(112)
s(120) =< s(112)
s(121) =< s(112)
s(122) =< s(112)
s(123) =< s(112)
s(119) =< s(111)
s(120) =< s(111)
s(121) =< s(111)
s(122) =< s(111)
s(123) =< s(111)
s(122) =< s(117)
s(124) =< s(117)
s(120) =< s(113)
s(122) =< s(113)
s(125) =< s(113)
s(124) =< s(113)
s(120) =< s(117)
s(121) =< s(118)
s(124) =< s(118)
s(126) =< s(118)
s(125) =< s(118)
s(121) =< s(114)
s(124) =< s(120)*(1/3)
s(125) =< s(120)*(1/3)
s(126) =< s(119)*(1/3)
s(127) =< s(119)*(1/3)

  with precondition: [V_limit>=2,V_size>=V_limit+2] 


#### Cost of chains of eval_xdr3dfcoord_start(V_size,V_limit,B):
* Chain [62]: 1
  with precondition: [V_size=1] 

* Chain [61]: 1
  with precondition: [V_size=1,0>=V_limit] 

* Chain [60]: 1*s(128)+2
  Such that:s(128) =< 1/3

  with precondition: [V_size=2,V_limit=1] 

* Chain [59]: 1*s(129)+2
  Such that:s(129) =< 1/3

  with precondition: [V_size=2,V_limit>=1] 

* Chain [58]: 1*s(130)+4*s(135)+5*s(136)+5*s(137)+2*s(138)+1*s(139)+2*s(140)+2
  Such that:s(130) =< 1/3
s(131) =< V_size
s(132) =< V_size/2
s(133) =< V_size/3
s(134) =< s(131)
s(135) =< s(131)
s(136) =< s(131)
s(137) =< s(131)
s(136) =< s(132)
s(138) =< s(132)
s(134) =< s(132)
s(135) =< s(133)
s(138) =< s(133)
s(139) =< s(133)
s(138) =< s(134)*(1/3)
s(139) =< s(131)*(1/3)
s(140) =< s(131)*(1/3)

  with precondition: [V_limit=1,V_size>=3] 

* Chain [57]: 1*s(141)+1*s(142)+2
  Such that:s(141) =< V_limit
s(142) =< V_limit/3

  with precondition: [V_size=V_limit+1,V_size>=3] 

* Chain [56]: 0
  with precondition: [0>=V_size] 

* Chain [55]: 2*s(149)+2*s(150)+1*s(151)+5*s(152)+4*s(153)+1*s(154)+1*s(155)+1*s(156)+2*s(157)+1
  Such that:s(143) =< V_size
s(144) =< V_size/2
s(145) =< V_size/2-V_limit/2
s(146) =< V_size/3
s(147) =< V_size/3-V_limit/3
s(148) =< s(143)
s(149) =< s(143)
s(150) =< s(143)
s(151) =< s(143)
s(152) =< s(143)
s(153) =< s(143)
s(151) =< s(145)
s(154) =< s(145)
s(151) =< s(144)
s(153) =< s(144)
s(148) =< s(144)
s(155) =< s(144)
s(154) =< s(144)
s(150) =< s(147)
s(154) =< s(147)
s(150) =< s(146)
s(156) =< s(146)
s(155) =< s(146)
s(154) =< s(146)
s(149) =< s(146)
s(154) =< s(148)*(1/3)
s(155) =< s(148)*(1/3)
s(156) =< s(143)*(1/3)
s(157) =< s(143)*(1/3)

  with precondition: [0>=V_limit,V_size>=2] 

* Chain [54]: 2*s(164)+2*s(165)+1*s(166)+5*s(167)+4*s(168)+1*s(169)+1*s(170)+1*s(171)+2*s(172)+1
  Such that:s(158) =< V_size
s(159) =< V_size/2
s(160) =< V_size/2-V_limit/2
s(161) =< V_size/3
s(162) =< V_size/3-V_limit/3
s(163) =< s(158)
s(164) =< s(158)
s(165) =< s(158)
s(166) =< s(158)
s(167) =< s(158)
s(168) =< s(158)
s(166) =< s(160)
s(169) =< s(160)
s(166) =< s(159)
s(168) =< s(159)
s(163) =< s(159)
s(170) =< s(159)
s(169) =< s(159)
s(165) =< s(162)
s(169) =< s(162)
s(165) =< s(161)
s(171) =< s(161)
s(170) =< s(161)
s(169) =< s(161)
s(164) =< s(161)
s(169) =< s(163)*(1/3)
s(170) =< s(163)*(1/3)
s(171) =< s(158)*(1/3)
s(172) =< s(158)*(1/3)

  with precondition: [V_size>=2] 

* Chain [53]: 1*s(173)+2*s(180)+2*s(181)+1*s(182)+5*s(183)+4*s(184)+1*s(185)+1*s(186)+1*s(187)+2*s(188)+2
  Such that:s(173) =< 1/3
s(174) =< V_size
s(175) =< V_size/2
s(176) =< V_size/2-V_limit/2
s(177) =< V_size/3
s(178) =< V_size/3-V_limit/3
s(179) =< s(174)
s(180) =< s(174)
s(181) =< s(174)
s(182) =< s(174)
s(183) =< s(174)
s(184) =< s(174)
s(182) =< s(176)
s(185) =< s(176)
s(182) =< s(175)
s(184) =< s(175)
s(179) =< s(175)
s(186) =< s(175)
s(185) =< s(175)
s(181) =< s(178)
s(185) =< s(178)
s(181) =< s(177)
s(187) =< s(177)
s(186) =< s(177)
s(185) =< s(177)
s(180) =< s(177)
s(185) =< s(179)*(1/3)
s(186) =< s(179)*(1/3)
s(187) =< s(174)*(1/3)
s(188) =< s(174)*(1/3)

  with precondition: [V_size>=3,V_limit>=1] 

* Chain [52]: 1*s(189)+1*s(190)+2
  Such that:s(189) =< V_size
s(190) =< V_size/3

  with precondition: [V_size>=3,V_limit+1>=V_size] 

* Chain [51]: 6*s(197)+1*s(198)+2*s(200)+2*s(201)+1*s(202)+4*s(203)+1*s(204)+1*s(205)+1*s(206)+2*s(207)+2
  Such that:s(191) =< V_size
s(192) =< V_size/2
s(193) =< V_size/2-V_limit/2
s(194) =< V_size/3
s(195) =< V_size/3-V_limit/3
s(196) =< s(191)
s(197) =< s(191)
s(198) =< s(191)
s(196) =< s(194)
s(198) =< s(194)
s(199) =< s(191)
s(200) =< s(191)
s(201) =< s(191)
s(202) =< s(191)
s(203) =< s(191)
s(202) =< s(193)
s(204) =< s(193)
s(199) =< s(192)
s(202) =< s(192)
s(203) =< s(192)
s(205) =< s(192)
s(204) =< s(192)
s(201) =< s(195)
s(204) =< s(195)
s(201) =< s(196)
s(206) =< s(196)
s(205) =< s(196)
s(204) =< s(196)
s(200) =< s(194)
s(201) =< s(194)
s(200) =< s(196)
s(204) =< s(199)*(1/3)
s(205) =< s(199)*(1/3)
s(206) =< s(191)*(1/3)
s(207) =< s(191)*(1/3)

  with precondition: [V_size>=4,V_limit>=2] 

* Chain [50]: 1*s(214)+1*s(215)+4*s(218)+5*s(219)+5*s(220)+1*s(221)+1*s(222)+1*s(223)+2*s(224)+2
  Such that:s(208) =< V_size
s(209) =< V_size-V_limit
s(210) =< V_size/2
s(211) =< V_size/2-V_limit/2
s(212) =< V_size/3
s(213) =< V_size/3-V_limit/3
s(214) =< V_limit
s(215) =< V_limit/3
s(216) =< s(208)
s(217) =< s(208)
s(218) =< s(208)
s(219) =< s(208)
s(220) =< s(208)
s(216) =< s(209)
s(217) =< s(209)
s(218) =< s(209)
s(219) =< s(209)
s(220) =< s(209)
s(219) =< s(211)
s(221) =< s(211)
s(217) =< s(210)
s(219) =< s(210)
s(222) =< s(210)
s(221) =< s(210)
s(217) =< s(211)
s(218) =< s(213)
s(221) =< s(213)
s(223) =< s(213)
s(222) =< s(213)
s(218) =< s(212)
s(221) =< s(217)*(1/3)
s(222) =< s(217)*(1/3)
s(223) =< s(216)*(1/3)
s(224) =< s(216)*(1/3)

  with precondition: [V_limit>=2,V_size>=V_limit+2] 


Closed-form bounds of eval_xdr3dfcoord_start(V_size,V_limit,B): 
-------------------------------------
* Chain [62] with precondition: [V_size=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [61] with precondition: [V_size=1,0>=V_limit] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [60] with precondition: [V_size=2,V_limit=1] 
    - Upper bound: 7/3 
    - Complexity: constant 
* Chain [59] with precondition: [V_size=2,V_limit>=1] 
    - Upper bound: 7/3 
    - Complexity: constant 
* Chain [58] with precondition: [V_limit=1,V_size>=3] 
    - Upper bound: 16*V_size+7/3 
    - Complexity: n 
* Chain [57] with precondition: [V_size=V_limit+1,V_size>=3] 
    - Upper bound: 4/3*V_limit+2 
    - Complexity: n 
* Chain [56] with precondition: [0>=V_size] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [55] with precondition: [0>=V_limit,V_size>=2] 
    - Upper bound: 16*V_size-V_limit/2+1 
    - Complexity: n 
* Chain [54] with precondition: [V_size>=2] 
    - Upper bound: V_size/3+(V_size/2+(44/3*V_size+1+nat(V_size/2-V_limit/2))) 
    - Complexity: n 
* Chain [53] with precondition: [V_size>=3,V_limit>=1] 
    - Upper bound: V_size/3+(V_size/2+(44/3*V_size+7/3+nat(V_size/2-V_limit/2))) 
    - Complexity: n 
* Chain [52] with precondition: [V_size>=3,V_limit+1>=V_size] 
    - Upper bound: 4/3*V_size+2 
    - Complexity: n 
* Chain [51] with precondition: [V_size>=4,V_limit>=2] 
    - Upper bound: V_size/2+(53/3*V_size+2+nat(V_size/2-V_limit/2)) 
    - Complexity: n 
* Chain [50] with precondition: [V_limit>=2,V_size>=V_limit+2] 
    - Upper bound: 16*V_size+V_limit/2+2 
    - Complexity: n 

### Maximum cost of eval_xdr3dfcoord_start(V_size,V_limit,B): max([max([7/3,nat(V_limit)+2+nat(V_limit/3)]),nat(V_size)+1+max([nat(V_size/3)+1,41/3*nat(V_size)+nat(V_size/2)+max([nat(V_size/2-V_limit/2)+1+max([max([nat(V_size)*3,nat(V_size/3-V_limit/3)+nat(V_limit)+nat(V_limit/3)]),1/3+nat(V_size/3)]),4/3+nat(V_size/2)+nat(V_size/3)])])]) 
Asymptotic class: n 
* Total analysis performed in 444 ms.

