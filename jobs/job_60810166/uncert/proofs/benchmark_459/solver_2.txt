WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_speedpldi3_bb1_in/5,eval_speedpldi3_bb2_in/5]
1. non_recursive  : [eval_speedpldi3_stop/1]
2. non_recursive  : [eval_speedpldi3_bb3_in/1]
3. non_recursive  : [eval_speedpldi3_bb1_in_loop_cont/2]
4. non_recursive  : [eval_speedpldi3_bb0_in/3]
5. non_recursive  : [eval_speedpldi3_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_speedpldi3_bb1_in/5
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_speedpldi3_bb0_in/3
5. SCC is partially evaluated into eval_speedpldi3_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_speedpldi3_bb1_in/5 
* CE 7 is refined into CE [8] 
* CE 6 is refined into CE [9] 
* CE 5 is refined into CE [10] 


### Cost equations --> "Loop" of eval_speedpldi3_bb1_in/5 
* CEs [9] --> Loop 8 
* CEs [10] --> Loop 9 
* CEs [8] --> Loop 10 

### Ranking functions of CR eval_speedpldi3_bb1_in(V_m,V_n,V_j_0,V_i_0,B) 

#### Partial ranking functions of CR eval_speedpldi3_bb1_in(V_m,V_n,V_j_0,V_i_0,B) 
* Partial RF of phase [8,9]:
  - RF of loop [8:1]:
    V_m-V_j_0 depends on loops [9:1] 
    V_n-V_j_0-1 depends on loops [9:1] 
  - RF of loop [9:1]:
    V_j_0 depends on loops [8:1] 
    -V_m+V_j_0+1 depends on loops [8:1] 
    V_n-V_i_0


### Specialization of cost equations eval_speedpldi3_bb0_in/3 
* CE 3 is refined into CE [11] 
* CE 4 is refined into CE [12] 
* CE 2 is refined into CE [13] 


### Cost equations --> "Loop" of eval_speedpldi3_bb0_in/3 
* CEs [11] --> Loop 11 
* CEs [12] --> Loop 12 
* CEs [13] --> Loop 13 

### Ranking functions of CR eval_speedpldi3_bb0_in(V_m,V_n,B) 

#### Partial ranking functions of CR eval_speedpldi3_bb0_in(V_m,V_n,B) 


### Specialization of cost equations eval_speedpldi3_start/3 
* CE 1 is refined into CE [14,15,16] 


### Cost equations --> "Loop" of eval_speedpldi3_start/3 
* CEs [16] --> Loop 14 
* CEs [15] --> Loop 15 
* CEs [14] --> Loop 16 

### Ranking functions of CR eval_speedpldi3_start(V_m,V_n,B) 

#### Partial ranking functions of CR eval_speedpldi3_start(V_m,V_n,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_speedpldi3_bb1_in(V_m,V_n,V_j_0,V_i_0,B):
* Chain [[8,9],10]: 1*it(8)+1*it(9)+0
  Such that:aux(19) =< V_n
aux(4) =< V_n-V_j_0
it(9) =< V_n-V_i_0
aux(3) =< it(9)*aux(19)
it(8) =< aux(3)+aux(4)

  with precondition: [B=2,V_m>=1,V_j_0>=0,V_i_0>=0,V_n>=V_m+1,V_n>=V_i_0+1] 


#### Cost of chains of eval_speedpldi3_bb0_in(V_m,V_n,B):
* Chain [13]: 0
  with precondition: [0>=V_m] 

* Chain [12]: 1*s(3)+1*s(5)+0
  Such that:aux(22) =< V_n
s(3) =< aux(22)
s(4) =< s(3)*aux(22)
s(5) =< s(4)+aux(22)

  with precondition: [V_m>=1,V_n>=V_m+1] 

* Chain [11]: 0
  with precondition: [V_m>=V_n] 


#### Cost of chains of eval_speedpldi3_start(V_m,V_n,B):
* Chain [16]: 0
  with precondition: [0>=V_m] 

* Chain [15]: 1*s(7)+1*s(9)+0
  Such that:s(6) =< V_n
s(7) =< s(6)
s(8) =< s(7)*s(6)
s(9) =< s(8)+s(6)

  with precondition: [V_m>=1,V_n>=V_m+1] 

* Chain [14]: 0
  with precondition: [V_m>=V_n] 


Closed-form bounds of eval_speedpldi3_start(V_m,V_n,B): 
-------------------------------------
* Chain [16] with precondition: [0>=V_m] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [15] with precondition: [V_m>=1,V_n>=V_m+1] 
    - Upper bound: 2*V_n+V_n*V_n 
    - Complexity: n^2 
* Chain [14] with precondition: [V_m>=V_n] 
    - Upper bound: 0 
    - Complexity: constant 

### Maximum cost of eval_speedpldi3_start(V_m,V_n,B): nat(V_n)*nat(V_n)+nat(V_n)*2 
Asymptotic class: n^2 
* Total analysis performed in 71 ms.

