MAYBE

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_speedFails4_bb1_in/5,eval_speedFails4_bb2_in/5]
1. non_recursive  : [eval_speedFails4_stop/1]
2. non_recursive  : [eval_speedFails4_bb3_in/1]
3. non_recursive  : [eval_speedFails4_bb1_in_loop_cont/2]
4. non_recursive  : [eval_speedFails4_bb0_in/3]
5. non_recursive  : [eval_speedFails4_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_speedFails4_bb1_in/5
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_speedFails4_bb0_in/3
5. SCC is partially evaluated into eval_speedFails4_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_speedFails4_bb1_in/5 
* CE 6 is refined into CE [7] 
* CE 5 is refined into CE [8] 
* CE 4 is refined into CE [9] 


### Cost equations --> "Loop" of eval_speedFails4_bb1_in/5 
* CEs [8] --> Loop 6 
* CEs [9] --> Loop 7 
* CEs [7] --> Loop 8 

### Ranking functions of CR eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B) 

#### Partial ranking functions of CR eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B) 


### Specialization of cost equations eval_speedFails4_bb0_in/3 
* CE 2 is refined into CE [10,11,12] 
* CE 3 is refined into CE [13,14,15] 


### Cost equations --> "Loop" of eval_speedFails4_bb0_in/3 
* CEs [12,15] --> Loop 9 
* CEs [11,14] --> Loop 10 
* CEs [10,13] --> Loop 11 

### Ranking functions of CR eval_speedFails4_bb0_in(V_x,V_n,B) 

#### Partial ranking functions of CR eval_speedFails4_bb0_in(V_x,V_n,B) 


### Specialization of cost equations eval_speedFails4_start/3 
* CE 1 is refined into CE [16,17,18] 


### Cost equations --> "Loop" of eval_speedFails4_start/3 
* CEs [18] --> Loop 12 
* CEs [17] --> Loop 13 
* CEs [16] --> Loop 14 

### Ranking functions of CR eval_speedFails4_start(V_x,V_n,B) 

#### Partial ranking functions of CR eval_speedFails4_start(V_x,V_n,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_speedFails4_bb1_in(V_n,V_0,V__,V__0,B):
* Chain [[7]]...: 1*it(7)+0
  with precondition: [1>=V__,V_n>=V__0,V__+1>=0,0>=V_0,B=2] 

* Chain [[7],8]: 1*it(7)+0
  with precondition: [V__+1=0,B=2,0>=V_0,V_n>=V__0] 

* Chain [[6]]...: 1*it(6)+0
  with precondition: [1>=V__,V_n>=V__0,V__+1>=0,V_0>=1,B=2] 

* Chain [[6],8]: 1*it(6)+0
  with precondition: [V__=1,B=2,V_0>=1,V_n>=V__0] 

* Chain [8]: 0
  with precondition: [B=2,1>=V__,V__+1>=0,V__0>=V_n+1] 


#### Cost of chains of eval_speedFails4_bb0_in(V_x,V_n,B):
* Chain [11]: 1*aux(1)+0
  with precondition: [V_n>=V_x] 

* Chain [10]: 0
  with precondition: [V_x>=V_n+1] 

* Chain [9]...: 1*aux(2)+0
  with precondition: [V_n>=V_x] 


#### Cost of chains of eval_speedFails4_start(V_x,V_n,B):
* Chain [14]: 1*s(5)+0
  with precondition: [V_n>=V_x] 

* Chain [13]: 0
  with precondition: [V_x>=V_n+1] 

* Chain [12]...: 1*s(6)+0
  with precondition: [V_n>=V_x] 


Closed-form bounds of eval_speedFails4_start(V_x,V_n,B): 
-------------------------------------
* Chain [14] with precondition: [V_n>=V_x] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [13] with precondition: [V_x>=V_n+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [12]... with precondition: [V_n>=V_x] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_speedFails4_start(V_x,V_n,B): inf 
Asymptotic class: infinity 
* Total analysis performed in 47 ms.

