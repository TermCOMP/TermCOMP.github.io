WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_jama_ex4_bb2_in/4,eval_jama_ex4_bb3_in/4]
1. recursive  : [eval_jama_ex4_bb1_in/5,eval_jama_ex4_bb2_in_loop_cont/7,eval_jama_ex4_bb4_in/6]
2. non_recursive  : [eval_jama_ex4_stop/1]
3. non_recursive  : [eval_jama_ex4_bb5_in/1]
4. non_recursive  : [eval_jama_ex4_bb1_in_loop_cont/2]
5. non_recursive  : [eval_jama_ex4_bb0_in/5]
6. non_recursive  : [eval_jama_ex4_start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_jama_ex4_bb2_in/4
1. SCC is partially evaluated into eval_jama_ex4_bb1_in/5
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_jama_ex4_bb0_in/5
6. SCC is partially evaluated into eval_jama_ex4_start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_jama_ex4_bb2_in/4 
* CE 6 is refined into CE [7] 
* CE 5 is refined into CE [8] 


### Cost equations --> "Loop" of eval_jama_ex4_bb2_in/4 
* CEs [8] --> Loop 7 
* CEs [7] --> Loop 8 

### Ranking functions of CR eval_jama_ex4_bb2_in(V_d,V_j_0,B,C) 
* RF of phase [7]: [V_d-V_j_0+1]

#### Partial ranking functions of CR eval_jama_ex4_bb2_in(V_d,V_j_0,B,C) 
* Partial RF of phase [7]:
  - RF of loop [7:1]:
    V_d-V_j_0+1


### Specialization of cost equations eval_jama_ex4_bb1_in/5 
* CE 4 is refined into CE [9] 
* CE 3 is refined into CE [10,11] 


### Cost equations --> "Loop" of eval_jama_ex4_bb1_in/5 
* CEs [11] --> Loop 9 
* CEs [10] --> Loop 10 
* CEs [9] --> Loop 11 

### Ranking functions of CR eval_jama_ex4_bb1_in(V_b,V_c,V_d,V_i_0,B) 
* RF of phase [9]: [V_b-V_i_0+1]
* RF of phase [10]: [V_b-V_i_0+1]

#### Partial ranking functions of CR eval_jama_ex4_bb1_in(V_b,V_c,V_d,V_i_0,B) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    V_b-V_i_0+1
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V_b-V_i_0+1


### Specialization of cost equations eval_jama_ex4_bb0_in/5 
* CE 2 is refined into CE [12,13,14] 


### Cost equations --> "Loop" of eval_jama_ex4_bb0_in/5 
* CEs [12] --> Loop 12 
* CEs [14] --> Loop 13 
* CEs [13] --> Loop 14 

### Ranking functions of CR eval_jama_ex4_bb0_in(V_a,V_b,V_c,V_d,B) 

#### Partial ranking functions of CR eval_jama_ex4_bb0_in(V_a,V_b,V_c,V_d,B) 


### Specialization of cost equations eval_jama_ex4_start/5 
* CE 1 is refined into CE [15,16,17] 


### Cost equations --> "Loop" of eval_jama_ex4_start/5 
* CEs [17] --> Loop 15 
* CEs [16] --> Loop 16 
* CEs [15] --> Loop 17 

### Ranking functions of CR eval_jama_ex4_start(V_a,V_b,V_c,V_d,B) 

#### Partial ranking functions of CR eval_jama_ex4_start(V_a,V_b,V_c,V_d,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_jama_ex4_bb2_in(V_d,V_j_0,B,C):
* Chain [[7],8]: 1*it(7)+0
  Such that:it(7) =< V_d-V_j_0+1

  with precondition: [B=2,V_d+1=C,V_d>=V_j_0] 

* Chain [8]: 0
  with precondition: [B=2,V_j_0=C,V_j_0>=V_d+1] 


#### Cost of chains of eval_jama_ex4_bb1_in(V_b,V_c,V_d,V_i_0,B):
* Chain [[10],11]: 1*it(10)+1*s(3)+0
  Such that:it(10) =< V_b-V_i_0+1
aux(1) =< -V_c+V_d+1
s(3) =< it(10)*aux(1)

  with precondition: [B=3,V_d>=V_c,V_b>=V_i_0] 

* Chain [[9],11]: 1*it(9)+0
  Such that:it(9) =< V_b-V_i_0+1

  with precondition: [B=3,V_c>=V_d+1,V_b>=V_i_0] 

* Chain [11]: 0
  with precondition: [B=3,V_i_0>=V_b+1] 


#### Cost of chains of eval_jama_ex4_bb0_in(V_a,V_b,V_c,V_d,B):
* Chain [14]: 1*s(4)+1*s(6)+0
  Such that:s(4) =< -V_a+V_b+1
s(5) =< -V_c+V_d+1
s(6) =< s(4)*s(5)

  with precondition: [V_b>=V_a,V_d>=V_c] 

* Chain [13]: 1*s(7)+0
  Such that:s(7) =< -V_a+V_b+1

  with precondition: [V_b>=V_a,V_c>=V_d+1] 

* Chain [12]: 0
  with precondition: [V_a>=V_b+1] 


#### Cost of chains of eval_jama_ex4_start(V_a,V_b,V_c,V_d,B):
* Chain [17]: 1*s(8)+1*s(10)+0
  Such that:s(8) =< -V_a+V_b+1
s(9) =< -V_c+V_d+1
s(10) =< s(8)*s(9)

  with precondition: [V_b>=V_a,V_d>=V_c] 

* Chain [16]: 1*s(11)+0
  Such that:s(11) =< -V_a+V_b+1

  with precondition: [V_b>=V_a,V_c>=V_d+1] 

* Chain [15]: 0
  with precondition: [V_a>=V_b+1] 


Closed-form bounds of eval_jama_ex4_start(V_a,V_b,V_c,V_d,B): 
-------------------------------------
* Chain [17] with precondition: [V_b>=V_a,V_d>=V_c] 
    - Upper bound: -V_a+V_b+1+(-V_c+V_d+1)*(-V_a+V_b+1) 
    - Complexity: n^2 
* Chain [16] with precondition: [V_b>=V_a,V_c>=V_d+1] 
    - Upper bound: -V_a+V_b+1 
    - Complexity: n 
* Chain [15] with precondition: [V_a>=V_b+1] 
    - Upper bound: 0 
    - Complexity: constant 

### Maximum cost of eval_jama_ex4_start(V_a,V_b,V_c,V_d,B): nat(-V_c+V_d+1)*nat(-V_a+V_b+1)+nat(-V_a+V_b+1) 
Asymptotic class: n^2 
* Total analysis performed in 56 ms.

