WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_sendMTFValues_2/5,eval_sendMTFValues_3/6,eval_sendMTFValues_bb3_in/5,eval_sendMTFValues_bb4_in/6,eval_sendMTFValues_bb5_in/6]
1. recursive  : [eval_sendMTFValues__critedge_in/7,eval_sendMTFValues_bb1_in/5,eval_sendMTFValues_bb2_in/5,eval_sendMTFValues_bb3_in_loop_cont/8,eval_sendMTFValues_bb6_in/7,eval_sendMTFValues_bb7_in/8]
2. non_recursive  : [eval_sendMTFValues_stop/1]
3. non_recursive  : [eval_sendMTFValues_bb8_in/1]
4. non_recursive  : [eval_sendMTFValues_bb1_in_loop_cont/2]
5. non_recursive  : [eval_sendMTFValues_bb0_in/3]
6. non_recursive  : [eval_sendMTFValues_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_sendMTFValues_bb3_in/5
1. SCC is partially evaluated into eval_sendMTFValues_bb1_in/5
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_sendMTFValues_bb0_in/3
6. SCC is partially evaluated into eval_sendMTFValues_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_sendMTFValues_bb3_in/5 
* CE 13 is refined into CE [14] 
* CE 12 is refined into CE [15] 
* CE 10 is refined into CE [16] 
* CE 11 is refined into CE [17] 


### Cost equations --> "Loop" of eval_sendMTFValues_bb3_in/5 
* CEs [17] --> Loop 14 
* CEs [14] --> Loop 15 
* CEs [15] --> Loop 16 
* CEs [16] --> Loop 17 

### Ranking functions of CR eval_sendMTFValues_bb3_in(V_alphaSize,V_ge_0,B,C,D) 
* RF of phase [14]: [V_alphaSize-V_ge_0-1]

#### Partial ranking functions of CR eval_sendMTFValues_bb3_in(V_alphaSize,V_ge_0,B,C,D) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    V_alphaSize-V_ge_0-1


### Specialization of cost equations eval_sendMTFValues_bb1_in/5 
* CE 9 is refined into CE [18] 
* CE 7 is refined into CE [19,20,21] 
* CE 8 is refined into CE [22,23,24] 
* CE 6 is discarded (unfeasible) 
* CE 3 is refined into CE [25,26,27,28,29,30] 
* CE 4 is refined into CE [31,32,33,34,35,36] 
* CE 5 is refined into CE [37,38,39,40,41,42] 


### Cost equations --> "Loop" of eval_sendMTFValues_bb1_in/5 
* CEs [19] --> Loop 18 
* CEs [22] --> Loop 19 
* CEs [25] --> Loop 20 
* CEs [23,24] --> Loop 21 
* CEs [20,21] --> Loop 22 
* CEs [32] --> Loop 23 
* CEs [31] --> Loop 24 
* CEs [33,34] --> Loop 25 
* CEs [26] --> Loop 26 
* CEs [29,30] --> Loop 27 
* CEs [35,36] --> Loop 28 
* CEs [27,28] --> Loop 29 
* CEs [38] --> Loop 30 
* CEs [37] --> Loop 31 
* CEs [39,40] --> Loop 32 
* CEs [41,42] --> Loop 33 
* CEs [18] --> Loop 34 

### Ranking functions of CR eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) 
* RF of phase [18,19,20,21,22,26,27,29]: [V_nPart_0]

#### Partial ranking functions of CR eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B) 
* Partial RF of phase [18,19,20,21,22,26,27,29]:
  - RF of loop [18:1,19:1,21:1,22:1]:
    V_nPart_0-1
  - RF of loop [18:1,22:1]:
    V_alphaSize/2-V_gs_0/2-1/2
  - RF of loop [19:1,21:1]:
    V_alphaSize-V_gs_0-1
  - RF of loop [20:1,26:1,27:1,29:1]:
    V_nPart_0
  - RF of loop [26:1,29:1]:
    V_alphaSize-V_gs_0


### Specialization of cost equations eval_sendMTFValues_bb0_in/3 
* CE 2 is refined into CE [43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63] 


### Cost equations --> "Loop" of eval_sendMTFValues_bb0_in/3 
* CEs [56] --> Loop 35 
* CEs [55] --> Loop 36 
* CEs [54] --> Loop 37 
* CEs [53,62] --> Loop 38 
* CEs [52,63] --> Loop 39 
* CEs [61] --> Loop 40 
* CEs [51] --> Loop 41 
* CEs [50] --> Loop 42 
* CEs [60] --> Loop 43 
* CEs [49] --> Loop 44 
* CEs [48] --> Loop 45 
* CEs [47] --> Loop 46 
* CEs [46] --> Loop 47 
* CEs [45,59] --> Loop 48 
* CEs [44,58] --> Loop 49 
* CEs [43,57] --> Loop 50 

### Ranking functions of CR eval_sendMTFValues_bb0_in(V_nGroups,V_alphaSize,B) 

#### Partial ranking functions of CR eval_sendMTFValues_bb0_in(V_nGroups,V_alphaSize,B) 


### Specialization of cost equations eval_sendMTFValues_start/3 
* CE 1 is refined into CE [64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79] 


### Cost equations --> "Loop" of eval_sendMTFValues_start/3 
* CEs [79] --> Loop 51 
* CEs [78] --> Loop 52 
* CEs [77] --> Loop 53 
* CEs [76] --> Loop 54 
* CEs [75] --> Loop 55 
* CEs [74] --> Loop 56 
* CEs [73] --> Loop 57 
* CEs [72] --> Loop 58 
* CEs [71] --> Loop 59 
* CEs [70] --> Loop 60 
* CEs [69] --> Loop 61 
* CEs [68] --> Loop 62 
* CEs [67] --> Loop 63 
* CEs [66] --> Loop 64 
* CEs [65] --> Loop 65 
* CEs [64] --> Loop 66 

### Ranking functions of CR eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) 

#### Partial ranking functions of CR eval_sendMTFValues_start(V_nGroups,V_alphaSize,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_sendMTFValues_bb3_in(V_alphaSize,V_ge_0,B,C,D):
* Chain [[14],17]: 1*it(14)+0
  Such that:it(14) =< -V_ge_0+C

  with precondition: [B=2,D=0,C>=V_ge_0+1,V_alphaSize>=C+1] 

* Chain [[14],16]: 1*it(14)+0
  Such that:it(14) =< V_alphaSize-V_ge_0

  with precondition: [B=2,V_alphaSize=C+1,0>=D+1,V_alphaSize>=V_ge_0+2] 

* Chain [[14],15]: 1*it(14)+0
  Such that:it(14) =< V_alphaSize-V_ge_0

  with precondition: [B=2,V_alphaSize=C+1,D>=1,V_alphaSize>=V_ge_0+2] 

* Chain [17]: 0
  with precondition: [B=2,D=0,C=V_ge_0] 

* Chain [16]: 0
  with precondition: [B=2,V_ge_0=C,0>=D+1,V_ge_0+1>=V_alphaSize] 

* Chain [15]: 0
  with precondition: [B=2,V_ge_0=C,D>=1,V_ge_0+1>=V_alphaSize] 


#### Cost of chains of eval_sendMTFValues_bb1_in(V_nGroups,V_alphaSize,V_gs_0,V_nPart_0,B):
* Chain [[18,19,20,21,22,26,27,29],34]: 1*it(18)+1*it(19)+1*it(20)+1*it(21)+1*it(22)+6*it(26)+1*it(27)+1*s(17)+1*s(18)+2*s(19)+2*s(21)+1*s(23)+0
  Such that:aux(5) =< V_alphaSize-V_gs_0
aux(6) =< V_alphaSize-V_gs_0+V_nPart_0
aux(8) =< V_alphaSize-V_gs_0+2*V_nPart_0
aux(11) =< 2*V_alphaSize-2*V_gs_0
aux(13) =< 3*V_alphaSize-3*V_gs_0
aux(15) =< V_alphaSize/2-V_gs_0/2
aux(17) =< 3/2*V_alphaSize-3/2*V_gs_0
aux(21) =< V_nPart_0
aux(4) =< aux(5)
it(19) =< aux(5)
it(21) =< aux(5)
it(22) =< aux(5)
it(26) =< aux(5)
s(17) =< aux(5)
it(21) =< aux(6)
it(22) =< aux(6)
it(26) =< aux(6)
s(18) =< aux(6)
s(22) =< aux(6)
it(22) =< aux(8)
s(20) =< aux(8)
it(21) =< aux(11)
it(22) =< aux(11)
s(18) =< aux(11)
it(22) =< aux(13)
s(20) =< aux(13)
it(18) =< aux(15)
it(22) =< aux(15)
it(26) =< aux(17)
s(22) =< aux(17)
aux(4) =< aux(21)
it(18) =< aux(21)
it(19) =< aux(21)
it(20) =< aux(21)
it(21) =< aux(21)
it(22) =< aux(21)
it(26) =< aux(21)
it(27) =< aux(21)
s(23) =< aux(4)
s(21) =< s(22)
s(19) =< s(20)

  with precondition: [B=3,V_gs_0>=0,V_nPart_0>=1,V_nGroups>=V_nPart_0] 

* Chain [[18,19,20,21,22,26,27,29],33,34]: 1*it(18)+1*it(19)+1*it(20)+1*it(21)+1*it(22)+6*it(26)+1*it(27)+1*s(17)+1*s(18)+2*s(19)+2*s(21)+1*s(23)+1
  Such that:aux(5) =< V_alphaSize-V_gs_0
aux(6) =< V_alphaSize-V_gs_0+V_nPart_0
aux(8) =< V_alphaSize-V_gs_0+2*V_nPart_0
aux(11) =< 2*V_alphaSize-2*V_gs_0
aux(13) =< 3*V_alphaSize-3*V_gs_0
aux(15) =< V_alphaSize/2-V_gs_0/2
aux(17) =< 3/2*V_alphaSize-3/2*V_gs_0
aux(22) =< V_nPart_0
aux(4) =< aux(5)
it(19) =< aux(5)
it(21) =< aux(5)
it(22) =< aux(5)
it(26) =< aux(5)
s(17) =< aux(5)
it(21) =< aux(6)
it(22) =< aux(6)
it(26) =< aux(6)
s(18) =< aux(6)
s(22) =< aux(6)
it(22) =< aux(8)
s(20) =< aux(8)
it(21) =< aux(11)
it(22) =< aux(11)
s(18) =< aux(11)
it(22) =< aux(13)
s(20) =< aux(13)
it(18) =< aux(15)
it(22) =< aux(15)
it(26) =< aux(17)
s(22) =< aux(17)
aux(4) =< aux(22)
it(18) =< aux(22)
it(19) =< aux(22)
it(20) =< aux(22)
it(21) =< aux(22)
it(22) =< aux(22)
it(26) =< aux(22)
it(27) =< aux(22)
s(23) =< aux(4)
s(21) =< s(22)
s(19) =< s(20)

  with precondition: [B=3,V_gs_0>=0,V_nPart_0>=2,V_nGroups>=V_nPart_0] 

* Chain [[18,19,20,21,22,26,27,29],32,34]: 1*it(18)+1*it(19)+1*it(20)+1*it(21)+1*it(22)+6*it(26)+1*it(27)+1*s(17)+1*s(18)+2*s(19)+2*s(21)+1*s(23)+2*s(24)+1
  Such that:aux(12) =< 2*V_alphaSize-2*V_gs_0+2
aux(24) =< V_alphaSize-V_gs_0
aux(25) =< V_alphaSize-V_gs_0+1
aux(26) =< V_alphaSize-V_gs_0+V_nPart_0
aux(27) =< V_alphaSize-V_gs_0+2*V_nPart_0
aux(28) =< 2*V_alphaSize-2*V_gs_0
aux(29) =< 3*V_alphaSize-3*V_gs_0
aux(30) =< 3*V_alphaSize-3*V_gs_0+3
aux(31) =< V_alphaSize/2-V_gs_0/2
aux(32) =< 3/2*V_alphaSize-3/2*V_gs_0
aux(33) =< V_nPart_0
aux(10) =< aux(24)
aux(10) =< aux(25)
aux(16) =< aux(25)
aux(23) =< aux(25)
aux(23) =< aux(27)
aux(12) =< aux(28)
aux(14) =< aux(29)
aux(14) =< aux(30)
aux(18) =< aux(30)
aux(16) =< aux(31)
aux(18) =< aux(32)
s(24) =< aux(23)
aux(4) =< aux(24)
it(19) =< aux(24)
it(21) =< aux(24)
it(22) =< aux(24)
it(26) =< aux(24)
s(17) =< aux(24)
it(21) =< aux(26)
it(22) =< aux(26)
it(26) =< aux(26)
s(18) =< aux(26)
s(22) =< aux(26)
it(20) =< aux(26)
it(27) =< aux(26)
it(22) =< aux(27)
s(20) =< aux(27)
it(26) =< aux(27)
it(27) =< aux(27)
aux(4) =< aux(10)
it(19) =< aux(10)
it(21) =< aux(10)
it(22) =< aux(10)
it(26) =< aux(10)
s(17) =< aux(10)
it(21) =< aux(28)
it(22) =< aux(28)
s(18) =< aux(28)
it(21) =< aux(12)
it(22) =< aux(12)
it(26) =< aux(12)
s(18) =< aux(12)
it(22) =< aux(29)
s(20) =< aux(29)
it(22) =< aux(14)
it(26) =< aux(14)
s(20) =< aux(14)
it(18) =< aux(31)
it(22) =< aux(31)
it(18) =< aux(16)
it(22) =< aux(16)
it(26) =< aux(32)
s(22) =< aux(32)
it(26) =< aux(18)
s(22) =< aux(18)
aux(4) =< aux(33)
it(18) =< aux(33)
it(19) =< aux(33)
it(20) =< aux(33)
it(21) =< aux(33)
it(22) =< aux(33)
it(26) =< aux(33)
it(27) =< aux(33)
s(23) =< aux(4)
s(21) =< s(22)
s(19) =< s(20)

  with precondition: [B=3,V_gs_0>=0,V_nPart_0>=2,V_alphaSize>=V_gs_0+1,V_nGroups>=V_nPart_0] 

* Chain [[18,19,20,21,22,26,27,29],31,34]: 1*it(18)+1*it(19)+1*it(20)+1*it(21)+1*it(22)+6*it(26)+1*it(27)+1*s(17)+1*s(18)+2*s(19)+2*s(21)+1*s(23)+1
  Such that:aux(5) =< V_alphaSize-V_gs_0
aux(6) =< V_alphaSize-V_gs_0+V_nPart_0
aux(8) =< V_alphaSize-V_gs_0+2*V_nPart_0
aux(11) =< 2*V_alphaSize-2*V_gs_0
aux(13) =< 3*V_alphaSize-3*V_gs_0
aux(15) =< V_alphaSize/2-V_gs_0/2
aux(17) =< 3/2*V_alphaSize-3/2*V_gs_0
aux(34) =< V_nPart_0
aux(4) =< aux(5)
it(19) =< aux(5)
it(21) =< aux(5)
it(22) =< aux(5)
it(26) =< aux(5)
s(17) =< aux(5)
it(21) =< aux(6)
it(22) =< aux(6)
it(26) =< aux(6)
s(18) =< aux(6)
s(22) =< aux(6)
it(22) =< aux(8)
s(20) =< aux(8)
it(21) =< aux(11)
it(22) =< aux(11)
s(18) =< aux(11)
it(22) =< aux(13)
s(20) =< aux(13)
it(18) =< aux(15)
it(22) =< aux(15)
it(26) =< aux(17)
s(22) =< aux(17)
aux(4) =< aux(34)
it(18) =< aux(34)
it(19) =< aux(34)
it(20) =< aux(34)
it(21) =< aux(34)
it(22) =< aux(34)
it(26) =< aux(34)
it(27) =< aux(34)
s(23) =< aux(4)
s(21) =< s(22)
s(19) =< s(20)

  with precondition: [B=3,V_gs_0>=0,V_nPart_0>=2,V_nGroups>=V_nPart_0] 

* Chain [[18,19,20,21,22,26,27,29],30,34]: 1*it(18)+1*it(19)+1*it(20)+1*it(21)+1*it(22)+6*it(26)+1*it(27)+1*s(17)+1*s(18)+2*s(19)+2*s(21)+1*s(23)+1*s(26)+1
  Such that:aux(35) =< V_alphaSize-V_gs_0
aux(36) =< V_alphaSize-V_gs_0+V_nPart_0
aux(37) =< V_alphaSize-V_gs_0+2*V_nPart_0
aux(38) =< 2*V_alphaSize-2*V_gs_0
aux(39) =< 3*V_alphaSize-3*V_gs_0
aux(40) =< V_alphaSize/2-V_gs_0/2
aux(41) =< 3/2*V_alphaSize-3/2*V_gs_0
aux(42) =< V_nPart_0
aux(16) =< aux(35)
s(26) =< aux(35)
s(26) =< aux(37)
aux(18) =< aux(39)
aux(16) =< aux(40)
aux(18) =< aux(41)
aux(4) =< aux(35)
it(19) =< aux(35)
it(21) =< aux(35)
it(22) =< aux(35)
it(26) =< aux(35)
s(17) =< aux(35)
it(21) =< aux(36)
it(22) =< aux(36)
it(26) =< aux(36)
s(18) =< aux(36)
s(22) =< aux(36)
it(20) =< aux(36)
it(27) =< aux(36)
it(22) =< aux(37)
s(20) =< aux(37)
it(26) =< aux(37)
it(27) =< aux(37)
it(21) =< aux(38)
it(22) =< aux(38)
s(18) =< aux(38)
it(26) =< aux(38)
it(22) =< aux(39)
s(20) =< aux(39)
it(26) =< aux(39)
it(18) =< aux(40)
it(22) =< aux(40)
it(18) =< aux(16)
it(22) =< aux(16)
it(26) =< aux(41)
s(22) =< aux(41)
it(26) =< aux(18)
s(22) =< aux(18)
aux(4) =< aux(42)
it(18) =< aux(42)
it(19) =< aux(42)
it(20) =< aux(42)
it(21) =< aux(42)
it(22) =< aux(42)
it(26) =< aux(42)
it(27) =< aux(42)
s(23) =< aux(4)
s(21) =< s(22)
s(19) =< s(20)

  with precondition: [B=3,V_gs_0>=0,V_nPart_0>=2,V_alphaSize>=V_gs_0+1,V_nGroups>=V_nPart_0] 

* Chain [34]: 0
  with precondition: [B=3,0>=V_nPart_0,V_gs_0>=0,V_nGroups>=V_nPart_0] 

* Chain [33,34]: 1
  with precondition: [V_nPart_0=1,B=3,V_nGroups>=1,V_gs_0>=0,V_gs_0>=V_alphaSize] 

* Chain [32,34]: 2*s(24)+1
  Such that:aux(23) =< V_alphaSize-V_gs_0+1
s(24) =< aux(23)

  with precondition: [V_nPart_0=1,B=3,V_nGroups>=1,V_gs_0>=0,V_alphaSize>=V_gs_0+1] 

* Chain [31,34]: 1
  with precondition: [V_nPart_0=1,B=3,V_nGroups>=1,V_gs_0>=0] 

* Chain [30,34]: 1*s(26)+1
  Such that:s(26) =< V_alphaSize-V_gs_0

  with precondition: [V_nPart_0=1,B=3,V_nGroups>=1,V_gs_0>=0,V_alphaSize>=V_gs_0+1] 

* Chain [28,[18,19,20,21,22,26,27,29],34]: 2*it(20)+1
  Such that:aux(44) =< V_nPart_0
it(20) =< aux(44)

  with precondition: [V_gs_0=0,B=3,V_nGroups=V_nPart_0,0>=V_alphaSize,V_nGroups>=2] 

* Chain [28,[18,19,20,21,22,26,27,29],33,34]: 2*it(20)+2
  Such that:aux(46) =< V_nPart_0
it(20) =< aux(46)

  with precondition: [V_gs_0=0,B=3,V_nGroups=V_nPart_0,0>=V_alphaSize,V_nGroups>=3] 

* Chain [28,[18,19,20,21,22,26,27,29],31,34]: 2*it(20)+2
  Such that:aux(48) =< V_nPart_0
it(20) =< aux(48)

  with precondition: [V_gs_0=0,B=3,V_nGroups=V_nPart_0,0>=V_alphaSize,V_nGroups>=3] 

* Chain [28,34]: 1
  with precondition: [V_nGroups=1,V_gs_0=0,V_nPart_0=1,B=3,0>=V_alphaSize] 

* Chain [28,33,34]: 2
  with precondition: [V_nGroups=2,V_gs_0=0,V_nPart_0=2,B=3,0>=V_alphaSize] 

* Chain [28,31,34]: 2
  with precondition: [V_nGroups=2,V_gs_0=0,V_nPart_0=2,B=3,0>=V_alphaSize] 

* Chain [25,[18,19,20,21,22,26,27,29],34]: 2*it(20)+2*s(27)+1
  Such that:aux(49) =< V_alphaSize+1
aux(51) =< V_nPart_0
it(20) =< aux(51)
s(27) =< aux(49)

  with precondition: [V_gs_0=0,B=3,V_nGroups=V_nPart_0,V_nGroups>=2,V_alphaSize>=1] 

* Chain [25,[18,19,20,21,22,26,27,29],33,34]: 2*it(20)+2*s(27)+2
  Such that:aux(49) =< V_alphaSize+1
aux(53) =< V_nPart_0
it(20) =< aux(53)
s(27) =< aux(49)

  with precondition: [V_gs_0=0,B=3,V_nGroups=V_nPart_0,V_nGroups>=3,V_alphaSize>=1] 

* Chain [25,[18,19,20,21,22,26,27,29],31,34]: 2*it(20)+2*s(27)+2
  Such that:aux(49) =< V_alphaSize+1
aux(55) =< V_nPart_0
it(20) =< aux(55)
s(27) =< aux(49)

  with precondition: [V_gs_0=0,B=3,V_nGroups=V_nPart_0,V_nGroups>=3,V_alphaSize>=1] 

* Chain [25,34]: 2*s(27)+1
  Such that:aux(49) =< V_alphaSize+1
s(27) =< aux(49)

  with precondition: [V_nGroups=1,V_gs_0=0,V_nPart_0=1,B=3,V_alphaSize>=1] 

* Chain [25,33,34]: 2*s(27)+2
  Such that:aux(49) =< V_alphaSize+1
s(27) =< aux(49)

  with precondition: [V_nGroups=2,V_gs_0=0,V_nPart_0=2,B=3,V_alphaSize>=1] 

* Chain [25,31,34]: 2*s(27)+2
  Such that:aux(49) =< V_alphaSize+1
s(27) =< aux(49)

  with precondition: [V_nGroups=2,V_gs_0=0,V_nPart_0=2,B=3,V_alphaSize>=1] 

* Chain [24,[18,19,20,21,22,26,27,29],34]: 1*it(18)+1*it(19)+2*it(20)+1*it(21)+1*it(22)+6*it(26)+1*s(17)+1*s(18)+2*s(19)+2*s(21)+1*s(23)+1
  Such that:aux(5) =< V_alphaSize
aux(6) =< V_alphaSize+V_nPart_0
aux(8) =< V_alphaSize+2*V_nPart_0
aux(11) =< 2*V_alphaSize
aux(13) =< 3*V_alphaSize
aux(15) =< V_alphaSize/2
aux(17) =< 3/2*V_alphaSize
aux(21) =< V_nPart_0
aux(4) =< aux(5)
it(19) =< aux(5)
it(21) =< aux(5)
it(22) =< aux(5)
it(26) =< aux(5)
s(17) =< aux(5)
it(21) =< aux(6)
it(22) =< aux(6)
it(26) =< aux(6)
s(18) =< aux(6)
s(22) =< aux(6)
it(22) =< aux(8)
s(20) =< aux(8)
it(21) =< aux(11)
it(22) =< aux(11)
s(18) =< aux(11)
it(22) =< aux(13)
s(20) =< aux(13)
it(18) =< aux(15)
it(22) =< aux(15)
it(26) =< aux(17)
s(22) =< aux(17)
aux(4) =< aux(21)
it(18) =< aux(21)
it(19) =< aux(21)
it(20) =< aux(21)
it(21) =< aux(21)
it(22) =< aux(21)
it(26) =< aux(21)
s(23) =< aux(4)
s(21) =< s(22)
s(19) =< s(20)

  with precondition: [V_gs_0=0,B=3,V_nGroups=V_nPart_0,V_nGroups>=2] 

* Chain [24,[18,19,20,21,22,26,27,29],33,34]: 1*it(18)+1*it(19)+2*it(20)+1*it(21)+1*it(22)+6*it(26)+1*s(17)+1*s(18)+2*s(19)+2*s(21)+1*s(23)+2
  Such that:aux(5) =< V_alphaSize
aux(6) =< V_alphaSize+V_nPart_0
aux(8) =< V_alphaSize+2*V_nPart_0
aux(11) =< 2*V_alphaSize
aux(13) =< 3*V_alphaSize
aux(15) =< V_alphaSize/2
aux(17) =< 3/2*V_alphaSize
aux(22) =< V_nPart_0
aux(4) =< aux(5)
it(19) =< aux(5)
it(21) =< aux(5)
it(22) =< aux(5)
it(26) =< aux(5)
s(17) =< aux(5)
it(21) =< aux(6)
it(22) =< aux(6)
it(26) =< aux(6)
s(18) =< aux(6)
s(22) =< aux(6)
it(22) =< aux(8)
s(20) =< aux(8)
it(21) =< aux(11)
it(22) =< aux(11)
s(18) =< aux(11)
it(22) =< aux(13)
s(20) =< aux(13)
it(18) =< aux(15)
it(22) =< aux(15)
it(26) =< aux(17)
s(22) =< aux(17)
aux(4) =< aux(22)
it(18) =< aux(22)
it(19) =< aux(22)
it(20) =< aux(22)
it(21) =< aux(22)
it(22) =< aux(22)
it(26) =< aux(22)
s(23) =< aux(4)
s(21) =< s(22)
s(19) =< s(20)

  with precondition: [V_gs_0=0,B=3,V_nGroups=V_nPart_0,V_nGroups>=3] 

* Chain [24,[18,19,20,21,22,26,27,29],32,34]: 1*it(18)+1*it(19)+1*it(20)+1*it(21)+1*it(22)+6*it(26)+1*it(27)+1*s(17)+1*s(18)+2*s(19)+2*s(21)+1*s(23)+2*s(24)+2
  Such that:aux(24) =< V_alphaSize
aux(25) =< V_alphaSize+1
aux(26) =< V_alphaSize+V_nPart_0
aux(27) =< V_alphaSize+2*V_nPart_0
aux(28) =< 2*V_alphaSize
aux(12) =< 2*V_alphaSize+2
aux(29) =< 3*V_alphaSize
aux(30) =< 3*V_alphaSize+3
aux(31) =< V_alphaSize/2
aux(32) =< 3/2*V_alphaSize
aux(33) =< V_nPart_0
aux(10) =< aux(24)
aux(10) =< aux(25)
aux(16) =< aux(25)
aux(23) =< aux(25)
aux(23) =< aux(27)
aux(12) =< aux(28)
aux(14) =< aux(29)
aux(14) =< aux(30)
aux(18) =< aux(30)
aux(16) =< aux(31)
aux(18) =< aux(32)
s(24) =< aux(23)
aux(4) =< aux(24)
it(19) =< aux(24)
it(21) =< aux(24)
it(22) =< aux(24)
it(26) =< aux(24)
s(17) =< aux(24)
it(21) =< aux(26)
it(22) =< aux(26)
it(26) =< aux(26)
s(18) =< aux(26)
s(22) =< aux(26)
it(20) =< aux(26)
it(27) =< aux(26)
it(22) =< aux(27)
s(20) =< aux(27)
it(26) =< aux(27)
it(27) =< aux(27)
aux(4) =< aux(10)
it(19) =< aux(10)
it(21) =< aux(10)
it(22) =< aux(10)
it(26) =< aux(10)
s(17) =< aux(10)
it(21) =< aux(28)
it(22) =< aux(28)
s(18) =< aux(28)
it(21) =< aux(12)
it(22) =< aux(12)
it(26) =< aux(12)
s(18) =< aux(12)
it(22) =< aux(29)
s(20) =< aux(29)
it(22) =< aux(14)
it(26) =< aux(14)
s(20) =< aux(14)
it(18) =< aux(31)
it(22) =< aux(31)
it(18) =< aux(16)
it(22) =< aux(16)
it(26) =< aux(32)
s(22) =< aux(32)
it(26) =< aux(18)
s(22) =< aux(18)
aux(4) =< aux(33)
it(18) =< aux(33)
it(19) =< aux(33)
it(20) =< aux(33)
it(21) =< aux(33)
it(22) =< aux(33)
it(26) =< aux(33)
it(27) =< aux(33)
s(23) =< aux(4)
s(21) =< s(22)
s(19) =< s(20)

  with precondition: [V_gs_0=0,B=3,V_nGroups=V_nPart_0,V_nGroups>=3,V_alphaSize>=1] 

* Chain [24,[18,19,20,21,22,26,27,29],31,34]: 1*it(18)+1*it(19)+2*it(20)+1*it(21)+1*it(22)+6*it(26)+1*s(17)+1*s(18)+2*s(19)+2*s(21)+1*s(23)+2
  Such that:aux(5) =< V_alphaSize
aux(6) =< V_alphaSize+V_nPart_0
aux(8) =< V_alphaSize+2*V_nPart_0
aux(11) =< 2*V_alphaSize
aux(13) =< 3*V_alphaSize
aux(15) =< V_alphaSize/2
aux(17) =< 3/2*V_alphaSize
aux(34) =< V_nPart_0
aux(4) =< aux(5)
it(19) =< aux(5)
it(21) =< aux(5)
it(22) =< aux(5)
it(26) =< aux(5)
s(17) =< aux(5)
it(21) =< aux(6)
it(22) =< aux(6)
it(26) =< aux(6)
s(18) =< aux(6)
s(22) =< aux(6)
it(22) =< aux(8)
s(20) =< aux(8)
it(21) =< aux(11)
it(22) =< aux(11)
s(18) =< aux(11)
it(22) =< aux(13)
s(20) =< aux(13)
it(18) =< aux(15)
it(22) =< aux(15)
it(26) =< aux(17)
s(22) =< aux(17)
aux(4) =< aux(34)
it(18) =< aux(34)
it(19) =< aux(34)
it(20) =< aux(34)
it(21) =< aux(34)
it(22) =< aux(34)
it(26) =< aux(34)
s(23) =< aux(4)
s(21) =< s(22)
s(19) =< s(20)

  with precondition: [V_gs_0=0,B=3,V_nGroups=V_nPart_0,V_nGroups>=3] 

* Chain [24,[18,19,20,21,22,26,27,29],30,34]: 1*it(18)+1*it(19)+1*it(20)+1*it(21)+1*it(22)+6*it(26)+1*it(27)+1*s(17)+1*s(18)+2*s(19)+2*s(21)+1*s(23)+1*s(26)+2
  Such that:aux(35) =< V_alphaSize
aux(36) =< V_alphaSize+V_nPart_0
aux(37) =< V_alphaSize+2*V_nPart_0
aux(38) =< 2*V_alphaSize
aux(39) =< 3*V_alphaSize
aux(40) =< V_alphaSize/2
aux(41) =< 3/2*V_alphaSize
aux(42) =< V_nPart_0
aux(16) =< aux(35)
s(26) =< aux(35)
s(26) =< aux(37)
aux(18) =< aux(39)
aux(16) =< aux(40)
aux(18) =< aux(41)
aux(4) =< aux(35)
it(19) =< aux(35)
it(21) =< aux(35)
it(22) =< aux(35)
it(26) =< aux(35)
s(17) =< aux(35)
it(21) =< aux(36)
it(22) =< aux(36)
it(26) =< aux(36)
s(18) =< aux(36)
s(22) =< aux(36)
it(20) =< aux(36)
it(27) =< aux(36)
it(22) =< aux(37)
s(20) =< aux(37)
it(26) =< aux(37)
it(27) =< aux(37)
it(21) =< aux(38)
it(22) =< aux(38)
s(18) =< aux(38)
it(26) =< aux(38)
it(22) =< aux(39)
s(20) =< aux(39)
it(26) =< aux(39)
it(18) =< aux(40)
it(22) =< aux(40)
it(18) =< aux(16)
it(22) =< aux(16)
it(26) =< aux(41)
s(22) =< aux(41)
it(26) =< aux(18)
s(22) =< aux(18)
aux(4) =< aux(42)
it(18) =< aux(42)
it(19) =< aux(42)
it(20) =< aux(42)
it(21) =< aux(42)
it(22) =< aux(42)
it(26) =< aux(42)
it(27) =< aux(42)
s(23) =< aux(4)
s(21) =< s(22)
s(19) =< s(20)

  with precondition: [V_gs_0=0,B=3,V_nGroups=V_nPart_0,V_nGroups>=3,V_alphaSize>=1] 

* Chain [24,34]: 1
  with precondition: [V_nGroups=1,V_gs_0=0,V_nPart_0=1,B=3] 

* Chain [24,33,34]: 2
  with precondition: [V_nGroups=2,V_gs_0=0,V_nPart_0=2,B=3,0>=V_alphaSize] 

* Chain [24,32,34]: 2*s(24)+2
  Such that:aux(23) =< V_alphaSize+1
s(24) =< aux(23)

  with precondition: [V_nGroups=2,V_gs_0=0,V_nPart_0=2,B=3,V_alphaSize>=1] 

* Chain [24,31,34]: 2
  with precondition: [V_nGroups=2,V_gs_0=0,V_nPart_0=2,B=3] 

* Chain [24,30,34]: 1*s(26)+2
  Such that:s(26) =< V_alphaSize

  with precondition: [V_nGroups=2,V_gs_0=0,V_nPart_0=2,B=3,V_alphaSize>=1] 

* Chain [23,[18,19,20,21,22,26,27,29],34]: 1*it(18)+1*it(19)+2*it(20)+1*it(21)+1*it(22)+6*it(26)+1*s(17)+1*s(18)+2*s(19)+2*s(21)+1*s(23)+1*s(29)+1
  Such that:aux(6) =< V_alphaSize+V_nPart_0
aux(8) =< V_alphaSize+2*V_nPart_0
aux(11) =< 2*V_alphaSize
aux(15) =< V_alphaSize/2
aux(17) =< 3/2*V_alphaSize
aux(21) =< V_nPart_0
aux(56) =< V_alphaSize
aux(57) =< 3*V_alphaSize
aux(15) =< aux(56)
s(29) =< aux(56)
aux(17) =< aux(57)
s(29) =< aux(57)
aux(4) =< aux(56)
it(19) =< aux(56)
it(21) =< aux(56)
it(22) =< aux(56)
it(26) =< aux(56)
s(17) =< aux(56)
it(21) =< aux(6)
it(22) =< aux(6)
it(26) =< aux(6)
s(18) =< aux(6)
s(22) =< aux(6)
it(22) =< aux(8)
s(20) =< aux(8)
it(21) =< aux(11)
it(22) =< aux(11)
s(18) =< aux(11)
it(22) =< aux(57)
s(20) =< aux(57)
it(18) =< aux(15)
it(22) =< aux(15)
it(26) =< aux(17)
s(22) =< aux(17)
aux(4) =< aux(21)
it(18) =< aux(21)
it(19) =< aux(21)
it(20) =< aux(21)
it(21) =< aux(21)
it(22) =< aux(21)
it(26) =< aux(21)
s(23) =< aux(4)
s(21) =< s(22)
s(19) =< s(20)

  with precondition: [V_gs_0=0,B=3,V_nGroups=V_nPart_0,V_nGroups>=2,V_alphaSize>=1] 

* Chain [23,[18,19,20,21,22,26,27,29],33,34]: 1*it(18)+1*it(19)+2*it(20)+1*it(21)+1*it(22)+6*it(26)+1*s(17)+1*s(18)+2*s(19)+2*s(21)+1*s(23)+1*s(29)+2
  Such that:aux(6) =< V_alphaSize+V_nPart_0
aux(8) =< V_alphaSize+2*V_nPart_0
aux(11) =< 2*V_alphaSize
aux(15) =< V_alphaSize/2
aux(17) =< 3/2*V_alphaSize
aux(22) =< V_nPart_0
aux(58) =< V_alphaSize
aux(59) =< 3*V_alphaSize
aux(15) =< aux(58)
s(29) =< aux(58)
aux(17) =< aux(59)
s(29) =< aux(59)
aux(4) =< aux(58)
it(19) =< aux(58)
it(21) =< aux(58)
it(22) =< aux(58)
it(26) =< aux(58)
s(17) =< aux(58)
it(21) =< aux(6)
it(22) =< aux(6)
it(26) =< aux(6)
s(18) =< aux(6)
s(22) =< aux(6)
it(22) =< aux(8)
s(20) =< aux(8)
it(21) =< aux(11)
it(22) =< aux(11)
s(18) =< aux(11)
it(22) =< aux(59)
s(20) =< aux(59)
it(18) =< aux(15)
it(22) =< aux(15)
it(26) =< aux(17)
s(22) =< aux(17)
aux(4) =< aux(22)
it(18) =< aux(22)
it(19) =< aux(22)
it(20) =< aux(22)
it(21) =< aux(22)
it(22) =< aux(22)
it(26) =< aux(22)
s(23) =< aux(4)
s(21) =< s(22)
s(19) =< s(20)

  with precondition: [V_gs_0=0,B=3,V_nGroups=V_nPart_0,V_nGroups>=3,V_alphaSize>=1] 

* Chain [23,[18,19,20,21,22,26,27,29],32,34]: 1*it(18)+1*it(19)+1*it(20)+1*it(21)+1*it(22)+6*it(26)+1*it(27)+1*s(17)+1*s(18)+2*s(19)+2*s(21)+1*s(23)+2*s(24)+1*s(29)+2
  Such that:aux(25) =< V_alphaSize+1
aux(26) =< V_alphaSize+V_nPart_0
aux(27) =< V_alphaSize+2*V_nPart_0
aux(12) =< 2*V_alphaSize+2
aux(31) =< V_alphaSize/2
aux(32) =< 3/2*V_alphaSize
aux(33) =< V_nPart_0
aux(60) =< V_alphaSize
aux(61) =< 2*V_alphaSize
aux(62) =< 3*V_alphaSize
aux(63) =< 3*V_alphaSize+3
aux(25) =< aux(60)
aux(31) =< aux(60)
s(29) =< aux(60)
aux(12) =< aux(61)
aux(30) =< aux(62)
aux(32) =< aux(62)
aux(30) =< aux(63)
s(29) =< aux(63)
aux(10) =< aux(60)
aux(10) =< aux(25)
aux(16) =< aux(25)
aux(23) =< aux(25)
aux(23) =< aux(27)
aux(14) =< aux(62)
aux(14) =< aux(30)
aux(18) =< aux(30)
aux(16) =< aux(31)
aux(18) =< aux(32)
s(24) =< aux(23)
aux(4) =< aux(60)
it(19) =< aux(60)
it(21) =< aux(60)
it(22) =< aux(60)
it(26) =< aux(60)
s(17) =< aux(60)
it(21) =< aux(26)
it(22) =< aux(26)
it(26) =< aux(26)
s(18) =< aux(26)
s(22) =< aux(26)
it(20) =< aux(26)
it(27) =< aux(26)
it(22) =< aux(27)
s(20) =< aux(27)
it(26) =< aux(27)
it(27) =< aux(27)
aux(4) =< aux(10)
it(19) =< aux(10)
it(21) =< aux(10)
it(22) =< aux(10)
it(26) =< aux(10)
s(17) =< aux(10)
it(21) =< aux(61)
it(22) =< aux(61)
s(18) =< aux(61)
it(21) =< aux(12)
it(22) =< aux(12)
it(26) =< aux(12)
s(18) =< aux(12)
it(22) =< aux(62)
s(20) =< aux(62)
it(22) =< aux(14)
it(26) =< aux(14)
s(20) =< aux(14)
it(18) =< aux(31)
it(22) =< aux(31)
it(18) =< aux(16)
it(22) =< aux(16)
it(26) =< aux(32)
s(22) =< aux(32)
it(26) =< aux(18)
s(22) =< aux(18)
aux(4) =< aux(33)
it(18) =< aux(33)
it(19) =< aux(33)
it(20) =< aux(33)
it(21) =< aux(33)
it(22) =< aux(33)
it(26) =< aux(33)
it(27) =< aux(33)
s(23) =< aux(4)
s(21) =< s(22)
s(19) =< s(20)

  with precondition: [V_gs_0=0,B=3,V_nGroups=V_nPart_0,V_nGroups>=3,V_alphaSize>=2] 

* Chain [23,[18,19,20,21,22,26,27,29],31,34]: 1*it(18)+1*it(19)+2*it(20)+1*it(21)+1*it(22)+6*it(26)+1*s(17)+1*s(18)+2*s(19)+2*s(21)+1*s(23)+1*s(29)+2
  Such that:aux(6) =< V_alphaSize+V_nPart_0
aux(8) =< V_alphaSize+2*V_nPart_0
aux(11) =< 2*V_alphaSize
aux(15) =< V_alphaSize/2
aux(17) =< 3/2*V_alphaSize
aux(34) =< V_nPart_0
aux(64) =< V_alphaSize
aux(65) =< 3*V_alphaSize
aux(15) =< aux(64)
s(29) =< aux(64)
aux(17) =< aux(65)
s(29) =< aux(65)
aux(4) =< aux(64)
it(19) =< aux(64)
it(21) =< aux(64)
it(22) =< aux(64)
it(26) =< aux(64)
s(17) =< aux(64)
it(21) =< aux(6)
it(22) =< aux(6)
it(26) =< aux(6)
s(18) =< aux(6)
s(22) =< aux(6)
it(22) =< aux(8)
s(20) =< aux(8)
it(21) =< aux(11)
it(22) =< aux(11)
s(18) =< aux(11)
it(22) =< aux(65)
s(20) =< aux(65)
it(18) =< aux(15)
it(22) =< aux(15)
it(26) =< aux(17)
s(22) =< aux(17)
aux(4) =< aux(34)
it(18) =< aux(34)
it(19) =< aux(34)
it(20) =< aux(34)
it(21) =< aux(34)
it(22) =< aux(34)
it(26) =< aux(34)
s(23) =< aux(4)
s(21) =< s(22)
s(19) =< s(20)

  with precondition: [V_gs_0=0,B=3,V_nGroups=V_nPart_0,V_nGroups>=3,V_alphaSize>=1] 

* Chain [23,[18,19,20,21,22,26,27,29],30,34]: 1*it(18)+1*it(19)+1*it(20)+1*it(21)+1*it(22)+6*it(26)+1*it(27)+1*s(17)+1*s(18)+2*s(19)+2*s(21)+1*s(23)+1*s(26)+1*s(29)+2
  Such that:aux(36) =< V_alphaSize+V_nPart_0
aux(37) =< V_alphaSize+2*V_nPart_0
aux(38) =< 2*V_alphaSize
aux(40) =< V_alphaSize/2
aux(41) =< 3/2*V_alphaSize
aux(42) =< V_nPart_0
aux(66) =< V_alphaSize
aux(67) =< 3*V_alphaSize
aux(40) =< aux(66)
s(29) =< aux(66)
aux(41) =< aux(67)
s(29) =< aux(67)
aux(16) =< aux(66)
s(26) =< aux(66)
s(26) =< aux(37)
aux(18) =< aux(67)
aux(16) =< aux(40)
aux(18) =< aux(41)
aux(4) =< aux(66)
it(19) =< aux(66)
it(21) =< aux(66)
it(22) =< aux(66)
it(26) =< aux(66)
s(17) =< aux(66)
it(21) =< aux(36)
it(22) =< aux(36)
it(26) =< aux(36)
s(18) =< aux(36)
s(22) =< aux(36)
it(20) =< aux(36)
it(27) =< aux(36)
it(22) =< aux(37)
s(20) =< aux(37)
it(26) =< aux(37)
it(27) =< aux(37)
it(21) =< aux(38)
it(22) =< aux(38)
s(18) =< aux(38)
it(26) =< aux(38)
it(22) =< aux(67)
s(20) =< aux(67)
it(26) =< aux(67)
it(18) =< aux(40)
it(22) =< aux(40)
it(18) =< aux(16)
it(22) =< aux(16)
it(26) =< aux(41)
s(22) =< aux(41)
it(26) =< aux(18)
s(22) =< aux(18)
aux(4) =< aux(42)
it(18) =< aux(42)
it(19) =< aux(42)
it(20) =< aux(42)
it(21) =< aux(42)
it(22) =< aux(42)
it(26) =< aux(42)
it(27) =< aux(42)
s(23) =< aux(4)
s(21) =< s(22)
s(19) =< s(20)

  with precondition: [V_gs_0=0,B=3,V_nGroups=V_nPart_0,V_nGroups>=3,V_alphaSize>=2] 

* Chain [23,34]: 1*s(29)+1
  Such that:s(29) =< V_alphaSize

  with precondition: [V_nGroups=1,V_gs_0=0,V_nPart_0=1,B=3,V_alphaSize>=1] 

* Chain [23,33,34]: 1*s(29)+2
  Such that:s(29) =< V_alphaSize

  with precondition: [V_nGroups=2,V_gs_0=0,V_nPart_0=2,B=3,V_alphaSize>=1] 

* Chain [23,32,34]: 2*s(24)+1*s(29)+2
  Such that:aux(68) =< V_alphaSize
aux(69) =< V_alphaSize+1
aux(23) =< aux(68)
s(29) =< aux(68)
aux(23) =< aux(69)
s(29) =< aux(69)
s(24) =< aux(23)

  with precondition: [V_nGroups=2,V_gs_0=0,V_nPart_0=2,B=3,V_alphaSize>=2] 

* Chain [23,31,34]: 1*s(29)+2
  Such that:s(29) =< V_alphaSize

  with precondition: [V_nGroups=2,V_gs_0=0,V_nPart_0=2,B=3,V_alphaSize>=1] 

* Chain [23,30,34]: 2*s(26)+2
  Such that:aux(70) =< V_alphaSize
s(26) =< aux(70)

  with precondition: [V_nGroups=2,V_gs_0=0,V_nPart_0=2,B=3,V_alphaSize>=2] 


#### Cost of chains of eval_sendMTFValues_bb0_in(V_nGroups,V_alphaSize,B):
* Chain [50]: 1
  with precondition: [V_nGroups=1] 

* Chain [49]: 1
  with precondition: [V_nGroups=1,0>=V_alphaSize] 

* Chain [48]: 2*s(404)+4*s(406)+1
  Such that:aux(117) =< V_alphaSize
aux(118) =< V_alphaSize+1
s(404) =< aux(117)
s(406) =< aux(118)

  with precondition: [V_nGroups=1,V_alphaSize>=1] 

* Chain [47]: 2
  with precondition: [V_nGroups=2] 

* Chain [46]: 2
  with precondition: [V_nGroups=2,0>=V_alphaSize] 

* Chain [45]: 3*s(412)+6*s(413)+2
  Such that:s(410) =< V_alphaSize
s(411) =< V_alphaSize+1
s(412) =< s(410)
s(413) =< s(411)

  with precondition: [V_nGroups=2,V_alphaSize>=1] 

* Chain [44]: 2*s(416)+1*s(418)+2*s(419)+2
  Such that:s(415) =< V_alphaSize
s(414) =< V_alphaSize+1
s(416) =< s(415)
s(417) =< s(415)
s(418) =< s(415)
s(417) =< s(414)
s(418) =< s(414)
s(419) =< s(417)

  with precondition: [V_nGroups=2,V_alphaSize>=2] 

* Chain [43]: 0
  with precondition: [0>=V_nGroups] 

* Chain [42]: 2*s(421)+1
  Such that:s(420) =< V_nGroups
s(421) =< s(420)

  with precondition: [0>=V_alphaSize,V_nGroups>=2] 

* Chain [41]: 4*s(423)+2
  Such that:s(422) =< V_nGroups
s(423) =< s(422)

  with precondition: [0>=V_alphaSize,V_nGroups>=3] 

* Chain [40]: 1*s(433)+1*s(434)+1*s(435)+6*s(436)+1*s(437)+1*s(438)+1*s(441)+2*s(442)+1*s(444)+2*s(445)+2*s(446)+0
  Such that:s(431) =< V_nGroups
s(425) =< V_nGroups+V_alphaSize
s(426) =< 2*V_nGroups+V_alphaSize
s(424) =< V_alphaSize
s(427) =< 2*V_alphaSize
s(428) =< 3*V_alphaSize
s(429) =< V_alphaSize/2
s(430) =< 3/2*V_alphaSize
s(432) =< s(424)
s(433) =< s(424)
s(434) =< s(424)
s(435) =< s(424)
s(436) =< s(424)
s(437) =< s(424)
s(434) =< s(425)
s(435) =< s(425)
s(436) =< s(425)
s(438) =< s(425)
s(439) =< s(425)
s(435) =< s(426)
s(440) =< s(426)
s(434) =< s(427)
s(435) =< s(427)
s(438) =< s(427)
s(435) =< s(428)
s(440) =< s(428)
s(441) =< s(429)
s(435) =< s(429)
s(436) =< s(430)
s(439) =< s(430)
s(432) =< s(431)
s(441) =< s(431)
s(433) =< s(431)
s(442) =< s(431)
s(434) =< s(431)
s(435) =< s(431)
s(436) =< s(431)
s(444) =< s(432)
s(445) =< s(439)
s(446) =< s(440)

  with precondition: [V_nGroups>=1] 

* Chain [39]: 3*s(456)+3*s(457)+3*s(458)+18*s(459)+3*s(460)+3*s(461)+3*s(464)+6*s(465)+3*s(466)+6*s(467)+6*s(468)+1
  Such that:aux(119) =< V_nGroups
aux(120) =< V_nGroups+V_alphaSize
aux(121) =< 2*V_nGroups+V_alphaSize
aux(122) =< V_alphaSize
aux(123) =< 2*V_alphaSize
aux(124) =< 3*V_alphaSize
aux(125) =< V_alphaSize/2
aux(126) =< 3/2*V_alphaSize
s(455) =< aux(122)
s(456) =< aux(122)
s(457) =< aux(122)
s(458) =< aux(122)
s(459) =< aux(122)
s(460) =< aux(122)
s(457) =< aux(120)
s(458) =< aux(120)
s(459) =< aux(120)
s(461) =< aux(120)
s(462) =< aux(120)
s(458) =< aux(121)
s(463) =< aux(121)
s(457) =< aux(123)
s(458) =< aux(123)
s(461) =< aux(123)
s(458) =< aux(124)
s(463) =< aux(124)
s(464) =< aux(125)
s(458) =< aux(125)
s(459) =< aux(126)
s(462) =< aux(126)
s(455) =< aux(119)
s(464) =< aux(119)
s(456) =< aux(119)
s(465) =< aux(119)
s(457) =< aux(119)
s(458) =< aux(119)
s(459) =< aux(119)
s(466) =< s(455)
s(467) =< s(462)
s(468) =< s(463)

  with precondition: [V_nGroups>=2] 

* Chain [38]: 4*s(500)+2*s(501)+1*s(502)+2*s(504)+2*s(505)+1*s(506)+6*s(507)+2*s(508)+2*s(509)+1*s(512)+2*s(513)+2*s(514)+4*s(515)+1*s(528)+1*s(533)+6*s(534)+2*s(538)+2*s(539)+1*s(541)+2*s(543)+2*s(550)+1*s(552)+1*s(553)+1*s(554)+6*s(555)+1*s(556)+1*s(557)+1*s(560)+1*s(561)+2*s(562)+2*s(563)+1
  Such that:s(517) =< 2*V_alphaSize+2
s(518) =< 3*V_alphaSize+3
aux(127) =< V_nGroups
aux(128) =< V_nGroups+V_alphaSize
aux(129) =< 2*V_nGroups+V_alphaSize
aux(130) =< V_alphaSize
aux(131) =< V_alphaSize+1
aux(132) =< 2*V_alphaSize
aux(133) =< 3*V_alphaSize
aux(134) =< V_alphaSize/2
aux(135) =< 3/2*V_alphaSize
s(497) =< aux(134)
s(498) =< aux(135)
s(500) =< aux(127)
s(501) =< aux(131)
s(497) =< aux(130)
s(502) =< aux(130)
s(498) =< aux(133)
s(502) =< aux(133)
s(503) =< aux(130)
s(504) =< aux(130)
s(505) =< aux(130)
s(506) =< aux(130)
s(507) =< aux(130)
s(508) =< aux(130)
s(505) =< aux(128)
s(506) =< aux(128)
s(507) =< aux(128)
s(509) =< aux(128)
s(510) =< aux(128)
s(506) =< aux(129)
s(511) =< aux(129)
s(505) =< aux(132)
s(506) =< aux(132)
s(509) =< aux(132)
s(506) =< aux(133)
s(511) =< aux(133)
s(512) =< s(497)
s(506) =< s(497)
s(507) =< s(498)
s(510) =< s(498)
s(503) =< aux(127)
s(512) =< aux(127)
s(504) =< aux(127)
s(505) =< aux(127)
s(506) =< aux(127)
s(507) =< aux(127)
s(513) =< s(503)
s(514) =< s(510)
s(515) =< s(511)
s(528) =< aux(130)
s(528) =< aux(129)
s(533) =< aux(130)
s(534) =< aux(130)
s(533) =< aux(128)
s(534) =< aux(128)
s(537) =< aux(128)
s(538) =< aux(128)
s(539) =< aux(128)
s(533) =< aux(129)
s(534) =< aux(129)
s(539) =< aux(129)
s(533) =< aux(132)
s(534) =< aux(132)
s(533) =< aux(133)
s(534) =< aux(133)
s(541) =< aux(134)
s(533) =< aux(134)
s(541) =< s(497)
s(533) =< s(497)
s(534) =< aux(135)
s(537) =< aux(135)
s(534) =< s(498)
s(537) =< s(498)
s(541) =< aux(127)
s(538) =< aux(127)
s(533) =< aux(127)
s(534) =< aux(127)
s(539) =< aux(127)
s(543) =< s(537)
s(545) =< aux(130)
s(545) =< aux(131)
s(546) =< aux(131)
s(547) =< aux(131)
s(547) =< aux(129)
s(517) =< aux(132)
s(548) =< aux(133)
s(548) =< s(518)
s(549) =< s(518)
s(546) =< aux(134)
s(549) =< aux(135)
s(550) =< s(547)
s(551) =< aux(130)
s(552) =< aux(130)
s(553) =< aux(130)
s(554) =< aux(130)
s(555) =< aux(130)
s(556) =< aux(130)
s(553) =< aux(128)
s(554) =< aux(128)
s(555) =< aux(128)
s(557) =< aux(128)
s(558) =< aux(128)
s(554) =< aux(129)
s(559) =< aux(129)
s(555) =< aux(129)
s(551) =< s(545)
s(552) =< s(545)
s(553) =< s(545)
s(554) =< s(545)
s(555) =< s(545)
s(556) =< s(545)
s(553) =< aux(132)
s(554) =< aux(132)
s(557) =< aux(132)
s(553) =< s(517)
s(554) =< s(517)
s(555) =< s(517)
s(557) =< s(517)
s(554) =< aux(133)
s(559) =< aux(133)
s(554) =< s(548)
s(555) =< s(548)
s(559) =< s(548)
s(560) =< aux(134)
s(554) =< aux(134)
s(560) =< s(546)
s(554) =< s(546)
s(555) =< aux(135)
s(558) =< aux(135)
s(555) =< s(549)
s(558) =< s(549)
s(551) =< aux(127)
s(560) =< aux(127)
s(552) =< aux(127)
s(553) =< aux(127)
s(554) =< aux(127)
s(555) =< aux(127)
s(561) =< s(551)
s(562) =< s(558)
s(563) =< s(559)

  with precondition: [V_nGroups>=2,V_alphaSize>=1] 

* Chain [37]: 2*s(573)+2*s(574)+2*s(575)+12*s(576)+2*s(577)+2*s(578)+2*s(581)+4*s(582)+2*s(583)+4*s(584)+4*s(585)+2
  Such that:s(571) =< V_nGroups
s(565) =< V_nGroups+V_alphaSize
s(566) =< 2*V_nGroups+V_alphaSize
s(564) =< V_alphaSize
s(567) =< 2*V_alphaSize
s(568) =< 3*V_alphaSize
s(569) =< V_alphaSize/2
s(570) =< 3/2*V_alphaSize
s(572) =< s(564)
s(573) =< s(564)
s(574) =< s(564)
s(575) =< s(564)
s(576) =< s(564)
s(577) =< s(564)
s(574) =< s(565)
s(575) =< s(565)
s(576) =< s(565)
s(578) =< s(565)
s(579) =< s(565)
s(575) =< s(566)
s(580) =< s(566)
s(574) =< s(567)
s(575) =< s(567)
s(578) =< s(567)
s(575) =< s(568)
s(580) =< s(568)
s(581) =< s(569)
s(575) =< s(569)
s(576) =< s(570)
s(579) =< s(570)
s(572) =< s(571)
s(581) =< s(571)
s(573) =< s(571)
s(582) =< s(571)
s(574) =< s(571)
s(575) =< s(571)
s(576) =< s(571)
s(583) =< s(572)
s(584) =< s(579)
s(585) =< s(580)

  with precondition: [V_nGroups>=3] 

* Chain [36]: 1*s(599)+3*s(601)+3*s(602)+1*s(603)+6*s(604)+3*s(605)+3*s(606)+2*s(608)+2*s(609)+1*s(611)+3*s(612)+2*s(613)+6*s(614)+2*s(620)+1*s(622)+1*s(623)+1*s(624)+6*s(625)+1*s(626)+1*s(627)+1*s(630)+1*s(631)+2*s(632)+2*s(633)+8*s(634)+4*s(635)+2*s(636)+2*s(637)+12*s(638)+2*s(640)+4*s(641)+2
  Such that:s(596) =< V_nGroups
s(590) =< V_nGroups+V_alphaSize
s(591) =< 2*V_nGroups+V_alphaSize
s(588) =< V_alphaSize
s(589) =< V_alphaSize+1
s(592) =< 2*V_alphaSize
s(586) =< 2*V_alphaSize+2
s(593) =< 3*V_alphaSize
s(587) =< 3*V_alphaSize+3
s(594) =< V_alphaSize/2
s(595) =< 3/2*V_alphaSize
s(597) =< s(594)
s(598) =< s(595)
s(597) =< s(588)
s(599) =< s(588)
s(599) =< s(591)
s(598) =< s(593)
s(600) =< s(588)
s(601) =< s(588)
s(602) =< s(588)
s(603) =< s(588)
s(604) =< s(588)
s(605) =< s(588)
s(602) =< s(590)
s(603) =< s(590)
s(604) =< s(590)
s(606) =< s(590)
s(607) =< s(590)
s(608) =< s(590)
s(609) =< s(590)
s(603) =< s(591)
s(610) =< s(591)
s(604) =< s(591)
s(609) =< s(591)
s(602) =< s(592)
s(603) =< s(592)
s(606) =< s(592)
s(604) =< s(592)
s(603) =< s(593)
s(610) =< s(593)
s(604) =< s(593)
s(611) =< s(594)
s(603) =< s(594)
s(611) =< s(597)
s(603) =< s(597)
s(604) =< s(595)
s(607) =< s(595)
s(604) =< s(598)
s(607) =< s(598)
s(600) =< s(596)
s(611) =< s(596)
s(601) =< s(596)
s(608) =< s(596)
s(602) =< s(596)
s(603) =< s(596)
s(604) =< s(596)
s(609) =< s(596)
s(612) =< s(600)
s(613) =< s(607)
s(614) =< s(610)
s(615) =< s(588)
s(615) =< s(589)
s(616) =< s(589)
s(617) =< s(589)
s(617) =< s(591)
s(586) =< s(592)
s(618) =< s(593)
s(618) =< s(587)
s(619) =< s(587)
s(616) =< s(594)
s(619) =< s(595)
s(620) =< s(617)
s(621) =< s(588)
s(622) =< s(588)
s(623) =< s(588)
s(624) =< s(588)
s(625) =< s(588)
s(626) =< s(588)
s(623) =< s(590)
s(624) =< s(590)
s(625) =< s(590)
s(627) =< s(590)
s(628) =< s(590)
s(624) =< s(591)
s(629) =< s(591)
s(625) =< s(591)
s(621) =< s(615)
s(622) =< s(615)
s(623) =< s(615)
s(624) =< s(615)
s(625) =< s(615)
s(626) =< s(615)
s(623) =< s(592)
s(624) =< s(592)
s(627) =< s(592)
s(623) =< s(586)
s(624) =< s(586)
s(625) =< s(586)
s(627) =< s(586)
s(624) =< s(593)
s(629) =< s(593)
s(624) =< s(618)
s(625) =< s(618)
s(629) =< s(618)
s(630) =< s(594)
s(624) =< s(594)
s(630) =< s(616)
s(624) =< s(616)
s(625) =< s(595)
s(628) =< s(595)
s(625) =< s(619)
s(628) =< s(619)
s(621) =< s(596)
s(630) =< s(596)
s(622) =< s(596)
s(623) =< s(596)
s(624) =< s(596)
s(625) =< s(596)
s(631) =< s(621)
s(632) =< s(628)
s(633) =< s(629)
s(634) =< s(596)
s(635) =< s(589)
s(636) =< s(588)
s(636) =< s(593)
s(637) =< s(588)
s(638) =< s(588)
s(637) =< s(590)
s(638) =< s(590)
s(639) =< s(590)
s(637) =< s(591)
s(637) =< s(592)
s(637) =< s(593)
s(640) =< s(597)
s(637) =< s(597)
s(638) =< s(598)
s(639) =< s(598)
s(640) =< s(596)
s(637) =< s(596)
s(638) =< s(596)
s(641) =< s(639)

  with precondition: [V_nGroups>=3,V_alphaSize>=1] 

* Chain [35]: 1*s(655)+2*s(662)+1*s(664)+1*s(665)+1*s(666)+6*s(667)+1*s(668)+1*s(669)+2*s(671)+2*s(672)+1*s(674)+1*s(675)+2*s(676)+2*s(677)+1*s(678)+1*s(680)+1*s(683)+1*s(684)+1*s(685)+6*s(686)+1*s(687)+1*s(688)+1*s(691)+1*s(692)+2*s(693)+2*s(694)+2
  Such that:s(652) =< V_nGroups
s(646) =< V_nGroups+V_alphaSize
s(647) =< 2*V_nGroups+V_alphaSize
s(645) =< V_alphaSize
s(642) =< V_alphaSize+1
s(648) =< 2*V_alphaSize
s(643) =< 2*V_alphaSize+2
s(649) =< 3*V_alphaSize
s(644) =< 3*V_alphaSize+3
s(650) =< V_alphaSize/2
s(651) =< 3/2*V_alphaSize
s(653) =< s(650)
s(654) =< s(651)
s(642) =< s(645)
s(653) =< s(645)
s(655) =< s(645)
s(643) =< s(648)
s(656) =< s(649)
s(654) =< s(649)
s(656) =< s(644)
s(655) =< s(644)
s(657) =< s(645)
s(657) =< s(642)
s(658) =< s(642)
s(659) =< s(642)
s(659) =< s(647)
s(660) =< s(649)
s(660) =< s(656)
s(661) =< s(656)
s(658) =< s(653)
s(661) =< s(654)
s(662) =< s(659)
s(663) =< s(645)
s(664) =< s(645)
s(665) =< s(645)
s(666) =< s(645)
s(667) =< s(645)
s(668) =< s(645)
s(665) =< s(646)
s(666) =< s(646)
s(667) =< s(646)
s(669) =< s(646)
s(670) =< s(646)
s(671) =< s(646)
s(672) =< s(646)
s(666) =< s(647)
s(673) =< s(647)
s(667) =< s(647)
s(672) =< s(647)
s(663) =< s(657)
s(664) =< s(657)
s(665) =< s(657)
s(666) =< s(657)
s(667) =< s(657)
s(668) =< s(657)
s(665) =< s(648)
s(666) =< s(648)
s(669) =< s(648)
s(665) =< s(643)
s(666) =< s(643)
s(667) =< s(643)
s(669) =< s(643)
s(666) =< s(649)
s(673) =< s(649)
s(666) =< s(660)
s(667) =< s(660)
s(673) =< s(660)
s(674) =< s(653)
s(666) =< s(653)
s(674) =< s(658)
s(666) =< s(658)
s(667) =< s(654)
s(670) =< s(654)
s(667) =< s(661)
s(670) =< s(661)
s(663) =< s(652)
s(674) =< s(652)
s(664) =< s(652)
s(671) =< s(652)
s(665) =< s(652)
s(666) =< s(652)
s(667) =< s(652)
s(672) =< s(652)
s(675) =< s(663)
s(676) =< s(670)
s(677) =< s(673)
s(678) =< s(645)
s(678) =< s(649)
s(679) =< s(645)
s(680) =< s(645)
s(680) =< s(647)
s(681) =< s(649)
s(679) =< s(653)
s(681) =< s(654)
s(682) =< s(645)
s(683) =< s(645)
s(684) =< s(645)
s(685) =< s(645)
s(686) =< s(645)
s(687) =< s(645)
s(684) =< s(646)
s(685) =< s(646)
s(686) =< s(646)
s(688) =< s(646)
s(689) =< s(646)
s(685) =< s(647)
s(690) =< s(647)
s(686) =< s(647)
s(684) =< s(648)
s(685) =< s(648)
s(688) =< s(648)
s(686) =< s(648)
s(685) =< s(649)
s(690) =< s(649)
s(686) =< s(649)
s(691) =< s(653)
s(685) =< s(653)
s(691) =< s(679)
s(685) =< s(679)
s(686) =< s(654)
s(689) =< s(654)
s(686) =< s(681)
s(689) =< s(681)
s(682) =< s(652)
s(691) =< s(652)
s(683) =< s(652)
s(684) =< s(652)
s(685) =< s(652)
s(686) =< s(652)
s(692) =< s(682)
s(693) =< s(689)
s(694) =< s(690)

  with precondition: [V_nGroups>=3,V_alphaSize>=2] 


#### Cost of chains of eval_sendMTFValues_start(V_nGroups,V_alphaSize,B):
* Chain [66]: 1
  with precondition: [V_nGroups=1] 

* Chain [65]: 1
  with precondition: [V_nGroups=1,0>=V_alphaSize] 

* Chain [64]: 2*s(697)+4*s(698)+1
  Such that:s(695) =< V_alphaSize
s(696) =< V_alphaSize+1
s(697) =< s(695)
s(698) =< s(696)

  with precondition: [V_nGroups=1,V_alphaSize>=1] 

* Chain [63]: 2
  with precondition: [V_nGroups=2] 

* Chain [62]: 2
  with precondition: [V_nGroups=2,0>=V_alphaSize] 

* Chain [61]: 3*s(701)+6*s(702)+2
  Such that:s(699) =< V_alphaSize
s(700) =< V_alphaSize+1
s(701) =< s(699)
s(702) =< s(700)

  with precondition: [V_nGroups=2,V_alphaSize>=1] 

* Chain [60]: 2*s(705)+1*s(707)+2*s(708)+2
  Such that:s(703) =< V_alphaSize
s(704) =< V_alphaSize+1
s(705) =< s(703)
s(706) =< s(703)
s(707) =< s(703)
s(706) =< s(704)
s(707) =< s(704)
s(708) =< s(706)

  with precondition: [V_nGroups=2,V_alphaSize>=2] 

* Chain [59]: 0
  with precondition: [0>=V_nGroups] 

* Chain [58]: 2*s(710)+1
  Such that:s(709) =< V_nGroups
s(710) =< s(709)

  with precondition: [0>=V_alphaSize,V_nGroups>=2] 

* Chain [57]: 4*s(712)+2
  Such that:s(711) =< V_nGroups
s(712) =< s(711)

  with precondition: [0>=V_alphaSize,V_nGroups>=3] 

* Chain [56]: 1*s(722)+1*s(723)+1*s(724)+6*s(725)+1*s(726)+1*s(727)+1*s(730)+2*s(731)+1*s(732)+2*s(733)+2*s(734)+0
  Such that:s(713) =< V_nGroups
s(714) =< V_nGroups+V_alphaSize
s(715) =< 2*V_nGroups+V_alphaSize
s(716) =< V_alphaSize
s(717) =< 2*V_alphaSize
s(718) =< 3*V_alphaSize
s(719) =< V_alphaSize/2
s(720) =< 3/2*V_alphaSize
s(721) =< s(716)
s(722) =< s(716)
s(723) =< s(716)
s(724) =< s(716)
s(725) =< s(716)
s(726) =< s(716)
s(723) =< s(714)
s(724) =< s(714)
s(725) =< s(714)
s(727) =< s(714)
s(728) =< s(714)
s(724) =< s(715)
s(729) =< s(715)
s(723) =< s(717)
s(724) =< s(717)
s(727) =< s(717)
s(724) =< s(718)
s(729) =< s(718)
s(730) =< s(719)
s(724) =< s(719)
s(725) =< s(720)
s(728) =< s(720)
s(721) =< s(713)
s(730) =< s(713)
s(722) =< s(713)
s(731) =< s(713)
s(723) =< s(713)
s(724) =< s(713)
s(725) =< s(713)
s(732) =< s(721)
s(733) =< s(728)
s(734) =< s(729)

  with precondition: [V_nGroups>=1] 

* Chain [55]: 3*s(744)+3*s(745)+3*s(746)+18*s(747)+3*s(748)+3*s(749)+3*s(752)+6*s(753)+3*s(754)+6*s(755)+6*s(756)+1
  Such that:s(735) =< V_nGroups
s(736) =< V_nGroups+V_alphaSize
s(737) =< 2*V_nGroups+V_alphaSize
s(738) =< V_alphaSize
s(739) =< 2*V_alphaSize
s(740) =< 3*V_alphaSize
s(741) =< V_alphaSize/2
s(742) =< 3/2*V_alphaSize
s(743) =< s(738)
s(744) =< s(738)
s(745) =< s(738)
s(746) =< s(738)
s(747) =< s(738)
s(748) =< s(738)
s(745) =< s(736)
s(746) =< s(736)
s(747) =< s(736)
s(749) =< s(736)
s(750) =< s(736)
s(746) =< s(737)
s(751) =< s(737)
s(745) =< s(739)
s(746) =< s(739)
s(749) =< s(739)
s(746) =< s(740)
s(751) =< s(740)
s(752) =< s(741)
s(746) =< s(741)
s(747) =< s(742)
s(750) =< s(742)
s(743) =< s(735)
s(752) =< s(735)
s(744) =< s(735)
s(753) =< s(735)
s(745) =< s(735)
s(746) =< s(735)
s(747) =< s(735)
s(754) =< s(743)
s(755) =< s(750)
s(756) =< s(751)

  with precondition: [V_nGroups>=2] 

* Chain [54]: 4*s(770)+2*s(771)+1*s(772)+2*s(774)+2*s(775)+1*s(776)+6*s(777)+2*s(778)+2*s(779)+1*s(782)+2*s(783)+2*s(784)+4*s(785)+1*s(786)+1*s(787)+6*s(788)+2*s(790)+2*s(791)+1*s(792)+2*s(793)+2*s(799)+1*s(801)+1*s(802)+1*s(803)+6*s(804)+1*s(805)+1*s(806)+1*s(809)+1*s(810)+2*s(811)+2*s(812)+1
  Such that:s(759) =< V_nGroups
s(760) =< V_nGroups+V_alphaSize
s(761) =< 2*V_nGroups+V_alphaSize
s(762) =< V_alphaSize
s(763) =< V_alphaSize+1
s(764) =< 2*V_alphaSize
s(757) =< 2*V_alphaSize+2
s(765) =< 3*V_alphaSize
s(758) =< 3*V_alphaSize+3
s(766) =< V_alphaSize/2
s(767) =< 3/2*V_alphaSize
s(768) =< s(766)
s(769) =< s(767)
s(770) =< s(759)
s(771) =< s(763)
s(768) =< s(762)
s(772) =< s(762)
s(769) =< s(765)
s(772) =< s(765)
s(773) =< s(762)
s(774) =< s(762)
s(775) =< s(762)
s(776) =< s(762)
s(777) =< s(762)
s(778) =< s(762)
s(775) =< s(760)
s(776) =< s(760)
s(777) =< s(760)
s(779) =< s(760)
s(780) =< s(760)
s(776) =< s(761)
s(781) =< s(761)
s(775) =< s(764)
s(776) =< s(764)
s(779) =< s(764)
s(776) =< s(765)
s(781) =< s(765)
s(782) =< s(768)
s(776) =< s(768)
s(777) =< s(769)
s(780) =< s(769)
s(773) =< s(759)
s(782) =< s(759)
s(774) =< s(759)
s(775) =< s(759)
s(776) =< s(759)
s(777) =< s(759)
s(783) =< s(773)
s(784) =< s(780)
s(785) =< s(781)
s(786) =< s(762)
s(786) =< s(761)
s(787) =< s(762)
s(788) =< s(762)
s(787) =< s(760)
s(788) =< s(760)
s(789) =< s(760)
s(790) =< s(760)
s(791) =< s(760)
s(787) =< s(761)
s(788) =< s(761)
s(791) =< s(761)
s(787) =< s(764)
s(788) =< s(764)
s(787) =< s(765)
s(788) =< s(765)
s(792) =< s(766)
s(787) =< s(766)
s(792) =< s(768)
s(787) =< s(768)
s(788) =< s(767)
s(789) =< s(767)
s(788) =< s(769)
s(789) =< s(769)
s(792) =< s(759)
s(790) =< s(759)
s(787) =< s(759)
s(788) =< s(759)
s(791) =< s(759)
s(793) =< s(789)
s(794) =< s(762)
s(794) =< s(763)
s(795) =< s(763)
s(796) =< s(763)
s(796) =< s(761)
s(757) =< s(764)
s(797) =< s(765)
s(797) =< s(758)
s(798) =< s(758)
s(795) =< s(766)
s(798) =< s(767)
s(799) =< s(796)
s(800) =< s(762)
s(801) =< s(762)
s(802) =< s(762)
s(803) =< s(762)
s(804) =< s(762)
s(805) =< s(762)
s(802) =< s(760)
s(803) =< s(760)
s(804) =< s(760)
s(806) =< s(760)
s(807) =< s(760)
s(803) =< s(761)
s(808) =< s(761)
s(804) =< s(761)
s(800) =< s(794)
s(801) =< s(794)
s(802) =< s(794)
s(803) =< s(794)
s(804) =< s(794)
s(805) =< s(794)
s(802) =< s(764)
s(803) =< s(764)
s(806) =< s(764)
s(802) =< s(757)
s(803) =< s(757)
s(804) =< s(757)
s(806) =< s(757)
s(803) =< s(765)
s(808) =< s(765)
s(803) =< s(797)
s(804) =< s(797)
s(808) =< s(797)
s(809) =< s(766)
s(803) =< s(766)
s(809) =< s(795)
s(803) =< s(795)
s(804) =< s(767)
s(807) =< s(767)
s(804) =< s(798)
s(807) =< s(798)
s(800) =< s(759)
s(809) =< s(759)
s(801) =< s(759)
s(802) =< s(759)
s(803) =< s(759)
s(804) =< s(759)
s(810) =< s(800)
s(811) =< s(807)
s(812) =< s(808)

  with precondition: [V_nGroups>=2,V_alphaSize>=1] 

* Chain [53]: 2*s(822)+2*s(823)+2*s(824)+12*s(825)+2*s(826)+2*s(827)+2*s(830)+4*s(831)+2*s(832)+4*s(833)+4*s(834)+2
  Such that:s(813) =< V_nGroups
s(814) =< V_nGroups+V_alphaSize
s(815) =< 2*V_nGroups+V_alphaSize
s(816) =< V_alphaSize
s(817) =< 2*V_alphaSize
s(818) =< 3*V_alphaSize
s(819) =< V_alphaSize/2
s(820) =< 3/2*V_alphaSize
s(821) =< s(816)
s(822) =< s(816)
s(823) =< s(816)
s(824) =< s(816)
s(825) =< s(816)
s(826) =< s(816)
s(823) =< s(814)
s(824) =< s(814)
s(825) =< s(814)
s(827) =< s(814)
s(828) =< s(814)
s(824) =< s(815)
s(829) =< s(815)
s(823) =< s(817)
s(824) =< s(817)
s(827) =< s(817)
s(824) =< s(818)
s(829) =< s(818)
s(830) =< s(819)
s(824) =< s(819)
s(825) =< s(820)
s(828) =< s(820)
s(821) =< s(813)
s(830) =< s(813)
s(822) =< s(813)
s(831) =< s(813)
s(823) =< s(813)
s(824) =< s(813)
s(825) =< s(813)
s(832) =< s(821)
s(833) =< s(828)
s(834) =< s(829)

  with precondition: [V_nGroups>=3] 

* Chain [52]: 1*s(848)+3*s(850)+3*s(851)+1*s(852)+6*s(853)+3*s(854)+3*s(855)+2*s(857)+2*s(858)+1*s(860)+3*s(861)+2*s(862)+6*s(863)+2*s(869)+1*s(871)+1*s(872)+1*s(873)+6*s(874)+1*s(875)+1*s(876)+1*s(879)+1*s(880)+2*s(881)+2*s(882)+8*s(883)+4*s(884)+2*s(885)+2*s(886)+12*s(887)+2*s(889)+4*s(890)+2
  Such that:s(835) =< V_nGroups
s(836) =< V_nGroups+V_alphaSize
s(837) =< 2*V_nGroups+V_alphaSize
s(838) =< V_alphaSize
s(839) =< V_alphaSize+1
s(840) =< 2*V_alphaSize
s(841) =< 2*V_alphaSize+2
s(842) =< 3*V_alphaSize
s(843) =< 3*V_alphaSize+3
s(844) =< V_alphaSize/2
s(845) =< 3/2*V_alphaSize
s(846) =< s(844)
s(847) =< s(845)
s(846) =< s(838)
s(848) =< s(838)
s(848) =< s(837)
s(847) =< s(842)
s(849) =< s(838)
s(850) =< s(838)
s(851) =< s(838)
s(852) =< s(838)
s(853) =< s(838)
s(854) =< s(838)
s(851) =< s(836)
s(852) =< s(836)
s(853) =< s(836)
s(855) =< s(836)
s(856) =< s(836)
s(857) =< s(836)
s(858) =< s(836)
s(852) =< s(837)
s(859) =< s(837)
s(853) =< s(837)
s(858) =< s(837)
s(851) =< s(840)
s(852) =< s(840)
s(855) =< s(840)
s(853) =< s(840)
s(852) =< s(842)
s(859) =< s(842)
s(853) =< s(842)
s(860) =< s(844)
s(852) =< s(844)
s(860) =< s(846)
s(852) =< s(846)
s(853) =< s(845)
s(856) =< s(845)
s(853) =< s(847)
s(856) =< s(847)
s(849) =< s(835)
s(860) =< s(835)
s(850) =< s(835)
s(857) =< s(835)
s(851) =< s(835)
s(852) =< s(835)
s(853) =< s(835)
s(858) =< s(835)
s(861) =< s(849)
s(862) =< s(856)
s(863) =< s(859)
s(864) =< s(838)
s(864) =< s(839)
s(865) =< s(839)
s(866) =< s(839)
s(866) =< s(837)
s(841) =< s(840)
s(867) =< s(842)
s(867) =< s(843)
s(868) =< s(843)
s(865) =< s(844)
s(868) =< s(845)
s(869) =< s(866)
s(870) =< s(838)
s(871) =< s(838)
s(872) =< s(838)
s(873) =< s(838)
s(874) =< s(838)
s(875) =< s(838)
s(872) =< s(836)
s(873) =< s(836)
s(874) =< s(836)
s(876) =< s(836)
s(877) =< s(836)
s(873) =< s(837)
s(878) =< s(837)
s(874) =< s(837)
s(870) =< s(864)
s(871) =< s(864)
s(872) =< s(864)
s(873) =< s(864)
s(874) =< s(864)
s(875) =< s(864)
s(872) =< s(840)
s(873) =< s(840)
s(876) =< s(840)
s(872) =< s(841)
s(873) =< s(841)
s(874) =< s(841)
s(876) =< s(841)
s(873) =< s(842)
s(878) =< s(842)
s(873) =< s(867)
s(874) =< s(867)
s(878) =< s(867)
s(879) =< s(844)
s(873) =< s(844)
s(879) =< s(865)
s(873) =< s(865)
s(874) =< s(845)
s(877) =< s(845)
s(874) =< s(868)
s(877) =< s(868)
s(870) =< s(835)
s(879) =< s(835)
s(871) =< s(835)
s(872) =< s(835)
s(873) =< s(835)
s(874) =< s(835)
s(880) =< s(870)
s(881) =< s(877)
s(882) =< s(878)
s(883) =< s(835)
s(884) =< s(839)
s(885) =< s(838)
s(885) =< s(842)
s(886) =< s(838)
s(887) =< s(838)
s(886) =< s(836)
s(887) =< s(836)
s(888) =< s(836)
s(886) =< s(837)
s(886) =< s(840)
s(886) =< s(842)
s(889) =< s(846)
s(886) =< s(846)
s(887) =< s(847)
s(888) =< s(847)
s(889) =< s(835)
s(886) =< s(835)
s(887) =< s(835)
s(890) =< s(888)

  with precondition: [V_nGroups>=3,V_alphaSize>=1] 

* Chain [51]: 1*s(904)+2*s(911)+1*s(913)+1*s(914)+1*s(915)+6*s(916)+1*s(917)+1*s(918)+2*s(920)+2*s(921)+1*s(923)+1*s(924)+2*s(925)+2*s(926)+1*s(927)+1*s(929)+1*s(932)+1*s(933)+1*s(934)+6*s(935)+1*s(936)+1*s(937)+1*s(940)+1*s(941)+2*s(942)+2*s(943)+2
  Such that:s(891) =< V_nGroups
s(892) =< V_nGroups+V_alphaSize
s(893) =< 2*V_nGroups+V_alphaSize
s(894) =< V_alphaSize
s(895) =< V_alphaSize+1
s(896) =< 2*V_alphaSize
s(897) =< 2*V_alphaSize+2
s(898) =< 3*V_alphaSize
s(899) =< 3*V_alphaSize+3
s(900) =< V_alphaSize/2
s(901) =< 3/2*V_alphaSize
s(902) =< s(900)
s(903) =< s(901)
s(895) =< s(894)
s(902) =< s(894)
s(904) =< s(894)
s(897) =< s(896)
s(905) =< s(898)
s(903) =< s(898)
s(905) =< s(899)
s(904) =< s(899)
s(906) =< s(894)
s(906) =< s(895)
s(907) =< s(895)
s(908) =< s(895)
s(908) =< s(893)
s(909) =< s(898)
s(909) =< s(905)
s(910) =< s(905)
s(907) =< s(902)
s(910) =< s(903)
s(911) =< s(908)
s(912) =< s(894)
s(913) =< s(894)
s(914) =< s(894)
s(915) =< s(894)
s(916) =< s(894)
s(917) =< s(894)
s(914) =< s(892)
s(915) =< s(892)
s(916) =< s(892)
s(918) =< s(892)
s(919) =< s(892)
s(920) =< s(892)
s(921) =< s(892)
s(915) =< s(893)
s(922) =< s(893)
s(916) =< s(893)
s(921) =< s(893)
s(912) =< s(906)
s(913) =< s(906)
s(914) =< s(906)
s(915) =< s(906)
s(916) =< s(906)
s(917) =< s(906)
s(914) =< s(896)
s(915) =< s(896)
s(918) =< s(896)
s(914) =< s(897)
s(915) =< s(897)
s(916) =< s(897)
s(918) =< s(897)
s(915) =< s(898)
s(922) =< s(898)
s(915) =< s(909)
s(916) =< s(909)
s(922) =< s(909)
s(923) =< s(902)
s(915) =< s(902)
s(923) =< s(907)
s(915) =< s(907)
s(916) =< s(903)
s(919) =< s(903)
s(916) =< s(910)
s(919) =< s(910)
s(912) =< s(891)
s(923) =< s(891)
s(913) =< s(891)
s(920) =< s(891)
s(914) =< s(891)
s(915) =< s(891)
s(916) =< s(891)
s(921) =< s(891)
s(924) =< s(912)
s(925) =< s(919)
s(926) =< s(922)
s(927) =< s(894)
s(927) =< s(898)
s(928) =< s(894)
s(929) =< s(894)
s(929) =< s(893)
s(930) =< s(898)
s(928) =< s(902)
s(930) =< s(903)
s(931) =< s(894)
s(932) =< s(894)
s(933) =< s(894)
s(934) =< s(894)
s(935) =< s(894)
s(936) =< s(894)
s(933) =< s(892)
s(934) =< s(892)
s(935) =< s(892)
s(937) =< s(892)
s(938) =< s(892)
s(934) =< s(893)
s(939) =< s(893)
s(935) =< s(893)
s(933) =< s(896)
s(934) =< s(896)
s(937) =< s(896)
s(935) =< s(896)
s(934) =< s(898)
s(939) =< s(898)
s(935) =< s(898)
s(940) =< s(902)
s(934) =< s(902)
s(940) =< s(928)
s(934) =< s(928)
s(935) =< s(903)
s(938) =< s(903)
s(935) =< s(930)
s(938) =< s(930)
s(931) =< s(891)
s(940) =< s(891)
s(932) =< s(891)
s(933) =< s(891)
s(934) =< s(891)
s(935) =< s(891)
s(941) =< s(931)
s(942) =< s(938)
s(943) =< s(939)

  with precondition: [V_nGroups>=3,V_alphaSize>=2] 


Closed-form bounds of eval_sendMTFValues_start(V_nGroups,V_alphaSize,B): 
-------------------------------------
* Chain [66] with precondition: [V_nGroups=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [65] with precondition: [V_nGroups=1,0>=V_alphaSize] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [64] with precondition: [V_nGroups=1,V_alphaSize>=1] 
    - Upper bound: 6*V_alphaSize+5 
    - Complexity: n 
* Chain [63] with precondition: [V_nGroups=2] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [62] with precondition: [V_nGroups=2,0>=V_alphaSize] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [61] with precondition: [V_nGroups=2,V_alphaSize>=1] 
    - Upper bound: 9*V_alphaSize+8 
    - Complexity: n 
* Chain [60] with precondition: [V_nGroups=2,V_alphaSize>=2] 
    - Upper bound: 5*V_alphaSize+2 
    - Complexity: n 
* Chain [59] with precondition: [0>=V_nGroups] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [58] with precondition: [0>=V_alphaSize,V_nGroups>=2] 
    - Upper bound: 2*V_nGroups+1 
    - Complexity: n 
* Chain [57] with precondition: [0>=V_alphaSize,V_nGroups>=3] 
    - Upper bound: 4*V_nGroups+2 
    - Complexity: n 
* Chain [56] with precondition: [V_nGroups>=1] 
    - Upper bound: nat(V_alphaSize)*11+2*V_nGroups+nat(V_nGroups+V_alphaSize)*3+nat(2*V_nGroups+V_alphaSize)*2+nat(V_alphaSize/2) 
    - Complexity: n 
* Chain [55] with precondition: [V_nGroups>=2] 
    - Upper bound: 6*V_nGroups+1+nat(V_alphaSize)*33+nat(V_nGroups+V_alphaSize)*9+nat(2*V_nGroups+V_alphaSize)*6+nat(V_alphaSize/2)*3 
    - Complexity: n 
* Chain [54] with precondition: [V_nGroups>=2,V_alphaSize>=1] 
    - Upper bound: 29*V_nGroups+119/2*V_alphaSize+5 
    - Complexity: n 
* Chain [53] with precondition: [V_nGroups>=3] 
    - Upper bound: 4*V_nGroups+2+nat(V_alphaSize)*22+nat(V_nGroups+V_alphaSize)*6+nat(2*V_nGroups+V_alphaSize)*4+nat(V_alphaSize/2)*2 
    - Complexity: n 
* Chain [52] with precondition: [V_nGroups>=3,V_alphaSize>=1] 
    - Upper bound: 40*V_nGroups+79*V_alphaSize+8 
    - Complexity: n 
* Chain [51] with precondition: [V_nGroups>=3,V_alphaSize>=2] 
    - Upper bound: 18*V_nGroups+42*V_alphaSize+4 
    - Complexity: n 

### Maximum cost of eval_sendMTFValues_start(V_nGroups,V_alphaSize,B): max([max([2,nat(V_nGroups)*2+1+(nat(V_nGroups)*2+1)]),nat(V_alphaSize)*2+max([nat(V_alphaSize)+max([nat(V_alphaSize)*2+max([2,nat(V_nGroups+V_alphaSize)*3+nat(V_alphaSize)*6+nat(2*V_nGroups+V_alphaSize)*2+nat(V_alphaSize/2)+max([nat(V_alphaSize)*14+2+nat(V_nGroups+V_alphaSize)*7+nat(V_alphaSize+1)*2+nat(2*V_nGroups+V_alphaSize)*2+nat(V_alphaSize/2),nat(V_nGroups)*2+1+nat(V_alphaSize)*11+nat(V_nGroups+V_alphaSize)*3+nat(2*V_nGroups+V_alphaSize)*2+nat(V_alphaSize/2)+max([1,nat(V_nGroups+V_alphaSize)*3+nat(V_alphaSize)*11+nat(2*V_nGroups+V_alphaSize)*2+nat(V_alphaSize/2)+max([nat(V_nGroups+V_alphaSize)*4+nat(V_alphaSize)*2+nat(V_alphaSize+1)*4,nat(V_nGroups)*2+1+nat(V_alphaSize)*14+nat(V_nGroups+V_alphaSize)*7+nat(V_alphaSize+1)*6+nat(2*V_nGroups+V_alphaSize)*2+nat(V_alphaSize/2)+nat(V_nGroups)*2])])+nat(V_nGroups)*2])]),nat(V_alphaSize+1)*6+2]),nat(V_alphaSize+1)*4+1])]) 
Asymptotic class: n 
* Total analysis performed in 748 ms.

