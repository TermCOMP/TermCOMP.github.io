WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_foo_bb1_in/4,eval_foo_bb2_in/4]
1. non_recursive  : [eval_foo_stop/1]
2. non_recursive  : [eval_foo_bb3_in/1]
3. non_recursive  : [eval_foo_bb1_in_loop_cont/2]
4. non_recursive  : [eval_foo_bb0_in/3]
5. non_recursive  : [eval_foo_start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_foo_bb1_in/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_foo_bb0_in/3
5. SCC is partially evaluated into eval_foo_start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_foo_bb1_in/4 
* CE 7 is refined into CE [8] 
* CE 3 is refined into CE [9] 
* CE 4 is discarded (unfeasible) 
* CE 5 is refined into CE [10] 
* CE 6 is discarded (unfeasible) 


### Cost equations --> "Loop" of eval_foo_bb1_in/4 
* CEs [9] --> Loop 8 
* CEs [10] --> Loop 9 
* CEs [8] --> Loop 10 

### Ranking functions of CR eval_foo_bb1_in(V_y,V__02,V__0,B) 
* RF of phase [8]: [V_y-V__02]

#### Partial ranking functions of CR eval_foo_bb1_in(V_y,V__02,V__0,B) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V_y-V__02


### Specialization of cost equations eval_foo_bb0_in/3 
* CE 2 is refined into CE [11,12] 


### Cost equations --> "Loop" of eval_foo_bb0_in/3 
* CEs [11] --> Loop 11 
* CEs [12] --> Loop 12 

### Ranking functions of CR eval_foo_bb0_in(V_x,V_y,B) 

#### Partial ranking functions of CR eval_foo_bb0_in(V_x,V_y,B) 


### Specialization of cost equations eval_foo_start/5 
* CE 1 is refined into CE [13,14] 


### Cost equations --> "Loop" of eval_foo_start/5 
* CEs [14] --> Loop 13 
* CEs [13] --> Loop 14 

### Ranking functions of CR eval_foo_start(V_flag,V_c,V_x,V_y,B) 

#### Partial ranking functions of CR eval_foo_start(V_flag,V_c,V_x,V_y,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_foo_bb1_in(V_y,V__02,V__0,B):
* Chain [[8],9,10]: 1*it(8)+1
  Such that:it(8) =< V_y-V__02

  with precondition: [V__0=1,B=2,V_y>=V__02+1] 

* Chain [9,10]: 1
  with precondition: [V__0=1,B=2,V__02>=V_y] 


#### Cost of chains of eval_foo_bb0_in(V_x,V_y,B):
* Chain [12]: 1*s(1)+1
  Such that:s(1) =< -V_x+V_y

  with precondition: [V_y>=V_x+1] 

* Chain [11]: 1
  with precondition: [V_x>=V_y] 


#### Cost of chains of eval_foo_start(V_flag,V_c,V_x,V_y,B):
* Chain [14]: 1*s(2)+1
  Such that:s(2) =< -V_x+V_y

  with precondition: [V_y>=V_x+1] 

* Chain [13]: 1
  with precondition: [V_x>=V_y] 


Closed-form bounds of eval_foo_start(V_flag,V_c,V_x,V_y,B): 
-------------------------------------
* Chain [14] with precondition: [V_y>=V_x+1] 
    - Upper bound: -V_x+V_y+1 
    - Complexity: n 
* Chain [13] with precondition: [V_x>=V_y] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of eval_foo_start(V_flag,V_c,V_x,V_y,B): nat(-V_x+V_y)+1 
Asymptotic class: n 
* Total analysis performed in 35 ms.

