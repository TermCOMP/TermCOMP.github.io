WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_zwritehexstring_at_extracted_bb3_in/3]
1. recursive  : [eval_zwritehexstring_at_extracted_bb1_in/2,eval_zwritehexstring_at_extracted_bb2_in/2,eval_zwritehexstring_at_extracted_bb3_in_loop_cont/5,eval_zwritehexstring_at_extracted_bb4_in/4]
2. non_recursive  : [eval_zwritehexstring_at_extracted_stop/1]
3. non_recursive  : [eval_zwritehexstring_at_extracted_bb5_in/1]
4. non_recursive  : [eval_zwritehexstring_at_extracted_bb1_in_loop_cont/2]
5. non_recursive  : [eval_zwritehexstring_at_extracted_bb0_in/2]
6. non_recursive  : [eval_zwritehexstring_at_extracted_start/2]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_zwritehexstring_at_extracted_bb3_in/3
1. SCC is partially evaluated into eval_zwritehexstring_at_extracted_bb1_in/2
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_zwritehexstring_at_extracted_bb0_in/2
6. SCC is partially evaluated into eval_zwritehexstring_at_extracted_start/2

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_zwritehexstring_at_extracted_bb3_in/3 
* CE 7 is refined into CE [8] 
* CE 6 is refined into CE [9] 


### Cost equations --> "Loop" of eval_zwritehexstring_at_extracted_bb3_in/3 
* CEs [9] --> Loop 8 
* CEs [8] --> Loop 9 

### Ranking functions of CR eval_zwritehexstring_at_extracted_bb3_in(V_count_0,B,C) 
* RF of phase [8]: [V_count_0-1]

#### Partial ranking functions of CR eval_zwritehexstring_at_extracted_bb3_in(V_count_0,B,C) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V_count_0-1


### Specialization of cost equations eval_zwritehexstring_at_extracted_bb1_in/2 
* CE 5 is refined into CE [10] 
* CE 4 is refined into CE [11] 
* CE 3 is refined into CE [12,13] 


### Cost equations --> "Loop" of eval_zwritehexstring_at_extracted_bb1_in/2 
* CEs [11] --> Loop 10 
* CEs [13] --> Loop 11 
* CEs [12] --> Loop 12 
* CEs [10] --> Loop 13 

### Ranking functions of CR eval_zwritehexstring_at_extracted_bb1_in(V__0,B) 
* RF of phase [10]: [V__0-63]

#### Partial ranking functions of CR eval_zwritehexstring_at_extracted_bb1_in(V__0,B) 
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    V__0-63


### Specialization of cost equations eval_zwritehexstring_at_extracted_bb0_in/2 
* CE 2 is refined into CE [14,15,16,17,18,19] 


### Cost equations --> "Loop" of eval_zwritehexstring_at_extracted_bb0_in/2 
* CEs [19] --> Loop 14 
* CEs [18] --> Loop 15 
* CEs [17] --> Loop 16 
* CEs [16] --> Loop 17 
* CEs [15] --> Loop 18 
* CEs [14] --> Loop 19 

### Ranking functions of CR eval_zwritehexstring_at_extracted_bb0_in(V_len,B) 

#### Partial ranking functions of CR eval_zwritehexstring_at_extracted_bb0_in(V_len,B) 


### Specialization of cost equations eval_zwritehexstring_at_extracted_start/2 
* CE 1 is refined into CE [20,21,22,23,24,25] 


### Cost equations --> "Loop" of eval_zwritehexstring_at_extracted_start/2 
* CEs [25] --> Loop 20 
* CEs [24] --> Loop 21 
* CEs [23] --> Loop 22 
* CEs [22] --> Loop 23 
* CEs [21] --> Loop 24 
* CEs [20] --> Loop 25 

### Ranking functions of CR eval_zwritehexstring_at_extracted_start(V_len,B) 

#### Partial ranking functions of CR eval_zwritehexstring_at_extracted_start(V_len,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_zwritehexstring_at_extracted_bb3_in(V_count_0,B,C):
* Chain [[8],9]: 1*it(8)+0
  Such that:it(8) =< V_count_0

  with precondition: [B=2,C=1,64>=V_count_0,V_count_0>=2] 

* Chain [9]: 0
  with precondition: [V_count_0=1,B=2,C=1] 


#### Cost of chains of eval_zwritehexstring_at_extracted_bb1_in(V__0,B):
* Chain [[10],13]: 1*it(10)+1*s(3)+0
  Such that:aux(4) =< V__0
it(10) =< aux(4)
s(3) =< aux(4)*64

  with precondition: [B=3,V__0>=64] 

* Chain [[10],12,13]: 1*it(10)+1*s(3)+1
  Such that:aux(5) =< V__0
it(10) =< aux(5)
s(3) =< aux(5)*64

  with precondition: [B=3,V__0>=65] 

* Chain [[10],11,13]: 1*it(10)+1*s(3)+1*s(4)+1
  Such that:s(4) =< 63
aux(6) =< V__0
s(4) =< aux(6)
it(10) =< aux(6)
s(3) =< aux(6)*64

  with precondition: [B=3,V__0>=66] 

* Chain [13]: 0
  with precondition: [B=3,0>=V__0] 

* Chain [12,13]: 1
  with precondition: [V__0=1,B=3] 

* Chain [11,13]: 1*s(4)+1
  Such that:s(4) =< V__0

  with precondition: [B=3,63>=V__0,V__0>=2] 


#### Cost of chains of eval_zwritehexstring_at_extracted_bb0_in(V_len,B):
* Chain [19]: 1
  with precondition: [V_len=1] 

* Chain [18]: 1*s(5)+1
  Such that:s(5) =< V_len

  with precondition: [63>=V_len,V_len>=2] 

* Chain [17]: 0
  with precondition: [0>=V_len] 

* Chain [16]: 1*s(7)+1*s(8)+0
  Such that:s(6) =< V_len
s(7) =< s(6)
s(8) =< s(6)*64

  with precondition: [V_len>=64] 

* Chain [15]: 1*s(10)+1*s(11)+1
  Such that:s(9) =< V_len
s(10) =< s(9)
s(11) =< s(9)*64

  with precondition: [V_len>=65] 

* Chain [14]: 1*s(12)+1*s(14)+1*s(15)+1
  Such that:s(12) =< 63
s(13) =< V_len
s(12) =< s(13)
s(14) =< s(13)
s(15) =< s(13)*64

  with precondition: [V_len>=66] 


#### Cost of chains of eval_zwritehexstring_at_extracted_start(V_len,B):
* Chain [25]: 1
  with precondition: [V_len=1] 

* Chain [24]: 1*s(16)+1
  Such that:s(16) =< V_len

  with precondition: [63>=V_len,V_len>=2] 

* Chain [23]: 0
  with precondition: [0>=V_len] 

* Chain [22]: 1*s(18)+1*s(19)+0
  Such that:s(17) =< V_len
s(18) =< s(17)
s(19) =< s(17)*64

  with precondition: [V_len>=64] 

* Chain [21]: 1*s(21)+1*s(22)+1
  Such that:s(20) =< V_len
s(21) =< s(20)
s(22) =< s(20)*64

  with precondition: [V_len>=65] 

* Chain [20]: 1*s(23)+1*s(25)+1*s(26)+1
  Such that:s(23) =< 63
s(24) =< V_len
s(23) =< s(24)
s(25) =< s(24)
s(26) =< s(24)*64

  with precondition: [V_len>=66] 


Closed-form bounds of eval_zwritehexstring_at_extracted_start(V_len,B): 
-------------------------------------
* Chain [25] with precondition: [V_len=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [24] with precondition: [63>=V_len,V_len>=2] 
    - Upper bound: V_len+1 
    - Complexity: n 
* Chain [23] with precondition: [0>=V_len] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [22] with precondition: [V_len>=64] 
    - Upper bound: 65*V_len 
    - Complexity: n 
* Chain [21] with precondition: [V_len>=65] 
    - Upper bound: 65*V_len+1 
    - Complexity: n 
* Chain [20] with precondition: [V_len>=66] 
    - Upper bound: 65*V_len+64 
    - Complexity: n 

### Maximum cost of eval_zwritehexstring_at_extracted_start(V_len,B): max([1,nat(V_len)+max([1,nat(V_len)*64+64])]) 
Asymptotic class: n 
* Total analysis performed in 47 ms.

