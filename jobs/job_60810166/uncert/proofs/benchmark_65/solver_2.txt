WORST_CASE(?,O(1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_foo_2/3,eval_foo_3/4,eval_foo_bb1_in/3,eval_foo_bb2_in/3]
1. non_recursive  : [eval_foo_stop/1]
2. non_recursive  : [eval_foo__critedge_in/1]
3. non_recursive  : [eval_foo_bb1_in_loop_cont/2]
4. non_recursive  : [eval_foo_bb0_in/3]
5. non_recursive  : [eval_foo_start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_foo_bb1_in/3
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_foo_bb0_in/3
5. SCC is partially evaluated into eval_foo_start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_foo_bb1_in/3 
* CE 5 is refined into CE [7] 
* CE 6 is refined into CE [8] 
* CE 4 is refined into CE [9] 
* CE 3 is refined into CE [10] 


### Cost equations --> "Loop" of eval_foo_bb1_in/3 
* CEs [10] --> Loop 7 
* CEs [7] --> Loop 8 
* CEs [8] --> Loop 9 
* CEs [9] --> Loop 10 

### Ranking functions of CR eval_foo_bb1_in(V__01,V__0,B) 

#### Partial ranking functions of CR eval_foo_bb1_in(V__01,V__0,B) 


### Specialization of cost equations eval_foo_bb0_in/3 
* CE 2 is refined into CE [11,12,13,14] 


### Cost equations --> "Loop" of eval_foo_bb0_in/3 
* CEs [14] --> Loop 11 
* CEs [13] --> Loop 12 
* CEs [12] --> Loop 13 
* CEs [11] --> Loop 14 

### Ranking functions of CR eval_foo_bb0_in(V_x,V_oldx,B) 

#### Partial ranking functions of CR eval_foo_bb0_in(V_x,V_oldx,B) 


### Specialization of cost equations eval_foo_start/3 
* CE 1 is refined into CE [15,16,17,18] 


### Cost equations --> "Loop" of eval_foo_start/3 
* CEs [18] --> Loop 15 
* CEs [17] --> Loop 16 
* CEs [16] --> Loop 17 
* CEs [15] --> Loop 18 

### Ranking functions of CR eval_foo_start(V_x,V_oldx,B) 

#### Partial ranking functions of CR eval_foo_start(V_x,V_oldx,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_foo_bb1_in(V__01,V__0,B):
* Chain [10]: 0
  with precondition: [B=2,1>=V__0] 

* Chain [9]: 0
  with precondition: [B=2,0>=2*V__0+V__01+1] 

* Chain [8]: 0
  with precondition: [B=2,V__01+2*V__0>=1] 

* Chain [7,10]: 1
  with precondition: [B=2,V__01+2*V__0=0,V__0>=2] 

* Chain [7,9]: 1
  with precondition: [B=2,V__01+2*V__0=0,V__0>=2] 

* Chain [7,8]: 1
  with precondition: [B=2,V__01+2*V__0=0,V__0>=2] 


#### Cost of chains of eval_foo_bb0_in(V_x,V_oldx,B):
* Chain [14]: 1
  with precondition: [V_oldx+2*V_x=0,V_x>=2] 

* Chain [13]: 0
  with precondition: [1>=V_x] 

* Chain [12]: 0
  with precondition: [0>=2*V_x+V_oldx+1] 

* Chain [11]: 0
  with precondition: [V_oldx+2*V_x>=1] 


#### Cost of chains of eval_foo_start(V_x,V_oldx,B):
* Chain [18]: 1
  with precondition: [V_oldx+2*V_x=0,V_x>=2] 

* Chain [17]: 0
  with precondition: [1>=V_x] 

* Chain [16]: 0
  with precondition: [0>=2*V_x+V_oldx+1] 

* Chain [15]: 0
  with precondition: [V_oldx+2*V_x>=1] 


Closed-form bounds of eval_foo_start(V_x,V_oldx,B): 
-------------------------------------
* Chain [18] with precondition: [V_oldx+2*V_x=0,V_x>=2] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [17] with precondition: [1>=V_x] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [16] with precondition: [0>=2*V_x+V_oldx+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [15] with precondition: [V_oldx+2*V_x>=1] 
    - Upper bound: 0 
    - Complexity: constant 

### Maximum cost of eval_foo_start(V_x,V_oldx,B): 1 
Asymptotic class: constant 
* Total analysis performed in 25 ms.

