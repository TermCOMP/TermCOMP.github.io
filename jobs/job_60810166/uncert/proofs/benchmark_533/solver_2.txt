WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_inflate_stored_bb1_in/3,eval_inflate_stored_bb2_in/3]
1. recursive  : [eval_inflate_stored_bb4_in/3,eval_inflate_stored_bb5_in/3]
2. non_recursive  : [eval_inflate_stored_stop/1]
3. non_recursive  : [eval_inflate_stored_bb12_in/1]
4. recursive  : [eval_inflate_stored_bb10_in/4,eval_inflate_stored_bb9_in/4]
5. recursive  : [eval_inflate_stored_bb11_in/6,eval_inflate_stored_bb8_in/4,eval_inflate_stored_bb9_in_loop_cont/7]
6. non_recursive  : [eval_inflate_stored_bb8_in_loop_cont/2]
7. non_recursive  : [eval_inflate_stored_bb7_in/4]
8. non_recursive  : [eval_inflate_stored_9/5]
9. non_recursive  : [eval_inflate_stored_8/4]
10. non_recursive  : [eval_inflate_stored_bb6_in/4]
11. non_recursive  : [eval_inflate_stored_bb4_in_loop_cont/5]
12. non_recursive  : [eval_inflate_stored_bb3_in/4]
13. non_recursive  : [eval_inflate_stored_bb1_in_loop_cont/5]
14. non_recursive  : [eval_inflate_stored_bb0_in/4]
15. non_recursive  : [eval_inflate_stored_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_inflate_stored_bb1_in/3
1. SCC is partially evaluated into eval_inflate_stored_bb4_in/3
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_inflate_stored_bb9_in/4
5. SCC is partially evaluated into eval_inflate_stored_bb8_in/4
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into eval_inflate_stored_bb7_in/4
8. SCC is partially evaluated into eval_inflate_stored_9/5
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_inflate_stored_bb3_in/4
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_inflate_stored_bb0_in/4
15. SCC is partially evaluated into eval_inflate_stored_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_inflate_stored_bb1_in/3 
* CE 4 is refined into CE [16] 
* CE 3 is refined into CE [17] 


### Cost equations --> "Loop" of eval_inflate_stored_bb1_in/3 
* CEs [17] --> Loop 16 
* CEs [16] --> Loop 17 

### Ranking functions of CR eval_inflate_stored_bb1_in(V__01,B,C) 
* RF of phase [16]: [-V__01/8+2]

#### Partial ranking functions of CR eval_inflate_stored_bb1_in(V__01,B,C) 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    -V__01/8+2


### Specialization of cost equations eval_inflate_stored_bb4_in/3 
* CE 7 is refined into CE [18] 
* CE 6 is refined into CE [19] 


### Cost equations --> "Loop" of eval_inflate_stored_bb4_in/3 
* CEs [19] --> Loop 18 
* CEs [18] --> Loop 19 

### Ranking functions of CR eval_inflate_stored_bb4_in(V__1,B,C) 
* RF of phase [18]: [-V__1/8+2]

#### Partial ranking functions of CR eval_inflate_stored_bb4_in(V__1,B,C) 
* Partial RF of phase [18]:
  - RF of loop [18:1]:
    -V__1/8+2


### Specialization of cost equations eval_inflate_stored_bb9_in/4 
* CE 15 is refined into CE [20] 
* CE 14 is refined into CE [21] 


### Cost equations --> "Loop" of eval_inflate_stored_bb9_in/4 
* CEs [21] --> Loop 20 
* CEs [20] --> Loop 21 

### Ranking functions of CR eval_inflate_stored_bb9_in(V_limit,V__3,B,C) 
* RF of phase [20]: [V_limit/8-V__3/8]

#### Partial ranking functions of CR eval_inflate_stored_bb9_in(V_limit,V__3,B,C) 
* Partial RF of phase [20]:
  - RF of loop [20:1]:
    V_limit/8-V__3/8


### Specialization of cost equations eval_inflate_stored_bb8_in/4 
* CE 13 is refined into CE [22] 
* CE 12 is refined into CE [23,24] 


### Cost equations --> "Loop" of eval_inflate_stored_bb8_in/4 
* CEs [24] --> Loop 22 
* CEs [23] --> Loop 23 
* CEs [22] --> Loop 24 

### Ranking functions of CR eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) 
* RF of phase [22]: [V__0]
* RF of phase [23]: [V__0,-V_limit/8+V__2/8+1/8]

#### Partial ranking functions of CR eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B) 
* Partial RF of phase [22]:
  - RF of loop [22:1]:
    V__0
* Partial RF of phase [23]:
  - RF of loop [23:1]:
    V__0
    -V_limit/8+V__2/8+1/8


### Specialization of cost equations eval_inflate_stored_bb7_in/4 
* CE 11 is refined into CE [25,26,27,28] 


### Cost equations --> "Loop" of eval_inflate_stored_bb7_in/4 
* CEs [28] --> Loop 25 
* CEs [27] --> Loop 26 
* CEs [26] --> Loop 27 
* CEs [25] --> Loop 28 

### Ranking functions of CR eval_inflate_stored_bb7_in(V_n,V_limit,V__1,B) 

#### Partial ranking functions of CR eval_inflate_stored_bb7_in(V_n,V_limit,V__1,B) 


### Specialization of cost equations eval_inflate_stored_9/5 
* CE 9 is refined into CE [29] 
* CE 8 is refined into CE [30] 
* CE 10 is refined into CE [31,32,33,34] 


### Cost equations --> "Loop" of eval_inflate_stored_9/5 
* CEs [29] --> Loop 29 
* CEs [30] --> Loop 30 
* CEs [34] --> Loop 31 
* CEs [33] --> Loop 32 
* CEs [32] --> Loop 33 
* CEs [31] --> Loop 34 

### Ranking functions of CR eval_inflate_stored_9(V_n,V_limit,V__1,V_6,B) 

#### Partial ranking functions of CR eval_inflate_stored_9(V_n,V_limit,V__1,V_6,B) 


### Specialization of cost equations eval_inflate_stored_bb3_in/4 
* CE 5 is refined into CE [35,36,37,38,39,40,41,42,43,44,45,46] 


### Cost equations --> "Loop" of eval_inflate_stored_bb3_in/4 
* CEs [39,40] --> Loop 35 
* CEs [38] --> Loop 36 
* CEs [37] --> Loop 37 
* CEs [36] --> Loop 38 
* CEs [43] --> Loop 39 
* CEs [42] --> Loop 40 
* CEs [45,46] --> Loop 41 
* CEs [44] --> Loop 42 
* CEs [35] --> Loop 43 
* CEs [41] --> Loop 44 

### Ranking functions of CR eval_inflate_stored_bb3_in(V_n,V_limit,V__01,B) 

#### Partial ranking functions of CR eval_inflate_stored_bb3_in(V_n,V_limit,V__01,B) 


### Specialization of cost equations eval_inflate_stored_bb0_in/4 
* CE 2 is refined into CE [47,48,49,50,51,52,53,54,55,56,57,58,59,60,61] 


### Cost equations --> "Loop" of eval_inflate_stored_bb0_in/4 
* CEs [59] --> Loop 45 
* CEs [56] --> Loop 46 
* CEs [50] --> Loop 47 
* CEs [55] --> Loop 48 
* CEs [53] --> Loop 49 
* CEs [54] --> Loop 50 
* CEs [61] --> Loop 51 
* CEs [52] --> Loop 52 
* CEs [60] --> Loop 53 
* CEs [51] --> Loop 54 
* CEs [58] --> Loop 55 
* CEs [49] --> Loop 56 
* CEs [57] --> Loop 57 
* CEs [48] --> Loop 58 
* CEs [47] --> Loop 59 

### Ranking functions of CR eval_inflate_stored_bb0_in(V_n,V_k,V_limit,B) 

#### Partial ranking functions of CR eval_inflate_stored_bb0_in(V_n,V_k,V_limit,B) 


### Specialization of cost equations eval_inflate_stored_start/4 
* CE 1 is refined into CE [62,63,64,65,66,67,68,69,70,71,72,73,74,75,76] 


### Cost equations --> "Loop" of eval_inflate_stored_start/4 
* CEs [76] --> Loop 60 
* CEs [75] --> Loop 61 
* CEs [74] --> Loop 62 
* CEs [73] --> Loop 63 
* CEs [72] --> Loop 64 
* CEs [71] --> Loop 65 
* CEs [70] --> Loop 66 
* CEs [69] --> Loop 67 
* CEs [68] --> Loop 68 
* CEs [67] --> Loop 69 
* CEs [66] --> Loop 70 
* CEs [65] --> Loop 71 
* CEs [64] --> Loop 72 
* CEs [63] --> Loop 73 
* CEs [62] --> Loop 74 

### Ranking functions of CR eval_inflate_stored_start(V_n,V_k,V_limit,B) 

#### Partial ranking functions of CR eval_inflate_stored_start(V_n,V_k,V_limit,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_inflate_stored_bb1_in(V__01,B,C):
* Chain [[16],17]: 1*it(16)+0
  Such that:it(16) =< -V__01/8+2

  with precondition: [B=3,23>=C,C>=16,C>=V__01+8] 

* Chain [17]: 0
  with precondition: [B=3,V__01=C,V__01>=16] 


#### Cost of chains of eval_inflate_stored_bb4_in(V__1,B,C):
* Chain [[18],19]: 1*it(18)+0
  Such that:it(18) =< -V__1/8+2

  with precondition: [B=4,23>=C,C>=16,C>=V__1+8] 

* Chain [19]: 0
  with precondition: [B=4,V__1=C,V__1>=16] 


#### Cost of chains of eval_inflate_stored_bb9_in(V_limit,V__3,B,C):
* Chain [[20],21]: 1*it(20)+0
  Such that:it(20) =< V_limit/8-V__3/8

  with precondition: [B=2,C>=V_limit,C>=V__3+8,V_limit+7>=C] 

* Chain [21]: 0
  with precondition: [B=2,V__3=C,V__3>=V_limit] 


#### Cost of chains of eval_inflate_stored_bb8_in(V_limit,V__2,V__0,B):
* Chain [[23],[22],24]: 1*it(22)+1*it(23)+1*s(3)+0
  Such that:it(23) =< -V_limit/8+V__2/8+1/8
it(22) =< V__0
aux(1) =< V_limit/8-V__2/8+V__0
it(22) =< aux(1)
s(3) =< aux(1)

  with precondition: [B=5,V__0>=2,V__2>=V_limit,V_limit+8*V__0>=V__2+9] 

* Chain [[23],24]: 1*it(23)+0
  Such that:it(23) =< -V_limit/8+V__2/8+1/8
it(23) =< V__0

  with precondition: [B=5,V__0>=1,V__2+8>=8*V__0+V_limit] 

* Chain [[22],24]: 1*it(22)+1*s(3)+0
  Such that:s(3) =< V_limit/8-V__2/8+V__0
it(22) =< V__0

  with precondition: [B=5,V__0>=1,V_limit>=V__2+1] 

* Chain [24]: 0
  with precondition: [B=5,0>=V__0] 


#### Cost of chains of eval_inflate_stored_bb7_in(V_n,V_limit,V__1,B):
* Chain [28]: 0
  with precondition: [0>=V_n] 

* Chain [27]: 1*s(4)+1*s(5)+0
  Such that:s(5) =< V_n
s(4) =< V_n+V_limit/8-V__1/8+2

  with precondition: [V_n>=1,V_limit+15>=V__1] 

* Chain [26]: 1*s(6)+0
  Such that:s(6) =< V_n
s(6) =< -V_limit/8+V__1/8

  with precondition: [V_n>=1,V__1>=8*V_n+V_limit+8] 

* Chain [25]: 1*s(7)+1*s(8)+1*s(10)+0
  Such that:s(8) =< V_n
s(9) =< V_n+V_limit/8-V__1/8+2
s(7) =< -V_limit/8+V__1/8
s(8) =< s(9)
s(10) =< s(9)

  with precondition: [V_n>=2,V__1>=V_limit+16,V_limit+8*V_n+7>=V__1] 


#### Cost of chains of eval_inflate_stored_9(V_n,V_limit,V__1,V_6,B):
* Chain [34]: 0
  with precondition: [V_6=0,0>=V_n] 

* Chain [33]: 1*s(11)+1*s(12)+0
  Such that:s(11) =< V_n
s(12) =< V_n+V_limit/8-V__1/8+2

  with precondition: [V_6=0,V_n>=1,V_limit+15>=V__1] 

* Chain [32]: 1*s(13)+0
  Such that:s(13) =< V_n

  with precondition: [V_6=0,V_n>=1,V__1>=8*V_n+V_limit+8] 

* Chain [31]: 1*s(14)+1*s(16)+1*s(17)+0
  Such that:s(14) =< V_n
s(15) =< V_n+V_limit/8-V__1/8+2
s(16) =< -V_limit/8+V__1/8
s(14) =< s(15)
s(17) =< s(15)

  with precondition: [V_6=0,V_n>=2,V__1>=V_limit+16,V_limit+8*V_n+7>=V__1] 

* Chain [30]: 0
  with precondition: [0>=V_6+1] 

* Chain [29]: 0
  with precondition: [V_6>=1] 


#### Cost of chains of eval_inflate_stored_bb3_in(V_n,V_limit,V__01,B):
* Chain [44]: 1*s(18)+0
  Such that:s(18) =< -V__01/8+4

  with precondition: [0>=V_n,31>=V__01] 

* Chain [43]: 0
  with precondition: [0>=V_n,V__01>=32] 

* Chain [42]: 1*s(19)+1*s(20)+1*s(22)+1*s(23)+0
  Such that:s(20) =< V_n
s(21) =< V_n+V_limit/8-V__01/8+3
s(22) =< -V_limit/8+23/8
s(19) =< -V__01/8+4
aux(2) =< V_n+2
s(21) =< aux(2)
s(22) =< aux(2)
s(20) =< s(21)
s(23) =< s(21)

  with precondition: [7>=V_limit,31>=V__01,V_n>=2,V_limit+8*V_n>=9,V_limit+8*V_n+15>=V__01] 

* Chain [41]: 2*s(24)+0
  Such that:aux(3) =< -V__01/8+4
s(24) =< aux(3)

  with precondition: [31>=V__01] 

* Chain [40]: 1*s(26)+1*s(27)+1*s(28)+0
  Such that:s(27) =< V_n
s(28) =< V_n+V_limit/8
s(28) =< V_n+V_limit/8-V__01/8+3
s(26) =< -V__01/8+4

  with precondition: [31>=V__01,V_n>=1,V_limit>=1,V_limit+23>=V__01] 

* Chain [39]: 1*s(29)+1*s(30)+0
  Such that:s(30) =< V_n
s(29) =< -V__01/8+4

  with precondition: [31>=V__01,V_n>=1,15>=8*V_n+V_limit] 

* Chain [38]: 1*s(31)+1*s(32)+0
  Such that:s(31) =< V_n
s(32) =< V_n+V_limit/8-V__01/8+4

  with precondition: [V_n>=1,V__01>=32,V_limit+31>=V__01] 

* Chain [37]: 1*s(33)+0
  Such that:s(33) =< V_n

  with precondition: [V_n>=1,V__01>=32,V__01>=8*V_n+V_limit+24] 

* Chain [36]: 1*s(34)+1*s(36)+1*s(37)+0
  Such that:s(34) =< V_n
s(35) =< V_n+V_limit/8-V__01/8+4
s(36) =< -V_limit/8+V__01/8
s(34) =< s(35)
s(37) =< s(35)

  with precondition: [V_n>=2,V__01>=32,V__01>=V_limit+32,V_limit+8*V_n+23>=V__01] 

* Chain [35]: 0
  with precondition: [V__01>=32] 


#### Cost of chains of eval_inflate_stored_bb0_in(V_n,V_k,V_limit,B):
* Chain [59]: 1*s(38)+0
  Such that:s(38) =< V_n/8-V_k/8+4

  with precondition: [0>=V_n,V_k>=V_n+16,V_n+31>=V_k] 

* Chain [58]: 0
  with precondition: [0>=V_n,V_k>=V_n+32] 

* Chain [57]: 1*s(39)+1*s(40)+0
  Such that:s(40) =< 2
s(39) =< V_n/8-V_k/8+2
s(40) =< V_n/8-V_k/8+3

  with precondition: [0>=V_n,V_n+15>=V_k] 

* Chain [56]: 1*s(41)+1*s(43)+1*s(44)+1*s(46)+0
  Such that:s(41) =< V_n
s(45) =< V_n+2
s(44) =< V_n/8-V_k/8+4
s(42) =< 9/8*V_n-V_k/8+V_limit/8+3
s(43) =< -V_limit/8+23/8
s(42) =< s(45)
s(43) =< s(45)
s(41) =< s(42)
s(46) =< s(42)

  with precondition: [7>=V_limit,V_n>=2,V_k>=V_n+16,V_n+31>=V_k,V_limit+8*V_n>=9,V_limit+9*V_n+15>=V_k] 

* Chain [55]: 1*s(47)+1*s(48)+1*s(50)+1*s(51)+1*s(53)+0
  Such that:s(51) =< 2
s(48) =< V_n
s(52) =< V_n+2
s(49) =< V_n+V_limit/8+1
s(47) =< V_n/8-V_k/8+2
s(51) =< V_n/8-V_k/8+3
s(49) =< 9/8*V_n-V_k/8+V_limit/8+2
s(50) =< -V_limit/8+23/8
s(49) =< s(52)
s(50) =< s(52)
s(48) =< s(49)
s(53) =< s(49)

  with precondition: [7>=V_limit,V_n>=2,V_n+15>=V_k,V_limit+8*V_n>=9] 

* Chain [54]: 1*s(54)+1*s(55)+1*s(56)+0
  Such that:s(54) =< V_n
s(55) =< V_n+V_limit/8
s(56) =< V_n/8-V_k/8+4
s(55) =< 9/8*V_n-V_k/8+V_limit/8+3

  with precondition: [V_n>=1,V_limit>=1,V_k>=V_n+16,V_n+31>=V_k,V_limit+V_n+23>=V_k] 

* Chain [53]: 1*s(57)+1*s(58)+1*s(59)+1*s(60)+0
  Such that:s(60) =< 2
s(58) =< V_n
s(59) =< V_n+V_limit/8
s(57) =< V_n/8-V_k/8+2
s(60) =< V_n/8-V_k/8+3

  with precondition: [V_n>=1,V_limit>=1,V_n+15>=V_k] 

* Chain [52]: 1*s(61)+1*s(62)+0
  Such that:s(61) =< V_n
s(62) =< V_n/8-V_k/8+4

  with precondition: [V_n>=1,15>=8*V_n+V_limit,V_k>=V_n+16,V_n+31>=V_k] 

* Chain [51]: 1*s(63)+1*s(64)+1*s(65)+0
  Such that:s(65) =< 2
s(64) =< V_n
s(63) =< V_n/8-V_k/8+2
s(65) =< V_n/8-V_k/8+3

  with precondition: [V_n>=1,15>=8*V_n+V_limit,V_n+15>=V_k] 

* Chain [50]: 1*s(66)+0
  Such that:s(66) =< V_n

  with precondition: [V_n>=1,V_k>=V_n+32,V_k>=9*V_n+V_limit+24] 

* Chain [49]: 1*s(67)+1*s(68)+0
  Such that:s(67) =< V_n
s(68) =< 9/8*V_n-V_k/8+V_limit/8+4

  with precondition: [V_n>=1,V_k>=V_n+32,V_limit+V_n+31>=V_k] 

* Chain [48]: 1*s(69)+1*s(71)+1*s(72)+0
  Such that:s(69) =< V_n
s(71) =< -V_n/8+V_k/8-V_limit/8
s(70) =< 9/8*V_n-V_k/8+V_limit/8+4
s(69) =< s(70)
s(72) =< s(70)

  with precondition: [V_n>=2,V_k>=V_n+32,V_k>=V_limit+V_n+32,V_limit+9*V_n+23>=V_k] 

* Chain [47]: 2*s(74)+0
  Such that:s(73) =< V_n/8-V_k/8+4
s(74) =< s(73)

  with precondition: [V_k>=V_n+16,V_n+31>=V_k] 

* Chain [46]: 0
  with precondition: [V_k>=V_n+32] 

* Chain [45]: 1*s(75)+2*s(77)+0
  Such that:s(76) =< 2
s(75) =< V_n/8-V_k/8+2
s(76) =< V_n/8-V_k/8+3
s(77) =< s(76)

  with precondition: [V_n+15>=V_k] 


#### Cost of chains of eval_inflate_stored_start(V_n,V_k,V_limit,B):
* Chain [74]: 1*s(78)+0
  Such that:s(78) =< V_n/8-V_k/8+4

  with precondition: [0>=V_n,V_k>=V_n+16,V_n+31>=V_k] 

* Chain [73]: 0
  with precondition: [0>=V_n,V_k>=V_n+32] 

* Chain [72]: 1*s(79)+1*s(80)+0
  Such that:s(79) =< 2
s(80) =< V_n/8-V_k/8+2
s(79) =< V_n/8-V_k/8+3

  with precondition: [0>=V_n,V_n+15>=V_k] 

* Chain [71]: 1*s(81)+1*s(83)+1*s(85)+1*s(86)+0
  Such that:s(81) =< V_n
s(82) =< V_n+2
s(83) =< V_n/8-V_k/8+4
s(84) =< 9/8*V_n-V_k/8+V_limit/8+3
s(85) =< -V_limit/8+23/8
s(84) =< s(82)
s(85) =< s(82)
s(81) =< s(84)
s(86) =< s(84)

  with precondition: [7>=V_limit,V_n>=2,V_k>=V_n+16,V_n+31>=V_k,V_limit+8*V_n>=9,V_limit+9*V_n+15>=V_k] 

* Chain [70]: 1*s(87)+1*s(88)+1*s(91)+1*s(92)+1*s(93)+0
  Such that:s(87) =< 2
s(88) =< V_n
s(89) =< V_n+2
s(90) =< V_n+V_limit/8+1
s(91) =< V_n/8-V_k/8+2
s(87) =< V_n/8-V_k/8+3
s(90) =< 9/8*V_n-V_k/8+V_limit/8+2
s(92) =< -V_limit/8+23/8
s(90) =< s(89)
s(92) =< s(89)
s(88) =< s(90)
s(93) =< s(90)

  with precondition: [7>=V_limit,V_n>=2,V_n+15>=V_k,V_limit+8*V_n>=9] 

* Chain [69]: 1*s(94)+1*s(95)+1*s(96)+0
  Such that:s(94) =< V_n
s(95) =< V_n+V_limit/8
s(96) =< V_n/8-V_k/8+4
s(95) =< 9/8*V_n-V_k/8+V_limit/8+3

  with precondition: [V_n>=1,V_limit>=1,V_k>=V_n+16,V_n+31>=V_k,V_limit+V_n+23>=V_k] 

* Chain [68]: 1*s(97)+1*s(98)+1*s(99)+1*s(100)+0
  Such that:s(97) =< 2
s(98) =< V_n
s(99) =< V_n+V_limit/8
s(100) =< V_n/8-V_k/8+2
s(97) =< V_n/8-V_k/8+3

  with precondition: [V_n>=1,V_limit>=1,V_n+15>=V_k] 

* Chain [67]: 1*s(101)+1*s(102)+0
  Such that:s(101) =< V_n
s(102) =< V_n/8-V_k/8+4

  with precondition: [V_n>=1,15>=8*V_n+V_limit,V_k>=V_n+16,V_n+31>=V_k] 

* Chain [66]: 1*s(103)+1*s(104)+1*s(105)+0
  Such that:s(103) =< 2
s(104) =< V_n
s(105) =< V_n/8-V_k/8+2
s(103) =< V_n/8-V_k/8+3

  with precondition: [V_n>=1,15>=8*V_n+V_limit,V_n+15>=V_k] 

* Chain [65]: 1*s(106)+0
  Such that:s(106) =< V_n

  with precondition: [V_n>=1,V_k>=V_n+32,V_k>=9*V_n+V_limit+24] 

* Chain [64]: 1*s(107)+1*s(108)+0
  Such that:s(107) =< V_n
s(108) =< 9/8*V_n-V_k/8+V_limit/8+4

  with precondition: [V_n>=1,V_k>=V_n+32,V_limit+V_n+31>=V_k] 

* Chain [63]: 1*s(109)+1*s(110)+1*s(112)+0
  Such that:s(109) =< V_n
s(110) =< -V_n/8+V_k/8-V_limit/8
s(111) =< 9/8*V_n-V_k/8+V_limit/8+4
s(109) =< s(111)
s(112) =< s(111)

  with precondition: [V_n>=2,V_k>=V_n+32,V_k>=V_limit+V_n+32,V_limit+9*V_n+23>=V_k] 

* Chain [62]: 2*s(114)+0
  Such that:s(113) =< V_n/8-V_k/8+4
s(114) =< s(113)

  with precondition: [V_k>=V_n+16,V_n+31>=V_k] 

* Chain [61]: 0
  with precondition: [V_k>=V_n+32] 

* Chain [60]: 1*s(116)+2*s(117)+0
  Such that:s(115) =< 2
s(116) =< V_n/8-V_k/8+2
s(115) =< V_n/8-V_k/8+3
s(117) =< s(115)

  with precondition: [V_n+15>=V_k] 


Closed-form bounds of eval_inflate_stored_start(V_n,V_k,V_limit,B): 
-------------------------------------
* Chain [74] with precondition: [0>=V_n,V_k>=V_n+16,V_n+31>=V_k] 
    - Upper bound: V_n/8-V_k/8+4 
    - Complexity: n 
* Chain [73] with precondition: [0>=V_n,V_k>=V_n+32] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [72] with precondition: [0>=V_n,V_n+15>=V_k] 
    - Upper bound: V_n/8-V_k/8+4 
    - Complexity: n 
* Chain [71] with precondition: [7>=V_limit,V_n>=2,V_k>=V_n+16,V_n+31>=V_k,V_limit+8*V_n>=9,V_limit+9*V_n+15>=V_k] 
    - Upper bound: 9/4*V_n-V_k/4+79/8 
    - Complexity: n 
* Chain [70] with precondition: [7>=V_limit,V_n>=2,V_n+15>=V_k,V_limit+8*V_n>=9] 
    - Upper bound: 17/8*V_n-V_k/8+63/8 
    - Complexity: n 
* Chain [69] with precondition: [V_n>=1,V_limit>=1,V_k>=V_n+16,V_n+31>=V_k,V_n+V_limit+23>=V_k] 
    - Upper bound: 17/8*V_n-V_k/8+V_limit/8+4 
    - Complexity: n 
* Chain [68] with precondition: [V_n>=1,V_limit>=1,V_n+15>=V_k] 
    - Upper bound: 17/8*V_n-V_k/8+V_limit/8+4 
    - Complexity: n 
* Chain [67] with precondition: [V_n>=1,15>=8*V_n+V_limit,V_k>=V_n+16,V_n+31>=V_k] 
    - Upper bound: 9/8*V_n-V_k/8+4 
    - Complexity: n 
* Chain [66] with precondition: [V_n>=1,15>=8*V_n+V_limit,V_n+15>=V_k] 
    - Upper bound: 9/8*V_n-V_k/8+4 
    - Complexity: n 
* Chain [65] with precondition: [V_n>=1,V_k>=V_n+32,V_k>=9*V_n+V_limit+24] 
    - Upper bound: V_n 
    - Complexity: n 
* Chain [64] with precondition: [V_n>=1,V_k>=V_n+32,V_n+V_limit+31>=V_k] 
    - Upper bound: 17/8*V_n-V_k/8+V_limit/8+4 
    - Complexity: n 
* Chain [63] with precondition: [V_n>=2,V_k>=V_n+32,V_k>=V_n+V_limit+32,V_limit+9*V_n+23>=V_k] 
    - Upper bound: 2*V_n+4 
    - Complexity: n 
* Chain [62] with precondition: [V_k>=V_n+16,V_n+31>=V_k] 
    - Upper bound: V_n/4-V_k/4+8 
    - Complexity: n 
* Chain [61] with precondition: [V_k>=V_n+32] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [60] with precondition: [V_n+15>=V_k] 
    - Upper bound: V_n/8-V_k/8+6 
    - Complexity: n 

### Maximum cost of eval_inflate_stored_start(V_n,V_k,V_limit,B): max([max([nat(V_n/8-V_k/8+4)*2,nat(V_n/8-V_k/8+2)+4]),nat(V_n)+max([max([nat(V_n/8-V_k/8+4)+max([nat(V_n+V_limit/8),nat(-V_limit/8+23/8)+nat(9/8*V_n-V_k/8+V_limit/8+3)]),nat(-V_n/8+V_k/8-V_limit/8)+nat(9/8*V_n-V_k/8+V_limit/8+4)]),nat(V_n/8-V_k/8+2)+2+max([nat(V_n+V_limit/8),nat(-V_limit/8+23/8)+nat(V_n+V_limit/8+1)])])]) 
Asymptotic class: n 
* Total analysis performed in 168 ms.

