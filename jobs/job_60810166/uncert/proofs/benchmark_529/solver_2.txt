WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_cf_decode_eol_bb1_in/10,eval_cf_decode_eol_bb2_in/10,eval_cf_decode_eol_bb3_in/10,eval_cf_decode_eol_bb4_in/10,eval_cf_decode_eol_bb5_in/10,eval_cf_decode_eol_bb6_in/10,eval_cf_decode_eol_bb7_in/12]
1. non_recursive  : [eval_cf_decode_eol_stop/1]
2. non_recursive  : [eval_cf_decode_eol_bb13_in/1]
3. recursive  : [eval_cf_decode_eol_bb10_in/5,eval_cf_decode_eol_bb11_in/5,eval_cf_decode_eol_bb12_in/5,eval_cf_decode_eol_bb14_in/5,eval_cf_decode_eol_bb15_in/7,eval_cf_decode_eol_bb9_in/5]
4. non_recursive  : [eval_cf_decode_eol_bb9_in_loop_cont/2]
5. non_recursive  : [eval_cf_decode_eol_bb8_in/5]
6. non_recursive  : [eval_cf_decode_eol_bb1_in_loop_cont/6]
7. non_recursive  : [eval_cf_decode_eol_bb0_in/5]
8. non_recursive  : [eval_cf_decode_eol_start/6]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_cf_decode_eol_bb1_in/10
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into eval_cf_decode_eol_bb9_in/5
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_cf_decode_eol_bb8_in/5
6. SCC is partially evaluated into eval_cf_decode_eol_bb1_in_loop_cont/6
7. SCC is partially evaluated into eval_cf_decode_eol_bb0_in/5
8. SCC is partially evaluated into eval_cf_decode_eol_start/6

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_cf_decode_eol_bb1_in/10 
* CE 5 is refined into CE [16] 
* CE 7 is refined into CE [17] 
* CE 6 is refined into CE [18] 
* CE 4 is refined into CE [19] 
* CE 3 is refined into CE [20] 


### Cost equations --> "Loop" of eval_cf_decode_eol_bb1_in/10 
* CEs [18] --> Loop 16 
* CEs [19] --> Loop 17 
* CEs [20] --> Loop 18 
* CEs [16] --> Loop 19 
* CEs [17] --> Loop 20 

### Ranking functions of CR eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) 
* RF of phase [16,17,18]: [-V_zeros_0+11]

#### Partial ranking functions of CR eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F) 
* Partial RF of phase [16,17,18]:
  - RF of loop [16:1]:
    V_bits_left_0 depends on loops [17:1,18:1] 
  - RF of loop [16:1,17:1,18:1]:
    -V_zeros_0+11
  - RF of loop [17:1]:
    -V_bits_left_0/7+1/7 depends on loops [16:1] 
    V_pr_limit-V_p_0
  - RF of loop [18:1]:
    -V_bits_left_0/23+1/23 depends on loops [16:1] 
    V_pr_limit/3-V_p_0/3-2/3


### Specialization of cost equations eval_cf_decode_eol_bb9_in/5 
* CE 15 is refined into CE [21] 
* CE 13 is refined into CE [22] 
* CE 12 is refined into CE [23] 
* CE 14 is refined into CE [24] 


### Cost equations --> "Loop" of eval_cf_decode_eol_bb9_in/5 
* CEs [24] --> Loop 21 
* CEs [21] --> Loop 22 
* CEs [22] --> Loop 23 
* CEs [23] --> Loop 24 

### Ranking functions of CR eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) 

#### Partial ranking functions of CR eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B) 
* Partial RF of phase [22,23,24]:
  - RF of loop [22:1]:
    -V_12+V_bits_left_3+1 depends on loops [23:1,24:1] 
    V_bits_left_3 depends on loops [23:1,24:1] 
  - RF of loop [23:1]:
    V_12/7-V_bits_left_3/7 depends on loops [22:1] 
    -V_bits_left_3/7+2/7 depends on loops [22:1] 
    V_pr_limit-V_p_3
  - RF of loop [24:1]:
    V_12/23-V_bits_left_3/23 depends on loops [22:1] 
    -V_bits_left_3/23+2/23 depends on loops [22:1] 
    V_pr_limit/3-V_p_3/3-2/3


### Specialization of cost equations eval_cf_decode_eol_bb8_in/5 
* CE 10 is refined into CE [25,26] 
* CE 11 is refined into CE [27,28] 


### Cost equations --> "Loop" of eval_cf_decode_eol_bb8_in/5 
* CEs [25] --> Loop 25 
* CEs [26] --> Loop 26 
* CEs [28] --> Loop 27 
* CEs [27] --> Loop 28 

### Ranking functions of CR eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) 

#### Partial ranking functions of CR eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B) 


### Specialization of cost equations eval_cf_decode_eol_bb1_in_loop_cont/6 
* CE 9 is refined into CE [29] 
* CE 8 is refined into CE [30,31,32,33] 


### Cost equations --> "Loop" of eval_cf_decode_eol_bb1_in_loop_cont/6 
* CEs [29] --> Loop 29 
* CEs [33] --> Loop 30 
* CEs [32] --> Loop 31 
* CEs [31] --> Loop 32 
* CEs [30] --> Loop 33 

### Ranking functions of CR eval_cf_decode_eol_bb1_in_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR eval_cf_decode_eol_bb1_in_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations eval_cf_decode_eol_bb0_in/5 
* CE 2 is refined into CE [34,35,36,37,38,39] 


### Cost equations --> "Loop" of eval_cf_decode_eol_bb0_in/5 
* CEs [37] --> Loop 34 
* CEs [34] --> Loop 35 
* CEs [38] --> Loop 36 
* CEs [39] --> Loop 37 
* CEs [35] --> Loop 38 
* CEs [36] --> Loop 39 

### Ranking functions of CR eval_cf_decode_eol_bb0_in(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) 

#### Partial ranking functions of CR eval_cf_decode_eol_bb0_in(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) 


### Specialization of cost equations eval_cf_decode_eol_start/6 
* CE 1 is refined into CE [40,41,42,43,44,45] 


### Cost equations --> "Loop" of eval_cf_decode_eol_start/6 
* CEs [45] --> Loop 40 
* CEs [44] --> Loop 41 
* CEs [43] --> Loop 42 
* CEs [42] --> Loop 43 
* CEs [41] --> Loop 44 
* CEs [40] --> Loop 45 

### Ranking functions of CR eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) 

#### Partial ranking functions of CR eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_cf_decode_eol_bb1_in(V_ss_K,V_pr_limit,V_bits_left_0,V_zeros_0,V_p_0,B,C,D,E,F):
* Chain [[16,17,18],20]: 1*it(16)+1*it(17)+1*it(18)+0
  Such that:aux(7) =< V_pr_limit-V_p_0
it(18) =< V_pr_limit/3-V_p_0/3
aux(8) =< -V_p_0+F
it(18) =< -V_p_0/3+F/3
aux(11) =< -V_zeros_0+11
it(17) =< aux(7)
it(18) =< aux(7)
it(17) =< aux(8)
it(18) =< aux(8)
it(16) =< aux(11)
it(17) =< aux(11)
it(18) =< aux(11)

  with precondition: [B=2,V_ss_K=C,V_pr_limit=D,V_bits_left_0+V_zeros_0+8*F=8*V_p_0+E+11,10>=V_zeros_0,V_zeros_0>=0,V_bits_left_0+253>=23*V_zeros_0+E,E+11>=V_bits_left_0+V_zeros_0] 

* Chain [[16,17,18],19]: 1*it(16)+1*it(17)+1*it(18)+0
  Such that:aux(7) =< V_pr_limit-V_p_0
it(18) =< V_pr_limit/3-V_p_0/3
aux(8) =< -V_bits_left_0/8-V_zeros_0/8+5/4
it(18) =< -V_bits_left_0/24-V_zeros_0/24+5/12
aux(8) =< -3*V_zeros_0+30
aux(9) =< -V_zeros_0+11
aux(12) =< -V_zeros_0+10
it(18) =< aux(12)
it(17) =< aux(7)
it(18) =< aux(7)
it(17) =< aux(8)
it(18) =< aux(8)
it(16) =< aux(9)
it(17) =< aux(9)
it(18) =< aux(9)
it(16) =< aux(12)
it(17) =< aux(12)

  with precondition: [B=3,9>=V_zeros_0,V_zeros_0>=0,10>=V_bits_left_0+V_zeros_0,V_p_0+30>=3*V_zeros_0+V_pr_limit,8*V_p_0+10>=8*V_pr_limit+V_bits_left_0+V_zeros_0] 

* Chain [19]: 0
  with precondition: [B=3,0>=V_bits_left_0,10>=V_zeros_0,V_zeros_0>=0,V_p_0>=V_pr_limit] 


#### Cost of chains of eval_cf_decode_eol_bb9_in(V_pr_limit,V_12,V_bits_left_3,V_p_3,B):
* Chain [[22,23,24],21]: 1*it(22)+1*it(23)+1*it(24)+0
  Such that:aux(25) =< V_pr_limit-V_p_3
it(24) =< V_pr_limit/3-V_p_3/3
aux(14) =< -V_12+V_bits_left_3+1
aux(13) =< V_bits_left_3
it(23) =< aux(25)
it(24) =< aux(25)
it(22) =< it(24)*23+it(23)*7+aux(14)
it(22) =< it(24)*23+it(23)*7+aux(13)

  with precondition: [B=3,2>=V_12,V_12>=1] 

* Chain [21]: 0
  with precondition: [B=3,2>=V_12,V_12>=1,V_p_3>=V_pr_limit,V_12>=V_bits_left_3+1] 


#### Cost of chains of eval_cf_decode_eol_bb8_in(V_ss_K,V_pr_limit,V_bits_left_0,V_p_0,B):
* Chain [28]: 1*s(2)+1*s(5)+1*s(6)+0
  Such that:s(1) =< V_pr_limit-V_p_0
s(2) =< V_pr_limit/3-V_p_0/3
aux(27) =< V_bits_left_0
s(5) =< s(1)
s(2) =< s(1)
s(6) =< s(2)*23+s(5)*7+aux(27)

  with precondition: [0>=V_ss_K] 

* Chain [27]: 0
  with precondition: [0>=V_ss_K,0>=V_bits_left_0,V_p_0>=V_pr_limit] 

* Chain [26]: 0
  with precondition: [1>=V_bits_left_0,V_ss_K>=1,V_p_0>=V_pr_limit] 

* Chain [25]: 1*s(8)+1*s(11)+1*s(12)+0
  Such that:s(7) =< V_pr_limit-V_p_0
s(8) =< V_pr_limit/3-V_p_0/3
aux(28) =< V_bits_left_0
s(11) =< s(7)
s(8) =< s(7)
s(12) =< s(8)*23+s(11)*7+aux(28)

  with precondition: [V_ss_K>=1] 


#### Cost of chains of eval_cf_decode_eol_bb1_in_loop_cont(A,B,C,D,E,F):
* Chain [33]: 1*s(14)+1*s(16)+1*s(17)+0
  Such that:s(13) =< C-E
s(14) =< C/3-E/3
s(15) =< D
s(16) =< s(13)
s(14) =< s(13)
s(17) =< s(14)*23+s(16)*7+s(15)

  with precondition: [A=2,0>=B] 

* Chain [32]: 0
  with precondition: [A=2,0>=B,0>=D,E>=C] 

* Chain [31]: 0
  with precondition: [A=2,1>=D,B>=1,E>=C] 

* Chain [30]: 1*s(19)+1*s(21)+1*s(22)+0
  Such that:s(18) =< C-E
s(19) =< C/3-E/3
s(20) =< D
s(21) =< s(18)
s(19) =< s(18)
s(22) =< s(19)*23+s(21)*7+s(20)

  with precondition: [A=2,B>=1] 

* Chain [29]: 0
  with precondition: [A=3] 


#### Cost of chains of eval_cf_decode_eol_bb0_in(V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B):
* Chain [39]: 1*s(24)+1*s(27)+1*s(28)+0
  Such that:s(25) =< -V_ss_bits_left/8+3/2
s(24) =< -V_ss_bits_left/24+1/2
s(23) =< -V_pr_ptr+V_pr_limit
s(24) =< -V_pr_ptr/3+V_pr_limit/3
aux(29) =< 11
aux(30) =< 33
s(24) =< aux(29)
s(23) =< aux(30)
s(25) =< aux(30)
s(27) =< s(23)
s(24) =< s(23)
s(27) =< s(25)
s(24) =< s(25)
s(28) =< aux(29)
s(27) =< aux(29)

  with precondition: [12>=V_ss_bits_left,V_ss_K>=1,V_pr_ptr+33>=V_pr_limit,8*V_pr_ptr+12>=8*V_pr_limit+V_ss_bits_left] 

* Chain [38]: 1*s(30)+1*s(33)+1*s(34)+0
  Such that:s(31) =< -V_ss_bits_left/8+11/8
s(30) =< -V_ss_bits_left/24+11/24
s(29) =< -V_pr_ptr+V_pr_limit
s(30) =< -V_pr_ptr/3+V_pr_limit/3
aux(31) =< 11
aux(32) =< 33
s(30) =< aux(31)
s(29) =< aux(32)
s(31) =< aux(32)
s(33) =< s(29)
s(30) =< s(29)
s(33) =< s(31)
s(30) =< s(31)
s(34) =< aux(31)
s(33) =< aux(31)

  with precondition: [11>=V_ss_bits_left,0>=V_ss_K,V_pr_ptr+33>=V_pr_limit,8*V_pr_ptr+11>=8*V_pr_limit+V_ss_bits_left] 

* Chain [37]: 1*s(36)+1*s(40)+1*s(41)+0
  Such that:s(38) =< 11
s(37) =< -V_ss_bits_left/8+5/4
s(36) =< -V_ss_bits_left/24+5/12
s(35) =< -V_pr_ptr+V_pr_limit
s(36) =< -V_pr_ptr/3+V_pr_limit/3
aux(33) =< 10
aux(34) =< 30
s(36) =< aux(33)
s(35) =< aux(34)
s(37) =< aux(34)
s(40) =< s(35)
s(36) =< s(35)
s(40) =< s(37)
s(36) =< s(37)
s(41) =< s(38)
s(40) =< s(38)
s(36) =< s(38)
s(41) =< aux(33)
s(40) =< aux(33)

  with precondition: [10>=V_ss_bits_left,V_pr_ptr+30>=V_pr_limit,8*V_pr_ptr+10>=8*V_pr_limit+V_ss_bits_left] 

* Chain [36]: 0
  with precondition: [0>=V_ss_bits_left,V_pr_ptr>=V_pr_limit] 

* Chain [35]: 1*s(43)+1*s(46)+1*s(47)+1*s(49)+1*s(51)+1*s(52)+0
  Such that:s(44) =< 33
s(50) =< V_ss_bits_left+253
aux(35) =< 11
aux(36) =< -V_pr_ptr+V_pr_limit
aux(37) =< -V_pr_ptr/3+V_pr_limit/3
s(43) =< aux(35)
s(43) =< aux(37)
s(49) =< aux(37)
s(51) =< aux(36)
s(49) =< aux(36)
s(52) =< s(49)*23+s(51)*7+s(50)
s(46) =< aux(36)
s(43) =< aux(36)
s(46) =< s(44)
s(43) =< s(44)
s(47) =< aux(35)
s(46) =< aux(35)

  with precondition: [0>=V_ss_K] 

* Chain [34]: 1*s(54)+1*s(57)+1*s(58)+1*s(60)+1*s(62)+1*s(63)+0
  Such that:s(55) =< 33
s(61) =< V_ss_bits_left+253
aux(38) =< 11
aux(39) =< -V_pr_ptr+V_pr_limit
aux(40) =< -V_pr_ptr/3+V_pr_limit/3
s(54) =< aux(38)
s(54) =< aux(40)
s(60) =< aux(40)
s(62) =< aux(39)
s(60) =< aux(39)
s(63) =< s(60)*23+s(62)*7+s(61)
s(57) =< aux(39)
s(54) =< aux(39)
s(57) =< s(55)
s(54) =< s(55)
s(58) =< aux(38)
s(57) =< aux(38)

  with precondition: [V_ss_K>=1] 


#### Cost of chains of eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B):
* Chain [45]: 1*s(65)+1*s(69)+1*s(70)+0
  Such that:s(64) =< -V_ss_bits_left/8+3/2
s(65) =< -V_ss_bits_left/24+1/2
s(66) =< -V_pr_ptr+V_pr_limit
s(65) =< -V_pr_ptr/3+V_pr_limit/3
aux(41) =< 11
aux(42) =< 33
s(65) =< aux(41)
s(66) =< aux(42)
s(64) =< aux(42)
s(69) =< s(66)
s(65) =< s(66)
s(69) =< s(64)
s(65) =< s(64)
s(70) =< aux(41)
s(69) =< aux(41)

  with precondition: [12>=V_ss_bits_left,V_ss_K>=1,V_pr_ptr+33>=V_pr_limit,8*V_pr_ptr+12>=8*V_pr_limit+V_ss_bits_left] 

* Chain [44]: 1*s(72)+1*s(76)+1*s(77)+0
  Such that:s(71) =< -V_ss_bits_left/8+11/8
s(72) =< -V_ss_bits_left/24+11/24
s(73) =< -V_pr_ptr+V_pr_limit
s(72) =< -V_pr_ptr/3+V_pr_limit/3
aux(43) =< 11
aux(44) =< 33
s(72) =< aux(43)
s(73) =< aux(44)
s(71) =< aux(44)
s(76) =< s(73)
s(72) =< s(73)
s(76) =< s(71)
s(72) =< s(71)
s(77) =< aux(43)
s(76) =< aux(43)

  with precondition: [11>=V_ss_bits_left,0>=V_ss_K,V_pr_ptr+33>=V_pr_limit,8*V_pr_ptr+11>=8*V_pr_limit+V_ss_bits_left] 

* Chain [43]: 1*s(80)+1*s(84)+1*s(85)+0
  Such that:s(78) =< 11
s(79) =< -V_ss_bits_left/8+5/4
s(80) =< -V_ss_bits_left/24+5/12
s(81) =< -V_pr_ptr+V_pr_limit
s(80) =< -V_pr_ptr/3+V_pr_limit/3
aux(45) =< 10
aux(46) =< 30
s(80) =< aux(45)
s(81) =< aux(46)
s(79) =< aux(46)
s(84) =< s(81)
s(80) =< s(81)
s(84) =< s(79)
s(80) =< s(79)
s(85) =< s(78)
s(84) =< s(78)
s(80) =< s(78)
s(85) =< aux(45)
s(84) =< aux(45)

  with precondition: [10>=V_ss_bits_left,V_pr_ptr+30>=V_pr_limit,8*V_pr_ptr+10>=8*V_pr_limit+V_ss_bits_left] 

* Chain [42]: 0
  with precondition: [0>=V_ss_bits_left,V_pr_ptr>=V_pr_limit] 

* Chain [41]: 1*s(91)+1*s(92)+1*s(93)+1*s(94)+1*s(95)+1*s(96)+0
  Such that:s(88) =< 11
s(86) =< 33
s(87) =< V_ss_bits_left+253
s(89) =< -V_pr_ptr+V_pr_limit
s(90) =< -V_pr_ptr/3+V_pr_limit/3
s(91) =< s(88)
s(91) =< s(90)
s(92) =< s(90)
s(93) =< s(89)
s(92) =< s(89)
s(94) =< s(92)*23+s(93)*7+s(87)
s(95) =< s(89)
s(91) =< s(89)
s(95) =< s(86)
s(91) =< s(86)
s(96) =< s(88)
s(95) =< s(88)

  with precondition: [0>=V_ss_K] 

* Chain [40]: 1*s(102)+1*s(103)+1*s(104)+1*s(105)+1*s(106)+1*s(107)+0
  Such that:s(99) =< 11
s(97) =< 33
s(98) =< V_ss_bits_left+253
s(100) =< -V_pr_ptr+V_pr_limit
s(101) =< -V_pr_ptr/3+V_pr_limit/3
s(102) =< s(99)
s(102) =< s(101)
s(103) =< s(101)
s(104) =< s(100)
s(103) =< s(100)
s(105) =< s(103)*23+s(104)*7+s(98)
s(106) =< s(100)
s(102) =< s(100)
s(106) =< s(97)
s(102) =< s(97)
s(107) =< s(99)
s(106) =< s(99)

  with precondition: [V_ss_K>=1] 


Closed-form bounds of eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B): 
-------------------------------------
* Chain [45] with precondition: [12>=V_ss_bits_left,V_ss_K>=1,V_pr_ptr+33>=V_pr_limit,8*V_pr_ptr+12>=8*V_pr_limit+V_ss_bits_left] 
    - Upper bound: 55 
    - Complexity: constant 
* Chain [44] with precondition: [11>=V_ss_bits_left,0>=V_ss_K,V_pr_ptr+33>=V_pr_limit,8*V_pr_ptr+11>=8*V_pr_limit+V_ss_bits_left] 
    - Upper bound: 55 
    - Complexity: constant 
* Chain [43] with precondition: [10>=V_ss_bits_left,V_pr_ptr+30>=V_pr_limit,8*V_pr_ptr+10>=8*V_pr_limit+V_ss_bits_left] 
    - Upper bound: 51 
    - Complexity: constant 
* Chain [42] with precondition: [0>=V_ss_bits_left,V_pr_ptr>=V_pr_limit] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [41] with precondition: [0>=V_ss_K] 
    - Upper bound: nat(V_ss_bits_left+253)+55+nat(-V_pr_ptr+V_pr_limit)*8+nat(-V_pr_ptr/3+V_pr_limit/3)*24 
    - Complexity: n 
* Chain [40] with precondition: [V_ss_K>=1] 
    - Upper bound: nat(V_ss_bits_left+253)+55+nat(-V_pr_ptr+V_pr_limit)*8+nat(-V_pr_ptr/3+V_pr_limit/3)*24 
    - Complexity: n 

### Maximum cost of eval_cf_decode_eol_start(V_ss_bits,V_ss_bits_left,V_ss_K,V_pr_ptr,V_pr_limit,B): max([55,nat(V_ss_bits_left+253)+55+nat(-V_pr_ptr+V_pr_limit)*8+nat(-V_pr_ptr/3+V_pr_limit/3)*24]) 
Asymptotic class: n 
* Total analysis performed in 211 ms.

