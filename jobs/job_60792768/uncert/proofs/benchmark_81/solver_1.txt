YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/rYusq.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given CSR could be proven:

(0) CSR
(1) CSRRRRProof [EQUIVALENT, 66 ms]
(2) CSR
(3) CSRRRRProof [EQUIVALENT, 27 ms]
(4) CSR
(5) CSRRRRProof [EQUIVALENT, 0 ms]
(6) CSR
(7) CSRRRRProof [EQUIVALENT, 16 ms]
(8) CSR
(9) CSDependencyPairsProof [EQUIVALENT, 0 ms]
(10) QCSDP
(11) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
(12) AND
    (13) QCSDP
        (14) QCSUsableRulesProof [EQUIVALENT, 2 ms]
        (15) QCSDP
        (16) QCSDPMuMonotonicPoloProof [EQUIVALENT, 0 ms]
        (17) QCSDP
        (18) PIsEmptyProof [EQUIVALENT, 0 ms]
        (19) YES
    (20) QCSDP
        (21) QCSUsableRulesProof [EQUIVALENT, 0 ms]
        (22) QCSDP
        (23) QCSDPMuMonotonicPoloProof [EQUIVALENT, 25 ms]
        (24) QCSDP
        (25) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
        (26) QCSDP
        (27) QCSDPSubtermProof [EQUIVALENT, 0 ms]
        (28) QCSDP
        (29) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
        (30) TRUE
    (31) QCSDP
        (32) QCSDPSubtermProof [EQUIVALENT, 0 ms]
        (33) QCSDP
        (34) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
        (35) TRUE
    (36) QCSDP
        (37) QCSDPReductionPairProof [EQUIVALENT, 17 ms]
        (38) QCSDP
        (39) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
        (40) TRUE


----------------------------------------

(0)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U111(tt, L, N) -> U112(isNatIListKind(L), L, N)
   U112(tt, L, N) -> U113(isNat(N), L, N)
   U113(tt, L, N) -> U114(isNatKind(N), L)
   U114(tt, L) -> s(length(L))
   U12(tt, V1) -> U13(isNatList(V1))
   U121(tt, IL) -> U122(isNatIListKind(IL))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(IL), IL, M, N)
   U132(tt, IL, M, N) -> U133(isNat(M), IL, M, N)
   U133(tt, IL, M, N) -> U134(isNatKind(M), IL, M, N)
   U134(tt, IL, M, N) -> U135(isNat(N), IL, M, N)
   U135(tt, IL, M, N) -> U136(isNatKind(N), IL, M, N)
   U136(tt, IL, M, N) -> cons(N, take(M, IL))
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   U95(tt, V2) -> U96(isNatList(V2))
   U96(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNatIList(V) -> U31(isNatIListKind(V), V)
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(L), L, N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(IL), IL, M, N)

The replacement map contains the following entries:

zeros: empty set
cons: {1}
0: empty set
U101: {1}
tt: empty set
U102: {1}
isNatKind: empty set
U103: {1}
isNatIListKind: empty set
U104: {1}
U105: {1}
isNat: empty set
U106: {1}
isNatIList: empty set
U11: {1}
U12: {1}
U111: {1}
U112: {1}
U113: {1}
U114: {1}
s: {1}
length: {1}
U13: {1}
isNatList: empty set
U121: {1}
U122: {1}
nil: empty set
U131: {1}
U132: {1}
U133: {1}
U134: {1}
U135: {1}
U136: {1}
take: {1, 2}
U21: {1}
U22: {1}
U23: {1}
U31: {1}
U32: {1}
U33: {1}
U41: {1}
U42: {1}
U43: {1}
U44: {1}
U45: {1}
U46: {1}
U51: {1}
U52: {1}
U61: {1}
U62: {1}
U71: {1}
U81: {1}
U91: {1}
U92: {1}
U93: {1}
U94: {1}
U95: {1}
U96: {1}

----------------------------------------

(1) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U111(tt, L, N) -> U112(isNatIListKind(L), L, N)
   U112(tt, L, N) -> U113(isNat(N), L, N)
   U113(tt, L, N) -> U114(isNatKind(N), L)
   U114(tt, L) -> s(length(L))
   U12(tt, V1) -> U13(isNatList(V1))
   U121(tt, IL) -> U122(isNatIListKind(IL))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(IL), IL, M, N)
   U132(tt, IL, M, N) -> U133(isNat(M), IL, M, N)
   U133(tt, IL, M, N) -> U134(isNatKind(M), IL, M, N)
   U134(tt, IL, M, N) -> U135(isNat(N), IL, M, N)
   U135(tt, IL, M, N) -> U136(isNatKind(N), IL, M, N)
   U136(tt, IL, M, N) -> cons(N, take(M, IL))
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   U95(tt, V2) -> U96(isNatList(V2))
   U96(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNatIList(V) -> U31(isNatIListKind(V), V)
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(L), L, N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(IL), IL, M, N)

The replacement map contains the following entries:

zeros: empty set
cons: {1}
0: empty set
U101: {1}
tt: empty set
U102: {1}
isNatKind: empty set
U103: {1}
isNatIListKind: empty set
U104: {1}
U105: {1}
isNat: empty set
U106: {1}
isNatIList: empty set
U11: {1}
U12: {1}
U111: {1}
U112: {1}
U113: {1}
U114: {1}
s: {1}
length: {1}
U13: {1}
isNatList: empty set
U121: {1}
U122: {1}
nil: empty set
U131: {1}
U132: {1}
U133: {1}
U134: {1}
U135: {1}
U136: {1}
take: {1, 2}
U21: {1}
U22: {1}
U23: {1}
U31: {1}
U32: {1}
U33: {1}
U41: {1}
U42: {1}
U43: {1}
U44: {1}
U45: {1}
U46: {1}
U51: {1}
U52: {1}
U61: {1}
U62: {1}
U71: {1}
U81: {1}
U91: {1}
U92: {1}
U93: {1}
U94: {1}
U95: {1}
U96: {1}
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U101(x_1, x_2, x_3)) = x_1
   POL(U102(x_1, x_2, x_3)) = x_1
   POL(U103(x_1, x_2, x_3)) = x_1
   POL(U104(x_1, x_2, x_3)) = x_1
   POL(U105(x_1, x_2)) = x_1
   POL(U106(x_1)) = x_1
   POL(U11(x_1, x_2)) = x_1
   POL(U111(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U112(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U113(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U114(x_1, x_2)) = x_1 + x_2
   POL(U12(x_1, x_2)) = x_1
   POL(U121(x_1, x_2)) = 1 + x_1 + x_2
   POL(U122(x_1)) = x_1
   POL(U13(x_1)) = x_1
   POL(U131(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + x_3 + x_4
   POL(U132(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + x_3 + x_4
   POL(U133(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + x_3 + x_4
   POL(U134(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + x_3 + x_4
   POL(U135(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + x_3 + x_4
   POL(U136(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + x_3 + x_4
   POL(U21(x_1, x_2)) = x_1
   POL(U22(x_1, x_2)) = x_1
   POL(U23(x_1)) = x_1
   POL(U31(x_1, x_2)) = x_1
   POL(U32(x_1, x_2)) = x_1
   POL(U33(x_1)) = x_1
   POL(U41(x_1, x_2, x_3)) = x_1
   POL(U42(x_1, x_2, x_3)) = x_1
   POL(U43(x_1, x_2, x_3)) = x_1
   POL(U44(x_1, x_2, x_3)) = x_1
   POL(U45(x_1, x_2)) = x_1
   POL(U46(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2)) = x_1
   POL(U62(x_1)) = x_1
   POL(U71(x_1)) = x_1
   POL(U81(x_1)) = x_1
   POL(U91(x_1, x_2, x_3)) = x_1
   POL(U92(x_1, x_2, x_3)) = x_1
   POL(U93(x_1, x_2, x_3)) = x_1
   POL(U94(x_1, x_2, x_3)) = x_1
   POL(U95(x_1, x_2)) = x_1
   POL(U96(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(isNat(x_1)) = 0
   POL(isNatIList(x_1)) = 0
   POL(isNatIListKind(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(isNatList(x_1)) = 0
   POL(length(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(take(x_1, x_2)) = 1 + x_1 + x_2
   POL(tt) = 0
   POL(zeros) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U121(tt, IL) -> U122(isNatIListKind(IL))




----------------------------------------

(2)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U111(tt, L, N) -> U112(isNatIListKind(L), L, N)
   U112(tt, L, N) -> U113(isNat(N), L, N)
   U113(tt, L, N) -> U114(isNatKind(N), L)
   U114(tt, L) -> s(length(L))
   U12(tt, V1) -> U13(isNatList(V1))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(IL), IL, M, N)
   U132(tt, IL, M, N) -> U133(isNat(M), IL, M, N)
   U133(tt, IL, M, N) -> U134(isNatKind(M), IL, M, N)
   U134(tt, IL, M, N) -> U135(isNat(N), IL, M, N)
   U135(tt, IL, M, N) -> U136(isNatKind(N), IL, M, N)
   U136(tt, IL, M, N) -> cons(N, take(M, IL))
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   U95(tt, V2) -> U96(isNatList(V2))
   U96(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNatIList(V) -> U31(isNatIListKind(V), V)
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(L), L, N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(IL), IL, M, N)

The replacement map contains the following entries:

zeros: empty set
cons: {1}
0: empty set
U101: {1}
tt: empty set
U102: {1}
isNatKind: empty set
U103: {1}
isNatIListKind: empty set
U104: {1}
U105: {1}
isNat: empty set
U106: {1}
isNatIList: empty set
U11: {1}
U12: {1}
U111: {1}
U112: {1}
U113: {1}
U114: {1}
s: {1}
length: {1}
U13: {1}
isNatList: empty set
U121: {1}
U122: {1}
nil: empty set
U131: {1}
U132: {1}
U133: {1}
U134: {1}
U135: {1}
U136: {1}
take: {1, 2}
U21: {1}
U22: {1}
U23: {1}
U31: {1}
U32: {1}
U33: {1}
U41: {1}
U42: {1}
U43: {1}
U44: {1}
U45: {1}
U46: {1}
U51: {1}
U52: {1}
U61: {1}
U62: {1}
U71: {1}
U81: {1}
U91: {1}
U92: {1}
U93: {1}
U94: {1}
U95: {1}
U96: {1}

----------------------------------------

(3) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U111(tt, L, N) -> U112(isNatIListKind(L), L, N)
   U112(tt, L, N) -> U113(isNat(N), L, N)
   U113(tt, L, N) -> U114(isNatKind(N), L)
   U114(tt, L) -> s(length(L))
   U12(tt, V1) -> U13(isNatList(V1))
   U122(tt) -> nil
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(IL), IL, M, N)
   U132(tt, IL, M, N) -> U133(isNat(M), IL, M, N)
   U133(tt, IL, M, N) -> U134(isNatKind(M), IL, M, N)
   U134(tt, IL, M, N) -> U135(isNat(N), IL, M, N)
   U135(tt, IL, M, N) -> U136(isNatKind(N), IL, M, N)
   U136(tt, IL, M, N) -> cons(N, take(M, IL))
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   U95(tt, V2) -> U96(isNatList(V2))
   U96(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNatIList(V) -> U31(isNatIListKind(V), V)
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(L), L, N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(IL), IL, M, N)

The replacement map contains the following entries:

zeros: empty set
cons: {1}
0: empty set
U101: {1}
tt: empty set
U102: {1}
isNatKind: empty set
U103: {1}
isNatIListKind: empty set
U104: {1}
U105: {1}
isNat: empty set
U106: {1}
isNatIList: empty set
U11: {1}
U12: {1}
U111: {1}
U112: {1}
U113: {1}
U114: {1}
s: {1}
length: {1}
U13: {1}
isNatList: empty set
U121: {1}
U122: {1}
nil: empty set
U131: {1}
U132: {1}
U133: {1}
U134: {1}
U135: {1}
U136: {1}
take: {1, 2}
U21: {1}
U22: {1}
U23: {1}
U31: {1}
U32: {1}
U33: {1}
U41: {1}
U42: {1}
U43: {1}
U44: {1}
U45: {1}
U46: {1}
U51: {1}
U52: {1}
U61: {1}
U62: {1}
U71: {1}
U81: {1}
U91: {1}
U92: {1}
U93: {1}
U94: {1}
U95: {1}
U96: {1}
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U101(x_1, x_2, x_3)) = x_1
   POL(U102(x_1, x_2, x_3)) = 2*x_1
   POL(U103(x_1, x_2, x_3)) = 2*x_1
   POL(U104(x_1, x_2, x_3)) = x_1
   POL(U105(x_1, x_2)) = 2*x_1
   POL(U106(x_1)) = x_1
   POL(U11(x_1, x_2)) = x_1
   POL(U111(x_1, x_2, x_3)) = 2*x_1 + x_2 + x_3
   POL(U112(x_1, x_2, x_3)) = 2*x_1 + x_2
   POL(U113(x_1, x_2, x_3)) = 2*x_1 + x_2
   POL(U114(x_1, x_2)) = x_1 + x_2
   POL(U12(x_1, x_2)) = 2*x_1
   POL(U121(x_1, x_2)) = x_1 + x_2
   POL(U122(x_1)) = 2 + x_1
   POL(U13(x_1)) = x_1
   POL(U131(x_1, x_2, x_3, x_4)) = 2*x_1 + x_2 + x_3 + 2*x_4
   POL(U132(x_1, x_2, x_3, x_4)) = x_1 + x_2 + x_3 + 2*x_4
   POL(U133(x_1, x_2, x_3, x_4)) = x_1 + x_2 + x_3 + 2*x_4
   POL(U134(x_1, x_2, x_3, x_4)) = x_1 + x_2 + x_3 + 2*x_4
   POL(U135(x_1, x_2, x_3, x_4)) = x_1 + x_2 + x_3 + 2*x_4
   POL(U136(x_1, x_2, x_3, x_4)) = x_1 + x_2 + x_3 + 2*x_4
   POL(U21(x_1, x_2)) = x_1
   POL(U22(x_1, x_2)) = 2*x_1
   POL(U23(x_1)) = x_1
   POL(U31(x_1, x_2)) = 2*x_1
   POL(U32(x_1, x_2)) = x_1
   POL(U33(x_1)) = 2*x_1
   POL(U41(x_1, x_2, x_3)) = x_1
   POL(U42(x_1, x_2, x_3)) = 2*x_1
   POL(U43(x_1, x_2, x_3)) = 2*x_1
   POL(U44(x_1, x_2, x_3)) = 2*x_1
   POL(U45(x_1, x_2)) = x_1
   POL(U46(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = 2*x_1
   POL(U52(x_1)) = 2*x_1
   POL(U61(x_1, x_2)) = x_1
   POL(U62(x_1)) = x_1
   POL(U71(x_1)) = x_1
   POL(U81(x_1)) = 2*x_1
   POL(U91(x_1, x_2, x_3)) = x_1
   POL(U92(x_1, x_2, x_3)) = x_1
   POL(U93(x_1, x_2, x_3)) = x_1
   POL(U94(x_1, x_2, x_3)) = x_1
   POL(U95(x_1, x_2)) = x_1
   POL(U96(x_1)) = 2*x_1
   POL(cons(x_1, x_2)) = 2*x_1 + x_2
   POL(isNat(x_1)) = 0
   POL(isNatIList(x_1)) = 0
   POL(isNatIListKind(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(isNatList(x_1)) = 0
   POL(length(x_1)) = x_1
   POL(nil) = 0
   POL(s(x_1)) = x_1
   POL(take(x_1, x_2)) = x_1 + x_2
   POL(tt) = 0
   POL(zeros) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U122(tt) -> nil




----------------------------------------

(4)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U111(tt, L, N) -> U112(isNatIListKind(L), L, N)
   U112(tt, L, N) -> U113(isNat(N), L, N)
   U113(tt, L, N) -> U114(isNatKind(N), L)
   U114(tt, L) -> s(length(L))
   U12(tt, V1) -> U13(isNatList(V1))
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(IL), IL, M, N)
   U132(tt, IL, M, N) -> U133(isNat(M), IL, M, N)
   U133(tt, IL, M, N) -> U134(isNatKind(M), IL, M, N)
   U134(tt, IL, M, N) -> U135(isNat(N), IL, M, N)
   U135(tt, IL, M, N) -> U136(isNatKind(N), IL, M, N)
   U136(tt, IL, M, N) -> cons(N, take(M, IL))
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   U95(tt, V2) -> U96(isNatList(V2))
   U96(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNatIList(V) -> U31(isNatIListKind(V), V)
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(L), L, N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(IL), IL, M, N)

The replacement map contains the following entries:

zeros: empty set
cons: {1}
0: empty set
U101: {1}
tt: empty set
U102: {1}
isNatKind: empty set
U103: {1}
isNatIListKind: empty set
U104: {1}
U105: {1}
isNat: empty set
U106: {1}
isNatIList: empty set
U11: {1}
U12: {1}
U111: {1}
U112: {1}
U113: {1}
U114: {1}
s: {1}
length: {1}
U13: {1}
isNatList: empty set
U121: {1}
nil: empty set
U131: {1}
U132: {1}
U133: {1}
U134: {1}
U135: {1}
U136: {1}
take: {1, 2}
U21: {1}
U22: {1}
U23: {1}
U31: {1}
U32: {1}
U33: {1}
U41: {1}
U42: {1}
U43: {1}
U44: {1}
U45: {1}
U46: {1}
U51: {1}
U52: {1}
U61: {1}
U62: {1}
U71: {1}
U81: {1}
U91: {1}
U92: {1}
U93: {1}
U94: {1}
U95: {1}
U96: {1}

----------------------------------------

(5) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U111(tt, L, N) -> U112(isNatIListKind(L), L, N)
   U112(tt, L, N) -> U113(isNat(N), L, N)
   U113(tt, L, N) -> U114(isNatKind(N), L)
   U114(tt, L) -> s(length(L))
   U12(tt, V1) -> U13(isNatList(V1))
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(IL), IL, M, N)
   U132(tt, IL, M, N) -> U133(isNat(M), IL, M, N)
   U133(tt, IL, M, N) -> U134(isNatKind(M), IL, M, N)
   U134(tt, IL, M, N) -> U135(isNat(N), IL, M, N)
   U135(tt, IL, M, N) -> U136(isNatKind(N), IL, M, N)
   U136(tt, IL, M, N) -> cons(N, take(M, IL))
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   U95(tt, V2) -> U96(isNatList(V2))
   U96(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNatIList(V) -> U31(isNatIListKind(V), V)
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   length(nil) -> 0
   length(cons(N, L)) -> U111(isNatList(L), L, N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(IL), IL, M, N)

The replacement map contains the following entries:

zeros: empty set
cons: {1}
0: empty set
U101: {1}
tt: empty set
U102: {1}
isNatKind: empty set
U103: {1}
isNatIListKind: empty set
U104: {1}
U105: {1}
isNat: empty set
U106: {1}
isNatIList: empty set
U11: {1}
U12: {1}
U111: {1}
U112: {1}
U113: {1}
U114: {1}
s: {1}
length: {1}
U13: {1}
isNatList: empty set
U121: {1}
nil: empty set
U131: {1}
U132: {1}
U133: {1}
U134: {1}
U135: {1}
U136: {1}
take: {1, 2}
U21: {1}
U22: {1}
U23: {1}
U31: {1}
U32: {1}
U33: {1}
U41: {1}
U42: {1}
U43: {1}
U44: {1}
U45: {1}
U46: {1}
U51: {1}
U52: {1}
U61: {1}
U62: {1}
U71: {1}
U81: {1}
U91: {1}
U92: {1}
U93: {1}
U94: {1}
U95: {1}
U96: {1}
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U101(x_1, x_2, x_3)) = x_1
   POL(U102(x_1, x_2, x_3)) = x_1
   POL(U103(x_1, x_2, x_3)) = x_1
   POL(U104(x_1, x_2, x_3)) = x_1
   POL(U105(x_1, x_2)) = x_1
   POL(U106(x_1)) = x_1
   POL(U11(x_1, x_2)) = x_1
   POL(U111(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U112(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U113(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U114(x_1, x_2)) = x_1 + x_2
   POL(U12(x_1, x_2)) = x_1
   POL(U121(x_1, x_2)) = x_1 + x_2
   POL(U13(x_1)) = x_1
   POL(U131(x_1, x_2, x_3, x_4)) = x_1 + x_2 + x_3 + x_4
   POL(U132(x_1, x_2, x_3, x_4)) = x_1 + x_2 + x_3 + x_4
   POL(U133(x_1, x_2, x_3, x_4)) = x_1 + x_2 + x_3 + x_4
   POL(U134(x_1, x_2, x_3, x_4)) = x_1 + x_2 + x_3 + x_4
   POL(U135(x_1, x_2, x_3, x_4)) = x_1 + x_2 + x_3 + x_4
   POL(U136(x_1, x_2, x_3, x_4)) = x_1 + x_2 + x_3 + x_4
   POL(U21(x_1, x_2)) = x_1
   POL(U22(x_1, x_2)) = x_1
   POL(U23(x_1)) = x_1
   POL(U31(x_1, x_2)) = x_1
   POL(U32(x_1, x_2)) = x_1
   POL(U33(x_1)) = x_1
   POL(U41(x_1, x_2, x_3)) = x_1
   POL(U42(x_1, x_2, x_3)) = x_1
   POL(U43(x_1, x_2, x_3)) = x_1
   POL(U44(x_1, x_2, x_3)) = x_1
   POL(U45(x_1, x_2)) = x_1
   POL(U46(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2)) = x_1
   POL(U62(x_1)) = x_1
   POL(U71(x_1)) = x_1
   POL(U81(x_1)) = x_1
   POL(U91(x_1, x_2, x_3)) = x_1
   POL(U92(x_1, x_2, x_3)) = x_1
   POL(U93(x_1, x_2, x_3)) = x_1
   POL(U94(x_1, x_2, x_3)) = x_1
   POL(U95(x_1, x_2)) = x_1
   POL(U96(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(isNat(x_1)) = 1
   POL(isNatIList(x_1)) = 1
   POL(isNatIListKind(x_1)) = 1
   POL(isNatKind(x_1)) = 1
   POL(isNatList(x_1)) = 1
   POL(length(x_1)) = 1 + x_1
   POL(nil) = 1
   POL(s(x_1)) = x_1
   POL(take(x_1, x_2)) = 1 + x_1 + x_2
   POL(tt) = 1
   POL(zeros) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   length(nil) -> 0




----------------------------------------

(6)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U111(tt, L, N) -> U112(isNatIListKind(L), L, N)
   U112(tt, L, N) -> U113(isNat(N), L, N)
   U113(tt, L, N) -> U114(isNatKind(N), L)
   U114(tt, L) -> s(length(L))
   U12(tt, V1) -> U13(isNatList(V1))
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(IL), IL, M, N)
   U132(tt, IL, M, N) -> U133(isNat(M), IL, M, N)
   U133(tt, IL, M, N) -> U134(isNatKind(M), IL, M, N)
   U134(tt, IL, M, N) -> U135(isNat(N), IL, M, N)
   U135(tt, IL, M, N) -> U136(isNatKind(N), IL, M, N)
   U136(tt, IL, M, N) -> cons(N, take(M, IL))
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   U95(tt, V2) -> U96(isNatList(V2))
   U96(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNatIList(V) -> U31(isNatIListKind(V), V)
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   length(cons(N, L)) -> U111(isNatList(L), L, N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(IL), IL, M, N)

The replacement map contains the following entries:

zeros: empty set
cons: {1}
0: empty set
U101: {1}
tt: empty set
U102: {1}
isNatKind: empty set
U103: {1}
isNatIListKind: empty set
U104: {1}
U105: {1}
isNat: empty set
U106: {1}
isNatIList: empty set
U11: {1}
U12: {1}
U111: {1}
U112: {1}
U113: {1}
U114: {1}
s: {1}
length: {1}
U13: {1}
isNatList: empty set
U121: {1}
nil: empty set
U131: {1}
U132: {1}
U133: {1}
U134: {1}
U135: {1}
U136: {1}
take: {1, 2}
U21: {1}
U22: {1}
U23: {1}
U31: {1}
U32: {1}
U33: {1}
U41: {1}
U42: {1}
U43: {1}
U44: {1}
U45: {1}
U46: {1}
U51: {1}
U52: {1}
U61: {1}
U62: {1}
U71: {1}
U81: {1}
U91: {1}
U92: {1}
U93: {1}
U94: {1}
U95: {1}
U96: {1}

----------------------------------------

(7) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U111(tt, L, N) -> U112(isNatIListKind(L), L, N)
   U112(tt, L, N) -> U113(isNat(N), L, N)
   U113(tt, L, N) -> U114(isNatKind(N), L)
   U114(tt, L) -> s(length(L))
   U12(tt, V1) -> U13(isNatList(V1))
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(IL), IL, M, N)
   U132(tt, IL, M, N) -> U133(isNat(M), IL, M, N)
   U133(tt, IL, M, N) -> U134(isNatKind(M), IL, M, N)
   U134(tt, IL, M, N) -> U135(isNat(N), IL, M, N)
   U135(tt, IL, M, N) -> U136(isNatKind(N), IL, M, N)
   U136(tt, IL, M, N) -> cons(N, take(M, IL))
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   U95(tt, V2) -> U96(isNatList(V2))
   U96(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNatIList(V) -> U31(isNatIListKind(V), V)
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   length(cons(N, L)) -> U111(isNatList(L), L, N)
   take(0, IL) -> U121(isNatIList(IL), IL)
   take(s(M), cons(N, IL)) -> U131(isNatIList(IL), IL, M, N)

The replacement map contains the following entries:

zeros: empty set
cons: {1}
0: empty set
U101: {1}
tt: empty set
U102: {1}
isNatKind: empty set
U103: {1}
isNatIListKind: empty set
U104: {1}
U105: {1}
isNat: empty set
U106: {1}
isNatIList: empty set
U11: {1}
U12: {1}
U111: {1}
U112: {1}
U113: {1}
U114: {1}
s: {1}
length: {1}
U13: {1}
isNatList: empty set
U121: {1}
nil: empty set
U131: {1}
U132: {1}
U133: {1}
U134: {1}
U135: {1}
U136: {1}
take: {1, 2}
U21: {1}
U22: {1}
U23: {1}
U31: {1}
U32: {1}
U33: {1}
U41: {1}
U42: {1}
U43: {1}
U44: {1}
U45: {1}
U46: {1}
U51: {1}
U52: {1}
U61: {1}
U62: {1}
U71: {1}
U81: {1}
U91: {1}
U92: {1}
U93: {1}
U94: {1}
U95: {1}
U96: {1}
Used ordering:
Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(U101(x_1, x_2, x_3)) = x_1
   POL(U102(x_1, x_2, x_3)) = x_1
   POL(U103(x_1, x_2, x_3)) = x_1
   POL(U104(x_1, x_2, x_3)) = x_1
   POL(U105(x_1, x_2)) = x_1
   POL(U106(x_1)) = x_1
   POL(U11(x_1, x_2)) = x_1
   POL(U111(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U112(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U113(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U114(x_1, x_2)) = x_1 + x_2
   POL(U12(x_1, x_2)) = x_1
   POL(U121(x_1, x_2)) = x_1 + x_2
   POL(U13(x_1)) = x_1
   POL(U131(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + x_3 + x_4
   POL(U132(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + x_3 + x_4
   POL(U133(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + x_3 + x_4
   POL(U134(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + x_3 + x_4
   POL(U135(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + x_3 + x_4
   POL(U136(x_1, x_2, x_3, x_4)) = 1 + x_1 + x_2 + x_3 + x_4
   POL(U21(x_1, x_2)) = x_1
   POL(U22(x_1, x_2)) = x_1
   POL(U23(x_1)) = x_1
   POL(U31(x_1, x_2)) = x_1
   POL(U32(x_1, x_2)) = x_1
   POL(U33(x_1)) = x_1
   POL(U41(x_1, x_2, x_3)) = x_1
   POL(U42(x_1, x_2, x_3)) = x_1
   POL(U43(x_1, x_2, x_3)) = x_1
   POL(U44(x_1, x_2, x_3)) = x_1
   POL(U45(x_1, x_2)) = x_1
   POL(U46(x_1)) = x_1
   POL(U51(x_1, x_2)) = x_1
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2)) = x_1
   POL(U62(x_1)) = x_1
   POL(U71(x_1)) = x_1
   POL(U81(x_1)) = x_1
   POL(U91(x_1, x_2, x_3)) = x_1
   POL(U92(x_1, x_2, x_3)) = x_1
   POL(U93(x_1, x_2, x_3)) = x_1
   POL(U94(x_1, x_2, x_3)) = x_1
   POL(U95(x_1, x_2)) = x_1
   POL(U96(x_1)) = x_1
   POL(cons(x_1, x_2)) = x_1 + x_2
   POL(isNat(x_1)) = 0
   POL(isNatIList(x_1)) = 0
   POL(isNatIListKind(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(isNatList(x_1)) = 0
   POL(length(x_1)) = x_1
   POL(nil) = 1
   POL(s(x_1)) = x_1
   POL(take(x_1, x_2)) = 1 + x_1 + x_2
   POL(tt) = 0
   POL(zeros) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   take(0, IL) -> U121(isNatIList(IL), IL)




----------------------------------------

(8)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U111(tt, L, N) -> U112(isNatIListKind(L), L, N)
   U112(tt, L, N) -> U113(isNat(N), L, N)
   U113(tt, L, N) -> U114(isNatKind(N), L)
   U114(tt, L) -> s(length(L))
   U12(tt, V1) -> U13(isNatList(V1))
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(IL), IL, M, N)
   U132(tt, IL, M, N) -> U133(isNat(M), IL, M, N)
   U133(tt, IL, M, N) -> U134(isNatKind(M), IL, M, N)
   U134(tt, IL, M, N) -> U135(isNat(N), IL, M, N)
   U135(tt, IL, M, N) -> U136(isNatKind(N), IL, M, N)
   U136(tt, IL, M, N) -> cons(N, take(M, IL))
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   U95(tt, V2) -> U96(isNatList(V2))
   U96(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNatIList(V) -> U31(isNatIListKind(V), V)
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   length(cons(N, L)) -> U111(isNatList(L), L, N)
   take(s(M), cons(N, IL)) -> U131(isNatIList(IL), IL, M, N)

The replacement map contains the following entries:

zeros: empty set
cons: {1}
0: empty set
U101: {1}
tt: empty set
U102: {1}
isNatKind: empty set
U103: {1}
isNatIListKind: empty set
U104: {1}
U105: {1}
isNat: empty set
U106: {1}
isNatIList: empty set
U11: {1}
U12: {1}
U111: {1}
U112: {1}
U113: {1}
U114: {1}
s: {1}
length: {1}
U13: {1}
isNatList: empty set
nil: empty set
U131: {1}
U132: {1}
U133: {1}
U134: {1}
U135: {1}
U136: {1}
take: {1, 2}
U21: {1}
U22: {1}
U23: {1}
U31: {1}
U32: {1}
U33: {1}
U41: {1}
U42: {1}
U43: {1}
U44: {1}
U45: {1}
U46: {1}
U51: {1}
U52: {1}
U61: {1}
U62: {1}
U71: {1}
U81: {1}
U91: {1}
U92: {1}
U93: {1}
U94: {1}
U95: {1}
U96: {1}

----------------------------------------

(9) CSDependencyPairsProof (EQUIVALENT)
Using Improved CS-DPs [LPAR08] we result in the following initial Q-CSDP problem.
----------------------------------------

(10)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U106_1, s_1, length_1, U13_1, take_2, U23_1, U33_1, U46_1, U52_1, U62_1, U71_1, U81_1, U96_1, U106'_1, LENGTH_1, U13'_1, U23'_1, U33'_1, U46'_1, U52'_1, U62'_1, U96'_1, U71'_1, U81'_1, TAKE_2} are replacing on all positions.
For all symbols f in {cons_2, U101_3, U102_3, U103_3, U104_3, U105_2, U11_2, U12_2, U111_3, U112_3, U113_3, U114_2, U131_4, U132_4, U133_4, U134_4, U135_4, U136_4, U21_2, U22_2, U31_2, U32_2, U41_3, U42_3, U43_3, U44_3, U45_2, U51_2, U61_2, U91_3, U92_3, U93_3, U94_3, U95_2, U102'_3, U101'_3, U103'_3, U104'_3, U105'_2, U12'_2, U11'_2, U112'_3, U111'_3, U113'_3, U114'_2, U132'_4, U131'_4, U133'_4, U134'_4, U135'_4, U136'_4, U22'_2, U21'_2, U32'_2, U31'_2, U42'_3, U41'_3, U43'_3, U44'_3, U45'_2, U51'_2, U61'_2, U92'_3, U91'_3, U93'_3, U94'_3, U95'_2} we have mu(f) = {1}.
The symbols in {isNatKind_1, isNatIListKind_1, isNat_1, isNatIList_1, isNatList_1, ISNATKIND_1, ISNATILISTKIND_1, ISNAT_1, ISNATILIST_1, ISNATLIST_1, U_1} are not replacing on any position.

The ordinary context-sensitive dependency pairs DP_o are:
   U101'(tt, V1, V2) -> U102'(isNatKind(V1), V1, V2)
   U101'(tt, V1, V2) -> ISNATKIND(V1)
   U102'(tt, V1, V2) -> U103'(isNatIListKind(V2), V1, V2)
   U102'(tt, V1, V2) -> ISNATILISTKIND(V2)
   U103'(tt, V1, V2) -> U104'(isNatIListKind(V2), V1, V2)
   U103'(tt, V1, V2) -> ISNATILISTKIND(V2)
   U104'(tt, V1, V2) -> U105'(isNat(V1), V2)
   U104'(tt, V1, V2) -> ISNAT(V1)
   U105'(tt, V2) -> U106'(isNatIList(V2))
   U105'(tt, V2) -> ISNATILIST(V2)
   U11'(tt, V1) -> U12'(isNatIListKind(V1), V1)
   U11'(tt, V1) -> ISNATILISTKIND(V1)
   U111'(tt, L, N) -> U112'(isNatIListKind(L), L, N)
   U111'(tt, L, N) -> ISNATILISTKIND(L)
   U112'(tt, L, N) -> U113'(isNat(N), L, N)
   U112'(tt, L, N) -> ISNAT(N)
   U113'(tt, L, N) -> U114'(isNatKind(N), L)
   U113'(tt, L, N) -> ISNATKIND(N)
   U114'(tt, L) -> LENGTH(L)
   U12'(tt, V1) -> U13'(isNatList(V1))
   U12'(tt, V1) -> ISNATLIST(V1)
   U131'(tt, IL, M, N) -> U132'(isNatIListKind(IL), IL, M, N)
   U131'(tt, IL, M, N) -> ISNATILISTKIND(IL)
   U132'(tt, IL, M, N) -> U133'(isNat(M), IL, M, N)
   U132'(tt, IL, M, N) -> ISNAT(M)
   U133'(tt, IL, M, N) -> U134'(isNatKind(M), IL, M, N)
   U133'(tt, IL, M, N) -> ISNATKIND(M)
   U134'(tt, IL, M, N) -> U135'(isNat(N), IL, M, N)
   U134'(tt, IL, M, N) -> ISNAT(N)
   U135'(tt, IL, M, N) -> U136'(isNatKind(N), IL, M, N)
   U135'(tt, IL, M, N) -> ISNATKIND(N)
   U21'(tt, V1) -> U22'(isNatKind(V1), V1)
   U21'(tt, V1) -> ISNATKIND(V1)
   U22'(tt, V1) -> U23'(isNat(V1))
   U22'(tt, V1) -> ISNAT(V1)
   U31'(tt, V) -> U32'(isNatIListKind(V), V)
   U31'(tt, V) -> ISNATILISTKIND(V)
   U32'(tt, V) -> U33'(isNatList(V))
   U32'(tt, V) -> ISNATLIST(V)
   U41'(tt, V1, V2) -> U42'(isNatKind(V1), V1, V2)
   U41'(tt, V1, V2) -> ISNATKIND(V1)
   U42'(tt, V1, V2) -> U43'(isNatIListKind(V2), V1, V2)
   U42'(tt, V1, V2) -> ISNATILISTKIND(V2)
   U43'(tt, V1, V2) -> U44'(isNatIListKind(V2), V1, V2)
   U43'(tt, V1, V2) -> ISNATILISTKIND(V2)
   U44'(tt, V1, V2) -> U45'(isNat(V1), V2)
   U44'(tt, V1, V2) -> ISNAT(V1)
   U45'(tt, V2) -> U46'(isNatIList(V2))
   U45'(tt, V2) -> ISNATILIST(V2)
   U51'(tt, V2) -> U52'(isNatIListKind(V2))
   U51'(tt, V2) -> ISNATILISTKIND(V2)
   U61'(tt, V2) -> U62'(isNatIListKind(V2))
   U61'(tt, V2) -> ISNATILISTKIND(V2)
   U91'(tt, V1, V2) -> U92'(isNatKind(V1), V1, V2)
   U91'(tt, V1, V2) -> ISNATKIND(V1)
   U92'(tt, V1, V2) -> U93'(isNatIListKind(V2), V1, V2)
   U92'(tt, V1, V2) -> ISNATILISTKIND(V2)
   U93'(tt, V1, V2) -> U94'(isNatIListKind(V2), V1, V2)
   U93'(tt, V1, V2) -> ISNATILISTKIND(V2)
   U94'(tt, V1, V2) -> U95'(isNat(V1), V2)
   U94'(tt, V1, V2) -> ISNAT(V1)
   U95'(tt, V2) -> U96'(isNatList(V2))
   U95'(tt, V2) -> ISNATLIST(V2)
   ISNAT(length(V1)) -> U11'(isNatIListKind(V1), V1)
   ISNAT(length(V1)) -> ISNATILISTKIND(V1)
   ISNAT(s(V1)) -> U21'(isNatKind(V1), V1)
   ISNAT(s(V1)) -> ISNATKIND(V1)
   ISNATILIST(V) -> U31'(isNatIListKind(V), V)
   ISNATILIST(V) -> ISNATILISTKIND(V)
   ISNATILIST(cons(V1, V2)) -> U41'(isNatKind(V1), V1, V2)
   ISNATILIST(cons(V1, V2)) -> ISNATKIND(V1)
   ISNATILISTKIND(cons(V1, V2)) -> U51'(isNatKind(V1), V2)
   ISNATILISTKIND(cons(V1, V2)) -> ISNATKIND(V1)
   ISNATILISTKIND(take(V1, V2)) -> U61'(isNatKind(V1), V2)
   ISNATILISTKIND(take(V1, V2)) -> ISNATKIND(V1)
   ISNATKIND(length(V1)) -> U71'(isNatIListKind(V1))
   ISNATKIND(length(V1)) -> ISNATILISTKIND(V1)
   ISNATKIND(s(V1)) -> U81'(isNatKind(V1))
   ISNATKIND(s(V1)) -> ISNATKIND(V1)
   ISNATLIST(cons(V1, V2)) -> U91'(isNatKind(V1), V1, V2)
   ISNATLIST(cons(V1, V2)) -> ISNATKIND(V1)
   ISNATLIST(take(V1, V2)) -> U101'(isNatKind(V1), V1, V2)
   ISNATLIST(take(V1, V2)) -> ISNATKIND(V1)
   LENGTH(cons(N, L)) -> U111'(isNatList(L), L, N)
   LENGTH(cons(N, L)) -> ISNATLIST(L)
   TAKE(s(M), cons(N, IL)) -> U131'(isNatIList(IL), IL, M, N)
   TAKE(s(M), cons(N, IL)) -> ISNATILIST(IL)

The collapsing dependency pairs are DP_c:
   U114'(tt, L) -> L
   U136'(tt, IL, M, N) -> N


The hidden terms of R are:

   zeros
   take(x0, x1)

Every hiding context is built from:
   aprove.DPFramework.CSDPProblem.QCSDPProblem$1@c80bd3a

Hence, the new unhiding pairs DP_u are :
   U114'(tt, L) -> U(L)
   U136'(tt, IL, M, N) -> U(N)
   U(take(x_0, x_1)) -> U(x_0)
   U(take(x_0, x_1)) -> U(x_1)
   U(zeros) -> ZEROS
   U(take(x0, x1)) -> TAKE(x0, x1)

The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U111(tt, L, N) -> U112(isNatIListKind(L), L, N)
   U112(tt, L, N) -> U113(isNat(N), L, N)
   U113(tt, L, N) -> U114(isNatKind(N), L)
   U114(tt, L) -> s(length(L))
   U12(tt, V1) -> U13(isNatList(V1))
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(IL), IL, M, N)
   U132(tt, IL, M, N) -> U133(isNat(M), IL, M, N)
   U133(tt, IL, M, N) -> U134(isNatKind(M), IL, M, N)
   U134(tt, IL, M, N) -> U135(isNat(N), IL, M, N)
   U135(tt, IL, M, N) -> U136(isNatKind(N), IL, M, N)
   U136(tt, IL, M, N) -> cons(N, take(M, IL))
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   U95(tt, V2) -> U96(isNatList(V2))
   U96(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNatIList(V) -> U31(isNatIListKind(V), V)
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   length(cons(N, L)) -> U111(isNatList(L), L, N)
   take(s(M), cons(N, IL)) -> U131(isNatIList(IL), IL, M, N)

Q is empty.

----------------------------------------

(11) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 4 SCCs with 40 less nodes.

----------------------------------------

(12)
Complex Obligation (AND)

----------------------------------------

(13)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U106_1, s_1, length_1, U13_1, take_2, U23_1, U33_1, U46_1, U52_1, U62_1, U71_1, U81_1, U96_1} are replacing on all positions.
For all symbols f in {cons_2, U101_3, U102_3, U103_3, U104_3, U105_2, U11_2, U12_2, U111_3, U112_3, U113_3, U114_2, U131_4, U132_4, U133_4, U134_4, U135_4, U136_4, U21_2, U22_2, U31_2, U32_2, U41_3, U42_3, U43_3, U44_3, U45_2, U51_2, U61_2, U91_3, U92_3, U93_3, U94_3, U95_2, U51'_2, U61'_2} we have mu(f) = {1}.
The symbols in {isNatKind_1, isNatIListKind_1, isNat_1, isNatIList_1, isNatList_1, ISNATILISTKIND_1, ISNATKIND_1} are not replacing on any position.

The TRS P consists of the following rules:

   ISNATKIND(length(V1)) -> ISNATILISTKIND(V1)
   ISNATILISTKIND(cons(V1, V2)) -> U51'(isNatKind(V1), V2)
   U51'(tt, V2) -> ISNATILISTKIND(V2)
   ISNATILISTKIND(cons(V1, V2)) -> ISNATKIND(V1)
   ISNATKIND(s(V1)) -> ISNATKIND(V1)
   ISNATILISTKIND(take(V1, V2)) -> U61'(isNatKind(V1), V2)
   U61'(tt, V2) -> ISNATILISTKIND(V2)
   ISNATILISTKIND(take(V1, V2)) -> ISNATKIND(V1)

The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U111(tt, L, N) -> U112(isNatIListKind(L), L, N)
   U112(tt, L, N) -> U113(isNat(N), L, N)
   U113(tt, L, N) -> U114(isNatKind(N), L)
   U114(tt, L) -> s(length(L))
   U12(tt, V1) -> U13(isNatList(V1))
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(IL), IL, M, N)
   U132(tt, IL, M, N) -> U133(isNat(M), IL, M, N)
   U133(tt, IL, M, N) -> U134(isNatKind(M), IL, M, N)
   U134(tt, IL, M, N) -> U135(isNat(N), IL, M, N)
   U135(tt, IL, M, N) -> U136(isNatKind(N), IL, M, N)
   U136(tt, IL, M, N) -> cons(N, take(M, IL))
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   U95(tt, V2) -> U96(isNatList(V2))
   U96(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNatIList(V) -> U31(isNatIListKind(V), V)
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   length(cons(N, L)) -> U111(isNatList(L), L, N)
   take(s(M), cons(N, IL)) -> U131(isNatIList(IL), IL, M, N)

Q is empty.

----------------------------------------

(14) QCSUsableRulesProof (EQUIVALENT)
The following rules are not useable [DA_EMMES] and can be deleted:

   zeros -> cons(0, zeros)
   U101(tt, x0, x1) -> U102(isNatKind(x0), x0, x1)
   U102(tt, x0, x1) -> U103(isNatIListKind(x1), x0, x1)
   U103(tt, x0, x1) -> U104(isNatIListKind(x1), x0, x1)
   U104(tt, x0, x1) -> U105(isNat(x0), x1)
   U105(tt, x0) -> U106(isNatIList(x0))
   U106(tt) -> tt
   U11(tt, x0) -> U12(isNatIListKind(x0), x0)
   U111(tt, x0, x1) -> U112(isNatIListKind(x0), x0, x1)
   U112(tt, x0, x1) -> U113(isNat(x1), x0, x1)
   U113(tt, x0, x1) -> U114(isNatKind(x1), x0)
   U114(tt, x0) -> s(length(x0))
   U12(tt, x0) -> U13(isNatList(x0))
   U13(tt) -> tt
   U131(tt, x0, x1, x2) -> U132(isNatIListKind(x0), x0, x1, x2)
   U132(tt, x0, x1, x2) -> U133(isNat(x1), x0, x1, x2)
   U133(tt, x0, x1, x2) -> U134(isNatKind(x1), x0, x1, x2)
   U134(tt, x0, x1, x2) -> U135(isNat(x2), x0, x1, x2)
   U135(tt, x0, x1, x2) -> U136(isNatKind(x2), x0, x1, x2)
   U136(tt, x0, x1, x2) -> cons(x2, take(x1, x0))
   U21(tt, x0) -> U22(isNatKind(x0), x0)
   U22(tt, x0) -> U23(isNat(x0))
   U23(tt) -> tt
   U31(tt, x0) -> U32(isNatIListKind(x0), x0)
   U32(tt, x0) -> U33(isNatList(x0))
   U33(tt) -> tt
   U41(tt, x0, x1) -> U42(isNatKind(x0), x0, x1)
   U42(tt, x0, x1) -> U43(isNatIListKind(x1), x0, x1)
   U43(tt, x0, x1) -> U44(isNatIListKind(x1), x0, x1)
   U44(tt, x0, x1) -> U45(isNat(x0), x1)
   U45(tt, x0) -> U46(isNatIList(x0))
   U46(tt) -> tt
   U91(tt, x0, x1) -> U92(isNatKind(x0), x0, x1)
   U92(tt, x0, x1) -> U93(isNatIListKind(x1), x0, x1)
   U93(tt, x0, x1) -> U94(isNatIListKind(x1), x0, x1)
   U94(tt, x0, x1) -> U95(isNat(x0), x1)
   U95(tt, x0) -> U96(isNatList(x0))
   U96(tt) -> tt
   isNat(0) -> tt
   isNat(length(x0)) -> U11(isNatIListKind(x0), x0)
   isNat(s(x0)) -> U21(isNatKind(x0), x0)
   isNatIList(x0) -> U31(isNatIListKind(x0), x0)
   isNatIList(zeros) -> tt
   isNatIList(cons(x0, x1)) -> U41(isNatKind(x0), x0, x1)
   isNatList(nil) -> tt
   isNatList(cons(x0, x1)) -> U91(isNatKind(x0), x0, x1)
   isNatList(take(x0, x1)) -> U101(isNatKind(x0), x0, x1)
   length(cons(x0, x1)) -> U111(isNatList(x1), x1, x0)
   take(s(x0), cons(x1, x2)) -> U131(isNatIList(x2), x2, x0, x1)

----------------------------------------

(15)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {length_1, U71_1, s_1, U81_1, U52_1, take_2, U62_1} are replacing on all positions.
For all symbols f in {cons_2, U51_2, U61_2, U51'_2, U61'_2} we have mu(f) = {1}.
The symbols in {isNatKind_1, isNatIListKind_1, ISNATILISTKIND_1, ISNATKIND_1} are not replacing on any position.

The TRS P consists of the following rules:

   ISNATKIND(length(V1)) -> ISNATILISTKIND(V1)
   ISNATILISTKIND(cons(V1, V2)) -> U51'(isNatKind(V1), V2)
   U51'(tt, V2) -> ISNATILISTKIND(V2)
   ISNATILISTKIND(cons(V1, V2)) -> ISNATKIND(V1)
   ISNATKIND(s(V1)) -> ISNATKIND(V1)
   ISNATILISTKIND(take(V1, V2)) -> U61'(isNatKind(V1), V2)
   U61'(tt, V2) -> ISNATILISTKIND(V2)
   ISNATILISTKIND(take(V1, V2)) -> ISNATKIND(V1)

The TRS R consists of the following rules:

   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   U81(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U52(tt) -> tt
   U71(tt) -> tt

Q is empty.

----------------------------------------

(16) QCSDPMuMonotonicPoloProof (EQUIVALENT)
By using the following mu-monotonic polynomial ordering [POLO], at least one Dependency Pair or term rewrite system rule of this Q-CSDP problem can be strictly oriented and thus deleted.

Strictly oriented dependency pairs:

   ISNATKIND(length(V1)) -> ISNATILISTKIND(V1)
   ISNATILISTKIND(cons(V1, V2)) -> U51'(isNatKind(V1), V2)
   U51'(tt, V2) -> ISNATILISTKIND(V2)
   ISNATILISTKIND(cons(V1, V2)) -> ISNATKIND(V1)
   ISNATKIND(s(V1)) -> ISNATKIND(V1)
   ISNATILISTKIND(take(V1, V2)) -> U61'(isNatKind(V1), V2)
   U61'(tt, V2) -> ISNATILISTKIND(V2)
   ISNATILISTKIND(take(V1, V2)) -> ISNATKIND(V1)

Strictly oriented rules of the TRS R:

   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   U81(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U52(tt) -> tt
   U71(tt) -> tt

Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(ISNATILISTKIND(x_1)) = 1 + 2*x_1
   POL(ISNATKIND(x_1)) = 2 + 2*x_1
   POL(U51(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(U51'(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(U52(x_1)) = 1 + 2*x_1
   POL(U61(x_1, x_2)) = x_1 + 2*x_2
   POL(U61'(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(U62(x_1)) = 1 + 2*x_1
   POL(U71(x_1)) = 1 + 2*x_1
   POL(U81(x_1)) = 1 + 2*x_1
   POL(cons(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(isNatIListKind(x_1)) = x_1
   POL(isNatKind(x_1)) = 2*x_1
   POL(length(x_1)) = 2 + 2*x_1
   POL(nil) = 2
   POL(s(x_1)) = 2 + 2*x_1
   POL(take(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(tt) = 2
   POL(zeros) = 2


----------------------------------------

(17)
Obligation:
Q-restricted context-sensitive dependency pair problem:
For all symbols f in {cons_2, U51_2} we have mu(f) = {1}.
The symbols in {isNatIListKind_1, isNatKind_1} are not replacing on any position.

The TRS P consists of the following rules:
none

The TRS R consists of the following rules:

   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)

Q is empty.

----------------------------------------

(18) PIsEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R,mu)-chain.
----------------------------------------

(19)
YES

----------------------------------------

(20)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U106_1, s_1, length_1, U13_1, take_2, U23_1, U33_1, U46_1, U52_1, U62_1, U71_1, U81_1, U96_1} are replacing on all positions.
For all symbols f in {cons_2, U101_3, U102_3, U103_3, U104_3, U105_2, U11_2, U12_2, U111_3, U112_3, U113_3, U114_2, U131_4, U132_4, U133_4, U134_4, U135_4, U136_4, U21_2, U22_2, U31_2, U32_2, U41_3, U42_3, U43_3, U44_3, U45_2, U51_2, U61_2, U91_3, U92_3, U93_3, U94_3, U95_2, U103'_3, U102'_3, U104'_3, U105'_2, U31'_2, U32'_2, U91'_3, U92'_3, U93'_3, U94'_3, U95'_2, U101'_3, U11'_2, U12'_2, U21'_2, U22'_2, U41'_3, U42'_3, U43'_3, U44'_3, U45'_2} we have mu(f) = {1}.
The symbols in {isNatKind_1, isNatIListKind_1, isNat_1, isNatIList_1, isNatList_1, ISNATILIST_1, ISNATLIST_1, ISNAT_1} are not replacing on any position.

The TRS P consists of the following rules:

   U102'(tt, V1, V2) -> U103'(isNatIListKind(V2), V1, V2)
   U103'(tt, V1, V2) -> U104'(isNatIListKind(V2), V1, V2)
   U104'(tt, V1, V2) -> U105'(isNat(V1), V2)
   U105'(tt, V2) -> ISNATILIST(V2)
   ISNATILIST(V) -> U31'(isNatIListKind(V), V)
   U31'(tt, V) -> U32'(isNatIListKind(V), V)
   U32'(tt, V) -> ISNATLIST(V)
   ISNATLIST(cons(V1, V2)) -> U91'(isNatKind(V1), V1, V2)
   U91'(tt, V1, V2) -> U92'(isNatKind(V1), V1, V2)
   U92'(tt, V1, V2) -> U93'(isNatIListKind(V2), V1, V2)
   U93'(tt, V1, V2) -> U94'(isNatIListKind(V2), V1, V2)
   U94'(tt, V1, V2) -> U95'(isNat(V1), V2)
   U95'(tt, V2) -> ISNATLIST(V2)
   ISNATLIST(take(V1, V2)) -> U101'(isNatKind(V1), V1, V2)
   U101'(tt, V1, V2) -> U102'(isNatKind(V1), V1, V2)
   U94'(tt, V1, V2) -> ISNAT(V1)
   ISNAT(length(V1)) -> U11'(isNatIListKind(V1), V1)
   U11'(tt, V1) -> U12'(isNatIListKind(V1), V1)
   U12'(tt, V1) -> ISNATLIST(V1)
   ISNAT(s(V1)) -> U21'(isNatKind(V1), V1)
   U21'(tt, V1) -> U22'(isNatKind(V1), V1)
   U22'(tt, V1) -> ISNAT(V1)
   ISNATILIST(cons(V1, V2)) -> U41'(isNatKind(V1), V1, V2)
   U41'(tt, V1, V2) -> U42'(isNatKind(V1), V1, V2)
   U42'(tt, V1, V2) -> U43'(isNatIListKind(V2), V1, V2)
   U43'(tt, V1, V2) -> U44'(isNatIListKind(V2), V1, V2)
   U44'(tt, V1, V2) -> U45'(isNat(V1), V2)
   U45'(tt, V2) -> ISNATILIST(V2)
   U44'(tt, V1, V2) -> ISNAT(V1)
   U104'(tt, V1, V2) -> ISNAT(V1)

The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U111(tt, L, N) -> U112(isNatIListKind(L), L, N)
   U112(tt, L, N) -> U113(isNat(N), L, N)
   U113(tt, L, N) -> U114(isNatKind(N), L)
   U114(tt, L) -> s(length(L))
   U12(tt, V1) -> U13(isNatList(V1))
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(IL), IL, M, N)
   U132(tt, IL, M, N) -> U133(isNat(M), IL, M, N)
   U133(tt, IL, M, N) -> U134(isNatKind(M), IL, M, N)
   U134(tt, IL, M, N) -> U135(isNat(N), IL, M, N)
   U135(tt, IL, M, N) -> U136(isNatKind(N), IL, M, N)
   U136(tt, IL, M, N) -> cons(N, take(M, IL))
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   U95(tt, V2) -> U96(isNatList(V2))
   U96(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNatIList(V) -> U31(isNatIListKind(V), V)
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   length(cons(N, L)) -> U111(isNatList(L), L, N)
   take(s(M), cons(N, IL)) -> U131(isNatIList(IL), IL, M, N)

Q is empty.

----------------------------------------

(21) QCSUsableRulesProof (EQUIVALENT)
The following rules are not useable [DA_EMMES] and can be deleted:

   zeros -> cons(0, zeros)
   U111(tt, x0, x1) -> U112(isNatIListKind(x0), x0, x1)
   U112(tt, x0, x1) -> U113(isNat(x1), x0, x1)
   U113(tt, x0, x1) -> U114(isNatKind(x1), x0)
   U114(tt, x0) -> s(length(x0))
   U131(tt, x0, x1, x2) -> U132(isNatIListKind(x0), x0, x1, x2)
   U132(tt, x0, x1, x2) -> U133(isNat(x1), x0, x1, x2)
   U133(tt, x0, x1, x2) -> U134(isNatKind(x1), x0, x1, x2)
   U134(tt, x0, x1, x2) -> U135(isNat(x2), x0, x1, x2)
   U135(tt, x0, x1, x2) -> U136(isNatKind(x2), x0, x1, x2)
   U136(tt, x0, x1, x2) -> cons(x2, take(x1, x0))
   length(cons(x0, x1)) -> U111(isNatList(x1), x1, x0)
   take(s(x0), cons(x1, x2)) -> U131(isNatIList(x2), x2, x0, x1)

----------------------------------------

(22)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {length_1, U71_1, take_2, s_1, U81_1, U62_1, U52_1, U13_1, U23_1, U96_1, U106_1, U33_1, U46_1} are replacing on all positions.
For all symbols f in {cons_2, U51_2, U61_2, U11_2, U12_2, U91_3, U92_3, U93_3, U94_3, U95_2, U21_2, U22_2, U101_3, U102_3, U103_3, U104_3, U105_2, U31_2, U32_2, U41_3, U42_3, U43_3, U44_3, U45_2, U103'_3, U102'_3, U104'_3, U105'_2, U31'_2, U32'_2, U91'_3, U92'_3, U93'_3, U94'_3, U95'_2, U101'_3, U11'_2, U12'_2, U21'_2, U22'_2, U41'_3, U42'_3, U43'_3, U44'_3, U45'_2} we have mu(f) = {1}.
The symbols in {isNatIListKind_1, isNatKind_1, isNat_1, isNatList_1, isNatIList_1, ISNATILIST_1, ISNATLIST_1, ISNAT_1} are not replacing on any position.

The TRS P consists of the following rules:

   U102'(tt, V1, V2) -> U103'(isNatIListKind(V2), V1, V2)
   U103'(tt, V1, V2) -> U104'(isNatIListKind(V2), V1, V2)
   U104'(tt, V1, V2) -> U105'(isNat(V1), V2)
   U105'(tt, V2) -> ISNATILIST(V2)
   ISNATILIST(V) -> U31'(isNatIListKind(V), V)
   U31'(tt, V) -> U32'(isNatIListKind(V), V)
   U32'(tt, V) -> ISNATLIST(V)
   ISNATLIST(cons(V1, V2)) -> U91'(isNatKind(V1), V1, V2)
   U91'(tt, V1, V2) -> U92'(isNatKind(V1), V1, V2)
   U92'(tt, V1, V2) -> U93'(isNatIListKind(V2), V1, V2)
   U93'(tt, V1, V2) -> U94'(isNatIListKind(V2), V1, V2)
   U94'(tt, V1, V2) -> U95'(isNat(V1), V2)
   U95'(tt, V2) -> ISNATLIST(V2)
   ISNATLIST(take(V1, V2)) -> U101'(isNatKind(V1), V1, V2)
   U101'(tt, V1, V2) -> U102'(isNatKind(V1), V1, V2)
   U94'(tt, V1, V2) -> ISNAT(V1)
   ISNAT(length(V1)) -> U11'(isNatIListKind(V1), V1)
   U11'(tt, V1) -> U12'(isNatIListKind(V1), V1)
   U12'(tt, V1) -> ISNATLIST(V1)
   ISNAT(s(V1)) -> U21'(isNatKind(V1), V1)
   U21'(tt, V1) -> U22'(isNatKind(V1), V1)
   U22'(tt, V1) -> ISNAT(V1)
   ISNATILIST(cons(V1, V2)) -> U41'(isNatKind(V1), V1, V2)
   U41'(tt, V1, V2) -> U42'(isNatKind(V1), V1, V2)
   U42'(tt, V1, V2) -> U43'(isNatIListKind(V2), V1, V2)
   U43'(tt, V1, V2) -> U44'(isNatIListKind(V2), V1, V2)
   U44'(tt, V1, V2) -> U45'(isNat(V1), V2)
   U45'(tt, V2) -> ISNATILIST(V2)
   U44'(tt, V1, V2) -> ISNAT(V1)
   U104'(tt, V1, V2) -> ISNAT(V1)

The TRS R consists of the following rules:

   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   U81(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U12(tt, V1) -> U13(isNatList(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U95(tt, V2) -> U96(isNatList(V2))
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   isNatIList(V) -> U31(isNatIListKind(V), V)
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U106(tt) -> tt
   U96(tt) -> tt
   U13(tt) -> tt

Q is empty.

----------------------------------------

(23) QCSDPMuMonotonicPoloProof (EQUIVALENT)
By using the following mu-monotonic polynomial ordering [POLO], at least one Dependency Pair or term rewrite system rule of this Q-CSDP problem can be strictly oriented and thus deleted.

Strictly oriented dependency pairs:

   U102'(tt, V1, V2) -> U103'(isNatIListKind(V2), V1, V2)
   ISNATLIST(cons(V1, V2)) -> U91'(isNatKind(V1), V1, V2)
   U92'(tt, V1, V2) -> U93'(isNatIListKind(V2), V1, V2)
   U95'(tt, V2) -> ISNATLIST(V2)
   ISNATLIST(take(V1, V2)) -> U101'(isNatKind(V1), V1, V2)
   U101'(tt, V1, V2) -> U102'(isNatKind(V1), V1, V2)
   U94'(tt, V1, V2) -> ISNAT(V1)
   ISNAT(length(V1)) -> U11'(isNatIListKind(V1), V1)
   U12'(tt, V1) -> ISNATLIST(V1)
   ISNATILIST(cons(V1, V2)) -> U41'(isNatKind(V1), V1, V2)
   U42'(tt, V1, V2) -> U43'(isNatIListKind(V2), V1, V2)
   U45'(tt, V2) -> ISNATILIST(V2)
   U44'(tt, V1, V2) -> ISNAT(V1)


Used ordering: POLO with Polynomial interpretation [POLO]:

   POL(0) = 0
   POL(ISNAT(x_1)) = x_1
   POL(ISNATILIST(x_1)) = 2*x_1
   POL(ISNATLIST(x_1)) = 2*x_1
   POL(U101(x_1, x_2, x_3)) = x_1
   POL(U101'(x_1, x_2, x_3)) = 2 + 2*x_1 + x_2 + 2*x_3
   POL(U102(x_1, x_2, x_3)) = 2*x_1
   POL(U102'(x_1, x_2, x_3)) = 1 + 2*x_1 + x_2 + 2*x_3
   POL(U103(x_1, x_2, x_3)) = 2*x_1
   POL(U103'(x_1, x_2, x_3)) = 2*x_1 + x_2 + 2*x_3
   POL(U104(x_1, x_2, x_3)) = x_1
   POL(U104'(x_1, x_2, x_3)) = x_1 + x_2 + 2*x_3
   POL(U105(x_1, x_2)) = 2*x_1
   POL(U105'(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U106(x_1)) = x_1
   POL(U11(x_1, x_2)) = x_1
   POL(U11'(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(U12(x_1, x_2)) = 2*x_1
   POL(U12'(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(U13(x_1)) = 2*x_1
   POL(U21(x_1, x_2)) = x_1
   POL(U21'(x_1, x_2)) = x_1 + x_2
   POL(U22(x_1, x_2)) = x_1
   POL(U22'(x_1, x_2)) = x_1 + x_2
   POL(U23(x_1)) = 2*x_1
   POL(U31(x_1, x_2)) = 2*x_1
   POL(U31'(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U32(x_1, x_2)) = x_1
   POL(U32'(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U33(x_1)) = 2*x_1
   POL(U41(x_1, x_2, x_3)) = x_1
   POL(U41'(x_1, x_2, x_3)) = 2 + x_1 + 2*x_2 + 2*x_3
   POL(U42(x_1, x_2, x_3)) = 2*x_1
   POL(U42'(x_1, x_2, x_3)) = 2 + 2*x_1 + x_2 + 2*x_3
   POL(U43(x_1, x_2, x_3)) = x_1
   POL(U43'(x_1, x_2, x_3)) = 1 + 2*x_1 + x_2 + 2*x_3
   POL(U44(x_1, x_2, x_3)) = 2*x_1
   POL(U44'(x_1, x_2, x_3)) = 1 + x_1 + x_2 + 2*x_3
   POL(U45(x_1, x_2)) = x_1
   POL(U45'(x_1, x_2)) = 1 + x_1 + 2*x_2
   POL(U46(x_1)) = 2*x_1
   POL(U51(x_1, x_2)) = 2*x_1
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2)) = 2*x_1
   POL(U62(x_1)) = x_1
   POL(U71(x_1)) = 2*x_1
   POL(U81(x_1)) = 2*x_1
   POL(U91(x_1, x_2, x_3)) = 2*x_1
   POL(U91'(x_1, x_2, x_3)) = 2 + x_1 + x_2 + 2*x_3
   POL(U92(x_1, x_2, x_3)) = x_1
   POL(U92'(x_1, x_2, x_3)) = 2 + x_1 + x_2 + 2*x_3
   POL(U93(x_1, x_2, x_3)) = x_1
   POL(U93'(x_1, x_2, x_3)) = 1 + x_1 + x_2 + 2*x_3
   POL(U94(x_1, x_2, x_3)) = x_1
   POL(U94'(x_1, x_2, x_3)) = 1 + x_1 + x_2 + 2*x_3
   POL(U95(x_1, x_2)) = 2*x_1
   POL(U95'(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(U96(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(isNat(x_1)) = 0
   POL(isNatIList(x_1)) = 0
   POL(isNatIListKind(x_1)) = 0
   POL(isNatKind(x_1)) = 0
   POL(isNatList(x_1)) = 0
   POL(length(x_1)) = 2 + 2*x_1
   POL(nil) = 0
   POL(s(x_1)) = 2*x_1
   POL(take(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(tt) = 0
   POL(zeros) = 0


----------------------------------------

(24)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {length_1, U71_1, take_2, s_1, U81_1, U62_1, U52_1, U13_1, U23_1, U96_1, U106_1, U33_1, U46_1} are replacing on all positions.
For all symbols f in {cons_2, U51_2, U61_2, U11_2, U12_2, U91_3, U92_3, U93_3, U94_3, U95_2, U21_2, U22_2, U101_3, U102_3, U103_3, U104_3, U105_2, U31_2, U32_2, U41_3, U42_3, U43_3, U44_3, U45_2, U104'_3, U103'_3, U105'_2, U31'_2, U32'_2, U92'_3, U91'_3, U94'_3, U93'_3, U95'_2, U12'_2, U11'_2, U21'_2, U22'_2, U42'_3, U41'_3, U44'_3, U43'_3, U45'_2} we have mu(f) = {1}.
The symbols in {isNatIListKind_1, isNatKind_1, isNat_1, isNatList_1, isNatIList_1, ISNATILIST_1, ISNATLIST_1, ISNAT_1} are not replacing on any position.

The TRS P consists of the following rules:

   U103'(tt, V1, V2) -> U104'(isNatIListKind(V2), V1, V2)
   U104'(tt, V1, V2) -> U105'(isNat(V1), V2)
   U105'(tt, V2) -> ISNATILIST(V2)
   ISNATILIST(V) -> U31'(isNatIListKind(V), V)
   U31'(tt, V) -> U32'(isNatIListKind(V), V)
   U32'(tt, V) -> ISNATLIST(V)
   U91'(tt, V1, V2) -> U92'(isNatKind(V1), V1, V2)
   U93'(tt, V1, V2) -> U94'(isNatIListKind(V2), V1, V2)
   U94'(tt, V1, V2) -> U95'(isNat(V1), V2)
   U11'(tt, V1) -> U12'(isNatIListKind(V1), V1)
   ISNAT(s(V1)) -> U21'(isNatKind(V1), V1)
   U21'(tt, V1) -> U22'(isNatKind(V1), V1)
   U22'(tt, V1) -> ISNAT(V1)
   U41'(tt, V1, V2) -> U42'(isNatKind(V1), V1, V2)
   U43'(tt, V1, V2) -> U44'(isNatIListKind(V2), V1, V2)
   U44'(tt, V1, V2) -> U45'(isNat(V1), V2)
   U104'(tt, V1, V2) -> ISNAT(V1)

The TRS R consists of the following rules:

   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   U81(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U12(tt, V1) -> U13(isNatList(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U95(tt, V2) -> U96(isNatList(V2))
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   isNatIList(V) -> U31(isNatIListKind(V), V)
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U106(tt) -> tt
   U96(tt) -> tt
   U13(tt) -> tt

Q is empty.

----------------------------------------

(25) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 1 SCC with 14 less nodes.

----------------------------------------

(26)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {length_1, U71_1, take_2, s_1, U81_1, U62_1, U52_1, U13_1, U23_1, U96_1, U106_1, U33_1, U46_1} are replacing on all positions.
For all symbols f in {cons_2, U51_2, U61_2, U11_2, U12_2, U91_3, U92_3, U93_3, U94_3, U95_2, U21_2, U22_2, U101_3, U102_3, U103_3, U104_3, U105_2, U31_2, U32_2, U41_3, U42_3, U43_3, U44_3, U45_2, U22'_2, U21'_2} we have mu(f) = {1}.
The symbols in {isNatIListKind_1, isNatKind_1, isNat_1, isNatList_1, isNatIList_1, ISNAT_1} are not replacing on any position.

The TRS P consists of the following rules:

   U21'(tt, V1) -> U22'(isNatKind(V1), V1)
   U22'(tt, V1) -> ISNAT(V1)
   ISNAT(s(V1)) -> U21'(isNatKind(V1), V1)

The TRS R consists of the following rules:

   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   U81(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U12(tt, V1) -> U13(isNatList(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U95(tt, V2) -> U96(isNatList(V2))
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   isNatIList(V) -> U31(isNatIListKind(V), V)
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U106(tt) -> tt
   U96(tt) -> tt
   U13(tt) -> tt

Q is empty.

----------------------------------------

(27) QCSDPSubtermProof (EQUIVALENT)
We use the subterm processor [DA_EMMES].


The following pairs can be oriented strictly and are deleted.

   ISNAT(s(V1)) -> U21'(isNatKind(V1), V1)
The remaining pairs can at least be oriented weakly.

   U21'(tt, V1) -> U22'(isNatKind(V1), V1)
   U22'(tt, V1) -> ISNAT(V1)
Used ordering:  Combined order from the following AFS and order.
U22'(x1, x2)  =  x2

U21'(x1, x2)  =  x2

ISNAT(x1)  =  x1


Subterm Order

----------------------------------------

(28)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {length_1, U71_1, take_2, s_1, U81_1, U62_1, U52_1, U13_1, U23_1, U96_1, U106_1, U33_1, U46_1} are replacing on all positions.
For all symbols f in {cons_2, U51_2, U61_2, U11_2, U12_2, U91_3, U92_3, U93_3, U94_3, U95_2, U21_2, U22_2, U101_3, U102_3, U103_3, U104_3, U105_2, U31_2, U32_2, U41_3, U42_3, U43_3, U44_3, U45_2, U22'_2, U21'_2} we have mu(f) = {1}.
The symbols in {isNatIListKind_1, isNatKind_1, isNat_1, isNatList_1, isNatIList_1, ISNAT_1} are not replacing on any position.

The TRS P consists of the following rules:

   U21'(tt, V1) -> U22'(isNatKind(V1), V1)
   U22'(tt, V1) -> ISNAT(V1)

The TRS R consists of the following rules:

   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   U81(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U12(tt, V1) -> U13(isNatList(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U95(tt, V2) -> U96(isNatList(V2))
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   isNatIList(V) -> U31(isNatIListKind(V), V)
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U106(tt) -> tt
   U96(tt) -> tt
   U13(tt) -> tt

Q is empty.

----------------------------------------

(29) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 0 SCCs with 2 less nodes.

----------------------------------------

(30)
TRUE

----------------------------------------

(31)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U106_1, s_1, length_1, U13_1, take_2, U23_1, U33_1, U46_1, U52_1, U62_1, U71_1, U81_1, U96_1, TAKE_2} are replacing on all positions.
For all symbols f in {cons_2, U101_3, U102_3, U103_3, U104_3, U105_2, U11_2, U12_2, U111_3, U112_3, U113_3, U114_2, U131_4, U132_4, U133_4, U134_4, U135_4, U136_4, U21_2, U22_2, U31_2, U32_2, U41_3, U42_3, U43_3, U44_3, U45_2, U51_2, U61_2, U91_3, U92_3, U93_3, U94_3, U95_2, U133'_4, U132'_4, U134'_4, U135'_4, U136'_4, U131'_4} we have mu(f) = {1}.
The symbols in {isNatKind_1, isNatIListKind_1, isNat_1, isNatIList_1, isNatList_1, U_1} are not replacing on any position.

The TRS P consists of the following rules:

   U132'(tt, IL, M, N) -> U133'(isNat(M), IL, M, N)
   U133'(tt, IL, M, N) -> U134'(isNatKind(M), IL, M, N)
   U134'(tt, IL, M, N) -> U135'(isNat(N), IL, M, N)
   U135'(tt, IL, M, N) -> U136'(isNatKind(N), IL, M, N)
   U136'(tt, IL, M, N) -> U(N)
   U(take(x_0, x_1)) -> U(x_0)
   U(take(x_0, x_1)) -> U(x_1)
   U(take(x0, x1)) -> TAKE(x0, x1)
   TAKE(s(M), cons(N, IL)) -> U131'(isNatIList(IL), IL, M, N)
   U131'(tt, IL, M, N) -> U132'(isNatIListKind(IL), IL, M, N)

The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U111(tt, L, N) -> U112(isNatIListKind(L), L, N)
   U112(tt, L, N) -> U113(isNat(N), L, N)
   U113(tt, L, N) -> U114(isNatKind(N), L)
   U114(tt, L) -> s(length(L))
   U12(tt, V1) -> U13(isNatList(V1))
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(IL), IL, M, N)
   U132(tt, IL, M, N) -> U133(isNat(M), IL, M, N)
   U133(tt, IL, M, N) -> U134(isNatKind(M), IL, M, N)
   U134(tt, IL, M, N) -> U135(isNat(N), IL, M, N)
   U135(tt, IL, M, N) -> U136(isNatKind(N), IL, M, N)
   U136(tt, IL, M, N) -> cons(N, take(M, IL))
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   U95(tt, V2) -> U96(isNatList(V2))
   U96(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNatIList(V) -> U31(isNatIListKind(V), V)
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   length(cons(N, L)) -> U111(isNatList(L), L, N)
   take(s(M), cons(N, IL)) -> U131(isNatIList(IL), IL, M, N)

Q is empty.

----------------------------------------

(32) QCSDPSubtermProof (EQUIVALENT)
We use the subterm processor [DA_EMMES].


The following pairs can be oriented strictly and are deleted.

   U(take(x_0, x_1)) -> U(x_0)
   U(take(x_0, x_1)) -> U(x_1)
   U(take(x0, x1)) -> TAKE(x0, x1)
   TAKE(s(M), cons(N, IL)) -> U131'(isNatIList(IL), IL, M, N)
The remaining pairs can at least be oriented weakly.

   U132'(tt, IL, M, N) -> U133'(isNat(M), IL, M, N)
   U133'(tt, IL, M, N) -> U134'(isNatKind(M), IL, M, N)
   U134'(tt, IL, M, N) -> U135'(isNat(N), IL, M, N)
   U135'(tt, IL, M, N) -> U136'(isNatKind(N), IL, M, N)
   U136'(tt, IL, M, N) -> U(N)
   U131'(tt, IL, M, N) -> U132'(isNatIListKind(IL), IL, M, N)
Used ordering:  Combined order from the following AFS and order.
U133'(x1, x2, x3, x4)  =  x4

U132'(x1, x2, x3, x4)  =  x4

U134'(x1, x2, x3, x4)  =  x4

U135'(x1, x2, x3, x4)  =  x4

U136'(x1, x2, x3, x4)  =  x4

U(x1)  =  x1

TAKE(x1, x2)  =  x2

U131'(x1, x2, x3, x4)  =  x4


Subterm Order

----------------------------------------

(33)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U106_1, s_1, length_1, U13_1, take_2, U23_1, U33_1, U46_1, U52_1, U62_1, U71_1, U81_1, U96_1} are replacing on all positions.
For all symbols f in {cons_2, U101_3, U102_3, U103_3, U104_3, U105_2, U11_2, U12_2, U111_3, U112_3, U113_3, U114_2, U131_4, U132_4, U133_4, U134_4, U135_4, U136_4, U21_2, U22_2, U31_2, U32_2, U41_3, U42_3, U43_3, U44_3, U45_2, U51_2, U61_2, U91_3, U92_3, U93_3, U94_3, U95_2, U133'_4, U132'_4, U134'_4, U135'_4, U136'_4, U131'_4} we have mu(f) = {1}.
The symbols in {isNatKind_1, isNatIListKind_1, isNat_1, isNatIList_1, isNatList_1, U_1} are not replacing on any position.

The TRS P consists of the following rules:

   U132'(tt, IL, M, N) -> U133'(isNat(M), IL, M, N)
   U133'(tt, IL, M, N) -> U134'(isNatKind(M), IL, M, N)
   U134'(tt, IL, M, N) -> U135'(isNat(N), IL, M, N)
   U135'(tt, IL, M, N) -> U136'(isNatKind(N), IL, M, N)
   U136'(tt, IL, M, N) -> U(N)
   U131'(tt, IL, M, N) -> U132'(isNatIListKind(IL), IL, M, N)

The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U111(tt, L, N) -> U112(isNatIListKind(L), L, N)
   U112(tt, L, N) -> U113(isNat(N), L, N)
   U113(tt, L, N) -> U114(isNatKind(N), L)
   U114(tt, L) -> s(length(L))
   U12(tt, V1) -> U13(isNatList(V1))
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(IL), IL, M, N)
   U132(tt, IL, M, N) -> U133(isNat(M), IL, M, N)
   U133(tt, IL, M, N) -> U134(isNatKind(M), IL, M, N)
   U134(tt, IL, M, N) -> U135(isNat(N), IL, M, N)
   U135(tt, IL, M, N) -> U136(isNatKind(N), IL, M, N)
   U136(tt, IL, M, N) -> cons(N, take(M, IL))
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   U95(tt, V2) -> U96(isNatList(V2))
   U96(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNatIList(V) -> U31(isNatIListKind(V), V)
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   length(cons(N, L)) -> U111(isNatList(L), L, N)
   take(s(M), cons(N, IL)) -> U131(isNatIList(IL), IL, M, N)

Q is empty.

----------------------------------------

(34) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 0 SCCs with 6 less nodes.

----------------------------------------

(35)
TRUE

----------------------------------------

(36)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U106_1, s_1, length_1, U13_1, take_2, U23_1, U33_1, U46_1, U52_1, U62_1, U71_1, U81_1, U96_1, LENGTH_1} are replacing on all positions.
For all symbols f in {cons_2, U101_3, U102_3, U103_3, U104_3, U105_2, U11_2, U12_2, U111_3, U112_3, U113_3, U114_2, U131_4, U132_4, U133_4, U134_4, U135_4, U136_4, U21_2, U22_2, U31_2, U32_2, U41_3, U42_3, U43_3, U44_3, U45_2, U51_2, U61_2, U91_3, U92_3, U93_3, U94_3, U95_2, U113'_3, U112'_3, U114'_2, U111'_3} we have mu(f) = {1}.
The symbols in {isNatKind_1, isNatIListKind_1, isNat_1, isNatIList_1, isNatList_1} are not replacing on any position.

The TRS P consists of the following rules:

   U112'(tt, L, N) -> U113'(isNat(N), L, N)
   U113'(tt, L, N) -> U114'(isNatKind(N), L)
   U114'(tt, L) -> LENGTH(L)
   LENGTH(cons(N, L)) -> U111'(isNatList(L), L, N)
   U111'(tt, L, N) -> U112'(isNatIListKind(L), L, N)

The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U111(tt, L, N) -> U112(isNatIListKind(L), L, N)
   U112(tt, L, N) -> U113(isNat(N), L, N)
   U113(tt, L, N) -> U114(isNatKind(N), L)
   U114(tt, L) -> s(length(L))
   U12(tt, V1) -> U13(isNatList(V1))
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(IL), IL, M, N)
   U132(tt, IL, M, N) -> U133(isNat(M), IL, M, N)
   U133(tt, IL, M, N) -> U134(isNatKind(M), IL, M, N)
   U134(tt, IL, M, N) -> U135(isNat(N), IL, M, N)
   U135(tt, IL, M, N) -> U136(isNatKind(N), IL, M, N)
   U136(tt, IL, M, N) -> cons(N, take(M, IL))
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   U95(tt, V2) -> U96(isNatList(V2))
   U96(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNatIList(V) -> U31(isNatIListKind(V), V)
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   length(cons(N, L)) -> U111(isNatList(L), L, N)
   take(s(M), cons(N, IL)) -> U131(isNatIList(IL), IL, M, N)

Q is empty.

----------------------------------------

(37) QCSDPReductionPairProof (EQUIVALENT)
Using the order

Polynomial interpretation [POLO]:

   POL(0) = 2
   POL(LENGTH(x_1)) = 2 + 2*x_1
   POL(U101(x_1, x_2, x_3)) = x_2
   POL(U102(x_1, x_2, x_3)) = x_2
   POL(U103(x_1, x_2, x_3)) = x_2
   POL(U104(x_1, x_2, x_3)) = x_2
   POL(U105(x_1, x_2)) = x_1
   POL(U106(x_1)) = 2
   POL(U11(x_1, x_2)) = x_2
   POL(U111(x_1, x_2, x_3)) = 2*x_2
   POL(U111'(x_1, x_2, x_3)) = 1 + x_1 + 2*x_2
   POL(U112(x_1, x_2, x_3)) = 2*x_2
   POL(U112'(x_1, x_2, x_3)) = 2 + 2*x_2
   POL(U113(x_1, x_2, x_3)) = 2*x_2
   POL(U113'(x_1, x_2, x_3)) = 2 + 2*x_2
   POL(U114(x_1, x_2)) = 2*x_2
   POL(U114'(x_1, x_2)) = 2 + 2*x_2
   POL(U12(x_1, x_2)) = x_2
   POL(U13(x_1)) = x_1
   POL(U131(x_1, x_2, x_3, x_4)) = 2*x_3
   POL(U132(x_1, x_2, x_3, x_4)) = 2*x_3
   POL(U133(x_1, x_2, x_3, x_4)) = 2*x_3
   POL(U134(x_1, x_2, x_3, x_4)) = 2*x_3
   POL(U135(x_1, x_2, x_3, x_4)) = 2*x_3
   POL(U136(x_1, x_2, x_3, x_4)) = 2*x_3
   POL(U21(x_1, x_2)) = 2*x_2
   POL(U22(x_1, x_2)) = 2*x_2
   POL(U23(x_1)) = 2*x_1
   POL(U31(x_1, x_2)) = 2*x_2
   POL(U32(x_1, x_2)) = 2*x_2
   POL(U33(x_1)) = 2*x_1
   POL(U41(x_1, x_2, x_3)) = 2 + 2*x_3
   POL(U42(x_1, x_2, x_3)) = 2
   POL(U43(x_1, x_2, x_3)) = x_1
   POL(U44(x_1, x_2, x_3)) = x_1
   POL(U45(x_1, x_2)) = 2
   POL(U46(x_1)) = 2
   POL(U51(x_1, x_2)) = 2
   POL(U52(x_1)) = x_1
   POL(U61(x_1, x_2)) = 2
   POL(U62(x_1)) = 2
   POL(U71(x_1)) = 2
   POL(U81(x_1)) = 2
   POL(U91(x_1, x_2, x_3)) = 2*x_3
   POL(U92(x_1, x_2, x_3)) = x_3
   POL(U93(x_1, x_2, x_3)) = x_3
   POL(U94(x_1, x_2, x_3)) = x_3
   POL(U95(x_1, x_2)) = x_2
   POL(U96(x_1)) = x_1
   POL(cons(x_1, x_2)) = 2*x_2
   POL(isNat(x_1)) = x_1
   POL(isNatIList(x_1)) = 2 + 2*x_1
   POL(isNatIListKind(x_1)) = 2
   POL(isNatKind(x_1)) = 2
   POL(isNatList(x_1)) = x_1
   POL(length(x_1)) = x_1
   POL(nil) = 2
   POL(s(x_1)) = 2*x_1
   POL(take(x_1, x_2)) = x_1
   POL(tt) = 2
   POL(zeros) = 0


the following usable rules


   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   length(cons(N, L)) -> U111(isNatList(L), L, N)
   U111(tt, L, N) -> U112(isNatIListKind(L), L, N)
   U112(tt, L, N) -> U113(isNat(N), L, N)
   U113(tt, L, N) -> U114(isNatKind(N), L)
   U114(tt, L) -> s(length(L))
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   U71(tt) -> tt
   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   zeros -> cons(0, zeros)
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   take(s(M), cons(N, IL)) -> U131(isNatIList(IL), IL, M, N)
   U131(tt, IL, M, N) -> U132(isNatIListKind(IL), IL, M, N)
   U132(tt, IL, M, N) -> U133(isNat(M), IL, M, N)
   U133(tt, IL, M, N) -> U134(isNatKind(M), IL, M, N)
   U134(tt, IL, M, N) -> U135(isNat(N), IL, M, N)
   U135(tt, IL, M, N) -> U136(isNatKind(N), IL, M, N)
   U136(tt, IL, M, N) -> cons(N, take(M, IL))
   isNatIList(V) -> U31(isNatIListKind(V), V)
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   U95(tt, V2) -> U96(isNatList(V2))
   U96(tt) -> tt
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   U106(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U81(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U12(tt, V1) -> U13(isNatList(V1))
   U13(tt) -> tt
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt


could all be oriented weakly.

Furthermore, the pairs


   LENGTH(cons(N, L)) -> U111'(isNatList(L), L, N)
   U111'(tt, L, N) -> U112'(isNatIListKind(L), L, N)


could be oriented strictly and thus removed by the CS-Reduction Pair Processor [LPAR08,DA_EMMES].


----------------------------------------

(38)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {U106_1, s_1, length_1, U13_1, take_2, U23_1, U33_1, U46_1, U52_1, U62_1, U71_1, U81_1, U96_1, LENGTH_1} are replacing on all positions.
For all symbols f in {cons_2, U101_3, U102_3, U103_3, U104_3, U105_2, U11_2, U12_2, U111_3, U112_3, U113_3, U114_2, U131_4, U132_4, U133_4, U134_4, U135_4, U136_4, U21_2, U22_2, U31_2, U32_2, U41_3, U42_3, U43_3, U44_3, U45_2, U51_2, U61_2, U91_3, U92_3, U93_3, U94_3, U95_2, U113'_3, U112'_3, U114'_2} we have mu(f) = {1}.
The symbols in {isNatKind_1, isNatIListKind_1, isNat_1, isNatIList_1, isNatList_1} are not replacing on any position.

The TRS P consists of the following rules:

   U112'(tt, L, N) -> U113'(isNat(N), L, N)
   U113'(tt, L, N) -> U114'(isNatKind(N), L)
   U114'(tt, L) -> LENGTH(L)

The TRS R consists of the following rules:

   zeros -> cons(0, zeros)
   U101(tt, V1, V2) -> U102(isNatKind(V1), V1, V2)
   U102(tt, V1, V2) -> U103(isNatIListKind(V2), V1, V2)
   U103(tt, V1, V2) -> U104(isNatIListKind(V2), V1, V2)
   U104(tt, V1, V2) -> U105(isNat(V1), V2)
   U105(tt, V2) -> U106(isNatIList(V2))
   U106(tt) -> tt
   U11(tt, V1) -> U12(isNatIListKind(V1), V1)
   U111(tt, L, N) -> U112(isNatIListKind(L), L, N)
   U112(tt, L, N) -> U113(isNat(N), L, N)
   U113(tt, L, N) -> U114(isNatKind(N), L)
   U114(tt, L) -> s(length(L))
   U12(tt, V1) -> U13(isNatList(V1))
   U13(tt) -> tt
   U131(tt, IL, M, N) -> U132(isNatIListKind(IL), IL, M, N)
   U132(tt, IL, M, N) -> U133(isNat(M), IL, M, N)
   U133(tt, IL, M, N) -> U134(isNatKind(M), IL, M, N)
   U134(tt, IL, M, N) -> U135(isNat(N), IL, M, N)
   U135(tt, IL, M, N) -> U136(isNatKind(N), IL, M, N)
   U136(tt, IL, M, N) -> cons(N, take(M, IL))
   U21(tt, V1) -> U22(isNatKind(V1), V1)
   U22(tt, V1) -> U23(isNat(V1))
   U23(tt) -> tt
   U31(tt, V) -> U32(isNatIListKind(V), V)
   U32(tt, V) -> U33(isNatList(V))
   U33(tt) -> tt
   U41(tt, V1, V2) -> U42(isNatKind(V1), V1, V2)
   U42(tt, V1, V2) -> U43(isNatIListKind(V2), V1, V2)
   U43(tt, V1, V2) -> U44(isNatIListKind(V2), V1, V2)
   U44(tt, V1, V2) -> U45(isNat(V1), V2)
   U45(tt, V2) -> U46(isNatIList(V2))
   U46(tt) -> tt
   U51(tt, V2) -> U52(isNatIListKind(V2))
   U52(tt) -> tt
   U61(tt, V2) -> U62(isNatIListKind(V2))
   U62(tt) -> tt
   U71(tt) -> tt
   U81(tt) -> tt
   U91(tt, V1, V2) -> U92(isNatKind(V1), V1, V2)
   U92(tt, V1, V2) -> U93(isNatIListKind(V2), V1, V2)
   U93(tt, V1, V2) -> U94(isNatIListKind(V2), V1, V2)
   U94(tt, V1, V2) -> U95(isNat(V1), V2)
   U95(tt, V2) -> U96(isNatList(V2))
   U96(tt) -> tt
   isNat(0) -> tt
   isNat(length(V1)) -> U11(isNatIListKind(V1), V1)
   isNat(s(V1)) -> U21(isNatKind(V1), V1)
   isNatIList(V) -> U31(isNatIListKind(V), V)
   isNatIList(zeros) -> tt
   isNatIList(cons(V1, V2)) -> U41(isNatKind(V1), V1, V2)
   isNatIListKind(nil) -> tt
   isNatIListKind(zeros) -> tt
   isNatIListKind(cons(V1, V2)) -> U51(isNatKind(V1), V2)
   isNatIListKind(take(V1, V2)) -> U61(isNatKind(V1), V2)
   isNatKind(0) -> tt
   isNatKind(length(V1)) -> U71(isNatIListKind(V1))
   isNatKind(s(V1)) -> U81(isNatKind(V1))
   isNatList(nil) -> tt
   isNatList(cons(V1, V2)) -> U91(isNatKind(V1), V1, V2)
   isNatList(take(V1, V2)) -> U101(isNatKind(V1), V1, V2)
   length(cons(N, L)) -> U111(isNatList(L), L, N)
   take(s(M), cons(N, IL)) -> U131(isNatIList(IL), IL, M, N)

Q is empty.

----------------------------------------

(39) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 0 SCCs with 3 less nodes.

----------------------------------------

(40)
TRUE
