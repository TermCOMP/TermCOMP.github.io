YES

Problem 1: 

(VAR vu95NonEmpty N X Y Z)
(STRATEGY CONTEXTSENSITIVE
(add 1 2)
(dbl 1)
(first 1 2)
(sqr 1)
(terms 1)
(num0)
(cons 1)
(fSNonEmpty)
(nil)
(recip 1)
(s)
)
(RULES
add(num0,X) -> X
add(s(X),Y) -> s(add(X,Y))
dbl(num0) -> num0
dbl(s(X)) -> s(s(dbl(X)))
first(num0,X) -> nil
first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
sqr(num0) -> num0
sqr(s(X)) -> s(add(sqr(X),dbl(X)))
terms(N) -> cons(recip(sqr(N)),terms(s(N)))
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 add(num0,X) -> X
 add(s(X),Y) -> s(add(X,Y))
 dbl(num0) -> num0
 dbl(s(X)) -> s(s(dbl(X)))
 first(num0,X) -> nil
 first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 sqr(num0) -> num0
 sqr(s(X)) -> s(add(sqr(X),dbl(X)))
 terms(N) -> cons(recip(sqr(N)),terms(s(N)))
-> The context-sensitive term rewriting system is an orthogonal system. Therefore, innermost cs-termination implies cs-termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 TERMS(N) -> SQR(N)
-> Rules:
 add(num0,X) -> X
 add(s(X),Y) -> s(add(X,Y))
 dbl(num0) -> num0
 dbl(s(X)) -> s(s(dbl(X)))
 first(num0,X) -> nil
 first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 sqr(num0) -> num0
 sqr(s(X)) -> s(add(sqr(X),dbl(X)))
 terms(N) -> cons(recip(sqr(N)),terms(s(N)))
-> Unhiding Rules:
 Empty

Problem 1: 

SCC Processor:
-> Pairs:
 TERMS(N) -> SQR(N)
-> Rules:
 add(num0,X) -> X
 add(s(X),Y) -> s(add(X,Y))
 dbl(num0) -> num0
 dbl(s(X)) -> s(s(dbl(X)))
 first(num0,X) -> nil
 first(s(X),cons(Y,Z)) -> cons(Y,first(X,Z))
 sqr(num0) -> num0
 sqr(s(X)) -> s(add(sqr(X),dbl(X)))
 terms(N) -> cons(recip(sqr(N)),terms(s(N)))
-> Unhiding rules:
 Empty
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
