YES

Problem 1: 

(VAR vu95NonEmpty X Y)
(STRATEGY CONTEXTSENSITIVE
(diff 1 2)
(if 1)
(leq 1 2)
(p 1)
(num0)
(fSNonEmpty)
(ffalse)
(s 1)
(ftrue)
)
(RULES
diff(X,Y) -> if(leq(X,Y),num0,s(diff(p(X),Y)))
if(ffalse,X,Y) -> Y
if(ftrue,X,Y) -> X
leq(num0,Y) -> ftrue
leq(s(X),num0) -> ffalse
leq(s(X),s(Y)) -> leq(X,Y)
p(num0) -> num0
p(s(X)) -> X
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 diff(X,Y) -> if(leq(X,Y),num0,s(diff(p(X),Y)))
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 leq(num0,Y) -> ftrue
 leq(s(X),num0) -> ffalse
 leq(s(X),s(Y)) -> leq(X,Y)
 p(num0) -> num0
 p(s(X)) -> X
-> The context-sensitive term rewriting system is an orthogonal system. Therefore, innermost cs-termination implies cs-termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 DIFF(X,Y) -> IF(leq(X,Y),num0,s(diff(p(X),Y)))
 DIFF(X,Y) -> LEQ(X,Y)
 IF(ffalse,X,Y) -> Y
 IF(ftrue,X,Y) -> X
 LEQ(s(X),s(Y)) -> LEQ(X,Y)
-> Rules:
 diff(X,Y) -> if(leq(X,Y),num0,s(diff(p(X),Y)))
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 leq(num0,Y) -> ftrue
 leq(s(X),num0) -> ffalse
 leq(s(X),s(Y)) -> leq(X,Y)
 p(num0) -> num0
 p(s(X)) -> X
-> Unhiding Rules:
 s(diff(p(X),Y)) -> DIFF(p(X),Y)
 s(diff(p(X),Y)) -> P(X)

Problem 1: 

SCC Processor:
-> Pairs:
 DIFF(X,Y) -> IF(leq(X,Y),num0,s(diff(p(X),Y)))
 DIFF(X,Y) -> LEQ(X,Y)
 IF(ffalse,X,Y) -> Y
 IF(ftrue,X,Y) -> X
 LEQ(s(X),s(Y)) -> LEQ(X,Y)
-> Rules:
 diff(X,Y) -> if(leq(X,Y),num0,s(diff(p(X),Y)))
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 leq(num0,Y) -> ftrue
 leq(s(X),num0) -> ffalse
 leq(s(X),s(Y)) -> leq(X,Y)
 p(num0) -> num0
 p(s(X)) -> X
-> Unhiding rules:
 s(diff(p(X),Y)) -> DIFF(p(X),Y)
 s(diff(p(X),Y)) -> P(X)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 LEQ(s(X),s(Y)) -> LEQ(X,Y)
->->-> Rules:
 diff(X,Y) -> if(leq(X,Y),num0,s(diff(p(X),Y)))
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 leq(num0,Y) -> ftrue
 leq(s(X),num0) -> ffalse
 leq(s(X),s(Y)) -> leq(X,Y)
 p(num0) -> num0
 p(s(X)) -> X
->->-> Unhiding rules:
 Empty
->->Cycle:
->->-> Pairs:
 DIFF(X,Y) -> IF(leq(X,Y),num0,s(diff(p(X),Y)))
 IF(ffalse,X,Y) -> Y
 IF(ftrue,X,Y) -> X
->->-> Rules:
 diff(X,Y) -> if(leq(X,Y),num0,s(diff(p(X),Y)))
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 leq(num0,Y) -> ftrue
 leq(s(X),num0) -> ffalse
 leq(s(X),s(Y)) -> leq(X,Y)
 p(num0) -> num0
 p(s(X)) -> X
->->-> Unhiding rules:
 s(diff(p(X),Y)) -> DIFF(p(X),Y)


The problem is decomposed in 2 subproblems.

Problem 1.1: 

SubNColl Processor:
-> Pairs:
 LEQ(s(X),s(Y)) -> LEQ(X,Y)
-> Rules:
 diff(X,Y) -> if(leq(X,Y),num0,s(diff(p(X),Y)))
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 leq(num0,Y) -> ftrue
 leq(s(X),num0) -> ffalse
 leq(s(X),s(Y)) -> leq(X,Y)
 p(num0) -> num0
 p(s(X)) -> X
-> Unhiding rules:
 Empty
->Projection:
 pi(LEQ) = 1

Problem 1.1: 

Basic Processor:
-> Pairs:
 Empty
-> Rules:
 diff(X,Y) -> if(leq(X,Y),num0,s(diff(p(X),Y)))
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 leq(num0,Y) -> ftrue
 leq(s(X),num0) -> ffalse
 leq(s(X),s(Y)) -> leq(X,Y)
 p(num0) -> num0
 p(s(X)) -> X
-> Unhiding rules:
 Empty
-> Result:
 Set P is empty

The problem is finite.

Problem 1.2: 

Reduction Triple Processor:
-> Pairs:
 DIFF(X,Y) -> IF(leq(X,Y),num0,s(diff(p(X),Y)))
 IF(ffalse,X,Y) -> Y
 IF(ftrue,X,Y) -> X
-> Rules:
 diff(X,Y) -> if(leq(X,Y),num0,s(diff(p(X),Y)))
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 leq(num0,Y) -> ftrue
 leq(s(X),num0) -> ffalse
 leq(s(X),s(Y)) -> leq(X,Y)
 p(num0) -> num0
 p(s(X)) -> X
-> Unhiding rules:
 s(diff(p(X),Y)) -> DIFF(p(X),Y)
-> Usable rules:
 leq(num0,Y) -> ftrue
 leq(s(X),num0) -> ffalse
 leq(s(X),s(Y)) -> leq(X,Y)
 p(num0) -> num0
 p(s(X)) -> X
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[diff](X1,X2) = X1 + X2 + 1/2
[if](X1,X2,X3) = 0
[leq](X1,X2) = 1/2.X1
[p](X) = 1/2.X
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 1/2
[s](X) = 2.X + 1
[ftrue] = 0
[DIFF](X1,X2) = 2.X1 + 2.X2 + 2
[IF](X1,X2,X3) = X1 + X2 + X3
[LEQ](X1,X2) = 0
[P](X) = 0

Problem 1.2: 

SCC Processor:
-> Pairs:
 DIFF(X,Y) -> IF(leq(X,Y),num0,s(diff(p(X),Y)))
 IF(ftrue,X,Y) -> X
-> Rules:
 diff(X,Y) -> if(leq(X,Y),num0,s(diff(p(X),Y)))
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 leq(num0,Y) -> ftrue
 leq(s(X),num0) -> ffalse
 leq(s(X),s(Y)) -> leq(X,Y)
 p(num0) -> num0
 p(s(X)) -> X
-> Unhiding rules:
 s(diff(p(X),Y)) -> DIFF(p(X),Y)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 DIFF(X,Y) -> IF(leq(X,Y),num0,s(diff(p(X),Y)))
 IF(ftrue,X,Y) -> X
->->-> Rules:
 diff(X,Y) -> if(leq(X,Y),num0,s(diff(p(X),Y)))
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 leq(num0,Y) -> ftrue
 leq(s(X),num0) -> ffalse
 leq(s(X),s(Y)) -> leq(X,Y)
 p(num0) -> num0
 p(s(X)) -> X
->->-> Unhiding rules:
 s(diff(p(X),Y)) -> DIFF(p(X),Y)

Problem 1.2: 

Reduction Triple Processor:
-> Pairs:
 DIFF(X,Y) -> IF(leq(X,Y),num0,s(diff(p(X),Y)))
 IF(ftrue,X,Y) -> X
-> Rules:
 diff(X,Y) -> if(leq(X,Y),num0,s(diff(p(X),Y)))
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 leq(num0,Y) -> ftrue
 leq(s(X),num0) -> ffalse
 leq(s(X),s(Y)) -> leq(X,Y)
 p(num0) -> num0
 p(s(X)) -> X
-> Unhiding rules:
 s(diff(p(X),Y)) -> DIFF(p(X),Y)
-> Usable rules:
 leq(num0,Y) -> ftrue
 leq(s(X),num0) -> ffalse
 leq(s(X),s(Y)) -> leq(X,Y)
 p(num0) -> num0
 p(s(X)) -> X
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[diff](X1,X2) = 2.X1 + 2.X2 + 1
[if](X1,X2,X3) = 0
[leq](X1,X2) = 2.X2
[p](X) = 2.X + 2
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 0
[s](X) = 2.X + 1
[ftrue] = 0
[DIFF](X1,X2) = 2.X2 + 2
[IF](X1,X2,X3) = X1 + 2.X2 + 2
[LEQ](X1,X2) = 0
[P](X) = 0

Problem 1.2: 

SCC Processor:
-> Pairs:
 DIFF(X,Y) -> IF(leq(X,Y),num0,s(diff(p(X),Y)))
 IF(ftrue,X,Y) -> X
-> Rules:
 diff(X,Y) -> if(leq(X,Y),num0,s(diff(p(X),Y)))
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 leq(num0,Y) -> ftrue
 leq(s(X),num0) -> ffalse
 leq(s(X),s(Y)) -> leq(X,Y)
 p(num0) -> num0
 p(s(X)) -> X
-> Unhiding rules:
 Empty
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
