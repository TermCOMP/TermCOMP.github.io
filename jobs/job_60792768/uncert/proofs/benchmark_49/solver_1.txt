YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/nKodR.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given CSR could be proven:

(0) CSR
(1) CSRInnermostProof [EQUIVALENT, 0 ms]
(2) CSR
(3) CSDependencyPairsProof [EQUIVALENT, 0 ms]
(4) QCSDP
(5) QCSDependencyGraphProof [EQUIVALENT, 0 ms]
(6) QCSDP
(7) QCSDPSubtermProof [EQUIVALENT, 0 ms]
(8) QCSDP
(9) PIsEmptyProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   primes -> sieve(from(s(s(0))))
   from(X) -> cons(X, from(s(X)))
   head(cons(X, Y)) -> X
   tail(cons(X, Y)) -> Y
   if(true, X, Y) -> X
   if(false, X, Y) -> Y
   filter(s(s(X)), cons(Y, Z)) -> if(divides(s(s(X)), Y), filter(s(s(X)), Z), cons(Y, filter(X, sieve(Y))))
   sieve(cons(X, Y)) -> cons(X, filter(X, sieve(Y)))

The replacement map contains the following entries:

primes: empty set
sieve: {1}
from: {1}
s: {1}
0: empty set
cons: {1}
head: {1}
tail: {1}
if: {1}
true: empty set
false: empty set
filter: {1, 2}
divides: {1, 2}

----------------------------------------

(1) CSRInnermostProof (EQUIVALENT)
The CSR is orthogonal. By [CS_Inn] we can switch to innermost.
----------------------------------------

(2)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   primes -> sieve(from(s(s(0))))
   from(X) -> cons(X, from(s(X)))
   head(cons(X, Y)) -> X
   tail(cons(X, Y)) -> Y
   if(true, X, Y) -> X
   if(false, X, Y) -> Y
   filter(s(s(X)), cons(Y, Z)) -> if(divides(s(s(X)), Y), filter(s(s(X)), Z), cons(Y, filter(X, sieve(Y))))
   sieve(cons(X, Y)) -> cons(X, filter(X, sieve(Y)))

The replacement map contains the following entries:

primes: empty set
sieve: {1}
from: {1}
s: {1}
0: empty set
cons: {1}
head: {1}
tail: {1}
if: {1}
true: empty set
false: empty set
filter: {1, 2}
divides: {1, 2}


Innermost Strategy.

----------------------------------------

(3) CSDependencyPairsProof (EQUIVALENT)
Using Improved CS-DPs [LPAR08] we result in the following initial Q-CSDP problem.
----------------------------------------

(4)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {sieve_1, from_1, s_1, head_1, tail_1, filter_2, divides_2, SIEVE_1, FROM_1, FILTER_2, TAIL_1} are replacing on all positions.
For all symbols f in {cons_2, if_3, IF_3} we have mu(f) = {1}.
The symbols in {U_1} are not replacing on any position.

The ordinary context-sensitive dependency pairs DP_o are:
   PRIMES -> SIEVE(from(s(s(0))))
   PRIMES -> FROM(s(s(0)))
   FILTER(s(s(X)), cons(Y, Z)) -> IF(divides(s(s(X)), Y), filter(s(s(X)), Z), cons(Y, filter(X, sieve(Y))))

The collapsing dependency pairs are DP_c:
   TAIL(cons(X, Y)) -> Y
   IF(true, X, Y) -> X
   IF(false, X, Y) -> Y


The hidden terms of R are:

   from(s(x0))
   filter(s(s(x0)), x1)
   filter(x0, sieve(x1))
   sieve(x0)

Every hiding context is built from:
   aprove.DPFramework.CSDPProblem.QCSDPProblem$1@61b1c6df
   aprove.DPFramework.CSDPProblem.QCSDPProblem$1@61c748f7
   aprove.DPFramework.CSDPProblem.QCSDPProblem$1@7bdfcbb4
   aprove.DPFramework.CSDPProblem.QCSDPProblem$1@4afecb40
   aprove.DPFramework.CSDPProblem.QCSDPProblem$1@25166bfe

Hence, the new unhiding pairs DP_u are :
   TAIL(cons(X, Y)) -> U(Y)
   IF(true, X, Y) -> U(X)
   IF(false, X, Y) -> U(Y)
   U(s(x_0)) -> U(x_0)
   U(from(x_0)) -> U(x_0)
   U(filter(x_0, x_1)) -> U(x_0)
   U(filter(x_0, x_1)) -> U(x_1)
   U(sieve(x_0)) -> U(x_0)
   U(cons(x_0, x_1)) -> U(x_0)
   U(from(s(x0))) -> FROM(s(x0))
   U(filter(s(s(x0)), x1)) -> FILTER(s(s(x0)), x1)
   U(filter(x0, sieve(x1))) -> FILTER(x0, sieve(x1))
   U(sieve(x0)) -> SIEVE(x0)

The TRS R consists of the following rules:

   primes -> sieve(from(s(s(0))))
   from(X) -> cons(X, from(s(X)))
   head(cons(X, Y)) -> X
   tail(cons(X, Y)) -> Y
   if(true, X, Y) -> X
   if(false, X, Y) -> Y
   filter(s(s(X)), cons(Y, Z)) -> if(divides(s(s(X)), Y), filter(s(s(X)), Z), cons(Y, filter(X, sieve(Y))))
   sieve(cons(X, Y)) -> cons(X, filter(X, sieve(Y)))

The set Q consists of the following terms:

   primes
   from(x0)
   head(cons(x0, x1))
   tail(cons(x0, x1))
   if(true, x0, x1)
   if(false, x0, x1)
   filter(s(s(x0)), cons(x1, x2))
   sieve(cons(x0, x1))


----------------------------------------

(5) QCSDependencyGraphProof (EQUIVALENT)
The approximation of the Context-Sensitive Dependency Graph [LPAR08] contains 1 SCC with 8 less nodes.
The rules FILTER(s(s(z0)), cons(z1, z2)) -> IF(divides(s(s(z0)), z1), filter(s(s(z0)), z2), cons(z1, filter(z0, sieve(z1)))) and IF(true, x0, x1) -> U(x0) form no chain, because ECap^mu(IF(divides(s(s(z0)), z1), filter(s(s(z0)), z2), cons(z1, filter(z0, sieve(z1))))) = IF(divides(s(s(z0)), z1), filter(s(s(z0)), z2), cons(z1, filter(z0, sieve(z1)))) does not unify with IF(true, x0, x1). The rules FILTER(s(s(z0)), cons(z1, z2)) -> IF(divides(s(s(z0)), z1), filter(s(s(z0)), z2), cons(z1, filter(z0, sieve(z1)))) and IF(false, x0, x1) -> U(x1) form no chain, because ECap^mu(IF(divides(s(s(z0)), z1), filter(s(s(z0)), z2), cons(z1, filter(z0, sieve(z1))))) = IF(divides(s(s(z0)), z1), filter(s(s(z0)), z2), cons(z1, filter(z0, sieve(z1)))) does not unify with IF(false, x0, x1). 
----------------------------------------

(6)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {sieve_1, from_1, s_1, head_1, tail_1, filter_2, divides_2} are replacing on all positions.
For all symbols f in {cons_2, if_3} we have mu(f) = {1}.
The symbols in {U_1} are not replacing on any position.

The TRS P consists of the following rules:

   U(s(x_0)) -> U(x_0)
   U(from(x_0)) -> U(x_0)
   U(filter(x_0, x_1)) -> U(x_0)
   U(filter(x_0, x_1)) -> U(x_1)
   U(sieve(x_0)) -> U(x_0)
   U(cons(x_0, x_1)) -> U(x_0)

The TRS R consists of the following rules:

   primes -> sieve(from(s(s(0))))
   from(X) -> cons(X, from(s(X)))
   head(cons(X, Y)) -> X
   tail(cons(X, Y)) -> Y
   if(true, X, Y) -> X
   if(false, X, Y) -> Y
   filter(s(s(X)), cons(Y, Z)) -> if(divides(s(s(X)), Y), filter(s(s(X)), Z), cons(Y, filter(X, sieve(Y))))
   sieve(cons(X, Y)) -> cons(X, filter(X, sieve(Y)))

The set Q consists of the following terms:

   primes
   from(x0)
   head(cons(x0, x1))
   tail(cons(x0, x1))
   if(true, x0, x1)
   if(false, x0, x1)
   filter(s(s(x0)), cons(x1, x2))
   sieve(cons(x0, x1))


----------------------------------------

(7) QCSDPSubtermProof (EQUIVALENT)
We use the subterm processor [DA_EMMES].


The following pairs can be oriented strictly and are deleted.

   U(s(x_0)) -> U(x_0)
   U(from(x_0)) -> U(x_0)
   U(filter(x_0, x_1)) -> U(x_0)
   U(filter(x_0, x_1)) -> U(x_1)
   U(sieve(x_0)) -> U(x_0)
   U(cons(x_0, x_1)) -> U(x_0)
The remaining pairs can at least be oriented weakly.
none
Used ordering:  Combined order from the following AFS and order.
U(x1)  =  x1


Subterm Order

----------------------------------------

(8)
Obligation:
Q-restricted context-sensitive dependency pair problem:
The symbols in {sieve_1, from_1, s_1, head_1, tail_1, filter_2, divides_2} are replacing on all positions.
For all symbols f in {cons_2, if_3} we have mu(f) = {1}.

The TRS P consists of the following rules:
none

The TRS R consists of the following rules:

   primes -> sieve(from(s(s(0))))
   from(X) -> cons(X, from(s(X)))
   head(cons(X, Y)) -> X
   tail(cons(X, Y)) -> Y
   if(true, X, Y) -> X
   if(false, X, Y) -> Y
   filter(s(s(X)), cons(Y, Z)) -> if(divides(s(s(X)), Y), filter(s(s(X)), Z), cons(Y, filter(X, sieve(Y))))
   sieve(cons(X, Y)) -> cons(X, filter(X, sieve(Y)))

The set Q consists of the following terms:

   primes
   from(x0)
   head(cons(x0, x1))
   tail(cons(x0, x1))
   if(true, x0, x1)
   if(false, x0, x1)
   filter(s(s(x0)), cons(x1, x2))
   sieve(cons(x0, x1))


----------------------------------------

(9) PIsEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R,mu)-chain.
----------------------------------------

(10)
YES
