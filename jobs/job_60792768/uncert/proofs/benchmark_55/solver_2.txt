YES

Problem 1: 

(VAR vu95NonEmpty x y)
(STRATEGY CONTEXTSENSITIVE
(if 1)
(isZero 1)
(p 1)
(plus 1 2)
(num0)
(fSNonEmpty)
(ffalse)
(s 1)
(ftrue)
)
(RULES
if(ffalse,x,y) -> y
if(ftrue,x,y) -> x
isZero(num0) -> ftrue
isZero(s(x)) -> ffalse
p(s(x)) -> x
plus(x,y) -> if(isZero(x),y,s(plus(p(x),y)))
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 isZero(num0) -> ftrue
 isZero(s(x)) -> ffalse
 p(s(x)) -> x
 plus(x,y) -> if(isZero(x),y,s(plus(p(x),y)))
-> The context-sensitive term rewriting system is an orthogonal system. Therefore, innermost cs-termination implies cs-termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 IF(ffalse,x,y) -> y
 IF(ftrue,x,y) -> x
 PLUS(x,y) -> IF(isZero(x),y,s(plus(p(x),y)))
 PLUS(x,y) -> ISZERO(x)
-> Rules:
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 isZero(num0) -> ftrue
 isZero(s(x)) -> ffalse
 p(s(x)) -> x
 plus(x,y) -> if(isZero(x),y,s(plus(p(x),y)))
-> Unhiding Rules:
 s(plus(p(x),y)) -> P(x)
 s(plus(p(x),y)) -> PLUS(p(x),y)

Problem 1: 

SCC Processor:
-> Pairs:
 IF(ffalse,x,y) -> y
 IF(ftrue,x,y) -> x
 PLUS(x,y) -> IF(isZero(x),y,s(plus(p(x),y)))
 PLUS(x,y) -> ISZERO(x)
-> Rules:
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 isZero(num0) -> ftrue
 isZero(s(x)) -> ffalse
 p(s(x)) -> x
 plus(x,y) -> if(isZero(x),y,s(plus(p(x),y)))
-> Unhiding rules:
 s(plus(p(x),y)) -> P(x)
 s(plus(p(x),y)) -> PLUS(p(x),y)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 IF(ffalse,x,y) -> y
 IF(ftrue,x,y) -> x
 PLUS(x,y) -> IF(isZero(x),y,s(plus(p(x),y)))
->->-> Rules:
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 isZero(num0) -> ftrue
 isZero(s(x)) -> ffalse
 p(s(x)) -> x
 plus(x,y) -> if(isZero(x),y,s(plus(p(x),y)))
->->-> Unhiding rules:
 s(plus(p(x),y)) -> PLUS(p(x),y)

Problem 1: 

Reduction Triple Processor:
-> Pairs:
 IF(ffalse,x,y) -> y
 IF(ftrue,x,y) -> x
 PLUS(x,y) -> IF(isZero(x),y,s(plus(p(x),y)))
-> Rules:
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 isZero(num0) -> ftrue
 isZero(s(x)) -> ffalse
 p(s(x)) -> x
 plus(x,y) -> if(isZero(x),y,s(plus(p(x),y)))
-> Unhiding rules:
 s(plus(p(x),y)) -> PLUS(p(x),y)
-> Usable rules:
 isZero(num0) -> ftrue
 isZero(s(x)) -> ffalse
 p(s(x)) -> x
->Interpretation type:
 Simple mixed
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[if](X1,X2,X3) = 0
[isZero](X) = 1/2.X
[p](X) = 1/2.X
[plus](X1,X2) = X1.X2 + 1/2.X1 + 1/2
[num0] = 2
[fSNonEmpty] = 0
[ffalse] = 1/2
[s](X) = 2.X + 1
[ftrue] = 1/2
[IF](X1,X2,X3) = 2.X1.X2 + 1/2.X1 + X3
[ISZERO](X) = 0
[P](X) = 0
[PLUS](X1,X2) = 2.X1.X2 + X1 + 2

Problem 1: 

SCC Processor:
-> Pairs:
 IF(ftrue,x,y) -> x
 PLUS(x,y) -> IF(isZero(x),y,s(plus(p(x),y)))
-> Rules:
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 isZero(num0) -> ftrue
 isZero(s(x)) -> ffalse
 p(s(x)) -> x
 plus(x,y) -> if(isZero(x),y,s(plus(p(x),y)))
-> Unhiding rules:
 s(plus(p(x),y)) -> PLUS(p(x),y)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 IF(ftrue,x,y) -> x
 PLUS(x,y) -> IF(isZero(x),y,s(plus(p(x),y)))
->->-> Rules:
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 isZero(num0) -> ftrue
 isZero(s(x)) -> ffalse
 p(s(x)) -> x
 plus(x,y) -> if(isZero(x),y,s(plus(p(x),y)))
->->-> Unhiding rules:
 s(plus(p(x),y)) -> PLUS(p(x),y)

Problem 1: 

SubNColl Processor:
-> Pairs:
 IF(ftrue,x,y) -> x
 PLUS(x,y) -> IF(isZero(x),y,s(plus(p(x),y)))
-> Rules:
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 isZero(num0) -> ftrue
 isZero(s(x)) -> ffalse
 p(s(x)) -> x
 plus(x,y) -> if(isZero(x),y,s(plus(p(x),y)))
-> Unhiding rules:
 s(plus(p(x),y)) -> PLUS(p(x),y)
->Projection:
 pi(IF) = 2
 pi(PLUS) = 2

Problem 1: 

SCC Processor:
-> Pairs:
 IF(ftrue,x,y) -> x
 PLUS(x,y) -> IF(isZero(x),y,s(plus(p(x),y)))
-> Rules:
 if(ffalse,x,y) -> y
 if(ftrue,x,y) -> x
 isZero(num0) -> ftrue
 isZero(s(x)) -> ffalse
 p(s(x)) -> x
 plus(x,y) -> if(isZero(x),y,s(plus(p(x),y)))
-> Unhiding rules:
 Empty
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
