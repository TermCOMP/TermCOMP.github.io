YES

Problem 1: 

(VAR vu95NonEmpty IL L M N V V1 V2)
(STRATEGY CONTEXTSENSITIVE
(U11 1)
(U21 1)
(U31 1)
(U41 1)
(U42 1)
(U51 1)
(U52 1)
(U61 1)
(U62 1)
(U71 1)
(U72 1)
(U81 1)
(U91 1)
(U92 1)
(U93 1)
(isNat)
(isNatIList)
(isNatList)
(length 1)
(take 1 2)
(zeros)
(num0)
(cons 1)
(fSNonEmpty)
(nil)
(s 1)
(tt)
)
(RULES
U11(tt) -> tt
U21(tt) -> tt
U31(tt) -> tt
U41(tt,V2) -> U42(isNatIList(V2))
U42(tt) -> tt
U51(tt,V2) -> U52(isNatList(V2))
U52(tt) -> tt
U61(tt,V2) -> U62(isNatIList(V2))
U62(tt) -> tt
U71(tt,L,N) -> U72(isNat(N),L)
U72(tt,L) -> s(length(L))
U81(tt) -> nil
U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N)
U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N)
U93(tt,IL,M,N) -> cons(N,take(M,IL))
isNat(length(V1)) -> U11(isNatList(V1))
isNat(num0) -> tt
isNat(s(V1)) -> U21(isNat(V1))
isNatIList(zeros) -> tt
isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
isNatIList(V) -> U31(isNatList(V))
isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
isNatList(nil) -> tt
length(cons(N,L)) -> U71(isNatList(L),L,N)
length(nil) -> num0
take(num0,IL) -> U81(isNatIList(IL))
take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)
zeros -> cons(num0,zeros)
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 U41Sharp(tt,V2) -> U42Sharp(isNatIList(V2))
 U41Sharp(tt,V2) -> ISNATILIST(V2)
 U51Sharp(tt,V2) -> U52Sharp(isNatList(V2))
 U51Sharp(tt,V2) -> ISNATLIST(V2)
 U61Sharp(tt,V2) -> U62Sharp(isNatIList(V2))
 U61Sharp(tt,V2) -> ISNATILIST(V2)
 U71Sharp(tt,L,N) -> U72Sharp(isNat(N),L)
 U71Sharp(tt,L,N) -> ISNAT(N)
 U72Sharp(tt,L) -> LENGTH(L)
 U72Sharp(tt,L) -> L
 U91Sharp(tt,IL,M,N) -> U92Sharp(isNat(M),IL,M,N)
 U91Sharp(tt,IL,M,N) -> ISNAT(M)
 U92Sharp(tt,IL,M,N) -> U93Sharp(isNat(N),IL,M,N)
 U92Sharp(tt,IL,M,N) -> ISNAT(N)
 U93Sharp(tt,IL,M,N) -> N
 ISNAT(length(V1)) -> U11Sharp(isNatList(V1))
 ISNAT(length(V1)) -> ISNATLIST(V1)
 ISNAT(s(V1)) -> U21Sharp(isNat(V1))
 ISNAT(s(V1)) -> ISNAT(V1)
 ISNATILIST(cons(V1,V2)) -> U41Sharp(isNat(V1),V2)
 ISNATILIST(cons(V1,V2)) -> ISNAT(V1)
 ISNATILIST(V) -> U31Sharp(isNatList(V))
 ISNATILIST(V) -> ISNATLIST(V)
 ISNATLIST(take(V1,V2)) -> U61Sharp(isNat(V1),V2)
 ISNATLIST(take(V1,V2)) -> ISNAT(V1)
 ISNATLIST(cons(V1,V2)) -> U51Sharp(isNat(V1),V2)
 ISNATLIST(cons(V1,V2)) -> ISNAT(V1)
 LENGTH(cons(N,L)) -> U71Sharp(isNatList(L),L,N)
 LENGTH(cons(N,L)) -> ISNATLIST(L)
 TAKE(num0,IL) -> U81Sharp(isNatIList(IL))
 TAKE(num0,IL) -> ISNATILIST(IL)
 TAKE(s(M),cons(N,IL)) -> U91Sharp(isNatIList(IL),IL,M,N)
 TAKE(s(M),cons(N,IL)) -> ISNATILIST(IL)
-> Rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 U71(tt,L,N) -> U72(isNat(N),L)
 U72(tt,L) -> s(length(L))
 U81(tt) -> nil
 U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N)
 U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N)
 U93(tt,IL,M,N) -> cons(N,take(M,IL))
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
 length(cons(N,L)) -> U71(isNatList(L),L,N)
 length(nil) -> num0
 take(num0,IL) -> U81(isNatIList(IL))
 take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)
 zeros -> cons(num0,zeros)
-> Unhiding Rules:
 take(M,IL) -> TAKE(M,IL)
 take(M,x8) -> x8
 take(x8,IL) -> x8
 zeros -> ZEROS

Problem 1: 

SCC Processor:
-> Pairs:
 U41Sharp(tt,V2) -> U42Sharp(isNatIList(V2))
 U41Sharp(tt,V2) -> ISNATILIST(V2)
 U51Sharp(tt,V2) -> U52Sharp(isNatList(V2))
 U51Sharp(tt,V2) -> ISNATLIST(V2)
 U61Sharp(tt,V2) -> U62Sharp(isNatIList(V2))
 U61Sharp(tt,V2) -> ISNATILIST(V2)
 U71Sharp(tt,L,N) -> U72Sharp(isNat(N),L)
 U71Sharp(tt,L,N) -> ISNAT(N)
 U72Sharp(tt,L) -> LENGTH(L)
 U72Sharp(tt,L) -> L
 U91Sharp(tt,IL,M,N) -> U92Sharp(isNat(M),IL,M,N)
 U91Sharp(tt,IL,M,N) -> ISNAT(M)
 U92Sharp(tt,IL,M,N) -> U93Sharp(isNat(N),IL,M,N)
 U92Sharp(tt,IL,M,N) -> ISNAT(N)
 U93Sharp(tt,IL,M,N) -> N
 ISNAT(length(V1)) -> U11Sharp(isNatList(V1))
 ISNAT(length(V1)) -> ISNATLIST(V1)
 ISNAT(s(V1)) -> U21Sharp(isNat(V1))
 ISNAT(s(V1)) -> ISNAT(V1)
 ISNATILIST(cons(V1,V2)) -> U41Sharp(isNat(V1),V2)
 ISNATILIST(cons(V1,V2)) -> ISNAT(V1)
 ISNATILIST(V) -> U31Sharp(isNatList(V))
 ISNATILIST(V) -> ISNATLIST(V)
 ISNATLIST(take(V1,V2)) -> U61Sharp(isNat(V1),V2)
 ISNATLIST(take(V1,V2)) -> ISNAT(V1)
 ISNATLIST(cons(V1,V2)) -> U51Sharp(isNat(V1),V2)
 ISNATLIST(cons(V1,V2)) -> ISNAT(V1)
 LENGTH(cons(N,L)) -> U71Sharp(isNatList(L),L,N)
 LENGTH(cons(N,L)) -> ISNATLIST(L)
 TAKE(num0,IL) -> U81Sharp(isNatIList(IL))
 TAKE(num0,IL) -> ISNATILIST(IL)
 TAKE(s(M),cons(N,IL)) -> U91Sharp(isNatIList(IL),IL,M,N)
 TAKE(s(M),cons(N,IL)) -> ISNATILIST(IL)
-> Rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 U71(tt,L,N) -> U72(isNat(N),L)
 U72(tt,L) -> s(length(L))
 U81(tt) -> nil
 U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N)
 U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N)
 U93(tt,IL,M,N) -> cons(N,take(M,IL))
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
 length(cons(N,L)) -> U71(isNatList(L),L,N)
 length(nil) -> num0
 take(num0,IL) -> U81(isNatIList(IL))
 take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)
 zeros -> cons(num0,zeros)
-> Unhiding rules:
 take(M,IL) -> TAKE(M,IL)
 take(M,x8) -> x8
 take(x8,IL) -> x8
 zeros -> ZEROS
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 U41Sharp(tt,V2) -> ISNATILIST(V2)
 U51Sharp(tt,V2) -> ISNATLIST(V2)
 U61Sharp(tt,V2) -> ISNATILIST(V2)
 ISNAT(length(V1)) -> ISNATLIST(V1)
 ISNAT(s(V1)) -> ISNAT(V1)
 ISNATILIST(cons(V1,V2)) -> U41Sharp(isNat(V1),V2)
 ISNATILIST(cons(V1,V2)) -> ISNAT(V1)
 ISNATILIST(V) -> ISNATLIST(V)
 ISNATLIST(take(V1,V2)) -> U61Sharp(isNat(V1),V2)
 ISNATLIST(take(V1,V2)) -> ISNAT(V1)
 ISNATLIST(cons(V1,V2)) -> U51Sharp(isNat(V1),V2)
 ISNATLIST(cons(V1,V2)) -> ISNAT(V1)
->->-> Rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 U71(tt,L,N) -> U72(isNat(N),L)
 U72(tt,L) -> s(length(L))
 U81(tt) -> nil
 U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N)
 U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N)
 U93(tt,IL,M,N) -> cons(N,take(M,IL))
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
 length(cons(N,L)) -> U71(isNatList(L),L,N)
 length(nil) -> num0
 take(num0,IL) -> U81(isNatIList(IL))
 take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)
 zeros -> cons(num0,zeros)
->->-> Unhiding rules:
 Empty
->->Cycle:
->->-> Pairs:
 U91Sharp(tt,IL,M,N) -> U92Sharp(isNat(M),IL,M,N)
 U92Sharp(tt,IL,M,N) -> U93Sharp(isNat(N),IL,M,N)
 U93Sharp(tt,IL,M,N) -> N
 TAKE(s(M),cons(N,IL)) -> U91Sharp(isNatIList(IL),IL,M,N)
->->-> Rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 U71(tt,L,N) -> U72(isNat(N),L)
 U72(tt,L) -> s(length(L))
 U81(tt) -> nil
 U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N)
 U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N)
 U93(tt,IL,M,N) -> cons(N,take(M,IL))
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
 length(cons(N,L)) -> U71(isNatList(L),L,N)
 length(nil) -> num0
 take(num0,IL) -> U81(isNatIList(IL))
 take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)
 zeros -> cons(num0,zeros)
->->-> Unhiding rules:
 take(M,IL) -> TAKE(M,IL)
 take(M,x8) -> x8
 take(x8,IL) -> x8
->->Cycle:
->->-> Pairs:
 U71Sharp(tt,L,N) -> U72Sharp(isNat(N),L)
 U72Sharp(tt,L) -> LENGTH(L)
 LENGTH(cons(N,L)) -> U71Sharp(isNatList(L),L,N)
->->-> Rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 U71(tt,L,N) -> U72(isNat(N),L)
 U72(tt,L) -> s(length(L))
 U81(tt) -> nil
 U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N)
 U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N)
 U93(tt,IL,M,N) -> cons(N,take(M,IL))
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
 length(cons(N,L)) -> U71(isNatList(L),L,N)
 length(nil) -> num0
 take(num0,IL) -> U81(isNatIList(IL))
 take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)
 zeros -> cons(num0,zeros)
->->-> Unhiding rules:
 Empty


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Reduction Triple Processor:
-> Pairs:
 U41Sharp(tt,V2) -> ISNATILIST(V2)
 U51Sharp(tt,V2) -> ISNATLIST(V2)
 U61Sharp(tt,V2) -> ISNATILIST(V2)
 ISNAT(length(V1)) -> ISNATLIST(V1)
 ISNAT(s(V1)) -> ISNAT(V1)
 ISNATILIST(cons(V1,V2)) -> U41Sharp(isNat(V1),V2)
 ISNATILIST(cons(V1,V2)) -> ISNAT(V1)
 ISNATILIST(V) -> ISNATLIST(V)
 ISNATLIST(take(V1,V2)) -> U61Sharp(isNat(V1),V2)
 ISNATLIST(take(V1,V2)) -> ISNAT(V1)
 ISNATLIST(cons(V1,V2)) -> U51Sharp(isNat(V1),V2)
 ISNATLIST(cons(V1,V2)) -> ISNAT(V1)
-> Rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 U71(tt,L,N) -> U72(isNat(N),L)
 U72(tt,L) -> s(length(L))
 U81(tt) -> nil
 U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N)
 U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N)
 U93(tt,IL,M,N) -> cons(N,take(M,IL))
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
 length(cons(N,L)) -> U71(isNatList(L),L,N)
 length(nil) -> num0
 take(num0,IL) -> U81(isNatIList(IL))
 take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)
 zeros -> cons(num0,zeros)
-> Unhiding rules:
 Empty
-> Usable rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[U11](X) = 2
[U21](X) = 2
[U31](X) = 2.X
[U41](X1,X2) = X1 + 2.X2 + 1
[U42](X) = X
[U51](X1,X2) = X1 + 2.X2 + 1
[U52](X) = 2.X + 1
[U61](X1,X2) = X1 + 2.X2 + 1
[U62](X) = X + 1
[U71](X1,X2,X3) = 0
[U72](X1,X2) = 0
[U81](X) = 0
[U91](X1,X2,X3,X4) = 0
[U92](X1,X2,X3,X4) = 0
[U93](X1,X2,X3,X4) = 0
[isNat](X) = 2
[isNatIList](X) = 2.X + 2
[isNatList](X) = X + 1
[length](X) = 2.X
[take](X1,X2) = X1 + 2.X2 + 2
[zeros] = 1
[num0] = 0
[cons](X1,X2) = 2.X1 + 2.X2 + 2
[fSNonEmpty] = 0
[nil] = 1
[s](X) = X
[tt] = 2
[U11Sharp](X) = 0
[U21Sharp](X) = 0
[U31Sharp](X) = 0
[U41Sharp](X1,X2) = 2.X2 + 2
[U42Sharp](X) = 0
[U51Sharp](X1,X2) = X1 + 2.X2 + 2
[U52Sharp](X) = 0
[U61Sharp](X1,X2) = 2.X1 + 2.X2
[U62Sharp](X) = 0
[U71Sharp](X1,X2,X3) = 0
[U72Sharp](X1,X2) = 0
[U81Sharp](X) = 0
[U91Sharp](X1,X2,X3,X4) = 0
[U92Sharp](X1,X2,X3,X4) = 0
[U93Sharp](X1,X2,X3,X4) = 0
[ISNAT](X) = 2.X
[ISNATILIST](X) = 2.X + 1
[ISNATLIST](X) = 2.X
[LENGTH](X) = 0
[TAKE](X1,X2) = 0
[ZEROS] = 0

Problem 1.1: 

SCC Processor:
-> Pairs:
 U51Sharp(tt,V2) -> ISNATLIST(V2)
 U61Sharp(tt,V2) -> ISNATILIST(V2)
 ISNAT(length(V1)) -> ISNATLIST(V1)
 ISNAT(s(V1)) -> ISNAT(V1)
 ISNATILIST(cons(V1,V2)) -> U41Sharp(isNat(V1),V2)
 ISNATILIST(cons(V1,V2)) -> ISNAT(V1)
 ISNATILIST(V) -> ISNATLIST(V)
 ISNATLIST(take(V1,V2)) -> U61Sharp(isNat(V1),V2)
 ISNATLIST(take(V1,V2)) -> ISNAT(V1)
 ISNATLIST(cons(V1,V2)) -> U51Sharp(isNat(V1),V2)
 ISNATLIST(cons(V1,V2)) -> ISNAT(V1)
-> Rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 U71(tt,L,N) -> U72(isNat(N),L)
 U72(tt,L) -> s(length(L))
 U81(tt) -> nil
 U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N)
 U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N)
 U93(tt,IL,M,N) -> cons(N,take(M,IL))
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
 length(cons(N,L)) -> U71(isNatList(L),L,N)
 length(nil) -> num0
 take(num0,IL) -> U81(isNatIList(IL))
 take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)
 zeros -> cons(num0,zeros)
-> Unhiding rules:
 Empty
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 U51Sharp(tt,V2) -> ISNATLIST(V2)
 U61Sharp(tt,V2) -> ISNATILIST(V2)
 ISNAT(length(V1)) -> ISNATLIST(V1)
 ISNAT(s(V1)) -> ISNAT(V1)
 ISNATILIST(cons(V1,V2)) -> ISNAT(V1)
 ISNATILIST(V) -> ISNATLIST(V)
 ISNATLIST(take(V1,V2)) -> U61Sharp(isNat(V1),V2)
 ISNATLIST(take(V1,V2)) -> ISNAT(V1)
 ISNATLIST(cons(V1,V2)) -> U51Sharp(isNat(V1),V2)
 ISNATLIST(cons(V1,V2)) -> ISNAT(V1)
->->-> Rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 U71(tt,L,N) -> U72(isNat(N),L)
 U72(tt,L) -> s(length(L))
 U81(tt) -> nil
 U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N)
 U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N)
 U93(tt,IL,M,N) -> cons(N,take(M,IL))
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
 length(cons(N,L)) -> U71(isNatList(L),L,N)
 length(nil) -> num0
 take(num0,IL) -> U81(isNatIList(IL))
 take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)
 zeros -> cons(num0,zeros)
->->-> Unhiding rules:
 Empty

Problem 1.1: 

Reduction Triple Processor:
-> Pairs:
 U51Sharp(tt,V2) -> ISNATLIST(V2)
 U61Sharp(tt,V2) -> ISNATILIST(V2)
 ISNAT(length(V1)) -> ISNATLIST(V1)
 ISNAT(s(V1)) -> ISNAT(V1)
 ISNATILIST(cons(V1,V2)) -> ISNAT(V1)
 ISNATILIST(V) -> ISNATLIST(V)
 ISNATLIST(take(V1,V2)) -> U61Sharp(isNat(V1),V2)
 ISNATLIST(take(V1,V2)) -> ISNAT(V1)
 ISNATLIST(cons(V1,V2)) -> U51Sharp(isNat(V1),V2)
 ISNATLIST(cons(V1,V2)) -> ISNAT(V1)
-> Rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 U71(tt,L,N) -> U72(isNat(N),L)
 U72(tt,L) -> s(length(L))
 U81(tt) -> nil
 U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N)
 U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N)
 U93(tt,IL,M,N) -> cons(N,take(M,IL))
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
 length(cons(N,L)) -> U71(isNatList(L),L,N)
 length(nil) -> num0
 take(num0,IL) -> U81(isNatIList(IL))
 take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)
 zeros -> cons(num0,zeros)
-> Unhiding rules:
 Empty
-> Usable rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[U11](X) = 2
[U21](X) = 2
[U31](X) = 2
[U41](X1,X2) = 2.X1 + 2
[U42](X) = 2
[U51](X1,X2) = 2.X1 + 2.X2 + 2
[U52](X) = X + 1
[U61](X1,X2) = X1 + 2.X2 + 1
[U62](X) = X + 1
[U71](X1,X2,X3) = 0
[U72](X1,X2) = 0
[U81](X) = 0
[U91](X1,X2,X3,X4) = 0
[U92](X1,X2,X3,X4) = 0
[U93](X1,X2,X3,X4) = 0
[isNat](X) = 2.X + 2
[isNatIList](X) = 2.X + 2
[isNatList](X) = 2.X + 2
[length](X) = 2.X + 2
[take](X1,X2) = 2.X1 + 2.X2 + 2
[zeros] = 2
[num0] = 0
[cons](X1,X2) = 2.X1 + 2.X2 + 2
[fSNonEmpty] = 0
[nil] = 0
[s](X) = X
[tt] = 2
[U11Sharp](X) = 0
[U21Sharp](X) = 0
[U31Sharp](X) = 0
[U41Sharp](X1,X2) = 0
[U42Sharp](X) = 0
[U51Sharp](X1,X2) = X1 + 2.X2 + 1
[U52Sharp](X) = 0
[U61Sharp](X1,X2) = 2.X1 + 2.X2
[U62Sharp](X) = 0
[U71Sharp](X1,X2,X3) = 0
[U72Sharp](X1,X2) = 0
[U81Sharp](X) = 0
[U91Sharp](X1,X2,X3,X4) = 0
[U92Sharp](X1,X2,X3,X4) = 0
[U93Sharp](X1,X2,X3,X4) = 0
[ISNAT](X) = 2.X + 2
[ISNATILIST](X) = 2.X + 1
[ISNATLIST](X) = 2.X
[LENGTH](X) = 0
[TAKE](X1,X2) = 0
[ZEROS] = 0

Problem 1.1: 

SCC Processor:
-> Pairs:
 U61Sharp(tt,V2) -> ISNATILIST(V2)
 ISNAT(length(V1)) -> ISNATLIST(V1)
 ISNAT(s(V1)) -> ISNAT(V1)
 ISNATILIST(cons(V1,V2)) -> ISNAT(V1)
 ISNATILIST(V) -> ISNATLIST(V)
 ISNATLIST(take(V1,V2)) -> U61Sharp(isNat(V1),V2)
 ISNATLIST(take(V1,V2)) -> ISNAT(V1)
 ISNATLIST(cons(V1,V2)) -> U51Sharp(isNat(V1),V2)
 ISNATLIST(cons(V1,V2)) -> ISNAT(V1)
-> Rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 U71(tt,L,N) -> U72(isNat(N),L)
 U72(tt,L) -> s(length(L))
 U81(tt) -> nil
 U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N)
 U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N)
 U93(tt,IL,M,N) -> cons(N,take(M,IL))
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
 length(cons(N,L)) -> U71(isNatList(L),L,N)
 length(nil) -> num0
 take(num0,IL) -> U81(isNatIList(IL))
 take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)
 zeros -> cons(num0,zeros)
-> Unhiding rules:
 Empty
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 U61Sharp(tt,V2) -> ISNATILIST(V2)
 ISNAT(length(V1)) -> ISNATLIST(V1)
 ISNAT(s(V1)) -> ISNAT(V1)
 ISNATILIST(cons(V1,V2)) -> ISNAT(V1)
 ISNATILIST(V) -> ISNATLIST(V)
 ISNATLIST(take(V1,V2)) -> U61Sharp(isNat(V1),V2)
 ISNATLIST(take(V1,V2)) -> ISNAT(V1)
 ISNATLIST(cons(V1,V2)) -> ISNAT(V1)
->->-> Rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 U71(tt,L,N) -> U72(isNat(N),L)
 U72(tt,L) -> s(length(L))
 U81(tt) -> nil
 U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N)
 U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N)
 U93(tt,IL,M,N) -> cons(N,take(M,IL))
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
 length(cons(N,L)) -> U71(isNatList(L),L,N)
 length(nil) -> num0
 take(num0,IL) -> U81(isNatIList(IL))
 take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)
 zeros -> cons(num0,zeros)
->->-> Unhiding rules:
 Empty

Problem 1.1: 

SubNColl Processor:
-> Pairs:
 U61Sharp(tt,V2) -> ISNATILIST(V2)
 ISNAT(length(V1)) -> ISNATLIST(V1)
 ISNAT(s(V1)) -> ISNAT(V1)
 ISNATILIST(cons(V1,V2)) -> ISNAT(V1)
 ISNATILIST(V) -> ISNATLIST(V)
 ISNATLIST(take(V1,V2)) -> U61Sharp(isNat(V1),V2)
 ISNATLIST(take(V1,V2)) -> ISNAT(V1)
 ISNATLIST(cons(V1,V2)) -> ISNAT(V1)
-> Rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 U71(tt,L,N) -> U72(isNat(N),L)
 U72(tt,L) -> s(length(L))
 U81(tt) -> nil
 U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N)
 U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N)
 U93(tt,IL,M,N) -> cons(N,take(M,IL))
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
 length(cons(N,L)) -> U71(isNatList(L),L,N)
 length(nil) -> num0
 take(num0,IL) -> U81(isNatIList(IL))
 take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)
 zeros -> cons(num0,zeros)
-> Unhiding rules:
 Empty
->Projection:
 pi(U61Sharp) = 2
 pi(ISNAT) = 1
 pi(ISNATILIST) = 1
 pi(ISNATLIST) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 U61Sharp(tt,V2) -> ISNATILIST(V2)
 ISNATILIST(V) -> ISNATLIST(V)
-> Rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 U71(tt,L,N) -> U72(isNat(N),L)
 U72(tt,L) -> s(length(L))
 U81(tt) -> nil
 U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N)
 U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N)
 U93(tt,IL,M,N) -> cons(N,take(M,IL))
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
 length(cons(N,L)) -> U71(isNatList(L),L,N)
 length(nil) -> num0
 take(num0,IL) -> U81(isNatIList(IL))
 take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)
 zeros -> cons(num0,zeros)
-> Unhiding rules:
 Empty
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

SubNColl Processor:
-> Pairs:
 U91Sharp(tt,IL,M,N) -> U92Sharp(isNat(M),IL,M,N)
 U92Sharp(tt,IL,M,N) -> U93Sharp(isNat(N),IL,M,N)
 U93Sharp(tt,IL,M,N) -> N
 TAKE(s(M),cons(N,IL)) -> U91Sharp(isNatIList(IL),IL,M,N)
-> Rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 U71(tt,L,N) -> U72(isNat(N),L)
 U72(tt,L) -> s(length(L))
 U81(tt) -> nil
 U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N)
 U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N)
 U93(tt,IL,M,N) -> cons(N,take(M,IL))
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
 length(cons(N,L)) -> U71(isNatList(L),L,N)
 length(nil) -> num0
 take(num0,IL) -> U81(isNatIList(IL))
 take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)
 zeros -> cons(num0,zeros)
-> Unhiding rules:
 take(M,IL) -> TAKE(M,IL)
 take(M,x8) -> x8
 take(x8,IL) -> x8
->Projection:
 pi(U91Sharp) = 4
 pi(U92Sharp) = 4
 pi(U93Sharp) = 4
 pi(TAKE) = 2

Problem 1.2: 

SCC Processor:
-> Pairs:
 U91Sharp(tt,IL,M,N) -> U92Sharp(isNat(M),IL,M,N)
 U92Sharp(tt,IL,M,N) -> U93Sharp(isNat(N),IL,M,N)
 U93Sharp(tt,IL,M,N) -> N
-> Rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 U71(tt,L,N) -> U72(isNat(N),L)
 U72(tt,L) -> s(length(L))
 U81(tt) -> nil
 U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N)
 U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N)
 U93(tt,IL,M,N) -> cons(N,take(M,IL))
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
 length(cons(N,L)) -> U71(isNatList(L),L,N)
 length(nil) -> num0
 take(num0,IL) -> U81(isNatIList(IL))
 take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)
 zeros -> cons(num0,zeros)
-> Unhiding rules:
 Empty
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.3: 

Reduction Triple Processor:
-> Pairs:
 U71Sharp(tt,L,N) -> U72Sharp(isNat(N),L)
 U72Sharp(tt,L) -> LENGTH(L)
 LENGTH(cons(N,L)) -> U71Sharp(isNatList(L),L,N)
-> Rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 U71(tt,L,N) -> U72(isNat(N),L)
 U72(tt,L) -> s(length(L))
 U81(tt) -> nil
 U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N)
 U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N)
 U93(tt,IL,M,N) -> cons(N,take(M,IL))
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
 length(cons(N,L)) -> U71(isNatList(L),L,N)
 length(nil) -> num0
 take(num0,IL) -> U81(isNatIList(IL))
 take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)
 zeros -> cons(num0,zeros)
-> Unhiding rules:
 Empty
-> Usable rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 U71(tt,L,N) -> U72(isNat(N),L)
 U72(tt,L) -> s(length(L))
 U81(tt) -> nil
 U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N)
 U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N)
 U93(tt,IL,M,N) -> cons(N,take(M,IL))
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
 length(cons(N,L)) -> U71(isNatList(L),L,N)
 length(nil) -> num0
 take(num0,IL) -> U81(isNatIList(IL))
 take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)
 zeros -> cons(num0,zeros)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[U11](X) = X
[U21](X) = X
[U31](X) = X + 2
[U41](X1,X2) = 2.X2 + 2
[U42](X) = X
[U51](X1,X2) = 2.X2
[U52](X) = X
[U61](X1,X2) = X1 + 2.X2
[U62](X) = 2
[U71](X1,X2,X3) = 2.X2
[U72](X1,X2) = 2.X2
[U81](X) = 2
[U91](X1,X2,X3,X4) = 2.X2 + 2.X3
[U92](X1,X2,X3,X4) = 2.X2 + 2.X3
[U93](X1,X2,X3,X4) = 2.X2 + 2.X3
[isNat](X) = 2.X
[isNatIList](X) = 2.X + 2
[isNatList](X) = 2.X
[length](X) = X
[take](X1,X2) = X1 + X2
[zeros] = 0
[num0] = 2
[cons](X1,X2) = 2.X2
[fSNonEmpty] = 0
[nil] = 2
[s](X) = 2.X
[tt] = 2
[U11Sharp](X) = 0
[U21Sharp](X) = 0
[U31Sharp](X) = 0
[U41Sharp](X1,X2) = 0
[U42Sharp](X) = 0
[U51Sharp](X1,X2) = 0
[U52Sharp](X) = 0
[U61Sharp](X1,X2) = 0
[U62Sharp](X) = 0
[U71Sharp](X1,X2,X3) = X1 + 2.X2 + 2
[U72Sharp](X1,X2) = 2.X2 + 2
[U81Sharp](X) = 0
[U91Sharp](X1,X2,X3,X4) = 0
[U92Sharp](X1,X2,X3,X4) = 0
[U93Sharp](X1,X2,X3,X4) = 0
[ISNAT](X) = 0
[ISNATILIST](X) = 0
[ISNATLIST](X) = 0
[LENGTH](X) = 2.X + 2
[TAKE](X1,X2) = 0
[ZEROS] = 0

Problem 1.3: 

SCC Processor:
-> Pairs:
 U72Sharp(tt,L) -> LENGTH(L)
 LENGTH(cons(N,L)) -> U71Sharp(isNatList(L),L,N)
-> Rules:
 U11(tt) -> tt
 U21(tt) -> tt
 U31(tt) -> tt
 U41(tt,V2) -> U42(isNatIList(V2))
 U42(tt) -> tt
 U51(tt,V2) -> U52(isNatList(V2))
 U52(tt) -> tt
 U61(tt,V2) -> U62(isNatIList(V2))
 U62(tt) -> tt
 U71(tt,L,N) -> U72(isNat(N),L)
 U72(tt,L) -> s(length(L))
 U81(tt) -> nil
 U91(tt,IL,M,N) -> U92(isNat(M),IL,M,N)
 U92(tt,IL,M,N) -> U93(isNat(N),IL,M,N)
 U93(tt,IL,M,N) -> cons(N,take(M,IL))
 isNat(length(V1)) -> U11(isNatList(V1))
 isNat(num0) -> tt
 isNat(s(V1)) -> U21(isNat(V1))
 isNatIList(zeros) -> tt
 isNatIList(cons(V1,V2)) -> U41(isNat(V1),V2)
 isNatIList(V) -> U31(isNatList(V))
 isNatList(take(V1,V2)) -> U61(isNat(V1),V2)
 isNatList(cons(V1,V2)) -> U51(isNat(V1),V2)
 isNatList(nil) -> tt
 length(cons(N,L)) -> U71(isNatList(L),L,N)
 length(nil) -> num0
 take(num0,IL) -> U81(isNatIList(IL))
 take(s(M),cons(N,IL)) -> U91(isNatIList(IL),IL,M,N)
 zeros -> cons(num0,zeros)
-> Unhiding rules:
 Empty
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
