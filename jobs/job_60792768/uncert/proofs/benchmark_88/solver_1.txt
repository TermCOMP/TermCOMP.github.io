YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/mseDT.ari
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given CSR could be proven:

(0) CSR
(1) CSRRRRProof [EQUIVALENT, 43 ms]
(2) CSR
(3) CSRRRRProof [EQUIVALENT, 0 ms]
(4) CSR
(5) CSRRRRProof [EQUIVALENT, 0 ms]
(6) CSR
(7) CSRRRRProof [EQUIVALENT, 0 ms]
(8) CSR
(9) CSRRRRProof [EQUIVALENT, 0 ms]
(10) CSR
(11) RisEmptyProof [EQUIVALENT, 0 ms]
(12) YES


----------------------------------------

(0)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   __(__(X, Y), Z) -> __(X, __(Y, Z))
   __(X, nil) -> X
   __(nil, X) -> X
   and(tt, X) -> X
   isList(V) -> isNeList(V)
   isList(nil) -> tt
   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(V) -> isQid(V)
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))
   isNeList(__(V1, V2)) -> and(isNeList(V1), isList(V2))
   isNePal(V) -> isQid(V)
   isNePal(__(I, __(P, I))) -> and(isQid(I), isPal(P))
   isPal(V) -> isNePal(V)
   isPal(nil) -> tt
   isQid(a) -> tt
   isQid(e) -> tt
   isQid(i) -> tt
   isQid(o) -> tt
   isQid(u) -> tt

The replacement map contains the following entries:

__: {1, 2}
nil: empty set
and: {1}
tt: empty set
isList: empty set
isNeList: empty set
isQid: empty set
isNePal: empty set
isPal: empty set
a: empty set
e: empty set
i: empty set
o: empty set
u: empty set

----------------------------------------

(1) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   __(__(X, Y), Z) -> __(X, __(Y, Z))
   __(X, nil) -> X
   __(nil, X) -> X
   and(tt, X) -> X
   isList(V) -> isNeList(V)
   isList(nil) -> tt
   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(V) -> isQid(V)
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))
   isNeList(__(V1, V2)) -> and(isNeList(V1), isList(V2))
   isNePal(V) -> isQid(V)
   isNePal(__(I, __(P, I))) -> and(isQid(I), isPal(P))
   isPal(V) -> isNePal(V)
   isPal(nil) -> tt
   isQid(a) -> tt
   isQid(e) -> tt
   isQid(i) -> tt
   isQid(o) -> tt
   isQid(u) -> tt

The replacement map contains the following entries:

__: {1, 2}
nil: empty set
and: {1}
tt: empty set
isList: empty set
isNeList: empty set
isQid: empty set
isNePal: empty set
isPal: empty set
a: empty set
e: empty set
i: empty set
o: empty set
u: empty set
Used ordering:
Polynomial interpretation [POLO]:

   POL(__(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(a) = 2
   POL(and(x_1, x_2)) = 2 + 2*x_1 + x_2
   POL(e) = 2
   POL(i) = 2
   POL(isList(x_1)) = 1 + 2*x_1
   POL(isNeList(x_1)) = 2*x_1
   POL(isNePal(x_1)) = 2*x_1
   POL(isPal(x_1)) = 1 + 2*x_1
   POL(isQid(x_1)) = 2*x_1
   POL(nil) = 2
   POL(o) = 2
   POL(tt) = 2
   POL(u) = 2
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   __(__(X, Y), Z) -> __(X, __(Y, Z))
   __(X, nil) -> X
   __(nil, X) -> X
   and(tt, X) -> X
   isList(V) -> isNeList(V)
   isList(nil) -> tt
   isNeList(__(V1, V2)) -> and(isNeList(V1), isList(V2))
   isNePal(__(I, __(P, I))) -> and(isQid(I), isPal(P))
   isPal(V) -> isNePal(V)
   isPal(nil) -> tt
   isQid(a) -> tt
   isQid(e) -> tt
   isQid(i) -> tt
   isQid(o) -> tt
   isQid(u) -> tt




----------------------------------------

(2)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(V) -> isQid(V)
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))
   isNePal(V) -> isQid(V)

The replacement map contains the following entries:

__: {1, 2}
and: {1}
isList: empty set
isNeList: empty set
isQid: empty set
isNePal: empty set

----------------------------------------

(3) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(V) -> isQid(V)
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))
   isNePal(V) -> isQid(V)

The replacement map contains the following entries:

__: {1, 2}
and: {1}
isList: empty set
isNeList: empty set
isQid: empty set
isNePal: empty set
Used ordering:
Polynomial interpretation [POLO]:

   POL(__(x_1, x_2)) = 1 + x_1 + x_2
   POL(and(x_1, x_2)) = 1 + x_1 + x_2
   POL(isList(x_1)) = x_1
   POL(isNeList(x_1)) = 1 + x_1
   POL(isNePal(x_1)) = x_1
   POL(isQid(x_1)) = x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   isNeList(V) -> isQid(V)




----------------------------------------

(4)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))
   isNePal(V) -> isQid(V)

The replacement map contains the following entries:

__: {1, 2}
and: {1}
isList: empty set
isNeList: empty set
isQid: empty set
isNePal: empty set

----------------------------------------

(5) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))
   isNePal(V) -> isQid(V)

The replacement map contains the following entries:

__: {1, 2}
and: {1}
isList: empty set
isNeList: empty set
isQid: empty set
isNePal: empty set
Used ordering:
Polynomial interpretation [POLO]:

   POL(__(x_1, x_2)) = 2*x_1 + x_2
   POL(and(x_1, x_2)) = x_1
   POL(isList(x_1)) = 2*x_1
   POL(isNeList(x_1)) = 2*x_1
   POL(isNePal(x_1)) = 1 + 2*x_1
   POL(isQid(x_1)) = 2*x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   isNePal(V) -> isQid(V)




----------------------------------------

(6)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))

The replacement map contains the following entries:

__: {1, 2}
and: {1}
isList: empty set
isNeList: empty set

----------------------------------------

(7) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   isList(__(V1, V2)) -> and(isList(V1), isList(V2))
   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))

The replacement map contains the following entries:

__: {1, 2}
and: {1}
isList: empty set
isNeList: empty set
Used ordering:
Polynomial interpretation [POLO]:

   POL(__(x_1, x_2)) = x_1 + x_2
   POL(and(x_1, x_2)) = x_1
   POL(isList(x_1)) = 0
   POL(isNeList(x_1)) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   isNeList(__(V1, V2)) -> and(isList(V1), isNeList(V2))




----------------------------------------

(8)
Obligation:
Context-sensitive rewrite system:
The TRS R consists of the following rules:

   isList(__(V1, V2)) -> and(isList(V1), isList(V2))

The replacement map contains the following entries:

__: {1, 2}
and: {1}
isList: empty set

----------------------------------------

(9) CSRRRRProof (EQUIVALENT)
The following CSR is given: Context-sensitive rewrite system:
The TRS R consists of the following rules:

   isList(__(V1, V2)) -> and(isList(V1), isList(V2))

The replacement map contains the following entries:

__: {1, 2}
and: {1}
isList: empty set
Used ordering:
Polynomial interpretation [POLO]:

   POL(__(x_1, x_2)) = 1 + x_1 + x_2
   POL(and(x_1, x_2)) = x_1
   POL(isList(x_1)) = 1 + x_1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   isList(__(V1, V2)) -> and(isList(V1), isList(V2))




----------------------------------------

(10)
Obligation:
Context-sensitive rewrite system:
R is empty.

----------------------------------------

(11) RisEmptyProof (EQUIVALENT)
The CSR R is empty. Hence, termination is trivially proven.
----------------------------------------

(12)
YES
