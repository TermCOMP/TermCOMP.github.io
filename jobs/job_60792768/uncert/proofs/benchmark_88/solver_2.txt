YES

Problem 1: 

(VAR vu95NonEmpty I P V V1 V2 X Y Z)
(STRATEGY CONTEXTSENSITIVE
(u95u95 1 2)
(and 1)
(isList)
(isNeList)
(isNePal)
(isPal)
(isQid)
(a)
(e)
(fSNonEmpty)
(i)
(nil)
(o)
(tt)
(u)
)
(RULES
u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
u95u95(nil,X) -> X
u95u95(X,nil) -> X
and(tt,X) -> X
isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
isList(nil) -> tt
isList(V) -> isNeList(V)
isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
isNeList(V) -> isQid(V)
isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
isNePal(V) -> isQid(V)
isPal(nil) -> tt
isPal(V) -> isNePal(V)
isQid(a) -> tt
isQid(e) -> tt
isQid(i) -> tt
isQid(o) -> tt
isQid(u) -> tt
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 U95U95(u95u95(X,Y),Z) -> U95U95(X,u95u95(Y,Z))
 U95U95(u95u95(X,Y),Z) -> U95U95(Y,Z)
 AND(tt,X) -> X
 ISLIST(u95u95(V1,V2)) -> AND(isList(V1),isList(V2))
 ISLIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISLIST(V) -> ISNELIST(V)
 ISNELIST(u95u95(V1,V2)) -> AND(isList(V1),isNeList(V2))
 ISNELIST(u95u95(V1,V2)) -> AND(isNeList(V1),isList(V2))
 ISNELIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISNELIST(u95u95(V1,V2)) -> ISNELIST(V1)
 ISNELIST(V) -> ISQID(V)
 ISNEPAL(u95u95(I,u95u95(P,I))) -> AND(isQid(I),isPal(P))
 ISNEPAL(u95u95(I,u95u95(P,I))) -> ISQID(I)
 ISNEPAL(V) -> ISQID(V)
 ISPAL(V) -> ISNEPAL(V)
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
-> Unhiding Rules:
 isList(V2) -> ISLIST(V2)
 isNeList(V2) -> ISNELIST(V2)
 isPal(P) -> ISPAL(P)

Problem 1: 

SCC Processor:
-> Pairs:
 U95U95(u95u95(X,Y),Z) -> U95U95(X,u95u95(Y,Z))
 U95U95(u95u95(X,Y),Z) -> U95U95(Y,Z)
 AND(tt,X) -> X
 ISLIST(u95u95(V1,V2)) -> AND(isList(V1),isList(V2))
 ISLIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISLIST(V) -> ISNELIST(V)
 ISNELIST(u95u95(V1,V2)) -> AND(isList(V1),isNeList(V2))
 ISNELIST(u95u95(V1,V2)) -> AND(isNeList(V1),isList(V2))
 ISNELIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISNELIST(u95u95(V1,V2)) -> ISNELIST(V1)
 ISNELIST(V) -> ISQID(V)
 ISNEPAL(u95u95(I,u95u95(P,I))) -> AND(isQid(I),isPal(P))
 ISNEPAL(u95u95(I,u95u95(P,I))) -> ISQID(I)
 ISNEPAL(V) -> ISQID(V)
 ISPAL(V) -> ISNEPAL(V)
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
-> Unhiding rules:
 isList(V2) -> ISLIST(V2)
 isNeList(V2) -> ISNELIST(V2)
 isPal(P) -> ISPAL(P)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AND(tt,X) -> X
 ISLIST(u95u95(V1,V2)) -> AND(isList(V1),isList(V2))
 ISLIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISLIST(V) -> ISNELIST(V)
 ISNELIST(u95u95(V1,V2)) -> AND(isList(V1),isNeList(V2))
 ISNELIST(u95u95(V1,V2)) -> AND(isNeList(V1),isList(V2))
 ISNELIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISNELIST(u95u95(V1,V2)) -> ISNELIST(V1)
 ISNEPAL(u95u95(I,u95u95(P,I))) -> AND(isQid(I),isPal(P))
 ISPAL(V) -> ISNEPAL(V)
->->-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
->->-> Unhiding rules:
 isList(V2) -> ISLIST(V2)
 isNeList(V2) -> ISNELIST(V2)
 isPal(P) -> ISPAL(P)
->->Cycle:
->->-> Pairs:
 U95U95(u95u95(X,Y),Z) -> U95U95(X,u95u95(Y,Z))
 U95U95(u95u95(X,Y),Z) -> U95U95(Y,Z)
->->-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
->->-> Unhiding rules:
 Empty


The problem is decomposed in 2 subproblems.

Problem 1.1: 

Reduction Triple Processor:
-> Pairs:
 AND(tt,X) -> X
 ISLIST(u95u95(V1,V2)) -> AND(isList(V1),isList(V2))
 ISLIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISLIST(V) -> ISNELIST(V)
 ISNELIST(u95u95(V1,V2)) -> AND(isList(V1),isNeList(V2))
 ISNELIST(u95u95(V1,V2)) -> AND(isNeList(V1),isList(V2))
 ISNELIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISNELIST(u95u95(V1,V2)) -> ISNELIST(V1)
 ISNEPAL(u95u95(I,u95u95(P,I))) -> AND(isQid(I),isPal(P))
 ISPAL(V) -> ISNEPAL(V)
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
-> Unhiding rules:
 isList(V2) -> ISLIST(V2)
 isNeList(V2) -> ISNELIST(V2)
 isPal(P) -> ISPAL(P)
-> Usable rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u95u95](X1,X2) = 2.X1 + X2 + 2
[and](X1,X2) = 2.X1 + X2
[isList](X) = 2.X + 2
[isNeList](X) = 2.X + 2
[isNePal](X) = 2.X + 2
[isPal](X) = 2.X + 2
[isQid](X) = 2.X + 2
[a] = 0
[e] = 1
[fSNonEmpty] = 0
[i] = 2
[nil] = 0
[o] = 2
[tt] = 1
[u] = 0
[U95U95](X1,X2) = 0
[AND](X1,X2) = X2 + 2
[ISLIST](X) = 2.X + 1
[ISNELIST](X) = 2.X
[ISNEPAL](X) = 2.X + 1
[ISPAL](X) = 2.X + 1
[ISQID](X) = 0

Problem 1.1: 

SCC Processor:
-> Pairs:
 AND(tt,X) -> X
 ISLIST(u95u95(V1,V2)) -> AND(isList(V1),isList(V2))
 ISLIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISLIST(V) -> ISNELIST(V)
 ISNELIST(u95u95(V1,V2)) -> AND(isList(V1),isNeList(V2))
 ISNELIST(u95u95(V1,V2)) -> AND(isNeList(V1),isList(V2))
 ISNELIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISNELIST(u95u95(V1,V2)) -> ISNELIST(V1)
 ISNEPAL(u95u95(I,u95u95(P,I))) -> AND(isQid(I),isPal(P))
 ISPAL(V) -> ISNEPAL(V)
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
-> Unhiding rules:
 isNeList(V2) -> ISNELIST(V2)
 isPal(P) -> ISPAL(P)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AND(tt,X) -> X
 ISLIST(u95u95(V1,V2)) -> AND(isList(V1),isList(V2))
 ISLIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISLIST(V) -> ISNELIST(V)
 ISNELIST(u95u95(V1,V2)) -> AND(isList(V1),isNeList(V2))
 ISNELIST(u95u95(V1,V2)) -> AND(isNeList(V1),isList(V2))
 ISNELIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISNELIST(u95u95(V1,V2)) -> ISNELIST(V1)
 ISNEPAL(u95u95(I,u95u95(P,I))) -> AND(isQid(I),isPal(P))
 ISPAL(V) -> ISNEPAL(V)
->->-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
->->-> Unhiding rules:
 isNeList(V2) -> ISNELIST(V2)
 isPal(P) -> ISPAL(P)

Problem 1.1: 

Reduction Triple Processor:
-> Pairs:
 AND(tt,X) -> X
 ISLIST(u95u95(V1,V2)) -> AND(isList(V1),isList(V2))
 ISLIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISLIST(V) -> ISNELIST(V)
 ISNELIST(u95u95(V1,V2)) -> AND(isList(V1),isNeList(V2))
 ISNELIST(u95u95(V1,V2)) -> AND(isNeList(V1),isList(V2))
 ISNELIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISNELIST(u95u95(V1,V2)) -> ISNELIST(V1)
 ISNEPAL(u95u95(I,u95u95(P,I))) -> AND(isQid(I),isPal(P))
 ISPAL(V) -> ISNEPAL(V)
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
-> Unhiding rules:
 isNeList(V2) -> ISNELIST(V2)
 isPal(P) -> ISPAL(P)
-> Usable rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u95u95](X1,X2) = 2.X1 + X2 + 2
[and](X1,X2) = X2 + 2
[isList](X) = 2.X + 2
[isNeList](X) = 2.X + 2
[isNePal](X) = 2.X + 2
[isPal](X) = 2.X + 2
[isQid](X) = 2.X + 2
[a] = 0
[e] = 1
[fSNonEmpty] = 0
[i] = 1
[nil] = 2
[o] = 2
[tt] = 0
[u] = 2
[U95U95](X1,X2) = 0
[AND](X1,X2) = X2 + 1
[ISLIST](X) = 2.X + 2
[ISNELIST](X) = 2.X + 1
[ISNEPAL](X) = 2.X
[ISPAL](X) = 2.X + 2
[ISQID](X) = 0

Problem 1.1: 

SCC Processor:
-> Pairs:
 AND(tt,X) -> X
 ISLIST(u95u95(V1,V2)) -> AND(isList(V1),isList(V2))
 ISLIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISLIST(V) -> ISNELIST(V)
 ISNELIST(u95u95(V1,V2)) -> AND(isList(V1),isNeList(V2))
 ISNELIST(u95u95(V1,V2)) -> AND(isNeList(V1),isList(V2))
 ISNELIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISNELIST(u95u95(V1,V2)) -> ISNELIST(V1)
 ISNEPAL(u95u95(I,u95u95(P,I))) -> AND(isQid(I),isPal(P))
 ISPAL(V) -> ISNEPAL(V)
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
-> Unhiding rules:
 isPal(P) -> ISPAL(P)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 AND(tt,X) -> X
 ISNEPAL(u95u95(I,u95u95(P,I))) -> AND(isQid(I),isPal(P))
 ISPAL(V) -> ISNEPAL(V)
->->-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
->->-> Unhiding rules:
 isPal(P) -> ISPAL(P)
->->Cycle:
->->-> Pairs:
 ISLIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISLIST(V) -> ISNELIST(V)
 ISNELIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISNELIST(u95u95(V1,V2)) -> ISNELIST(V1)
->->-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
->->-> Unhiding rules:
 Empty


The problem is decomposed in 2 subproblems.

Problem 1.1.1: 

Reduction Triple Processor:
-> Pairs:
 AND(tt,X) -> X
 ISNEPAL(u95u95(I,u95u95(P,I))) -> AND(isQid(I),isPal(P))
 ISPAL(V) -> ISNEPAL(V)
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
-> Unhiding rules:
 isPal(P) -> ISPAL(P)
-> Usable rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[u95u95](X1,X2) = 2.X1 + X2 + 2
[and](X1,X2) = 2.X1 + 2.X2
[isList](X) = 0
[isNeList](X) = 0
[isNePal](X) = 2.X + 2
[isPal](X) = 2.X + 2
[isQid](X) = 0
[a] = 0
[e] = 1
[fSNonEmpty] = 0
[i] = 1
[nil] = 1
[o] = 2
[tt] = 0
[u] = 2
[U95U95](X1,X2) = 0
[AND](X1,X2) = 2.X1 + X2 + 2
[ISLIST](X) = 0
[ISNELIST](X) = 0
[ISNEPAL](X) = 2.X + 1
[ISPAL](X) = 2.X + 1
[ISQID](X) = 0

Problem 1.1.1: 

SCC Processor:
-> Pairs:
 AND(tt,X) -> X
 ISNEPAL(u95u95(I,u95u95(P,I))) -> AND(isQid(I),isPal(P))
 ISPAL(V) -> ISNEPAL(V)
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
-> Unhiding rules:
 Empty
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.1.2: 

SubNColl Processor:
-> Pairs:
 ISLIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISLIST(V) -> ISNELIST(V)
 ISNELIST(u95u95(V1,V2)) -> ISLIST(V1)
 ISNELIST(u95u95(V1,V2)) -> ISNELIST(V1)
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
-> Unhiding rules:
 Empty
->Projection:
 pi(ISLIST) = 1
 pi(ISNELIST) = 1

Problem 1.1.2: 

SCC Processor:
-> Pairs:
 ISLIST(V) -> ISNELIST(V)
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
-> Unhiding rules:
 Empty
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

SubNColl Processor:
-> Pairs:
 U95U95(u95u95(X,Y),Z) -> U95U95(X,u95u95(Y,Z))
 U95U95(u95u95(X,Y),Z) -> U95U95(Y,Z)
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
-> Unhiding rules:
 Empty
->Projection:
 pi(U95U95) = 1

Problem 1.2: 

Basic Processor:
-> Pairs:
 Empty
-> Rules:
 u95u95(u95u95(X,Y),Z) -> u95u95(X,u95u95(Y,Z))
 u95u95(nil,X) -> X
 u95u95(X,nil) -> X
 and(tt,X) -> X
 isList(u95u95(V1,V2)) -> and(isList(V1),isList(V2))
 isList(nil) -> tt
 isList(V) -> isNeList(V)
 isNeList(u95u95(V1,V2)) -> and(isList(V1),isNeList(V2))
 isNeList(u95u95(V1,V2)) -> and(isNeList(V1),isList(V2))
 isNeList(V) -> isQid(V)
 isNePal(u95u95(I,u95u95(P,I))) -> and(isQid(I),isPal(P))
 isNePal(V) -> isQid(V)
 isPal(nil) -> tt
 isPal(V) -> isNePal(V)
 isQid(a) -> tt
 isQid(e) -> tt
 isQid(i) -> tt
 isQid(o) -> tt
 isQid(u) -> tt
-> Unhiding rules:
 Empty
-> Result:
 Set P is empty

The problem is finite.
