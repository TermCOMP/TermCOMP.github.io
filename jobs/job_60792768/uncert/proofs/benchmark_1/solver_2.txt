YES

Problem 1: 

(VAR vu95NonEmpty N X Y Z)
(STRATEGY CONTEXTSENSITIVE
(num2ndsneg 1 2)
(num2ndspos 1 2)
(from 1)
(pi 1)
(plus 1 2)
(square 1)
(times 1 2)
(num0)
(cons 1)
(fSNonEmpty)
(negrecip 1)
(posrecip 1)
(rcons 1 2)
(rnil)
(s 1)
)
(RULES
num2ndsneg(num0,Z) -> rnil
num2ndsneg(s(N),cons(X,cons(Y,Z))) -> rcons(negrecip(Y),num2ndspos(N,Z))
num2ndspos(num0,Z) -> rnil
num2ndspos(s(N),cons(X,cons(Y,Z))) -> rcons(posrecip(Y),num2ndsneg(N,Z))
from(X) -> cons(X,from(s(X)))
pi(X) -> num2ndspos(X,from(num0))
plus(num0,Y) -> Y
plus(s(X),Y) -> s(plus(X,Y))
square(X) -> times(X,X)
times(num0,Y) -> num0
times(s(X),Y) -> plus(Y,times(X,Y))
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 num2ndsneg(num0,Z) -> rnil
 num2ndsneg(s(N),cons(X,cons(Y,Z))) -> rcons(negrecip(Y),num2ndspos(N,Z))
 num2ndspos(num0,Z) -> rnil
 num2ndspos(s(N),cons(X,cons(Y,Z))) -> rcons(posrecip(Y),num2ndsneg(N,Z))
 from(X) -> cons(X,from(s(X)))
 pi(X) -> num2ndspos(X,from(num0))
 plus(num0,Y) -> Y
 plus(s(X),Y) -> s(plus(X,Y))
 square(X) -> times(X,X)
 times(num0,Y) -> num0
 times(s(X),Y) -> plus(Y,times(X,Y))
-> The context-sensitive term rewriting system is an orthogonal system. Therefore, innermost cs-termination implies cs-termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 NUM2NDSNEG(s(N),cons(X,cons(Y,Z))) -> NUM2NDSPOS(N,Z)
 NUM2NDSNEG(s(N),cons(X,cons(Y,Z))) -> Y
 NUM2NDSNEG(s(N),cons(X,cons(Y,Z))) -> Z
 NUM2NDSPOS(s(N),cons(X,cons(Y,Z))) -> NUM2NDSNEG(N,Z)
 NUM2NDSPOS(s(N),cons(X,cons(Y,Z))) -> Y
 NUM2NDSPOS(s(N),cons(X,cons(Y,Z))) -> Z
 PI(X) -> NUM2NDSPOS(X,from(num0))
 PI(X) -> FROM(num0)
 PLUS(s(X),Y) -> PLUS(X,Y)
 SQUARE(X) -> TIMES(X,X)
 TIMES(s(X),Y) -> PLUS(Y,times(X,Y))
 TIMES(s(X),Y) -> TIMES(X,Y)
-> Rules:
 num2ndsneg(num0,Z) -> rnil
 num2ndsneg(s(N),cons(X,cons(Y,Z))) -> rcons(negrecip(Y),num2ndspos(N,Z))
 num2ndspos(num0,Z) -> rnil
 num2ndspos(s(N),cons(X,cons(Y,Z))) -> rcons(posrecip(Y),num2ndsneg(N,Z))
 from(X) -> cons(X,from(s(X)))
 pi(X) -> num2ndspos(X,from(num0))
 plus(num0,Y) -> Y
 plus(s(X),Y) -> s(plus(X,Y))
 square(X) -> times(X,X)
 times(num0,Y) -> num0
 times(s(X),Y) -> plus(Y,times(X,Y))
-> Unhiding Rules:
 from(s(X)) -> FROM(s(X))

Problem 1: 

SCC Processor:
-> Pairs:
 NUM2NDSNEG(s(N),cons(X,cons(Y,Z))) -> NUM2NDSPOS(N,Z)
 NUM2NDSNEG(s(N),cons(X,cons(Y,Z))) -> Y
 NUM2NDSNEG(s(N),cons(X,cons(Y,Z))) -> Z
 NUM2NDSPOS(s(N),cons(X,cons(Y,Z))) -> NUM2NDSNEG(N,Z)
 NUM2NDSPOS(s(N),cons(X,cons(Y,Z))) -> Y
 NUM2NDSPOS(s(N),cons(X,cons(Y,Z))) -> Z
 PI(X) -> NUM2NDSPOS(X,from(num0))
 PI(X) -> FROM(num0)
 PLUS(s(X),Y) -> PLUS(X,Y)
 SQUARE(X) -> TIMES(X,X)
 TIMES(s(X),Y) -> PLUS(Y,times(X,Y))
 TIMES(s(X),Y) -> TIMES(X,Y)
-> Rules:
 num2ndsneg(num0,Z) -> rnil
 num2ndsneg(s(N),cons(X,cons(Y,Z))) -> rcons(negrecip(Y),num2ndspos(N,Z))
 num2ndspos(num0,Z) -> rnil
 num2ndspos(s(N),cons(X,cons(Y,Z))) -> rcons(posrecip(Y),num2ndsneg(N,Z))
 from(X) -> cons(X,from(s(X)))
 pi(X) -> num2ndspos(X,from(num0))
 plus(num0,Y) -> Y
 plus(s(X),Y) -> s(plus(X,Y))
 square(X) -> times(X,X)
 times(num0,Y) -> num0
 times(s(X),Y) -> plus(Y,times(X,Y))
-> Unhiding rules:
 from(s(X)) -> FROM(s(X))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 PLUS(s(X),Y) -> PLUS(X,Y)
->->-> Rules:
 num2ndsneg(num0,Z) -> rnil
 num2ndsneg(s(N),cons(X,cons(Y,Z))) -> rcons(negrecip(Y),num2ndspos(N,Z))
 num2ndspos(num0,Z) -> rnil
 num2ndspos(s(N),cons(X,cons(Y,Z))) -> rcons(posrecip(Y),num2ndsneg(N,Z))
 from(X) -> cons(X,from(s(X)))
 pi(X) -> num2ndspos(X,from(num0))
 plus(num0,Y) -> Y
 plus(s(X),Y) -> s(plus(X,Y))
 square(X) -> times(X,X)
 times(num0,Y) -> num0
 times(s(X),Y) -> plus(Y,times(X,Y))
->->-> Unhiding rules:
 Empty
->->Cycle:
->->-> Pairs:
 TIMES(s(X),Y) -> TIMES(X,Y)
->->-> Rules:
 num2ndsneg(num0,Z) -> rnil
 num2ndsneg(s(N),cons(X,cons(Y,Z))) -> rcons(negrecip(Y),num2ndspos(N,Z))
 num2ndspos(num0,Z) -> rnil
 num2ndspos(s(N),cons(X,cons(Y,Z))) -> rcons(posrecip(Y),num2ndsneg(N,Z))
 from(X) -> cons(X,from(s(X)))
 pi(X) -> num2ndspos(X,from(num0))
 plus(num0,Y) -> Y
 plus(s(X),Y) -> s(plus(X,Y))
 square(X) -> times(X,X)
 times(num0,Y) -> num0
 times(s(X),Y) -> plus(Y,times(X,Y))
->->-> Unhiding rules:
 Empty
->->Cycle:
->->-> Pairs:
 NUM2NDSNEG(s(N),cons(X,cons(Y,Z))) -> NUM2NDSPOS(N,Z)
 NUM2NDSPOS(s(N),cons(X,cons(Y,Z))) -> NUM2NDSNEG(N,Z)
->->-> Rules:
 num2ndsneg(num0,Z) -> rnil
 num2ndsneg(s(N),cons(X,cons(Y,Z))) -> rcons(negrecip(Y),num2ndspos(N,Z))
 num2ndspos(num0,Z) -> rnil
 num2ndspos(s(N),cons(X,cons(Y,Z))) -> rcons(posrecip(Y),num2ndsneg(N,Z))
 from(X) -> cons(X,from(s(X)))
 pi(X) -> num2ndspos(X,from(num0))
 plus(num0,Y) -> Y
 plus(s(X),Y) -> s(plus(X,Y))
 square(X) -> times(X,X)
 times(num0,Y) -> num0
 times(s(X),Y) -> plus(Y,times(X,Y))
->->-> Unhiding rules:
 Empty


The problem is decomposed in 3 subproblems.

Problem 1.1: 

SubNColl Processor:
-> Pairs:
 PLUS(s(X),Y) -> PLUS(X,Y)
-> Rules:
 num2ndsneg(num0,Z) -> rnil
 num2ndsneg(s(N),cons(X,cons(Y,Z))) -> rcons(negrecip(Y),num2ndspos(N,Z))
 num2ndspos(num0,Z) -> rnil
 num2ndspos(s(N),cons(X,cons(Y,Z))) -> rcons(posrecip(Y),num2ndsneg(N,Z))
 from(X) -> cons(X,from(s(X)))
 pi(X) -> num2ndspos(X,from(num0))
 plus(num0,Y) -> Y
 plus(s(X),Y) -> s(plus(X,Y))
 square(X) -> times(X,X)
 times(num0,Y) -> num0
 times(s(X),Y) -> plus(Y,times(X,Y))
-> Unhiding rules:
 Empty
->Projection:
 pi(PLUS) = 1

Problem 1.1: 

Basic Processor:
-> Pairs:
 Empty
-> Rules:
 num2ndsneg(num0,Z) -> rnil
 num2ndsneg(s(N),cons(X,cons(Y,Z))) -> rcons(negrecip(Y),num2ndspos(N,Z))
 num2ndspos(num0,Z) -> rnil
 num2ndspos(s(N),cons(X,cons(Y,Z))) -> rcons(posrecip(Y),num2ndsneg(N,Z))
 from(X) -> cons(X,from(s(X)))
 pi(X) -> num2ndspos(X,from(num0))
 plus(num0,Y) -> Y
 plus(s(X),Y) -> s(plus(X,Y))
 square(X) -> times(X,X)
 times(num0,Y) -> num0
 times(s(X),Y) -> plus(Y,times(X,Y))
-> Unhiding rules:
 Empty
-> Result:
 Set P is empty

The problem is finite.

Problem 1.2: 

SubNColl Processor:
-> Pairs:
 TIMES(s(X),Y) -> TIMES(X,Y)
-> Rules:
 num2ndsneg(num0,Z) -> rnil
 num2ndsneg(s(N),cons(X,cons(Y,Z))) -> rcons(negrecip(Y),num2ndspos(N,Z))
 num2ndspos(num0,Z) -> rnil
 num2ndspos(s(N),cons(X,cons(Y,Z))) -> rcons(posrecip(Y),num2ndsneg(N,Z))
 from(X) -> cons(X,from(s(X)))
 pi(X) -> num2ndspos(X,from(num0))
 plus(num0,Y) -> Y
 plus(s(X),Y) -> s(plus(X,Y))
 square(X) -> times(X,X)
 times(num0,Y) -> num0
 times(s(X),Y) -> plus(Y,times(X,Y))
-> Unhiding rules:
 Empty
->Projection:
 pi(TIMES) = 1

Problem 1.2: 

Basic Processor:
-> Pairs:
 Empty
-> Rules:
 num2ndsneg(num0,Z) -> rnil
 num2ndsneg(s(N),cons(X,cons(Y,Z))) -> rcons(negrecip(Y),num2ndspos(N,Z))
 num2ndspos(num0,Z) -> rnil
 num2ndspos(s(N),cons(X,cons(Y,Z))) -> rcons(posrecip(Y),num2ndsneg(N,Z))
 from(X) -> cons(X,from(s(X)))
 pi(X) -> num2ndspos(X,from(num0))
 plus(num0,Y) -> Y
 plus(s(X),Y) -> s(plus(X,Y))
 square(X) -> times(X,X)
 times(num0,Y) -> num0
 times(s(X),Y) -> plus(Y,times(X,Y))
-> Unhiding rules:
 Empty
-> Result:
 Set P is empty

The problem is finite.

Problem 1.3: 

SubNColl Processor:
-> Pairs:
 NUM2NDSNEG(s(N),cons(X,cons(Y,Z))) -> NUM2NDSPOS(N,Z)
 NUM2NDSPOS(s(N),cons(X,cons(Y,Z))) -> NUM2NDSNEG(N,Z)
-> Rules:
 num2ndsneg(num0,Z) -> rnil
 num2ndsneg(s(N),cons(X,cons(Y,Z))) -> rcons(negrecip(Y),num2ndspos(N,Z))
 num2ndspos(num0,Z) -> rnil
 num2ndspos(s(N),cons(X,cons(Y,Z))) -> rcons(posrecip(Y),num2ndsneg(N,Z))
 from(X) -> cons(X,from(s(X)))
 pi(X) -> num2ndspos(X,from(num0))
 plus(num0,Y) -> Y
 plus(s(X),Y) -> s(plus(X,Y))
 square(X) -> times(X,X)
 times(num0,Y) -> num0
 times(s(X),Y) -> plus(Y,times(X,Y))
-> Unhiding rules:
 Empty
->Projection:
 pi(NUM2NDSNEG) = 1
 pi(NUM2NDSPOS) = 1

Problem 1.3: 

Basic Processor:
-> Pairs:
 Empty
-> Rules:
 num2ndsneg(num0,Z) -> rnil
 num2ndsneg(s(N),cons(X,cons(Y,Z))) -> rcons(negrecip(Y),num2ndspos(N,Z))
 num2ndspos(num0,Z) -> rnil
 num2ndspos(s(N),cons(X,cons(Y,Z))) -> rcons(posrecip(Y),num2ndsneg(N,Z))
 from(X) -> cons(X,from(s(X)))
 pi(X) -> num2ndspos(X,from(num0))
 plus(num0,Y) -> Y
 plus(s(X),Y) -> s(plus(X,Y))
 square(X) -> times(X,X)
 times(num0,Y) -> num0
 times(s(X),Y) -> plus(Y,times(X,Y))
-> Unhiding rules:
 Empty
-> Result:
 Set P is empty

The problem is finite.
