YES

Problem 1: 

(VAR vu95NonEmpty X Y)
(STRATEGY CONTEXTSENSITIVE
(div 1 2)
(gt 1 2)
(if 1)
(minus 1 2)
(p 1)
(num0)
(fSNonEmpty)
(ffalse)
(s 1)
(ftrue)
)
(RULES
div(num0,s(Y)) -> num0
div(s(X),s(Y)) -> s(div(minus(X,Y),s(Y)))
gt(num0,Y) -> ffalse
gt(s(X),num0) -> ftrue
gt(s(X),s(Y)) -> gt(X,Y)
if(ffalse,X,Y) -> Y
if(ftrue,X,Y) -> X
minus(X,Y) -> if(gt(Y,num0),minus(p(X),p(Y)),X)
p(num0) -> num0
p(s(X)) -> X
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> s(div(minus(X,Y),s(Y)))
 gt(num0,Y) -> ffalse
 gt(s(X),num0) -> ftrue
 gt(s(X),s(Y)) -> gt(X,Y)
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(X,Y) -> if(gt(Y,num0),minus(p(X),p(Y)),X)
 p(num0) -> num0
 p(s(X)) -> X
-> The context-sensitive term rewriting system is an orthogonal system. Therefore, innermost cs-termination implies cs-termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 DIV(s(X),s(Y)) -> DIV(minus(X,Y),s(Y))
 DIV(s(X),s(Y)) -> MINUS(X,Y)
 GT(s(X),s(Y)) -> GT(X,Y)
 IF(ffalse,X,Y) -> Y
 IF(ftrue,X,Y) -> X
 MINUS(X,Y) -> GT(Y,num0)
 MINUS(X,Y) -> IF(gt(Y,num0),minus(p(X),p(Y)),X)
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> s(div(minus(X,Y),s(Y)))
 gt(num0,Y) -> ffalse
 gt(s(X),num0) -> ftrue
 gt(s(X),s(Y)) -> gt(X,Y)
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(X,Y) -> if(gt(Y,num0),minus(p(X),p(Y)),X)
 p(num0) -> num0
 p(s(X)) -> X
-> Unhiding Rules:
 minus(p(X),p(Y)) -> MINUS(p(X),p(Y))
 minus(p(X),p(Y)) -> P(X)
 minus(p(X),p(Y)) -> P(Y)

Problem 1: 

SCC Processor:
-> Pairs:
 DIV(s(X),s(Y)) -> DIV(minus(X,Y),s(Y))
 DIV(s(X),s(Y)) -> MINUS(X,Y)
 GT(s(X),s(Y)) -> GT(X,Y)
 IF(ffalse,X,Y) -> Y
 IF(ftrue,X,Y) -> X
 MINUS(X,Y) -> GT(Y,num0)
 MINUS(X,Y) -> IF(gt(Y,num0),minus(p(X),p(Y)),X)
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> s(div(minus(X,Y),s(Y)))
 gt(num0,Y) -> ffalse
 gt(s(X),num0) -> ftrue
 gt(s(X),s(Y)) -> gt(X,Y)
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(X,Y) -> if(gt(Y,num0),minus(p(X),p(Y)),X)
 p(num0) -> num0
 p(s(X)) -> X
-> Unhiding rules:
 minus(p(X),p(Y)) -> MINUS(p(X),p(Y))
 minus(p(X),p(Y)) -> P(X)
 minus(p(X),p(Y)) -> P(Y)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 IF(ffalse,X,Y) -> Y
 IF(ftrue,X,Y) -> X
 MINUS(X,Y) -> IF(gt(Y,num0),minus(p(X),p(Y)),X)
->->-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> s(div(minus(X,Y),s(Y)))
 gt(num0,Y) -> ffalse
 gt(s(X),num0) -> ftrue
 gt(s(X),s(Y)) -> gt(X,Y)
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(X,Y) -> if(gt(Y,num0),minus(p(X),p(Y)),X)
 p(num0) -> num0
 p(s(X)) -> X
->->-> Unhiding rules:
 minus(p(X),p(Y)) -> MINUS(p(X),p(Y))
->->Cycle:
->->-> Pairs:
 GT(s(X),s(Y)) -> GT(X,Y)
->->-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> s(div(minus(X,Y),s(Y)))
 gt(num0,Y) -> ffalse
 gt(s(X),num0) -> ftrue
 gt(s(X),s(Y)) -> gt(X,Y)
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(X,Y) -> if(gt(Y,num0),minus(p(X),p(Y)),X)
 p(num0) -> num0
 p(s(X)) -> X
->->-> Unhiding rules:
 Empty
->->Cycle:
->->-> Pairs:
 DIV(s(X),s(Y)) -> DIV(minus(X,Y),s(Y))
->->-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> s(div(minus(X,Y),s(Y)))
 gt(num0,Y) -> ffalse
 gt(s(X),num0) -> ftrue
 gt(s(X),s(Y)) -> gt(X,Y)
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(X,Y) -> if(gt(Y,num0),minus(p(X),p(Y)),X)
 p(num0) -> num0
 p(s(X)) -> X
->->-> Unhiding rules:
 Empty


The problem is decomposed in 3 subproblems.

Problem 1.1: 

Reduction Triple Processor:
-> Pairs:
 IF(ffalse,X,Y) -> Y
 IF(ftrue,X,Y) -> X
 MINUS(X,Y) -> IF(gt(Y,num0),minus(p(X),p(Y)),X)
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> s(div(minus(X,Y),s(Y)))
 gt(num0,Y) -> ffalse
 gt(s(X),num0) -> ftrue
 gt(s(X),s(Y)) -> gt(X,Y)
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(X,Y) -> if(gt(Y,num0),minus(p(X),p(Y)),X)
 p(num0) -> num0
 p(s(X)) -> X
-> Unhiding rules:
 minus(p(X),p(Y)) -> MINUS(p(X),p(Y))
-> Usable rules:
 gt(num0,Y) -> ffalse
 gt(s(X),num0) -> ftrue
 gt(s(X),s(Y)) -> gt(X,Y)
 p(num0) -> num0
 p(s(X)) -> X
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[div](X1,X2) = 0
[gt](X1,X2) = 1/2.X1
[if](X1,X2,X3) = 0
[minus](X1,X2) = 2.X1 + 1/2.X2 + 1/2
[p](X) = 1/2.X
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 0
[s](X) = 2.X + 2
[ftrue] = 1
[DIV](X1,X2) = 0
[GT](X1,X2) = 0
[IF](X1,X2,X3) = 1/2.X1 + X2 + X3
[MINUS](X1,X2) = 2.X1 + 1/2.X2 + 1/2
[P](X) = 0

Problem 1.1: 

SCC Processor:
-> Pairs:
 IF(ffalse,X,Y) -> Y
 MINUS(X,Y) -> IF(gt(Y,num0),minus(p(X),p(Y)),X)
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> s(div(minus(X,Y),s(Y)))
 gt(num0,Y) -> ffalse
 gt(s(X),num0) -> ftrue
 gt(s(X),s(Y)) -> gt(X,Y)
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(X,Y) -> if(gt(Y,num0),minus(p(X),p(Y)),X)
 p(num0) -> num0
 p(s(X)) -> X
-> Unhiding rules:
 minus(p(X),p(Y)) -> MINUS(p(X),p(Y))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 IF(ffalse,X,Y) -> Y
 MINUS(X,Y) -> IF(gt(Y,num0),minus(p(X),p(Y)),X)
->->-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> s(div(minus(X,Y),s(Y)))
 gt(num0,Y) -> ffalse
 gt(s(X),num0) -> ftrue
 gt(s(X),s(Y)) -> gt(X,Y)
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(X,Y) -> if(gt(Y,num0),minus(p(X),p(Y)),X)
 p(num0) -> num0
 p(s(X)) -> X
->->-> Unhiding rules:
 minus(p(X),p(Y)) -> MINUS(p(X),p(Y))

Problem 1.1: 

SubNColl Processor:
-> Pairs:
 IF(ffalse,X,Y) -> Y
 MINUS(X,Y) -> IF(gt(Y,num0),minus(p(X),p(Y)),X)
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> s(div(minus(X,Y),s(Y)))
 gt(num0,Y) -> ffalse
 gt(s(X),num0) -> ftrue
 gt(s(X),s(Y)) -> gt(X,Y)
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(X,Y) -> if(gt(Y,num0),minus(p(X),p(Y)),X)
 p(num0) -> num0
 p(s(X)) -> X
-> Unhiding rules:
 minus(p(X),p(Y)) -> MINUS(p(X),p(Y))
->Projection:
 pi(IF) = 3
 pi(MINUS) = 1

Problem 1.1: 

SCC Processor:
-> Pairs:
 IF(ffalse,X,Y) -> Y
 MINUS(X,Y) -> IF(gt(Y,num0),minus(p(X),p(Y)),X)
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> s(div(minus(X,Y),s(Y)))
 gt(num0,Y) -> ffalse
 gt(s(X),num0) -> ftrue
 gt(s(X),s(Y)) -> gt(X,Y)
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(X,Y) -> if(gt(Y,num0),minus(p(X),p(Y)),X)
 p(num0) -> num0
 p(s(X)) -> X
-> Unhiding rules:
 Empty
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.

Problem 1.2: 

SubNColl Processor:
-> Pairs:
 GT(s(X),s(Y)) -> GT(X,Y)
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> s(div(minus(X,Y),s(Y)))
 gt(num0,Y) -> ffalse
 gt(s(X),num0) -> ftrue
 gt(s(X),s(Y)) -> gt(X,Y)
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(X,Y) -> if(gt(Y,num0),minus(p(X),p(Y)),X)
 p(num0) -> num0
 p(s(X)) -> X
-> Unhiding rules:
 Empty
->Projection:
 pi(GT) = 1

Problem 1.2: 

Basic Processor:
-> Pairs:
 Empty
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> s(div(minus(X,Y),s(Y)))
 gt(num0,Y) -> ffalse
 gt(s(X),num0) -> ftrue
 gt(s(X),s(Y)) -> gt(X,Y)
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(X,Y) -> if(gt(Y,num0),minus(p(X),p(Y)),X)
 p(num0) -> num0
 p(s(X)) -> X
-> Unhiding rules:
 Empty
-> Result:
 Set P is empty

The problem is finite.

Problem 1.3: 

Reduction Triple Processor:
-> Pairs:
 DIV(s(X),s(Y)) -> DIV(minus(X,Y),s(Y))
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> s(div(minus(X,Y),s(Y)))
 gt(num0,Y) -> ffalse
 gt(s(X),num0) -> ftrue
 gt(s(X),s(Y)) -> gt(X,Y)
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(X,Y) -> if(gt(Y,num0),minus(p(X),p(Y)),X)
 p(num0) -> num0
 p(s(X)) -> X
-> Unhiding rules:
 Empty
-> Usable rules:
 gt(num0,Y) -> ffalse
 gt(s(X),num0) -> ftrue
 gt(s(X),s(Y)) -> gt(X,Y)
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(X,Y) -> if(gt(Y,num0),minus(p(X),p(Y)),X)
 p(num0) -> num0
 p(s(X)) -> X
->Interpretation type:
 Linear
->Coefficients:
 All rationals
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[div](X1,X2) = 0
[gt](X1,X2) = X1
[if](X1,X2,X3) = X2 + X3
[minus](X1,X2) = 2.X1
[p](X) = 1/2.X
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 0
[s](X) = 2.X + 1
[ftrue] = 1/2
[DIV](X1,X2) = 2.X1
[GT](X1,X2) = 0
[IF](X1,X2,X3) = 0
[MINUS](X1,X2) = 0
[P](X) = 0

Problem 1.3: 

Basic Processor:
-> Pairs:
 Empty
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> s(div(minus(X,Y),s(Y)))
 gt(num0,Y) -> ffalse
 gt(s(X),num0) -> ftrue
 gt(s(X),s(Y)) -> gt(X,Y)
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(X,Y) -> if(gt(Y,num0),minus(p(X),p(Y)),X)
 p(num0) -> num0
 p(s(X)) -> X
-> Unhiding rules:
 Empty
-> Result:
 Set P is empty

The problem is finite.
