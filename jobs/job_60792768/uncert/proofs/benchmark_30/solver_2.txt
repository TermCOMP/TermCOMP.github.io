YES

Problem 1: 

(VAR vu95NonEmpty X Y)
(STRATEGY CONTEXTSENSITIVE
(div 1)
(geq)
(if 1)
(minus)
(num0)
(fSNonEmpty)
(ffalse)
(s 1)
(ftrue)
)
(RULES
div(num0,s(Y)) -> num0
div(s(X),s(Y)) -> if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
geq(num0,s(Y)) -> ffalse
geq(s(X),s(Y)) -> geq(X,Y)
geq(X,num0) -> ftrue
if(ffalse,X,Y) -> Y
if(ftrue,X,Y) -> X
minus(num0,Y) -> num0
minus(s(X),s(Y)) -> minus(X,Y)
)


Problem 1: 

Innermost Equivalent Processor:
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 geq(num0,s(Y)) -> ffalse
 geq(s(X),s(Y)) -> geq(X,Y)
 geq(X,num0) -> ftrue
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(num0,Y) -> num0
 minus(s(X),s(Y)) -> minus(X,Y)
-> The context-sensitive term rewriting system is an orthogonal system. Therefore, innermost cs-termination implies cs-termination.
 

Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 DIV(s(X),s(Y)) -> GEQ(X,Y)
 DIV(s(X),s(Y)) -> IF(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 GEQ(s(X),s(Y)) -> GEQ(X,Y)
 IF(ffalse,X,Y) -> Y
 IF(ftrue,X,Y) -> X
 MINUS(s(X),s(Y)) -> MINUS(X,Y)
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 geq(num0,s(Y)) -> ffalse
 geq(s(X),s(Y)) -> geq(X,Y)
 geq(X,num0) -> ftrue
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(num0,Y) -> num0
 minus(s(X),s(Y)) -> minus(X,Y)
-> Unhiding Rules:
 div(minus(X,Y),s(Y)) -> DIV(minus(X,Y),s(Y))
 div(minus(X,Y),s(Y)) -> MINUS(X,Y)
 s(div(minus(X,Y),s(Y))) -> DIV(minus(X,Y),s(Y))
 s(div(minus(X,Y),s(Y))) -> MINUS(X,Y)

Problem 1: 

SCC Processor:
-> Pairs:
 DIV(s(X),s(Y)) -> GEQ(X,Y)
 DIV(s(X),s(Y)) -> IF(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 GEQ(s(X),s(Y)) -> GEQ(X,Y)
 IF(ffalse,X,Y) -> Y
 IF(ftrue,X,Y) -> X
 MINUS(s(X),s(Y)) -> MINUS(X,Y)
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 geq(num0,s(Y)) -> ffalse
 geq(s(X),s(Y)) -> geq(X,Y)
 geq(X,num0) -> ftrue
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(num0,Y) -> num0
 minus(s(X),s(Y)) -> minus(X,Y)
-> Unhiding rules:
 div(minus(X,Y),s(Y)) -> DIV(minus(X,Y),s(Y))
 div(minus(X,Y),s(Y)) -> MINUS(X,Y)
 s(div(minus(X,Y),s(Y))) -> DIV(minus(X,Y),s(Y))
 s(div(minus(X,Y),s(Y))) -> MINUS(X,Y)
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MINUS(s(X),s(Y)) -> MINUS(X,Y)
->->-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 geq(num0,s(Y)) -> ffalse
 geq(s(X),s(Y)) -> geq(X,Y)
 geq(X,num0) -> ftrue
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(num0,Y) -> num0
 minus(s(X),s(Y)) -> minus(X,Y)
->->-> Unhiding rules:
 Empty
->->Cycle:
->->-> Pairs:
 GEQ(s(X),s(Y)) -> GEQ(X,Y)
->->-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 geq(num0,s(Y)) -> ffalse
 geq(s(X),s(Y)) -> geq(X,Y)
 geq(X,num0) -> ftrue
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(num0,Y) -> num0
 minus(s(X),s(Y)) -> minus(X,Y)
->->-> Unhiding rules:
 Empty
->->Cycle:
->->-> Pairs:
 DIV(s(X),s(Y)) -> IF(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 IF(ffalse,X,Y) -> Y
 IF(ftrue,X,Y) -> X
->->-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 geq(num0,s(Y)) -> ffalse
 geq(s(X),s(Y)) -> geq(X,Y)
 geq(X,num0) -> ftrue
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(num0,Y) -> num0
 minus(s(X),s(Y)) -> minus(X,Y)
->->-> Unhiding rules:
 div(minus(X,Y),s(Y)) -> DIV(minus(X,Y),s(Y))
 s(div(minus(X,Y),s(Y))) -> DIV(minus(X,Y),s(Y))


The problem is decomposed in 3 subproblems.

Problem 1.1: 

SubNColl Processor:
-> Pairs:
 MINUS(s(X),s(Y)) -> MINUS(X,Y)
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 geq(num0,s(Y)) -> ffalse
 geq(s(X),s(Y)) -> geq(X,Y)
 geq(X,num0) -> ftrue
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(num0,Y) -> num0
 minus(s(X),s(Y)) -> minus(X,Y)
-> Unhiding rules:
 Empty
->Projection:
 pi(MINUS) = 1

Problem 1.1: 

Basic Processor:
-> Pairs:
 Empty
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 geq(num0,s(Y)) -> ffalse
 geq(s(X),s(Y)) -> geq(X,Y)
 geq(X,num0) -> ftrue
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(num0,Y) -> num0
 minus(s(X),s(Y)) -> minus(X,Y)
-> Unhiding rules:
 Empty
-> Result:
 Set P is empty

The problem is finite.

Problem 1.2: 

SubNColl Processor:
-> Pairs:
 GEQ(s(X),s(Y)) -> GEQ(X,Y)
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 geq(num0,s(Y)) -> ffalse
 geq(s(X),s(Y)) -> geq(X,Y)
 geq(X,num0) -> ftrue
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(num0,Y) -> num0
 minus(s(X),s(Y)) -> minus(X,Y)
-> Unhiding rules:
 Empty
->Projection:
 pi(GEQ) = 1

Problem 1.2: 

Basic Processor:
-> Pairs:
 Empty
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 geq(num0,s(Y)) -> ffalse
 geq(s(X),s(Y)) -> geq(X,Y)
 geq(X,num0) -> ftrue
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(num0,Y) -> num0
 minus(s(X),s(Y)) -> minus(X,Y)
-> Unhiding rules:
 Empty
-> Result:
 Set P is empty

The problem is finite.

Problem 1.3: 

Reduction Triple Processor:
-> Pairs:
 DIV(s(X),s(Y)) -> IF(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 IF(ffalse,X,Y) -> Y
 IF(ftrue,X,Y) -> X
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 geq(num0,s(Y)) -> ffalse
 geq(s(X),s(Y)) -> geq(X,Y)
 geq(X,num0) -> ftrue
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(num0,Y) -> num0
 minus(s(X),s(Y)) -> minus(X,Y)
-> Unhiding rules:
 div(minus(X,Y),s(Y)) -> DIV(minus(X,Y),s(Y))
 s(div(minus(X,Y),s(Y))) -> DIV(minus(X,Y),s(Y))
-> Usable rules:
 geq(num0,s(Y)) -> ffalse
 geq(s(X),s(Y)) -> geq(X,Y)
 geq(X,num0) -> ftrue
 minus(num0,Y) -> num0
 minus(s(X),s(Y)) -> minus(X,Y)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[div](X1,X2) = 2.X2
[geq](X1,X2) = 0
[if](X1,X2,X3) = 0
[minus](X1,X2) = 0
[num0] = 0
[fSNonEmpty] = 0
[ffalse] = 0
[s](X) = 2
[ftrue] = 0
[DIV](X1,X2) = 2.X1 + 1
[GEQ](X1,X2) = 0
[IF](X1,X2,X3) = 2.X1 + 2.X2 + X3 + 1
[MINUS](X1,X2) = 0

Problem 1.3: 

SCC Processor:
-> Pairs:
 DIV(s(X),s(Y)) -> IF(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 IF(ffalse,X,Y) -> Y
 IF(ftrue,X,Y) -> X
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 geq(num0,s(Y)) -> ffalse
 geq(s(X),s(Y)) -> geq(X,Y)
 geq(X,num0) -> ftrue
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(num0,Y) -> num0
 minus(s(X),s(Y)) -> minus(X,Y)
-> Unhiding rules:
 s(div(minus(X,Y),s(Y))) -> DIV(minus(X,Y),s(Y))
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 DIV(s(X),s(Y)) -> IF(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 IF(ffalse,X,Y) -> Y
 IF(ftrue,X,Y) -> X
->->-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 geq(num0,s(Y)) -> ffalse
 geq(s(X),s(Y)) -> geq(X,Y)
 geq(X,num0) -> ftrue
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(num0,Y) -> num0
 minus(s(X),s(Y)) -> minus(X,Y)
->->-> Unhiding rules:
 s(div(minus(X,Y),s(Y))) -> DIV(minus(X,Y),s(Y))

Problem 1.3: 

Reduction Triple Processor:
-> Pairs:
 DIV(s(X),s(Y)) -> IF(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 IF(ffalse,X,Y) -> Y
 IF(ftrue,X,Y) -> X
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 geq(num0,s(Y)) -> ffalse
 geq(s(X),s(Y)) -> geq(X,Y)
 geq(X,num0) -> ftrue
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(num0,Y) -> num0
 minus(s(X),s(Y)) -> minus(X,Y)
-> Unhiding rules:
 s(div(minus(X,Y),s(Y))) -> DIV(minus(X,Y),s(Y))
-> Usable rules:
 geq(num0,s(Y)) -> ffalse
 geq(s(X),s(Y)) -> geq(X,Y)
 geq(X,num0) -> ftrue
 minus(num0,Y) -> num0
 minus(s(X),s(Y)) -> minus(X,Y)
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[div](X1,X2) = 2.X1 + X2 + 1
[geq](X1,X2) = 2.X1 + 2.X2 + 2
[if](X1,X2,X3) = 0
[minus](X1,X2) = X1
[num0] = 1
[fSNonEmpty] = 0
[ffalse] = 0
[s](X) = X + 2
[ftrue] = 2
[DIV](X1,X2) = 2.X1 + X2 + 2
[GEQ](X1,X2) = 0
[IF](X1,X2,X3) = X2 + X3 + 2
[MINUS](X1,X2) = 0

Problem 1.3: 

SCC Processor:
-> Pairs:
 DIV(s(X),s(Y)) -> IF(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 IF(ffalse,X,Y) -> Y
 IF(ftrue,X,Y) -> X
-> Rules:
 div(num0,s(Y)) -> num0
 div(s(X),s(Y)) -> if(geq(X,Y),s(div(minus(X,Y),s(Y))),num0)
 geq(num0,s(Y)) -> ffalse
 geq(s(X),s(Y)) -> geq(X,Y)
 geq(X,num0) -> ftrue
 if(ffalse,X,Y) -> Y
 if(ftrue,X,Y) -> X
 minus(num0,Y) -> num0
 minus(s(X),s(Y)) -> minus(X,Y)
-> Unhiding rules:
 Empty
->Strongly Connected Components:
 There is no strongly connected component

The problem is finite.
