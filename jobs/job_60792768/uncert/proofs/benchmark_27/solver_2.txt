YES

Problem 1: 

(VAR vu95NonEmpty N X XS Y YS)
(STRATEGY CONTEXTSENSITIVE
(from 1)
(minus 1 2)
(quot 1 2)
(sel 1 2)
(zWquot 1 2)
(num0)
(cons 1)
(fSNonEmpty)
(nil)
(s 1)
)
(RULES
from(X) -> cons(X,from(s(X)))
minus(s(X),s(Y)) -> minus(X,Y)
minus(X,num0) -> num0
quot(num0,s(Y)) -> num0
quot(s(X),s(Y)) -> s(quot(minus(X,Y),s(Y)))
sel(num0,cons(X,XS)) -> X
sel(s(N),cons(X,XS)) -> sel(N,XS)
zWquot(cons(X,XS),cons(Y,YS)) -> cons(quot(X,Y),zWquot(XS,YS))
zWquot(nil,XS) -> nil
zWquot(XS,nil) -> nil
)


Problem 1: 

Dependency Pairs Processor:
-> Pairs:
 MINUS(s(X),s(Y)) -> MINUS(X,Y)
 QUOT(s(X),s(Y)) -> MINUS(X,Y)
 QUOT(s(X),s(Y)) -> QUOT(minus(X,Y),s(Y))
 SEL(s(N),cons(X,XS)) -> SEL(N,XS)
 SEL(s(N),cons(X,XS)) -> XS
 ZWQUOT(cons(X,XS),cons(Y,YS)) -> QUOT(X,Y)
-> Rules:
 from(X) -> cons(X,from(s(X)))
 minus(s(X),s(Y)) -> minus(X,Y)
 minus(X,num0) -> num0
 quot(num0,s(Y)) -> num0
 quot(s(X),s(Y)) -> s(quot(minus(X,Y),s(Y)))
 sel(num0,cons(X,XS)) -> X
 sel(s(N),cons(X,XS)) -> sel(N,XS)
 zWquot(cons(X,XS),cons(Y,YS)) -> cons(quot(X,Y),zWquot(XS,YS))
 zWquot(nil,XS) -> nil
 zWquot(XS,nil) -> nil
-> Unhiding Rules:
 from(s(X)) -> FROM(s(X))
 zWquot(XS,YS) -> ZWQUOT(XS,YS)
 zWquot(XS,x6) -> x6
 zWquot(x6,YS) -> x6

Problem 1: 

SCC Processor:
-> Pairs:
 MINUS(s(X),s(Y)) -> MINUS(X,Y)
 QUOT(s(X),s(Y)) -> MINUS(X,Y)
 QUOT(s(X),s(Y)) -> QUOT(minus(X,Y),s(Y))
 SEL(s(N),cons(X,XS)) -> SEL(N,XS)
 SEL(s(N),cons(X,XS)) -> XS
 ZWQUOT(cons(X,XS),cons(Y,YS)) -> QUOT(X,Y)
-> Rules:
 from(X) -> cons(X,from(s(X)))
 minus(s(X),s(Y)) -> minus(X,Y)
 minus(X,num0) -> num0
 quot(num0,s(Y)) -> num0
 quot(s(X),s(Y)) -> s(quot(minus(X,Y),s(Y)))
 sel(num0,cons(X,XS)) -> X
 sel(s(N),cons(X,XS)) -> sel(N,XS)
 zWquot(cons(X,XS),cons(Y,YS)) -> cons(quot(X,Y),zWquot(XS,YS))
 zWquot(nil,XS) -> nil
 zWquot(XS,nil) -> nil
-> Unhiding rules:
 from(s(X)) -> FROM(s(X))
 zWquot(XS,YS) -> ZWQUOT(XS,YS)
 zWquot(XS,x6) -> x6
 zWquot(x6,YS) -> x6
->Strongly Connected Components:
->->Cycle:
->->-> Pairs:
 MINUS(s(X),s(Y)) -> MINUS(X,Y)
->->-> Rules:
 from(X) -> cons(X,from(s(X)))
 minus(s(X),s(Y)) -> minus(X,Y)
 minus(X,num0) -> num0
 quot(num0,s(Y)) -> num0
 quot(s(X),s(Y)) -> s(quot(minus(X,Y),s(Y)))
 sel(num0,cons(X,XS)) -> X
 sel(s(N),cons(X,XS)) -> sel(N,XS)
 zWquot(cons(X,XS),cons(Y,YS)) -> cons(quot(X,Y),zWquot(XS,YS))
 zWquot(nil,XS) -> nil
 zWquot(XS,nil) -> nil
->->-> Unhiding rules:
 Empty
->->Cycle:
->->-> Pairs:
 QUOT(s(X),s(Y)) -> QUOT(minus(X,Y),s(Y))
->->-> Rules:
 from(X) -> cons(X,from(s(X)))
 minus(s(X),s(Y)) -> minus(X,Y)
 minus(X,num0) -> num0
 quot(num0,s(Y)) -> num0
 quot(s(X),s(Y)) -> s(quot(minus(X,Y),s(Y)))
 sel(num0,cons(X,XS)) -> X
 sel(s(N),cons(X,XS)) -> sel(N,XS)
 zWquot(cons(X,XS),cons(Y,YS)) -> cons(quot(X,Y),zWquot(XS,YS))
 zWquot(nil,XS) -> nil
 zWquot(XS,nil) -> nil
->->-> Unhiding rules:
 Empty
->->Cycle:
->->-> Pairs:
 SEL(s(N),cons(X,XS)) -> SEL(N,XS)
->->-> Rules:
 from(X) -> cons(X,from(s(X)))
 minus(s(X),s(Y)) -> minus(X,Y)
 minus(X,num0) -> num0
 quot(num0,s(Y)) -> num0
 quot(s(X),s(Y)) -> s(quot(minus(X,Y),s(Y)))
 sel(num0,cons(X,XS)) -> X
 sel(s(N),cons(X,XS)) -> sel(N,XS)
 zWquot(cons(X,XS),cons(Y,YS)) -> cons(quot(X,Y),zWquot(XS,YS))
 zWquot(nil,XS) -> nil
 zWquot(XS,nil) -> nil
->->-> Unhiding rules:
 Empty


The problem is decomposed in 3 subproblems.

Problem 1.1: 

SubNColl Processor:
-> Pairs:
 MINUS(s(X),s(Y)) -> MINUS(X,Y)
-> Rules:
 from(X) -> cons(X,from(s(X)))
 minus(s(X),s(Y)) -> minus(X,Y)
 minus(X,num0) -> num0
 quot(num0,s(Y)) -> num0
 quot(s(X),s(Y)) -> s(quot(minus(X,Y),s(Y)))
 sel(num0,cons(X,XS)) -> X
 sel(s(N),cons(X,XS)) -> sel(N,XS)
 zWquot(cons(X,XS),cons(Y,YS)) -> cons(quot(X,Y),zWquot(XS,YS))
 zWquot(nil,XS) -> nil
 zWquot(XS,nil) -> nil
-> Unhiding rules:
 Empty
->Projection:
 pi(MINUS) = 1

Problem 1.1: 

Basic Processor:
-> Pairs:
 Empty
-> Rules:
 from(X) -> cons(X,from(s(X)))
 minus(s(X),s(Y)) -> minus(X,Y)
 minus(X,num0) -> num0
 quot(num0,s(Y)) -> num0
 quot(s(X),s(Y)) -> s(quot(minus(X,Y),s(Y)))
 sel(num0,cons(X,XS)) -> X
 sel(s(N),cons(X,XS)) -> sel(N,XS)
 zWquot(cons(X,XS),cons(Y,YS)) -> cons(quot(X,Y),zWquot(XS,YS))
 zWquot(nil,XS) -> nil
 zWquot(XS,nil) -> nil
-> Unhiding rules:
 Empty
-> Result:
 Set P is empty

The problem is finite.

Problem 1.2: 

Reduction Triple Processor:
-> Pairs:
 QUOT(s(X),s(Y)) -> QUOT(minus(X,Y),s(Y))
-> Rules:
 from(X) -> cons(X,from(s(X)))
 minus(s(X),s(Y)) -> minus(X,Y)
 minus(X,num0) -> num0
 quot(num0,s(Y)) -> num0
 quot(s(X),s(Y)) -> s(quot(minus(X,Y),s(Y)))
 sel(num0,cons(X,XS)) -> X
 sel(s(N),cons(X,XS)) -> sel(N,XS)
 zWquot(cons(X,XS),cons(Y,YS)) -> cons(quot(X,Y),zWquot(XS,YS))
 zWquot(nil,XS) -> nil
 zWquot(XS,nil) -> nil
-> Unhiding rules:
 Empty
-> Usable rules:
 minus(s(X),s(Y)) -> minus(X,Y)
 minus(X,num0) -> num0
->Interpretation type:
 Linear
->Coefficients:
 Natural Numbers
->Dimension:
 1
->Bound:
 2
->Interpretation:
 
[from](X) = 0
[minus](X1,X2) = X1 + 1
[quot](X1,X2) = 0
[sel](X1,X2) = 0
[zWquot](X1,X2) = 0
[num0] = 0
[cons](X1,X2) = 0
[fSNonEmpty] = 0
[nil] = 0
[s](X) = X + 2
[FROM](X) = 0
[MINUS](X1,X2) = 0
[QUOT](X1,X2) = 2.X1
[SEL](X1,X2) = 0
[ZWQUOT](X1,X2) = 0

Problem 1.2: 

Basic Processor:
-> Pairs:
 Empty
-> Rules:
 from(X) -> cons(X,from(s(X)))
 minus(s(X),s(Y)) -> minus(X,Y)
 minus(X,num0) -> num0
 quot(num0,s(Y)) -> num0
 quot(s(X),s(Y)) -> s(quot(minus(X,Y),s(Y)))
 sel(num0,cons(X,XS)) -> X
 sel(s(N),cons(X,XS)) -> sel(N,XS)
 zWquot(cons(X,XS),cons(Y,YS)) -> cons(quot(X,Y),zWquot(XS,YS))
 zWquot(nil,XS) -> nil
 zWquot(XS,nil) -> nil
-> Unhiding rules:
 Empty
-> Result:
 Set P is empty

The problem is finite.

Problem 1.3: 

SubNColl Processor:
-> Pairs:
 SEL(s(N),cons(X,XS)) -> SEL(N,XS)
-> Rules:
 from(X) -> cons(X,from(s(X)))
 minus(s(X),s(Y)) -> minus(X,Y)
 minus(X,num0) -> num0
 quot(num0,s(Y)) -> num0
 quot(s(X),s(Y)) -> s(quot(minus(X,Y),s(Y)))
 sel(num0,cons(X,XS)) -> X
 sel(s(N),cons(X,XS)) -> sel(N,XS)
 zWquot(cons(X,XS),cons(Y,YS)) -> cons(quot(X,Y),zWquot(XS,YS))
 zWquot(nil,XS) -> nil
 zWquot(XS,nil) -> nil
-> Unhiding rules:
 Empty
->Projection:
 pi(SEL) = 1

Problem 1.3: 

Basic Processor:
-> Pairs:
 Empty
-> Rules:
 from(X) -> cons(X,from(s(X)))
 minus(s(X),s(Y)) -> minus(X,Y)
 minus(X,num0) -> num0
 quot(num0,s(Y)) -> num0
 quot(s(X),s(Y)) -> s(quot(minus(X,Y),s(Y)))
 sel(num0,cons(X,XS)) -> X
 sel(s(N),cons(X,XS)) -> sel(N,XS)
 zWquot(cons(X,XS),cons(Y,YS)) -> cons(quot(X,Y),zWquot(XS,YS))
 zWquot(nil,XS) -> nil
 zWquot(XS,nil) -> nil
-> Unhiding rules:
 Empty
-> Result:
 Set P is empty

The problem is finite.
