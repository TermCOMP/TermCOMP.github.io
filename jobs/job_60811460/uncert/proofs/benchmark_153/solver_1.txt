WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2
l2 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0
   1: (-2+i1 == 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=-1+i5
   2: (-2+i1 == 0 /\ -i5 >= 0) /\ i1'=3, i3'=1+i3

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ -i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=-1+i5
	New rule:
	(-2+i1 >= 0 /\ -1+it13 >= 0 /\ 2-i1 >= 0 /\ i5-it13 >= 0) /\ i1'=i1, i3'=i3+it13, i4'=i4+it13, i5'=i5-it13

		-2+i1 >= 0 [0]: unchanged
		
		-1+i5 >= 0 [0]: montonic decrease yields i5-it13 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -1+i5 >= 0 -> i5-it13 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ -1+it13 >= 0 /\ 2-i1 >= 0 /\ i5-it13 >= 0) /\ i1'=i1, i3'=i3+it13, i4'=i4+it13, i5'=i5-it13
	New rule:
	(-2+i1 >= 0 /\ -1+it13 >= 0 /\ 2-i1 >= 0 /\ i5-it13 >= 0) /\ i3'=i3+it13, i4'=i4+it13, i5'=i5-it13
	
	Instantiation

	Original rule:
	(-2+i1 >= 0 /\ -1+it13 >= 0 /\ 2-i1 >= 0 /\ i5-it13 >= 0) /\ i3'=i3+it13, i4'=i4+it13, i5'=i5-it13
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i5, i4'=i4+i5, i5'=0

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2
l2 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0
   1: (-2+i1 == 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=-1+i5
   2: (-2+i1 == 0 /\ -i5 >= 0) /\ i1'=3, i3'=1+i3
   3: (0 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i5, i4'=i4+i5, i5'=0

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3
1 -> 1, 1 -> 2, 1 -> 3
3 -> 1, 3 -> 2

	Trace

	0[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T], 3[T]}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0)]
	2[(-2+i1 == 0 /\ -i5 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T], 3[T]}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T], 2[T], 3[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T], 3[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{2[T], 3[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 2[T], 3[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(0, X₁)
  t₁: l1(X₀, X₁) → l1(1+X₀, X₁-1) :|: 1 ≤ X₁
  t₂: l1(X₀, X₁) → l2(X₀, X₁) :|: X₁ ≤ 0


Preprocessing
  Eliminate variables [X₀] that do not contribute to the problem


  Found invariant X₀ ≤ 0 for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₃: l0(X₀) → l1(X₀)
  t₄: l1(X₀) → l1(X₀-1) :|: 1 ≤ X₀
  t₅: l1(X₀) → l2(X₀) :|: X₀ ≤ 0


MPRF for transition t₄: l1(X₀) → l1(X₀-1) :|: 1 ≤ X₀ of depth 1:
  new bound:
    X₀ {O(n)}

  MPRF:
    • l1: [X₀]




All Bounds
Timebounds
  Overall timebound:X₀+2 {O(n)}
    t₃: 1 {O(1)}
    t₄: X₀ {O(n)}
    t₅: 1 {O(1)}


Costbounds
  Overall costbound: X₀+2 {O(n)}
    t₃: 1 {O(1)}
    t₄: X₀ {O(n)}
    t₅: 1 {O(1)}


Sizebounds
    t₃, X₀: X₀ {O(n)}
    t₄, X₀: X₀ {O(n)}
    t₅, X₀: 2⋅X₀ {O(n)}

