NO

# LoAT Proof:
NO

NO

Initial ITS

Start location: f10

Location map:
LoAT_sink -> 0
f10 -> 1
f4 -> 2
f9 -> 3
f7 -> 4
f6 -> 5

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=4, i5'=0, i6'=0
   1: -2+i1 == 0 /\ i1'=3, i3'=1+i3, i7'=i6, i8'=i6
   2: -4+i1 == 0 /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=it4, i7'=it3, i9'=it4
   3: -2+i1 == 0 /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=it6, i7'=it5, i9'=it6
   4: -5+i1 == 0 /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=it8, i7'=it7, i9'=it8

Dependency graph:
0 -> 1, 0 -> 3
2 -> 1, 2 -> 3
3 -> 1, 3 -> 3
4 -> 1, 4 -> 3

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	3[(-2+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-2+i1 == 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=it6, i7'=it5, i9'=it6
	New rule:
	(-1+it29 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i1'=0

		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Loop Acceleration

	Original rule:
	(-2+i1 == 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=it6, i7'=it5, i9'=it6
	New rule:
	(-1+it29 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it29, i5'=i5+it29, i6'=it6, i7'=it5, i9'=it6

		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+it29 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it29, i5'=i5+it29, i6'=it6, i7'=it5, i9'=it6
	New rule:
	(-1+it29 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it29, i5'=i5+it29, i6'=it6, i7'=it5, i9'=it6

Start location: f10

Location map:
LoAT_sink -> 0
f10 -> 1
f4 -> 2
f9 -> 3
f7 -> 4
f6 -> 5

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=4, i5'=0, i6'=0
   1: -2+i1 == 0 /\ i1'=3, i3'=1+i3, i7'=i6, i8'=i6
   2: -4+i1 == 0 /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=it4, i7'=it3, i9'=it4
   3: -2+i1 == 0 /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=it6, i7'=it5, i9'=it6
   4: -5+i1 == 0 /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=it8, i7'=it7, i9'=it8
   5: (-1+it29 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i1'=0
   6: (-1+it29 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it29, i5'=i5+it29, i6'=it6, i7'=it5, i9'=it6

Dependency graph:
0 -> 1, 0 -> 3, 0 -> 5, 0 -> 6
2 -> 1, 2 -> 3, 2 -> 5, 2 -> 6
3 -> 1, 3 -> 3, 3 -> 5, 3 -> 6
4 -> 1, 4 -> 3, 4 -> 5, 4 -> 6
6 -> 1, 6 -> 3, 6 -> 5

Step with 5

	Trace

	0[(-1+i1 == 0)]
	5[(-1+it29 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{5[T]}
	
Refute

	Counterexample

	(i1=1, i3=-1, i7=0, i8=0, i9=0)
	-0-> (i1=2, i3=0, i4=4, i5=0, i6=0, i7=0, i8=0, i9=0 )
	-5-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃, X₄, X₅
  Temp_Vars:  G, H
  Locations:  l0, l1, l2, l3, l4
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂, X₃, X₄, X₅) → l1(4, 0, 0, X₃, X₄, X₅)
  t₃: l1(X₀, X₁, X₂, X₃, X₄, X₅) → l1(X₀, 1+X₁, G, H, X₄, G)
  t₁: l1(X₀, X₁, X₂, X₃, X₄, X₅) → l2(X₀, X₁, X₂, X₂, X₂, X₅)
  t₄: l3(X₀, X₁, X₂, X₃, X₄, X₅) → l1(X₀, 1+X₁, G, H, X₄, G)
  t₂: l4(X₀, X₁, X₂, X₃, X₄, X₅) → l1(X₀, 1+X₁, G, H, X₄, G)


Preprocessing
  Cut unreachable locations [l3; l4] from the program graph


  Eliminate variables [G; H; X₀; X₁; X₂; X₃; X₄; X₅] that do not contribute to the problem


Problem after Preprocessing
  Start:  l0
  Program_Vars:  
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₅: l0 → l1
  t₆: l1 → l1
  t₇: l1 → l2


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₅: 1 {O(1)}
    t₆: inf {Infinity}
    t₇: 1 {O(1)}


Costbounds
  Overall costbound: inf {Infinity}
    t₅: 1 {O(1)}
    t₆: inf {Infinity}
    t₇: 1 {O(1)}


Sizebounds

