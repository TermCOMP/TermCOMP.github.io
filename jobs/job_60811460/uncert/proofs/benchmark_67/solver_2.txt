WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalrealheapsortbb2in/3,evalrealheapsortbb3in/3,evalrealheapsortbb4in/3]
1. recursive  : [evalrealheapsortbb3in_loop_cont/7,evalrealheapsortbb5in/6,evalrealheapsortbb6in/6]
2. recursive  : [evalrealheapsortbb10in/7,evalrealheapsortbb11in/7,evalrealheapsortbb12in/7,evalrealheapsortbb13in/7,evalrealheapsortbb14in/7,evalrealheapsortbb16in/7,evalrealheapsortbb9in/7]
3. recursive  : [evalrealheapsortbb16in_loop_cont/9,evalrealheapsortbb17in/8,evalrealheapsortbb18in/8,evalrealheapsortbb8in/8]
4. non_recursive  : [evalrealheapsortstop/5]
5. non_recursive  : [evalrealheapsortreturnin/5]
6. non_recursive  : [exit_location/1]
7. non_recursive  : [evalrealheapsortbb18in_loop_cont/6]
8. non_recursive  : [evalrealheapsortbb7in/5]
9. non_recursive  : [evalrealheapsortbb6in_loop_cont/6]
10. non_recursive  : [evalrealheapsortentryin/5]
11. non_recursive  : [evalrealheapsortstart/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalrealheapsortbb3in/3
1. SCC is partially evaluated into evalrealheapsortbb6in/6
2. SCC is partially evaluated into evalrealheapsortbb16in/7
3. SCC is partially evaluated into evalrealheapsortbb18in/8
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is partially evaluated into evalrealheapsortbb18in_loop_cont/6
8. SCC is partially evaluated into evalrealheapsortbb7in/5
9. SCC is partially evaluated into evalrealheapsortbb6in_loop_cont/6
10. SCC is partially evaluated into evalrealheapsortentryin/5
11. SCC is partially evaluated into evalrealheapsortstart/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalrealheapsortbb3in/3 
* CE 10 is refined into CE [29] 
* CE 12 is refined into CE [30] 
* CE 13 is refined into CE [31] 
* CE 11 is refined into CE [32] 


### Cost equations --> "Loop" of evalrealheapsortbb3in/3 
* CEs [32] --> Loop 29 
* CEs [29] --> Loop 30 
* CEs [30] --> Loop 31 
* CEs [31] --> Loop 32 

### Ranking functions of CR evalrealheapsortbb3in(C,H,I) 
* RF of phase [29]: [C]

#### Partial ranking functions of CR evalrealheapsortbb3in(C,H,I) 
* Partial RF of phase [29]:
  - RF of loop [29:1]:
    C


### Specialization of cost equations evalrealheapsortbb6in/6 
* CE 6 is refined into CE [33] 
* CE 4 is refined into CE [34,35] 
* CE 7 is refined into CE [36] 
* CE 5 is refined into CE [37,38,39] 


### Cost equations --> "Loop" of evalrealheapsortbb6in/6 
* CEs [39] --> Loop 33 
* CEs [38] --> Loop 34 
* CEs [37] --> Loop 35 
* CEs [33] --> Loop 36 
* CEs [34,35] --> Loop 37 
* CEs [36] --> Loop 38 

### Ranking functions of CR evalrealheapsortbb6in(A,B,C,H,I,J) 
* RF of phase [33,34,35]: [A-B]

#### Partial ranking functions of CR evalrealheapsortbb6in(A,B,C,H,I,J) 
* Partial RF of phase [33,34,35]:
  - RF of loop [33:1,34:1,35:1]:
    A-B


### Specialization of cost equations evalrealheapsortbb16in/7 
* CE 28 is refined into CE [40] 
* CE 27 is refined into CE [41] 
* CE 26 is refined into CE [42] 
* CE 23 is refined into CE [43] 
* CE 24 is refined into CE [44] 
* CE 22 is refined into CE [45] 
* CE 25 is refined into CE [46] 
* CE 21 is refined into CE [47] 


### Cost equations --> "Loop" of evalrealheapsortbb16in/7 
* CEs [42] --> Loop 39 
* CEs [43] --> Loop 40 
* CEs [44] --> Loop 41 
* CEs [45] --> Loop 42 
* CEs [46] --> Loop 43 
* CEs [47] --> Loop 44 
* CEs [40] --> Loop 45 
* CEs [41] --> Loop 46 

### Ranking functions of CR evalrealheapsortbb16in(A,B,C,D,H,I,J) 
* RF of phase [42,44]: [A/2-B/2-C-3/2,A/2-C-3/2]

#### Partial ranking functions of CR evalrealheapsortbb16in(A,B,C,D,H,I,J) 
* Partial RF of phase [42,44]:
  - RF of loop [42:1,44:1]:
    A/2-B/2-C-3/2
    A/2-C-3/2


### Specialization of cost equations evalrealheapsortbb18in/8 
* CE 17 is refined into CE [48] 
* CE 15 is refined into CE [49,50,51,52,53] 
* CE 18 is refined into CE [54] 
* CE 16 is refined into CE [55,56,57,58,59,60,61,62,63,64] 


### Cost equations --> "Loop" of evalrealheapsortbb18in/8 
* CEs [64] --> Loop 47 
* CEs [60] --> Loop 48 
* CEs [63] --> Loop 49 
* CEs [62] --> Loop 50 
* CEs [61] --> Loop 51 
* CEs [57] --> Loop 52 
* CEs [58] --> Loop 53 
* CEs [59] --> Loop 54 
* CEs [55] --> Loop 55 
* CEs [56] --> Loop 56 
* CEs [48] --> Loop 57 
* CEs [52] --> Loop 58 
* CEs [51] --> Loop 59 
* CEs [53] --> Loop 60 
* CEs [50] --> Loop 61 
* CEs [54] --> Loop 62 
* CEs [49] --> Loop 63 

### Ranking functions of CR evalrealheapsortbb18in(A,B,C,D,H,I,J,K) 
* RF of phase [47,48,49,50,51,52,53]: [A-B-3]

#### Partial ranking functions of CR evalrealheapsortbb18in(A,B,C,D,H,I,J,K) 
* Partial RF of phase [47,48,49,50,51,52,53]:
  - RF of loop [47:1,48:1]:
    A-B-4
  - RF of loop [49:1,52:1,53:1]:
    A-B-3
  - RF of loop [50:1,51:1]:
    A-B-5


### Specialization of cost equations evalrealheapsortbb18in_loop_cont/6 
* CE 19 is refined into CE [65] 
* CE 20 is refined into CE [66] 


### Cost equations --> "Loop" of evalrealheapsortbb18in_loop_cont/6 
* CEs [65] --> Loop 64 
* CEs [66] --> Loop 65 

### Ranking functions of CR evalrealheapsortbb18in_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR evalrealheapsortbb18in_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations evalrealheapsortbb7in/5 
* CE 14 is refined into CE [67,68,69,70,71,72,73,74,75,76] 


### Cost equations --> "Loop" of evalrealheapsortbb7in/5 
* CEs [74] --> Loop 66 
* CEs [73] --> Loop 67 
* CEs [72] --> Loop 68 
* CEs [71,76] --> Loop 69 
* CEs [69,70] --> Loop 70 
* CEs [67,68,75] --> Loop 71 

### Ranking functions of CR evalrealheapsortbb7in(A,B,C,D,H) 

#### Partial ranking functions of CR evalrealheapsortbb7in(A,B,C,D,H) 


### Specialization of cost equations evalrealheapsortbb6in_loop_cont/6 
* CE 8 is refined into CE [77,78,79,80,81,82] 
* CE 9 is refined into CE [83] 


### Cost equations --> "Loop" of evalrealheapsortbb6in_loop_cont/6 
* CEs [82] --> Loop 72 
* CEs [81] --> Loop 73 
* CEs [80] --> Loop 74 
* CEs [79] --> Loop 75 
* CEs [78] --> Loop 76 
* CEs [77] --> Loop 77 
* CEs [83] --> Loop 78 

### Ranking functions of CR evalrealheapsortbb6in_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR evalrealheapsortbb6in_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations evalrealheapsortentryin/5 
* CE 3 is refined into CE [84,85,86,87,88,89,90,91,92] 
* CE 2 is refined into CE [93] 


### Cost equations --> "Loop" of evalrealheapsortentryin/5 
* CEs [92] --> Loop 79 
* CEs [91] --> Loop 80 
* CEs [90] --> Loop 81 
* CEs [89] --> Loop 82 
* CEs [84,85,86,88] --> Loop 83 
* CEs [93] --> Loop 84 
* CEs [87] --> Loop 85 

### Ranking functions of CR evalrealheapsortentryin(A,B,C,D,H) 

#### Partial ranking functions of CR evalrealheapsortentryin(A,B,C,D,H) 


### Specialization of cost equations evalrealheapsortstart/5 
* CE 1 is refined into CE [94,95,96,97,98,99,100] 


### Cost equations --> "Loop" of evalrealheapsortstart/5 
* CEs [100] --> Loop 86 
* CEs [99] --> Loop 87 
* CEs [98] --> Loop 88 
* CEs [97] --> Loop 89 
* CEs [96] --> Loop 90 
* CEs [95] --> Loop 91 
* CEs [94] --> Loop 92 

### Ranking functions of CR evalrealheapsortstart(A,B,C,D,H) 

#### Partial ranking functions of CR evalrealheapsortstart(A,B,C,D,H) 


Computing Bounds
=====================================

#### Cost of chains of evalrealheapsortbb3in(C,H,I):
* Chain [[29],32]: 1*it(29)+0
  Such that:it(29) =< C

  with precondition: [H=3,C>=1] 

* Chain [[29],31]: 1*it(29)+0
  Such that:it(29) =< C

  with precondition: [H=4,0>=I,C>=1,2*I+1>=0] 

* Chain [[29],30]: 1*it(29)+0
  Such that:it(29) =< C-I

  with precondition: [H=4,I>=1,C>=2*I+1] 

* Chain [32]: 0
  with precondition: [H=3,2*C+1>=0] 

* Chain [30]: 0
  with precondition: [H=4,C=I,C>=1] 


#### Cost of chains of evalrealheapsortbb6in(A,B,C,H,I,J):
* Chain [[33,34,35],38]: 3*it(33)+1*s(5)+1*s(6)+0
  Such that:aux(1) =< A
aux(5) =< A-B
it(33) =< aux(5)
aux(2) =< aux(1)+1
s(5) =< it(33)*aux(1)
s(6) =< it(33)*aux(2)

  with precondition: [H=3,A>=3,B>=1,A>=B+1] 

* Chain [[33,34,35],37]: 3*it(33)+1*s(5)+1*s(6)+1*s(7)+0
  Such that:aux(6) =< A
aux(7) =< A-B
s(7) =< aux(6)
it(33) =< aux(7)
aux(2) =< aux(6)+1
s(5) =< it(33)*aux(6)
s(6) =< it(33)*aux(2)

  with precondition: [H=3,B>=1,A>=B+2] 

* Chain [[33,34,35],36]: 3*it(33)+1*s(5)+1*s(6)+0
  Such that:aux(1) =< I
aux(8) =< -B+I
it(33) =< aux(8)
aux(2) =< aux(1)+1
s(5) =< it(33)*aux(1)
s(6) =< it(33)*aux(2)

  with precondition: [H=6,A=I,A>=3,B>=1,2*J+1>=0,A>=B+1,A>=J+1] 

* Chain [38]: 0
  with precondition: [H=3,A>=3,B>=1] 

* Chain [37]: 1*s(7)+0
  Such that:s(7) =< B

  with precondition: [H=3,A>=3,B>=1,A>=B+1] 


#### Cost of chains of evalrealheapsortbb16in(A,B,C,D,H,I,J):
* Chain [[42,44],46]: 2*it(42)+0
  Such that:aux(9) =< A/2-B/2-C
aux(11) =< A/2-C
aux(13) =< -C+I
it(42) =< aux(9)
it(42) =< aux(13)
it(42) =< aux(11)

  with precondition: [H=2,I=J,B>=0,C>=0,I>=2*C+1,A>=2*C+B+4,B+2*I+2>=A,A>=B+I+2] 

* Chain [[42,44],45]: 2*it(42)+0
  Such that:aux(9) =< A/2-B/2-C
aux(11) =< A/2-C
aux(14) =< A-B-C
it(42) =< aux(9)
it(42) =< aux(14)
it(42) =< aux(11)

  with precondition: [H=3,B>=0,C>=0,A>=2*C+B+4] 

* Chain [[42,44],43,46]: 2*it(42)+1
  Such that:aux(11) =< A/2-C
aux(9) =< -C+I/2+1
aux(15) =< -C+I/2
it(42) =< aux(9)
it(42) =< aux(15)
it(42) =< aux(11)

  with precondition: [H=2,A=B+I+2,A=B+J+2,B>=0,C>=0,A>=4*C+B+5] 

* Chain [[42,44],43,45]: 2*it(42)+1
  Such that:aux(11) =< A/2-C
aux(16) =< A/2-B/2-C
it(42) =< aux(16)
it(42) =< aux(11)

  with precondition: [H=3,B>=0,C>=0,A>=4*C+B+5] 

* Chain [[42,44],41,46]: 2*it(42)+1
  Such that:aux(9) =< -B/2-C+I/2
aux(11) =< -C+I/2
aux(17) =< -C+J/2
it(42) =< aux(9)
it(42) =< aux(17)
it(42) =< aux(11)

  with precondition: [H=2,A=I,B>=0,C>=0,J>=4*C+4,A>=B+J+2] 

* Chain [[42,44],41,45]: 2*it(42)+1
  Such that:aux(11) =< A/2-C
aux(18) =< A/2-B/2-C
it(42) =< aux(18)
it(42) =< aux(11)

  with precondition: [H=3,B>=0,C>=0,A>=4*C+B+6] 

* Chain [[42,44],40,46]: 2*it(42)+1
  Such that:aux(9) =< -B/2-C+I/2
aux(11) =< -C+I/2
aux(19) =< -C+J/2
it(42) =< aux(9)
it(42) =< aux(19)
it(42) =< aux(11)

  with precondition: [H=2,A=I,B>=0,C>=0,J>=4*C+3,A>=B+J+3] 

* Chain [[42,44],40,45]: 2*it(42)+1
  Such that:aux(11) =< A/2-C
aux(20) =< A/2-B/2-C
it(42) =< aux(20)
it(42) =< aux(11)

  with precondition: [H=3,B>=0,C>=0,A>=4*C+B+6] 

* Chain [[42,44],39,46]: 2*it(42)+1
  Such that:aux(11) =< -C+I/2
aux(21) =< -B/2-C+I/2
it(42) =< aux(21)
it(42) =< aux(11)

  with precondition: [H=2,A=I,A=B+J+2,B>=0,C>=0,A>=4*C+B+5] 

* Chain [[42,44],39,45]: 2*it(42)+1
  Such that:aux(11) =< A/2-C
aux(22) =< A/2-B/2-C
it(42) =< aux(22)
it(42) =< aux(11)

  with precondition: [H=3,B>=0,C>=0,A>=4*C+B+5] 

* Chain [46]: 0
  with precondition: [H=2,J=D,C=I,A>=3,B>=0,A>=B+2,A>=C,4*A>=3*B+C+9,B+2*C+2>=A] 

* Chain [45]: 0
  with precondition: [H=3,A>=3,B>=0,C>=0,A>=B+2,A>=C,4*A>=3*B+C+9] 

* Chain [43,46]: 1
  with precondition: [H=2,I=2*C+1,I=J,B+I+2=A,I>=1,A>=I+2] 

* Chain [43,45]: 1
  with precondition: [H=3,A=2*C+B+3,C>=0,A>=2*C+3] 

* Chain [41,46]: 1
  with precondition: [H=2,A=I,2*C+2=J,B>=0,C>=0,A>=2*C+B+4] 

* Chain [41,45]: 1
  with precondition: [H=3,B>=0,C>=0,A>=2*C+B+4] 

* Chain [40,46]: 1
  with precondition: [H=2,A=I,2*C+1=J,B>=0,C>=0,A>=2*C+B+4] 

* Chain [40,45]: 1
  with precondition: [H=3,B>=0,C>=0,A>=2*C+B+4] 

* Chain [39,46]: 1
  with precondition: [H=2,A=I,A=2*C+B+3,A=B+J+2,B>=0,A>=B+3] 

* Chain [39,45]: 1
  with precondition: [H=3,A=2*C+B+3,C>=0,A>=2*C+3] 


#### Cost of chains of evalrealheapsortbb18in(A,B,C,D,H,I,J,K):
* Chain [[47,48,49,50,51,52,53],63]: 13*it(47)+2*s(69)+2*s(73)+2*s(76)+2*s(80)+2*s(84)+1
  Such that:aux(27) =< A/2
aux(28) =< A/2-B/2
aux(43) =< A-B
it(47) =< aux(43)
aux(40) =< aux(28)-1/2
aux(30) =< aux(27)
aux(29) =< aux(28)+1
aux(37) =< aux(28)
aux(34) =< aux(28)*2
s(71) =< it(47)*aux(28)
s(70) =< it(47)*aux(27)
s(86) =< it(47)*aux(40)
s(74) =< it(47)*aux(30)
s(72) =< it(47)*aux(29)
s(82) =< it(47)*aux(37)
s(78) =< it(47)*aux(34)
s(84) =< s(72)
s(84) =< s(86)
s(84) =< s(74)
s(80) =< s(72)
s(80) =< s(82)
s(80) =< s(74)
s(76) =< s(72)
s(76) =< s(78)
s(76) =< s(74)
s(73) =< s(72)
s(73) =< s(74)
s(69) =< s(72)
s(69) =< s(71)
s(69) =< s(70)

  with precondition: [H=3,B>=0,A>=B+4] 

* Chain [[47,48,49,50,51,52,53],62]: 13*it(47)+2*s(69)+2*s(73)+2*s(76)+2*s(80)+2*s(84)+0
  Such that:aux(27) =< A/2
aux(28) =< A/2-B/2
aux(44) =< A-B
it(47) =< aux(44)
aux(40) =< aux(28)-1/2
aux(30) =< aux(27)
aux(29) =< aux(28)+1
aux(37) =< aux(28)
aux(34) =< aux(28)*2
s(71) =< it(47)*aux(28)
s(70) =< it(47)*aux(27)
s(86) =< it(47)*aux(40)
s(74) =< it(47)*aux(30)
s(72) =< it(47)*aux(29)
s(82) =< it(47)*aux(37)
s(78) =< it(47)*aux(34)
s(84) =< s(72)
s(84) =< s(86)
s(84) =< s(74)
s(80) =< s(72)
s(80) =< s(82)
s(80) =< s(74)
s(76) =< s(72)
s(76) =< s(78)
s(76) =< s(74)
s(73) =< s(72)
s(73) =< s(74)
s(69) =< s(72)
s(69) =< s(71)
s(69) =< s(70)

  with precondition: [H=3,B>=0,A>=B+4] 

* Chain [[47,48,49,50,51,52,53],61]: 13*it(47)+2*s(69)+2*s(73)+2*s(76)+2*s(80)+2*s(84)+0
  Such that:aux(27) =< A/2
aux(28) =< A/2-B/2
aux(45) =< A-B
it(47) =< aux(45)
aux(40) =< aux(28)-1/2
aux(30) =< aux(27)
aux(29) =< aux(28)+1
aux(37) =< aux(28)
aux(34) =< aux(28)*2
s(71) =< it(47)*aux(28)
s(70) =< it(47)*aux(27)
s(86) =< it(47)*aux(40)
s(74) =< it(47)*aux(30)
s(72) =< it(47)*aux(29)
s(82) =< it(47)*aux(37)
s(78) =< it(47)*aux(34)
s(84) =< s(72)
s(84) =< s(86)
s(84) =< s(74)
s(80) =< s(72)
s(80) =< s(82)
s(80) =< s(74)
s(76) =< s(72)
s(76) =< s(78)
s(76) =< s(74)
s(73) =< s(72)
s(73) =< s(74)
s(69) =< s(72)
s(69) =< s(71)
s(69) =< s(70)

  with precondition: [H=3,B>=0,A>=B+4] 

* Chain [[47,48,49,50,51,52,53],60]: 13*it(47)+2*s(69)+2*s(73)+2*s(76)+2*s(80)+2*s(84)+2*s(91)+1
  Such that:aux(46) =< A-B
aux(47) =< A/2
aux(48) =< A/2-B/2
s(89) =< aux(46)
s(89) =< aux(48)
s(91) =< s(89)
s(91) =< aux(46)
s(91) =< aux(47)
it(47) =< aux(46)
aux(40) =< aux(48)-1/2
aux(30) =< aux(47)
aux(29) =< aux(48)+1
aux(37) =< aux(48)
aux(34) =< aux(48)*2
s(71) =< it(47)*aux(48)
s(70) =< it(47)*aux(47)
s(86) =< it(47)*aux(40)
s(74) =< it(47)*aux(30)
s(72) =< it(47)*aux(29)
s(82) =< it(47)*aux(37)
s(78) =< it(47)*aux(34)
s(84) =< s(72)
s(84) =< s(86)
s(84) =< s(74)
s(80) =< s(72)
s(80) =< s(82)
s(80) =< s(74)
s(76) =< s(72)
s(76) =< s(78)
s(76) =< s(74)
s(73) =< s(72)
s(73) =< s(74)
s(69) =< s(72)
s(69) =< s(71)
s(69) =< s(70)

  with precondition: [H=3,B>=0,A>=B+5] 

* Chain [[47,48,49,50,51,52,53],59]: 13*it(47)+2*s(69)+2*s(73)+2*s(76)+2*s(80)+2*s(84)+4*s(94)+1
  Such that:aux(49) =< A-B
aux(50) =< A/2
aux(51) =< A/2-B/2
s(92) =< aux(49)
s(92) =< aux(51)
s(94) =< s(92)
s(94) =< aux(50)
it(47) =< aux(49)
aux(40) =< aux(51)-1/2
aux(30) =< aux(50)
aux(29) =< aux(51)+1
aux(37) =< aux(51)
aux(34) =< aux(51)*2
s(71) =< it(47)*aux(51)
s(70) =< it(47)*aux(50)
s(86) =< it(47)*aux(40)
s(74) =< it(47)*aux(30)
s(72) =< it(47)*aux(29)
s(82) =< it(47)*aux(37)
s(78) =< it(47)*aux(34)
s(84) =< s(72)
s(84) =< s(86)
s(84) =< s(74)
s(80) =< s(72)
s(80) =< s(82)
s(80) =< s(74)
s(76) =< s(72)
s(76) =< s(78)
s(76) =< s(74)
s(73) =< s(72)
s(73) =< s(74)
s(69) =< s(72)
s(69) =< s(71)
s(69) =< s(70)

  with precondition: [H=3,B>=0,A>=B+6] 

* Chain [[47,48,49,50,51,52,53],58]: 13*it(47)+2*s(69)+2*s(73)+2*s(76)+2*s(80)+2*s(84)+4*s(97)+1
  Such that:aux(52) =< A-B
aux(53) =< A/2
aux(54) =< A/2-B/2
s(95) =< aux(52)
s(95) =< aux(54)
s(97) =< s(95)
s(97) =< aux(53)
it(47) =< aux(52)
aux(40) =< aux(54)-1/2
aux(30) =< aux(53)
aux(29) =< aux(54)+1
aux(37) =< aux(54)
aux(34) =< aux(54)*2
s(71) =< it(47)*aux(54)
s(70) =< it(47)*aux(53)
s(86) =< it(47)*aux(40)
s(74) =< it(47)*aux(30)
s(72) =< it(47)*aux(29)
s(82) =< it(47)*aux(37)
s(78) =< it(47)*aux(34)
s(84) =< s(72)
s(84) =< s(86)
s(84) =< s(74)
s(80) =< s(72)
s(80) =< s(82)
s(80) =< s(74)
s(76) =< s(72)
s(76) =< s(78)
s(76) =< s(74)
s(73) =< s(72)
s(73) =< s(74)
s(69) =< s(72)
s(69) =< s(71)
s(69) =< s(70)

  with precondition: [H=3,B>=0,A>=B+7] 

* Chain [[47,48,49,50,51,52,53],55,62]: 13*it(47)+2*s(69)+2*s(73)+2*s(76)+2*s(80)+2*s(84)+2
  Such that:aux(27) =< A/2
aux(28) =< A/2-B/2
aux(55) =< A-B
it(47) =< aux(55)
aux(40) =< aux(28)-1/2
aux(30) =< aux(27)
aux(29) =< aux(28)+1
aux(37) =< aux(28)
aux(34) =< aux(28)*2
s(71) =< it(47)*aux(28)
s(70) =< it(47)*aux(27)
s(86) =< it(47)*aux(40)
s(74) =< it(47)*aux(30)
s(72) =< it(47)*aux(29)
s(82) =< it(47)*aux(37)
s(78) =< it(47)*aux(34)
s(84) =< s(72)
s(84) =< s(86)
s(84) =< s(74)
s(80) =< s(72)
s(80) =< s(82)
s(80) =< s(74)
s(76) =< s(72)
s(76) =< s(78)
s(76) =< s(74)
s(73) =< s(72)
s(73) =< s(74)
s(69) =< s(72)
s(69) =< s(71)
s(69) =< s(70)

  with precondition: [H=3,B>=0,A>=B+4] 

* Chain [[47,48,49,50,51,52,53],55,61]: 13*it(47)+2*s(69)+2*s(73)+2*s(76)+2*s(80)+2*s(84)+2
  Such that:aux(27) =< A/2
aux(28) =< A/2-B/2
aux(56) =< A-B
it(47) =< aux(56)
aux(40) =< aux(28)-1/2
aux(30) =< aux(27)
aux(29) =< aux(28)+1
aux(37) =< aux(28)
aux(34) =< aux(28)*2
s(71) =< it(47)*aux(28)
s(70) =< it(47)*aux(27)
s(86) =< it(47)*aux(40)
s(74) =< it(47)*aux(30)
s(72) =< it(47)*aux(29)
s(82) =< it(47)*aux(37)
s(78) =< it(47)*aux(34)
s(84) =< s(72)
s(84) =< s(86)
s(84) =< s(74)
s(80) =< s(72)
s(80) =< s(82)
s(80) =< s(74)
s(76) =< s(72)
s(76) =< s(78)
s(76) =< s(74)
s(73) =< s(72)
s(73) =< s(74)
s(69) =< s(72)
s(69) =< s(71)
s(69) =< s(70)

  with precondition: [H=3,B>=0,A>=B+4] 

* Chain [[47,48,49,50,51,52,53],55,56,62]: 13*it(47)+2*s(69)+2*s(73)+2*s(76)+2*s(80)+2*s(84)+3
  Such that:aux(27) =< A/2
aux(28) =< A/2-B/2
aux(57) =< A-B
it(47) =< aux(57)
aux(40) =< aux(28)-1/2
aux(30) =< aux(27)
aux(29) =< aux(28)+1
aux(37) =< aux(28)
aux(34) =< aux(28)*2
s(71) =< it(47)*aux(28)
s(70) =< it(47)*aux(27)
s(86) =< it(47)*aux(40)
s(74) =< it(47)*aux(30)
s(72) =< it(47)*aux(29)
s(82) =< it(47)*aux(37)
s(78) =< it(47)*aux(34)
s(84) =< s(72)
s(84) =< s(86)
s(84) =< s(74)
s(80) =< s(72)
s(80) =< s(82)
s(80) =< s(74)
s(76) =< s(72)
s(76) =< s(78)
s(76) =< s(74)
s(73) =< s(72)
s(73) =< s(74)
s(69) =< s(72)
s(69) =< s(71)
s(69) =< s(70)

  with precondition: [H=3,B>=0,A>=B+4] 

* Chain [[47,48,49,50,51,52,53],55,56,57]: 13*it(47)+2*s(69)+2*s(73)+2*s(76)+2*s(80)+2*s(84)+3
  Such that:aux(42) =< -B+I
aux(41) =< -B+I+1
aux(28) =< -B/2+I/2+1/2
aux(27) =< I/2+1/2
it(47) =< aux(41)
it(47) =< aux(42)
aux(40) =< aux(28)-1/2
aux(30) =< aux(27)
aux(29) =< aux(28)+1
aux(37) =< aux(28)
aux(34) =< aux(28)*2
s(71) =< it(47)*aux(28)
s(70) =< it(47)*aux(27)
s(86) =< it(47)*aux(40)
s(74) =< it(47)*aux(30)
s(72) =< it(47)*aux(29)
s(82) =< it(47)*aux(37)
s(78) =< it(47)*aux(34)
s(84) =< s(72)
s(84) =< s(86)
s(84) =< s(74)
s(80) =< s(72)
s(80) =< s(82)
s(80) =< s(74)
s(76) =< s(72)
s(76) =< s(78)
s(76) =< s(74)
s(73) =< s(72)
s(73) =< s(74)
s(69) =< s(72)
s(69) =< s(71)
s(69) =< s(70)

  with precondition: [H=5,J=0,K=1,A=I+1,B>=0,A>=B+4] 

* Chain [[47,48,49,50,51,52,53],54,62]: 13*it(47)+2*s(69)+2*s(73)+2*s(76)+2*s(80)+2*s(84)+2
  Such that:aux(27) =< A/2
aux(28) =< A/2-B/2
aux(58) =< A-B
it(47) =< aux(58)
aux(40) =< aux(28)-1/2
aux(30) =< aux(27)
aux(29) =< aux(28)+1
aux(37) =< aux(28)
aux(34) =< aux(28)*2
s(71) =< it(47)*aux(28)
s(70) =< it(47)*aux(27)
s(86) =< it(47)*aux(40)
s(74) =< it(47)*aux(30)
s(72) =< it(47)*aux(29)
s(82) =< it(47)*aux(37)
s(78) =< it(47)*aux(34)
s(84) =< s(72)
s(84) =< s(86)
s(84) =< s(74)
s(80) =< s(72)
s(80) =< s(82)
s(80) =< s(74)
s(76) =< s(72)
s(76) =< s(78)
s(76) =< s(74)
s(73) =< s(72)
s(73) =< s(74)
s(69) =< s(72)
s(69) =< s(71)
s(69) =< s(70)

  with precondition: [H=3,B>=0,A>=B+4] 

* Chain [[47,48,49,50,51,52,53],54,61]: 13*it(47)+2*s(69)+2*s(73)+2*s(76)+2*s(80)+2*s(84)+2
  Such that:aux(27) =< A/2
aux(28) =< A/2-B/2
aux(59) =< A-B
it(47) =< aux(59)
aux(40) =< aux(28)-1/2
aux(30) =< aux(27)
aux(29) =< aux(28)+1
aux(37) =< aux(28)
aux(34) =< aux(28)*2
s(71) =< it(47)*aux(28)
s(70) =< it(47)*aux(27)
s(86) =< it(47)*aux(40)
s(74) =< it(47)*aux(30)
s(72) =< it(47)*aux(29)
s(82) =< it(47)*aux(37)
s(78) =< it(47)*aux(34)
s(84) =< s(72)
s(84) =< s(86)
s(84) =< s(74)
s(80) =< s(72)
s(80) =< s(82)
s(80) =< s(74)
s(76) =< s(72)
s(76) =< s(78)
s(76) =< s(74)
s(73) =< s(72)
s(73) =< s(74)
s(69) =< s(72)
s(69) =< s(71)
s(69) =< s(70)

  with precondition: [H=3,B>=0,A>=B+4] 

* Chain [[47,48,49,50,51,52,53],54,56,62]: 13*it(47)+2*s(69)+2*s(73)+2*s(76)+2*s(80)+2*s(84)+3
  Such that:aux(27) =< A/2
aux(28) =< A/2-B/2
aux(60) =< A-B
it(47) =< aux(60)
aux(40) =< aux(28)-1/2
aux(30) =< aux(27)
aux(29) =< aux(28)+1
aux(37) =< aux(28)
aux(34) =< aux(28)*2
s(71) =< it(47)*aux(28)
s(70) =< it(47)*aux(27)
s(86) =< it(47)*aux(40)
s(74) =< it(47)*aux(30)
s(72) =< it(47)*aux(29)
s(82) =< it(47)*aux(37)
s(78) =< it(47)*aux(34)
s(84) =< s(72)
s(84) =< s(86)
s(84) =< s(74)
s(80) =< s(72)
s(80) =< s(82)
s(80) =< s(74)
s(76) =< s(72)
s(76) =< s(78)
s(76) =< s(74)
s(73) =< s(72)
s(73) =< s(74)
s(69) =< s(72)
s(69) =< s(71)
s(69) =< s(70)

  with precondition: [H=3,B>=0,A>=B+4] 

* Chain [[47,48,49,50,51,52,53],54,56,57]: 13*it(47)+2*s(69)+2*s(73)+2*s(76)+2*s(80)+2*s(84)+3
  Such that:aux(42) =< -B+I
aux(41) =< -B+I+1
aux(28) =< -B/2+I/2+1/2
aux(27) =< I/2+1/2
it(47) =< aux(41)
it(47) =< aux(42)
aux(40) =< aux(28)-1/2
aux(30) =< aux(27)
aux(29) =< aux(28)+1
aux(37) =< aux(28)
aux(34) =< aux(28)*2
s(71) =< it(47)*aux(28)
s(70) =< it(47)*aux(27)
s(86) =< it(47)*aux(40)
s(74) =< it(47)*aux(30)
s(72) =< it(47)*aux(29)
s(82) =< it(47)*aux(37)
s(78) =< it(47)*aux(34)
s(84) =< s(72)
s(84) =< s(86)
s(84) =< s(74)
s(80) =< s(72)
s(80) =< s(82)
s(80) =< s(74)
s(76) =< s(72)
s(76) =< s(78)
s(76) =< s(74)
s(73) =< s(72)
s(73) =< s(74)
s(69) =< s(72)
s(69) =< s(71)
s(69) =< s(70)

  with precondition: [H=5,J=0,K=1,A=I+1,B>=0,A>=B+4] 

* Chain [63]: 1
  with precondition: [H=3,B+3=A,B>=0] 

* Chain [62]: 0
  with precondition: [H=3,A>=3,B>=0,A>=B+1] 

* Chain [61]: 0
  with precondition: [H=3,A>=3,B>=0,A>=B+2] 

* Chain [60]: 2*s(91)+1
  Such that:s(88) =< A-B
s(90) =< A/2
s(89) =< A/2-B/2
s(91) =< s(89)
s(91) =< s(88)
s(91) =< s(90)

  with precondition: [H=3,B>=0,A>=B+4] 

* Chain [59]: 4*s(94)+1
  Such that:s(93) =< A/2
s(92) =< A/2-B/2
s(94) =< s(92)
s(94) =< s(93)

  with precondition: [H=3,B>=0,A>=B+5] 

* Chain [58]: 4*s(97)+1
  Such that:s(96) =< A/2
s(95) =< A/2-B/2
s(97) =< s(95)
s(97) =< s(96)

  with precondition: [H=3,B>=0,A>=B+6] 

* Chain [55,62]: 2
  with precondition: [H=3,A=B+3,A>=3] 

* Chain [55,61]: 2
  with precondition: [H=3,A=B+3,A>=3] 

* Chain [55,56,62]: 3
  with precondition: [H=3,A=B+3,A>=3] 

* Chain [55,56,57]: 3
  with precondition: [H=5,J=0,K=1,A=B+3,A=I+1,A>=3] 

* Chain [54,62]: 2
  with precondition: [H=3,A=B+3,A>=3] 

* Chain [54,61]: 2
  with precondition: [H=3,A=B+3,A>=3] 

* Chain [54,56,62]: 3
  with precondition: [H=3,A=B+3,A>=3] 

* Chain [54,56,57]: 3
  with precondition: [H=5,J=0,K=1,A=B+3,A=I+1,A>=3] 


#### Cost of chains of evalrealheapsortbb18in_loop_cont(A,B,C,D,E,F):
* Chain [65]: 0
  with precondition: [A=3,B>=3] 

* Chain [64]: 0
  with precondition: [A=5,B>=3] 


#### Cost of chains of evalrealheapsortbb7in(A,B,C,D,H):
* Chain [71]: 3
  with precondition: [A=3] 

* Chain [70]: 0
  with precondition: [A>=3] 

* Chain [69]: 2*s(390)+143*s(391)+22*s(404)+44*s(405)+22*s(406)+22*s(408)+3
  Such that:aux(75) =< A
aux(76) =< A/2
s(391) =< aux(75)
s(392) =< aux(76)-1/2
s(393) =< aux(76)
s(394) =< aux(76)+1
s(396) =< aux(76)*2
s(397) =< s(391)*aux(76)
s(399) =< s(391)*s(392)
s(400) =< s(391)*s(393)
s(401) =< s(391)*s(394)
s(403) =< s(391)*s(396)
s(404) =< s(401)
s(404) =< s(399)
s(404) =< s(400)
s(405) =< s(401)
s(405) =< s(400)
s(406) =< s(401)
s(406) =< s(403)
s(406) =< s(400)
s(408) =< s(401)
s(408) =< s(397)
s(390) =< aux(76)
s(390) =< aux(75)

  with precondition: [A>=4] 

* Chain [68]: 2*s(435)+13*s(436)+2*s(449)+4*s(450)+2*s(451)+2*s(453)+4*s(454)+1
  Such that:s(431) =< A
aux(77) =< A/2
s(434) =< s(431)
s(434) =< aux(77)
s(435) =< s(434)
s(435) =< s(431)
s(435) =< aux(77)
s(436) =< s(431)
s(437) =< aux(77)-1/2
s(438) =< aux(77)
s(439) =< aux(77)+1
s(441) =< aux(77)*2
s(442) =< s(436)*aux(77)
s(444) =< s(436)*s(437)
s(445) =< s(436)*s(438)
s(446) =< s(436)*s(439)
s(448) =< s(436)*s(441)
s(449) =< s(446)
s(449) =< s(444)
s(449) =< s(445)
s(450) =< s(446)
s(450) =< s(445)
s(451) =< s(446)
s(451) =< s(448)
s(451) =< s(445)
s(453) =< s(446)
s(453) =< s(442)
s(454) =< aux(77)

  with precondition: [A>=5] 

* Chain [67]: 4*s(459)+13*s(460)+2*s(473)+4*s(474)+2*s(475)+2*s(477)+4*s(478)+1
  Such that:s(455) =< A
aux(78) =< A/2
s(458) =< s(455)
s(458) =< aux(78)
s(459) =< s(458)
s(459) =< aux(78)
s(460) =< s(455)
s(461) =< aux(78)-1/2
s(462) =< aux(78)
s(463) =< aux(78)+1
s(465) =< aux(78)*2
s(466) =< s(460)*aux(78)
s(468) =< s(460)*s(461)
s(469) =< s(460)*s(462)
s(470) =< s(460)*s(463)
s(472) =< s(460)*s(465)
s(473) =< s(470)
s(473) =< s(468)
s(473) =< s(469)
s(474) =< s(470)
s(474) =< s(469)
s(475) =< s(470)
s(475) =< s(472)
s(475) =< s(469)
s(477) =< s(470)
s(477) =< s(466)
s(478) =< aux(78)

  with precondition: [A>=6] 

* Chain [66]: 4*s(483)+13*s(484)+2*s(497)+4*s(498)+2*s(499)+2*s(501)+1
  Such that:s(479) =< A
aux(79) =< A/2
s(482) =< s(479)
s(482) =< aux(79)
s(483) =< s(482)
s(483) =< aux(79)
s(484) =< s(479)
s(485) =< aux(79)-1/2
s(486) =< aux(79)
s(487) =< aux(79)+1
s(489) =< aux(79)*2
s(490) =< s(484)*aux(79)
s(492) =< s(484)*s(485)
s(493) =< s(484)*s(486)
s(494) =< s(484)*s(487)
s(496) =< s(484)*s(489)
s(497) =< s(494)
s(497) =< s(492)
s(497) =< s(493)
s(498) =< s(494)
s(498) =< s(493)
s(499) =< s(494)
s(499) =< s(496)
s(499) =< s(493)
s(501) =< s(494)
s(501) =< s(490)

  with precondition: [A>=7] 


#### Cost of chains of evalrealheapsortbb6in_loop_cont(A,B,C,D,E,F):
* Chain [78]: 0
  with precondition: [A=3,B>=3] 

* Chain [77]: 3
  with precondition: [A=6,B=3] 

* Chain [76]: 0
  with precondition: [A=6,B>=3] 

* Chain [75]: 143*s(504)+22*s(514)+44*s(515)+22*s(516)+22*s(517)+2*s(518)+3
  Such that:s(502) =< B
s(503) =< B/2
s(504) =< s(502)
s(505) =< s(503)-1/2
s(506) =< s(503)
s(507) =< s(503)+1
s(508) =< s(503)*2
s(509) =< s(504)*s(503)
s(510) =< s(504)*s(505)
s(511) =< s(504)*s(506)
s(512) =< s(504)*s(507)
s(513) =< s(504)*s(508)
s(514) =< s(512)
s(514) =< s(510)
s(514) =< s(511)
s(515) =< s(512)
s(515) =< s(511)
s(516) =< s(512)
s(516) =< s(513)
s(516) =< s(511)
s(517) =< s(512)
s(517) =< s(509)
s(518) =< s(503)
s(518) =< s(502)

  with precondition: [A=6,B>=4] 

* Chain [74]: 2*s(522)+13*s(523)+2*s(533)+4*s(534)+2*s(535)+2*s(536)+4*s(537)+1
  Such that:s(519) =< B
s(520) =< B/2
s(521) =< s(519)
s(521) =< s(520)
s(522) =< s(521)
s(522) =< s(519)
s(522) =< s(520)
s(523) =< s(519)
s(524) =< s(520)-1/2
s(525) =< s(520)
s(526) =< s(520)+1
s(527) =< s(520)*2
s(528) =< s(523)*s(520)
s(529) =< s(523)*s(524)
s(530) =< s(523)*s(525)
s(531) =< s(523)*s(526)
s(532) =< s(523)*s(527)
s(533) =< s(531)
s(533) =< s(529)
s(533) =< s(530)
s(534) =< s(531)
s(534) =< s(530)
s(535) =< s(531)
s(535) =< s(532)
s(535) =< s(530)
s(536) =< s(531)
s(536) =< s(528)
s(537) =< s(520)

  with precondition: [A=6,B>=5] 

* Chain [73]: 4*s(541)+13*s(542)+2*s(552)+4*s(553)+2*s(554)+2*s(555)+4*s(556)+1
  Such that:s(538) =< B
s(539) =< B/2
s(540) =< s(538)
s(540) =< s(539)
s(541) =< s(540)
s(541) =< s(539)
s(542) =< s(538)
s(543) =< s(539)-1/2
s(544) =< s(539)
s(545) =< s(539)+1
s(546) =< s(539)*2
s(547) =< s(542)*s(539)
s(548) =< s(542)*s(543)
s(549) =< s(542)*s(544)
s(550) =< s(542)*s(545)
s(551) =< s(542)*s(546)
s(552) =< s(550)
s(552) =< s(548)
s(552) =< s(549)
s(553) =< s(550)
s(553) =< s(549)
s(554) =< s(550)
s(554) =< s(551)
s(554) =< s(549)
s(555) =< s(550)
s(555) =< s(547)
s(556) =< s(539)

  with precondition: [A=6,B>=6] 

* Chain [72]: 4*s(560)+13*s(561)+2*s(571)+4*s(572)+2*s(573)+2*s(574)+1
  Such that:s(557) =< B
s(558) =< B/2
s(559) =< s(557)
s(559) =< s(558)
s(560) =< s(559)
s(560) =< s(558)
s(561) =< s(557)
s(562) =< s(558)-1/2
s(563) =< s(558)
s(564) =< s(558)+1
s(565) =< s(558)*2
s(566) =< s(561)*s(558)
s(567) =< s(561)*s(562)
s(568) =< s(561)*s(563)
s(569) =< s(561)*s(564)
s(570) =< s(561)*s(565)
s(571) =< s(569)
s(571) =< s(567)
s(571) =< s(568)
s(572) =< s(569)
s(572) =< s(568)
s(573) =< s(569)
s(573) =< s(570)
s(573) =< s(568)
s(574) =< s(569)
s(574) =< s(566)

  with precondition: [A=6,B>=7] 


#### Cost of chains of evalrealheapsortentryin(A,B,C,D,H):
* Chain [85]: 3*s(577)+1*s(579)+1*s(580)+3
  Such that:s(576) =< 2
s(575) =< 3
s(577) =< s(576)
s(578) =< s(575)+1
s(579) =< s(577)*s(575)
s(580) =< s(577)*s(578)

  with precondition: [A=3] 

* Chain [84]: 0
  with precondition: [2>=A] 

* Chain [83]: 1*s(583)+10*s(584)+3*s(586)+3*s(587)+0
  Such that:s(583) =< 1
aux(83) =< A
s(584) =< aux(83)
s(585) =< aux(83)+1
s(586) =< s(584)*aux(83)
s(587) =< s(584)*s(585)

  with precondition: [A>=3] 

* Chain [82]: 146*s(603)+1*s(605)+1*s(606)+22*s(619)+44*s(620)+22*s(621)+22*s(622)+2*s(623)+3
  Such that:s(608) =< A/2
aux(84) =< A
s(603) =< aux(84)
s(610) =< s(608)-1/2
s(611) =< s(608)
s(612) =< s(608)+1
s(613) =< s(608)*2
s(614) =< s(603)*s(608)
s(615) =< s(603)*s(610)
s(616) =< s(603)*s(611)
s(617) =< s(603)*s(612)
s(618) =< s(603)*s(613)
s(619) =< s(617)
s(619) =< s(615)
s(619) =< s(616)
s(620) =< s(617)
s(620) =< s(616)
s(621) =< s(617)
s(621) =< s(618)
s(621) =< s(616)
s(622) =< s(617)
s(622) =< s(614)
s(623) =< s(608)
s(623) =< aux(84)
s(604) =< aux(84)+1
s(605) =< s(603)*aux(84)
s(606) =< s(603)*s(604)

  with precondition: [A>=4] 

* Chain [81]: 16*s(626)+1*s(628)+1*s(629)+2*s(633)+2*s(644)+4*s(645)+2*s(646)+2*s(647)+4*s(648)+1
  Such that:s(631) =< A/2
aux(85) =< A
s(632) =< aux(85)
s(632) =< s(631)
s(633) =< s(632)
s(633) =< aux(85)
s(633) =< s(631)
s(626) =< aux(85)
s(635) =< s(631)-1/2
s(636) =< s(631)
s(637) =< s(631)+1
s(638) =< s(631)*2
s(639) =< s(626)*s(631)
s(640) =< s(626)*s(635)
s(641) =< s(626)*s(636)
s(642) =< s(626)*s(637)
s(643) =< s(626)*s(638)
s(644) =< s(642)
s(644) =< s(640)
s(644) =< s(641)
s(645) =< s(642)
s(645) =< s(641)
s(646) =< s(642)
s(646) =< s(643)
s(646) =< s(641)
s(647) =< s(642)
s(647) =< s(639)
s(648) =< s(631)
s(627) =< aux(85)+1
s(628) =< s(626)*aux(85)
s(629) =< s(626)*s(627)

  with precondition: [A>=5] 

* Chain [80]: 16*s(651)+1*s(653)+1*s(654)+4*s(658)+2*s(669)+4*s(670)+2*s(671)+2*s(672)+4*s(673)+1
  Such that:s(656) =< A/2
aux(86) =< A
s(657) =< aux(86)
s(657) =< s(656)
s(658) =< s(657)
s(658) =< s(656)
s(651) =< aux(86)
s(660) =< s(656)-1/2
s(661) =< s(656)
s(662) =< s(656)+1
s(663) =< s(656)*2
s(664) =< s(651)*s(656)
s(665) =< s(651)*s(660)
s(666) =< s(651)*s(661)
s(667) =< s(651)*s(662)
s(668) =< s(651)*s(663)
s(669) =< s(667)
s(669) =< s(665)
s(669) =< s(666)
s(670) =< s(667)
s(670) =< s(666)
s(671) =< s(667)
s(671) =< s(668)
s(671) =< s(666)
s(672) =< s(667)
s(672) =< s(664)
s(673) =< s(656)
s(652) =< aux(86)+1
s(653) =< s(651)*aux(86)
s(654) =< s(651)*s(652)

  with precondition: [A>=6] 

* Chain [79]: 16*s(676)+1*s(678)+1*s(679)+4*s(683)+2*s(694)+4*s(695)+2*s(696)+2*s(697)+1
  Such that:s(681) =< A/2
aux(87) =< A
s(682) =< aux(87)
s(682) =< s(681)
s(683) =< s(682)
s(683) =< s(681)
s(676) =< aux(87)
s(685) =< s(681)-1/2
s(686) =< s(681)
s(687) =< s(681)+1
s(688) =< s(681)*2
s(689) =< s(676)*s(681)
s(690) =< s(676)*s(685)
s(691) =< s(676)*s(686)
s(692) =< s(676)*s(687)
s(693) =< s(676)*s(688)
s(694) =< s(692)
s(694) =< s(690)
s(694) =< s(691)
s(695) =< s(692)
s(695) =< s(691)
s(696) =< s(692)
s(696) =< s(693)
s(696) =< s(691)
s(697) =< s(692)
s(697) =< s(689)
s(677) =< aux(87)+1
s(678) =< s(676)*aux(87)
s(679) =< s(676)*s(677)

  with precondition: [A>=7] 


#### Cost of chains of evalrealheapsortstart(A,B,C,D,H):
* Chain [92]: 3*s(700)+1*s(702)+1*s(703)+3
  Such that:s(698) =< 2
s(699) =< 3
s(700) =< s(698)
s(701) =< s(699)+1
s(702) =< s(700)*s(699)
s(703) =< s(700)*s(701)

  with precondition: [A=3] 

* Chain [91]: 0
  with precondition: [2>=A] 

* Chain [90]: 1*s(704)+10*s(706)+3*s(708)+3*s(709)+0
  Such that:s(704) =< 1
s(705) =< A
s(706) =< s(705)
s(707) =< s(705)+1
s(708) =< s(706)*s(705)
s(709) =< s(706)*s(707)

  with precondition: [A>=3] 

* Chain [89]: 146*s(712)+22*s(722)+44*s(723)+22*s(724)+22*s(725)+2*s(726)+1*s(728)+1*s(729)+3
  Such that:s(711) =< A
s(710) =< A/2
s(712) =< s(711)
s(713) =< s(710)-1/2
s(714) =< s(710)
s(715) =< s(710)+1
s(716) =< s(710)*2
s(717) =< s(712)*s(710)
s(718) =< s(712)*s(713)
s(719) =< s(712)*s(714)
s(720) =< s(712)*s(715)
s(721) =< s(712)*s(716)
s(722) =< s(720)
s(722) =< s(718)
s(722) =< s(719)
s(723) =< s(720)
s(723) =< s(719)
s(724) =< s(720)
s(724) =< s(721)
s(724) =< s(719)
s(725) =< s(720)
s(725) =< s(717)
s(726) =< s(710)
s(726) =< s(711)
s(727) =< s(711)+1
s(728) =< s(712)*s(711)
s(729) =< s(712)*s(727)

  with precondition: [A>=4] 

* Chain [88]: 2*s(733)+16*s(734)+2*s(744)+4*s(745)+2*s(746)+2*s(747)+4*s(748)+1*s(750)+1*s(751)+1
  Such that:s(731) =< A
s(730) =< A/2
s(732) =< s(731)
s(732) =< s(730)
s(733) =< s(732)
s(733) =< s(731)
s(733) =< s(730)
s(734) =< s(731)
s(735) =< s(730)-1/2
s(736) =< s(730)
s(737) =< s(730)+1
s(738) =< s(730)*2
s(739) =< s(734)*s(730)
s(740) =< s(734)*s(735)
s(741) =< s(734)*s(736)
s(742) =< s(734)*s(737)
s(743) =< s(734)*s(738)
s(744) =< s(742)
s(744) =< s(740)
s(744) =< s(741)
s(745) =< s(742)
s(745) =< s(741)
s(746) =< s(742)
s(746) =< s(743)
s(746) =< s(741)
s(747) =< s(742)
s(747) =< s(739)
s(748) =< s(730)
s(749) =< s(731)+1
s(750) =< s(734)*s(731)
s(751) =< s(734)*s(749)

  with precondition: [A>=5] 

* Chain [87]: 4*s(755)+16*s(756)+2*s(766)+4*s(767)+2*s(768)+2*s(769)+4*s(770)+1*s(772)+1*s(773)+1
  Such that:s(753) =< A
s(752) =< A/2
s(754) =< s(753)
s(754) =< s(752)
s(755) =< s(754)
s(755) =< s(752)
s(756) =< s(753)
s(757) =< s(752)-1/2
s(758) =< s(752)
s(759) =< s(752)+1
s(760) =< s(752)*2
s(761) =< s(756)*s(752)
s(762) =< s(756)*s(757)
s(763) =< s(756)*s(758)
s(764) =< s(756)*s(759)
s(765) =< s(756)*s(760)
s(766) =< s(764)
s(766) =< s(762)
s(766) =< s(763)
s(767) =< s(764)
s(767) =< s(763)
s(768) =< s(764)
s(768) =< s(765)
s(768) =< s(763)
s(769) =< s(764)
s(769) =< s(761)
s(770) =< s(752)
s(771) =< s(753)+1
s(772) =< s(756)*s(753)
s(773) =< s(756)*s(771)

  with precondition: [A>=6] 

* Chain [86]: 4*s(777)+16*s(778)+2*s(788)+4*s(789)+2*s(790)+2*s(791)+1*s(793)+1*s(794)+1
  Such that:s(775) =< A
s(774) =< A/2
s(776) =< s(775)
s(776) =< s(774)
s(777) =< s(776)
s(777) =< s(774)
s(778) =< s(775)
s(779) =< s(774)-1/2
s(780) =< s(774)
s(781) =< s(774)+1
s(782) =< s(774)*2
s(783) =< s(778)*s(774)
s(784) =< s(778)*s(779)
s(785) =< s(778)*s(780)
s(786) =< s(778)*s(781)
s(787) =< s(778)*s(782)
s(788) =< s(786)
s(788) =< s(784)
s(788) =< s(785)
s(789) =< s(786)
s(789) =< s(785)
s(790) =< s(786)
s(790) =< s(787)
s(790) =< s(785)
s(791) =< s(786)
s(791) =< s(783)
s(792) =< s(775)+1
s(793) =< s(778)*s(775)
s(794) =< s(778)*s(792)

  with precondition: [A>=7] 


Closed-form bounds of evalrealheapsortstart(A,B,C,D,H): 
-------------------------------------
* Chain [92] with precondition: [A=3] 
    - Upper bound: 23 
    - Complexity: constant 
* Chain [91] with precondition: [2>=A] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [90] with precondition: [A>=3] 
    - Upper bound: 13*A+1+6*A*A 
    - Complexity: n^2 
* Chain [89] with precondition: [A>=4] 
    - Upper bound: 257*A+3+2*A*A+A/2*(110*A)+A 
    - Complexity: n^2 
* Chain [88] with precondition: [A>=5] 
    - Upper bound: 29*A+1+2*A*A+A/2*(10*A)+2*A 
    - Complexity: n^2 
* Chain [87] with precondition: [A>=6] 
    - Upper bound: 31*A+1+2*A*A+A/2*(10*A)+2*A 
    - Complexity: n^2 
* Chain [86] with precondition: [A>=7] 
    - Upper bound: 31*A+1+2*A*A+A/2*(10*A) 
    - Complexity: n^2 

### Maximum cost of evalrealheapsortstart(A,B,C,D,H): max([22,nat(A)*2*nat(A)+nat(A)*13+max([nat(A)*4*nat(A),nat(A)*10*nat(A/2)+nat(A)*16+max([nat(A/2)*4,nat(A/2)*2+max([nat(A/2)*2,nat(A)*226+2+nat(A)*100*nat(A/2)])+nat(A)*2])])])+1 
Asymptotic class: n^2 
* Total analysis performed in 811 ms.

