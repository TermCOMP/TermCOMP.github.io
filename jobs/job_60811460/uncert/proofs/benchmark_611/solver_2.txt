WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [f4/7,f6/7,f7/7]
1. non_recursive  : [exit_location/1]
2. non_recursive  : [f14/5]
3. non_recursive  : [f4_loop_cont/6]
4. non_recursive  : [f0/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into f4/7
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into f4_loop_cont/6
4. SCC is partially evaluated into f0/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations f4/7 
* CE 13 is refined into CE [16] 
* CE 12 is refined into CE [17] 
* CE 3 is refined into CE [18] 
* CE 2 is refined into CE [19] 
* CE 7 is refined into CE [20] 
* CE 6 is refined into CE [21] 
* CE 5 is refined into CE [22] 
* CE 4 is refined into CE [23] 
* CE 11 is discarded (unfeasible) 
* CE 10 is refined into CE [24] 
* CE 9 is discarded (unfeasible) 
* CE 8 is refined into CE [25] 


### Cost equations --> "Loop" of f4/7 
* CEs [20] --> Loop 16 
* CEs [21] --> Loop 17 
* CEs [22] --> Loop 18 
* CEs [23] --> Loop 19 
* CEs [24] --> Loop 20 
* CEs [25] --> Loop 21 
* CEs [16] --> Loop 22 
* CEs [17] --> Loop 23 
* CEs [18] --> Loop 24 
* CEs [19] --> Loop 25 

### Ranking functions of CR f4(A,B,C,D,F,G,H) 
* RF of phase [16,18]: [B-D,C-D]
* RF of phase [17,19]: [C-D+1]

#### Partial ranking functions of CR f4(A,B,C,D,F,G,H) 
* Partial RF of phase [16,18]:
  - RF of loop [16:1,18:1]:
    B-D
    C-D
* Partial RF of phase [17,19]:
  - RF of loop [17:1,19:1]:
    C-D+1


### Specialization of cost equations f4_loop_cont/6 
* CE 15 is refined into CE [26] 
* CE 14 is refined into CE [27] 


### Cost equations --> "Loop" of f4_loop_cont/6 
* CEs [26] --> Loop 26 
* CEs [27] --> Loop 27 

### Ranking functions of CR f4_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR f4_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations f0/5 
* CE 1 is refined into CE [28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44] 


### Cost equations --> "Loop" of f0/5 
* CEs [37] --> Loop 28 
* CEs [33,39,44] --> Loop 29 
* CEs [36,43] --> Loop 30 
* CEs [35,42] --> Loop 31 
* CEs [34] --> Loop 32 
* CEs [32,38,41] --> Loop 33 
* CEs [40] --> Loop 34 
* CEs [30,31] --> Loop 35 
* CEs [28,29] --> Loop 36 

### Ranking functions of CR f0(A,B,C,D,F) 

#### Partial ranking functions of CR f0(A,B,C,D,F) 


Computing Bounds
=====================================

#### Cost of chains of f4(A,B,C,D,F,G,H):
* Chain [[17,19],25]: 2*it(17)+0
  Such that:aux(1) =< C-D+1
aux(2) =< -D+H
it(17) =< aux(1)
it(17) =< aux(2)

  with precondition: [F=2,G=0,B>=0,D>=B+1,H>=D+1,C+1>=H] 

* Chain [[17,19],22]: 2*it(17)+0
  Such that:aux(3) =< C-D+1
it(17) =< aux(3)

  with precondition: [F=3,B>=0,D>=B+1,C>=D] 

* Chain [[17,19],21,[16,18],24]: 2*it(16)+2*it(17)+1
  Such that:aux(4) =< B
aux(6) =< C+1
aux(8) =< H
aux(9) =< C-D+1
it(16) =< aux(4)
it(16) =< aux(8)
it(16) =< aux(6)
it(17) =< aux(9)

  with precondition: [F=2,G=0,H>=1,D>=B+1,C>=D,B>=H+1] 

* Chain [[17,19],21,[16,18],23]: 2*it(16)+2*it(17)+1
  Such that:aux(6) =< C+1
aux(10) =< H
aux(11) =< C-D+1
it(16) =< aux(10)
it(16) =< aux(6)
it(17) =< aux(11)

  with precondition: [F=2,B=H,B>=1,D>=B+1,C>=D] 

* Chain [[17,19],21,[16,18],22]: 2*it(16)+2*it(17)+1
  Such that:aux(12) =< B
aux(6) =< C+1
aux(13) =< C-D+1
it(16) =< aux(12)
it(16) =< aux(6)
it(17) =< aux(13)

  with precondition: [F=3,B>=1,D>=B+1,C>=D] 

* Chain [[17,19],21,24]: 2*it(17)+1
  Such that:aux(14) =< C-D+1
it(17) =< aux(14)

  with precondition: [F=2,G=0,H=0,B>=1,D>=B+1,C>=D] 

* Chain [[17,19],21,23]: 2*it(17)+1
  Such that:aux(15) =< C-D+1
it(17) =< aux(15)

  with precondition: [B=0,F=2,H=0,0>=G+1,D>=1,C>=D] 

* Chain [[17,19],21,22]: 2*it(17)+1
  Such that:aux(16) =< C-D+1
it(17) =< aux(16)

  with precondition: [F=3,B>=0,D>=B+1,C>=D] 

* Chain [[17,19],20,[16,18],24]: 2*it(16)+2*it(17)+1
  Such that:aux(4) =< B
aux(6) =< C+1
aux(8) =< H
aux(17) =< C-D+1
it(16) =< aux(4)
it(16) =< aux(8)
it(16) =< aux(6)
it(17) =< aux(17)

  with precondition: [F=2,G=0,H>=1,D>=B+1,C>=D,B>=H+1] 

* Chain [[17,19],20,[16,18],23]: 2*it(16)+2*it(17)+1
  Such that:aux(6) =< C+1
aux(10) =< H
aux(18) =< C-D+1
it(16) =< aux(10)
it(16) =< aux(6)
it(17) =< aux(18)

  with precondition: [F=2,B=H,B>=1,D>=B+1,C>=D] 

* Chain [[17,19],20,[16,18],22]: 2*it(16)+2*it(17)+1
  Such that:aux(12) =< B
aux(6) =< C+1
aux(19) =< C-D+1
it(16) =< aux(12)
it(16) =< aux(6)
it(17) =< aux(19)

  with precondition: [F=3,B>=1,D>=B+1,C>=D] 

* Chain [[17,19],20,24]: 2*it(17)+1
  Such that:aux(20) =< C-D+1
it(17) =< aux(20)

  with precondition: [F=2,G=0,H=0,B>=1,D>=B+1,C>=D] 

* Chain [[17,19],20,23]: 2*it(17)+1
  Such that:aux(21) =< C-D+1
it(17) =< aux(21)

  with precondition: [B=0,F=2,H=0,D>=1,G>=1,C>=D] 

* Chain [[17,19],20,22]: 2*it(17)+1
  Such that:aux(22) =< C-D+1
it(17) =< aux(22)

  with precondition: [F=3,B>=0,D>=B+1,C>=D] 

* Chain [25]: 0
  with precondition: [F=2,G=0,D=H,B>=0,D>=B+1,C+1>=D] 

* Chain [22]: 0
  with precondition: [F=3,B>=0,D>=0,C>=B,C+1>=D] 

* Chain [21,[16,18],24]: 2*it(16)+1
  Such that:aux(4) =< B
aux(6) =< D
aux(8) =< H
it(16) =< aux(4)
it(16) =< aux(8)
it(16) =< aux(6)

  with precondition: [F=2,G=0,C+1=D,H>=1,C>=B,B>=H+1] 

* Chain [21,[16,18],23]: 2*it(16)+1
  Such that:aux(6) =< D
aux(10) =< H
it(16) =< aux(10)
it(16) =< aux(6)

  with precondition: [F=2,C+1=D,B=H,B>=1,C>=B] 

* Chain [21,[16,18],22]: 2*it(16)+1
  Such that:aux(12) =< B
aux(6) =< D
it(16) =< aux(12)
it(16) =< aux(6)

  with precondition: [F=3,C+1=D,B>=1,C>=B] 

* Chain [21,24]: 1
  with precondition: [F=2,G=0,H=0,C+1=D,B>=1,C>=B] 

* Chain [21,23]: 1
  with precondition: [B=0,F=2,H=0,D=C+1,0>=G+1,D>=1] 

* Chain [21,22]: 1
  with precondition: [F=3,D=C+1,B>=0,D>=B+1] 

* Chain [20,[16,18],24]: 2*it(16)+1
  Such that:aux(4) =< B
aux(6) =< D
aux(8) =< H
it(16) =< aux(4)
it(16) =< aux(8)
it(16) =< aux(6)

  with precondition: [F=2,G=0,C+1=D,H>=1,C>=B,B>=H+1] 

* Chain [20,[16,18],23]: 2*it(16)+1
  Such that:aux(6) =< D
aux(10) =< H
it(16) =< aux(10)
it(16) =< aux(6)

  with precondition: [F=2,C+1=D,B=H,B>=1,C>=B] 

* Chain [20,[16,18],22]: 2*it(16)+1
  Such that:aux(12) =< B
aux(6) =< D
it(16) =< aux(12)
it(16) =< aux(6)

  with precondition: [F=3,C+1=D,B>=1,C>=B] 

* Chain [20,24]: 1
  with precondition: [F=2,G=0,H=0,C+1=D,B>=1,C>=B] 

* Chain [20,23]: 1
  with precondition: [B=0,F=2,H=0,D=C+1,D>=1,G>=1] 

* Chain [20,22]: 1
  with precondition: [F=3,D=C+1,B>=0,D>=B+1] 


#### Cost of chains of f4_loop_cont(A,B,C,D,E,F):
* Chain [27]: 0
  with precondition: [A=2,C>=0,D>=C] 

* Chain [26]: 0
  with precondition: [A=3,C>=0,D>=C] 


#### Cost of chains of f0(A,B,C,D,F):
* Chain [36]: 1
  with precondition: [B=0,C=0] 

* Chain [35]: 4*s(64)+1
  Such that:aux(42) =< C
s(64) =< aux(42)

  with precondition: [B=0,C>=1] 

* Chain [34]: 1
  with precondition: [B=C,B>=0] 

* Chain [33]: 8*s(69)+1
  Such that:aux(43) =< B
aux(44) =< B+1
s(69) =< aux(43)
s(69) =< aux(44)

  with precondition: [B=C,B>=1] 

* Chain [32]: 4*s(76)+1
  Such that:s(74) =< B+1
aux(45) =< B
s(76) =< aux(45)
s(76) =< s(74)

  with precondition: [B=C,B>=2] 

* Chain [31]: 0
  with precondition: [B>=0,C>=B] 

* Chain [30]: 8*s(79)+1
  Such that:aux(47) =< -B+C
s(79) =< aux(47)

  with precondition: [B>=0,C>=B+1] 

* Chain [29]: 12*s(83)+8*s(87)+1
  Such that:aux(48) =< -B+C
aux(49) =< B
aux(50) =< C+1
s(83) =< aux(48)
s(87) =< aux(49)
s(87) =< aux(50)

  with precondition: [B>=1,C>=B+1] 

* Chain [28]: 4*s(98)+4*s(99)+1
  Such that:s(96) =< -B+C
s(95) =< C+1
aux(51) =< B
s(98) =< aux(51)
s(98) =< s(95)
s(99) =< s(96)

  with precondition: [B>=2,C>=B+1] 


Closed-form bounds of f0(A,B,C,D,F): 
-------------------------------------
* Chain [36] with precondition: [B=0,C=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [35] with precondition: [B=0,C>=1] 
    - Upper bound: 4*C+1 
    - Complexity: n 
* Chain [34] with precondition: [B=C,B>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [33] with precondition: [B=C,B>=1] 
    - Upper bound: 8*B+1 
    - Complexity: n 
* Chain [32] with precondition: [B=C,B>=2] 
    - Upper bound: 4*B+1 
    - Complexity: n 
* Chain [31] with precondition: [B>=0,C>=B] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [30] with precondition: [B>=0,C>=B+1] 
    - Upper bound: -8*B+8*C+1 
    - Complexity: n 
* Chain [29] with precondition: [B>=1,C>=B+1] 
    - Upper bound: -4*B+12*C+1 
    - Complexity: n 
* Chain [28] with precondition: [B>=2,C>=B+1] 
    - Upper bound: 4*C+1 
    - Complexity: n 

### Maximum cost of f0(A,B,C,D,F): max([-4*B+12*C+1,max([-8*B+8*C+1,4*C+1])]) 
Asymptotic class: n 
* Total analysis performed in 280 ms.

