WORST_CASE(Omega(n^2),O(n^2))

# LoAT Proof:
WORST_CASE(Omega(n^2),?)

WORST_CASE(Omega(n^1),?)
WORST_CASE(Omega(n^2),?)
Initial ITS

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2
l2 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-i4+i5 < 0 /\ -2+i1 == 0 /\ -i5 < 0) /\ i1'=2, i3'=1+i3, i4'=2*i4, i5'=3*i5, i6'=i6^2
   2: -2+i1 == 0 /\ i1'=3, i3'=1+i3
   3: (i6 > 0 /\ -3+i1 == 0) /\ i1'=3, i3'=1+i3, i6'=-1+i6

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2
2 -> 3
3 -> 3

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0)]
	3[(i6 > 0 /\ -3+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(i6 > 0 /\ -3+i1 == 0) /\ i1'=3, i3'=1+i3, i6'=-1+i6
	New rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ 1+i6-it16 > 0 /\ -1+it16 >= 0) /\ i1'=i1, i3'=it16+i3, i6'=i6-it16

		i6 > 0 [0]: montonic decrease yields 1+i6-it16 > 0
		
		-3+i1 >= 0 [0]: unchanged
		
		3-i1 >= 0 [0]: unchanged
		
		Replacement map: {i6 > 0 -> 1+i6-it16 > 0, -3+i1 >= 0 -> -3+i1 >= 0, 3-i1 >= 0 -> 3-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ 1+i6-it16 > 0 /\ -1+it16 >= 0) /\ i1'=i1, i3'=it16+i3, i6'=i6-it16
	New rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ 1+i6-it16 > 0 /\ -1+it16 >= 0) /\ i3'=it16+i3, i6'=i6-it16
	
	Instantiation

	Original rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ 1+i6-it16 > 0 /\ -1+it16 >= 0) /\ i3'=it16+i3, i6'=i6-it16
	New rule:
	(-3+i1 >= 0 /\ 1 > 0 /\ 3-i1 >= 0 /\ -1+i6 >= 0) /\ i3'=i6+i3, i6'=0

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2
l2 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-i4+i5 < 0 /\ -2+i1 == 0 /\ -i5 < 0) /\ i1'=2, i3'=1+i3, i4'=2*i4, i5'=3*i5, i6'=i6^2
   2: -2+i1 == 0 /\ i1'=3, i3'=1+i3
   3: (i6 > 0 /\ -3+i1 == 0) /\ i1'=3, i3'=1+i3, i6'=-1+i6
   4: (-3+i1 >= 0 /\ 1 > 0 /\ 3-i1 >= 0 /\ -1+i6 >= 0) /\ i3'=i6+i3, i6'=0

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2
2 -> 3, 2 -> 4
3 -> 3, 3 -> 4
4 -> 3

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0)]
	4[(-3+i1 >= 0 /\ 1 > 0 /\ 3-i1 >= 0 /\ -1+i6 >= 0)]
	
	Blocked

	{}
	{}
	{}
	{3[T], 4[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0)]
	
	Blocked

	{}
	{}
	{4[T]}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0)]
	3[(i6 > 0 /\ -3+i1 == 0)]
	
	Blocked

	{}
	{}
	{4[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0)]
	
	Blocked

	{}
	{}
	{3[T], 4[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-i4+i5 < 0 /\ -2+i1 == 0 /\ -i5 < 0)]
	
	Blocked

	{}
	{2[T]}
	{}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-i4+i5 < 0 /\ -2+i1 == 0 /\ -i5 < 0)]
	1[(-i4+i5 < 0 /\ -2+i1 == 0 /\ -i5 < 0)]
	
	Blocked

	{}
	{2[T]}
	{}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	1[(-i4+i5 < 0 /\ -2+i1 == 0 /\ -i5 < 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T]}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	1[(-i4+i5 < 0 /\ -2+i1 == 0 /\ -i5 < 0)]
	2[(-2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T]}
	{}
	
Step with 4

	Trace

	0[(-1+i1 == 0)]
	1[(-i4+i5 < 0 /\ -2+i1 == 0 /\ -i5 < 0)]
	2[(-2+i1 == 0)]
	4[(-3+i1 >= 0 /\ 1 > 0 /\ 3-i1 >= 0 /\ -1+i6 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T]}
	{}
	{4[T]}
	
Poly(n^2)

Backtrack

	Trace

	0[(-1+i1 == 0)]
	1[(-i4+i5 < 0 /\ -2+i1 == 0 /\ -i5 < 0)]
	2[(-2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T]}
	{4[T]}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	1[(-i4+i5 < 0 /\ -2+i1 == 0 /\ -i5 < 0)]
	2[(-2+i1 == 0)]
	3[(i6 > 0 /\ -3+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T]}
	{4[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	1[(-i4+i5 < 0 /\ -2+i1 == 0 /\ -i5 < 0)]
	2[(-2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T]}
	{3[T], 4[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	1[(-i4+i5 < 0 /\ -2+i1 == 0 /\ -i5 < 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T], 2[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 2[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Poly(n^2)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^2))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₁: l1(X₀, X₁, X₂) → l1(2⋅X₀, 3⋅X₁, (X₂)²) :|: 1+X₁ ≤ X₀ ∧ 1 ≤ X₁
  t₂: l1(X₀, X₁, X₂) → l2(X₀, X₁, X₂)
  t₃: l2(X₀, X₁, X₂) → l2(X₀, X₁, X₂-1) :|: 1 ≤ X₂


Preprocessing
Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₁: l1(X₀, X₁, X₂) → l1(2⋅X₀, 3⋅X₁, (X₂)²) :|: 1+X₁ ≤ X₀ ∧ 1 ≤ X₁
  t₂: l1(X₀, X₁, X₂) → l2(X₀, X₁, X₂)
  t₃: l2(X₀, X₁, X₂) → l2(X₀, X₁, X₂-1) :|: 1 ≤ X₂


TWN: t₁: l1→l1


  cycle: [t₁: l1→l1]
  original loop: (1+X₁ ≤ X₀ ∧ 1 ≤ X₁,(X₀,X₁) -> (2⋅X₀,3⋅X₁))
  transformed loop: (1+X₁ ≤ X₀ ∧ 1 ≤ X₁,(X₀,X₁) -> (2⋅X₀,3⋅X₁))
  loop: (1+X₁ ≤ X₀ ∧ 1 ≤ X₁,(X₀,X₁) -> (2⋅X₀,3⋅X₁))
  order: [X₁; X₀]
closed-form:  X₁: X₁⋅(3)^n
  X₀: X₀⋅(2)^n

  Termination: true
  Formula: 
    0 ≤ 1 ∧ 1 ≤ 0 ∧ 1 ≤ X₁ ∧ 0 ≤ X₀ ∧ X₀ ≤ 0 ∧ 0 ≤ X₁ ∧ X₁ ≤ 0
     ∨ 1 ≤ 0 ∧ 1 ≤ X₁ ∧ 0 ≤ X₀ ∧ X₀ ≤ 0 ∧ 0 ≤ X₁ ∧ X₁ ≤ 0
     ∨ 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 0 ≤ X₁ ∧ X₁ ≤ 0
     ∨ 1 ≤ X₁ ∧ 1+X₁ ≤ 0



Stabilization-Threshold for: 1+X₁ ≤ X₀
  alphas_abs: X₀
  M: 0
  N: 1
  Bound: 2⋅X₀+2 {O(n)}

TWN - Lifting for [1: l1->l1] of 2⋅X₀+4 {O(n)}
relevant size-bounds w.r.t. t₀: l0→l1:
X₀: X₀ {O(n)}
Runtime-bound of t₀: 1 {O(1)}
Results in: 2⋅X₀+4 {O(n)}
MPRF for transition t₃: l2(X₀, X₁, X₂) → l2(X₀, X₁, X₂-1) :|: 1 ≤ X₂ of depth 1:
  new bound:
    X₂^2+X₂ {O(n^2)}

  MPRF:
    • l2: [X₂]




  Found invariant 0 ≤ X₂ for location l2_v1


All Bounds
Timebounds
  Overall timebound:X₂^2+2⋅X₀+X₂+6 {O(n^2)}
    t₀: 1 {O(1)}
    t₁: 2⋅X₀+4 {O(n)}
    t₂: 1 {O(1)}
    t₃: X₂^2+X₂ {O(n^2)}


Costbounds
  Overall costbound: X₂^2+2⋅X₀+X₂+6 {O(n^2)}
    t₀: 1 {O(1)}
    t₁: 2⋅X₀+4 {O(n)}
    t₂: 1 {O(1)}
    t₃: X₂^2+X₂ {O(n^2)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₀, X₂: X₂ {O(n)}
    t₁, X₀: 2^(2⋅X₀+4)⋅X₀ {O(EXP)}
    t₁, X₁: 3^(2⋅X₀+4)⋅X₁ {O(EXP)}
    t₁, X₂: X₂^2 {O(n^2)}
    t₂, X₀: 2^(2⋅X₀+4)⋅X₀+X₀ {O(EXP)}
    t₂, X₁: 3^(2⋅X₀+4)⋅X₁+X₁ {O(EXP)}
    t₂, X₂: X₂^2+X₂ {O(n^2)}
    t₃, X₀: 2^(2⋅X₀+4)⋅X₀+X₀ {O(EXP)}
    t₃, X₁: 3^(2⋅X₀+4)⋅X₁+X₁ {O(EXP)}
    t₃, X₂: X₂^2+X₂ {O(n^2)}

