NO

# LoAT Proof:
NO

NO

Initial ITS

Start location: f1

Location map:
LoAT_sink -> 0
f1 -> 1
f0 -> 2
f2 -> 3

Rules:
   0: (-2+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=1+i3, i4'=it4, i6'=it3
   1: (-2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=it6, i7'=it5, i8'=0
   2: (-2+i1 == 0 /\ -1-it10 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=it12, i7'=it11, i8'=it10, i9'=it9
   3: (-2+i1 == 0 /\ -1+it14 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=it16, i7'=it15, i8'=it14, i9'=it13
   4: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i10'=it17

Dependency graph:
1 -> 0, 1 -> 1, 1 -> 2, 1 -> 3
2 -> 0, 2 -> 1, 2 -> 2, 2 -> 3
3 -> 0, 3 -> 1, 3 -> 2, 3 -> 3
4 -> 0, 4 -> 1, 4 -> 2, 4 -> 3

Step with 4

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	4[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ -1-it10 >= 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-2+i1 == 0 /\ -1-it10 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=it12, i7'=it11, i8'=it10, i9'=it9
	New rule:
	(it12-i4 <= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-it10 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=0

		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		-1-it10 >= 0 [0]: unchanged
		
		-1-i4+i5 >= 0 [0]: eventual decrease yields (-1-it12+i5 >= 0 /\ -1-i4+i5 >= 0)
		
		-1-i4+i5 >= 0 [1]: eventual increase yields (it12-i4 <= 0 /\ -1-i4+i5 >= 0)
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -1-it10 >= 0 -> -1-it10 >= 0, -1-i4+i5 >= 0 -> (it12-i4 <= 0 /\ -1-i4+i5 >= 0)}

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -1-it10 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=it12, i7'=it11, i8'=it10, i9'=it9
	New rule:
	(-1-it12+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it51 >= 0 /\ 2-i1 >= 0 /\ -1-it10 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=i1, i3'=i3+it51, i4'=it12, i7'=it11, i8'=it10, i9'=it9

		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		-1-it10 >= 0 [0]: unchanged
		
		-1-i4+i5 >= 0 [0]: eventual decrease yields (-1-it12+i5 >= 0 /\ -1-i4+i5 >= 0)
		
		-1-i4+i5 >= 0 [1]: eventual increase yields (it12-i4 <= 0 /\ -1-i4+i5 >= 0)
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -1-it10 >= 0 -> -1-it10 >= 0, -1-i4+i5 >= 0 -> (-1-it12+i5 >= 0 /\ -1-i4+i5 >= 0)}

	Removed Trivial Updates

	Original rule:
	(-1-it12+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it51 >= 0 /\ 2-i1 >= 0 /\ -1-it10 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=i1, i3'=i3+it51, i4'=it12, i7'=it11, i8'=it10, i9'=it9
	New rule:
	(-1-it12+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it51 >= 0 /\ 2-i1 >= 0 /\ -1-it10 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3+it51, i4'=it12, i7'=it11, i8'=it10, i9'=it9

Start location: f1

Location map:
LoAT_sink -> 0
f1 -> 1
f0 -> 2
f2 -> 3

Rules:
   0: (-2+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=1+i3, i4'=it4, i6'=it3
   1: (-2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=it6, i7'=it5, i8'=0
   2: (-2+i1 == 0 /\ -1-it10 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=it12, i7'=it11, i8'=it10, i9'=it9
   3: (-2+i1 == 0 /\ -1+it14 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=it16, i7'=it15, i8'=it14, i9'=it13
   4: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i10'=it17
   5: (it12-i4 <= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-it10 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=0
   6: (-1-it12+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it51 >= 0 /\ 2-i1 >= 0 /\ -1-it10 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3+it51, i4'=it12, i7'=it11, i8'=it10, i9'=it9

Dependency graph:
1 -> 0, 1 -> 1, 1 -> 2, 1 -> 3, 1 -> 5, 1 -> 6
2 -> 0, 2 -> 1, 2 -> 2, 2 -> 3, 2 -> 5, 2 -> 6
3 -> 0, 3 -> 1, 3 -> 2, 3 -> 3, 3 -> 5, 3 -> 6
4 -> 0, 4 -> 1, 4 -> 2, 4 -> 3, 4 -> 5, 4 -> 6
6 -> 0, 6 -> 1, 6 -> 2, 6 -> 3, 6 -> 5

Step with 5

	Trace

	4[(-1+i1 == 0)]
	5[(it12-i4 <= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-it10 >= 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{}
	{5[T]}
	
Refute

	Counterexample

	(i1=1, i3=-1, i4=-1, i5=0, i6=0, i7=0, i8=0, i9=0)
	-4-> (i1=2, i3=0, i4=-1, i5=0, i6=0, i7=0, i8=0, i9=0, i10=0 )
	-5-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃, X₄, X₅, X₆
  Temp_Vars:  H, I, J, K
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₄: l0(X₀, X₁, X₂, X₃, X₄, X₅, X₆) → l1(X₀, X₁, X₂, X₃, X₄, X₅, H)
  t₁: l1(X₀, X₁, X₂, X₃, X₄, X₅, X₆) → l1(H, X₁, X₂, I, 0, X₅, X₆) :|: 1+X₀ ≤ X₁
  t₂: l1(X₀, X₁, X₂, X₃, X₄, X₅, X₆) → l1(H, X₁, X₂, I, J, K, X₆) :|: 1+J ≤ 0 ∧ 1+X₀ ≤ X₁
  t₃: l1(X₀, X₁, X₂, X₃, X₄, X₅, X₆) → l1(H, X₁, X₂, I, J, K, X₆) :|: 1 ≤ J ∧ 1+X₀ ≤ X₁
  t₀: l1(X₀, X₁, X₂, X₃, X₄, X₅, X₆) → l2(H, X₁, I, X₃, X₄, X₅, X₆) :|: X₁ ≤ X₀


Preprocessing
  Eliminate variables [I; K; X₂; X₃; X₄; X₅; X₆] that do not contribute to the problem


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  H, J
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₅: l0(X₀, X₁) → l1(X₀, X₁)
  t₆: l1(X₀, X₁) → l1(H, X₁) :|: 1+X₀ ≤ X₁
  t₇: l1(X₀, X₁) → l1(H, X₁) :|: 1+J ≤ 0 ∧ 1+X₀ ≤ X₁
  t₈: l1(X₀, X₁) → l1(H, X₁) :|: 1 ≤ J ∧ 1+X₀ ≤ X₁
  t₉: l1(X₀, X₁) → l2(H, X₁) :|: X₁ ≤ X₀


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₅: 1 {O(1)}
    t₆: inf {Infinity}
    t₇: inf {Infinity}
    t₈: inf {Infinity}
    t₉: 1 {O(1)}


Costbounds
  Overall costbound: inf {Infinity}
    t₅: 1 {O(1)}
    t₆: inf {Infinity}
    t₇: inf {Infinity}
    t₈: inf {Infinity}
    t₉: 1 {O(1)}


Sizebounds
    t₅, X₀: X₀ {O(n)}
    t₅, X₁: X₁ {O(n)}
    t₆, X₁: X₁ {O(n)}
    t₇, X₁: X₁ {O(n)}
    t₈, X₁: X₁ {O(n)}
    t₉, X₁: 4⋅X₁ {O(n)}

