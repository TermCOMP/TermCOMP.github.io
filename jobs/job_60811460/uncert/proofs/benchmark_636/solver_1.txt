NO

# LoAT Proof:
NO

NO

Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f3 -> 2
f12 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0
   1: (-2+i1 == 0 /\ -5+i4 == 0) /\ i1'=2, i3'=1+i3, i4'=1+it2
   2: (-2+i1 == 0 /\ 9-i4 >= 0 /\ 4-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=i4
   3: (-2+i1 == 0 /\ 9-i4 >= 0 /\ -6+i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=i4
   4: (-2+i1 == 0 /\ -10+i4 >= 0) /\ i1'=3, i3'=1+i3

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3, 0 -> 4
1 -> 1, 1 -> 2, 1 -> 3, 1 -> 4
2 -> 1, 2 -> 2, 2 -> 3, 2 -> 4
3 -> 1, 3 -> 2, 3 -> 3, 3 -> 4

Refined Dependency Graph

	Removed the following edges: 0 -> 1, 0 -> 3, 0 -> 4, 2 -> 3, 2 -> 4, 3 -> 1, 3 -> 2

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f3 -> 2
f12 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0
   1: (-2+i1 == 0 /\ -5+i4 == 0) /\ i1'=2, i3'=1+i3, i4'=1+it2
   2: (-2+i1 == 0 /\ 9-i4 >= 0 /\ 4-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=i4
   3: (-2+i1 == 0 /\ 9-i4 >= 0 /\ -6+i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=i4
   4: (-2+i1 == 0 /\ -10+i4 >= 0) /\ i1'=3, i3'=1+i3

Dependency graph:
0 -> 2
1 -> 1, 1 -> 2, 1 -> 3, 1 -> 4
2 -> 1, 2 -> 2
3 -> 3, 3 -> 4

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ 9-i4 >= 0 /\ 4-i4 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ 9-i4 >= 0 /\ 4-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=i4
	New rule:
	(5-i4-it12 >= 0 /\ -2+i1 >= 0 /\ 9-i4 >= 0 /\ 4-i4 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0) /\ i1'=i1, i3'=i3+it12, i4'=i4+it12, i5'=-1+i4+it12

		-2+i1 >= 0 [0]: unchanged
		
		9-i4 >= 0 [0]: monotonic increase yields 9-i4 >= 0, dependencies: 4-i4 >= 0
		
		9-i4 >= 0 [1]: montonic decrease yields (9-i4 >= 0 /\ 10-i4-it12 >= 0)
		
		4-i4 >= 0 [0]: montonic decrease yields (5-i4-it12 >= 0 /\ 4-i4 >= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 9-i4 >= 0 -> 9-i4 >= 0, 4-i4 >= 0 -> (5-i4-it12 >= 0 /\ 4-i4 >= 0), 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(5-i4-it12 >= 0 /\ -2+i1 >= 0 /\ 9-i4 >= 0 /\ 4-i4 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0) /\ i1'=i1, i3'=i3+it12, i4'=i4+it12, i5'=-1+i4+it12
	New rule:
	(5-i4-it12 >= 0 /\ -2+i1 >= 0 /\ 9-i4 >= 0 /\ 4-i4 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0) /\ i3'=i3+it12, i4'=i4+it12, i5'=-1+i4+it12
	
	Instantiation

	Original rule:
	(5-i4-it12 >= 0 /\ -2+i1 >= 0 /\ 9-i4 >= 0 /\ 4-i4 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0) /\ i3'=i3+it12, i4'=i4+it12, i5'=-1+i4+it12
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ 9-i4 >= 0 /\ 4-i4 >= 0 /\ 2-i1 >= 0) /\ i3'=5+i3-i4, i4'=5, i5'=4

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f3 -> 2
f12 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0
   1: (-2+i1 == 0 /\ -5+i4 == 0) /\ i1'=2, i3'=1+i3, i4'=1+it2
   2: (-2+i1 == 0 /\ 9-i4 >= 0 /\ 4-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=i4
   3: (-2+i1 == 0 /\ 9-i4 >= 0 /\ -6+i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=i4
   4: (-2+i1 == 0 /\ -10+i4 >= 0) /\ i1'=3, i3'=1+i3
   5: (0 >= 0 /\ -2+i1 >= 0 /\ 9-i4 >= 0 /\ 4-i4 >= 0 /\ 2-i1 >= 0) /\ i3'=5+i3-i4, i4'=5, i5'=4

Dependency graph:
0 -> 2, 0 -> 5
1 -> 1, 1 -> 2, 1 -> 3, 1 -> 4, 1 -> 5
2 -> 1, 2 -> 2, 2 -> 5
3 -> 3, 3 -> 4
5 -> 1, 5 -> 2

	Trace

	0[(-1+i1 == 0)]
	5[(0 >= 0 /\ -2+i1 >= 0 /\ 9-i4 >= 0 /\ 4-i4 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 5[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	5[(0 >= 0 /\ -2+i1 >= 0 /\ 9-i4 >= 0 /\ 4-i4 >= 0 /\ 2-i1 >= 0)]
	1[(-2+i1 == 0 /\ -5+i4 == 0)]
	
	Blocked

	{}
	{}
	{2[T], 5[T]}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-2+i1 == 0 /\ -5+i4 == 0) /\ i1'=2, i3'=1+i3, i4'=1+it2
	New rule:
	(1+it2-i4 <= 0 /\ -2+i1 >= 0 /\ -5+i4 >= 0 /\ 5-i4 >= 0 /\ -1-it2+i4 <= 0 /\ 2-i1 >= 0) /\ i1'=0

		-2+i1 >= 0 [0]: unchanged
		
		-5+i4 >= 0 [0]: eventual decrease yields (-5+i4 >= 0 /\ -4+it2 >= 0)
		
		-5+i4 >= 0 [1]: eventual increase yields (-5+i4 >= 0 /\ -1-it2+i4 <= 0)
		
		5-i4 >= 0 [0]: eventual decrease yields (5-i4 >= 0 /\ 4-it2 >= 0)
		
		5-i4 >= 0 [1]: eventual increase yields (1+it2-i4 <= 0 /\ 5-i4 >= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -5+i4 >= 0 -> (-5+i4 >= 0 /\ -1-it2+i4 <= 0), 5-i4 >= 0 -> (1+it2-i4 <= 0 /\ 5-i4 >= 0), 2-i1 >= 0 -> 2-i1 >= 0}

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -5+i4 == 0) /\ i1'=2, i3'=1+i3, i4'=1+it2
	New rule:
	(-2+i1 >= 0 /\ -1+it22 >= 0 /\ -5+i4 >= 0 /\ 5-i4 >= 0 /\ 2-i1 >= 0 /\ -4+it2 >= 0 /\ 4-it2 >= 0) /\ i1'=i1, i3'=i3+it22, i4'=1+it2

		-2+i1 >= 0 [0]: unchanged
		
		-5+i4 >= 0 [0]: eventual decrease yields (-5+i4 >= 0 /\ -4+it2 >= 0)
		
		-5+i4 >= 0 [1]: eventual increase yields (-5+i4 >= 0 /\ -1-it2+i4 <= 0)
		
		5-i4 >= 0 [0]: eventual decrease yields (5-i4 >= 0 /\ 4-it2 >= 0)
		
		5-i4 >= 0 [1]: eventual increase yields (1+it2-i4 <= 0 /\ 5-i4 >= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -5+i4 >= 0 -> (-5+i4 >= 0 /\ -4+it2 >= 0), 5-i4 >= 0 -> (5-i4 >= 0 /\ 4-it2 >= 0), 2-i1 >= 0 -> 2-i1 >= 0}

	Extracted Implied Equalities

	Original rule:
	(-2+i1 >= 0 /\ -1+it22 >= 0 /\ -5+i4 >= 0 /\ 5-i4 >= 0 /\ 2-i1 >= 0 /\ -4+it2 >= 0 /\ 4-it2 >= 0) /\ i1'=i1, i3'=i3+it22, i4'=1+it2
	New rule:
	(-2+i1 >= 0 /\ -1+it22 >= 0 /\ -5+i4 >= 0 /\ 5-i4 >= 0 /\ 5-i4 == 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ -4+it2 >= 0 /\ 4-it2 >= 0 /\ 4-it2 == 0) /\ i1'=i1, i3'=i3+it22, i4'=1+it2
	
	Propagated Equalities

	Original rule:
	(-2+i1 >= 0 /\ -1+it22 >= 0 /\ -5+i4 >= 0 /\ 5-i4 >= 0 /\ 5-i4 == 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ -4+it2 >= 0 /\ 4-it2 >= 0 /\ 4-it2 == 0) /\ i1'=i1, i3'=i3+it22, i4'=1+it2
	New rule:
	(0 >= 0 /\ 0 == 0 /\ -2+i1 >= 0 /\ -1+it22 >= 0 /\ -5+i4 >= 0 /\ 5-i4 >= 0 /\ 5-i4 == 0 /\ 2-i1 >= 0 /\ 2-i1 == 0) /\ i1'=i1, i3'=i3+it22, i4'=5
	
		propagated equality it2 = 4
		
	Simplified Guard

	Original rule:
	(0 >= 0 /\ 0 == 0 /\ -2+i1 >= 0 /\ -1+it22 >= 0 /\ -5+i4 >= 0 /\ 5-i4 >= 0 /\ 5-i4 == 0 /\ 2-i1 >= 0 /\ 2-i1 == 0) /\ i1'=i1, i3'=i3+it22, i4'=5
	New rule:
	(-2+i1 >= 0 /\ -1+it22 >= 0 /\ -5+i4 >= 0 /\ 5-i4 >= 0 /\ 5-i4 == 0 /\ 2-i1 >= 0 /\ 2-i1 == 0) /\ i1'=i1, i3'=i3+it22, i4'=5
	
	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ -1+it22 >= 0 /\ -5+i4 >= 0 /\ 5-i4 >= 0 /\ 5-i4 == 0 /\ 2-i1 >= 0 /\ 2-i1 == 0) /\ i1'=i1, i3'=i3+it22, i4'=5
	New rule:
	(-2+i1 >= 0 /\ -1+it22 >= 0 /\ -5+i4 >= 0 /\ 5-i4 >= 0 /\ 5-i4 == 0 /\ 2-i1 >= 0 /\ 2-i1 == 0) /\ i3'=i3+it22, i4'=5

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f3 -> 2
f12 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0
   1: (-2+i1 == 0 /\ -5+i4 == 0) /\ i1'=2, i3'=1+i3, i4'=1+it2
   2: (-2+i1 == 0 /\ 9-i4 >= 0 /\ 4-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=i4
   3: (-2+i1 == 0 /\ 9-i4 >= 0 /\ -6+i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=i4
   4: (-2+i1 == 0 /\ -10+i4 >= 0) /\ i1'=3, i3'=1+i3
   5: (0 >= 0 /\ -2+i1 >= 0 /\ 9-i4 >= 0 /\ 4-i4 >= 0 /\ 2-i1 >= 0) /\ i3'=5+i3-i4, i4'=5, i5'=4
   6: (1+it2-i4 <= 0 /\ -2+i1 >= 0 /\ -5+i4 >= 0 /\ 5-i4 >= 0 /\ -1-it2+i4 <= 0 /\ 2-i1 >= 0) /\ i1'=0
   7: (-2+i1 >= 0 /\ -1+it22 >= 0 /\ -5+i4 >= 0 /\ 5-i4 >= 0 /\ 5-i4 == 0 /\ 2-i1 >= 0 /\ 2-i1 == 0) /\ i3'=i3+it22, i4'=5

Dependency graph:
0 -> 2, 0 -> 5
1 -> 1, 1 -> 2, 1 -> 3, 1 -> 4, 1 -> 5, 1 -> 6, 1 -> 7
2 -> 1, 2 -> 2, 2 -> 5, 2 -> 6, 2 -> 7
3 -> 3, 3 -> 4
5 -> 1, 5 -> 2, 5 -> 6, 5 -> 7
7 -> 1, 7 -> 2, 7 -> 3, 7 -> 4, 7 -> 5, 7 -> 6

Step with 6

	Trace

	0[(-1+i1 == 0)]
	5[(0 >= 0 /\ -2+i1 >= 0 /\ 9-i4 >= 0 /\ 4-i4 >= 0 /\ 2-i1 >= 0)]
	6[(1+it2-i4 <= 0 /\ -2+i1 >= 0 /\ -5+i4 >= 0 /\ 5-i4 >= 0 /\ -1-it2+i4 <= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 5[T]}
	{6[T]}
	
Refute

	Counterexample

	(i1=1, i3=-1, i5=0)
	-0-> (i1=2, i3=0, i4=0, i5=0 )
	-5-> (i1=2, i3=5, i4=5, i5=4 )
	-6-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  C
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(0, X₁)
  t₁: l1(X₀, X₁) → l1(1+C, X₁) :|: X₀ ≤ 5 ∧ 5 ≤ X₀
  t₂: l1(X₀, X₁) → l1(1+X₀, X₀) :|: X₀ ≤ 9 ∧ X₀ ≤ 4
  t₃: l1(X₀, X₁) → l1(1+X₀, X₀) :|: X₀ ≤ 9 ∧ 6 ≤ X₀
  t₄: l1(X₀, X₁) → l2(X₀, X₁) :|: 10 ≤ X₀


Preprocessing
  Eliminate variables [X₁] that do not contribute to the problem


  Found invariant 10 ≤ X₀ for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  C
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₅: l0(X₀) → l1(0)
  t₆: l1(X₀) → l1(1+C) :|: X₀ ≤ 5 ∧ 5 ≤ X₀
  t₇: l1(X₀) → l1(1+X₀) :|: X₀ ≤ 9 ∧ X₀ ≤ 4
  t₈: l1(X₀) → l1(1+X₀) :|: X₀ ≤ 9 ∧ 6 ≤ X₀
  t₉: l1(X₀) → l2(X₀) :|: 10 ≤ X₀


  Found invariant X₀ ≤ 5 for location l1_v2


  Found invariant 10 ≤ X₀ for location l2


  Found invariant X₀ ≤ 10 ∧ 7 ≤ X₀ for location l1_v1


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₅: 1 {O(1)}
    t₆: inf {Infinity}
    t₇: inf {Infinity}
    t₈: inf {Infinity}
    t₉: 1 {O(1)}


Costbounds
  Overall costbound: inf {Infinity}
    t₅: 1 {O(1)}
    t₆: inf {Infinity}
    t₇: inf {Infinity}
    t₈: inf {Infinity}
    t₉: 1 {O(1)}


Sizebounds
    t₅, X₀: 0 {O(1)}
    t₈, X₀: 10 {O(1)}

