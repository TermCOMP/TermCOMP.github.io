WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_start_bb1_in/6,eval_start_bb2_in/6,eval_start_bb3_in/6]
1. non_recursive  : [eval_start_stop/5]
2. non_recursive  : [eval_start_bb4_in/5]
3. non_recursive  : [exit_location/1]
4. non_recursive  : [eval_start_bb1_in_loop_cont/6]
5. non_recursive  : [eval_start_9/5]
6. non_recursive  : [eval_start_8/5]
7. non_recursive  : [eval_start_bb5_in/5]
8. non_recursive  : [eval_start_4/5]
9. non_recursive  : [eval_start_3/5]
10. non_recursive  : [eval_start_2/5]
11. non_recursive  : [eval_start_1/5]
12. non_recursive  : [eval_start_0/5]
13. non_recursive  : [eval_start_bb0_in/5]
14. non_recursive  : [eval_start_start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_start_bb1_in/6
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_start_bb1_in_loop_cont/6
5. SCC is completely evaluated into other SCCs
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_start_4/5
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_start_start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_start_bb1_in/6 
* CE 7 is refined into CE [10] 
* CE 6 is refined into CE [11] 
* CE 5 is refined into CE [12] 
* CE 4 is refined into CE [13] 


### Cost equations --> "Loop" of eval_start_bb1_in/6 
* CEs [12] --> Loop 10 
* CEs [13] --> Loop 11 
* CEs [10] --> Loop 12 
* CEs [11] --> Loop 13 

### Ranking functions of CR eval_start_bb1_in(V_m,V_va_0,V_vb_0,B,C,D) 
* RF of phase [10,11]: [2*V_va_0+V_vb_0-1]

#### Partial ranking functions of CR eval_start_bb1_in(V_m,V_va_0,V_vb_0,B,C,D) 
* Partial RF of phase [10,11]:
  - RF of loop [10:1]:
    V_m-V_vb_0 depends on loops [11:1] 
    V_va_0
  - RF of loop [11:1]:
    -V_m+V_vb_0+1 depends on loops [10:1] 
    V_vb_0 depends on loops [10:1] 


### Specialization of cost equations eval_start_bb1_in_loop_cont/6 
* CE 9 is refined into CE [14] 
* CE 8 is refined into CE [15] 


### Cost equations --> "Loop" of eval_start_bb1_in_loop_cont/6 
* CEs [14] --> Loop 14 
* CEs [15] --> Loop 15 

### Ranking functions of CR eval_start_bb1_in_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR eval_start_bb1_in_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations eval_start_4/5 
* CE 3 is refined into CE [16,17,18,19] 
* CE 2 is refined into CE [20] 


### Cost equations --> "Loop" of eval_start_4/5 
* CEs [16,18] --> Loop 16 
* CEs [19] --> Loop 17 
* CEs [17] --> Loop 18 
* CEs [20] --> Loop 19 

### Ranking functions of CR eval_start_4(V_m,V_n,V_va_0,V_vb_0,B) 

#### Partial ranking functions of CR eval_start_4(V_m,V_n,V_va_0,V_vb_0,B) 


### Specialization of cost equations eval_start_start/5 
* CE 1 is refined into CE [21,22,23,24] 


### Cost equations --> "Loop" of eval_start_start/5 
* CEs [24] --> Loop 20 
* CEs [23] --> Loop 21 
* CEs [22] --> Loop 22 
* CEs [21] --> Loop 23 

### Ranking functions of CR eval_start_start(V_m,V_n,V_va_0,V_vb_0,B) 

#### Partial ranking functions of CR eval_start_start(V_m,V_n,V_va_0,V_vb_0,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_start_bb1_in(V_m,V_va_0,V_vb_0,B,C,D):
* Chain [[10,11],13]: 1*it(10)+1*it(11)+0
  Such that:it(10) =< V_va_0
aux(16) =< 2*V_va_0+V_vb_0
aux(17) =< 2*V_va_0+V_vb_0-D
it(10) =< aux(16)
it(11) =< aux(16)
it(10) =< aux(17)
it(11) =< aux(17)

  with precondition: [B=2,C=0,V_m>=1,V_va_0>=1,V_vb_0>=0,V_m>=D,V_va_0+V_vb_0>=D] 

* Chain [[10,11],12]: 1*it(10)+1*it(11)+0
  Such that:it(10) =< V_va_0
aux(20) =< 2*V_va_0+V_vb_0
it(10) =< aux(20)
it(11) =< aux(20)

  with precondition: [B=3,V_m>=1,V_va_0>=1,V_vb_0>=0] 

* Chain [13]: 0
  with precondition: [B=2,V_va_0=C,V_vb_0=D,0>=V_va_0,V_m>=1,V_vb_0>=0] 

* Chain [12]: 0
  with precondition: [B=3,V_m>=1,V_vb_0>=0] 


#### Cost of chains of eval_start_bb1_in_loop_cont(A,B,C,D,E,F):
* Chain [15]: 0
  with precondition: [A=2,B>=1] 

* Chain [14]: 0
  with precondition: [A=3,B>=1] 


#### Cost of chains of eval_start_4(V_m,V_n,V_va_0,V_vb_0,B):
* Chain [19]: 0
  with precondition: [0>=V_m] 

* Chain [18]: 0
  with precondition: [0>=V_n,V_m>=1] 

* Chain [17]: 0
  with precondition: [V_m>=1] 

* Chain [16]: 2*s(1)+2*s(4)+0
  Such that:aux(21) =< V_n
aux(22) =< 2*V_n
s(1) =< aux(21)
s(1) =< aux(22)
s(4) =< aux(22)

  with precondition: [V_m>=1,V_n>=1] 


#### Cost of chains of eval_start_start(V_m,V_n,V_va_0,V_vb_0,B):
* Chain [23]: 0
  with precondition: [0>=V_m] 

* Chain [22]: 0
  with precondition: [0>=V_n,V_m>=1] 

* Chain [21]: 0
  with precondition: [V_m>=1] 

* Chain [20]: 2*s(10)+2*s(11)+0
  Such that:s(8) =< V_n
s(9) =< 2*V_n
s(10) =< s(8)
s(10) =< s(9)
s(11) =< s(9)

  with precondition: [V_m>=1,V_n>=1] 


Closed-form bounds of eval_start_start(V_m,V_n,V_va_0,V_vb_0,B): 
-------------------------------------
* Chain [23] with precondition: [0>=V_m] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [22] with precondition: [0>=V_n,V_m>=1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [21] with precondition: [V_m>=1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [20] with precondition: [V_m>=1,V_n>=1] 
    - Upper bound: 6*V_n 
    - Complexity: n 

### Maximum cost of eval_start_start(V_m,V_n,V_va_0,V_vb_0,B): nat(2*V_n)*2+nat(V_n)*2 
Asymptotic class: n 
* Total analysis performed in 85 ms.

