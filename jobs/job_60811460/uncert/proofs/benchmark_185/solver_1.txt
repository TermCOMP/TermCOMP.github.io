WORST_CASE(?,O(1))

# LoAT Proof:
Initial ITS

Start location: start0

Location map:
LoAT_sink -> 0
start0 -> 1
start -> 2
lbl41 -> 3
stop -> 4

Rules:
   0: (i6-i7 == 0 /\ -2+i1 == 0 /\ i4-i5 == 0) /\ i1'=3, i3'=1+i3, i4'=it2
   1: (-3+i1 == 0 /\ i6-i7 == 0) /\ i1'=4, i3'=1+i3, i6'=i4
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=i5, i6'=i7

Dependency graph:
0 -> 1
2 -> 0

Chained Linear Paths

	Applied Chaining

	First rule:
	(i6-i7 == 0 /\ -2+i1 == 0 /\ i4-i5 == 0) /\ i1'=3, i3'=1+i3, i4'=it2
	Second rule:
	(-3+i1 == 0 /\ i6-i7 == 0) /\ i1'=4, i3'=1+i3, i6'=i4
	New rule:
	(0 == 0 /\ i6-i7 == 0 /\ -2+i1 == 0 /\ i4-i5 == 0) /\ i1'=4, i3'=2+i3, i4'=it2, i6'=it2
	
	Applied Deletion

	Removed the following rules: 0, 1
	
	Applied Chaining

	First rule:
	-1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=i5, i6'=i7
	Second rule:
	(0 == 0 /\ i6-i7 == 0 /\ -2+i1 == 0 /\ i4-i5 == 0) /\ i1'=4, i3'=2+i3, i4'=it2, i6'=it2
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=4, i3'=3+i3, i4'=it2, i6'=it2
	
	Applied Deletion

	Removed the following rules: 2, 3

Start location: start0

Location map:
LoAT_sink -> 0
start0 -> 1
start -> 2
lbl41 -> 3
stop -> 4

Rules:
   4: (0 == 0 /\ -1+i1 == 0) /\ i1'=4, i3'=3+i3, i4'=it2, i6'=it2

Dependency graph:

Preprocessed Transitions

	Simplified Guard

	Original rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=4, i3'=3+i3, i4'=it2, i6'=it2
	New rule:
	-1+i1 == 0 /\ i1'=4, i3'=3+i3, i4'=it2, i6'=it2

Start location: start0

Location map:
LoAT_sink -> 0
start0 -> 1
start -> 2
lbl41 -> 3
stop -> 4

Rules:
   5: -1+i1 == 0 /\ i1'=4, i3'=3+i3, i4'=it2, i6'=it2

Dependency graph:

Step with 5

	Trace

	5[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Backtrack

	Trace

	Blocked

	{5[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃
  Temp_Vars:  E
  Locations:  l0, l1, l2, l3
  Return Locations:  
  Transitions:
  t₂: l0(X₀, X₁, X₂, X₃) → l2(X₁, X₁, X₃, X₃)
  t₀: l2(X₀, X₁, X₂, X₃) → l3(E, X₁, X₂, X₃) :|: X₁ ≤ X₀ ∧ X₀ ≤ X₁ ∧ X₃ ≤ X₂ ∧ X₂ ≤ X₃
  t₁: l3(X₀, X₁, X₂, X₃) → l1(X₀, X₁, X₀, X₃) :|: X₃ ≤ X₂ ∧ X₂ ≤ X₃


Preprocessing
  Found invariant X₂ ≤ X₀ ∧ X₀ ≤ X₂ for location l1


  Found invariant X₃ ≤ X₂ ∧ X₂ ≤ X₃ ∧ X₁ ≤ X₀ ∧ X₀ ≤ X₁ for location l2


  Found invariant X₃ ≤ X₂ ∧ X₂ ≤ X₃ for location l3


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃
  Temp_Vars:  E
  Locations:  l0, l1, l2, l3
  Return Locations:  
  Transitions:
  t₂: l0(X₀, X₁, X₂, X₃) → l2(X₁, X₁, X₃, X₃)
  t₀: l2(X₀, X₁, X₂, X₃) → l3(E, X₁, X₂, X₃) :|: X₁ ≤ X₀ ∧ X₀ ≤ X₁ ∧ X₃ ≤ X₂ ∧ X₂ ≤ X₃
  t₁: l3(X₀, X₁, X₂, X₃) → l1(X₀, X₁, X₀, X₃) :|: X₃ ≤ X₂ ∧ X₂ ≤ X₃


All Bounds
Timebounds
  Overall timebound:3 {O(1)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}


Costbounds
  Overall costbound: 3 {O(1)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}


Sizebounds
    t₀, X₁: X₁ {O(n)}
    t₀, X₂: X₃ {O(n)}
    t₀, X₃: X₃ {O(n)}
    t₁, X₁: X₁ {O(n)}
    t₁, X₃: X₃ {O(n)}
    t₂, X₀: X₁ {O(n)}
    t₂, X₁: X₁ {O(n)}
    t₂, X₂: X₃ {O(n)}
    t₂, X₃: X₃ {O(n)}

