WORST_CASE(?,O(n^1))

# LoAT Proof:
Initial ITS

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f2 -> 2
f4 -> 3

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=i4-i5, i5'=1+i5
   1: (-1+i5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3
   2: (-2+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=1+i3, i6'=it2
   3: (-i5 >= 0 /\ -1+i1 == 0) /\ i1'=3, i3'=1+i3, i6'=it3

Dependency graph:
0 -> 0, 0 -> 2
1 -> 0, 1 -> 2

Step with 3

	Trace

	3[(-i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Backtrack

	Trace

	Blocked

	{3[T]}
	
Step with 1

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{3[T]}
	{}
	
Step with 0

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{3[T]}
	{}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=i4-i5, i5'=1+i5
	New rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it20 >= 0 /\ 2-i1 >= 0 /\ -3/2-1/2*(-1+it20)^2+1/2*it20+i4-(-1+it20)*i5 >= 0) /\ i1'=i1, i3'=i3+it20, i4'=-1/2*it20^2+1/2*it20+i4-it20*i5, i5'=it20+i5

		-1+i4 >= 0 [0]: eventual decrease yields (-1+i4 >= 0 /\ -3/2-1/2*(-1+it20)^2+1/2*it20+i4-(-1+it20)*i5 >= 0)
		
		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-1+i4 >= 0 -> (-1+i4 >= 0 /\ -3/2-1/2*(-1+it20)^2+1/2*it20+i4-(-1+it20)*i5 >= 0), -2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it20 >= 0 /\ 2-i1 >= 0 /\ -3/2-1/2*(-1+it20)^2+1/2*it20+i4-(-1+it20)*i5 >= 0) /\ i1'=i1, i3'=i3+it20, i4'=-1/2*it20^2+1/2*it20+i4-it20*i5, i5'=it20+i5
	New rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it20 >= 0 /\ 2-i1 >= 0 /\ -3/2-1/2*(-1+it20)^2+1/2*it20+i4-(-1+it20)*i5 >= 0) /\ i3'=i3+it20, i4'=-1/2*it20^2+1/2*it20+i4-it20*i5, i5'=it20+i5

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f2 -> 2
f4 -> 3

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=i4-i5, i5'=1+i5
   1: (-1+i5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3
   2: (-2+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=1+i3, i6'=it2
   3: (-i5 >= 0 /\ -1+i1 == 0) /\ i1'=3, i3'=1+i3, i6'=it3
   4: (-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it20 >= 0 /\ 2-i1 >= 0 /\ -3/2-1/2*(-1+it20)^2+1/2*it20+i4-(-1+it20)*i5 >= 0) /\ i3'=i3+it20, i4'=-1/2*it20^2+1/2*it20+i4-it20*i5, i5'=it20+i5

Dependency graph:
0 -> 0, 0 -> 2, 0 -> 4
1 -> 0, 1 -> 2, 1 -> 4
4 -> 0, 4 -> 2

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	4[(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it20 >= 0 /\ 2-i1 >= 0 /\ -3/2-1/2*(-1+it20)^2+1/2*it20+i4-(-1+it20)*i5 >= 0)]
	
	Blocked

	{3[T]}
	{}
	{0[T], 4[T]}
	
Step with 2

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	4[(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it20 >= 0 /\ 2-i1 >= 0 /\ -3/2-1/2*(-1+it20)^2+1/2*it20+i4-(-1+it20)*i5 >= 0)]
	2[(-2+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{3[T]}
	{}
	{0[T], 4[T]}
	{}
	
Backtrack

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	4[(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it20 >= 0 /\ 2-i1 >= 0 /\ -3/2-1/2*(-1+it20)^2+1/2*it20+i4-(-1+it20)*i5 >= 0)]
	
	Blocked

	{3[T]}
	{}
	{0[T], 2[T], 4[T]}
	
Backtrack

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{3[T]}
	{4[T]}
	
Step with 2

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	2[(-2+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{3[T]}
	{4[T]}
	{}
	
Backtrack

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{3[T]}
	{2[T], 4[T]}
	
Step with 0

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{3[T]}
	{2[T], 4[T]}
	{}
	
Covered

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{3[T]}
	{0[T], 2[T], 4[T]}
	
Backtrack

	Trace

	Blocked

	{1[T], 3[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  D
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₁: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂) :|: 1 ≤ X₁
  t₃: l0(X₀, X₁, X₂) → l2(X₀, X₁, D) :|: X₁ ≤ 0
  t₀: l1(X₀, X₁, X₂) → l1(X₀-X₁, 1+X₁, X₂) :|: 1 ≤ X₀
  t₂: l1(X₀, X₁, X₂) → l2(X₀, X₁, D) :|: X₀ ≤ 0


Preprocessing
  Eliminate variables [D; X₂] that do not contribute to the problem


  Found invariant 1 ≤ X₁ for location l1


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₄: l0(X₀, X₁) → l1(X₀, X₁) :|: 1 ≤ X₁
  t₅: l0(X₀, X₁) → l2(X₀, X₁) :|: X₁ ≤ 0
  t₆: l1(X₀, X₁) → l1(X₀-X₁, 1+X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₁
  t₇: l1(X₀, X₁) → l2(X₀, X₁) :|: X₀ ≤ 0 ∧ 1 ≤ X₁


MPRF for transition t₆: l1(X₀, X₁) → l1(X₀-X₁, 1+X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₁ of depth 1:
  new bound:
    X₀ {O(n)}

  MPRF:
    • l1: [X₀]




All Bounds
Timebounds
  Overall timebound:X₀+3 {O(n)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: X₀ {O(n)}
    t₇: 1 {O(1)}


Costbounds
  Overall costbound: X₀+3 {O(n)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: X₀ {O(n)}
    t₇: 1 {O(1)}


Sizebounds
    t₄, X₀: X₀ {O(n)}
    t₄, X₁: X₁ {O(n)}
    t₅, X₀: X₀ {O(n)}
    t₅, X₁: X₁ {O(n)}
    t₆, X₀: 2⋅X₀+2⋅X₁ {O(n)}
    t₆, X₁: X₀+X₁ {O(n)}
    t₇, X₀: 2⋅X₁+3⋅X₀ {O(n)}
    t₇, X₁: 2⋅X₁+X₀ {O(n)}

