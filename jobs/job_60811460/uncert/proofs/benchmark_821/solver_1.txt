MAYBE

# LoAT Proof:
Initial ITS

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (3*i4-2*i5 < 0 /\ -2+i1 == 0 /\ -2*i4+i5 < 0) /\ i1'=2, i3'=1+i3, i4'=4*i4-i5, i5'=2*i4+i5

Dependency graph:
0 -> 1
1 -> 1

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(3*i4-2*i5 < 0 /\ -2+i1 == 0 /\ -2*i4+i5 < 0)]
	
	Blocked

	{}
	{}
	{}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(3*i4-2*i5 < 0 /\ -2+i1 == 0 /\ -2*i4+i5 < 0)]
	1[(3*i4-2*i5 < 0 /\ -2+i1 == 0 /\ -2*i4+i5 < 0)]
	
	Blocked

	{}
	{}
	{}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	1[(3*i4-2*i5 < 0 /\ -2+i1 == 0 /\ -2*i4+i5 < 0)]
	
	Blocked

	{}
	{}
	{1[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(X₀, X₁)
  t₁: l1(X₀, X₁) → l1(4⋅X₀-X₁, 2⋅X₀+X₁) :|: 1+X₁ ≤ 2⋅X₀ ∧ 1+3⋅X₀ ≤ 2⋅X₁


Preprocessing
Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(X₀, X₁)
  t₁: l1(X₀, X₁) → l1(4⋅X₀-X₁, 2⋅X₀+X₁) :|: 1+X₁ ≤ 2⋅X₀ ∧ 1+3⋅X₀ ≤ 2⋅X₁


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₀: 1 {O(1)}
    t₁: inf {Infinity}


Costbounds
  Overall costbound: inf {Infinity}
    t₀: 1 {O(1)}
    t₁: inf {Infinity}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}

