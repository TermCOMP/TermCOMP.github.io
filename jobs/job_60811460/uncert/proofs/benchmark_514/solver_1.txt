WORST_CASE(?,O(1))

# LoAT Proof:
Initial ITS

Start location: f1

Location map:
LoAT_sink -> 0
f1 -> 1
f2 -> 2
f300 -> 3

Rules:
   0: -2+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=1+i5, i6'=-1+i6
   1: (-i6+i4 >= 0 /\ -1+i6-i5 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3
   2: (-1+i6-i5 >= 0 /\ -1+i6-i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=1+i3, i7'=it2
   3: (-i6+i5 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=1+i3, i7'=it3
   4: (i4-i5 >= 0 /\ -1+i1 == 0) /\ i1'=3, i3'=1+i3, i7'=it4

Dependency graph:
0 -> 0
1 -> 0

Refined Dependency Graph

	Removed the following edges: 1 -> 0

Start location: f1

Location map:
LoAT_sink -> 0
f1 -> 1
f2 -> 2
f300 -> 3

Rules:
   0: -2+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=1+i5, i6'=-1+i6
   1: (-i6+i4 >= 0 /\ -1+i6-i5 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3
   2: (-1+i6-i5 >= 0 /\ -1+i6-i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=1+i3, i7'=it2
   3: (-i6+i5 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=1+i3, i7'=it3
   4: (i4-i5 >= 0 /\ -1+i1 == 0) /\ i1'=3, i3'=1+i3, i7'=it4

Dependency graph:
0 -> 0

Step with 3

	Trace

	3[(-i6+i5 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{}
	
Backtrack

	Trace

	Blocked

	{3[T]}
	
Step with 4

	Trace

	4[(i4-i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{1[T], 3[T]}
	{}
	
Backtrack

	Trace

	Blocked

	{1[T], 3[T], 4[T]}
	
Step with 2

	Trace

	2[(-1+i6-i5 >= 0 /\ -1+i6-i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{1[T], 3[T], 4[T]}
	{}
	
Backtrack

	Trace

	Blocked

	{1[T], 2[T], 3[T], 4[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃
  Temp_Vars:  E
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₁: l0(X₀, X₁, X₂, X₃) → l1(X₀, X₁, X₂, X₃) :|: 1+X₀ ≤ X₁ ∧ 1+X₁ ≤ X₂ ∧ X₂ ≤ X₀
  t₂: l0(X₀, X₁, X₂, X₃) → l2(X₀, X₁, X₂, E) :|: 1+X₀ ≤ X₁ ∧ 1+X₀ ≤ X₂ ∧ 1+X₁ ≤ X₂
  t₃: l0(X₀, X₁, X₂, X₃) → l2(X₀, X₁, X₂, E) :|: 1+X₀ ≤ X₁ ∧ X₂ ≤ X₁
  t₄: l0(X₀, X₁, X₂, X₃) → l2(X₀, X₁, X₂, E) :|: X₁ ≤ X₀
  t₀: l1(X₀, X₁, X₂, X₃) → l1(1+X₀, 1+X₁, X₂-1, X₃)


Preprocessing
  Cut unsatisfiable transition [t₀: l1→l1; t₁: l0→l1]


  Cut unreachable locations [l1] from the program graph


  Eliminate variables [E; X₃] that do not contribute to the problem


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l2
  Return Locations:  
  Transitions:
  t₅: l0(X₀, X₁, X₂) → l2(X₀, X₁, X₂) :|: 1+X₀ ≤ X₁ ∧ 1+X₀ ≤ X₂ ∧ 1+X₁ ≤ X₂
  t₆: l0(X₀, X₁, X₂) → l2(X₀, X₁, X₂) :|: 1+X₀ ≤ X₁ ∧ X₂ ≤ X₁
  t₇: l0(X₀, X₁, X₂) → l2(X₀, X₁, X₂) :|: X₁ ≤ X₀


All Bounds
Timebounds
  Overall timebound:3 {O(1)}
    t₅: 1 {O(1)}
    t₆: 1 {O(1)}
    t₇: 1 {O(1)}


Costbounds
  Overall costbound: 3 {O(1)}
    t₅: 1 {O(1)}
    t₆: 1 {O(1)}
    t₇: 1 {O(1)}


Sizebounds
    t₅, X₀: X₀ {O(n)}
    t₅, X₁: X₁ {O(n)}
    t₅, X₂: X₂ {O(n)}
    t₆, X₀: X₀ {O(n)}
    t₆, X₁: X₁ {O(n)}
    t₆, X₂: X₂ {O(n)}
    t₇, X₀: X₀ {O(n)}
    t₇, X₁: X₁ {O(n)}
    t₇, X₂: X₂ {O(n)}

