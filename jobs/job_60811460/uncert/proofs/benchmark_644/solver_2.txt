WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_ax_bb2_in/4,eval_ax_bb3_in/4]
1. recursive  : [eval_ax_12/8,eval_ax_13/8,eval_ax_bb1_in/8,eval_ax_bb2_in_loop_cont/9,eval_ax_bb4_in/8]
2. non_recursive  : [eval_ax_stop/7]
3. non_recursive  : [eval_ax_bb5_in/7]
4. non_recursive  : [exit_location/1]
5. non_recursive  : [eval_ax_bb1_in_loop_cont/8]
6. non_recursive  : [eval_ax_6/7]
7. non_recursive  : [eval_ax_5/7]
8. non_recursive  : [eval_ax_4/7]
9. non_recursive  : [eval_ax_3/7]
10. non_recursive  : [eval_ax_2/7]
11. non_recursive  : [eval_ax_1/7]
12. non_recursive  : [eval_ax_0/7]
13. non_recursive  : [eval_ax_bb0_in/7]
14. non_recursive  : [eval_ax_start/7]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_ax_bb2_in/4
1. SCC is partially evaluated into eval_ax_bb1_in/8
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_ax_bb1_in_loop_cont/8
6. SCC is partially evaluated into eval_ax_6/7
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_ax_start/7

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_ax_bb2_in/4 
* CE 12 is refined into CE [13] 
* CE 11 is refined into CE [14] 
* CE 10 is refined into CE [15] 


### Cost equations --> "Loop" of eval_ax_bb2_in/4 
* CEs [15] --> Loop 12 
* CEs [13] --> Loop 13 
* CEs [14] --> Loop 14 

### Ranking functions of CR eval_ax_bb2_in(V__01,V_n,B,C) 
* RF of phase [12]: [-V__01+V_n-1]

#### Partial ranking functions of CR eval_ax_bb2_in(V__01,V_n,B,C) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    -V__01+V_n-1


### Specialization of cost equations eval_ax_bb1_in/8 
* CE 4 is discarded (unfeasible) 
* CE 3 is refined into CE [16,17] 
* CE 6 is refined into CE [18,19] 
* CE 7 is refined into CE [20] 
* CE 5 is refined into CE [21] 


### Cost equations --> "Loop" of eval_ax_bb1_in/8 
* CEs [21] --> Loop 15 
* CEs [17] --> Loop 16 
* CEs [16] --> Loop 17 
* CEs [19] --> Loop 18 
* CEs [18,20] --> Loop 19 

### Ranking functions of CR eval_ax_bb1_in(V__0,V__01,V_3,V_n,B,C,D,E) 
* RF of phase [15]: [-V__0+V_n-2]

#### Partial ranking functions of CR eval_ax_bb1_in(V__0,V__01,V_3,V_n,B,C,D,E) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    -V__0+V_n-2


### Specialization of cost equations eval_ax_bb1_in_loop_cont/8 
* CE 8 is refined into CE [22] 
* CE 9 is refined into CE [23] 


### Cost equations --> "Loop" of eval_ax_bb1_in_loop_cont/8 
* CEs [22] --> Loop 20 
* CEs [23] --> Loop 21 

### Ranking functions of CR eval_ax_bb1_in_loop_cont(A,B,C,D,E,F,G,H) 

#### Partial ranking functions of CR eval_ax_bb1_in_loop_cont(A,B,C,D,E,F,G,H) 


### Specialization of cost equations eval_ax_6/7 
* CE 2 is refined into CE [24,25,26,27,28,29] 


### Cost equations --> "Loop" of eval_ax_6/7 
* CEs [27,29] --> Loop 22 
* CEs [26] --> Loop 23 
* CEs [24] --> Loop 24 
* CEs [28] --> Loop 25 
* CEs [25] --> Loop 26 

### Ranking functions of CR eval_ax_6(V__0,V__01,V_3,V_i,V_j,V_n,B) 

#### Partial ranking functions of CR eval_ax_6(V__0,V__01,V_3,V_i,V_j,V_n,B) 


### Specialization of cost equations eval_ax_start/7 
* CE 1 is refined into CE [30,31,32,33,34] 


### Cost equations --> "Loop" of eval_ax_start/7 
* CEs [34] --> Loop 27 
* CEs [33] --> Loop 28 
* CEs [32] --> Loop 29 
* CEs [31] --> Loop 30 
* CEs [30] --> Loop 31 

### Ranking functions of CR eval_ax_start(V__0,V__01,V_3,V_i,V_j,V_n,B) 

#### Partial ranking functions of CR eval_ax_start(V__0,V__01,V_3,V_i,V_j,V_n,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_ax_bb2_in(V__01,V_n,B,C):
* Chain [[12],14]: 1*it(12)+0
  Such that:it(12) =< -V__01+C

  with precondition: [B=2,V_n=C+1,V__01>=0,V_n>=V__01+2] 

* Chain [[12],13]: 1*it(12)+0
  Such that:it(12) =< -V__01+V_n

  with precondition: [B=3,V__01>=0,V_n>=V__01+2] 

* Chain [14]: 0
  with precondition: [B=2,V__01=C,V__01>=0,V__01+1>=V_n] 

* Chain [13]: 0
  with precondition: [B=3,V__01>=0] 


#### Cost of chains of eval_ax_bb1_in(V__0,V__01,V_3,V_n,B,C,D,E):
* Chain [[15],19]: 1*it(15)+1*s(3)+0
  Such that:it(15) =< -V__0+V_n
aux(1) =< V_n
s(3) =< it(15)*aux(1)

  with precondition: [B=3,V__0>=0,V_n>=V__0+3] 

* Chain [[15],18]: 1*it(15)+1*s(3)+1*s(4)+0
  Such that:it(15) =< -V__0+V_n
aux(2) =< V_n
s(4) =< aux(2)
s(3) =< it(15)*aux(2)

  with precondition: [B=3,V__0>=0,V_n>=V__0+3] 

* Chain [[15],16]: 1*it(15)+1*s(3)+1*s(5)+0
  Such that:it(15) =< -V__0+C
aux(3) =< C+2
s(5) =< aux(3)
s(3) =< it(15)*aux(3)

  with precondition: [B=4,V_n=C+2,V_n=D+1,V_n=E+1,V__0>=0,V_n>=V__0+3] 

* Chain [19]: 0
  with precondition: [B=3,V__0>=0] 

* Chain [18]: 1*s(4)+0
  Such that:s(4) =< V_n

  with precondition: [B=3,V__0>=0,V_n>=2] 

* Chain [17]: 0
  with precondition: [V__0=0,B=4,C=0,D=0,E=1,1>=V_n] 

* Chain [16]: 1*s(5)+0
  Such that:s(5) =< V_n

  with precondition: [B=4,D+1=V_n,V__0=C,V__0+1=E,D>=1,V__0+1>=D] 


#### Cost of chains of eval_ax_bb1_in_loop_cont(A,B,C,D,E,F,G,H):
* Chain [21]: 0
  with precondition: [A=3] 

* Chain [20]: 0
  with precondition: [A=4] 


#### Cost of chains of eval_ax_6(V__0,V__01,V_3,V_i,V_j,V_n,B):
* Chain [26]: 0
  with precondition: [] 

* Chain [25]: 1*s(13)+0
  Such that:s(13) =< 2

  with precondition: [V_n=2] 

* Chain [24]: 0
  with precondition: [1>=V_n] 

* Chain [23]: 1*s(14)+0
  Such that:s(14) =< V_n

  with precondition: [V_n>=2] 

* Chain [22]: 5*s(17)+3*s(19)+0
  Such that:aux(8) =< V_n
s(17) =< aux(8)
s(19) =< s(17)*aux(8)

  with precondition: [V_n>=3] 


#### Cost of chains of eval_ax_start(V__0,V__01,V_3,V_i,V_j,V_n,B):
* Chain [31]: 0
  with precondition: [] 

* Chain [30]: 1*s(24)+0
  Such that:s(24) =< 2

  with precondition: [V_n=2] 

* Chain [29]: 0
  with precondition: [1>=V_n] 

* Chain [28]: 1*s(25)+0
  Such that:s(25) =< V_n

  with precondition: [V_n>=2] 

* Chain [27]: 5*s(27)+3*s(28)+0
  Such that:s(26) =< V_n
s(27) =< s(26)
s(28) =< s(27)*s(26)

  with precondition: [V_n>=3] 


Closed-form bounds of eval_ax_start(V__0,V__01,V_3,V_i,V_j,V_n,B): 
-------------------------------------
* Chain [31] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [30] with precondition: [V_n=2] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [29] with precondition: [1>=V_n] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [28] with precondition: [V_n>=2] 
    - Upper bound: V_n 
    - Complexity: n 
* Chain [27] with precondition: [V_n>=3] 
    - Upper bound: 3*V_n*V_n+5*V_n 
    - Complexity: n^2 

### Maximum cost of eval_ax_start(V__0,V__01,V_3,V_i,V_j,V_n,B): max([2,nat(V_n)*3*nat(V_n)+nat(V_n)*4+nat(V_n)]) 
Asymptotic class: n^2 
* Total analysis performed in 102 ms.

