WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval1 -> 2
eval2 -> 3

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=3, i3'=1+i3
   1: (-3+i1 == 0 /\ -1-i6+i4 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
   2: (-3+i1 == 0 /\ -1-i6+i4 >= 0) /\ i1'=2, i3'=1+i3, i6'=1+i6
   3: (-3+i1 == 0 /\ i6-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   4: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3
1 -> 0
2 -> 0
3 -> 0
4 -> 0

Chained Linear Paths

	Applied Chaining

	First rule:
	(-3+i1 == 0 /\ -1-i6+i4 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
	Second rule:
	(-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=3, i3'=1+i3
	New rule:
	(0 == 0 /\ -3+i1 == 0 /\ -2+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
	
	Applied Deletion

	Removed the following rules: 1
	
	Applied Chaining

	First rule:
	(-3+i1 == 0 /\ -1-i6+i4 >= 0) /\ i1'=2, i3'=1+i3, i6'=1+i6
	Second rule:
	(-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=3, i3'=1+i3
	New rule:
	(0 == 0 /\ -3+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i6'=1+i6
	
	Applied Deletion

	Removed the following rules: 2
	
	Applied Chaining

	First rule:
	(-3+i1 == 0 /\ i6-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
	Second rule:
	(-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=3, i3'=1+i3
	New rule:
	(0 == 0 /\ -3+i1 == 0 /\ -2+i4-i5 >= 0 /\ i6-i4 >= 0) /\ i1'=3, i3'=2+i3, i4'=-1+i4
	
	Applied Deletion

	Removed the following rules: 3
	
	Applied Chaining

	First rule:
	-1+i1 == 0 /\ i1'=2, i3'=1+i3
	Second rule:
	(-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=3, i3'=1+i3
	New rule:
	(0 == 0 /\ -1+i4-i5 >= 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 0, 4

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval1 -> 2
eval2 -> 3

Rules:
   5: (0 == 0 /\ -3+i1 == 0 /\ -2+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
   6: (0 == 0 /\ -3+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i6'=1+i6
   7: (0 == 0 /\ -3+i1 == 0 /\ -2+i4-i5 >= 0 /\ i6-i4 >= 0) /\ i1'=3, i3'=2+i3, i4'=-1+i4
   8: (0 == 0 /\ -1+i4-i5 >= 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3

Dependency graph:
5 -> 5, 5 -> 6, 5 -> 7
6 -> 5, 6 -> 6, 6 -> 7
7 -> 5, 7 -> 6, 7 -> 7
8 -> 5, 8 -> 6, 8 -> 7

Preprocessed Transitions

	Simplified Guard

	Original rule:
	(0 == 0 /\ -3+i1 == 0 /\ -2+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
	New rule:
	(-3+i1 == 0 /\ -2+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -3+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i6'=1+i6
	New rule:
	(-3+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i6'=1+i6
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -3+i1 == 0 /\ -2+i4-i5 >= 0 /\ i6-i4 >= 0) /\ i1'=3, i3'=2+i3, i4'=-1+i4
	New rule:
	(-3+i1 == 0 /\ -2+i4-i5 >= 0 /\ i6-i4 >= 0) /\ i1'=3, i3'=2+i3, i4'=-1+i4
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -1+i4-i5 >= 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3
	New rule:
	(-1+i4-i5 >= 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval1 -> 2
eval2 -> 3

Rules:
   9: (-3+i1 == 0 /\ -2+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
  10: (-3+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i6'=1+i6
  11: (-3+i1 == 0 /\ -2+i4-i5 >= 0 /\ i6-i4 >= 0) /\ i1'=3, i3'=2+i3, i4'=-1+i4
  12: (-1+i4-i5 >= 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3

Dependency graph:
9 -> 9, 9 -> 10, 9 -> 11
10 -> 9, 10 -> 10, 10 -> 11
11 -> 9, 11 -> 10, 11 -> 11
12 -> 9, 12 -> 10, 12 -> 11

Refined Dependency Graph

	Removed the following edges: 9 -> 11, 11 -> 9, 11 -> 10

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval1 -> 2
eval2 -> 3

Rules:
   9: (-3+i1 == 0 /\ -2+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
  10: (-3+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i6'=1+i6
  11: (-3+i1 == 0 /\ -2+i4-i5 >= 0 /\ i6-i4 >= 0) /\ i1'=3, i3'=2+i3, i4'=-1+i4
  12: (-1+i4-i5 >= 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3

Dependency graph:
9 -> 9, 9 -> 10
10 -> 9, 10 -> 10, 10 -> 11
11 -> 11
12 -> 9, 12 -> 10, 12 -> 11

Step with 12

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 11

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	11[(-3+i1 == 0 /\ -2+i4-i5 >= 0 /\ i6-i4 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ -2+i4-i5 >= 0 /\ i6-i4 >= 0) /\ i1'=3, i3'=2+i3, i4'=-1+i4
	New rule:
	(-3+i1 >= 0 /\ -1+i4-it11-i5 >= 0 /\ i6-i4 >= 0 /\ 3-i1 >= 0 /\ -1+it11 >= 0) /\ i1'=i1, i3'=i3+2*it11, i4'=i4-it11

		-3+i1 >= 0 [0]: unchanged
		
		-2+i4-i5 >= 0 [0]: montonic decrease yields -1+i4-it11-i5 >= 0
		
		i6-i4 >= 0 [0]: monotonic increase yields i6-i4 >= 0
		
		3-i1 >= 0 [0]: unchanged
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, -2+i4-i5 >= 0 -> -1+i4-it11-i5 >= 0, i6-i4 >= 0 -> i6-i4 >= 0, 3-i1 >= 0 -> 3-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ -1+i4-it11-i5 >= 0 /\ i6-i4 >= 0 /\ 3-i1 >= 0 /\ -1+it11 >= 0) /\ i1'=i1, i3'=i3+2*it11, i4'=i4-it11
	New rule:
	(-3+i1 >= 0 /\ -1+i4-it11-i5 >= 0 /\ i6-i4 >= 0 /\ 3-i1 >= 0 /\ -1+it11 >= 0) /\ i3'=i3+2*it11, i4'=i4-it11
	
	Instantiation

	Original rule:
	(-3+i1 >= 0 /\ -1+i4-it11-i5 >= 0 /\ i6-i4 >= 0 /\ 3-i1 >= 0 /\ -1+it11 >= 0) /\ i3'=i3+2*it11, i4'=i4-it11
	New rule:
	(0 >= 0 /\ -3+i1 >= 0 /\ -2+i4-i5 >= 0 /\ i6-i4 >= 0 /\ 3-i1 >= 0) /\ i3'=-2+i3+2*i4-2*i5, i4'=1+i5

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval1 -> 2
eval2 -> 3

Rules:
   9: (-3+i1 == 0 /\ -2+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
  10: (-3+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i6'=1+i6
  11: (-3+i1 == 0 /\ -2+i4-i5 >= 0 /\ i6-i4 >= 0) /\ i1'=3, i3'=2+i3, i4'=-1+i4
  12: (-1+i4-i5 >= 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3
  13: (0 >= 0 /\ -3+i1 >= 0 /\ -2+i4-i5 >= 0 /\ i6-i4 >= 0 /\ 3-i1 >= 0) /\ i3'=-2+i3+2*i4-2*i5, i4'=1+i5

Dependency graph:
9 -> 9, 9 -> 10
10 -> 9, 10 -> 10, 10 -> 11, 10 -> 13
11 -> 11, 11 -> 13
12 -> 9, 12 -> 10, 12 -> 11, 12 -> 13
13 -> 11

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	13[(0 >= 0 /\ -3+i1 >= 0 /\ -2+i4-i5 >= 0 /\ i6-i4 >= 0 /\ 3-i1 >= 0)]
	
	Blocked

	{}
	{}
	{11[T], 13[T]}
	
Backtrack

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{13[T]}
	
Step with 10

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	10[(-3+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i6'=1+i6
	New rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+i4-i5 >= 0 /\ -i6+i4-it32 >= 0 /\ -1+it32 >= 0) /\ i1'=i1, i3'=i3+2*it32, i6'=i6+it32

		-3+i1 >= 0 [0]: unchanged
		
		3-i1 >= 0 [0]: unchanged
		
		-1+i4-i5 >= 0 [0]: unchanged
		
		-1-i6+i4 >= 0 [0]: montonic decrease yields -i6+i4-it32 >= 0
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, 3-i1 >= 0 -> 3-i1 >= 0, -1+i4-i5 >= 0 -> -1+i4-i5 >= 0, -1-i6+i4 >= 0 -> -i6+i4-it32 >= 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+i4-i5 >= 0 /\ -i6+i4-it32 >= 0 /\ -1+it32 >= 0) /\ i1'=i1, i3'=i3+2*it32, i6'=i6+it32
	New rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+i4-i5 >= 0 /\ -i6+i4-it32 >= 0 /\ -1+it32 >= 0) /\ i3'=i3+2*it32, i6'=i6+it32
	
	Instantiation

	Original rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+i4-i5 >= 0 /\ -i6+i4-it32 >= 0 /\ -1+it32 >= 0) /\ i3'=i3+2*it32, i6'=i6+it32
	New rule:
	(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i3'=-2*i6+i3+2*i4, i6'=i4

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval1 -> 2
eval2 -> 3

Rules:
   9: (-3+i1 == 0 /\ -2+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
  10: (-3+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i6'=1+i6
  11: (-3+i1 == 0 /\ -2+i4-i5 >= 0 /\ i6-i4 >= 0) /\ i1'=3, i3'=2+i3, i4'=-1+i4
  12: (-1+i4-i5 >= 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3
  13: (0 >= 0 /\ -3+i1 >= 0 /\ -2+i4-i5 >= 0 /\ i6-i4 >= 0 /\ 3-i1 >= 0) /\ i3'=-2+i3+2*i4-2*i5, i4'=1+i5
  14: (0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i3'=-2*i6+i3+2*i4, i6'=i4

Dependency graph:
9 -> 9, 9 -> 10, 9 -> 14
10 -> 9, 10 -> 10, 10 -> 11, 10 -> 13, 10 -> 14
11 -> 11, 11 -> 13
12 -> 9, 12 -> 10, 12 -> 11, 12 -> 13, 12 -> 14
13 -> 11
14 -> 9, 14 -> 10, 14 -> 11, 14 -> 13

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	14[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{10[T], 14[T]}
	
Step with 11

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	14[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0)]
	11[(-3+i1 == 0 /\ -2+i4-i5 >= 0 /\ i6-i4 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{10[T], 14[T]}
	{}
	
Covered

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	14[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{10[T], 11[T], 14[T]}
	
Step with 13

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	14[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0)]
	13[(0 >= 0 /\ -3+i1 >= 0 /\ -2+i4-i5 >= 0 /\ i6-i4 >= 0 /\ 3-i1 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{10[T], 11[T], 14[T]}
	{13[T]}
	
Backtrack

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	14[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{10[T], 11[T], 13[T], 14[T]}
	
Backtrack

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{13[T], 14[T]}
	
Step with 9

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	9[(-3+i1 == 0 /\ -2+i4-i5 >= 0 /\ -1-i6+i4 >= 0)]
	
	Blocked

	{}
	{13[T], 14[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ -2+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
	New rule:
	(-3+i1 >= 0 /\ -1-it53+i4-i5 >= 0 /\ 3-i1 >= 0 /\ -1+it53 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=i1, i3'=i3+2*it53, i5'=it53+i5

		-3+i1 >= 0 [0]: unchanged
		
		-2+i4-i5 >= 0 [0]: montonic decrease yields -1-it53+i4-i5 >= 0
		
		3-i1 >= 0 [0]: unchanged
		
		-1-i6+i4 >= 0 [0]: unchanged
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, -2+i4-i5 >= 0 -> -1-it53+i4-i5 >= 0, 3-i1 >= 0 -> 3-i1 >= 0, -1-i6+i4 >= 0 -> -1-i6+i4 >= 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ -1-it53+i4-i5 >= 0 /\ 3-i1 >= 0 /\ -1+it53 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=i1, i3'=i3+2*it53, i5'=it53+i5
	New rule:
	(-3+i1 >= 0 /\ -1-it53+i4-i5 >= 0 /\ 3-i1 >= 0 /\ -1+it53 >= 0 /\ -1-i6+i4 >= 0) /\ i3'=i3+2*it53, i5'=it53+i5
	
	Instantiation

	Original rule:
	(-3+i1 >= 0 /\ -1-it53+i4-i5 >= 0 /\ 3-i1 >= 0 /\ -1+it53 >= 0 /\ -1-i6+i4 >= 0) /\ i3'=i3+2*it53, i5'=it53+i5
	New rule:
	(0 >= 0 /\ -3+i1 >= 0 /\ -2+i4-i5 >= 0 /\ 3-i1 >= 0 /\ -1-i6+i4 >= 0) /\ i3'=-2+i3+2*i4-2*i5, i5'=-1+i4

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval1 -> 2
eval2 -> 3

Rules:
   9: (-3+i1 == 0 /\ -2+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
  10: (-3+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i1'=3, i3'=2+i3, i6'=1+i6
  11: (-3+i1 == 0 /\ -2+i4-i5 >= 0 /\ i6-i4 >= 0) /\ i1'=3, i3'=2+i3, i4'=-1+i4
  12: (-1+i4-i5 >= 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3
  13: (0 >= 0 /\ -3+i1 >= 0 /\ -2+i4-i5 >= 0 /\ i6-i4 >= 0 /\ 3-i1 >= 0) /\ i3'=-2+i3+2*i4-2*i5, i4'=1+i5
  14: (0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0) /\ i3'=-2*i6+i3+2*i4, i6'=i4
  15: (0 >= 0 /\ -3+i1 >= 0 /\ -2+i4-i5 >= 0 /\ 3-i1 >= 0 /\ -1-i6+i4 >= 0) /\ i3'=-2+i3+2*i4-2*i5, i5'=-1+i4

Dependency graph:
9 -> 9, 9 -> 10, 9 -> 14, 9 -> 15
10 -> 9, 10 -> 10, 10 -> 11, 10 -> 13, 10 -> 14, 10 -> 15
11 -> 11, 11 -> 13
12 -> 9, 12 -> 10, 12 -> 11, 12 -> 13, 12 -> 14, 12 -> 15
13 -> 11
14 -> 9, 14 -> 10, 14 -> 11, 14 -> 13, 14 -> 15
15 -> 9, 15 -> 10, 15 -> 14

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	15[(0 >= 0 /\ -3+i1 >= 0 /\ -2+i4-i5 >= 0 /\ 3-i1 >= 0 /\ -1-i6+i4 >= 0)]
	
	Blocked

	{}
	{13[T], 14[T]}
	{9[T], 15[T]}
	
Step with 14

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	15[(0 >= 0 /\ -3+i1 >= 0 /\ -2+i4-i5 >= 0 /\ 3-i1 >= 0 /\ -1-i6+i4 >= 0)]
	14[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0)]
	
	Blocked

	{}
	{13[T], 14[T]}
	{9[T], 15[T]}
	{14[T]}
	
Backtrack

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	15[(0 >= 0 /\ -3+i1 >= 0 /\ -2+i4-i5 >= 0 /\ 3-i1 >= 0 /\ -1-i6+i4 >= 0)]
	
	Blocked

	{}
	{13[T], 14[T]}
	{9[T], 14[T], 15[T]}
	
Step with 10

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	15[(0 >= 0 /\ -3+i1 >= 0 /\ -2+i4-i5 >= 0 /\ 3-i1 >= 0 /\ -1-i6+i4 >= 0)]
	10[(-3+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0)]
	
	Blocked

	{}
	{13[T], 14[T]}
	{9[T], 14[T], 15[T]}
	{}
	
Covered

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	15[(0 >= 0 /\ -3+i1 >= 0 /\ -2+i4-i5 >= 0 /\ 3-i1 >= 0 /\ -1-i6+i4 >= 0)]
	
	Blocked

	{}
	{13[T], 14[T]}
	{9[T], 10[T], 14[T], 15[T]}
	
Backtrack

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{13[T], 14[T], 15[T]}
	
Step with 9

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	9[(-3+i1 == 0 /\ -2+i4-i5 >= 0 /\ -1-i6+i4 >= 0)]
	
	Blocked

	{}
	{13[T], 14[T], 15[T]}
	{}
	
Covered

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{9[T], 13[T], 14[T], 15[T]}
	
Step with 10

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	10[(-3+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1-i6+i4 >= 0)]
	
	Blocked

	{}
	{9[T], 13[T], 14[T], 15[T]}
	{}
	
Covered

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{9[T], 10[T], 13[T], 14[T], 15[T]}
	
Step with 11

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	11[(-3+i1 == 0 /\ -2+i4-i5 >= 0 /\ i6-i4 >= 0)]
	
	Blocked

	{}
	{9[T], 10[T], 13[T], 14[T], 15[T]}
	{}
	
Covered

	Trace

	12[(-1+i4-i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{9[T], 10[T], 11[T], 13[T], 14[T], 15[T]}
	
Backtrack

	Trace

	Blocked

	{12[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₄: l0(X₀, X₁, X₂) → l2(X₀, X₁, X₂)
  t₁: l1(X₀, X₁, X₂) → l2(X₀, 1+X₁, X₂) :|: 1+X₂ ≤ X₀
  t₂: l1(X₀, X₁, X₂) → l2(X₀, X₁, 1+X₂) :|: 1+X₂ ≤ X₀
  t₃: l1(X₀, X₁, X₂) → l2(X₀-1, X₁, X₂) :|: X₀ ≤ X₂
  t₀: l2(X₀, X₁, X₂) → l1(X₀, X₁, X₂) :|: 1+X₁ ≤ X₀


Preprocessing
  Found invariant 1+X₁ ≤ X₀ for location l1


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₄: l0(X₀, X₁, X₂) → l2(X₀, X₁, X₂)
  t₁: l1(X₀, X₁, X₂) → l2(X₀, 1+X₁, X₂) :|: 1+X₂ ≤ X₀ ∧ 1+X₁ ≤ X₀
  t₂: l1(X₀, X₁, X₂) → l2(X₀, X₁, 1+X₂) :|: 1+X₂ ≤ X₀ ∧ 1+X₁ ≤ X₀
  t₃: l1(X₀, X₁, X₂) → l2(X₀-1, X₁, X₂) :|: X₀ ≤ X₂ ∧ 1+X₁ ≤ X₀
  t₀: l2(X₀, X₁, X₂) → l1(X₀, X₁, X₂) :|: 1+X₁ ≤ X₀


MPRF for transition t₁: l1(X₀, X₁, X₂) → l2(X₀, 1+X₁, X₂) :|: 1+X₂ ≤ X₀ ∧ 1+X₁ ≤ X₀ of depth 1:
  new bound:
    X₀+X₁ {O(n)}

  MPRF:
    • l1: [X₀-X₁]
    • l2: [X₀-X₁]




MPRF for transition t₂: l1(X₀, X₁, X₂) → l2(X₀, X₁, 1+X₂) :|: 1+X₂ ≤ X₀ ∧ 1+X₁ ≤ X₀ of depth 1:
  new bound:
    X₀+X₂ {O(n)}

  MPRF:
    • l1: [X₀-X₂]
    • l2: [X₀-X₂]




MPRF for transition t₃: l1(X₀, X₁, X₂) → l2(X₀-1, X₁, X₂) :|: X₀ ≤ X₂ ∧ 1+X₁ ≤ X₀ of depth 1:
  new bound:
    X₀+X₁ {O(n)}

  MPRF:
    • l1: [X₀-X₁]
    • l2: [X₀-X₁]




  knowledge_propagation leads to new time bound 2⋅X₁+3⋅X₀+X₂+1 {O(n)} for transition t₀: l2(X₀, X₁, X₂) → l1(X₀, X₁, X₂) :|: 1+X₁ ≤ X₀


All Bounds
Timebounds
  Overall timebound:2⋅X₂+4⋅X₁+6⋅X₀+2 {O(n)}
    t₀: 2⋅X₁+3⋅X₀+X₂+1 {O(n)}
    t₁: X₀+X₁ {O(n)}
    t₂: X₀+X₂ {O(n)}
    t₃: X₀+X₁ {O(n)}
    t₄: 1 {O(1)}


Costbounds
  Overall costbound: 2⋅X₂+4⋅X₁+6⋅X₀+2 {O(n)}
    t₀: 2⋅X₁+3⋅X₀+X₂+1 {O(n)}
    t₁: X₀+X₁ {O(n)}
    t₂: X₀+X₂ {O(n)}
    t₃: X₀+X₁ {O(n)}
    t₄: 1 {O(1)}


Sizebounds
    t₀, X₀: 2⋅X₀+X₁ {O(n)}
    t₀, X₁: 2⋅X₁+X₀ {O(n)}
    t₀, X₂: 2⋅X₂+X₀ {O(n)}
    t₁, X₀: 2⋅X₀+X₁ {O(n)}
    t₁, X₁: 2⋅X₁+X₀ {O(n)}
    t₁, X₂: 2⋅X₂+X₀ {O(n)}
    t₂, X₀: 2⋅X₀+X₁ {O(n)}
    t₂, X₁: 2⋅X₁+X₀ {O(n)}
    t₂, X₂: 2⋅X₂+X₀ {O(n)}
    t₃, X₀: 2⋅X₀+X₁ {O(n)}
    t₃, X₁: 2⋅X₁+X₀ {O(n)}
    t₃, X₂: 2⋅X₂+X₀ {O(n)}
    t₄, X₀: X₀ {O(n)}
    t₄, X₁: X₁ {O(n)}
    t₄, X₂: X₂ {O(n)}

