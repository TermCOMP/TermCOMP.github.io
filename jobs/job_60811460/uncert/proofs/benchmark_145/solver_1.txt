WORST_CASE(INF,?)

# LoAT Proof:
WORST_CASE(INF,?)

WORST_CASE(Omega(n^1),?)
WORST_CASE(INF,?)
Initial ITS

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-2+i1 == 0 /\ i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=it2
   1: (-2+i1 == 0 /\ i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 0, 0 -> 1
1 -> 0, 1 -> 1
2 -> 0, 2 -> 1

Step with 2

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 1

	Trace

	2[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
	New rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0 /\ 1-it12+i5 >= 0) /\ i1'=i1, i3'=i3+it12, i5'=-it12+i5

		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		i5 >= 0 [0]: montonic decrease yields 1-it12+i5 >= 0
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, i5 >= 0 -> 1-it12+i5 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0 /\ 1-it12+i5 >= 0) /\ i1'=i1, i3'=i3+it12, i5'=-it12+i5
	New rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0 /\ 1-it12+i5 >= 0) /\ i3'=i3+it12, i5'=-it12+i5
	
	Instantiation

	Original rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0 /\ 1-it12+i5 >= 0) /\ i3'=i3+it12, i5'=-it12+i5
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0) /\ i3'=1+i3+i5, i5'=-1

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-2+i1 == 0 /\ i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=it2
   1: (-2+i1 == 0 /\ i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   3: (0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0) /\ i3'=1+i3+i5, i5'=-1

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 3
1 -> 0, 1 -> 1, 1 -> 3
2 -> 0, 2 -> 1, 2 -> 3
3 -> 0, 3 -> 1

	Trace

	2[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 3[T]}
	
Step with 0

	Trace

	2[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0)]
	0[(-2+i1 == 0 /\ i4 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 3[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=it2
	New rule:
	(-1+it28 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ 2-i1 >= 0 /\ 1+i4-it28 >= 0) /\ i1'=i1, i3'=i3+it28, i4'=i4-it28, i5'=it2

		-2+i1 >= 0 [0]: unchanged
		
		i4 >= 0 [0]: montonic decrease yields (i4 >= 0 /\ 1+i4-it28 >= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, i4 >= 0 -> (i4 >= 0 /\ 1+i4-it28 >= 0), 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+it28 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ 2-i1 >= 0 /\ 1+i4-it28 >= 0) /\ i1'=i1, i3'=i3+it28, i4'=i4-it28, i5'=it2
	New rule:
	(-1+it28 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ 2-i1 >= 0 /\ 1+i4-it28 >= 0) /\ i3'=i3+it28, i4'=i4-it28, i5'=it2
	
	Instantiation

	Original rule:
	(-1+it28 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ 2-i1 >= 0 /\ 1+i4-it28 >= 0) /\ i3'=i3+it28, i4'=i4-it28, i5'=it2
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ 2-i1 >= 0) /\ i3'=1+i3+i4, i4'=-1, i5'=it2

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-2+i1 == 0 /\ i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=it2
   1: (-2+i1 == 0 /\ i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   3: (0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0) /\ i3'=1+i3+i5, i5'=-1
   4: (0 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ 2-i1 >= 0) /\ i3'=1+i3+i4, i4'=-1, i5'=it2

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 3, 0 -> 4
1 -> 0, 1 -> 1, 1 -> 3, 1 -> 4
2 -> 0, 2 -> 1, 2 -> 3, 2 -> 4
3 -> 0, 3 -> 1, 3 -> 4
4 -> 0, 4 -> 1, 4 -> 3

	Trace

	2[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 3[T]}
	{0[T], 4[T]}
	
Step with 3

	Trace

	2[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ 2-i1 >= 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 3[T]}
	{0[T], 4[T]}
	{3[T]}
	
Unbounded

Backtrack

	Trace

	2[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 3[T]}
	{0[T], 3[T], 4[T]}
	
Step with 1

	Trace

	2[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ 2-i1 >= 0)]
	1[(-2+i1 == 0 /\ i5 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 3[T]}
	{0[T], 3[T], 4[T]}
	{}
	
Covered

	Trace

	2[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 3[T]}
	{0[T], 1[T], 3[T], 4[T]}
	
Backtrack

	Trace

	2[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 3[T], 4[T]}
	
Step with 0

	Trace

	2[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0)]
	0[(-2+i1 == 0 /\ i4 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 3[T], 4[T]}
	{}
	
Covered

	Trace

	2[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0)]
	
	Blocked

	{}
	{}
	{0[T], 1[T], 3[T], 4[T]}
	
Backtrack

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{3[T]}
	
Step with 0

	Trace

	2[(-1+i1 == 0)]
	0[(-2+i1 == 0 /\ i4 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{}
	
Covered

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 3[T]}
	
Step with 1

	Trace

	2[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ i5 >= 0)]
	
	Blocked

	{}
	{0[T], 3[T]}
	{}
	
Covered

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 1[T], 3[T]}
	
Step with 4

	Trace

	2[(-1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{0[T], 1[T], 3[T]}
	{4[T]}
	
Step with 3

	Trace

	2[(-1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ 2-i1 >= 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0)]
	
	Blocked

	{}
	{0[T], 1[T], 3[T]}
	{4[T]}
	{3[T]}
	
Backtrack

	Trace

	2[(-1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{0[T], 1[T], 3[T]}
	{3[T], 4[T]}
	
Step with 1

	Trace

	2[(-1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ 2-i1 >= 0)]
	1[(-2+i1 == 0 /\ i5 >= 0)]
	
	Blocked

	{}
	{0[T], 1[T], 3[T]}
	{0[T], 3[T], 4[T]}
	{}
	
Covered

	Trace

	2[(-1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{0[T], 1[T], 3[T]}
	{0[T], 1[T], 3[T], 4[T]}
	
Backtrack

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 1[T], 3[T], 4[T]}
	
Backtrack

	Trace

	Blocked

	{2[T]}
	
Accept

Unbounded


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  C
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₂: l0(X₀, X₁) → l1(X₀, X₁)
  t₀: l1(X₀, X₁) → l1(X₀-1, C) :|: 0 ≤ X₀
  t₁: l1(X₀, X₁) → l1(X₀, X₁-1) :|: 0 ≤ X₁


Preprocessing
Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  C
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₂: l0(X₀, X₁) → l1(X₀, X₁)
  t₀: l1(X₀, X₁) → l1(X₀-1, C) :|: 0 ≤ X₀
  t₁: l1(X₀, X₁) → l1(X₀, X₁-1) :|: 0 ≤ X₁


MPRF for transition t₀: l1(X₀, X₁) → l1(X₀-1, C) :|: 0 ≤ X₀ of depth 1:
  new bound:
    X₀+1 {O(n)}

  MPRF:
    • l1: [1+X₀]




  Found invariant 0 ≤ 1+X₀ for location l1_v2


  Found invariant 0 ≤ 1+X₁ ∧ 0 ≤ 2+X₀+X₁ ∧ 0 ≤ 1+X₀ for location l1_v3


  Found invariant 0 ≤ 1+X₁ for location l1_v1


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₀: X₀+1 {O(n)}
    t₁: inf {Infinity}
    t₂: 1 {O(1)}


Costbounds
  Overall costbound: inf {Infinity}
    t₀: X₀+1 {O(n)}
    t₁: inf {Infinity}
    t₂: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀+2 {O(n)}
    t₁, X₀: X₀+2 {O(n)}
    t₂, X₀: X₀ {O(n)}
    t₂, X₁: X₁ {O(n)}

