NO

# LoAT Proof:
NO

NO

Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f6 -> 2
f16 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=1, i5'=i6
   1: (-2-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1-i6+it2^2 >= 0) /\ i1'=2, i3'=1+i3, i5'=it2, i7'=it2
   2: (-2-i4+i5 >= 0 /\ -2+i1 == 0 /\ i6-it3^2 >= 0) /\ i1'=2, i3'=1+i3, i4'=it3, i7'=it3
   3: (-2+i1 == 0 /\ 1+i4-i5 >= 0) /\ i1'=3, i3'=1+i3

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3
1 -> 1, 1 -> 2, 1 -> 3
2 -> 1, 2 -> 2, 2 -> 3

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	3[(-2+i1 == 0 /\ 1+i4-i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{3[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-2-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1-i6+it2^2 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-2-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1-i6+it2^2 >= 0) /\ i1'=2, i3'=1+i3, i5'=it2, i7'=it2
	New rule:
	(-2-i4+i5 >= 0 /\ -2+i1 >= 0 /\ i5-it2 <= 0 /\ 2-i1 >= 0 /\ -1-i6+it2^2 >= 0) /\ i1'=0

		-2-i4+i5 >= 0 [0]: eventual decrease yields (-2-i4+i5 >= 0 /\ -2-i4+it2 >= 0)
		
		-2-i4+i5 >= 0 [1]: eventual increase yields (-2-i4+i5 >= 0 /\ i5-it2 <= 0)
		
		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		-1-i6+it2^2 >= 0 [0]: unchanged
		
		Replacement map: {-2-i4+i5 >= 0 -> (-2-i4+i5 >= 0 /\ i5-it2 <= 0), -2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -1-i6+it2^2 >= 0 -> -1-i6+it2^2 >= 0}

	Loop Acceleration

	Original rule:
	(-2-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1-i6+it2^2 >= 0) /\ i1'=2, i3'=1+i3, i5'=it2, i7'=it2
	New rule:
	(-2-i4+i5 >= 0 /\ -2+i1 >= 0 /\ -2-i4+it2 >= 0 /\ 2-i1 >= 0 /\ -1+it25 >= 0 /\ -1-i6+it2^2 >= 0) /\ i1'=i1, i3'=it25+i3, i5'=it2, i7'=it2

		-2-i4+i5 >= 0 [0]: eventual decrease yields (-2-i4+i5 >= 0 /\ -2-i4+it2 >= 0)
		
		-2-i4+i5 >= 0 [1]: eventual increase yields (-2-i4+i5 >= 0 /\ i5-it2 <= 0)
		
		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		-1-i6+it2^2 >= 0 [0]: unchanged
		
		Replacement map: {-2-i4+i5 >= 0 -> (-2-i4+i5 >= 0 /\ -2-i4+it2 >= 0), -2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -1-i6+it2^2 >= 0 -> -1-i6+it2^2 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2-i4+i5 >= 0 /\ -2+i1 >= 0 /\ -2-i4+it2 >= 0 /\ 2-i1 >= 0 /\ -1+it25 >= 0 /\ -1-i6+it2^2 >= 0) /\ i1'=i1, i3'=it25+i3, i5'=it2, i7'=it2
	New rule:
	(-2-i4+i5 >= 0 /\ -2+i1 >= 0 /\ -2-i4+it2 >= 0 /\ 2-i1 >= 0 /\ -1+it25 >= 0 /\ -1-i6+it2^2 >= 0) /\ i3'=it25+i3, i5'=it2, i7'=it2

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f6 -> 2
f16 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=1, i5'=i6
   1: (-2-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1-i6+it2^2 >= 0) /\ i1'=2, i3'=1+i3, i5'=it2, i7'=it2
   2: (-2-i4+i5 >= 0 /\ -2+i1 == 0 /\ i6-it3^2 >= 0) /\ i1'=2, i3'=1+i3, i4'=it3, i7'=it3
   3: (-2+i1 == 0 /\ 1+i4-i5 >= 0) /\ i1'=3, i3'=1+i3
   4: (-2-i4+i5 >= 0 /\ -2+i1 >= 0 /\ i5-it2 <= 0 /\ 2-i1 >= 0 /\ -1-i6+it2^2 >= 0) /\ i1'=0
   5: (-2-i4+i5 >= 0 /\ -2+i1 >= 0 /\ -2-i4+it2 >= 0 /\ 2-i1 >= 0 /\ -1+it25 >= 0 /\ -1-i6+it2^2 >= 0) /\ i3'=it25+i3, i5'=it2, i7'=it2

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3, 0 -> 4, 0 -> 5
1 -> 1, 1 -> 2, 1 -> 3, 1 -> 4, 1 -> 5
2 -> 1, 2 -> 2, 2 -> 3, 2 -> 4, 2 -> 5
5 -> 1, 5 -> 2, 5 -> 3, 5 -> 4

Step with 4

	Trace

	0[(-1+i1 == 0)]
	4[(-2-i4+i5 >= 0 /\ -2+i1 >= 0 /\ i5-it2 <= 0 /\ 2-i1 >= 0 /\ -1-i6+it2^2 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{4[T]}
	
Refute

	Counterexample

	(i1=1, i3=-1, i6=3, i7=0)
	-0-> (i1=2, i3=0, i4=1, i5=3, i6=3, i7=0 )
	-4-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃
  Temp_Vars:  E
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂, X₃) → l1(1, X₂, X₂, X₃)
  t₁: l1(X₀, X₁, X₂, X₃) → l1(X₀, E, X₂, E) :|: 1+X₂ ≤ (E)² ∧ 2+X₀ ≤ X₁
  t₂: l1(X₀, X₁, X₂, X₃) → l1(E, X₁, X₂, E) :|: 2+X₀ ≤ X₁ ∧ (E)² ≤ X₂
  t₃: l1(X₀, X₁, X₂, X₃) → l2(X₀, X₁, X₂, X₃) :|: X₁ ≤ 1+X₀


Preprocessing
  Eliminate variables [X₃] that do not contribute to the problem


  Found invariant X₁ ≤ 1+X₀ for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  E
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₄: l0(X₀, X₁, X₂) → l1(1, X₂, X₂)
  t₅: l1(X₀, X₁, X₂) → l1(X₀, E, X₂) :|: 1+X₂ ≤ (E)² ∧ 2+X₀ ≤ X₁
  t₆: l1(X₀, X₁, X₂) → l1(E, X₁, X₂) :|: 2+X₀ ≤ X₁ ∧ (E)² ≤ X₂
  t₇: l1(X₀, X₁, X₂) → l2(X₀, X₁, X₂) :|: X₁ ≤ 1+X₀


  Found invariant X₁ ≤ 1+X₀ for location l2


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₄: 1 {O(1)}
    t₅: inf {Infinity}
    t₆: inf {Infinity}
    t₇: 1 {O(1)}


Costbounds
  Overall costbound: inf {Infinity}
    t₄: 1 {O(1)}
    t₅: inf {Infinity}
    t₆: inf {Infinity}
    t₇: 1 {O(1)}


Sizebounds
    t₄, X₀: 1 {O(1)}
    t₄, X₁: X₂ {O(n)}
    t₄, X₂: X₂ {O(n)}
    t₅, X₂: X₂ {O(n)}
    t₆, X₂: X₂ {O(n)}
    t₇, X₂: 3⋅X₂ {O(n)}

