WORST_CASE(?,O(1))

# LoAT Proof:
Initial ITS

Start location: evalndloopstart

Location map:
LoAT_sink -> 0
evalndloopstart -> 1
evalndloopentryin -> 2
evalndloopbbin -> 3
evalndloopreturnin -> 4
evalndloopstop -> 5

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: -2+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=0
   2: (-3+i1 == 0 /\ 2-it2+i4 >= 0 /\ -1+it2-i4 >= 0 /\ 9-it2 >= 0) /\ i1'=3, i3'=1+i3, i4'=it2
   3: (-3+i1 == 0 /\ -3+it3-i4 >= 0) /\ i1'=4, i3'=1+i3
   4: (-3+i1 == 0 /\ i4-it4 >= 0) /\ i1'=4, i3'=1+i3
   5: (-3+i1 == 0 /\ -10+it5 >= 0) /\ i1'=4, i3'=1+i3
   6: -4+i1 == 0 /\ i1'=5, i3'=1+i3

Dependency graph:
0 -> 1
1 -> 2, 1 -> 3, 1 -> 4, 1 -> 5
2 -> 2, 2 -> 3, 2 -> 4, 2 -> 5
3 -> 6
4 -> 6
5 -> 6

Chained Linear Paths

	Applied Chaining

	First rule:
	-1+i1 == 0 /\ i1'=2, i3'=1+i3
	Second rule:
	-2+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=0
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=0
	
	Applied Deletion

	Removed the following rules: 0, 1
	
	Applied Chaining

	First rule:
	(-3+i1 == 0 /\ -3+it3-i4 >= 0) /\ i1'=4, i3'=1+i3
	Second rule:
	-4+i1 == 0 /\ i1'=5, i3'=1+i3
	New rule:
	(0 == 0 /\ -3+i1 == 0 /\ -3+it3-i4 >= 0) /\ i1'=5, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 3
	
	Applied Chaining

	First rule:
	(-3+i1 == 0 /\ i4-it4 >= 0) /\ i1'=4, i3'=1+i3
	Second rule:
	-4+i1 == 0 /\ i1'=5, i3'=1+i3
	New rule:
	(0 == 0 /\ -3+i1 == 0 /\ i4-it4 >= 0) /\ i1'=5, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 4
	
	Applied Chaining

	First rule:
	(-3+i1 == 0 /\ -10+it5 >= 0) /\ i1'=4, i3'=1+i3
	Second rule:
	-4+i1 == 0 /\ i1'=5, i3'=1+i3
	New rule:
	(0 == 0 /\ -3+i1 == 0 /\ -10+it5 >= 0) /\ i1'=5, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 5, 6

Start location: evalndloopstart

Location map:
LoAT_sink -> 0
evalndloopstart -> 1
evalndloopentryin -> 2
evalndloopbbin -> 3
evalndloopreturnin -> 4
evalndloopstop -> 5

Rules:
   2: (-3+i1 == 0 /\ 2-it2+i4 >= 0 /\ -1+it2-i4 >= 0 /\ 9-it2 >= 0) /\ i1'=3, i3'=1+i3, i4'=it2
   7: (0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=0
   8: (0 == 0 /\ -3+i1 == 0 /\ -3+it3-i4 >= 0) /\ i1'=5, i3'=2+i3
   9: (0 == 0 /\ -3+i1 == 0 /\ i4-it4 >= 0) /\ i1'=5, i3'=2+i3
  10: (0 == 0 /\ -3+i1 == 0 /\ -10+it5 >= 0) /\ i1'=5, i3'=2+i3

Dependency graph:
2 -> 2, 2 -> 8, 2 -> 9, 2 -> 10
7 -> 2, 7 -> 8, 7 -> 9, 7 -> 10

Preprocessed Transitions

	Simplified Guard

	Original rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=0
	New rule:
	-1+i1 == 0 /\ i1'=3, i3'=2+i3, i4'=0
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -3+i1 == 0 /\ -3+it3-i4 >= 0) /\ i1'=5, i3'=2+i3
	New rule:
	(-3+i1 == 0 /\ -3+it3-i4 >= 0) /\ i1'=5, i3'=2+i3
	
	Eliminated Temporary Variables

	Original rule:
	(-3+i1 == 0 /\ -3+it3-i4 >= 0) /\ i1'=5, i3'=2+i3
	New rule:
	(-3+i1 == 0) /\ i1'=5, i3'=2+i3
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -3+i1 == 0 /\ i4-it4 >= 0) /\ i1'=5, i3'=2+i3
	New rule:
	(-3+i1 == 0 /\ i4-it4 >= 0) /\ i1'=5, i3'=2+i3
	
	Eliminated Temporary Variables

	Original rule:
	(-3+i1 == 0 /\ i4-it4 >= 0) /\ i1'=5, i3'=2+i3
	New rule:
	(-3+i1 == 0) /\ i1'=5, i3'=2+i3
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -3+i1 == 0 /\ -10+it5 >= 0) /\ i1'=5, i3'=2+i3
	New rule:
	(-3+i1 == 0 /\ -10+it5 >= 0) /\ i1'=5, i3'=2+i3
	
	Eliminated Temporary Variables

	Original rule:
	(-3+i1 == 0 /\ -10+it5 >= 0) /\ i1'=5, i3'=2+i3
	New rule:
	(-3+i1 == 0) /\ i1'=5, i3'=2+i3

Start location: evalndloopstart

Location map:
LoAT_sink -> 0
evalndloopstart -> 1
evalndloopentryin -> 2
evalndloopbbin -> 3
evalndloopreturnin -> 4
evalndloopstop -> 5

Rules:
   2: (-3+i1 == 0 /\ 2-it2+i4 >= 0 /\ -1+it2-i4 >= 0 /\ 9-it2 >= 0) /\ i1'=3, i3'=1+i3, i4'=it2
  11: -1+i1 == 0 /\ i1'=3, i3'=2+i3, i4'=0
  12: (-3+i1 == 0) /\ i1'=5, i3'=2+i3
  13: (-3+i1 == 0) /\ i1'=5, i3'=2+i3
  14: (-3+i1 == 0) /\ i1'=5, i3'=2+i3

Dependency graph:
2 -> 2, 2 -> 12, 2 -> 13, 2 -> 14
11 -> 2, 11 -> 12, 11 -> 13, 11 -> 14

Step with 11

	Trace

	11[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 13

	Trace

	11[(-1+i1 == 0)]
	13[(-3+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	11[(-1+i1 == 0)]
	
	Blocked

	{}
	{13[T]}
	
Step with 2

	Trace

	11[(-1+i1 == 0)]
	2[(-3+i1 == 0 /\ 2-it2+i4 >= 0 /\ -1+it2-i4 >= 0 /\ 9-it2 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ 2-it2+i4 >= 0 /\ -1+it2-i4 >= 0 /\ 9-it2 >= 0) /\ i1'=3, i3'=1+i3, i4'=it2
	New rule:
	(-3+i1 == 0 /\ 2-it2+i4 >= 0 /\ -1+it2-i4 >= 0 /\ 9-it2 >= 0) /\ i1'=i1, i3'=1+i3, i4'=it2

		rule cannot be iterated more than once

	Removed Trivial Updates

	Original rule:
	(-3+i1 == 0 /\ 2-it2+i4 >= 0 /\ -1+it2-i4 >= 0 /\ 9-it2 >= 0) /\ i1'=i1, i3'=1+i3, i4'=it2
	New rule:
	(-3+i1 == 0 /\ 2-it2+i4 >= 0 /\ -1+it2-i4 >= 0 /\ 9-it2 >= 0) /\ i3'=1+i3, i4'=it2

Start location: evalndloopstart

Location map:
LoAT_sink -> 0
evalndloopstart -> 1
evalndloopentryin -> 2
evalndloopbbin -> 3
evalndloopreturnin -> 4
evalndloopstop -> 5

Rules:
   2: (-3+i1 == 0 /\ 2-it2+i4 >= 0 /\ -1+it2-i4 >= 0 /\ 9-it2 >= 0) /\ i1'=3, i3'=1+i3, i4'=it2
  11: -1+i1 == 0 /\ i1'=3, i3'=2+i3, i4'=0
  12: (-3+i1 == 0) /\ i1'=5, i3'=2+i3
  13: (-3+i1 == 0) /\ i1'=5, i3'=2+i3
  14: (-3+i1 == 0) /\ i1'=5, i3'=2+i3
  15: (-3+i1 == 0 /\ 2-it2+i4 >= 0 /\ -1+it2-i4 >= 0 /\ 9-it2 >= 0) /\ i3'=1+i3, i4'=it2

Dependency graph:
2 -> 2, 2 -> 12, 2 -> 13, 2 -> 14, 2 -> 15
11 -> 2, 11 -> 12, 11 -> 13, 11 -> 14, 11 -> 15
15 -> 2, 15 -> 12, 15 -> 13, 15 -> 14

	Trace

	11[(-1+i1 == 0)]
	15[(-3+i1 == 0 /\ 2-it2+i4 >= 0 /\ -1+it2-i4 >= 0 /\ 9-it2 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{2[T], 15[T]}
	
Step with 13

	Trace

	11[(-1+i1 == 0)]
	15[(-3+i1 == 0 /\ 2-it2+i4 >= 0 /\ -1+it2-i4 >= 0 /\ 9-it2 >= 0)]
	13[(-3+i1 == 0)]
	
	Blocked

	{}
	{13[T]}
	{2[T], 15[T]}
	{}
	
Backtrack

	Trace

	11[(-1+i1 == 0)]
	15[(-3+i1 == 0 /\ 2-it2+i4 >= 0 /\ -1+it2-i4 >= 0 /\ 9-it2 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{2[T], 13[T], 15[T]}
	
Step with 14

	Trace

	11[(-1+i1 == 0)]
	15[(-3+i1 == 0 /\ 2-it2+i4 >= 0 /\ -1+it2-i4 >= 0 /\ 9-it2 >= 0)]
	14[(-3+i1 == 0)]
	
	Blocked

	{}
	{13[T]}
	{2[T], 13[T], 15[T]}
	{}
	
Backtrack

	Trace

	11[(-1+i1 == 0)]
	15[(-3+i1 == 0 /\ 2-it2+i4 >= 0 /\ -1+it2-i4 >= 0 /\ 9-it2 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{2[T], 13[T], 14[T], 15[T]}
	
Step with 12

	Trace

	11[(-1+i1 == 0)]
	15[(-3+i1 == 0 /\ 2-it2+i4 >= 0 /\ -1+it2-i4 >= 0 /\ 9-it2 >= 0)]
	12[(-3+i1 == 0)]
	
	Blocked

	{}
	{13[T]}
	{2[T], 13[T], 14[T], 15[T]}
	{}
	
Backtrack

	Trace

	11[(-1+i1 == 0)]
	15[(-3+i1 == 0 /\ 2-it2+i4 >= 0 /\ -1+it2-i4 >= 0 /\ 9-it2 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{2[T], 12[T], 13[T], 14[T], 15[T]}
	
Backtrack

	Trace

	11[(-1+i1 == 0)]
	
	Blocked

	{}
	{13[T], 15[T]}
	
Step with 12

	Trace

	11[(-1+i1 == 0)]
	12[(-3+i1 == 0)]
	
	Blocked

	{}
	{13[T], 15[T]}
	{}
	
Backtrack

	Trace

	11[(-1+i1 == 0)]
	
	Blocked

	{}
	{12[T], 13[T], 15[T]}
	
Step with 2

	Trace

	11[(-1+i1 == 0)]
	2[(-3+i1 == 0 /\ 2-it2+i4 >= 0 /\ -1+it2-i4 >= 0 /\ 9-it2 >= 0)]
	
	Blocked

	{}
	{12[T], 13[T], 15[T]}
	{}
	
Covered

	Trace

	11[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T], 12[T], 13[T], 15[T]}
	
Step with 14

	Trace

	11[(-1+i1 == 0)]
	14[(-3+i1 == 0)]
	
	Blocked

	{}
	{2[T], 12[T], 13[T], 15[T]}
	{}
	
Backtrack

	Trace

	11[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T], 12[T], 13[T], 14[T], 15[T]}
	
Backtrack

	Trace

	Blocked

	{11[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  B
  Locations:  l0, l1, l2, l3, l4
  Return Locations:  
  Transitions:
  t₀: l0(X₀) → l3(X₀)
  t₂: l1(X₀) → l1(B) :|: B ≤ 9 ∧ B ≤ 2+X₀ ∧ 1+X₀ ≤ B
  t₃: l1(X₀) → l2(X₀) :|: 3+X₀ ≤ B
  t₄: l1(X₀) → l2(X₀) :|: B ≤ X₀
  t₅: l1(X₀) → l2(X₀) :|: 10 ≤ B
  t₆: l2(X₀) → l4(X₀)
  t₁: l3(X₀) → l1(0)


Preprocessing
  Found invariant X₀ ≤ 9 ∧ 0 ≤ X₀ for location l2


  Found invariant X₀ ≤ 9 ∧ 0 ≤ X₀ for location l1


  Found invariant X₀ ≤ 9 ∧ 0 ≤ X₀ for location l4


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  B
  Locations:  l0, l1, l2, l3, l4
  Return Locations:  
  Transitions:
  t₀: l0(X₀) → l3(X₀)
  t₂: l1(X₀) → l1(B) :|: B ≤ 9 ∧ B ≤ 2+X₀ ∧ 1+X₀ ≤ B ∧ X₀ ≤ 9 ∧ 0 ≤ X₀
  t₃: l1(X₀) → l2(X₀) :|: 3+X₀ ≤ B ∧ X₀ ≤ 9 ∧ 0 ≤ X₀
  t₄: l1(X₀) → l2(X₀) :|: B ≤ X₀ ∧ X₀ ≤ 9 ∧ 0 ≤ X₀
  t₅: l1(X₀) → l2(X₀) :|: 10 ≤ B ∧ X₀ ≤ 9 ∧ 0 ≤ X₀
  t₆: l2(X₀) → l4(X₀) :|: X₀ ≤ 9 ∧ 0 ≤ X₀
  t₁: l3(X₀) → l1(0)


MPRF for transition t₂: l1(X₀) → l1(B) :|: B ≤ 9 ∧ B ≤ 2+X₀ ∧ 1+X₀ ≤ B ∧ X₀ ≤ 9 ∧ 0 ≤ X₀ of depth 1:
  new bound:
    10 {O(1)}

  MPRF:
    • l1: [10-X₀]




All Bounds
Timebounds
  Overall timebound:16 {O(1)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 10 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: 1 {O(1)}


Costbounds
  Overall costbound: 16 {O(1)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 10 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₁, X₀: 0 {O(1)}
    t₂, X₀: 9 {O(1)}
    t₃, X₀: 9 {O(1)}
    t₄, X₀: 9 {O(1)}
    t₅, X₀: 9 {O(1)}
    t₆, X₀: 9 {O(1)}

