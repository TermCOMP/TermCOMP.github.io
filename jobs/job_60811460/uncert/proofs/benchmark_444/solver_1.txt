NO

# LoAT Proof:
NO

NO

Initial ITS

Start location: f5

Location map:
LoAT_sink -> 0
f5 -> 1
f4 -> 2
f6 -> 3

Rules:
   0: (-2+i1 == 0 /\ i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=i4-i5
   1: (-2+i1 == 0 /\ -1-i4 >= 0) /\ i1'=3, i3'=1+i3, i6'=0, i7'=0, i8'=0, i9'=0, i10'=0
   2: (-1-i5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3
   3: (i5 >= 0 /\ -1+i1 == 0) /\ i1'=3, i3'=1+i3, i6'=0, i7'=0, i8'=0, i9'=0, i10'=0

Dependency graph:
0 -> 0, 0 -> 1
2 -> 0, 2 -> 1

Step with 3

	Trace

	3[(i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Backtrack

	Trace

	Blocked

	{3[T]}
	
Step with 2

	Trace

	2[(-1-i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{3[T]}
	{}
	
Step with 0

	Trace

	2[(-1-i5 >= 0 /\ -1+i1 == 0)]
	0[(-2+i1 == 0 /\ i4 >= 0)]
	
	Blocked

	{3[T]}
	{}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-2+i1 == 0 /\ i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=i4-i5
	New rule:
	(-2+i1 >= 0 /\ i4 >= 0 /\ 2-i1 >= 0 /\ i5 <= 0) /\ i1'=0

		-2+i1 >= 0 [0]: unchanged
		
		i4 >= 0 [0]: eventual decrease yields (i4 >= 0 /\ i4-(-1+it28)*i5 >= 0)
		
		i4 >= 0 [1]: eventual increase yields (i4 >= 0 /\ i5 <= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, i4 >= 0 -> (i4 >= 0 /\ i5 <= 0), 2-i1 >= 0 -> 2-i1 >= 0}

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=i4-i5
	New rule:
	(-1+it28 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ i4-(-1+it28)*i5 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it28, i4'=i4-i5*it28

		-2+i1 >= 0 [0]: unchanged
		
		i4 >= 0 [0]: eventual decrease yields (i4 >= 0 /\ i4-(-1+it28)*i5 >= 0)
		
		i4 >= 0 [1]: eventual increase yields (i4 >= 0 /\ i5 <= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, i4 >= 0 -> (i4 >= 0 /\ i4-(-1+it28)*i5 >= 0), 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+it28 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ i4-(-1+it28)*i5 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it28, i4'=i4-i5*it28
	New rule:
	(-1+it28 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ i4-(-1+it28)*i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it28, i4'=i4-i5*it28

Start location: f5

Location map:
LoAT_sink -> 0
f5 -> 1
f4 -> 2
f6 -> 3

Rules:
   0: (-2+i1 == 0 /\ i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=i4-i5
   1: (-2+i1 == 0 /\ -1-i4 >= 0) /\ i1'=3, i3'=1+i3, i6'=0, i7'=0, i8'=0, i9'=0, i10'=0
   2: (-1-i5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3
   3: (i5 >= 0 /\ -1+i1 == 0) /\ i1'=3, i3'=1+i3, i6'=0, i7'=0, i8'=0, i9'=0, i10'=0
   4: (-2+i1 >= 0 /\ i4 >= 0 /\ 2-i1 >= 0 /\ i5 <= 0) /\ i1'=0
   5: (-1+it28 >= 0 /\ -2+i1 >= 0 /\ i4 >= 0 /\ i4-(-1+it28)*i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it28, i4'=i4-i5*it28

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 4, 0 -> 5
2 -> 0, 2 -> 1, 2 -> 4, 2 -> 5
5 -> 0, 5 -> 1, 5 -> 4

Step with 4

	Trace

	2[(-1-i5 >= 0 /\ -1+i1 == 0)]
	4[(-2+i1 >= 0 /\ i4 >= 0 /\ 2-i1 >= 0 /\ i5 <= 0)]
	
	Blocked

	{3[T]}
	{}
	{4[T]}
	
Refute

	Counterexample

	(i1=1, i3=-1, i4=0, i5=-1, i6=0, i7=0, i8=0, i9=0, i10=0)
	-2-> (i1=2, i3=0, i4=0, i5=-1, i6=0, i7=0, i8=0, i9=0, i10=0 )
	-4-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃, X₄, X₅, X₆
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₂: l0(X₀, X₁, X₂, X₃, X₄, X₅, X₆) → l1(X₀, X₁, X₂, X₃, X₄, X₅, X₆) :|: 1+X₁ ≤ 0
  t₃: l0(X₀, X₁, X₂, X₃, X₄, X₅, X₆) → l2(X₀, X₁, 0, 0, 0, 0, 0) :|: 0 ≤ X₁
  t₀: l1(X₀, X₁, X₂, X₃, X₄, X₅, X₆) → l1(X₀-X₁, X₁, X₂, X₃, X₄, X₅, X₆) :|: 0 ≤ X₀
  t₁: l1(X₀, X₁, X₂, X₃, X₄, X₅, X₆) → l2(X₀, X₁, 0, 0, 0, 0, 0) :|: 1+X₀ ≤ 0


Preprocessing
  Eliminate variables [X₂; X₃; X₄; X₅; X₆] that do not contribute to the problem


  Found invariant 1+X₁ ≤ 0 for location l1


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₄: l0(X₀, X₁) → l1(X₀, X₁) :|: 1+X₁ ≤ 0
  t₅: l0(X₀, X₁) → l2(X₀, X₁) :|: 0 ≤ X₁
  t₆: l1(X₀, X₁) → l1(X₀-X₁, X₁) :|: 0 ≤ X₀ ∧ 1+X₁ ≤ 0
  t₇: l1(X₀, X₁) → l2(X₀, X₁) :|: 1+X₀ ≤ 0 ∧ 1+X₁ ≤ 0


  Found invariant 1+X₁ ≤ 0 for location l1


  Found invariant 1+X₁ ≤ 0 ∧ 2+X₁ ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 1 ≤ X₀ for location l1_v1


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: inf {Infinity}
    t₇: 1 {O(1)}


Costbounds
  Overall costbound: inf {Infinity}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: inf {Infinity}
    t₇: 1 {O(1)}


Sizebounds
    t₄, X₀: X₀ {O(n)}
    t₄, X₁: X₁ {O(n)}
    t₅, X₀: X₀ {O(n)}
    t₅, X₁: X₁ {O(n)}
    t₆, X₁: X₁ {O(n)}
    t₇, X₀: X₀ {O(n)}
    t₇, X₁: X₁ {O(n)}

