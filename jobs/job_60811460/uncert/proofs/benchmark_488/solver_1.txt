WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: f2

Location map:
LoAT_sink -> 0
f2 -> 1
f300 -> 2
f1 -> 3

Rules:
   0: (-2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   1: (-2+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=1+i3, i6'=it2
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 0, 0 -> 1
2 -> 0, 2 -> 1

Step with 2

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 1

	Trace

	2[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T]}
	
Step with 0

	Trace

	2[(-1+i1 == 0)]
	0[(-2+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{1[T]}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
	New rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it19 >= 0 /\ -it19-i4+i5 >= 0) /\ i1'=i1, i3'=it19+i3, i4'=it19+i4

		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		-1-i4+i5 >= 0 [0]: montonic decrease yields -it19-i4+i5 >= 0
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -1-i4+i5 >= 0 -> -it19-i4+i5 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it19 >= 0 /\ -it19-i4+i5 >= 0) /\ i1'=i1, i3'=it19+i3, i4'=it19+i4
	New rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it19 >= 0 /\ -it19-i4+i5 >= 0) /\ i3'=it19+i3, i4'=it19+i4
	
	Instantiation

	Original rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it19 >= 0 /\ -it19-i4+i5 >= 0) /\ i3'=it19+i3, i4'=it19+i4
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-i4+i5, i4'=i5

Start location: f2

Location map:
LoAT_sink -> 0
f2 -> 1
f300 -> 2
f1 -> 3

Rules:
   0: (-2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   1: (-2+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=1+i3, i6'=it2
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   3: (0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-i4+i5, i4'=i5

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 3
2 -> 0, 2 -> 1, 2 -> 3
3 -> 0, 3 -> 1

	Trace

	2[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{1[T]}
	{0[T], 3[T]}
	
Step with 1

	Trace

	2[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0)]
	1[(-2+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{1[T]}
	{0[T], 3[T]}
	{}
	
Backtrack

	Trace

	2[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{1[T]}
	{0[T], 1[T], 3[T]}
	
Backtrack

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 3[T]}
	
Step with 0

	Trace

	2[(-1+i1 == 0)]
	0[(-2+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{1[T], 3[T]}
	{}
	
Covered

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 1[T], 3[T]}
	
Backtrack

	Trace

	Blocked

	{2[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  D
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₂: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₀: l1(X₀, X₁, X₂) → l1(1+X₀, X₁, X₂) :|: 1+X₀ ≤ X₁
  t₁: l1(X₀, X₁, X₂) → l2(X₀, X₁, D) :|: X₁ ≤ X₀


Preprocessing
  Eliminate variables [D; X₂] that do not contribute to the problem


  Found invariant X₁ ≤ X₀ for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₃: l0(X₀, X₁) → l1(X₀, X₁)
  t₄: l1(X₀, X₁) → l1(1+X₀, X₁) :|: 1+X₀ ≤ X₁
  t₅: l1(X₀, X₁) → l2(X₀, X₁) :|: X₁ ≤ X₀


MPRF for transition t₄: l1(X₀, X₁) → l1(1+X₀, X₁) :|: 1+X₀ ≤ X₁ of depth 1:
  new bound:
    X₀+X₁ {O(n)}

  MPRF:
    • l1: [X₁-X₀]




All Bounds
Timebounds
  Overall timebound:X₀+X₁+2 {O(n)}
    t₃: 1 {O(1)}
    t₄: X₀+X₁ {O(n)}
    t₅: 1 {O(1)}


Costbounds
  Overall costbound: X₀+X₁+2 {O(n)}
    t₃: 1 {O(1)}
    t₄: X₀+X₁ {O(n)}
    t₅: 1 {O(1)}


Sizebounds
    t₃, X₀: X₀ {O(n)}
    t₃, X₁: X₁ {O(n)}
    t₄, X₀: 2⋅X₀+X₁ {O(n)}
    t₄, X₁: X₁ {O(n)}
    t₅, X₀: 3⋅X₀+X₁ {O(n)}
    t₅, X₁: 2⋅X₁ {O(n)}

