WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_speedpldi3_bb1_in/7,eval_speedpldi3_bb2_in/7]
1. non_recursive  : [eval_speedpldi3_stop/5]
2. non_recursive  : [eval_speedpldi3_bb3_in/5]
3. non_recursive  : [exit_location/1]
4. non_recursive  : [eval_speedpldi3_bb1_in_loop_cont/6]
5. non_recursive  : [eval_speedpldi3_2/5]
6. non_recursive  : [eval_speedpldi3_1/5]
7. non_recursive  : [eval_speedpldi3_0/5]
8. non_recursive  : [eval_speedpldi3_bb0_in/5]
9. non_recursive  : [eval_speedpldi3_start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_speedpldi3_bb1_in/7
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_speedpldi3_bb1_in_loop_cont/6
5. SCC is partially evaluated into eval_speedpldi3_2/5
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into eval_speedpldi3_start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_speedpldi3_bb1_in/7 
* CE 8 is refined into CE [11] 
* CE 7 is refined into CE [12] 
* CE 6 is refined into CE [13] 
* CE 5 is refined into CE [14] 


### Cost equations --> "Loop" of eval_speedpldi3_bb1_in/7 
* CEs [13] --> Loop 11 
* CEs [14] --> Loop 12 
* CEs [11] --> Loop 13 
* CEs [12] --> Loop 14 

### Ranking functions of CR eval_speedpldi3_bb1_in(V_i_0,V_j_0,V_m,V_n,B,C,D) 

#### Partial ranking functions of CR eval_speedpldi3_bb1_in(V_i_0,V_j_0,V_m,V_n,B,C,D) 
* Partial RF of phase [11,12]:
  - RF of loop [11:1]:
    -V_j_0+V_m depends on loops [12:1] 
    -V_j_0+V_n-1 depends on loops [12:1] 
  - RF of loop [12:1]:
    -V_i_0+V_n
    V_j_0 depends on loops [11:1] 
    V_j_0-V_m+1 depends on loops [11:1] 


### Specialization of cost equations eval_speedpldi3_bb1_in_loop_cont/6 
* CE 10 is refined into CE [15] 
* CE 9 is refined into CE [16] 


### Cost equations --> "Loop" of eval_speedpldi3_bb1_in_loop_cont/6 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 

### Ranking functions of CR eval_speedpldi3_bb1_in_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR eval_speedpldi3_bb1_in_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations eval_speedpldi3_2/5 
* CE 3 is refined into CE [17] 
* CE 4 is refined into CE [18,19,20] 
* CE 2 is refined into CE [21] 


### Cost equations --> "Loop" of eval_speedpldi3_2/5 
* CEs [17] --> Loop 17 
* CEs [18,19,20] --> Loop 18 
* CEs [21] --> Loop 19 

### Ranking functions of CR eval_speedpldi3_2(V_i_0,V_j_0,V_m,V_n,B) 

#### Partial ranking functions of CR eval_speedpldi3_2(V_i_0,V_j_0,V_m,V_n,B) 


### Specialization of cost equations eval_speedpldi3_start/5 
* CE 1 is refined into CE [22,23,24] 


### Cost equations --> "Loop" of eval_speedpldi3_start/5 
* CEs [24] --> Loop 20 
* CEs [23] --> Loop 21 
* CEs [22] --> Loop 22 

### Ranking functions of CR eval_speedpldi3_start(V_i_0,V_j_0,V_m,V_n,B) 

#### Partial ranking functions of CR eval_speedpldi3_start(V_i_0,V_j_0,V_m,V_n,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_speedpldi3_bb1_in(V_i_0,V_j_0,V_m,V_n,B,C,D):
* Chain [[11,12],14]: 1*it(11)+1*it(12)+0
  Such that:it(12) =< -V_i_0+V_n
aux(4) =< -V_j_0+V_n
aux(21) =< V_n
aux(3) =< it(12)*aux(21)
it(11) =< aux(3)+aux(4)

  with precondition: [B=2,D=0,V_n=C,V_i_0>=0,V_j_0>=0,V_m>=1,V_n>=V_i_0+1,V_n>=V_m+1] 

* Chain [[11,12],13]: 1*it(11)+1*it(12)+0
  Such that:it(12) =< -V_i_0+V_n
aux(4) =< -V_j_0+V_n
aux(21) =< V_n
aux(3) =< it(12)*aux(21)
it(11) =< aux(3)+aux(4)

  with precondition: [B=3,V_i_0>=0,V_j_0>=0,V_m>=1,V_n>=V_i_0+1,V_n>=V_m+1] 

* Chain [13]: 0
  with precondition: [B=3,V_i_0>=0,V_j_0>=0,V_m>=1,V_n>=V_m+1] 


#### Cost of chains of eval_speedpldi3_bb1_in_loop_cont(A,B,C,D,E,F):
* Chain [16]: 0
  with precondition: [A=2,D>=1,E>=D+1] 

* Chain [15]: 0
  with precondition: [A=3,D>=1,E>=D+1] 


#### Cost of chains of eval_speedpldi3_2(V_i_0,V_j_0,V_m,V_n,B):
* Chain [19]: 0
  with precondition: [0>=V_m] 

* Chain [18]: 2*s(1)+2*s(5)+0
  Such that:aux(24) =< V_n
s(1) =< aux(24)
s(4) =< s(1)*aux(24)
s(5) =< s(4)+aux(24)

  with precondition: [V_m>=1,V_n>=V_m+1] 

* Chain [17]: 0
  with precondition: [V_m>=V_n] 


#### Cost of chains of eval_speedpldi3_start(V_i_0,V_j_0,V_m,V_n,B):
* Chain [22]: 0
  with precondition: [0>=V_m] 

* Chain [21]: 2*s(12)+2*s(14)+0
  Such that:s(11) =< V_n
s(12) =< s(11)
s(13) =< s(12)*s(11)
s(14) =< s(13)+s(11)

  with precondition: [V_m>=1,V_n>=V_m+1] 

* Chain [20]: 0
  with precondition: [V_m>=V_n] 


Closed-form bounds of eval_speedpldi3_start(V_i_0,V_j_0,V_m,V_n,B): 
-------------------------------------
* Chain [22] with precondition: [0>=V_m] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [21] with precondition: [V_m>=1,V_n>=V_m+1] 
    - Upper bound: 2*V_n*V_n+4*V_n 
    - Complexity: n^2 
* Chain [20] with precondition: [V_m>=V_n] 
    - Upper bound: 0 
    - Complexity: constant 

### Maximum cost of eval_speedpldi3_start(V_i_0,V_j_0,V_m,V_n,B): nat(V_n)*2*nat(V_n)+nat(V_n)*4 
Asymptotic class: n^2 
* Total analysis performed in 109 ms.

