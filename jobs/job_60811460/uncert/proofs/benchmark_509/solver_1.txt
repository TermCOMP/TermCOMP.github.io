WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f1 -> 2

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
   1: (-1-i6+i5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3
   2: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -2-i6+i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=1+i6

Dependency graph:
0 -> 0, 0 -> 2
1 -> 0, 1 -> 2
2 -> 0, 2 -> 2

Refined Dependency Graph

	Removed the following edges: 2 -> 0

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f1 -> 2

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
   1: (-1-i6+i5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3
   2: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -2-i6+i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=1+i6

Dependency graph:
0 -> 0, 0 -> 2
1 -> 0, 1 -> 2
2 -> 2

Step with 1

	Trace

	1[(-1-i6+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	1[(-1-i6+i5 >= 0 /\ -1+i1 == 0)]
	2[(-i4+i5 >= 0 /\ -2+i1 == 0 /\ -2-i6+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-i4+i5 >= 0 /\ -2+i1 == 0 /\ -2-i6+i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=1+i6
	New rule:
	(-i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ -1-i6-it11+i5 >= 0) /\ i1'=i1, i3'=i3+it11, i6'=i6+it11

		-i4+i5 >= 0 [0]: unchanged
		
		-2+i1 >= 0 [0]: unchanged
		
		-2-i6+i5 >= 0 [0]: montonic decrease yields -1-i6-it11+i5 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-i4+i5 >= 0 -> -i4+i5 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, -2-i6+i5 >= 0 -> -1-i6-it11+i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ -1-i6-it11+i5 >= 0) /\ i1'=i1, i3'=i3+it11, i6'=i6+it11
	New rule:
	(-i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ -1-i6-it11+i5 >= 0) /\ i3'=i3+it11, i6'=i6+it11
	
	Instantiation

	Original rule:
	(-i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ -1-i6-it11+i5 >= 0) /\ i3'=i3+it11, i6'=i6+it11
	New rule:
	(0 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ -2-i6+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=-1-i6+i3+i5, i6'=-1+i5

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f1 -> 2

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
   1: (-1-i6+i5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3
   2: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -2-i6+i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=1+i6
   3: (0 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ -2-i6+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=-1-i6+i3+i5, i6'=-1+i5

Dependency graph:
0 -> 0, 0 -> 2, 0 -> 3
1 -> 0, 1 -> 2, 1 -> 3
2 -> 2, 2 -> 3
3 -> 2

	Trace

	1[(-1-i6+i5 >= 0 /\ -1+i1 == 0)]
	3[(0 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ -2-i6+i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 3[T]}
	
Backtrack

	Trace

	1[(-1-i6+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{3[T]}
	
Step with 0

	Trace

	1[(-1-i6+i5 >= 0 /\ -1+i1 == 0)]
	0[(-2+i1 == 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
	New rule:
	(-1+it32 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -it32+i4-i5 >= 0) /\ i1'=i1, i3'=i3+it32, i5'=it32+i5

		-2+i1 >= 0 [0]: unchanged
		
		-1+i4-i5 >= 0 [0]: montonic decrease yields -it32+i4-i5 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -1+i4-i5 >= 0 -> -it32+i4-i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+it32 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -it32+i4-i5 >= 0) /\ i1'=i1, i3'=i3+it32, i5'=it32+i5
	New rule:
	(-1+it32 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -it32+i4-i5 >= 0) /\ i3'=i3+it32, i5'=it32+i5
	
	Instantiation

	Original rule:
	(-1+it32 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -it32+i4-i5 >= 0) /\ i3'=i3+it32, i5'=it32+i5
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4-i5, i5'=i4

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f1 -> 2

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
   1: (-1-i6+i5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3
   2: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -2-i6+i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=1+i6
   3: (0 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ -2-i6+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=-1-i6+i3+i5, i6'=-1+i5
   4: (0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4-i5, i5'=i4

Dependency graph:
0 -> 0, 0 -> 2, 0 -> 3, 0 -> 4
1 -> 0, 1 -> 2, 1 -> 3, 1 -> 4
2 -> 2, 2 -> 3
3 -> 2
4 -> 0, 4 -> 2, 4 -> 3

	Trace

	1[(-1-i6+i5 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{0[T], 4[T]}
	
Step with 3

	Trace

	1[(-1-i6+i5 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0)]
	3[(0 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ -2-i6+i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{0[T], 4[T]}
	{3[T]}
	
Backtrack

	Trace

	1[(-1-i6+i5 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{0[T], 3[T], 4[T]}
	
Step with 2

	Trace

	1[(-1-i6+i5 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0)]
	2[(-i4+i5 >= 0 /\ -2+i1 == 0 /\ -2-i6+i5 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{0[T], 3[T], 4[T]}
	{}
	
Covered

	Trace

	1[(-1-i6+i5 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{0[T], 2[T], 3[T], 4[T]}
	
Backtrack

	Trace

	1[(-1-i6+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{3[T], 4[T]}
	
Step with 0

	Trace

	1[(-1-i6+i5 >= 0 /\ -1+i1 == 0)]
	0[(-2+i1 == 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{3[T], 4[T]}
	{}
	
Covered

	Trace

	1[(-1-i6+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 3[T], 4[T]}
	
Step with 2

	Trace

	1[(-1-i6+i5 >= 0 /\ -1+i1 == 0)]
	2[(-i4+i5 >= 0 /\ -2+i1 == 0 /\ -2-i6+i5 >= 0)]
	
	Blocked

	{}
	{0[T], 3[T], 4[T]}
	{}
	
Covered

	Trace

	1[(-1-i6+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 2[T], 3[T], 4[T]}
	
Backtrack

	Trace

	Blocked

	{1[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₁: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂) :|: 1+X₂ ≤ X₁
  t₀: l1(X₀, X₁, X₂) → l1(X₀, 1+X₁, X₂) :|: 1+X₁ ≤ X₀
  t₂: l1(X₀, X₁, X₂) → l1(X₀, X₁, 1+X₂) :|: 2+X₂ ≤ X₁ ∧ X₀ ≤ X₁


Preprocessing
  Found invariant 1+X₂ ≤ X₁ for location l1


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₁: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂) :|: 1+X₂ ≤ X₁
  t₀: l1(X₀, X₁, X₂) → l1(X₀, 1+X₁, X₂) :|: 1+X₁ ≤ X₀ ∧ 1+X₂ ≤ X₁
  t₂: l1(X₀, X₁, X₂) → l1(X₀, X₁, 1+X₂) :|: 2+X₂ ≤ X₁ ∧ X₀ ≤ X₁ ∧ 1+X₂ ≤ X₁


MPRF for transition t₀: l1(X₀, X₁, X₂) → l1(X₀, 1+X₁, X₂) :|: 1+X₁ ≤ X₀ ∧ 1+X₂ ≤ X₁ of depth 1:
  new bound:
    X₀+X₁ {O(n)}

  MPRF:
    • l1: [X₀-X₁]




MPRF for transition t₂: l1(X₀, X₁, X₂) → l1(X₀, X₁, 1+X₂) :|: 2+X₂ ≤ X₁ ∧ X₀ ≤ X₁ ∧ 1+X₂ ≤ X₁ of depth 1:
  new bound:
    2⋅X₁^2+3⋅X₀⋅X₁+X₀⋅X₂+X₀^2+X₁⋅X₂+X₁+X₂ {O(n^2)}

  MPRF:
    • l1: [X₁-X₂]




  Found invariant 2+X₂ ≤ X₁ ∧ 2+X₂ ≤ X₀ ∧ X₁ ≤ X₀ for location l1_v2


  Found invariant 1+X₂ ≤ X₁ ∧ 1+X₂ ≤ X₀ ∧ X₁ ≤ X₀ ∧ X₀ ≤ X₁ for location l1_v3


  Found invariant 1+X₂ ≤ X₁ ∧ X₀ ≤ X₁ for location l1_v1


  Found invariant 1+X₂ ≤ X₁ for location l1


Analysing control-flow refined program
MPRF for transition t₃₈: l1_v1(X₀, X₁, X₂) → l1_v1(X₀, X₁, 1+X₂) :|: 2+X₂ ≤ X₁ ∧ X₀ ≤ X₁ ∧ 1+X₂ ≤ X₁ of depth 1:
  new bound:
    X₁+X₂+1 {O(n)}

  MPRF:
    • l1_v1: [X₁-X₂]




MPRF for transition t₃₆: l1_v2(X₀, X₁, X₂) → l1_v2(X₀, 1+X₁, X₂) :|: 1+X₁ ≤ X₀ ∧ 1+X₂ ≤ X₁ ∧ 2+X₂ ≤ X₀ ∧ 2+X₂ ≤ X₁ ∧ X₁ ≤ X₀ of depth 1:
  new bound:
    X₀+X₁+2 {O(n)}

  MPRF:
    • l1_v2: [1+X₀-X₁]




MPRF for transition t₃₇: l1_v3(X₀, X₁, X₂) → l1_v3(X₀, X₁, 1+X₂) :|: 2+X₂ ≤ X₁ ∧ X₀ ≤ X₁ ∧ 1+X₂ ≤ X₀ ∧ 1+X₂ ≤ X₁ ∧ X₁ ≤ X₀ of depth 1:
  new bound:
    2⋅X₀+2⋅X₂+2 {O(n)}

  MPRF:
    • l1_v3: [X₀-X₂]




CFR: Improvement to new bound with the following program: 
  method: PartialEvaluation new bound: 
    O(n)

  cfr-program: 
    Start:  l0
    Program_Vars:  X₀, X₁, X₂
    Temp_Vars:  
    Locations:  l0, l1, l1_v1, l1_v2, l1_v3
    Return Locations:  
    Transitions:
    t₁: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂) :|: 1+X₂ ≤ X₁
    t₃₃: l1(X₀, X₁, X₂) → l1_v1(X₀, X₁, 1+X₂) :|: 2+X₂ ≤ X₁ ∧ X₀ ≤ X₁ ∧ 1+X₂ ≤ X₁
    t₃₄: l1(X₀, X₁, X₂) → l1_v2(X₀, 1+X₁, X₂) :|: 1+X₁ ≤ X₀ ∧ 1+X₂ ≤ X₁
    t₃₈: l1_v1(X₀, X₁, X₂) → l1_v1(X₀, X₁, 1+X₂) :|: 2+X₂ ≤ X₁ ∧ X₀ ≤ X₁ ∧ 1+X₂ ≤ X₁
    t₃₆: l1_v2(X₀, X₁, X₂) → l1_v2(X₀, 1+X₁, X₂) :|: 1+X₁ ≤ X₀ ∧ 1+X₂ ≤ X₁ ∧ 2+X₂ ≤ X₀ ∧ 2+X₂ ≤ X₁ ∧ X₁ ≤ X₀
    t₃₅: l1_v2(X₀, X₁, X₂) → l1_v3(X₀, X₁, 1+X₂) :|: 2+X₂ ≤ X₁ ∧ X₀ ≤ X₁ ∧ 1+X₂ ≤ X₁ ∧ 2+X₂ ≤ X₀ ∧ X₁ ≤ X₀
    t₃₇: l1_v3(X₀, X₁, X₂) → l1_v3(X₀, X₁, 1+X₂) :|: 2+X₂ ≤ X₁ ∧ X₀ ≤ X₁ ∧ 1+X₂ ≤ X₀ ∧ 1+X₂ ≤ X₁ ∧ X₁ ≤ X₀




All Bounds
Timebounds
  Overall timebound:2⋅X₁+3⋅X₀+3⋅X₂+9 {O(n)}
    t₁: 1 {O(1)}
    t₃₃: 1 {O(1)}
    t₃₄: 1 {O(1)}
    t₃₅: 1 {O(1)}
    t₃₆: X₀+X₁+2 {O(n)}
    t₃₇: 2⋅X₀+2⋅X₂+2 {O(n)}
    t₃₈: X₁+X₂+1 {O(n)}


Costbounds
  Overall costbound: 2⋅X₁+3⋅X₀+3⋅X₂+9 {O(n)}
    t₁: 1 {O(1)}
    t₃₃: 1 {O(1)}
    t₃₄: 1 {O(1)}
    t₃₅: 1 {O(1)}
    t₃₆: X₀+X₁+2 {O(n)}
    t₃₇: 2⋅X₀+2⋅X₂+2 {O(n)}
    t₃₈: X₁+X₂+1 {O(n)}


Sizebounds
    t₁, X₀: X₀ {O(n)}
    t₁, X₁: X₁ {O(n)}
    t₁, X₂: X₂ {O(n)}
    t₃₃, X₀: X₀ {O(n)}
    t₃₃, X₁: X₁ {O(n)}
    t₃₃, X₂: X₂+1 {O(n)}
    t₃₄, X₀: X₀ {O(n)}
    t₃₄, X₁: X₁+1 {O(n)}
    t₃₄, X₂: X₂ {O(n)}
    t₃₅, X₀: 2⋅X₀ {O(n)}
    t₃₅, X₁: 3⋅X₁+X₀+4 {O(n)}
    t₃₅, X₂: 2⋅X₂+2 {O(n)}
    t₃₆, X₀: X₀ {O(n)}
    t₃₆, X₁: 2⋅X₁+X₀+3 {O(n)}
    t₃₆, X₂: X₂ {O(n)}
    t₃₇, X₀: 2⋅X₀ {O(n)}
    t₃₇, X₁: 3⋅X₁+X₀+4 {O(n)}
    t₃₇, X₂: 2⋅X₀+4⋅X₂+4 {O(n)}
    t₃₈, X₀: X₀ {O(n)}
    t₃₈, X₁: X₁ {O(n)}
    t₃₈, X₂: 2⋅X₂+X₁+2 {O(n)}

