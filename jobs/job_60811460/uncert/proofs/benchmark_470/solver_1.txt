WORST_CASE(INF,?)

# LoAT Proof:
WORST_CASE(INF,?)

WORST_CASE(INF,?)
Initial ITS

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f0 -> 2
f1 -> 3

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=i6, i6'=-1+i6, i7'=i4
   1: (-3+i1 == 0 /\ -1+i4 >= 0 /\ -1+i6 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i6'=-1+i6, i8'=i6, i9'=i4
   2: (-2+i1 == 0 /\ -i4 >= 0 /\ -1+i6 >= 0) /\ i1'=2, i3'=1+i3, i4'=5000
   3: (-1+i1 == 0 /\ -1+it2 >= 0) /\ i1'=2, i3'=1+i3, i4'=5000, i6'=it2

Dependency graph:
0 -> 0, 0 -> 2
1 -> 0, 1 -> 2
2 -> 0, 2 -> 2
3 -> 0, 3 -> 2

Refined Dependency Graph

	Removed the following edges: 2 -> 2, 3 -> 2

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f0 -> 2
f1 -> 3

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=i6, i6'=-1+i6, i7'=i4
   1: (-3+i1 == 0 /\ -1+i4 >= 0 /\ -1+i6 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i6'=-1+i6, i8'=i6, i9'=i4
   2: (-2+i1 == 0 /\ -i4 >= 0 /\ -1+i6 >= 0) /\ i1'=2, i3'=1+i3, i4'=5000
   3: (-1+i1 == 0 /\ -1+it2 >= 0) /\ i1'=2, i3'=1+i3, i4'=5000, i6'=it2

Dependency graph:
0 -> 0, 0 -> 2
1 -> 0, 1 -> 2
2 -> 0
3 -> 0

Step with 3

	Trace

	3[(-1+i1 == 0 /\ -1+it2 >= 0)]
	
	Blocked

	{}
	{}
	
Step with 0

	Trace

	3[(-1+i1 == 0 /\ -1+it2 >= 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=i6, i6'=-1+i6, i7'=i4
	New rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -it20+i4 >= 0 /\ -1+it20 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it20, i4'=-it20+i4, i5'=1+i6-it20, i6'=i6-it20, i7'=1-it20+i4

		-1+i4 >= 0 [0]: montonic decrease yields (-1+i4 >= 0 /\ -it20+i4 >= 0)
		
		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-1+i4 >= 0 -> (-1+i4 >= 0 /\ -it20+i4 >= 0), -2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -it20+i4 >= 0 /\ -1+it20 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it20, i4'=-it20+i4, i5'=1+i6-it20, i6'=i6-it20, i7'=1-it20+i4
	New rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -it20+i4 >= 0 /\ -1+it20 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it20, i4'=-it20+i4, i5'=1+i6-it20, i6'=i6-it20, i7'=1-it20+i4
	
	Instantiation

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -it20+i4 >= 0 /\ -1+it20 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it20, i4'=-it20+i4, i5'=1+i6-it20, i6'=i6-it20, i7'=1-it20+i4
	New rule:
	(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4, i4'=0, i5'=1+i6-i4, i6'=i6-i4, i7'=1

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f0 -> 2
f1 -> 3

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=i6, i6'=-1+i6, i7'=i4
   1: (-3+i1 == 0 /\ -1+i4 >= 0 /\ -1+i6 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i6'=-1+i6, i8'=i6, i9'=i4
   2: (-2+i1 == 0 /\ -i4 >= 0 /\ -1+i6 >= 0) /\ i1'=2, i3'=1+i3, i4'=5000
   3: (-1+i1 == 0 /\ -1+it2 >= 0) /\ i1'=2, i3'=1+i3, i4'=5000, i6'=it2
   4: (0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4, i4'=0, i5'=1+i6-i4, i6'=i6-i4, i7'=1

Dependency graph:
0 -> 0, 0 -> 2, 0 -> 4
1 -> 0, 1 -> 2, 1 -> 4
2 -> 0, 2 -> 4
3 -> 0, 3 -> 4
4 -> 0, 4 -> 2

	Trace

	3[(-1+i1 == 0 /\ -1+it2 >= 0)]
	4[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{0[T], 4[T]}
	
Step with 2

	Trace

	3[(-1+i1 == 0 /\ -1+it2 >= 0)]
	4[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	2[(-2+i1 == 0 /\ -i4 >= 0 /\ -1+i6 >= 0)]
	
	Blocked

	{}
	{}
	{0[T], 4[T]}
	{}
	
Unbounded

Accelerate

		Extracted Implied Equalities

		Original rule:
		(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ 2-i1 >= 0) /\ i1'=2, i3'=1+i3+i4, i4'=5000, i5'=1+i6-i4, i6'=i6-i4, i7'=1
		New rule:
		(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0) /\ i1'=2, i3'=1+i3+i4, i4'=5000, i5'=1+i6-i4, i6'=i6-i4, i7'=1
		
		Simplified Guard

		Original rule:
		(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0) /\ i1'=2, i3'=1+i3+i4, i4'=5000, i5'=1+i6-i4, i6'=i6-i4, i7'=1
		New rule:
		(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0) /\ i1'=2, i3'=1+i3+i4, i4'=5000, i5'=1+i6-i4, i6'=i6-i4, i7'=1

	Loop Acceleration

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0) /\ i1'=2, i3'=1+i3+i4, i4'=5000, i5'=1+i6-i4, i6'=i6-i4, i7'=1
	New rule:
	(-1+it37 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ 4999 >= 0 /\ -1+i6-i4 >= 0 /\ -5001+i6-i4 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ -10001+i6-i4 >= 0 /\ -5001+i6-i4-5000*it37 >= 0) /\ i1'=i1, i3'=5002+i3+i4+5001*it37, i4'=5000, i5'=-4999+i6-i4-5000*it37, i6'=-5000+i6-i4-5000*it37, i7'=1

		-1+i4 >= 0 [0]: trivial
		
		-2+i1 >= 0 [0]: unchanged
		
		-1+i6-i4 >= 0 [0]: montonic decrease yields (-1+i6-5000*it37 >= 0 /\ -1+i6-i4 >= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-1+i4 >= 0 -> -1+i4 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, -1+i6-i4 >= 0 -> (-1+i6-5000*it37 >= 0 /\ -1+i6-i4 >= 0), 2-i1 >= 0 -> 2-i1 >= 0}

	Extracted Implied Equalities

	Original rule:
	(-1+it37 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ 4999 >= 0 /\ -1+i6-i4 >= 0 /\ -5001+i6-i4 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ -10001+i6-i4 >= 0 /\ -5001+i6-i4-5000*it37 >= 0) /\ i1'=i1, i3'=5002+i3+i4+5001*it37, i4'=5000, i5'=-4999+i6-i4-5000*it37, i6'=-5000+i6-i4-5000*it37, i7'=1
	New rule:
	(-1+it37 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ 4999 >= 0 /\ -1+i6-i4 >= 0 /\ -5001+i6-i4 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ -10001+i6-i4 >= 0 /\ -5001+i6-i4-5000*it37 >= 0) /\ i1'=i1, i3'=5002+i3+i4+5001*it37, i4'=5000, i5'=-4999+i6-i4-5000*it37, i6'=-5000+i6-i4-5000*it37, i7'=1
	
	Simplified Guard

	Original rule:
	(-1+it37 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ 4999 >= 0 /\ -1+i6-i4 >= 0 /\ -5001+i6-i4 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ -10001+i6-i4 >= 0 /\ -5001+i6-i4-5000*it37 >= 0) /\ i1'=i1, i3'=5002+i3+i4+5001*it37, i4'=5000, i5'=-4999+i6-i4-5000*it37, i6'=-5000+i6-i4-5000*it37, i7'=1
	New rule:
	(-1+it37 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -5001+i6-i4 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ -10001+i6-i4 >= 0 /\ -5001+i6-i4-5000*it37 >= 0) /\ i1'=i1, i3'=5002+i3+i4+5001*it37, i4'=5000, i5'=-4999+i6-i4-5000*it37, i6'=-5000+i6-i4-5000*it37, i7'=1
	
	Removed Trivial Updates

	Original rule:
	(-1+it37 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -5001+i6-i4 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ -10001+i6-i4 >= 0 /\ -5001+i6-i4-5000*it37 >= 0) /\ i1'=i1, i3'=5002+i3+i4+5001*it37, i4'=5000, i5'=-4999+i6-i4-5000*it37, i6'=-5000+i6-i4-5000*it37, i7'=1
	New rule:
	(-1+it37 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -5001+i6-i4 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ -10001+i6-i4 >= 0 /\ -5001+i6-i4-5000*it37 >= 0) /\ i3'=5002+i3+i4+5001*it37, i4'=5000, i5'=-4999+i6-i4-5000*it37, i6'=-5000+i6-i4-5000*it37, i7'=1

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f0 -> 2
f1 -> 3

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=i6, i6'=-1+i6, i7'=i4
   1: (-3+i1 == 0 /\ -1+i4 >= 0 /\ -1+i6 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i6'=-1+i6, i8'=i6, i9'=i4
   2: (-2+i1 == 0 /\ -i4 >= 0 /\ -1+i6 >= 0) /\ i1'=2, i3'=1+i3, i4'=5000
   3: (-1+i1 == 0 /\ -1+it2 >= 0) /\ i1'=2, i3'=1+i3, i4'=5000, i6'=it2
   4: (0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4, i4'=0, i5'=1+i6-i4, i6'=i6-i4, i7'=1
   5: (-1+it37 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -5001+i6-i4 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ -10001+i6-i4 >= 0 /\ -5001+i6-i4-5000*it37 >= 0) /\ i3'=5002+i3+i4+5001*it37, i4'=5000, i5'=-4999+i6-i4-5000*it37, i6'=-5000+i6-i4-5000*it37, i7'=1

Dependency graph:
0 -> 0, 0 -> 2, 0 -> 4, 0 -> 5
1 -> 0, 1 -> 2, 1 -> 4, 1 -> 5
2 -> 0, 2 -> 4, 2 -> 5
3 -> 0, 3 -> 4, 3 -> 5
4 -> 0, 4 -> 2
5 -> 0, 5 -> 4

	Trace

	3[(-1+i1 == 0 /\ -1+it2 >= 0)]
	5[(-1+it37 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -5001+i6-i4 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ -10001+i6-i4 >= 0 /\ -5001+i6-i4-5000*it37 >= 0)]
	
	Blocked

	{}
	{}
	{5[T]}
	
Step with 4

	Trace

	3[(-1+i1 == 0 /\ -1+it2 >= 0)]
	5[(-1+it37 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -5001+i6-i4 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ -10001+i6-i4 >= 0 /\ -5001+i6-i4-5000*it37 >= 0)]
	4[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{5[T]}
	{4[T]}
	
Step with 2

	Trace

	3[(-1+i1 == 0 /\ -1+it2 >= 0)]
	5[(-1+it37 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -5001+i6-i4 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ -10001+i6-i4 >= 0 /\ -5001+i6-i4-5000*it37 >= 0)]
	4[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	2[(-2+i1 == 0 /\ -i4 >= 0 /\ -1+i6 >= 0)]
	
	Blocked

	{}
	{}
	{5[T]}
	{0[T], 4[T]}
	{}
	
Covered

	Trace

	3[(-1+i1 == 0 /\ -1+it2 >= 0)]
	5[(-1+it37 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -5001+i6-i4 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ -10001+i6-i4 >= 0 /\ -5001+i6-i4-5000*it37 >= 0)]
	4[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{5[T]}
	{0[T], 2[T], 4[T]}
	
Backtrack

	Trace

	3[(-1+i1 == 0 /\ -1+it2 >= 0)]
	5[(-1+it37 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -5001+i6-i4 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ -10001+i6-i4 >= 0 /\ -5001+i6-i4-5000*it37 >= 0)]
	
	Blocked

	{}
	{}
	{4[T], 5[T]}
	
Step with 0

	Trace

	3[(-1+i1 == 0 /\ -1+it2 >= 0)]
	5[(-1+it37 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -5001+i6-i4 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ -10001+i6-i4 >= 0 /\ -5001+i6-i4-5000*it37 >= 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{}
	{4[T], 5[T]}
	{}
	
Covered

	Trace

	3[(-1+i1 == 0 /\ -1+it2 >= 0)]
	5[(-1+it37 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -5001+i6-i4 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ -10001+i6-i4 >= 0 /\ -5001+i6-i4-5000*it37 >= 0)]
	
	Blocked

	{}
	{}
	{0[T], 4[T], 5[T]}
	
Backtrack

	Trace

	3[(-1+i1 == 0 /\ -1+it2 >= 0)]
	
	Blocked

	{}
	{5[T]}
	
Step with 0

	Trace

	3[(-1+i1 == 0 /\ -1+it2 >= 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{5[T]}
	{}
	
Covered

	Trace

	3[(-1+i1 == 0 /\ -1+it2 >= 0)]
	
	Blocked

	{}
	{0[T], 5[T]}
	
Step with 4

	Trace

	3[(-1+i1 == 0 /\ -1+it2 >= 0)]
	4[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{0[T], 5[T]}
	{4[T]}
	
Step with 2

	Trace

	3[(-1+i1 == 0 /\ -1+it2 >= 0)]
	4[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	2[(-2+i1 == 0 /\ -i4 >= 0 /\ -1+i6 >= 0)]
	
	Blocked

	{}
	{0[T], 5[T]}
	{0[T], 4[T]}
	{}
	
Covered

	Trace

	3[(-1+i1 == 0 /\ -1+it2 >= 0)]
	4[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{0[T], 5[T]}
	{0[T], 2[T], 4[T]}
	
Backtrack

	Trace

	3[(-1+i1 == 0 /\ -1+it2 >= 0)]
	
	Blocked

	{}
	{0[T], 4[T], 5[T]}
	
Backtrack

	Trace

	Blocked

	{3[T]}
	
Accept

Unbounded


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃, X₄, X₅
  Temp_Vars:  G
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₃: l0(X₀, X₁, X₂, X₃, X₄, X₅) → l1(5000, X₁, G, X₃, X₄, X₅) :|: 1 ≤ G
  t₀: l1(X₀, X₁, X₂, X₃, X₄, X₅) → l1(X₀-1, X₂, X₂-1, X₀, X₄, X₅) :|: 1 ≤ X₀
  t₂: l1(X₀, X₁, X₂, X₃, X₄, X₅) → l1(5000, X₁, X₂, X₃, X₄, X₅) :|: 1 ≤ X₂ ∧ X₀ ≤ 0
  t₁: l2(X₀, X₁, X₂, X₃, X₄, X₅) → l1(X₀-1, X₁, X₂-1, X₃, X₂, X₀) :|: 1 ≤ X₀ ∧ 1 ≤ X₂


Preprocessing
  Cut unreachable locations [l2] from the program graph


  Eliminate variables [X₁; X₃; X₄; X₅] that do not contribute to the problem


  Found invariant 0 ≤ 4999+X₁ ∧ 0 ≤ 4999+X₀+X₁ ∧ X₀ ≤ 4999+X₁ ∧ X₀ ≤ 5000 ∧ 0 ≤ X₀ for location l1


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  G
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₄: l0(X₀, X₁) → l1(5000, G) :|: 1 ≤ G
  t₅: l1(X₀, X₁) → l1(X₀-1, X₁-1) :|: 1 ≤ X₀ ∧ X₀ ≤ 5000 ∧ 0 ≤ 4999+X₀+X₁ ∧ X₀ ≤ 4999+X₁ ∧ 0 ≤ 4999+X₁ ∧ 0 ≤ X₀
  t₆: l1(X₀, X₁) → l1(5000, X₁) :|: 1 ≤ X₁ ∧ X₀ ≤ 0 ∧ X₀ ≤ 5000 ∧ 0 ≤ 4999+X₀+X₁ ∧ X₀ ≤ 4999+X₁ ∧ 0 ≤ 4999+X₁ ∧ 0 ≤ X₀


  Cut unsatisfiable transition [t₃₈: l1→l1_v1]


  Found invariant 0 ≤ 4999+X₁ ∧ 0 ≤ 4999+X₀+X₁ ∧ X₀ ≤ 4999+X₁ ∧ X₀ ≤ 4999 ∧ 0 ≤ X₀ for location l1_v2


  Found invariant 0 ≤ X₁ ∧ 4999 ≤ X₀+X₁ ∧ X₀ ≤ 4999+X₁ ∧ X₀ ≤ 4999 ∧ 4999 ≤ X₀ for location l1_v3


  Found invariant 1 ≤ X₁ ∧ 5001 ≤ X₀+X₁ ∧ X₀ ≤ 4999+X₁ ∧ X₀ ≤ 5000 ∧ 5000 ≤ X₀ for location l1_v1


  Found invariant 1 ≤ X₁ ∧ 5001 ≤ X₀+X₁ ∧ X₀ ≤ 4999+X₁ ∧ X₀ ≤ 5000 ∧ 5000 ≤ X₀ for location l1


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₄: 1 {O(1)}
    t₅: inf {Infinity}
    t₆: inf {Infinity}


Costbounds
  Overall costbound: inf {Infinity}
    t₄: 1 {O(1)}
    t₅: inf {Infinity}
    t₆: inf {Infinity}


Sizebounds
    t₄, X₀: 5000 {O(1)}
    t₅, X₀: 10000 {O(1)}
    t₆, X₀: 5000 {O(1)}

