NO

# LoAT Proof:
NO

NO

Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f10 -> 2
f16 -> 3
f25 -> 4
f27 -> 5
f30 -> 6

Rules:
   0: (-2+i1 == 0 /\ -1+it2 >= 0 /\ -i4 >= 0) /\ i1'=3, i3'=1+i3, i5'=0, i6'=it2
   1: (-3+i1 == 0 /\ -1+i6 >= 0) /\ i1'=3, i3'=1+i3
   2: -4+i1 == 0 /\ i1'=4, i3'=1+i3
   3: -5+i1 == 0 /\ i1'=6, i3'=1+i3
   4: (-3+i1 == 0 /\ -i6 >= 0) /\ i1'=2, i3'=1+i3, i4'=it3, i7'=0, i8'=it3
   5: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=4, i3'=1+i3
   6: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it4, i5'=0, i7'=0, i8'=it4

Dependency graph:
0 -> 1, 0 -> 4
1 -> 1, 1 -> 4
2 -> 2
4 -> 0, 4 -> 5
5 -> 2
6 -> 0, 6 -> 5

Refined Dependency Graph

	Removed the following edges: 0 -> 4, 1 -> 4

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f10 -> 2
f16 -> 3
f25 -> 4
f27 -> 5
f30 -> 6

Rules:
   0: (-2+i1 == 0 /\ -1+it2 >= 0 /\ -i4 >= 0) /\ i1'=3, i3'=1+i3, i5'=0, i6'=it2
   1: (-3+i1 == 0 /\ -1+i6 >= 0) /\ i1'=3, i3'=1+i3
   2: -4+i1 == 0 /\ i1'=4, i3'=1+i3
   3: -5+i1 == 0 /\ i1'=6, i3'=1+i3
   4: (-3+i1 == 0 /\ -i6 >= 0) /\ i1'=2, i3'=1+i3, i4'=it3, i7'=0, i8'=it3
   5: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=4, i3'=1+i3
   6: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it4, i5'=0, i7'=0, i8'=it4

Dependency graph:
0 -> 1
1 -> 1
2 -> 2
4 -> 0, 4 -> 5
5 -> 2
6 -> 0, 6 -> 5

Step with 6

	Trace

	6[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 5

	Trace

	6[(-1+i1 == 0)]
	5[(-1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Step with 2

	Trace

	6[(-1+i1 == 0)]
	5[(-1+i4 >= 0 /\ -2+i1 == 0)]
	2[(-4+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-4+i1 == 0) /\ i1'=4, i3'=1+i3
	New rule:
	(-4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+it27 >= 0) /\ i1'=0

		-4+i1 >= 0 [0]: unchanged
		
		4-i1 >= 0 [0]: unchanged
		
		Replacement map: {-4+i1 >= 0 -> -4+i1 >= 0, 4-i1 >= 0 -> 4-i1 >= 0}

	Loop Acceleration

	Original rule:
	(-4+i1 == 0) /\ i1'=4, i3'=1+i3
	New rule:
	(-4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+it27 >= 0) /\ i1'=i1, i3'=it27+i3

		-4+i1 >= 0 [0]: unchanged
		
		4-i1 >= 0 [0]: unchanged
		
		Replacement map: {-4+i1 >= 0 -> -4+i1 >= 0, 4-i1 >= 0 -> 4-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+it27 >= 0) /\ i1'=i1, i3'=it27+i3
	New rule:
	(-4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+it27 >= 0) /\ i3'=it27+i3

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f10 -> 2
f16 -> 3
f25 -> 4
f27 -> 5
f30 -> 6

Rules:
   0: (-2+i1 == 0 /\ -1+it2 >= 0 /\ -i4 >= 0) /\ i1'=3, i3'=1+i3, i5'=0, i6'=it2
   1: (-3+i1 == 0 /\ -1+i6 >= 0) /\ i1'=3, i3'=1+i3
   2: -4+i1 == 0 /\ i1'=4, i3'=1+i3
   3: -5+i1 == 0 /\ i1'=6, i3'=1+i3
   4: (-3+i1 == 0 /\ -i6 >= 0) /\ i1'=2, i3'=1+i3, i4'=it3, i7'=0, i8'=it3
   5: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=4, i3'=1+i3
   6: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it4, i5'=0, i7'=0, i8'=it4
   7: (-4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+it27 >= 0) /\ i1'=0
   8: (-4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+it27 >= 0) /\ i3'=it27+i3

Dependency graph:
0 -> 1
1 -> 1
2 -> 2, 2 -> 7, 2 -> 8
4 -> 0, 4 -> 5
5 -> 2, 5 -> 7, 5 -> 8
6 -> 0, 6 -> 5
8 -> 2, 8 -> 7

Step with 7

	Trace

	6[(-1+i1 == 0)]
	5[(-1+i4 >= 0 /\ -2+i1 == 0)]
	7[(-4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+it27 >= 0)]
	
	Blocked

	{}
	{}
	{}
	{7[T]}
	
Refute

	Counterexample

	(i1=1, i3=-1, i6=0)
	-6-> (i1=2, i3=0, i4=1, i5=0, i6=0, i7=0, i8=1 )
	-5-> (i1=4, i3=1, i4=1, i5=0, i6=0, i7=0, i8=1 )
	-7-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃, X₄
  Temp_Vars:  F
  Locations:  l0, l1, l2, l3, l4, l5
  Return Locations:  
  Transitions:
  t₆: l0(X₀, X₁, X₂, X₃, X₄) → l1(F, 0, X₂, 0, F)
  t₀: l1(X₀, X₁, X₂, X₃, X₄) → l2(X₀, 0, F, X₃, X₄) :|: 1 ≤ F ∧ X₀ ≤ 0
  t₅: l1(X₀, X₁, X₂, X₃, X₄) → l3(X₀, X₁, X₂, X₃, X₄) :|: 1 ≤ X₀
  t₄: l2(X₀, X₁, X₂, X₃, X₄) → l1(F, X₁, X₂, 0, F) :|: X₂ ≤ 0
  t₁: l2(X₀, X₁, X₂, X₃, X₄) → l2(X₀, X₁, X₂, X₃, X₄) :|: 1 ≤ X₂
  t₂: l3(X₀, X₁, X₂, X₃, X₄) → l3(X₀, X₁, X₂, X₃, X₄)
  t₃: l5(X₀, X₁, X₂, X₃, X₄) → l4(X₀, X₁, X₂, X₃, X₄)


Preprocessing
  Cut unreachable locations [l4; l5] from the program graph


  Cut unsatisfiable transition [t₄: l2→l1]


  Eliminate variables [X₁; X₃; X₄] that do not contribute to the problem


  Found invariant 1 ≤ X₁ ∧ 1+X₀ ≤ X₁ ∧ X₀ ≤ 0 for location l2


  Found invariant 1 ≤ X₀ for location l3


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  F
  Locations:  l0, l1, l2, l3
  Return Locations:  
  Transitions:
  t₇: l0(X₀, X₁) → l1(F, X₁)
  t₈: l1(X₀, X₁) → l2(X₀, F) :|: 1 ≤ F ∧ X₀ ≤ 0
  t₉: l1(X₀, X₁) → l3(X₀, X₁) :|: 1 ≤ X₀
  t₁₀: l2(X₀, X₁) → l2(X₀, X₁) :|: 1 ≤ X₁ ∧ 1+X₀ ≤ X₁ ∧ X₀ ≤ 0
  t₁₁: l3(X₀, X₁) → l3(X₀, X₁) :|: 1 ≤ X₀


  Found invariant 1 ≤ X₁ ∧ 1+X₀ ≤ X₁ ∧ X₀ ≤ 0 for location l2


  Found invariant 1 ≤ X₁ ∧ 1+X₀ ≤ X₁ ∧ X₀ ≤ 0 for location l2_v1


  Found invariant 1 ≤ X₀ for location l3


  Found invariant 1 ≤ X₁ ∧ 1+X₀ ≤ X₁ ∧ X₀ ≤ 0 for location l2


  Found invariant 1 ≤ X₀ for location l3


  Found invariant 1 ≤ X₀ for location l3_v1


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₇: 1 {O(1)}
    t₈: 1 {O(1)}
    t₉: 1 {O(1)}
    t₁₀: inf {Infinity}
    t₁₁: inf {Infinity}


Costbounds
  Overall costbound: inf {Infinity}
    t₇: 1 {O(1)}
    t₈: 1 {O(1)}
    t₉: 1 {O(1)}
    t₁₀: inf {Infinity}
    t₁₁: inf {Infinity}


Sizebounds
    t₇, X₁: X₁ {O(n)}
    t₉, X₁: X₁ {O(n)}
    t₁₁, X₁: X₁ {O(n)}

