WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: f300

Location map:
LoAT_sink -> 0
f300 -> 1
f5 -> 2
f1 -> 3

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-2+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=1+i3, i5'=it2
   2: (-1+i4 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   3: (-1+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=1+i3, i5'=it3

Dependency graph:
0 -> 0, 0 -> 1
2 -> 0, 2 -> 1

Step with 3

	Trace

	3[(-1+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{}
	
Backtrack

	Trace

	Blocked

	{3[T]}
	
Step with 2

	Trace

	2[(-1+i4 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{3[T]}
	{}
	
Step with 0

	Trace

	2[(-1+i4 >= 0 /\ -1+i1 == 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{3[T]}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
	New rule:
	(-2+i1 >= 0 /\ -it17+i4 >= 0 /\ 2-i1 >= 0 /\ -1+it17 >= 0) /\ i1'=i1, i3'=it17+i3, i4'=-it17+i4

		-1+i4 >= 0 [0]: montonic decrease yields -it17+i4 >= 0
		
		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-1+i4 >= 0 -> -it17+i4 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ -it17+i4 >= 0 /\ 2-i1 >= 0 /\ -1+it17 >= 0) /\ i1'=i1, i3'=it17+i3, i4'=-it17+i4
	New rule:
	(-2+i1 >= 0 /\ -it17+i4 >= 0 /\ 2-i1 >= 0 /\ -1+it17 >= 0) /\ i3'=it17+i3, i4'=-it17+i4
	
	Instantiation

	Original rule:
	(-2+i1 >= 0 /\ -it17+i4 >= 0 /\ 2-i1 >= 0 /\ -1+it17 >= 0) /\ i3'=it17+i3, i4'=-it17+i4
	New rule:
	(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4, i4'=0

Start location: f300

Location map:
LoAT_sink -> 0
f300 -> 1
f5 -> 2
f1 -> 3

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-2+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=1+i3, i5'=it2
   2: (-1+i4 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   3: (-1+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=1+i3, i5'=it3
   4: (0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4, i4'=0

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 4
2 -> 0, 2 -> 1, 2 -> 4
4 -> 0, 4 -> 1

	Trace

	2[(-1+i4 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{3[T]}
	{}
	{0[T], 4[T]}
	
Step with 1

	Trace

	2[(-1+i4 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	1[(-2+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{3[T]}
	{}
	{0[T], 4[T]}
	{}
	
Backtrack

	Trace

	2[(-1+i4 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{3[T]}
	{}
	{0[T], 1[T], 4[T]}
	
Backtrack

	Trace

	2[(-1+i4 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{3[T]}
	{4[T]}
	
Step with 1

	Trace

	2[(-1+i4 >= 0 /\ -1+i1 == 0)]
	1[(-2+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{3[T]}
	{4[T]}
	{}
	
Backtrack

	Trace

	2[(-1+i4 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{3[T]}
	{1[T], 4[T]}
	
Step with 0

	Trace

	2[(-1+i4 >= 0 /\ -1+i1 == 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{3[T]}
	{1[T], 4[T]}
	{}
	
Covered

	Trace

	2[(-1+i4 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{3[T]}
	{0[T], 1[T], 4[T]}
	
Backtrack

	Trace

	Blocked

	{2[T], 3[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  C
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₂: l0(X₀, X₁) → l1(X₀-1, X₁) :|: 1 ≤ X₀
  t₃: l0(X₀, X₁) → l2(X₀, C) :|: X₀ ≤ 0
  t₀: l1(X₀, X₁) → l1(X₀-1, X₁) :|: 1 ≤ X₀
  t₁: l1(X₀, X₁) → l2(X₀, C) :|: X₀ ≤ 0


Preprocessing
  Eliminate variables [C; X₁] that do not contribute to the problem


  Found invariant 0 ≤ X₀ for location l1


  Found invariant X₀ ≤ 0 for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₄: l0(X₀) → l1(X₀-1) :|: 1 ≤ X₀
  t₅: l0(X₀) → l2(X₀) :|: X₀ ≤ 0
  t₆: l1(X₀) → l1(X₀-1) :|: 1 ≤ X₀ ∧ 0 ≤ X₀
  t₇: l1(X₀) → l2(X₀) :|: X₀ ≤ 0 ∧ 0 ≤ X₀


MPRF for transition t₆: l1(X₀) → l1(X₀-1) :|: 1 ≤ X₀ ∧ 0 ≤ X₀ of depth 1:
  new bound:
    X₀+1 {O(n)}

  MPRF:
    • l1: [1+X₀]




All Bounds
Timebounds
  Overall timebound:X₀+4 {O(n)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: X₀+1 {O(n)}
    t₇: 1 {O(1)}


Costbounds
  Overall costbound: X₀+4 {O(n)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: X₀+1 {O(n)}
    t₇: 1 {O(1)}


Sizebounds
    t₄, X₀: X₀ {O(n)}
    t₅, X₀: X₀ {O(n)}
    t₆, X₀: X₀ {O(n)}
    t₇, X₀: 0 {O(1)}

