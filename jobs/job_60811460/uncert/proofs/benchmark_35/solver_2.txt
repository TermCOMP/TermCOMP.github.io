WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalEx4bb1in/9,evalEx4bb2in/9,evalEx4bb3in/9]
1. recursive  : [evalEx4bb2in_loop_cont/10,evalEx4bb4in/9]
2. non_recursive  : [evalEx4stop/5]
3. non_recursive  : [evalEx4returnin/5]
4. non_recursive  : [exit_location/1]
5. non_recursive  : [evalEx4bb4in_loop_cont/6]
6. non_recursive  : [evalEx4entryin/5]
7. non_recursive  : [evalEx4start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalEx4bb2in/9
1. SCC is partially evaluated into evalEx4bb4in/9
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into evalEx4bb4in_loop_cont/6
6. SCC is partially evaluated into evalEx4entryin/5
7. SCC is partially evaluated into evalEx4start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalEx4bb2in/9 
* CE 13 is refined into CE [14] 
* CE 10 is refined into CE [15] 
* CE 12 is refined into CE [16] 
* CE 11 is refined into CE [17] 


### Cost equations --> "Loop" of evalEx4bb2in/9 
* CEs [17] --> Loop 14 
* CEs [14] --> Loop 15 
* CEs [15] --> Loop 16 
* CEs [16] --> Loop 17 

### Ranking functions of CR evalEx4bb2in(A,B,C,D,F,G,H,I,J) 
* RF of phase [14]: [D]

#### Partial ranking functions of CR evalEx4bb2in(A,B,C,D,F,G,H,I,J) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    D


### Specialization of cost equations evalEx4bb4in/9 
* CE 6 is refined into CE [18] 
* CE 5 is refined into CE [19] 
* CE 7 is refined into CE [20] 
* CE 3 is refined into CE [21,22] 
* CE 4 is refined into CE [23,24,25,26] 


### Cost equations --> "Loop" of evalEx4bb4in/9 
* CEs [24] --> Loop 18 
* CEs [23] --> Loop 19 
* CEs [26] --> Loop 20 
* CEs [25] --> Loop 21 
* CEs [18] --> Loop 22 
* CEs [19] --> Loop 23 
* CEs [20] --> Loop 24 
* CEs [22] --> Loop 25 
* CEs [21] --> Loop 26 

### Ranking functions of CR evalEx4bb4in(A,B,C,D,F,G,H,I,J) 
* RF of phase [18]: [B-1]

#### Partial ranking functions of CR evalEx4bb4in(A,B,C,D,F,G,H,I,J) 
* Partial RF of phase [18]:
  - RF of loop [18:1]:
    B-1


### Specialization of cost equations evalEx4bb4in_loop_cont/6 
* CE 8 is refined into CE [27] 
* CE 9 is refined into CE [28] 


### Cost equations --> "Loop" of evalEx4bb4in_loop_cont/6 
* CEs [27] --> Loop 27 
* CEs [28] --> Loop 28 

### Ranking functions of CR evalEx4bb4in_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR evalEx4bb4in_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations evalEx4entryin/5 
* CE 2 is refined into CE [29,30,31,32,33,34,35,36,37,38] 


### Cost equations --> "Loop" of evalEx4entryin/5 
* CEs [32,34,37] --> Loop 29 
* CEs [31,33,36] --> Loop 30 
* CEs [30,35] --> Loop 31 
* CEs [29,38] --> Loop 32 

### Ranking functions of CR evalEx4entryin(A,B,C,D,F) 

#### Partial ranking functions of CR evalEx4entryin(A,B,C,D,F) 


### Specialization of cost equations evalEx4start/5 
* CE 1 is refined into CE [39,40,41,42] 


### Cost equations --> "Loop" of evalEx4start/5 
* CEs [42] --> Loop 33 
* CEs [41] --> Loop 34 
* CEs [40] --> Loop 35 
* CEs [39] --> Loop 36 

### Ranking functions of CR evalEx4start(A,B,C,D,F) 

#### Partial ranking functions of CR evalEx4start(A,B,C,D,F) 


Computing Bounds
=====================================

#### Cost of chains of evalEx4bb2in(A,B,C,D,F,G,H,I,J):
* Chain [[14],17]: 1*it(14)+0
  Such that:it(14) =< D

  with precondition: [A=1,F=2,G=1,H=0,I=1,J=0,1>=C,D>=1] 

* Chain [[14],16]: 1*it(14)+0
  Such that:it(14) =< D-J

  with precondition: [A=1,F=2,G=1,I=1,H=J,1>=C,H>=1,D>=H+1] 

* Chain [[14],15]: 1*it(14)+0
  Such that:it(14) =< D

  with precondition: [A=1,F=3,1>=C,D>=1] 

* Chain [17]: 0
  with precondition: [A=1,F=2,C=G,D=H,C=I,D=J,1>=C,0>=D] 

* Chain [16]: 0
  with precondition: [A=1,F=2,C=G,D=H,C=I,D=J,1>=C,D>=1] 

* Chain [15]: 0
  with precondition: [A=1,F=3,1>=C] 


#### Cost of chains of evalEx4bb4in(A,B,C,D,F,G,H,I,J):
* Chain [[18],26]: 2*it(18)+0
  Such that:aux(3) =< B
it(18) =< aux(3)

  with precondition: [A=1,F=3,B>=2] 

* Chain [[18],25]: 3*it(18)+0
  Such that:aux(4) =< B
it(18) =< aux(4)

  with precondition: [A=1,F=3,B>=2] 

* Chain [[18],24]: 2*it(18)+0
  Such that:aux(5) =< B
it(18) =< aux(5)

  with precondition: [A=1,F=3,B>=2] 

* Chain [[18],20,24]: 2*it(18)+1
  Such that:aux(6) =< B
it(18) =< aux(6)

  with precondition: [A=1,F=3,B>=2] 

* Chain [[18],20,23]: 2*it(18)+1
  Such that:aux(1) =< B
aux(2) =< B-H
it(18) =< aux(1)
it(18) =< aux(2)

  with precondition: [A=1,F=4,G=0,I=0,H=J,H>=1,B>=H+1] 

* Chain [[18],19,26]: 3*it(18)+1
  Such that:aux(7) =< B
it(18) =< aux(7)

  with precondition: [A=1,F=3,B>=2] 

* Chain [[18],19,24]: 3*it(18)+1
  Such that:aux(8) =< B
it(18) =< aux(8)

  with precondition: [A=1,F=3,B>=2] 

* Chain [[18],19,21,24]: 3*it(18)+2
  Such that:aux(9) =< B
it(18) =< aux(9)

  with precondition: [A=1,F=3,B>=2] 

* Chain [[18],19,21,23]: 3*it(18)+2
  Such that:aux(10) =< B
it(18) =< aux(10)

  with precondition: [A=1,F=4,G=0,H=0,I=0,J=0,B>=2] 

* Chain [26]: 0
  with precondition: [A=1,F=3] 

* Chain [25]: 1*s(4)+0
  Such that:s(4) =< B

  with precondition: [A=1,F=3,B>=1] 

* Chain [24]: 0
  with precondition: [F=3,1>=A,A>=0] 

* Chain [21,24]: 1
  with precondition: [A=1,F=3,0>=B] 

* Chain [21,23]: 1
  with precondition: [A=1,F=4,G=0,I=0,B=H,B=J,0>=B] 

* Chain [20,24]: 1
  with precondition: [A=1,F=3,B>=1] 

* Chain [20,23]: 1
  with precondition: [A=1,F=4,G=0,I=0,B=H,B=J,B>=1] 

* Chain [19,26]: 1*s(5)+1
  Such that:s(5) =< B

  with precondition: [A=1,F=3,B>=1] 

* Chain [19,24]: 1*s(5)+1
  Such that:s(5) =< B

  with precondition: [A=1,F=3,B>=1] 

* Chain [19,21,24]: 1*s(5)+2
  Such that:s(5) =< B

  with precondition: [A=1,F=3,B>=1] 

* Chain [19,21,23]: 1*s(5)+2
  Such that:s(5) =< B

  with precondition: [A=1,F=4,G=0,H=0,I=0,J=0,B>=1] 


#### Cost of chains of evalEx4bb4in_loop_cont(A,B,C,D,E,F):
* Chain [28]: 0
  with precondition: [A=3] 

* Chain [27]: 0
  with precondition: [A=4] 


#### Cost of chains of evalEx4entryin(A,B,C,D,F):
* Chain [32]: 0
  with precondition: [] 

* Chain [31]: 1
  with precondition: [0>=A] 

* Chain [30]: 5*s(25)+2
  Such that:aux(13) =< A
s(25) =< aux(13)

  with precondition: [A>=1] 

* Chain [29]: 23*s(28)+2
  Such that:aux(15) =< A
s(28) =< aux(15)

  with precondition: [A>=2] 


#### Cost of chains of evalEx4start(A,B,C,D,F):
* Chain [36]: 0
  with precondition: [] 

* Chain [35]: 1
  with precondition: [0>=A] 

* Chain [34]: 5*s(35)+2
  Such that:s(34) =< A
s(35) =< s(34)

  with precondition: [A>=1] 

* Chain [33]: 23*s(37)+2
  Such that:s(36) =< A
s(37) =< s(36)

  with precondition: [A>=2] 


Closed-form bounds of evalEx4start(A,B,C,D,F): 
-------------------------------------
* Chain [36] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [35] with precondition: [0>=A] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [34] with precondition: [A>=1] 
    - Upper bound: 5*A+2 
    - Complexity: n 
* Chain [33] with precondition: [A>=2] 
    - Upper bound: 23*A+2 
    - Complexity: n 

### Maximum cost of evalEx4start(A,B,C,D,F): nat(A)*23+1+1 
Asymptotic class: n 
* Total analysis performed in 165 ms.

