WORST_CASE(?,O(1))

# LoAT Proof:
Initial ITS

Start location: f28

Location map:
LoAT_sink -> 0
f28 -> 1
f12 -> 2
f11 -> 3
f20 -> 4

Rules:
   0: -2+i1 == 0 /\ i1'=3, i3'=1+i3
   1: (-1+i4 >= 0 /\ -1+i1 == 0) /\ i1'=4, i3'=1+i3, i5'=1, i6'=i4, i7'=1, i8'=i4

Dependency graph:

Step with 1

	Trace

	1[(-1+i4 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Backtrack

	Trace

	Blocked

	{1[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃, X₄
  Temp_Vars:  
  Locations:  l0, l1, l2, l3
  Return Locations:  
  Transitions:
  t₁: l0(X₀, X₁, X₂, X₃, X₄) → l3(X₀, 1, X₀, 1, X₀) :|: 1 ≤ X₀
  t₀: l1(X₀, X₁, X₂, X₃, X₄) → l2(X₀, X₁, X₂, X₃, X₄)


Preprocessing
  Cut unreachable locations [l1; l2] from the program graph


  Eliminate variables [X₁; X₂; X₃; X₄] that do not contribute to the problem


  Found invariant 1 ≤ X₀ for location l3


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  
  Locations:  l0, l3
  Return Locations:  
  Transitions:
  t₂: l0(X₀) → l3(X₀) :|: 1 ≤ X₀


All Bounds
Timebounds
  Overall timebound:1 {O(1)}
    t₂: 1 {O(1)}


Costbounds
  Overall costbound: 1 {O(1)}
    t₂: 1 {O(1)}


Sizebounds
    t₂, X₀: X₀ {O(n)}

