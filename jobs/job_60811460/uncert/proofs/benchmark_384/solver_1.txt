NO

# LoAT Proof:
NO

NO

Initial ITS

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f0 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=2
   1: (-2+i1 == 0 /\ -1+it2 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=it2
   2: (-2+i1 == 0 /\ -it3 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=it3

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2
2 -> 1, 2 -> 2

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ -it3 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-2+i1 == 0 /\ -it3 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=it3
	New rule:
	(-1+it15 >= 0 /\ -2+i1 >= 0 /\ -it3 >= 0 /\ 2-i1 >= 0) /\ i1'=0

		-2+i1 >= 0 [0]: unchanged
		
		-it3 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -it3 >= 0 -> -it3 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -it3 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=it3
	New rule:
	(-1+it15 >= 0 /\ -2+i1 >= 0 /\ -it3 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it15, i4'=i4-it15, i5'=it3

		-2+i1 >= 0 [0]: unchanged
		
		-it3 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -it3 >= 0 -> -it3 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+it15 >= 0 /\ -2+i1 >= 0 /\ -it3 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it15, i4'=i4-it15, i5'=it3
	New rule:
	(-1+it15 >= 0 /\ -2+i1 >= 0 /\ -it3 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it15, i4'=i4-it15, i5'=it3

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f0 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=2
   1: (-2+i1 == 0 /\ -1+it2 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=it2
   2: (-2+i1 == 0 /\ -it3 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=it3
   3: (-1+it15 >= 0 /\ -2+i1 >= 0 /\ -it3 >= 0 /\ 2-i1 >= 0) /\ i1'=0
   4: (-1+it15 >= 0 /\ -2+i1 >= 0 /\ -it3 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it15, i4'=i4-it15, i5'=it3

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3, 0 -> 4
1 -> 1, 1 -> 2, 1 -> 3, 1 -> 4
2 -> 1, 2 -> 2, 2 -> 3, 2 -> 4
4 -> 1, 4 -> 2, 4 -> 3

Step with 3

	Trace

	0[(-1+i1 == 0)]
	3[(-1+it15 >= 0 /\ -2+i1 >= 0 /\ -it3 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{3[T]}
	
Refute

	Counterexample

	(i1=1, i3=-1, i5=0)
	-0-> (i1=2, i3=0, i4=2, i5=0 )
	-3-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  C
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(2, X₁)
  t₁: l1(X₀, X₁) → l1(1+X₀, C) :|: 1 ≤ C
  t₂: l1(X₀, X₁) → l1(X₀-1, C) :|: C ≤ 0


Preprocessing
  Eliminate variables [X₀; X₁] that do not contribute to the problem


Problem after Preprocessing
  Start:  l0
  Program_Vars:  
  Temp_Vars:  C
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₃: l0 → l1
  t₄: l1 → l1 :|: 1 ≤ C
  t₅: l1 → l1 :|: C ≤ 0


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₃: 1 {O(1)}
    t₄: inf {Infinity}
    t₅: inf {Infinity}


Costbounds
  Overall costbound: inf {Infinity}
    t₃: 1 {O(1)}
    t₄: inf {Infinity}
    t₅: inf {Infinity}


Sizebounds

