WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_abc_bb1_in/4,eval_abc_bb2_in/4]
1. non_recursive  : [eval_abc_stop/4]
2. non_recursive  : [eval_abc_bb3_in/4]
3. non_recursive  : [exit_location/1]
4. non_recursive  : [eval_abc_bb1_in_loop_cont/5]
5. non_recursive  : [eval_abc_4/4]
6. non_recursive  : [eval_abc_3/4]
7. non_recursive  : [eval_abc_2/4]
8. non_recursive  : [eval_abc_1/4]
9. non_recursive  : [eval_abc_0/4]
10. non_recursive  : [eval_abc_bb0_in/4]
11. non_recursive  : [eval_abc_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_abc_bb1_in/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_abc_bb1_in_loop_cont/5
5. SCC is partially evaluated into eval_abc_4/4
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is partially evaluated into eval_abc_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_abc_bb1_in/4 
* CE 5 is refined into CE [8] 
* CE 4 is refined into CE [9] 
* CE 3 is refined into CE [10] 


### Cost equations --> "Loop" of eval_abc_bb1_in/4 
* CEs [10] --> Loop 8 
* CEs [8] --> Loop 9 
* CEs [9] --> Loop 10 

### Ranking functions of CR eval_abc_bb1_in(V_b,V_i_0,B,C) 
* RF of phase [8]: [V_b-V_i_0+1]

#### Partial ranking functions of CR eval_abc_bb1_in(V_b,V_i_0,B,C) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    V_b-V_i_0+1


### Specialization of cost equations eval_abc_bb1_in_loop_cont/5 
* CE 7 is refined into CE [11] 
* CE 6 is refined into CE [12] 


### Cost equations --> "Loop" of eval_abc_bb1_in_loop_cont/5 
* CEs [11] --> Loop 11 
* CEs [12] --> Loop 12 

### Ranking functions of CR eval_abc_bb1_in_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR eval_abc_bb1_in_loop_cont(A,B,C,D,E) 


### Specialization of cost equations eval_abc_4/4 
* CE 2 is refined into CE [13,14,15,16] 


### Cost equations --> "Loop" of eval_abc_4/4 
* CEs [14] --> Loop 13 
* CEs [13,16] --> Loop 14 
* CEs [15] --> Loop 15 

### Ranking functions of CR eval_abc_4(V_a,V_b,V_i_0,B) 

#### Partial ranking functions of CR eval_abc_4(V_a,V_b,V_i_0,B) 


### Specialization of cost equations eval_abc_start/4 
* CE 1 is refined into CE [17,18,19] 


### Cost equations --> "Loop" of eval_abc_start/4 
* CEs [19] --> Loop 16 
* CEs [18] --> Loop 17 
* CEs [17] --> Loop 18 

### Ranking functions of CR eval_abc_start(V_a,V_b,V_i_0,B) 

#### Partial ranking functions of CR eval_abc_start(V_a,V_b,V_i_0,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_abc_bb1_in(V_b,V_i_0,B,C):
* Chain [[8],10]: 1*it(8)+0
  Such that:it(8) =< V_b-V_i_0+1

  with precondition: [B=2,V_b+1=C,V_b>=V_i_0] 

* Chain [[8],9]: 1*it(8)+0
  Such that:it(8) =< V_b-V_i_0+1

  with precondition: [B=3,V_b>=V_i_0] 

* Chain [10]: 0
  with precondition: [B=2,V_i_0=C,V_i_0>=V_b+1] 

* Chain [9]: 0
  with precondition: [B=3] 


#### Cost of chains of eval_abc_bb1_in_loop_cont(A,B,C,D,E):
* Chain [12]: 0
  with precondition: [A=2] 

* Chain [11]: 0
  with precondition: [A=3] 


#### Cost of chains of eval_abc_4(V_a,V_b,V_i_0,B):
* Chain [15]: 0
  with precondition: [] 

* Chain [14]: 2*s(1)+0
  Such that:aux(1) =< -V_a+V_b+1
s(1) =< aux(1)

  with precondition: [V_b>=V_a] 

* Chain [13]: 0
  with precondition: [V_a>=V_b+1] 


#### Cost of chains of eval_abc_start(V_a,V_b,V_i_0,B):
* Chain [18]: 0
  with precondition: [] 

* Chain [17]: 2*s(4)+0
  Such that:s(3) =< -V_a+V_b+1
s(4) =< s(3)

  with precondition: [V_b>=V_a] 

* Chain [16]: 0
  with precondition: [V_a>=V_b+1] 


Closed-form bounds of eval_abc_start(V_a,V_b,V_i_0,B): 
-------------------------------------
* Chain [18] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [17] with precondition: [V_b>=V_a] 
    - Upper bound: -2*V_a+2*V_b+2 
    - Complexity: n 
* Chain [16] with precondition: [V_a>=V_b+1] 
    - Upper bound: 0 
    - Complexity: constant 

### Maximum cost of eval_abc_start(V_a,V_b,V_i_0,B): nat(-V_a+V_b+1)*2 
Asymptotic class: n 
* Total analysis performed in 32 ms.

