WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: f1

Location map:
LoAT_sink -> 0
f1 -> 1
f2 -> 2

Rules:
   0: (-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3
   1: (-2+i1 == 0 /\ -1+i5 >= 0 /\ -2+i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   2: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -2+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2
2 -> 1, 2 -> 2

Step with 0

	Trace

	0[(-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	0[(-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0)]
	2[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -2+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 == 0 /\ -2+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
	New rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0 /\ -1-it9+i5 >= 0) /\ i1'=i1, i3'=i3+it9, i5'=-it9+i5

		-1+i4 >= 0 [0]: unchanged
		
		-2+i1 >= 0 [0]: unchanged
		
		-2+i5 >= 0 [0]: montonic decrease yields -1-it9+i5 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-1+i4 >= 0 -> -1+i4 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, -2+i5 >= 0 -> -1-it9+i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0 /\ -1-it9+i5 >= 0) /\ i1'=i1, i3'=i3+it9, i5'=-it9+i5
	New rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0 /\ -1-it9+i5 >= 0) /\ i3'=i3+it9, i5'=-it9+i5
	
	Instantiation

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0 /\ -1-it9+i5 >= 0) /\ i3'=i3+it9, i5'=-it9+i5
	New rule:
	(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=-1+i3+i5, i5'=1

Start location: f1

Location map:
LoAT_sink -> 0
f1 -> 1
f2 -> 2

Rules:
   0: (-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3
   1: (-2+i1 == 0 /\ -1+i5 >= 0 /\ -2+i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   2: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -2+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
   3: (0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=-1+i3+i5, i5'=1

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3
1 -> 1, 1 -> 2, 1 -> 3
2 -> 1, 2 -> 2, 2 -> 3
3 -> 1, 3 -> 2

	Trace

	0[(-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0)]
	3[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 3[T]}
	
Step with 1

	Trace

	0[(-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0)]
	3[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i5 >= 0 /\ 2-i1 >= 0)]
	1[(-2+i1 == 0 /\ -1+i5 >= 0 /\ -2+i4 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 3[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -1+i5 >= 0 /\ -2+i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
	New rule:
	(-2+i1 >= 0 /\ -1+it26 >= 0 /\ -1+i4-it26 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it26, i4'=i4-it26

		-2+i1 >= 0 [0]: unchanged
		
		-1+i5 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		-2+i4 >= 0 [0]: montonic decrease yields -1+i4-it26 >= 0
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -1+i5 >= 0 -> -1+i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -2+i4 >= 0 -> -1+i4-it26 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ -1+it26 >= 0 /\ -1+i4-it26 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it26, i4'=i4-it26
	New rule:
	(-2+i1 >= 0 /\ -1+it26 >= 0 /\ -1+i4-it26 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it26, i4'=i4-it26
	
	Instantiation

	Original rule:
	(-2+i1 >= 0 /\ -1+it26 >= 0 /\ -1+i4-it26 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it26, i4'=i4-it26
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -2+i4 >= 0) /\ i3'=-1+i3+i4, i4'=1

Start location: f1

Location map:
LoAT_sink -> 0
f1 -> 1
f2 -> 2

Rules:
   0: (-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3
   1: (-2+i1 == 0 /\ -1+i5 >= 0 /\ -2+i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   2: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -2+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
   3: (0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=-1+i3+i5, i5'=1
   4: (0 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -2+i4 >= 0) /\ i3'=-1+i3+i4, i4'=1

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3, 0 -> 4
1 -> 1, 1 -> 2, 1 -> 3, 1 -> 4
2 -> 1, 2 -> 2, 2 -> 3, 2 -> 4
3 -> 1, 3 -> 2, 3 -> 4
4 -> 1, 4 -> 2, 4 -> 3

	Trace

	0[(-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0)]
	3[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i5 >= 0 /\ 2-i1 >= 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -2+i4 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 3[T]}
	{1[T], 4[T]}
	
Backtrack

	Trace

	0[(-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0)]
	3[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 3[T], 4[T]}
	
Step with 1

	Trace

	0[(-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0)]
	3[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i5 >= 0 /\ 2-i1 >= 0)]
	1[(-2+i1 == 0 /\ -1+i5 >= 0 /\ -2+i4 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 3[T], 4[T]}
	{}
	
Covered

	Trace

	0[(-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0)]
	3[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 2[T], 3[T], 4[T]}
	
Backtrack

	Trace

	0[(-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{3[T]}
	
Step with 4

	Trace

	0[(-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -2+i4 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{4[T]}
	
Step with 3

	Trace

	0[(-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -2+i4 >= 0)]
	3[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -2+i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{1[T], 4[T]}
	{3[T]}
	
Backtrack

	Trace

	0[(-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -2+i4 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{1[T], 3[T], 4[T]}
	
Step with 2

	Trace

	0[(-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -2+i4 >= 0)]
	2[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -2+i5 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{1[T], 3[T], 4[T]}
	{}
	
Covered

	Trace

	0[(-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -2+i4 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{1[T], 2[T], 3[T], 4[T]}
	
Backtrack

	Trace

	0[(-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{3[T], 4[T]}
	
Step with 1

	Trace

	0[(-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0)]
	1[(-2+i1 == 0 /\ -1+i5 >= 0 /\ -2+i4 >= 0)]
	
	Blocked

	{}
	{3[T], 4[T]}
	{}
	
Covered

	Trace

	0[(-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 3[T], 4[T]}
	
Step with 2

	Trace

	0[(-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0)]
	2[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -2+i5 >= 0)]
	
	Blocked

	{}
	{1[T], 3[T], 4[T]}
	{}
	
Covered

	Trace

	0[(-1+i4 >= 0 /\ -1+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 2[T], 3[T], 4[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(X₀, X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₁
  t₁: l1(X₀, X₁) → l1(X₀-1, X₁) :|: 1 ≤ X₁ ∧ 2 ≤ X₀
  t₂: l1(X₀, X₁) → l1(X₀, X₁-1) :|: 1 ≤ X₀ ∧ 2 ≤ X₁


Preprocessing
  Found invariant 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ 1 ≤ X₀ for location l1


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(X₀, X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₁
  t₁: l1(X₀, X₁) → l1(X₀-1, X₁) :|: 1 ≤ X₁ ∧ 2 ≤ X₀ ∧ 1 ≤ X₀ ∧ 2 ≤ X₀+X₁
  t₂: l1(X₀, X₁) → l1(X₀, X₁-1) :|: 1 ≤ X₀ ∧ 2 ≤ X₁ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁


MPRF for transition t₁: l1(X₀, X₁) → l1(X₀-1, X₁) :|: 1 ≤ X₁ ∧ 2 ≤ X₀ ∧ 1 ≤ X₀ ∧ 2 ≤ X₀+X₁ of depth 1:
  new bound:
    X₀ {O(n)}

  MPRF:
    • l1: [X₀]




MPRF for transition t₂: l1(X₀, X₁) → l1(X₀, X₁-1) :|: 1 ≤ X₀ ∧ 2 ≤ X₁ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ of depth 1:
  new bound:
    X₁ {O(n)}

  MPRF:
    • l1: [X₁]




All Bounds
Timebounds
  Overall timebound:X₀+X₁+1 {O(n)}
    t₀: 1 {O(1)}
    t₁: X₀ {O(n)}
    t₂: X₁ {O(n)}


Costbounds
  Overall costbound: X₀+X₁+1 {O(n)}
    t₀: 1 {O(1)}
    t₁: X₀ {O(n)}
    t₂: X₁ {O(n)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₁, X₀: X₀ {O(n)}
    t₁, X₁: X₁ {O(n)}
    t₂, X₀: X₀ {O(n)}
    t₂, X₁: X₁ {O(n)}

