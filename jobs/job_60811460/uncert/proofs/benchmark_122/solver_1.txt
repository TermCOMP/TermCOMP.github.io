WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
f -> 2

Rules:
   0: (-2+i1 == 0 /\ -1-i6+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
   1: (-2+i1 == 0 /\ -1-i6+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=1+i6
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 0, 0 -> 1
1 -> 0, 1 -> 1
2 -> 0, 2 -> 1

Step with 2

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 1

	Trace

	2[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ -1-i6+i4-i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -1-i6+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=1+i6
	New rule:
	(-i6+i4-it11-i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0) /\ i1'=i1, i3'=i3+it11, i6'=i6+it11

		-2+i1 >= 0 [0]: unchanged
		
		-1-i6+i4-i5 >= 0 [0]: montonic decrease yields -i6+i4-it11-i5 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -1-i6+i4-i5 >= 0 -> -i6+i4-it11-i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-i6+i4-it11-i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0) /\ i1'=i1, i3'=i3+it11, i6'=i6+it11
	New rule:
	(-i6+i4-it11-i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0) /\ i3'=i3+it11, i6'=i6+it11
	
	Instantiation

	Original rule:
	(-i6+i4-it11-i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0) /\ i3'=i3+it11, i6'=i6+it11
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ -1-i6+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=-i6+i3+i4-i5, i6'=i4-i5

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
f -> 2

Rules:
   0: (-2+i1 == 0 /\ -1-i6+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
   1: (-2+i1 == 0 /\ -1-i6+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=1+i6
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   3: (0 >= 0 /\ -2+i1 >= 0 /\ -1-i6+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=-i6+i3+i4-i5, i6'=i4-i5

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 3
1 -> 0, 1 -> 1, 1 -> 3
2 -> 0, 2 -> 1, 2 -> 3
3 -> 0, 3 -> 1

	Trace

	2[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ -1-i6+i4-i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 3[T]}
	
Backtrack

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{3[T]}
	
Step with 0

	Trace

	2[(-1+i1 == 0)]
	0[(-2+i1 == 0 /\ -1-i6+i4-i5 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -1-i6+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
	New rule:
	(-1+it32 >= 0 /\ -2+i1 >= 0 /\ -i6-it32+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it32, i5'=it32+i5

		-2+i1 >= 0 [0]: unchanged
		
		-1-i6+i4-i5 >= 0 [0]: montonic decrease yields -i6-it32+i4-i5 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -1-i6+i4-i5 >= 0 -> -i6-it32+i4-i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+it32 >= 0 /\ -2+i1 >= 0 /\ -i6-it32+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it32, i5'=it32+i5
	New rule:
	(-1+it32 >= 0 /\ -2+i1 >= 0 /\ -i6-it32+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it32, i5'=it32+i5
	
	Instantiation

	Original rule:
	(-1+it32 >= 0 /\ -2+i1 >= 0 /\ -i6-it32+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it32, i5'=it32+i5
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ -1-i6+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=-i6+i3+i4-i5, i5'=-i6+i4

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
f -> 2

Rules:
   0: (-2+i1 == 0 /\ -1-i6+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
   1: (-2+i1 == 0 /\ -1-i6+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=1+i6
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   3: (0 >= 0 /\ -2+i1 >= 0 /\ -1-i6+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=-i6+i3+i4-i5, i6'=i4-i5
   4: (0 >= 0 /\ -2+i1 >= 0 /\ -1-i6+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=-i6+i3+i4-i5, i5'=-i6+i4

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 3, 0 -> 4
1 -> 0, 1 -> 1, 1 -> 3, 1 -> 4
2 -> 0, 2 -> 1, 2 -> 3, 2 -> 4
3 -> 0, 3 -> 1, 3 -> 4
4 -> 0, 4 -> 1, 4 -> 3

	Trace

	2[(-1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ -1-i6+i4-i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{0[T], 4[T]}
	
Backtrack

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{3[T], 4[T]}
	
Step with 1

	Trace

	2[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ -1-i6+i4-i5 >= 0)]
	
	Blocked

	{}
	{3[T], 4[T]}
	{}
	
Covered

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 3[T], 4[T]}
	
Step with 0

	Trace

	2[(-1+i1 == 0)]
	0[(-2+i1 == 0 /\ -1-i6+i4-i5 >= 0)]
	
	Blocked

	{}
	{1[T], 3[T], 4[T]}
	{}
	
Covered

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 1[T], 3[T], 4[T]}
	
Backtrack

	Trace

	Blocked

	{2[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₂: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₀: l1(X₀, X₁, X₂) → l1(X₀, 1+X₁, X₂) :|: 1+X₁+X₂ ≤ X₀
  t₁: l1(X₀, X₁, X₂) → l1(X₀, X₁, 1+X₂) :|: 1+X₁+X₂ ≤ X₀


Preprocessing
Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₂: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₀: l1(X₀, X₁, X₂) → l1(X₀, 1+X₁, X₂) :|: 1+X₁+X₂ ≤ X₀
  t₁: l1(X₀, X₁, X₂) → l1(X₀, X₁, 1+X₂) :|: 1+X₁+X₂ ≤ X₀


MPRF for transition t₀: l1(X₀, X₁, X₂) → l1(X₀, 1+X₁, X₂) :|: 1+X₁+X₂ ≤ X₀ of depth 1:
  new bound:
    X₀+X₁+X₂ {O(n)}

  MPRF:
    • l1: [X₀-X₁-X₂]




MPRF for transition t₁: l1(X₀, X₁, X₂) → l1(X₀, X₁, 1+X₂) :|: 1+X₁+X₂ ≤ X₀ of depth 1:
  new bound:
    X₀+X₁+X₂ {O(n)}

  MPRF:
    • l1: [X₀-X₁-X₂]




All Bounds
Timebounds
  Overall timebound:2⋅X₀+2⋅X₁+2⋅X₂+1 {O(n)}
    t₀: X₀+X₁+X₂ {O(n)}
    t₁: X₀+X₁+X₂ {O(n)}
    t₂: 1 {O(1)}


Costbounds
  Overall costbound: 2⋅X₀+2⋅X₁+2⋅X₂+1 {O(n)}
    t₀: X₀+X₁+X₂ {O(n)}
    t₁: X₀+X₁+X₂ {O(n)}
    t₂: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: 2⋅X₁+X₀+X₂ {O(n)}
    t₀, X₂: 2⋅X₂+X₀+X₁ {O(n)}
    t₁, X₀: X₀ {O(n)}
    t₁, X₁: 2⋅X₁+X₀+X₂ {O(n)}
    t₁, X₂: 2⋅X₂+X₀+X₁ {O(n)}
    t₂, X₀: X₀ {O(n)}
    t₂, X₁: X₁ {O(n)}
    t₂, X₂: X₂ {O(n)}

