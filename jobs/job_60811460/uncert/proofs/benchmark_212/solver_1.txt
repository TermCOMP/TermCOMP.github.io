NO

# LoAT Proof:
NO

NO

Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f7 -> 2
f13 -> 3
f15 -> 4
f17 -> 5

Rules:
   0: (-2+i1 == 0 /\ -1-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=it2
   1: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=it3
   2: -3+i1 == 0 /\ i1'=3, i3'=1+i3
   3: -4+i1 == 0 /\ i1'=5, i3'=1+i3
   4: (-2+i1 == 0 /\ i4 == 0) /\ i1'=3, i3'=1+i3, i4'=0, i5'=1
   5: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it4, i5'=1

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 4
1 -> 0, 1 -> 1, 1 -> 4
2 -> 2
4 -> 2
5 -> 0, 5 -> 1, 5 -> 4

Step with 5

	Trace

	5[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 4

	Trace

	5[(-1+i1 == 0)]
	4[(-2+i1 == 0 /\ i4 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Step with 2

	Trace

	5[(-1+i1 == 0)]
	4[(-2+i1 == 0 /\ i4 == 0)]
	2[(-3+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-3+i1 == 0) /\ i1'=3, i3'=1+i3
	New rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it20 >= 0) /\ i1'=0

		-3+i1 >= 0 [0]: unchanged
		
		3-i1 >= 0 [0]: unchanged
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, 3-i1 >= 0 -> 3-i1 >= 0}

	Loop Acceleration

	Original rule:
	(-3+i1 == 0) /\ i1'=3, i3'=1+i3
	New rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it20 >= 0) /\ i1'=i1, i3'=it20+i3

		-3+i1 >= 0 [0]: unchanged
		
		3-i1 >= 0 [0]: unchanged
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, 3-i1 >= 0 -> 3-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it20 >= 0) /\ i1'=i1, i3'=it20+i3
	New rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it20 >= 0) /\ i3'=it20+i3

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f7 -> 2
f13 -> 3
f15 -> 4
f17 -> 5

Rules:
   0: (-2+i1 == 0 /\ -1-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=it2
   1: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=it3
   2: -3+i1 == 0 /\ i1'=3, i3'=1+i3
   3: -4+i1 == 0 /\ i1'=5, i3'=1+i3
   4: (-2+i1 == 0 /\ i4 == 0) /\ i1'=3, i3'=1+i3, i4'=0, i5'=1
   5: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it4, i5'=1
   6: (-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it20 >= 0) /\ i1'=0
   7: (-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it20 >= 0) /\ i3'=it20+i3

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 4
1 -> 0, 1 -> 1, 1 -> 4
2 -> 2, 2 -> 6, 2 -> 7
4 -> 2, 4 -> 6, 4 -> 7
5 -> 0, 5 -> 1, 5 -> 4
7 -> 2, 7 -> 6

Step with 6

	Trace

	5[(-1+i1 == 0)]
	4[(-2+i1 == 0 /\ i4 == 0)]
	6[(-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it20 >= 0)]
	
	Blocked

	{}
	{}
	{}
	{6[T]}
	
Refute

	Counterexample

	(i1=1, i3=-1)
	-5-> (i1=2, i3=0, i4=0, i5=1 )
	-4-> (i1=3, i3=1, i4=0, i5=1 )
	-6-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  C
  Locations:  l0, l1, l2, l3, l4
  Return Locations:  
  Transitions:
  t₅: l0(X₀, X₁) → l1(C, 1)
  t₀: l1(X₀, X₁) → l1(C, X₁) :|: 1+X₀ ≤ 0
  t₁: l1(X₀, X₁) → l1(C, X₁) :|: 1 ≤ X₀
  t₄: l1(X₀, X₁) → l2(0, 1) :|: 0 ≤ X₀ ∧ X₀ ≤ 0
  t₂: l2(X₀, X₁) → l2(X₀, X₁)
  t₃: l4(X₀, X₁) → l3(X₀, X₁)


Preprocessing
  Cut unreachable locations [l3; l4] from the program graph


  Eliminate variables [X₁] that do not contribute to the problem


  Found invariant X₀ ≤ 0 ∧ 0 ≤ X₀ for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  C
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₆: l0(X₀) → l1(C)
  t₇: l1(X₀) → l1(C) :|: 1+X₀ ≤ 0
  t₈: l1(X₀) → l1(C) :|: 1 ≤ X₀
  t₉: l1(X₀) → l2(0) :|: 0 ≤ X₀ ∧ X₀ ≤ 0
  t₁₀: l2(X₀) → l2(X₀) :|: 0 ≤ X₀ ∧ X₀ ≤ 0


  Found invariant X₀ ≤ 0 ∧ 0 ≤ X₀ for location l2


  Found invariant X₀ ≤ 0 ∧ 0 ≤ X₀ for location l2_v1


  Found invariant X₀ ≤ 0 ∧ 0 ≤ X₀ for location l2


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₆: 1 {O(1)}
    t₇: inf {Infinity}
    t₈: inf {Infinity}
    t₉: 1 {O(1)}
    t₁₀: inf {Infinity}


Costbounds
  Overall costbound: inf {Infinity}
    t₆: 1 {O(1)}
    t₇: inf {Infinity}
    t₈: inf {Infinity}
    t₉: 1 {O(1)}
    t₁₀: inf {Infinity}


Sizebounds
    t₉, X₀: 0 {O(1)}
    t₁₀, X₀: 0 {O(1)}

