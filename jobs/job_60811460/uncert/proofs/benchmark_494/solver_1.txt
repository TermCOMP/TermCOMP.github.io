NO

# LoAT Proof:
NO

NO

Initial ITS

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f2 -> 2
f300 -> 3

Rules:
   0: (-2+i1 == 0 /\ -1-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+it2
   1: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=1+it3
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   3: (-2+i1 == 0 /\ i4 == 0) /\ i1'=3, i3'=1+i3, i5'=it4

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 3
1 -> 0, 1 -> 1, 1 -> 3
2 -> 0, 2 -> 1, 2 -> 3

Step with 2

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 3

	Trace

	2[(-1+i1 == 0)]
	3[(-2+i1 == 0 /\ i4 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{3[T]}
	
Step with 0

	Trace

	2[(-1+i1 == 0)]
	0[(-2+i1 == 0 /\ -1-i4 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-2+i1 == 0 /\ -1-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+it2
	New rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it2-i4 <= 0 /\ -1-i4 >= 0) /\ i1'=0

		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		-1-i4 >= 0 [0]: eventual decrease yields (-it2 >= 0 /\ -1-i4 >= 0)
		
		-1-i4 >= 0 [1]: eventual increase yields (-1+it2-i4 <= 0 /\ -1-i4 >= 0)
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -1-i4 >= 0 -> (-1+it2-i4 <= 0 /\ -1-i4 >= 0)}

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -1-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+it2
	New rule:
	(-2+i1 >= 0 /\ -1+it21 >= 0 /\ -it2 >= 0 /\ 2-i1 >= 0 /\ -1-i4 >= 0) /\ i1'=i1, i3'=i3+it21, i4'=-1+it2

		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		-1-i4 >= 0 [0]: eventual decrease yields (-it2 >= 0 /\ -1-i4 >= 0)
		
		-1-i4 >= 0 [1]: eventual increase yields (-1+it2-i4 <= 0 /\ -1-i4 >= 0)
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -1-i4 >= 0 -> (-it2 >= 0 /\ -1-i4 >= 0)}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ -1+it21 >= 0 /\ -it2 >= 0 /\ 2-i1 >= 0 /\ -1-i4 >= 0) /\ i1'=i1, i3'=i3+it21, i4'=-1+it2
	New rule:
	(-2+i1 >= 0 /\ -1+it21 >= 0 /\ -it2 >= 0 /\ 2-i1 >= 0 /\ -1-i4 >= 0) /\ i3'=i3+it21, i4'=-1+it2

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f2 -> 2
f300 -> 3

Rules:
   0: (-2+i1 == 0 /\ -1-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+it2
   1: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=1+it3
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   3: (-2+i1 == 0 /\ i4 == 0) /\ i1'=3, i3'=1+i3, i5'=it4
   4: (-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it2-i4 <= 0 /\ -1-i4 >= 0) /\ i1'=0
   5: (-2+i1 >= 0 /\ -1+it21 >= 0 /\ -it2 >= 0 /\ 2-i1 >= 0 /\ -1-i4 >= 0) /\ i3'=i3+it21, i4'=-1+it2

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 3, 0 -> 4, 0 -> 5
1 -> 0, 1 -> 1, 1 -> 3, 1 -> 4, 1 -> 5
2 -> 0, 2 -> 1, 2 -> 3, 2 -> 4, 2 -> 5
5 -> 0, 5 -> 1, 5 -> 3, 5 -> 4

Step with 4

	Trace

	2[(-1+i1 == 0)]
	4[(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it2-i4 <= 0 /\ -1-i4 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{4[T]}
	
Refute

	Counterexample

	(i1=1, i3=-2, i4=-1, i5=0)
	-2-> (i1=2, i3=-1, i4=-1, i5=0 )
	-4-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  C
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₂: l0(X₀, X₁) → l1(X₀, X₁)
  t₀: l1(X₀, X₁) → l1(C-1, X₁) :|: 1+X₀ ≤ 0
  t₁: l1(X₀, X₁) → l1(1+C, X₁) :|: 1 ≤ X₀
  t₃: l1(X₀, X₁) → l2(X₀, C) :|: 0 ≤ X₀ ∧ X₀ ≤ 0


Preprocessing
  Eliminate variables [X₁] that do not contribute to the problem


  Found invariant X₀ ≤ 0 ∧ 0 ≤ X₀ for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  C
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₄: l0(X₀) → l1(X₀)
  t₅: l1(X₀) → l1(C-1) :|: 1+X₀ ≤ 0
  t₆: l1(X₀) → l1(1+C) :|: 1 ≤ X₀
  t₇: l1(X₀) → l2(X₀) :|: 0 ≤ X₀ ∧ X₀ ≤ 0


  Found invariant X₀ ≤ 0 ∧ 0 ≤ X₀ for location l2


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₄: 1 {O(1)}
    t₅: inf {Infinity}
    t₆: inf {Infinity}
    t₇: 1 {O(1)}


Costbounds
  Overall costbound: inf {Infinity}
    t₄: 1 {O(1)}
    t₅: inf {Infinity}
    t₆: inf {Infinity}
    t₇: 1 {O(1)}


Sizebounds
    t₄, X₀: X₀ {O(n)}
    t₇, X₀: 0 {O(1)}

