NO

# LoAT Proof:
NO

NO

Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f1 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=3000
   1: (3999-i4 >= 0 /\ -2+i1 == 0 /\ 889+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1000+i5

Dependency graph:
0 -> 1
1 -> 1

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(3999-i4 >= 0 /\ -2+i1 == 0 /\ 889+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(3999-i4 >= 0 /\ -2+i1 == 0 /\ 889+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1000+i5
	New rule:
	(3999-i4 >= 0 /\ -2+i1 >= 0 /\ 889+i5 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i1'=0

		3999-i4 >= 0 [0]: unchanged
		
		-2+i1 >= 0 [0]: unchanged
		
		889+i5 >= 0 [0]: monotonic increase yields 889+i5 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {3999-i4 >= 0 -> 3999-i4 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, 889+i5 >= 0 -> 889+i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Loop Acceleration

	Original rule:
	(3999-i4 >= 0 /\ -2+i1 == 0 /\ 889+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1000+i5
	New rule:
	(3999-i4 >= 0 /\ -2+i1 >= 0 /\ 889+i5 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it9, i5'=1000*it9+i5

		3999-i4 >= 0 [0]: unchanged
		
		-2+i1 >= 0 [0]: unchanged
		
		889+i5 >= 0 [0]: monotonic increase yields 889+i5 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {3999-i4 >= 0 -> 3999-i4 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, 889+i5 >= 0 -> 889+i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(3999-i4 >= 0 /\ -2+i1 >= 0 /\ 889+i5 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it9, i5'=1000*it9+i5
	New rule:
	(3999-i4 >= 0 /\ -2+i1 >= 0 /\ 889+i5 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it9, i5'=1000*it9+i5

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f1 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=3000
   1: (3999-i4 >= 0 /\ -2+i1 == 0 /\ 889+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1000+i5
   2: (3999-i4 >= 0 /\ -2+i1 >= 0 /\ 889+i5 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i1'=0
   3: (3999-i4 >= 0 /\ -2+i1 >= 0 /\ 889+i5 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it9, i5'=1000*it9+i5

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3
1 -> 1, 1 -> 2, 1 -> 3
3 -> 1, 3 -> 2

Step with 2

	Trace

	0[(-1+i1 == 0)]
	2[(3999-i4 >= 0 /\ -2+i1 >= 0 /\ 889+i5 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{2[T]}
	
Refute

	Counterexample

	(i1=1, i3=-1, i5=0)
	-0-> (i1=2, i3=0, i4=3000, i5=0 )
	-2-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(3000, X₁)
  t₁: l1(X₀, X₁) → l1(X₀, 1000+X₁) :|: X₀ ≤ 3999 ∧ 0 ≤ 889+X₁


Preprocessing
  Found invariant X₀ ≤ 3000 ∧ 3000 ≤ X₀ for location l1


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(3000, X₁)
  t₁: l1(X₀, X₁) → l1(X₀, 1000+X₁) :|: X₀ ≤ 3999 ∧ 0 ≤ 889+X₁ ∧ X₀ ≤ 3000 ∧ 3000 ≤ X₀


  Found invariant X₀ ≤ 3000 ∧ 3000 ≤ X₀ for location l1


  Found invariant 111 ≤ X₁ ∧ 3111 ≤ X₀+X₁ ∧ X₀ ≤ 2889+X₁ ∧ X₀ ≤ 3000 ∧ 3000 ≤ X₀ for location l1_v1


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₀: 1 {O(1)}
    t₁: inf {Infinity}


Costbounds
  Overall costbound: inf {Infinity}
    t₀: 1 {O(1)}
    t₁: inf {Infinity}


Sizebounds
    t₀, X₀: 3000 {O(1)}
    t₀, X₁: X₁ {O(n)}
    t₁, X₀: 3000 {O(1)}

