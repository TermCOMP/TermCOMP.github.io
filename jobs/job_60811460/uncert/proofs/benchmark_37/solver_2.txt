WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalEx6bb1in/6,evalEx6bb2in/6,evalEx6bb3in/6,evalEx6bbin/6]
1. non_recursive  : [evalEx6stop/4]
2. non_recursive  : [evalEx6returnin/4]
3. non_recursive  : [exit_location/1]
4. non_recursive  : [evalEx6bb3in_loop_cont/5]
5. non_recursive  : [evalEx6entryin/4]
6. non_recursive  : [evalEx6start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalEx6bb3in/6
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into evalEx6bb3in_loop_cont/5
5. SCC is partially evaluated into evalEx6entryin/4
6. SCC is partially evaluated into evalEx6start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalEx6bb3in/6 
* CE 6 is refined into CE [9] 
* CE 5 is refined into CE [10] 
* CE 3 is refined into CE [11] 
* CE 4 is refined into CE [12] 


### Cost equations --> "Loop" of evalEx6bb3in/6 
* CEs [11] --> Loop 9 
* CEs [12] --> Loop 10 
* CEs [9] --> Loop 11 
* CEs [10] --> Loop 12 

### Ranking functions of CR evalEx6bb3in(A,B,C,D,E,F) 

#### Partial ranking functions of CR evalEx6bb3in(A,B,C,D,E,F) 
* Partial RF of phase [9,10]:
  - RF of loop [9:1]:
    A-B depends on loops [10:1] 
    -B+C
  - RF of loop [10:1]:
    -A+B+1 depends on loops [9:1] 
    -A+C


### Specialization of cost equations evalEx6bb3in_loop_cont/5 
* CE 8 is refined into CE [13] 
* CE 7 is refined into CE [14] 


### Cost equations --> "Loop" of evalEx6bb3in_loop_cont/5 
* CEs [13] --> Loop 13 
* CEs [14] --> Loop 14 

### Ranking functions of CR evalEx6bb3in_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR evalEx6bb3in_loop_cont(A,B,C,D,E) 


### Specialization of cost equations evalEx6entryin/4 
* CE 2 is refined into CE [15,16,17,18] 


### Cost equations --> "Loop" of evalEx6entryin/4 
* CEs [15] --> Loop 15 
* CEs [16,18] --> Loop 16 
* CEs [17] --> Loop 17 

### Ranking functions of CR evalEx6entryin(A,B,C,D) 

#### Partial ranking functions of CR evalEx6entryin(A,B,C,D) 


### Specialization of cost equations evalEx6start/4 
* CE 1 is refined into CE [19,20,21] 


### Cost equations --> "Loop" of evalEx6start/4 
* CEs [21] --> Loop 18 
* CEs [20] --> Loop 19 
* CEs [19] --> Loop 20 

### Ranking functions of CR evalEx6start(A,B,C,D) 

#### Partial ranking functions of CR evalEx6start(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of evalEx6bb3in(A,B,C,D,E,F):
* Chain [[9,10],12]: 1*it(9)+1*it(10)+0
  Such that:it(10) =< -A+C
it(10) =< -A+E
it(9) =< -B+F

  with precondition: [D=2,C=F,E>=A,C>=B+1,E>=C] 

* Chain [[9,10],11]: 1*it(9)+1*it(10)+0
  Such that:it(10) =< -A+C
it(9) =< -B+C

  with precondition: [D=3,C>=B+1] 

* Chain [12]: 0
  with precondition: [D=2,E=A,B=F,B>=C] 

* Chain [11]: 0
  with precondition: [D=3] 


#### Cost of chains of evalEx6bb3in_loop_cont(A,B,C,D,E):
* Chain [14]: 0
  with precondition: [A=2] 

* Chain [13]: 0
  with precondition: [A=3] 


#### Cost of chains of evalEx6entryin(A,B,C,D):
* Chain [17]: 0
  with precondition: [] 

* Chain [16]: 2*s(1)+2*s(2)+0
  Such that:aux(5) =< -A+C
aux(6) =< -B+C
s(2) =< aux(5)
s(1) =< aux(6)

  with precondition: [C>=A+1] 

* Chain [15]: 0
  with precondition: [A>=C] 


#### Cost of chains of evalEx6start(A,B,C,D):
* Chain [20]: 0
  with precondition: [] 

* Chain [19]: 2*s(7)+2*s(8)+0
  Such that:s(5) =< -A+C
s(6) =< -B+C
s(7) =< s(5)
s(8) =< s(6)

  with precondition: [C>=A+1] 

* Chain [18]: 0
  with precondition: [A>=C] 


Closed-form bounds of evalEx6start(A,B,C,D): 
-------------------------------------
* Chain [20] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [19] with precondition: [C>=A+1] 
    - Upper bound: -2*A+2*C+nat(-B+C)*2 
    - Complexity: n 
* Chain [18] with precondition: [A>=C] 
    - Upper bound: 0 
    - Complexity: constant 

### Maximum cost of evalEx6start(A,B,C,D): nat(-B+C)*2+nat(-A+C)*2 
Asymptotic class: n 
* Total analysis performed in 52 ms.

