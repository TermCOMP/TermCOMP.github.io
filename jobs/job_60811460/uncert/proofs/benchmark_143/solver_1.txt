MAYBE

# LoAT Proof:
Initial ITS

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-2+i1 == 0 /\ -10+it2+2*i4 >= 0 /\ i4 >= 0 /\ 10-it2-2*i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=it2
   1: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 0
1 -> 0

Preprocessed Transitions

	Extracted Implied Equalities

	Original rule:
	(-2+i1 == 0 /\ -10+it2+2*i4 >= 0 /\ i4 >= 0 /\ 10-it2-2*i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=it2
	New rule:
	(-2+i1 == 0 /\ -10+it2+2*i4 >= 0 /\ i4 >= 0 /\ 10-it2-2*i4 >= 0 /\ 10-it2-2*i4 == 0) /\ i1'=2, i3'=1+i3, i4'=it2
	
	Propagated Equalities

	Original rule:
	(-2+i1 == 0 /\ -10+it2+2*i4 >= 0 /\ i4 >= 0 /\ 10-it2-2*i4 >= 0 /\ 10-it2-2*i4 == 0) /\ i1'=2, i3'=1+i3, i4'=it2
	New rule:
	(0 >= 0 /\ 0 == 0 /\ -2+i1 == 0 /\ i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=10-2*i4
	
		propagated equality it2 = 10-2*i4
		
	Simplified Guard

	Original rule:
	(0 >= 0 /\ 0 == 0 /\ -2+i1 == 0 /\ i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=10-2*i4
	New rule:
	(-2+i1 == 0 /\ i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=10-2*i4

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   1: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   2: (-2+i1 == 0 /\ i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=10-2*i4

Dependency graph:
1 -> 2
2 -> 2

Unrolled Loops

	Unrolling

	Original rule:
	(-2+i1 == 0 /\ i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=10-2*i4
	New rule:
	(0 == 0 /\ 10-2*i4 >= 0 /\ -2+i1 == 0 /\ i4 >= 0) /\ i1'=2, i3'=2+i3, i4'=-10+4*i4
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ 10-2*i4 >= 0 /\ -2+i1 == 0 /\ i4 >= 0) /\ i1'=2, i3'=2+i3, i4'=-10+4*i4
	New rule:
	(10-2*i4 >= 0 /\ -2+i1 == 0 /\ i4 >= 0) /\ i1'=2, i3'=2+i3, i4'=-10+4*i4

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   1: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   2: (-2+i1 == 0 /\ i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=10-2*i4
   3: (10-2*i4 >= 0 /\ -2+i1 == 0 /\ i4 >= 0) /\ i1'=2, i3'=2+i3, i4'=-10+4*i4

Dependency graph:
1 -> 2, 1 -> 3
2 -> 2, 2 -> 3
3 -> 2, 3 -> 3

Step with 1

	Trace

	1[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 3

	Trace

	1[(-1+i1 == 0)]
	3[(10-2*i4 >= 0 /\ -2+i1 == 0 /\ i4 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Step with 3

	Trace

	1[(-1+i1 == 0)]
	3[(10-2*i4 >= 0 /\ -2+i1 == 0 /\ i4 >= 0)]
	3[(10-2*i4 >= 0 /\ -2+i1 == 0 /\ i4 >= 0)]
	
	Blocked

	{}
	{}
	{}
	{}
	
Covered

	Trace

	1[(-1+i1 == 0)]
	3[(10-2*i4 >= 0 /\ -2+i1 == 0 /\ i4 >= 0)]
	
	Blocked

	{}
	{}
	{3[T]}
	
Step with 2

	Trace

	1[(-1+i1 == 0)]
	3[(10-2*i4 >= 0 /\ -2+i1 == 0 /\ i4 >= 0)]
	2[(-2+i1 == 0 /\ i4 >= 0)]
	
	Blocked

	{}
	{}
	{3[T]}
	{}
	
Step with 2

	Trace

	1[(-1+i1 == 0)]
	3[(10-2*i4 >= 0 /\ -2+i1 == 0 /\ i4 >= 0)]
	2[(-2+i1 == 0 /\ i4 >= 0)]
	2[(-2+i1 == 0 /\ i4 >= 0)]
	
	Blocked

	{}
	{}
	{3[T]}
	{3[T]}
	{}
	
Covered

	Trace

	1[(-1+i1 == 0)]
	3[(10-2*i4 >= 0 /\ -2+i1 == 0 /\ i4 >= 0)]
	2[(-2+i1 == 0 /\ i4 >= 0)]
	
	Blocked

	{}
	{}
	{3[T]}
	{2[T], 3[T]}
	
Backtrack

	Trace

	1[(-1+i1 == 0)]
	3[(10-2*i4 >= 0 /\ -2+i1 == 0 /\ i4 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 3[T]}
	
Backtrack

	Trace

	1[(-1+i1 == 0)]
	
	Blocked

	{}
	{3[T]}
	
Step with 2

	Trace

	1[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ i4 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{}
	
Step with 2

	Trace

	1[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ i4 >= 0)]
	2[(-2+i1 == 0 /\ i4 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{}
	{}
	
Covered

	Trace

	1[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ i4 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{2[T]}
	
Step with 3

	Trace

	1[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ i4 >= 0)]
	3[(10-2*i4 >= 0 /\ -2+i1 == 0 /\ i4 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{2[T]}
	{}
	
Step with 2

	Trace

	1[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ i4 >= 0)]
	3[(10-2*i4 >= 0 /\ -2+i1 == 0 /\ i4 >= 0)]
	2[(-2+i1 == 0 /\ i4 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{2[T]}
	{}
	{}
	
Backtrack

	Trace

	1[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ i4 >= 0)]
	3[(10-2*i4 >= 0 /\ -2+i1 == 0 /\ i4 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{2[T]}
	{2[T]}
	
Backtrack

	Trace

	1[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ i4 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{2[T], 3[T]}
	
Backtrack

	Trace

	1[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T], 3[T]}
	
Backtrack

	Trace

	Blocked

	{1[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  B
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₁: l0(X₀) → l1(X₀)
  t₀: l1(X₀) → l1(B) :|: B+2⋅X₀ ≤ 10 ∧ 10 ≤ B+2⋅X₀ ∧ 0 ≤ X₀


Preprocessing
Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  B
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₁: l0(X₀) → l1(X₀)
  t₀: l1(X₀) → l1(B) :|: B+2⋅X₀ ≤ 10 ∧ 10 ≤ B+2⋅X₀ ∧ 0 ≤ X₀


  Found invariant X₀ ≤ 10 for location l1_v1


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₀: inf {Infinity}
    t₁: 1 {O(1)}


Costbounds
  Overall costbound: inf {Infinity}
    t₀: inf {Infinity}
    t₁: 1 {O(1)}


Sizebounds
    t₁, X₀: X₀ {O(n)}

