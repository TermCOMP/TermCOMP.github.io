WORST_CASE(?,O(1))

# LoAT Proof:
Initial ITS

Start location: f12

Location map:
LoAT_sink -> 0
f12 -> 1
f5 -> 2
f11 -> 3
f10 -> 4
f7 -> 5
f8 -> 6

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=400, i5'=0, i6'=0
   1: (i6 == 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3, i6'=0, i7'=0, i8'=0
   2: (-2+i1 == 0 /\ -1+i6 >= 0) /\ i1'=4, i3'=1+i3, i7'=i6, i8'=i6
   3: (-1-i6 >= 0 /\ -2+i1 == 0) /\ i1'=4, i3'=1+i3, i7'=i6, i8'=i6
   4: -5+i1 == 0 /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=it4, i7'=it3, i9'=it4
   5: -6+i1 == 0 /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=it6, i7'=it5, i9'=it6
   6: (i6 == 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=it8, i7'=it7, i9'=it8

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3, 0 -> 6
4 -> 1, 4 -> 2, 4 -> 3, 4 -> 6
5 -> 1, 5 -> 2, 5 -> 3, 5 -> 6
6 -> 1, 6 -> 2, 6 -> 3, 6 -> 6

Refined Dependency Graph

	Removed the following edges: 0 -> 1, 0 -> 2, 0 -> 3

Start location: f12

Location map:
LoAT_sink -> 0
f12 -> 1
f5 -> 2
f11 -> 3
f10 -> 4
f7 -> 5
f8 -> 6

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=400, i5'=0, i6'=0
   1: (i6 == 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3, i6'=0, i7'=0, i8'=0
   2: (-2+i1 == 0 /\ -1+i6 >= 0) /\ i1'=4, i3'=1+i3, i7'=i6, i8'=i6
   3: (-1-i6 >= 0 /\ -2+i1 == 0) /\ i1'=4, i3'=1+i3, i7'=i6, i8'=i6
   4: -5+i1 == 0 /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=it4, i7'=it3, i9'=it4
   5: -6+i1 == 0 /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=it6, i7'=it5, i9'=it6
   6: (i6 == 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=it8, i7'=it7, i9'=it8

Dependency graph:
0 -> 6
4 -> 1, 4 -> 2, 4 -> 3, 4 -> 6
5 -> 1, 5 -> 2, 5 -> 3, 5 -> 6
6 -> 1, 6 -> 2, 6 -> 3, 6 -> 6

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 6

	Trace

	0[(-1+i1 == 0)]
	6[(i6 == 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(i6 == 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=it8, i7'=it7, i9'=it8
	New rule:
	(-1+it29 >= 0 /\ i6 >= 0 /\ -i6 >= 0 /\ -it8 >= 0 /\ -2+i1 >= 0 /\ it8 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ i4-i5-it29 >= 0) /\ i1'=i1, i3'=i3+it29, i5'=i5+it29, i6'=it8, i7'=it7, i9'=it8

		i6 >= 0 [0]: eventual decrease yields (i6 >= 0 /\ it8 >= 0)
		
		i6 >= 0 [1]: eventual increase yields (i6 >= 0 /\ i6-it8 <= 0)
		
		-i6 >= 0 [0]: eventual decrease yields (-i6 >= 0 /\ -it8 >= 0)
		
		-i6 >= 0 [1]: eventual increase yields (-i6 >= 0 /\ -i6+it8 <= 0)
		
		-2+i1 >= 0 [0]: unchanged
		
		-1+i4-i5 >= 0 [0]: montonic decrease yields (-1+i4-i5 >= 0 /\ i4-i5-it29 >= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {i6 >= 0 -> (i6 >= 0 /\ it8 >= 0), -i6 >= 0 -> (-i6 >= 0 /\ -it8 >= 0), -2+i1 >= 0 -> -2+i1 >= 0, -1+i4-i5 >= 0 -> (-1+i4-i5 >= 0 /\ i4-i5-it29 >= 0), 2-i1 >= 0 -> 2-i1 >= 0}

	Extracted Implied Equalities

	Original rule:
	(-1+it29 >= 0 /\ i6 >= 0 /\ -i6 >= 0 /\ -it8 >= 0 /\ -2+i1 >= 0 /\ it8 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ i4-i5-it29 >= 0) /\ i1'=i1, i3'=i3+it29, i5'=i5+it29, i6'=it8, i7'=it7, i9'=it8
	New rule:
	(-1+it29 >= 0 /\ i6 >= 0 /\ -i6 >= 0 /\ -i6 == 0 /\ -it8 >= 0 /\ -2+i1 >= 0 /\ it8 >= 0 /\ it8 == 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ i4-i5-it29 >= 0) /\ i1'=i1, i3'=i3+it29, i5'=i5+it29, i6'=it8, i7'=it7, i9'=it8
	
	Propagated Equalities

	Original rule:
	(-1+it29 >= 0 /\ i6 >= 0 /\ -i6 >= 0 /\ -i6 == 0 /\ -it8 >= 0 /\ -2+i1 >= 0 /\ it8 >= 0 /\ it8 == 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ i4-i5-it29 >= 0) /\ i1'=i1, i3'=i3+it29, i5'=i5+it29, i6'=it8, i7'=it7, i9'=it8
	New rule:
	(0 >= 0 /\ 0 == 0 /\ -1+it29 >= 0 /\ i6 >= 0 /\ -i6 >= 0 /\ -i6 == 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ i4-i5-it29 >= 0) /\ i1'=i1, i3'=i3+it29, i5'=i5+it29, i6'=0, i7'=it7, i9'=0
	
		propagated equality it8 = 0
		
	Simplified Guard

	Original rule:
	(0 >= 0 /\ 0 == 0 /\ -1+it29 >= 0 /\ i6 >= 0 /\ -i6 >= 0 /\ -i6 == 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ i4-i5-it29 >= 0) /\ i1'=i1, i3'=i3+it29, i5'=i5+it29, i6'=0, i7'=it7, i9'=0
	New rule:
	(-1+it29 >= 0 /\ i6 >= 0 /\ -i6 >= 0 /\ -i6 == 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ i4-i5-it29 >= 0) /\ i1'=i1, i3'=i3+it29, i5'=i5+it29, i6'=0, i7'=it7, i9'=0
	
	Removed Trivial Updates

	Original rule:
	(-1+it29 >= 0 /\ i6 >= 0 /\ -i6 >= 0 /\ -i6 == 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ i4-i5-it29 >= 0) /\ i1'=i1, i3'=i3+it29, i5'=i5+it29, i6'=0, i7'=it7, i9'=0
	New rule:
	(-1+it29 >= 0 /\ i6 >= 0 /\ -i6 >= 0 /\ -i6 == 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ i4-i5-it29 >= 0) /\ i3'=i3+it29, i5'=i5+it29, i6'=0, i7'=it7, i9'=0
	
	Instantiation

	Original rule:
	(-1+it29 >= 0 /\ i6 >= 0 /\ -i6 >= 0 /\ -i6 == 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ i4-i5-it29 >= 0) /\ i3'=i3+it29, i5'=i5+it29, i6'=0, i7'=it7, i9'=0
	New rule:
	(0 >= 0 /\ i6 >= 0 /\ -i6 >= 0 /\ -i6 == 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0) /\ i3'=i3+i4-i5, i5'=i4, i6'=0, i7'=it7, i9'=0

Start location: f12

Location map:
LoAT_sink -> 0
f12 -> 1
f5 -> 2
f11 -> 3
f10 -> 4
f7 -> 5
f8 -> 6

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=400, i5'=0, i6'=0
   1: (i6 == 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3, i6'=0, i7'=0, i8'=0
   2: (-2+i1 == 0 /\ -1+i6 >= 0) /\ i1'=4, i3'=1+i3, i7'=i6, i8'=i6
   3: (-1-i6 >= 0 /\ -2+i1 == 0) /\ i1'=4, i3'=1+i3, i7'=i6, i8'=i6
   4: -5+i1 == 0 /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=it4, i7'=it3, i9'=it4
   5: -6+i1 == 0 /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=it6, i7'=it5, i9'=it6
   6: (i6 == 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=it8, i7'=it7, i9'=it8
   7: (0 >= 0 /\ i6 >= 0 /\ -i6 >= 0 /\ -i6 == 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0) /\ i3'=i3+i4-i5, i5'=i4, i6'=0, i7'=it7, i9'=0

Dependency graph:
0 -> 6, 0 -> 7
4 -> 1, 4 -> 2, 4 -> 3, 4 -> 6, 4 -> 7
5 -> 1, 5 -> 2, 5 -> 3, 5 -> 6, 5 -> 7
6 -> 1, 6 -> 2, 6 -> 3, 6 -> 6, 6 -> 7
7 -> 1, 7 -> 2, 7 -> 3, 7 -> 6

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ i6 >= 0 /\ -i6 >= 0 /\ -i6 == 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0)]
	
	Blocked

	{}
	{}
	{6[T], 7[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ i6 >= 0 /\ -i6 >= 0 /\ -i6 == 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0)]
	1[(i6 == 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{}
	{2[T], 3[T], 6[T], 7[T]}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ i6 >= 0 /\ -i6 >= 0 /\ -i6 == 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0)]
	
	Blocked

	{}
	{}
	{1[T], 2[T], 3[T], 6[T], 7[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{7[T]}
	
Step with 6

	Trace

	0[(-1+i1 == 0)]
	6[(i6 == 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{7[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{6[T], 7[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃, X₄, X₅
  Temp_Vars:  G, H
  Locations:  l0, l1, l2, l3, l4, l5
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂, X₃, X₄, X₅) → l1(400, 0, 0, X₃, X₄, X₅)
  t₆: l1(X₀, X₁, X₂, X₃, X₄, X₅) → l1(X₀, 1+X₁, G, H, X₄, G) :|: 1+X₁ ≤ X₀ ∧ 0 ≤ X₂ ∧ X₂ ≤ 0
  t₂: l1(X₀, X₁, X₂, X₃, X₄, X₅) → l2(X₀, X₁, X₂, X₂, X₂, X₅) :|: 1 ≤ X₂
  t₃: l1(X₀, X₁, X₂, X₃, X₄, X₅) → l2(X₀, X₁, X₂, X₂, X₂, X₅) :|: 1+X₂ ≤ 0
  t₁: l1(X₀, X₁, X₂, X₃, X₄, X₅) → l3(X₀, X₁, 0, 0, 0, X₅) :|: X₀ ≤ X₁ ∧ 0 ≤ X₂ ∧ X₂ ≤ 0
  t₄: l4(X₀, X₁, X₂, X₃, X₄, X₅) → l1(X₀, 1+X₁, G, H, X₄, G)
  t₅: l5(X₀, X₁, X₂, X₃, X₄, X₅) → l1(X₀, 1+X₁, G, H, X₄, G)


Preprocessing
  Cut unreachable locations [l4; l5] from the program graph


  Eliminate variables [H; X₃; X₄; X₅] that do not contribute to the problem


  Found invariant X₁ ≤ 400 ∧ X₁ ≤ X₀ ∧ X₀+X₁ ≤ 800 ∧ 0 ≤ X₁ ∧ 400 ≤ X₀+X₁ ∧ X₀ ≤ 400+X₁ ∧ X₀ ≤ 400 ∧ 400 ≤ X₀ for location l1


  Found invariant X₁ ≤ 400 ∧ X₁ ≤ X₀ ∧ X₀+X₁ ≤ 800 ∧ 0 ≤ X₁ ∧ 400 ≤ X₀+X₁ ∧ X₀ ≤ 400+X₁ ∧ X₀ ≤ 400 ∧ 400 ≤ X₀ for location l2


  Found invariant X₂ ≤ 0 ∧ 400+X₂ ≤ X₁ ∧ X₁+X₂ ≤ 400 ∧ 400+X₂ ≤ X₀ ∧ X₀+X₂ ≤ 400 ∧ 0 ≤ X₂ ∧ 400 ≤ X₁+X₂ ∧ X₁ ≤ 400+X₂ ∧ 400 ≤ X₀+X₂ ∧ X₀ ≤ 400+X₂ ∧ X₁ ≤ 400 ∧ X₁ ≤ X₀ ∧ X₀+X₁ ≤ 800 ∧ 400 ≤ X₁ ∧ 800 ≤ X₀+X₁ ∧ X₀ ≤ X₁ ∧ X₀ ≤ 400 ∧ 400 ≤ X₀ for location l3


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  G
  Locations:  l0, l1, l2, l3
  Return Locations:  
  Transitions:
  t₇: l0(X₀, X₁, X₂) → l1(400, 0, 0)
  t₈: l1(X₀, X₁, X₂) → l1(X₀, 1+X₁, G) :|: 1+X₁ ≤ X₀ ∧ 0 ≤ X₂ ∧ X₂ ≤ 0 ∧ X₀+X₁ ≤ 800 ∧ X₀ ≤ 400 ∧ X₀ ≤ 400+X₁ ∧ X₁ ≤ 400 ∧ 400 ≤ X₀ ∧ 400 ≤ X₀+X₁ ∧ X₁ ≤ X₀ ∧ 0 ≤ X₁
  t₉: l1(X₀, X₁, X₂) → l2(X₀, X₁, X₂) :|: 1 ≤ X₂ ∧ X₀+X₁ ≤ 800 ∧ X₀ ≤ 400 ∧ X₀ ≤ 400+X₁ ∧ X₁ ≤ 400 ∧ 400 ≤ X₀ ∧ 400 ≤ X₀+X₁ ∧ X₁ ≤ X₀ ∧ 0 ≤ X₁
  t₁₀: l1(X₀, X₁, X₂) → l2(X₀, X₁, X₂) :|: 1+X₂ ≤ 0 ∧ X₀+X₁ ≤ 800 ∧ X₀ ≤ 400 ∧ X₀ ≤ 400+X₁ ∧ X₁ ≤ 400 ∧ 400 ≤ X₀ ∧ 400 ≤ X₀+X₁ ∧ X₁ ≤ X₀ ∧ 0 ≤ X₁
  t₁₁: l1(X₀, X₁, X₂) → l3(X₀, X₁, 0) :|: X₀ ≤ X₁ ∧ 0 ≤ X₂ ∧ X₂ ≤ 0 ∧ X₀+X₁ ≤ 800 ∧ X₀ ≤ 400 ∧ X₀ ≤ 400+X₁ ∧ X₁ ≤ 400 ∧ 400 ≤ X₀ ∧ 400 ≤ X₀+X₁ ∧ X₁ ≤ X₀ ∧ 0 ≤ X₁


MPRF for transition t₈: l1(X₀, X₁, X₂) → l1(X₀, 1+X₁, G) :|: 1+X₁ ≤ X₀ ∧ 0 ≤ X₂ ∧ X₂ ≤ 0 ∧ X₀+X₁ ≤ 800 ∧ X₀ ≤ 400 ∧ X₀ ≤ 400+X₁ ∧ X₁ ≤ 400 ∧ 400 ≤ X₀ ∧ 400 ≤ X₀+X₁ ∧ X₁ ≤ X₀ ∧ 0 ≤ X₁ of depth 1:
  new bound:
    401 {O(1)}

  MPRF:
    • l1: [401-X₁]




All Bounds
Timebounds
  Overall timebound:405 {O(1)}
    t₇: 1 {O(1)}
    t₈: 401 {O(1)}
    t₉: 1 {O(1)}
    t₁₀: 1 {O(1)}
    t₁₁: 1 {O(1)}


Costbounds
  Overall costbound: 405 {O(1)}
    t₇: 1 {O(1)}
    t₈: 401 {O(1)}
    t₉: 1 {O(1)}
    t₁₀: 1 {O(1)}
    t₁₁: 1 {O(1)}


Sizebounds
    t₇, X₀: 400 {O(1)}
    t₇, X₁: 0 {O(1)}
    t₇, X₂: 0 {O(1)}
    t₈, X₀: 400 {O(1)}
    t₈, X₁: 400 {O(1)}
    t₉, X₀: 400 {O(1)}
    t₉, X₁: 400 {O(1)}
    t₁₀, X₀: 400 {O(1)}
    t₁₀, X₁: 400 {O(1)}
    t₁₁, X₀: 400 {O(1)}
    t₁₁, X₁: 400 {O(1)}
    t₁₁, X₂: 0 {O(1)}

