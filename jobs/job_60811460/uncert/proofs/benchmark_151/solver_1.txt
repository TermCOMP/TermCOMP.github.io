WORST_CASE(Omega(n^2),O(n^2))

# LoAT Proof:
WORST_CASE(Omega(n^2),?)

WORST_CASE(Omega(n^1),?)
WORST_CASE(Omega(n^2),?)
Initial ITS

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2
l2 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=i4+i5
   2: (-2+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=1+i3
   3: (-3+i1 == 0 /\ -1+i5 >= 0) /\ i1'=3, i3'=1+i3, i5'=-1+i5

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2
2 -> 3
3 -> 3

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ -i4 >= 0)]
	3[(-3+i1 == 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ -1+i5 >= 0) /\ i1'=3, i3'=1+i3, i5'=-1+i5
	New rule:
	(-3+i1 >= 0 /\ -1+it13 >= 0 /\ 3-i1 >= 0 /\ i5-it13 >= 0) /\ i1'=i1, i3'=i3+it13, i5'=i5-it13

		-3+i1 >= 0 [0]: unchanged
		
		3-i1 >= 0 [0]: unchanged
		
		-1+i5 >= 0 [0]: montonic decrease yields i5-it13 >= 0
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, 3-i1 >= 0 -> 3-i1 >= 0, -1+i5 >= 0 -> i5-it13 >= 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ -1+it13 >= 0 /\ 3-i1 >= 0 /\ i5-it13 >= 0) /\ i1'=i1, i3'=i3+it13, i5'=i5-it13
	New rule:
	(-3+i1 >= 0 /\ -1+it13 >= 0 /\ 3-i1 >= 0 /\ i5-it13 >= 0) /\ i3'=i3+it13, i5'=i5-it13
	
	Instantiation

	Original rule:
	(-3+i1 >= 0 /\ -1+it13 >= 0 /\ 3-i1 >= 0 /\ i5-it13 >= 0) /\ i3'=i3+it13, i5'=i5-it13
	New rule:
	(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+i5 >= 0) /\ i3'=i3+i5, i5'=0

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2
l2 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=i4+i5
   2: (-2+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=1+i3
   3: (-3+i1 == 0 /\ -1+i5 >= 0) /\ i1'=3, i3'=1+i3, i5'=-1+i5
   4: (0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+i5 >= 0) /\ i3'=i3+i5, i5'=0

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2
2 -> 3, 2 -> 4
3 -> 3, 3 -> 4
4 -> 3

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ -i4 >= 0)]
	4[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	{3[T], 4[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{}
	{4[T]}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ -i4 >= 0)]
	3[(-3+i1 == 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{}
	{4[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{}
	{3[T], 4[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=i4+i5
	New rule:
	(-it34+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it34 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it34, i4'=-it34+i4, i5'=-1/2*it34^2+1/2*it34+it34*i4+i5

		-1+i4 >= 0 [0]: montonic decrease yields -it34+i4 >= 0
		
		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-1+i4 >= 0 -> -it34+i4 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-it34+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it34 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it34, i4'=-it34+i4, i5'=-1/2*it34^2+1/2*it34+it34*i4+i5
	New rule:
	(-it34+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it34 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it34, i4'=-it34+i4, i5'=-1/2*it34^2+1/2*it34+it34*i4+i5
	
	Instantiation

	Original rule:
	(-it34+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it34 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it34, i4'=-it34+i4, i5'=-1/2*it34^2+1/2*it34+it34*i4+i5
	New rule:
	(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4, i4'=0, i5'=1/2*i4^2+1/2*i4+i5

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2
l2 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=i4+i5
   2: (-2+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=1+i3
   3: (-3+i1 == 0 /\ -1+i5 >= 0) /\ i1'=3, i3'=1+i3, i5'=-1+i5
   4: (0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+i5 >= 0) /\ i3'=i3+i5, i5'=0
   5: (0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4, i4'=0, i5'=1/2*i4^2+1/2*i4+i5

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 5
1 -> 1, 1 -> 2, 1 -> 5
2 -> 3, 2 -> 4
3 -> 3, 3 -> 4
4 -> 3
5 -> 1, 5 -> 2

	Trace

	0[(-1+i1 == 0)]
	5[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T], 5[T]}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	5[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	2[(-2+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T], 5[T]}
	{}
	
Step with 4

	Trace

	0[(-1+i1 == 0)]
	5[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	2[(-2+i1 == 0 /\ -i4 >= 0)]
	4[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T], 5[T]}
	{}
	{4[T]}
	
Poly(n^2)

Backtrack

	Trace

	0[(-1+i1 == 0)]
	5[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	2[(-2+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T], 5[T]}
	{4[T]}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	5[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	2[(-2+i1 == 0 /\ -i4 >= 0)]
	3[(-3+i1 == 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T], 5[T]}
	{4[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	5[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	2[(-2+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T], 5[T]}
	{3[T], 4[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	5[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T], 2[T], 5[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T], 5[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{2[T], 5[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 2[T], 5[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Poly(n^2)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^2))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(X₀, X₁)
  t₁: l1(X₀, X₁) → l1(X₀-1, X₀+X₁) :|: 1 ≤ X₀
  t₂: l1(X₀, X₁) → l2(X₀, X₁) :|: X₀ ≤ 0
  t₃: l2(X₀, X₁) → l2(X₀, X₁-1) :|: 1 ≤ X₁


Preprocessing
  Found invariant X₀ ≤ 0 for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(X₀, X₁)
  t₁: l1(X₀, X₁) → l1(X₀-1, X₀+X₁) :|: 1 ≤ X₀
  t₂: l1(X₀, X₁) → l2(X₀, X₁) :|: X₀ ≤ 0
  t₃: l2(X₀, X₁) → l2(X₀, X₁-1) :|: 1 ≤ X₁ ∧ X₀ ≤ 0


MPRF for transition t₁: l1(X₀, X₁) → l1(X₀-1, X₀+X₁) :|: 1 ≤ X₀ of depth 1:
  new bound:
    X₀ {O(n)}

  MPRF:
    • l1: [X₀]




MPRF for transition t₃: l2(X₀, X₁) → l2(X₀, X₁-1) :|: 1 ≤ X₁ ∧ X₀ ≤ 0 of depth 1:
  new bound:
    2⋅X₀^2+2⋅X₀+2⋅X₁ {O(n^2)}

  MPRF:
    • l2: [X₁]




  Found invariant 0 ≤ X₁ ∧ X₀ ≤ X₁ ∧ X₀ ≤ 0 for location l2_v1


  Found invariant X₀ ≤ 0 for location l2


All Bounds
Timebounds
  Overall timebound:2⋅X₀^2+2⋅X₁+3⋅X₀+2 {O(n^2)}
    t₀: 1 {O(1)}
    t₁: X₀ {O(n)}
    t₂: 1 {O(1)}
    t₃: 2⋅X₀^2+2⋅X₀+2⋅X₁ {O(n^2)}


Costbounds
  Overall costbound: 2⋅X₀^2+2⋅X₁+3⋅X₀+2 {O(n^2)}
    t₀: 1 {O(1)}
    t₁: X₀ {O(n)}
    t₂: 1 {O(1)}
    t₃: 2⋅X₀^2+2⋅X₀+2⋅X₁ {O(n^2)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₁, X₀: X₀ {O(n)}
    t₁, X₁: 2⋅X₀^2+2⋅X₀+X₁ {O(n^2)}
    t₂, X₀: 2⋅X₀ {O(n)}
    t₂, X₁: 2⋅X₀^2+2⋅X₀+2⋅X₁ {O(n^2)}
    t₃, X₀: 2⋅X₀ {O(n)}
    t₃, X₁: 2⋅X₀^2+2⋅X₀+2⋅X₁ {O(n^2)}

