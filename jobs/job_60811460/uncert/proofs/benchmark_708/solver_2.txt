MAYBE

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_speedFails4_bb1_in/6,eval_speedFails4_bb2_in/6]
1. non_recursive  : [eval_speedFails4_stop/6]
2. non_recursive  : [eval_speedFails4_bb3_in/6]
3. non_recursive  : [exit_location/1]
4. non_recursive  : [eval_speedFails4_bb1_in_loop_cont/7]
5. non_recursive  : [eval_speedFails4_7/6]
6. non_recursive  : [eval_speedFails4_6/6]
7. non_recursive  : [eval_speedFails4_5/6]
8. non_recursive  : [eval_speedFails4_4/6]
9. non_recursive  : [eval_speedFails4_3/6]
10. non_recursive  : [eval_speedFails4_2/6]
11. non_recursive  : [eval_speedFails4_1/6]
12. non_recursive  : [eval_speedFails4_bb0_in/6]
13. non_recursive  : [eval_speedFails4_start/6]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_speedFails4_bb1_in/6
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_speedFails4_bb1_in_loop_cont/7
5. SCC is partially evaluated into eval_speedFails4_7/6
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is partially evaluated into eval_speedFails4_4/6
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_speedFails4_start/6

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_speedFails4_bb1_in/6 
* CE 8 is refined into CE [11] 
* CE 7 is refined into CE [12] 
* CE 6 is refined into CE [13] 
* CE 5 is refined into CE [14] 


### Cost equations --> "Loop" of eval_speedFails4_bb1_in/6 
* CEs [13] --> Loop 11 
* CEs [14] --> Loop 12 
* CEs [11] --> Loop 13 
* CEs [12] --> Loop 14 

### Ranking functions of CR eval_speedFails4_bb1_in(V__,V__0,V_0,V_n,B,C) 

#### Partial ranking functions of CR eval_speedFails4_bb1_in(V__,V__0,V_0,V_n,B,C) 


### Specialization of cost equations eval_speedFails4_bb1_in_loop_cont/7 
* CE 10 is refined into CE [15] 
* CE 9 is refined into CE [16] 


### Cost equations --> "Loop" of eval_speedFails4_bb1_in_loop_cont/7 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 

### Ranking functions of CR eval_speedFails4_bb1_in_loop_cont(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR eval_speedFails4_bb1_in_loop_cont(A,B,C,D,E,F,G) 


### Specialization of cost equations eval_speedFails4_7/6 
* CE 4 is refined into CE [17,18,19,20,21,22,23,24,25,26] 


### Cost equations --> "Loop" of eval_speedFails4_7/6 
* CEs [25,26] --> Loop 17 
* CEs [23,24] --> Loop 18 
* CEs [19] --> Loop 19 
* CEs [22] --> Loop 20 
* CEs [21] --> Loop 21 
* CEs [20] --> Loop 22 
* CEs [18] --> Loop 23 
* CEs [17] --> Loop 24 

### Ranking functions of CR eval_speedFails4_7(V__,V__0,V_0,V_n,V_x,B) 

#### Partial ranking functions of CR eval_speedFails4_7(V__,V__0,V_0,V_n,V_x,B) 


### Specialization of cost equations eval_speedFails4_4/6 
* CE 2 is refined into CE [27,28,29,30,31] 
* CE 3 is refined into CE [32,33,34,35,36] 


### Cost equations --> "Loop" of eval_speedFails4_4/6 
* CEs [31] --> Loop 25 
* CEs [36] --> Loop 26 
* CEs [27,29] --> Loop 27 
* CEs [30] --> Loop 28 
* CEs [28] --> Loop 29 
* CEs [32,33] --> Loop 30 
* CEs [35] --> Loop 31 
* CEs [34] --> Loop 32 

### Ranking functions of CR eval_speedFails4_4(V__,V__0,V_0,V_n,V_x,B) 

#### Partial ranking functions of CR eval_speedFails4_4(V__,V__0,V_0,V_n,V_x,B) 


### Specialization of cost equations eval_speedFails4_start/6 
* CE 1 is refined into CE [37,38,39,40,41,42,43,44] 


### Cost equations --> "Loop" of eval_speedFails4_start/6 
* CEs [43,44] --> Loop 33 
* CEs [39,42] --> Loop 34 
* CEs [38,41] --> Loop 35 
* CEs [37,40] --> Loop 36 

### Ranking functions of CR eval_speedFails4_start(V__,V__0,V_0,V_n,V_x,B) 

#### Partial ranking functions of CR eval_speedFails4_start(V__,V__0,V_0,V_n,V_x,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_speedFails4_bb1_in(V__,V__0,V_0,V_n,B,C):
* Chain [[12]]...: 1*it(12)+0
  with precondition: [1>=V__,V_n>=V__0,V__+1>=0,0>=V_0] 

* Chain [[12],14]: 1*it(12)+0
  with precondition: [V__+1=0,B=2,V_n+1=C,0>=V_0,V_n>=V__0] 

* Chain [[12],13]: 1*it(12)+0
  with precondition: [B=3,1>=V__,0>=V_0,V__+1>=0,V_n>=V__0] 

* Chain [[11]]...: 1*it(11)+0
  with precondition: [1>=V__,V_n>=V__0,V__+1>=0,V_0>=1] 

* Chain [[11],14]: 1*it(11)+0
  with precondition: [V__=1,B=2,V_n+1=C,V_0>=1,V_n>=V__0] 

* Chain [[11],13]: 1*it(11)+0
  with precondition: [B=3,1>=V__,V__+1>=0,V_0>=1,V_n>=V__0] 

* Chain [14]: 0
  with precondition: [B=2,V__0=C,1>=V__,V__+1>=0,V__0>=V_n+1] 

* Chain [13]: 0
  with precondition: [B=3,1>=V__,V__+1>=0] 


#### Cost of chains of eval_speedFails4_bb1_in_loop_cont(A,B,C,D,E,F,G):
* Chain [16]: 0
  with precondition: [A=2,1>=B,B+1>=0] 

* Chain [15]: 0
  with precondition: [A=3,1>=B,B+1>=0] 


#### Cost of chains of eval_speedFails4_7(V__,V__0,V_0,V_n,V_x,B):
* Chain [24]: 1*s(1)+0
  with precondition: [V__+1=0,0>=V_0,V_n>=V_x] 

* Chain [23]: 1*s(2)+0
  with precondition: [V__=1,V_0>=1,V_n>=V_x] 

* Chain [22]: 1*s(3)+0
  with precondition: [1>=V__,0>=V_0,V__+1>=0,V_n>=V_x] 

* Chain [21]: 0
  with precondition: [1>=V__,V__+1>=0] 

* Chain [20]: 1*s(4)+0
  with precondition: [1>=V__,V__+1>=0,V_0>=1,V_n>=V_x] 

* Chain [19]: 0
  with precondition: [1>=V__,V__+1>=0,V_x>=V_n+1] 

* Chain [18]...: 1*aux(1)+0
  with precondition: [1>=V__,0>=V_0,V__+1>=0,V_n>=V_x] 

* Chain [17]...: 1*aux(2)+0
  with precondition: [1>=V__,V__+1>=0,V_0>=1,V_n>=V_x] 


#### Cost of chains of eval_speedFails4_4(V__,V__0,V_0,V_n,V_x,B):
* Chain [32]: 0
  with precondition: [0>=V_0] 

* Chain [31]: 0
  with precondition: [0>=V_0,V_x>=V_n+1] 

* Chain [30]: 1*aux(3)+0
  with precondition: [0>=V_0,V_n>=V_x] 

* Chain [29]: 0
  with precondition: [V_0>=1] 

* Chain [28]: 0
  with precondition: [V_0>=1,V_x>=V_n+1] 

* Chain [27]: 1*aux(4)+0
  with precondition: [V_0>=1,V_n>=V_x] 

* Chain [26]...: 1*s(13)+0
  with precondition: [0>=V_0,V_n>=V_x] 

* Chain [25]...: 1*s(14)+0
  with precondition: [V_0>=1,V_n>=V_x] 


#### Cost of chains of eval_speedFails4_start(V__,V__0,V_0,V_n,V_x,B):
* Chain [36]: 0
  with precondition: [] 

* Chain [35]: 0
  with precondition: [V_x>=V_n+1] 

* Chain [34]: 1*aux(5)+0
  with precondition: [V_n>=V_x] 

* Chain [33]...: 1*aux(6)+0
  with precondition: [V_n>=V_x] 


Closed-form bounds of eval_speedFails4_start(V__,V__0,V_0,V_n,V_x,B): 
-------------------------------------
* Chain [36] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [35] with precondition: [V_x>=V_n+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [34] with precondition: [V_n>=V_x] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [33]... with precondition: [V_n>=V_x] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_speedFails4_start(V__,V__0,V_0,V_n,V_x,B): inf 
Asymptotic class: infinity 
* Total analysis performed in 102 ms.

