WORST_CASE(?,O(n^1))

# LoAT Proof:
Initial ITS

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2

Rules:
   0: (i4 > 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3
   1: (-2+i1 == 0 /\ i4-i5 < 0) /\ i1'=2, i3'=1+i3, i4'=3*i4, i5'=2*i5

Dependency graph:
0 -> 1
1 -> 1

Step with 0

	Trace

	0[(i4 > 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 1

	Trace

	0[(i4 > 0 /\ -1+i1 == 0)]
	1[(-2+i1 == 0 /\ i4-i5 < 0)]
	
	Blocked

	{}
	{}
	{}
	
Step with 1

	Trace

	0[(i4 > 0 /\ -1+i1 == 0)]
	1[(-2+i1 == 0 /\ i4-i5 < 0)]
	1[(-2+i1 == 0 /\ i4-i5 < 0)]
	
	Blocked

	{}
	{}
	{}
	{}
	
Covered

	Trace

	0[(i4 > 0 /\ -1+i1 == 0)]
	1[(-2+i1 == 0 /\ i4-i5 < 0)]
	
	Blocked

	{}
	{}
	{1[T]}
	
Backtrack

	Trace

	0[(i4 > 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{1[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(X₀, X₁) :|: 1 ≤ X₀
  t₁: l1(X₀, X₁) → l1(3⋅X₀, 2⋅X₁) :|: 1+X₀ ≤ X₁


Preprocessing
  Found invariant 1 ≤ X₀ for location l1


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(X₀, X₁) :|: 1 ≤ X₀
  t₁: l1(X₀, X₁) → l1(3⋅X₀, 2⋅X₁) :|: 1+X₀ ≤ X₁ ∧ 1 ≤ X₀


TWN: t₁: l1→l1


  cycle: [t₁: l1→l1]
  original loop: (1+X₀ ≤ X₁ ∧ 1 ≤ X₀,(X₀,X₁) -> (3⋅X₀,2⋅X₁))
  transformed loop: (1+X₀ ≤ X₁ ∧ 1 ≤ X₀,(X₀,X₁) -> (3⋅X₀,2⋅X₁))
  loop: (1+X₀ ≤ X₁ ∧ 1 ≤ X₀,(X₀,X₁) -> (3⋅X₀,2⋅X₁))
  order: [X₁; X₀]
closed-form:  X₁: X₁⋅(2)^n
  X₀: X₀⋅(3)^n

  Termination: true
  Formula: 
    0 ≤ 1 ∧ 1 ≤ 0 ∧ 1 ≤ X₀ ∧ 0 ≤ X₀ ∧ X₀ ≤ 0 ∧ 0 ≤ X₁ ∧ X₁ ≤ 0
     ∨ 1 ≤ 0 ∧ 1 ≤ X₀ ∧ 0 ≤ X₀ ∧ X₀ ≤ 0 ∧ 0 ≤ X₁ ∧ X₁ ≤ 0
     ∨ 1 ≤ X₀ ∧ 1+X₀ ≤ 0
     ∨ 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 0 ≤ X₀ ∧ X₀ ≤ 0



Stabilization-Threshold for: 1+X₀ ≤ X₁
  alphas_abs: X₁
  M: 0
  N: 1
  Bound: 2⋅X₁+2 {O(n)}

TWN - Lifting for [1: l1->l1] of 2⋅X₁+4 {O(n)}
relevant size-bounds w.r.t. t₀: l0→l1:
X₁: X₁ {O(n)}
Runtime-bound of t₀: 1 {O(1)}
Results in: 2⋅X₁+4 {O(n)}
All Bounds
Timebounds
  Overall timebound:2⋅X₁+5 {O(n)}
    t₀: 1 {O(1)}
    t₁: 2⋅X₁+4 {O(n)}


Costbounds
  Overall costbound: 2⋅X₁+5 {O(n)}
    t₀: 1 {O(1)}
    t₁: 2⋅X₁+4 {O(n)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₁, X₀: 3^(2⋅X₁+4)⋅X₀ {O(EXP)}
    t₁, X₁: 2^(2⋅X₁+4)⋅X₁ {O(EXP)}

