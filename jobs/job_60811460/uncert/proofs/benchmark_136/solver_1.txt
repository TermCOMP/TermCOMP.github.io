WORST_CASE(?,O(n^1))

# LoAT Proof:
Initial ITS

Start location: sqrt

Location map:
LoAT_sink -> 0
sqrt -> 1
f -> 2
end -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0, i5'=1, i6'=1
   1: (-2+i1 == 0 /\ -i6+i7 >= 0 /\ i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=2+i5, i6'=2+i6+i5
   2: (-2+i1 == 0 /\ -1+i6-i7 >= 0) /\ i1'=3, i3'=1+i3

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ -1+i6-i7 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ -i6+i7 >= 0 /\ i5 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -i6+i7 >= 0 /\ i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=2+i5, i6'=2+i6+i5
	New rule:
	(-2+i1 >= 0 /\ -1+it19 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0 /\ 1-i6-(-1+it19)^2-it19+i7-(-1+it19)*i5 >= 0) /\ i1'=i1, i3'=i3+it19, i4'=it19+i4, i5'=2*it19+i5, i6'=i6+it19^2+it19+it19*i5

		-2+i1 >= 0 [0]: unchanged
		
		-i6+i7 >= 0 [0]: montonic decrease yields 1-i6-(-1+it19)^2-it19+i7-(-1+it19)*i5 >= 0, dependencies: i5 >= 0
		
		-i6+i7 >= 0 [1]: eventual decrease yields (-i6+i7 >= 0 /\ 1-i6-(-1+it19)^2-it19+i7-(-1+it19)*i5 >= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		i5 >= 0 [0]: monotonic increase yields i5 >= 0
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -i6+i7 >= 0 -> 1-i6-(-1+it19)^2-it19+i7-(-1+it19)*i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, i5 >= 0 -> i5 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ -1+it19 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0 /\ 1-i6-(-1+it19)^2-it19+i7-(-1+it19)*i5 >= 0) /\ i1'=i1, i3'=i3+it19, i4'=it19+i4, i5'=2*it19+i5, i6'=i6+it19^2+it19+it19*i5
	New rule:
	(-2+i1 >= 0 /\ -1+it19 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0 /\ 1-i6-(-1+it19)^2-it19+i7-(-1+it19)*i5 >= 0) /\ i3'=i3+it19, i4'=it19+i4, i5'=2*it19+i5, i6'=i6+it19^2+it19+it19*i5

Start location: sqrt

Location map:
LoAT_sink -> 0
sqrt -> 1
f -> 2
end -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0, i5'=1, i6'=1
   1: (-2+i1 == 0 /\ -i6+i7 >= 0 /\ i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=2+i5, i6'=2+i6+i5
   2: (-2+i1 == 0 /\ -1+i6-i7 >= 0) /\ i1'=3, i3'=1+i3
   3: (-2+i1 >= 0 /\ -1+it19 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0 /\ 1-i6-(-1+it19)^2-it19+i7-(-1+it19)*i5 >= 0) /\ i3'=i3+it19, i4'=it19+i4, i5'=2*it19+i5, i6'=i6+it19^2+it19+it19*i5

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3
1 -> 1, 1 -> 2, 1 -> 3
3 -> 1, 3 -> 2

	Trace

	0[(-1+i1 == 0)]
	3[(-2+i1 >= 0 /\ -1+it19 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0 /\ 1-i6-(-1+it19)^2-it19+i7-(-1+it19)*i5 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T], 3[T]}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	3[(-2+i1 >= 0 /\ -1+it19 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0 /\ 1-i6-(-1+it19)^2-it19+i7-(-1+it19)*i5 >= 0)]
	2[(-2+i1 == 0 /\ -1+i6-i7 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T], 3[T]}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	3[(-2+i1 >= 0 /\ -1+it19 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0 /\ 1-i6-(-1+it19)^2-it19+i7-(-1+it19)*i5 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T], 2[T], 3[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T], 3[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ -i6+i7 >= 0 /\ i5 >= 0)]
	
	Blocked

	{}
	{2[T], 3[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 2[T], 3[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂, X₃) → l1(0, 1, 1, X₃)
  t₁: l1(X₀, X₁, X₂, X₃) → l1(1+X₀, 2+X₁, 2+X₁+X₂, X₃) :|: 0 ≤ X₁ ∧ X₂ ≤ X₃
  t₂: l1(X₀, X₁, X₂, X₃) → l2(X₀, X₁, X₂, X₃) :|: 1+X₃ ≤ X₂


Preprocessing
  Eliminate variables [X₀] that do not contribute to the problem


  Found invariant 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ X₀ ≤ X₁ ∧ 1 ≤ X₀ for location l1


  Found invariant 1+X₂ ≤ X₁ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ X₀ ≤ X₁ ∧ 1 ≤ X₀ for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₃: l0(X₀, X₁, X₂) → l1(1, 1, X₂)
  t₄: l1(X₀, X₁, X₂) → l1(2+X₀, 2+X₀+X₁, X₂) :|: 0 ≤ X₀ ∧ X₁ ≤ X₂ ∧ 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ X₀ ≤ X₁
  t₅: l1(X₀, X₁, X₂) → l2(X₀, X₁, X₂) :|: 1+X₂ ≤ X₁ ∧ 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ X₀ ≤ X₁


MPRF for transition t₄: l1(X₀, X₁, X₂) → l1(2+X₀, 2+X₀+X₁, X₂) :|: 0 ≤ X₀ ∧ X₁ ≤ X₂ ∧ 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ X₀ ≤ X₁ of depth 1:
  new bound:
    X₂+3 {O(n)}

  MPRF:
    • l1: [1+X₀+X₂-X₁]




All Bounds
Timebounds
  Overall timebound:X₂+5 {O(n)}
    t₃: 1 {O(1)}
    t₄: X₂+3 {O(n)}
    t₅: 1 {O(1)}


Costbounds
  Overall costbound: X₂+5 {O(n)}
    t₃: 1 {O(1)}
    t₄: X₂+3 {O(n)}
    t₅: 1 {O(1)}


Sizebounds
    t₃, X₀: 1 {O(1)}
    t₃, X₁: 1 {O(1)}
    t₃, X₂: X₂ {O(n)}
    t₄, X₀: 2⋅X₂+7 {O(n)}
    t₄, X₁: 2^(X₂+3)⋅4+2^(X₂+3)⋅X₂ {O(EXP)}
    t₄, X₂: X₂ {O(n)}
    t₅, X₀: 2⋅X₂+8 {O(n)}
    t₅, X₁: 2^(X₂+3)⋅4+2^(X₂+3)⋅X₂+1 {O(EXP)}
    t₅, X₂: 2⋅X₂ {O(n)}

