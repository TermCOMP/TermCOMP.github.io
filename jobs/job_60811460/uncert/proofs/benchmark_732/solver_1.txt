WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: eval_speedSingleSingle_start

Location map:
LoAT_sink -> 0
eval_speedSingleSingle_start -> 1
eval_speedSingleSingle_bb0_in -> 2
eval_speedSingleSingle_0 -> 3
eval_speedSingleSingle_1 -> 4
eval_speedSingleSingle_2 -> 5
eval_speedSingleSingle_3 -> 6
eval_speedSingleSingle_4 -> 7
eval_speedSingleSingle_bb1_in -> 8
eval_speedSingleSingle_bb2_in -> 9
eval_speedSingleSingle_bb3_in -> 10
eval_speedSingleSingle_5 -> 11
eval_speedSingleSingle_6 -> 12
eval_speedSingleSingle_stop -> 13

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: -2+i1 == 0 /\ i1'=3, i3'=1+i3
   2: -3+i1 == 0 /\ i1'=4, i3'=1+i3
   3: -4+i1 == 0 /\ i1'=5, i3'=1+i3
   4: -5+i1 == 0 /\ i1'=6, i3'=1+i3
   5: -6+i1 == 0 /\ i1'=7, i3'=1+i3
   6: -7+i1 == 0 /\ i1'=8, i3'=1+i3, i5'=0
   7: (-i4+i5 < 0 /\ -8+i1 == 0) /\ i1'=9, i3'=1+i3
   8: (-i4+i5 >= 0 /\ -8+i1 == 0) /\ i1'=10, i3'=1+i3
   9: -9+i1 == 0 /\ i1'=11, i3'=1+i3
  10: -11+i1 == 0 /\ i1'=12, i3'=1+i3
  11: -12+i1 == 0 /\ i1'=8, i3'=1+i3, i5'=1+i5
  12: -10+i1 == 0 /\ i1'=13, i3'=1+i3

Dependency graph:
0 -> 1
1 -> 2
2 -> 3
3 -> 4
4 -> 5
5 -> 6
6 -> 7, 6 -> 8
7 -> 9
8 -> 12
9 -> 10
10 -> 11
11 -> 7, 11 -> 8

Chained Linear Paths

	Applied Chaining

	First rule:
	-1+i1 == 0 /\ i1'=2, i3'=1+i3
	Second rule:
	-2+i1 == 0 /\ i1'=3, i3'=1+i3
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 0, 1
	
	Applied Chaining

	First rule:
	-3+i1 == 0 /\ i1'=4, i3'=1+i3
	Second rule:
	-4+i1 == 0 /\ i1'=5, i3'=1+i3
	New rule:
	(0 == 0 /\ -3+i1 == 0) /\ i1'=5, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 2, 3
	
	Applied Chaining

	First rule:
	-5+i1 == 0 /\ i1'=6, i3'=1+i3
	Second rule:
	-6+i1 == 0 /\ i1'=7, i3'=1+i3
	New rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=7, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 4, 5
	
	Applied Chaining

	First rule:
	(-i4+i5 < 0 /\ -8+i1 == 0) /\ i1'=9, i3'=1+i3
	Second rule:
	-9+i1 == 0 /\ i1'=11, i3'=1+i3
	New rule:
	(0 == 0 /\ -i4+i5 < 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 7, 9
	
	Applied Chaining

	First rule:
	(-i4+i5 >= 0 /\ -8+i1 == 0) /\ i1'=10, i3'=1+i3
	Second rule:
	-10+i1 == 0 /\ i1'=13, i3'=1+i3
	New rule:
	(0 == 0 /\ -i4+i5 >= 0 /\ -8+i1 == 0) /\ i1'=13, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 8, 12
	
	Applied Chaining

	First rule:
	-11+i1 == 0 /\ i1'=12, i3'=1+i3
	Second rule:
	-12+i1 == 0 /\ i1'=8, i3'=1+i3, i5'=1+i5
	New rule:
	(0 == 0 /\ -11+i1 == 0) /\ i1'=8, i3'=2+i3, i5'=1+i5
	
	Applied Deletion

	Removed the following rules: 10, 11
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3
	Second rule:
	(0 == 0 /\ -3+i1 == 0) /\ i1'=5, i3'=2+i3
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=5, i3'=4+i3
	
	Applied Deletion

	Removed the following rules: 13, 14
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=7, i3'=2+i3
	Second rule:
	-7+i1 == 0 /\ i1'=8, i3'=1+i3, i5'=0
	New rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=8, i3'=3+i3, i5'=0
	
	Applied Deletion

	Removed the following rules: 6, 15
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -i4+i5 < 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
	Second rule:
	(0 == 0 /\ -11+i1 == 0) /\ i1'=8, i3'=2+i3, i5'=1+i5
	New rule:
	(0 == 0 /\ -i4+i5 < 0 /\ -8+i1 == 0) /\ i1'=8, i3'=4+i3, i5'=1+i5
	
	Applied Deletion

	Removed the following rules: 16, 18
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=5, i3'=4+i3
	Second rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=8, i3'=3+i3, i5'=0
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=8, i3'=7+i3, i5'=0
	
	Applied Deletion

	Removed the following rules: 19, 20

Start location: eval_speedSingleSingle_start

Location map:
LoAT_sink -> 0
eval_speedSingleSingle_start -> 1
eval_speedSingleSingle_bb0_in -> 2
eval_speedSingleSingle_0 -> 3
eval_speedSingleSingle_1 -> 4
eval_speedSingleSingle_2 -> 5
eval_speedSingleSingle_3 -> 6
eval_speedSingleSingle_4 -> 7
eval_speedSingleSingle_bb1_in -> 8
eval_speedSingleSingle_bb2_in -> 9
eval_speedSingleSingle_bb3_in -> 10
eval_speedSingleSingle_5 -> 11
eval_speedSingleSingle_6 -> 12
eval_speedSingleSingle_stop -> 13

Rules:
  17: (0 == 0 /\ -i4+i5 >= 0 /\ -8+i1 == 0) /\ i1'=13, i3'=2+i3
  21: (0 == 0 /\ -i4+i5 < 0 /\ -8+i1 == 0) /\ i1'=8, i3'=4+i3, i5'=1+i5
  22: (0 == 0 /\ -1+i1 == 0) /\ i1'=8, i3'=7+i3, i5'=0

Dependency graph:
21 -> 17, 21 -> 21
22 -> 17, 22 -> 21

Preprocessed Transitions

	Simplified Guard

	Original rule:
	(0 == 0 /\ -i4+i5 >= 0 /\ -8+i1 == 0) /\ i1'=13, i3'=2+i3
	New rule:
	(-i4+i5 >= 0 /\ -8+i1 == 0) /\ i1'=13, i3'=2+i3
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -i4+i5 < 0 /\ -8+i1 == 0) /\ i1'=8, i3'=4+i3, i5'=1+i5
	New rule:
	(-i4+i5 < 0 /\ -8+i1 == 0) /\ i1'=8, i3'=4+i3, i5'=1+i5
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=8, i3'=7+i3, i5'=0
	New rule:
	-1+i1 == 0 /\ i1'=8, i3'=7+i3, i5'=0

Start location: eval_speedSingleSingle_start

Location map:
LoAT_sink -> 0
eval_speedSingleSingle_start -> 1
eval_speedSingleSingle_bb0_in -> 2
eval_speedSingleSingle_0 -> 3
eval_speedSingleSingle_1 -> 4
eval_speedSingleSingle_2 -> 5
eval_speedSingleSingle_3 -> 6
eval_speedSingleSingle_4 -> 7
eval_speedSingleSingle_bb1_in -> 8
eval_speedSingleSingle_bb2_in -> 9
eval_speedSingleSingle_bb3_in -> 10
eval_speedSingleSingle_5 -> 11
eval_speedSingleSingle_6 -> 12
eval_speedSingleSingle_stop -> 13

Rules:
  23: (-i4+i5 >= 0 /\ -8+i1 == 0) /\ i1'=13, i3'=2+i3
  24: (-i4+i5 < 0 /\ -8+i1 == 0) /\ i1'=8, i3'=4+i3, i5'=1+i5
  25: -1+i1 == 0 /\ i1'=8, i3'=7+i3, i5'=0

Dependency graph:
24 -> 23, 24 -> 24
25 -> 23, 25 -> 24

Step with 25

	Trace

	25[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 24

	Trace

	25[(-1+i1 == 0)]
	24[(-i4+i5 < 0 /\ -8+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-i4+i5 < 0 /\ -8+i1 == 0) /\ i1'=8, i3'=4+i3, i5'=1+i5
	New rule:
	(1+i4-it9-i5 > 0 /\ -1+it9 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i1'=i1, i3'=i3+4*it9, i5'=it9+i5

		i4-i5 > 0 [0]: montonic decrease yields 1+i4-it9-i5 > 0
		
		8-i1 >= 0 [0]: unchanged
		
		-8+i1 >= 0 [0]: unchanged
		
		Replacement map: {i4-i5 > 0 -> 1+i4-it9-i5 > 0, 8-i1 >= 0 -> 8-i1 >= 0, -8+i1 >= 0 -> -8+i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(1+i4-it9-i5 > 0 /\ -1+it9 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i1'=i1, i3'=i3+4*it9, i5'=it9+i5
	New rule:
	(1+i4-it9-i5 > 0 /\ -1+it9 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i3'=i3+4*it9, i5'=it9+i5
	
	Instantiation

	Original rule:
	(1+i4-it9-i5 > 0 /\ -1+it9 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i3'=i3+4*it9, i5'=it9+i5
	New rule:
	(1 > 0 /\ -1+i4-i5 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i3'=i3+4*i4-4*i5, i5'=i4

Start location: eval_speedSingleSingle_start

Location map:
LoAT_sink -> 0
eval_speedSingleSingle_start -> 1
eval_speedSingleSingle_bb0_in -> 2
eval_speedSingleSingle_0 -> 3
eval_speedSingleSingle_1 -> 4
eval_speedSingleSingle_2 -> 5
eval_speedSingleSingle_3 -> 6
eval_speedSingleSingle_4 -> 7
eval_speedSingleSingle_bb1_in -> 8
eval_speedSingleSingle_bb2_in -> 9
eval_speedSingleSingle_bb3_in -> 10
eval_speedSingleSingle_5 -> 11
eval_speedSingleSingle_6 -> 12
eval_speedSingleSingle_stop -> 13

Rules:
  23: (-i4+i5 >= 0 /\ -8+i1 == 0) /\ i1'=13, i3'=2+i3
  24: (-i4+i5 < 0 /\ -8+i1 == 0) /\ i1'=8, i3'=4+i3, i5'=1+i5
  25: -1+i1 == 0 /\ i1'=8, i3'=7+i3, i5'=0
  26: (1 > 0 /\ -1+i4-i5 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i3'=i3+4*i4-4*i5, i5'=i4

Dependency graph:
24 -> 23, 24 -> 24, 24 -> 26
25 -> 23, 25 -> 24, 25 -> 26
26 -> 23, 26 -> 24

	Trace

	25[(-1+i1 == 0)]
	26[(1 > 0 /\ -1+i4-i5 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0)]
	
	Blocked

	{}
	{}
	{24[T], 26[T]}
	
Step with 23

	Trace

	25[(-1+i1 == 0)]
	26[(1 > 0 /\ -1+i4-i5 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0)]
	23[(-i4+i5 >= 0 /\ -8+i1 == 0)]
	
	Blocked

	{}
	{}
	{24[T], 26[T]}
	{}
	
Backtrack

	Trace

	25[(-1+i1 == 0)]
	26[(1 > 0 /\ -1+i4-i5 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0)]
	
	Blocked

	{}
	{}
	{23[T], 24[T], 26[T]}
	
Backtrack

	Trace

	25[(-1+i1 == 0)]
	
	Blocked

	{}
	{26[T]}
	
Step with 24

	Trace

	25[(-1+i1 == 0)]
	24[(-i4+i5 < 0 /\ -8+i1 == 0)]
	
	Blocked

	{}
	{26[T]}
	{}
	
Covered

	Trace

	25[(-1+i1 == 0)]
	
	Blocked

	{}
	{24[T], 26[T]}
	
Step with 23

	Trace

	25[(-1+i1 == 0)]
	23[(-i4+i5 >= 0 /\ -8+i1 == 0)]
	
	Blocked

	{}
	{24[T], 26[T]}
	{}
	
Backtrack

	Trace

	25[(-1+i1 == 0)]
	
	Blocked

	{}
	{23[T], 24[T], 26[T]}
	
Backtrack

	Trace

	Blocked

	{25[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l10, l11, l12, l2, l3, l4, l5, l6, l7, l8, l9
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l2(X₀, X₁)
  t₃: l1(X₀, X₁) → l4(X₀, X₁)
  t₁₀: l10(X₀, X₁) → l8(X₀, X₁)
  t₁₂: l11(X₀, X₁) → l12(X₀, X₁)
  t₁: l2(X₀, X₁) → l3(X₀, X₁)
  t₂: l3(X₀, X₁) → l1(X₀, X₁)
  t₄: l4(X₀, X₁) → l5(X₀, X₁)
  t₅: l5(X₀, X₁) → l6(X₀, X₁)
  t₆: l6(X₀, X₁) → l7(X₀, 0)
  t₈: l7(X₀, X₁) → l11(X₀, X₁) :|: X₀ ≤ X₁
  t₇: l7(X₀, X₁) → l9(X₀, X₁) :|: 1+X₁ ≤ X₀
  t₁₁: l8(X₀, X₁) → l7(X₀, 1+X₁)
  t₉: l9(X₀, X₁) → l10(X₀, X₁)


Preprocessing
  Found invariant 0 ≤ X₁ ∧ X₀ ≤ X₁ for location l11


  Found invariant 0 ≤ X₁ ∧ X₀ ≤ X₁ for location l12


  Found invariant 0 ≤ X₁ for location l7


  Found invariant 1+X₁ ≤ X₀ ∧ 0 ≤ X₁ ∧ 1 ≤ X₀+X₁ ∧ 1 ≤ X₀ for location l8


  Found invariant 1+X₁ ≤ X₀ ∧ 0 ≤ X₁ ∧ 1 ≤ X₀+X₁ ∧ 1 ≤ X₀ for location l10


  Found invariant 1+X₁ ≤ X₀ ∧ 0 ≤ X₁ ∧ 1 ≤ X₀+X₁ ∧ 1 ≤ X₀ for location l9


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l10, l11, l12, l2, l3, l4, l5, l6, l7, l8, l9
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l2(X₀, X₁)
  t₃: l1(X₀, X₁) → l4(X₀, X₁)
  t₁₀: l10(X₀, X₁) → l8(X₀, X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₀+X₁ ∧ 1+X₁ ≤ X₀ ∧ 0 ≤ X₁
  t₁₂: l11(X₀, X₁) → l12(X₀, X₁) :|: X₀ ≤ X₁ ∧ 0 ≤ X₁
  t₁: l2(X₀, X₁) → l3(X₀, X₁)
  t₂: l3(X₀, X₁) → l1(X₀, X₁)
  t₄: l4(X₀, X₁) → l5(X₀, X₁)
  t₅: l5(X₀, X₁) → l6(X₀, X₁)
  t₆: l6(X₀, X₁) → l7(X₀, 0)
  t₈: l7(X₀, X₁) → l11(X₀, X₁) :|: X₀ ≤ X₁ ∧ 0 ≤ X₁
  t₇: l7(X₀, X₁) → l9(X₀, X₁) :|: 1+X₁ ≤ X₀ ∧ 0 ≤ X₁
  t₁₁: l8(X₀, X₁) → l7(X₀, 1+X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₀+X₁ ∧ 1+X₁ ≤ X₀ ∧ 0 ≤ X₁
  t₉: l9(X₀, X₁) → l10(X₀, X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₀+X₁ ∧ 1+X₁ ≤ X₀ ∧ 0 ≤ X₁


MPRF for transition t₇: l7(X₀, X₁) → l9(X₀, X₁) :|: 1+X₁ ≤ X₀ ∧ 0 ≤ X₁ of depth 1:
  new bound:
    X₀ {O(n)}

  MPRF:
    • l10: [X₀-1-X₁]
    • l7: [X₀-X₁]
    • l8: [X₀-1-X₁]
    • l9: [X₀-1-X₁]




MPRF for transition t₉: l9(X₀, X₁) → l10(X₀, X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₀+X₁ ∧ 1+X₁ ≤ X₀ ∧ 0 ≤ X₁ of depth 1:
  new bound:
    X₀ {O(n)}

  MPRF:
    • l10: [X₀-1-X₁]
    • l7: [X₀-X₁]
    • l8: [X₀-1-X₁]
    • l9: [X₀-X₁]




MPRF for transition t₁₀: l10(X₀, X₁) → l8(X₀, X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₀+X₁ ∧ 1+X₁ ≤ X₀ ∧ 0 ≤ X₁ of depth 1:
  new bound:
    X₀ {O(n)}

  MPRF:
    • l10: [X₀-X₁]
    • l7: [X₀-X₁]
    • l8: [X₀-1-X₁]
    • l9: [X₀-X₁]




MPRF for transition t₁₁: l8(X₀, X₁) → l7(X₀, 1+X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₀+X₁ ∧ 1+X₁ ≤ X₀ ∧ 0 ≤ X₁ of depth 1:
  new bound:
    X₀ {O(n)}

  MPRF:
    • l10: [X₀-X₁]
    • l7: [X₀-X₁]
    • l8: [X₀-X₁]
    • l9: [X₀-X₁]




All Bounds
Timebounds
  Overall timebound:4⋅X₀+9 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: 1 {O(1)}
    t₇: X₀ {O(n)}
    t₈: 1 {O(1)}
    t₉: X₀ {O(n)}
    t₁₀: X₀ {O(n)}
    t₁₁: X₀ {O(n)}
    t₁₂: 1 {O(1)}


Costbounds
  Overall costbound: 4⋅X₀+9 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: 1 {O(1)}
    t₇: X₀ {O(n)}
    t₈: 1 {O(1)}
    t₉: X₀ {O(n)}
    t₁₀: X₀ {O(n)}
    t₁₁: X₀ {O(n)}
    t₁₂: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₁, X₀: X₀ {O(n)}
    t₁, X₁: X₁ {O(n)}
    t₂, X₀: X₀ {O(n)}
    t₂, X₁: X₁ {O(n)}
    t₃, X₀: X₀ {O(n)}
    t₃, X₁: X₁ {O(n)}
    t₄, X₀: X₀ {O(n)}
    t₄, X₁: X₁ {O(n)}
    t₅, X₀: X₀ {O(n)}
    t₅, X₁: X₁ {O(n)}
    t₆, X₀: X₀ {O(n)}
    t₆, X₁: 0 {O(1)}
    t₇, X₀: X₀ {O(n)}
    t₇, X₁: X₀ {O(n)}
    t₈, X₀: 2⋅X₀ {O(n)}
    t₈, X₁: X₀ {O(n)}
    t₉, X₀: X₀ {O(n)}
    t₉, X₁: X₀ {O(n)}
    t₁₀, X₀: X₀ {O(n)}
    t₁₀, X₁: X₀ {O(n)}
    t₁₁, X₀: X₀ {O(n)}
    t₁₁, X₁: X₀ {O(n)}
    t₁₂, X₀: 2⋅X₀ {O(n)}
    t₁₂, X₁: X₀ {O(n)}

