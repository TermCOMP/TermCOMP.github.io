WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-2+i1 == 0 /\ i4 >= 0 /\ i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i6+i4+i5, i5'=-1-i6

Dependency graph:
0 -> 1
1 -> 1

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ i4 >= 0 /\ i4+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ i4 >= 0 /\ i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i6+i4+i5, i5'=-1-i6
	New rule:
	(i4-it11+i5 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ i6+i4+i5 >= 0 /\ -1+i4+i5 >= 0 /\ i4 >= 0 /\ i4+i5 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ 1+i6+i4-it11+i5 >= 0) /\ i1'=i1, i3'=1+i3+it11, i4'=i6+i4-it11+i5, i5'=-1-i6

		-2+i1 >= 0 [0]: unchanged
		
		i4 >= 0 [0]: eventual decrease yields (1+i4-it11 >= 0 /\ i4 >= 0)
		
		i4+i5 >= 0 [0]: montonic decrease yields (i4+i5 >= 0 /\ -i6+i4-it11 >= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, i4 >= 0 -> (1+i4-it11 >= 0 /\ i4 >= 0), i4+i5 >= 0 -> (i4+i5 >= 0 /\ -i6+i4-it11 >= 0), 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(i4-it11+i5 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ i6+i4+i5 >= 0 /\ -1+i4+i5 >= 0 /\ i4 >= 0 /\ i4+i5 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ 1+i6+i4-it11+i5 >= 0) /\ i1'=i1, i3'=1+i3+it11, i4'=i6+i4-it11+i5, i5'=-1-i6
	New rule:
	(i4-it11+i5 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ i6+i4+i5 >= 0 /\ -1+i4+i5 >= 0 /\ i4 >= 0 /\ i4+i5 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ 1+i6+i4-it11+i5 >= 0) /\ i3'=1+i3+it11, i4'=i6+i4-it11+i5, i5'=-1-i6

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-2+i1 == 0 /\ i4 >= 0 /\ i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i6+i4+i5, i5'=-1-i6
   2: (i4-it11+i5 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ i6+i4+i5 >= 0 /\ -1+i4+i5 >= 0 /\ i4 >= 0 /\ i4+i5 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ 1+i6+i4-it11+i5 >= 0) /\ i3'=1+i3+it11, i4'=i6+i4-it11+i5, i5'=-1-i6

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2
2 -> 1

	Trace

	0[(-1+i1 == 0)]
	2[(i4-it11+i5 >= 0 /\ -2+i1 >= 0 /\ -2+i1 == 0 /\ i6+i4+i5 >= 0 /\ -1+i4+i5 >= 0 /\ i4 >= 0 /\ i4+i5 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ 1+i6+i4-it11+i5 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 2[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ i4 >= 0 /\ i4+i5 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 2[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₁: l1(X₀, X₁, X₂) → l1(X₀+X₁+X₂, -1-X₂, X₂) :|: 0 ≤ X₀ ∧ 0 ≤ X₀+X₁


Preprocessing
Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₁: l1(X₀, X₁, X₂) → l1(X₀+X₁+X₂, -1-X₂, X₂) :|: 0 ≤ X₀ ∧ 0 ≤ X₀+X₁


MPRF for transition t₁: l1(X₀, X₁, X₂) → l1(X₀+X₁+X₂, -1-X₂, X₂) :|: 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ of depth 1:
  new bound:
    X₀+X₁+1 {O(n)}

  MPRF:
    • l1: [1+X₀+X₁]




All Bounds
Timebounds
  Overall timebound:X₀+X₁+2 {O(n)}
    t₀: 1 {O(1)}
    t₁: X₀+X₁+1 {O(n)}


Costbounds
  Overall costbound: X₀+X₁+2 {O(n)}
    t₀: 1 {O(1)}
    t₁: X₀+X₁+1 {O(n)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₀, X₂: X₂ {O(n)}
    t₁, X₀: 4⋅X₀⋅X₂+4⋅X₁⋅X₂+X₀⋅X₁+X₁^2+3⋅X₀+4⋅X₁+8⋅X₂+4 {O(n^2)}
    t₁, X₁: 2⋅X₂+2 {O(n)}
    t₁, X₂: X₂ {O(n)}

