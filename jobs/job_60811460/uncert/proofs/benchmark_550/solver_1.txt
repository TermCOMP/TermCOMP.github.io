NO

# LoAT Proof:
NO

WORST_CASE(Omega(n^1),?)
NO

Initial ITS

Start location: f1

Location map:
LoAT_sink -> 0
f1 -> 1
f0 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i4+i5
   2: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i4+i5

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2
2 -> 1, 2 -> 2

Refined Dependency Graph

	Removed the following edges: 1 -> 2, 2 -> 1

Start location: f1

Location map:
LoAT_sink -> 0
f1 -> 1
f0 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i4+i5
   2: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i4+i5

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1
2 -> 2

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	2[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1-i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i4+i5
	New rule:
	(-2+i1 >= 0 /\ -1-i5 >= 0 /\ -1+(-1+it9)*i5+i4 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it9, i4'=it9*i5+i4

		-1+i4 >= 0 [0]: montonic decrease yields -1+(-1+it9)*i5+i4 >= 0, dependencies: -1-i5 >= 0
		
		-1+i4 >= 0 [1]: eventual decrease yields (-1+i4 >= 0 /\ -1+(-1+it9)*i5+i4 >= 0), dependencies: -1-i5 >= 0
		
		-2+i1 >= 0 [0]: unchanged
		
		-1-i5 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-1+i4 >= 0 -> -1+(-1+it9)*i5+i4 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, -1-i5 >= 0 -> -1-i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ -1-i5 >= 0 /\ -1+(-1+it9)*i5+i4 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it9, i4'=it9*i5+i4
	New rule:
	(-2+i1 >= 0 /\ -1-i5 >= 0 /\ -1+(-1+it9)*i5+i4 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it9, i4'=it9*i5+i4

Start location: f1

Location map:
LoAT_sink -> 0
f1 -> 1
f0 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i4+i5
   2: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i4+i5
   3: (-2+i1 >= 0 /\ -1-i5 >= 0 /\ -1+(-1+it9)*i5+i4 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it9, i4'=it9*i5+i4

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3
1 -> 1
2 -> 2, 2 -> 3
3 -> 2

	Trace

	0[(-1+i1 == 0)]
	3[(-2+i1 >= 0 /\ -1-i5 >= 0 /\ -1+(-1+it9)*i5+i4 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 3[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{3[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i4+i5
	New rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it29 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i1'=0

		-1+i4 >= 0 [0]: monotonic increase yields -1+i4 >= 0, dependencies: -1+i5 >= 0
		
		-1+i4 >= 0 [1]: eventual decrease yields (-1+i4 >= 0 /\ -1+(-1+it29)*i5+i4 >= 0)
		
		-1+i4 >= 0 [2]: eventual increase yields (-1+i4 >= 0 /\ -i5 <= 0)
		
		-2+i1 >= 0 [0]: unchanged
		
		-1+i5 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-1+i4 >= 0 -> -1+i4 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, -1+i5 >= 0 -> -1+i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Loop Acceleration

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i4+i5
	New rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it29 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it29, i4'=i4+i5*it29

		-1+i4 >= 0 [0]: monotonic increase yields -1+i4 >= 0, dependencies: -1+i5 >= 0
		
		-1+i4 >= 0 [1]: eventual decrease yields (-1+i4 >= 0 /\ -1+(-1+it29)*i5+i4 >= 0)
		
		-1+i4 >= 0 [2]: eventual increase yields (-1+i4 >= 0 /\ -i5 <= 0)
		
		-2+i1 >= 0 [0]: unchanged
		
		-1+i5 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-1+i4 >= 0 -> -1+i4 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, -1+i5 >= 0 -> -1+i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it29 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it29, i4'=i4+i5*it29
	New rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it29 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it29, i4'=i4+i5*it29

Start location: f1

Location map:
LoAT_sink -> 0
f1 -> 1
f0 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i4+i5
   2: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i4+i5
   3: (-2+i1 >= 0 /\ -1-i5 >= 0 /\ -1+(-1+it9)*i5+i4 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it9, i4'=it9*i5+i4
   4: (-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it29 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i1'=0
   5: (-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it29 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it29, i4'=i4+i5*it29

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3, 0 -> 4, 0 -> 5
1 -> 1, 1 -> 4, 1 -> 5
2 -> 2, 2 -> 3
3 -> 2
5 -> 1, 5 -> 4

Step with 4

	Trace

	0[(-1+i1 == 0)]
	4[(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it29 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{4[T]}
	
Refute

	Counterexample

	(i1=1, i3=-2, i4=1, i5=1)
	-0-> (i1=2, i3=-1, i4=1, i5=1 )
	-4-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(X₀, X₁)
  t₁: l1(X₀, X₁) → l1(X₀+X₁, X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₁
  t₂: l1(X₀, X₁) → l1(X₀+X₁, X₁) :|: 1 ≤ X₀ ∧ 1+X₁ ≤ 0


Preprocessing
Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(X₀, X₁)
  t₁: l1(X₀, X₁) → l1(X₀+X₁, X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₁
  t₂: l1(X₀, X₁) → l1(X₀+X₁, X₁) :|: 1 ≤ X₀ ∧ 1+X₁ ≤ 0


MPRF for transition t₂: l1(X₀, X₁) → l1(X₀+X₁, X₁) :|: 1 ≤ X₀ ∧ 1+X₁ ≤ 0 of depth 1:
  new bound:
    X₀ {O(n)}

  MPRF:
    • l1: [X₀]




  Found invariant 1+X₁ ≤ X₀ ∧ 1 ≤ X₁ ∧ 3 ≤ X₀+X₁ ∧ 2 ≤ X₀ for location l1_v2


  Found invariant 1+X₁ ≤ 0 ∧ 1+X₁ ≤ X₀ for location l1_v1


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₀: 1 {O(1)}
    t₁: inf {Infinity}
    t₂: X₀ {O(n)}


Costbounds
  Overall costbound: inf {Infinity}
    t₀: 1 {O(1)}
    t₁: inf {Infinity}
    t₂: X₀ {O(n)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₁, X₁: X₁ {O(n)}
    t₂, X₀: 2⋅X₁+X₀ {O(n)}
    t₂, X₁: X₁ {O(n)}

