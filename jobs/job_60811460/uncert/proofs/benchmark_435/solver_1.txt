NO

# LoAT Proof:
NO

NO

Initial ITS

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f2 -> 2
f300 -> 3
f1 -> 4

Rules:
   0: (-2+i1 == 0 /\ 29-i4 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
   1: (-2+i1 == 0 /\ -30+i4 >= 0) /\ i1'=3, i3'=1+i3, i5'=-1+i5
   2: (-3+i1 == 0 /\ 19-i5 >= 0) /\ i1'=2, i3'=1+i3
   3: (-3+i1 == 0 /\ -20+i5 >= 0) /\ i1'=4, i3'=1+i3, i6'=it2
   4: -1+i1 == 0 /\ i1'=3, i3'=1+i3

Dependency graph:
0 -> 0, 0 -> 1
1 -> 2, 1 -> 3
2 -> 0, 2 -> 1
4 -> 2, 4 -> 3

Refined Dependency Graph

	Removed the following edges: 0 -> 1

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f2 -> 2
f300 -> 3
f1 -> 4

Rules:
   0: (-2+i1 == 0 /\ 29-i4 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
   1: (-2+i1 == 0 /\ -30+i4 >= 0) /\ i1'=3, i3'=1+i3, i5'=-1+i5
   2: (-3+i1 == 0 /\ 19-i5 >= 0) /\ i1'=2, i3'=1+i3
   3: (-3+i1 == 0 /\ -20+i5 >= 0) /\ i1'=4, i3'=1+i3, i6'=it2
   4: -1+i1 == 0 /\ i1'=3, i3'=1+i3

Dependency graph:
0 -> 0
1 -> 2, 1 -> 3
2 -> 0, 2 -> 1
4 -> 2, 4 -> 3

Step with 4

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 3

	Trace

	4[(-1+i1 == 0)]
	3[(-3+i1 == 0 /\ -20+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{3[T]}
	
Step with 2

	Trace

	4[(-1+i1 == 0)]
	2[(-3+i1 == 0 /\ 19-i5 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{}
	
Step with 0

	Trace

	4[(-1+i1 == 0)]
	2[(-3+i1 == 0 /\ 19-i5 >= 0)]
	0[(-2+i1 == 0 /\ 29-i4 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-2+i1 == 0 /\ 29-i4 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
	New rule:
	(-1+it24 >= 0 /\ -2+i1 >= 0 /\ 29-i4 >= 0 /\ 2-i1 >= 0) /\ i1'=0

		-2+i1 >= 0 [0]: unchanged
		
		29-i4 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 29-i4 >= 0 -> 29-i4 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ 29-i4 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
	New rule:
	(-1+it24 >= 0 /\ -2+i1 >= 0 /\ 29-i4 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it24, i5'=-it24+i5

		-2+i1 >= 0 [0]: unchanged
		
		29-i4 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 29-i4 >= 0 -> 29-i4 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+it24 >= 0 /\ -2+i1 >= 0 /\ 29-i4 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it24, i5'=-it24+i5
	New rule:
	(-1+it24 >= 0 /\ -2+i1 >= 0 /\ 29-i4 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it24, i5'=-it24+i5

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f2 -> 2
f300 -> 3
f1 -> 4

Rules:
   0: (-2+i1 == 0 /\ 29-i4 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
   1: (-2+i1 == 0 /\ -30+i4 >= 0) /\ i1'=3, i3'=1+i3, i5'=-1+i5
   2: (-3+i1 == 0 /\ 19-i5 >= 0) /\ i1'=2, i3'=1+i3
   3: (-3+i1 == 0 /\ -20+i5 >= 0) /\ i1'=4, i3'=1+i3, i6'=it2
   4: -1+i1 == 0 /\ i1'=3, i3'=1+i3
   5: (-1+it24 >= 0 /\ -2+i1 >= 0 /\ 29-i4 >= 0 /\ 2-i1 >= 0) /\ i1'=0
   6: (-1+it24 >= 0 /\ -2+i1 >= 0 /\ 29-i4 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it24, i5'=-it24+i5

Dependency graph:
0 -> 0, 0 -> 5, 0 -> 6
1 -> 2, 1 -> 3
2 -> 0, 2 -> 1, 2 -> 5, 2 -> 6
4 -> 2, 4 -> 3
6 -> 0, 6 -> 5

Step with 5

	Trace

	4[(-1+i1 == 0)]
	2[(-3+i1 == 0 /\ 19-i5 >= 0)]
	5[(-1+it24 >= 0 /\ -2+i1 >= 0 /\ 29-i4 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{}
	{5[T]}
	
Refute

	Counterexample

	(i1=1, i3=-1, i4=0, i5=0, i6=0)
	-4-> (i1=3, i3=0, i4=0, i5=0, i6=0 )
	-2-> (i1=2, i3=1, i4=0, i5=0, i6=0 )
	-5-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  D
  Locations:  l0, l1, l2, l3
  Return Locations:  
  Transitions:
  t₄: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₃: l1(X₀, X₁, X₂) → l2(X₀, X₁, D) :|: 20 ≤ X₁
  t₂: l1(X₀, X₁, X₂) → l3(X₀, X₁, X₂) :|: X₁ ≤ 19
  t₁: l3(X₀, X₁, X₂) → l1(X₀, X₁-1, X₂) :|: 30 ≤ X₀
  t₀: l3(X₀, X₁, X₂) → l3(X₀, X₁-1, X₂) :|: X₀ ≤ 29


Preprocessing
  Eliminate variables [D; X₂] that do not contribute to the problem


  Found invariant 20 ≤ X₁ for location l2


  Found invariant X₁ ≤ 19 for location l3


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l2, l3
  Return Locations:  
  Transitions:
  t₅: l0(X₀, X₁) → l1(X₀, X₁)
  t₆: l1(X₀, X₁) → l2(X₀, X₁) :|: 20 ≤ X₁
  t₇: l1(X₀, X₁) → l3(X₀, X₁) :|: X₁ ≤ 19
  t₈: l3(X₀, X₁) → l1(X₀, X₁-1) :|: 30 ≤ X₀ ∧ X₁ ≤ 19
  t₉: l3(X₀, X₁) → l3(X₀, X₁-1) :|: X₀ ≤ 29 ∧ X₁ ≤ 19


  Found invariant X₁ ≤ 17 ∧ 13+X₁ ≤ X₀ ∧ 30 ≤ X₀ for location l1_v2


  Found invariant 20 ≤ X₁ for location l2


  Found invariant X₁ ≤ 18 ∧ X₀+X₁ ≤ 47 ∧ X₀ ≤ 29 for location l3_v2


  Found invariant X₁ ≤ 18 ∧ 12+X₁ ≤ X₀ ∧ 30 ≤ X₀ for location l1_v1


  Found invariant X₁ ≤ 19 for location l3_v1


  Found invariant X₁ ≤ 18 ∧ 12+X₁ ≤ X₀ ∧ 30 ≤ X₀ for location l3_v3


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₅: 1 {O(1)}
    t₆: 1 {O(1)}
    t₇: inf {Infinity}
    t₈: inf {Infinity}
    t₉: inf {Infinity}


Costbounds
  Overall costbound: inf {Infinity}
    t₅: 1 {O(1)}
    t₆: 1 {O(1)}
    t₇: inf {Infinity}
    t₈: inf {Infinity}
    t₉: inf {Infinity}


Sizebounds
    t₅, X₀: X₀ {O(n)}
    t₅, X₁: X₁ {O(n)}
    t₆, X₀: X₀ {O(n)}
    t₆, X₁: X₁ {O(n)}
    t₇, X₀: X₀ {O(n)}
    t₈, X₀: X₀ {O(n)}
    t₉, X₀: X₀ {O(n)}

