WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
   1: (-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
   2: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   3: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   4: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 2, 0 -> 3
1 -> 0, 1 -> 1, 1 -> 2, 1 -> 3
2 -> 0, 2 -> 1, 2 -> 2, 2 -> 3
3 -> 0, 3 -> 1, 3 -> 2, 3 -> 3
4 -> 0, 4 -> 1, 4 -> 2, 4 -> 3

Refined Dependency Graph

	Removed the following edges: 0 -> 1, 0 -> 2, 0 -> 3, 1 -> 0, 1 -> 1, 1 -> 2, 1 -> 3, 2 -> 0, 2 -> 1, 2 -> 2, 2 -> 3, 3 -> 0, 3 -> 1, 3 -> 2, 4 -> 1, 4 -> 2

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
   1: (-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
   2: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   3: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   4: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 0
3 -> 3
4 -> 0, 4 -> 3

Step with 4

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 3

	Trace

	4[(-1+i1 == 0)]
	3[(-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
	New rule:
	(-2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0 /\ 1-i4-it9+i5 >= 0 /\ -i4-it9+i5 >= 0) /\ i1'=i1, i3'=i3+it9, i4'=i4+it9

		-i4+i5 >= 0 [0]: montonic decrease yields 1-i4-it9+i5 >= 0
		
		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		-1-i4+i5 >= 0 [0]: montonic decrease yields -i4-it9+i5 >= 0
		
		Replacement map: {-i4+i5 >= 0 -> 1-i4-it9+i5 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -1-i4+i5 >= 0 -> -i4-it9+i5 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0 /\ 1-i4-it9+i5 >= 0 /\ -i4-it9+i5 >= 0) /\ i1'=i1, i3'=i3+it9, i4'=i4+it9
	New rule:
	(-2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0 /\ 1-i4-it9+i5 >= 0 /\ -i4-it9+i5 >= 0) /\ i3'=i3+it9, i4'=i4+it9
	
	Instantiation

	Original rule:
	(-2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0 /\ 1-i4-it9+i5 >= 0 /\ -i4-it9+i5 >= 0) /\ i3'=i3+it9, i4'=i4+it9
	New rule:
	(0 >= 0 /\ 1 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-i4+i5, i4'=i5

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
   1: (-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
   2: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   3: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   4: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   5: (0 >= 0 /\ 1 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-i4+i5, i4'=i5

Dependency graph:
0 -> 0
3 -> 3, 3 -> 5
4 -> 0, 4 -> 3, 4 -> 5
5 -> 3

	Trace

	4[(-1+i1 == 0)]
	5[(0 >= 0 /\ 1 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{}
	{3[T], 5[T]}
	
Backtrack

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{5[T]}
	
Step with 0

	Trace

	4[(-1+i1 == 0)]
	0[(-2+i1 == 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{5[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
	New rule:
	(-it26+i4-i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it26 >= 0) /\ i1'=i1, i3'=it26+i3, i5'=it26+i5

		-2+i1 >= 0 [0]: unchanged
		
		-1+i4-i5 >= 0 [0]: montonic decrease yields -it26+i4-i5 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -1+i4-i5 >= 0 -> -it26+i4-i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-it26+i4-i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it26 >= 0) /\ i1'=i1, i3'=it26+i3, i5'=it26+i5
	New rule:
	(-it26+i4-i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it26 >= 0) /\ i3'=it26+i3, i5'=it26+i5
	
	Instantiation

	Original rule:
	(-it26+i4-i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it26 >= 0) /\ i3'=it26+i3, i5'=it26+i5
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4-i5, i5'=i4

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
   1: (-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
   2: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   3: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   4: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   5: (0 >= 0 /\ 1 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-i4+i5, i4'=i5
   6: (0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4-i5, i5'=i4

Dependency graph:
0 -> 0, 0 -> 6
3 -> 3, 3 -> 5
4 -> 0, 4 -> 3, 4 -> 5, 4 -> 6
5 -> 3
6 -> 0

	Trace

	4[(-1+i1 == 0)]
	6[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{5[T]}
	{0[T], 6[T]}
	
Backtrack

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{5[T], 6[T]}
	
Step with 0

	Trace

	4[(-1+i1 == 0)]
	0[(-2+i1 == 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{5[T], 6[T]}
	{}
	
Covered

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 5[T], 6[T]}
	
Step with 3

	Trace

	4[(-1+i1 == 0)]
	3[(-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{0[T], 5[T], 6[T]}
	{}
	
Covered

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 3[T], 5[T], 6[T]}
	
Backtrack

	Trace

	Blocked

	{4[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₄: l0(X₀, X₁) → l1(X₀, X₁)
  t₀: l1(X₀, X₁) → l1(X₀, 1+X₁) :|: 1+X₁ ≤ X₀
  t₁: l1(X₀, X₁) → l1(X₀, 1+X₁) :|: 1+X₁ ≤ X₀ ∧ 1+X₀ ≤ X₁
  t₂: l1(X₀, X₁) → l1(1+X₀, X₁) :|: 1+X₁ ≤ X₀ ∧ X₀ ≤ X₁
  t₃: l1(X₀, X₁) → l1(1+X₀, X₁) :|: 1+X₀ ≤ X₁ ∧ X₀ ≤ X₁


Preprocessing
  Cut unsatisfiable transition [t₁: l1→l1; t₂: l1→l1]


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₄: l0(X₀, X₁) → l1(X₀, X₁)
  t₀: l1(X₀, X₁) → l1(X₀, 1+X₁) :|: 1+X₁ ≤ X₀
  t₃: l1(X₀, X₁) → l1(1+X₀, X₁) :|: 1+X₀ ≤ X₁ ∧ X₀ ≤ X₁


MPRF for transition t₀: l1(X₀, X₁) → l1(X₀, 1+X₁) :|: 1+X₁ ≤ X₀ of depth 1:
  new bound:
    X₀+X₁ {O(n)}

  MPRF:
    • l1: [X₀-X₁]




MPRF for transition t₃: l1(X₀, X₁) → l1(1+X₀, X₁) :|: 1+X₀ ≤ X₁ ∧ X₀ ≤ X₁ of depth 1:
  new bound:
    X₀+X₁+1 {O(n)}

  MPRF:
    • l1: [1+X₁-X₀]




All Bounds
Timebounds
  Overall timebound:2⋅X₀+2⋅X₁+2 {O(n)}
    t₀: X₀+X₁ {O(n)}
    t₃: X₀+X₁+1 {O(n)}
    t₄: 1 {O(1)}


Costbounds
  Overall costbound: 2⋅X₀+2⋅X₁+2 {O(n)}
    t₀: X₀+X₁ {O(n)}
    t₃: X₀+X₁+1 {O(n)}
    t₄: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: 2⋅X₁+X₀ {O(n)}
    t₃, X₀: 2⋅X₀+X₁+1 {O(n)}
    t₃, X₁: X₁ {O(n)}
    t₄, X₀: X₀ {O(n)}
    t₄, X₁: X₁ {O(n)}

