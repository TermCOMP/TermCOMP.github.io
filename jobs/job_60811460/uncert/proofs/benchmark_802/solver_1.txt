WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂, X₃) → l1(X₀, X₁, X₂, X₃)
  t₁: l1(X₀, X₁, X₂, X₃) → l1(X₀-1, 3⋅X₁+2⋅X₂, -5⋅X₁-3⋅X₂, (X₀)²+X₃) :|: 1 ≤ X₀


Preprocessing
  Eliminate variables [X₁; X₂; X₃] that do not contribute to the problem


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₂: l0(X₀) → l1(X₀)
  t₃: l1(X₀) → l1(X₀-1) :|: 1 ≤ X₀


MPRF for transition t₃: l1(X₀) → l1(X₀-1) :|: 1 ≤ X₀ of depth 1:
  new bound:
    X₀ {O(n)}

  MPRF:
    • l1: [X₀]




All Bounds
Timebounds
  Overall timebound:X₀+1 {O(n)}
    t₂: 1 {O(1)}
    t₃: X₀ {O(n)}


Costbounds
  Overall costbound: X₀+1 {O(n)}
    t₂: 1 {O(1)}
    t₃: X₀ {O(n)}


Sizebounds
    t₂, X₀: X₀ {O(n)}
    t₃, X₀: X₀ {O(n)}

