WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalSequentialSinglebb1in/4,evalSequentialSinglebb2in/4,evalSequentialSinglebbin/4]
1. recursive  : [evalSequentialSinglebb4in/4,evalSequentialSinglebb5in/4]
2. non_recursive  : [evalSequentialSinglestop/3]
3. non_recursive  : [evalSequentialSinglereturnin/3]
4. non_recursive  : [exit_location/1]
5. non_recursive  : [evalSequentialSinglebb5in_loop_cont/4]
6. non_recursive  : [evalSequentialSinglebb1in_loop_cont/4]
7. non_recursive  : [evalSequentialSingleentryin/3]
8. non_recursive  : [evalSequentialSinglestart/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalSequentialSinglebb1in/4
1. SCC is partially evaluated into evalSequentialSinglebb5in/4
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into evalSequentialSinglebb5in_loop_cont/4
6. SCC is partially evaluated into evalSequentialSinglebb1in_loop_cont/4
7. SCC is partially evaluated into evalSequentialSingleentryin/3
8. SCC is partially evaluated into evalSequentialSinglestart/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalSequentialSinglebb1in/4 
* CE 5 is refined into CE [14] 
* CE 3 is refined into CE [15] 
* CE 6 is refined into CE [16] 
* CE 4 is refined into CE [17] 


### Cost equations --> "Loop" of evalSequentialSinglebb1in/4 
* CEs [17] --> Loop 14 
* CEs [14] --> Loop 15 
* CEs [15] --> Loop 16 
* CEs [16] --> Loop 17 

### Ranking functions of CR evalSequentialSinglebb1in(A,B,D,E) 
* RF of phase [14]: [-A+B]

#### Partial ranking functions of CR evalSequentialSinglebb1in(A,B,D,E) 
* Partial RF of phase [14]:
  - RF of loop [14:1]:
    -A+B


### Specialization of cost equations evalSequentialSinglebb5in/4 
* CE 11 is refined into CE [18] 
* CE 10 is refined into CE [19] 
* CE 9 is refined into CE [20] 


### Cost equations --> "Loop" of evalSequentialSinglebb5in/4 
* CEs [20] --> Loop 18 
* CEs [18] --> Loop 19 
* CEs [19] --> Loop 20 

### Ranking functions of CR evalSequentialSinglebb5in(A,B,D,E) 
* RF of phase [18]: [-A+B]

#### Partial ranking functions of CR evalSequentialSinglebb5in(A,B,D,E) 
* Partial RF of phase [18]:
  - RF of loop [18:1]:
    -A+B


### Specialization of cost equations evalSequentialSinglebb5in_loop_cont/4 
* CE 13 is refined into CE [21] 
* CE 12 is refined into CE [22] 


### Cost equations --> "Loop" of evalSequentialSinglebb5in_loop_cont/4 
* CEs [21] --> Loop 21 
* CEs [22] --> Loop 22 

### Ranking functions of CR evalSequentialSinglebb5in_loop_cont(A,B,C,D) 

#### Partial ranking functions of CR evalSequentialSinglebb5in_loop_cont(A,B,C,D) 


### Specialization of cost equations evalSequentialSinglebb1in_loop_cont/4 
* CE 8 is refined into CE [23,24,25,26] 
* CE 7 is refined into CE [27] 


### Cost equations --> "Loop" of evalSequentialSinglebb1in_loop_cont/4 
* CEs [23] --> Loop 23 
* CEs [24,26] --> Loop 24 
* CEs [25] --> Loop 25 
* CEs [27] --> Loop 26 

### Ranking functions of CR evalSequentialSinglebb1in_loop_cont(A,B,C,D) 

#### Partial ranking functions of CR evalSequentialSinglebb1in_loop_cont(A,B,C,D) 


### Specialization of cost equations evalSequentialSingleentryin/3 
* CE 2 is refined into CE [28,29,30,31,32,33,34,35,36,37] 


### Cost equations --> "Loop" of evalSequentialSingleentryin/3 
* CEs [36,37] --> Loop 27 
* CEs [29,30,31,34,35] --> Loop 28 
* CEs [32,33] --> Loop 29 
* CEs [28] --> Loop 30 

### Ranking functions of CR evalSequentialSingleentryin(A,B,D) 

#### Partial ranking functions of CR evalSequentialSingleentryin(A,B,D) 


### Specialization of cost equations evalSequentialSinglestart/3 
* CE 1 is refined into CE [38,39,40,41] 


### Cost equations --> "Loop" of evalSequentialSinglestart/3 
* CEs [41] --> Loop 31 
* CEs [40] --> Loop 32 
* CEs [39] --> Loop 33 
* CEs [38] --> Loop 34 

### Ranking functions of CR evalSequentialSinglestart(A,B,D) 

#### Partial ranking functions of CR evalSequentialSinglestart(A,B,D) 


Computing Bounds
=====================================

#### Cost of chains of evalSequentialSinglebb1in(A,B,D,E):
* Chain [[14],17]: 1*it(14)+0
  Such that:it(14) =< -A+B

  with precondition: [D=3,A>=0,B>=A+1] 

* Chain [[14],16]: 1*it(14)+0
  Such that:it(14) =< -A+E

  with precondition: [D=4,A>=0,E>=A+1,B>=E+1] 

* Chain [[14],15]: 1*it(14)+0
  Such that:it(14) =< -A+E

  with precondition: [D=4,B=E,A>=0,B>=A+1] 

* Chain [17]: 0
  with precondition: [D=3,A>=0] 

* Chain [16]: 0
  with precondition: [D=4,A=E,A>=0,B>=A+1] 

* Chain [15]: 0
  with precondition: [D=4,A=E,A>=0,A>=B] 


#### Cost of chains of evalSequentialSinglebb5in(A,B,D,E):
* Chain [[18],20]: 1*it(18)+0
  Such that:it(18) =< -A+E

  with precondition: [D=2,B=E,B>=A+1] 

* Chain [[18],19]: 1*it(18)+0
  Such that:it(18) =< -A+B

  with precondition: [D=3,B>=A+1] 

* Chain [20]: 0
  with precondition: [D=2,A=E,A>=B] 

* Chain [19]: 0
  with precondition: [D=3] 


#### Cost of chains of evalSequentialSinglebb5in_loop_cont(A,B,C,D):
* Chain [22]: 0
  with precondition: [A=2] 

* Chain [21]: 0
  with precondition: [A=3] 


#### Cost of chains of evalSequentialSinglebb1in_loop_cont(A,B,C,D):
* Chain [26]: 0
  with precondition: [A=3] 

* Chain [25]: 0
  with precondition: [A=4] 

* Chain [24]: 2*s(1)+0
  Such that:aux(1) =< -B+C
s(1) =< aux(1)

  with precondition: [A=4,C>=B+1] 

* Chain [23]: 0
  with precondition: [A=4,B>=C] 


#### Cost of chains of evalSequentialSingleentryin(A,B,D):
* Chain [30]: 0
  with precondition: [] 

* Chain [29]: 0
  with precondition: [0>=B] 

* Chain [28]: 5*s(3)+0
  Such that:aux(2) =< B
s(3) =< aux(2)

  with precondition: [B>=1] 

* Chain [27]: 4*s(8)+0
  Such that:aux(4) =< B
s(8) =< aux(4)

  with precondition: [B>=2] 


#### Cost of chains of evalSequentialSinglestart(A,B,D):
* Chain [34]: 0
  with precondition: [] 

* Chain [33]: 0
  with precondition: [0>=B] 

* Chain [32]: 5*s(13)+0
  Such that:s(12) =< B
s(13) =< s(12)

  with precondition: [B>=1] 

* Chain [31]: 4*s(15)+0
  Such that:s(14) =< B
s(15) =< s(14)

  with precondition: [B>=2] 


Closed-form bounds of evalSequentialSinglestart(A,B,D): 
-------------------------------------
* Chain [34] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [33] with precondition: [0>=B] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [32] with precondition: [B>=1] 
    - Upper bound: 5*B 
    - Complexity: n 
* Chain [31] with precondition: [B>=2] 
    - Upper bound: 4*B 
    - Complexity: n 

### Maximum cost of evalSequentialSinglestart(A,B,D): nat(B)*5 
Asymptotic class: n 
* Total analysis performed in 69 ms.

