WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: evalSequentialSinglestart

Location map:
LoAT_sink -> 0
evalSequentialSinglestart -> 1
evalSequentialSingleentryin -> 2
evalSequentialSinglebb1in -> 3
evalSequentialSinglebb5in -> 4
evalSequentialSinglebb2in -> 5
evalSequentialSinglebbin -> 6
evalSequentialSinglebb4in -> 7
evalSequentialSinglereturnin -> 8
evalSequentialSinglestop -> 9

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: -2+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=0
   2: (-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=4, i3'=1+i3
   3: (-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=5, i3'=1+i3
   4: (-5+i1 == 0 /\ -1-it2 >= 0) /\ i1'=6, i3'=1+i3
   5: (-5+i1 == 0 /\ -1+it3 >= 0) /\ i1'=6, i3'=1+i3
   6: -5+i1 == 0 /\ i1'=4, i3'=1+i3
   7: -6+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=1+i4
   8: (-4+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=7, i3'=1+i3
   9: (-4+i1 == 0 /\ i4-i5 >= 0) /\ i1'=8, i3'=1+i3
  10: -7+i1 == 0 /\ i1'=4, i3'=1+i3, i4'=1+i4
  11: -8+i1 == 0 /\ i1'=9, i3'=1+i3

Dependency graph:
0 -> 1
1 -> 2, 1 -> 3
2 -> 8, 2 -> 9
3 -> 4, 3 -> 5, 3 -> 6
4 -> 7
5 -> 7
6 -> 8, 6 -> 9
7 -> 2, 7 -> 3
8 -> 10
9 -> 11
10 -> 8, 10 -> 9

Chained Linear Paths

	Applied Chaining

	First rule:
	-1+i1 == 0 /\ i1'=2, i3'=1+i3
	Second rule:
	-2+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=0
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=0
	
	Applied Deletion

	Removed the following rules: 0, 1
	
	Applied Chaining

	First rule:
	(-5+i1 == 0 /\ -1-it2 >= 0) /\ i1'=6, i3'=1+i3
	Second rule:
	-6+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=1+i4
	New rule:
	(0 == 0 /\ -5+i1 == 0 /\ -1-it2 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
	
	Applied Deletion

	Removed the following rules: 4
	
	Applied Chaining

	First rule:
	(-5+i1 == 0 /\ -1+it3 >= 0) /\ i1'=6, i3'=1+i3
	Second rule:
	-6+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=1+i4
	New rule:
	(0 == 0 /\ -5+i1 == 0 /\ -1+it3 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
	
	Applied Deletion

	Removed the following rules: 5, 7
	
	Applied Chaining

	First rule:
	(-4+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=7, i3'=1+i3
	Second rule:
	-7+i1 == 0 /\ i1'=4, i3'=1+i3, i4'=1+i4
	New rule:
	(0 == 0 /\ -4+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=4, i3'=2+i3, i4'=1+i4
	
	Applied Deletion

	Removed the following rules: 8, 10
	
	Applied Chaining

	First rule:
	(-4+i1 == 0 /\ i4-i5 >= 0) /\ i1'=8, i3'=1+i3
	Second rule:
	-8+i1 == 0 /\ i1'=9, i3'=1+i3
	New rule:
	(0 == 0 /\ -4+i1 == 0 /\ i4-i5 >= 0) /\ i1'=9, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 9, 11

Start location: evalSequentialSinglestart

Location map:
LoAT_sink -> 0
evalSequentialSinglestart -> 1
evalSequentialSingleentryin -> 2
evalSequentialSinglebb1in -> 3
evalSequentialSinglebb5in -> 4
evalSequentialSinglebb2in -> 5
evalSequentialSinglebbin -> 6
evalSequentialSinglebb4in -> 7
evalSequentialSinglereturnin -> 8
evalSequentialSinglestop -> 9

Rules:
   2: (-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=4, i3'=1+i3
   3: (-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=5, i3'=1+i3
   6: -5+i1 == 0 /\ i1'=4, i3'=1+i3
  12: (0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=0
  13: (0 == 0 /\ -5+i1 == 0 /\ -1-it2 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
  14: (0 == 0 /\ -5+i1 == 0 /\ -1+it3 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
  15: (0 == 0 /\ -4+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=4, i3'=2+i3, i4'=1+i4
  16: (0 == 0 /\ -4+i1 == 0 /\ i4-i5 >= 0) /\ i1'=9, i3'=2+i3

Dependency graph:
2 -> 15, 2 -> 16
3 -> 6, 3 -> 13, 3 -> 14
6 -> 15, 6 -> 16
12 -> 2, 12 -> 3
13 -> 2, 13 -> 3
14 -> 2, 14 -> 3
15 -> 15, 15 -> 16

Preprocessed Transitions

	Simplified Guard

	Original rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=0
	New rule:
	-1+i1 == 0 /\ i1'=3, i3'=2+i3, i4'=0
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -5+i1 == 0 /\ -1-it2 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
	New rule:
	(-5+i1 == 0 /\ -1-it2 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
	
	Eliminated Temporary Variables

	Original rule:
	(-5+i1 == 0 /\ -1-it2 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
	New rule:
	(-5+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -5+i1 == 0 /\ -1+it3 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
	New rule:
	(-5+i1 == 0 /\ -1+it3 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
	
	Eliminated Temporary Variables

	Original rule:
	(-5+i1 == 0 /\ -1+it3 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
	New rule:
	(-5+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -4+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=4, i3'=2+i3, i4'=1+i4
	New rule:
	(-4+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=4, i3'=2+i3, i4'=1+i4
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -4+i1 == 0 /\ i4-i5 >= 0) /\ i1'=9, i3'=2+i3
	New rule:
	(-4+i1 == 0 /\ i4-i5 >= 0) /\ i1'=9, i3'=2+i3

Start location: evalSequentialSinglestart

Location map:
LoAT_sink -> 0
evalSequentialSinglestart -> 1
evalSequentialSingleentryin -> 2
evalSequentialSinglebb1in -> 3
evalSequentialSinglebb5in -> 4
evalSequentialSinglebb2in -> 5
evalSequentialSinglebbin -> 6
evalSequentialSinglebb4in -> 7
evalSequentialSinglereturnin -> 8
evalSequentialSinglestop -> 9

Rules:
   2: (-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=4, i3'=1+i3
   3: (-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=5, i3'=1+i3
   6: -5+i1 == 0 /\ i1'=4, i3'=1+i3
  17: -1+i1 == 0 /\ i1'=3, i3'=2+i3, i4'=0
  18: (-5+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
  19: (-5+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
  20: (-4+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=4, i3'=2+i3, i4'=1+i4
  21: (-4+i1 == 0 /\ i4-i5 >= 0) /\ i1'=9, i3'=2+i3

Dependency graph:
2 -> 20, 2 -> 21
3 -> 6, 3 -> 18, 3 -> 19
6 -> 20, 6 -> 21
17 -> 2, 17 -> 3
18 -> 2, 18 -> 3
19 -> 2, 19 -> 3
20 -> 20, 20 -> 21

Refined Dependency Graph

	Removed the following edges: 2 -> 20

Start location: evalSequentialSinglestart

Location map:
LoAT_sink -> 0
evalSequentialSinglestart -> 1
evalSequentialSingleentryin -> 2
evalSequentialSinglebb1in -> 3
evalSequentialSinglebb5in -> 4
evalSequentialSinglebb2in -> 5
evalSequentialSinglebbin -> 6
evalSequentialSinglebb4in -> 7
evalSequentialSinglereturnin -> 8
evalSequentialSinglestop -> 9

Rules:
   2: (-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=4, i3'=1+i3
   3: (-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=5, i3'=1+i3
   6: -5+i1 == 0 /\ i1'=4, i3'=1+i3
  17: -1+i1 == 0 /\ i1'=3, i3'=2+i3, i4'=0
  18: (-5+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
  19: (-5+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
  20: (-4+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=4, i3'=2+i3, i4'=1+i4
  21: (-4+i1 == 0 /\ i4-i5 >= 0) /\ i1'=9, i3'=2+i3

Dependency graph:
2 -> 21
3 -> 6, 3 -> 18, 3 -> 19
6 -> 20, 6 -> 21
17 -> 2, 17 -> 3
18 -> 2, 18 -> 3
19 -> 2, 19 -> 3
20 -> 20, 20 -> 21

Step with 17

	Trace

	17[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 3

	Trace

	17[(-1+i1 == 0)]
	3[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Step with 19

	Trace

	17[(-1+i1 == 0)]
	3[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	19[(-5+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	{}
	
Poly(n^1)

Accelerate

		Simplified Guard

		Original rule:
		(0 == 0 /\ -3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=3+i3, i4'=1+i4
		New rule:
		(-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=3+i3, i4'=1+i4

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=3+i3, i4'=1+i4
	New rule:
	(-3+i1 >= 0 /\ -i4+i5-it16 >= 0 /\ -1+it16 >= 0 /\ 3-i1 >= 0) /\ i1'=i1, i3'=i3+3*it16, i4'=i4+it16

		-3+i1 >= 0 [0]: unchanged
		
		3-i1 >= 0 [0]: unchanged
		
		-1-i4+i5 >= 0 [0]: montonic decrease yields -i4+i5-it16 >= 0
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, 3-i1 >= 0 -> 3-i1 >= 0, -1-i4+i5 >= 0 -> -i4+i5-it16 >= 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ -i4+i5-it16 >= 0 /\ -1+it16 >= 0 /\ 3-i1 >= 0) /\ i1'=i1, i3'=i3+3*it16, i4'=i4+it16
	New rule:
	(-3+i1 >= 0 /\ -i4+i5-it16 >= 0 /\ -1+it16 >= 0 /\ 3-i1 >= 0) /\ i3'=i3+3*it16, i4'=i4+it16
	
	Instantiation

	Original rule:
	(-3+i1 >= 0 /\ -i4+i5-it16 >= 0 /\ -1+it16 >= 0 /\ 3-i1 >= 0) /\ i3'=i3+3*it16, i4'=i4+it16
	New rule:
	(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-3*i4+3*i5, i4'=i5

Start location: evalSequentialSinglestart

Location map:
LoAT_sink -> 0
evalSequentialSinglestart -> 1
evalSequentialSingleentryin -> 2
evalSequentialSinglebb1in -> 3
evalSequentialSinglebb5in -> 4
evalSequentialSinglebb2in -> 5
evalSequentialSinglebbin -> 6
evalSequentialSinglebb4in -> 7
evalSequentialSinglereturnin -> 8
evalSequentialSinglestop -> 9

Rules:
   2: (-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=4, i3'=1+i3
   3: (-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=5, i3'=1+i3
   6: -5+i1 == 0 /\ i1'=4, i3'=1+i3
  17: -1+i1 == 0 /\ i1'=3, i3'=2+i3, i4'=0
  18: (-5+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
  19: (-5+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
  20: (-4+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=4, i3'=2+i3, i4'=1+i4
  21: (-4+i1 == 0 /\ i4-i5 >= 0) /\ i1'=9, i3'=2+i3
  22: (0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-3*i4+3*i5, i4'=i5

Dependency graph:
2 -> 21
3 -> 6, 3 -> 18, 3 -> 19
6 -> 20, 6 -> 21
17 -> 2, 17 -> 3, 17 -> 22
18 -> 2, 18 -> 3, 18 -> 22
19 -> 2, 19 -> 3, 19 -> 22
20 -> 20, 20 -> 21
22 -> 2, 22 -> 3

	Trace

	17[(-1+i1 == 0)]
	22[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{}
	{22[T]}
	
Step with 2

	Trace

	17[(-1+i1 == 0)]
	22[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0)]
	2[(-3+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{}
	{22[T]}
	{}
	
Step with 21

	Trace

	17[(-1+i1 == 0)]
	22[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0)]
	2[(-3+i1 == 0 /\ i4-i5 >= 0)]
	21[(-4+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{}
	{22[T]}
	{}
	{}
	
Backtrack

	Trace

	17[(-1+i1 == 0)]
	22[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0)]
	2[(-3+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{}
	{22[T]}
	{21[T]}
	
Backtrack

	Trace

	17[(-1+i1 == 0)]
	22[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 22[T]}
	
Backtrack

	Trace

	17[(-1+i1 == 0)]
	
	Blocked

	{}
	{22[T]}
	
Step with 3

	Trace

	17[(-1+i1 == 0)]
	3[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{22[T]}
	{}
	
Step with 18

	Trace

	17[(-1+i1 == 0)]
	3[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	18[(-5+i1 == 0)]
	
	Blocked

	{}
	{22[T]}
	{}
	{}
	
Accelerate

		Simplified Guard

		Original rule:
		(0 == 0 /\ -3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=3+i3, i4'=1+i4
		New rule:
		(-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=3+i3, i4'=1+i4

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=3+i3, i4'=1+i4
	New rule:
	(-3+i1 >= 0 /\ -1+it43 >= 0 /\ 3-i1 >= 0 /\ -it43-i4+i5 >= 0) /\ i1'=i1, i3'=i3+3*it43, i4'=it43+i4

		-3+i1 >= 0 [0]: unchanged
		
		3-i1 >= 0 [0]: unchanged
		
		-1-i4+i5 >= 0 [0]: montonic decrease yields -it43-i4+i5 >= 0
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, 3-i1 >= 0 -> 3-i1 >= 0, -1-i4+i5 >= 0 -> -it43-i4+i5 >= 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ -1+it43 >= 0 /\ 3-i1 >= 0 /\ -it43-i4+i5 >= 0) /\ i1'=i1, i3'=i3+3*it43, i4'=it43+i4
	New rule:
	(-3+i1 >= 0 /\ -1+it43 >= 0 /\ 3-i1 >= 0 /\ -it43-i4+i5 >= 0) /\ i3'=i3+3*it43, i4'=it43+i4
	
	Instantiation

	Original rule:
	(-3+i1 >= 0 /\ -1+it43 >= 0 /\ 3-i1 >= 0 /\ -it43-i4+i5 >= 0) /\ i3'=i3+3*it43, i4'=it43+i4
	New rule:
	(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-3*i4+3*i5, i4'=i5

Start location: evalSequentialSinglestart

Location map:
LoAT_sink -> 0
evalSequentialSinglestart -> 1
evalSequentialSingleentryin -> 2
evalSequentialSinglebb1in -> 3
evalSequentialSinglebb5in -> 4
evalSequentialSinglebb2in -> 5
evalSequentialSinglebbin -> 6
evalSequentialSinglebb4in -> 7
evalSequentialSinglereturnin -> 8
evalSequentialSinglestop -> 9

Rules:
   2: (-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=4, i3'=1+i3
   3: (-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=5, i3'=1+i3
   6: -5+i1 == 0 /\ i1'=4, i3'=1+i3
  17: -1+i1 == 0 /\ i1'=3, i3'=2+i3, i4'=0
  18: (-5+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
  19: (-5+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
  20: (-4+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=4, i3'=2+i3, i4'=1+i4
  21: (-4+i1 == 0 /\ i4-i5 >= 0) /\ i1'=9, i3'=2+i3
  22: (0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-3*i4+3*i5, i4'=i5
  23: (0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-3*i4+3*i5, i4'=i5

Dependency graph:
2 -> 21
3 -> 6, 3 -> 18, 3 -> 19
6 -> 20, 6 -> 21
17 -> 2, 17 -> 3, 17 -> 22, 17 -> 23
18 -> 2, 18 -> 3, 18 -> 22, 18 -> 23
19 -> 2, 19 -> 3, 19 -> 22, 19 -> 23
20 -> 20, 20 -> 21
22 -> 2, 22 -> 3, 22 -> 23
23 -> 2, 23 -> 3, 23 -> 22

	Trace

	17[(-1+i1 == 0)]
	23[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{22[T]}
	{23[T]}
	
Step with 2

	Trace

	17[(-1+i1 == 0)]
	23[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0)]
	2[(-3+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{22[T]}
	{22[T], 23[T]}
	{}
	
Step with 21

	Trace

	17[(-1+i1 == 0)]
	23[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0)]
	2[(-3+i1 == 0 /\ i4-i5 >= 0)]
	21[(-4+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{22[T]}
	{22[T], 23[T]}
	{}
	{}
	
Backtrack

	Trace

	17[(-1+i1 == 0)]
	23[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0)]
	2[(-3+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{22[T]}
	{22[T], 23[T]}
	{21[T]}
	
Backtrack

	Trace

	17[(-1+i1 == 0)]
	23[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{22[T]}
	{2[T], 22[T], 23[T]}
	
Backtrack

	Trace

	17[(-1+i1 == 0)]
	
	Blocked

	{}
	{22[T], 23[T]}
	
Step with 2

	Trace

	17[(-1+i1 == 0)]
	2[(-3+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{22[T], 23[T]}
	{}
	
Step with 21

	Trace

	17[(-1+i1 == 0)]
	2[(-3+i1 == 0 /\ i4-i5 >= 0)]
	21[(-4+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{22[T], 23[T]}
	{}
	{}
	
Backtrack

	Trace

	17[(-1+i1 == 0)]
	2[(-3+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{22[T], 23[T]}
	{21[T]}
	
Backtrack

	Trace

	17[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T], 22[T], 23[T]}
	
Step with 3

	Trace

	17[(-1+i1 == 0)]
	3[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{2[T], 22[T], 23[T]}
	{}
	
Step with 6

	Trace

	17[(-1+i1 == 0)]
	3[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	6[(-5+i1 == 0)]
	
	Blocked

	{}
	{2[T], 22[T], 23[T]}
	{}
	{}
	
Step with 20

	Trace

	17[(-1+i1 == 0)]
	3[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	6[(-5+i1 == 0)]
	20[(-4+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{2[T], 22[T], 23[T]}
	{}
	{21[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-4+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=4, i3'=2+i3, i4'=1+i4
	New rule:
	(-it76-i4+i5 >= 0 /\ -1+it76 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0) /\ i1'=i1, i3'=i3+2*it76, i4'=it76+i4

		-4+i1 >= 0 [0]: unchanged
		
		4-i1 >= 0 [0]: unchanged
		
		-1-i4+i5 >= 0 [0]: montonic decrease yields -it76-i4+i5 >= 0
		
		Replacement map: {-4+i1 >= 0 -> -4+i1 >= 0, 4-i1 >= 0 -> 4-i1 >= 0, -1-i4+i5 >= 0 -> -it76-i4+i5 >= 0}

	Removed Trivial Updates

	Original rule:
	(-it76-i4+i5 >= 0 /\ -1+it76 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0) /\ i1'=i1, i3'=i3+2*it76, i4'=it76+i4
	New rule:
	(-it76-i4+i5 >= 0 /\ -1+it76 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0) /\ i3'=i3+2*it76, i4'=it76+i4
	
	Instantiation

	Original rule:
	(-it76-i4+i5 >= 0 /\ -1+it76 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0) /\ i3'=i3+2*it76, i4'=it76+i4
	New rule:
	(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-2*i4+2*i5, i4'=i5

Start location: evalSequentialSinglestart

Location map:
LoAT_sink -> 0
evalSequentialSinglestart -> 1
evalSequentialSingleentryin -> 2
evalSequentialSinglebb1in -> 3
evalSequentialSinglebb5in -> 4
evalSequentialSinglebb2in -> 5
evalSequentialSinglebbin -> 6
evalSequentialSinglebb4in -> 7
evalSequentialSinglereturnin -> 8
evalSequentialSinglestop -> 9

Rules:
   2: (-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=4, i3'=1+i3
   3: (-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=5, i3'=1+i3
   6: -5+i1 == 0 /\ i1'=4, i3'=1+i3
  17: -1+i1 == 0 /\ i1'=3, i3'=2+i3, i4'=0
  18: (-5+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
  19: (-5+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
  20: (-4+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=4, i3'=2+i3, i4'=1+i4
  21: (-4+i1 == 0 /\ i4-i5 >= 0) /\ i1'=9, i3'=2+i3
  22: (0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-3*i4+3*i5, i4'=i5
  23: (0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-3*i4+3*i5, i4'=i5
  24: (0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-2*i4+2*i5, i4'=i5

Dependency graph:
2 -> 21
3 -> 6, 3 -> 18, 3 -> 19
6 -> 20, 6 -> 21, 6 -> 24
17 -> 2, 17 -> 3, 17 -> 22, 17 -> 23
18 -> 2, 18 -> 3, 18 -> 22, 18 -> 23
19 -> 2, 19 -> 3, 19 -> 22, 19 -> 23
20 -> 20, 20 -> 21, 20 -> 24
22 -> 2, 22 -> 3, 22 -> 23
23 -> 2, 23 -> 3, 23 -> 22
24 -> 20, 24 -> 21

	Trace

	17[(-1+i1 == 0)]
	3[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	6[(-5+i1 == 0)]
	24[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{2[T], 22[T], 23[T]}
	{}
	{21[T]}
	{20[T], 24[T]}
	
Step with 21

	Trace

	17[(-1+i1 == 0)]
	3[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	6[(-5+i1 == 0)]
	24[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -1-i4+i5 >= 0)]
	21[(-4+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{2[T], 22[T], 23[T]}
	{}
	{21[T]}
	{20[T], 24[T]}
	{}
	
Backtrack

	Trace

	17[(-1+i1 == 0)]
	3[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	6[(-5+i1 == 0)]
	24[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{2[T], 22[T], 23[T]}
	{}
	{21[T]}
	{20[T], 21[T], 24[T]}
	
Backtrack

	Trace

	17[(-1+i1 == 0)]
	3[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	6[(-5+i1 == 0)]
	
	Blocked

	{}
	{2[T], 22[T], 23[T]}
	{}
	{21[T], 24[T]}
	
Step with 20

	Trace

	17[(-1+i1 == 0)]
	3[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	6[(-5+i1 == 0)]
	20[(-4+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{2[T], 22[T], 23[T]}
	{}
	{21[T], 24[T]}
	{}
	
Covered

	Trace

	17[(-1+i1 == 0)]
	3[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	6[(-5+i1 == 0)]
	
	Blocked

	{}
	{2[T], 22[T], 23[T]}
	{}
	{20[T], 21[T], 24[T]}
	
Backtrack

	Trace

	17[(-1+i1 == 0)]
	3[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{2[T], 22[T], 23[T]}
	{6[T]}
	
Step with 18

	Trace

	17[(-1+i1 == 0)]
	3[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	18[(-5+i1 == 0)]
	
	Blocked

	{}
	{2[T], 22[T], 23[T]}
	{6[T]}
	{}
	
Covered

	Trace

	17[(-1+i1 == 0)]
	3[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{2[T], 22[T], 23[T]}
	{6[T], 18[T]}
	
Step with 19

	Trace

	17[(-1+i1 == 0)]
	3[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	19[(-5+i1 == 0)]
	
	Blocked

	{}
	{2[T], 22[T], 23[T]}
	{6[T], 18[T]}
	{}
	
Covered

	Trace

	17[(-1+i1 == 0)]
	3[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{2[T], 22[T], 23[T]}
	{6[T], 18[T], 19[T]}
	
Backtrack

	Trace

	17[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T], 3[T], 22[T], 23[T]}
	
Backtrack

	Trace

	Blocked

	{17[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  C
  Locations:  l0, l1, l2, l3, l4, l5, l6, l7, l8
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l4(X₀, X₁)
  t₆: l1(X₀, X₁) → l2(X₀, X₁)
  t₄: l1(X₀, X₁) → l3(X₀, X₁) :|: 1+C ≤ 0
  t₅: l1(X₀, X₁) → l3(X₀, X₁) :|: 1 ≤ C
  t₈: l2(X₀, X₁) → l6(X₀, X₁) :|: 1+X₀ ≤ X₁
  t₉: l2(X₀, X₁) → l7(X₀, X₁) :|: X₁ ≤ X₀
  t₇: l3(X₀, X₁) → l5(1+X₀, X₁)
  t₁: l4(X₀, X₁) → l5(0, X₁)
  t₃: l5(X₀, X₁) → l1(X₀, X₁) :|: 1+X₀ ≤ X₁
  t₂: l5(X₀, X₁) → l2(X₀, X₁) :|: X₁ ≤ X₀
  t₁₀: l6(X₀, X₁) → l2(1+X₀, X₁)
  t₁₁: l7(X₀, X₁) → l8(X₀, X₁)


Preprocessing
  Found invariant 0 ≤ X₀ for location l2


  Found invariant 1 ≤ X₁ ∧ 1 ≤ X₀+X₁ ∧ 1+X₀ ≤ X₁ ∧ 0 ≤ X₀ for location l6


  Found invariant X₁ ≤ X₀ ∧ 0 ≤ X₀ for location l7


  Found invariant 0 ≤ X₀ for location l5


  Found invariant X₁ ≤ X₀ ∧ 0 ≤ X₀ for location l8


  Found invariant 1 ≤ X₁ ∧ 1 ≤ X₀+X₁ ∧ 1+X₀ ≤ X₁ ∧ 0 ≤ X₀ for location l1


  Found invariant 1 ≤ X₁ ∧ 1 ≤ X₀+X₁ ∧ 1+X₀ ≤ X₁ ∧ 0 ≤ X₀ for location l3


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  C
  Locations:  l0, l1, l2, l3, l4, l5, l6, l7, l8
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l4(X₀, X₁)
  t₆: l1(X₀, X₁) → l2(X₀, X₁) :|: 1 ≤ X₀+X₁ ∧ 1+X₀ ≤ X₁ ∧ 1 ≤ X₁ ∧ 0 ≤ X₀
  t₄: l1(X₀, X₁) → l3(X₀, X₁) :|: 1+C ≤ 0 ∧ 1 ≤ X₀+X₁ ∧ 1+X₀ ≤ X₁ ∧ 1 ≤ X₁ ∧ 0 ≤ X₀
  t₅: l1(X₀, X₁) → l3(X₀, X₁) :|: 1 ≤ C ∧ 1 ≤ X₀+X₁ ∧ 1+X₀ ≤ X₁ ∧ 1 ≤ X₁ ∧ 0 ≤ X₀
  t₈: l2(X₀, X₁) → l6(X₀, X₁) :|: 1+X₀ ≤ X₁ ∧ 0 ≤ X₀
  t₉: l2(X₀, X₁) → l7(X₀, X₁) :|: X₁ ≤ X₀ ∧ 0 ≤ X₀
  t₇: l3(X₀, X₁) → l5(1+X₀, X₁) :|: 1 ≤ X₀+X₁ ∧ 1+X₀ ≤ X₁ ∧ 1 ≤ X₁ ∧ 0 ≤ X₀
  t₁: l4(X₀, X₁) → l5(0, X₁)
  t₃: l5(X₀, X₁) → l1(X₀, X₁) :|: 1+X₀ ≤ X₁ ∧ 0 ≤ X₀
  t₂: l5(X₀, X₁) → l2(X₀, X₁) :|: X₁ ≤ X₀ ∧ 0 ≤ X₀
  t₁₀: l6(X₀, X₁) → l2(1+X₀, X₁) :|: 1 ≤ X₀+X₁ ∧ 1+X₀ ≤ X₁ ∧ 1 ≤ X₁ ∧ 0 ≤ X₀
  t₁₁: l7(X₀, X₁) → l8(X₀, X₁) :|: 0 ≤ X₀ ∧ X₁ ≤ X₀


MPRF for transition t₃: l5(X₀, X₁) → l1(X₀, X₁) :|: 1+X₀ ≤ X₁ ∧ 0 ≤ X₀ of depth 1:
  new bound:
    X₁ {O(n)}

  MPRF:
    • l1: [X₁-1-X₀]
    • l3: [X₁-1-X₀]
    • l5: [X₁-X₀]




MPRF for transition t₄: l1(X₀, X₁) → l3(X₀, X₁) :|: 1+C ≤ 0 ∧ 1 ≤ X₀+X₁ ∧ 1+X₀ ≤ X₁ ∧ 1 ≤ X₁ ∧ 0 ≤ X₀ of depth 1:
  new bound:
    X₁ {O(n)}

  MPRF:
    • l1: [X₁-X₀]
    • l3: [X₁-1-X₀]
    • l5: [X₁-X₀]




MPRF for transition t₅: l1(X₀, X₁) → l3(X₀, X₁) :|: 1 ≤ C ∧ 1 ≤ X₀+X₁ ∧ 1+X₀ ≤ X₁ ∧ 1 ≤ X₁ ∧ 0 ≤ X₀ of depth 1:
  new bound:
    X₁ {O(n)}

  MPRF:
    • l1: [X₁-X₀]
    • l3: [X₁-1-X₀]
    • l5: [X₁-X₀]




MPRF for transition t₇: l3(X₀, X₁) → l5(1+X₀, X₁) :|: 1 ≤ X₀+X₁ ∧ 1+X₀ ≤ X₁ ∧ 1 ≤ X₁ ∧ 0 ≤ X₀ of depth 1:
  new bound:
    X₁ {O(n)}

  MPRF:
    • l1: [X₁-X₀]
    • l3: [X₁-X₀]
    • l5: [X₁-X₀]




MPRF for transition t₈: l2(X₀, X₁) → l6(X₀, X₁) :|: 1+X₀ ≤ X₁ ∧ 0 ≤ X₀ of depth 1:
  new bound:
    2⋅X₁ {O(n)}

  MPRF:
    • l2: [X₁-X₀]
    • l6: [X₁-1-X₀]




MPRF for transition t₁₀: l6(X₀, X₁) → l2(1+X₀, X₁) :|: 1 ≤ X₀+X₁ ∧ 1+X₀ ≤ X₁ ∧ 1 ≤ X₁ ∧ 0 ≤ X₀ of depth 1:
  new bound:
    2⋅X₁ {O(n)}

  MPRF:
    • l2: [X₁-X₀]
    • l6: [X₁-X₀]




All Bounds
Timebounds
  Overall timebound:8⋅X₁+6 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}
    t₃: X₁ {O(n)}
    t₄: X₁ {O(n)}
    t₅: X₁ {O(n)}
    t₆: 1 {O(1)}
    t₇: X₁ {O(n)}
    t₈: 2⋅X₁ {O(n)}
    t₉: 1 {O(1)}
    t₁₀: 2⋅X₁ {O(n)}
    t₁₁: 1 {O(1)}


Costbounds
  Overall costbound: 8⋅X₁+6 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}
    t₃: X₁ {O(n)}
    t₄: X₁ {O(n)}
    t₅: X₁ {O(n)}
    t₆: 1 {O(1)}
    t₇: X₁ {O(n)}
    t₈: 2⋅X₁ {O(n)}
    t₉: 1 {O(1)}
    t₁₀: 2⋅X₁ {O(n)}
    t₁₁: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₁, X₀: 0 {O(1)}
    t₁, X₁: X₁ {O(n)}
    t₂, X₀: X₁ {O(n)}
    t₂, X₁: 2⋅X₁ {O(n)}
    t₃, X₀: X₁ {O(n)}
    t₃, X₁: X₁ {O(n)}
    t₄, X₀: X₁ {O(n)}
    t₄, X₁: X₁ {O(n)}
    t₅, X₀: X₁ {O(n)}
    t₅, X₁: X₁ {O(n)}
    t₆, X₀: X₁ {O(n)}
    t₆, X₁: X₁ {O(n)}
    t₇, X₀: X₁ {O(n)}
    t₇, X₁: X₁ {O(n)}
    t₈, X₀: 3⋅X₁ {O(n)}
    t₈, X₁: X₁ {O(n)}
    t₉, X₀: 4⋅X₁ {O(n)}
    t₉, X₁: 3⋅X₁ {O(n)}
    t₁₀, X₀: 3⋅X₁ {O(n)}
    t₁₀, X₁: X₁ {O(n)}
    t₁₁, X₀: 4⋅X₁ {O(n)}
    t₁₁, X₁: 3⋅X₁ {O(n)}

