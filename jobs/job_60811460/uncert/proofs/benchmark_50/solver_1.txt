WORST_CASE(Omega(n^2),O(n^2))

# LoAT Proof:
WORST_CASE(Omega(n^2),?)

WORST_CASE(Omega(n^1),?)
WORST_CASE(Omega(n^2),?)
Initial ITS

Start location: evalaxstart

Location map:
LoAT_sink -> 0
evalaxstart -> 1
evalaxentryin -> 2
evalaxbbin -> 3
evalaxbb2in -> 4
evalaxbb1in -> 5
evalaxbb3in -> 6
evalaxreturnin -> 7
evalaxstop -> 8

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: -2+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=0
   2: -3+i1 == 0 /\ i1'=4, i3'=1+i3, i5'=0
   3: (-4+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=5, i3'=1+i3
   4: (-4+i1 == 0 /\ 1-i6+i5 >= 0) /\ i1'=6, i3'=1+i3
   5: -5+i1 == 0 /\ i1'=4, i3'=1+i3, i5'=1+i5
   6: (-6+i1 == 0 /\ -3+i6-i4 >= 0 /\ 1-i6+i5 >= 0) /\ i1'=3, i3'=1+i3, i4'=1+i4
   7: (-6+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=7, i3'=1+i3
   8: (-6+i1 == 0 /\ 2-i6+i4 >= 0) /\ i1'=7, i3'=1+i3
   9: -7+i1 == 0 /\ i1'=8, i3'=1+i3

Dependency graph:
0 -> 1
1 -> 2
2 -> 3, 2 -> 4
3 -> 5
4 -> 6, 4 -> 7, 4 -> 8
5 -> 3, 5 -> 4
6 -> 2
7 -> 9
8 -> 9

Chained Linear Paths

	Applied Chaining

	First rule:
	-1+i1 == 0 /\ i1'=2, i3'=1+i3
	Second rule:
	-2+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=0
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=0
	
	Applied Deletion

	Removed the following rules: 0, 1
	
	Applied Chaining

	First rule:
	(-4+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=5, i3'=1+i3
	Second rule:
	-5+i1 == 0 /\ i1'=4, i3'=1+i3, i5'=1+i5
	New rule:
	(0 == 0 /\ -4+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=4, i3'=2+i3, i5'=1+i5
	
	Applied Deletion

	Removed the following rules: 3, 5
	
	Applied Chaining

	First rule:
	(-6+i1 == 0 /\ -3+i6-i4 >= 0 /\ 1-i6+i5 >= 0) /\ i1'=3, i3'=1+i3, i4'=1+i4
	Second rule:
	-3+i1 == 0 /\ i1'=4, i3'=1+i3, i5'=0
	New rule:
	(0 == 0 /\ -6+i1 == 0 /\ -3+i6-i4 >= 0 /\ 1-i6+i5 >= 0) /\ i1'=4, i3'=2+i3, i4'=1+i4, i5'=0
	
	Applied Deletion

	Removed the following rules: 6
	
	Applied Chaining

	First rule:
	(-6+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=7, i3'=1+i3
	Second rule:
	-7+i1 == 0 /\ i1'=8, i3'=1+i3
	New rule:
	(0 == 0 /\ -6+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=8, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 7
	
	Applied Chaining

	First rule:
	(-6+i1 == 0 /\ 2-i6+i4 >= 0) /\ i1'=7, i3'=1+i3
	Second rule:
	-7+i1 == 0 /\ i1'=8, i3'=1+i3
	New rule:
	(0 == 0 /\ -6+i1 == 0 /\ 2-i6+i4 >= 0) /\ i1'=8, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 8, 9
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=0
	Second rule:
	-3+i1 == 0 /\ i1'=4, i3'=1+i3, i5'=0
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=4, i3'=3+i3, i4'=0, i5'=0
	
	Applied Deletion

	Removed the following rules: 2, 10

Start location: evalaxstart

Location map:
LoAT_sink -> 0
evalaxstart -> 1
evalaxentryin -> 2
evalaxbbin -> 3
evalaxbb2in -> 4
evalaxbb1in -> 5
evalaxbb3in -> 6
evalaxreturnin -> 7
evalaxstop -> 8

Rules:
   4: (-4+i1 == 0 /\ 1-i6+i5 >= 0) /\ i1'=6, i3'=1+i3
  11: (0 == 0 /\ -4+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=4, i3'=2+i3, i5'=1+i5
  12: (0 == 0 /\ -6+i1 == 0 /\ -3+i6-i4 >= 0 /\ 1-i6+i5 >= 0) /\ i1'=4, i3'=2+i3, i4'=1+i4, i5'=0
  13: (0 == 0 /\ -6+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=8, i3'=2+i3
  14: (0 == 0 /\ -6+i1 == 0 /\ 2-i6+i4 >= 0) /\ i1'=8, i3'=2+i3
  15: (0 == 0 /\ -1+i1 == 0) /\ i1'=4, i3'=3+i3, i4'=0, i5'=0

Dependency graph:
4 -> 12, 4 -> 13, 4 -> 14
11 -> 4, 11 -> 11
12 -> 4, 12 -> 11
15 -> 4, 15 -> 11

Preprocessed Transitions

	Simplified Guard

	Original rule:
	(0 == 0 /\ -4+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=4, i3'=2+i3, i5'=1+i5
	New rule:
	(-4+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=4, i3'=2+i3, i5'=1+i5
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -6+i1 == 0 /\ -3+i6-i4 >= 0 /\ 1-i6+i5 >= 0) /\ i1'=4, i3'=2+i3, i4'=1+i4, i5'=0
	New rule:
	(-6+i1 == 0 /\ -3+i6-i4 >= 0 /\ 1-i6+i5 >= 0) /\ i1'=4, i3'=2+i3, i4'=1+i4, i5'=0
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -6+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=8, i3'=2+i3
	New rule:
	(-6+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=8, i3'=2+i3
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -6+i1 == 0 /\ 2-i6+i4 >= 0) /\ i1'=8, i3'=2+i3
	New rule:
	(-6+i1 == 0 /\ 2-i6+i4 >= 0) /\ i1'=8, i3'=2+i3
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=4, i3'=3+i3, i4'=0, i5'=0
	New rule:
	-1+i1 == 0 /\ i1'=4, i3'=3+i3, i4'=0, i5'=0

Start location: evalaxstart

Location map:
LoAT_sink -> 0
evalaxstart -> 1
evalaxentryin -> 2
evalaxbbin -> 3
evalaxbb2in -> 4
evalaxbb1in -> 5
evalaxbb3in -> 6
evalaxreturnin -> 7
evalaxstop -> 8

Rules:
   4: (-4+i1 == 0 /\ 1-i6+i5 >= 0) /\ i1'=6, i3'=1+i3
  16: (-4+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=4, i3'=2+i3, i5'=1+i5
  17: (-6+i1 == 0 /\ -3+i6-i4 >= 0 /\ 1-i6+i5 >= 0) /\ i1'=4, i3'=2+i3, i4'=1+i4, i5'=0
  18: (-6+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=8, i3'=2+i3
  19: (-6+i1 == 0 /\ 2-i6+i4 >= 0) /\ i1'=8, i3'=2+i3
  20: -1+i1 == 0 /\ i1'=4, i3'=3+i3, i4'=0, i5'=0

Dependency graph:
4 -> 17, 4 -> 18, 4 -> 19
16 -> 4, 16 -> 16
17 -> 4, 17 -> 16
20 -> 4, 20 -> 16

Refined Dependency Graph

	Removed the following edges: 4 -> 18

Start location: evalaxstart

Location map:
LoAT_sink -> 0
evalaxstart -> 1
evalaxentryin -> 2
evalaxbbin -> 3
evalaxbb2in -> 4
evalaxbb1in -> 5
evalaxbb3in -> 6
evalaxreturnin -> 7
evalaxstop -> 8

Rules:
   4: (-4+i1 == 0 /\ 1-i6+i5 >= 0) /\ i1'=6, i3'=1+i3
  16: (-4+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=4, i3'=2+i3, i5'=1+i5
  17: (-6+i1 == 0 /\ -3+i6-i4 >= 0 /\ 1-i6+i5 >= 0) /\ i1'=4, i3'=2+i3, i4'=1+i4, i5'=0
  18: (-6+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=8, i3'=2+i3
  19: (-6+i1 == 0 /\ 2-i6+i4 >= 0) /\ i1'=8, i3'=2+i3
  20: -1+i1 == 0 /\ i1'=4, i3'=3+i3, i4'=0, i5'=0

Dependency graph:
4 -> 17, 4 -> 19
16 -> 4, 16 -> 16
17 -> 4, 17 -> 16
20 -> 4, 20 -> 16

Step with 20

	Trace

	20[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 16

	Trace

	20[(-1+i1 == 0)]
	16[(-4+i1 == 0 /\ -2+i6-i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-4+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=4, i3'=2+i3, i5'=1+i5
	New rule:
	(-1+i6-it11-i5 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+it11 >= 0) /\ i1'=i1, i3'=i3+2*it11, i5'=it11+i5

		-4+i1 >= 0 [0]: unchanged
		
		4-i1 >= 0 [0]: unchanged
		
		-2+i6-i5 >= 0 [0]: montonic decrease yields -1+i6-it11-i5 >= 0
		
		Replacement map: {-4+i1 >= 0 -> -4+i1 >= 0, 4-i1 >= 0 -> 4-i1 >= 0, -2+i6-i5 >= 0 -> -1+i6-it11-i5 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+i6-it11-i5 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+it11 >= 0) /\ i1'=i1, i3'=i3+2*it11, i5'=it11+i5
	New rule:
	(-1+i6-it11-i5 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+it11 >= 0) /\ i3'=i3+2*it11, i5'=it11+i5
	
	Instantiation

	Original rule:
	(-1+i6-it11-i5 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+it11 >= 0) /\ i3'=i3+2*it11, i5'=it11+i5
	New rule:
	(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0) /\ i3'=-2+2*i6+i3-2*i5, i5'=-1+i6

Start location: evalaxstart

Location map:
LoAT_sink -> 0
evalaxstart -> 1
evalaxentryin -> 2
evalaxbbin -> 3
evalaxbb2in -> 4
evalaxbb1in -> 5
evalaxbb3in -> 6
evalaxreturnin -> 7
evalaxstop -> 8

Rules:
   4: (-4+i1 == 0 /\ 1-i6+i5 >= 0) /\ i1'=6, i3'=1+i3
  16: (-4+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=4, i3'=2+i3, i5'=1+i5
  17: (-6+i1 == 0 /\ -3+i6-i4 >= 0 /\ 1-i6+i5 >= 0) /\ i1'=4, i3'=2+i3, i4'=1+i4, i5'=0
  18: (-6+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=8, i3'=2+i3
  19: (-6+i1 == 0 /\ 2-i6+i4 >= 0) /\ i1'=8, i3'=2+i3
  20: -1+i1 == 0 /\ i1'=4, i3'=3+i3, i4'=0, i5'=0
  21: (0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0) /\ i3'=-2+2*i6+i3-2*i5, i5'=-1+i6

Dependency graph:
4 -> 17, 4 -> 19
16 -> 4, 16 -> 16, 16 -> 21
17 -> 4, 17 -> 16, 17 -> 21
20 -> 4, 20 -> 16, 20 -> 21
21 -> 4, 21 -> 16

	Trace

	20[(-1+i1 == 0)]
	21[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0)]
	
	Blocked

	{}
	{}
	{16[T], 21[T]}
	
Step with 4

	Trace

	20[(-1+i1 == 0)]
	21[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0)]
	4[(-4+i1 == 0 /\ 1-i6+i5 >= 0)]
	
	Blocked

	{}
	{}
	{16[T], 21[T]}
	{}
	
Step with 17

	Trace

	20[(-1+i1 == 0)]
	21[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0)]
	4[(-4+i1 == 0 /\ 1-i6+i5 >= 0)]
	17[(-6+i1 == 0 /\ -3+i6-i4 >= 0 /\ 1-i6+i5 >= 0)]
	
	Blocked

	{}
	{}
	{16[T], 21[T]}
	{}
	{}
	
Accelerate and Drop

		Simplified Guard

		Original rule:
		(0 == 0 /\ -3+i6-i4 >= 0 /\ -4+i1 == 0 /\ 1-i6+i5 >= 0) /\ i1'=4, i3'=3+i3, i4'=1+i4, i5'=0
		New rule:
		(-3+i6-i4 >= 0 /\ -4+i1 == 0 /\ 1-i6+i5 >= 0) /\ i1'=4, i3'=3+i3, i4'=1+i4, i5'=0

	Loop Acceleration

	Original rule:
	(-3+i6-i4 >= 0 /\ -4+i1 == 0 /\ 1-i6+i5 >= 0) /\ i1'=4, i3'=3+i3, i4'=1+i4, i5'=0
	New rule:
	(-2+i6-it33-i4 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+it33 >= 0 /\ 1-i6+i5 >= 0 /\ 1-i6 >= 0) /\ i1'=i1, i3'=i3+3*it33, i4'=it33+i4, i5'=0

		-3+i6-i4 >= 0 [0]: montonic decrease yields (-2+i6-it33-i4 >= 0 /\ -3+i6-i4 >= 0)
		
		-4+i1 >= 0 [0]: unchanged
		
		4-i1 >= 0 [0]: unchanged
		
		1-i6+i5 >= 0 [0]: eventual decrease yields (1-i6+i5 >= 0 /\ 1-i6 >= 0)
		
		1-i6+i5 >= 0 [1]: eventual increase yields (1-i6+i5 >= 0 /\ i5 <= 0)
		
		Replacement map: {-3+i6-i4 >= 0 -> (-2+i6-it33-i4 >= 0 /\ -3+i6-i4 >= 0), -4+i1 >= 0 -> -4+i1 >= 0, 4-i1 >= 0 -> 4-i1 >= 0, 1-i6+i5 >= 0 -> (1-i6+i5 >= 0 /\ 1-i6 >= 0)}

	Removed Trivial Updates

	Original rule:
	(-2+i6-it33-i4 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+it33 >= 0 /\ 1-i6+i5 >= 0 /\ 1-i6 >= 0) /\ i1'=i1, i3'=i3+3*it33, i4'=it33+i4, i5'=0
	New rule:
	(-2+i6-it33-i4 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+it33 >= 0 /\ 1-i6+i5 >= 0 /\ 1-i6 >= 0) /\ i3'=i3+3*it33, i4'=it33+i4, i5'=0
	
	Instantiation

	Original rule:
	(-2+i6-it33-i4 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+it33 >= 0 /\ 1-i6+i5 >= 0 /\ 1-i6 >= 0) /\ i3'=i3+3*it33, i4'=it33+i4, i5'=0
	New rule:
	(0 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ 1-i6+i5 >= 0 /\ 1-i6 >= 0) /\ i3'=-6+3*i6+i3-3*i4, i4'=-2+i6, i5'=0

Start location: evalaxstart

Location map:
LoAT_sink -> 0
evalaxstart -> 1
evalaxentryin -> 2
evalaxbbin -> 3
evalaxbb2in -> 4
evalaxbb1in -> 5
evalaxbb3in -> 6
evalaxreturnin -> 7
evalaxstop -> 8

Rules:
   4: (-4+i1 == 0 /\ 1-i6+i5 >= 0) /\ i1'=6, i3'=1+i3
  16: (-4+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=4, i3'=2+i3, i5'=1+i5
  17: (-6+i1 == 0 /\ -3+i6-i4 >= 0 /\ 1-i6+i5 >= 0) /\ i1'=4, i3'=2+i3, i4'=1+i4, i5'=0
  18: (-6+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=8, i3'=2+i3
  19: (-6+i1 == 0 /\ 2-i6+i4 >= 0) /\ i1'=8, i3'=2+i3
  20: -1+i1 == 0 /\ i1'=4, i3'=3+i3, i4'=0, i5'=0
  21: (0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0) /\ i3'=-2+2*i6+i3-2*i5, i5'=-1+i6
  22: (0 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ 1-i6+i5 >= 0 /\ 1-i6 >= 0) /\ i3'=-6+3*i6+i3-3*i4, i4'=-2+i6, i5'=0

Dependency graph:
4 -> 17, 4 -> 19
16 -> 4, 16 -> 16, 16 -> 21, 16 -> 22
17 -> 4, 17 -> 16, 17 -> 21, 17 -> 22
20 -> 4, 20 -> 16, 20 -> 21, 20 -> 22
21 -> 4, 21 -> 16, 21 -> 22
22 -> 4, 22 -> 16, 22 -> 21

	Trace

	20[(-1+i1 == 0)]
	21[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0)]
	
	Blocked

	{}
	{}
	{16[T], 21[T]}
	
Step with 4

	Trace

	20[(-1+i1 == 0)]
	21[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0)]
	4[(-4+i1 == 0 /\ 1-i6+i5 >= 0)]
	
	Blocked

	{}
	{}
	{16[T], 21[T]}
	{}
	
Step with 17

	Trace

	20[(-1+i1 == 0)]
	21[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0)]
	4[(-4+i1 == 0 /\ 1-i6+i5 >= 0)]
	17[(-6+i1 == 0 /\ -3+i6-i4 >= 0 /\ 1-i6+i5 >= 0)]
	
	Blocked

	{}
	{}
	{16[T], 21[T]}
	{}
	{}
	
Poly(n^2)

Accelerate

		Extracted Implied Equalities

		Original rule:
		(0 >= 0 /\ 0 == 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0) /\ i1'=4, i3'=1+2*i6+i3-2*i5, i4'=1+i4, i5'=0
		New rule:
		(0 >= 0 /\ 0 == 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ 4-i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=4, i3'=1+2*i6+i3-2*i5, i4'=1+i4, i5'=0
		
		Simplified Guard

		Original rule:
		(0 >= 0 /\ 0 == 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ 4-i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=4, i3'=1+2*i6+i3-2*i5, i4'=1+i4, i5'=0
		New rule:
		(-3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ 4-i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=4, i3'=1+2*i6+i3-2*i5, i4'=1+i4, i5'=0

	Loop Acceleration

	Original rule:
	(-3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ 4-i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=4, i3'=1+2*i6+i3-2*i5, i4'=1+i4, i5'=0
	New rule:
	(-2+i6 >= 0 /\ -4+i6-i4 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ 4-i1 == 0 /\ -1+it44 >= 0 /\ -2+i6-i5 >= 0 /\ -3+i6-i4-it44 >= 0) /\ i1'=i1, i3'=1+2*i6+2*i6*it44+i3-2*i5+it44, i4'=1+i4+it44, i5'=0

		-3+i6-i4 >= 0 [0]: montonic decrease yields (-3+i6-i4 >= 0 /\ -2+i6-i4-it44 >= 0)
		
		-4+i1 >= 0 [0]: unchanged
		
		4-i1 >= 0 [0]: unchanged
		
		-2+i6-i5 >= 0 [0]: eventual decrease yields (-2+i6 >= 0 /\ -2+i6-i5 >= 0)
		
		-2+i6-i5 >= 0 [1]: eventual increase yields (-i5 <= 0 /\ -2+i6-i5 >= 0)
		
		Replacement map: {-3+i6-i4 >= 0 -> (-3+i6-i4 >= 0 /\ -2+i6-i4-it44 >= 0), -4+i1 >= 0 -> -4+i1 >= 0, 4-i1 >= 0 -> 4-i1 >= 0, -2+i6-i5 >= 0 -> (-2+i6 >= 0 /\ -2+i6-i5 >= 0)}

	Removed Trivial Updates

	Original rule:
	(-2+i6 >= 0 /\ -4+i6-i4 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ 4-i1 == 0 /\ -1+it44 >= 0 /\ -2+i6-i5 >= 0 /\ -3+i6-i4-it44 >= 0) /\ i1'=i1, i3'=1+2*i6+2*i6*it44+i3-2*i5+it44, i4'=1+i4+it44, i5'=0
	New rule:
	(-2+i6 >= 0 /\ -4+i6-i4 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ 4-i1 == 0 /\ -1+it44 >= 0 /\ -2+i6-i5 >= 0 /\ -3+i6-i4-it44 >= 0) /\ i3'=1+2*i6+2*i6*it44+i3-2*i5+it44, i4'=1+i4+it44, i5'=0
	
	Instantiation

	Original rule:
	(-2+i6 >= 0 /\ -4+i6-i4 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ 4-i1 == 0 /\ -1+it44 >= 0 /\ -2+i6-i5 >= 0 /\ -3+i6-i4-it44 >= 0) /\ i3'=1+2*i6+2*i6*it44+i3-2*i5+it44, i4'=1+i4+it44, i5'=0
	New rule:
	(0 >= 0 /\ -2+i6 >= 0 /\ -4+i6-i4 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ 4-i1 == 0 /\ -2+i6-i5 >= 0) /\ i3'=-2+3*i6+i3+2*i6*(-3+i6-i4)-i4-2*i5, i4'=-2+i6, i5'=0

Start location: evalaxstart

Location map:
LoAT_sink -> 0
evalaxstart -> 1
evalaxentryin -> 2
evalaxbbin -> 3
evalaxbb2in -> 4
evalaxbb1in -> 5
evalaxbb3in -> 6
evalaxreturnin -> 7
evalaxstop -> 8

Rules:
   4: (-4+i1 == 0 /\ 1-i6+i5 >= 0) /\ i1'=6, i3'=1+i3
  16: (-4+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=4, i3'=2+i3, i5'=1+i5
  17: (-6+i1 == 0 /\ -3+i6-i4 >= 0 /\ 1-i6+i5 >= 0) /\ i1'=4, i3'=2+i3, i4'=1+i4, i5'=0
  18: (-6+i1 == 0 /\ -2+i6-i5 >= 0) /\ i1'=8, i3'=2+i3
  19: (-6+i1 == 0 /\ 2-i6+i4 >= 0) /\ i1'=8, i3'=2+i3
  20: -1+i1 == 0 /\ i1'=4, i3'=3+i3, i4'=0, i5'=0
  21: (0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0) /\ i3'=-2+2*i6+i3-2*i5, i5'=-1+i6
  22: (0 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ 1-i6+i5 >= 0 /\ 1-i6 >= 0) /\ i3'=-6+3*i6+i3-3*i4, i4'=-2+i6, i5'=0
  23: (0 >= 0 /\ -2+i6 >= 0 /\ -4+i6-i4 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ 4-i1 == 0 /\ -2+i6-i5 >= 0) /\ i3'=-2+3*i6+i3+2*i6*(-3+i6-i4)-i4-2*i5, i4'=-2+i6, i5'=0

Dependency graph:
4 -> 17, 4 -> 19
16 -> 4, 16 -> 16, 16 -> 21, 16 -> 22, 16 -> 23
17 -> 4, 17 -> 16, 17 -> 21, 17 -> 22, 17 -> 23
20 -> 4, 20 -> 16, 20 -> 21, 20 -> 22, 20 -> 23
21 -> 4, 21 -> 16, 21 -> 22
22 -> 4, 22 -> 16, 22 -> 21, 22 -> 23
23 -> 4, 23 -> 16, 23 -> 21, 23 -> 22

	Trace

	20[(-1+i1 == 0)]
	23[(0 >= 0 /\ -2+i6 >= 0 /\ -4+i6-i4 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ 4-i1 == 0 /\ -2+i6-i5 >= 0)]
	
	Blocked

	{}
	{}
	{23[T]}
	
Step with 16

	Trace

	20[(-1+i1 == 0)]
	23[(0 >= 0 /\ -2+i6 >= 0 /\ -4+i6-i4 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ 4-i1 == 0 /\ -2+i6-i5 >= 0)]
	16[(-4+i1 == 0 /\ -2+i6-i5 >= 0)]
	
	Blocked

	{}
	{}
	{4[T], 22[T], 23[T]}
	{}
	
Covered

	Trace

	20[(-1+i1 == 0)]
	23[(0 >= 0 /\ -2+i6 >= 0 /\ -4+i6-i4 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ 4-i1 == 0 /\ -2+i6-i5 >= 0)]
	
	Blocked

	{}
	{}
	{4[T], 16[T], 22[T], 23[T]}
	
Step with 21

	Trace

	20[(-1+i1 == 0)]
	23[(0 >= 0 /\ -2+i6 >= 0 /\ -4+i6-i4 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ 4-i1 == 0 /\ -2+i6-i5 >= 0)]
	21[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0)]
	
	Blocked

	{}
	{}
	{4[T], 16[T], 22[T], 23[T]}
	{21[T]}
	
Step with 4

	Trace

	20[(-1+i1 == 0)]
	23[(0 >= 0 /\ -2+i6 >= 0 /\ -4+i6-i4 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ 4-i1 == 0 /\ -2+i6-i5 >= 0)]
	21[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0)]
	4[(-4+i1 == 0 /\ 1-i6+i5 >= 0)]
	
	Blocked

	{}
	{}
	{4[T], 16[T], 22[T], 23[T]}
	{21[T]}
	{}
	
Step with 19

	Trace

	20[(-1+i1 == 0)]
	23[(0 >= 0 /\ -2+i6 >= 0 /\ -4+i6-i4 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ 4-i1 == 0 /\ -2+i6-i5 >= 0)]
	21[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0)]
	4[(-4+i1 == 0 /\ 1-i6+i5 >= 0)]
	19[(-6+i1 == 0 /\ 2-i6+i4 >= 0)]
	
	Blocked

	{}
	{}
	{4[T], 16[T], 22[T], 23[T]}
	{21[T]}
	{}
	{}
	
Backtrack

	Trace

	20[(-1+i1 == 0)]
	23[(0 >= 0 /\ -2+i6 >= 0 /\ -4+i6-i4 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ 4-i1 == 0 /\ -2+i6-i5 >= 0)]
	21[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0)]
	4[(-4+i1 == 0 /\ 1-i6+i5 >= 0)]
	
	Blocked

	{}
	{}
	{4[T], 16[T], 22[T], 23[T]}
	{21[T]}
	{19[T]}
	
Backtrack

	Trace

	20[(-1+i1 == 0)]
	23[(0 >= 0 /\ -2+i6 >= 0 /\ -4+i6-i4 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ 4-i1 == 0 /\ -2+i6-i5 >= 0)]
	21[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0)]
	
	Blocked

	{}
	{}
	{4[T], 16[T], 22[T], 23[T]}
	{4[T], 21[T]}
	
Backtrack

	Trace

	20[(-1+i1 == 0)]
	23[(0 >= 0 /\ -2+i6 >= 0 /\ -4+i6-i4 >= 0 /\ -3+i6-i4 >= 0 /\ -4+i1 >= 0 /\ -4+i1 == 0 /\ 4-i1 >= 0 /\ 4-i1 == 0 /\ -2+i6-i5 >= 0)]
	
	Blocked

	{}
	{}
	{4[T], 16[T], 21[T], 22[T], 23[T]}
	
Backtrack

	Trace

	20[(-1+i1 == 0)]
	
	Blocked

	{}
	{23[T]}
	
Step with 21

	Trace

	20[(-1+i1 == 0)]
	21[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0)]
	
	Blocked

	{}
	{23[T]}
	{21[T]}
	
Step with 4

	Trace

	20[(-1+i1 == 0)]
	21[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0)]
	4[(-4+i1 == 0 /\ 1-i6+i5 >= 0)]
	
	Blocked

	{}
	{23[T]}
	{21[T], 22[T]}
	{}
	
Step with 19

	Trace

	20[(-1+i1 == 0)]
	21[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0)]
	4[(-4+i1 == 0 /\ 1-i6+i5 >= 0)]
	19[(-6+i1 == 0 /\ 2-i6+i4 >= 0)]
	
	Blocked

	{}
	{23[T]}
	{21[T], 22[T]}
	{}
	{}
	
Backtrack

	Trace

	20[(-1+i1 == 0)]
	21[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0)]
	4[(-4+i1 == 0 /\ 1-i6+i5 >= 0)]
	
	Blocked

	{}
	{23[T]}
	{21[T], 22[T]}
	{19[T]}
	
Step with 17

	Trace

	20[(-1+i1 == 0)]
	21[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0)]
	4[(-4+i1 == 0 /\ 1-i6+i5 >= 0)]
	17[(-6+i1 == 0 /\ -3+i6-i4 >= 0 /\ 1-i6+i5 >= 0)]
	
	Blocked

	{}
	{23[T]}
	{21[T], 22[T]}
	{19[T]}
	{}
	
Covered

	Trace

	20[(-1+i1 == 0)]
	21[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0)]
	4[(-4+i1 == 0 /\ 1-i6+i5 >= 0)]
	
	Blocked

	{}
	{23[T]}
	{21[T], 22[T]}
	{17[T], 19[T]}
	
Backtrack

	Trace

	20[(-1+i1 == 0)]
	21[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -2+i6-i5 >= 0)]
	
	Blocked

	{}
	{23[T]}
	{4[T], 21[T], 22[T]}
	
Backtrack

	Trace

	20[(-1+i1 == 0)]
	
	Blocked

	{}
	{21[T], 23[T]}
	
Step with 16

	Trace

	20[(-1+i1 == 0)]
	16[(-4+i1 == 0 /\ -2+i6-i5 >= 0)]
	
	Blocked

	{}
	{21[T], 23[T]}
	{}
	
Covered

	Trace

	20[(-1+i1 == 0)]
	
	Blocked

	{}
	{16[T], 21[T], 23[T]}
	
Step with 4

	Trace

	20[(-1+i1 == 0)]
	4[(-4+i1 == 0 /\ 1-i6+i5 >= 0)]
	
	Blocked

	{}
	{16[T], 21[T], 22[T], 23[T]}
	{}
	
Step with 19

	Trace

	20[(-1+i1 == 0)]
	4[(-4+i1 == 0 /\ 1-i6+i5 >= 0)]
	19[(-6+i1 == 0 /\ 2-i6+i4 >= 0)]
	
	Blocked

	{}
	{16[T], 21[T], 22[T], 23[T]}
	{}
	{}
	
Backtrack

	Trace

	20[(-1+i1 == 0)]
	4[(-4+i1 == 0 /\ 1-i6+i5 >= 0)]
	
	Blocked

	{}
	{16[T], 21[T], 22[T], 23[T]}
	{19[T]}
	
Backtrack

	Trace

	20[(-1+i1 == 0)]
	
	Blocked

	{}
	{4[T], 16[T], 21[T], 22[T], 23[T]}
	
Backtrack

	Trace

	Blocked

	{20[T]}
	
Accept

Poly(n^2)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^2))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l2, l3, l4, l5, l6, l7
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l6(X₀, X₁, X₂)
  t₃: l1(X₀, X₁, X₂) → l2(X₀, X₁, X₂) :|: 2+X₁ ≤ X₂
  t₄: l1(X₀, X₁, X₂) → l3(X₀, X₁, X₂) :|: X₂ ≤ 1+X₁
  t₅: l2(X₀, X₁, X₂) → l1(X₀, 1+X₁, X₂)
  t₆: l3(X₀, X₁, X₂) → l4(1+X₀, X₁, X₂) :|: X₂ ≤ 1+X₁ ∧ 3+X₀ ≤ X₂
  t₇: l3(X₀, X₁, X₂) → l5(X₀, X₁, X₂) :|: 2+X₁ ≤ X₂
  t₈: l3(X₀, X₁, X₂) → l5(X₀, X₁, X₂) :|: X₂ ≤ 2+X₀
  t₂: l4(X₀, X₁, X₂) → l1(X₀, 0, X₂)
  t₉: l5(X₀, X₁, X₂) → l7(X₀, X₁, X₂)
  t₁: l6(X₀, X₁, X₂) → l4(0, X₁, X₂)


Preprocessing
  Cut unsatisfiable transition [t₇: l3→l5]


  Found invariant 2 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ 2+X₁ ≤ X₂ ∧ 2 ≤ X₀+X₂ ∧ 0 ≤ X₁ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l2


  Found invariant X₂ ≤ 1+X₁ ∧ X₂ ≤ 2+X₀ ∧ 0 ≤ X₁ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l7


  Found invariant X₂ ≤ 1+X₁ ∧ X₂ ≤ 2+X₀ ∧ 0 ≤ X₁ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l5


  Found invariant 0 ≤ X₁ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l1


  Found invariant 0 ≤ X₀ for location l4


  Found invariant X₂ ≤ 1+X₁ ∧ 0 ≤ X₁ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l3


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l2, l3, l4, l5, l6, l7
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l6(X₀, X₁, X₂)
  t₃: l1(X₀, X₁, X₂) → l2(X₀, X₁, X₂) :|: 2+X₁ ≤ X₂ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁
  t₄: l1(X₀, X₁, X₂) → l3(X₀, X₁, X₂) :|: X₂ ≤ 1+X₁ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁
  t₅: l2(X₀, X₁, X₂) → l1(X₀, 1+X₁, X₂) :|: 2 ≤ X₀+X₂ ∧ 2 ≤ X₁+X₂ ∧ 2+X₁ ≤ X₂ ∧ 2 ≤ X₂ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁
  t₆: l3(X₀, X₁, X₂) → l4(1+X₀, X₁, X₂) :|: X₂ ≤ 1+X₁ ∧ 3+X₀ ≤ X₂ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁
  t₈: l3(X₀, X₁, X₂) → l5(X₀, X₁, X₂) :|: X₂ ≤ 2+X₀ ∧ X₂ ≤ 1+X₁ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁
  t₂: l4(X₀, X₁, X₂) → l1(X₀, 0, X₂) :|: 0 ≤ X₀
  t₉: l5(X₀, X₁, X₂) → l7(X₀, X₁, X₂) :|: X₂ ≤ 2+X₀ ∧ X₂ ≤ 1+X₁ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁
  t₁: l6(X₀, X₁, X₂) → l4(0, X₁, X₂)


MPRF for transition t₆: l3(X₀, X₁, X₂) → l4(1+X₀, X₁, X₂) :|: X₂ ≤ 1+X₁ ∧ 3+X₀ ≤ X₂ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁ of depth 1:
  new bound:
    X₂+2 {O(n)}

  MPRF:
    • l1: [X₂-2-X₀]
    • l2: [X₂-2-X₀]
    • l3: [X₂-2-X₀]
    • l4: [X₂-2-X₀]




  knowledge_propagation leads to new time bound X₂+3 {O(n)} for transition t₂: l4(X₀, X₁, X₂) → l1(X₀, 0, X₂) :|: 0 ≤ X₀


MPRF for transition t₃: l1(X₀, X₁, X₂) → l2(X₀, X₁, X₂) :|: 2+X₁ ≤ X₂ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁ of depth 1:
  new bound:
    X₂^2+3⋅X₂ {O(n^2)}

  MPRF:
    • l1: [X₂-1-X₁]
    • l2: [X₂-2-X₁]
    • l3: [X₂-1-X₁]
    • l4: [X₂]




MPRF for transition t₄: l1(X₀, X₁, X₂) → l3(X₀, X₁, X₂) :|: X₂ ≤ 1+X₁ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁ of depth 1:
  new bound:
    X₂+3 {O(n)}

  MPRF:
    • l1: [1]
    • l2: [1]
    • l3: [0]
    • l4: [1]




MPRF for transition t₅: l2(X₀, X₁, X₂) → l1(X₀, 1+X₁, X₂) :|: 2 ≤ X₀+X₂ ∧ 2 ≤ X₁+X₂ ∧ 2+X₁ ≤ X₂ ∧ 2 ≤ X₂ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁ of depth 1:
  new bound:
    X₂^2+3⋅X₂ {O(n^2)}

  MPRF:
    • l1: [X₂-1-X₁]
    • l2: [X₂-1-X₁]
    • l3: [X₂-1-X₁]
    • l4: [X₂]




  Found invariant 2 ≤ X₂ ∧ 3 ≤ X₁+X₂ ∧ 1+X₁ ≤ X₂ ∧ 2 ≤ X₀+X₂ ∧ 1 ≤ X₁ ∧ 1 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l1_v1


  Found invariant 2 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ 2+X₁ ≤ X₂ ∧ 2 ≤ X₀+X₂ ∧ X₁ ≤ 0 ∧ X₁ ≤ X₀ ∧ 0 ≤ X₁ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l2_v1


  Found invariant 3 ≤ X₂ ∧ 4 ≤ X₁+X₂ ∧ 2+X₁ ≤ X₂ ∧ 3 ≤ X₀+X₂ ∧ 1 ≤ X₁ ∧ 1 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l2_v2


  Found invariant X₂ ≤ 1+X₁ ∧ X₂ ≤ 2+X₀ ∧ 0 ≤ X₁ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l7


  Found invariant X₂ ≤ 1+X₁ ∧ X₂ ≤ 2+X₀ ∧ 0 ≤ X₁ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l5


  Found invariant X₁ ≤ 0 ∧ X₁ ≤ X₀ ∧ 0 ≤ X₁ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l1


  Found invariant 0 ≤ X₀ for location l4


  Found invariant X₂ ≤ 1+X₁ ∧ 0 ≤ X₁ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l3


All Bounds
Timebounds
  Overall timebound:2⋅X₂^2+9⋅X₂+12 {O(n^2)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: X₂+3 {O(n)}
    t₃: X₂^2+3⋅X₂ {O(n^2)}
    t₄: X₂+3 {O(n)}
    t₅: X₂^2+3⋅X₂ {O(n^2)}
    t₆: X₂+2 {O(n)}
    t₈: 1 {O(1)}
    t₉: 1 {O(1)}


Costbounds
  Overall costbound: 2⋅X₂^2+9⋅X₂+12 {O(n^2)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: X₂+3 {O(n)}
    t₃: X₂^2+3⋅X₂ {O(n^2)}
    t₄: X₂+3 {O(n)}
    t₅: X₂^2+3⋅X₂ {O(n^2)}
    t₆: X₂+2 {O(n)}
    t₈: 1 {O(1)}
    t₉: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₀, X₂: X₂ {O(n)}
    t₁, X₀: 0 {O(1)}
    t₁, X₁: X₁ {O(n)}
    t₁, X₂: X₂ {O(n)}
    t₂, X₀: X₂+2 {O(n)}
    t₂, X₁: 0 {O(1)}
    t₂, X₂: X₂ {O(n)}
    t₃, X₀: X₂+2 {O(n)}
    t₃, X₁: X₂^2+3⋅X₂ {O(n^2)}
    t₃, X₂: X₂ {O(n)}
    t₄, X₀: X₂+2 {O(n)}
    t₄, X₁: X₂^2+3⋅X₂ {O(n^2)}
    t₄, X₂: X₂ {O(n)}
    t₅, X₀: X₂+2 {O(n)}
    t₅, X₁: X₂^2+3⋅X₂ {O(n^2)}
    t₅, X₂: X₂ {O(n)}
    t₆, X₀: X₂+2 {O(n)}
    t₆, X₁: X₂^2+3⋅X₂ {O(n^2)}
    t₆, X₂: X₂ {O(n)}
    t₈, X₀: X₂+2 {O(n)}
    t₈, X₁: X₂^2+3⋅X₂ {O(n^2)}
    t₈, X₂: X₂ {O(n)}
    t₉, X₀: X₂+2 {O(n)}
    t₉, X₁: X₂^2+3⋅X₂ {O(n^2)}
    t₉, X₂: X₂ {O(n)}

