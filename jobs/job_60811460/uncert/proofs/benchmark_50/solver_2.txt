WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalaxbb1in/4,evalaxbb2in/4]
1. recursive  : [evalaxbb2in_loop_cont/7,evalaxbb3in/6,evalaxbbin/6]
2. non_recursive  : [evalaxstop/4]
3. non_recursive  : [evalaxreturnin/4]
4. non_recursive  : [exit_location/1]
5. non_recursive  : [evalaxbbin_loop_cont/5]
6. non_recursive  : [evalaxentryin/4]
7. non_recursive  : [evalaxstart/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalaxbb2in/4
1. SCC is partially evaluated into evalaxbbin/6
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into evalaxbbin_loop_cont/5
6. SCC is partially evaluated into evalaxentryin/4
7. SCC is partially evaluated into evalaxstart/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalaxbb2in/4 
* CE 12 is refined into CE [13] 
* CE 11 is refined into CE [14] 
* CE 10 is refined into CE [15] 


### Cost equations --> "Loop" of evalaxbb2in/4 
* CEs [15] --> Loop 12 
* CEs [13] --> Loop 13 
* CEs [14] --> Loop 14 

### Ranking functions of CR evalaxbb2in(B,C,D,E) 
* RF of phase [12]: [-B+C-1]

#### Partial ranking functions of CR evalaxbb2in(B,C,D,E) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    -B+C-1


### Specialization of cost equations evalaxbbin/6 
* CE 4 is discarded (unfeasible) 
* CE 3 is refined into CE [16,17] 
* CE 6 is refined into CE [18,19] 
* CE 7 is refined into CE [20] 
* CE 5 is refined into CE [21] 


### Cost equations --> "Loop" of evalaxbbin/6 
* CEs [21] --> Loop 15 
* CEs [17] --> Loop 16 
* CEs [16] --> Loop 17 
* CEs [19] --> Loop 18 
* CEs [18,20] --> Loop 19 

### Ranking functions of CR evalaxbbin(A,B,C,D,E,F) 
* RF of phase [15]: [-A+C-2]

#### Partial ranking functions of CR evalaxbbin(A,B,C,D,E,F) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    -A+C-2


### Specialization of cost equations evalaxbbin_loop_cont/5 
* CE 8 is refined into CE [22] 
* CE 9 is refined into CE [23] 


### Cost equations --> "Loop" of evalaxbbin_loop_cont/5 
* CEs [22] --> Loop 20 
* CEs [23] --> Loop 21 

### Ranking functions of CR evalaxbbin_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR evalaxbbin_loop_cont(A,B,C,D,E) 


### Specialization of cost equations evalaxentryin/4 
* CE 2 is refined into CE [24,25,26,27,28,29] 


### Cost equations --> "Loop" of evalaxentryin/4 
* CEs [27,29] --> Loop 22 
* CEs [26] --> Loop 23 
* CEs [24] --> Loop 24 
* CEs [28] --> Loop 25 
* CEs [25] --> Loop 26 

### Ranking functions of CR evalaxentryin(A,B,C,D) 

#### Partial ranking functions of CR evalaxentryin(A,B,C,D) 


### Specialization of cost equations evalaxstart/4 
* CE 1 is refined into CE [30,31,32,33,34] 


### Cost equations --> "Loop" of evalaxstart/4 
* CEs [34] --> Loop 27 
* CEs [33] --> Loop 28 
* CEs [32] --> Loop 29 
* CEs [31] --> Loop 30 
* CEs [30] --> Loop 31 

### Ranking functions of CR evalaxstart(A,B,C,D) 

#### Partial ranking functions of CR evalaxstart(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of evalaxbb2in(B,C,D,E):
* Chain [[12],14]: 1*it(12)+0
  Such that:it(12) =< -B+E

  with precondition: [D=2,C=E+1,B>=0,C>=B+2] 

* Chain [[12],13]: 1*it(12)+0
  Such that:it(12) =< -B+C

  with precondition: [D=3,B>=0,C>=B+2] 

* Chain [14]: 0
  with precondition: [D=2,B=E,B>=0,B+1>=C] 

* Chain [13]: 0
  with precondition: [D=3,B>=0] 


#### Cost of chains of evalaxbbin(A,B,C,D,E,F):
* Chain [[15],19]: 1*it(15)+1*s(3)+0
  Such that:it(15) =< -A+C
aux(1) =< C
s(3) =< it(15)*aux(1)

  with precondition: [D=3,A>=0,C>=A+3] 

* Chain [[15],18]: 1*it(15)+1*s(3)+1*s(4)+0
  Such that:it(15) =< -A+C
aux(2) =< C
s(4) =< aux(2)
s(3) =< it(15)*aux(2)

  with precondition: [D=3,A>=0,C>=A+3] 

* Chain [[15],16]: 1*it(15)+1*s(3)+1*s(5)+0
  Such that:it(15) =< -A+E
aux(3) =< E+2
s(5) =< aux(3)
s(3) =< it(15)*aux(3)

  with precondition: [D=4,C=E+2,C=F+1,A>=0,C>=A+3] 

* Chain [19]: 0
  with precondition: [D=3,A>=0] 

* Chain [18]: 1*s(4)+0
  Such that:s(4) =< C

  with precondition: [D=3,A>=0,C>=2] 

* Chain [17]: 0
  with precondition: [A=0,D=4,E=0,F=0,1>=C] 

* Chain [16]: 1*s(5)+0
  Such that:s(5) =< C

  with precondition: [D=4,F+1=C,A=E,F>=1,A+1>=F] 


#### Cost of chains of evalaxbbin_loop_cont(A,B,C,D,E):
* Chain [21]: 0
  with precondition: [A=3] 

* Chain [20]: 0
  with precondition: [A=4] 


#### Cost of chains of evalaxentryin(A,B,C,D):
* Chain [26]: 0
  with precondition: [] 

* Chain [25]: 1*s(13)+0
  Such that:s(13) =< 2

  with precondition: [C=2] 

* Chain [24]: 0
  with precondition: [1>=C] 

* Chain [23]: 1*s(14)+0
  Such that:s(14) =< C

  with precondition: [C>=2] 

* Chain [22]: 5*s(17)+3*s(19)+0
  Such that:aux(8) =< C
s(17) =< aux(8)
s(19) =< s(17)*aux(8)

  with precondition: [C>=3] 


#### Cost of chains of evalaxstart(A,B,C,D):
* Chain [31]: 0
  with precondition: [] 

* Chain [30]: 1*s(24)+0
  Such that:s(24) =< 2

  with precondition: [C=2] 

* Chain [29]: 0
  with precondition: [1>=C] 

* Chain [28]: 1*s(25)+0
  Such that:s(25) =< C

  with precondition: [C>=2] 

* Chain [27]: 5*s(27)+3*s(28)+0
  Such that:s(26) =< C
s(27) =< s(26)
s(28) =< s(27)*s(26)

  with precondition: [C>=3] 


Closed-form bounds of evalaxstart(A,B,C,D): 
-------------------------------------
* Chain [31] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [30] with precondition: [C=2] 
    - Upper bound: 2 
    - Complexity: constant 
* Chain [29] with precondition: [1>=C] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [28] with precondition: [C>=2] 
    - Upper bound: C 
    - Complexity: n 
* Chain [27] with precondition: [C>=3] 
    - Upper bound: 3*C*C+5*C 
    - Complexity: n^2 

### Maximum cost of evalaxstart(A,B,C,D): max([2,nat(C)*3*nat(C)+nat(C)*4+nat(C)]) 
Asymptotic class: n^2 
* Total analysis performed in 84 ms.

