NO

# LoAT Proof:
NO

NO

Initial ITS

Start location: f2

Location map:
LoAT_sink -> 0
f2 -> 1
f1 -> 2
f300 -> 3

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=it6, i7'=it5, i8'=it4
   1: (-2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=it9, i7'=it8, i8'=it7
   2: (-2+i1 == 0 /\ i4-i5 == 0) /\ i1'=3, i3'=1+i3, i5'=i4, i6'=it12, i7'=it11, i9'=it10
   3: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i10'=it14, i11'=it13

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 2
1 -> 0, 1 -> 1, 1 -> 2
3 -> 0, 3 -> 1, 3 -> 2

Refined Dependency Graph

	Removed the following edges: 0 -> 1, 0 -> 2, 1 -> 0, 1 -> 2

Start location: f2

Location map:
LoAT_sink -> 0
f2 -> 1
f1 -> 2
f300 -> 3

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=it6, i7'=it5, i8'=it4
   1: (-2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=it9, i7'=it8, i8'=it7
   2: (-2+i1 == 0 /\ i4-i5 == 0) /\ i1'=3, i3'=1+i3, i5'=i4, i6'=it12, i7'=it11, i9'=it10
   3: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i10'=it14, i11'=it13

Dependency graph:
0 -> 0
1 -> 1
3 -> 0, 3 -> 1, 3 -> 2

Step with 3

	Trace

	3[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	3[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ i4-i5 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	3[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	
Step with 0

	Trace

	3[(-1+i1 == 0)]
	0[(-2+i1 == 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=it6, i7'=it5, i8'=it4
	New rule:
	(-2+i1 >= 0 /\ -1+it59 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i1'=0

		-2+i1 >= 0 [0]: unchanged
		
		-1+i4-i5 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -1+i4-i5 >= 0 -> -1+i4-i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=it6, i7'=it5, i8'=it4
	New rule:
	(-2+i1 >= 0 /\ -1+it59 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it59, i6'=it6, i7'=it5, i8'=it4

		-2+i1 >= 0 [0]: unchanged
		
		-1+i4-i5 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -1+i4-i5 >= 0 -> -1+i4-i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ -1+it59 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it59, i6'=it6, i7'=it5, i8'=it4
	New rule:
	(-2+i1 >= 0 /\ -1+it59 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it59, i6'=it6, i7'=it5, i8'=it4

Start location: f2

Location map:
LoAT_sink -> 0
f2 -> 1
f1 -> 2
f300 -> 3

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=it6, i7'=it5, i8'=it4
   1: (-2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=it9, i7'=it8, i8'=it7
   2: (-2+i1 == 0 /\ i4-i5 == 0) /\ i1'=3, i3'=1+i3, i5'=i4, i6'=it12, i7'=it11, i9'=it10
   3: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i10'=it14, i11'=it13
   4: (-2+i1 >= 0 /\ -1+it59 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i1'=0
   5: (-2+i1 >= 0 /\ -1+it59 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it59, i6'=it6, i7'=it5, i8'=it4

Dependency graph:
0 -> 0, 0 -> 4, 0 -> 5
1 -> 1
3 -> 0, 3 -> 1, 3 -> 2, 3 -> 4, 3 -> 5
5 -> 0, 5 -> 4

Step with 4

	Trace

	3[(-1+i1 == 0)]
	4[(-2+i1 >= 0 /\ -1+it59 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{4[T]}
	
Refute

	Counterexample

	(i1=1, i3=-1, i4=1, i5=0, i6=0, i7=0, i8=0, i9=0)
	-3-> (i1=2, i3=0, i4=1, i5=0, i6=0, i7=0, i8=0, i9=0, i10=0, i11=0 )
	-4-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃, X₄, X₅, X₆, X₇
  Temp_Vars:  I, J, K
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₃: l0(X₀, X₁, X₂, X₃, X₄, X₅, X₆, X₇) → l1(X₀, X₁, X₂, X₃, X₄, X₅, I, J)
  t₀: l1(X₀, X₁, X₂, X₃, X₄, X₅, X₆, X₇) → l1(X₀, X₁, I, J, K, X₅, X₆, X₇) :|: 1+X₁ ≤ X₀
  t₁: l1(X₀, X₁, X₂, X₃, X₄, X₅, X₆, X₇) → l1(X₀, X₁, I, J, K, X₅, X₆, X₇) :|: 1+X₀ ≤ X₁
  t₂: l1(X₀, X₁, X₂, X₃, X₄, X₅, X₆, X₇) → l2(X₀, X₀, I, J, X₄, K, X₆, X₇) :|: X₁ ≤ X₀ ∧ X₀ ≤ X₁


Preprocessing
  Eliminate variables [I; J; K; X₂; X₃; X₄; X₅; X₆; X₇] that do not contribute to the problem


  Found invariant X₁ ≤ X₀ ∧ X₀ ≤ X₁ for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₄: l0(X₀, X₁) → l1(X₀, X₁)
  t₅: l1(X₀, X₁) → l1(X₀, X₁) :|: 1+X₁ ≤ X₀
  t₆: l1(X₀, X₁) → l1(X₀, X₁) :|: 1+X₀ ≤ X₁
  t₇: l1(X₀, X₁) → l2(X₀, X₀) :|: X₁ ≤ X₀ ∧ X₀ ≤ X₁


  Found invariant 1+X₁ ≤ X₀ for location l1_v2


  Found invariant X₁ ≤ X₀ ∧ X₀ ≤ X₁ for location l2


  Found invariant 1+X₀ ≤ X₁ for location l1_v1


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₄: 1 {O(1)}
    t₅: inf {Infinity}
    t₆: inf {Infinity}
    t₇: 1 {O(1)}


Costbounds
  Overall costbound: inf {Infinity}
    t₄: 1 {O(1)}
    t₅: inf {Infinity}
    t₆: inf {Infinity}
    t₇: 1 {O(1)}


Sizebounds
    t₄, X₀: X₀ {O(n)}
    t₄, X₁: X₁ {O(n)}
    t₅, X₀: X₀ {O(n)}
    t₅, X₁: X₁ {O(n)}
    t₆, X₀: X₀ {O(n)}
    t₆, X₁: X₁ {O(n)}
    t₇, X₀: X₀ {O(n)}
    t₇, X₁: X₀ {O(n)}

