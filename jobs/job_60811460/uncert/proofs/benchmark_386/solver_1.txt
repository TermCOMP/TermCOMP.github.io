WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f4 -> 2
f5 -> 3
f2 -> 4

Rules:
   0: (-2+i1 == 0 /\ -i5 >= 0 /\ -i4 >= 0) /\ i1'=3, i3'=1+i3, i6'=1
   1: (-1+i4 >= 0 /\ -1+i1 == 0) /\ i1'=4, i3'=1+i3, i6'=1
   2: (-2+i1 == 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
   3: (-1+i1 == 0 /\ -i4 >= 0) /\ i1'=2, i3'=1+i3, i6'=0

Dependency graph:
2 -> 0, 2 -> 2
3 -> 0, 3 -> 2

Step with 3

	Trace

	3[(-1+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	3[(-1+i1 == 0 /\ -i4 >= 0)]
	2[(-2+i1 == 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
	New rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ -it11+i5 >= 0) /\ i1'=i1, i3'=i3+it11, i5'=-it11+i5

		-2+i1 >= 0 [0]: unchanged
		
		-1+i5 >= 0 [0]: montonic decrease yields -it11+i5 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -1+i5 >= 0 -> -it11+i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ -it11+i5 >= 0) /\ i1'=i1, i3'=i3+it11, i5'=-it11+i5
	New rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ -it11+i5 >= 0) /\ i3'=i3+it11, i5'=-it11+i5
	
	Instantiation

	Original rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ -it11+i5 >= 0) /\ i3'=i3+it11, i5'=-it11+i5
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i5, i5'=0

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f4 -> 2
f5 -> 3
f2 -> 4

Rules:
   0: (-2+i1 == 0 /\ -i5 >= 0 /\ -i4 >= 0) /\ i1'=3, i3'=1+i3, i6'=1
   1: (-1+i4 >= 0 /\ -1+i1 == 0) /\ i1'=4, i3'=1+i3, i6'=1
   2: (-2+i1 == 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
   3: (-1+i1 == 0 /\ -i4 >= 0) /\ i1'=2, i3'=1+i3, i6'=0
   4: (0 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i5, i5'=0

Dependency graph:
2 -> 0, 2 -> 2, 2 -> 4
3 -> 0, 3 -> 2, 3 -> 4
4 -> 0, 4 -> 2

	Trace

	3[(-1+i1 == 0 /\ -i4 >= 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 4[T]}
	
Step with 0

	Trace

	3[(-1+i1 == 0 /\ -i4 >= 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0)]
	0[(-2+i1 == 0 /\ -i5 >= 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 4[T]}
	{}
	
Backtrack

	Trace

	3[(-1+i1 == 0 /\ -i4 >= 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{0[T], 2[T], 4[T]}
	
Backtrack

	Trace

	3[(-1+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{4[T]}
	
Step with 2

	Trace

	3[(-1+i1 == 0 /\ -i4 >= 0)]
	2[(-2+i1 == 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{4[T]}
	{}
	
Covered

	Trace

	3[(-1+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{2[T], 4[T]}
	
Step with 0

	Trace

	3[(-1+i1 == 0 /\ -i4 >= 0)]
	0[(-2+i1 == 0 /\ -i5 >= 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{2[T], 4[T]}
	{}
	
Backtrack

	Trace

	3[(-1+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{0[T], 2[T], 4[T]}
	
Backtrack

	Trace

	Blocked

	{3[T]}
	
Step with 1

	Trace

	1[(-1+i4 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{3[T]}
	{}
	
Backtrack

	Trace

	Blocked

	{1[T], 3[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l2, l3
  Return Locations:  
  Transitions:
  t₁: l0(X₀, X₁, X₂) → l1(X₀, X₁, 1) :|: 1 ≤ X₀
  t₃: l0(X₀, X₁, X₂) → l2(X₀, X₁, 0) :|: X₀ ≤ 0
  t₂: l2(X₀, X₁, X₂) → l2(X₀, X₁-1, X₂) :|: 1 ≤ X₁
  t₀: l2(X₀, X₁, X₂) → l3(X₀, X₁, 1) :|: X₀ ≤ 0 ∧ X₁ ≤ 0


Preprocessing
  Eliminate variables [X₂] that do not contribute to the problem


  Found invariant 1 ≤ X₀ for location l1


  Found invariant X₀ ≤ 0 for location l2


  Found invariant X₁ ≤ 0 ∧ X₀+X₁ ≤ 0 ∧ X₀ ≤ 0 for location l3


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l2, l3
  Return Locations:  
  Transitions:
  t₄: l0(X₀, X₁) → l1(X₀, X₁) :|: 1 ≤ X₀
  t₅: l0(X₀, X₁) → l2(X₀, X₁) :|: X₀ ≤ 0
  t₆: l2(X₀, X₁) → l2(X₀, X₁-1) :|: 1 ≤ X₁ ∧ X₀ ≤ 0
  t₇: l2(X₀, X₁) → l3(X₀, X₁) :|: X₀ ≤ 0 ∧ X₁ ≤ 0


MPRF for transition t₆: l2(X₀, X₁) → l2(X₀, X₁-1) :|: 1 ≤ X₁ ∧ X₀ ≤ 0 of depth 1:
  new bound:
    X₁ {O(n)}

  MPRF:
    • l2: [X₁]




All Bounds
Timebounds
  Overall timebound:X₁+3 {O(n)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: X₁ {O(n)}
    t₇: 1 {O(1)}


Costbounds
  Overall costbound: X₁+3 {O(n)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: X₁ {O(n)}
    t₇: 1 {O(1)}


Sizebounds
    t₄, X₀: X₀ {O(n)}
    t₄, X₁: X₁ {O(n)}
    t₅, X₀: X₀ {O(n)}
    t₅, X₁: X₁ {O(n)}
    t₆, X₀: X₀ {O(n)}
    t₆, X₁: X₁ {O(n)}
    t₇, X₀: 2⋅X₀ {O(n)}
    t₇, X₁: 2⋅X₁ {O(n)}

