WORST_CASE(INF,?)

# LoAT Proof:
WORST_CASE(INF,?)

WORST_CASE(Omega(n^1),?)
WORST_CASE(INF,?)
Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f2 -> 2

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-1+i5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=it2, i5'=-1+i5
   2: (-2+i1 == 0 /\ -1+i5 >= 0 /\ -i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=it3, i5'=-1+i5

Dependency graph:
0 -> 0, 0 -> 2
1 -> 0, 1 -> 2
2 -> 0, 2 -> 2

Step with 1

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	2[(-2+i1 == 0 /\ -1+i5 >= 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -1+i5 >= 0 /\ -i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=it3, i5'=-1+i5
	New rule:
	(-1+it15 >= 0 /\ -2+i1 >= 0 /\ -it3 >= 0 /\ -it15+i5 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -i4 >= 0) /\ i1'=i1, i3'=i3+it15, i4'=it3, i5'=-it15+i5

		-2+i1 >= 0 [0]: unchanged
		
		-1+i5 >= 0 [0]: montonic decrease yields (-it15+i5 >= 0 /\ -1+i5 >= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		-i4 >= 0 [0]: eventual decrease yields (-it3 >= 0 /\ -i4 >= 0)
		
		-i4 >= 0 [1]: eventual increase yields (-i4+it3 <= 0 /\ -i4 >= 0)
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -1+i5 >= 0 -> (-it15+i5 >= 0 /\ -1+i5 >= 0), 2-i1 >= 0 -> 2-i1 >= 0, -i4 >= 0 -> (-it3 >= 0 /\ -i4 >= 0)}

	Removed Trivial Updates

	Original rule:
	(-1+it15 >= 0 /\ -2+i1 >= 0 /\ -it3 >= 0 /\ -it15+i5 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -i4 >= 0) /\ i1'=i1, i3'=i3+it15, i4'=it3, i5'=-it15+i5
	New rule:
	(-1+it15 >= 0 /\ -2+i1 >= 0 /\ -it3 >= 0 /\ -it15+i5 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -i4 >= 0) /\ i3'=i3+it15, i4'=it3, i5'=-it15+i5
	
	Instantiation

	Original rule:
	(-1+it15 >= 0 /\ -2+i1 >= 0 /\ -it3 >= 0 /\ -it15+i5 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -i4 >= 0) /\ i3'=i3+it15, i4'=it3, i5'=-it15+i5
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ -it3 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -i4 >= 0) /\ i3'=i3+i5, i4'=it3, i5'=0

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f2 -> 2

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-1+i5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=it2, i5'=-1+i5
   2: (-2+i1 == 0 /\ -1+i5 >= 0 /\ -i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=it3, i5'=-1+i5
   3: (0 >= 0 /\ -2+i1 >= 0 /\ -it3 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -i4 >= 0) /\ i3'=i3+i5, i4'=it3, i5'=0

Dependency graph:
0 -> 0, 0 -> 2, 0 -> 3
1 -> 0, 1 -> 2, 1 -> 3
2 -> 0, 2 -> 2, 2 -> 3
3 -> 0, 3 -> 2

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ -it3 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 3[T]}
	
Backtrack

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{3[T]}
	
Step with 0

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{3[T]}
	{}
	
Unbounded

Accelerate

	Loop Acceleration

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
	New rule:
	(-1+it33 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i4-it33 >= 0) /\ i1'=i1, i3'=i3+it33, i4'=i4-it33

		-1+i4 >= 0 [0]: montonic decrease yields i4-it33 >= 0
		
		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-1+i4 >= 0 -> i4-it33 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+it33 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i4-it33 >= 0) /\ i1'=i1, i3'=i3+it33, i4'=i4-it33
	New rule:
	(-1+it33 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i4-it33 >= 0) /\ i3'=i3+it33, i4'=i4-it33
	
	Instantiation

	Original rule:
	(-1+it33 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i4-it33 >= 0) /\ i3'=i3+it33, i4'=i4-it33
	New rule:
	(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4, i4'=0

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f2 -> 2

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-1+i5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=it2, i5'=-1+i5
   2: (-2+i1 == 0 /\ -1+i5 >= 0 /\ -i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=it3, i5'=-1+i5
   3: (0 >= 0 /\ -2+i1 >= 0 /\ -it3 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -i4 >= 0) /\ i3'=i3+i5, i4'=it3, i5'=0
   4: (0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4, i4'=0

Dependency graph:
0 -> 0, 0 -> 2, 0 -> 3, 0 -> 4
1 -> 0, 1 -> 2, 1 -> 3, 1 -> 4
2 -> 0, 2 -> 2, 2 -> 3, 2 -> 4
3 -> 0, 3 -> 2, 3 -> 4
4 -> 0, 4 -> 2, 4 -> 3

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{0[T], 4[T]}
	
Step with 2

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	2[(-2+i1 == 0 /\ -1+i5 >= 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{0[T], 4[T]}
	{}
	
Covered

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{0[T], 2[T], 4[T]}
	
Step with 3

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ -it3 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{0[T], 2[T], 4[T]}
	{3[T]}
	
Backtrack

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{0[T], 2[T], 3[T], 4[T]}
	
Backtrack

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{3[T], 4[T]}
	
Step with 2

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	2[(-2+i1 == 0 /\ -1+i5 >= 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{3[T], 4[T]}
	{}
	
Covered

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{2[T], 3[T], 4[T]}
	
Step with 0

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{2[T], 3[T], 4[T]}
	{}
	
Covered

	Trace

	1[(-1+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 2[T], 3[T], 4[T]}
	
Backtrack

	Trace

	Blocked

	{1[T]}
	
Accept

Unbounded


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  C
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₁: l0(X₀, X₁) → l1(C, X₁-1) :|: 1 ≤ X₁
  t₀: l1(X₀, X₁) → l1(X₀-1, X₁) :|: 1 ≤ X₀
  t₂: l1(X₀, X₁) → l1(C, X₁-1) :|: 1 ≤ X₁ ∧ X₀ ≤ 0


Preprocessing
  Found invariant 0 ≤ X₁ for location l1


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  C
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₁: l0(X₀, X₁) → l1(C, X₁-1) :|: 1 ≤ X₁
  t₀: l1(X₀, X₁) → l1(X₀-1, X₁) :|: 1 ≤ X₀ ∧ 0 ≤ X₁
  t₂: l1(X₀, X₁) → l1(C, X₁-1) :|: 1 ≤ X₁ ∧ X₀ ≤ 0 ∧ 0 ≤ X₁


MPRF for transition t₂: l1(X₀, X₁) → l1(C, X₁-1) :|: 1 ≤ X₁ ∧ X₀ ≤ 0 ∧ 0 ≤ X₁ of depth 1:
  new bound:
    X₁+1 {O(n)}

  MPRF:
    • l1: [1+X₁]




  Found invariant 0 ≤ X₁ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l1_v2


  Found invariant 0 ≤ X₁ for location l1


  Found invariant 0 ≤ X₁ for location l1_v1


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₀: inf {Infinity}
    t₁: 1 {O(1)}
    t₂: X₁+1 {O(n)}


Costbounds
  Overall costbound: inf {Infinity}
    t₀: inf {Infinity}
    t₁: 1 {O(1)}
    t₂: X₁+1 {O(n)}


Sizebounds
    t₀, X₁: X₁ {O(n)}
    t₁, X₁: X₁ {O(n)}
    t₂, X₁: X₁ {O(n)}

