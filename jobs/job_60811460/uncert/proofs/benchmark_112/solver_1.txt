WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval1 -> 2
eval2 -> 3
eval3 -> 4

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0 /\ -1+i4-i5 >= 0) /\ i1'=3, i3'=1+i3
   1: (-i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0) /\ i1'=4, i3'=1+i3
   2: (-3+i1 == 0 /\ -1+i4 >= 0) /\ i1'=3, i3'=1+i3, i4'=-1+i4
   3: (-3+i1 == 0 /\ -i4 >= 0) /\ i1'=2, i3'=1+i3
   4: (-4+i1 == 0 /\ -1+i5 >= 0) /\ i1'=4, i3'=1+i3, i5'=-1+i5
   5: (-4+i1 == 0 /\ -i5 >= 0) /\ i1'=2, i3'=1+i3
   6: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 2, 0 -> 3
1 -> 4, 1 -> 5
2 -> 2, 2 -> 3
3 -> 0, 3 -> 1
4 -> 4, 4 -> 5
5 -> 0, 5 -> 1
6 -> 0, 6 -> 1

Refined Dependency Graph

	Removed the following edges: 0 -> 3, 1 -> 5, 3 -> 0, 3 -> 1, 5 -> 0, 5 -> 1

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval1 -> 2
eval2 -> 3
eval3 -> 4

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0 /\ -1+i4-i5 >= 0) /\ i1'=3, i3'=1+i3
   1: (-i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0) /\ i1'=4, i3'=1+i3
   2: (-3+i1 == 0 /\ -1+i4 >= 0) /\ i1'=3, i3'=1+i3, i4'=-1+i4
   3: (-3+i1 == 0 /\ -i4 >= 0) /\ i1'=2, i3'=1+i3
   4: (-4+i1 == 0 /\ -1+i5 >= 0) /\ i1'=4, i3'=1+i3, i5'=-1+i5
   5: (-4+i1 == 0 /\ -i5 >= 0) /\ i1'=2, i3'=1+i3
   6: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 2
1 -> 4
2 -> 2, 2 -> 3
4 -> 4, 4 -> 5
6 -> 0, 6 -> 1

Step with 6

	Trace

	6[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 1

	Trace

	6[(-1+i1 == 0)]
	1[(-i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Step with 4

	Trace

	6[(-1+i1 == 0)]
	1[(-i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0)]
	4[(-4+i1 == 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-4+i1 == 0 /\ -1+i5 >= 0) /\ i1'=4, i3'=1+i3, i5'=-1+i5
	New rule:
	(-1+it13 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ i5-it13 >= 0) /\ i1'=i1, i3'=i3+it13, i5'=i5-it13

		-4+i1 >= 0 [0]: unchanged
		
		4-i1 >= 0 [0]: unchanged
		
		-1+i5 >= 0 [0]: montonic decrease yields i5-it13 >= 0
		
		Replacement map: {-4+i1 >= 0 -> -4+i1 >= 0, 4-i1 >= 0 -> 4-i1 >= 0, -1+i5 >= 0 -> i5-it13 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+it13 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ i5-it13 >= 0) /\ i1'=i1, i3'=i3+it13, i5'=i5-it13
	New rule:
	(-1+it13 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ i5-it13 >= 0) /\ i3'=i3+it13, i5'=i5-it13
	
	Instantiation

	Original rule:
	(-1+it13 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ i5-it13 >= 0) /\ i3'=i3+it13, i5'=i5-it13
	New rule:
	(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+i5 >= 0) /\ i3'=i3+i5, i5'=0

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval1 -> 2
eval2 -> 3
eval3 -> 4

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0 /\ -1+i4-i5 >= 0) /\ i1'=3, i3'=1+i3
   1: (-i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0) /\ i1'=4, i3'=1+i3
   2: (-3+i1 == 0 /\ -1+i4 >= 0) /\ i1'=3, i3'=1+i3, i4'=-1+i4
   3: (-3+i1 == 0 /\ -i4 >= 0) /\ i1'=2, i3'=1+i3
   4: (-4+i1 == 0 /\ -1+i5 >= 0) /\ i1'=4, i3'=1+i3, i5'=-1+i5
   5: (-4+i1 == 0 /\ -i5 >= 0) /\ i1'=2, i3'=1+i3
   6: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   7: (0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+i5 >= 0) /\ i3'=i3+i5, i5'=0

Dependency graph:
0 -> 2
1 -> 4, 1 -> 7
2 -> 2, 2 -> 3
4 -> 4, 4 -> 5, 4 -> 7
6 -> 0, 6 -> 1
7 -> 4, 7 -> 5

	Trace

	6[(-1+i1 == 0)]
	1[(-i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0)]
	7[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	{4[T], 7[T]}
	
Step with 5

	Trace

	6[(-1+i1 == 0)]
	1[(-i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0)]
	7[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+i5 >= 0)]
	5[(-4+i1 == 0 /\ -i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	{4[T], 7[T]}
	{}
	
Backtrack

	Trace

	6[(-1+i1 == 0)]
	1[(-i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0)]
	7[(0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	{4[T], 5[T], 7[T]}
	
Backtrack

	Trace

	6[(-1+i1 == 0)]
	1[(-i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{}
	{7[T]}
	
Step with 4

	Trace

	6[(-1+i1 == 0)]
	1[(-i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0)]
	4[(-4+i1 == 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{}
	{7[T]}
	{}
	
Covered

	Trace

	6[(-1+i1 == 0)]
	1[(-i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{}
	{4[T], 7[T]}
	
Backtrack

	Trace

	6[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T]}
	
Step with 0

	Trace

	6[(-1+i1 == 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{1[T]}
	{}
	
Step with 2

	Trace

	6[(-1+i1 == 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0 /\ -1+i4-i5 >= 0)]
	2[(-3+i1 == 0 /\ -1+i4 >= 0)]
	
	Blocked

	{}
	{1[T]}
	{}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ -1+i4 >= 0) /\ i1'=3, i3'=1+i3, i4'=-1+i4
	New rule:
	(-3+i1 >= 0 /\ -it42+i4 >= 0 /\ 3-i1 >= 0 /\ -1+it42 >= 0) /\ i1'=i1, i3'=it42+i3, i4'=-it42+i4

		-3+i1 >= 0 [0]: unchanged
		
		-1+i4 >= 0 [0]: montonic decrease yields -it42+i4 >= 0
		
		3-i1 >= 0 [0]: unchanged
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, -1+i4 >= 0 -> -it42+i4 >= 0, 3-i1 >= 0 -> 3-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ -it42+i4 >= 0 /\ 3-i1 >= 0 /\ -1+it42 >= 0) /\ i1'=i1, i3'=it42+i3, i4'=-it42+i4
	New rule:
	(-3+i1 >= 0 /\ -it42+i4 >= 0 /\ 3-i1 >= 0 /\ -1+it42 >= 0) /\ i3'=it42+i3, i4'=-it42+i4
	
	Instantiation

	Original rule:
	(-3+i1 >= 0 /\ -it42+i4 >= 0 /\ 3-i1 >= 0 /\ -1+it42 >= 0) /\ i3'=it42+i3, i4'=-it42+i4
	New rule:
	(0 >= 0 /\ -3+i1 >= 0 /\ -1+i4 >= 0 /\ 3-i1 >= 0) /\ i3'=i3+i4, i4'=0

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval1 -> 2
eval2 -> 3
eval3 -> 4

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0 /\ -1+i4-i5 >= 0) /\ i1'=3, i3'=1+i3
   1: (-i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0) /\ i1'=4, i3'=1+i3
   2: (-3+i1 == 0 /\ -1+i4 >= 0) /\ i1'=3, i3'=1+i3, i4'=-1+i4
   3: (-3+i1 == 0 /\ -i4 >= 0) /\ i1'=2, i3'=1+i3
   4: (-4+i1 == 0 /\ -1+i5 >= 0) /\ i1'=4, i3'=1+i3, i5'=-1+i5
   5: (-4+i1 == 0 /\ -i5 >= 0) /\ i1'=2, i3'=1+i3
   6: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   7: (0 >= 0 /\ -4+i1 >= 0 /\ 4-i1 >= 0 /\ -1+i5 >= 0) /\ i3'=i3+i5, i5'=0
   8: (0 >= 0 /\ -3+i1 >= 0 /\ -1+i4 >= 0 /\ 3-i1 >= 0) /\ i3'=i3+i4, i4'=0

Dependency graph:
0 -> 2, 0 -> 8
1 -> 4, 1 -> 7
2 -> 2, 2 -> 3, 2 -> 8
4 -> 4, 4 -> 5, 4 -> 7
6 -> 0, 6 -> 1
7 -> 4, 7 -> 5
8 -> 2, 8 -> 3

	Trace

	6[(-1+i1 == 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0 /\ -1+i4-i5 >= 0)]
	8[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i4 >= 0 /\ 3-i1 >= 0)]
	
	Blocked

	{}
	{1[T]}
	{}
	{2[T], 8[T]}
	
Step with 3

	Trace

	6[(-1+i1 == 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0 /\ -1+i4-i5 >= 0)]
	8[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i4 >= 0 /\ 3-i1 >= 0)]
	3[(-3+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{1[T]}
	{}
	{2[T], 8[T]}
	{}
	
Backtrack

	Trace

	6[(-1+i1 == 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0 /\ -1+i4-i5 >= 0)]
	8[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i4 >= 0 /\ 3-i1 >= 0)]
	
	Blocked

	{}
	{1[T]}
	{}
	{2[T], 3[T], 8[T]}
	
Backtrack

	Trace

	6[(-1+i1 == 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{1[T]}
	{8[T]}
	
Step with 2

	Trace

	6[(-1+i1 == 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0 /\ -1+i4-i5 >= 0)]
	2[(-3+i1 == 0 /\ -1+i4 >= 0)]
	
	Blocked

	{}
	{1[T]}
	{8[T]}
	{}
	
Covered

	Trace

	6[(-1+i1 == 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{1[T]}
	{2[T], 8[T]}
	
Backtrack

	Trace

	6[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 1[T]}
	
Backtrack

	Trace

	Blocked

	{6[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l2, l3
  Return Locations:  
  Transitions:
  t₆: l0(X₀, X₁) → l3(X₀, X₁)
  t₂: l1(X₀, X₁) → l1(X₀-1, X₁) :|: 1 ≤ X₀
  t₃: l1(X₀, X₁) → l3(X₀, X₁) :|: X₀ ≤ 0
  t₄: l2(X₀, X₁) → l2(X₀, X₁-1) :|: 1 ≤ X₁
  t₅: l2(X₀, X₁) → l3(X₀, X₁) :|: X₁ ≤ 0
  t₀: l3(X₀, X₁) → l1(X₀, X₁) :|: 1 ≤ X₀ ∧ 1+X₁ ≤ X₀ ∧ 1 ≤ X₁
  t₁: l3(X₀, X₁) → l2(X₀, X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ X₀ ≤ X₁


Preprocessing
  Found invariant 1 ≤ X₁ ∧ 1 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l1


  Found invariant 0 ≤ X₁ ∧ 1 ≤ X₀+X₁ ∧ 1 ≤ X₀ for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l2, l3
  Return Locations:  
  Transitions:
  t₆: l0(X₀, X₁) → l3(X₀, X₁)
  t₂: l1(X₀, X₁) → l1(X₀-1, X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₀+X₁ ∧ 1 ≤ X₁ ∧ 0 ≤ X₀
  t₃: l1(X₀, X₁) → l3(X₀, X₁) :|: X₀ ≤ 0 ∧ 1 ≤ X₀+X₁ ∧ 1 ≤ X₁ ∧ 0 ≤ X₀
  t₄: l2(X₀, X₁) → l2(X₀, X₁-1) :|: 1 ≤ X₁ ∧ 1 ≤ X₀ ∧ 1 ≤ X₀+X₁ ∧ 0 ≤ X₁
  t₅: l2(X₀, X₁) → l3(X₀, X₁) :|: X₁ ≤ 0 ∧ 1 ≤ X₀ ∧ 1 ≤ X₀+X₁ ∧ 0 ≤ X₁
  t₀: l3(X₀, X₁) → l1(X₀, X₁) :|: 1 ≤ X₀ ∧ 1+X₁ ≤ X₀ ∧ 1 ≤ X₁
  t₁: l3(X₀, X₁) → l2(X₀, X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ X₀ ≤ X₁


  knowledge_propagation leads to new time bound 1 {O(1)} for transition t₀: l3(X₀, X₁) → l1(X₀, X₁) :|: 1 ≤ X₀ ∧ 1+X₁ ≤ X₀ ∧ 1 ≤ X₁


  knowledge_propagation leads to new time bound 1 {O(1)} for transition t₁: l3(X₀, X₁) → l2(X₀, X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ X₀ ≤ X₁


MPRF for transition t₂: l1(X₀, X₁) → l1(X₀-1, X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₀+X₁ ∧ 1 ≤ X₁ ∧ 0 ≤ X₀ of depth 1:
  new bound:
    X₀+1 {O(n)}

  MPRF:
    • l1: [1+X₀]
    • l2: [1+X₀]
    • l3: [1+X₀]




MPRF for transition t₃: l1(X₀, X₁) → l3(X₀, X₁) :|: X₀ ≤ 0 ∧ 1 ≤ X₀+X₁ ∧ 1 ≤ X₁ ∧ 0 ≤ X₀ of depth 1:
  new bound:
    X₀ {O(n)}

  MPRF:
    • l1: [1]
    • l2: [X₀]
    • l3: [X₀]




MPRF for transition t₄: l2(X₀, X₁) → l2(X₀, X₁-1) :|: 1 ≤ X₁ ∧ 1 ≤ X₀ ∧ 1 ≤ X₀+X₁ ∧ 0 ≤ X₁ of depth 1:
  new bound:
    2⋅X₁ {O(n)}

  MPRF:
    • l1: [2⋅X₁]
    • l2: [1+X₁]
    • l3: [2⋅X₁]




MPRF for transition t₅: l2(X₀, X₁) → l3(X₀, X₁) :|: X₁ ≤ 0 ∧ 1 ≤ X₀ ∧ 1 ≤ X₀+X₁ ∧ 0 ≤ X₁ of depth 1:
  new bound:
    X₁ {O(n)}

  MPRF:
    • l1: [X₁]
    • l2: [1]
    • l3: [X₁]




All Bounds
Timebounds
  Overall timebound:2⋅X₀+3⋅X₁+4 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: X₀+1 {O(n)}
    t₃: X₀ {O(n)}
    t₄: 2⋅X₁ {O(n)}
    t₅: X₁ {O(n)}
    t₆: 1 {O(1)}


Costbounds
  Overall costbound: 2⋅X₀+3⋅X₁+4 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: X₀+1 {O(n)}
    t₃: X₀ {O(n)}
    t₄: 2⋅X₁ {O(n)}
    t₅: X₁ {O(n)}
    t₆: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₁, X₀: X₀ {O(n)}
    t₁, X₁: X₁ {O(n)}
    t₂, X₀: X₀ {O(n)}
    t₂, X₁: X₁ {O(n)}
    t₃, X₀: 0 {O(1)}
    t₃, X₁: X₁ {O(n)}
    t₄, X₀: X₀ {O(n)}
    t₄, X₁: X₁ {O(n)}
    t₅, X₀: X₀ {O(n)}
    t₅, X₁: 0 {O(1)}
    t₆, X₀: X₀ {O(n)}
    t₆, X₁: X₁ {O(n)}

