MAYBE

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_counterex1b_5/5,eval_counterex1b_6/5,eval_counterex1b_bb1_in/5,eval_counterex1b_bb2_in/5,eval_counterex1b_bb3_in/5]
1. recursive  : [eval_counterex1b_13/9,eval_counterex1b_14/9,eval_counterex1b_bb4_in/9,eval_counterex1b_bb5_in/9,eval_counterex1b_bb6_in/9]
2. recursive  : [eval_counterex1b_10/16,eval_counterex1b_11/16,eval_counterex1b_12/16,eval_counterex1b__critedge2_in/16,eval_counterex1b__critedge_in/16,eval_counterex1b_bb1_in_loop_cont/17,eval_counterex1b_bb4_in_loop_cont/17]
3. non_recursive  : [eval_counterex1b_stop/11]
4. non_recursive  : [eval_counterex1b_bb7_in/11]
5. non_recursive  : [exit_location/1]
6. non_recursive  : [eval_counterex1b__critedge2_in_loop_cont/12]
7. non_recursive  : [eval_counterex1b_4/11]
8. non_recursive  : [eval_counterex1b_3/11]
9. non_recursive  : [eval_counterex1b_2/11]
10. non_recursive  : [eval_counterex1b_1/11]
11. non_recursive  : [eval_counterex1b_0/11]
12. non_recursive  : [eval_counterex1b_bb0_in/11]
13. non_recursive  : [eval_counterex1b_start/11]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_counterex1b_bb1_in/5
1. SCC is partially evaluated into eval_counterex1b_bb4_in/9
2. SCC is partially evaluated into eval_counterex1b__critedge2_in/16
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_counterex1b__critedge2_in_loop_cont/12
7. SCC is partially evaluated into eval_counterex1b_4/11
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is partially evaluated into eval_counterex1b_start/11

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_counterex1b_bb1_in/5 
* CE 13 is refined into CE [18] 
* CE 10 is refined into CE [19] 
* CE 12 is refined into CE [20] 
* CE 11 is refined into CE [21] 


### Cost equations --> "Loop" of eval_counterex1b_bb1_in/5 
* CEs [21] --> Loop 17 
* CEs [18] --> Loop 18 
* CEs [19] --> Loop 19 
* CEs [20] --> Loop 20 

### Ranking functions of CR eval_counterex1b_bb1_in(V__1,V_2,B,C,D) 
* RF of phase [17]: [V__1+1]

#### Partial ranking functions of CR eval_counterex1b_bb1_in(V__1,V_2,B,C,D) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    V__1+1


### Specialization of cost equations eval_counterex1b_bb4_in/9 
* CE 14 is refined into CE [22] 
* CE 16 is refined into CE [23] 
* CE 17 is refined into CE [24] 
* CE 15 is refined into CE [25] 


### Cost equations --> "Loop" of eval_counterex1b_bb4_in/9 
* CEs [25] --> Loop 21 
* CEs [22] --> Loop 22 
* CEs [23] --> Loop 23 
* CEs [24] --> Loop 24 

### Ranking functions of CR eval_counterex1b_bb4_in(V__0,V__01,V__2,V_7,V_n,B,C,D,E) 
* RF of phase [21]: [-V__2+V_n+1]

#### Partial ranking functions of CR eval_counterex1b_bb4_in(V__0,V__01,V__2,V_7,V_n,B,C,D,E) 
* Partial RF of phase [21]:
  - RF of loop [21:1]:
    -V__2+V_n+1


### Specialization of cost equations eval_counterex1b__critedge2_in/16 
* CE 6 is refined into CE [26] 
* CE 3 is refined into CE [27,28] 
* CE 5 is refined into CE [29,30,31,32,33,34,35,36] 
* CE 7 is refined into CE [37] 
* CE 4 is refined into CE [38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53] 


### Cost equations --> "Loop" of eval_counterex1b__critedge2_in/16 
* CEs [53] --> Loop 25 
* CEs [51] --> Loop 26 
* CEs [50] --> Loop 27 
* CEs [49] --> Loop 28 
* CEs [45] --> Loop 29 
* CEs [47] --> Loop 30 
* CEs [46] --> Loop 31 
* CEs [43] --> Loop 32 
* CEs [42] --> Loop 33 
* CEs [52] --> Loop 34 
* CEs [48] --> Loop 35 
* CEs [44] --> Loop 36 
* CEs [41] --> Loop 37 
* CEs [40] --> Loop 38 
* CEs [39] --> Loop 39 
* CEs [38] --> Loop 40 
* CEs [26] --> Loop 41 
* CEs [36] --> Loop 42 
* CEs [35] --> Loop 43 
* CEs [34] --> Loop 44 
* CEs [30] --> Loop 45 
* CEs [28,29,33] --> Loop 46 
* CEs [27] --> Loop 47 
* CEs [32] --> Loop 48 
* CEs [31] --> Loop 49 
* CEs [37] --> Loop 50 

### Ranking functions of CR eval_counterex1b__critedge2_in(V__0,V__01,V__1,V__2,V_2,V_5,V_7,V_n,B,C,D,E,F,G,H,I) 
* RF of phase [25,26,27,28,29,30,31,32,34,35,36,37,38,39]: [V__0+1]
* RF of phase [33]: [V__0+1]

#### Partial ranking functions of CR eval_counterex1b__critedge2_in(V__0,V__01,V__1,V__2,V_2,V_5,V_7,V_n,B,C,D,E,F,G,H,I) 
* Partial RF of phase [25,26,27,28,29,30,31,32,34,35,36,37,38,39]:
  - RF of loop [25:1,26:1,27:1,28:1,29:1,30:1,31:1,32:1,34:1,35:1,36:1,37:1,38:1,39:1]:
    V__0+1
  - RF of loop [26:1,27:1]:
    V__01 depends on loops [25:1,28:1,29:1,34:1,35:1,36:1,37:1,38:1] 
  - RF of loop [27:1]:
    V__01-V_n-1 depends on loops [25:1,28:1,29:1,34:1,35:1,36:1,37:1,38:1] 
  - RF of loop [28:1,29:1]:
    -V__01+V_n depends on loops [25:1,26:1,27:1,34:1,37:1,38:1,39:1] 
  - RF of loop [29:1,36:1]:
    -V__01 depends on loops [25:1,26:1,27:1,34:1,37:1,38:1,39:1] 
  - RF of loop [35:1,36:1]:
    -V__01+V_n+1 depends on loops [25:1,26:1,27:1,34:1,37:1,38:1,39:1] 
  - RF of loop [39:1]:
    V__01+1 depends on loops [25:1,28:1,29:1,34:1,35:1,36:1,37:1,38:1] 
* Partial RF of phase [33]:
  - RF of loop [33:1]:
    V__0+1


### Specialization of cost equations eval_counterex1b__critedge2_in_loop_cont/12 
* CE 8 is refined into CE [54] 
* CE 9 is refined into CE [55] 


### Cost equations --> "Loop" of eval_counterex1b__critedge2_in_loop_cont/12 
* CEs [54] --> Loop 51 
* CEs [55] --> Loop 52 

### Ranking functions of CR eval_counterex1b__critedge2_in_loop_cont(A,B,C,D,E,F,G,H,I,J,K,L) 

#### Partial ranking functions of CR eval_counterex1b__critedge2_in_loop_cont(A,B,C,D,E,F,G,H,I,J,K,L) 


### Specialization of cost equations eval_counterex1b_4/11 
* CE 2 is refined into CE [56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82] 


### Cost equations --> "Loop" of eval_counterex1b_4/11 
* CEs [74] --> Loop 53 
* CEs [72] --> Loop 54 
* CEs [71] --> Loop 55 
* CEs [69] --> Loop 56 
* CEs [68,81] --> Loop 57 
* CEs [76] --> Loop 58 
* CEs [73] --> Loop 59 
* CEs [75] --> Loop 60 
* CEs [70] --> Loop 61 
* CEs [61] --> Loop 62 
* CEs [59] --> Loop 63 
* CEs [60,80] --> Loop 64 
* CEs [58] --> Loop 65 
* CEs [82] --> Loop 66 
* CEs [67] --> Loop 67 
* CEs [66] --> Loop 68 
* CEs [65,78] --> Loop 69 
* CEs [64,79] --> Loop 70 
* CEs [63,77] --> Loop 71 
* CEs [62] --> Loop 72 
* CEs [56] --> Loop 73 
* CEs [57] --> Loop 74 

### Ranking functions of CR eval_counterex1b_4(V__0,V__01,V__1,V__2,V_2,V_5,V_7,V_n,V_x,V_y,B) 

#### Partial ranking functions of CR eval_counterex1b_4(V__0,V__01,V__1,V__2,V_2,V_5,V_7,V_n,V_x,V_y,B) 


### Specialization of cost equations eval_counterex1b_start/11 
* CE 1 is refined into CE [83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104] 


### Cost equations --> "Loop" of eval_counterex1b_start/11 
* CEs [104] --> Loop 75 
* CEs [103] --> Loop 76 
* CEs [102] --> Loop 77 
* CEs [101] --> Loop 78 
* CEs [100] --> Loop 79 
* CEs [99] --> Loop 80 
* CEs [98] --> Loop 81 
* CEs [97] --> Loop 82 
* CEs [96] --> Loop 83 
* CEs [95] --> Loop 84 
* CEs [94] --> Loop 85 
* CEs [93] --> Loop 86 
* CEs [92] --> Loop 87 
* CEs [91] --> Loop 88 
* CEs [90] --> Loop 89 
* CEs [89] --> Loop 90 
* CEs [88] --> Loop 91 
* CEs [87] --> Loop 92 
* CEs [86] --> Loop 93 
* CEs [85] --> Loop 94 
* CEs [84] --> Loop 95 
* CEs [83] --> Loop 96 

### Ranking functions of CR eval_counterex1b_start(V__0,V__01,V__1,V__2,V_2,V_5,V_7,V_n,V_x,V_y,B) 

#### Partial ranking functions of CR eval_counterex1b_start(V__0,V__01,V__1,V__2,V_2,V_5,V_7,V_n,V_x,V_y,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_counterex1b_bb1_in(V__1,V_2,B,C,D):
* Chain [[17],20]: 1*it(17)+0
  Such that:it(17) =< V__1+1

  with precondition: [B=2,C+1=0,V__1>=0,D>=1] 

* Chain [[17],19]: 1*it(17)+0
  Such that:it(17) =< V__1-C

  with precondition: [B=2,0>=D,C>=0,V__1>=C+1] 

* Chain [[17],18]: 1*it(17)+0
  Such that:it(17) =< V__1+1

  with precondition: [B=3,V__1>=0] 

* Chain [20]: 0
  with precondition: [B=2,D=V_2,V__1=C,0>=V__1+1] 

* Chain [19]: 0
  with precondition: [B=2,V__1=C,0>=D,V__1>=0] 

* Chain [18]: 0
  with precondition: [B=3] 


#### Cost of chains of eval_counterex1b_bb4_in(V__0,V__01,V__2,V_7,V_n,B,C,D,E):
* Chain [[21],24]: 1*it(21)+0
  Such that:it(21) =< -V__2+V_n+1

  with precondition: [B=3,V__0>=0,V_n>=V__2] 

* Chain [[21],23]: 1*it(21)+0
  Such that:it(21) =< -V__2+D

  with precondition: [B=4,V_n+1=C,V_n+1=D,V__0>=0,E>=1,V_n>=V__2] 

* Chain [[21],22]: 1*it(21)+0
  Such that:it(21) =< -V__2+D

  with precondition: [B=4,C=D,0>=E,V__0>=0,C>=V__2+1,V_n>=C] 

* Chain [24]: 0
  with precondition: [B=3,V__0>=0] 

* Chain [23]: 0
  with precondition: [B=4,E=V_7,V__2=C,V__2=D,V__0>=0,V__2>=V_n+1] 

* Chain [22]: 0
  with precondition: [B=4,V__2=C,V__2=D,0>=E,V__0>=0,V_n>=V__2] 


#### Cost of chains of eval_counterex1b__critedge2_in(V__0,V__01,V__1,V__2,V_2,V_5,V_7,V_n,B,C,D,E,F,G,H,I):
* Chain [[33],50]: 1*it(33)+0
  Such that:it(33) =< V__0+1

  with precondition: [B=3,0>=V__01+1,V__0>=0,V__01>=V_n+1] 

* Chain [[33],49]: 1*it(33)+0
  Such that:it(33) =< V__0

  with precondition: [B=3,0>=V__01+1,V__0>=1,V__01>=V_n+1] 

* Chain [[33],47]: 1*it(33)+0
  Such that:it(33) =< V__0

  with precondition: [B=3,0>=V__01+1,V__0>=1,V__01>=V_n+1] 

* Chain [[33],41]: 1*it(33)+0
  Such that:it(33) =< V__0+1

  with precondition: [B=5,C+1=0,H+1=0,V__01=D,V__01=E,V__01=F,V_2=G,V_7=I,0>=V__01+1,V__0>=0,V__01>=V_n+1] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],[33],50]: 14*it(25)+1*it(33)+11*s(31)+1*s(32)+2*s(38)+1*s(44)+0
  Such that:aux(11) =< V_n
aux(278) =< V__0
aux(279) =< V__0+1
aux(267) =< aux(278)
it(33) =< aux(278)
aux(267) =< aux(279)
it(33) =< aux(279)
it(25) =< aux(279)
it(25) =< aux(267)
aux(202) =< aux(11)+2
aux(103) =< aux(11)+1
s(32) =< it(25)*aux(11)
s(44) =< it(25)*aux(202)
s(38) =< it(25)*aux(103)

  with precondition: [B=3,0>=V_n+2,V__0>=1,V_n>=V__01] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],[33],49]: 14*it(25)+1*it(33)+11*s(31)+1*s(32)+2*s(38)+1*s(44)+0
  Such that:aux(266) =< V__0+1
aux(11) =< V_n
aux(280) =< V__0
it(33) =< aux(280)
it(25) =< aux(266)
it(25) =< aux(280)
aux(202) =< aux(11)+2
aux(103) =< aux(11)+1
s(32) =< it(25)*aux(11)
s(44) =< it(25)*aux(202)
s(38) =< it(25)*aux(103)

  with precondition: [B=3,0>=V_n+2,V__0>=2,V_n>=V__01] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],[33],47]: 14*it(25)+1*it(33)+11*s(31)+1*s(32)+2*s(38)+1*s(44)+0
  Such that:aux(266) =< V__0+1
aux(11) =< V_n
aux(281) =< V__0
it(33) =< aux(281)
it(25) =< aux(266)
it(25) =< aux(281)
aux(202) =< aux(11)+2
aux(103) =< aux(11)+1
s(32) =< it(25)*aux(11)
s(44) =< it(25)*aux(202)
s(38) =< it(25)*aux(103)

  with precondition: [B=3,0>=V_n+2,V__0>=2,V_n>=V__01] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],[33],41]: 14*it(25)+1*it(33)+11*s(31)+1*s(32)+2*s(38)+1*s(44)+0
  Such that:aux(11) =< V_n
aux(282) =< V__0
aux(283) =< V__0+1
aux(267) =< aux(282)
it(33) =< aux(282)
aux(267) =< aux(283)
it(33) =< aux(283)
it(25) =< aux(283)
it(25) =< aux(267)
aux(202) =< aux(11)+2
aux(103) =< aux(11)+1
s(32) =< it(25)*aux(11)
s(44) =< it(25)*aux(202)
s(38) =< it(25)*aux(103)

  with precondition: [B=5,C+1=0,H+1=0,D=V_n+1,D=E,D=F,V_2=G,0>=D+1,V__0>=1,I>=1,D>=V__01+1] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],50]: 14*it(25)+11*s(31)+1*s(32)+2*s(38)+1*s(44)+0
  Such that:aux(11) =< V_n
aux(284) =< V__0+1
it(25) =< aux(284)
aux(202) =< aux(11)+2
aux(103) =< aux(11)+1
s(32) =< it(25)*aux(11)
s(44) =< it(25)*aux(202)
s(38) =< it(25)*aux(103)

  with precondition: [B=3,V__0>=0] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],49]: 14*it(25)+11*s(31)+1*s(32)+2*s(38)+1*s(44)+0
  Such that:aux(267) =< V__0
aux(266) =< V__0+1
aux(11) =< V_n
it(25) =< aux(266)
it(25) =< aux(267)
aux(202) =< aux(11)+2
aux(103) =< aux(11)+1
s(32) =< it(25)*aux(11)
s(44) =< it(25)*aux(202)
s(38) =< it(25)*aux(103)

  with precondition: [B=3,V__0>=1] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],48]: 12*it(25)+2*it(29)+12*s(31)+1*s(32)+2*s(38)+1*s(44)+0
  Such that:aux(295) =< V_n
aux(777) =< V__0+1
aux(778) =< -V__01
it(25) =< aux(777)
it(29) =< aux(777)
aux(475) =< aux(295)+2
aux(383) =< aux(295)+1
s(32) =< it(25)*aux(295)
s(44) =< it(25)*aux(475)
s(38) =< it(25)*aux(383)
it(29) =< aux(777)+aux(777)+aux(778)

  with precondition: [B=3,V__0>=1] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],47]: 14*it(25)+11*s(31)+1*s(32)+2*s(38)+1*s(44)+0
  Such that:aux(267) =< V__0
aux(266) =< V__0+1
aux(11) =< V_n
it(25) =< aux(266)
it(25) =< aux(267)
aux(202) =< aux(11)+2
aux(103) =< aux(11)+1
s(32) =< it(25)*aux(11)
s(44) =< it(25)*aux(202)
s(38) =< it(25)*aux(103)

  with precondition: [B=3,V__0>=1] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],46]: 14*it(25)+11*s(31)+1*s(32)+2*s(38)+1*s(44)+2*s(50)+0
  Such that:aux(798) =< V_n
aux(1087) =< V__0+1
it(25) =< aux(1087)
aux(977) =< aux(798)+2
aux(885) =< aux(798)+1
s(32) =< it(25)*aux(798)
s(44) =< it(25)*aux(977)
s(38) =< it(25)*aux(885)

  with precondition: [B=3,V__0>=1] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],45]: 14*it(25)+12*s(31)+1*s(32)+2*s(38)+1*s(44)+1*s(55)+0
  Such that:aux(1105) =< V_n
s(55) =< V_n+2
aux(1394) =< V__0+1
it(25) =< aux(1394)
aux(1284) =< aux(1105)+2
aux(1192) =< aux(1105)+1
s(32) =< it(25)*aux(1105)
s(44) =< it(25)*aux(1284)
s(38) =< it(25)*aux(1192)

  with precondition: [B=3,V__0>=1,V_n+1>=0] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],44]: 14*it(25)+11*s(31)+1*s(32)+2*s(38)+1*s(44)+1*s(56)+0
  Such that:aux(267) =< V__0
aux(266) =< V__0+1
aux(11) =< V_n
s(56) =< V_n+1
it(25) =< aux(266)
it(25) =< aux(267)
aux(202) =< aux(11)+2
aux(103) =< aux(11)+1
s(32) =< it(25)*aux(11)
s(44) =< it(25)*aux(202)
s(38) =< it(25)*aux(103)

  with precondition: [B=3,V__0>=1,V_n>=0] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],43]: 14*it(25)+12*s(31)+1*s(32)+2*s(38)+1*s(44)+0
  Such that:aux(1412) =< V_n
aux(1701) =< V__0+1
it(25) =< aux(1701)
aux(1591) =< aux(1412)+2
aux(1499) =< aux(1412)+1
s(32) =< it(25)*aux(1412)
s(44) =< it(25)*aux(1591)
s(38) =< it(25)*aux(1499)

  with precondition: [B=3,V__0>=1] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],42]: 14*it(25)+12*s(31)+1*s(32)+2*s(38)+1*s(44)+1*s(62)+0
  Such that:aux(1719) =< V_n
s(62) =< V_n+1
aux(2008) =< V__0+1
it(25) =< aux(2008)
aux(1898) =< aux(1719)+2
aux(1806) =< aux(1719)+1
s(32) =< it(25)*aux(1719)
s(44) =< it(25)*aux(1898)
s(38) =< it(25)*aux(1806)

  with precondition: [B=3,V__0>=1,V_n>=0] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],41]: 14*it(25)+11*s(31)+1*s(32)+2*s(38)+1*s(44)+0
  Such that:aux(11) =< V_n
aux(2016) =< V__0+1
it(25) =< aux(2016)
aux(202) =< aux(11)+2
aux(103) =< aux(11)+1
s(32) =< it(25)*aux(11)
s(44) =< it(25)*aux(202)
s(38) =< it(25)*aux(103)

  with precondition: [B=5,C+1=0,H+1=0,D=F,V__0>=0,D>=E] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],40,[33],50]: 14*it(25)+1*it([40,[33],50])+12*s(31)+1*s(32)+2*s(38)+1*s(44)+1*s(64)+0
  Such that:it([40,[33],50]) =< 1
s(64) =< V__0
aux(2027) =< V_n
aux(2331) =< V__0+1
aux(2338) =< -V_n
it(25) =< aux(2331)
it([40,[33],50]) =< aux(2331)
it([40,[33],50]) =< aux(2338)
aux(2220) =< aux(2027)+2
aux(2119) =< aux(2027)+1
s(32) =< it(25)*aux(2027)
s(44) =< it(25)*aux(2220)
s(38) =< it(25)*aux(2119)

  with precondition: [B=3,0>=V_n+2,V__0>=2,V__01>=0] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],40,[33],49]: 14*it(25)+1*it([40,[33],49])+12*s(31)+1*s(32)+2*s(38)+1*s(44)+1*s(66)+0
  Such that:it([40,[33],49]) =< 1
s(66) =< V__0
aux(2349) =< V_n
aux(2653) =< V__0+1
aux(2660) =< -V_n
it(25) =< aux(2653)
it([40,[33],49]) =< aux(2653)
it([40,[33],49]) =< aux(2660)
aux(2542) =< aux(2349)+2
aux(2441) =< aux(2349)+1
s(32) =< it(25)*aux(2349)
s(44) =< it(25)*aux(2542)
s(38) =< it(25)*aux(2441)

  with precondition: [B=3,0>=V_n+2,V__0>=3,V__01>=0] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],40,[33],47]: 14*it(25)+1*it([40,[33],47])+12*s(31)+1*s(32)+2*s(38)+1*s(44)+1*s(68)+0
  Such that:it([40,[33],47]) =< 1
s(68) =< V__0
aux(2671) =< V_n
aux(2975) =< V__0+1
aux(2982) =< -V_n
it(25) =< aux(2975)
it([40,[33],47]) =< aux(2975)
it([40,[33],47]) =< aux(2982)
aux(2864) =< aux(2671)+2
aux(2763) =< aux(2671)+1
s(32) =< it(25)*aux(2671)
s(44) =< it(25)*aux(2864)
s(38) =< it(25)*aux(2763)

  with precondition: [B=3,0>=V_n+2,V__0>=3,V__01>=0] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],40,[33],41]: 14*it(25)+1*it([40,[33],41])+12*s(31)+1*s(32)+2*s(38)+1*s(44)+1*s(70)+0
  Such that:it([40,[33],41]) =< 1
s(70) =< V__0
aux(2993) =< V_n
aux(3297) =< V__0+1
aux(3304) =< -V_n
it(25) =< aux(3297)
it([40,[33],41]) =< aux(3297)
it([40,[33],41]) =< aux(3304)
aux(3186) =< aux(2993)+2
aux(3085) =< aux(2993)+1
s(32) =< it(25)*aux(2993)
s(44) =< it(25)*aux(3186)
s(38) =< it(25)*aux(3085)

  with precondition: [B=5,C+1=0,D+1=0,E+1=0,F+1=0,H+1=0,V_7=I,0>=V_n+2,V__0>=2,V__01>=0,G>=1] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],40,50]: 14*it(25)+1*it([40,50])+12*s(31)+1*s(32)+2*s(38)+1*s(44)+0
  Such that:it([40,50]) =< 1
aux(3315) =< V_n
aux(3619) =< V__0+1
aux(3626) =< -V_n
it(25) =< aux(3619)
it([40,50]) =< aux(3619)
it([40,50]) =< aux(3626)
aux(3508) =< aux(3315)+2
aux(3407) =< aux(3315)+1
s(32) =< it(25)*aux(3315)
s(44) =< it(25)*aux(3508)
s(38) =< it(25)*aux(3407)

  with precondition: [B=3,0>=V_n+2,V__0>=1,V__01>=0] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],40,49]: 14*it(25)+1*it([40,49])+12*s(31)+1*s(32)+2*s(38)+1*s(44)+0
  Such that:it([40,49]) =< 1
aux(3637) =< V_n
aux(3941) =< V__0+1
aux(3948) =< -V_n
it(25) =< aux(3941)
it([40,49]) =< aux(3941)
it([40,49]) =< aux(3948)
aux(3830) =< aux(3637)+2
aux(3729) =< aux(3637)+1
s(32) =< it(25)*aux(3637)
s(44) =< it(25)*aux(3830)
s(38) =< it(25)*aux(3729)

  with precondition: [B=3,0>=V_n+2,V__0>=2,V__01>=0] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],40,47]: 14*it(25)+1*it([40,47])+12*s(31)+1*s(32)+2*s(38)+1*s(44)+0
  Such that:it([40,47]) =< 1
aux(3959) =< V_n
aux(4263) =< V__0+1
aux(4270) =< -V_n
it(25) =< aux(4263)
it([40,47]) =< aux(4263)
it([40,47]) =< aux(4270)
aux(4152) =< aux(3959)+2
aux(4051) =< aux(3959)+1
s(32) =< it(25)*aux(3959)
s(44) =< it(25)*aux(4152)
s(38) =< it(25)*aux(4051)

  with precondition: [B=3,0>=V_n+2,V__0>=2,V__01>=0] 

* Chain [[25,26,27,28,29,30,31,32,34,35,36,37,38,39],40,41]: 14*it(25)+1*it([40,41])+12*s(31)+1*s(32)+2*s(38)+1*s(44)+0
  Such that:it([40,41]) =< 1
aux(4281) =< V_n
aux(4585) =< V__0+1
aux(4592) =< -V_n
it(25) =< aux(4585)
it([40,41]) =< aux(4585)
it([40,41]) =< aux(4592)
aux(4474) =< aux(4281)+2
aux(4373) =< aux(4281)+1
s(32) =< it(25)*aux(4281)
s(44) =< it(25)*aux(4474)
s(38) =< it(25)*aux(4373)

  with precondition: [B=5,C+1=0,D+1=0,E+1=0,F+1=0,H+1=0,V_7=I,0>=V_n+2,V__0>=1,V__01>=0,G>=1] 

* Chain [50]: 0
  with precondition: [B=3] 

* Chain [49]: 0
  with precondition: [B=3,0>=V__01+1,V__0>=0] 

* Chain [48]: 1*s(46)+0
  Such that:s(46) =< -V__01+V_n+1

  with precondition: [B=3,0>=V__01+1,V__0>=0,V_n>=V__01] 

* Chain [47]: 0
  with precondition: [B=3,V__0>=0] 

* Chain [46]: 2*s(48)+0
  Such that:aux(787) =< V__01+1
s(48) =< aux(787)

  with precondition: [B=3,V__0>=0,V__01>=0] 

* Chain [45]: 1*s(52)+1*s(53)+0
  Such that:s(52) =< V__01+1
s(53) =< V_n+2

  with precondition: [B=3,V__0>=0,V__01>=0,V_n+1>=0] 

* Chain [44]: 1*s(56)+0
  Such that:s(56) =< -V__01+V_n+1

  with precondition: [B=3,V__0>=0,V__01>=0,V_n>=V__01] 

* Chain [43]: 1*s(57)+0
  Such that:s(57) =< V__01

  with precondition: [B=3,V__0>=0,V__01>=1] 

* Chain [42]: 1*s(59)+1*s(60)+0
  Such that:s(59) =< V__01
s(60) =< V_n+1

  with precondition: [B=3,V__0>=0,V__01>=1,V_n>=0] 

* Chain [41]: 0
  with precondition: [B=5,D=V__01,E=V__1,F=V__2,G=V_2,H=V_5,I=V_7,V__0=C,0>=V__0+1] 

* Chain [40,[33],50]: 1*it(33)+1*s(63)+1
  Such that:it(33) =< V__0
s(63) =< V__01+1

  with precondition: [B=3,0>=V_n+2,V__0>=1,V__01>=0] 

* Chain [40,[33],49]: 1*it(33)+1*s(63)+1
  Such that:it(33) =< V__0
s(63) =< V__01+1

  with precondition: [B=3,0>=V_n+2,V__0>=2,V__01>=0] 

* Chain [40,[33],47]: 1*it(33)+1*s(63)+1
  Such that:it(33) =< V__0
s(63) =< V__01+1

  with precondition: [B=3,0>=V_n+2,V__0>=2,V__01>=0] 

* Chain [40,[33],41]: 1*it(33)+1*s(63)+1
  Such that:it(33) =< V__0
s(63) =< V__01+1

  with precondition: [B=5,C+1=0,D+1=0,E+1=0,F+1=0,H+1=0,V_7=I,0>=V_n+2,V__0>=1,V__01>=0,G>=1] 

* Chain [40,50]: 1*s(63)+1
  Such that:s(63) =< V__01+1

  with precondition: [B=3,0>=V_n+2,V__0>=0,V__01>=0] 

* Chain [40,49]: 1*s(63)+1
  Such that:s(63) =< V__01+1

  with precondition: [B=3,0>=V_n+2,V__0>=1,V__01>=0] 

* Chain [40,47]: 1*s(63)+1
  Such that:s(63) =< V__01+1

  with precondition: [B=3,0>=V_n+2,V__0>=1,V__01>=0] 

* Chain [40,41]: 1*s(63)+1
  Such that:s(63) =< V__01+1

  with precondition: [V__0=0,B=5,C+1=0,D+1=0,E+1=0,F+1=0,H+1=0,V_7=I,0>=V_n+2,V__01>=0,G>=1] 


#### Cost of chains of eval_counterex1b__critedge2_in_loop_cont(A,B,C,D,E,F,G,H,I,J,K,L):
* Chain [52]: 0
  with precondition: [A=3] 

* Chain [51]: 0
  with precondition: [A=5] 


#### Cost of chains of eval_counterex1b_4(V__0,V__01,V__1,V__2,V_2,V_5,V_7,V_n,V_x,V_y,B):
* Chain [74]: 0
  with precondition: [] 

* Chain [73]: 1*s(270)+1
  Such that:s(270) =< V_y+1

  with precondition: [V_x=0,0>=V_n+2,V_y>=0] 

* Chain [72]: 1*s(271)+1
  Such that:s(271) =< V_y+1

  with precondition: [0>=V_n+2,V_x>=0,V_y>=0] 

* Chain [71]: 2*s(272)+2*s(273)+4*s(278)+28*s(279)+2*s(283)+4*s(284)+24*s(285)+1
  Such that:aux(4615) =< 1
aux(4616) =< -V_n
aux(4617) =< V_x
aux(4618) =< V_x+1
aux(4619) =< V_y+1
s(272) =< aux(4615)
s(273) =< aux(4617)
s(278) =< aux(4619)
s(279) =< aux(4618)
s(272) =< aux(4618)
s(272) =< aux(4616)
s(280) =< 2
s(281) =< 1
s(283) =< s(279)*s(280)
s(284) =< s(279)*s(281)

  with precondition: [0>=V_n+2,V_x>=1,V_y>=0] 

* Chain [70]: 2*s(303)+28*s(304)+2*s(308)+4*s(309)+22*s(310)+0
  Such that:aux(4620) =< V_x
aux(4621) =< V_x+1
s(302) =< aux(4620)
s(303) =< aux(4620)
s(302) =< aux(4621)
s(303) =< aux(4621)
s(304) =< aux(4621)
s(304) =< s(302)
s(305) =< 2
s(306) =< 1
s(308) =< s(304)*s(305)
s(309) =< s(304)*s(306)

  with precondition: [0>=V_n+2,V_x>=1,V_n>=V_y] 

* Chain [69]: 4*s(329)+4*s(330)+2*s(331)+56*s(332)+4*s(336)+8*s(337)+48*s(338)+1
  Such that:s(326) =< V_y+1
aux(4622) =< 1
aux(4623) =< -V_n
aux(4624) =< V_x
aux(4625) =< V_x+1
s(329) =< aux(4622)
s(330) =< aux(4624)
s(331) =< s(326)
s(332) =< aux(4625)
s(329) =< aux(4625)
s(329) =< aux(4623)
s(333) =< 2
s(334) =< 1
s(336) =< s(332)*s(333)
s(337) =< s(332)*s(334)

  with precondition: [0>=V_n+2,V_x>=2,V_y>=0] 

* Chain [68]: 2*s(354)+28*s(355)+2*s(359)+4*s(360)+22*s(361)+0
  Such that:s(351) =< V_x
s(352) =< V_x+1
s(354) =< s(351)
s(355) =< s(352)
s(355) =< s(351)
s(356) =< 2
s(357) =< 1
s(359) =< s(355)*s(356)
s(360) =< s(355)*s(357)

  with precondition: [0>=V_n+2,V_x>=2,V_n>=V_y] 

* Chain [67]: 2*s(367)+2*s(368)+28*s(369)+2*s(373)+4*s(374)+24*s(375)+0
  Such that:s(362) =< 1
s(365) =< -V_n
s(363) =< V_x
s(364) =< V_x+1
s(367) =< s(362)
s(368) =< s(363)
s(369) =< s(364)
s(367) =< s(364)
s(367) =< s(365)
s(370) =< 2
s(371) =< 1
s(373) =< s(369)*s(370)
s(374) =< s(369)*s(371)

  with precondition: [0>=V_n+2,V_x>=3,V_y>=0] 

* Chain [66]: 0
  with precondition: [0>=V_x+1] 

* Chain [65]: 0
  with precondition: [0>=V_y+1,V_x>=0] 

* Chain [64]: 2*s(376)+0
  Such that:aux(4626) =< V_x+1
s(376) =< aux(4626)

  with precondition: [0>=V_y+1,V_x>=0,V_y>=V_n+1] 

* Chain [63]: 1*s(378)+0
  Such that:s(378) =< V_n-V_y+1

  with precondition: [0>=V_y+1,V_x>=0,V_n>=V_y] 

* Chain [62]: 2*s(380)+0
  Such that:s(379) =< V_x
s(380) =< s(379)

  with precondition: [0>=V_y+1,V_x>=1,V_y>=V_n+1] 

* Chain [61]: 1*s(381)+1*s(382)+0
  Such that:s(382) =< V_n+2
s(381) =< V_y+1

  with precondition: [V_n+1>=0,V_x>=0,V_y>=0] 

* Chain [60]: 1*s(384)+14*s(386)+1*s(389)+1*s(390)+2*s(391)+12*s(392)+0
  Such that:s(383) =< V_n
s(384) =< V_n+2
s(385) =< V_x+1
s(386) =< s(385)
s(387) =< s(383)+2
s(388) =< s(383)+1
s(389) =< s(386)*s(383)
s(390) =< s(386)*s(387)
s(391) =< s(386)*s(388)

  with precondition: [V_n+1>=0,V_x>=1] 

* Chain [59]: 1*s(393)+1*s(394)+0
  Such that:s(394) =< V_n+1
s(393) =< V_y

  with precondition: [V_n>=0,V_x>=0,V_y>=1] 

* Chain [58]: 2*s(399)+14*s(400)+1*s(403)+1*s(404)+2*s(405)+14*s(406)+1*s(407)+1*s(408)+2*s(409)+23*s(410)+0
  Such that:s(397) =< V_n
s(398) =< V_n+1
s(395) =< V_x
s(396) =< V_x+1
s(399) =< s(398)
s(400) =< s(396)
s(400) =< s(395)
s(401) =< s(397)+2
s(402) =< s(397)+1
s(403) =< s(400)*s(397)
s(404) =< s(400)*s(401)
s(405) =< s(400)*s(402)
s(406) =< s(396)
s(407) =< s(406)*s(397)
s(408) =< s(406)*s(401)
s(409) =< s(406)*s(402)

  with precondition: [V_n>=0,V_x>=1] 

* Chain [57]: 28*s(413)+2*s(416)+2*s(417)+4*s(418)+22*s(419)+0
  Such that:aux(4627) =< V_n
aux(4628) =< V_x+1
s(413) =< aux(4628)
s(414) =< aux(4627)+2
s(415) =< aux(4627)+1
s(416) =< s(413)*aux(4627)
s(417) =< s(413)*s(414)
s(418) =< s(413)*s(415)

  with precondition: [V_x>=0] 

* Chain [56]: 2*s(430)+0
  Such that:s(429) =< V_y+1
s(430) =< s(429)

  with precondition: [V_x>=0,V_y>=0] 

* Chain [55]: 1*s(431)+0
  Such that:s(431) =< V_n-V_y+1

  with precondition: [V_x>=0,V_y>=0,V_n>=V_y] 

* Chain [54]: 1*s(432)+0
  Such that:s(432) =< V_y

  with precondition: [V_x>=0,V_y>=1] 

* Chain [53]: 28*s(437)+2*s(440)+2*s(441)+4*s(442)+40*s(443)+3*s(444)+3*s(445)+6*s(446)+2*s(447)+59*s(448)+0
  Such that:s(436) =< V_n
s(434) =< V_x
s(435) =< V_x+1
s(433) =< -V_y
s(437) =< s(435)
s(437) =< s(434)
s(438) =< s(436)+2
s(439) =< s(436)+1
s(440) =< s(437)*s(436)
s(441) =< s(437)*s(438)
s(442) =< s(437)*s(439)
s(443) =< s(435)
s(444) =< s(443)*s(436)
s(445) =< s(443)*s(438)
s(446) =< s(443)*s(439)
s(447) =< s(435)
s(447) =< s(435)+s(435)+s(433)

  with precondition: [V_x>=1] 


#### Cost of chains of eval_counterex1b_start(V__0,V__01,V__1,V__2,V_2,V_5,V_7,V_n,V_x,V_y,B):
* Chain [96]: 0
  with precondition: [] 

* Chain [95]: 1*s(449)+1
  Such that:s(449) =< V_y+1

  with precondition: [V_x=0,0>=V_n+2,V_y>=0] 

* Chain [94]: 1*s(450)+1
  Such that:s(450) =< V_y+1

  with precondition: [0>=V_n+2,V_x>=0,V_y>=0] 

* Chain [93]: 2*s(456)+2*s(457)+4*s(458)+28*s(459)+2*s(462)+4*s(463)+24*s(464)+1
  Such that:s(451) =< 1
s(452) =< -V_n
s(453) =< V_x
s(454) =< V_x+1
s(455) =< V_y+1
s(456) =< s(451)
s(457) =< s(453)
s(458) =< s(455)
s(459) =< s(454)
s(456) =< s(454)
s(456) =< s(452)
s(460) =< 2
s(461) =< 1
s(462) =< s(459)*s(460)
s(463) =< s(459)*s(461)

  with precondition: [0>=V_n+2,V_x>=1,V_y>=0] 

* Chain [92]: 2*s(468)+28*s(469)+2*s(472)+4*s(473)+22*s(474)+0
  Such that:s(465) =< V_x
s(466) =< V_x+1
s(467) =< s(465)
s(468) =< s(465)
s(467) =< s(466)
s(468) =< s(466)
s(469) =< s(466)
s(469) =< s(467)
s(470) =< 2
s(471) =< 1
s(472) =< s(469)*s(470)
s(473) =< s(469)*s(471)

  with precondition: [0>=V_n+2,V_x>=1,V_n>=V_y] 

* Chain [91]: 4*s(480)+4*s(481)+2*s(482)+56*s(483)+4*s(486)+8*s(487)+48*s(488)+1
  Such that:s(476) =< 1
s(477) =< -V_n
s(478) =< V_x
s(479) =< V_x+1
s(475) =< V_y+1
s(480) =< s(476)
s(481) =< s(478)
s(482) =< s(475)
s(483) =< s(479)
s(480) =< s(479)
s(480) =< s(477)
s(484) =< 2
s(485) =< 1
s(486) =< s(483)*s(484)
s(487) =< s(483)*s(485)

  with precondition: [0>=V_n+2,V_x>=2,V_y>=0] 

* Chain [90]: 2*s(491)+28*s(492)+2*s(495)+4*s(496)+22*s(497)+0
  Such that:s(489) =< V_x
s(490) =< V_x+1
s(491) =< s(489)
s(492) =< s(490)
s(492) =< s(489)
s(493) =< 2
s(494) =< 1
s(495) =< s(492)*s(493)
s(496) =< s(492)*s(494)

  with precondition: [0>=V_n+2,V_x>=2,V_n>=V_y] 

* Chain [89]: 2*s(502)+2*s(503)+28*s(504)+2*s(507)+4*s(508)+24*s(509)+0
  Such that:s(498) =< 1
s(499) =< -V_n
s(500) =< V_x
s(501) =< V_x+1
s(502) =< s(498)
s(503) =< s(500)
s(504) =< s(501)
s(502) =< s(501)
s(502) =< s(499)
s(505) =< 2
s(506) =< 1
s(507) =< s(504)*s(505)
s(508) =< s(504)*s(506)

  with precondition: [0>=V_n+2,V_x>=3,V_y>=0] 

* Chain [88]: 0
  with precondition: [0>=V_x+1] 

* Chain [87]: 0
  with precondition: [0>=V_y+1,V_x>=0] 

* Chain [86]: 2*s(511)+0
  Such that:s(510) =< V_x+1
s(511) =< s(510)

  with precondition: [0>=V_y+1,V_x>=0,V_y>=V_n+1] 

* Chain [85]: 1*s(512)+0
  Such that:s(512) =< V_n-V_y+1

  with precondition: [0>=V_y+1,V_x>=0,V_n>=V_y] 

* Chain [84]: 2*s(514)+0
  Such that:s(513) =< V_x
s(514) =< s(513)

  with precondition: [0>=V_y+1,V_x>=1,V_y>=V_n+1] 

* Chain [83]: 1*s(515)+1*s(516)+0
  Such that:s(515) =< V_n+2
s(516) =< V_y+1

  with precondition: [V_n+1>=0,V_x>=0,V_y>=0] 

* Chain [82]: 1*s(518)+14*s(520)+1*s(523)+1*s(524)+2*s(525)+12*s(526)+0
  Such that:s(517) =< V_n
s(518) =< V_n+2
s(519) =< V_x+1
s(520) =< s(519)
s(521) =< s(517)+2
s(522) =< s(517)+1
s(523) =< s(520)*s(517)
s(524) =< s(520)*s(521)
s(525) =< s(520)*s(522)

  with precondition: [V_n+1>=0,V_x>=1] 

* Chain [81]: 1*s(527)+1*s(528)+0
  Such that:s(527) =< V_n+1
s(528) =< V_y

  with precondition: [V_n>=0,V_x>=0,V_y>=1] 

* Chain [80]: 2*s(533)+14*s(534)+1*s(537)+1*s(538)+2*s(539)+14*s(540)+1*s(541)+1*s(542)+2*s(543)+23*s(544)+0
  Such that:s(529) =< V_n
s(530) =< V_n+1
s(531) =< V_x
s(532) =< V_x+1
s(533) =< s(530)
s(534) =< s(532)
s(534) =< s(531)
s(535) =< s(529)+2
s(536) =< s(529)+1
s(537) =< s(534)*s(529)
s(538) =< s(534)*s(535)
s(539) =< s(534)*s(536)
s(540) =< s(532)
s(541) =< s(540)*s(529)
s(542) =< s(540)*s(535)
s(543) =< s(540)*s(536)

  with precondition: [V_n>=0,V_x>=1] 

* Chain [79]: 28*s(547)+2*s(550)+2*s(551)+4*s(552)+22*s(553)+0
  Such that:s(545) =< V_n
s(546) =< V_x+1
s(547) =< s(546)
s(548) =< s(545)+2
s(549) =< s(545)+1
s(550) =< s(547)*s(545)
s(551) =< s(547)*s(548)
s(552) =< s(547)*s(549)

  with precondition: [V_x>=0] 

* Chain [78]: 2*s(555)+0
  Such that:s(554) =< V_y+1
s(555) =< s(554)

  with precondition: [V_x>=0,V_y>=0] 

* Chain [77]: 1*s(556)+0
  Such that:s(556) =< V_n-V_y+1

  with precondition: [V_x>=0,V_y>=0,V_n>=V_y] 

* Chain [76]: 1*s(557)+0
  Such that:s(557) =< V_y

  with precondition: [V_x>=0,V_y>=1] 

* Chain [75]: 28*s(562)+2*s(565)+2*s(566)+4*s(567)+40*s(568)+3*s(569)+3*s(570)+6*s(571)+2*s(572)+59*s(573)+0
  Such that:s(558) =< V_n
s(559) =< V_x
s(560) =< V_x+1
s(561) =< -V_y
s(562) =< s(560)
s(562) =< s(559)
s(563) =< s(558)+2
s(564) =< s(558)+1
s(565) =< s(562)*s(558)
s(566) =< s(562)*s(563)
s(567) =< s(562)*s(564)
s(568) =< s(560)
s(569) =< s(568)*s(558)
s(570) =< s(568)*s(563)
s(571) =< s(568)*s(564)
s(572) =< s(560)
s(572) =< s(560)+s(560)+s(561)

  with precondition: [V_x>=1] 


Closed-form bounds of eval_counterex1b_start(V__0,V__01,V__1,V__2,V_2,V_5,V_7,V_n,V_x,V_y,B): 
-------------------------------------
* Chain [96] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [95] with precondition: [V_x=0,0>=V_n+2,V_y>=0] 
    - Upper bound: V_y+2 
    - Complexity: n 
* Chain [94] with precondition: [0>=V_n+2,V_x>=0,V_y>=0] 
    - Upper bound: V_y+2 
    - Complexity: n 
* Chain [93] with precondition: [0>=V_n+2,V_x>=1,V_y>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [92] with precondition: [0>=V_n+2,V_x>=1,V_n>=V_y] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [91] with precondition: [0>=V_n+2,V_x>=2,V_y>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [90] with precondition: [0>=V_n+2,V_x>=2,V_n>=V_y] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [89] with precondition: [0>=V_n+2,V_x>=3,V_y>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [88] with precondition: [0>=V_x+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [87] with precondition: [0>=V_y+1,V_x>=0] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [86] with precondition: [0>=V_y+1,V_x>=0,V_y>=V_n+1] 
    - Upper bound: 2*V_x+2 
    - Complexity: n 
* Chain [85] with precondition: [0>=V_y+1,V_x>=0,V_n>=V_y] 
    - Upper bound: V_n-V_y+1 
    - Complexity: n 
* Chain [84] with precondition: [0>=V_y+1,V_x>=1,V_y>=V_n+1] 
    - Upper bound: 2*V_x 
    - Complexity: n 
* Chain [83] with precondition: [V_n+1>=0,V_x>=0,V_y>=0] 
    - Upper bound: V_n+V_y+3 
    - Complexity: n 
* Chain [82] with precondition: [V_n+1>=0,V_x>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [81] with precondition: [V_n>=0,V_x>=0,V_y>=1] 
    - Upper bound: V_n+V_y+1 
    - Complexity: n 
* Chain [80] with precondition: [V_n>=0,V_x>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [79] with precondition: [V_x>=0] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [78] with precondition: [V_x>=0,V_y>=0] 
    - Upper bound: 2*V_y+2 
    - Complexity: n 
* Chain [77] with precondition: [V_x>=0,V_y>=0,V_n>=V_y] 
    - Upper bound: V_n-V_y+1 
    - Complexity: n 
* Chain [76] with precondition: [V_x>=0,V_y>=1] 
    - Upper bound: V_y 
    - Complexity: n 
* Chain [75] with precondition: [V_x>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_counterex1b_start(V__0,V__01,V__1,V__2,V_2,V_5,V_7,V_n,V_x,V_y,B): inf 
Asymptotic class: infinity 
* Total analysis performed in 17389 ms.

