WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-2+i1 == 0 /\ -1+i4+i5 >= 0 /\ -1+i5 >= 0 /\ -i4 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
   2: (-2+i1 == 0 /\ -1+i4+i5 >= 0 /\ -i5 >= 0 /\ -i4 >= 0) /\ i1'=2, i3'=1+i3
   3: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 2
1 -> 0, 1 -> 1, 1 -> 2
2 -> 0, 2 -> 1, 2 -> 2
3 -> 0, 3 -> 1, 3 -> 2

Refined Dependency Graph

	Removed the following edges: 0 -> 2, 1 -> 0, 1 -> 2, 2 -> 0, 2 -> 1, 2 -> 2, 3 -> 2

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-2+i1 == 0 /\ -1+i4+i5 >= 0 /\ -1+i5 >= 0 /\ -i4 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
   2: (-2+i1 == 0 /\ -1+i4+i5 >= 0 /\ -i5 >= 0 /\ -i4 >= 0) /\ i1'=2, i3'=1+i3
   3: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 0, 0 -> 1
1 -> 1
3 -> 0, 3 -> 1

Step with 3

	Trace

	3[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 1

	Trace

	3[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ -1+i4+i5 >= 0 /\ -1+i5 >= 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -1+i4+i5 >= 0 /\ -1+i5 >= 0 /\ -i4 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
	New rule:
	(-it9+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0 /\ -i4 >= 0 /\ i4-it9+i5 >= 0) /\ i1'=i1, i3'=i3+it9, i5'=-it9+i5

		-2+i1 >= 0 [0]: unchanged
		
		-1+i4+i5 >= 0 [0]: montonic decrease yields i4-it9+i5 >= 0
		
		-1+i5 >= 0 [0]: montonic decrease yields -it9+i5 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		-i4 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -1+i4+i5 >= 0 -> i4-it9+i5 >= 0, -1+i5 >= 0 -> -it9+i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -i4 >= 0 -> -i4 >= 0}

	Removed Trivial Updates

	Original rule:
	(-it9+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0 /\ -i4 >= 0 /\ i4-it9+i5 >= 0) /\ i1'=i1, i3'=i3+it9, i5'=-it9+i5
	New rule:
	(-it9+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0 /\ -i4 >= 0 /\ i4-it9+i5 >= 0) /\ i3'=i3+it9, i5'=-it9+i5

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-2+i1 == 0 /\ -1+i4+i5 >= 0 /\ -1+i5 >= 0 /\ -i4 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
   2: (-2+i1 == 0 /\ -1+i4+i5 >= 0 /\ -i5 >= 0 /\ -i4 >= 0) /\ i1'=2, i3'=1+i3
   3: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   4: (-it9+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0 /\ -i4 >= 0 /\ i4-it9+i5 >= 0) /\ i3'=i3+it9, i5'=-it9+i5

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 4
1 -> 1, 1 -> 4
3 -> 0, 3 -> 1, 3 -> 4
4 -> 1

	Trace

	3[(-1+i1 == 0)]
	4[(-it9+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0 /\ -i4 >= 0 /\ i4-it9+i5 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 4[T]}
	
Backtrack

	Trace

	3[(-1+i1 == 0)]
	
	Blocked

	{}
	{4[T]}
	
Step with 0

	Trace

	3[(-1+i1 == 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i4+i5 >= 0)]
	
	Blocked

	{}
	{4[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
	New rule:
	(i4+i5-it29 >= 0 /\ -2+i1 >= 0 /\ -1+it29 >= 0 /\ i4-it29 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it29, i4'=i4-it29

		-1+i4 >= 0 [0]: montonic decrease yields i4-it29 >= 0
		
		-2+i1 >= 0 [0]: unchanged
		
		-1+i4+i5 >= 0 [0]: montonic decrease yields i4+i5-it29 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-1+i4 >= 0 -> i4-it29 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, -1+i4+i5 >= 0 -> i4+i5-it29 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(i4+i5-it29 >= 0 /\ -2+i1 >= 0 /\ -1+it29 >= 0 /\ i4-it29 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it29, i4'=i4-it29
	New rule:
	(i4+i5-it29 >= 0 /\ -2+i1 >= 0 /\ -1+it29 >= 0 /\ i4-it29 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it29, i4'=i4-it29

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-2+i1 == 0 /\ -1+i4+i5 >= 0 /\ -1+i5 >= 0 /\ -i4 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5
   2: (-2+i1 == 0 /\ -1+i4+i5 >= 0 /\ -i5 >= 0 /\ -i4 >= 0) /\ i1'=2, i3'=1+i3
   3: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   4: (-it9+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0 /\ -i4 >= 0 /\ i4-it9+i5 >= 0) /\ i3'=i3+it9, i5'=-it9+i5
   5: (i4+i5-it29 >= 0 /\ -2+i1 >= 0 /\ -1+it29 >= 0 /\ i4-it29 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it29, i4'=i4-it29

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 4, 0 -> 5
1 -> 1, 1 -> 4
3 -> 0, 3 -> 1, 3 -> 4, 3 -> 5
4 -> 1
5 -> 0, 5 -> 1, 5 -> 4

	Trace

	3[(-1+i1 == 0)]
	5[(i4+i5-it29 >= 0 /\ -2+i1 >= 0 /\ -1+it29 >= 0 /\ i4-it29 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{4[T]}
	{0[T], 5[T]}
	
Step with 4

	Trace

	3[(-1+i1 == 0)]
	5[(i4+i5-it29 >= 0 /\ -2+i1 >= 0 /\ -1+it29 >= 0 /\ i4-it29 >= 0 /\ 2-i1 >= 0)]
	4[(-it9+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0 /\ -i4 >= 0 /\ i4-it9+i5 >= 0)]
	
	Blocked

	{}
	{4[T]}
	{0[T], 5[T]}
	{4[T]}
	
Step with 1

	Trace

	3[(-1+i1 == 0)]
	5[(i4+i5-it29 >= 0 /\ -2+i1 >= 0 /\ -1+it29 >= 0 /\ i4-it29 >= 0 /\ 2-i1 >= 0)]
	4[(-it9+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0 /\ -i4 >= 0 /\ i4-it9+i5 >= 0)]
	1[(-2+i1 == 0 /\ -1+i4+i5 >= 0 /\ -1+i5 >= 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{4[T]}
	{0[T], 5[T]}
	{4[T]}
	{}
	
Covered

	Trace

	3[(-1+i1 == 0)]
	5[(i4+i5-it29 >= 0 /\ -2+i1 >= 0 /\ -1+it29 >= 0 /\ i4-it29 >= 0 /\ 2-i1 >= 0)]
	4[(-it9+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0 /\ -i4 >= 0 /\ i4-it9+i5 >= 0)]
	
	Blocked

	{}
	{4[T]}
	{0[T], 5[T]}
	{1[T], 4[T]}
	
Backtrack

	Trace

	3[(-1+i1 == 0)]
	5[(i4+i5-it29 >= 0 /\ -2+i1 >= 0 /\ -1+it29 >= 0 /\ i4-it29 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{4[T]}
	{0[T], 4[T], 5[T]}
	
Step with 1

	Trace

	3[(-1+i1 == 0)]
	5[(i4+i5-it29 >= 0 /\ -2+i1 >= 0 /\ -1+it29 >= 0 /\ i4-it29 >= 0 /\ 2-i1 >= 0)]
	1[(-2+i1 == 0 /\ -1+i4+i5 >= 0 /\ -1+i5 >= 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{4[T]}
	{0[T], 4[T], 5[T]}
	{}
	
Covered

	Trace

	3[(-1+i1 == 0)]
	5[(i4+i5-it29 >= 0 /\ -2+i1 >= 0 /\ -1+it29 >= 0 /\ i4-it29 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{4[T]}
	{0[T], 1[T], 4[T], 5[T]}
	
Backtrack

	Trace

	3[(-1+i1 == 0)]
	
	Blocked

	{}
	{4[T], 5[T]}
	
Step with 0

	Trace

	3[(-1+i1 == 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i4+i5 >= 0)]
	
	Blocked

	{}
	{4[T], 5[T]}
	{}
	
Covered

	Trace

	3[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 4[T], 5[T]}
	
Step with 1

	Trace

	3[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ -1+i4+i5 >= 0 /\ -1+i5 >= 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{0[T], 4[T], 5[T]}
	{}
	
Covered

	Trace

	3[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 1[T], 4[T], 5[T]}
	
Backtrack

	Trace

	Blocked

	{3[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₃: l0(X₀, X₁) → l1(X₀, X₁)
  t₀: l1(X₀, X₁) → l1(X₀-1, X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₀+X₁
  t₁: l1(X₀, X₁) → l1(X₀, X₁-1) :|: 1 ≤ X₀+X₁ ∧ 1 ≤ X₁ ∧ X₀ ≤ 0
  t₂: l1(X₀, X₁) → l1(X₀, X₁) :|: 1 ≤ X₀+X₁ ∧ X₀ ≤ 0 ∧ X₁ ≤ 0


Preprocessing
  Cut unsatisfiable transition [t₂: l1→l1]


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₃: l0(X₀, X₁) → l1(X₀, X₁)
  t₀: l1(X₀, X₁) → l1(X₀-1, X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₀+X₁
  t₁: l1(X₀, X₁) → l1(X₀, X₁-1) :|: 1 ≤ X₀+X₁ ∧ 1 ≤ X₁ ∧ X₀ ≤ 0


MPRF for transition t₀: l1(X₀, X₁) → l1(X₀-1, X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₀+X₁ of depth 1:
  new bound:
    X₀ {O(n)}

  MPRF:
    • l1: [X₀]




MPRF for transition t₁: l1(X₀, X₁) → l1(X₀, X₁-1) :|: 1 ≤ X₀+X₁ ∧ 1 ≤ X₁ ∧ X₀ ≤ 0 of depth 1:
  new bound:
    X₁ {O(n)}

  MPRF:
    • l1: [X₁]




All Bounds
Timebounds
  Overall timebound:X₀+X₁+1 {O(n)}
    t₀: X₀ {O(n)}
    t₁: X₁ {O(n)}
    t₃: 1 {O(1)}


Costbounds
  Overall costbound: X₀+X₁+1 {O(n)}
    t₀: X₀ {O(n)}
    t₁: X₁ {O(n)}
    t₃: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₁, X₀: 2⋅X₀ {O(n)}
    t₁, X₁: 2⋅X₁ {O(n)}
    t₃, X₀: X₀ {O(n)}
    t₃, X₁: X₁ {O(n)}

