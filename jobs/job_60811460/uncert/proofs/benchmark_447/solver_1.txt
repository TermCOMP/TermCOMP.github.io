NO

# LoAT Proof:
NO

WORST_CASE(Omega(n^1),?)
NO

Initial ITS

Start location: f2

Location map:
LoAT_sink -> 0
f2 -> 1
f300 -> 2
f1 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+it2 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=it2
   2: (-2+i1 == 0 /\ -1-it3 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=it3
   3: (-2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5, i6'=0
   4: (-2+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=1+i3, i7'=it4

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3, 0 -> 4
1 -> 1, 1 -> 2, 1 -> 3, 1 -> 4
2 -> 1, 2 -> 2, 2 -> 3, 2 -> 4
3 -> 1, 3 -> 2, 3 -> 3, 3 -> 4

Refined Dependency Graph

	Removed the following edges: 1 -> 4, 2 -> 4

Start location: f2

Location map:
LoAT_sink -> 0
f2 -> 1
f300 -> 2
f1 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+it2 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=it2
   2: (-2+i1 == 0 /\ -1-it3 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=it3
   3: (-2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5, i6'=0
   4: (-2+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=1+i3, i7'=it4

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3, 0 -> 4
1 -> 1, 1 -> 2, 1 -> 3
2 -> 1, 2 -> 2, 2 -> 3
3 -> 1, 3 -> 2, 3 -> 3, 3 -> 4

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	3[(-2+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5, i6'=0
	New rule:
	(-2+i1 >= 0 /\ -1+it19 >= 0 /\ -it19-i4+i5 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=i1, i3'=i3+it19, i5'=-it19+i5, i6'=0

		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		-1-i4+i5 >= 0 [0]: montonic decrease yields (-it19-i4+i5 >= 0 /\ -1-i4+i5 >= 0)
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -1-i4+i5 >= 0 -> (-it19-i4+i5 >= 0 /\ -1-i4+i5 >= 0)}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ -1+it19 >= 0 /\ -it19-i4+i5 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=i1, i3'=i3+it19, i5'=-it19+i5, i6'=0
	New rule:
	(-2+i1 >= 0 /\ -1+it19 >= 0 /\ -it19-i4+i5 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3+it19, i5'=-it19+i5, i6'=0
	
	Instantiation

	Original rule:
	(-2+i1 >= 0 /\ -1+it19 >= 0 /\ -it19-i4+i5 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3+it19, i5'=-it19+i5, i6'=0
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-i4+i5, i5'=i4, i6'=0

Start location: f2

Location map:
LoAT_sink -> 0
f2 -> 1
f300 -> 2
f1 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+it2 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=it2
   2: (-2+i1 == 0 /\ -1-it3 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=it3
   3: (-2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5, i6'=0
   4: (-2+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=1+i3, i7'=it4
   5: (0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-i4+i5, i5'=i4, i6'=0

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3, 0 -> 4, 0 -> 5
1 -> 1, 1 -> 2, 1 -> 3, 1 -> 5
2 -> 1, 2 -> 2, 2 -> 3, 2 -> 5
3 -> 1, 3 -> 2, 3 -> 3, 3 -> 4, 3 -> 5
5 -> 1, 5 -> 2, 5 -> 3, 5 -> 4

	Trace

	0[(-1+i1 == 0)]
	5[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{}
	{3[T], 5[T]}
	
Step with 4

	Trace

	0[(-1+i1 == 0)]
	5[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0)]
	4[(-2+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 3[T], 5[T]}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	5[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 3[T], 4[T], 5[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{5[T]}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	3[(-2+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{5[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{3[T], 5[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-1+it2 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{3[T], 5[T]}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-1+it2 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=it2
	New rule:
	(-1+it54 >= 0 /\ -1+it2 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=0

		-1+it2 >= 0 [0]: unchanged
		
		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		-1-i4+i5 >= 0 [0]: unchanged
		
		Replacement map: {-1+it2 >= 0 -> -1+it2 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -1-i4+i5 >= 0 -> -1-i4+i5 >= 0}

	Loop Acceleration

	Original rule:
	(-1+it2 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=it2
	New rule:
	(-1+it54 >= 0 /\ -1+it2 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=i1, i3'=i3+it54, i6'=it2

		-1+it2 >= 0 [0]: unchanged
		
		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		-1-i4+i5 >= 0 [0]: unchanged
		
		Replacement map: {-1+it2 >= 0 -> -1+it2 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -1-i4+i5 >= 0 -> -1-i4+i5 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+it54 >= 0 /\ -1+it2 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=i1, i3'=i3+it54, i6'=it2
	New rule:
	(-1+it54 >= 0 /\ -1+it2 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3+it54, i6'=it2

Start location: f2

Location map:
LoAT_sink -> 0
f2 -> 1
f300 -> 2
f1 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+it2 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=it2
   2: (-2+i1 == 0 /\ -1-it3 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=it3
   3: (-2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-1+i5, i6'=0
   4: (-2+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=1+i3, i7'=it4
   5: (0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-i4+i5, i5'=i4, i6'=0
   6: (-1+it54 >= 0 /\ -1+it2 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i1'=0
   7: (-1+it54 >= 0 /\ -1+it2 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3+it54, i6'=it2

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3, 0 -> 4, 0 -> 5, 0 -> 6, 0 -> 7
1 -> 1, 1 -> 2, 1 -> 3, 1 -> 5, 1 -> 6, 1 -> 7
2 -> 1, 2 -> 2, 2 -> 3, 2 -> 5, 2 -> 6, 2 -> 7
3 -> 1, 3 -> 2, 3 -> 3, 3 -> 4, 3 -> 5, 3 -> 6, 3 -> 7
5 -> 1, 5 -> 2, 5 -> 3, 5 -> 4, 5 -> 6, 5 -> 7
7 -> 1, 7 -> 2, 7 -> 3, 7 -> 5, 7 -> 6

Step with 6

	Trace

	0[(-1+i1 == 0)]
	6[(-1+it54 >= 0 /\ -1+it2 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{3[T], 5[T]}
	{6[T]}
	
Refute

	Counterexample

	(i1=1, i3=-2, i4=-1, i5=0, i6=0, i7=0)
	-0-> (i1=2, i3=-1, i4=-1, i5=0, i6=0, i7=0 )
	-6-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃
  Temp_Vars:  E
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂, X₃) → l1(X₀, X₁, X₂, X₃)
  t₁: l1(X₀, X₁, X₂, X₃) → l1(X₀, X₁, E, X₃) :|: 1 ≤ E ∧ 1+X₀ ≤ X₁
  t₂: l1(X₀, X₁, X₂, X₃) → l1(X₀, X₁, E, X₃) :|: 1+E ≤ 0 ∧ 1+X₀ ≤ X₁
  t₃: l1(X₀, X₁, X₂, X₃) → l1(X₀, X₁-1, 0, X₃) :|: 1+X₀ ≤ X₁
  t₄: l1(X₀, X₁, X₂, X₃) → l2(X₀, X₁, X₂, E) :|: X₁ ≤ X₀


Preprocessing
  Eliminate variables [X₂; X₃] that do not contribute to the problem


  Found invariant X₁ ≤ X₀ for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  E
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₅: l0(X₀, X₁) → l1(X₀, X₁)
  t₆: l1(X₀, X₁) → l1(X₀, X₁) :|: 1 ≤ E ∧ 1+X₀ ≤ X₁
  t₇: l1(X₀, X₁) → l1(X₀, X₁) :|: 1+E ≤ 0 ∧ 1+X₀ ≤ X₁
  t₈: l1(X₀, X₁) → l1(X₀, X₁-1) :|: 1+X₀ ≤ X₁
  t₉: l1(X₀, X₁) → l2(X₀, X₁) :|: X₁ ≤ X₀


MPRF for transition t₈: l1(X₀, X₁) → l1(X₀, X₁-1) :|: 1+X₀ ≤ X₁ of depth 1:
  new bound:
    X₀+X₁ {O(n)}

  MPRF:
    • l1: [X₁-X₀]




  Found invariant 1+X₀ ≤ X₁ for location l1_v2


  Found invariant X₁ ≤ X₀ for location l2


  Found invariant X₀ ≤ X₁ for location l1_v1


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₅: 1 {O(1)}
    t₆: inf {Infinity}
    t₇: inf {Infinity}
    t₈: X₀+X₁ {O(n)}
    t₉: 1 {O(1)}


Costbounds
  Overall costbound: inf {Infinity}
    t₅: 1 {O(1)}
    t₆: inf {Infinity}
    t₇: inf {Infinity}
    t₈: X₀+X₁ {O(n)}
    t₉: 1 {O(1)}


Sizebounds
    t₅, X₀: X₀ {O(n)}
    t₅, X₁: X₁ {O(n)}
    t₆, X₀: X₀ {O(n)}
    t₆, X₁: 2⋅X₁+X₀ {O(n)}
    t₇, X₀: X₀ {O(n)}
    t₇, X₁: 2⋅X₁+X₀ {O(n)}
    t₈, X₀: X₀ {O(n)}
    t₈, X₁: 2⋅X₁+X₀ {O(n)}
    t₉, X₀: 2⋅X₀ {O(n)}
    t₉, X₁: 3⋅X₁+X₀ {O(n)}

