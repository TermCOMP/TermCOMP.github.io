WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_insertsort_bb3_in/4,eval_insertsort_bb4_in/4,eval_insertsort_bb5_in/4]
1. recursive  : [eval_insertsort_25/10,eval_insertsort_26/10,eval_insertsort_bb1_in/10,eval_insertsort_bb2_in/10,eval_insertsort_bb3_in_loop_cont/11,eval_insertsort_bb6_in/10]
2. non_recursive  : [eval_insertsort_stop/6]
3. non_recursive  : [eval_insertsort_bb7_in/6]
4. non_recursive  : [exit_location/1]
5. non_recursive  : [eval_insertsort_bb1_in_loop_cont/7]
6. non_recursive  : [eval_insertsort_6/6]
7. non_recursive  : [eval_insertsort_5/6]
8. non_recursive  : [eval_insertsort_4/6]
9. non_recursive  : [eval_insertsort_3/6]
10. non_recursive  : [eval_insertsort_2/6]
11. non_recursive  : [eval_insertsort_1/6]
12. non_recursive  : [eval_insertsort_0/6]
13. non_recursive  : [eval_insertsort_bb0_in/6]
14. non_recursive  : [eval_insertsort_start/6]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_insertsort_bb3_in/4
1. SCC is partially evaluated into eval_insertsort_bb1_in/10
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_insertsort_bb1_in_loop_cont/7
6. SCC is partially evaluated into eval_insertsort_6/6
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is partially evaluated into eval_insertsort_start/6

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_insertsort_bb3_in/4 
* CE 12 is refined into CE [13] 
* CE 9 is refined into CE [14] 
* CE 11 is refined into CE [15] 
* CE 10 is refined into CE [16] 


### Cost equations --> "Loop" of eval_insertsort_bb3_in/4 
* CEs [16] --> Loop 13 
* CEs [13] --> Loop 14 
* CEs [14] --> Loop 15 
* CEs [15] --> Loop 16 

### Ranking functions of CR eval_insertsort_bb3_in(V_3,V_j_0,B,C) 
* RF of phase [13]: [V_j_0+1]

#### Partial ranking functions of CR eval_insertsort_bb3_in(V_3,V_j_0,B,C) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    V_j_0+1


### Specialization of cost equations eval_insertsort_bb1_in/10 
* CE 5 is refined into CE [17] 
* CE 3 is refined into CE [18,19] 
* CE 6 is refined into CE [20] 
* CE 4 is refined into CE [21,22,23] 


### Cost equations --> "Loop" of eval_insertsort_bb1_in/10 
* CEs [23] --> Loop 17 
* CEs [22] --> Loop 18 
* CEs [21] --> Loop 19 
* CEs [17] --> Loop 20 
* CEs [18,19] --> Loop 21 
* CEs [20] --> Loop 22 

### Ranking functions of CR eval_insertsort_bb1_in(V_20,V_3,V_i_0,V_j_0,V_length,B,C,D,E,F) 
* RF of phase [17,18,19]: [-V_i_0+V_length]

#### Partial ranking functions of CR eval_insertsort_bb1_in(V_20,V_3,V_i_0,V_j_0,V_length,B,C,D,E,F) 
* Partial RF of phase [17,18,19]:
  - RF of loop [17:1,18:1,19:1]:
    -V_i_0+V_length


### Specialization of cost equations eval_insertsort_bb1_in_loop_cont/7 
* CE 7 is refined into CE [24] 
* CE 8 is refined into CE [25] 


### Cost equations --> "Loop" of eval_insertsort_bb1_in_loop_cont/7 
* CEs [24] --> Loop 23 
* CEs [25] --> Loop 24 

### Ranking functions of CR eval_insertsort_bb1_in_loop_cont(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR eval_insertsort_bb1_in_loop_cont(A,B,C,D,E,F,G) 


### Specialization of cost equations eval_insertsort_6/6 
* CE 2 is refined into CE [26,27,28,29,30] 


### Cost equations --> "Loop" of eval_insertsort_6/6 
* CEs [28] --> Loop 25 
* CEs [27,30] --> Loop 26 
* CEs [29] --> Loop 27 
* CEs [26] --> Loop 28 

### Ranking functions of CR eval_insertsort_6(V_20,V_3,V_i_0,V_j_0,V_length,B) 

#### Partial ranking functions of CR eval_insertsort_6(V_20,V_3,V_i_0,V_j_0,V_length,B) 


### Specialization of cost equations eval_insertsort_start/6 
* CE 1 is refined into CE [31,32,33,34] 


### Cost equations --> "Loop" of eval_insertsort_start/6 
* CEs [34] --> Loop 29 
* CEs [33] --> Loop 30 
* CEs [32] --> Loop 31 
* CEs [31] --> Loop 32 

### Ranking functions of CR eval_insertsort_start(V_20,V_3,V_i_0,V_j_0,V_length,B) 

#### Partial ranking functions of CR eval_insertsort_start(V_20,V_3,V_i_0,V_j_0,V_length,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_insertsort_bb3_in(V_3,V_j_0,B,C):
* Chain [[13],16]: 1*it(13)+0
  Such that:it(13) =< V_j_0+1

  with precondition: [B=2,C+1=0,V_j_0>=0] 

* Chain [[13],15]: 1*it(13)+0
  Such that:it(13) =< V_j_0-C

  with precondition: [B=2,C>=0,V_j_0>=C+1] 

* Chain [[13],14]: 1*it(13)+0
  Such that:it(13) =< V_j_0+1

  with precondition: [B=3,V_j_0>=0] 

* Chain [15]: 0
  with precondition: [B=2,V_j_0=C,V_j_0>=0] 

* Chain [14]: 0
  with precondition: [B=3,V_j_0+1>=0] 


#### Cost of chains of eval_insertsort_bb1_in(V_20,V_3,V_i_0,V_j_0,V_length,B,C,D,E,F):
* Chain [[17,18,19],22]: 3*it(17)+1*s(5)+1*s(6)+0
  Such that:aux(1) =< V_length
aux(5) =< -V_i_0+V_length
it(17) =< aux(5)
aux(2) =< aux(1)
s(5) =< it(17)*aux(1)
s(6) =< it(17)*aux(2)

  with precondition: [B=3,V_i_0>=1,V_length>=V_i_0+1] 

* Chain [[17,18,19],21]: 3*it(17)+1*s(5)+1*s(6)+1*s(7)+0
  Such that:aux(6) =< -V_i_0+V_length
aux(7) =< V_length
s(7) =< aux(7)
it(17) =< aux(6)
aux(2) =< aux(7)
s(5) =< it(17)*aux(7)
s(6) =< it(17)*aux(2)

  with precondition: [B=3,V_i_0>=1,V_length>=V_i_0+2] 

* Chain [[17,18,19],20]: 3*it(17)+1*s(5)+1*s(6)+0
  Such that:aux(1) =< V_length
aux(8) =< -V_i_0+V_length
it(17) =< aux(8)
aux(2) =< aux(1)
s(5) =< it(17)*aux(1)
s(6) =< it(17)*aux(2)

  with precondition: [B=4,V_length=C,V_length=E,V_i_0>=1,F+1>=0,V_length>=V_i_0+1,V_length>=F+2] 

* Chain [22]: 0
  with precondition: [B=3,V_i_0>=1] 

* Chain [21]: 1*s(7)+0
  Such that:s(7) =< V_i_0

  with precondition: [B=3,V_i_0>=1,V_length>=V_i_0+1] 

* Chain [20]: 0
  with precondition: [B=4,C=V_20,D=V_3,F=V_j_0,V_i_0=E,V_i_0>=1,V_i_0>=V_length] 


#### Cost of chains of eval_insertsort_bb1_in_loop_cont(A,B,C,D,E,F,G):
* Chain [24]: 0
  with precondition: [A=3] 

* Chain [23]: 0
  with precondition: [A=4] 


#### Cost of chains of eval_insertsort_6(V_20,V_3,V_i_0,V_j_0,V_length,B):
* Chain [28]: 0
  with precondition: [] 

* Chain [27]: 0
  with precondition: [1>=V_length] 

* Chain [26]: 1*s(16)+6*s(18)+2*s(20)+2*s(21)+0
  Such that:s(16) =< 1
aux(11) =< V_length
s(18) =< aux(11)
s(19) =< aux(11)
s(20) =< s(18)*aux(11)
s(21) =< s(18)*s(19)

  with precondition: [V_length>=2] 

* Chain [25]: 4*s(30)+1*s(33)+1*s(34)+0
  Such that:aux(12) =< V_length
s(30) =< aux(12)
s(32) =< aux(12)
s(33) =< s(30)*aux(12)
s(34) =< s(30)*s(32)

  with precondition: [V_length>=3] 


#### Cost of chains of eval_insertsort_start(V_20,V_3,V_i_0,V_j_0,V_length,B):
* Chain [32]: 0
  with precondition: [] 

* Chain [31]: 0
  with precondition: [1>=V_length] 

* Chain [30]: 1*s(35)+6*s(37)+2*s(39)+2*s(40)+0
  Such that:s(35) =< 1
s(36) =< V_length
s(37) =< s(36)
s(38) =< s(36)
s(39) =< s(37)*s(36)
s(40) =< s(37)*s(38)

  with precondition: [V_length>=2] 

* Chain [29]: 4*s(42)+1*s(44)+1*s(45)+0
  Such that:s(41) =< V_length
s(42) =< s(41)
s(43) =< s(41)
s(44) =< s(42)*s(41)
s(45) =< s(42)*s(43)

  with precondition: [V_length>=3] 


Closed-form bounds of eval_insertsort_start(V_20,V_3,V_i_0,V_j_0,V_length,B): 
-------------------------------------
* Chain [32] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [31] with precondition: [1>=V_length] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [30] with precondition: [V_length>=2] 
    - Upper bound: 6*V_length+1+4*V_length*V_length 
    - Complexity: n^2 
* Chain [29] with precondition: [V_length>=3] 
    - Upper bound: 2*V_length*V_length+4*V_length 
    - Complexity: n^2 

### Maximum cost of eval_insertsort_start(V_20,V_3,V_i_0,V_j_0,V_length,B): nat(V_length)*2+1+nat(V_length)*2*nat(V_length)+(nat(V_length)*2*nat(V_length)+nat(V_length)*4) 
Asymptotic class: n^2 
* Total analysis performed in 138 ms.

