WORST_CASE(?,O(1))

# LoAT Proof:
Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f1 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=3000
   1: (-2+i1 == 0 /\ 889+i5 >= 0 /\ 1999-i4 >= 0) /\ i1'=2, i3'=1+i3, i5'=1000+i5

Dependency graph:
0 -> 1
1 -> 1

Refined Dependency Graph

	Removed the following edges: 0 -> 1

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f1 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=3000
   1: (-2+i1 == 0 /\ 889+i5 >= 0 /\ 1999-i4 >= 0) /\ i1'=2, i3'=1+i3, i5'=1000+i5

Dependency graph:
1 -> 1

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(3000, X₁)
  t₁: l1(X₀, X₁) → l1(X₀, 1000+X₁) :|: X₀ ≤ 1999 ∧ 0 ≤ 889+X₁


Preprocessing
  Cut unsatisfiable transition [t₁: l1→l1]


  Eliminate variables [X₀; X₁] that do not contribute to the problem


Problem after Preprocessing
  Start:  l0
  Program_Vars:  
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₂: l0 → l1


All Bounds
Timebounds
  Overall timebound:1 {O(1)}
    t₂: 1 {O(1)}


Costbounds
  Overall costbound: 1 {O(1)}
    t₂: 1 {O(1)}


Sizebounds

