WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: evalSimpleMultiplestart

Location map:
LoAT_sink -> 0
evalSimpleMultiplestart -> 1
evalSimpleMultipleentryin -> 2
evalSimpleMultiplebb3in -> 3
evalSimpleMultiplebbin -> 4
evalSimpleMultiplereturnin -> 5
evalSimpleMultiplebb1in -> 6
evalSimpleMultiplebb2in -> 7
evalSimpleMultiplestop -> 8

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: -2+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=0, i5'=0
   2: (-3+i1 == 0 /\ -1+i6-i5 >= 0) /\ i1'=4, i3'=1+i3
   3: (-3+i1 == 0 /\ -i6+i5 >= 0) /\ i1'=5, i3'=1+i3
   4: (-4+i1 == 0 /\ -1+i7-i4 >= 0) /\ i1'=6, i3'=1+i3
   5: (-i7+i4 >= 0 /\ -4+i1 == 0) /\ i1'=7, i3'=1+i3
   6: -6+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=1+i4
   7: -7+i1 == 0 /\ i1'=3, i3'=1+i3, i5'=1+i5
   8: -5+i1 == 0 /\ i1'=8, i3'=1+i3

Dependency graph:
0 -> 1
1 -> 2, 1 -> 3
2 -> 4, 2 -> 5
3 -> 8
4 -> 6
5 -> 7
6 -> 2, 6 -> 3
7 -> 2, 7 -> 3

Chained Linear Paths

	Applied Chaining

	First rule:
	-1+i1 == 0 /\ i1'=2, i3'=1+i3
	Second rule:
	-2+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=0, i5'=0
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=0, i5'=0
	
	Applied Deletion

	Removed the following rules: 0, 1
	
	Applied Chaining

	First rule:
	(-3+i1 == 0 /\ -i6+i5 >= 0) /\ i1'=5, i3'=1+i3
	Second rule:
	-5+i1 == 0 /\ i1'=8, i3'=1+i3
	New rule:
	(0 == 0 /\ -3+i1 == 0 /\ -i6+i5 >= 0) /\ i1'=8, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 3, 8
	
	Applied Chaining

	First rule:
	(-4+i1 == 0 /\ -1+i7-i4 >= 0) /\ i1'=6, i3'=1+i3
	Second rule:
	-6+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=1+i4
	New rule:
	(0 == 0 /\ -4+i1 == 0 /\ -1+i7-i4 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
	
	Applied Deletion

	Removed the following rules: 4, 6
	
	Applied Chaining

	First rule:
	(-i7+i4 >= 0 /\ -4+i1 == 0) /\ i1'=7, i3'=1+i3
	Second rule:
	-7+i1 == 0 /\ i1'=3, i3'=1+i3, i5'=1+i5
	New rule:
	(0 == 0 /\ -i7+i4 >= 0 /\ -4+i1 == 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
	
	Applied Deletion

	Removed the following rules: 5, 7

Start location: evalSimpleMultiplestart

Location map:
LoAT_sink -> 0
evalSimpleMultiplestart -> 1
evalSimpleMultipleentryin -> 2
evalSimpleMultiplebb3in -> 3
evalSimpleMultiplebbin -> 4
evalSimpleMultiplereturnin -> 5
evalSimpleMultiplebb1in -> 6
evalSimpleMultiplebb2in -> 7
evalSimpleMultiplestop -> 8

Rules:
   2: (-3+i1 == 0 /\ -1+i6-i5 >= 0) /\ i1'=4, i3'=1+i3
   9: (0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=0, i5'=0
  10: (0 == 0 /\ -3+i1 == 0 /\ -i6+i5 >= 0) /\ i1'=8, i3'=2+i3
  11: (0 == 0 /\ -4+i1 == 0 /\ -1+i7-i4 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
  12: (0 == 0 /\ -i7+i4 >= 0 /\ -4+i1 == 0) /\ i1'=3, i3'=2+i3, i5'=1+i5

Dependency graph:
2 -> 11, 2 -> 12
9 -> 2, 9 -> 10
11 -> 2, 11 -> 10
12 -> 2, 12 -> 10

Preprocessed Transitions

	Simplified Guard

	Original rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=0, i5'=0
	New rule:
	-1+i1 == 0 /\ i1'=3, i3'=2+i3, i4'=0, i5'=0
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -3+i1 == 0 /\ -i6+i5 >= 0) /\ i1'=8, i3'=2+i3
	New rule:
	(-3+i1 == 0 /\ -i6+i5 >= 0) /\ i1'=8, i3'=2+i3
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -4+i1 == 0 /\ -1+i7-i4 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
	New rule:
	(-4+i1 == 0 /\ -1+i7-i4 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -i7+i4 >= 0 /\ -4+i1 == 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
	New rule:
	(-i7+i4 >= 0 /\ -4+i1 == 0) /\ i1'=3, i3'=2+i3, i5'=1+i5

Start location: evalSimpleMultiplestart

Location map:
LoAT_sink -> 0
evalSimpleMultiplestart -> 1
evalSimpleMultipleentryin -> 2
evalSimpleMultiplebb3in -> 3
evalSimpleMultiplebbin -> 4
evalSimpleMultiplereturnin -> 5
evalSimpleMultiplebb1in -> 6
evalSimpleMultiplebb2in -> 7
evalSimpleMultiplestop -> 8

Rules:
   2: (-3+i1 == 0 /\ -1+i6-i5 >= 0) /\ i1'=4, i3'=1+i3
  13: -1+i1 == 0 /\ i1'=3, i3'=2+i3, i4'=0, i5'=0
  14: (-3+i1 == 0 /\ -i6+i5 >= 0) /\ i1'=8, i3'=2+i3
  15: (-4+i1 == 0 /\ -1+i7-i4 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
  16: (-i7+i4 >= 0 /\ -4+i1 == 0) /\ i1'=3, i3'=2+i3, i5'=1+i5

Dependency graph:
2 -> 15, 2 -> 16
13 -> 2, 13 -> 14
15 -> 2, 15 -> 14
16 -> 2, 16 -> 14

Step with 13

	Trace

	13[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 14

	Trace

	13[(-1+i1 == 0)]
	14[(-3+i1 == 0 /\ -i6+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	13[(-1+i1 == 0)]
	
	Blocked

	{}
	{14[T]}
	
Step with 2

	Trace

	13[(-1+i1 == 0)]
	2[(-3+i1 == 0 /\ -1+i6-i5 >= 0)]
	
	Blocked

	{}
	{14[T]}
	{}
	
Step with 15

	Trace

	13[(-1+i1 == 0)]
	2[(-3+i1 == 0 /\ -1+i6-i5 >= 0)]
	15[(-4+i1 == 0 /\ -1+i7-i4 >= 0)]
	
	Blocked

	{}
	{14[T]}
	{}
	{}
	
Poly(n^1)

Accelerate

		Simplified Guard

		Original rule:
		(0 == 0 /\ -3+i1 == 0 /\ -1+i6-i5 >= 0 /\ -1+i7-i4 >= 0) /\ i1'=3, i3'=3+i3, i4'=1+i4
		New rule:
		(-3+i1 == 0 /\ -1+i6-i5 >= 0 /\ -1+i7-i4 >= 0) /\ i1'=3, i3'=3+i3, i4'=1+i4

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ -1+i6-i5 >= 0 /\ -1+i7-i4 >= 0) /\ i1'=3, i3'=3+i3, i4'=1+i4
	New rule:
	(-3+i1 >= 0 /\ -it25+i7-i4 >= 0 /\ -1+i6-i5 >= 0 /\ 3-i1 >= 0 /\ -1+it25 >= 0) /\ i1'=i1, i3'=3*it25+i3, i4'=it25+i4

		-3+i1 >= 0 [0]: unchanged
		
		-1+i6-i5 >= 0 [0]: unchanged
		
		3-i1 >= 0 [0]: unchanged
		
		-1+i7-i4 >= 0 [0]: montonic decrease yields -it25+i7-i4 >= 0
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, -1+i6-i5 >= 0 -> -1+i6-i5 >= 0, 3-i1 >= 0 -> 3-i1 >= 0, -1+i7-i4 >= 0 -> -it25+i7-i4 >= 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ -it25+i7-i4 >= 0 /\ -1+i6-i5 >= 0 /\ 3-i1 >= 0 /\ -1+it25 >= 0) /\ i1'=i1, i3'=3*it25+i3, i4'=it25+i4
	New rule:
	(-3+i1 >= 0 /\ -it25+i7-i4 >= 0 /\ -1+i6-i5 >= 0 /\ 3-i1 >= 0 /\ -1+it25 >= 0) /\ i3'=3*it25+i3, i4'=it25+i4
	
	Instantiation

	Original rule:
	(-3+i1 >= 0 /\ -it25+i7-i4 >= 0 /\ -1+i6-i5 >= 0 /\ 3-i1 >= 0 /\ -1+it25 >= 0) /\ i3'=3*it25+i3, i4'=it25+i4
	New rule:
	(0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ 3-i1 >= 0 /\ -1+i7-i4 >= 0) /\ i3'=i3+3*i7-3*i4, i4'=i7

Start location: evalSimpleMultiplestart

Location map:
LoAT_sink -> 0
evalSimpleMultiplestart -> 1
evalSimpleMultipleentryin -> 2
evalSimpleMultiplebb3in -> 3
evalSimpleMultiplebbin -> 4
evalSimpleMultiplereturnin -> 5
evalSimpleMultiplebb1in -> 6
evalSimpleMultiplebb2in -> 7
evalSimpleMultiplestop -> 8

Rules:
   2: (-3+i1 == 0 /\ -1+i6-i5 >= 0) /\ i1'=4, i3'=1+i3
  13: -1+i1 == 0 /\ i1'=3, i3'=2+i3, i4'=0, i5'=0
  14: (-3+i1 == 0 /\ -i6+i5 >= 0) /\ i1'=8, i3'=2+i3
  15: (-4+i1 == 0 /\ -1+i7-i4 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
  16: (-i7+i4 >= 0 /\ -4+i1 == 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
  17: (0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ 3-i1 >= 0 /\ -1+i7-i4 >= 0) /\ i3'=i3+3*i7-3*i4, i4'=i7

Dependency graph:
2 -> 15, 2 -> 16
13 -> 2, 13 -> 14, 13 -> 17
15 -> 2, 15 -> 14, 15 -> 17
16 -> 2, 16 -> 14, 16 -> 17
17 -> 2, 17 -> 14

	Trace

	13[(-1+i1 == 0)]
	17[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ 3-i1 >= 0 /\ -1+i7-i4 >= 0)]
	
	Blocked

	{}
	{14[T]}
	{17[T]}
	
Step with 2

	Trace

	13[(-1+i1 == 0)]
	17[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ 3-i1 >= 0 /\ -1+i7-i4 >= 0)]
	2[(-3+i1 == 0 /\ -1+i6-i5 >= 0)]
	
	Blocked

	{}
	{14[T]}
	{14[T], 17[T]}
	{}
	
Step with 16

	Trace

	13[(-1+i1 == 0)]
	17[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ 3-i1 >= 0 /\ -1+i7-i4 >= 0)]
	2[(-3+i1 == 0 /\ -1+i6-i5 >= 0)]
	16[(-i7+i4 >= 0 /\ -4+i1 == 0)]
	
	Blocked

	{}
	{14[T]}
	{14[T], 17[T]}
	{15[T]}
	{}
	
Accelerate

		Simplified Guard

		Original rule:
		(0 == 0 /\ -3+i1 == 0 /\ -1+i6-i5 >= 0 /\ -i7+i4 >= 0) /\ i1'=3, i3'=3+i3, i5'=1+i5
		New rule:
		(-3+i1 == 0 /\ -1+i6-i5 >= 0 /\ -i7+i4 >= 0) /\ i1'=3, i3'=3+i3, i5'=1+i5

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ -1+i6-i5 >= 0 /\ -i7+i4 >= 0) /\ i1'=3, i3'=3+i3, i5'=1+i5
	New rule:
	(-3+i1 >= 0 /\ -1+it52 >= 0 /\ -i7+i4 >= 0 /\ i6-i5-it52 >= 0 /\ 3-i1 >= 0) /\ i1'=i1, i3'=i3+3*it52, i5'=i5+it52

		-3+i1 >= 0 [0]: unchanged
		
		-1+i6-i5 >= 0 [0]: montonic decrease yields i6-i5-it52 >= 0
		
		-i7+i4 >= 0 [0]: unchanged
		
		3-i1 >= 0 [0]: unchanged
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, -1+i6-i5 >= 0 -> i6-i5-it52 >= 0, -i7+i4 >= 0 -> -i7+i4 >= 0, 3-i1 >= 0 -> 3-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ -1+it52 >= 0 /\ -i7+i4 >= 0 /\ i6-i5-it52 >= 0 /\ 3-i1 >= 0) /\ i1'=i1, i3'=i3+3*it52, i5'=i5+it52
	New rule:
	(-3+i1 >= 0 /\ -1+it52 >= 0 /\ -i7+i4 >= 0 /\ i6-i5-it52 >= 0 /\ 3-i1 >= 0) /\ i3'=i3+3*it52, i5'=i5+it52
	
	Instantiation

	Original rule:
	(-3+i1 >= 0 /\ -1+it52 >= 0 /\ -i7+i4 >= 0 /\ i6-i5-it52 >= 0 /\ 3-i1 >= 0) /\ i3'=i3+3*it52, i5'=i5+it52
	New rule:
	(0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ -i7+i4 >= 0 /\ 3-i1 >= 0) /\ i3'=3*i6+i3-3*i5, i5'=i6

Start location: evalSimpleMultiplestart

Location map:
LoAT_sink -> 0
evalSimpleMultiplestart -> 1
evalSimpleMultipleentryin -> 2
evalSimpleMultiplebb3in -> 3
evalSimpleMultiplebbin -> 4
evalSimpleMultiplereturnin -> 5
evalSimpleMultiplebb1in -> 6
evalSimpleMultiplebb2in -> 7
evalSimpleMultiplestop -> 8

Rules:
   2: (-3+i1 == 0 /\ -1+i6-i5 >= 0) /\ i1'=4, i3'=1+i3
  13: -1+i1 == 0 /\ i1'=3, i3'=2+i3, i4'=0, i5'=0
  14: (-3+i1 == 0 /\ -i6+i5 >= 0) /\ i1'=8, i3'=2+i3
  15: (-4+i1 == 0 /\ -1+i7-i4 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
  16: (-i7+i4 >= 0 /\ -4+i1 == 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
  17: (0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ 3-i1 >= 0 /\ -1+i7-i4 >= 0) /\ i3'=i3+3*i7-3*i4, i4'=i7
  18: (0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ -i7+i4 >= 0 /\ 3-i1 >= 0) /\ i3'=3*i6+i3-3*i5, i5'=i6

Dependency graph:
2 -> 15, 2 -> 16
13 -> 2, 13 -> 14, 13 -> 17, 13 -> 18
15 -> 2, 15 -> 14, 15 -> 17, 15 -> 18
16 -> 2, 16 -> 14, 16 -> 17, 16 -> 18
17 -> 2, 17 -> 14, 17 -> 18
18 -> 2, 18 -> 14, 18 -> 17

	Trace

	13[(-1+i1 == 0)]
	17[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ 3-i1 >= 0 /\ -1+i7-i4 >= 0)]
	18[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ -i7+i4 >= 0 /\ 3-i1 >= 0)]
	
	Blocked

	{}
	{14[T]}
	{14[T], 17[T]}
	{18[T]}
	
Step with 14

	Trace

	13[(-1+i1 == 0)]
	17[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ 3-i1 >= 0 /\ -1+i7-i4 >= 0)]
	18[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ -i7+i4 >= 0 /\ 3-i1 >= 0)]
	14[(-3+i1 == 0 /\ -i6+i5 >= 0)]
	
	Blocked

	{}
	{14[T]}
	{14[T], 17[T]}
	{18[T]}
	{}
	
Backtrack

	Trace

	13[(-1+i1 == 0)]
	17[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ 3-i1 >= 0 /\ -1+i7-i4 >= 0)]
	18[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ -i7+i4 >= 0 /\ 3-i1 >= 0)]
	
	Blocked

	{}
	{14[T]}
	{14[T], 17[T]}
	{14[T], 18[T]}
	
Backtrack

	Trace

	13[(-1+i1 == 0)]
	17[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ 3-i1 >= 0 /\ -1+i7-i4 >= 0)]
	
	Blocked

	{}
	{14[T]}
	{14[T], 17[T], 18[T]}
	
Step with 2

	Trace

	13[(-1+i1 == 0)]
	17[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ 3-i1 >= 0 /\ -1+i7-i4 >= 0)]
	2[(-3+i1 == 0 /\ -1+i6-i5 >= 0)]
	
	Blocked

	{}
	{14[T]}
	{14[T], 17[T], 18[T]}
	{}
	
Step with 16

	Trace

	13[(-1+i1 == 0)]
	17[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ 3-i1 >= 0 /\ -1+i7-i4 >= 0)]
	2[(-3+i1 == 0 /\ -1+i6-i5 >= 0)]
	16[(-i7+i4 >= 0 /\ -4+i1 == 0)]
	
	Blocked

	{}
	{14[T]}
	{14[T], 17[T], 18[T]}
	{15[T]}
	{}
	
Covered

	Trace

	13[(-1+i1 == 0)]
	17[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ 3-i1 >= 0 /\ -1+i7-i4 >= 0)]
	2[(-3+i1 == 0 /\ -1+i6-i5 >= 0)]
	
	Blocked

	{}
	{14[T]}
	{14[T], 17[T], 18[T]}
	{15[T], 16[T]}
	
Backtrack

	Trace

	13[(-1+i1 == 0)]
	17[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ 3-i1 >= 0 /\ -1+i7-i4 >= 0)]
	
	Blocked

	{}
	{14[T]}
	{2[T], 14[T], 17[T], 18[T]}
	
Backtrack

	Trace

	13[(-1+i1 == 0)]
	
	Blocked

	{}
	{14[T], 17[T]}
	
Step with 2

	Trace

	13[(-1+i1 == 0)]
	2[(-3+i1 == 0 /\ -1+i6-i5 >= 0)]
	
	Blocked

	{}
	{14[T], 17[T]}
	{}
	
Step with 16

	Trace

	13[(-1+i1 == 0)]
	2[(-3+i1 == 0 /\ -1+i6-i5 >= 0)]
	16[(-i7+i4 >= 0 /\ -4+i1 == 0)]
	
	Blocked

	{}
	{14[T], 17[T]}
	{}
	{}
	
Covered

	Trace

	13[(-1+i1 == 0)]
	2[(-3+i1 == 0 /\ -1+i6-i5 >= 0)]
	
	Blocked

	{}
	{14[T], 17[T]}
	{16[T]}
	
Step with 15

	Trace

	13[(-1+i1 == 0)]
	2[(-3+i1 == 0 /\ -1+i6-i5 >= 0)]
	15[(-4+i1 == 0 /\ -1+i7-i4 >= 0)]
	
	Blocked

	{}
	{14[T], 17[T]}
	{16[T]}
	{}
	
Covered

	Trace

	13[(-1+i1 == 0)]
	2[(-3+i1 == 0 /\ -1+i6-i5 >= 0)]
	
	Blocked

	{}
	{14[T], 17[T]}
	{15[T], 16[T]}
	
Backtrack

	Trace

	13[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T], 14[T], 17[T]}
	
Step with 18

	Trace

	13[(-1+i1 == 0)]
	18[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ -i7+i4 >= 0 /\ 3-i1 >= 0)]
	
	Blocked

	{}
	{2[T], 14[T], 17[T]}
	{18[T]}
	
Step with 14

	Trace

	13[(-1+i1 == 0)]
	18[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ -i7+i4 >= 0 /\ 3-i1 >= 0)]
	14[(-3+i1 == 0 /\ -i6+i5 >= 0)]
	
	Blocked

	{}
	{2[T], 14[T], 17[T]}
	{18[T]}
	{}
	
Backtrack

	Trace

	13[(-1+i1 == 0)]
	18[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i6-i5 >= 0 /\ -i7+i4 >= 0 /\ 3-i1 >= 0)]
	
	Blocked

	{}
	{2[T], 14[T], 17[T]}
	{14[T], 18[T]}
	
Backtrack

	Trace

	13[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T], 14[T], 17[T], 18[T]}
	
Backtrack

	Trace

	Blocked

	{13[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃
  Temp_Vars:  
  Locations:  l0, l1, l2, l3, l4, l5, l6, l7
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂, X₃) → l6(X₀, X₁, X₂, X₃)
  t₂: l1(X₀, X₁, X₂, X₃) → l2(X₀, X₁, X₂, X₃) :|: 1+X₁ ≤ X₂
  t₃: l1(X₀, X₁, X₂, X₃) → l5(X₀, X₁, X₂, X₃) :|: X₂ ≤ X₁
  t₄: l2(X₀, X₁, X₂, X₃) → l3(X₀, X₁, X₂, X₃) :|: 1+X₀ ≤ X₃
  t₅: l2(X₀, X₁, X₂, X₃) → l4(X₀, X₁, X₂, X₃) :|: X₃ ≤ X₀
  t₆: l3(X₀, X₁, X₂, X₃) → l1(1+X₀, X₁, X₂, X₃)
  t₇: l4(X₀, X₁, X₂, X₃) → l1(X₀, 1+X₁, X₂, X₃)
  t₈: l5(X₀, X₁, X₂, X₃) → l7(X₀, X₁, X₂, X₃)
  t₁: l6(X₀, X₁, X₂, X₃) → l1(0, 0, X₂, X₃)


Preprocessing
  Found invariant 1 ≤ X₂ ∧ 1 ≤ X₁+X₂ ∧ 1+X₁ ≤ X₂ ∧ 1 ≤ X₀+X₂ ∧ 0 ≤ X₁ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l2


  Found invariant X₂ ≤ X₁ ∧ 0 ≤ X₁ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l7


  Found invariant X₂ ≤ X₁ ∧ 0 ≤ X₁ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l5


  Found invariant 0 ≤ X₁ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l1


  Found invariant X₃ ≤ X₀ ∧ 1 ≤ X₂ ∧ 1 ≤ X₁+X₂ ∧ 1+X₁ ≤ X₂ ∧ 1 ≤ X₀+X₂ ∧ 0 ≤ X₁ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l4


  Found invariant 1 ≤ X₃ ∧ 2 ≤ X₂+X₃ ∧ 1 ≤ X₁+X₃ ∧ 1 ≤ X₀+X₃ ∧ 1+X₀ ≤ X₃ ∧ 1 ≤ X₂ ∧ 1 ≤ X₁+X₂ ∧ 1+X₁ ≤ X₂ ∧ 1 ≤ X₀+X₂ ∧ 0 ≤ X₁ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₀ for location l3


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃
  Temp_Vars:  
  Locations:  l0, l1, l2, l3, l4, l5, l6, l7
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂, X₃) → l6(X₀, X₁, X₂, X₃)
  t₂: l1(X₀, X₁, X₂, X₃) → l2(X₀, X₁, X₂, X₃) :|: 1+X₁ ≤ X₂ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁
  t₃: l1(X₀, X₁, X₂, X₃) → l5(X₀, X₁, X₂, X₃) :|: X₂ ≤ X₁ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁
  t₄: l2(X₀, X₁, X₂, X₃) → l3(X₀, X₁, X₂, X₃) :|: 1+X₀ ≤ X₃ ∧ 1 ≤ X₀+X₂ ∧ 1 ≤ X₁+X₂ ∧ 1+X₁ ≤ X₂ ∧ 1 ≤ X₂ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁
  t₅: l2(X₀, X₁, X₂, X₃) → l4(X₀, X₁, X₂, X₃) :|: X₃ ≤ X₀ ∧ 1 ≤ X₀+X₂ ∧ 1 ≤ X₁+X₂ ∧ 1+X₁ ≤ X₂ ∧ 1 ≤ X₂ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁
  t₆: l3(X₀, X₁, X₂, X₃) → l1(1+X₀, X₁, X₂, X₃) :|: 1 ≤ X₀+X₂ ∧ 1 ≤ X₀+X₃ ∧ 1+X₀ ≤ X₃ ∧ 1 ≤ X₁+X₂ ∧ 1 ≤ X₁+X₃ ∧ 1+X₁ ≤ X₂ ∧ 1 ≤ X₂ ∧ 1 ≤ X₃ ∧ 2 ≤ X₂+X₃ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁
  t₇: l4(X₀, X₁, X₂, X₃) → l1(X₀, 1+X₁, X₂, X₃) :|: 1 ≤ X₀+X₂ ∧ 1 ≤ X₁+X₂ ∧ 1+X₁ ≤ X₂ ∧ 1 ≤ X₂ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ X₃ ≤ X₀ ∧ 0 ≤ X₁
  t₈: l5(X₀, X₁, X₂, X₃) → l7(X₀, X₁, X₂, X₃) :|: 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁ ∧ X₂ ≤ X₁
  t₁: l6(X₀, X₁, X₂, X₃) → l1(0, 0, X₂, X₃)


MPRF for transition t₄: l2(X₀, X₁, X₂, X₃) → l3(X₀, X₁, X₂, X₃) :|: 1+X₀ ≤ X₃ ∧ 1 ≤ X₀+X₂ ∧ 1 ≤ X₁+X₂ ∧ 1+X₁ ≤ X₂ ∧ 1 ≤ X₂ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁ of depth 1:
  new bound:
    X₃ {O(n)}

  MPRF:
    • l1: [X₃-X₀]
    • l2: [X₃-X₀]
    • l3: [X₃-1-X₀]
    • l4: [X₃-X₀]




MPRF for transition t₅: l2(X₀, X₁, X₂, X₃) → l4(X₀, X₁, X₂, X₃) :|: X₃ ≤ X₀ ∧ 1 ≤ X₀+X₂ ∧ 1 ≤ X₁+X₂ ∧ 1+X₁ ≤ X₂ ∧ 1 ≤ X₂ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁ of depth 1:
  new bound:
    X₂ {O(n)}

  MPRF:
    • l1: [X₂-X₁]
    • l2: [X₂-X₁]
    • l3: [X₂-X₁]
    • l4: [X₂-1-X₁]




MPRF for transition t₆: l3(X₀, X₁, X₂, X₃) → l1(1+X₀, X₁, X₂, X₃) :|: 1 ≤ X₀+X₂ ∧ 1 ≤ X₀+X₃ ∧ 1+X₀ ≤ X₃ ∧ 1 ≤ X₁+X₂ ∧ 1 ≤ X₁+X₃ ∧ 1+X₁ ≤ X₂ ∧ 1 ≤ X₂ ∧ 1 ≤ X₃ ∧ 2 ≤ X₂+X₃ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁ of depth 1:
  new bound:
    X₃ {O(n)}

  MPRF:
    • l1: [X₃-X₀]
    • l2: [X₃-X₀]
    • l3: [X₃-X₀]
    • l4: [X₃-X₀]




MPRF for transition t₇: l4(X₀, X₁, X₂, X₃) → l1(X₀, 1+X₁, X₂, X₃) :|: 1 ≤ X₀+X₂ ∧ 1 ≤ X₁+X₂ ∧ 1+X₁ ≤ X₂ ∧ 1 ≤ X₂ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ X₃ ≤ X₀ ∧ 0 ≤ X₁ of depth 1:
  new bound:
    X₂ {O(n)}

  MPRF:
    • l1: [X₂-X₁]
    • l2: [X₂-X₁]
    • l3: [X₂-X₁]
    • l4: [X₂-X₁]




  knowledge_propagation leads to new time bound X₂+X₃+1 {O(n)} for transition t₂: l1(X₀, X₁, X₂, X₃) → l2(X₀, X₁, X₂, X₃) :|: 1+X₁ ≤ X₂ ∧ 0 ≤ X₀ ∧ 0 ≤ X₀+X₁ ∧ 0 ≤ X₁


All Bounds
Timebounds
  Overall timebound:3⋅X₂+3⋅X₃+5 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: X₂+X₃+1 {O(n)}
    t₃: 1 {O(1)}
    t₄: X₃ {O(n)}
    t₅: X₂ {O(n)}
    t₆: X₃ {O(n)}
    t₇: X₂ {O(n)}
    t₈: 1 {O(1)}


Costbounds
  Overall costbound: 3⋅X₂+3⋅X₃+5 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: X₂+X₃+1 {O(n)}
    t₃: 1 {O(1)}
    t₄: X₃ {O(n)}
    t₅: X₂ {O(n)}
    t₆: X₃ {O(n)}
    t₇: X₂ {O(n)}
    t₈: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₀, X₂: X₂ {O(n)}
    t₀, X₃: X₃ {O(n)}
    t₁, X₀: 0 {O(1)}
    t₁, X₁: 0 {O(1)}
    t₁, X₂: X₂ {O(n)}
    t₁, X₃: X₃ {O(n)}
    t₂, X₀: X₃ {O(n)}
    t₂, X₁: X₂ {O(n)}
    t₂, X₂: X₂ {O(n)}
    t₂, X₃: X₃ {O(n)}
    t₃, X₀: X₃ {O(n)}
    t₃, X₁: X₂ {O(n)}
    t₃, X₂: 2⋅X₂ {O(n)}
    t₃, X₃: 2⋅X₃ {O(n)}
    t₄, X₀: X₃ {O(n)}
    t₄, X₁: X₂ {O(n)}
    t₄, X₂: X₂ {O(n)}
    t₄, X₃: X₃ {O(n)}
    t₅, X₀: X₃ {O(n)}
    t₅, X₁: X₂ {O(n)}
    t₅, X₂: X₂ {O(n)}
    t₅, X₃: X₃ {O(n)}
    t₆, X₀: X₃ {O(n)}
    t₆, X₁: X₂ {O(n)}
    t₆, X₂: X₂ {O(n)}
    t₆, X₃: X₃ {O(n)}
    t₇, X₀: X₃ {O(n)}
    t₇, X₁: X₂ {O(n)}
    t₇, X₂: X₂ {O(n)}
    t₇, X₃: X₃ {O(n)}
    t₈, X₀: X₃ {O(n)}
    t₈, X₁: X₂ {O(n)}
    t₈, X₂: 2⋅X₂ {O(n)}
    t₈, X₃: 2⋅X₃ {O(n)}

