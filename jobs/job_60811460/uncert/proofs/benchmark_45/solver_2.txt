WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalSimpleMultiplebb1in/7,evalSimpleMultiplebb2in/7,evalSimpleMultiplebb3in/7,evalSimpleMultiplebbin/7]
1. non_recursive  : [evalSimpleMultiplestop/5]
2. non_recursive  : [evalSimpleMultiplereturnin/5]
3. non_recursive  : [exit_location/1]
4. non_recursive  : [evalSimpleMultiplebb3in_loop_cont/6]
5. non_recursive  : [evalSimpleMultipleentryin/5]
6. non_recursive  : [evalSimpleMultiplestart/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalSimpleMultiplebb3in/7
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into evalSimpleMultiplebb3in_loop_cont/6
5. SCC is partially evaluated into evalSimpleMultipleentryin/5
6. SCC is partially evaluated into evalSimpleMultiplestart/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalSimpleMultiplebb3in/7 
* CE 6 is refined into CE [9] 
* CE 5 is refined into CE [10] 
* CE 4 is refined into CE [11] 
* CE 3 is refined into CE [12] 


### Cost equations --> "Loop" of evalSimpleMultiplebb3in/7 
* CEs [11] --> Loop 9 
* CEs [12] --> Loop 10 
* CEs [9] --> Loop 11 
* CEs [10] --> Loop 12 

### Ranking functions of CR evalSimpleMultiplebb3in(A,B,C,D,E,F,G) 
* RF of phase [9]: [-B+C]
* RF of phase [10]: [-A+D]

#### Partial ranking functions of CR evalSimpleMultiplebb3in(A,B,C,D,E,F,G) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    -B+C
* Partial RF of phase [10]:
  - RF of loop [10:1]:
    -A+D


### Specialization of cost equations evalSimpleMultiplebb3in_loop_cont/6 
* CE 8 is refined into CE [13] 
* CE 7 is refined into CE [14] 


### Cost equations --> "Loop" of evalSimpleMultiplebb3in_loop_cont/6 
* CEs [13] --> Loop 13 
* CEs [14] --> Loop 14 

### Ranking functions of CR evalSimpleMultiplebb3in_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR evalSimpleMultiplebb3in_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations evalSimpleMultipleentryin/5 
* CE 2 is refined into CE [15,16,17,18,19,20] 


### Cost equations --> "Loop" of evalSimpleMultipleentryin/5 
* CEs [15,16] --> Loop 15 
* CEs [18,20] --> Loop 16 
* CEs [17] --> Loop 17 
* CEs [19] --> Loop 18 

### Ranking functions of CR evalSimpleMultipleentryin(A,B,C,D,E) 

#### Partial ranking functions of CR evalSimpleMultipleentryin(A,B,C,D,E) 


### Specialization of cost equations evalSimpleMultiplestart/5 
* CE 1 is refined into CE [21,22,23,24] 


### Cost equations --> "Loop" of evalSimpleMultiplestart/5 
* CEs [24] --> Loop 19 
* CEs [23] --> Loop 20 
* CEs [22] --> Loop 21 
* CEs [21] --> Loop 22 

### Ranking functions of CR evalSimpleMultiplestart(A,B,C,D,E) 

#### Partial ranking functions of CR evalSimpleMultiplestart(A,B,C,D,E) 


Computing Bounds
=====================================

#### Cost of chains of evalSimpleMultiplebb3in(A,B,C,D,E,F,G):
* Chain [[10],[9],12]: 1*it(9)+1*it(10)+0
  Such that:it(10) =< -A+F
it(9) =< G

  with precondition: [B=0,E=2,D=F,C=G,A>=0,C>=1,D>=A+1] 

* Chain [[10],[9],11]: 1*it(9)+1*it(10)+0
  Such that:it(10) =< -A+D
it(9) =< C

  with precondition: [B=0,E=3,A>=0,C>=1,D>=A+1] 

* Chain [[10],11]: 1*it(10)+0
  Such that:it(10) =< -A+D

  with precondition: [B=0,E=3,A>=0,C>=1,D>=A+1] 

* Chain [[9],12]: 1*it(9)+0
  Such that:it(9) =< -B+G

  with precondition: [E=2,A=F,C=G,A>=0,B>=0,C>=B+1,A>=D] 

* Chain [[9],11]: 1*it(9)+0
  Such that:it(9) =< -B+C

  with precondition: [E=3,A>=0,B>=0,C>=B+1,A>=D] 

* Chain [12]: 0
  with precondition: [E=2,A=F,B=G,A>=0,B>=0,B>=C] 

* Chain [11]: 0
  with precondition: [E=3,A>=0,B>=0] 


#### Cost of chains of evalSimpleMultiplebb3in_loop_cont(A,B,C,D,E,F):
* Chain [14]: 0
  with precondition: [A=2] 

* Chain [13]: 0
  with precondition: [A=3] 


#### Cost of chains of evalSimpleMultipleentryin(A,B,C,D,E):
* Chain [18]: 0
  with precondition: [] 

* Chain [17]: 0
  with precondition: [0>=C] 

* Chain [16]: 2*s(4)+0
  Such that:aux(2) =< C
s(4) =< aux(2)

  with precondition: [0>=D,C>=1] 

* Chain [15]: 3*s(6)+2*s(7)+0
  Such that:aux(3) =< C
aux(4) =< D
s(7) =< aux(3)
s(6) =< aux(4)

  with precondition: [C>=1,D>=1] 


#### Cost of chains of evalSimpleMultiplestart(A,B,C,D,E):
* Chain [22]: 0
  with precondition: [] 

* Chain [21]: 0
  with precondition: [0>=C] 

* Chain [20]: 2*s(12)+0
  Such that:s(11) =< C
s(12) =< s(11)

  with precondition: [0>=D,C>=1] 

* Chain [19]: 2*s(15)+3*s(16)+0
  Such that:s(13) =< C
s(14) =< D
s(15) =< s(13)
s(16) =< s(14)

  with precondition: [C>=1,D>=1] 


Closed-form bounds of evalSimpleMultiplestart(A,B,C,D,E): 
-------------------------------------
* Chain [22] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [21] with precondition: [0>=C] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [20] with precondition: [0>=D,C>=1] 
    - Upper bound: 2*C 
    - Complexity: n 
* Chain [19] with precondition: [C>=1,D>=1] 
    - Upper bound: 2*C+3*D 
    - Complexity: n 

### Maximum cost of evalSimpleMultiplestart(A,B,C,D,E): nat(D)*3+nat(C)*2 
Asymptotic class: n 
* Total analysis performed in 80 ms.

