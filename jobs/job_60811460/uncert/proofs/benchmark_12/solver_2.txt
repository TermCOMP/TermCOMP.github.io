WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalfbb1in/4,evalfbb2in/4]
1. recursive  : [evalfbb2in_loop_cont/7,evalfbb3in/6,evalfbb4in/6]
2. non_recursive  : [evalfstop/4]
3. non_recursive  : [evalfreturnin/4]
4. non_recursive  : [exit_location/1]
5. non_recursive  : [evalfbb4in_loop_cont/5]
6. non_recursive  : [evalfentryin/4]
7. non_recursive  : [evalfstart/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalfbb2in/4
1. SCC is partially evaluated into evalfbb4in/6
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into evalfbb4in_loop_cont/5
6. SCC is partially evaluated into evalfentryin/4
7. SCC is partially evaluated into evalfstart/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalfbb2in/4 
* CE 11 is refined into CE [12] 
* CE 10 is refined into CE [13] 
* CE 9 is refined into CE [14] 


### Cost equations --> "Loop" of evalfbb2in/4 
* CEs [14] --> Loop 12 
* CEs [12] --> Loop 13 
* CEs [13] --> Loop 14 

### Ranking functions of CR evalfbb2in(A,C,D,E) 

#### Partial ranking functions of CR evalfbb2in(A,C,D,E) 


### Specialization of cost equations evalfbb4in/6 
* CE 5 is refined into CE [15] 
* CE 3 is refined into CE [16,17] 
* CE 6 is refined into CE [18] 
* CE 4 is refined into CE [19] 


### Cost equations --> "Loop" of evalfbb4in/6 
* CEs [19] --> Loop 15 
* CEs [15] --> Loop 16 
* CEs [16,17] --> Loop 17 
* CEs [18] --> Loop 18 

### Ranking functions of CR evalfbb4in(A,B,C,D,E,F) 
* RF of phase [15]: [B]

#### Partial ranking functions of CR evalfbb4in(A,B,C,D,E,F) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    B


### Specialization of cost equations evalfbb4in_loop_cont/5 
* CE 7 is refined into CE [20] 
* CE 8 is refined into CE [21] 


### Cost equations --> "Loop" of evalfbb4in_loop_cont/5 
* CEs [20] --> Loop 19 
* CEs [21] --> Loop 20 

### Ranking functions of CR evalfbb4in_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR evalfbb4in_loop_cont(A,B,C,D,E) 


### Specialization of cost equations evalfentryin/4 
* CE 2 is refined into CE [22,23,24,25,26] 


### Cost equations --> "Loop" of evalfentryin/4 
* CEs [24] --> Loop 21 
* CEs [23,25] --> Loop 22 
* CEs [26] --> Loop 23 
* CEs [22] --> Loop 24 

### Ranking functions of CR evalfentryin(A,B,C,D) 

#### Partial ranking functions of CR evalfentryin(A,B,C,D) 


### Specialization of cost equations evalfstart/4 
* CE 1 is refined into CE [27,28,29,30] 


### Cost equations --> "Loop" of evalfstart/4 
* CEs [30] --> Loop 25 
* CEs [29] --> Loop 26 
* CEs [28] --> Loop 27 
* CEs [27] --> Loop 28 

### Ranking functions of CR evalfstart(A,B,C,D) 

#### Partial ranking functions of CR evalfstart(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of evalfbb2in(A,C,D,E):
* Chain [13]: 0
  with precondition: [D=3,C+1>=A,A>=C] 

* Chain [12,14]: 1
  with precondition: [D=2,A=C,A=E+1] 

* Chain [12,13]: 1
  with precondition: [D=3,A=C] 


#### Cost of chains of evalfbb4in(A,B,C,D,E,F):
* Chain [[15],18]: 2*it(15)+0
  Such that:it(15) =< B

  with precondition: [D=3,B>=1] 

* Chain [[15],17]: 2*it(15)+1
  Such that:it(15) =< B

  with precondition: [D=3,B>=2] 

* Chain [[15],16]: 2*it(15)+0
  Such that:it(15) =< B

  with precondition: [D=4,E=0,A=F+1,B>=1] 

* Chain [18]: 0
  with precondition: [D=3] 

* Chain [17]: 1
  with precondition: [D=3,B>=1] 

* Chain [16]: 0
  with precondition: [D=4,F=C,B=E,0>=B] 


#### Cost of chains of evalfbb4in_loop_cont(A,B,C,D,E):
* Chain [20]: 0
  with precondition: [A=3] 

* Chain [19]: 0
  with precondition: [A=4] 


#### Cost of chains of evalfentryin(A,B,C,D):
* Chain [24]: 0
  with precondition: [] 

* Chain [23]: 0
  with precondition: [0>=A] 

* Chain [22]: 4*s(2)+1
  Such that:aux(1) =< A
s(2) =< aux(1)

  with precondition: [A>=1] 

* Chain [21]: 2*s(4)+1
  Such that:s(4) =< A

  with precondition: [A>=2] 


#### Cost of chains of evalfstart(A,B,C,D):
* Chain [28]: 0
  with precondition: [] 

* Chain [27]: 0
  with precondition: [0>=A] 

* Chain [26]: 4*s(6)+1
  Such that:s(5) =< A
s(6) =< s(5)

  with precondition: [A>=1] 

* Chain [25]: 2*s(7)+1
  Such that:s(7) =< A

  with precondition: [A>=2] 


Closed-form bounds of evalfstart(A,B,C,D): 
-------------------------------------
* Chain [28] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [27] with precondition: [0>=A] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [26] with precondition: [A>=1] 
    - Upper bound: 4*A+1 
    - Complexity: n 
* Chain [25] with precondition: [A>=2] 
    - Upper bound: 2*A+1 
    - Complexity: n 

### Maximum cost of evalfstart(A,B,C,D): nat(A)*4+1 
Asymptotic class: n 
* Total analysis performed in 55 ms.

