WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
div -> 2
end -> 3

Rules:
   0: (-2+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=1+i3
   1: (-2+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=1+i3
   2: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-i4+i5
   3: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
2 -> 0, 2 -> 1, 2 -> 2
3 -> 0, 3 -> 1, 3 -> 2

Refined Dependency Graph

	Removed the following edges: 2 -> 0

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
div -> 2
end -> 3

Rules:
   0: (-2+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=1+i3
   1: (-2+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=1+i3
   2: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-i4+i5
   3: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
2 -> 1, 2 -> 2
3 -> 0, 3 -> 1, 3 -> 2

Step with 3

	Trace

	3[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	3[(-1+i1 == 0)]
	2[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-i4+i5
	New rule:
	(-1+i4 >= 0 /\ -1-i4*(-1+it9)-i4+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it9, i5'=-i4*it9+i5

		-1+i4 >= 0 [0]: unchanged
		
		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		-1-i4+i5 >= 0 [0]: montonic decrease yields -1-i4*(-1+it9)-i4+i5 >= 0, dependencies: -1+i4 >= 0
		
		Replacement map: {-1+i4 >= 0 -> -1+i4 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -1-i4+i5 >= 0 -> -1-i4*(-1+it9)-i4+i5 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+i4 >= 0 /\ -1-i4*(-1+it9)-i4+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it9, i5'=-i4*it9+i5
	New rule:
	(-1+i4 >= 0 /\ -1-i4*(-1+it9)-i4+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it9, i5'=-i4*it9+i5

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
div -> 2
end -> 3

Rules:
   0: (-2+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=1+i3
   1: (-2+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=1+i3
   2: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=-i4+i5
   3: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   4: (-1+i4 >= 0 /\ -1-i4*(-1+it9)-i4+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it9, i5'=-i4*it9+i5

Dependency graph:
2 -> 1, 2 -> 2, 2 -> 4
3 -> 0, 3 -> 1, 3 -> 2, 3 -> 4
4 -> 1, 4 -> 2

	Trace

	3[(-1+i1 == 0)]
	4[(-1+i4 >= 0 /\ -1-i4*(-1+it9)-i4+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 4[T]}
	
Step with 1

	Trace

	3[(-1+i1 == 0)]
	4[(-1+i4 >= 0 /\ -1-i4*(-1+it9)-i4+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0)]
	1[(-2+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 4[T]}
	{}
	
Backtrack

	Trace

	3[(-1+i1 == 0)]
	4[(-1+i4 >= 0 /\ -1-i4*(-1+it9)-i4+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 2[T], 4[T]}
	
Backtrack

	Trace

	3[(-1+i1 == 0)]
	
	Blocked

	{}
	{4[T]}
	
Step with 1

	Trace

	3[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{4[T]}
	{}
	
Backtrack

	Trace

	3[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 4[T]}
	
Step with 0

	Trace

	3[(-1+i1 == 0)]
	0[(-2+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{1[T], 4[T]}
	{}
	
Backtrack

	Trace

	3[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 1[T], 4[T]}
	
Step with 2

	Trace

	3[(-1+i1 == 0)]
	2[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{0[T], 1[T], 4[T]}
	{}
	
Covered

	Trace

	3[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 1[T], 2[T], 4[T]}
	
Backtrack

	Trace

	Blocked

	{3[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₃: l0(X₀, X₁) → l1(X₀, X₁)
  t₂: l1(X₀, X₁) → l1(X₀, X₁-X₀) :|: 1 ≤ X₀ ∧ 1+X₀ ≤ X₁
  t₀: l1(X₀, X₁) → l2(X₀, X₁) :|: X₀ ≤ 0
  t₁: l1(X₀, X₁) → l2(X₀, X₁) :|: X₁ ≤ X₀


Preprocessing
Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₃: l0(X₀, X₁) → l1(X₀, X₁)
  t₂: l1(X₀, X₁) → l1(X₀, X₁-X₀) :|: 1 ≤ X₀ ∧ 1+X₀ ≤ X₁
  t₀: l1(X₀, X₁) → l2(X₀, X₁) :|: X₀ ≤ 0
  t₁: l1(X₀, X₁) → l2(X₀, X₁) :|: X₁ ≤ X₀


MPRF for transition t₂: l1(X₀, X₁) → l1(X₀, X₁-X₀) :|: 1 ≤ X₀ ∧ 1+X₀ ≤ X₁ of depth 1:
  new bound:
    X₀+X₁ {O(n)}

  MPRF:
    • l1: [X₁-X₀]




All Bounds
Timebounds
  Overall timebound:X₀+X₁+3 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: X₀+X₁ {O(n)}
    t₃: 1 {O(1)}


Costbounds
  Overall costbound: X₀+X₁+3 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: X₀+X₁ {O(n)}
    t₃: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₁, X₀: 2⋅X₀ {O(n)}
    t₁, X₁: 2⋅X₁ {O(n)}
    t₂, X₀: X₀ {O(n)}
    t₂, X₁: X₁ {O(n)}
    t₃, X₀: X₀ {O(n)}
    t₃, X₁: X₁ {O(n)}

