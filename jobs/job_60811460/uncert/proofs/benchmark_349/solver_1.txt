WORST_CASE(?,O(1))

# LoAT Proof:
Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f8 -> 2

Rules:
   0: (-1-it2 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3
   1: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it3

Dependency graph:

Preprocessed Transitions

	Eliminated Temporary Variables

	Original rule:
	(-1-it2 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3
	New rule:
	(-1+i1 == 0) /\ i1'=2, i3'=1+i3

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f8 -> 2

Rules:
   1: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it3
   3: (-1+i1 == 0) /\ i1'=2, i3'=1+i3

Dependency graph:

Step with 3

	Trace

	3[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Backtrack

	Trace

	Blocked

	{3[T]}
	
Step with 1

	Trace

	1[(-1+i1 == 0)]
	
	Blocked

	{3[T]}
	{}
	
Backtrack

	Trace

	Blocked

	{1[T], 3[T]}
	
Step with 2

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{1[T], 3[T]}
	{}
	
Backtrack

	Trace

	Blocked

	{1[T], 2[T], 3[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  B
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀) → l1(X₀) :|: 1+B ≤ 0
  t₁: l0(X₀) → l1(X₀)
  t₂: l0(X₀) → l1(B)


Preprocessing
  Eliminate variables [X₀] that do not contribute to the problem


Problem after Preprocessing
  Start:  l0
  Program_Vars:  
  Temp_Vars:  B
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₃: l0 → l1 :|: 1+B ≤ 0
  t₄: l0 → l1
  t₅: l0 → l1


All Bounds
Timebounds
  Overall timebound:3 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}


Costbounds
  Overall costbound: 3 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}


Sizebounds

