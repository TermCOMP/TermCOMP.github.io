WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=i5, i5'=-1+i5

Dependency graph:
0 -> 1
1 -> 1

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=i5, i5'=-1+i5
	New rule:
	(1-it9+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it9, i4'=1-it9+i5, i5'=-it9+i5

		-1+i4 >= 0 [0]: eventual decrease yields (1-it9+i5 >= 0 /\ -1+i4 >= 0)
		
		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-1+i4 >= 0 -> (1-it9+i5 >= 0 /\ -1+i4 >= 0), -2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(1-it9+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it9, i4'=1-it9+i5, i5'=-it9+i5
	New rule:
	(1-it9+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it9, i4'=1-it9+i5, i5'=-it9+i5
	
	Instantiation

	Original rule:
	(1-it9+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it9, i4'=1-it9+i5, i5'=-it9+i5
	New rule:
	(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0) /\ i3'=1+i3+i5, i4'=0, i5'=-1

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=i5, i5'=-1+i5
   2: (0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0) /\ i3'=1+i3+i5, i4'=0, i5'=-1

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2
2 -> 1

	Trace

	0[(-1+i1 == 0)]
	2[(0 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 2[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 2[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(X₀, X₁)
  t₁: l1(X₀, X₁) → l1(X₁, X₁-1) :|: 1 ≤ X₀


Preprocessing
Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(X₀, X₁)
  t₁: l1(X₀, X₁) → l1(X₁, X₁-1) :|: 1 ≤ X₀


MPRF for transition t₁: l1(X₀, X₁) → l1(X₁, X₁-1) :|: 1 ≤ X₀ of depth 2:
  new bound:
    8⋅X₀+8⋅X₁+1 {O(n)}

  MPRF:
    • l1: [X₁; X₀]




All Bounds
Timebounds
  Overall timebound:8⋅X₀+8⋅X₁+2 {O(n)}
    t₀: 1 {O(1)}
    t₁: 8⋅X₀+8⋅X₁+1 {O(n)}


Costbounds
  Overall costbound: 8⋅X₀+8⋅X₁+2 {O(n)}
    t₀: 1 {O(1)}
    t₁: 8⋅X₀+8⋅X₁+1 {O(n)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₁, X₀: 10⋅X₁+8⋅X₀+1 {O(n)}
    t₁, X₁: 8⋅X₀+9⋅X₁+1 {O(n)}

