WORST_CASE(Omega(n^3),O(n^3))

# LoAT Proof:
WORST_CASE(Omega(n^3),?)

WORST_CASE(Omega(n^1),?)
WORST_CASE(Omega(n^3),?)
Initial ITS

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2
l1a -> 3
l1b -> 4
l1c -> 5
l2 -> 6

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-2+i1 == 0 /\ i4 > 0) /\ i1'=3, i3'=1+i3, i4'=-1+i4
   2: -4+i1 == 0 /\ i1'=5, i3'=1+i3
   3: -5+i1 == 0 /\ i1'=2, i3'=1+i3, i6'=i6+i5^2
   4: (-2+i1 == 0 /\ i4 > 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i6'=1+i6+i5^2
   5: -2+i1 == 0 /\ i1'=6, i3'=1+i3
   6: (i6 > 0 /\ -6+i1 == 0) /\ i1'=6, i3'=1+i3, i6'=-1+i6

Dependency graph:
0 -> 1, 0 -> 4, 0 -> 5
2 -> 3
3 -> 1, 3 -> 4, 3 -> 5
4 -> 1, 4 -> 4, 4 -> 5
5 -> 6
6 -> 6

Chained Linear Paths

	Applied Chaining

	First rule:
	-4+i1 == 0 /\ i1'=5, i3'=1+i3
	Second rule:
	-5+i1 == 0 /\ i1'=2, i3'=1+i3, i6'=i6+i5^2
	New rule:
	(0 == 0 /\ -4+i1 == 0) /\ i1'=2, i3'=2+i3, i6'=i6+i5^2
	
	Applied Deletion

	Removed the following rules: 2, 3

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2
l1a -> 3
l1b -> 4
l1c -> 5
l2 -> 6

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-2+i1 == 0 /\ i4 > 0) /\ i1'=3, i3'=1+i3, i4'=-1+i4
   4: (-2+i1 == 0 /\ i4 > 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i6'=1+i6+i5^2
   5: -2+i1 == 0 /\ i1'=6, i3'=1+i3
   6: (i6 > 0 /\ -6+i1 == 0) /\ i1'=6, i3'=1+i3, i6'=-1+i6
   7: (0 == 0 /\ -4+i1 == 0) /\ i1'=2, i3'=2+i3, i6'=i6+i5^2

Dependency graph:
0 -> 1, 0 -> 4, 0 -> 5
4 -> 1, 4 -> 4, 4 -> 5
5 -> 6
6 -> 6
7 -> 1, 7 -> 4, 7 -> 5

Preprocessed Transitions

	Simplified Guard

	Original rule:
	(0 == 0 /\ -4+i1 == 0) /\ i1'=2, i3'=2+i3, i6'=i6+i5^2
	New rule:
	-4+i1 == 0 /\ i1'=2, i3'=2+i3, i6'=i6+i5^2

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2
l1a -> 3
l1b -> 4
l1c -> 5
l2 -> 6

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-2+i1 == 0 /\ i4 > 0) /\ i1'=3, i3'=1+i3, i4'=-1+i4
   4: (-2+i1 == 0 /\ i4 > 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i6'=1+i6+i5^2
   5: -2+i1 == 0 /\ i1'=6, i3'=1+i3
   6: (i6 > 0 /\ -6+i1 == 0) /\ i1'=6, i3'=1+i3, i6'=-1+i6
   8: -4+i1 == 0 /\ i1'=2, i3'=2+i3, i6'=i6+i5^2

Dependency graph:
0 -> 1, 0 -> 4, 0 -> 5
4 -> 1, 4 -> 4, 4 -> 5
5 -> 6
6 -> 6
8 -> 1, 8 -> 4, 8 -> 5

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 5

	Trace

	0[(-1+i1 == 0)]
	5[(-2+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Step with 6

	Trace

	0[(-1+i1 == 0)]
	5[(-2+i1 == 0)]
	6[(i6 > 0 /\ -6+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(i6 > 0 /\ -6+i1 == 0) /\ i1'=6, i3'=1+i3, i6'=-1+i6
	New rule:
	(-6+i1 >= 0 /\ 6-i1 >= 0 /\ 1+i6-it16 > 0 /\ -1+it16 >= 0) /\ i1'=i1, i3'=it16+i3, i6'=i6-it16

		i6 > 0 [0]: montonic decrease yields 1+i6-it16 > 0
		
		-6+i1 >= 0 [0]: unchanged
		
		6-i1 >= 0 [0]: unchanged
		
		Replacement map: {i6 > 0 -> 1+i6-it16 > 0, -6+i1 >= 0 -> -6+i1 >= 0, 6-i1 >= 0 -> 6-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-6+i1 >= 0 /\ 6-i1 >= 0 /\ 1+i6-it16 > 0 /\ -1+it16 >= 0) /\ i1'=i1, i3'=it16+i3, i6'=i6-it16
	New rule:
	(-6+i1 >= 0 /\ 6-i1 >= 0 /\ 1+i6-it16 > 0 /\ -1+it16 >= 0) /\ i3'=it16+i3, i6'=i6-it16
	
	Instantiation

	Original rule:
	(-6+i1 >= 0 /\ 6-i1 >= 0 /\ 1+i6-it16 > 0 /\ -1+it16 >= 0) /\ i3'=it16+i3, i6'=i6-it16
	New rule:
	(1 > 0 /\ -6+i1 >= 0 /\ 6-i1 >= 0 /\ -1+i6 >= 0) /\ i3'=i6+i3, i6'=0

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2
l1a -> 3
l1b -> 4
l1c -> 5
l2 -> 6

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-2+i1 == 0 /\ i4 > 0) /\ i1'=3, i3'=1+i3, i4'=-1+i4
   4: (-2+i1 == 0 /\ i4 > 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i6'=1+i6+i5^2
   5: -2+i1 == 0 /\ i1'=6, i3'=1+i3
   6: (i6 > 0 /\ -6+i1 == 0) /\ i1'=6, i3'=1+i3, i6'=-1+i6
   8: -4+i1 == 0 /\ i1'=2, i3'=2+i3, i6'=i6+i5^2
   9: (1 > 0 /\ -6+i1 >= 0 /\ 6-i1 >= 0 /\ -1+i6 >= 0) /\ i3'=i6+i3, i6'=0

Dependency graph:
0 -> 1, 0 -> 4, 0 -> 5
4 -> 1, 4 -> 4, 4 -> 5
5 -> 6, 5 -> 9
6 -> 6, 6 -> 9
8 -> 1, 8 -> 4, 8 -> 5
9 -> 6

	Trace

	0[(-1+i1 == 0)]
	5[(-2+i1 == 0)]
	9[(1 > 0 /\ -6+i1 >= 0 /\ 6-i1 >= 0 /\ -1+i6 >= 0)]
	
	Blocked

	{}
	{}
	{}
	{6[T], 9[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	5[(-2+i1 == 0)]
	
	Blocked

	{}
	{}
	{9[T]}
	
Step with 6

	Trace

	0[(-1+i1 == 0)]
	5[(-2+i1 == 0)]
	6[(i6 > 0 /\ -6+i1 == 0)]
	
	Blocked

	{}
	{}
	{9[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	5[(-2+i1 == 0)]
	
	Blocked

	{}
	{}
	{6[T], 9[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{5[T]}
	
Step with 4

	Trace

	0[(-1+i1 == 0)]
	4[(-2+i1 == 0 /\ i4 > 0)]
	
	Blocked

	{}
	{5[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ i4 > 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i6'=1+i6+i5^2
	New rule:
	(-2+i1 >= 0 /\ -1+it38 >= 0 /\ 1+i4-it38 > 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it38, i4'=i4-it38, i6'=i6+i5^2*it38+it38

		-2+i1 >= 0 [0]: unchanged
		
		i4 > 0 [0]: montonic decrease yields 1+i4-it38 > 0
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, i4 > 0 -> 1+i4-it38 > 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ -1+it38 >= 0 /\ 1+i4-it38 > 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it38, i4'=i4-it38, i6'=i6+i5^2*it38+it38
	New rule:
	(-2+i1 >= 0 /\ -1+it38 >= 0 /\ 1+i4-it38 > 0 /\ 2-i1 >= 0) /\ i3'=i3+it38, i4'=i4-it38, i6'=i6+i5^2*it38+it38
	
	Instantiation

	Original rule:
	(-2+i1 >= 0 /\ -1+it38 >= 0 /\ 1+i4-it38 > 0 /\ 2-i1 >= 0) /\ i3'=i3+it38, i4'=i4-it38, i6'=i6+i5^2*it38+it38
	New rule:
	(1 > 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4, i4'=0, i6'=i4*i5^2+i6+i4

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2
l1a -> 3
l1b -> 4
l1c -> 5
l2 -> 6

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-2+i1 == 0 /\ i4 > 0) /\ i1'=3, i3'=1+i3, i4'=-1+i4
   4: (-2+i1 == 0 /\ i4 > 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i6'=1+i6+i5^2
   5: -2+i1 == 0 /\ i1'=6, i3'=1+i3
   6: (i6 > 0 /\ -6+i1 == 0) /\ i1'=6, i3'=1+i3, i6'=-1+i6
   8: -4+i1 == 0 /\ i1'=2, i3'=2+i3, i6'=i6+i5^2
   9: (1 > 0 /\ -6+i1 >= 0 /\ 6-i1 >= 0 /\ -1+i6 >= 0) /\ i3'=i6+i3, i6'=0
  10: (1 > 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4, i4'=0, i6'=i4*i5^2+i6+i4

Dependency graph:
0 -> 1, 0 -> 4, 0 -> 5, 0 -> 10
4 -> 1, 4 -> 4, 4 -> 5, 4 -> 10
5 -> 6, 5 -> 9
6 -> 6, 6 -> 9
8 -> 1, 8 -> 4, 8 -> 5, 8 -> 10
9 -> 6
10 -> 1, 10 -> 4, 10 -> 5

	Trace

	0[(-1+i1 == 0)]
	10[(1 > 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{5[T]}
	{4[T], 10[T]}
	
Step with 5

	Trace

	0[(-1+i1 == 0)]
	10[(1 > 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	5[(-2+i1 == 0)]
	
	Blocked

	{}
	{5[T]}
	{4[T], 10[T]}
	{}
	
Step with 9

	Trace

	0[(-1+i1 == 0)]
	10[(1 > 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	5[(-2+i1 == 0)]
	9[(1 > 0 /\ -6+i1 >= 0 /\ 6-i1 >= 0 /\ -1+i6 >= 0)]
	
	Blocked

	{}
	{5[T]}
	{4[T], 10[T]}
	{}
	{9[T]}
	
Poly(n^3)

Backtrack

	Trace

	0[(-1+i1 == 0)]
	10[(1 > 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	5[(-2+i1 == 0)]
	
	Blocked

	{}
	{5[T]}
	{4[T], 10[T]}
	{9[T]}
	
Step with 6

	Trace

	0[(-1+i1 == 0)]
	10[(1 > 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	5[(-2+i1 == 0)]
	6[(i6 > 0 /\ -6+i1 == 0)]
	
	Blocked

	{}
	{5[T]}
	{4[T], 10[T]}
	{9[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	10[(1 > 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	5[(-2+i1 == 0)]
	
	Blocked

	{}
	{5[T]}
	{4[T], 10[T]}
	{6[T], 9[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	10[(1 > 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{5[T]}
	{4[T], 5[T], 10[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{5[T], 10[T]}
	
Step with 4

	Trace

	0[(-1+i1 == 0)]
	4[(-2+i1 == 0 /\ i4 > 0)]
	
	Blocked

	{}
	{5[T], 10[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{4[T], 5[T], 10[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ i4 > 0)]
	
	Blocked

	{}
	{4[T], 5[T], 10[T]}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 4[T], 5[T], 10[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Poly(n^3)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^3))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l2, l3, l4, l5
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₄: l1(X₀, X₁, X₂) → l1(X₀-1, X₁, 1+(X₁)²+X₂) :|: 1 ≤ X₀
  t₁: l1(X₀, X₁, X₂) → l2(X₀-1, X₁, X₂) :|: 1 ≤ X₀
  t₅: l1(X₀, X₁, X₂) → l3(X₀, X₁, X₂)
  t₆: l3(X₀, X₁, X₂) → l3(X₀, X₁, X₂-1) :|: 1 ≤ X₂
  t₃: l4(X₀, X₁, X₂) → l1(X₀, X₁, (X₁)²+X₂)
  t₂: l5(X₀, X₁, X₂) → l4(X₀, X₁, X₂)


Preprocessing
  Cut unreachable locations [l4; l5] from the program graph


  Found invariant 0 ≤ X₀ for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l2, l3
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₄: l1(X₀, X₁, X₂) → l1(X₀-1, X₁, 1+(X₁)²+X₂) :|: 1 ≤ X₀
  t₁: l1(X₀, X₁, X₂) → l2(X₀-1, X₁, X₂) :|: 1 ≤ X₀
  t₅: l1(X₀, X₁, X₂) → l3(X₀, X₁, X₂)
  t₆: l3(X₀, X₁, X₂) → l3(X₀, X₁, X₂-1) :|: 1 ≤ X₂


MPRF for transition t₄: l1(X₀, X₁, X₂) → l1(X₀-1, X₁, Temp_Int₂₅+Temp_Int₂₆+X₂) :|: 1 ≤ X₀ ∧ 0 ≤ Temp_Int₂₆ of depth 1:
  new bound:
    X₀ {O(n)}

  MPRF:
    • l1: [X₀]




MPRF for transition t₆: l3(X₀, X₁, X₂) → l3(X₀, X₁, X₂-1) :|: 1 ≤ X₂ of depth 1:
  new bound:
    X₀⋅X₁^2+2⋅X₁^2+2⋅X₂+X₀+2 {O(n^3)}

  MPRF:
    • l3: [X₂]




  Found invariant 0 ≤ X₀ for location l2


  Found invariant 0 ≤ X₂ for location l3_v1


All Bounds
Timebounds
  Overall timebound:X₀⋅X₁^2+2⋅X₁^2+2⋅X₀+2⋅X₂+5 {O(n^3)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₄: X₀ {O(n)}
    t₅: 1 {O(1)}
    t₆: X₀⋅X₁^2+2⋅X₁^2+2⋅X₂+X₀+2 {O(n^3)}


Costbounds
  Overall costbound: X₀⋅X₁^2+2⋅X₁^2+2⋅X₀+2⋅X₂+5 {O(n^3)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₄: X₀ {O(n)}
    t₅: 1 {O(1)}
    t₆: X₀⋅X₁^2+2⋅X₁^2+2⋅X₂+X₀+2 {O(n^3)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₀, X₂: X₂ {O(n)}
    t₁, X₀: 2⋅X₀ {O(n)}
    t₁, X₁: 2⋅X₁ {O(n)}
    t₁, X₂: X₀⋅X₁^2+2⋅X₁^2+2⋅X₂+X₀+2 {O(n^3)}
    t₄, X₀: X₀ {O(n)}
    t₄, X₁: X₁ {O(n)}
    t₄, X₂: X₀⋅X₁^2+2⋅X₁^2+X₀+X₂+2 {O(n^3)}
    t₅, X₀: 2⋅X₀ {O(n)}
    t₅, X₁: 2⋅X₁ {O(n)}
    t₅, X₂: X₀⋅X₁^2+2⋅X₁^2+2⋅X₂+X₀+2 {O(n^3)}
    t₆, X₀: 2⋅X₀ {O(n)}
    t₆, X₁: 2⋅X₁ {O(n)}
    t₆, X₂: X₀⋅X₁^2+2⋅X₁^2+2⋅X₂+X₀+2 {O(n^3)}

