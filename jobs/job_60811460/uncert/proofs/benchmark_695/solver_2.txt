WORST_CASE(?,O(n^3))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_realshellsort_bb4_in/5,eval_realshellsort_bb5_in/5,eval_realshellsort_bb6_in/5]
1. recursive  : [eval_realshellsort_27/12,eval_realshellsort_28/12,eval_realshellsort__critedge_in/12,eval_realshellsort_bb2_in/12,eval_realshellsort_bb3_in/12,eval_realshellsort_bb4_in_loop_cont/13]
2. recursive  : [eval_realshellsort_bb1_in/14,eval_realshellsort_bb2_in_loop_cont/15]
3. non_recursive  : [eval_realshellsort_stop/8]
4. non_recursive  : [eval_realshellsort_bb7_in/8]
5. non_recursive  : [exit_location/1]
6. non_recursive  : [eval_realshellsort_bb1_in_loop_cont/9]
7. non_recursive  : [eval_realshellsort_7/8]
8. non_recursive  : [eval_realshellsort_6/8]
9. non_recursive  : [eval_realshellsort_5/8]
10. non_recursive  : [eval_realshellsort_4/8]
11. non_recursive  : [eval_realshellsort_3/8]
12. non_recursive  : [eval_realshellsort_2/8]
13. non_recursive  : [eval_realshellsort_1/8]
14. non_recursive  : [eval_realshellsort_0/8]
15. non_recursive  : [eval_realshellsort_bb0_in/8]
16. non_recursive  : [eval_realshellsort_start/8]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_realshellsort_bb4_in/5
1. SCC is partially evaluated into eval_realshellsort_bb2_in/12
2. SCC is partially evaluated into eval_realshellsort_bb1_in/14
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into eval_realshellsort_bb1_in_loop_cont/9
7. SCC is partially evaluated into eval_realshellsort_7/8
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is partially evaluated into eval_realshellsort_start/8

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_realshellsort_bb4_in/5 
* CE 18 is refined into CE [19] 
* CE 17 is refined into CE [20] 
* CE 15 is refined into CE [21] 
* CE 16 is refined into CE [22] 


### Cost equations --> "Loop" of eval_realshellsort_bb4_in/5 
* CEs [22] --> Loop 19 
* CEs [19] --> Loop 20 
* CEs [20] --> Loop 21 
* CEs [21] --> Loop 22 

### Ranking functions of CR eval_realshellsort_bb4_in(V_0,V_5,V_j_0,B,C) 
* RF of phase [19]: [-V_0+V_j_0+1,V_j_0]

#### Partial ranking functions of CR eval_realshellsort_bb4_in(V_0,V_5,V_j_0,B,C) 
* Partial RF of phase [19]:
  - RF of loop [19:1]:
    -V_0+V_j_0+1
    V_j_0


### Specialization of cost equations eval_realshellsort_bb2_in/12 
* CE 13 is refined into CE [23] 
* CE 11 is refined into CE [24,25] 
* CE 14 is refined into CE [26] 
* CE 12 is refined into CE [27,28,29,30] 


### Cost equations --> "Loop" of eval_realshellsort_bb2_in/12 
* CEs [30] --> Loop 23 
* CEs [29] --> Loop 24 
* CEs [28] --> Loop 25 
* CEs [27] --> Loop 26 
* CEs [23] --> Loop 27 
* CEs [25] --> Loop 28 
* CEs [24] --> Loop 29 
* CEs [26] --> Loop 30 

### Ranking functions of CR eval_realshellsort_bb2_in(V_0,V_21,V_5,V_array_size,V_array_size_sink,V_i_0,V_j_0,B,C,D,E,F) 
* RF of phase [23,24,26]: [V_array_size-V_i_0]
* RF of phase [25]: [V_0-V_i_0,V_array_size/2-V_i_0-1/2,V_array_size_sink/2-V_i_0-1/2]

#### Partial ranking functions of CR eval_realshellsort_bb2_in(V_0,V_21,V_5,V_array_size,V_array_size_sink,V_i_0,V_j_0,B,C,D,E,F) 
* Partial RF of phase [23,24,26]:
  - RF of loop [23:1,24:1,26:1]:
    V_array_size-V_i_0
* Partial RF of phase [25]:
  - RF of loop [25:1]:
    V_0-V_i_0
    V_array_size/2-V_i_0-1/2
    V_array_size_sink/2-V_i_0-1/2


### Specialization of cost equations eval_realshellsort_bb1_in/14 
* CE 7 is refined into CE [31] 
* CE 3 is refined into CE [32,33,34,35] 
* CE 8 is refined into CE [36] 
* CE 6 is refined into CE [37] 
* CE 5 is refined into CE [38] 
* CE 4 is refined into CE [39] 


### Cost equations --> "Loop" of eval_realshellsort_bb1_in/14 
* CEs [39] --> Loop 31 
* CEs [31] --> Loop 32 
* CEs [36] --> Loop 33 
* CEs [32,33,35] --> Loop 34 
* CEs [34] --> Loop 35 
* CEs [37] --> Loop 36 
* CEs [38] --> Loop 37 

### Ranking functions of CR eval_realshellsort_bb1_in(V_0,V_21,V_5,V_array_size,V_array_size_sink,V_i_0,V_j_0,B,C,D,E,F,G,H) 
* RF of phase [31]: [V_array_size_sink-1]

#### Partial ranking functions of CR eval_realshellsort_bb1_in(V_0,V_21,V_5,V_array_size,V_array_size_sink,V_i_0,V_j_0,B,C,D,E,F,G,H) 
* Partial RF of phase [31]:
  - RF of loop [31:1]:
    V_array_size_sink-1


### Specialization of cost equations eval_realshellsort_bb1_in_loop_cont/9 
* CE 9 is refined into CE [40] 
* CE 10 is refined into CE [41] 


### Cost equations --> "Loop" of eval_realshellsort_bb1_in_loop_cont/9 
* CEs [40] --> Loop 38 
* CEs [41] --> Loop 39 

### Ranking functions of CR eval_realshellsort_bb1_in_loop_cont(A,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR eval_realshellsort_bb1_in_loop_cont(A,B,C,D,E,F,G,H,I) 


### Specialization of cost equations eval_realshellsort_7/8 
* CE 2 is refined into CE [42,43,44,45,46,47,48,49] 


### Cost equations --> "Loop" of eval_realshellsort_7/8 
* CEs [46] --> Loop 40 
* CEs [44] --> Loop 41 
* CEs [45,48] --> Loop 42 
* CEs [49] --> Loop 43 
* CEs [43] --> Loop 44 
* CEs [42] --> Loop 45 
* CEs [47] --> Loop 46 

### Ranking functions of CR eval_realshellsort_7(V_0,V_21,V_5,V_array_size,V_array_size_sink,V_i_0,V_j_0,B) 

#### Partial ranking functions of CR eval_realshellsort_7(V_0,V_21,V_5,V_array_size,V_array_size_sink,V_i_0,V_j_0,B) 


### Specialization of cost equations eval_realshellsort_start/8 
* CE 1 is refined into CE [50,51,52,53,54,55,56] 


### Cost equations --> "Loop" of eval_realshellsort_start/8 
* CEs [56] --> Loop 47 
* CEs [55] --> Loop 48 
* CEs [54] --> Loop 49 
* CEs [53] --> Loop 50 
* CEs [52] --> Loop 51 
* CEs [51] --> Loop 52 
* CEs [50] --> Loop 53 

### Ranking functions of CR eval_realshellsort_start(V_0,V_21,V_5,V_array_size,V_array_size_sink,V_i_0,V_j_0,B) 

#### Partial ranking functions of CR eval_realshellsort_start(V_0,V_21,V_5,V_array_size,V_array_size_sink,V_i_0,V_j_0,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_realshellsort_bb4_in(V_0,V_5,V_j_0,B,C):
* Chain [[19],22]: 1*it(19)+0
  Such that:it(19) =< V_j_0-C

  with precondition: [B=2,V_0>=1,C>=V_0,V_j_0>=V_0+C] 

* Chain [[19],21]: 1*it(19)+0
  Such that:it(19) =< -V_0+V_j_0+1

  with precondition: [B=2,C>=0,V_0>=C+1,V_j_0>=V_0+C] 

* Chain [[19],20]: 1*it(19)+0
  Such that:it(19) =< -V_0+V_j_0+1

  with precondition: [B=3,V_0>=1,V_j_0>=V_0] 

* Chain [22]: 0
  with precondition: [B=2,V_j_0=C,V_0>=1,V_j_0>=V_0] 

* Chain [21]: 0
  with precondition: [B=2,V_j_0=C,V_j_0>=0,V_0>=V_j_0+1] 

* Chain [20]: 0
  with precondition: [B=3,V_0>=1,V_j_0>=0] 


#### Cost of chains of eval_realshellsort_bb2_in(V_0,V_21,V_5,V_array_size,V_array_size_sink,V_i_0,V_j_0,B,C,D,E,F):
* Chain [[25],[23,24,26],30]: 3*it(23)+1*it(25)+1*s(5)+1*s(6)+0
  Such that:it(25) =< V_0-V_i_0
aux(6) =< -V_0+V_array_size
it(23) =< aux(6)
aux(2) =< aux(6)
s(5) =< it(23)*aux(6)
s(6) =< it(23)*aux(2)

  with precondition: [B=3,V_i_0>=0,V_array_size_sink>=2*V_0,V_array_size>=V_array_size_sink,2*V_0+1>=V_array_size_sink,V_0>=V_i_0+1] 

* Chain [[25],[23,24,26],29]: 3*it(23)+1*it(25)+1*s(5)+1*s(6)+0
  Such that:it(25) =< V_0-V_i_0
aux(8) =< -V_0+V_array_size
it(23) =< aux(8)
aux(2) =< aux(8)
s(5) =< it(23)*aux(8)
s(6) =< it(23)*aux(2)

  with precondition: [B=3,V_i_0>=0,V_array_size_sink>=2*V_0,V_array_size>=V_0+2,V_array_size>=V_array_size_sink,2*V_0+1>=V_array_size_sink,V_0>=V_i_0+1] 

* Chain [[25],[23,24,26],28]: 4*it(23)+1*it(25)+1*s(5)+1*s(6)+0
  Such that:it(25) =< V_0-V_i_0
aux(11) =< -V_0+V_array_size
it(23) =< aux(11)
aux(2) =< aux(11)
s(5) =< it(23)*aux(11)
s(6) =< it(23)*aux(2)

  with precondition: [B=3,V_i_0>=0,V_array_size_sink>=2*V_0,V_array_size>=V_0+2,V_array_size>=V_array_size_sink,2*V_0+1>=V_array_size_sink,V_0>=V_i_0+1] 

* Chain [[25],[23,24,26],27]: 3*it(23)+1*it(25)+1*s(5)+1*s(6)+0
  Such that:it(25) =< V_0-V_i_0
aux(13) =< -V_0+E
it(23) =< aux(13)
aux(2) =< aux(13)
s(5) =< it(23)*aux(13)
s(6) =< it(23)*aux(2)

  with precondition: [B=4,V_array_size=C,V_array_size=E,V_i_0>=0,F>=0,V_array_size_sink>=2*V_0,V_array_size>=V_array_size_sink,2*V_0+1>=V_array_size_sink,V_0>=V_i_0+1,V_array_size>=F+1] 

* Chain [[25],30]: 1*it(25)+0
  Such that:it(25) =< V_0-V_i_0

  with precondition: [B=3,V_i_0>=0,V_array_size_sink>=2*V_0,V_array_size>=V_array_size_sink,2*V_0+1>=V_array_size_sink,V_0>=V_i_0+1] 

* Chain [[25],29]: 1*it(25)+0
  Such that:it(25) =< V_0-V_i_0

  with precondition: [B=3,V_i_0>=0,V_array_size_sink>=2*V_0,V_array_size>=V_array_size_sink,2*V_0+1>=V_array_size_sink,V_0>=V_i_0+1] 

* Chain [[25],28]: 1*it(25)+1*s(7)+0
  Such that:s(7) =< 1
it(25) =< V_0-V_i_0

  with precondition: [B=3,V_i_0>=0,V_array_size_sink>=2*V_0,V_array_size>=V_array_size_sink,2*V_0+1>=V_array_size_sink,V_0>=V_i_0+1] 

* Chain [30]: 0
  with precondition: [B=3,V_0>=1,V_i_0>=0,V_array_size_sink>=2*V_0,V_array_size>=V_array_size_sink,2*V_0+1>=V_array_size_sink] 

* Chain [29]: 0
  with precondition: [B=3,V_0>=1,V_i_0>=0,V_array_size_sink>=2*V_0,V_array_size>=V_array_size_sink,2*V_0+1>=V_array_size_sink,V_array_size>=V_i_0+1] 


#### Cost of chains of eval_realshellsort_bb1_in(V_0,V_21,V_5,V_array_size,V_array_size_sink,V_i_0,V_j_0,B,C,D,E,F,G,H):
* Chain [[31],36]: 2*it(31)+3*s(43)+1*s(44)+1*s(45)+0
  Such that:aux(18) =< G
aux(21) =< V_array_size_sink
aux(17) =< aux(18)
it(31) =< aux(21)
aux(17) =< aux(18)
s(46) =< it(31)*aux(17)
s(43) =< s(46)
s(39) =< aux(18)
s(44) =< s(43)*aux(18)
s(45) =< s(43)*s(39)

  with precondition: [B=5,C=1,F=1,V_array_size=D,V_array_size=G,V_array_size_sink>=2,H>=0,V_array_size>=V_array_size_sink,V_array_size>=H+1] 

* Chain [[31],35]: 2*it(31)+3*s(43)+1*s(44)+1*s(45)+2*s(49)+7*s(50)+2*s(52)+2*s(53)+0
  Such that:aux(23) =< V_array_size
aux(24) =< V_array_size+1/2
aux(25) =< V_array_size_sink
s(47) =< aux(23)
s(47) =< aux(24)
s(48) =< aux(24)
s(48) =< aux(25)
s(48) =< aux(23)
s(49) =< s(48)
s(50) =< s(47)
s(51) =< s(47)
s(52) =< s(50)*s(47)
s(53) =< s(50)*s(51)
aux(17) =< aux(23)
it(31) =< aux(25)
aux(17) =< aux(23)
s(46) =< it(31)*aux(17)
s(43) =< s(46)
s(39) =< aux(23)
s(44) =< s(43)*aux(23)
s(45) =< s(43)*s(39)

  with precondition: [B=3,V_array_size_sink>=4,V_array_size>=V_array_size_sink] 

* Chain [[31],34]: 2*it(31)+3*s(43)+1*s(44)+1*s(45)+1*s(54)+4*s(57)+3*s(58)+1*s(60)+1*s(61)+0
  Such that:s(54) =< 1
s(56) =< V_array_size_sink/4
aux(27) =< V_array_size
aux(28) =< V_array_size_sink
s(56) =< aux(28)
s(56) =< aux(27)
s(57) =< s(56)
s(58) =< aux(27)
s(39) =< aux(27)
s(60) =< s(58)*aux(27)
s(61) =< s(58)*s(39)
aux(17) =< aux(27)
it(31) =< aux(28)
aux(17) =< aux(27)
s(46) =< it(31)*aux(17)
s(43) =< s(46)
s(44) =< s(43)*aux(27)
s(45) =< s(43)*s(39)

  with precondition: [B=3,V_array_size_sink>=4,V_array_size>=V_array_size_sink] 

* Chain [[31],33]: 2*it(31)+3*s(43)+1*s(44)+1*s(45)+0
  Such that:aux(18) =< V_array_size
aux(29) =< V_array_size_sink
aux(17) =< aux(18)
it(31) =< aux(29)
aux(17) =< aux(18)
s(46) =< it(31)*aux(17)
s(43) =< s(46)
s(39) =< aux(18)
s(44) =< s(43)*aux(18)
s(45) =< s(43)*s(39)

  with precondition: [B=3,V_array_size_sink>=2,V_array_size>=V_array_size_sink] 

* Chain [37]: 0
  with precondition: [V_array_size=0,V_array_size_sink=0,B=5,F=0,C=V_0,D=V_21,E=V_5,G=V_i_0,H=V_j_0] 

* Chain [36]: 0
  with precondition: [V_array_size_sink=1,B=5,F=1,C=V_0,D=V_21,E=V_5,G=V_i_0,H=V_j_0,V_array_size>=1] 

* Chain [35]: 2*s(49)+7*s(50)+2*s(52)+2*s(53)+0
  Such that:s(47) =< V_array_size-V_array_size_sink/2+1/2
s(48) =< V_array_size_sink/2
aux(22) =< V_array_size
s(47) =< aux(22)
s(48) =< aux(22)
s(49) =< s(48)
s(50) =< s(47)
s(51) =< s(47)
s(52) =< s(50)*s(47)
s(53) =< s(50)*s(51)

  with precondition: [B=3,V_array_size>=3,V_array_size_sink>=2,V_array_size>=V_array_size_sink] 

* Chain [34]: 1*s(54)+4*s(57)+3*s(58)+1*s(60)+1*s(61)+0
  Such that:s(54) =< 1
aux(26) =< V_array_size
s(56) =< V_array_size_sink/2
s(56) =< aux(26)
s(57) =< s(56)
s(58) =< aux(26)
s(59) =< aux(26)
s(60) =< s(58)*aux(26)
s(61) =< s(58)*s(59)

  with precondition: [B=3,V_array_size_sink>=2,V_array_size>=V_array_size_sink] 

* Chain [33]: 0
  with precondition: [B=3,V_array_size>=V_array_size_sink] 

* Chain [32]: 0
  with precondition: [B=5,C=V_0,D=V_21,E=V_5,V_array_size_sink=V_array_size,G=V_i_0,H=V_j_0,V_array_size_sink=F,0>=V_array_size_sink+1] 


#### Cost of chains of eval_realshellsort_bb1_in_loop_cont(A,B,C,D,E,F,G,H,I):
* Chain [39]: 0
  with precondition: [A=3] 

* Chain [38]: 0
  with precondition: [A=5] 


#### Cost of chains of eval_realshellsort_7(V_0,V_21,V_5,V_array_size,V_array_size_sink,V_i_0,V_j_0,B):
* Chain [46]: 0
  with precondition: [] 

* Chain [45]: 0
  with precondition: [V_array_size=0] 

* Chain [44]: 0
  with precondition: [V_array_size=1] 

* Chain [43]: 0
  with precondition: [0>=V_array_size+1] 

* Chain [42]: 1*s(111)+4*s(115)+7*s(116)+1*s(118)+1*s(119)+6*s(123)+2*s(124)+2*s(125)+0
  Such that:s(111) =< 1
s(113) =< V_array_size/2
aux(35) =< V_array_size
s(113) =< aux(35)
s(115) =< s(113)
s(116) =< aux(35)
s(117) =< aux(35)
s(118) =< s(116)*aux(35)
s(119) =< s(116)*s(117)
s(120) =< aux(35)
s(120) =< aux(35)
s(122) =< s(116)*s(120)
s(123) =< s(122)
s(124) =< s(123)*aux(35)
s(125) =< s(123)*s(117)

  with precondition: [V_array_size>=2] 

* Chain [41]: 2*s(138)+7*s(139)+2*s(141)+2*s(142)+0
  Such that:s(137) =< V_array_size
s(136) =< V_array_size/2
s(135) =< V_array_size/2+1/2
s(135) =< s(137)
s(136) =< s(137)
s(138) =< s(136)
s(139) =< s(135)
s(140) =< s(135)
s(141) =< s(139)*s(135)
s(142) =< s(139)*s(140)

  with precondition: [V_array_size>=3] 

* Chain [40]: 1*s(143)+4*s(148)+7*s(149)+1*s(151)+1*s(152)+6*s(156)+2*s(157)+2*s(158)+9*s(161)+2*s(164)+2*s(165)+0
  Such that:s(143) =< 1
s(144) =< V_array_size+1/2
s(145) =< V_array_size/4
aux(36) =< V_array_size
s(145) =< aux(36)
s(148) =< s(145)
s(149) =< aux(36)
s(150) =< aux(36)
s(151) =< s(149)*aux(36)
s(152) =< s(149)*s(150)
s(153) =< aux(36)
s(153) =< aux(36)
s(155) =< s(149)*s(153)
s(156) =< s(155)
s(157) =< s(156)*aux(36)
s(158) =< s(156)*s(150)
s(159) =< aux(36)
s(159) =< s(144)
s(161) =< s(159)
s(163) =< s(159)
s(164) =< s(161)*s(159)
s(165) =< s(161)*s(163)

  with precondition: [V_array_size>=4] 


#### Cost of chains of eval_realshellsort_start(V_0,V_21,V_5,V_array_size,V_array_size_sink,V_i_0,V_j_0,B):
* Chain [53]: 0
  with precondition: [] 

* Chain [52]: 0
  with precondition: [V_array_size=0] 

* Chain [51]: 0
  with precondition: [V_array_size=1] 

* Chain [50]: 0
  with precondition: [0>=V_array_size+1] 

* Chain [49]: 1*s(166)+4*s(169)+7*s(170)+1*s(172)+1*s(173)+6*s(176)+2*s(177)+2*s(178)+0
  Such that:s(166) =< 1
s(168) =< V_array_size
s(167) =< V_array_size/2
s(167) =< s(168)
s(169) =< s(167)
s(170) =< s(168)
s(171) =< s(168)
s(172) =< s(170)*s(168)
s(173) =< s(170)*s(171)
s(174) =< s(168)
s(174) =< s(168)
s(175) =< s(170)*s(174)
s(176) =< s(175)
s(177) =< s(176)*s(168)
s(178) =< s(176)*s(171)

  with precondition: [V_array_size>=2] 

* Chain [48]: 2*s(182)+7*s(183)+2*s(185)+2*s(186)+0
  Such that:s(179) =< V_array_size
s(180) =< V_array_size/2
s(181) =< V_array_size/2+1/2
s(181) =< s(179)
s(180) =< s(179)
s(182) =< s(180)
s(183) =< s(181)
s(184) =< s(181)
s(185) =< s(183)*s(181)
s(186) =< s(183)*s(184)

  with precondition: [V_array_size>=3] 

* Chain [47]: 1*s(187)+4*s(191)+7*s(192)+1*s(194)+1*s(195)+6*s(198)+2*s(199)+2*s(200)+9*s(202)+2*s(204)+2*s(205)+0
  Such that:s(187) =< 1
s(190) =< V_array_size
s(188) =< V_array_size+1/2
s(189) =< V_array_size/4
s(189) =< s(190)
s(191) =< s(189)
s(192) =< s(190)
s(193) =< s(190)
s(194) =< s(192)*s(190)
s(195) =< s(192)*s(193)
s(196) =< s(190)
s(196) =< s(190)
s(197) =< s(192)*s(196)
s(198) =< s(197)
s(199) =< s(198)*s(190)
s(200) =< s(198)*s(193)
s(201) =< s(190)
s(201) =< s(188)
s(202) =< s(201)
s(203) =< s(201)
s(204) =< s(202)*s(201)
s(205) =< s(202)*s(203)

  with precondition: [V_array_size>=4] 


Closed-form bounds of eval_realshellsort_start(V_0,V_21,V_5,V_array_size,V_array_size_sink,V_i_0,V_j_0,B): 
-------------------------------------
* Chain [53] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [52] with precondition: [V_array_size=0] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [51] with precondition: [V_array_size=1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [50] with precondition: [0>=V_array_size+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [49] with precondition: [V_array_size>=2] 
    - Upper bound: 7*V_array_size+1+8*V_array_size*V_array_size+4*V_array_size*V_array_size*V_array_size+2*V_array_size 
    - Complexity: n^3 
* Chain [48] with precondition: [V_array_size>=3] 
    - Upper bound: 7/2*V_array_size+7/2+(V_array_size/2+1/2)*(2*V_array_size+2)+V_array_size 
    - Complexity: n^2 
* Chain [47] with precondition: [V_array_size>=4] 
    - Upper bound: 16*V_array_size+1+12*V_array_size*V_array_size+4*V_array_size*V_array_size*V_array_size+V_array_size 
    - Complexity: n^3 

### Maximum cost of eval_realshellsort_start(V_0,V_21,V_5,V_array_size,V_array_size_sink,V_i_0,V_j_0,B): max([nat(V_array_size/2+1/2)*4*nat(V_array_size/2+1/2)+nat(V_array_size/2+1/2)*7+nat(V_array_size/2)*2,nat(V_array_size)*7+1+nat(V_array_size)*8*nat(V_array_size)+nat(V_array_size)*4*nat(V_array_size)*nat(V_array_size)+max([nat(V_array_size/2)*4,nat(V_array_size)*4*nat(V_array_size)+nat(V_array_size)*9+nat(V_array_size/4)*4])]) 
Asymptotic class: n^3 
* Total analysis performed in 486 ms.

