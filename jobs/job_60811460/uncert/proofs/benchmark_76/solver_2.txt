WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalspeedpldi2bb2in/6,evalspeedpldi2bb3in/6,evalspeedpldi2bb5in/6]
1. non_recursive  : [evalspeedpldi2stop/4]
2. non_recursive  : [evalspeedpldi2returnin/4]
3. non_recursive  : [exit_location/1]
4. non_recursive  : [evalspeedpldi2bb5in_loop_cont/5]
5. non_recursive  : [evalspeedpldi2entryin/4]
6. non_recursive  : [evalspeedpldi2start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalspeedpldi2bb5in/6
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into evalspeedpldi2bb5in_loop_cont/5
5. SCC is partially evaluated into evalspeedpldi2entryin/4
6. SCC is partially evaluated into evalspeedpldi2start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalspeedpldi2bb5in/6 
* CE 8 is refined into CE [11] 
* CE 7 is refined into CE [12] 
* CE 6 is refined into CE [13] 
* CE 5 is refined into CE [14] 


### Cost equations --> "Loop" of evalspeedpldi2bb5in/6 
* CEs [13] --> Loop 11 
* CEs [14] --> Loop 12 
* CEs [11] --> Loop 13 
* CEs [12] --> Loop 14 

### Ranking functions of CR evalspeedpldi2bb5in(A,B,C,D,E,F) 
* RF of phase [11,12]: [B+2*C-1]

#### Partial ranking functions of CR evalspeedpldi2bb5in(A,B,C,D,E,F) 
* Partial RF of phase [11,12]:
  - RF of loop [11:1]:
    A-B depends on loops [12:1] 
    C
  - RF of loop [12:1]:
    -A+B+1 depends on loops [11:1] 
    B depends on loops [11:1] 


### Specialization of cost equations evalspeedpldi2bb5in_loop_cont/5 
* CE 10 is refined into CE [15] 
* CE 9 is refined into CE [16] 


### Cost equations --> "Loop" of evalspeedpldi2bb5in_loop_cont/5 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 

### Ranking functions of CR evalspeedpldi2bb5in_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR evalspeedpldi2bb5in_loop_cont(A,B,C,D,E) 


### Specialization of cost equations evalspeedpldi2entryin/4 
* CE 4 is refined into CE [17,18,19,20] 
* CE 3 is refined into CE [21] 
* CE 2 is refined into CE [22] 


### Cost equations --> "Loop" of evalspeedpldi2entryin/4 
* CEs [18,20] --> Loop 17 
* CEs [19] --> Loop 18 
* CEs [21] --> Loop 19 
* CEs [22] --> Loop 20 
* CEs [17] --> Loop 21 

### Ranking functions of CR evalspeedpldi2entryin(A,B,C,D) 

#### Partial ranking functions of CR evalspeedpldi2entryin(A,B,C,D) 


### Specialization of cost equations evalspeedpldi2start/4 
* CE 1 is refined into CE [23,24,25,26,27] 


### Cost equations --> "Loop" of evalspeedpldi2start/4 
* CEs [27] --> Loop 22 
* CEs [26] --> Loop 23 
* CEs [25] --> Loop 24 
* CEs [24] --> Loop 25 
* CEs [23] --> Loop 26 

### Ranking functions of CR evalspeedpldi2start(A,B,C,D) 

#### Partial ranking functions of CR evalspeedpldi2start(A,B,C,D) 


Computing Bounds
=====================================

#### Cost of chains of evalspeedpldi2bb5in(A,B,C,D,E,F):
* Chain [[11,12],14]: 1*it(11)+1*it(12)+0
  Such that:aux(17) =< B+2*C
aux(18) =< B+2*C-E
it(11) =< C
it(11) =< aux(17)
it(12) =< aux(17)
it(11) =< aux(18)
it(12) =< aux(18)

  with precondition: [D=2,F=0,A>=1,B>=0,C>=1,A>=E,B+C>=E] 

* Chain [[11,12],13]: 1*it(11)+1*it(12)+0
  Such that:it(11) =< C
aux(20) =< B+2*C
it(11) =< aux(20)
it(12) =< aux(20)

  with precondition: [D=3,A>=1,B>=0,C>=1] 

* Chain [14]: 0
  with precondition: [C=0,D=2,F=0,B=E,A>=1,B>=0] 

* Chain [13]: 0
  with precondition: [D=3,A>=1,B>=0,C>=0] 


#### Cost of chains of evalspeedpldi2bb5in_loop_cont(A,B,C,D,E):
* Chain [16]: 0
  with precondition: [A=2,B>=1] 

* Chain [15]: 0
  with precondition: [A=3,B>=1] 


#### Cost of chains of evalspeedpldi2entryin(A,B,C,D):
* Chain [21]: 0
  with precondition: [A=0,B>=1] 

* Chain [20]: 0
  with precondition: [0>=A+1] 

* Chain [19]: 0
  with precondition: [0>=B] 

* Chain [18]: 0
  with precondition: [A>=0,B>=1] 

* Chain [17]: 2*s(3)+2*s(4)+0
  Such that:aux(21) =< A
aux(22) =< 2*A
s(3) =< aux(21)
s(3) =< aux(22)
s(4) =< aux(22)

  with precondition: [A>=1,B>=1] 


#### Cost of chains of evalspeedpldi2start(A,B,C,D):
* Chain [26]: 0
  with precondition: [A=0,B>=1] 

* Chain [25]: 0
  with precondition: [0>=A+1] 

* Chain [24]: 0
  with precondition: [0>=B] 

* Chain [23]: 0
  with precondition: [A>=0,B>=1] 

* Chain [22]: 2*s(10)+2*s(11)+0
  Such that:s(8) =< A
s(9) =< 2*A
s(10) =< s(8)
s(10) =< s(9)
s(11) =< s(9)

  with precondition: [A>=1,B>=1] 


Closed-form bounds of evalspeedpldi2start(A,B,C,D): 
-------------------------------------
* Chain [26] with precondition: [A=0,B>=1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [25] with precondition: [0>=A+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [24] with precondition: [0>=B] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [23] with precondition: [A>=0,B>=1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [22] with precondition: [A>=1,B>=1] 
    - Upper bound: 6*A 
    - Complexity: n 

### Maximum cost of evalspeedpldi2start(A,B,C,D): nat(2*A)*2+nat(A)*2 
Asymptotic class: n 
* Total analysis performed in 79 ms.

