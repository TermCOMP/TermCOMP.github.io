WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
zip3 -> 2
group3 -> 3

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0 /\ -1+i6 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=-1+i5, i6'=-1+i6
   1: (-3+i1 == 0 /\ -4+i4 >= 0) /\ i1'=3, i3'=1+i3, i4'=-3+i4
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 0
1 -> 1
2 -> 0

Step with 2

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 0

	Trace

	2[(-1+i1 == 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0 /\ -1+i6 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0 /\ -1+i6 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=-1+i5, i6'=-1+i6
	New rule:
	(i4-it11 >= 0 /\ -2+i1 >= 0 /\ i6-it11 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ -it11+i5 >= 0) /\ i1'=i1, i3'=i3+it11, i4'=i4-it11, i5'=-it11+i5, i6'=i6-it11

		-1+i4 >= 0 [0]: montonic decrease yields i4-it11 >= 0
		
		-2+i1 >= 0 [0]: unchanged
		
		-1+i5 >= 0 [0]: montonic decrease yields -it11+i5 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		-1+i6 >= 0 [0]: montonic decrease yields i6-it11 >= 0
		
		Replacement map: {-1+i4 >= 0 -> i4-it11 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, -1+i5 >= 0 -> -it11+i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -1+i6 >= 0 -> i6-it11 >= 0}

	Removed Trivial Updates

	Original rule:
	(i4-it11 >= 0 /\ -2+i1 >= 0 /\ i6-it11 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ -it11+i5 >= 0) /\ i1'=i1, i3'=i3+it11, i4'=i4-it11, i5'=-it11+i5, i6'=i6-it11
	New rule:
	(i4-it11 >= 0 /\ -2+i1 >= 0 /\ i6-it11 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ -it11+i5 >= 0) /\ i3'=i3+it11, i4'=i4-it11, i5'=-it11+i5, i6'=i6-it11

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
zip3 -> 2
group3 -> 3

Rules:
   0: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0 /\ -1+i6 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4, i5'=-1+i5, i6'=-1+i6
   1: (-3+i1 == 0 /\ -4+i4 >= 0) /\ i1'=3, i3'=1+i3, i4'=-3+i4
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   3: (i4-it11 >= 0 /\ -2+i1 >= 0 /\ i6-it11 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ -it11+i5 >= 0) /\ i3'=i3+it11, i4'=i4-it11, i5'=-it11+i5, i6'=i6-it11

Dependency graph:
0 -> 0, 0 -> 3
1 -> 1
2 -> 0, 2 -> 3
3 -> 0

	Trace

	2[(-1+i1 == 0)]
	3[(i4-it11 >= 0 /\ -2+i1 >= 0 /\ i6-it11 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ -it11+i5 >= 0)]
	
	Blocked

	{}
	{}
	{0[T], 3[T]}
	
Backtrack

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{3[T]}
	
Step with 0

	Trace

	2[(-1+i1 == 0)]
	0[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i5 >= 0 /\ -1+i6 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{}
	
Covered

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 3[T]}
	
Backtrack

	Trace

	Blocked

	{2[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₂: l0(X₀, X₁, X₂) → l2(X₀, X₁, X₂)
  t₁: l1(X₀, X₁, X₂) → l1(X₀-3, X₁, X₂) :|: 4 ≤ X₀
  t₀: l2(X₀, X₁, X₂) → l2(X₀-1, X₁-1, X₂-1) :|: 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 1 ≤ X₂


Preprocessing
  Cut unreachable locations [l1] from the program graph


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l2
  Return Locations:  
  Transitions:
  t₂: l0(X₀, X₁, X₂) → l2(X₀, X₁, X₂)
  t₀: l2(X₀, X₁, X₂) → l2(X₀-1, X₁-1, X₂-1) :|: 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 1 ≤ X₂


MPRF for transition t₀: l2(X₀, X₁, X₂) → l2(X₀-1, X₁-1, X₂-1) :|: 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 1 ≤ X₂ of depth 1:
  new bound:
    X₂ {O(n)}

  MPRF:
    • l2: [X₂]




All Bounds
Timebounds
  Overall timebound:X₂+1 {O(n)}
    t₀: X₂ {O(n)}
    t₂: 1 {O(1)}


Costbounds
  Overall costbound: X₂+1 {O(n)}
    t₀: X₂ {O(n)}
    t₂: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₀, X₂: X₂ {O(n)}
    t₂, X₀: X₀ {O(n)}
    t₂, X₁: X₁ {O(n)}
    t₂, X₂: X₂ {O(n)}

