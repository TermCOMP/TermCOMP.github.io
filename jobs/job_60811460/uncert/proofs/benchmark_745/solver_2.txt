WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_start_bb1_in/5,eval_start_bb2_in/5]
1. non_recursive  : [eval_start_stop/4]
2. non_recursive  : [eval_start_bb3_in/4]
3. non_recursive  : [exit_location/1]
4. non_recursive  : [eval_start_bb1_in_loop_cont/5]
5. non_recursive  : [eval_start_5/4]
6. non_recursive  : [eval_start_4/4]
7. non_recursive  : [eval_start_3/4]
8. non_recursive  : [eval_start_2/4]
9. non_recursive  : [eval_start_1/4]
10. non_recursive  : [eval_start_0/4]
11. non_recursive  : [eval_start_bb0_in/4]
12. non_recursive  : [eval_start_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_start_bb1_in/5
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_start_bb1_in_loop_cont/5
5. SCC is partially evaluated into eval_start_5/4
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_start_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_start_bb1_in/5 
* CE 6 is refined into CE [9] 
* CE 5 is refined into CE [10] 
* CE 4 is refined into CE [11] 
* CE 3 is refined into CE [12] 


### Cost equations --> "Loop" of eval_start_bb1_in/5 
* CEs [11] --> Loop 9 
* CEs [12] --> Loop 10 
* CEs [9] --> Loop 11 
* CEs [10] --> Loop 12 

### Ranking functions of CR eval_start_bb1_in(V__0,V_flag_0,B,C,D) 
* RF of phase [9]: [V__0]

#### Partial ranking functions of CR eval_start_bb1_in(V__0,V_flag_0,B,C,D) 
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    V__0


### Specialization of cost equations eval_start_bb1_in_loop_cont/5 
* CE 8 is refined into CE [13] 
* CE 7 is refined into CE [14] 


### Cost equations --> "Loop" of eval_start_bb1_in_loop_cont/5 
* CEs [13] --> Loop 13 
* CEs [14] --> Loop 14 

### Ranking functions of CR eval_start_bb1_in_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR eval_start_bb1_in_loop_cont(A,B,C,D,E) 


### Specialization of cost equations eval_start_5/4 
* CE 2 is refined into CE [15,16,17,18,19] 


### Cost equations --> "Loop" of eval_start_5/4 
* CEs [15,18] --> Loop 15 
* CEs [16,17] --> Loop 16 
* CEs [19] --> Loop 17 

### Ranking functions of CR eval_start_5(V__0,V_flag_0,V_n,B) 

#### Partial ranking functions of CR eval_start_5(V__0,V_flag_0,V_n,B) 


### Specialization of cost equations eval_start_start/4 
* CE 1 is refined into CE [20,21,22] 


### Cost equations --> "Loop" of eval_start_start/4 
* CEs [22] --> Loop 18 
* CEs [21] --> Loop 19 
* CEs [20] --> Loop 20 

### Ranking functions of CR eval_start_start(V__0,V_flag_0,V_n,B) 

#### Partial ranking functions of CR eval_start_start(V__0,V_flag_0,V_n,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_start_bb1_in(V__0,V_flag_0,B,C,D):
* Chain [[9],11]: 1*it(9)+0
  Such that:it(9) =< V__0

  with precondition: [V_flag_0=1,B=3,V__0>=1] 

* Chain [[9],10,12]: 1*it(9)+1
  Such that:it(9) =< V__0

  with precondition: [V_flag_0=1,B=2,C=0,D=0,V__0>=1] 

* Chain [[9],10,11]: 1*it(9)+1
  Such that:it(9) =< V__0

  with precondition: [V_flag_0=1,B=3,V__0>=1] 

* Chain [11]: 0
  with precondition: [B=3,1>=V_flag_0,V_flag_0>=0] 

* Chain [10,12]: 1
  with precondition: [V_flag_0=1,B=2,D=0,V__0=C,0>=V__0] 

* Chain [10,11]: 1
  with precondition: [V_flag_0=1,B=3,0>=V__0] 


#### Cost of chains of eval_start_bb1_in_loop_cont(A,B,C,D,E):
* Chain [14]: 0
  with precondition: [A=2] 

* Chain [13]: 0
  with precondition: [A=3] 


#### Cost of chains of eval_start_5(V__0,V_flag_0,V_n,B):
* Chain [17]: 0
  with precondition: [] 

* Chain [16]: 1
  with precondition: [0>=V_n] 

* Chain [15]: 3*s(3)+1
  Such that:aux(2) =< V_n
s(3) =< aux(2)

  with precondition: [V_n>=1] 


#### Cost of chains of eval_start_start(V__0,V_flag_0,V_n,B):
* Chain [20]: 0
  with precondition: [] 

* Chain [19]: 1
  with precondition: [0>=V_n] 

* Chain [18]: 3*s(7)+1
  Such that:s(6) =< V_n
s(7) =< s(6)

  with precondition: [V_n>=1] 


Closed-form bounds of eval_start_start(V__0,V_flag_0,V_n,B): 
-------------------------------------
* Chain [20] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [19] with precondition: [0>=V_n] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [18] with precondition: [V_n>=1] 
    - Upper bound: 3*V_n+1 
    - Complexity: n 

### Maximum cost of eval_start_start(V__0,V_flag_0,V_n,B): max([1,nat(V_n)*3+1]) 
Asymptotic class: n 
* Total analysis performed in 50 ms.

