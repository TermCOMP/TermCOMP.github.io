NO

# LoAT Proof:
NO

NO

Initial ITS

Start location: f1

Location map:
LoAT_sink -> 0
f1 -> 1
f8 -> 2
f4 -> 3

Rules:
   0: -2+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=2
   1: -1+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=3
   2: -3+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=3

Dependency graph:
0 -> 0
1 -> 2
2 -> 2

Step with 1

	Trace

	1[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	1[(-1+i1 == 0)]
	2[(-3+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-3+i1 == 0) /\ i1'=3, i3'=1+i3, i4'=3
	New rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it7 >= 0) /\ i1'=0

		-3+i1 >= 0 [0]: unchanged
		
		3-i1 >= 0 [0]: unchanged
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, 3-i1 >= 0 -> 3-i1 >= 0}

	Loop Acceleration

	Original rule:
	(-3+i1 == 0) /\ i1'=3, i3'=1+i3, i4'=3
	New rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it7 >= 0) /\ i1'=i1, i3'=i3+it7, i4'=3

		-3+i1 >= 0 [0]: unchanged
		
		3-i1 >= 0 [0]: unchanged
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, 3-i1 >= 0 -> 3-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it7 >= 0) /\ i1'=i1, i3'=i3+it7, i4'=3
	New rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it7 >= 0) /\ i3'=i3+it7, i4'=3

Start location: f1

Location map:
LoAT_sink -> 0
f1 -> 1
f8 -> 2
f4 -> 3

Rules:
   0: -2+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=2
   1: -1+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=3
   2: -3+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=3
   3: (-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it7 >= 0) /\ i1'=0
   4: (-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it7 >= 0) /\ i3'=i3+it7, i4'=3

Dependency graph:
0 -> 0
1 -> 2, 1 -> 3, 1 -> 4
2 -> 2, 2 -> 3, 2 -> 4
4 -> 2, 4 -> 3

Step with 3

	Trace

	1[(-1+i1 == 0)]
	3[(-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it7 >= 0)]
	
	Blocked

	{}
	{}
	{3[T]}
	
Refute

	Counterexample

	(i1=1, i3=0)
	-1-> (i1=3, i3=1, i4=3 )
	-3-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₁: l0(X₀) → l1(3)
  t₂: l1(X₀) → l1(3)
  t₀: l2(X₀) → l2(2)


Preprocessing
  Cut unreachable locations [l2] from the program graph


  Eliminate variables [X₀] that do not contribute to the problem


Problem after Preprocessing
  Start:  l0
  Program_Vars:  
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₃: l0 → l1
  t₄: l1 → l1


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₃: 1 {O(1)}
    t₄: inf {Infinity}


Costbounds
  Overall costbound: inf {Infinity}
    t₃: 1 {O(1)}
    t₄: inf {Infinity}


Sizebounds

