WORST_CASE(?,O(1))

# LoAT Proof:
Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f5 -> 2
f27 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it2, i5'=0, i6'=0
   1: (-2+i1 == 0 /\ 15-i6 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=1+i6, i7'=1
   2: (-2+i1 == 0 /\ 15-i6 >= 0) /\ i1'=2, i3'=1+i3, i6'=1+i6, i7'=0
   3: (-16+i6 >= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3, i8'=i5, i9'=i5, i10'=it5, i11'=it4, i12'=it4, i13'=it4

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3
1 -> 1, 1 -> 2, 1 -> 3
2 -> 1, 2 -> 2, 2 -> 3

Refined Dependency Graph

	Removed the following edges: 0 -> 3

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f5 -> 2
f27 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it2, i5'=0, i6'=0
   1: (-2+i1 == 0 /\ 15-i6 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=1+i6, i7'=1
   2: (-2+i1 == 0 /\ 15-i6 >= 0) /\ i1'=2, i3'=1+i3, i6'=1+i6, i7'=0
   3: (-16+i6 >= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3, i8'=i5, i9'=i5, i10'=it5, i11'=it4, i12'=it4, i13'=it4

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2, 1 -> 3
2 -> 1, 2 -> 2, 2 -> 3

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ 15-i6 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ 15-i6 >= 0) /\ i1'=2, i3'=1+i3, i6'=1+i6, i7'=0
	New rule:
	(-2+i1 >= 0 /\ -1+it31 >= 0 /\ 15-i6 >= 0 /\ 2-i1 >= 0 /\ 16-i6-it31 >= 0) /\ i1'=i1, i3'=i3+it31, i6'=i6+it31, i7'=0

		-2+i1 >= 0 [0]: unchanged
		
		15-i6 >= 0 [0]: montonic decrease yields (15-i6 >= 0 /\ 16-i6-it31 >= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 15-i6 >= 0 -> (15-i6 >= 0 /\ 16-i6-it31 >= 0), 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ -1+it31 >= 0 /\ 15-i6 >= 0 /\ 2-i1 >= 0 /\ 16-i6-it31 >= 0) /\ i1'=i1, i3'=i3+it31, i6'=i6+it31, i7'=0
	New rule:
	(-2+i1 >= 0 /\ -1+it31 >= 0 /\ 15-i6 >= 0 /\ 2-i1 >= 0 /\ 16-i6-it31 >= 0) /\ i3'=i3+it31, i6'=i6+it31, i7'=0
	
	Instantiation

	Original rule:
	(-2+i1 >= 0 /\ -1+it31 >= 0 /\ 15-i6 >= 0 /\ 2-i1 >= 0 /\ 16-i6-it31 >= 0) /\ i3'=i3+it31, i6'=i6+it31, i7'=0
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ 15-i6 >= 0 /\ 2-i1 >= 0) /\ i3'=16-i6+i3, i6'=16, i7'=0

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f5 -> 2
f27 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it2, i5'=0, i6'=0
   1: (-2+i1 == 0 /\ 15-i6 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=1+i6, i7'=1
   2: (-2+i1 == 0 /\ 15-i6 >= 0) /\ i1'=2, i3'=1+i3, i6'=1+i6, i7'=0
   3: (-16+i6 >= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3, i8'=i5, i9'=i5, i10'=it5, i11'=it4, i12'=it4, i13'=it4
   4: (0 >= 0 /\ -2+i1 >= 0 /\ 15-i6 >= 0 /\ 2-i1 >= 0) /\ i3'=16-i6+i3, i6'=16, i7'=0

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 4
1 -> 1, 1 -> 2, 1 -> 3, 1 -> 4
2 -> 1, 2 -> 2, 2 -> 3, 2 -> 4
4 -> 1, 4 -> 2, 4 -> 3

	Trace

	0[(-1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ 15-i6 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 4[T]}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ 15-i6 >= 0 /\ 2-i1 >= 0)]
	3[(-16+i6 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{}
	{2[T], 4[T]}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ 15-i6 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 3[T], 4[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{4[T]}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ 15-i6 >= 0)]
	
	Blocked

	{}
	{4[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T], 4[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ 15-i6 >= 0)]
	
	Blocked

	{}
	{2[T], 4[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ 15-i6 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=1+i6, i7'=1
	New rule:
	(-2+i1 >= 0 /\ -1+it82 >= 0 /\ 15-i6 >= 0 /\ 2-i1 >= 0 /\ 16-i6-it82 >= 0) /\ i1'=i1, i3'=i3+it82, i5'=it82+i5, i6'=i6+it82, i7'=1

		-2+i1 >= 0 [0]: unchanged
		
		15-i6 >= 0 [0]: montonic decrease yields (15-i6 >= 0 /\ 16-i6-it82 >= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 15-i6 >= 0 -> (15-i6 >= 0 /\ 16-i6-it82 >= 0), 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ -1+it82 >= 0 /\ 15-i6 >= 0 /\ 2-i1 >= 0 /\ 16-i6-it82 >= 0) /\ i1'=i1, i3'=i3+it82, i5'=it82+i5, i6'=i6+it82, i7'=1
	New rule:
	(-2+i1 >= 0 /\ -1+it82 >= 0 /\ 15-i6 >= 0 /\ 2-i1 >= 0 /\ 16-i6-it82 >= 0) /\ i3'=i3+it82, i5'=it82+i5, i6'=i6+it82, i7'=1
	
	Instantiation

	Original rule:
	(-2+i1 >= 0 /\ -1+it82 >= 0 /\ 15-i6 >= 0 /\ 2-i1 >= 0 /\ 16-i6-it82 >= 0) /\ i3'=i3+it82, i5'=it82+i5, i6'=i6+it82, i7'=1
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ 15-i6 >= 0 /\ 2-i1 >= 0) /\ i3'=16-i6+i3, i5'=16-i6+i5, i6'=16, i7'=1

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f5 -> 2
f27 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it2, i5'=0, i6'=0
   1: (-2+i1 == 0 /\ 15-i6 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i6'=1+i6, i7'=1
   2: (-2+i1 == 0 /\ 15-i6 >= 0) /\ i1'=2, i3'=1+i3, i6'=1+i6, i7'=0
   3: (-16+i6 >= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3, i8'=i5, i9'=i5, i10'=it5, i11'=it4, i12'=it4, i13'=it4
   4: (0 >= 0 /\ -2+i1 >= 0 /\ 15-i6 >= 0 /\ 2-i1 >= 0) /\ i3'=16-i6+i3, i6'=16, i7'=0
   5: (0 >= 0 /\ -2+i1 >= 0 /\ 15-i6 >= 0 /\ 2-i1 >= 0) /\ i3'=16-i6+i3, i5'=16-i6+i5, i6'=16, i7'=1

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 4, 0 -> 5
1 -> 1, 1 -> 2, 1 -> 3, 1 -> 4, 1 -> 5
2 -> 1, 2 -> 2, 2 -> 3, 2 -> 4, 2 -> 5
4 -> 1, 4 -> 2, 4 -> 3, 4 -> 5
5 -> 1, 5 -> 2, 5 -> 3, 5 -> 4

	Trace

	0[(-1+i1 == 0)]
	5[(0 >= 0 /\ -2+i1 >= 0 /\ 15-i6 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{2[T], 4[T]}
	{1[T], 5[T]}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	5[(0 >= 0 /\ -2+i1 >= 0 /\ 15-i6 >= 0 /\ 2-i1 >= 0)]
	3[(-16+i6 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{2[T], 4[T]}
	{1[T], 2[T], 4[T], 5[T]}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	5[(0 >= 0 /\ -2+i1 >= 0 /\ 15-i6 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{2[T], 4[T]}
	{1[T], 2[T], 3[T], 4[T], 5[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T], 4[T], 5[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ 15-i6 >= 0)]
	
	Blocked

	{}
	{2[T], 4[T], 5[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 2[T], 4[T], 5[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃, X₄, X₅, X₆, X₇, X₈, X₉
  Temp_Vars:  K, L
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂, X₃, X₄, X₅, X₆, X₇, X₈, X₉) → l1(K, 0, 0, X₃, X₄, X₅, X₆, X₇, X₈, X₉)
  t₁: l1(X₀, X₁, X₂, X₃, X₄, X₅, X₆, X₇, X₈, X₉) → l1(X₀, 1+X₁, 1+X₂, 1, X₄, X₅, X₆, X₇, X₈, X₉) :|: X₂ ≤ 15
  t₂: l1(X₀, X₁, X₂, X₃, X₄, X₅, X₆, X₇, X₈, X₉) → l1(X₀, X₁, 1+X₂, 0, X₄, X₅, X₆, X₇, X₈, X₉) :|: X₂ ≤ 15
  t₃: l1(X₀, X₁, X₂, X₃, X₄, X₅, X₆, X₇, X₈, X₉) → l2(X₀, X₁, X₂, X₃, X₁, X₁, K, L, L, L) :|: 16 ≤ X₂


Preprocessing
  Eliminate variables [K; L; X₀; X₁; X₃; X₄; X₅; X₆; X₇; X₈; X₉] that do not contribute to the problem


  Found invariant X₀ ≤ 16 ∧ 0 ≤ X₀ for location l1


  Found invariant X₀ ≤ 16 ∧ 16 ≤ X₀ for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₄: l0(X₀) → l1(0)
  t₅: l1(X₀) → l1(1+X₀) :|: X₀ ≤ 15 ∧ X₀ ≤ 16 ∧ 0 ≤ X₀
  t₆: l1(X₀) → l1(1+X₀) :|: X₀ ≤ 15 ∧ X₀ ≤ 16 ∧ 0 ≤ X₀
  t₇: l1(X₀) → l2(X₀) :|: 16 ≤ X₀ ∧ X₀ ≤ 16 ∧ 0 ≤ X₀


MPRF for transition t₅: l1(X₀) → l1(1+X₀) :|: X₀ ≤ 15 ∧ X₀ ≤ 16 ∧ 0 ≤ X₀ of depth 1:
  new bound:
    17 {O(1)}

  MPRF:
    • l1: [17-X₀]




MPRF for transition t₆: l1(X₀) → l1(1+X₀) :|: X₀ ≤ 15 ∧ X₀ ≤ 16 ∧ 0 ≤ X₀ of depth 1:
  new bound:
    17 {O(1)}

  MPRF:
    • l1: [17-X₀]




All Bounds
Timebounds
  Overall timebound:36 {O(1)}
    t₄: 1 {O(1)}
    t₅: 17 {O(1)}
    t₆: 17 {O(1)}
    t₇: 1 {O(1)}


Costbounds
  Overall costbound: 36 {O(1)}
    t₄: 1 {O(1)}
    t₅: 17 {O(1)}
    t₆: 17 {O(1)}
    t₇: 1 {O(1)}


Sizebounds
    t₄, X₀: 0 {O(1)}
    t₅, X₀: 16 {O(1)}
    t₆, X₀: 16 {O(1)}
    t₇, X₀: 16 {O(1)}

