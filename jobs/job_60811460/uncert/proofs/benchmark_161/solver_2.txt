WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [lbl101/13]
1. recursive  : [lbl101_loop_cont/14,lbl91/13]
2. non_recursive  : [exit_location/1]
3. non_recursive  : [stop/7]
4. non_recursive  : [lbl91_loop_cont/8]
5. non_recursive  : [start/7]
6. non_recursive  : [start0/7]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into lbl101/13
1. SCC is partially evaluated into lbl91/13
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into lbl91_loop_cont/8
5. SCC is partially evaluated into start/7
6. SCC is partially evaluated into start0/7

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations lbl101/13 
* CE 11 is refined into CE [20] 
* CE 9 is refined into CE [21] 
* CE 8 is refined into CE [22] 
* CE 10 is refined into CE [23] 


### Cost equations --> "Loop" of lbl101/13 
* CEs [23] --> Loop 17 
* CEs [20] --> Loop 18 
* CEs [21] --> Loop 19 
* CEs [22] --> Loop 20 

### Ranking functions of CR lbl101(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* RF of phase [17]: [-B+D+1,-B+E+1]

#### Partial ranking functions of CR lbl101(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    -B+D+1
    -B+E+1


### Specialization of cost equations lbl91/13 
* CE 14 is refined into CE [24,25] 
* CE 19 is refined into CE [26] 
* CE 16 is refined into CE [27,28] 
* CE 17 is refined into CE [29] 
* CE 15 is refined into CE [30,31] 
* CE 18 is refined into CE [32] 


### Cost equations --> "Loop" of lbl91/13 
* CEs [31] --> Loop 21 
* CEs [30] --> Loop 22 
* CEs [32] --> Loop 23 
* CEs [25] --> Loop 24 
* CEs [24] --> Loop 25 
* CEs [26] --> Loop 26 
* CEs [28] --> Loop 27 
* CEs [27] --> Loop 28 
* CEs [29] --> Loop 29 

### Ranking functions of CR lbl91(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* RF of phase [21,22,23]: [-B+D+1,-C+D+1]

#### Partial ranking functions of CR lbl91(A,B,C,D,E,F,G,H,I,J,K,L,M) 
* Partial RF of phase [21,22,23]:
  - RF of loop [21:1]:
    -2*A-C+D-1
    -3/2*A-B/2+E/2-1
    -2/3*A-B/3+D/3-1/3
    -B/2+E/2-1
    -B/2+E/2-3/2*F-1
    -B/3+D/3-1/3
    -B/3+D/3-2/3*F-1/3
    -C+D-1
    -C+D-2*F-1
  - RF of loop [22:1]:
    -2*A-B+E-1
    -A-C+D
    -A/2-B/2+D/2
    -B+E-1
    -B+E-2*F-1
    -B/2+D/2
    -B/2+D/2-F/2
    -C+D
    -C+D-F
  - RF of loop [23:1]:
    -B+D+1
    -C+D+1


### Specialization of cost equations lbl91_loop_cont/8 
* CE 13 is refined into CE [33] 
* CE 12 is refined into CE [34] 


### Cost equations --> "Loop" of lbl91_loop_cont/8 
* CEs [33] --> Loop 30 
* CEs [34] --> Loop 31 

### Ranking functions of CR lbl91_loop_cont(A,B,C,D,E,F,G,H) 

#### Partial ranking functions of CR lbl91_loop_cont(A,B,C,D,E,F,G,H) 


### Specialization of cost equations start/7 
* CE 6 is refined into CE [35] 
* CE 2 is refined into CE [36,37] 
* CE 3 is refined into CE [38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57] 
* CE 4 is refined into CE [58,59] 
* CE 7 is refined into CE [60,61,62,63,64,65,66,67,68,69] 
* CE 5 is refined into CE [70] 


### Cost equations --> "Loop" of start/7 
* CEs [38,61] --> Loop 32 
* CEs [39] --> Loop 33 
* CEs [58,60] --> Loop 34 
* CEs [37,44,59,63] --> Loop 35 
* CEs [41,48,54,65] --> Loop 36 
* CEs [40,43,47,51,55,64] --> Loop 37 
* CEs [42,46,50,53,57] --> Loop 38 
* CEs [52,56] --> Loop 39 
* CEs [35] --> Loop 40 
* CEs [36,66] --> Loop 41 
* CEs [70] --> Loop 42 
* CEs [67] --> Loop 43 
* CEs [45,62,69] --> Loop 44 
* CEs [49,68] --> Loop 45 

### Ranking functions of CR start(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR start(A,B,C,D,E,F,G) 


### Specialization of cost equations start0/7 
* CE 1 is refined into CE [71,72,73,74,75,76,77,78,79,80,81,82,83,84] 


### Cost equations --> "Loop" of start0/7 
* CEs [81] --> Loop 46 
* CEs [80] --> Loop 47 
* CEs [79] --> Loop 48 
* CEs [78,84] --> Loop 49 
* CEs [77,83] --> Loop 50 
* CEs [76,82] --> Loop 51 
* CEs [75] --> Loop 52 
* CEs [74] --> Loop 53 
* CEs [73] --> Loop 54 
* CEs [72] --> Loop 55 
* CEs [71] --> Loop 56 

### Ranking functions of CR start0(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR start0(A,B,C,D,E,F,G) 


Computing Bounds
=====================================

#### Cost of chains of lbl101(A,B,C,D,E,F,G,H,I,J,K,L,M):
* Chain [[17],20]: 1*it(17)+0
  Such that:it(17) =< -B+K+1

  with precondition: [G=2,A=F,A=H,C=J,D=K,E=L,A=M,E>=D,I>=D+1,I>=A+B+1,B>=A+C+1,A+D+1>=I] 

* Chain [[17],19]: 1*it(17)+0
  Such that:it(17) =< -B+I

  with precondition: [G=3,A=F,A=H,C=J,E=L,A=M,A+K+1=D,A>=0,E>=D,D>=I,I>=A+B+1,B>=A+C+1] 

* Chain [[17],18]: 1*it(17)+0
  Such that:it(17) =< -B+D+1

  with precondition: [G=4,A=F,A>=0,D>=B,E>=D,B>=A+C+1] 

* Chain [20]: 0
  with precondition: [G=2,F=A,F=H,B=I,C=J,D=K,E=L,F=M,B>=D+1,E>=D,D+F+1>=B,B>=C+F+1] 

* Chain [19]: 0
  with precondition: [G=3,F=A,F=H,B=I,C=J,E=L,F=M,F+K+1=D,F>=0,D>=B,E>=D,B>=C+F+1] 

* Chain [18]: 0
  with precondition: [G=4,F=A,F>=0,E>=D,D+F+1>=B,B>=C+F+1] 


#### Cost of chains of lbl91(A,B,C,D,E,F,G,H,I,J,K,L,M):
* Chain [[21,22,23],29]: 1*it(21)+1*it(22)+1*it(23)+1*s(3)+0
  Such that:it(22) =< -2*A-B+E
it(21) =< -2*A-C+D
it(22) =< -A-C+D
it(21) =< -3/2*A-B/2+E/2
it(21) =< -2/3*A-B/3+D/3
it(22) =< -A/2-B/2+D/2
aux(3) =< -B+D
aux(4) =< -B+D+1
aux(5) =< -B+D-F
it(22) =< -B+E-2*F
it(22) =< -B+I
it(22) =< -B/2+D/2
it(22) =< -B/2+D/2-F/2
it(21) =< -B/2+E/2-3/2*F
it(21) =< -B/2+I/2
it(21) =< -B/3+D/3
it(21) =< -B/3+D/3-2/3*F
it(21) =< -C+D-2*F
it(22) =< -C+D-F
aux(8) =< D-J
aux(9) =< D-J+1
aux(13) =< -B+D+I-K
aux(14) =< D-K
it(21) =< aux(14)
it(22) =< aux(14)
it(23) =< aux(14)
it(22) =< aux(3)
s(3) =< aux(3)
it(21) =< aux(4)
it(22) =< aux(4)
it(23) =< aux(4)
it(22) =< aux(5)
s(3) =< aux(5)
it(22) =< aux(13)
it(23) =< aux(13)
s(3) =< aux(13)
it(21) =< aux(13)
it(21) =< aux(8)
it(22) =< aux(8)
it(21) =< aux(9)
it(22) =< aux(9)
it(23) =< aux(9)

  with precondition: [G=2,A=F,A=H,C=J,E=L,A=M,I>=B,B>=C,I>=K+1,E>=A+D+1,D>=A+K+1,A+K+1>=I] 

* Chain [[21,22,23],28]: 1*it(21)+1*it(22)+1*it(23)+1*s(3)+0
  Such that:it(21) =< -2*A-C+D
aux(5) =< -A-B+D
it(22) =< -A-B+I
it(21) =< -3/2*A-B/2+E/2
it(21) =< -2/3*A-B/3+D/3
it(22) =< -A/2-B/2+D/2
it(21) =< -A/2-B/2+I/2
it(21) =< -A/3-B/3+D/3+I/3-K/3
aux(3) =< -B+D
aux(4) =< -B+D+1
it(21) =< -B/2+E/2-3/2*F
it(21) =< -B/3+D/3-2/3*F
it(21) =< -C+D-2*F
aux(8) =< D-J
aux(9) =< D-J+1
aux(15) =< -A-B+D+I-K
aux(16) =< D-K
it(21) =< aux(16)
it(22) =< aux(16)
it(23) =< aux(16)
it(22) =< aux(3)
s(3) =< aux(3)
it(21) =< aux(4)
it(22) =< aux(4)
it(23) =< aux(4)
it(22) =< aux(5)
s(3) =< aux(5)
it(22) =< aux(15)
it(23) =< aux(15)
s(3) =< aux(15)
it(21) =< aux(15)
it(21) =< aux(8)
it(22) =< aux(8)
it(21) =< aux(9)
it(22) =< aux(9)
it(23) =< aux(9)

  with precondition: [G=2,A=F,A=H,C=J,E=L,A=M,B>=C,I>=K+1,I>=A+B+1,E>=A+D+1,D>=A+K+1,A+K+1>=I] 

* Chain [[21,22,23],27]: 1*it(21)+1*it(22)+1*it(23)+1*s(3)+1*s(4)+0
  Such that:aux(3) =< -B+D
aux(4) =< -B+D+1
aux(8) =< D-J
aux(9) =< D-J+1
aux(17) =< -2*A-B+D+I-K
aux(18) =< -A-B+D
aux(19) =< -A-B+K
aux(20) =< D-K
aux(6) =< aux(17)
aux(6) =< aux(18)
it(21) =< aux(18)
it(22) =< aux(18)
s(4) =< aux(18)
it(21) =< aux(19)
it(22) =< aux(19)
it(21) =< aux(20)
it(22) =< aux(20)
it(23) =< aux(20)
it(22) =< aux(3)
s(3) =< aux(3)
it(21) =< aux(4)
it(22) =< aux(4)
it(23) =< aux(4)
s(3) =< aux(18)
it(22) =< aux(6)
it(23) =< aux(6)
s(3) =< aux(6)
it(21) =< aux(6)
it(21) =< aux(8)
it(22) =< aux(8)
it(21) =< aux(9)
it(22) =< aux(9)
it(23) =< aux(9)

  with precondition: [G=2,A=F,A=H,C=J,E=L,A=M,B>=C,I>=K+1,I>=2*A+B+2,E>=A+D+1,D>=A+K+1,A+K+1>=I] 

* Chain [[21,22,23],26]: 1*it(21)+1*it(22)+1*it(23)+1*s(3)+0
  Such that:it(22) =< -2*A-B+E
it(21) =< -2*A-C+D
it(22) =< -A-C+D
it(21) =< -3/2*A-B/2+E/2
it(21) =< -2/3*A-B/3+D/3
it(22) =< -A/2-B/2+D/2
aux(3) =< -B+D
aux(4) =< -B+D+1
aux(5) =< -B+D-F
it(22) =< -B+E-2*F
it(22) =< -B/2+D/2-F/2
it(21) =< -B/2+E/2-3/2*F
it(21) =< -B/3+D/3-2/3*F
aux(8) =< -C+D
aux(9) =< -C+D+1
it(21) =< -C+D-2*F
it(22) =< -C+D-F
aux(21) =< A-B+D+1
it(21) =< aux(21)
it(22) =< aux(21)
it(23) =< aux(21)
it(22) =< aux(3)
s(3) =< aux(3)
it(21) =< aux(4)
it(22) =< aux(4)
it(23) =< aux(4)
it(22) =< aux(5)
s(3) =< aux(5)
s(3) =< aux(21)
it(21) =< aux(8)
it(22) =< aux(8)
it(21) =< aux(9)
it(22) =< aux(9)
it(23) =< aux(9)

  with precondition: [G=4,A=F,A>=0,D>=B,B>=C,E>=A+D+1] 

* Chain [[21,22,23],25]: 1*it(21)+1*it(22)+1*it(23)+1*s(3)+0
  Such that:it(21) =< -2*A-C+D
it(21) =< -3/2*A-B/2+E/2
it(21) =< -2/3*A-B/3+D/3
aux(4) =< -B+D+1
aux(5) =< -B+D-F
it(21) =< -B/2+E/2-3/2*F
it(21) =< -B/3+D/3-2/3*F
aux(8) =< -C+D
aux(9) =< -C+D+1
it(21) =< -C+D-2*F
aux(22) =< -B+D
it(21) =< aux(22)
it(22) =< aux(22)
it(23) =< aux(22)
s(3) =< aux(22)
it(21) =< aux(4)
it(22) =< aux(4)
it(23) =< aux(4)
it(22) =< aux(5)
s(3) =< aux(5)
it(21) =< aux(8)
it(22) =< aux(8)
it(21) =< aux(9)
it(22) =< aux(9)
it(23) =< aux(9)

  with precondition: [G=4,A=F,A>=0,B>=C,D>=A+B+1,E>=A+D+1] 

* Chain [[21,22,23],24]: 1*it(21)+1*it(22)+1*it(23)+1*s(3)+1*s(5)+0
  Such that:aux(3) =< -B+D
aux(4) =< -B+D+1
aux(8) =< -C+D
aux(9) =< -C+D+1
aux(23) =< -B+D-F
it(21) =< aux(23)
it(22) =< aux(23)
s(5) =< aux(23)
it(23) =< aux(23)
it(22) =< aux(3)
s(3) =< aux(3)
it(21) =< aux(4)
it(22) =< aux(4)
it(23) =< aux(4)
s(3) =< aux(23)
it(21) =< aux(8)
it(22) =< aux(8)
it(21) =< aux(9)
it(22) =< aux(9)
it(23) =< aux(9)

  with precondition: [G=4,A=F,A>=0,B>=C,D>=2*A+B+2,E>=A+D+1] 

* Chain [29]: 0
  with precondition: [G=2,A=F,A=H,B=I,C=J,D=K,E=L,A=M,B>=C,B>=D+1,E>=A+D+1,A+D+1>=B] 

* Chain [28]: 0
  with precondition: [G=2,A=F,A=H,C=J,D=K,E=L,A=M,A+B+1=I,I>=D+1,I>=A+C+1,E>=A+D+1,A+D+1>=I] 

* Chain [27]: 1*s(4)+0
  Such that:s(4) =< -B+D-F

  with precondition: [G=2,A=F,A=H,C=J,D=K,E=L,A=M,B>=C,I>=D+1,I>=2*A+B+2,E>=A+D+1,A+D+1>=I] 

* Chain [26]: 0
  with precondition: [G=4] 

* Chain [25]: 0
  with precondition: [G=4,A=F,A>=0,D>=B,B>=C,E>=A+D+1] 

* Chain [24]: 1*s(5)+0
  Such that:s(5) =< -B+D-F

  with precondition: [G=4,A=F,A>=0,B>=C,D>=A+B+1,E>=A+D+1] 


#### Cost of chains of lbl91_loop_cont(A,B,C,D,E,F,G,H):
* Chain [31]: 0
  with precondition: [A=2] 

* Chain [30]: 0
  with precondition: [A=4] 


#### Cost of chains of start(A,B,C,D,E,F,G):
* Chain [45]: 1*s(26)+4*s(32)+1*s(34)+1
  Such that:s(26) =< -2*A-B+D
s(31) =< -2*A-B+E
aux(25) =< -A-B+E
s(32) =< s(31)
s(34) =< s(31)
s(32) =< aux(25)

  with precondition: [F=A,C=B,D=E,F>=0,D>=3*F+C+3] 

* Chain [44]: 1*s(37)+1*s(38)+1*s(45)+1*s(46)+2*s(47)+1*s(48)+2*s(55)+1*s(56)+1
  Such that:s(37) =< -3*A-C+D
aux(27) =< -2*A-B+D
s(38) =< -2*A-B/2+D/2
s(38) =< -2*A-C/2+D/2
aux(28) =< -A-B+D
aux(30) =< -A-B+E
s(48) =< -A-B/3+D/3
s(38) =< -4/3*A-B/3+D/3
s(38) =< -B/2+D/2-2*F
s(37) =< -B/2+D/2-3/2*F
s(48) =< -B/2+E/2-3/2*F
s(48) =< -B/3+D/3-F
s(38) =< -B/3+D/3-4/3*F
aux(31) =< -3*A-B+D
aux(32) =< -2*A-B+E
aux(33) =< -3/2*A-B/2+D/2
aux(34) =< -B+D-3*F
s(48) =< aux(31)
s(47) =< aux(32)
s(37) =< aux(33)
s(48) =< aux(33)
s(48) =< aux(34)
s(48) =< aux(30)
s(55) =< aux(30)
s(56) =< aux(30)
s(55) =< aux(32)
s(37) =< aux(31)
s(38) =< aux(31)
s(42) =< aux(31)
s(37) =< aux(27)
s(37) =< aux(34)
s(38) =< aux(34)
s(42) =< aux(34)
s(38) =< aux(28)
s(37) =< aux(28)
s(45) =< aux(28)
s(46) =< aux(27)
s(38) =< aux(27)
s(45) =< aux(27)
s(37) =< s(42)
s(46) =< s(42)
s(46) =< aux(28)

  with precondition: [F=A,C=B,D=E,F>=0,D>=2*F+C+2] 

* Chain [43]: 1*s(58)+1*s(59)+1*s(66)+1*s(67)+0
  Such that:s(59) =< -3*A-B+D
s(58) =< -2*A-C+E
s(58) =< -A-B/2+D/2
s(59) =< -A-B/3+D/3
s(59) =< -3/2*A-C/2+E/2
s(60) =< -B+D
s(59) =< -B+D-3*F
s(58) =< -B/2+D/2-F
s(59) =< -B/2+D/2-3/2*F
s(59) =< -B/3+D/3-F
aux(35) =< -2*A-B+D
aux(36) =< -A-B+D
aux(37) =< -B+D-2*F
s(58) =< aux(35)
s(63) =< aux(35)
s(58) =< aux(37)
s(63) =< aux(37)
s(59) =< s(60)
s(58) =< s(60)
s(66) =< s(60)
s(58) =< aux(36)
s(67) =< aux(36)
s(59) =< aux(36)
s(66) =< aux(36)
s(58) =< s(63)
s(67) =< s(63)
s(67) =< s(60)

  with precondition: [F=A,C=B,D=E,F>=0,D>=C+F+1] 

* Chain [42]: 0
  with precondition: [F=A,C=B,E=D,0>=F+1] 

* Chain [41]: 0
  with precondition: [F=A,C=B,E=D,F>=0,E>=C] 

* Chain [40]: 0
  with precondition: [F=A,C=B,E=D,F>=0,C>=E+1] 

* Chain [39]: 1*s(68)+6*s(78)+2*s(80)+2*s(82)+1*s(83)+1
  Such that:aux(45) =< -4*A-B+E
aux(46) =< -3*A-B+E
aux(47) =< -2*A-B+E
aux(48) =< -A-B+E
s(73) =< aux(45)
s(68) =< aux(45)
s(68) =< aux(46)
s(69) =< aux(46)
s(73) =< aux(46)
s(69) =< aux(47)
s(78) =< s(73)
s(80) =< s(73)
s(78) =< s(69)
s(82) =< s(69)
s(82) =< s(73)
s(78) =< aux(48)
s(83) =< aux(46)
s(83) =< aux(47)

  with precondition: [F=A,C=B,E=D,F>=0,E>=5*F+C+5] 

* Chain [38]: 2*s(103)+3*s(105)+4*s(106)+3*s(107)+1*s(119)+1*s(120)+1*s(121)+1*s(123)+1*s(130)+2*s(131)+1*s(133)+1*s(139)+1*s(140)+1*s(141)+1
  Such that:s(133) =< -5/2*A-B/2+D/2
s(121) =< -5/2*A-B/2+E/2
s(133) =< -5/3*A-B/3+D/3
s(121) =< -5/3*A-B/3+E/3
aux(61) =< -4*A-B+E
aux(62) =< -3*A-B+E
aux(63) =< -2*A-B+E
aux(64) =< -A-B+E
aux(65) =< -B/2+E/2-5/2*F
aux(66) =< -B/3+E/3-5/3*F
s(100) =< aux(61)
s(119) =< aux(61)
s(121) =< aux(65)
s(133) =< aux(65)
s(121) =< aux(66)
s(133) =< aux(66)
s(100) =< aux(62)
s(103) =< aux(62)
s(105) =< aux(62)
s(103) =< s(100)
s(106) =< aux(62)
s(103) =< aux(63)
s(107) =< aux(63)
s(106) =< aux(63)
s(107) =< aux(62)
s(103) =< aux(64)
s(106) =< aux(64)
s(119) =< aux(62)
s(121) =< aux(62)
s(123) =< aux(62)
s(124) =< aux(62)
s(120) =< aux(63)
s(121) =< aux(63)
s(123) =< aux(63)
s(124) =< aux(63)
s(130) =< aux(63)
s(123) =< s(124)
s(131) =< s(124)
s(121) =< s(124)
s(130) =< s(124)
s(123) =< s(100)
s(131) =< s(100)
s(121) =< aux(64)
s(123) =< aux(64)
s(130) =< aux(64)
s(133) =< aux(62)
s(139) =< s(100)
s(133) =< s(124)
s(140) =< s(124)
s(141) =< s(124)
s(140) =< s(100)
s(133) =< aux(64)
s(140) =< aux(64)
s(141) =< aux(64)

  with precondition: [F=A,C=B,E=D,F>=0,E>=4*F+C+4] 

* Chain [37]: 2*s(143)+1*s(144)+1*s(146)+4*s(153)+2*s(154)+1*s(155)+1*s(162)+1*s(165)+1*s(166)+1*s(167)+2*s(175)+1*s(176)+1*s(177)+1*s(178)+1*s(179)+1*s(187)+2*s(197)+1*s(199)+1
  Such that:s(179) =< -5/2*A-B/2+D/2
s(167) =< -5/2*A-B/2+E/2
s(179) =< -5/3*A-B/3+D/3
s(155) =< -4/3*A-B/3+D/3
s(144) =< -4/3*A-B/3+E/3
s(146) =< -3/2*A-B/2+E/2
s(144) =< -2/3*A-B/3+E/3
aux(80) =< -4*A-B+D
aux(81) =< -4*A-B+E
aux(82) =< -3*A-B+E
aux(83) =< -2*A-B+E
aux(84) =< -2*A-B/2+D/2
aux(85) =< -2*A-B/2+E/2
aux(86) =< -A-B+E
aux(87) =< -5/3*A-B/3+E/3
aux(88) =< -B+D-4*F
aux(89) =< -B+D-3*F
aux(90) =< -B+D-2*F
aux(91) =< -B+D-F
aux(92) =< -B+E-4*F
aux(93) =< -B/2+D/2-2*F
aux(94) =< -B/2+E/2-5/2*F
aux(95) =< -B/3+D/3-5/3*F
aux(96) =< -B/3+D/3-4/3*F
s(170) =< aux(80)
s(178) =< aux(80)
s(166) =< aux(81)
s(183) =< aux(81)
s(143) =< aux(82)
s(194) =< aux(82)
s(155) =< aux(84)
s(166) =< aux(84)
s(178) =< aux(84)
s(144) =< aux(85)
s(178) =< aux(85)
s(167) =< aux(87)
s(179) =< aux(87)
s(170) =< aux(88)
s(183) =< aux(88)
s(166) =< aux(92)
s(178) =< aux(92)
s(144) =< aux(93)
s(155) =< aux(93)
s(166) =< aux(93)
s(178) =< aux(93)
s(167) =< aux(94)
s(179) =< aux(94)
s(167) =< aux(95)
s(179) =< aux(95)
s(144) =< aux(96)
s(155) =< aux(96)
s(168) =< aux(89)
s(166) =< aux(90)
s(167) =< aux(90)
s(168) =< aux(90)
s(173) =< aux(90)
s(165) =< aux(91)
s(166) =< aux(91)
s(167) =< aux(91)
s(173) =< aux(91)
s(175) =< aux(91)
s(166) =< s(168)
s(176) =< s(168)
s(167) =< s(168)
s(175) =< s(168)
s(166) =< s(170)
s(176) =< s(170)
s(166) =< s(173)
s(175) =< s(173)
s(176) =< s(173)
s(167) =< s(173)
s(179) =< aux(89)
s(177) =< aux(90)
s(178) =< aux(90)
s(179) =< s(173)
s(178) =< s(173)
s(178) =< s(168)
s(187) =< s(168)
s(179) =< s(168)
s(178) =< s(183)
s(187) =< s(183)
s(187) =< s(173)
s(179) =< aux(91)
s(178) =< aux(91)
s(144) =< aux(83)
s(146) =< aux(83)
s(153) =< aux(83)
s(154) =< aux(83)
s(146) =< aux(82)
s(154) =< aux(82)
s(144) =< aux(86)
s(146) =< aux(86)
s(153) =< aux(86)
s(194) =< aux(83)
s(197) =< aux(83)
s(199) =< aux(83)
s(197) =< s(194)
s(197) =< aux(86)
s(155) =< aux(82)
s(155) =< aux(83)
s(162) =< aux(83)
s(162) =< aux(82)
s(155) =< aux(86)
s(162) =< aux(86)

  with precondition: [F=A,C=B,E=D,F>=0,E>=3*F+C+3] 

* Chain [36]: 1*s(202)+1*s(203)+1*s(211)+1*s(212)+3*s(213)+1*s(215)+1*s(217)+1*s(225)+1
  Such that:s(206) =< -3*A-C+D
aux(98) =< -2*A-B+D
s(216) =< -2*A-B+E
s(203) =< -2*A-B/2+E/2
aux(99) =< -A-B+D
s(202) =< -A-B/2+D/2
s(217) =< -A-B/2+E/2
s(215) =< -A-B/3+E/3
s(203) =< -4/3*A-B/3+E/3
s(215) =< -3/2*A-B/2+E/2
s(202) =< -3/2*A-C/2+D/2
s(203) =< -2/3*A-B/3+D/3
s(215) =< -A/3-B/3+E/3
s(206) =< -B+E-3*F
s(203) =< -B/2+D/2-2*F
s(215) =< -B/3+D/3-F
s(203) =< -B/3+D/3-4/3*F
aux(102) =< -3*A-B+E
aux(103) =< -A-B+E
aux(104) =< -B+D-3*F
aux(105) =< -B/2+E/2-3/2*F
s(215) =< aux(102)
s(213) =< aux(103)
s(215) =< aux(104)
s(202) =< aux(105)
s(215) =< aux(105)
s(215) =< aux(103)
s(217) =< aux(103)
s(225) =< aux(103)
s(217) =< s(216)
s(225) =< s(216)
s(202) =< aux(102)
s(203) =< aux(102)
s(202) =< aux(99)
s(203) =< aux(99)
s(202) =< aux(104)
s(203) =< aux(104)
s(211) =< aux(99)
s(202) =< aux(98)
s(212) =< aux(98)
s(203) =< aux(98)
s(211) =< aux(98)
s(202) =< s(206)
s(212) =< s(206)
s(212) =< aux(99)

  with precondition: [F=A,C=B,E=D,F>=0,E>=2*F+C+2] 

* Chain [35]: 2*s(226)+1*s(228)+1*s(229)+1*s(237)+1*s(238)+1
  Such that:s(229) =< -3*A-B+E
s(228) =< -2*A-B+E
aux(106) =< -2*A-C+D
aux(107) =< -A-B+D
s(229) =< -A-B/3+E/3
s(228) =< -A-C/2+D/2
s(229) =< -3/2*A-B/2+E/2
s(228) =< -A/2-B/2+D/2
s(229) =< -A/3-B/3+D/3
aux(108) =< -B+D
s(229) =< -B+D-3*F
aux(109) =< -B+E-2*F
s(228) =< -B/2+E/2-F
s(229) =< -B/2+E/2-3/2*F
s(229) =< -B/3+D/3-F
aux(110) =< -A-B+E
s(226) =< aux(110)
s(228) =< aux(106)
s(232) =< aux(106)
s(228) =< aux(108)
s(229) =< aux(108)
s(228) =< aux(109)
s(232) =< aux(109)
s(237) =< aux(108)
s(228) =< aux(107)
s(238) =< aux(107)
s(229) =< aux(107)
s(237) =< aux(107)
s(228) =< s(232)
s(238) =< s(232)
s(238) =< aux(108)

  with precondition: [F=A,C=B,E=D,F>=0,E>=C+F+1] 

* Chain [34]: 0
  with precondition: [F=A,C=B,E=D,E>=C,C+F>=E] 

* Chain [33]: 1
  with precondition: [F=A,C=B,E=D,E>=2*F+C+2,C+3*F+2>=E] 

* Chain [32]: 1
  with precondition: [F=A,C=B,E=D,E>=C+F+1,C+2*F+1>=E] 


#### Cost of chains of start0(A,B,C,D,E,F,G):
* Chain [56]: 0
  with precondition: [0>=A+1] 

* Chain [55]: 0
  with precondition: [A>=0,E>=C] 

* Chain [54]: 0
  with precondition: [A>=0,C>=E+1] 

* Chain [53]: 1*s(244)+6*s(246)+2*s(247)+2*s(248)+1*s(249)+1
  Such that:s(239) =< -4*A-C+E
s(240) =< -3*A-C+E
s(241) =< -2*A-C+E
s(242) =< -A-C+E
s(243) =< s(239)
s(244) =< s(239)
s(244) =< s(240)
s(245) =< s(240)
s(243) =< s(240)
s(245) =< s(241)
s(246) =< s(243)
s(247) =< s(243)
s(246) =< s(245)
s(248) =< s(245)
s(248) =< s(243)
s(246) =< s(242)
s(249) =< s(240)
s(249) =< s(241)

  with precondition: [A>=0,E>=5*A+C+5] 

* Chain [52]: 1*s(250)+1*s(251)+1*s(259)+2*s(260)+3*s(261)+4*s(262)+3*s(263)+1*s(264)+1*s(266)+1*s(267)+2*s(268)+1*s(269)+1*s(270)+1*s(271)+1
  Such that:s(252) =< -4*A-C+E
s(253) =< -3*A-C+E
s(254) =< -2*A-C+E
s(255) =< -A-C+E
aux(111) =< -5/2*A-C/2+E/2
aux(112) =< -5/3*A-C/3+E/3
aux(113) =< -C/2+E/2
aux(114) =< -C/3+E/3
s(250) =< aux(111)
s(251) =< aux(111)
s(256) =< aux(111)
s(250) =< aux(112)
s(251) =< aux(112)
s(257) =< aux(112)
s(250) =< aux(113)
s(251) =< aux(113)
s(256) =< aux(113)
s(250) =< aux(114)
s(251) =< aux(114)
s(257) =< aux(114)
s(258) =< s(252)
s(259) =< s(252)
s(251) =< s(256)
s(250) =< s(256)
s(251) =< s(257)
s(250) =< s(257)
s(258) =< s(253)
s(260) =< s(253)
s(261) =< s(253)
s(260) =< s(258)
s(262) =< s(253)
s(260) =< s(254)
s(263) =< s(254)
s(262) =< s(254)
s(263) =< s(253)
s(260) =< s(255)
s(262) =< s(255)
s(259) =< s(253)
s(251) =< s(253)
s(264) =< s(253)
s(265) =< s(253)
s(266) =< s(254)
s(251) =< s(254)
s(264) =< s(254)
s(265) =< s(254)
s(267) =< s(254)
s(264) =< s(265)
s(268) =< s(265)
s(251) =< s(265)
s(267) =< s(265)
s(264) =< s(258)
s(268) =< s(258)
s(251) =< s(255)
s(264) =< s(255)
s(267) =< s(255)
s(250) =< s(253)
s(269) =< s(258)
s(250) =< s(265)
s(270) =< s(265)
s(271) =< s(265)
s(270) =< s(258)
s(250) =< s(255)
s(270) =< s(255)
s(271) =< s(255)

  with precondition: [A>=0,E>=4*A+C+4] 

* Chain [51]: 1*s(272)+1*s(273)+1*s(274)+1*s(275)+1*s(276)+2*s(295)+2*s(298)+1*s(302)+2*s(303)+2*s(304)+4*s(305)+8*s(307)+2*s(308)+2*s(309)+1*s(311)+1
  Such that:aux(115) =< -4*A-C+E
aux(116) =< -3*A-C+E
aux(118) =< -2*A-C/2+E/2
aux(120) =< -5/2*A-C/2+E/2
aux(121) =< -5/3*A-C/3+E/3
aux(122) =< -4/3*A-C/3+E/3
s(276) =< -3/2*A-C/2+E/2
s(275) =< -2/3*A-C/3+E/3
aux(123) =< -C+E
aux(124) =< -C/2+E/2
aux(125) =< -C/3+E/3
aux(127) =< -2*A-C+E
aux(128) =< -A-C+E
s(305) =< aux(127)
s(307) =< aux(127)
s(307) =< aux(128)
s(277) =< aux(115)
s(281) =< aux(118)
s(272) =< aux(120)
s(273) =< aux(120)
s(291) =< aux(120)
s(272) =< aux(121)
s(284) =< aux(121)
s(274) =< aux(122)
s(275) =< aux(122)
s(293) =< aux(122)
s(277) =< aux(123)
s(272) =< aux(124)
s(273) =< aux(124)
s(281) =< aux(124)
s(291) =< aux(124)
s(272) =< aux(125)
s(274) =< aux(125)
s(275) =< aux(125)
s(284) =< aux(125)
s(293) =< aux(125)
s(295) =< s(277)
s(298) =< aux(116)
s(299) =< aux(116)
s(274) =< s(281)
s(295) =< s(281)
s(275) =< s(281)
s(273) =< s(284)
s(272) =< s(284)
s(273) =< s(291)
s(272) =< s(291)
s(275) =< s(293)
s(274) =< s(293)
s(295) =< aux(127)
s(273) =< aux(127)
s(299) =< aux(127)
s(301) =< aux(127)
s(302) =< aux(128)
s(295) =< aux(128)
s(273) =< aux(128)
s(301) =< aux(128)
s(303) =< aux(128)
s(295) =< s(299)
s(304) =< s(299)
s(273) =< s(299)
s(303) =< s(299)
s(304) =< s(277)
s(295) =< s(301)
s(303) =< s(301)
s(304) =< s(301)
s(273) =< s(301)
s(272) =< aux(116)
s(272) =< s(301)
s(272) =< s(299)
s(272) =< aux(128)
s(275) =< aux(127)
s(276) =< aux(127)
s(308) =< aux(127)
s(276) =< aux(116)
s(308) =< aux(116)
s(275) =< aux(128)
s(276) =< aux(128)
s(309) =< aux(127)
s(309) =< s(299)
s(309) =< aux(128)
s(274) =< aux(116)
s(274) =< aux(127)
s(311) =< aux(127)
s(311) =< aux(116)
s(274) =< aux(128)
s(311) =< aux(128)

  with precondition: [A>=0,E>=3*A+C+3] 

* Chain [50]: 1*s(320)+1*s(322)+1*s(323)+1*s(324)+4*s(329)+5*s(330)+2*s(332)+1*s(333)+1*s(335)+1*s(338)+2*s(343)+1
  Such that:aux(132) =< -A-C/2+E/2
s(320) =< -2/3*A-C/3+E/3
s(324) =< -A/3-C/3+E/3
aux(144) =< -3*A-C+E
aux(145) =< -2*A-C+E
aux(146) =< -2*A-C/2+E/2
aux(147) =< -A-C+E
aux(148) =< -A-C/3+E/3
aux(149) =< -4/3*A-C/3+E/3
aux(150) =< -3/2*A-C/2+E/2
aux(151) =< -C+E
aux(152) =< -C/2+E/2
aux(153) =< -C/3+E/3
s(320) =< aux(146)
s(335) =< aux(146)
s(324) =< aux(148)
s(338) =< aux(148)
s(320) =< aux(149)
s(335) =< aux(149)
s(317) =< aux(144)
s(322) =< aux(132)
s(323) =< aux(132)
s(322) =< aux(150)
s(324) =< aux(150)
s(328) =< aux(150)
s(317) =< aux(151)
s(320) =< aux(152)
s(322) =< aux(152)
s(324) =< aux(152)
s(328) =< aux(152)
s(320) =< aux(153)
s(324) =< aux(153)
s(324) =< s(317)
s(329) =< aux(147)
s(322) =< s(328)
s(324) =< s(328)
s(324) =< aux(147)
s(323) =< aux(147)
s(330) =< aux(147)
s(323) =< aux(145)
s(330) =< aux(145)
s(322) =< s(317)
s(320) =< s(317)
s(322) =< aux(147)
s(320) =< aux(147)
s(322) =< aux(145)
s(332) =< aux(145)
s(320) =< aux(145)
s(332) =< s(317)
s(332) =< aux(147)
s(333) =< aux(144)
s(333) =< aux(150)
s(338) =< aux(150)
s(333) =< aux(151)
s(333) =< aux(152)
s(335) =< aux(152)
s(338) =< aux(152)
s(335) =< aux(153)
s(338) =< aux(153)
s(338) =< s(317)
s(343) =< aux(145)
s(333) =< s(328)
s(338) =< s(328)
s(338) =< aux(147)
s(333) =< s(317)
s(335) =< s(317)
s(333) =< aux(145)
s(335) =< aux(147)
s(333) =< aux(147)
s(335) =< aux(145)

  with precondition: [A>=0,E>=2*A+C+2] 

* Chain [49]: 1*s(349)+1*s(350)+2*s(356)+2*s(358)+2*s(359)+1*s(360)+1*s(361)+1
  Such that:s(350) =< -A/2-C/2+E/2
s(349) =< -A/3-C/3+E/3
aux(161) =< -3*A-C+E
aux(162) =< -2*A-C+E
aux(163) =< -A-C+E
aux(164) =< -A-C/2+E/2
aux(165) =< -A-C/3+E/3
aux(166) =< -3/2*A-C/2+E/2
aux(167) =< -C+E
aux(168) =< -C/2+E/2
aux(169) =< -C/3+E/3
s(349) =< aux(161)
s(360) =< aux(161)
s(350) =< aux(164)
s(361) =< aux(164)
s(349) =< aux(165)
s(360) =< aux(165)
s(349) =< aux(166)
s(360) =< aux(166)
s(349) =< aux(169)
s(360) =< aux(169)
s(350) =< aux(162)
s(351) =< aux(162)
s(349) =< aux(167)
s(350) =< aux(167)
s(351) =< aux(167)
s(349) =< aux(168)
s(350) =< aux(168)
s(356) =< aux(163)
s(350) =< s(351)
s(358) =< aux(167)
s(350) =< aux(163)
s(359) =< aux(163)
s(349) =< aux(163)
s(358) =< aux(163)
s(359) =< s(351)
s(359) =< aux(167)
s(361) =< aux(162)
s(360) =< aux(167)
s(361) =< aux(167)
s(360) =< aux(168)
s(361) =< aux(168)
s(361) =< s(351)
s(361) =< aux(163)
s(360) =< aux(163)

  with precondition: [A>=0,E>=A+C+1] 

* Chain [48]: 0
  with precondition: [E>=C,A+C>=E] 

* Chain [47]: 1
  with precondition: [E>=2*A+C+2,C+3*A+2>=E] 

* Chain [46]: 1
  with precondition: [E>=A+C+1,C+2*A+1>=E] 


Closed-form bounds of start0(A,B,C,D,E,F,G): 
-------------------------------------
* Chain [56] with precondition: [0>=A+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [55] with precondition: [A>=0,E>=C] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [54] with precondition: [A>=0,C>=E+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [53] with precondition: [A>=0,E>=5*A+C+5] 
    - Upper bound: -45*A-12*C+12*E+1 
    - Complexity: n 
* Chain [52] with precondition: [A>=0,E>=4*A+C+4] 
    - Upper bound: -60*A-21*C+21*E+1+nat(-5/2*A-C/2+E/2)*2 
    - Complexity: n 
* Chain [51] with precondition: [A>=0,E>=3*A+C+3] 
    - Upper bound: -2/3*A-C/3+E/3+(-3/2*A-C/2+E/2+(-34*A-17*C+17*E+(-12*A-4*C+4*E+(-3*A-3*C+3*E+1+nat(-4*A-C+E)*2))+nat(-5/2*A-C/2+E/2)*2+nat(-4/3*A-C/3+E/3))) 
    - Complexity: n 
* Chain [50] with precondition: [A>=0,E>=2*A+C+2] 
    - Upper bound: -A/3-C/3+E/3+(-2/3*A-C/3+E/3+(-8*A-4*C+4*E+(-11*A-10*C+10*E+1+nat(-A-C/3+E/3)+nat(-3*A-C+E))+nat(-2*A-C/2+E/2))) 
    - Complexity: n 
* Chain [49] with precondition: [A>=0,E>=A+C+1] 
    - Upper bound: -A/3-C/3+E/3+(-A/2-C/2+E/2+(-4*A-6*C+6*E+1+nat(-A-C/2+E/2)+nat(-3*A-C+E))) 
    - Complexity: n 
* Chain [48] with precondition: [E>=C,A+C>=E] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [47] with precondition: [E>=2*A+C+2,C+3*A+2>=E] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [46] with precondition: [E>=A+C+1,C+2*A+1>=E] 
    - Upper bound: 1 
    - Complexity: constant 

### Maximum cost of start0(A,B,C,D,E,F,G): nat(-3*A-C+E)+max([nat(-A-C+E)*3+max([nat(-A-C/2+E/2)+nat(-A-C+E)+nat(-A/3-C/3+E/3)+max([nat(-C+E)*2+nat(-A/2-C/2+E/2),nat(-A-C+E)*5+nat(-A-C/2+E/2)+nat(-A-C/3+E/3)+nat(-2*A-C+E)*4+nat(-2*A-C/2+E/2)+nat(-2/3*A-C/3+E/3)]),nat(-3*A-C+E)*3+nat(-4*A-C+E)*2+nat(-2*A-C+E)*17+nat(-5/2*A-C/2+E/2)*2+nat(-4/3*A-C/3+E/3)+nat(-3/2*A-C/2+E/2)+nat(-2/3*A-C/3+E/3)]),nat(-3*A-C+E)*2+nat(-4*A-C+E)*2+max([nat(-4*A-C+E)*7,nat(-2*A-C+E)*5+nat(-3*A-C+E)*11+nat(-5/2*A-C/2+E/2)*2])])+1 
Asymptotic class: n 
* Total analysis performed in 1227 ms.

