WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: eval_ndecr_start

Location map:
LoAT_sink -> 0
eval_ndecr_start -> 1
eval_ndecr_bb0_in -> 2
eval_ndecr_0 -> 3
eval_ndecr_1 -> 4
eval_ndecr_2 -> 5
eval_ndecr_3 -> 6
eval_ndecr_4 -> 7
eval_ndecr_bb1_in -> 8
eval_ndecr_bb2_in -> 9
eval_ndecr_bb3_in -> 10
eval_ndecr_stop -> 11

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: -2+i1 == 0 /\ i1'=3, i3'=1+i3
   2: -3+i1 == 0 /\ i1'=4, i3'=1+i3
   3: -4+i1 == 0 /\ i1'=5, i3'=1+i3, i4'=-1+i6
   4: -5+i1 == 0 /\ i1'=6, i3'=1+i3
   5: -6+i1 == 0 /\ i1'=7, i3'=1+i3
   6: -7+i1 == 0 /\ i1'=8, i3'=1+i3, i5'=i4
   7: (-1+i5 > 0 /\ -8+i1 == 0) /\ i1'=9, i3'=1+i3
   8: (-1+i5 <= 0 /\ -8+i1 == 0) /\ i1'=10, i3'=1+i3
   9: -9+i1 == 0 /\ i1'=8, i3'=1+i3, i5'=-1+i5
  10: -10+i1 == 0 /\ i1'=11, i3'=1+i3

Dependency graph:
0 -> 1
1 -> 2
2 -> 3
3 -> 4
4 -> 5
5 -> 6
6 -> 7, 6 -> 8
7 -> 9
8 -> 10
9 -> 7, 9 -> 8

Chained Linear Paths

	Applied Chaining

	First rule:
	-1+i1 == 0 /\ i1'=2, i3'=1+i3
	Second rule:
	-2+i1 == 0 /\ i1'=3, i3'=1+i3
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 0, 1
	
	Applied Chaining

	First rule:
	-3+i1 == 0 /\ i1'=4, i3'=1+i3
	Second rule:
	-4+i1 == 0 /\ i1'=5, i3'=1+i3, i4'=-1+i6
	New rule:
	(0 == 0 /\ -3+i1 == 0) /\ i1'=5, i3'=2+i3, i4'=-1+i6
	
	Applied Deletion

	Removed the following rules: 2, 3
	
	Applied Chaining

	First rule:
	-5+i1 == 0 /\ i1'=6, i3'=1+i3
	Second rule:
	-6+i1 == 0 /\ i1'=7, i3'=1+i3
	New rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=7, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 4, 5
	
	Applied Chaining

	First rule:
	(-1+i5 > 0 /\ -8+i1 == 0) /\ i1'=9, i3'=1+i3
	Second rule:
	-9+i1 == 0 /\ i1'=8, i3'=1+i3, i5'=-1+i5
	New rule:
	(0 == 0 /\ -1+i5 > 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i5'=-1+i5
	
	Applied Deletion

	Removed the following rules: 7, 9
	
	Applied Chaining

	First rule:
	(-1+i5 <= 0 /\ -8+i1 == 0) /\ i1'=10, i3'=1+i3
	Second rule:
	-10+i1 == 0 /\ i1'=11, i3'=1+i3
	New rule:
	(0 == 0 /\ -1+i5 <= 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 8, 10
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3
	Second rule:
	(0 == 0 /\ -3+i1 == 0) /\ i1'=5, i3'=2+i3, i4'=-1+i6
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=5, i3'=4+i3, i4'=-1+i6
	
	Applied Deletion

	Removed the following rules: 11, 12
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=7, i3'=2+i3
	Second rule:
	-7+i1 == 0 /\ i1'=8, i3'=1+i3, i5'=i4
	New rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=8, i3'=3+i3, i5'=i4
	
	Applied Deletion

	Removed the following rules: 6, 13
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=5, i3'=4+i3, i4'=-1+i6
	Second rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=8, i3'=3+i3, i5'=i4
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=8, i3'=7+i3, i4'=-1+i6, i5'=-1+i6
	
	Applied Deletion

	Removed the following rules: 16, 17

Start location: eval_ndecr_start

Location map:
LoAT_sink -> 0
eval_ndecr_start -> 1
eval_ndecr_bb0_in -> 2
eval_ndecr_0 -> 3
eval_ndecr_1 -> 4
eval_ndecr_2 -> 5
eval_ndecr_3 -> 6
eval_ndecr_4 -> 7
eval_ndecr_bb1_in -> 8
eval_ndecr_bb2_in -> 9
eval_ndecr_bb3_in -> 10
eval_ndecr_stop -> 11

Rules:
  14: (0 == 0 /\ -1+i5 > 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i5'=-1+i5
  15: (0 == 0 /\ -1+i5 <= 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
  18: (0 == 0 /\ -1+i1 == 0) /\ i1'=8, i3'=7+i3, i4'=-1+i6, i5'=-1+i6

Dependency graph:
14 -> 14, 14 -> 15
18 -> 14, 18 -> 15

Preprocessed Transitions

	Simplified Guard

	Original rule:
	(0 == 0 /\ -1+i5 > 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i5'=-1+i5
	New rule:
	(-1+i5 > 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i5'=-1+i5
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -1+i5 <= 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
	New rule:
	(-1+i5 <= 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=8, i3'=7+i3, i4'=-1+i6, i5'=-1+i6
	New rule:
	-1+i1 == 0 /\ i1'=8, i3'=7+i3, i4'=-1+i6, i5'=-1+i6

Start location: eval_ndecr_start

Location map:
LoAT_sink -> 0
eval_ndecr_start -> 1
eval_ndecr_bb0_in -> 2
eval_ndecr_0 -> 3
eval_ndecr_1 -> 4
eval_ndecr_2 -> 5
eval_ndecr_3 -> 6
eval_ndecr_4 -> 7
eval_ndecr_bb1_in -> 8
eval_ndecr_bb2_in -> 9
eval_ndecr_bb3_in -> 10
eval_ndecr_stop -> 11

Rules:
  19: (-1+i5 > 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i5'=-1+i5
  20: (-1+i5 <= 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
  21: -1+i1 == 0 /\ i1'=8, i3'=7+i3, i4'=-1+i6, i5'=-1+i6

Dependency graph:
19 -> 19, 19 -> 20
21 -> 19, 21 -> 20

Step with 21

	Trace

	21[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 20

	Trace

	21[(-1+i1 == 0)]
	20[(-1+i5 <= 0 /\ -8+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	21[(-1+i1 == 0)]
	
	Blocked

	{}
	{20[T]}
	
Step with 19

	Trace

	21[(-1+i1 == 0)]
	19[(-1+i5 > 0 /\ -8+i1 == 0)]
	
	Blocked

	{}
	{20[T]}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-1+i5 > 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i5'=-1+i5
	New rule:
	(-1+it16 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0 /\ -it16+i5 > 0) /\ i1'=i1, i3'=2*it16+i3, i5'=-it16+i5

		-1+i5 > 0 [0]: montonic decrease yields -it16+i5 > 0
		
		8-i1 >= 0 [0]: unchanged
		
		-8+i1 >= 0 [0]: unchanged
		
		Replacement map: {-1+i5 > 0 -> -it16+i5 > 0, 8-i1 >= 0 -> 8-i1 >= 0, -8+i1 >= 0 -> -8+i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+it16 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0 /\ -it16+i5 > 0) /\ i1'=i1, i3'=2*it16+i3, i5'=-it16+i5
	New rule:
	(-1+it16 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0 /\ -it16+i5 > 0) /\ i3'=2*it16+i3, i5'=-it16+i5
	
	Instantiation

	Original rule:
	(-1+it16 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0 /\ -it16+i5 > 0) /\ i3'=2*it16+i3, i5'=-it16+i5
	New rule:
	(1 > 0 /\ -2+i5 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i3'=-2+i3+2*i5, i5'=1

Start location: eval_ndecr_start

Location map:
LoAT_sink -> 0
eval_ndecr_start -> 1
eval_ndecr_bb0_in -> 2
eval_ndecr_0 -> 3
eval_ndecr_1 -> 4
eval_ndecr_2 -> 5
eval_ndecr_3 -> 6
eval_ndecr_4 -> 7
eval_ndecr_bb1_in -> 8
eval_ndecr_bb2_in -> 9
eval_ndecr_bb3_in -> 10
eval_ndecr_stop -> 11

Rules:
  19: (-1+i5 > 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i5'=-1+i5
  20: (-1+i5 <= 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
  21: -1+i1 == 0 /\ i1'=8, i3'=7+i3, i4'=-1+i6, i5'=-1+i6
  22: (1 > 0 /\ -2+i5 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i3'=-2+i3+2*i5, i5'=1

Dependency graph:
19 -> 19, 19 -> 20, 19 -> 22
21 -> 19, 21 -> 20, 21 -> 22
22 -> 19, 22 -> 20

	Trace

	21[(-1+i1 == 0)]
	22[(1 > 0 /\ -2+i5 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0)]
	
	Blocked

	{}
	{20[T]}
	{19[T], 22[T]}
	
Step with 20

	Trace

	21[(-1+i1 == 0)]
	22[(1 > 0 /\ -2+i5 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0)]
	20[(-1+i5 <= 0 /\ -8+i1 == 0)]
	
	Blocked

	{}
	{20[T]}
	{19[T], 22[T]}
	{}
	
Backtrack

	Trace

	21[(-1+i1 == 0)]
	22[(1 > 0 /\ -2+i5 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0)]
	
	Blocked

	{}
	{20[T]}
	{19[T], 20[T], 22[T]}
	
Backtrack

	Trace

	21[(-1+i1 == 0)]
	
	Blocked

	{}
	{20[T], 22[T]}
	
Step with 19

	Trace

	21[(-1+i1 == 0)]
	19[(-1+i5 > 0 /\ -8+i1 == 0)]
	
	Blocked

	{}
	{20[T], 22[T]}
	{}
	
Covered

	Trace

	21[(-1+i1 == 0)]
	
	Blocked

	{}
	{19[T], 20[T], 22[T]}
	
Backtrack

	Trace

	Blocked

	{21[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l10, l2, l3, l4, l5, l6, l7, l8, l9
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l2(X₀, X₁, X₂)
  t₃: l1(X₀, X₁, X₂) → l4(X₂-1, X₁, X₂)
  t₁: l2(X₀, X₁, X₂) → l3(X₀, X₁, X₂)
  t₂: l3(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₄: l4(X₀, X₁, X₂) → l5(X₀, X₁, X₂)
  t₅: l5(X₀, X₁, X₂) → l6(X₀, X₁, X₂)
  t₆: l6(X₀, X₁, X₂) → l7(X₀, X₀, X₂)
  t₇: l7(X₀, X₁, X₂) → l8(X₀, X₁, X₂) :|: 2 ≤ X₁
  t₈: l7(X₀, X₁, X₂) → l9(X₀, X₁, X₂) :|: X₁ ≤ 1
  t₉: l8(X₀, X₁, X₂) → l7(X₀, X₁-1, X₂)
  t₁₀: l9(X₀, X₁, X₂) → l10(X₀, X₁, X₂)


Preprocessing
  Found invariant X₂ ≤ 1+X₀ ∧ 1+X₀ ≤ X₂ for location l6


  Found invariant X₂ ≤ 1+X₀ ∧ 1+X₁ ≤ X₂ ∧ 1+X₀ ≤ X₂ ∧ X₁ ≤ X₀ for location l7


  Found invariant X₂ ≤ 1+X₀ ∧ 1+X₀ ≤ X₂ for location l5


  Found invariant X₂ ≤ 1+X₀ ∧ 3 ≤ X₂ ∧ 5 ≤ X₁+X₂ ∧ 1+X₁ ≤ X₂ ∧ 5 ≤ X₀+X₂ ∧ 1+X₀ ≤ X₂ ∧ X₁ ≤ X₀ ∧ 2 ≤ X₁ ∧ 4 ≤ X₀+X₁ ∧ 2 ≤ X₀ for location l8


  Found invariant X₂ ≤ 1+X₀ ∧ 1+X₁ ≤ X₂ ∧ 1+X₀ ≤ X₂ ∧ X₁ ≤ 1 ∧ X₁ ≤ X₀ for location l10


  Found invariant X₂ ≤ 1+X₀ ∧ 1+X₀ ≤ X₂ for location l4


  Found invariant X₂ ≤ 1+X₀ ∧ 1+X₁ ≤ X₂ ∧ 1+X₀ ≤ X₂ ∧ X₁ ≤ 1 ∧ X₁ ≤ X₀ for location l9


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l10, l2, l3, l4, l5, l6, l7, l8, l9
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l2(X₀, X₁, X₂)
  t₃: l1(X₀, X₁, X₂) → l4(X₂-1, X₁, X₂)
  t₁: l2(X₀, X₁, X₂) → l3(X₀, X₁, X₂)
  t₂: l3(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₄: l4(X₀, X₁, X₂) → l5(X₀, X₁, X₂) :|: X₂ ≤ 1+X₀ ∧ 1+X₀ ≤ X₂
  t₅: l5(X₀, X₁, X₂) → l6(X₀, X₁, X₂) :|: X₂ ≤ 1+X₀ ∧ 1+X₀ ≤ X₂
  t₆: l6(X₀, X₁, X₂) → l7(X₀, X₀, X₂) :|: X₂ ≤ 1+X₀ ∧ 1+X₀ ≤ X₂
  t₇: l7(X₀, X₁, X₂) → l8(X₀, X₁, X₂) :|: 2 ≤ X₁ ∧ X₂ ≤ 1+X₀ ∧ 1+X₀ ≤ X₂ ∧ 1+X₁ ≤ X₂ ∧ X₁ ≤ X₀
  t₈: l7(X₀, X₁, X₂) → l9(X₀, X₁, X₂) :|: X₁ ≤ 1 ∧ X₂ ≤ 1+X₀ ∧ 1+X₀ ≤ X₂ ∧ 1+X₁ ≤ X₂ ∧ X₁ ≤ X₀
  t₉: l8(X₀, X₁, X₂) → l7(X₀, X₁-1, X₂) :|: X₂ ≤ 1+X₀ ∧ 1+X₀ ≤ X₂ ∧ 1+X₁ ≤ X₂ ∧ 2 ≤ X₀ ∧ 2 ≤ X₁ ∧ 3 ≤ X₂ ∧ 4 ≤ X₀+X₁ ∧ 5 ≤ X₀+X₂ ∧ 5 ≤ X₁+X₂ ∧ X₁ ≤ X₀
  t₁₀: l9(X₀, X₁, X₂) → l10(X₀, X₁, X₂) :|: X₂ ≤ 1+X₀ ∧ X₁ ≤ 1 ∧ 1+X₀ ≤ X₂ ∧ 1+X₁ ≤ X₂ ∧ X₁ ≤ X₀


MPRF for transition t₇: l7(X₀, X₁, X₂) → l8(X₀, X₁, X₂) :|: 2 ≤ X₁ ∧ X₂ ≤ 1+X₀ ∧ 1+X₀ ≤ X₂ ∧ 1+X₁ ≤ X₂ ∧ X₁ ≤ X₀ of depth 1:
  new bound:
    X₂+2 {O(n)}

  MPRF:
    • l7: [X₁-1]
    • l8: [X₁-2]




MPRF for transition t₉: l8(X₀, X₁, X₂) → l7(X₀, X₁-1, X₂) :|: X₂ ≤ 1+X₀ ∧ 1+X₀ ≤ X₂ ∧ 1+X₁ ≤ X₂ ∧ 2 ≤ X₀ ∧ 2 ≤ X₁ ∧ 3 ≤ X₂ ∧ 4 ≤ X₀+X₁ ∧ 5 ≤ X₀+X₂ ∧ 5 ≤ X₁+X₂ ∧ X₁ ≤ X₀ of depth 1:
  new bound:
    X₂+2 {O(n)}

  MPRF:
    • l7: [X₁-1]
    • l8: [X₁-1]




All Bounds
Timebounds
  Overall timebound:2⋅X₂+13 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: 1 {O(1)}
    t₇: X₂+2 {O(n)}
    t₈: 1 {O(1)}
    t₉: X₂+2 {O(n)}
    t₁₀: 1 {O(1)}


Costbounds
  Overall costbound: 2⋅X₂+13 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: 1 {O(1)}
    t₇: X₂+2 {O(n)}
    t₈: 1 {O(1)}
    t₉: X₂+2 {O(n)}
    t₁₀: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₀, X₂: X₂ {O(n)}
    t₁, X₀: X₀ {O(n)}
    t₁, X₁: X₁ {O(n)}
    t₁, X₂: X₂ {O(n)}
    t₂, X₀: X₀ {O(n)}
    t₂, X₁: X₁ {O(n)}
    t₂, X₂: X₂ {O(n)}
    t₃, X₀: X₂+1 {O(n)}
    t₃, X₁: X₁ {O(n)}
    t₃, X₂: X₂ {O(n)}
    t₄, X₀: X₂+1 {O(n)}
    t₄, X₁: X₁ {O(n)}
    t₄, X₂: X₂ {O(n)}
    t₅, X₀: X₂+1 {O(n)}
    t₅, X₁: X₁ {O(n)}
    t₅, X₂: X₂ {O(n)}
    t₆, X₀: X₂+1 {O(n)}
    t₆, X₁: X₂+1 {O(n)}
    t₆, X₂: X₂ {O(n)}
    t₇, X₀: X₂+1 {O(n)}
    t₇, X₁: X₂+1 {O(n)}
    t₇, X₂: X₂ {O(n)}
    t₈, X₀: 2⋅X₂+2 {O(n)}
    t₈, X₁: 2⋅X₂+2 {O(n)}
    t₈, X₂: 2⋅X₂ {O(n)}
    t₉, X₀: X₂+1 {O(n)}
    t₉, X₁: X₂+1 {O(n)}
    t₉, X₂: X₂ {O(n)}
    t₁₀, X₀: 2⋅X₂+2 {O(n)}
    t₁₀, X₁: 2⋅X₂+2 {O(n)}
    t₁₀, X₂: 2⋅X₂ {O(n)}

