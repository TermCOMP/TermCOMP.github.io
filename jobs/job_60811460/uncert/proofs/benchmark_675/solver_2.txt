WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_xnu_15/9,eval_xnu_16/9,eval_xnu_bb3_in/9,eval_xnu_bb4_in/9]
1. recursive  : [eval_xnu_10/20,eval_xnu_11/20,eval_xnu_12/20,eval_xnu_13/20,eval_xnu_bb1_in/20,eval_xnu_bb2_in/20,eval_xnu_bb3_in_loop_cont/21]
2. non_recursive  : [eval_xnu_stop/11]
3. non_recursive  : [eval_xnu_bb5_in/11]
4. non_recursive  : [exit_location/1]
5. non_recursive  : [eval_xnu_bb1_in_loop_cont/12]
6. non_recursive  : [eval_xnu_8/11]
7. non_recursive  : [eval_xnu_7/11]
8. non_recursive  : [eval_xnu_6/11]
9. non_recursive  : [eval_xnu_5/11]
10. non_recursive  : [eval_xnu_4/11]
11. non_recursive  : [eval_xnu_3/11]
12. non_recursive  : [eval_xnu_2/11]
13. non_recursive  : [eval_xnu_1/11]
14. non_recursive  : [eval_xnu_0/11]
15. non_recursive  : [eval_xnu_bb0_in/11]
16. non_recursive  : [eval_xnu_start/11]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_xnu_bb3_in/9
1. SCC is partially evaluated into eval_xnu_bb1_in/20
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_xnu_bb1_in_loop_cont/12
6. SCC is partially evaluated into eval_xnu_8/11
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is partially evaluated into eval_xnu_start/11

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_xnu_bb3_in/9 
* CE 15 is refined into CE [16] 
* CE 14 is refined into CE [17] 
* CE 13 is refined into CE [18] 


### Cost equations --> "Loop" of eval_xnu_bb3_in/9 
* CEs [18] --> Loop 15 
* CEs [16] --> Loop 16 
* CEs [17] --> Loop 17 

### Ranking functions of CR eval_xnu_bb3_in(V__end_0,V_7,V_beg_0,V_end_0,V_i_0,V_k_0,B,C,D) 
* RF of phase [15]: [V__end_0-V_k_0,V_i_0-V_k_0+1]

#### Partial ranking functions of CR eval_xnu_bb3_in(V__end_0,V_7,V_beg_0,V_end_0,V_i_0,V_k_0,B,C,D) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    V__end_0-V_k_0
    V_i_0-V_k_0+1


### Specialization of cost equations eval_xnu_bb1_in/20 
* CE 9 is refined into CE [19] 
* CE 7 is refined into CE [20,21] 
* CE 8 is refined into CE [22,23] 
* CE 10 is refined into CE [24] 
* CE 6 is refined into CE [25,26] 
* CE 4 is refined into CE [27] 
* CE 5 is refined into CE [28] 
* CE 3 is refined into CE [29] 


### Cost equations --> "Loop" of eval_xnu_bb1_in/20 
* CEs [26] --> Loop 18 
* CEs [27] --> Loop 19 
* CEs [28] --> Loop 20 
* CEs [29] --> Loop 21 
* CEs [25] --> Loop 22 
* CEs [19] --> Loop 23 
* CEs [23] --> Loop 24 
* CEs [20,21,22] --> Loop 25 
* CEs [24] --> Loop 26 

### Ranking functions of CR eval_xnu_bb1_in(V__end_0,V_1,V_2,V_4,V_7,V_beg_0,V_end_0,V_i_0,V_k_0,V_len,B,C,D,E,F,G,H,I,J,K) 
* RF of phase [18,19,20,21,22]: [-V_i_0+V_len]

#### Partial ranking functions of CR eval_xnu_bb1_in(V__end_0,V_1,V_2,V_4,V_7,V_beg_0,V_end_0,V_i_0,V_k_0,V_len,B,C,D,E,F,G,H,I,J,K) 
* Partial RF of phase [18,19,20,21,22]:
  - RF of loop [18:1]:
    -V_beg_0+V_end_0 depends on loops [21:1] 
    -V_beg_0+V_i_0 depends on loops [19:1,21:1] 
    -V_beg_0/2+V_len/2-1/2
  - RF of loop [18:1,19:1,20:1,21:1,22:1]:
    -V_i_0+V_len
  - RF of loop [18:1,20:1,21:1,22:1]:
    -V_end_0+V_len
  - RF of loop [20:1,22:1]:
    -V_beg_0+V_len


### Specialization of cost equations eval_xnu_bb1_in_loop_cont/12 
* CE 11 is refined into CE [30] 
* CE 12 is refined into CE [31] 


### Cost equations --> "Loop" of eval_xnu_bb1_in_loop_cont/12 
* CEs [30] --> Loop 27 
* CEs [31] --> Loop 28 

### Ranking functions of CR eval_xnu_bb1_in_loop_cont(A,B,C,D,E,F,G,H,I,J,K,L) 

#### Partial ranking functions of CR eval_xnu_bb1_in_loop_cont(A,B,C,D,E,F,G,H,I,J,K,L) 


### Specialization of cost equations eval_xnu_8/11 
* CE 2 is refined into CE [32,33,34,35,36] 


### Cost equations --> "Loop" of eval_xnu_8/11 
* CEs [34] --> Loop 29 
* CEs [33,36] --> Loop 30 
* CEs [35] --> Loop 31 
* CEs [32] --> Loop 32 

### Ranking functions of CR eval_xnu_8(V__end_0,V_1,V_2,V_4,V_7,V_beg_0,V_end_0,V_i_0,V_k_0,V_len,B) 

#### Partial ranking functions of CR eval_xnu_8(V__end_0,V_1,V_2,V_4,V_7,V_beg_0,V_end_0,V_i_0,V_k_0,V_len,B) 


### Specialization of cost equations eval_xnu_start/11 
* CE 1 is refined into CE [37,38,39,40] 


### Cost equations --> "Loop" of eval_xnu_start/11 
* CEs [40] --> Loop 33 
* CEs [39] --> Loop 34 
* CEs [38] --> Loop 35 
* CEs [37] --> Loop 36 

### Ranking functions of CR eval_xnu_start(V__end_0,V_1,V_2,V_4,V_7,V_beg_0,V_end_0,V_i_0,V_k_0,V_len,B) 

#### Partial ranking functions of CR eval_xnu_start(V__end_0,V_1,V_2,V_4,V_7,V_beg_0,V_end_0,V_i_0,V_k_0,V_len,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_xnu_bb3_in(V__end_0,V_7,V_beg_0,V_end_0,V_i_0,V_k_0,B,C,D):
* Chain [[15],17]: 1*it(15)+0
  Such that:it(15) =< -V_k_0+C

  with precondition: [B=2,V__end_0=C,V__end_0=D,V_beg_0>=0,V_i_0+1>=V__end_0,V_end_0>=V_beg_0,V_k_0>=V_beg_0,V__end_0>=V_end_0,V_i_0>=V_end_0,V__end_0>=V_k_0+1] 

* Chain [[15],16]: 1*it(15)+0
  Such that:it(15) =< V__end_0-V_k_0

  with precondition: [B=3,V_beg_0>=0,V_i_0+1>=V__end_0,V_end_0>=V_beg_0,V_k_0>=V_beg_0,V__end_0>=V_end_0,V_i_0>=V_end_0,V__end_0>=V_k_0+1] 

* Chain [17]: 0
  with precondition: [B=2,V_k_0=V__end_0,C=V_7,V_k_0=D,V_beg_0>=0,V_end_0>=V_beg_0,V_i_0>=V_end_0,V_k_0>=V_end_0,V_i_0+1>=V_k_0] 

* Chain [16]: 0
  with precondition: [B=3,V_beg_0>=0,V_i_0+1>=V__end_0,V_end_0>=V_beg_0,V_k_0>=V_beg_0,V__end_0>=V_end_0,V_i_0>=V_end_0,V__end_0>=V_k_0] 


#### Cost of chains of eval_xnu_bb1_in(V__end_0,V_1,V_2,V_4,V_7,V_beg_0,V_end_0,V_i_0,V_k_0,V_len,B,C,D,E,F,G,H,I,J,K):
* Chain [[18,19,20,21,22],26]: 1*it(18)+1*it(19)+2*it(20)+1*it(21)+1*s(5)+1*s(6)+0
  Such that:it(18) =< -V_beg_0/2+V_len/2
aux(15) =< V_end_0
aux(6) =< V_i_0
aux(22) =< V_len
aux(23) =< -V_beg_0+V_end_0
aux(24) =< -V_beg_0+V_i_0
aux(25) =< -V_beg_0+V_len
aux(26) =< -V_end_0+V_len
aux(27) =< -V_i_0+V_len
aux(15) =< aux(23)
aux(6) =< aux(24)
aux(9) =< aux(25)
it(20) =< aux(25)
s(6) =< aux(25)
it(18) =< aux(26)
it(20) =< aux(26)
it(21) =< aux(26)
it(18) =< aux(27)
it(19) =< aux(27)
it(20) =< aux(27)
it(21) =< aux(27)
aux(9) =< aux(22)
aux(12) =< aux(22)
aux(11) =< it(21)*aux(22)
aux(1) =< it(21)*aux(22)
it(18) =< it(21)+it(19)+aux(6)
it(18) =< it(21)+it(19)+aux(24)
aux(13) =< it(21)*aux(12)
aux(1) =< it(21)*aux(12)
aux(4) =< aux(11)
aux(4) =< aux(13)
s(5) =< aux(1)+aux(23)
it(18) =< aux(1)+aux(23)
s(5) =< aux(4)+aux(15)
it(18) =< aux(4)+aux(15)
s(5) =< it(18)*aux(9)

  with precondition: [B=3,V_beg_0>=0,V_end_0>=V_beg_0,V_i_0>=V_end_0,V_len>=V_i_0+1] 

* Chain [[18,19,20,21,22],25]: 1*it(18)+1*it(19)+2*it(20)+1*it(21)+1*s(5)+2*s(6)+0
  Such that:it(18) =< -V_beg_0/2+V_len/2
aux(15) =< V_end_0
aux(6) =< V_i_0
aux(22) =< V_len
aux(28) =< -V_beg_0+V_end_0
aux(29) =< -V_beg_0+V_i_0
aux(30) =< -V_beg_0+V_len
aux(31) =< -V_end_0+V_len
aux(32) =< -V_i_0+V_len
aux(15) =< aux(28)
aux(6) =< aux(29)
it(18) =< aux(30)
s(6) =< aux(30)
aux(9) =< aux(30)
it(20) =< aux(30)
it(18) =< aux(31)
it(20) =< aux(31)
it(21) =< aux(31)
it(18) =< aux(32)
it(19) =< aux(32)
it(20) =< aux(32)
it(21) =< aux(32)
aux(9) =< aux(22)
aux(12) =< aux(22)
aux(11) =< it(21)*aux(22)
aux(1) =< it(21)*aux(22)
it(18) =< it(21)+it(19)+aux(6)
it(18) =< it(21)+it(19)+aux(29)
aux(13) =< it(21)*aux(12)
aux(1) =< it(21)*aux(12)
aux(4) =< aux(11)
aux(4) =< aux(13)
s(5) =< aux(1)+aux(28)
it(18) =< aux(1)+aux(28)
s(5) =< aux(4)+aux(15)
it(18) =< aux(4)+aux(15)
s(5) =< it(18)*aux(9)

  with precondition: [B=3,V_beg_0>=0,V_end_0>=V_beg_0,V_i_0>=V_end_0,V_len>=V_i_0+2] 

* Chain [[18,19,20,21,22],24]: 1*it(18)+1*it(19)+2*it(20)+1*it(21)+1*s(5)+2*s(6)+0
  Such that:it(18) =< -V_beg_0/2+V_len/2
aux(15) =< V_end_0
aux(6) =< V_i_0
aux(22) =< V_len
aux(33) =< -V_beg_0+V_end_0
aux(34) =< -V_beg_0+V_i_0
aux(35) =< -V_beg_0+V_len
aux(36) =< -V_end_0+V_len
aux(37) =< -V_i_0+V_len
aux(15) =< aux(33)
aux(6) =< aux(34)
it(18) =< aux(35)
s(6) =< aux(35)
aux(9) =< aux(35)
it(20) =< aux(35)
it(18) =< aux(36)
it(20) =< aux(36)
it(21) =< aux(36)
it(18) =< aux(37)
it(19) =< aux(37)
it(20) =< aux(37)
it(21) =< aux(37)
aux(9) =< aux(22)
aux(12) =< aux(22)
aux(11) =< it(21)*aux(22)
aux(1) =< it(21)*aux(22)
it(18) =< it(21)+it(19)+aux(6)
it(18) =< it(21)+it(19)+aux(34)
aux(13) =< it(21)*aux(12)
aux(1) =< it(21)*aux(12)
aux(4) =< aux(11)
aux(4) =< aux(13)
s(5) =< aux(1)+aux(33)
it(18) =< aux(1)+aux(33)
s(5) =< aux(4)+aux(15)
it(18) =< aux(4)+aux(15)
s(5) =< it(18)*aux(9)

  with precondition: [B=3,V_beg_0>=0,V_end_0>=V_beg_0,V_i_0>=V_end_0,V_len>=V_i_0+2] 

* Chain [[18,19,20,21,22],23]: 1*it(18)+1*it(19)+2*it(20)+1*it(21)+1*s(5)+1*s(6)+0
  Such that:aux(14) =< -V_beg_0+V_end_0
aux(15) =< -V_beg_0+V_end_0+H-I
aux(3) =< -V_beg_0+V_i_0
aux(6) =< -V_beg_0+V_i_0+H-J
aux(17) =< -V_beg_0+H
aux(16) =< -V_beg_0+J
it(18) =< -V_beg_0/2+H/2
aux(19) =< -V_end_0+I
aux(18) =< -V_end_0+J
aux(15) =< V_end_0+H-I
aux(6) =< V_i_0-V_len+H
aux(22) =< J
aux(38) =< -V_i_0+J
aux(9) =< aux(16)
it(20) =< aux(16)
s(6) =< aux(16)
it(20) =< aux(17)
s(6) =< aux(17)
it(18) =< aux(18)
it(20) =< aux(18)
it(21) =< aux(18)
it(18) =< aux(19)
it(20) =< aux(19)
it(21) =< aux(19)
it(18) =< aux(38)
it(19) =< aux(38)
it(20) =< aux(38)
it(21) =< aux(38)
aux(9) =< aux(22)
aux(12) =< aux(22)
aux(11) =< it(21)*aux(22)
aux(1) =< it(21)*aux(22)
it(18) =< it(21)+it(19)+aux(6)
it(18) =< it(21)+it(19)+aux(3)
aux(13) =< it(21)*aux(12)
aux(1) =< it(21)*aux(12)
aux(4) =< aux(11)
aux(4) =< aux(13)
s(5) =< aux(1)+aux(14)
it(18) =< aux(1)+aux(14)
s(5) =< aux(4)+aux(15)
it(18) =< aux(4)+aux(15)
s(5) =< it(18)*aux(9)

  with precondition: [B=4,V_len=D,V_len=J,V_beg_0>=0,V_end_0>=V_beg_0,V_i_0>=V_end_0,C>=V_end_0,V_len>=V_i_0+1,I>=C,I>=H,V_len>=I,C+H>=V_beg_0+I] 

* Chain [26]: 0
  with precondition: [B=3,V_beg_0>=0,V_end_0>=V_beg_0,V_i_0>=V_end_0] 

* Chain [25]: 1*s(7)+0
  Such that:s(7) =< -V_beg_0+V_i_0+1

  with precondition: [B=3,V_beg_0>=0,V_end_0>=V_beg_0,V_i_0>=V_end_0,V_len>=V_i_0+1] 

* Chain [23]: 0
  with precondition: [B=4,C=V__end_0,D=V_1,E=V_2,F=V_4,G=V_7,K=V_k_0,V_beg_0=H,V_end_0=I,V_i_0=J,V_beg_0>=0,V_end_0>=V_beg_0,V_i_0>=V_end_0,V_i_0>=V_len] 


#### Cost of chains of eval_xnu_bb1_in_loop_cont(A,B,C,D,E,F,G,H,I,J,K,L):
* Chain [28]: 0
  with precondition: [A=3] 

* Chain [27]: 0
  with precondition: [A=4] 


#### Cost of chains of eval_xnu_8(V__end_0,V_1,V_2,V_4,V_7,V_beg_0,V_end_0,V_i_0,V_k_0,V_len,B):
* Chain [32]: 0
  with precondition: [] 

* Chain [31]: 0
  with precondition: [0>=V_len] 

* Chain [30]: 1*s(72)+2*s(74)+10*s(81)+2*s(90)+0
  Such that:s(72) =< 1
aux(52) =< V_len
aux(53) =< V_len/2
s(74) =< aux(53)
s(81) =< aux(52)
s(74) =< aux(52)
s(85) =< aux(52)
s(86) =< s(81)*aux(52)
s(87) =< s(81)*aux(52)
s(74) =< s(81)+s(81)
s(88) =< s(81)*s(85)
s(87) =< s(81)*s(85)
s(89) =< s(86)
s(89) =< s(88)
s(90) =< s(87)
s(74) =< s(87)
s(90) =< s(89)
s(74) =< s(89)
s(90) =< s(74)*aux(52)

  with precondition: [V_len>=1] 

* Chain [29]: 2*s(122)+12*s(125)+2*s(135)+0
  Such that:s(116) =< V_len/2
aux(55) =< V_len
s(122) =< s(116)
s(122) =< aux(55)
s(125) =< aux(55)
s(130) =< aux(55)
s(131) =< s(125)*aux(55)
s(132) =< s(125)*aux(55)
s(122) =< s(125)+s(125)
s(133) =< s(125)*s(130)
s(132) =< s(125)*s(130)
s(134) =< s(131)
s(134) =< s(133)
s(135) =< s(132)
s(122) =< s(132)
s(135) =< s(134)
s(122) =< s(134)
s(135) =< s(122)*aux(55)

  with precondition: [V_len>=2] 


#### Cost of chains of eval_xnu_start(V__end_0,V_1,V_2,V_4,V_7,V_beg_0,V_end_0,V_i_0,V_k_0,V_len,B):
* Chain [36]: 0
  with precondition: [] 

* Chain [35]: 0
  with precondition: [0>=V_len] 

* Chain [34]: 1*s(136)+2*s(139)+10*s(140)+2*s(146)+0
  Such that:s(136) =< 1
s(137) =< V_len
s(138) =< V_len/2
s(139) =< s(138)
s(140) =< s(137)
s(139) =< s(137)
s(141) =< s(137)
s(142) =< s(140)*s(137)
s(143) =< s(140)*s(137)
s(139) =< s(140)+s(140)
s(144) =< s(140)*s(141)
s(143) =< s(140)*s(141)
s(145) =< s(142)
s(145) =< s(144)
s(146) =< s(143)
s(139) =< s(143)
s(146) =< s(145)
s(139) =< s(145)
s(146) =< s(139)*s(137)

  with precondition: [V_len>=1] 

* Chain [33]: 2*s(149)+12*s(150)+2*s(156)+0
  Such that:s(148) =< V_len
s(147) =< V_len/2
s(149) =< s(147)
s(149) =< s(148)
s(150) =< s(148)
s(151) =< s(148)
s(152) =< s(150)*s(148)
s(153) =< s(150)*s(148)
s(149) =< s(150)+s(150)
s(154) =< s(150)*s(151)
s(153) =< s(150)*s(151)
s(155) =< s(152)
s(155) =< s(154)
s(156) =< s(153)
s(149) =< s(153)
s(156) =< s(155)
s(149) =< s(155)
s(156) =< s(149)*s(148)

  with precondition: [V_len>=2] 


Closed-form bounds of eval_xnu_start(V__end_0,V_1,V_2,V_4,V_7,V_beg_0,V_end_0,V_i_0,V_k_0,V_len,B): 
-------------------------------------
* Chain [36] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [35] with precondition: [0>=V_len] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [34] with precondition: [V_len>=1] 
    - Upper bound: 10*V_len+1+2*V_len*V_len+V_len 
    - Complexity: n^2 
* Chain [33] with precondition: [V_len>=2] 
    - Upper bound: 2*V_len*V_len+12*V_len+V_len 
    - Complexity: n^2 

### Maximum cost of eval_xnu_start(V__end_0,V_1,V_2,V_4,V_7,V_beg_0,V_end_0,V_i_0,V_k_0,V_len,B): nat(V_len)*2*nat(V_len)+nat(V_len)*10+nat(V_len/2)*2+max([1,nat(V_len)*2]) 
Asymptotic class: n^2 
* Total analysis performed in 554 ms.

