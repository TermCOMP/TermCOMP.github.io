WORST_CASE(?,O(n^1))

# LoAT Proof:
Initial ITS

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-1-2*it2+i4 == 0 /\ -2+i1 == 0 /\ 2*it2 >= 0) /\ i1'=2, i3'=1+i3, i4'=2*it2
   1: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 0
1 -> 0

Refined Dependency Graph

	Removed the following edges: 0 -> 0

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-1-2*it2+i4 == 0 /\ -2+i1 == 0 /\ 2*it2 >= 0) /\ i1'=2, i3'=1+i3, i4'=2*it2
   1: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
1 -> 0

Step with 1

	Trace

	1[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 0

	Trace

	1[(-1+i1 == 0)]
	0[(-1-2*it2+i4 == 0 /\ -2+i1 == 0 /\ 2*it2 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	1[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T]}
	
Backtrack

	Trace

	Blocked

	{1[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  B
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₁: l0(X₀) → l1(X₀)
  t₀: l1(X₀) → l1(2⋅B) :|: X₀ ≤ 1+2⋅B ∧ 1+2⋅B ≤ X₀ ∧ 0 ≤ B


Preprocessing
Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  B
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₁: l0(X₀) → l1(X₀)
  t₀: l1(X₀) → l1(2⋅B) :|: X₀ ≤ 1+2⋅B ∧ 1+2⋅B ≤ X₀ ∧ 0 ≤ B


MPRF for transition t₀: l1(X₀) → l1(2⋅B) :|: X₀ ≤ 1+2⋅B ∧ 1+2⋅B ≤ X₀ ∧ 0 ≤ B of depth 1:
  new bound:
    X₀ {O(n)}

  MPRF:
    • l1: [X₀]




All Bounds
Timebounds
  Overall timebound:X₀+1 {O(n)}
    t₀: X₀ {O(n)}
    t₁: 1 {O(1)}


Costbounds
  Overall costbound: X₀+1 {O(n)}
    t₀: X₀ {O(n)}
    t₁: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₁, X₀: X₀ {O(n)}

