WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_rsd_13/8,eval_rsd_14/8,eval_rsd_bb2_in/8,eval_rsd_bb3_in/8]
1. non_recursive  : [eval_rsd_stop/7]
2. non_recursive  : [eval_rsd_bb4_in/7]
3. non_recursive  : [exit_location/1]
4. non_recursive  : [eval_rsd_bb2_in_loop_cont/8]
5. non_recursive  : [eval_rsd_12/7]
6. non_recursive  : [eval_rsd_11/7]
7. non_recursive  : [eval_rsd_10/7]
8. non_recursive  : [eval_rsd_9/7]
9. non_recursive  : [eval_rsd_8/7]
10. non_recursive  : [eval_rsd_7/7]
11. non_recursive  : [eval_rsd_6/7]
12. non_recursive  : [eval_rsd_5/7]
13. non_recursive  : [eval_rsd_4/7]
14. non_recursive  : [eval_rsd_bb1_in/7]
15. non_recursive  : [eval_rsd_2/7]
16. non_recursive  : [eval_rsd_1/7]
17. non_recursive  : [eval_rsd_0/7]
18. non_recursive  : [eval_rsd_bb0_in/7]
19. non_recursive  : [eval_rsd_start/7]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_rsd_bb2_in/8
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_rsd_bb2_in_loop_cont/8
5. SCC is partially evaluated into eval_rsd_12/7
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is partially evaluated into eval_rsd_2/7
16. SCC is completely evaluated into other SCCs
17. SCC is completely evaluated into other SCCs
18. SCC is completely evaluated into other SCCs
19. SCC is partially evaluated into eval_rsd_start/7

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_rsd_bb2_in/8 
* CE 8 is refined into CE [11] 
* CE 7 is refined into CE [12] 
* CE 5 is refined into CE [13] 
* CE 6 is refined into CE [14] 


### Cost equations --> "Loop" of eval_rsd_bb2_in/8 
* CEs [13] --> Loop 11 
* CEs [14] --> Loop 12 
* CEs [11] --> Loop 13 
* CEs [12] --> Loop 14 

### Ranking functions of CR eval_rsd_bb2_in(V_4,V_da_0,V_db_0,V_r,B,C,D,E) 
* RF of phase [11,12]: [V_da_0+V_db_0+1,V_da_0+V_db_0-2*V_r+1]

#### Partial ranking functions of CR eval_rsd_bb2_in(V_4,V_da_0,V_db_0,V_r,B,C,D,E) 
* Partial RF of phase [11,12]:
  - RF of loop [11:1]:
    V_da_0+V_db_0+1
    V_da_0+V_db_0-2*V_r+1
  - RF of loop [12:1]:
    V_da_0+1 depends on loops [11:1] 
    V_da_0-V_db_0/2+1/2 depends on loops [11:1] 
    V_da_0-V_r+1 depends on loops [11:1] 


### Specialization of cost equations eval_rsd_bb2_in_loop_cont/8 
* CE 10 is refined into CE [15] 
* CE 9 is refined into CE [16] 


### Cost equations --> "Loop" of eval_rsd_bb2_in_loop_cont/8 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 

### Ranking functions of CR eval_rsd_bb2_in_loop_cont(A,B,C,D,E,F,G,H) 

#### Partial ranking functions of CR eval_rsd_bb2_in_loop_cont(A,B,C,D,E,F,G,H) 


### Specialization of cost equations eval_rsd_12/7 
* CE 4 is refined into CE [17,18,19] 


### Cost equations --> "Loop" of eval_rsd_12/7 
* CEs [17,18,19] --> Loop 17 

### Ranking functions of CR eval_rsd_12(V_1,V_2,V_4,V_da_0,V_db_0,V_r,B) 

#### Partial ranking functions of CR eval_rsd_12(V_1,V_2,V_4,V_da_0,V_db_0,V_r,B) 


### Specialization of cost equations eval_rsd_2/7 
* CE 2 is refined into CE [20] 
* CE 3 is refined into CE [21] 


### Cost equations --> "Loop" of eval_rsd_2/7 
* CEs [20] --> Loop 18 
* CEs [21] --> Loop 19 

### Ranking functions of CR eval_rsd_2(V_1,V_2,V_4,V_da_0,V_db_0,V_r,B) 

#### Partial ranking functions of CR eval_rsd_2(V_1,V_2,V_4,V_da_0,V_db_0,V_r,B) 


### Specialization of cost equations eval_rsd_start/7 
* CE 1 is refined into CE [22,23] 


### Cost equations --> "Loop" of eval_rsd_start/7 
* CEs [23] --> Loop 20 
* CEs [22] --> Loop 21 

### Ranking functions of CR eval_rsd_start(V_1,V_2,V_4,V_da_0,V_db_0,V_r,B) 

#### Partial ranking functions of CR eval_rsd_start(V_1,V_2,V_4,V_da_0,V_db_0,V_r,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_rsd_bb2_in(V_4,V_da_0,V_db_0,V_r,B,C,D,E):
* Chain [[11,12],14]: 1*it(11)+1*it(12)+0
  Such that:aux(19) =< V_da_0
aux(2) =< V_da_0+1
aux(25) =< V_da_0+V_db_0+1
aux(13) =< V_da_0+V_db_0-2*V_r
aux(26) =< V_da_0+V_db_0-2*V_r+1
aux(21) =< V_da_0+V_db_0-V_r
aux(6) =< V_da_0-V_db_0/2+1/2
aux(12) =< V_da_0-V_db_0/2-D+E/2
aux(12) =< -V_db_0/2+D+E/2+2
aux(29) =< V_r
aux(21) =< 2*V_r
aux(17) =< 3/2*V_r
aux(30) =< V_da_0+V_db_0-V_r-E+1
aux(31) =< V_da_0-V_r+1
it(11) =< aux(25)
it(12) =< aux(25)
it(11) =< aux(26)
it(12) =< aux(26)
it(11) =< aux(30)
it(12) =< aux(30)
aux(13) =< aux(29)
aux(19) =< aux(29)
aux(23) =< aux(17)
aux(21) =< aux(17)*(4/3)+1/3
aux(19) =< aux(17)*(2/3)-1/3
aux(18) =< it(11)*aux(17)
aux(5) =< it(11)*aux(17)
aux(14) =< it(11)*aux(13)
aux(1) =< it(11)*aux(13)
aux(23) =< aux(21)*(3/2)+1/2
aux(22) =< it(11)*aux(21)
aux(3) =< it(11)*aux(21)
aux(20) =< it(11)*aux(19)
aux(1) =< it(11)*aux(19)
aux(11) =< aux(18)
aux(9) =< aux(14)
aux(7) =< aux(14)
aux(3) =< aux(14)
aux(24) =< it(11)*aux(23)
aux(5) =< it(11)*aux(23)
aux(9) =< aux(22)
aux(7) =< aux(20)
it(12) =< aux(3)+aux(31)
it(12) =< aux(1)+aux(2)
aux(11) =< aux(24)
it(12) =< aux(9)+aux(31)
it(12) =< aux(7)+aux(31)
it(12) =< aux(5)+aux(6)
it(12) =< aux(11)+aux(12)

  with precondition: [B=2,V_r=D+1,2*V_r>=V_da_0,2*V_r>=V_db_0,V_da_0>=V_r,V_db_0>=V_r,E>=V_r,2*V_r>=E,V_da_0+V_db_0>=V_r+E] 

* Chain [[11,12],13]: 1*it(11)+1*it(12)+0
  Such that:aux(19) =< V_da_0
aux(2) =< V_da_0+1
aux(25) =< V_da_0+V_db_0+1
aux(13) =< V_da_0+V_db_0-2*V_r
aux(21) =< V_da_0+V_db_0-V_r
aux(12) =< V_da_0-V_db_0/2+1
aux(6) =< V_da_0-V_db_0/2+1/2
aux(12) =< 3/2*V_da_0-3/2*V_r+1
aux(29) =< V_r
aux(21) =< 2*V_r
aux(17) =< 3/2*V_r
aux(32) =< V_da_0+V_db_0-2*V_r+1
aux(33) =< V_da_0-V_r+1
aux(34) =< V_r+1
aux(8) =< aux(33)
aux(8) =< aux(34)
it(11) =< aux(25)
it(12) =< aux(25)
it(11) =< aux(32)
it(12) =< aux(32)
aux(13) =< aux(29)
aux(19) =< aux(29)
aux(23) =< aux(17)
aux(21) =< aux(17)*(4/3)+1/3
aux(19) =< aux(17)*(2/3)-1/3
aux(18) =< it(11)*aux(17)
aux(5) =< it(11)*aux(17)
aux(14) =< it(11)*aux(13)
aux(1) =< it(11)*aux(13)
aux(23) =< aux(21)*(3/2)+1/2
aux(22) =< it(11)*aux(21)
aux(3) =< it(11)*aux(21)
aux(20) =< it(11)*aux(19)
aux(1) =< it(11)*aux(19)
aux(11) =< aux(18)
aux(9) =< aux(14)
aux(7) =< aux(14)
aux(3) =< aux(14)
aux(24) =< it(11)*aux(23)
aux(5) =< it(11)*aux(23)
aux(9) =< aux(22)
aux(7) =< aux(20)
it(12) =< aux(3)+aux(33)
it(12) =< aux(1)+aux(2)
aux(11) =< aux(24)
it(12) =< aux(9)+aux(8)
it(12) =< aux(7)+aux(8)
it(12) =< aux(5)+aux(6)
it(12) =< aux(11)+aux(12)

  with precondition: [B=3,2*V_r>=V_da_0,2*V_r>=V_db_0,V_da_0>=V_r,V_db_0>=V_r] 

* Chain [13]: 0
  with precondition: [B=3,2*V_r>=V_da_0,2*V_r>=V_db_0,V_db_0>=V_r] 


#### Cost of chains of eval_rsd_bb2_in_loop_cont(A,B,C,D,E,F,G,H):
* Chain [16]: 0
  with precondition: [A=2,2*G=B,2*G=C,G>=0] 

* Chain [15]: 0
  with precondition: [A=3,2*G=B,2*G=C,G>=0] 


#### Cost of chains of eval_rsd_12(V_1,V_2,V_4,V_da_0,V_db_0,V_r,B):
* Chain [17]: 1*s(13)+1*s(14)+1*s(40)+1*s(41)+0
  Such that:aux(38) =< 3/2*V_1+3
aux(42) =< V_1
aux(43) =< V_1+1
aux(44) =< 2*V_1+1
aux(45) =< V_1/2
aux(46) =< V_1/2+1
aux(47) =< V_1/2+1/2
aux(48) =< 3/4*V_1
s(1) =< aux(42)
s(4) =< aux(42)
s(6) =< aux(42)
s(11) =< aux(43)
s(8) =< aux(46)
s(8) =< aux(38)
s(11) =< aux(38)
s(13) =< aux(44)
s(14) =< aux(44)
s(13) =< aux(43)
s(14) =< aux(43)
s(13) =< s(11)
s(14) =< s(11)
s(4) =< aux(45)
s(1) =< aux(45)
s(15) =< aux(48)
s(6) =< aux(48)*(4/3)+1/3
s(1) =< aux(48)*(2/3)-1/3
s(16) =< s(13)*aux(48)
s(17) =< s(13)*aux(48)
s(18) =< s(13)*s(4)
s(19) =< s(13)*s(4)
s(15) =< s(6)*(3/2)+1/2
s(20) =< s(13)*s(6)
s(21) =< s(13)*s(6)
s(22) =< s(13)*s(1)
s(19) =< s(13)*s(1)
s(23) =< s(16)
s(24) =< s(18)
s(25) =< s(18)
s(21) =< s(18)
s(26) =< s(13)*s(15)
s(17) =< s(13)*s(15)
s(24) =< s(20)
s(25) =< s(22)
s(14) =< s(21)+aux(46)
s(14) =< s(19)+aux(43)
s(23) =< s(26)
s(14) =< s(24)+aux(46)
s(14) =< s(25)+aux(46)
s(14) =< s(17)+aux(47)
s(14) =< s(23)+s(8)
s(40) =< aux(44)
s(41) =< aux(44)
s(40) =< aux(43)
s(41) =< aux(43)
s(43) =< s(40)*aux(48)
s(44) =< s(40)*aux(48)
s(45) =< s(40)*s(4)
s(46) =< s(40)*s(4)
s(47) =< s(40)*s(6)
s(48) =< s(40)*s(6)
s(49) =< s(40)*s(1)
s(46) =< s(40)*s(1)
s(50) =< s(43)
s(51) =< s(45)
s(52) =< s(45)
s(48) =< s(45)
s(53) =< s(40)*s(15)
s(44) =< s(40)*s(15)
s(51) =< s(47)
s(52) =< s(49)
s(41) =< s(48)+aux(46)
s(41) =< s(46)+aux(43)
s(50) =< s(53)
s(41) =< s(51)+aux(46)
s(41) =< s(52)+aux(46)
s(41) =< s(44)+aux(47)
s(41) =< s(50)+aux(46)

  with precondition: [2*V_r=V_1,2*V_r=V_2,V_r>=0] 


#### Cost of chains of eval_rsd_2(V_1,V_2,V_4,V_da_0,V_db_0,V_r,B):
* Chain [19]: 0
  with precondition: [0>=V_r+1] 

* Chain [18]: 1*s(67)+1*s(68)+1*s(81)+1*s(82)+0
  Such that:s(58) =< V_r
s(59) =< V_r+1
s(60) =< V_r+1/2
s(55) =< 2*V_r
s(56) =< 2*V_r+1
s(54) =< 3*V_r+3
s(57) =< 4*V_r+1
s(61) =< 3/2*V_r
s(62) =< s(55)
s(63) =< s(55)
s(64) =< s(55)
s(65) =< s(56)
s(66) =< s(59)
s(66) =< s(54)
s(65) =< s(54)
s(67) =< s(57)
s(68) =< s(57)
s(67) =< s(56)
s(68) =< s(56)
s(67) =< s(65)
s(68) =< s(65)
s(63) =< s(58)
s(62) =< s(58)
s(69) =< s(61)
s(64) =< s(61)*(4/3)+1/3
s(62) =< s(61)*(2/3)-1/3
s(70) =< s(67)*s(61)
s(71) =< s(67)*s(61)
s(72) =< s(67)*s(63)
s(73) =< s(67)*s(63)
s(69) =< s(64)*(3/2)+1/2
s(74) =< s(67)*s(64)
s(75) =< s(67)*s(64)
s(76) =< s(67)*s(62)
s(73) =< s(67)*s(62)
s(77) =< s(70)
s(78) =< s(72)
s(79) =< s(72)
s(75) =< s(72)
s(80) =< s(67)*s(69)
s(71) =< s(67)*s(69)
s(78) =< s(74)
s(79) =< s(76)
s(68) =< s(75)+s(59)
s(68) =< s(73)+s(56)
s(77) =< s(80)
s(68) =< s(78)+s(59)
s(68) =< s(79)+s(59)
s(68) =< s(71)+s(60)
s(68) =< s(77)+s(66)
s(81) =< s(57)
s(82) =< s(57)
s(81) =< s(56)
s(82) =< s(56)
s(83) =< s(81)*s(61)
s(84) =< s(81)*s(61)
s(85) =< s(81)*s(63)
s(86) =< s(81)*s(63)
s(87) =< s(81)*s(64)
s(88) =< s(81)*s(64)
s(89) =< s(81)*s(62)
s(86) =< s(81)*s(62)
s(90) =< s(83)
s(91) =< s(85)
s(92) =< s(85)
s(88) =< s(85)
s(93) =< s(81)*s(69)
s(84) =< s(81)*s(69)
s(91) =< s(87)
s(92) =< s(89)
s(82) =< s(88)+s(59)
s(82) =< s(86)+s(56)
s(90) =< s(93)
s(82) =< s(91)+s(59)
s(82) =< s(92)+s(59)
s(82) =< s(84)+s(60)
s(82) =< s(90)+s(59)

  with precondition: [V_r>=0] 


#### Cost of chains of eval_rsd_start(V_1,V_2,V_4,V_da_0,V_db_0,V_r,B):
* Chain [21]: 0
  with precondition: [0>=V_r+1] 

* Chain [20]: 1*s(107)+1*s(108)+1*s(121)+1*s(122)+0
  Such that:s(94) =< V_r
s(95) =< V_r+1
s(96) =< V_r+1/2
s(97) =< 2*V_r
s(98) =< 2*V_r+1
s(99) =< 3*V_r+3
s(100) =< 4*V_r+1
s(101) =< 3/2*V_r
s(102) =< s(97)
s(103) =< s(97)
s(104) =< s(97)
s(105) =< s(98)
s(106) =< s(95)
s(106) =< s(99)
s(105) =< s(99)
s(107) =< s(100)
s(108) =< s(100)
s(107) =< s(98)
s(108) =< s(98)
s(107) =< s(105)
s(108) =< s(105)
s(103) =< s(94)
s(102) =< s(94)
s(109) =< s(101)
s(104) =< s(101)*(4/3)+1/3
s(102) =< s(101)*(2/3)-1/3
s(110) =< s(107)*s(101)
s(111) =< s(107)*s(101)
s(112) =< s(107)*s(103)
s(113) =< s(107)*s(103)
s(109) =< s(104)*(3/2)+1/2
s(114) =< s(107)*s(104)
s(115) =< s(107)*s(104)
s(116) =< s(107)*s(102)
s(113) =< s(107)*s(102)
s(117) =< s(110)
s(118) =< s(112)
s(119) =< s(112)
s(115) =< s(112)
s(120) =< s(107)*s(109)
s(111) =< s(107)*s(109)
s(118) =< s(114)
s(119) =< s(116)
s(108) =< s(115)+s(95)
s(108) =< s(113)+s(98)
s(117) =< s(120)
s(108) =< s(118)+s(95)
s(108) =< s(119)+s(95)
s(108) =< s(111)+s(96)
s(108) =< s(117)+s(106)
s(121) =< s(100)
s(122) =< s(100)
s(121) =< s(98)
s(122) =< s(98)
s(123) =< s(121)*s(101)
s(124) =< s(121)*s(101)
s(125) =< s(121)*s(103)
s(126) =< s(121)*s(103)
s(127) =< s(121)*s(104)
s(128) =< s(121)*s(104)
s(129) =< s(121)*s(102)
s(126) =< s(121)*s(102)
s(130) =< s(123)
s(131) =< s(125)
s(132) =< s(125)
s(128) =< s(125)
s(133) =< s(121)*s(109)
s(124) =< s(121)*s(109)
s(131) =< s(127)
s(132) =< s(129)
s(122) =< s(128)+s(95)
s(122) =< s(126)+s(98)
s(130) =< s(133)
s(122) =< s(131)+s(95)
s(122) =< s(132)+s(95)
s(122) =< s(124)+s(96)
s(122) =< s(130)+s(95)

  with precondition: [V_r>=0] 


Closed-form bounds of eval_rsd_start(V_1,V_2,V_4,V_da_0,V_db_0,V_r,B): 
-------------------------------------
* Chain [21] with precondition: [0>=V_r+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [20] with precondition: [V_r>=0] 
    - Upper bound: 16*V_r+4 
    - Complexity: n 

### Maximum cost of eval_rsd_start(V_1,V_2,V_4,V_da_0,V_db_0,V_r,B): nat(4*V_r+1)*4 
Asymptotic class: n 
* Total analysis performed in 197 ms.

