WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalEx1bb1in/5,evalEx1bb4in/5]
1. recursive  : [evalEx1bb4in_loop_cont/10,evalEx1bb5in/9,evalEx1bb6in/9,evalEx1bbin/9]
2. non_recursive  : [evalEx1stop/5]
3. non_recursive  : [evalEx1returnin/5]
4. non_recursive  : [exit_location/1]
5. non_recursive  : [evalEx1bb6in_loop_cont/6]
6. non_recursive  : [evalEx1entryin/5]
7. non_recursive  : [evalEx1start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalEx1bb4in/5
1. SCC is partially evaluated into evalEx1bb6in/9
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into evalEx1bb6in_loop_cont/6
6. SCC is partially evaluated into evalEx1entryin/5
7. SCC is partially evaluated into evalEx1start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalEx1bb4in/5 
* CE 12 is refined into CE [13] 
* CE 11 is refined into CE [14] 
* CE 10 is refined into CE [15] 
* CE 9 is refined into CE [16] 


### Cost equations --> "Loop" of evalEx1bb4in/5 
* CEs [15] --> Loop 13 
* CEs [16] --> Loop 14 
* CEs [13] --> Loop 15 
* CEs [14] --> Loop 16 

### Ranking functions of CR evalEx1bb4in(C,D,F,G,H) 
* RF of phase [13,14]: [-C+D]

#### Partial ranking functions of CR evalEx1bb4in(C,D,F,G,H) 
* Partial RF of phase [13,14]:
  - RF of loop [13:1]:
    D-1
  - RF of loop [13:1,14:1]:
    -C+D


### Specialization of cost equations evalEx1bb6in/9 
* CE 5 is refined into CE [17] 
* CE 3 is refined into CE [18,19] 
* CE 6 is refined into CE [20] 
* CE 4 is refined into CE [21,22] 


### Cost equations --> "Loop" of evalEx1bb6in/9 
* CEs [22] --> Loop 17 
* CEs [21] --> Loop 18 
* CEs [17] --> Loop 19 
* CEs [19] --> Loop 20 
* CEs [18] --> Loop 21 
* CEs [20] --> Loop 22 

### Ranking functions of CR evalEx1bb6in(A,B,C,D,F,G,H,I,J) 
* RF of phase [17]: [-A+B-1]

#### Partial ranking functions of CR evalEx1bb6in(A,B,C,D,F,G,H,I,J) 
* Partial RF of phase [17]:
  - RF of loop [17:1]:
    -A+B-1


### Specialization of cost equations evalEx1bb6in_loop_cont/6 
* CE 7 is refined into CE [23] 
* CE 8 is refined into CE [24] 


### Cost equations --> "Loop" of evalEx1bb6in_loop_cont/6 
* CEs [23] --> Loop 23 
* CEs [24] --> Loop 24 

### Ranking functions of CR evalEx1bb6in_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR evalEx1bb6in_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations evalEx1entryin/5 
* CE 2 is refined into CE [25,26,27,28,29,30,31,32,33] 


### Cost equations --> "Loop" of evalEx1entryin/5 
* CEs [29] --> Loop 25 
* CEs [28,32,33] --> Loop 26 
* CEs [27] --> Loop 27 
* CEs [31] --> Loop 28 
* CEs [25,30] --> Loop 29 
* CEs [26] --> Loop 30 

### Ranking functions of CR evalEx1entryin(A,B,C,D,F) 

#### Partial ranking functions of CR evalEx1entryin(A,B,C,D,F) 


### Specialization of cost equations evalEx1start/5 
* CE 1 is refined into CE [34,35,36,37,38,39] 


### Cost equations --> "Loop" of evalEx1start/5 
* CEs [39] --> Loop 31 
* CEs [38] --> Loop 32 
* CEs [37] --> Loop 33 
* CEs [36] --> Loop 34 
* CEs [35] --> Loop 35 
* CEs [34] --> Loop 36 

### Ranking functions of CR evalEx1start(A,B,C,D,F) 

#### Partial ranking functions of CR evalEx1start(A,B,C,D,F) 


Computing Bounds
=====================================

#### Cost of chains of evalEx1bb4in(C,D,F,G,H):
* Chain [[13,14],16]: 1*it(13)+1*it(14)+0
  Such that:it(13) =< D-H
aux(3) =< -C+D
it(13) =< aux(3)
it(14) =< aux(3)

  with precondition: [F=2,G=H,C>=1,D>=C+1,G>=C,D>=G] 

* Chain [[13,14],15]: 2*it(13)+0
  Such that:aux(4) =< -C+D
it(13) =< aux(4)

  with precondition: [F=3,C>=1,D>=C+1] 

* Chain [16]: 0
  with precondition: [F=2,D=C,D=G,D=H,D>=1] 

* Chain [15]: 0
  with precondition: [F=3,C>=1,D>=C] 


#### Cost of chains of evalEx1bb6in(A,B,C,D,F,G,H,I,J):
* Chain [[17],22]: 1*it(17)+1*s(7)+1*s(8)+0
  Such that:aux(5) =< B
aux(8) =< -A+B
aux(5) =< aux(8)
it(17) =< aux(8)
s(7) =< aux(8)
s(9) =< it(17)*aux(5)
s(7) =< s(9)
s(8) =< s(9)

  with precondition: [F=3,A>=0,B>=A+2] 

* Chain [[17],21]: 1*it(17)+1*s(7)+1*s(8)+0
  Such that:aux(5) =< B
aux(9) =< -A+B
aux(5) =< aux(9)
it(17) =< aux(9)
s(7) =< aux(9)
s(9) =< it(17)*aux(5)
s(7) =< s(9)
s(8) =< s(9)

  with precondition: [F=3,A>=0,B>=A+2] 

* Chain [[17],20]: 3*it(17)+1*s(7)+1*s(8)+0
  Such that:aux(5) =< B
aux(10) =< -A+B
it(17) =< aux(10)
aux(5) =< aux(10)
s(7) =< aux(10)
s(9) =< it(17)*aux(5)
s(7) =< s(9)
s(8) =< s(9)

  with precondition: [F=3,A>=0,B>=A+3] 

* Chain [[17],19]: 1*it(17)+1*s(7)+1*s(8)+0
  Such that:aux(5) =< B
aux(11) =< -A+B
aux(5) =< aux(11)
it(17) =< aux(11)
s(7) =< aux(11)
s(9) =< it(17)*aux(5)
s(7) =< s(9)
s(8) =< s(9)

  with precondition: [F=4,G=H,G=I,G=J,A>=0,G>=A+1,B>=G+1] 

* Chain [[17],18,22]: 1*it(17)+1*s(7)+1*s(8)+1
  Such that:aux(5) =< B
aux(12) =< -A+B
aux(5) =< aux(12)
it(17) =< aux(12)
s(7) =< aux(12)
s(9) =< it(17)*aux(5)
s(7) =< s(9)
s(8) =< s(9)

  with precondition: [F=3,A>=0,B>=A+2] 

* Chain [[17],18,19]: 1*it(17)+1*s(7)+1*s(8)+1
  Such that:aux(5) =< B
aux(13) =< -A+B
aux(5) =< aux(13)
it(17) =< aux(13)
s(7) =< aux(13)
s(9) =< it(17)*aux(5)
s(7) =< s(9)
s(8) =< s(9)

  with precondition: [F=4,G=H,G=I,G=J,A>=0,G>=A+2,B>=G] 

* Chain [22]: 0
  with precondition: [F=3,A>=0] 

* Chain [21]: 0
  with precondition: [F=3,A>=0,B>=A+1] 

* Chain [20]: 2*s(11)+0
  Such that:s(10) =< -A+B
s(11) =< s(10)

  with precondition: [F=3,A>=0,B>=A+2] 

* Chain [19]: 0
  with precondition: [F=4,I=C,J=D,A=G,B=H,A>=0,A>=B] 

* Chain [18,22]: 1
  with precondition: [F=3,B=A+1,B>=1] 

* Chain [18,19]: 1
  with precondition: [F=4,B=A+1,B=G,B=H,B=I,B=J,B>=1] 


#### Cost of chains of evalEx1bb6in_loop_cont(A,B,C,D,E,F):
* Chain [24]: 0
  with precondition: [A=3] 

* Chain [23]: 0
  with precondition: [A=4] 


#### Cost of chains of evalEx1entryin(A,B,C,D,F):
* Chain [30]: 0
  with precondition: [] 

* Chain [29]: 1
  with precondition: [A=1] 

* Chain [28]: 0
  with precondition: [0>=A] 

* Chain [27]: 0
  with precondition: [A>=1] 

* Chain [26]: 7*s(35)+5*s(36)+5*s(38)+1
  Such that:aux(19) =< A
s(35) =< aux(19)
s(36) =< aux(19)
s(37) =< s(35)*aux(19)
s(36) =< s(37)
s(38) =< s(37)

  with precondition: [A>=2] 

* Chain [25]: 3*s(53)+1*s(54)+1*s(56)+0
  Such that:aux(20) =< A
s(53) =< aux(20)
s(54) =< aux(20)
s(55) =< s(53)*aux(20)
s(54) =< s(55)
s(56) =< s(55)

  with precondition: [A>=3] 


#### Cost of chains of evalEx1start(A,B,C,D,F):
* Chain [36]: 0
  with precondition: [] 

* Chain [35]: 1
  with precondition: [A=1] 

* Chain [34]: 0
  with precondition: [0>=A] 

* Chain [33]: 0
  with precondition: [A>=1] 

* Chain [32]: 7*s(58)+5*s(59)+5*s(61)+1
  Such that:s(57) =< A
s(58) =< s(57)
s(59) =< s(57)
s(60) =< s(58)*s(57)
s(59) =< s(60)
s(61) =< s(60)

  with precondition: [A>=2] 

* Chain [31]: 3*s(63)+1*s(64)+1*s(66)+0
  Such that:s(62) =< A
s(63) =< s(62)
s(64) =< s(62)
s(65) =< s(63)*s(62)
s(64) =< s(65)
s(66) =< s(65)

  with precondition: [A>=3] 


Closed-form bounds of evalEx1start(A,B,C,D,F): 
-------------------------------------
* Chain [36] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [35] with precondition: [A=1] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [34] with precondition: [0>=A] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [33] with precondition: [A>=1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [32] with precondition: [A>=2] 
    - Upper bound: 12*A+1+5*A*A 
    - Complexity: n^2 
* Chain [31] with precondition: [A>=3] 
    - Upper bound: 4*A+A*A 
    - Complexity: n^2 

### Maximum cost of evalEx1start(A,B,C,D,F): max([1,nat(A)*8+1+nat(A)*4*nat(A)+(nat(A)*nat(A)+nat(A)*4)]) 
Asymptotic class: n^2 
* Total analysis performed in 132 ms.

