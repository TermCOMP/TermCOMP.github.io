WORST_CASE(?,O(1))

# LoAT Proof:
Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f17 -> 2

Rules:
   0: (-2-it5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=it6, i5'=it5, i6'=it4
   1: (it8 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=it9, i5'=it8, i6'=it7
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it12, i5'=-1, i7'=0, i8'=it11, i9'=it10

Dependency graph:

Step with 2

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Backtrack

	Trace

	Blocked

	{2[T]}
	
Step with 0

	Trace

	0[(-2-it5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{2[T]}
	{}
	
Backtrack

	Trace

	Blocked

	{0[T], 2[T]}
	
Step with 1

	Trace

	1[(it8 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{0[T], 2[T]}
	{}
	
Backtrack

	Trace

	Blocked

	{0[T], 1[T], 2[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃, X₄, X₅
  Temp_Vars:  G, H, I
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂, X₃, X₄, X₅) → l1(H, G, I, X₃, X₄, X₅) :|: 2+G ≤ 0
  t₁: l0(X₀, X₁, X₂, X₃, X₄, X₅) → l1(H, G, I, X₃, X₄, X₅) :|: 0 ≤ G
  t₂: l0(X₀, X₁, X₂, X₃, X₄, X₅) → l1(H, -1, X₂, 0, G, I)


Preprocessing
  Eliminate variables [H; I; X₀; X₁; X₂; X₃; X₄; X₅] that do not contribute to the problem


Problem after Preprocessing
  Start:  l0
  Program_Vars:  
  Temp_Vars:  G
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₃: l0 → l1 :|: 2+G ≤ 0
  t₄: l0 → l1 :|: 0 ≤ G
  t₅: l0 → l1


All Bounds
Timebounds
  Overall timebound:3 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}


Costbounds
  Overall costbound: 3 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}


Sizebounds

