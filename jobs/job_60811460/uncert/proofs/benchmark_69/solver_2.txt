WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalrealheapsortstep2bb2in/7,evalrealheapsortstep2bb3in/7,evalrealheapsortstep2bb4in/7,evalrealheapsortstep2bb5in/7,evalrealheapsortstep2bb6in/7,evalrealheapsortstep2bb7in/7,evalrealheapsortstep2bb9in/7]
1. recursive  : [evalrealheapsortstep2bb10in/8,evalrealheapsortstep2bb11in/8,evalrealheapsortstep2bb1in/8,evalrealheapsortstep2bb9in_loop_cont/9]
2. non_recursive  : [evalrealheapsortstep2stop/5]
3. non_recursive  : [evalrealheapsortstep2returnin/5]
4. non_recursive  : [exit_location/1]
5. non_recursive  : [evalrealheapsortstep2bb11in_loop_cont/6]
6. non_recursive  : [evalrealheapsortstep2bbin/5]
7. non_recursive  : [evalrealheapsortstep2entryin/5]
8. non_recursive  : [evalrealheapsortstep2start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalrealheapsortstep2bb9in/7
1. SCC is partially evaluated into evalrealheapsortstep2bb11in/8
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into evalrealheapsortstep2bb11in_loop_cont/6
6. SCC is partially evaluated into evalrealheapsortstep2bbin/5
7. SCC is partially evaluated into evalrealheapsortstep2entryin/5
8. SCC is partially evaluated into evalrealheapsortstep2start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalrealheapsortstep2bb9in/7 
* CE 18 is refined into CE [19] 
* CE 17 is refined into CE [20] 
* CE 12 is refined into CE [21] 
* CE 14 is refined into CE [22] 
* CE 13 is refined into CE [23] 
* CE 15 is refined into CE [24] 
* CE 11 is refined into CE [25] 
* CE 16 is refined into CE [26] 


### Cost equations --> "Loop" of evalrealheapsortstep2bb9in/7 
* CEs [21] --> Loop 19 
* CEs [22] --> Loop 20 
* CEs [23] --> Loop 21 
* CEs [24] --> Loop 22 
* CEs [25] --> Loop 23 
* CEs [26] --> Loop 24 
* CEs [19] --> Loop 25 
* CEs [20] --> Loop 26 

### Ranking functions of CR evalrealheapsortstep2bb9in(A,B,C,D,E,F,G) 
* RF of phase [22,24]: [A/2-B/2-C-3/2,A/2-C-3/2]

#### Partial ranking functions of CR evalrealheapsortstep2bb9in(A,B,C,D,E,F,G) 
* Partial RF of phase [22,24]:
  - RF of loop [22:1,24:1]:
    A/2-B/2-C-3/2
    A/2-C-3/2


### Specialization of cost equations evalrealheapsortstep2bb11in/8 
* CE 7 is refined into CE [27] 
* CE 5 is refined into CE [28,29,30,31,32] 
* CE 8 is refined into CE [33] 
* CE 6 is refined into CE [34,35,36,37,38,39,40,41,42,43] 


### Cost equations --> "Loop" of evalrealheapsortstep2bb11in/8 
* CEs [43] --> Loop 27 
* CEs [39] --> Loop 28 
* CEs [42] --> Loop 29 
* CEs [41] --> Loop 30 
* CEs [40] --> Loop 31 
* CEs [36] --> Loop 32 
* CEs [37] --> Loop 33 
* CEs [38] --> Loop 34 
* CEs [34] --> Loop 35 
* CEs [35] --> Loop 36 
* CEs [27] --> Loop 37 
* CEs [31] --> Loop 38 
* CEs [30] --> Loop 39 
* CEs [32] --> Loop 40 
* CEs [29] --> Loop 41 
* CEs [33] --> Loop 42 
* CEs [28] --> Loop 43 

### Ranking functions of CR evalrealheapsortstep2bb11in(A,B,C,D,E,F,G,H) 
* RF of phase [27,28,29,30,31,32,33]: [A-B-3]

#### Partial ranking functions of CR evalrealheapsortstep2bb11in(A,B,C,D,E,F,G,H) 
* Partial RF of phase [27,28,29,30,31,32,33]:
  - RF of loop [27:1,28:1]:
    A-B-4
  - RF of loop [29:1,32:1,33:1]:
    A-B-3
  - RF of loop [30:1,31:1]:
    A-B-5


### Specialization of cost equations evalrealheapsortstep2bb11in_loop_cont/6 
* CE 9 is refined into CE [44] 
* CE 10 is refined into CE [45] 


### Cost equations --> "Loop" of evalrealheapsortstep2bb11in_loop_cont/6 
* CEs [44] --> Loop 44 
* CEs [45] --> Loop 45 

### Ranking functions of CR evalrealheapsortstep2bb11in_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR evalrealheapsortstep2bb11in_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations evalrealheapsortstep2bbin/5 
* CE 4 is refined into CE [46,47,48,49,50,51,52,53,54,55] 


### Cost equations --> "Loop" of evalrealheapsortstep2bbin/5 
* CEs [53] --> Loop 46 
* CEs [52] --> Loop 47 
* CEs [51] --> Loop 48 
* CEs [50,55] --> Loop 49 
* CEs [48,49] --> Loop 50 
* CEs [46,47,54] --> Loop 51 

### Ranking functions of CR evalrealheapsortstep2bbin(A,B,C,D,E) 

#### Partial ranking functions of CR evalrealheapsortstep2bbin(A,B,C,D,E) 


### Specialization of cost equations evalrealheapsortstep2entryin/5 
* CE 2 is refined into CE [56,57,58,59,60,61] 
* CE 3 is refined into CE [62] 


### Cost equations --> "Loop" of evalrealheapsortstep2entryin/5 
* CEs [61] --> Loop 52 
* CEs [60] --> Loop 53 
* CEs [59] --> Loop 54 
* CEs [58] --> Loop 55 
* CEs [57] --> Loop 56 
* CEs [62] --> Loop 57 
* CEs [56] --> Loop 58 

### Ranking functions of CR evalrealheapsortstep2entryin(A,B,C,D,E) 

#### Partial ranking functions of CR evalrealheapsortstep2entryin(A,B,C,D,E) 


### Specialization of cost equations evalrealheapsortstep2start/5 
* CE 1 is refined into CE [63,64,65,66,67,68,69] 


### Cost equations --> "Loop" of evalrealheapsortstep2start/5 
* CEs [69] --> Loop 59 
* CEs [68] --> Loop 60 
* CEs [67] --> Loop 61 
* CEs [66] --> Loop 62 
* CEs [65] --> Loop 63 
* CEs [64] --> Loop 64 
* CEs [63] --> Loop 65 

### Ranking functions of CR evalrealheapsortstep2start(A,B,C,D,E) 

#### Partial ranking functions of CR evalrealheapsortstep2start(A,B,C,D,E) 


Computing Bounds
=====================================

#### Cost of chains of evalrealheapsortstep2bb9in(A,B,C,D,E,F,G):
* Chain [[22,24],26]: 2*it(22)+0
  Such that:aux(1) =< A/2-B/2-C
aux(3) =< A/2-C
aux(5) =< -C+F
it(22) =< aux(1)
it(22) =< aux(5)
it(22) =< aux(3)

  with precondition: [E=2,F=G,B>=0,C>=0,F>=2*C+1,A>=2*C+B+4,B+2*F+2>=A,A>=B+F+2] 

* Chain [[22,24],25]: 2*it(22)+0
  Such that:aux(1) =< A/2-B/2-C
aux(3) =< A/2-C
aux(6) =< A-B-C
it(22) =< aux(1)
it(22) =< aux(6)
it(22) =< aux(3)

  with precondition: [E=3,B>=0,C>=0,A>=2*C+B+4] 

* Chain [[22,24],23,26]: 2*it(22)+1
  Such that:aux(3) =< A/2-C
aux(1) =< -C+F/2+1
aux(7) =< -C+F/2
it(22) =< aux(1)
it(22) =< aux(7)
it(22) =< aux(3)

  with precondition: [E=2,A=B+F+2,A=B+G+2,B>=0,C>=0,A>=4*C+B+5] 

* Chain [[22,24],23,25]: 2*it(22)+1
  Such that:aux(3) =< A/2-C
aux(8) =< A/2-B/2-C
it(22) =< aux(8)
it(22) =< aux(3)

  with precondition: [E=3,B>=0,C>=0,A>=4*C+B+5] 

* Chain [[22,24],21,26]: 2*it(22)+1
  Such that:aux(1) =< -B/2-C+F/2
aux(3) =< -C+F/2
aux(9) =< -C+G/2
it(22) =< aux(1)
it(22) =< aux(9)
it(22) =< aux(3)

  with precondition: [E=2,A=F,B>=0,C>=0,G>=4*C+4,A>=B+G+2] 

* Chain [[22,24],21,25]: 2*it(22)+1
  Such that:aux(3) =< A/2-C
aux(10) =< A/2-B/2-C
it(22) =< aux(10)
it(22) =< aux(3)

  with precondition: [E=3,B>=0,C>=0,A>=4*C+B+6] 

* Chain [[22,24],20,26]: 2*it(22)+1
  Such that:aux(1) =< -B/2-C+F/2
aux(3) =< -C+F/2
aux(11) =< -C+G/2
it(22) =< aux(1)
it(22) =< aux(11)
it(22) =< aux(3)

  with precondition: [E=2,A=F,B>=0,C>=0,G>=4*C+3,A>=B+G+3] 

* Chain [[22,24],20,25]: 2*it(22)+1
  Such that:aux(3) =< A/2-C
aux(12) =< A/2-B/2-C
it(22) =< aux(12)
it(22) =< aux(3)

  with precondition: [E=3,B>=0,C>=0,A>=4*C+B+6] 

* Chain [[22,24],19,26]: 2*it(22)+1
  Such that:aux(3) =< -C+F/2
aux(13) =< -B/2-C+F/2
it(22) =< aux(13)
it(22) =< aux(3)

  with precondition: [E=2,A=F,A=B+G+2,B>=0,C>=0,A>=4*C+B+5] 

* Chain [[22,24],19,25]: 2*it(22)+1
  Such that:aux(3) =< A/2-C
aux(14) =< A/2-B/2-C
it(22) =< aux(14)
it(22) =< aux(3)

  with precondition: [E=3,B>=0,C>=0,A>=4*C+B+5] 

* Chain [26]: 0
  with precondition: [E=2,G=D,C=F,A>=3,B>=0,A>=B+2,A>=C,4*A>=3*B+C+9,B+2*C+2>=A] 

* Chain [25]: 0
  with precondition: [E=3,A>=3,B>=0,C>=0,A>=B+2,A>=C,4*A>=3*B+C+9] 

* Chain [23,26]: 1
  with precondition: [E=2,F=2*C+1,F=G,B+F+2=A,F>=1,A>=F+2] 

* Chain [23,25]: 1
  with precondition: [E=3,A=2*C+B+3,C>=0,A>=2*C+3] 

* Chain [21,26]: 1
  with precondition: [E=2,A=F,2*C+2=G,B>=0,C>=0,A>=2*C+B+4] 

* Chain [21,25]: 1
  with precondition: [E=3,B>=0,C>=0,A>=2*C+B+4] 

* Chain [20,26]: 1
  with precondition: [E=2,A=F,2*C+1=G,B>=0,C>=0,A>=2*C+B+4] 

* Chain [20,25]: 1
  with precondition: [E=3,B>=0,C>=0,A>=2*C+B+4] 

* Chain [19,26]: 1
  with precondition: [E=2,A=F,A=2*C+B+3,A=B+G+2,B>=0,A>=B+3] 

* Chain [19,25]: 1
  with precondition: [E=3,A=2*C+B+3,C>=0,A>=2*C+3] 


#### Cost of chains of evalrealheapsortstep2bb11in(A,B,C,D,E,F,G,H):
* Chain [[27,28,29,30,31,32,33],43]: 13*it(27)+2*s(55)+2*s(59)+2*s(62)+2*s(66)+2*s(70)+1
  Such that:aux(19) =< A/2
aux(20) =< A/2-B/2
aux(35) =< A-B
it(27) =< aux(35)
aux(32) =< aux(20)-1/2
aux(22) =< aux(19)
aux(21) =< aux(20)+1
aux(29) =< aux(20)
aux(26) =< aux(20)*2
s(57) =< it(27)*aux(20)
s(56) =< it(27)*aux(19)
s(72) =< it(27)*aux(32)
s(60) =< it(27)*aux(22)
s(58) =< it(27)*aux(21)
s(68) =< it(27)*aux(29)
s(64) =< it(27)*aux(26)
s(70) =< s(58)
s(70) =< s(72)
s(70) =< s(60)
s(66) =< s(58)
s(66) =< s(68)
s(66) =< s(60)
s(62) =< s(58)
s(62) =< s(64)
s(62) =< s(60)
s(59) =< s(58)
s(59) =< s(60)
s(55) =< s(58)
s(55) =< s(57)
s(55) =< s(56)

  with precondition: [E=3,B>=0,A>=B+4] 

* Chain [[27,28,29,30,31,32,33],42]: 13*it(27)+2*s(55)+2*s(59)+2*s(62)+2*s(66)+2*s(70)+0
  Such that:aux(19) =< A/2
aux(20) =< A/2-B/2
aux(36) =< A-B
it(27) =< aux(36)
aux(32) =< aux(20)-1/2
aux(22) =< aux(19)
aux(21) =< aux(20)+1
aux(29) =< aux(20)
aux(26) =< aux(20)*2
s(57) =< it(27)*aux(20)
s(56) =< it(27)*aux(19)
s(72) =< it(27)*aux(32)
s(60) =< it(27)*aux(22)
s(58) =< it(27)*aux(21)
s(68) =< it(27)*aux(29)
s(64) =< it(27)*aux(26)
s(70) =< s(58)
s(70) =< s(72)
s(70) =< s(60)
s(66) =< s(58)
s(66) =< s(68)
s(66) =< s(60)
s(62) =< s(58)
s(62) =< s(64)
s(62) =< s(60)
s(59) =< s(58)
s(59) =< s(60)
s(55) =< s(58)
s(55) =< s(57)
s(55) =< s(56)

  with precondition: [E=3,B>=0,A>=B+4] 

* Chain [[27,28,29,30,31,32,33],41]: 13*it(27)+2*s(55)+2*s(59)+2*s(62)+2*s(66)+2*s(70)+0
  Such that:aux(19) =< A/2
aux(20) =< A/2-B/2
aux(37) =< A-B
it(27) =< aux(37)
aux(32) =< aux(20)-1/2
aux(22) =< aux(19)
aux(21) =< aux(20)+1
aux(29) =< aux(20)
aux(26) =< aux(20)*2
s(57) =< it(27)*aux(20)
s(56) =< it(27)*aux(19)
s(72) =< it(27)*aux(32)
s(60) =< it(27)*aux(22)
s(58) =< it(27)*aux(21)
s(68) =< it(27)*aux(29)
s(64) =< it(27)*aux(26)
s(70) =< s(58)
s(70) =< s(72)
s(70) =< s(60)
s(66) =< s(58)
s(66) =< s(68)
s(66) =< s(60)
s(62) =< s(58)
s(62) =< s(64)
s(62) =< s(60)
s(59) =< s(58)
s(59) =< s(60)
s(55) =< s(58)
s(55) =< s(57)
s(55) =< s(56)

  with precondition: [E=3,B>=0,A>=B+4] 

* Chain [[27,28,29,30,31,32,33],40]: 13*it(27)+2*s(55)+2*s(59)+2*s(62)+2*s(66)+2*s(70)+2*s(77)+1
  Such that:aux(38) =< A-B
aux(39) =< A/2
aux(40) =< A/2-B/2
s(75) =< aux(38)
s(75) =< aux(40)
s(77) =< s(75)
s(77) =< aux(38)
s(77) =< aux(39)
it(27) =< aux(38)
aux(32) =< aux(40)-1/2
aux(22) =< aux(39)
aux(21) =< aux(40)+1
aux(29) =< aux(40)
aux(26) =< aux(40)*2
s(57) =< it(27)*aux(40)
s(56) =< it(27)*aux(39)
s(72) =< it(27)*aux(32)
s(60) =< it(27)*aux(22)
s(58) =< it(27)*aux(21)
s(68) =< it(27)*aux(29)
s(64) =< it(27)*aux(26)
s(70) =< s(58)
s(70) =< s(72)
s(70) =< s(60)
s(66) =< s(58)
s(66) =< s(68)
s(66) =< s(60)
s(62) =< s(58)
s(62) =< s(64)
s(62) =< s(60)
s(59) =< s(58)
s(59) =< s(60)
s(55) =< s(58)
s(55) =< s(57)
s(55) =< s(56)

  with precondition: [E=3,B>=0,A>=B+5] 

* Chain [[27,28,29,30,31,32,33],39]: 13*it(27)+2*s(55)+2*s(59)+2*s(62)+2*s(66)+2*s(70)+4*s(80)+1
  Such that:aux(41) =< A-B
aux(42) =< A/2
aux(43) =< A/2-B/2
s(78) =< aux(41)
s(78) =< aux(43)
s(80) =< s(78)
s(80) =< aux(42)
it(27) =< aux(41)
aux(32) =< aux(43)-1/2
aux(22) =< aux(42)
aux(21) =< aux(43)+1
aux(29) =< aux(43)
aux(26) =< aux(43)*2
s(57) =< it(27)*aux(43)
s(56) =< it(27)*aux(42)
s(72) =< it(27)*aux(32)
s(60) =< it(27)*aux(22)
s(58) =< it(27)*aux(21)
s(68) =< it(27)*aux(29)
s(64) =< it(27)*aux(26)
s(70) =< s(58)
s(70) =< s(72)
s(70) =< s(60)
s(66) =< s(58)
s(66) =< s(68)
s(66) =< s(60)
s(62) =< s(58)
s(62) =< s(64)
s(62) =< s(60)
s(59) =< s(58)
s(59) =< s(60)
s(55) =< s(58)
s(55) =< s(57)
s(55) =< s(56)

  with precondition: [E=3,B>=0,A>=B+6] 

* Chain [[27,28,29,30,31,32,33],38]: 13*it(27)+2*s(55)+2*s(59)+2*s(62)+2*s(66)+2*s(70)+4*s(83)+1
  Such that:aux(44) =< A-B
aux(45) =< A/2
aux(46) =< A/2-B/2
s(81) =< aux(44)
s(81) =< aux(46)
s(83) =< s(81)
s(83) =< aux(45)
it(27) =< aux(44)
aux(32) =< aux(46)-1/2
aux(22) =< aux(45)
aux(21) =< aux(46)+1
aux(29) =< aux(46)
aux(26) =< aux(46)*2
s(57) =< it(27)*aux(46)
s(56) =< it(27)*aux(45)
s(72) =< it(27)*aux(32)
s(60) =< it(27)*aux(22)
s(58) =< it(27)*aux(21)
s(68) =< it(27)*aux(29)
s(64) =< it(27)*aux(26)
s(70) =< s(58)
s(70) =< s(72)
s(70) =< s(60)
s(66) =< s(58)
s(66) =< s(68)
s(66) =< s(60)
s(62) =< s(58)
s(62) =< s(64)
s(62) =< s(60)
s(59) =< s(58)
s(59) =< s(60)
s(55) =< s(58)
s(55) =< s(57)
s(55) =< s(56)

  with precondition: [E=3,B>=0,A>=B+7] 

* Chain [[27,28,29,30,31,32,33],35,42]: 13*it(27)+2*s(55)+2*s(59)+2*s(62)+2*s(66)+2*s(70)+2
  Such that:aux(19) =< A/2
aux(20) =< A/2-B/2
aux(47) =< A-B
it(27) =< aux(47)
aux(32) =< aux(20)-1/2
aux(22) =< aux(19)
aux(21) =< aux(20)+1
aux(29) =< aux(20)
aux(26) =< aux(20)*2
s(57) =< it(27)*aux(20)
s(56) =< it(27)*aux(19)
s(72) =< it(27)*aux(32)
s(60) =< it(27)*aux(22)
s(58) =< it(27)*aux(21)
s(68) =< it(27)*aux(29)
s(64) =< it(27)*aux(26)
s(70) =< s(58)
s(70) =< s(72)
s(70) =< s(60)
s(66) =< s(58)
s(66) =< s(68)
s(66) =< s(60)
s(62) =< s(58)
s(62) =< s(64)
s(62) =< s(60)
s(59) =< s(58)
s(59) =< s(60)
s(55) =< s(58)
s(55) =< s(57)
s(55) =< s(56)

  with precondition: [E=3,B>=0,A>=B+4] 

* Chain [[27,28,29,30,31,32,33],35,41]: 13*it(27)+2*s(55)+2*s(59)+2*s(62)+2*s(66)+2*s(70)+2
  Such that:aux(19) =< A/2
aux(20) =< A/2-B/2
aux(48) =< A-B
it(27) =< aux(48)
aux(32) =< aux(20)-1/2
aux(22) =< aux(19)
aux(21) =< aux(20)+1
aux(29) =< aux(20)
aux(26) =< aux(20)*2
s(57) =< it(27)*aux(20)
s(56) =< it(27)*aux(19)
s(72) =< it(27)*aux(32)
s(60) =< it(27)*aux(22)
s(58) =< it(27)*aux(21)
s(68) =< it(27)*aux(29)
s(64) =< it(27)*aux(26)
s(70) =< s(58)
s(70) =< s(72)
s(70) =< s(60)
s(66) =< s(58)
s(66) =< s(68)
s(66) =< s(60)
s(62) =< s(58)
s(62) =< s(64)
s(62) =< s(60)
s(59) =< s(58)
s(59) =< s(60)
s(55) =< s(58)
s(55) =< s(57)
s(55) =< s(56)

  with precondition: [E=3,B>=0,A>=B+4] 

* Chain [[27,28,29,30,31,32,33],35,36,42]: 13*it(27)+2*s(55)+2*s(59)+2*s(62)+2*s(66)+2*s(70)+3
  Such that:aux(19) =< A/2
aux(20) =< A/2-B/2
aux(49) =< A-B
it(27) =< aux(49)
aux(32) =< aux(20)-1/2
aux(22) =< aux(19)
aux(21) =< aux(20)+1
aux(29) =< aux(20)
aux(26) =< aux(20)*2
s(57) =< it(27)*aux(20)
s(56) =< it(27)*aux(19)
s(72) =< it(27)*aux(32)
s(60) =< it(27)*aux(22)
s(58) =< it(27)*aux(21)
s(68) =< it(27)*aux(29)
s(64) =< it(27)*aux(26)
s(70) =< s(58)
s(70) =< s(72)
s(70) =< s(60)
s(66) =< s(58)
s(66) =< s(68)
s(66) =< s(60)
s(62) =< s(58)
s(62) =< s(64)
s(62) =< s(60)
s(59) =< s(58)
s(59) =< s(60)
s(55) =< s(58)
s(55) =< s(57)
s(55) =< s(56)

  with precondition: [E=3,B>=0,A>=B+4] 

* Chain [[27,28,29,30,31,32,33],35,36,37]: 13*it(27)+2*s(55)+2*s(59)+2*s(62)+2*s(66)+2*s(70)+3
  Such that:aux(34) =< -B+F
aux(33) =< -B+F+1
aux(20) =< -B/2+F/2+1/2
aux(19) =< F/2+1/2
it(27) =< aux(33)
it(27) =< aux(34)
aux(32) =< aux(20)-1/2
aux(22) =< aux(19)
aux(21) =< aux(20)+1
aux(29) =< aux(20)
aux(26) =< aux(20)*2
s(57) =< it(27)*aux(20)
s(56) =< it(27)*aux(19)
s(72) =< it(27)*aux(32)
s(60) =< it(27)*aux(22)
s(58) =< it(27)*aux(21)
s(68) =< it(27)*aux(29)
s(64) =< it(27)*aux(26)
s(70) =< s(58)
s(70) =< s(72)
s(70) =< s(60)
s(66) =< s(58)
s(66) =< s(68)
s(66) =< s(60)
s(62) =< s(58)
s(62) =< s(64)
s(62) =< s(60)
s(59) =< s(58)
s(59) =< s(60)
s(55) =< s(58)
s(55) =< s(57)
s(55) =< s(56)

  with precondition: [E=4,G=0,H=1,A=F+1,B>=0,A>=B+4] 

* Chain [[27,28,29,30,31,32,33],34,42]: 13*it(27)+2*s(55)+2*s(59)+2*s(62)+2*s(66)+2*s(70)+2
  Such that:aux(19) =< A/2
aux(20) =< A/2-B/2
aux(50) =< A-B
it(27) =< aux(50)
aux(32) =< aux(20)-1/2
aux(22) =< aux(19)
aux(21) =< aux(20)+1
aux(29) =< aux(20)
aux(26) =< aux(20)*2
s(57) =< it(27)*aux(20)
s(56) =< it(27)*aux(19)
s(72) =< it(27)*aux(32)
s(60) =< it(27)*aux(22)
s(58) =< it(27)*aux(21)
s(68) =< it(27)*aux(29)
s(64) =< it(27)*aux(26)
s(70) =< s(58)
s(70) =< s(72)
s(70) =< s(60)
s(66) =< s(58)
s(66) =< s(68)
s(66) =< s(60)
s(62) =< s(58)
s(62) =< s(64)
s(62) =< s(60)
s(59) =< s(58)
s(59) =< s(60)
s(55) =< s(58)
s(55) =< s(57)
s(55) =< s(56)

  with precondition: [E=3,B>=0,A>=B+4] 

* Chain [[27,28,29,30,31,32,33],34,41]: 13*it(27)+2*s(55)+2*s(59)+2*s(62)+2*s(66)+2*s(70)+2
  Such that:aux(19) =< A/2
aux(20) =< A/2-B/2
aux(51) =< A-B
it(27) =< aux(51)
aux(32) =< aux(20)-1/2
aux(22) =< aux(19)
aux(21) =< aux(20)+1
aux(29) =< aux(20)
aux(26) =< aux(20)*2
s(57) =< it(27)*aux(20)
s(56) =< it(27)*aux(19)
s(72) =< it(27)*aux(32)
s(60) =< it(27)*aux(22)
s(58) =< it(27)*aux(21)
s(68) =< it(27)*aux(29)
s(64) =< it(27)*aux(26)
s(70) =< s(58)
s(70) =< s(72)
s(70) =< s(60)
s(66) =< s(58)
s(66) =< s(68)
s(66) =< s(60)
s(62) =< s(58)
s(62) =< s(64)
s(62) =< s(60)
s(59) =< s(58)
s(59) =< s(60)
s(55) =< s(58)
s(55) =< s(57)
s(55) =< s(56)

  with precondition: [E=3,B>=0,A>=B+4] 

* Chain [[27,28,29,30,31,32,33],34,36,42]: 13*it(27)+2*s(55)+2*s(59)+2*s(62)+2*s(66)+2*s(70)+3
  Such that:aux(19) =< A/2
aux(20) =< A/2-B/2
aux(52) =< A-B
it(27) =< aux(52)
aux(32) =< aux(20)-1/2
aux(22) =< aux(19)
aux(21) =< aux(20)+1
aux(29) =< aux(20)
aux(26) =< aux(20)*2
s(57) =< it(27)*aux(20)
s(56) =< it(27)*aux(19)
s(72) =< it(27)*aux(32)
s(60) =< it(27)*aux(22)
s(58) =< it(27)*aux(21)
s(68) =< it(27)*aux(29)
s(64) =< it(27)*aux(26)
s(70) =< s(58)
s(70) =< s(72)
s(70) =< s(60)
s(66) =< s(58)
s(66) =< s(68)
s(66) =< s(60)
s(62) =< s(58)
s(62) =< s(64)
s(62) =< s(60)
s(59) =< s(58)
s(59) =< s(60)
s(55) =< s(58)
s(55) =< s(57)
s(55) =< s(56)

  with precondition: [E=3,B>=0,A>=B+4] 

* Chain [[27,28,29,30,31,32,33],34,36,37]: 13*it(27)+2*s(55)+2*s(59)+2*s(62)+2*s(66)+2*s(70)+3
  Such that:aux(34) =< -B+F
aux(33) =< -B+F+1
aux(20) =< -B/2+F/2+1/2
aux(19) =< F/2+1/2
it(27) =< aux(33)
it(27) =< aux(34)
aux(32) =< aux(20)-1/2
aux(22) =< aux(19)
aux(21) =< aux(20)+1
aux(29) =< aux(20)
aux(26) =< aux(20)*2
s(57) =< it(27)*aux(20)
s(56) =< it(27)*aux(19)
s(72) =< it(27)*aux(32)
s(60) =< it(27)*aux(22)
s(58) =< it(27)*aux(21)
s(68) =< it(27)*aux(29)
s(64) =< it(27)*aux(26)
s(70) =< s(58)
s(70) =< s(72)
s(70) =< s(60)
s(66) =< s(58)
s(66) =< s(68)
s(66) =< s(60)
s(62) =< s(58)
s(62) =< s(64)
s(62) =< s(60)
s(59) =< s(58)
s(59) =< s(60)
s(55) =< s(58)
s(55) =< s(57)
s(55) =< s(56)

  with precondition: [E=4,G=0,H=1,A=F+1,B>=0,A>=B+4] 

* Chain [43]: 1
  with precondition: [E=3,B+3=A,B>=0] 

* Chain [42]: 0
  with precondition: [E=3,A>=3,B>=0,A>=B+1] 

* Chain [41]: 0
  with precondition: [E=3,A>=3,B>=0,A>=B+2] 

* Chain [40]: 2*s(77)+1
  Such that:s(74) =< A-B
s(76) =< A/2
s(75) =< A/2-B/2
s(77) =< s(75)
s(77) =< s(74)
s(77) =< s(76)

  with precondition: [E=3,B>=0,A>=B+4] 

* Chain [39]: 4*s(80)+1
  Such that:s(79) =< A/2
s(78) =< A/2-B/2
s(80) =< s(78)
s(80) =< s(79)

  with precondition: [E=3,B>=0,A>=B+5] 

* Chain [38]: 4*s(83)+1
  Such that:s(82) =< A/2
s(81) =< A/2-B/2
s(83) =< s(81)
s(83) =< s(82)

  with precondition: [E=3,B>=0,A>=B+6] 

* Chain [35,42]: 2
  with precondition: [E=3,A=B+3,A>=3] 

* Chain [35,41]: 2
  with precondition: [E=3,A=B+3,A>=3] 

* Chain [35,36,42]: 3
  with precondition: [E=3,A=B+3,A>=3] 

* Chain [35,36,37]: 3
  with precondition: [E=4,G=0,H=1,A=B+3,A=F+1,A>=3] 

* Chain [34,42]: 2
  with precondition: [E=3,A=B+3,A>=3] 

* Chain [34,41]: 2
  with precondition: [E=3,A=B+3,A>=3] 

* Chain [34,36,42]: 3
  with precondition: [E=3,A=B+3,A>=3] 

* Chain [34,36,37]: 3
  with precondition: [E=4,G=0,H=1,A=B+3,A=F+1,A>=3] 


#### Cost of chains of evalrealheapsortstep2bb11in_loop_cont(A,B,C,D,E,F):
* Chain [45]: 0
  with precondition: [A=3,B>=3] 

* Chain [44]: 0
  with precondition: [A=4,B>=3] 


#### Cost of chains of evalrealheapsortstep2bbin(A,B,C,D,E):
* Chain [51]: 3
  with precondition: [A=3] 

* Chain [50]: 0
  with precondition: [A>=3] 

* Chain [49]: 2*s(376)+143*s(377)+22*s(390)+44*s(391)+22*s(392)+22*s(394)+3
  Such that:aux(67) =< A
aux(68) =< A/2
s(377) =< aux(67)
s(378) =< aux(68)-1/2
s(379) =< aux(68)
s(380) =< aux(68)+1
s(382) =< aux(68)*2
s(383) =< s(377)*aux(68)
s(385) =< s(377)*s(378)
s(386) =< s(377)*s(379)
s(387) =< s(377)*s(380)
s(389) =< s(377)*s(382)
s(390) =< s(387)
s(390) =< s(385)
s(390) =< s(386)
s(391) =< s(387)
s(391) =< s(386)
s(392) =< s(387)
s(392) =< s(389)
s(392) =< s(386)
s(394) =< s(387)
s(394) =< s(383)
s(376) =< aux(68)
s(376) =< aux(67)

  with precondition: [A>=4] 

* Chain [48]: 2*s(421)+13*s(422)+2*s(435)+4*s(436)+2*s(437)+2*s(439)+4*s(440)+1
  Such that:s(417) =< A
aux(69) =< A/2
s(420) =< s(417)
s(420) =< aux(69)
s(421) =< s(420)
s(421) =< s(417)
s(421) =< aux(69)
s(422) =< s(417)
s(423) =< aux(69)-1/2
s(424) =< aux(69)
s(425) =< aux(69)+1
s(427) =< aux(69)*2
s(428) =< s(422)*aux(69)
s(430) =< s(422)*s(423)
s(431) =< s(422)*s(424)
s(432) =< s(422)*s(425)
s(434) =< s(422)*s(427)
s(435) =< s(432)
s(435) =< s(430)
s(435) =< s(431)
s(436) =< s(432)
s(436) =< s(431)
s(437) =< s(432)
s(437) =< s(434)
s(437) =< s(431)
s(439) =< s(432)
s(439) =< s(428)
s(440) =< aux(69)

  with precondition: [A>=5] 

* Chain [47]: 4*s(445)+13*s(446)+2*s(459)+4*s(460)+2*s(461)+2*s(463)+4*s(464)+1
  Such that:s(441) =< A
aux(70) =< A/2
s(444) =< s(441)
s(444) =< aux(70)
s(445) =< s(444)
s(445) =< aux(70)
s(446) =< s(441)
s(447) =< aux(70)-1/2
s(448) =< aux(70)
s(449) =< aux(70)+1
s(451) =< aux(70)*2
s(452) =< s(446)*aux(70)
s(454) =< s(446)*s(447)
s(455) =< s(446)*s(448)
s(456) =< s(446)*s(449)
s(458) =< s(446)*s(451)
s(459) =< s(456)
s(459) =< s(454)
s(459) =< s(455)
s(460) =< s(456)
s(460) =< s(455)
s(461) =< s(456)
s(461) =< s(458)
s(461) =< s(455)
s(463) =< s(456)
s(463) =< s(452)
s(464) =< aux(70)

  with precondition: [A>=6] 

* Chain [46]: 4*s(469)+13*s(470)+2*s(483)+4*s(484)+2*s(485)+2*s(487)+1
  Such that:s(465) =< A
aux(71) =< A/2
s(468) =< s(465)
s(468) =< aux(71)
s(469) =< s(468)
s(469) =< aux(71)
s(470) =< s(465)
s(471) =< aux(71)-1/2
s(472) =< aux(71)
s(473) =< aux(71)+1
s(475) =< aux(71)*2
s(476) =< s(470)*aux(71)
s(478) =< s(470)*s(471)
s(479) =< s(470)*s(472)
s(480) =< s(470)*s(473)
s(482) =< s(470)*s(475)
s(483) =< s(480)
s(483) =< s(478)
s(483) =< s(479)
s(484) =< s(480)
s(484) =< s(479)
s(485) =< s(480)
s(485) =< s(482)
s(485) =< s(479)
s(487) =< s(480)
s(487) =< s(476)

  with precondition: [A>=7] 


#### Cost of chains of evalrealheapsortstep2entryin(A,B,C,D,E):
* Chain [58]: 3
  with precondition: [A=3] 

* Chain [57]: 0
  with precondition: [2>=A] 

* Chain [56]: 0
  with precondition: [A>=3] 

* Chain [55]: 143*s(490)+22*s(500)+44*s(501)+22*s(502)+22*s(503)+2*s(504)+3
  Such that:s(488) =< A
s(489) =< A/2
s(490) =< s(488)
s(491) =< s(489)-1/2
s(492) =< s(489)
s(493) =< s(489)+1
s(494) =< s(489)*2
s(495) =< s(490)*s(489)
s(496) =< s(490)*s(491)
s(497) =< s(490)*s(492)
s(498) =< s(490)*s(493)
s(499) =< s(490)*s(494)
s(500) =< s(498)
s(500) =< s(496)
s(500) =< s(497)
s(501) =< s(498)
s(501) =< s(497)
s(502) =< s(498)
s(502) =< s(499)
s(502) =< s(497)
s(503) =< s(498)
s(503) =< s(495)
s(504) =< s(489)
s(504) =< s(488)

  with precondition: [A>=4] 

* Chain [54]: 2*s(508)+13*s(509)+2*s(519)+4*s(520)+2*s(521)+2*s(522)+4*s(523)+1
  Such that:s(505) =< A
s(506) =< A/2
s(507) =< s(505)
s(507) =< s(506)
s(508) =< s(507)
s(508) =< s(505)
s(508) =< s(506)
s(509) =< s(505)
s(510) =< s(506)-1/2
s(511) =< s(506)
s(512) =< s(506)+1
s(513) =< s(506)*2
s(514) =< s(509)*s(506)
s(515) =< s(509)*s(510)
s(516) =< s(509)*s(511)
s(517) =< s(509)*s(512)
s(518) =< s(509)*s(513)
s(519) =< s(517)
s(519) =< s(515)
s(519) =< s(516)
s(520) =< s(517)
s(520) =< s(516)
s(521) =< s(517)
s(521) =< s(518)
s(521) =< s(516)
s(522) =< s(517)
s(522) =< s(514)
s(523) =< s(506)

  with precondition: [A>=5] 

* Chain [53]: 4*s(527)+13*s(528)+2*s(538)+4*s(539)+2*s(540)+2*s(541)+4*s(542)+1
  Such that:s(524) =< A
s(525) =< A/2
s(526) =< s(524)
s(526) =< s(525)
s(527) =< s(526)
s(527) =< s(525)
s(528) =< s(524)
s(529) =< s(525)-1/2
s(530) =< s(525)
s(531) =< s(525)+1
s(532) =< s(525)*2
s(533) =< s(528)*s(525)
s(534) =< s(528)*s(529)
s(535) =< s(528)*s(530)
s(536) =< s(528)*s(531)
s(537) =< s(528)*s(532)
s(538) =< s(536)
s(538) =< s(534)
s(538) =< s(535)
s(539) =< s(536)
s(539) =< s(535)
s(540) =< s(536)
s(540) =< s(537)
s(540) =< s(535)
s(541) =< s(536)
s(541) =< s(533)
s(542) =< s(525)

  with precondition: [A>=6] 

* Chain [52]: 4*s(546)+13*s(547)+2*s(557)+4*s(558)+2*s(559)+2*s(560)+1
  Such that:s(543) =< A
s(544) =< A/2
s(545) =< s(543)
s(545) =< s(544)
s(546) =< s(545)
s(546) =< s(544)
s(547) =< s(543)
s(548) =< s(544)-1/2
s(549) =< s(544)
s(550) =< s(544)+1
s(551) =< s(544)*2
s(552) =< s(547)*s(544)
s(553) =< s(547)*s(548)
s(554) =< s(547)*s(549)
s(555) =< s(547)*s(550)
s(556) =< s(547)*s(551)
s(557) =< s(555)
s(557) =< s(553)
s(557) =< s(554)
s(558) =< s(555)
s(558) =< s(554)
s(559) =< s(555)
s(559) =< s(556)
s(559) =< s(554)
s(560) =< s(555)
s(560) =< s(552)

  with precondition: [A>=7] 


#### Cost of chains of evalrealheapsortstep2start(A,B,C,D,E):
* Chain [65]: 3
  with precondition: [A=3] 

* Chain [64]: 0
  with precondition: [2>=A] 

* Chain [63]: 0
  with precondition: [A>=3] 

* Chain [62]: 143*s(563)+22*s(573)+44*s(574)+22*s(575)+22*s(576)+2*s(577)+3
  Such that:s(561) =< A
s(562) =< A/2
s(563) =< s(561)
s(564) =< s(562)-1/2
s(565) =< s(562)
s(566) =< s(562)+1
s(567) =< s(562)*2
s(568) =< s(563)*s(562)
s(569) =< s(563)*s(564)
s(570) =< s(563)*s(565)
s(571) =< s(563)*s(566)
s(572) =< s(563)*s(567)
s(573) =< s(571)
s(573) =< s(569)
s(573) =< s(570)
s(574) =< s(571)
s(574) =< s(570)
s(575) =< s(571)
s(575) =< s(572)
s(575) =< s(570)
s(576) =< s(571)
s(576) =< s(568)
s(577) =< s(562)
s(577) =< s(561)

  with precondition: [A>=4] 

* Chain [61]: 2*s(581)+13*s(582)+2*s(592)+4*s(593)+2*s(594)+2*s(595)+4*s(596)+1
  Such that:s(578) =< A
s(579) =< A/2
s(580) =< s(578)
s(580) =< s(579)
s(581) =< s(580)
s(581) =< s(578)
s(581) =< s(579)
s(582) =< s(578)
s(583) =< s(579)-1/2
s(584) =< s(579)
s(585) =< s(579)+1
s(586) =< s(579)*2
s(587) =< s(582)*s(579)
s(588) =< s(582)*s(583)
s(589) =< s(582)*s(584)
s(590) =< s(582)*s(585)
s(591) =< s(582)*s(586)
s(592) =< s(590)
s(592) =< s(588)
s(592) =< s(589)
s(593) =< s(590)
s(593) =< s(589)
s(594) =< s(590)
s(594) =< s(591)
s(594) =< s(589)
s(595) =< s(590)
s(595) =< s(587)
s(596) =< s(579)

  with precondition: [A>=5] 

* Chain [60]: 4*s(600)+13*s(601)+2*s(611)+4*s(612)+2*s(613)+2*s(614)+4*s(615)+1
  Such that:s(597) =< A
s(598) =< A/2
s(599) =< s(597)
s(599) =< s(598)
s(600) =< s(599)
s(600) =< s(598)
s(601) =< s(597)
s(602) =< s(598)-1/2
s(603) =< s(598)
s(604) =< s(598)+1
s(605) =< s(598)*2
s(606) =< s(601)*s(598)
s(607) =< s(601)*s(602)
s(608) =< s(601)*s(603)
s(609) =< s(601)*s(604)
s(610) =< s(601)*s(605)
s(611) =< s(609)
s(611) =< s(607)
s(611) =< s(608)
s(612) =< s(609)
s(612) =< s(608)
s(613) =< s(609)
s(613) =< s(610)
s(613) =< s(608)
s(614) =< s(609)
s(614) =< s(606)
s(615) =< s(598)

  with precondition: [A>=6] 

* Chain [59]: 4*s(619)+13*s(620)+2*s(630)+4*s(631)+2*s(632)+2*s(633)+1
  Such that:s(616) =< A
s(617) =< A/2
s(618) =< s(616)
s(618) =< s(617)
s(619) =< s(618)
s(619) =< s(617)
s(620) =< s(616)
s(621) =< s(617)-1/2
s(622) =< s(617)
s(623) =< s(617)+1
s(624) =< s(617)*2
s(625) =< s(620)*s(617)
s(626) =< s(620)*s(621)
s(627) =< s(620)*s(622)
s(628) =< s(620)*s(623)
s(629) =< s(620)*s(624)
s(630) =< s(628)
s(630) =< s(626)
s(630) =< s(627)
s(631) =< s(628)
s(631) =< s(627)
s(632) =< s(628)
s(632) =< s(629)
s(632) =< s(627)
s(633) =< s(628)
s(633) =< s(625)

  with precondition: [A>=7] 


Closed-form bounds of evalrealheapsortstep2start(A,B,C,D,E): 
-------------------------------------
* Chain [65] with precondition: [A=3] 
    - Upper bound: 3 
    - Complexity: constant 
* Chain [64] with precondition: [2>=A] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [63] with precondition: [A>=3] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [62] with precondition: [A>=4] 
    - Upper bound: 253*A+3+A/2*(110*A)+A 
    - Complexity: n^2 
* Chain [61] with precondition: [A>=5] 
    - Upper bound: 25*A+1+A/2*(10*A)+2*A 
    - Complexity: n^2 
* Chain [60] with precondition: [A>=6] 
    - Upper bound: 27*A+1+A/2*(10*A)+2*A 
    - Complexity: n^2 
* Chain [59] with precondition: [A>=7] 
    - Upper bound: 27*A+1+A/2*(10*A) 
    - Complexity: n^2 

### Maximum cost of evalrealheapsortstep2start(A,B,C,D,E): max([2,nat(A)*10*nat(A/2)+nat(A)*25+max([nat(A/2)*4,nat(A/2)*2+max([nat(A/2)*2,nat(A)*226+2+nat(A)*100*nat(A/2)])+nat(A)*2])])+1 
Asymptotic class: n^2 
* Total analysis performed in 699 ms.

