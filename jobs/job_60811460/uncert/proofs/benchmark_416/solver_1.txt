WORST_CASE(INF,?)

# LoAT Proof:
WORST_CASE(INF,?)

WORST_CASE(INF,?)
Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f1 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it2, i5'=1
   1: (-2+i1 == 0 /\ -1+i5 >= 0 /\ -101+i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=-10+i4, i5'=-1+i5
   2: (-2+i1 == 0 /\ 100-i4 >= 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=11+i4, i5'=1+i5

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2
2 -> 1, 2 -> 2

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ 100-i4 >= 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Unbounded

Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ 100-i4 >= 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=11+i4, i5'=1+i5
	New rule:
	(111-i4-11*it12 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0) /\ i1'=i1, i3'=i3+it12, i4'=i4+11*it12, i5'=it12+i5

		-2+i1 >= 0 [0]: unchanged
		
		100-i4 >= 0 [0]: montonic decrease yields 111-i4-11*it12 >= 0
		
		-1+i5 >= 0 [0]: monotonic increase yields -1+i5 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 100-i4 >= 0 -> 111-i4-11*it12 >= 0, -1+i5 >= 0 -> -1+i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(111-i4-11*it12 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0) /\ i1'=i1, i3'=i3+it12, i4'=i4+11*it12, i5'=it12+i5
	New rule:
	(111-i4-11*it12 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0) /\ i3'=i3+it12, i4'=i4+11*it12, i5'=it12+i5

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f1 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it2, i5'=1
   1: (-2+i1 == 0 /\ -1+i5 >= 0 /\ -101+i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=-10+i4, i5'=-1+i5
   2: (-2+i1 == 0 /\ 100-i4 >= 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=11+i4, i5'=1+i5
   3: (111-i4-11*it12 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0) /\ i3'=i3+it12, i4'=i4+11*it12, i5'=it12+i5

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3
1 -> 1, 1 -> 2, 1 -> 3
2 -> 1, 2 -> 2, 2 -> 3
3 -> 1, 3 -> 2

	Trace

	0[(-1+i1 == 0)]
	3[(111-i4-11*it12 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 3[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	3[(111-i4-11*it12 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0)]
	1[(-2+i1 == 0 /\ -1+i5 >= 0 /\ -101+i4 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 3[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -1+i5 >= 0 /\ -101+i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=-10+i4, i5'=-1+i5
	New rule:
	(-it38+i5 >= 0 /\ -1+it38 >= 0 /\ -2+i1 >= 0 /\ -91-10*it38+i4 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it38, i4'=-10*it38+i4, i5'=-it38+i5

		-2+i1 >= 0 [0]: unchanged
		
		-1+i5 >= 0 [0]: montonic decrease yields -it38+i5 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		-101+i4 >= 0 [0]: montonic decrease yields -91-10*it38+i4 >= 0
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -1+i5 >= 0 -> -it38+i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -101+i4 >= 0 -> -91-10*it38+i4 >= 0}

	Removed Trivial Updates

	Original rule:
	(-it38+i5 >= 0 /\ -1+it38 >= 0 /\ -2+i1 >= 0 /\ -91-10*it38+i4 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it38, i4'=-10*it38+i4, i5'=-it38+i5
	New rule:
	(-it38+i5 >= 0 /\ -1+it38 >= 0 /\ -2+i1 >= 0 /\ -91-10*it38+i4 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it38, i4'=-10*it38+i4, i5'=-it38+i5
	
	Instantiation

	Original rule:
	(-it38+i5 >= 0 /\ -1+it38 >= 0 /\ -2+i1 >= 0 /\ -91-10*it38+i4 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it38, i4'=-10*it38+i4, i5'=-it38+i5
	New rule:
	(0 >= 0 /\ -91+i4-10*i5 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i5, i4'=i4-10*i5, i5'=0

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f1 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it2, i5'=1
   1: (-2+i1 == 0 /\ -1+i5 >= 0 /\ -101+i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=-10+i4, i5'=-1+i5
   2: (-2+i1 == 0 /\ 100-i4 >= 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=11+i4, i5'=1+i5
   3: (111-i4-11*it12 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0) /\ i3'=i3+it12, i4'=i4+11*it12, i5'=it12+i5
   4: (0 >= 0 /\ -91+i4-10*i5 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i5, i4'=i4-10*i5, i5'=0

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3, 0 -> 4
1 -> 1, 1 -> 2, 1 -> 3, 1 -> 4
2 -> 1, 2 -> 2, 2 -> 3, 2 -> 4
3 -> 1, 3 -> 2, 3 -> 4
4 -> 1, 4 -> 2, 4 -> 3

	Trace

	0[(-1+i1 == 0)]
	3[(111-i4-11*it12 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0)]
	4[(0 >= 0 /\ -91+i4-10*i5 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 3[T]}
	{1[T], 4[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	3[(111-i4-11*it12 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 3[T], 4[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	3[(111-i4-11*it12 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0)]
	1[(-2+i1 == 0 /\ -1+i5 >= 0 /\ -101+i4 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 3[T], 4[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	3[(111-i4-11*it12 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 2[T], 3[T], 4[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{3[T]}
	
Step with 4

	Trace

	0[(-1+i1 == 0)]
	4[(0 >= 0 /\ -91+i4-10*i5 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{4[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{3[T], 4[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ -1+i5 >= 0 /\ -101+i4 >= 0)]
	
	Blocked

	{}
	{3[T], 4[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 3[T], 4[T]}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ 100-i4 >= 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{1[T], 3[T], 4[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 2[T], 3[T], 4[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Unbounded


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  C
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(C, 1)
  t₁: l1(X₀, X₁) → l1(X₀-10, X₁-1) :|: 1 ≤ X₁ ∧ 101 ≤ X₀
  t₂: l1(X₀, X₁) → l1(11+X₀, 1+X₁) :|: X₀ ≤ 100 ∧ 1 ≤ X₁


Preprocessing
  Found invariant 0 ≤ X₁ for location l1


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  C
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(C, 1)
  t₁: l1(X₀, X₁) → l1(X₀-10, X₁-1) :|: 1 ≤ X₁ ∧ 101 ≤ X₀ ∧ 0 ≤ X₁
  t₂: l1(X₀, X₁) → l1(11+X₀, 1+X₁) :|: X₀ ≤ 100 ∧ 1 ≤ X₁ ∧ 0 ≤ X₁


  Found invariant X₁ ≤ 0 ∧ 91+X₁ ≤ X₀ ∧ 0 ≤ X₁ ∧ 91 ≤ X₀+X₁ ∧ 91 ≤ X₀ for location l1_v2


  Found invariant 2 ≤ X₁ ∧ 104 ≤ X₀+X₁ ∧ X₀ ≤ 109+X₁ ∧ X₀ ≤ 111 ∧ 102 ≤ X₀ for location l1_v3


  Found invariant 2 ≤ X₁ ∧ X₀ ≤ 109+X₁ ∧ X₀ ≤ 111 for location l1_v1


  Found invariant X₁ ≤ 1 ∧ 1 ≤ X₁ for location l1


  Found invariant 1 ≤ X₁ ∧ 92 ≤ X₀+X₁ ∧ X₀ ≤ 100+X₁ ∧ X₀ ≤ 101 ∧ 91 ≤ X₀ for location l1_v4


  Found invariant 0 ≤ X₁ ∧ 91 ≤ X₀+X₁ ∧ X₀ ≤ 91+X₁ ∧ X₀ ≤ 91 ∧ 91 ≤ X₀ for location l1_v5


  Cut unsatisfiable transition [t₄₉: l1_v2→l1_v3; t₅₀: l1_v2→l1_v2; t₅₅: l1_v5→l1_v5]


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₀: 1 {O(1)}
    t₁: inf {Infinity}
    t₂: inf {Infinity}


Costbounds
  Overall costbound: inf {Infinity}
    t₀: 1 {O(1)}
    t₁: inf {Infinity}
    t₂: inf {Infinity}


Sizebounds
    t₀, X₁: 1 {O(1)}

