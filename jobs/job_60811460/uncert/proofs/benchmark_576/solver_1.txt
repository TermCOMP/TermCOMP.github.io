WORST_CASE(?,O(1))

# LoAT Proof:
Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f8 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=2, i5'=1, i6'=2

Dependency graph:

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l1(2, 1, 2)


Preprocessing
  Eliminate variables [X₀; X₁; X₂] that do not contribute to the problem


Problem after Preprocessing
  Start:  l0
  Program_Vars:  
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₁: l0 → l1


All Bounds
Timebounds
  Overall timebound:1 {O(1)}
    t₁: 1 {O(1)}


Costbounds
  Overall costbound: 1 {O(1)}
    t₁: 1 {O(1)}


Sizebounds

