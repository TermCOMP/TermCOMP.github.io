WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [f2/7]
1. non_recursive  : [exit_location/1]
2. non_recursive  : [f300/4]
3. non_recursive  : [f2_loop_cont/5]
4. non_recursive  : [f1/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into f2/7
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is partially evaluated into f2_loop_cont/5
4. SCC is partially evaluated into f1/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations f2/7 
* CE 5 is refined into CE [8] 
* CE 4 is refined into CE [9] 
* CE 3 is refined into CE [10] 
* CE 2 is refined into CE [11] 


### Cost equations --> "Loop" of f2/7 
* CEs [10] --> Loop 8 
* CEs [11] --> Loop 9 
* CEs [8] --> Loop 10 
* CEs [9] --> Loop 11 

### Ranking functions of CR f2(A,B,C,E,F,G,H) 
* RF of phase [8]: [-B+3]
* RF of phase [9]: [-A+2]

#### Partial ranking functions of CR f2(A,B,C,E,F,G,H) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    -B+3
* Partial RF of phase [9]:
  - RF of loop [9:1]:
    -A+2


### Specialization of cost equations f2_loop_cont/5 
* CE 7 is refined into CE [12] 
* CE 6 is refined into CE [13] 


### Cost equations --> "Loop" of f2_loop_cont/5 
* CEs [12] --> Loop 12 
* CEs [13] --> Loop 13 

### Ranking functions of CR f2_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR f2_loop_cont(A,B,C,D,E) 


### Specialization of cost equations f1/4 
* CE 1 is refined into CE [14,15,16,17,18,19,20,21] 


### Cost equations --> "Loop" of f1/4 
* CEs [17] --> Loop 14 
* CEs [16,21] --> Loop 15 
* CEs [15,20] --> Loop 16 
* CEs [14] --> Loop 17 
* CEs [19] --> Loop 18 
* CEs [18] --> Loop 19 

### Ranking functions of CR f1(A,B,C,E) 

#### Partial ranking functions of CR f1(A,B,C,E) 


Computing Bounds
=====================================

#### Cost of chains of f2(A,B,C,E,F,G,H):
* Chain [[9],[8],11]: 1*it(8)+1*it(9)+0
  Such that:it(9) =< -A+2
it(8) =< F

  with precondition: [E=2,G=3,A+3=B+F,1>=A,A>=B] 

* Chain [[9],[8],10]: 1*it(8)+1*it(9)+0
  Such that:it(9) =< -A+2
it(8) =< A-B+1

  with precondition: [E=3,1>=A,A>=B] 

* Chain [[9],11]: 1*it(9)+0
  Such that:it(9) =< -A+2

  with precondition: [E=2,F=2,A+G=B+2,1>=A,B>=A+1] 

* Chain [[9],10]: 1*it(9)+0
  Such that:it(9) =< -A+2

  with precondition: [E=3,1>=A] 

* Chain [[8],11]: 1*it(8)+0
  Such that:it(8) =< -A+F

  with precondition: [E=2,G=3,A+3=B+F,2>=B,A>=2] 

* Chain [[8],10]: 1*it(8)+0
  Such that:it(8) =< -B+3

  with precondition: [E=3,2>=B,A>=2] 

* Chain [11]: 0
  with precondition: [E=2,A=F,B=G,A>=2,B>=3] 

* Chain [10]: 0
  with precondition: [E=3] 


#### Cost of chains of f2_loop_cont(A,B,C,D,E):
* Chain [13]: 0
  with precondition: [A=2] 

* Chain [12]: 0
  with precondition: [A=3] 


#### Cost of chains of f1(A,B,C,E):
* Chain [19]: 0
  with precondition: [] 

* Chain [18]: 1*s(1)+0
  Such that:s(1) =< -A+2

  with precondition: [1>=A] 

* Chain [17]: 1*s(2)+0
  Such that:s(2) =< -A+2

  with precondition: [1>=A,B>=A+1] 

* Chain [16]: 2*s(3)+1*s(4)+1*s(6)+0
  Such that:s(6) =< A-B+1
s(4) =< A-B+3
aux(1) =< -A+2
s(3) =< aux(1)

  with precondition: [1>=A,A>=B] 

* Chain [15]: 2*s(7)+0
  Such that:aux(2) =< -B+3
s(7) =< aux(2)

  with precondition: [2>=B,A>=2] 

* Chain [14]: 0
  with precondition: [A>=2,B>=3] 


Closed-form bounds of f1(A,B,C,E): 
-------------------------------------
* Chain [19] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [18] with precondition: [1>=A] 
    - Upper bound: -A+2 
    - Complexity: n 
* Chain [17] with precondition: [1>=A,B>=A+1] 
    - Upper bound: -A+2 
    - Complexity: n 
* Chain [16] with precondition: [1>=A,A>=B] 
    - Upper bound: -2*B+8 
    - Complexity: n 
* Chain [15] with precondition: [2>=B,A>=2] 
    - Upper bound: -2*B+6 
    - Complexity: n 
* Chain [14] with precondition: [A>=2,B>=3] 
    - Upper bound: 0 
    - Complexity: constant 

### Maximum cost of f1(A,B,C,E): max([nat(-B+3)*2,nat(A-B+1)+nat(-A+2)+nat(A-B+3)+nat(-A+2)]) 
Asymptotic class: n 
* Total analysis performed in 66 ms.

