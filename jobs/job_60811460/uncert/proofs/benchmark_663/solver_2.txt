WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_abc_bb2_in/4,eval_abc_bb3_in/4]
1. recursive  : [eval_abc_8/8,eval_abc_9/8,eval_abc_bb1_in/8,eval_abc_bb2_in_loop_cont/9,eval_abc_bb4_in/8]
2. non_recursive  : [eval_abc_stop/5]
3. non_recursive  : [eval_abc_bb5_in/5]
4. non_recursive  : [exit_location/1]
5. non_recursive  : [eval_abc_bb1_in_loop_cont/6]
6. non_recursive  : [eval_abc_4/5]
7. non_recursive  : [eval_abc_3/5]
8. non_recursive  : [eval_abc_2/5]
9. non_recursive  : [eval_abc_1/5]
10. non_recursive  : [eval_abc_0/5]
11. non_recursive  : [eval_abc_bb0_in/5]
12. non_recursive  : [eval_abc_start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_abc_bb2_in/4
1. SCC is partially evaluated into eval_abc_bb1_in/8
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into eval_abc_bb1_in_loop_cont/6
6. SCC is partially evaluated into eval_abc_4/5
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is partially evaluated into eval_abc_start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_abc_bb2_in/4 
* CE 11 is refined into CE [12] 
* CE 10 is refined into CE [13] 
* CE 9 is refined into CE [14] 


### Cost equations --> "Loop" of eval_abc_bb2_in/4 
* CEs [14] --> Loop 12 
* CEs [12] --> Loop 13 
* CEs [13] --> Loop 14 

### Ranking functions of CR eval_abc_bb2_in(V_j_0,V_n,B,C) 
* RF of phase [12]: [-V_j_0+V_n+1]

#### Partial ranking functions of CR eval_abc_bb2_in(V_j_0,V_n,B,C) 
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    -V_j_0+V_n+1


### Specialization of cost equations eval_abc_bb1_in/8 
* CE 5 is refined into CE [15] 
* CE 3 is refined into CE [16,17] 
* CE 6 is refined into CE [18] 
* CE 4 is refined into CE [19] 


### Cost equations --> "Loop" of eval_abc_bb1_in/8 
* CEs [19] --> Loop 15 
* CEs [15] --> Loop 16 
* CEs [16,17] --> Loop 17 
* CEs [18] --> Loop 18 

### Ranking functions of CR eval_abc_bb1_in(V_3,V_i_0,V_j_0,V_n,B,C,D,E) 
* RF of phase [15]: [-V_i_0/2+V_n/2+1/2]

#### Partial ranking functions of CR eval_abc_bb1_in(V_3,V_i_0,V_j_0,V_n,B,C,D,E) 
* Partial RF of phase [15]:
  - RF of loop [15:1]:
    -V_i_0/2+V_n/2+1/2


### Specialization of cost equations eval_abc_bb1_in_loop_cont/6 
* CE 7 is refined into CE [20] 
* CE 8 is refined into CE [21] 


### Cost equations --> "Loop" of eval_abc_bb1_in_loop_cont/6 
* CEs [20] --> Loop 19 
* CEs [21] --> Loop 20 

### Ranking functions of CR eval_abc_bb1_in_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR eval_abc_bb1_in_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations eval_abc_4/5 
* CE 2 is refined into CE [22,23,24,25,26] 


### Cost equations --> "Loop" of eval_abc_4/5 
* CEs [24] --> Loop 21 
* CEs [23,26] --> Loop 22 
* CEs [25] --> Loop 23 
* CEs [22] --> Loop 24 

### Ranking functions of CR eval_abc_4(V_3,V_i_0,V_j_0,V_n,B) 

#### Partial ranking functions of CR eval_abc_4(V_3,V_i_0,V_j_0,V_n,B) 


### Specialization of cost equations eval_abc_start/5 
* CE 1 is refined into CE [27,28,29,30] 


### Cost equations --> "Loop" of eval_abc_start/5 
* CEs [30] --> Loop 25 
* CEs [29] --> Loop 26 
* CEs [28] --> Loop 27 
* CEs [27] --> Loop 28 

### Ranking functions of CR eval_abc_start(V_3,V_i_0,V_j_0,V_n,B) 

#### Partial ranking functions of CR eval_abc_start(V_3,V_i_0,V_j_0,V_n,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_abc_bb2_in(V_j_0,V_n,B,C):
* Chain [[12],14]: 1*it(12)+0
  Such that:it(12) =< -V_j_0+V_n+1

  with precondition: [B=2,V_j_0>=0,C>=V_j_0+2,C>=V_n+1,V_n+2>=C] 

* Chain [[12],13]: 1*it(12)+0
  Such that:it(12) =< -V_j_0+V_n+1

  with precondition: [B=3,V_j_0>=0,V_n>=V_j_0] 

* Chain [13]: 0
  with precondition: [B=3,V_j_0>=0,V_n>=0] 


#### Cost of chains of eval_abc_bb1_in(V_3,V_i_0,V_j_0,V_n,B,C,D,E):
* Chain [[15],18]: 1*it(15)+1*s(3)+0
  Such that:it(15) =< -V_i_0/2+V_n/2+1/2
aux(1) =< V_n+1
s(3) =< it(15)*aux(1)

  with precondition: [B=3,V_i_0>=0,V_n>=V_i_0] 

* Chain [[15],17]: 1*it(15)+1*s(3)+1*s(4)+0
  Such that:it(15) =< -V_i_0/2+V_n/2
aux(2) =< V_n+1
s(4) =< aux(2)
s(3) =< it(15)*aux(2)

  with precondition: [B=3,V_i_0>=0,V_n>=V_i_0+2] 

* Chain [[15],16]: 1*it(15)+1*s(3)+0
  Such that:it(15) =< -V_i_0/2+V_n/2+1/2
aux(1) =< V_n+1
s(3) =< it(15)*aux(1)

  with precondition: [B=4,C=D,V_i_0>=0,C>=V_i_0+2,C>=V_n+1,E>=V_n+1,V_n+2>=C,V_n+2>=E,V_i_0+2*E>=C+2] 

* Chain [18]: 0
  with precondition: [B=3,V_i_0>=0] 

* Chain [17]: 1*s(4)+0
  Such that:s(4) =< V_n+1

  with precondition: [B=3,V_i_0>=0,V_n>=V_i_0] 

* Chain [16]: 0
  with precondition: [B=4,C=V_3,E=V_j_0,V_i_0=D,V_i_0>=0,V_i_0>=V_n+1] 


#### Cost of chains of eval_abc_bb1_in_loop_cont(A,B,C,D,E,F):
* Chain [20]: 0
  with precondition: [A=3] 

* Chain [19]: 0
  with precondition: [A=4] 


#### Cost of chains of eval_abc_4(V_3,V_i_0,V_j_0,V_n,B):
* Chain [24]: 0
  with precondition: [] 

* Chain [23]: 0
  with precondition: [0>=V_n+1] 

* Chain [22]: 2*s(9)+1*s(11)+2*s(12)+0
  Such that:aux(4) =< V_n+1
aux(5) =< V_n/2+1/2
s(9) =< aux(5)
s(11) =< aux(4)
s(12) =< s(9)*aux(4)

  with precondition: [V_n>=0] 

* Chain [21]: 1*s(16)+1*s(18)+1*s(19)+0
  Such that:s(17) =< V_n+1
s(16) =< V_n/2
s(18) =< s(17)
s(19) =< s(16)*s(17)

  with precondition: [V_n>=2] 


#### Cost of chains of eval_abc_start(V_3,V_i_0,V_j_0,V_n,B):
* Chain [28]: 0
  with precondition: [] 

* Chain [27]: 0
  with precondition: [0>=V_n+1] 

* Chain [26]: 2*s(22)+1*s(23)+2*s(24)+0
  Such that:s(20) =< V_n+1
s(21) =< V_n/2+1/2
s(22) =< s(21)
s(23) =< s(20)
s(24) =< s(22)*s(20)

  with precondition: [V_n>=0] 

* Chain [25]: 1*s(26)+1*s(27)+1*s(28)+0
  Such that:s(25) =< V_n+1
s(26) =< V_n/2
s(27) =< s(25)
s(28) =< s(26)*s(25)

  with precondition: [V_n>=2] 


Closed-form bounds of eval_abc_start(V_3,V_i_0,V_j_0,V_n,B): 
-------------------------------------
* Chain [28] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [27] with precondition: [0>=V_n+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [26] with precondition: [V_n>=0] 
    - Upper bound: V_n+1+(V_n/2+1/2)*(2*V_n+2)+(V_n+1) 
    - Complexity: n^2 
* Chain [25] with precondition: [V_n>=2] 
    - Upper bound: V_n/2+(V_n+1+V_n/2*(V_n+1)) 
    - Complexity: n^2 

### Maximum cost of eval_abc_start(V_3,V_i_0,V_j_0,V_n,B): nat(V_n+1)+max([nat(V_n/2)*nat(V_n+1)+nat(V_n/2),nat(V_n+1)*2*nat(V_n/2+1/2)+nat(V_n/2+1/2)*2]) 
Asymptotic class: n^2 
* Total analysis performed in 96 ms.

