WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i8'=1+i8
   1: (-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i7'=1+i7, i8'=1+i8
   2: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i7'=1+i7, i8'=1+i8
   3: (-2+i1 == 0 /\ -i6+i7 >= 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i8'=1+i8
   4: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 2, 0 -> 3
1 -> 0, 1 -> 1, 1 -> 2, 1 -> 3
2 -> 0, 2 -> 1, 2 -> 2, 2 -> 3
3 -> 0, 3 -> 1, 3 -> 2, 3 -> 3
4 -> 0, 4 -> 1, 4 -> 2, 4 -> 3

Refined Dependency Graph

	Removed the following edges: 0 -> 3, 1 -> 2, 2 -> 0, 2 -> 1, 2 -> 3, 3 -> 0, 3 -> 1, 3 -> 2

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i8'=1+i8
   1: (-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i7'=1+i7, i8'=1+i8
   2: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i7'=1+i7, i8'=1+i8
   3: (-2+i1 == 0 /\ -i6+i7 >= 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i8'=1+i8
   4: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 2
1 -> 0, 1 -> 1, 1 -> 3
2 -> 2
3 -> 3
4 -> 0, 4 -> 1, 4 -> 2, 4 -> 3

Step with 4

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	4[(-1+i1 == 0)]
	2[(-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i6-i7 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i7'=1+i7, i8'=1+i8
	New rule:
	(-1+it15 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ i6-i7-it15 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it15, i7'=i7+it15, i8'=it15+i8

		-i4+i5 >= 0 [0]: unchanged
		
		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		-1+i6-i7 >= 0 [0]: montonic decrease yields i6-i7-it15 >= 0
		
		Replacement map: {-i4+i5 >= 0 -> -i4+i5 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -1+i6-i7 >= 0 -> i6-i7-it15 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+it15 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ i6-i7-it15 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it15, i7'=i7+it15, i8'=it15+i8
	New rule:
	(-1+it15 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ i6-i7-it15 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it15, i7'=i7+it15, i8'=it15+i8
	
	Instantiation

	Original rule:
	(-1+it15 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ i6-i7-it15 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it15, i7'=i7+it15, i8'=it15+i8
	New rule:
	(0 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0) /\ i3'=i6+i3-i7, i7'=i6, i8'=i6-i7+i8

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i8'=1+i8
   1: (-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i7'=1+i7, i8'=1+i8
   2: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i7'=1+i7, i8'=1+i8
   3: (-2+i1 == 0 /\ -i6+i7 >= 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i8'=1+i8
   4: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   5: (0 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0) /\ i3'=i6+i3-i7, i7'=i6, i8'=i6-i7+i8

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 2, 0 -> 5
1 -> 0, 1 -> 1, 1 -> 3
2 -> 2, 2 -> 5
3 -> 3
4 -> 0, 4 -> 1, 4 -> 2, 4 -> 3, 4 -> 5
5 -> 2

	Trace

	4[(-1+i1 == 0)]
	5[(0 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 5[T]}
	
Backtrack

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{5[T]}
	
Step with 0

	Trace

	4[(-1+i1 == 0)]
	0[(-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1+i6-i7 >= 0)]
	
	Blocked

	{}
	{5[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i8'=1+i8
	New rule:
	(-1+it42 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i4-i5-it42 >= 0 /\ -1+i6-i7 >= 0) /\ i1'=i1, i3'=i3+it42, i5'=i5+it42, i8'=i8+it42

		-2+i1 >= 0 [0]: unchanged
		
		-1+i4-i5 >= 0 [0]: montonic decrease yields i4-i5-it42 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		-1+i6-i7 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -1+i4-i5 >= 0 -> i4-i5-it42 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -1+i6-i7 >= 0 -> -1+i6-i7 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+it42 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i4-i5-it42 >= 0 /\ -1+i6-i7 >= 0) /\ i1'=i1, i3'=i3+it42, i5'=i5+it42, i8'=i8+it42
	New rule:
	(-1+it42 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i4-i5-it42 >= 0 /\ -1+i6-i7 >= 0) /\ i3'=i3+it42, i5'=i5+it42, i8'=i8+it42
	
	Instantiation

	Original rule:
	(-1+it42 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i4-i5-it42 >= 0 /\ -1+i6-i7 >= 0) /\ i3'=i3+it42, i5'=i5+it42, i8'=i8+it42
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0) /\ i3'=i3+i4-i5, i5'=i4, i8'=i4+i8-i5

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i8'=1+i8
   1: (-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i7'=1+i7, i8'=1+i8
   2: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i7'=1+i7, i8'=1+i8
   3: (-2+i1 == 0 /\ -i6+i7 >= 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i8'=1+i8
   4: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   5: (0 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0) /\ i3'=i6+i3-i7, i7'=i6, i8'=i6-i7+i8
   6: (0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0) /\ i3'=i3+i4-i5, i5'=i4, i8'=i4+i8-i5

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 2, 0 -> 5, 0 -> 6
1 -> 0, 1 -> 1, 1 -> 3, 1 -> 6
2 -> 2, 2 -> 5
3 -> 3
4 -> 0, 4 -> 1, 4 -> 2, 4 -> 3, 4 -> 5, 4 -> 6
5 -> 2
6 -> 0, 6 -> 1, 6 -> 2, 6 -> 5

	Trace

	4[(-1+i1 == 0)]
	6[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0)]
	
	Blocked

	{}
	{5[T]}
	{0[T], 6[T]}
	
Step with 2

	Trace

	4[(-1+i1 == 0)]
	6[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0)]
	2[(-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i6-i7 >= 0)]
	
	Blocked

	{}
	{5[T]}
	{0[T], 6[T]}
	{}
	
Covered

	Trace

	4[(-1+i1 == 0)]
	6[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0)]
	
	Blocked

	{}
	{5[T]}
	{0[T], 2[T], 6[T]}
	
Step with 5

	Trace

	4[(-1+i1 == 0)]
	6[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0)]
	5[(0 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0)]
	
	Blocked

	{}
	{5[T]}
	{0[T], 2[T], 6[T]}
	{5[T]}
	
Backtrack

	Trace

	4[(-1+i1 == 0)]
	6[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0)]
	
	Blocked

	{}
	{5[T]}
	{0[T], 2[T], 5[T], 6[T]}
	
Backtrack

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{5[T], 6[T]}
	
Step with 2

	Trace

	4[(-1+i1 == 0)]
	2[(-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i6-i7 >= 0)]
	
	Blocked

	{}
	{5[T], 6[T]}
	{}
	
Covered

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T], 5[T], 6[T]}
	
Step with 3

	Trace

	4[(-1+i1 == 0)]
	3[(-2+i1 == 0 /\ -i6+i7 >= 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{2[T], 5[T], 6[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -i6+i7 >= 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i8'=1+i8
	New rule:
	(-2+i1 >= 0 /\ -1+it78 >= 0 /\ -i6+i7 >= 0 /\ i4-i5-it78 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it78, i5'=i5+it78, i8'=i8+it78

		-2+i1 >= 0 [0]: unchanged
		
		-i6+i7 >= 0 [0]: unchanged
		
		-1+i4-i5 >= 0 [0]: montonic decrease yields i4-i5-it78 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -i6+i7 >= 0 -> -i6+i7 >= 0, -1+i4-i5 >= 0 -> i4-i5-it78 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ -1+it78 >= 0 /\ -i6+i7 >= 0 /\ i4-i5-it78 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it78, i5'=i5+it78, i8'=i8+it78
	New rule:
	(-2+i1 >= 0 /\ -1+it78 >= 0 /\ -i6+i7 >= 0 /\ i4-i5-it78 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it78, i5'=i5+it78, i8'=i8+it78
	
	Instantiation

	Original rule:
	(-2+i1 >= 0 /\ -1+it78 >= 0 /\ -i6+i7 >= 0 /\ i4-i5-it78 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it78, i5'=i5+it78, i8'=i8+it78
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ -i6+i7 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4-i5, i5'=i4, i8'=i4+i8-i5

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i8'=1+i8
   1: (-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i7'=1+i7, i8'=1+i8
   2: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i7'=1+i7, i8'=1+i8
   3: (-2+i1 == 0 /\ -i6+i7 >= 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i8'=1+i8
   4: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   5: (0 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0) /\ i3'=i6+i3-i7, i7'=i6, i8'=i6-i7+i8
   6: (0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0) /\ i3'=i3+i4-i5, i5'=i4, i8'=i4+i8-i5
   7: (0 >= 0 /\ -2+i1 >= 0 /\ -i6+i7 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4-i5, i5'=i4, i8'=i4+i8-i5

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 2, 0 -> 5, 0 -> 6
1 -> 0, 1 -> 1, 1 -> 3, 1 -> 6, 1 -> 7
2 -> 2, 2 -> 5
3 -> 3, 3 -> 7
4 -> 0, 4 -> 1, 4 -> 2, 4 -> 3, 4 -> 5, 4 -> 6, 4 -> 7
5 -> 2
6 -> 0, 6 -> 1, 6 -> 2, 6 -> 5
7 -> 3

	Trace

	4[(-1+i1 == 0)]
	7[(0 >= 0 /\ -2+i1 >= 0 /\ -i6+i7 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{2[T], 5[T], 6[T]}
	{3[T], 7[T]}
	
Backtrack

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T], 5[T], 6[T], 7[T]}
	
Step with 0

	Trace

	4[(-1+i1 == 0)]
	0[(-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1+i6-i7 >= 0)]
	
	Blocked

	{}
	{2[T], 5[T], 6[T], 7[T]}
	{}
	
Covered

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 2[T], 5[T], 6[T], 7[T]}
	
Step with 3

	Trace

	4[(-1+i1 == 0)]
	3[(-2+i1 == 0 /\ -i6+i7 >= 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{0[T], 2[T], 5[T], 6[T], 7[T]}
	{}
	
Covered

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 2[T], 3[T], 5[T], 6[T], 7[T]}
	
Step with 1

	Trace

	4[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1+i6-i7 >= 0)]
	
	Blocked

	{}
	{0[T], 2[T], 3[T], 5[T], 6[T], 7[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i7'=1+i7, i8'=1+i8
	New rule:
	(-2+i1 >= 0 /\ i6-i7-it107 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+it107 >= 0) /\ i1'=i1, i3'=i3+it107, i7'=i7+it107, i8'=it107+i8

		-2+i1 >= 0 [0]: unchanged
		
		-1+i4-i5 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		-1+i6-i7 >= 0 [0]: montonic decrease yields i6-i7-it107 >= 0
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -1+i4-i5 >= 0 -> -1+i4-i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -1+i6-i7 >= 0 -> i6-i7-it107 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ i6-i7-it107 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+it107 >= 0) /\ i1'=i1, i3'=i3+it107, i7'=i7+it107, i8'=it107+i8
	New rule:
	(-2+i1 >= 0 /\ i6-i7-it107 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+it107 >= 0) /\ i3'=i3+it107, i7'=i7+it107, i8'=it107+i8
	
	Instantiation

	Original rule:
	(-2+i1 >= 0 /\ i6-i7-it107 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+it107 >= 0) /\ i3'=i3+it107, i7'=i7+it107, i8'=it107+i8
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0) /\ i3'=i6+i3-i7, i7'=i6, i8'=i6-i7+i8

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i8'=1+i8
   1: (-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i7'=1+i7, i8'=1+i8
   2: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i6-i7 >= 0) /\ i1'=2, i3'=1+i3, i7'=1+i7, i8'=1+i8
   3: (-2+i1 == 0 /\ -i6+i7 >= 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5, i8'=1+i8
   4: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   5: (0 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0) /\ i3'=i6+i3-i7, i7'=i6, i8'=i6-i7+i8
   6: (0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0) /\ i3'=i3+i4-i5, i5'=i4, i8'=i4+i8-i5
   7: (0 >= 0 /\ -2+i1 >= 0 /\ -i6+i7 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4-i5, i5'=i4, i8'=i4+i8-i5
   8: (0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0) /\ i3'=i6+i3-i7, i7'=i6, i8'=i6-i7+i8

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 2, 0 -> 5, 0 -> 6, 0 -> 8
1 -> 0, 1 -> 1, 1 -> 3, 1 -> 6, 1 -> 7, 1 -> 8
2 -> 2, 2 -> 5
3 -> 3, 3 -> 7
4 -> 0, 4 -> 1, 4 -> 2, 4 -> 3, 4 -> 5, 4 -> 6, 4 -> 7, 4 -> 8
5 -> 2
6 -> 0, 6 -> 1, 6 -> 2, 6 -> 5, 6 -> 8
7 -> 3
8 -> 0, 8 -> 1, 8 -> 3, 8 -> 6, 8 -> 7

	Trace

	4[(-1+i1 == 0)]
	8[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0)]
	
	Blocked

	{}
	{0[T], 2[T], 3[T], 5[T], 6[T], 7[T]}
	{1[T], 8[T]}
	
Step with 7

	Trace

	4[(-1+i1 == 0)]
	8[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0)]
	7[(0 >= 0 /\ -2+i1 >= 0 /\ -i6+i7 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{0[T], 2[T], 3[T], 5[T], 6[T], 7[T]}
	{1[T], 6[T], 8[T]}
	{7[T]}
	
Backtrack

	Trace

	4[(-1+i1 == 0)]
	8[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0)]
	
	Blocked

	{}
	{0[T], 2[T], 3[T], 5[T], 6[T], 7[T]}
	{1[T], 6[T], 7[T], 8[T]}
	
Step with 3

	Trace

	4[(-1+i1 == 0)]
	8[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0)]
	3[(-2+i1 == 0 /\ -i6+i7 >= 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{0[T], 2[T], 3[T], 5[T], 6[T], 7[T]}
	{1[T], 6[T], 7[T], 8[T]}
	{}
	
Covered

	Trace

	4[(-1+i1 == 0)]
	8[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0 /\ -1+i6-i7 >= 0)]
	
	Blocked

	{}
	{0[T], 2[T], 3[T], 5[T], 6[T], 7[T]}
	{1[T], 3[T], 6[T], 7[T], 8[T]}
	
Backtrack

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 2[T], 3[T], 5[T], 6[T], 7[T], 8[T]}
	
Step with 1

	Trace

	4[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -1+i6-i7 >= 0)]
	
	Blocked

	{}
	{0[T], 2[T], 3[T], 5[T], 6[T], 7[T], 8[T]}
	{}
	
Covered

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 1[T], 2[T], 3[T], 5[T], 6[T], 7[T], 8[T]}
	
Backtrack

	Trace

	Blocked

	{4[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃, X₄
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₄: l0(X₀, X₁, X₂, X₃, X₄) → l1(X₀, X₁, X₂, X₃, X₄)
  t₀: l1(X₀, X₁, X₂, X₃, X₄) → l1(X₀, 1+X₁, X₂, X₃, 1+X₄) :|: 1+X₁ ≤ X₀ ∧ 1+X₃ ≤ X₂
  t₁: l1(X₀, X₁, X₂, X₃, X₄) → l1(X₀, X₁, X₂, 1+X₃, 1+X₄) :|: 1+X₁ ≤ X₀ ∧ 1+X₃ ≤ X₂
  t₂: l1(X₀, X₁, X₂, X₃, X₄) → l1(X₀, X₁, X₂, 1+X₃, 1+X₄) :|: 1+X₃ ≤ X₂ ∧ X₀ ≤ X₁
  t₃: l1(X₀, X₁, X₂, X₃, X₄) → l1(X₀, 1+X₁, X₂, X₃, 1+X₄) :|: 1+X₁ ≤ X₀ ∧ X₂ ≤ X₃


Preprocessing
  Eliminate variables [X₄] that do not contribute to the problem


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₅: l0(X₀, X₁, X₂, X₃) → l1(X₀, X₁, X₂, X₃)
  t₆: l1(X₀, X₁, X₂, X₃) → l1(X₀, 1+X₁, X₂, X₃) :|: 1+X₁ ≤ X₀ ∧ 1+X₃ ≤ X₂
  t₇: l1(X₀, X₁, X₂, X₃) → l1(X₀, X₁, X₂, 1+X₃) :|: 1+X₁ ≤ X₀ ∧ 1+X₃ ≤ X₂
  t₈: l1(X₀, X₁, X₂, X₃) → l1(X₀, X₁, X₂, 1+X₃) :|: 1+X₃ ≤ X₂ ∧ X₀ ≤ X₁
  t₉: l1(X₀, X₁, X₂, X₃) → l1(X₀, 1+X₁, X₂, X₃) :|: 1+X₁ ≤ X₀ ∧ X₂ ≤ X₃


MPRF for transition t₆: l1(X₀, X₁, X₂, X₃) → l1(X₀, 1+X₁, X₂, X₃) :|: 1+X₁ ≤ X₀ ∧ 1+X₃ ≤ X₂ of depth 1:
  new bound:
    X₀+X₁ {O(n)}

  MPRF:
    • l1: [X₀-X₁]




MPRF for transition t₇: l1(X₀, X₁, X₂, X₃) → l1(X₀, X₁, X₂, 1+X₃) :|: 1+X₁ ≤ X₀ ∧ 1+X₃ ≤ X₂ of depth 1:
  new bound:
    X₂+X₃ {O(n)}

  MPRF:
    • l1: [X₂-X₃]




MPRF for transition t₈: l1(X₀, X₁, X₂, X₃) → l1(X₀, X₁, X₂, 1+X₃) :|: 1+X₃ ≤ X₂ ∧ X₀ ≤ X₁ of depth 1:
  new bound:
    X₂+X₃ {O(n)}

  MPRF:
    • l1: [X₂-X₃]




MPRF for transition t₉: l1(X₀, X₁, X₂, X₃) → l1(X₀, 1+X₁, X₂, X₃) :|: 1+X₁ ≤ X₀ ∧ X₂ ≤ X₃ of depth 1:
  new bound:
    X₀+X₁ {O(n)}

  MPRF:
    • l1: [X₀-X₁]




All Bounds
Timebounds
  Overall timebound:2⋅X₀+2⋅X₁+2⋅X₂+2⋅X₃+1 {O(n)}
    t₅: 1 {O(1)}
    t₆: X₀+X₁ {O(n)}
    t₇: X₂+X₃ {O(n)}
    t₈: X₂+X₃ {O(n)}
    t₉: X₀+X₁ {O(n)}


Costbounds
  Overall costbound: 2⋅X₀+2⋅X₁+2⋅X₂+2⋅X₃+1 {O(n)}
    t₅: 1 {O(1)}
    t₆: X₀+X₁ {O(n)}
    t₇: X₂+X₃ {O(n)}
    t₈: X₂+X₃ {O(n)}
    t₉: X₀+X₁ {O(n)}


Sizebounds
    t₅, X₀: X₀ {O(n)}
    t₅, X₁: X₁ {O(n)}
    t₅, X₂: X₂ {O(n)}
    t₅, X₃: X₃ {O(n)}
    t₆, X₀: X₀ {O(n)}
    t₆, X₁: 2⋅X₁+X₀ {O(n)}
    t₆, X₂: X₂ {O(n)}
    t₆, X₃: 2⋅X₃+X₂ {O(n)}
    t₇, X₀: X₀ {O(n)}
    t₇, X₁: 2⋅X₁+X₀ {O(n)}
    t₇, X₂: X₂ {O(n)}
    t₇, X₃: 2⋅X₃+X₂ {O(n)}
    t₈, X₀: X₀ {O(n)}
    t₈, X₁: 3⋅X₁+X₀ {O(n)}
    t₈, X₂: X₂ {O(n)}
    t₈, X₃: 2⋅X₂+4⋅X₃ {O(n)}
    t₉, X₀: X₀ {O(n)}
    t₉, X₁: 2⋅X₀+4⋅X₁ {O(n)}
    t₉, X₂: X₂ {O(n)}
    t₉, X₃: 3⋅X₃+X₂ {O(n)}

