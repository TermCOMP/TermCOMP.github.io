WORST_CASE(?,O(1))

# LoAT Proof:
Initial ITS

Start location: f2

Location map:
LoAT_sink -> 0
f2 -> 1
f300 -> 2
f3 -> 3

Rules:
   0: (-2+i1 == 0 /\ 100-i4 >= 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   1: (-2+i1 == 0 /\ -101+i4 >= 0) /\ i1'=3, i3'=1+i3, i6'=0, i7'=0, i8'=0
   2: (-1+i5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=1
   3: (-i5 >= 0 /\ -1+i1 == 0) /\ i1'=3, i3'=1+i3, i4'=0, i6'=0, i7'=0, i8'=0

Dependency graph:
0 -> 0, 0 -> 1
2 -> 0, 2 -> 1

Refined Dependency Graph

	Removed the following edges: 2 -> 1

Start location: f2

Location map:
LoAT_sink -> 0
f2 -> 1
f300 -> 2
f3 -> 3

Rules:
   0: (-2+i1 == 0 /\ 100-i4 >= 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   1: (-2+i1 == 0 /\ -101+i4 >= 0) /\ i1'=3, i3'=1+i3, i6'=0, i7'=0, i8'=0
   2: (-1+i5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=1
   3: (-i5 >= 0 /\ -1+i1 == 0) /\ i1'=3, i3'=1+i3, i4'=0, i6'=0, i7'=0, i8'=0

Dependency graph:
0 -> 0, 0 -> 1
2 -> 0

Step with 3

	Trace

	3[(-i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Backtrack

	Trace

	Blocked

	{3[T]}
	
Step with 2

	Trace

	2[(-1+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{3[T]}
	{}
	
Step with 0

	Trace

	2[(-1+i5 >= 0 /\ -1+i1 == 0)]
	0[(-2+i1 == 0 /\ 100-i4 >= 0 /\ -1+i5 >= 0)]
	
	Blocked

	{3[T]}
	{}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ 100-i4 >= 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
	New rule:
	(-1+it22 >= 0 /\ 101-i4-it22 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it22, i4'=i4+it22

		-2+i1 >= 0 [0]: unchanged
		
		100-i4 >= 0 [0]: montonic decrease yields 101-i4-it22 >= 0
		
		-1+i5 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 100-i4 >= 0 -> 101-i4-it22 >= 0, -1+i5 >= 0 -> -1+i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+it22 >= 0 /\ 101-i4-it22 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it22, i4'=i4+it22
	New rule:
	(-1+it22 >= 0 /\ 101-i4-it22 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it22, i4'=i4+it22
	
	Instantiation

	Original rule:
	(-1+it22 >= 0 /\ 101-i4-it22 >= 0 /\ -2+i1 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it22, i4'=i4+it22
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ 100-i4 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=101+i3-i4, i4'=101

Start location: f2

Location map:
LoAT_sink -> 0
f2 -> 1
f300 -> 2
f3 -> 3

Rules:
   0: (-2+i1 == 0 /\ 100-i4 >= 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   1: (-2+i1 == 0 /\ -101+i4 >= 0) /\ i1'=3, i3'=1+i3, i6'=0, i7'=0, i8'=0
   2: (-1+i5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=1
   3: (-i5 >= 0 /\ -1+i1 == 0) /\ i1'=3, i3'=1+i3, i4'=0, i6'=0, i7'=0, i8'=0
   4: (0 >= 0 /\ -2+i1 >= 0 /\ 100-i4 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0) /\ i3'=101+i3-i4, i4'=101

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 4
2 -> 0, 2 -> 4
4 -> 0, 4 -> 1

	Trace

	2[(-1+i5 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ 100-i4 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{3[T]}
	{}
	{0[T], 4[T]}
	
Step with 1

	Trace

	2[(-1+i5 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ 100-i4 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0)]
	1[(-2+i1 == 0 /\ -101+i4 >= 0)]
	
	Blocked

	{3[T]}
	{}
	{0[T], 4[T]}
	{}
	
Backtrack

	Trace

	2[(-1+i5 >= 0 /\ -1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ 100-i4 >= 0 /\ -1+i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{3[T]}
	{}
	{0[T], 1[T], 4[T]}
	
Backtrack

	Trace

	2[(-1+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{3[T]}
	{4[T]}
	
Step with 0

	Trace

	2[(-1+i5 >= 0 /\ -1+i1 == 0)]
	0[(-2+i1 == 0 /\ 100-i4 >= 0 /\ -1+i5 >= 0)]
	
	Blocked

	{3[T]}
	{4[T]}
	{}
	
Covered

	Trace

	2[(-1+i5 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{3[T]}
	{0[T], 4[T]}
	
Backtrack

	Trace

	Blocked

	{2[T], 3[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃, X₄
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₃: l0(X₀, X₁, X₂, X₃, X₄) → l1(0, X₁, 0, 0, 0) :|: X₁ ≤ 0
  t₂: l0(X₀, X₁, X₂, X₃, X₄) → l2(1, X₁, X₂, X₃, X₄) :|: 1 ≤ X₁
  t₁: l2(X₀, X₁, X₂, X₃, X₄) → l1(X₀, X₁, 0, 0, 0) :|: 101 ≤ X₀
  t₀: l2(X₀, X₁, X₂, X₃, X₄) → l2(1+X₀, X₁, X₂, X₃, X₄) :|: X₀ ≤ 100 ∧ 1 ≤ X₁


Preprocessing
  Eliminate variables [X₂; X₃; X₄] that do not contribute to the problem


  Found invariant X₀ ≤ 101 ∧ 0 ≤ X₀ for location l1


  Found invariant 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ X₀ ≤ 100+X₁ ∧ X₀ ≤ 101 ∧ 1 ≤ X₀ for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₄: l0(X₀, X₁) → l1(0, X₁) :|: X₁ ≤ 0
  t₅: l0(X₀, X₁) → l2(1, X₁) :|: 1 ≤ X₁
  t₆: l2(X₀, X₁) → l1(X₀, X₁) :|: 101 ≤ X₀ ∧ X₀ ≤ 101 ∧ X₀ ≤ 100+X₁ ∧ 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁
  t₇: l2(X₀, X₁) → l2(1+X₀, X₁) :|: X₀ ≤ 100 ∧ 1 ≤ X₁ ∧ X₀ ≤ 101 ∧ X₀ ≤ 100+X₁ ∧ 1 ≤ X₀ ∧ 2 ≤ X₀+X₁


MPRF for transition t₇: l2(X₀, X₁) → l2(1+X₀, X₁) :|: X₀ ≤ 100 ∧ 1 ≤ X₁ ∧ X₀ ≤ 101 ∧ X₀ ≤ 100+X₁ ∧ 1 ≤ X₀ ∧ 2 ≤ X₀+X₁ of depth 1:
  new bound:
    102 {O(1)}

  MPRF:
    • l2: [101-X₀]




All Bounds
Timebounds
  Overall timebound:105 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: 1 {O(1)}
    t₇: 102 {O(1)}


Costbounds
  Overall costbound: 105 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: 1 {O(1)}
    t₇: 102 {O(1)}


Sizebounds
    t₄, X₀: 0 {O(1)}
    t₄, X₁: X₁ {O(n)}
    t₅, X₀: 1 {O(1)}
    t₅, X₁: X₁ {O(n)}
    t₆, X₀: 101 {O(1)}
    t₆, X₁: X₁ {O(n)}
    t₇, X₀: 101 {O(1)}
    t₇, X₁: X₁ {O(n)}

