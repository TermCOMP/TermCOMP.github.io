WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i5
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 0, 0 -> 1
1 -> 0, 1 -> 1
2 -> 0, 2 -> 1

Refined Dependency Graph

	Removed the following edges: 0 -> 1, 1 -> 1

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i5
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 0
1 -> 0
2 -> 0, 2 -> 1

Step with 2

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 1

	Trace

	2[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Step with 0

	Trace

	2[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0)]
	0[(-i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
	New rule:
	(-i4+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it13 >= 0 /\ i4-it13 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it13, i4'=i4-it13

		-i4+i5 >= 0 [0]: monotonic increase yields -i4+i5 >= 0
		
		-1+i4 >= 0 [0]: montonic decrease yields i4-it13 >= 0
		
		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-i4+i5 >= 0 -> -i4+i5 >= 0, -1+i4 >= 0 -> i4-it13 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-i4+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it13 >= 0 /\ i4-it13 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it13, i4'=i4-it13
	New rule:
	(-i4+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it13 >= 0 /\ i4-it13 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it13, i4'=i4-it13
	
	Instantiation

	Original rule:
	(-i4+i5 >= 0 /\ -2+i1 >= 0 /\ -1+it13 >= 0 /\ i4-it13 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it13, i4'=i4-it13
	New rule:
	(0 >= 0 /\ -i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4, i4'=0

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i5
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   3: (0 >= 0 /\ -i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4, i4'=0

Dependency graph:
0 -> 0, 0 -> 3
1 -> 0, 1 -> 3
2 -> 0, 2 -> 1, 2 -> 3
3 -> 0

	Trace

	2[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0)]
	3[(0 >= 0 /\ -i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{}
	{0[T], 3[T]}
	
Backtrack

	Trace

	2[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{}
	{3[T]}
	
Step with 0

	Trace

	2[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0)]
	0[(-i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{}
	{3[T]}
	{}
	
Covered

	Trace

	2[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{}
	{0[T], 3[T]}
	
Backtrack

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T]}
	
Step with 0

	Trace

	2[(-1+i1 == 0)]
	0[(-i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{1[T]}
	{}
	
Covered

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 1[T]}
	
Step with 3

	Trace

	2[(-1+i1 == 0)]
	3[(0 >= 0 /\ -i4+i5 >= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{0[T], 1[T]}
	{3[T]}
	
Backtrack

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 1[T], 3[T]}
	
Backtrack

	Trace

	Blocked

	{2[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₂: l0(X₀, X₁) → l1(X₀, X₁)
  t₀: l1(X₀, X₁) → l1(X₀-1, X₁) :|: 1 ≤ X₀ ∧ X₀ ≤ X₁
  t₁: l1(X₀, X₁) → l1(X₁, X₁) :|: 1 ≤ X₀ ∧ 1+X₁ ≤ X₀


Preprocessing
Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₂: l0(X₀, X₁) → l1(X₀, X₁)
  t₀: l1(X₀, X₁) → l1(X₀-1, X₁) :|: 1 ≤ X₀ ∧ X₀ ≤ X₁
  t₁: l1(X₀, X₁) → l1(X₁, X₁) :|: 1 ≤ X₀ ∧ 1+X₁ ≤ X₀


  knowledge_propagation leads to new time bound 1 {O(1)} for transition t₁: l1(X₀, X₁) → l1(X₁, X₁) :|: 1 ≤ X₀ ∧ 1+X₁ ≤ X₀


MPRF for transition t₀: l1(X₀, X₁) → l1(X₀-1, X₁) :|: 1 ≤ X₀ ∧ X₀ ≤ X₁ of depth 1:
  new bound:
    X₀ {O(n)}

  MPRF:
    • l1: [X₀]




All Bounds
Timebounds
  Overall timebound:X₀+2 {O(n)}
    t₀: X₀ {O(n)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}


Costbounds
  Overall costbound: X₀+2 {O(n)}
    t₀: X₀ {O(n)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀+X₁ {O(n)}
    t₀, X₁: 2⋅X₁ {O(n)}
    t₁, X₀: X₁ {O(n)}
    t₁, X₁: X₁ {O(n)}
    t₂, X₀: X₀ {O(n)}
    t₂, X₁: X₁ {O(n)}

