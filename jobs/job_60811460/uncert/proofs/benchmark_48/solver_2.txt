WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalSimpleSinglebb3in/4,evalSimpleSinglebbin/4]
1. non_recursive  : [evalSimpleSinglestop/3]
2. non_recursive  : [evalSimpleSinglereturnin/3]
3. non_recursive  : [exit_location/1]
4. non_recursive  : [evalSimpleSinglebb3in_loop_cont/4]
5. non_recursive  : [evalSimpleSingleentryin/3]
6. non_recursive  : [evalSimpleSinglestart/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalSimpleSinglebb3in/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into evalSimpleSinglebb3in_loop_cont/4
5. SCC is partially evaluated into evalSimpleSingleentryin/3
6. SCC is partially evaluated into evalSimpleSinglestart/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalSimpleSinglebb3in/4 
* CE 5 is refined into CE [8] 
* CE 4 is refined into CE [9] 
* CE 3 is refined into CE [10] 


### Cost equations --> "Loop" of evalSimpleSinglebb3in/4 
* CEs [10] --> Loop 8 
* CEs [8] --> Loop 9 
* CEs [9] --> Loop 10 

### Ranking functions of CR evalSimpleSinglebb3in(A,B,C,D) 
* RF of phase [8]: [-A+B]

#### Partial ranking functions of CR evalSimpleSinglebb3in(A,B,C,D) 
* Partial RF of phase [8]:
  - RF of loop [8:1]:
    -A+B


### Specialization of cost equations evalSimpleSinglebb3in_loop_cont/4 
* CE 7 is refined into CE [11] 
* CE 6 is refined into CE [12] 


### Cost equations --> "Loop" of evalSimpleSinglebb3in_loop_cont/4 
* CEs [11] --> Loop 11 
* CEs [12] --> Loop 12 

### Ranking functions of CR evalSimpleSinglebb3in_loop_cont(A,B,C,D) 

#### Partial ranking functions of CR evalSimpleSinglebb3in_loop_cont(A,B,C,D) 


### Specialization of cost equations evalSimpleSingleentryin/3 
* CE 2 is refined into CE [13,14,15,16] 


### Cost equations --> "Loop" of evalSimpleSingleentryin/3 
* CEs [14,16] --> Loop 13 
* CEs [13] --> Loop 14 
* CEs [15] --> Loop 15 

### Ranking functions of CR evalSimpleSingleentryin(A,B,C) 

#### Partial ranking functions of CR evalSimpleSingleentryin(A,B,C) 


### Specialization of cost equations evalSimpleSinglestart/3 
* CE 1 is refined into CE [17,18,19] 


### Cost equations --> "Loop" of evalSimpleSinglestart/3 
* CEs [19] --> Loop 16 
* CEs [18] --> Loop 17 
* CEs [17] --> Loop 18 

### Ranking functions of CR evalSimpleSinglestart(A,B,C) 

#### Partial ranking functions of CR evalSimpleSinglestart(A,B,C) 


Computing Bounds
=====================================

#### Cost of chains of evalSimpleSinglebb3in(A,B,C,D):
* Chain [[8],10]: 1*it(8)+0
  Such that:it(8) =< -A+D

  with precondition: [C=2,B=D,A>=0,B>=A+1] 

* Chain [[8],9]: 1*it(8)+0
  Such that:it(8) =< -A+B

  with precondition: [C=3,A>=0,B>=A+1] 

* Chain [10]: 0
  with precondition: [C=2,A=D,A>=0,A>=B] 

* Chain [9]: 0
  with precondition: [C=3,A>=0] 


#### Cost of chains of evalSimpleSinglebb3in_loop_cont(A,B,C,D):
* Chain [12]: 0
  with precondition: [A=2] 

* Chain [11]: 0
  with precondition: [A=3] 


#### Cost of chains of evalSimpleSingleentryin(A,B,C):
* Chain [15]: 0
  with precondition: [] 

* Chain [14]: 0
  with precondition: [0>=B] 

* Chain [13]: 2*s(1)+0
  Such that:aux(1) =< B
s(1) =< aux(1)

  with precondition: [B>=1] 


#### Cost of chains of evalSimpleSinglestart(A,B,C):
* Chain [18]: 0
  with precondition: [] 

* Chain [17]: 0
  with precondition: [0>=B] 

* Chain [16]: 2*s(4)+0
  Such that:s(3) =< B
s(4) =< s(3)

  with precondition: [B>=1] 


Closed-form bounds of evalSimpleSinglestart(A,B,C): 
-------------------------------------
* Chain [18] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [17] with precondition: [0>=B] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [16] with precondition: [B>=1] 
    - Upper bound: 2*B 
    - Complexity: n 

### Maximum cost of evalSimpleSinglestart(A,B,C): nat(B)*2 
Asymptotic class: n 
* Total analysis performed in 30 ms.

