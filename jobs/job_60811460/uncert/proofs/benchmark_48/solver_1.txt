WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: evalSimpleSinglestart

Location map:
LoAT_sink -> 0
evalSimpleSinglestart -> 1
evalSimpleSingleentryin -> 2
evalSimpleSinglebb3in -> 3
evalSimpleSinglebbin -> 4
evalSimpleSinglereturnin -> 5
evalSimpleSinglestop -> 6

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: -2+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=0
   2: (-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=4, i3'=1+i3
   3: (-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=5, i3'=1+i3
   4: -4+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=1+i4
   5: -5+i1 == 0 /\ i1'=6, i3'=1+i3

Dependency graph:
0 -> 1
1 -> 2, 1 -> 3
2 -> 4
3 -> 5
4 -> 2, 4 -> 3

Chained Linear Paths

	Applied Chaining

	First rule:
	-1+i1 == 0 /\ i1'=2, i3'=1+i3
	Second rule:
	-2+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=0
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=0
	
	Applied Deletion

	Removed the following rules: 0, 1
	
	Applied Chaining

	First rule:
	(-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=4, i3'=1+i3
	Second rule:
	-4+i1 == 0 /\ i1'=3, i3'=1+i3, i4'=1+i4
	New rule:
	(0 == 0 /\ -3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
	
	Applied Deletion

	Removed the following rules: 2, 4
	
	Applied Chaining

	First rule:
	(-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=5, i3'=1+i3
	Second rule:
	-5+i1 == 0 /\ i1'=6, i3'=1+i3
	New rule:
	(0 == 0 /\ -3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=6, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 3, 5

Start location: evalSimpleSinglestart

Location map:
LoAT_sink -> 0
evalSimpleSinglestart -> 1
evalSimpleSingleentryin -> 2
evalSimpleSinglebb3in -> 3
evalSimpleSinglebbin -> 4
evalSimpleSinglereturnin -> 5
evalSimpleSinglestop -> 6

Rules:
   6: (0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=0
   7: (0 == 0 /\ -3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
   8: (0 == 0 /\ -3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=6, i3'=2+i3

Dependency graph:
6 -> 7, 6 -> 8
7 -> 7, 7 -> 8

Preprocessed Transitions

	Simplified Guard

	Original rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3, i4'=0
	New rule:
	-1+i1 == 0 /\ i1'=3, i3'=2+i3, i4'=0
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
	New rule:
	(-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=6, i3'=2+i3
	New rule:
	(-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=6, i3'=2+i3

Start location: evalSimpleSinglestart

Location map:
LoAT_sink -> 0
evalSimpleSinglestart -> 1
evalSimpleSingleentryin -> 2
evalSimpleSinglebb3in -> 3
evalSimpleSinglebbin -> 4
evalSimpleSinglereturnin -> 5
evalSimpleSinglestop -> 6

Rules:
   9: -1+i1 == 0 /\ i1'=3, i3'=2+i3, i4'=0
  10: (-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
  11: (-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=6, i3'=2+i3

Dependency graph:
9 -> 10, 9 -> 11
10 -> 10, 10 -> 11

Step with 9

	Trace

	9[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 11

	Trace

	9[(-1+i1 == 0)]
	11[(-3+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	9[(-1+i1 == 0)]
	
	Blocked

	{}
	{11[T]}
	
Step with 10

	Trace

	9[(-1+i1 == 0)]
	10[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{11[T]}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
	New rule:
	(-i4+i5-it13 >= 0 /\ -3+i1 >= 0 /\ -1+it13 >= 0 /\ 3-i1 >= 0) /\ i1'=i1, i3'=i3+2*it13, i4'=i4+it13

		-3+i1 >= 0 [0]: unchanged
		
		3-i1 >= 0 [0]: unchanged
		
		-1-i4+i5 >= 0 [0]: montonic decrease yields -i4+i5-it13 >= 0
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, 3-i1 >= 0 -> 3-i1 >= 0, -1-i4+i5 >= 0 -> -i4+i5-it13 >= 0}

	Removed Trivial Updates

	Original rule:
	(-i4+i5-it13 >= 0 /\ -3+i1 >= 0 /\ -1+it13 >= 0 /\ 3-i1 >= 0) /\ i1'=i1, i3'=i3+2*it13, i4'=i4+it13
	New rule:
	(-i4+i5-it13 >= 0 /\ -3+i1 >= 0 /\ -1+it13 >= 0 /\ 3-i1 >= 0) /\ i3'=i3+2*it13, i4'=i4+it13
	
	Instantiation

	Original rule:
	(-i4+i5-it13 >= 0 /\ -3+i1 >= 0 /\ -1+it13 >= 0 /\ 3-i1 >= 0) /\ i3'=i3+2*it13, i4'=i4+it13
	New rule:
	(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-2*i4+2*i5, i4'=i5

Start location: evalSimpleSinglestart

Location map:
LoAT_sink -> 0
evalSimpleSinglestart -> 1
evalSimpleSingleentryin -> 2
evalSimpleSinglebb3in -> 3
evalSimpleSinglebbin -> 4
evalSimpleSinglereturnin -> 5
evalSimpleSinglestop -> 6

Rules:
   9: -1+i1 == 0 /\ i1'=3, i3'=2+i3, i4'=0
  10: (-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=2+i3, i4'=1+i4
  11: (-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=6, i3'=2+i3
  12: (0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-2*i4+2*i5, i4'=i5

Dependency graph:
9 -> 10, 9 -> 11, 9 -> 12
10 -> 10, 10 -> 11, 10 -> 12
12 -> 10, 12 -> 11

	Trace

	9[(-1+i1 == 0)]
	12[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{11[T]}
	{10[T], 12[T]}
	
Step with 11

	Trace

	9[(-1+i1 == 0)]
	12[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0)]
	11[(-3+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{11[T]}
	{10[T], 12[T]}
	{}
	
Backtrack

	Trace

	9[(-1+i1 == 0)]
	12[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{11[T]}
	{10[T], 11[T], 12[T]}
	
Backtrack

	Trace

	9[(-1+i1 == 0)]
	
	Blocked

	{}
	{11[T], 12[T]}
	
Step with 10

	Trace

	9[(-1+i1 == 0)]
	10[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{11[T], 12[T]}
	{}
	
Covered

	Trace

	9[(-1+i1 == 0)]
	
	Blocked

	{}
	{10[T], 11[T], 12[T]}
	
Backtrack

	Trace

	Blocked

	{9[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l2, l3, l4, l5
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l3(X₀, X₁)
  t₄: l1(X₀, X₁) → l4(1+X₀, X₁)
  t₅: l2(X₀, X₁) → l5(X₀, X₁)
  t₁: l3(X₀, X₁) → l4(0, X₁)
  t₂: l4(X₀, X₁) → l1(X₀, X₁) :|: 1+X₀ ≤ X₁
  t₃: l4(X₀, X₁) → l2(X₀, X₁) :|: X₁ ≤ X₀


Preprocessing
  Found invariant X₁ ≤ X₀ ∧ 0 ≤ X₀ for location l2


  Found invariant X₁ ≤ X₀ ∧ 0 ≤ X₀ for location l5


  Found invariant 1 ≤ X₁ ∧ 1 ≤ X₀+X₁ ∧ 1+X₀ ≤ X₁ ∧ 0 ≤ X₀ for location l1


  Found invariant 0 ≤ X₀ for location l4


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l2, l3, l4, l5
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l3(X₀, X₁)
  t₄: l1(X₀, X₁) → l4(1+X₀, X₁) :|: 1 ≤ X₀+X₁ ∧ 1+X₀ ≤ X₁ ∧ 1 ≤ X₁ ∧ 0 ≤ X₀
  t₅: l2(X₀, X₁) → l5(X₀, X₁) :|: 0 ≤ X₀ ∧ X₁ ≤ X₀
  t₁: l3(X₀, X₁) → l4(0, X₁)
  t₂: l4(X₀, X₁) → l1(X₀, X₁) :|: 1+X₀ ≤ X₁ ∧ 0 ≤ X₀
  t₃: l4(X₀, X₁) → l2(X₀, X₁) :|: X₁ ≤ X₀ ∧ 0 ≤ X₀


MPRF for transition t₂: l4(X₀, X₁) → l1(X₀, X₁) :|: 1+X₀ ≤ X₁ ∧ 0 ≤ X₀ of depth 1:
  new bound:
    X₁ {O(n)}

  MPRF:
    • l1: [X₁-1-X₀]
    • l4: [X₁-X₀]




MPRF for transition t₄: l1(X₀, X₁) → l4(1+X₀, X₁) :|: 1 ≤ X₀+X₁ ∧ 1+X₀ ≤ X₁ ∧ 1 ≤ X₁ ∧ 0 ≤ X₀ of depth 1:
  new bound:
    X₁ {O(n)}

  MPRF:
    • l1: [X₁-X₀]
    • l4: [X₁-X₀]




All Bounds
Timebounds
  Overall timebound:2⋅X₁+4 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: X₁ {O(n)}
    t₃: 1 {O(1)}
    t₄: X₁ {O(n)}
    t₅: 1 {O(1)}


Costbounds
  Overall costbound: 2⋅X₁+4 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: X₁ {O(n)}
    t₃: 1 {O(1)}
    t₄: X₁ {O(n)}
    t₅: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₁, X₀: 0 {O(1)}
    t₁, X₁: X₁ {O(n)}
    t₂, X₀: X₁ {O(n)}
    t₂, X₁: X₁ {O(n)}
    t₃, X₀: X₁ {O(n)}
    t₃, X₁: 2⋅X₁ {O(n)}
    t₄, X₀: X₁ {O(n)}
    t₄, X₁: X₁ {O(n)}
    t₅, X₀: X₁ {O(n)}
    t₅, X₁: 2⋅X₁ {O(n)}

