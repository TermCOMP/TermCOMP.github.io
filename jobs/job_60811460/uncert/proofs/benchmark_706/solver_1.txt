NO

# LoAT Proof:
NO

WORST_CASE(Omega(n^1),?)
NO

Initial ITS

Start location: eval_speedFails2_start

Location map:
LoAT_sink -> 0
eval_speedFails2_start -> 1
eval_speedFails2_bb0_in -> 2
eval_speedFails2_0 -> 3
eval_speedFails2_1 -> 4
eval_speedFails2_2 -> 5
eval_speedFails2_3 -> 6
eval_speedFails2_4 -> 7
eval_speedFails2_bb1_in -> 8
eval_speedFails2_bb2_in -> 9
eval_speedFails2_bb3_in -> 10
eval_speedFails2_stop -> 11

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: -2+i1 == 0 /\ i1'=3, i3'=1+i3
   2: -3+i1 == 0 /\ i1'=4, i3'=1+i3
   3: -4+i1 == 0 /\ i1'=5, i3'=1+i3
   4: -5+i1 == 0 /\ i1'=6, i3'=1+i3
   5: -6+i1 == 0 /\ i1'=7, i3'=1+i3
   6: -7+i1 == 0 /\ i1'=8, i3'=1+i3, i4'=i6
   7: (i4-i5 < 0 /\ -8+i1 == 0) /\ i1'=9, i3'=1+i3
   8: (i4-i5 > 0 /\ -8+i1 == 0) /\ i1'=9, i3'=1+i3
   9: (i4-i5 == 0 /\ -8+i1 == 0) /\ i1'=10, i3'=1+i3
  10: -9+i1 == 0 /\ i1'=8, i3'=1+i3, i4'=1+i4
  11: -10+i1 == 0 /\ i1'=11, i3'=1+i3

Dependency graph:
0 -> 1
1 -> 2
2 -> 3
3 -> 4
4 -> 5
5 -> 6
6 -> 7, 6 -> 8, 6 -> 9
7 -> 10
8 -> 10
9 -> 11
10 -> 7, 10 -> 8, 10 -> 9

Chained Linear Paths

	Applied Chaining

	First rule:
	-1+i1 == 0 /\ i1'=2, i3'=1+i3
	Second rule:
	-2+i1 == 0 /\ i1'=3, i3'=1+i3
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 0, 1
	
	Applied Chaining

	First rule:
	-3+i1 == 0 /\ i1'=4, i3'=1+i3
	Second rule:
	-4+i1 == 0 /\ i1'=5, i3'=1+i3
	New rule:
	(0 == 0 /\ -3+i1 == 0) /\ i1'=5, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 2, 3
	
	Applied Chaining

	First rule:
	-5+i1 == 0 /\ i1'=6, i3'=1+i3
	Second rule:
	-6+i1 == 0 /\ i1'=7, i3'=1+i3
	New rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=7, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 4, 5
	
	Applied Chaining

	First rule:
	(i4-i5 < 0 /\ -8+i1 == 0) /\ i1'=9, i3'=1+i3
	Second rule:
	-9+i1 == 0 /\ i1'=8, i3'=1+i3, i4'=1+i4
	New rule:
	(0 == 0 /\ i4-i5 < 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=1+i4
	
	Applied Deletion

	Removed the following rules: 7
	
	Applied Chaining

	First rule:
	(i4-i5 > 0 /\ -8+i1 == 0) /\ i1'=9, i3'=1+i3
	Second rule:
	-9+i1 == 0 /\ i1'=8, i3'=1+i3, i4'=1+i4
	New rule:
	(0 == 0 /\ i4-i5 > 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=1+i4
	
	Applied Deletion

	Removed the following rules: 8, 10
	
	Applied Chaining

	First rule:
	(i4-i5 == 0 /\ -8+i1 == 0) /\ i1'=10, i3'=1+i3
	Second rule:
	-10+i1 == 0 /\ i1'=11, i3'=1+i3
	New rule:
	(0 == 0 /\ i4-i5 == 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 9, 11
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3
	Second rule:
	(0 == 0 /\ -3+i1 == 0) /\ i1'=5, i3'=2+i3
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=5, i3'=4+i3
	
	Applied Deletion

	Removed the following rules: 12, 13
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=7, i3'=2+i3
	Second rule:
	-7+i1 == 0 /\ i1'=8, i3'=1+i3, i4'=i6
	New rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=8, i3'=3+i3, i4'=i6
	
	Applied Deletion

	Removed the following rules: 6, 14
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=5, i3'=4+i3
	Second rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=8, i3'=3+i3, i4'=i6
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=8, i3'=7+i3, i4'=i6
	
	Applied Deletion

	Removed the following rules: 18, 19

Start location: eval_speedFails2_start

Location map:
LoAT_sink -> 0
eval_speedFails2_start -> 1
eval_speedFails2_bb0_in -> 2
eval_speedFails2_0 -> 3
eval_speedFails2_1 -> 4
eval_speedFails2_2 -> 5
eval_speedFails2_3 -> 6
eval_speedFails2_4 -> 7
eval_speedFails2_bb1_in -> 8
eval_speedFails2_bb2_in -> 9
eval_speedFails2_bb3_in -> 10
eval_speedFails2_stop -> 11

Rules:
  15: (0 == 0 /\ i4-i5 < 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=1+i4
  16: (0 == 0 /\ i4-i5 > 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=1+i4
  17: (0 == 0 /\ i4-i5 == 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
  20: (0 == 0 /\ -1+i1 == 0) /\ i1'=8, i3'=7+i3, i4'=i6

Dependency graph:
15 -> 15, 15 -> 16, 15 -> 17
16 -> 15, 16 -> 16, 16 -> 17
20 -> 15, 20 -> 16, 20 -> 17

Preprocessed Transitions

	Simplified Guard

	Original rule:
	(0 == 0 /\ i4-i5 < 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=1+i4
	New rule:
	(i4-i5 < 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=1+i4
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ i4-i5 > 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=1+i4
	New rule:
	(i4-i5 > 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=1+i4
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ i4-i5 == 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
	New rule:
	(i4-i5 == 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=8, i3'=7+i3, i4'=i6
	New rule:
	-1+i1 == 0 /\ i1'=8, i3'=7+i3, i4'=i6

Start location: eval_speedFails2_start

Location map:
LoAT_sink -> 0
eval_speedFails2_start -> 1
eval_speedFails2_bb0_in -> 2
eval_speedFails2_0 -> 3
eval_speedFails2_1 -> 4
eval_speedFails2_2 -> 5
eval_speedFails2_3 -> 6
eval_speedFails2_4 -> 7
eval_speedFails2_bb1_in -> 8
eval_speedFails2_bb2_in -> 9
eval_speedFails2_bb3_in -> 10
eval_speedFails2_stop -> 11

Rules:
  21: (i4-i5 < 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=1+i4
  22: (i4-i5 > 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=1+i4
  23: (i4-i5 == 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
  24: -1+i1 == 0 /\ i1'=8, i3'=7+i3, i4'=i6

Dependency graph:
21 -> 21, 21 -> 22, 21 -> 23
22 -> 21, 22 -> 22, 22 -> 23
24 -> 21, 24 -> 22, 24 -> 23

Refined Dependency Graph

	Removed the following edges: 21 -> 22, 22 -> 21, 22 -> 23

Start location: eval_speedFails2_start

Location map:
LoAT_sink -> 0
eval_speedFails2_start -> 1
eval_speedFails2_bb0_in -> 2
eval_speedFails2_0 -> 3
eval_speedFails2_1 -> 4
eval_speedFails2_2 -> 5
eval_speedFails2_3 -> 6
eval_speedFails2_4 -> 7
eval_speedFails2_bb1_in -> 8
eval_speedFails2_bb2_in -> 9
eval_speedFails2_bb3_in -> 10
eval_speedFails2_stop -> 11

Rules:
  21: (i4-i5 < 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=1+i4
  22: (i4-i5 > 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=1+i4
  23: (i4-i5 == 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
  24: -1+i1 == 0 /\ i1'=8, i3'=7+i3, i4'=i6

Dependency graph:
21 -> 21, 21 -> 23
22 -> 22
24 -> 21, 24 -> 22, 24 -> 23

Step with 24

	Trace

	24[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 23

	Trace

	24[(-1+i1 == 0)]
	23[(i4-i5 == 0 /\ -8+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	24[(-1+i1 == 0)]
	
	Blocked

	{}
	{23[T]}
	
Step with 21

	Trace

	24[(-1+i1 == 0)]
	21[(i4-i5 < 0 /\ -8+i1 == 0)]
	
	Blocked

	{}
	{23[T]}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(i4-i5 < 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=1+i4
	New rule:
	(1-it16-i4+i5 > 0 /\ -1+it16 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i1'=i1, i3'=2*it16+i3, i4'=it16+i4

		-i4+i5 > 0 [0]: montonic decrease yields 1-it16-i4+i5 > 0
		
		8-i1 >= 0 [0]: unchanged
		
		-8+i1 >= 0 [0]: unchanged
		
		Replacement map: {-i4+i5 > 0 -> 1-it16-i4+i5 > 0, 8-i1 >= 0 -> 8-i1 >= 0, -8+i1 >= 0 -> -8+i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(1-it16-i4+i5 > 0 /\ -1+it16 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i1'=i1, i3'=2*it16+i3, i4'=it16+i4
	New rule:
	(1-it16-i4+i5 > 0 /\ -1+it16 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i3'=2*it16+i3, i4'=it16+i4
	
	Instantiation

	Original rule:
	(1-it16-i4+i5 > 0 /\ -1+it16 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i3'=2*it16+i3, i4'=it16+i4
	New rule:
	(1 > 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-2*i4+2*i5, i4'=i5

Start location: eval_speedFails2_start

Location map:
LoAT_sink -> 0
eval_speedFails2_start -> 1
eval_speedFails2_bb0_in -> 2
eval_speedFails2_0 -> 3
eval_speedFails2_1 -> 4
eval_speedFails2_2 -> 5
eval_speedFails2_3 -> 6
eval_speedFails2_4 -> 7
eval_speedFails2_bb1_in -> 8
eval_speedFails2_bb2_in -> 9
eval_speedFails2_bb3_in -> 10
eval_speedFails2_stop -> 11

Rules:
  21: (i4-i5 < 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=1+i4
  22: (i4-i5 > 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=1+i4
  23: (i4-i5 == 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
  24: -1+i1 == 0 /\ i1'=8, i3'=7+i3, i4'=i6
  25: (1 > 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-2*i4+2*i5, i4'=i5

Dependency graph:
21 -> 21, 21 -> 23, 21 -> 25
22 -> 22
24 -> 21, 24 -> 22, 24 -> 23, 24 -> 25
25 -> 21, 25 -> 23

	Trace

	24[(-1+i1 == 0)]
	25[(1 > 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{23[T]}
	{21[T], 25[T]}
	
Step with 23

	Trace

	24[(-1+i1 == 0)]
	25[(1 > 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0 /\ -1-i4+i5 >= 0)]
	23[(i4-i5 == 0 /\ -8+i1 == 0)]
	
	Blocked

	{}
	{23[T]}
	{21[T], 25[T]}
	{}
	
Backtrack

	Trace

	24[(-1+i1 == 0)]
	25[(1 > 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{23[T]}
	{21[T], 23[T], 25[T]}
	
Backtrack

	Trace

	24[(-1+i1 == 0)]
	
	Blocked

	{}
	{23[T], 25[T]}
	
Step with 22

	Trace

	24[(-1+i1 == 0)]
	22[(i4-i5 > 0 /\ -8+i1 == 0)]
	
	Blocked

	{}
	{23[T], 25[T]}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(i4-i5 > 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=1+i4
	New rule:
	(i4-i5 > 0 /\ -1+it40 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i1'=0

		i4-i5 > 0 [0]: monotonic increase yields i4-i5 > 0
		
		8-i1 >= 0 [0]: unchanged
		
		-8+i1 >= 0 [0]: unchanged
		
		Replacement map: {i4-i5 > 0 -> i4-i5 > 0, 8-i1 >= 0 -> 8-i1 >= 0, -8+i1 >= 0 -> -8+i1 >= 0}

	Loop Acceleration

	Original rule:
	(i4-i5 > 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=1+i4
	New rule:
	(i4-i5 > 0 /\ -1+it40 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i1'=i1, i3'=i3+2*it40, i4'=i4+it40

		i4-i5 > 0 [0]: monotonic increase yields i4-i5 > 0
		
		8-i1 >= 0 [0]: unchanged
		
		-8+i1 >= 0 [0]: unchanged
		
		Replacement map: {i4-i5 > 0 -> i4-i5 > 0, 8-i1 >= 0 -> 8-i1 >= 0, -8+i1 >= 0 -> -8+i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(i4-i5 > 0 /\ -1+it40 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i1'=i1, i3'=i3+2*it40, i4'=i4+it40
	New rule:
	(i4-i5 > 0 /\ -1+it40 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i3'=i3+2*it40, i4'=i4+it40

Start location: eval_speedFails2_start

Location map:
LoAT_sink -> 0
eval_speedFails2_start -> 1
eval_speedFails2_bb0_in -> 2
eval_speedFails2_0 -> 3
eval_speedFails2_1 -> 4
eval_speedFails2_2 -> 5
eval_speedFails2_3 -> 6
eval_speedFails2_4 -> 7
eval_speedFails2_bb1_in -> 8
eval_speedFails2_bb2_in -> 9
eval_speedFails2_bb3_in -> 10
eval_speedFails2_stop -> 11

Rules:
  21: (i4-i5 < 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=1+i4
  22: (i4-i5 > 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=1+i4
  23: (i4-i5 == 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
  24: -1+i1 == 0 /\ i1'=8, i3'=7+i3, i4'=i6
  25: (1 > 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0 /\ -1-i4+i5 >= 0) /\ i3'=i3-2*i4+2*i5, i4'=i5
  26: (i4-i5 > 0 /\ -1+it40 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i1'=0
  27: (i4-i5 > 0 /\ -1+it40 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i3'=i3+2*it40, i4'=i4+it40

Dependency graph:
21 -> 21, 21 -> 23, 21 -> 25
22 -> 22, 22 -> 26, 22 -> 27
24 -> 21, 24 -> 22, 24 -> 23, 24 -> 25, 24 -> 26, 24 -> 27
25 -> 21, 25 -> 23
27 -> 22, 27 -> 26

Step with 26

	Trace

	24[(-1+i1 == 0)]
	26[(i4-i5 > 0 /\ -1+it40 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0)]
	
	Blocked

	{}
	{23[T], 25[T]}
	{26[T]}
	
Refute

	Counterexample

	(i1=1, i3=-7, i5=0, i6=1)
	-24-> (i1=8, i3=0, i4=1, i5=0, i6=1 )
	-26-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l10, l2, l3, l4, l5, l6, l7, l8, l9
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l2(X₀, X₁, X₂)
  t₃: l1(X₀, X₁, X₂) → l4(X₀, X₁, X₂)
  t₁: l2(X₀, X₁, X₂) → l3(X₀, X₁, X₂)
  t₂: l3(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₄: l4(X₀, X₁, X₂) → l5(X₀, X₁, X₂)
  t₅: l5(X₀, X₁, X₂) → l6(X₀, X₁, X₂)
  t₆: l6(X₀, X₁, X₂) → l7(X₂, X₁, X₂)
  t₇: l7(X₀, X₁, X₂) → l8(X₀, X₁, X₂) :|: 1+X₀ ≤ X₁
  t₈: l7(X₀, X₁, X₂) → l8(X₀, X₁, X₂) :|: 1+X₁ ≤ X₀
  t₉: l7(X₀, X₁, X₂) → l9(X₀, X₁, X₂) :|: X₁ ≤ X₀ ∧ X₀ ≤ X₁
  t₁₀: l8(X₀, X₁, X₂) → l7(1+X₀, X₁, X₂)
  t₁₁: l9(X₀, X₁, X₂) → l10(X₀, X₁, X₂)


Preprocessing
  Found invariant X₂ ≤ X₀ for location l7


  Found invariant X₂ ≤ X₀ for location l8


  Found invariant X₂ ≤ X₁ ∧ X₂ ≤ X₀ ∧ X₁ ≤ X₀ ∧ X₀ ≤ X₁ for location l10


  Found invariant X₂ ≤ X₁ ∧ X₂ ≤ X₀ ∧ X₁ ≤ X₀ ∧ X₀ ≤ X₁ for location l9


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l10, l2, l3, l4, l5, l6, l7, l8, l9
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l2(X₀, X₁, X₂)
  t₃: l1(X₀, X₁, X₂) → l4(X₀, X₁, X₂)
  t₁: l2(X₀, X₁, X₂) → l3(X₀, X₁, X₂)
  t₂: l3(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₄: l4(X₀, X₁, X₂) → l5(X₀, X₁, X₂)
  t₅: l5(X₀, X₁, X₂) → l6(X₀, X₁, X₂)
  t₆: l6(X₀, X₁, X₂) → l7(X₂, X₁, X₂)
  t₇: l7(X₀, X₁, X₂) → l8(X₀, X₁, X₂) :|: 1+X₀ ≤ X₁ ∧ X₂ ≤ X₀
  t₈: l7(X₀, X₁, X₂) → l8(X₀, X₁, X₂) :|: 1+X₁ ≤ X₀ ∧ X₂ ≤ X₀
  t₉: l7(X₀, X₁, X₂) → l9(X₀, X₁, X₂) :|: X₁ ≤ X₀ ∧ X₀ ≤ X₁ ∧ X₂ ≤ X₀
  t₁₀: l8(X₀, X₁, X₂) → l7(1+X₀, X₁, X₂) :|: X₂ ≤ X₀
  t₁₁: l9(X₀, X₁, X₂) → l10(X₀, X₁, X₂) :|: X₁ ≤ X₀ ∧ X₂ ≤ X₀ ∧ X₀ ≤ X₁ ∧ X₂ ≤ X₁


MPRF for transition t₇: l7(X₀, X₁, X₂) → l8(X₀, X₁, X₂) :|: 1+X₀ ≤ X₁ ∧ X₂ ≤ X₀ of depth 1:
  new bound:
    X₁+X₂ {O(n)}

  MPRF:
    • l7: [X₁-X₀]
    • l8: [X₁-1-X₀]




  Found invariant X₂ ≤ X₀ ∧ 1+X₁ ≤ X₂ ∧ 1+X₁ ≤ X₀ for location l8_v1


  Found invariant 1+X₂ ≤ X₁ ∧ 1+X₂ ≤ X₀ ∧ X₀ ≤ X₁ for location l7_v1


  Found invariant X₂ ≤ X₀ ∧ X₀ ≤ X₂ for location l7


  Found invariant 1+X₂ ≤ X₀ ∧ 1+X₁ ≤ X₂ ∧ 2+X₁ ≤ X₀ for location l7_v2


  Found invariant 1+X₂ ≤ X₁ ∧ X₂ ≤ X₀ ∧ 1+X₀ ≤ X₁ for location l8_v2


  Found invariant X₂ ≤ X₁ ∧ X₂ ≤ X₀ ∧ X₁ ≤ X₀ ∧ X₀ ≤ X₁ for location l10


  Found invariant X₂ ≤ X₁ ∧ X₂ ≤ X₀ ∧ X₁ ≤ X₀ ∧ X₀ ≤ X₁ for location l9


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: 1 {O(1)}
    t₇: X₁+X₂ {O(n)}
    t₈: inf {Infinity}
    t₉: 1 {O(1)}
    t₁₀: inf {Infinity}
    t₁₁: 1 {O(1)}


Costbounds
  Overall costbound: inf {Infinity}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: 1 {O(1)}
    t₇: X₁+X₂ {O(n)}
    t₈: inf {Infinity}
    t₉: 1 {O(1)}
    t₁₀: inf {Infinity}
    t₁₁: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₀, X₂: X₂ {O(n)}
    t₁, X₀: X₀ {O(n)}
    t₁, X₁: X₁ {O(n)}
    t₁, X₂: X₂ {O(n)}
    t₂, X₀: X₀ {O(n)}
    t₂, X₁: X₁ {O(n)}
    t₂, X₂: X₂ {O(n)}
    t₃, X₀: X₀ {O(n)}
    t₃, X₁: X₁ {O(n)}
    t₃, X₂: X₂ {O(n)}
    t₄, X₀: X₀ {O(n)}
    t₄, X₁: X₁ {O(n)}
    t₄, X₂: X₂ {O(n)}
    t₅, X₀: X₀ {O(n)}
    t₅, X₁: X₁ {O(n)}
    t₅, X₂: X₂ {O(n)}
    t₆, X₀: X₂ {O(n)}
    t₆, X₁: X₁ {O(n)}
    t₆, X₂: X₂ {O(n)}
    t₇, X₁: X₁ {O(n)}
    t₇, X₂: X₂ {O(n)}
    t₈, X₁: X₁ {O(n)}
    t₈, X₂: X₂ {O(n)}
    t₉, X₁: 2⋅X₁ {O(n)}
    t₉, X₂: 2⋅X₂ {O(n)}
    t₁₀, X₁: X₁ {O(n)}
    t₁₀, X₂: X₂ {O(n)}
    t₁₁, X₁: 2⋅X₁ {O(n)}
    t₁₁, X₂: 2⋅X₂ {O(n)}

