NO

# LoAT Proof:
NO

NO

Initial ITS

Start location: eval_speedFails1_start

Location map:
LoAT_sink -> 0
eval_speedFails1_start -> 1
eval_speedFails1_bb0_in -> 2
eval_speedFails1_0 -> 3
eval_speedFails1_1 -> 4
eval_speedFails1_2 -> 5
eval_speedFails1_3 -> 6
eval_speedFails1_4 -> 7
eval_speedFails1_bb1_in -> 8
eval_speedFails1_bb2_in -> 9
eval_speedFails1_bb3_in -> 10
eval_speedFails1_stop -> 11

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: -2+i1 == 0 /\ i1'=3, i3'=1+i3
   2: -3+i1 == 0 /\ i1'=4, i3'=1+i3
   3: -4+i1 == 0 /\ i1'=5, i3'=1+i3
   4: -5+i1 == 0 /\ i1'=6, i3'=1+i3
   5: -6+i1 == 0 /\ i1'=7, i3'=1+i3
   6: -7+i1 == 0 /\ i1'=8, i3'=1+i3, i4'=i5
   7: (-i7+i4 <= 0 /\ -8+i1 == 0) /\ i1'=9, i3'=1+i3
   8: (-i7+i4 > 0 /\ -8+i1 == 0) /\ i1'=10, i3'=1+i3
   9: -9+i1 == 0 /\ i1'=8, i3'=1+i3, i4'=i6+i4
  10: -10+i1 == 0 /\ i1'=11, i3'=1+i3

Dependency graph:
0 -> 1
1 -> 2
2 -> 3
3 -> 4
4 -> 5
5 -> 6
6 -> 7, 6 -> 8
7 -> 9
8 -> 10
9 -> 7, 9 -> 8

Chained Linear Paths

	Applied Chaining

	First rule:
	-1+i1 == 0 /\ i1'=2, i3'=1+i3
	Second rule:
	-2+i1 == 0 /\ i1'=3, i3'=1+i3
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 0, 1
	
	Applied Chaining

	First rule:
	-3+i1 == 0 /\ i1'=4, i3'=1+i3
	Second rule:
	-4+i1 == 0 /\ i1'=5, i3'=1+i3
	New rule:
	(0 == 0 /\ -3+i1 == 0) /\ i1'=5, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 2, 3
	
	Applied Chaining

	First rule:
	-5+i1 == 0 /\ i1'=6, i3'=1+i3
	Second rule:
	-6+i1 == 0 /\ i1'=7, i3'=1+i3
	New rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=7, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 4, 5
	
	Applied Chaining

	First rule:
	(-i7+i4 <= 0 /\ -8+i1 == 0) /\ i1'=9, i3'=1+i3
	Second rule:
	-9+i1 == 0 /\ i1'=8, i3'=1+i3, i4'=i6+i4
	New rule:
	(0 == 0 /\ -i7+i4 <= 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=i6+i4
	
	Applied Deletion

	Removed the following rules: 7, 9
	
	Applied Chaining

	First rule:
	(-i7+i4 > 0 /\ -8+i1 == 0) /\ i1'=10, i3'=1+i3
	Second rule:
	-10+i1 == 0 /\ i1'=11, i3'=1+i3
	New rule:
	(0 == 0 /\ -i7+i4 > 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 8, 10
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3
	Second rule:
	(0 == 0 /\ -3+i1 == 0) /\ i1'=5, i3'=2+i3
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=5, i3'=4+i3
	
	Applied Deletion

	Removed the following rules: 11, 12
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=7, i3'=2+i3
	Second rule:
	-7+i1 == 0 /\ i1'=8, i3'=1+i3, i4'=i5
	New rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=8, i3'=3+i3, i4'=i5
	
	Applied Deletion

	Removed the following rules: 6, 13
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=5, i3'=4+i3
	Second rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=8, i3'=3+i3, i4'=i5
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=8, i3'=7+i3, i4'=i5
	
	Applied Deletion

	Removed the following rules: 16, 17

Start location: eval_speedFails1_start

Location map:
LoAT_sink -> 0
eval_speedFails1_start -> 1
eval_speedFails1_bb0_in -> 2
eval_speedFails1_0 -> 3
eval_speedFails1_1 -> 4
eval_speedFails1_2 -> 5
eval_speedFails1_3 -> 6
eval_speedFails1_4 -> 7
eval_speedFails1_bb1_in -> 8
eval_speedFails1_bb2_in -> 9
eval_speedFails1_bb3_in -> 10
eval_speedFails1_stop -> 11

Rules:
  14: (0 == 0 /\ -i7+i4 <= 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=i6+i4
  15: (0 == 0 /\ -i7+i4 > 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
  18: (0 == 0 /\ -1+i1 == 0) /\ i1'=8, i3'=7+i3, i4'=i5

Dependency graph:
14 -> 14, 14 -> 15
18 -> 14, 18 -> 15

Preprocessed Transitions

	Simplified Guard

	Original rule:
	(0 == 0 /\ -i7+i4 <= 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=i6+i4
	New rule:
	(-i7+i4 <= 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=i6+i4
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -i7+i4 > 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
	New rule:
	(-i7+i4 > 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=8, i3'=7+i3, i4'=i5
	New rule:
	-1+i1 == 0 /\ i1'=8, i3'=7+i3, i4'=i5

Start location: eval_speedFails1_start

Location map:
LoAT_sink -> 0
eval_speedFails1_start -> 1
eval_speedFails1_bb0_in -> 2
eval_speedFails1_0 -> 3
eval_speedFails1_1 -> 4
eval_speedFails1_2 -> 5
eval_speedFails1_3 -> 6
eval_speedFails1_4 -> 7
eval_speedFails1_bb1_in -> 8
eval_speedFails1_bb2_in -> 9
eval_speedFails1_bb3_in -> 10
eval_speedFails1_stop -> 11

Rules:
  19: (-i7+i4 <= 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=i6+i4
  20: (-i7+i4 > 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
  21: -1+i1 == 0 /\ i1'=8, i3'=7+i3, i4'=i5

Dependency graph:
19 -> 19, 19 -> 20
21 -> 19, 21 -> 20

Step with 21

	Trace

	21[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 20

	Trace

	21[(-1+i1 == 0)]
	20[(-i7+i4 > 0 /\ -8+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	21[(-1+i1 == 0)]
	
	Blocked

	{}
	{20[T]}
	
Step with 19

	Trace

	21[(-1+i1 == 0)]
	19[(-i7+i4 <= 0 /\ -8+i1 == 0)]
	
	Blocked

	{}
	{20[T]}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-i7+i4 <= 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=i6+i4
	New rule:
	(i6 <= 0 /\ i7-i4 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i1'=0

		i7-i4 >= 0 [0]: eventual decrease yields (i7-i4 >= 0 /\ -i6*(-1+it19)+i7-i4 >= 0)
		
		i7-i4 >= 0 [1]: eventual increase yields (i6 <= 0 /\ i7-i4 >= 0)
		
		8-i1 >= 0 [0]: unchanged
		
		-8+i1 >= 0 [0]: unchanged
		
		Replacement map: {i7-i4 >= 0 -> (i6 <= 0 /\ i7-i4 >= 0), 8-i1 >= 0 -> 8-i1 >= 0, -8+i1 >= 0 -> -8+i1 >= 0}

	Loop Acceleration

	Original rule:
	(-i7+i4 <= 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=i6+i4
	New rule:
	(i7-i4 >= 0 /\ -1+it19 >= 0 /\ -i6*(-1+it19)+i7-i4 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i1'=i1, i3'=i3+2*it19, i4'=i6*it19+i4

		i7-i4 >= 0 [0]: eventual decrease yields (i7-i4 >= 0 /\ -i6*(-1+it19)+i7-i4 >= 0)
		
		i7-i4 >= 0 [1]: eventual increase yields (i6 <= 0 /\ i7-i4 >= 0)
		
		8-i1 >= 0 [0]: unchanged
		
		-8+i1 >= 0 [0]: unchanged
		
		Replacement map: {i7-i4 >= 0 -> (i7-i4 >= 0 /\ -i6*(-1+it19)+i7-i4 >= 0), 8-i1 >= 0 -> 8-i1 >= 0, -8+i1 >= 0 -> -8+i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(i7-i4 >= 0 /\ -1+it19 >= 0 /\ -i6*(-1+it19)+i7-i4 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i1'=i1, i3'=i3+2*it19, i4'=i6*it19+i4
	New rule:
	(i7-i4 >= 0 /\ -1+it19 >= 0 /\ -i6*(-1+it19)+i7-i4 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i3'=i3+2*it19, i4'=i6*it19+i4

Start location: eval_speedFails1_start

Location map:
LoAT_sink -> 0
eval_speedFails1_start -> 1
eval_speedFails1_bb0_in -> 2
eval_speedFails1_0 -> 3
eval_speedFails1_1 -> 4
eval_speedFails1_2 -> 5
eval_speedFails1_3 -> 6
eval_speedFails1_4 -> 7
eval_speedFails1_bb1_in -> 8
eval_speedFails1_bb2_in -> 9
eval_speedFails1_bb3_in -> 10
eval_speedFails1_stop -> 11

Rules:
  19: (-i7+i4 <= 0 /\ -8+i1 == 0) /\ i1'=8, i3'=2+i3, i4'=i6+i4
  20: (-i7+i4 > 0 /\ -8+i1 == 0) /\ i1'=11, i3'=2+i3
  21: -1+i1 == 0 /\ i1'=8, i3'=7+i3, i4'=i5
  22: (i6 <= 0 /\ i7-i4 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i1'=0
  23: (i7-i4 >= 0 /\ -1+it19 >= 0 /\ -i6*(-1+it19)+i7-i4 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0) /\ i3'=i3+2*it19, i4'=i6*it19+i4

Dependency graph:
19 -> 19, 19 -> 20, 19 -> 22, 19 -> 23
21 -> 19, 21 -> 20, 21 -> 22, 21 -> 23
23 -> 19, 23 -> 20, 23 -> 22

Step with 22

	Trace

	21[(-1+i1 == 0)]
	22[(i6 <= 0 /\ i7-i4 >= 0 /\ 8-i1 >= 0 /\ -8+i1 >= 0)]
	
	Blocked

	{}
	{20[T]}
	{22[T]}
	
Refute

	Counterexample

	(i1=1, i3=-7, i5=0, i6=0, i7=0)
	-21-> (i1=8, i3=0, i4=0, i5=0, i6=0, i7=0 )
	-22-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃
  Temp_Vars:  
  Locations:  l0, l1, l10, l2, l3, l4, l5, l6, l7, l8, l9
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂, X₃) → l2(X₀, X₁, X₂, X₃)
  t₃: l1(X₀, X₁, X₂, X₃) → l4(X₀, X₁, X₂, X₃)
  t₁: l2(X₀, X₁, X₂, X₃) → l3(X₀, X₁, X₂, X₃)
  t₂: l3(X₀, X₁, X₂, X₃) → l1(X₀, X₁, X₂, X₃)
  t₄: l4(X₀, X₁, X₂, X₃) → l5(X₀, X₁, X₂, X₃)
  t₅: l5(X₀, X₁, X₂, X₃) → l6(X₀, X₁, X₂, X₃)
  t₆: l6(X₀, X₁, X₂, X₃) → l7(X₁, X₁, X₂, X₃)
  t₇: l7(X₀, X₁, X₂, X₃) → l8(X₀, X₁, X₂, X₃) :|: X₀ ≤ X₃
  t₈: l7(X₀, X₁, X₂, X₃) → l9(X₀, X₁, X₂, X₃) :|: 1+X₃ ≤ X₀
  t₉: l8(X₀, X₁, X₂, X₃) → l7(X₀+X₂, X₁, X₂, X₃)
  t₁₀: l9(X₀, X₁, X₂, X₃) → l10(X₀, X₁, X₂, X₃)


Preprocessing
  Found invariant X₀ ≤ X₃ for location l8


  Found invariant 1+X₃ ≤ X₀ for location l10


  Found invariant 1+X₃ ≤ X₀ for location l9


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃
  Temp_Vars:  
  Locations:  l0, l1, l10, l2, l3, l4, l5, l6, l7, l8, l9
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂, X₃) → l2(X₀, X₁, X₂, X₃)
  t₃: l1(X₀, X₁, X₂, X₃) → l4(X₀, X₁, X₂, X₃)
  t₁: l2(X₀, X₁, X₂, X₃) → l3(X₀, X₁, X₂, X₃)
  t₂: l3(X₀, X₁, X₂, X₃) → l1(X₀, X₁, X₂, X₃)
  t₄: l4(X₀, X₁, X₂, X₃) → l5(X₀, X₁, X₂, X₃)
  t₅: l5(X₀, X₁, X₂, X₃) → l6(X₀, X₁, X₂, X₃)
  t₆: l6(X₀, X₁, X₂, X₃) → l7(X₁, X₁, X₂, X₃)
  t₇: l7(X₀, X₁, X₂, X₃) → l8(X₀, X₁, X₂, X₃) :|: X₀ ≤ X₃
  t₈: l7(X₀, X₁, X₂, X₃) → l9(X₀, X₁, X₂, X₃) :|: 1+X₃ ≤ X₀
  t₉: l8(X₀, X₁, X₂, X₃) → l7(X₀+X₂, X₁, X₂, X₃) :|: X₀ ≤ X₃
  t₁₀: l9(X₀, X₁, X₂, X₃) → l10(X₀, X₁, X₂, X₃) :|: 1+X₃ ≤ X₀


  Found invariant X₁ ≤ X₃ ∧ X₀ ≤ X₃ ∧ X₁ ≤ X₀ ∧ X₀ ≤ X₁ for location l8_v1


  Found invariant X₁ ≤ X₃ for location l7_v1


  Found invariant X₁ ≤ X₀ ∧ X₀ ≤ X₁ for location l7


  Found invariant X₁ ≤ X₃ ∧ X₀ ≤ X₃ for location l8_v2


  Found invariant 1+X₃ ≤ X₀ ∧ X₁ ≤ X₀ for location l10


  Found invariant 1+X₃ ≤ X₀ ∧ X₁ ≤ X₀ for location l9


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: 1 {O(1)}
    t₇: inf {Infinity}
    t₈: 1 {O(1)}
    t₉: inf {Infinity}
    t₁₀: 1 {O(1)}


Costbounds
  Overall costbound: inf {Infinity}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: 1 {O(1)}
    t₇: inf {Infinity}
    t₈: 1 {O(1)}
    t₉: inf {Infinity}
    t₁₀: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₀, X₂: X₂ {O(n)}
    t₀, X₃: X₃ {O(n)}
    t₁, X₀: X₀ {O(n)}
    t₁, X₁: X₁ {O(n)}
    t₁, X₂: X₂ {O(n)}
    t₁, X₃: X₃ {O(n)}
    t₂, X₀: X₀ {O(n)}
    t₂, X₁: X₁ {O(n)}
    t₂, X₂: X₂ {O(n)}
    t₂, X₃: X₃ {O(n)}
    t₃, X₀: X₀ {O(n)}
    t₃, X₁: X₁ {O(n)}
    t₃, X₂: X₂ {O(n)}
    t₃, X₃: X₃ {O(n)}
    t₄, X₀: X₀ {O(n)}
    t₄, X₁: X₁ {O(n)}
    t₄, X₂: X₂ {O(n)}
    t₄, X₃: X₃ {O(n)}
    t₅, X₀: X₀ {O(n)}
    t₅, X₁: X₁ {O(n)}
    t₅, X₂: X₂ {O(n)}
    t₅, X₃: X₃ {O(n)}
    t₆, X₀: X₁ {O(n)}
    t₆, X₁: X₁ {O(n)}
    t₆, X₂: X₂ {O(n)}
    t₆, X₃: X₃ {O(n)}
    t₇, X₁: X₁ {O(n)}
    t₇, X₂: X₂ {O(n)}
    t₇, X₃: X₃ {O(n)}
    t₈, X₁: 2⋅X₁ {O(n)}
    t₈, X₂: 2⋅X₂ {O(n)}
    t₈, X₃: 2⋅X₃ {O(n)}
    t₉, X₁: X₁ {O(n)}
    t₉, X₂: X₂ {O(n)}
    t₉, X₃: X₃ {O(n)}
    t₁₀, X₁: 2⋅X₁ {O(n)}
    t₁₀, X₂: 2⋅X₂ {O(n)}
    t₁₀, X₃: 2⋅X₃ {O(n)}

