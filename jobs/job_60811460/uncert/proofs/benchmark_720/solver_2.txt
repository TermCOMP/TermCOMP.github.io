WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_speedpldi4_bb1_in/4,eval_speedpldi4_bb2_in/4]
1. non_recursive  : [eval_speedpldi4_stop/4]
2. non_recursive  : [eval_speedpldi4_bb3_in/4]
3. non_recursive  : [exit_location/1]
4. non_recursive  : [eval_speedpldi4_bb1_in_loop_cont/5]
5. non_recursive  : [eval_speedpldi4_2/4]
6. non_recursive  : [eval_speedpldi4_1/4]
7. non_recursive  : [eval_speedpldi4_0/4]
8. non_recursive  : [eval_speedpldi4_bb0_in/4]
9. non_recursive  : [eval_speedpldi4_start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_speedpldi4_bb1_in/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_speedpldi4_bb1_in_loop_cont/5
5. SCC is partially evaluated into eval_speedpldi4_2/4
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is partially evaluated into eval_speedpldi4_start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_speedpldi4_bb1_in/4 
* CE 8 is refined into CE [11] 
* CE 7 is refined into CE [12] 
* CE 5 is refined into CE [13] 
* CE 6 is refined into CE [14] 


### Cost equations --> "Loop" of eval_speedpldi4_bb1_in/4 
* CEs [13] --> Loop 11 
* CEs [14] --> Loop 12 
* CEs [11] --> Loop 13 
* CEs [12] --> Loop 14 

### Ranking functions of CR eval_speedpldi4_bb1_in(V_i_0,V_m,B,C) 
* RF of phase [11]: [V_i_0,V_i_0-V_m+1]
* RF of phase [12]: [V_i_0]

#### Partial ranking functions of CR eval_speedpldi4_bb1_in(V_i_0,V_m,B,C) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    V_i_0
    V_i_0-V_m+1
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    V_i_0


### Specialization of cost equations eval_speedpldi4_bb1_in_loop_cont/5 
* CE 10 is refined into CE [15] 
* CE 9 is refined into CE [16] 


### Cost equations --> "Loop" of eval_speedpldi4_bb1_in_loop_cont/5 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 

### Ranking functions of CR eval_speedpldi4_bb1_in_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR eval_speedpldi4_bb1_in_loop_cont(A,B,C,D,E) 


### Specialization of cost equations eval_speedpldi4_2/4 
* CE 3 is refined into CE [17] 
* CE 4 is refined into CE [18,19,20,21,22] 
* CE 2 is refined into CE [23] 


### Cost equations --> "Loop" of eval_speedpldi4_2/4 
* CEs [17] --> Loop 17 
* CEs [19,22] --> Loop 18 
* CEs [18,20,21] --> Loop 19 
* CEs [23] --> Loop 20 

### Ranking functions of CR eval_speedpldi4_2(V_i_0,V_m,V_n,B) 

#### Partial ranking functions of CR eval_speedpldi4_2(V_i_0,V_m,V_n,B) 


### Specialization of cost equations eval_speedpldi4_start/4 
* CE 1 is refined into CE [24,25,26,27] 


### Cost equations --> "Loop" of eval_speedpldi4_start/4 
* CEs [27] --> Loop 21 
* CEs [26] --> Loop 22 
* CEs [25] --> Loop 23 
* CEs [24] --> Loop 24 

### Ranking functions of CR eval_speedpldi4_start(V_i_0,V_m,V_n,B) 

#### Partial ranking functions of CR eval_speedpldi4_start(V_i_0,V_m,V_n,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_speedpldi4_bb1_in(V_i_0,V_m,B,C):
* Chain [[11],[12],14]: 1*it(11)+1*it(12)+0
  Such that:it(12) =< V_i_0-V_m
it(11) =< V_i_0-V_m+1
it(12) =< V_m

  with precondition: [B=2,C=0,V_m>=2,V_i_0>=V_m+1] 

* Chain [[11],[12],13]: 1*it(11)+1*it(12)+0
  Such that:it(12) =< V_i_0-V_m
it(11) =< V_i_0-V_m+1
it(12) =< V_m

  with precondition: [B=3,V_m>=2,V_i_0>=V_m+1] 

* Chain [[11],14]: 1*it(11)+0
  Such that:it(11) =< V_i_0-V_m+1

  with precondition: [B=2,C=0,V_m>=1,V_i_0>=V_m] 

* Chain [[11],13]: 1*it(11)+0
  Such that:it(11) =< V_i_0-V_m+1

  with precondition: [B=3,V_m>=1,V_i_0>=V_m] 

* Chain [13]: 0
  with precondition: [B=3,V_m>=1] 


#### Cost of chains of eval_speedpldi4_bb1_in_loop_cont(A,B,C,D,E):
* Chain [16]: 0
  with precondition: [A=2,C>=1,D>=C+1] 

* Chain [15]: 0
  with precondition: [A=3,C>=1,D>=C+1] 


#### Cost of chains of eval_speedpldi4_2(V_i_0,V_m,V_n,B):
* Chain [20]: 0
  with precondition: [0>=V_m] 

* Chain [19]: 2*s(1)+0
  Such that:aux(1) =< -V_m+V_n+1
s(1) =< aux(1)

  with precondition: [V_m>=1,V_n>=V_m+1] 

* Chain [18]: 2*s(3)+2*s(4)+0
  Such that:aux(2) =< -V_m+V_n
aux(3) =< -V_m+V_n+1
aux(4) =< V_m
s(3) =< aux(2)
s(4) =< aux(3)
s(3) =< aux(4)

  with precondition: [V_m>=2,V_n>=V_m+1] 

* Chain [17]: 0
  with precondition: [V_m>=V_n] 


#### Cost of chains of eval_speedpldi4_start(V_i_0,V_m,V_n,B):
* Chain [24]: 0
  with precondition: [0>=V_m] 

* Chain [23]: 2*s(8)+0
  Such that:s(7) =< -V_m+V_n+1
s(8) =< s(7)

  with precondition: [V_m>=1,V_n>=V_m+1] 

* Chain [22]: 2*s(12)+2*s(13)+0
  Such that:s(9) =< -V_m+V_n
s(10) =< -V_m+V_n+1
s(11) =< V_m
s(12) =< s(9)
s(13) =< s(10)
s(12) =< s(11)

  with precondition: [V_m>=2,V_n>=V_m+1] 

* Chain [21]: 0
  with precondition: [V_m>=V_n] 


Closed-form bounds of eval_speedpldi4_start(V_i_0,V_m,V_n,B): 
-------------------------------------
* Chain [24] with precondition: [0>=V_m] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [23] with precondition: [V_m>=1,V_n>=V_m+1] 
    - Upper bound: -2*V_m+2*V_n+2 
    - Complexity: n 
* Chain [22] with precondition: [V_m>=2,V_n>=V_m+1] 
    - Upper bound: -4*V_m+4*V_n+2 
    - Complexity: n 
* Chain [21] with precondition: [V_m>=V_n] 
    - Upper bound: 0 
    - Complexity: constant 

### Maximum cost of eval_speedpldi4_start(V_i_0,V_m,V_n,B): nat(-V_m+V_n+1)*2+nat(-V_m+V_n)*2 
Asymptotic class: n 
* Total analysis performed in 69 ms.

