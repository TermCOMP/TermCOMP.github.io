WORST_CASE(?,O(n^1))

# LoAT Proof:
Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f1 -> 2

Rules:
   0: (-1+i4 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3
   1: (-2+i1 == 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=-i4+i5

Dependency graph:
0 -> 1
1 -> 1

Step with 0

	Trace

	0[(-1+i4 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 1

	Trace

	0[(-1+i4 >= 0 /\ -1+i1 == 0)]
	1[(-2+i1 == 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=-i4+i5
	New rule:
	(-2+i1 >= 0 /\ -3/2-i4*(-1+it9)+1/2*it9+i5-1/2*(-1+it9)^2 >= 0 /\ -1+i5 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it9, i4'=i4+it9, i5'=-i4*it9+1/2*it9+i5-1/2*it9^2

		-2+i1 >= 0 [0]: unchanged
		
		-1+i5 >= 0 [0]: eventual decrease yields (-3/2-i4*(-1+it9)+1/2*it9+i5-1/2*(-1+it9)^2 >= 0 /\ -1+i5 >= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -1+i5 >= 0 -> (-3/2-i4*(-1+it9)+1/2*it9+i5-1/2*(-1+it9)^2 >= 0 /\ -1+i5 >= 0), 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ -3/2-i4*(-1+it9)+1/2*it9+i5-1/2*(-1+it9)^2 >= 0 /\ -1+i5 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it9, i4'=i4+it9, i5'=-i4*it9+1/2*it9+i5-1/2*it9^2
	New rule:
	(-2+i1 >= 0 /\ -3/2-i4*(-1+it9)+1/2*it9+i5-1/2*(-1+it9)^2 >= 0 /\ -1+i5 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it9, i4'=i4+it9, i5'=-i4*it9+1/2*it9+i5-1/2*it9^2

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f1 -> 2

Rules:
   0: (-1+i4 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3
   1: (-2+i1 == 0 /\ -1+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=-i4+i5
   2: (-2+i1 >= 0 /\ -3/2-i4*(-1+it9)+1/2*it9+i5-1/2*(-1+it9)^2 >= 0 /\ -1+i5 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it9, i4'=i4+it9, i5'=-i4*it9+1/2*it9+i5-1/2*it9^2

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2
2 -> 1

	Trace

	0[(-1+i4 >= 0 /\ -1+i1 == 0)]
	2[(-2+i1 >= 0 /\ -3/2-i4*(-1+it9)+1/2*it9+i5-1/2*(-1+it9)^2 >= 0 /\ -1+i5 >= 0 /\ -1+it9 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 2[T]}
	
Backtrack

	Trace

	0[(-1+i4 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	
Step with 1

	Trace

	0[(-1+i4 >= 0 /\ -1+i1 == 0)]
	1[(-2+i1 == 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{}
	
Covered

	Trace

	0[(-1+i4 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 2[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(X₀, X₁) :|: 1 ≤ X₀
  t₁: l1(X₀, X₁) → l1(1+X₀, X₁-X₀) :|: 1 ≤ X₁


Preprocessing
  Found invariant 1 ≤ X₀ for location l1


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(X₀, X₁) :|: 1 ≤ X₀
  t₁: l1(X₀, X₁) → l1(1+X₀, X₁-X₀) :|: 1 ≤ X₁ ∧ 1 ≤ X₀


MPRF for transition t₁: l1(X₀, X₁) → l1(1+X₀, X₁-X₀) :|: 1 ≤ X₁ ∧ 1 ≤ X₀ of depth 1:
  new bound:
    X₁ {O(n)}

  MPRF:
    • l1: [X₁]




All Bounds
Timebounds
  Overall timebound:X₁+1 {O(n)}
    t₀: 1 {O(1)}
    t₁: X₁ {O(n)}


Costbounds
  Overall costbound: X₁+1 {O(n)}
    t₀: 1 {O(1)}
    t₁: X₁ {O(n)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₁, X₀: X₀+X₁ {O(n)}
    t₁, X₁: 2⋅X₀+2⋅X₁ {O(n)}

