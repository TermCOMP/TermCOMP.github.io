WORST_CASE(?,O(1))

# LoAT Proof:
Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f4 -> 2
f10 -> 3
f18 -> 4

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0
   1: (1-i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   2: (-3+i1 == 0 /\ 1-i5 >= 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
   3: (-3+i1 == 0 /\ -2+i5 >= 0 /\ -1-it2 >= 0) /\ i1'=4, i3'=1+i3
   4: (-3+i1 == 0 /\ -2+i5 >= 0) /\ i1'=4, i3'=1+i3
   5: (-2+i1 == 0 /\ -2+i4 >= 0) /\ i1'=3, i3'=1+i3, i5'=0

Dependency graph:
0 -> 1, 0 -> 5
1 -> 1, 1 -> 5
2 -> 2, 2 -> 3, 2 -> 4
5 -> 2, 5 -> 3, 5 -> 4

Preprocessed Transitions

	Eliminated Temporary Variables

	Original rule:
	(-3+i1 == 0 /\ -2+i5 >= 0 /\ -1-it2 >= 0) /\ i1'=4, i3'=1+i3
	New rule:
	(-3+i1 == 0 /\ -2+i5 >= 0) /\ i1'=4, i3'=1+i3

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f4 -> 2
f10 -> 3
f18 -> 4

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0
   1: (1-i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   2: (-3+i1 == 0 /\ 1-i5 >= 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
   4: (-3+i1 == 0 /\ -2+i5 >= 0) /\ i1'=4, i3'=1+i3
   5: (-2+i1 == 0 /\ -2+i4 >= 0) /\ i1'=3, i3'=1+i3, i5'=0
   6: (-3+i1 == 0 /\ -2+i5 >= 0) /\ i1'=4, i3'=1+i3

Dependency graph:
0 -> 1, 0 -> 5
1 -> 1, 1 -> 5
2 -> 2, 2 -> 4, 2 -> 6
5 -> 2, 5 -> 4, 5 -> 6

Refined Dependency Graph

	Removed the following edges: 0 -> 5, 5 -> 4, 5 -> 6

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f4 -> 2
f10 -> 3
f18 -> 4

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0
   1: (1-i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   2: (-3+i1 == 0 /\ 1-i5 >= 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
   4: (-3+i1 == 0 /\ -2+i5 >= 0) /\ i1'=4, i3'=1+i3
   5: (-2+i1 == 0 /\ -2+i4 >= 0) /\ i1'=3, i3'=1+i3, i5'=0
   6: (-3+i1 == 0 /\ -2+i5 >= 0) /\ i1'=4, i3'=1+i3

Dependency graph:
0 -> 1
1 -> 1, 1 -> 5
2 -> 2, 2 -> 4, 2 -> 6
5 -> 2

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(1-i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(1-i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
	New rule:
	(-2+i1 >= 0 /\ -1+it11 >= 0 /\ 2-it11-i4 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it11, i4'=it11+i4

		1-i4 >= 0 [0]: montonic decrease yields 2-it11-i4 >= 0
		
		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {1-i4 >= 0 -> 2-it11-i4 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ -1+it11 >= 0 /\ 2-it11-i4 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it11, i4'=it11+i4
	New rule:
	(-2+i1 >= 0 /\ -1+it11 >= 0 /\ 2-it11-i4 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it11, i4'=it11+i4
	
	Instantiation

	Original rule:
	(-2+i1 >= 0 /\ -1+it11 >= 0 /\ 2-it11-i4 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it11, i4'=it11+i4
	New rule:
	(0 >= 0 /\ 1-i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=2+i3-i4, i4'=2

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f4 -> 2
f10 -> 3
f18 -> 4

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0
   1: (1-i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   2: (-3+i1 == 0 /\ 1-i5 >= 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
   4: (-3+i1 == 0 /\ -2+i5 >= 0) /\ i1'=4, i3'=1+i3
   5: (-2+i1 == 0 /\ -2+i4 >= 0) /\ i1'=3, i3'=1+i3, i5'=0
   6: (-3+i1 == 0 /\ -2+i5 >= 0) /\ i1'=4, i3'=1+i3
   7: (0 >= 0 /\ 1-i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=2+i3-i4, i4'=2

Dependency graph:
0 -> 1, 0 -> 7
1 -> 1, 1 -> 5, 1 -> 7
2 -> 2, 2 -> 4, 2 -> 6
5 -> 2
7 -> 1, 7 -> 5

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ 1-i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 7[T]}
	
Step with 5

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ 1-i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	5[(-2+i1 == 0 /\ -2+i4 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 7[T]}
	{}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ 1-i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	5[(-2+i1 == 0 /\ -2+i4 >= 0)]
	2[(-3+i1 == 0 /\ 1-i5 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 7[T]}
	{}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ 1-i5 >= 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
	New rule:
	(-3+i1 >= 0 /\ -1+it24 >= 0 /\ 3-i1 >= 0 /\ 2-it24-i5 >= 0) /\ i1'=i1, i3'=i3+it24, i5'=it24+i5

		-3+i1 >= 0 [0]: unchanged
		
		3-i1 >= 0 [0]: unchanged
		
		1-i5 >= 0 [0]: montonic decrease yields 2-it24-i5 >= 0
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, 3-i1 >= 0 -> 3-i1 >= 0, 1-i5 >= 0 -> 2-it24-i5 >= 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ -1+it24 >= 0 /\ 3-i1 >= 0 /\ 2-it24-i5 >= 0) /\ i1'=i1, i3'=i3+it24, i5'=it24+i5
	New rule:
	(-3+i1 >= 0 /\ -1+it24 >= 0 /\ 3-i1 >= 0 /\ 2-it24-i5 >= 0) /\ i3'=i3+it24, i5'=it24+i5
	
	Instantiation

	Original rule:
	(-3+i1 >= 0 /\ -1+it24 >= 0 /\ 3-i1 >= 0 /\ 2-it24-i5 >= 0) /\ i3'=i3+it24, i5'=it24+i5
	New rule:
	(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ 1-i5 >= 0) /\ i3'=2+i3-i5, i5'=2

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f4 -> 2
f10 -> 3
f18 -> 4

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0
   1: (1-i4 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   2: (-3+i1 == 0 /\ 1-i5 >= 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
   4: (-3+i1 == 0 /\ -2+i5 >= 0) /\ i1'=4, i3'=1+i3
   5: (-2+i1 == 0 /\ -2+i4 >= 0) /\ i1'=3, i3'=1+i3, i5'=0
   6: (-3+i1 == 0 /\ -2+i5 >= 0) /\ i1'=4, i3'=1+i3
   7: (0 >= 0 /\ 1-i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=2+i3-i4, i4'=2
   8: (0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ 1-i5 >= 0) /\ i3'=2+i3-i5, i5'=2

Dependency graph:
0 -> 1, 0 -> 7
1 -> 1, 1 -> 5, 1 -> 7
2 -> 2, 2 -> 4, 2 -> 6, 2 -> 8
5 -> 2, 5 -> 8
7 -> 1, 7 -> 5
8 -> 2, 8 -> 4, 8 -> 6

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ 1-i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	5[(-2+i1 == 0 /\ -2+i4 >= 0)]
	8[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ 1-i5 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 7[T]}
	{}
	{2[T], 8[T]}
	
Step with 6

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ 1-i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	5[(-2+i1 == 0 /\ -2+i4 >= 0)]
	8[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ 1-i5 >= 0)]
	6[(-3+i1 == 0 /\ -2+i5 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 7[T]}
	{}
	{2[T], 8[T]}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ 1-i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	5[(-2+i1 == 0 /\ -2+i4 >= 0)]
	8[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ 1-i5 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 7[T]}
	{}
	{2[T], 6[T], 8[T]}
	
Step with 4

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ 1-i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	5[(-2+i1 == 0 /\ -2+i4 >= 0)]
	8[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ 1-i5 >= 0)]
	4[(-3+i1 == 0 /\ -2+i5 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 7[T]}
	{}
	{2[T], 6[T], 8[T]}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ 1-i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	5[(-2+i1 == 0 /\ -2+i4 >= 0)]
	8[(0 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ 1-i5 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 7[T]}
	{}
	{2[T], 4[T], 6[T], 8[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ 1-i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	5[(-2+i1 == 0 /\ -2+i4 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 7[T]}
	{8[T]}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ 1-i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	5[(-2+i1 == 0 /\ -2+i4 >= 0)]
	2[(-3+i1 == 0 /\ 1-i5 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 7[T]}
	{8[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ 1-i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	5[(-2+i1 == 0 /\ -2+i4 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 7[T]}
	{2[T], 8[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ 1-i4 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 5[T], 7[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{7[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(1-i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{7[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 7[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  C
  Locations:  l0, l1, l2, l3
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(0, X₁)
  t₁: l1(X₀, X₁) → l1(1+X₀, X₁) :|: X₀ ≤ 1
  t₅: l1(X₀, X₁) → l2(X₀, 0) :|: 2 ≤ X₀
  t₂: l2(X₀, X₁) → l2(X₀, 1+X₁) :|: X₁ ≤ 1
  t₃: l2(X₀, X₁) → l3(X₀, X₁) :|: 1+C ≤ 0 ∧ 2 ≤ X₁
  t₄: l2(X₀, X₁) → l3(X₀, X₁) :|: 2 ≤ X₁


Preprocessing
  Found invariant X₀ ≤ 2 ∧ 0 ≤ X₀ for location l1


  Found invariant X₁ ≤ 2 ∧ X₁ ≤ X₀ ∧ X₀+X₁ ≤ 4 ∧ 0 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ X₀ ≤ 2+X₁ ∧ X₀ ≤ 2 ∧ 2 ≤ X₀ for location l2


  Found invariant X₁ ≤ 2 ∧ X₁ ≤ X₀ ∧ X₀+X₁ ≤ 4 ∧ 2 ≤ X₁ ∧ 4 ≤ X₀+X₁ ∧ X₀ ≤ X₁ ∧ X₀ ≤ 2 ∧ 2 ≤ X₀ for location l3


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  C
  Locations:  l0, l1, l2, l3
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(0, X₁)
  t₁: l1(X₀, X₁) → l1(1+X₀, X₁) :|: X₀ ≤ 1 ∧ X₀ ≤ 2 ∧ 0 ≤ X₀
  t₅: l1(X₀, X₁) → l2(X₀, 0) :|: 2 ≤ X₀ ∧ X₀ ≤ 2 ∧ 0 ≤ X₀
  t₂: l2(X₀, X₁) → l2(X₀, 1+X₁) :|: X₁ ≤ 1 ∧ X₀+X₁ ≤ 4 ∧ X₀ ≤ 2 ∧ X₀ ≤ 2+X₁ ∧ X₁ ≤ 2 ∧ 2 ≤ X₀ ∧ 2 ≤ X₀+X₁ ∧ X₁ ≤ X₀ ∧ 0 ≤ X₁
  t₃: l2(X₀, X₁) → l3(X₀, X₁) :|: 1+C ≤ 0 ∧ 2 ≤ X₁ ∧ X₀+X₁ ≤ 4 ∧ X₀ ≤ 2 ∧ X₀ ≤ 2+X₁ ∧ X₁ ≤ 2 ∧ 2 ≤ X₀ ∧ 2 ≤ X₀+X₁ ∧ X₁ ≤ X₀ ∧ 0 ≤ X₁
  t₄: l2(X₀, X₁) → l3(X₀, X₁) :|: 2 ≤ X₁ ∧ X₀+X₁ ≤ 4 ∧ X₀ ≤ 2 ∧ X₀ ≤ 2+X₁ ∧ X₁ ≤ 2 ∧ 2 ≤ X₀ ∧ 2 ≤ X₀+X₁ ∧ X₁ ≤ X₀ ∧ 0 ≤ X₁


MPRF for transition t₁: l1(X₀, X₁) → l1(1+X₀, X₁) :|: X₀ ≤ 1 ∧ X₀ ≤ 2 ∧ 0 ≤ X₀ of depth 1:
  new bound:
    3 {O(1)}

  MPRF:
    • l1: [3-X₀]




MPRF for transition t₂: l2(X₀, X₁) → l2(X₀, 1+X₁) :|: X₁ ≤ 1 ∧ X₀+X₁ ≤ 4 ∧ X₀ ≤ 2 ∧ X₀ ≤ 2+X₁ ∧ X₁ ≤ 2 ∧ 2 ≤ X₀ ∧ 2 ≤ X₀+X₁ ∧ X₁ ≤ X₀ ∧ 0 ≤ X₁ of depth 1:
  new bound:
    3 {O(1)}

  MPRF:
    • l2: [1+X₀-X₁]




All Bounds
Timebounds
  Overall timebound:10 {O(1)}
    t₀: 1 {O(1)}
    t₁: 3 {O(1)}
    t₂: 3 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}


Costbounds
  Overall costbound: 10 {O(1)}
    t₀: 1 {O(1)}
    t₁: 3 {O(1)}
    t₂: 3 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}


Sizebounds
    t₀, X₀: 0 {O(1)}
    t₀, X₁: X₁ {O(n)}
    t₁, X₀: 2 {O(1)}
    t₁, X₁: X₁ {O(n)}
    t₂, X₀: 2 {O(1)}
    t₂, X₁: 2 {O(1)}
    t₃, X₀: 2 {O(1)}
    t₃, X₁: 2 {O(1)}
    t₄, X₀: 2 {O(1)}
    t₄, X₁: 2 {O(1)}
    t₅, X₀: 2 {O(1)}
    t₅, X₁: 0 {O(1)}

