WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: eval0

Location map:
LoAT_sink -> 0
eval0 -> 1
eval1 -> 2

Rules:
   0: (-1+i4 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=i4+i5
   2: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=-i4+i5

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2
2 -> 1, 2 -> 2

Refined Dependency Graph

	Removed the following edges: 2 -> 1, 2 -> 2

Start location: eval0

Location map:
LoAT_sink -> 0
eval0 -> 1
eval1 -> 2

Rules:
   0: (-1+i4 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=i4+i5
   2: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=-i4+i5

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2

Step with 0

	Trace

	0[(-1+i4 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	0[(-1+i4 >= 0 /\ -1+i1 == 0)]
	2[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	0[(-1+i4 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	
Step with 1

	Trace

	0[(-1+i4 >= 0 /\ -1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=i4+i5
	New rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+i6-i4 >= 0 /\ 2-i1 >= 0 /\ -1+it16 >= 0 /\ -1+i4-i4*(-1+it16)-i5 >= 0) /\ i1'=i1, i3'=it16+i3, i5'=it16*i4+i5

		-1+i4 >= 0 [0]: unchanged
		
		-2+i1 >= 0 [0]: unchanged
		
		-1+i6-i4 >= 0 [0]: unchanged
		
		-1+i4-i5 >= 0 [0]: montonic decrease yields -1+i4-i4*(-1+it16)-i5 >= 0, dependencies: -1+i4 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-1+i4 >= 0 -> -1+i4 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, -1+i6-i4 >= 0 -> -1+i6-i4 >= 0, -1+i4-i5 >= 0 -> -1+i4-i4*(-1+it16)-i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+i6-i4 >= 0 /\ 2-i1 >= 0 /\ -1+it16 >= 0 /\ -1+i4-i4*(-1+it16)-i5 >= 0) /\ i1'=i1, i3'=it16+i3, i5'=it16*i4+i5
	New rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+i6-i4 >= 0 /\ 2-i1 >= 0 /\ -1+it16 >= 0 /\ -1+i4-i4*(-1+it16)-i5 >= 0) /\ i3'=it16+i3, i5'=it16*i4+i5

Start location: eval0

Location map:
LoAT_sink -> 0
eval0 -> 1
eval1 -> 2

Rules:
   0: (-1+i4 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=i4+i5
   2: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=-i4+i5
   3: (-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+i6-i4 >= 0 /\ 2-i1 >= 0 /\ -1+it16 >= 0 /\ -1+i4-i4*(-1+it16)-i5 >= 0) /\ i3'=it16+i3, i5'=it16*i4+i5

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3
1 -> 1, 1 -> 2, 1 -> 3
3 -> 1, 3 -> 2

	Trace

	0[(-1+i4 >= 0 /\ -1+i1 == 0)]
	3[(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+i6-i4 >= 0 /\ 2-i1 >= 0 /\ -1+it16 >= 0 /\ -1+i4-i4*(-1+it16)-i5 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T], 3[T]}
	
Step with 2

	Trace

	0[(-1+i4 >= 0 /\ -1+i1 == 0)]
	3[(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+i6-i4 >= 0 /\ 2-i1 >= 0 /\ -1+it16 >= 0 /\ -1+i4-i4*(-1+it16)-i5 >= 0)]
	2[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T], 3[T]}
	{}
	
Backtrack

	Trace

	0[(-1+i4 >= 0 /\ -1+i1 == 0)]
	3[(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+i6-i4 >= 0 /\ 2-i1 >= 0 /\ -1+it16 >= 0 /\ -1+i4-i4*(-1+it16)-i5 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T], 2[T], 3[T]}
	
Backtrack

	Trace

	0[(-1+i4 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{2[T], 3[T]}
	
Step with 1

	Trace

	0[(-1+i4 >= 0 /\ -1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+i6-i4 >= 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{2[T], 3[T]}
	{}
	
Covered

	Trace

	0[(-1+i4 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 2[T], 3[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂) :|: 1 ≤ X₀
  t₁: l1(X₀, X₁, X₂) → l1(X₀, X₀+X₁, X₂) :|: 1 ≤ X₀ ∧ 1+X₁ ≤ X₀ ∧ 1+X₀ ≤ X₂
  t₂: l1(X₀, X₁, X₂) → l1(X₀, X₁, X₁-X₀) :|: 1 ≤ X₀ ∧ 1+X₁ ≤ X₀ ∧ 1+X₀ ≤ X₂


Preprocessing
  Found invariant 1 ≤ X₀ for location l1


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂) :|: 1 ≤ X₀
  t₁: l1(X₀, X₁, X₂) → l1(X₀, X₀+X₁, X₂) :|: 1 ≤ X₀ ∧ 1+X₁ ≤ X₀ ∧ 1+X₀ ≤ X₂
  t₂: l1(X₀, X₁, X₂) → l1(X₀, X₁, X₁-X₀) :|: 1 ≤ X₀ ∧ 1+X₁ ≤ X₀ ∧ 1+X₀ ≤ X₂


MPRF for transition t₁: l1(X₀, X₁, X₂) → l1(X₀, X₀+X₁, X₂) :|: 1 ≤ X₀ ∧ 1+X₁ ≤ X₀ ∧ 1+X₀ ≤ X₂ of depth 1:
  new bound:
    X₀+X₁ {O(n)}

  MPRF:
    • l1: [X₀-X₁]




MPRF for transition t₂: l1(X₀, X₁, X₂) → l1(X₀, X₁, X₁-X₀) :|: 1 ≤ X₀ ∧ 1+X₁ ≤ X₀ ∧ 1+X₀ ≤ X₂ of depth 1:
  new bound:
    X₀+X₂ {O(n)}

  MPRF:
    • l1: [X₂-X₀]




All Bounds
Timebounds
  Overall timebound:2⋅X₀+X₁+X₂+1 {O(n)}
    t₀: 1 {O(1)}
    t₁: X₀+X₁ {O(n)}
    t₂: X₀+X₂ {O(n)}


Costbounds
  Overall costbound: 2⋅X₀+X₁+X₂+1 {O(n)}
    t₀: 1 {O(1)}
    t₁: X₀+X₁ {O(n)}
    t₂: X₀+X₂ {O(n)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₀, X₂: X₂ {O(n)}
    t₁, X₀: X₀ {O(n)}
    t₁, X₁: 2⋅X₀⋅X₁+2⋅X₀^2+2⋅X₀+X₁ {O(n^2)}
    t₁, X₂: X₂ {O(n)}
    t₂, X₀: 2⋅X₀ {O(n)}
    t₂, X₁: 2⋅X₀⋅X₁+2⋅X₀^2+2⋅X₀+2⋅X₁ {O(n^2)}
    t₂, X₂: 2⋅X₀⋅X₁+2⋅X₀^2+2⋅X₁+4⋅X₀ {O(n^2)}

