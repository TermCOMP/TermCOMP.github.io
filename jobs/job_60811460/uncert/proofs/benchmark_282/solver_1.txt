NO

# LoAT Proof:
NO

NO

Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f1 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+it4 >= 0 /\ i5 == 0) /\ i1'=2, i3'=1+i3, i4'=it6, i5'=it5, i6'=i5

Dependency graph:
0 -> 1
1 -> 1

Preprocessed Transitions

	Eliminated Temporary Variables

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1+it4 >= 0 /\ i5 == 0) /\ i1'=2, i3'=1+i3, i4'=it6, i5'=it5, i6'=i5
	New rule:
	(-1+i4 >= 0 /\ -2+i1 == 0 /\ i5 == 0) /\ i1'=2, i3'=1+i3, i4'=it6, i5'=it5, i6'=i5

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f1 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   2: (-1+i4 >= 0 /\ -2+i1 == 0 /\ i5 == 0) /\ i1'=2, i3'=1+i3, i4'=it6, i5'=it5, i6'=i5

Dependency graph:
0 -> 2
2 -> 2

Unrolled Loops

	Unrolling

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 == 0 /\ i5 == 0) /\ i1'=2, i3'=1+i3, i4'=it6, i5'=it5, i6'=i5
	New rule:
	(0 == 0 /\ -1+it6 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0 /\ it5 == 0 /\ i5 == 0) /\ i1'=2, i3'=2+i3, i4'=it7, i5'=it8, i6'=it5
	
	Propagated Equalities

	Original rule:
	(0 == 0 /\ -1+it6 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0 /\ it5 == 0 /\ i5 == 0) /\ i1'=2, i3'=2+i3, i4'=it7, i5'=it8, i6'=it5
	New rule:
	(0 == 0 /\ -1+it6 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0 /\ i5 == 0) /\ i1'=2, i3'=2+i3, i4'=it7, i5'=it8, i6'=0
	
		propagated equality it5 = 0
		
	Simplified Guard

	Original rule:
	(0 == 0 /\ -1+it6 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0 /\ i5 == 0) /\ i1'=2, i3'=2+i3, i4'=it7, i5'=it8, i6'=0
	New rule:
	(-1+it6 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0 /\ i5 == 0) /\ i1'=2, i3'=2+i3, i4'=it7, i5'=it8, i6'=0
	
	Eliminated Temporary Variables

	Original rule:
	(-1+it6 >= 0 /\ -1+i4 >= 0 /\ -2+i1 == 0 /\ i5 == 0) /\ i1'=2, i3'=2+i3, i4'=it7, i5'=it8, i6'=0
	New rule:
	(-1+i4 >= 0 /\ -2+i1 == 0 /\ i5 == 0) /\ i1'=2, i3'=2+i3, i4'=it7, i5'=it8, i6'=0

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f1 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   2: (-1+i4 >= 0 /\ -2+i1 == 0 /\ i5 == 0) /\ i1'=2, i3'=1+i3, i4'=it6, i5'=it5, i6'=i5
   3: (-1+i4 >= 0 /\ -2+i1 == 0 /\ i5 == 0) /\ i1'=2, i3'=2+i3, i4'=it7, i5'=it8, i6'=0

Dependency graph:
0 -> 2, 0 -> 3
2 -> 2, 2 -> 3
3 -> 2, 3 -> 3

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	3[(-1+i4 >= 0 /\ -2+i1 == 0 /\ i5 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 == 0 /\ i5 == 0) /\ i1'=2, i3'=2+i3, i4'=it7, i5'=it8, i6'=0
	New rule:
	(-it8+i5 <= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ it8-i5 <= 0 /\ -i5 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0 /\ -it7+i4 <= 0) /\ i1'=0

		-1+i4 >= 0 [0]: eventual decrease yields (-1+i4 >= 0 /\ -1+it7 >= 0)
		
		-1+i4 >= 0 [1]: eventual increase yields (-1+i4 >= 0 /\ -it7+i4 <= 0)
		
		-2+i1 >= 0 [0]: unchanged
		
		-i5 >= 0 [0]: eventual decrease yields (-it8 >= 0 /\ -i5 >= 0)
		
		-i5 >= 0 [1]: eventual increase yields (it8-i5 <= 0 /\ -i5 >= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		i5 >= 0 [0]: eventual decrease yields (it8 >= 0 /\ i5 >= 0)
		
		i5 >= 0 [1]: eventual increase yields (-it8+i5 <= 0 /\ i5 >= 0)
		
		Replacement map: {-1+i4 >= 0 -> (-1+i4 >= 0 /\ -it7+i4 <= 0), -2+i1 >= 0 -> -2+i1 >= 0, -i5 >= 0 -> (it8-i5 <= 0 /\ -i5 >= 0), 2-i1 >= 0 -> 2-i1 >= 0, i5 >= 0 -> (-it8+i5 <= 0 /\ i5 >= 0)}

	Loop Acceleration

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 == 0 /\ i5 == 0) /\ i1'=2, i3'=2+i3, i4'=it7, i5'=it8, i6'=0
	New rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -it8 >= 0 /\ -1+it25 >= 0 /\ -i5 >= 0 /\ -1+it7 >= 0 /\ it8 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0) /\ i1'=i1, i3'=i3+2*it25, i4'=it7, i5'=it8, i6'=0

		-1+i4 >= 0 [0]: eventual decrease yields (-1+i4 >= 0 /\ -1+it7 >= 0)
		
		-1+i4 >= 0 [1]: eventual increase yields (-1+i4 >= 0 /\ -it7+i4 <= 0)
		
		-2+i1 >= 0 [0]: unchanged
		
		-i5 >= 0 [0]: eventual decrease yields (-it8 >= 0 /\ -i5 >= 0)
		
		-i5 >= 0 [1]: eventual increase yields (it8-i5 <= 0 /\ -i5 >= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		i5 >= 0 [0]: eventual decrease yields (it8 >= 0 /\ i5 >= 0)
		
		i5 >= 0 [1]: eventual increase yields (-it8+i5 <= 0 /\ i5 >= 0)
		
		Replacement map: {-1+i4 >= 0 -> (-1+i4 >= 0 /\ -1+it7 >= 0), -2+i1 >= 0 -> -2+i1 >= 0, -i5 >= 0 -> (-it8 >= 0 /\ -i5 >= 0), 2-i1 >= 0 -> 2-i1 >= 0, i5 >= 0 -> (it8 >= 0 /\ i5 >= 0)}

	Extracted Implied Equalities

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -it8 >= 0 /\ -1+it25 >= 0 /\ -i5 >= 0 /\ -1+it7 >= 0 /\ it8 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0) /\ i1'=i1, i3'=i3+2*it25, i4'=it7, i5'=it8, i6'=0
	New rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -it8 >= 0 /\ -1+it25 >= 0 /\ -i5 >= 0 /\ -1+it7 >= 0 /\ it8 >= 0 /\ it8 == 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ i5 >= 0 /\ i5 == 0) /\ i1'=i1, i3'=i3+2*it25, i4'=it7, i5'=it8, i6'=0
	
	Propagated Equalities

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -it8 >= 0 /\ -1+it25 >= 0 /\ -i5 >= 0 /\ -1+it7 >= 0 /\ it8 >= 0 /\ it8 == 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ i5 >= 0 /\ i5 == 0) /\ i1'=i1, i3'=i3+2*it25, i4'=it7, i5'=it8, i6'=0
	New rule:
	(0 >= 0 /\ 0 == 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it25 >= 0 /\ -i5 >= 0 /\ -1+it7 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ i5 >= 0 /\ i5 == 0) /\ i1'=i1, i3'=i3+2*it25, i4'=it7, i5'=0, i6'=0
	
		propagated equality it8 = 0
		
	Simplified Guard

	Original rule:
	(0 >= 0 /\ 0 == 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it25 >= 0 /\ -i5 >= 0 /\ -1+it7 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ i5 >= 0 /\ i5 == 0) /\ i1'=i1, i3'=i3+2*it25, i4'=it7, i5'=0, i6'=0
	New rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it25 >= 0 /\ -i5 >= 0 /\ -1+it7 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ i5 >= 0 /\ i5 == 0) /\ i1'=i1, i3'=i3+2*it25, i4'=it7, i5'=0, i6'=0
	
	Removed Trivial Updates

	Original rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it25 >= 0 /\ -i5 >= 0 /\ -1+it7 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ i5 >= 0 /\ i5 == 0) /\ i1'=i1, i3'=i3+2*it25, i4'=it7, i5'=0, i6'=0
	New rule:
	(-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it25 >= 0 /\ -i5 >= 0 /\ -1+it7 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ i5 >= 0 /\ i5 == 0) /\ i3'=i3+2*it25, i4'=it7, i5'=0, i6'=0

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f1 -> 2

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   2: (-1+i4 >= 0 /\ -2+i1 == 0 /\ i5 == 0) /\ i1'=2, i3'=1+i3, i4'=it6, i5'=it5, i6'=i5
   3: (-1+i4 >= 0 /\ -2+i1 == 0 /\ i5 == 0) /\ i1'=2, i3'=2+i3, i4'=it7, i5'=it8, i6'=0
   4: (-it8+i5 <= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ it8-i5 <= 0 /\ -i5 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0 /\ -it7+i4 <= 0) /\ i1'=0
   5: (-1+i4 >= 0 /\ -2+i1 >= 0 /\ -1+it25 >= 0 /\ -i5 >= 0 /\ -1+it7 >= 0 /\ 2-i1 >= 0 /\ 2-i1 == 0 /\ i5 >= 0 /\ i5 == 0) /\ i3'=i3+2*it25, i4'=it7, i5'=0, i6'=0

Dependency graph:
0 -> 2, 0 -> 3, 0 -> 4, 0 -> 5
2 -> 2, 2 -> 3, 2 -> 4, 2 -> 5
3 -> 2, 3 -> 3, 3 -> 4, 3 -> 5
5 -> 2, 5 -> 3, 5 -> 4

Step with 4

	Trace

	0[(-1+i1 == 0)]
	4[(-it8+i5 <= 0 /\ -1+i4 >= 0 /\ -2+i1 >= 0 /\ it8-i5 <= 0 /\ -i5 >= 0 /\ 2-i1 >= 0 /\ i5 >= 0 /\ -it7+i4 <= 0)]
	
	Blocked

	{}
	{}
	{4[T]}
	
Refute

	Counterexample

	(i1=1, i3=-1, i4=1, i5=0, i6=0)
	-0-> (i1=2, i3=0, i4=1, i5=0, i6=0 )
	-4-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  D, E, F
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₁: l1(X₀, X₁, X₂) → l1(E, F, X₁) :|: 1 ≤ D ∧ 1 ≤ X₀ ∧ 0 ≤ X₁ ∧ X₁ ≤ 0


Preprocessing
  Eliminate variables [X₂] that do not contribute to the problem


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  D, E, F
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₂: l0(X₀, X₁) → l1(X₀, X₁)
  t₃: l1(X₀, X₁) → l1(E, F) :|: 1 ≤ D ∧ 1 ≤ X₀ ∧ 0 ≤ X₁ ∧ X₁ ≤ 0


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₂: 1 {O(1)}
    t₃: inf {Infinity}


Costbounds
  Overall costbound: inf {Infinity}
    t₂: 1 {O(1)}
    t₃: inf {Infinity}


Sizebounds
    t₂, X₀: X₀ {O(n)}
    t₂, X₁: X₁ {O(n)}

