WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: eval_random1d_start

Location map:
LoAT_sink -> 0
eval_random1d_start -> 1
eval_random1d_bb0_in -> 2
eval_random1d_0 -> 3
eval_random1d_1 -> 4
eval_random1d_bb1_in -> 5
eval_random1d_bb3_in -> 6
eval_random1d_bb2_in -> 7
eval_random1d_2 -> 8
eval_random1d_3 -> 9
eval_random1d_stop -> 10

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: -2+i1 == 0 /\ i1'=3, i3'=1+i3
   2: -3+i1 == 0 /\ i1'=4, i3'=1+i3
   3: (-4+i1 == 0 /\ i5 > 0) /\ i1'=5, i3'=1+i3, i6'=1
   4: (-4+i1 == 0 /\ i5 <= 0) /\ i1'=6, i3'=1+i3
   5: (-5+i1 == 0 /\ i6-i5 <= 0) /\ i1'=7, i3'=1+i3
   6: (-5+i1 == 0 /\ i6-i5 > 0) /\ i1'=6, i3'=1+i3
   7: -7+i1 == 0 /\ i1'=8, i3'=1+i3
   8: -8+i1 == 0 /\ i1'=9, i3'=1+i3, i4'=it2
   9: (-9+i1 == 0 /\ i4 > 0) /\ i1'=5, i3'=1+i3, i6'=1+i6
  10: (-9+i1 == 0 /\ i4 <= 0) /\ i1'=5, i3'=1+i3, i6'=1+i6
  11: -6+i1 == 0 /\ i1'=10, i3'=1+i3

Dependency graph:
0 -> 1
1 -> 2
2 -> 3, 2 -> 4
3 -> 5, 3 -> 6
4 -> 11
5 -> 7
6 -> 11
7 -> 8
8 -> 9, 8 -> 10
9 -> 5, 9 -> 6
10 -> 5, 10 -> 6

Chained Linear Paths

	Applied Chaining

	First rule:
	-1+i1 == 0 /\ i1'=2, i3'=1+i3
	Second rule:
	-2+i1 == 0 /\ i1'=3, i3'=1+i3
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 0, 1
	
	Applied Chaining

	First rule:
	(-4+i1 == 0 /\ i5 <= 0) /\ i1'=6, i3'=1+i3
	Second rule:
	-6+i1 == 0 /\ i1'=10, i3'=1+i3
	New rule:
	(0 == 0 /\ -4+i1 == 0 /\ i5 <= 0) /\ i1'=10, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 4
	
	Applied Chaining

	First rule:
	(-5+i1 == 0 /\ i6-i5 <= 0) /\ i1'=7, i3'=1+i3
	Second rule:
	-7+i1 == 0 /\ i1'=8, i3'=1+i3
	New rule:
	(0 == 0 /\ -5+i1 == 0 /\ i6-i5 <= 0) /\ i1'=8, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 5, 7
	
	Applied Chaining

	First rule:
	(-5+i1 == 0 /\ i6-i5 > 0) /\ i1'=6, i3'=1+i3
	Second rule:
	-6+i1 == 0 /\ i1'=10, i3'=1+i3
	New rule:
	(0 == 0 /\ -5+i1 == 0 /\ i6-i5 > 0) /\ i1'=10, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 6, 11
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3
	Second rule:
	-3+i1 == 0 /\ i1'=4, i3'=1+i3
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=4, i3'=3+i3
	
	Applied Deletion

	Removed the following rules: 2, 12
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -5+i1 == 0 /\ i6-i5 <= 0) /\ i1'=8, i3'=2+i3
	Second rule:
	-8+i1 == 0 /\ i1'=9, i3'=1+i3, i4'=it2
	New rule:
	(0 == 0 /\ -5+i1 == 0 /\ i6-i5 <= 0) /\ i1'=9, i3'=3+i3, i4'=it2
	
	Applied Deletion

	Removed the following rules: 8, 14

Start location: eval_random1d_start

Location map:
LoAT_sink -> 0
eval_random1d_start -> 1
eval_random1d_bb0_in -> 2
eval_random1d_0 -> 3
eval_random1d_1 -> 4
eval_random1d_bb1_in -> 5
eval_random1d_bb3_in -> 6
eval_random1d_bb2_in -> 7
eval_random1d_2 -> 8
eval_random1d_3 -> 9
eval_random1d_stop -> 10

Rules:
   3: (-4+i1 == 0 /\ i5 > 0) /\ i1'=5, i3'=1+i3, i6'=1
   9: (-9+i1 == 0 /\ i4 > 0) /\ i1'=5, i3'=1+i3, i6'=1+i6
  10: (-9+i1 == 0 /\ i4 <= 0) /\ i1'=5, i3'=1+i3, i6'=1+i6
  13: (0 == 0 /\ -4+i1 == 0 /\ i5 <= 0) /\ i1'=10, i3'=2+i3
  15: (0 == 0 /\ -5+i1 == 0 /\ i6-i5 > 0) /\ i1'=10, i3'=2+i3
  16: (0 == 0 /\ -1+i1 == 0) /\ i1'=4, i3'=3+i3
  17: (0 == 0 /\ -5+i1 == 0 /\ i6-i5 <= 0) /\ i1'=9, i3'=3+i3, i4'=it2

Dependency graph:
3 -> 15, 3 -> 17
9 -> 15, 9 -> 17
10 -> 15, 10 -> 17
16 -> 3, 16 -> 13
17 -> 9, 17 -> 10

Preprocessed Transitions

	Simplified Guard

	Original rule:
	(0 == 0 /\ -4+i1 == 0 /\ i5 <= 0) /\ i1'=10, i3'=2+i3
	New rule:
	(-4+i1 == 0 /\ i5 <= 0) /\ i1'=10, i3'=2+i3
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -5+i1 == 0 /\ i6-i5 > 0) /\ i1'=10, i3'=2+i3
	New rule:
	(-5+i1 == 0 /\ i6-i5 > 0) /\ i1'=10, i3'=2+i3
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=4, i3'=3+i3
	New rule:
	-1+i1 == 0 /\ i1'=4, i3'=3+i3
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -5+i1 == 0 /\ i6-i5 <= 0) /\ i1'=9, i3'=3+i3, i4'=it2
	New rule:
	(-5+i1 == 0 /\ i6-i5 <= 0) /\ i1'=9, i3'=3+i3, i4'=it2

Start location: eval_random1d_start

Location map:
LoAT_sink -> 0
eval_random1d_start -> 1
eval_random1d_bb0_in -> 2
eval_random1d_0 -> 3
eval_random1d_1 -> 4
eval_random1d_bb1_in -> 5
eval_random1d_bb3_in -> 6
eval_random1d_bb2_in -> 7
eval_random1d_2 -> 8
eval_random1d_3 -> 9
eval_random1d_stop -> 10

Rules:
   3: (-4+i1 == 0 /\ i5 > 0) /\ i1'=5, i3'=1+i3, i6'=1
   9: (-9+i1 == 0 /\ i4 > 0) /\ i1'=5, i3'=1+i3, i6'=1+i6
  10: (-9+i1 == 0 /\ i4 <= 0) /\ i1'=5, i3'=1+i3, i6'=1+i6
  18: (-4+i1 == 0 /\ i5 <= 0) /\ i1'=10, i3'=2+i3
  19: (-5+i1 == 0 /\ i6-i5 > 0) /\ i1'=10, i3'=2+i3
  20: -1+i1 == 0 /\ i1'=4, i3'=3+i3
  21: (-5+i1 == 0 /\ i6-i5 <= 0) /\ i1'=9, i3'=3+i3, i4'=it2

Dependency graph:
3 -> 19, 3 -> 21
9 -> 19, 9 -> 21
10 -> 19, 10 -> 21
20 -> 3, 20 -> 18
21 -> 9, 21 -> 10

Refined Dependency Graph

	Removed the following edges: 3 -> 19

Start location: eval_random1d_start

Location map:
LoAT_sink -> 0
eval_random1d_start -> 1
eval_random1d_bb0_in -> 2
eval_random1d_0 -> 3
eval_random1d_1 -> 4
eval_random1d_bb1_in -> 5
eval_random1d_bb3_in -> 6
eval_random1d_bb2_in -> 7
eval_random1d_2 -> 8
eval_random1d_3 -> 9
eval_random1d_stop -> 10

Rules:
   3: (-4+i1 == 0 /\ i5 > 0) /\ i1'=5, i3'=1+i3, i6'=1
   9: (-9+i1 == 0 /\ i4 > 0) /\ i1'=5, i3'=1+i3, i6'=1+i6
  10: (-9+i1 == 0 /\ i4 <= 0) /\ i1'=5, i3'=1+i3, i6'=1+i6
  18: (-4+i1 == 0 /\ i5 <= 0) /\ i1'=10, i3'=2+i3
  19: (-5+i1 == 0 /\ i6-i5 > 0) /\ i1'=10, i3'=2+i3
  20: -1+i1 == 0 /\ i1'=4, i3'=3+i3
  21: (-5+i1 == 0 /\ i6-i5 <= 0) /\ i1'=9, i3'=3+i3, i4'=it2

Dependency graph:
3 -> 21
9 -> 19, 9 -> 21
10 -> 19, 10 -> 21
20 -> 3, 20 -> 18
21 -> 9, 21 -> 10

Step with 20

	Trace

	20[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 18

	Trace

	20[(-1+i1 == 0)]
	18[(-4+i1 == 0 /\ i5 <= 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	20[(-1+i1 == 0)]
	
	Blocked

	{}
	{18[T]}
	
Step with 3

	Trace

	20[(-1+i1 == 0)]
	3[(-4+i1 == 0 /\ i5 > 0)]
	
	Blocked

	{}
	{18[T]}
	{}
	
Step with 21

	Trace

	20[(-1+i1 == 0)]
	3[(-4+i1 == 0 /\ i5 > 0)]
	21[(-5+i1 == 0 /\ i6-i5 <= 0)]
	
	Blocked

	{}
	{18[T]}
	{}
	{}
	
Step with 9

	Trace

	20[(-1+i1 == 0)]
	3[(-4+i1 == 0 /\ i5 > 0)]
	21[(-5+i1 == 0 /\ i6-i5 <= 0)]
	9[(-9+i1 == 0 /\ i4 > 0)]
	
	Blocked

	{}
	{18[T]}
	{}
	{}
	{}
	
Poly(n^1)

Accelerate

		Simplified Guard

		Original rule:
		(0 == 0 /\ -5+i1 == 0 /\ it2 > 0 /\ i6-i5 <= 0) /\ i1'=5, i3'=4+i3, i4'=it2, i6'=1+i6
		New rule:
		(-5+i1 == 0 /\ it2 > 0 /\ i6-i5 <= 0) /\ i1'=5, i3'=4+i3, i4'=it2, i6'=1+i6

	Loop Acceleration

	Original rule:
	(-5+i1 == 0 /\ it2 > 0 /\ i6-i5 <= 0) /\ i1'=5, i3'=4+i3, i4'=it2, i6'=1+i6
	New rule:
	(1-it29-i6+i5 >= 0 /\ -5+i1 >= 0 /\ 5-i1 >= 0 /\ it2 > 0 /\ -i6+i5 >= 0 /\ -1+it29 >= 0) /\ i1'=i1, i3'=4*it29+i3, i4'=it2, i6'=it29+i6

		-5+i1 >= 0 [0]: unchanged
		
		5-i1 >= 0 [0]: unchanged
		
		it2 > 0 [0]: unchanged
		
		-i6+i5 >= 0 [0]: montonic decrease yields (1-it29-i6+i5 >= 0 /\ -i6+i5 >= 0)
		
		Replacement map: {-5+i1 >= 0 -> -5+i1 >= 0, 5-i1 >= 0 -> 5-i1 >= 0, it2 > 0 -> it2 > 0, -i6+i5 >= 0 -> (1-it29-i6+i5 >= 0 /\ -i6+i5 >= 0)}

	Removed Trivial Updates

	Original rule:
	(1-it29-i6+i5 >= 0 /\ -5+i1 >= 0 /\ 5-i1 >= 0 /\ it2 > 0 /\ -i6+i5 >= 0 /\ -1+it29 >= 0) /\ i1'=i1, i3'=4*it29+i3, i4'=it2, i6'=it29+i6
	New rule:
	(1-it29-i6+i5 >= 0 /\ -5+i1 >= 0 /\ 5-i1 >= 0 /\ it2 > 0 /\ -i6+i5 >= 0 /\ -1+it29 >= 0) /\ i3'=4*it29+i3, i4'=it2, i6'=it29+i6
	
	Instantiation

	Original rule:
	(1-it29-i6+i5 >= 0 /\ -5+i1 >= 0 /\ 5-i1 >= 0 /\ it2 > 0 /\ -i6+i5 >= 0 /\ -1+it29 >= 0) /\ i3'=4*it29+i3, i4'=it2, i6'=it29+i6
	New rule:
	(0 >= 0 /\ -5+i1 >= 0 /\ 5-i1 >= 0 /\ it2 > 0 /\ -i6+i5 >= 0) /\ i3'=4-4*i6+i3+4*i5, i4'=it2, i6'=1+i5

Start location: eval_random1d_start

Location map:
LoAT_sink -> 0
eval_random1d_start -> 1
eval_random1d_bb0_in -> 2
eval_random1d_0 -> 3
eval_random1d_1 -> 4
eval_random1d_bb1_in -> 5
eval_random1d_bb3_in -> 6
eval_random1d_bb2_in -> 7
eval_random1d_2 -> 8
eval_random1d_3 -> 9
eval_random1d_stop -> 10

Rules:
   3: (-4+i1 == 0 /\ i5 > 0) /\ i1'=5, i3'=1+i3, i6'=1
   9: (-9+i1 == 0 /\ i4 > 0) /\ i1'=5, i3'=1+i3, i6'=1+i6
  10: (-9+i1 == 0 /\ i4 <= 0) /\ i1'=5, i3'=1+i3, i6'=1+i6
  18: (-4+i1 == 0 /\ i5 <= 0) /\ i1'=10, i3'=2+i3
  19: (-5+i1 == 0 /\ i6-i5 > 0) /\ i1'=10, i3'=2+i3
  20: -1+i1 == 0 /\ i1'=4, i3'=3+i3
  21: (-5+i1 == 0 /\ i6-i5 <= 0) /\ i1'=9, i3'=3+i3, i4'=it2
  22: (0 >= 0 /\ -5+i1 >= 0 /\ 5-i1 >= 0 /\ it2 > 0 /\ -i6+i5 >= 0) /\ i3'=4-4*i6+i3+4*i5, i4'=it2, i6'=1+i5

Dependency graph:
3 -> 21, 3 -> 22
9 -> 19, 9 -> 21, 9 -> 22
10 -> 19, 10 -> 21, 10 -> 22
20 -> 3, 20 -> 18
21 -> 9, 21 -> 10
22 -> 19, 22 -> 21

	Trace

	20[(-1+i1 == 0)]
	3[(-4+i1 == 0 /\ i5 > 0)]
	22[(0 >= 0 /\ -5+i1 >= 0 /\ 5-i1 >= 0 /\ it2 > 0 /\ -i6+i5 >= 0)]
	
	Blocked

	{}
	{18[T]}
	{}
	{22[T]}
	
Step with 19

	Trace

	20[(-1+i1 == 0)]
	3[(-4+i1 == 0 /\ i5 > 0)]
	22[(0 >= 0 /\ -5+i1 >= 0 /\ 5-i1 >= 0 /\ it2 > 0 /\ -i6+i5 >= 0)]
	19[(-5+i1 == 0 /\ i6-i5 > 0)]
	
	Blocked

	{}
	{18[T]}
	{}
	{21[T], 22[T]}
	{}
	
Backtrack

	Trace

	20[(-1+i1 == 0)]
	3[(-4+i1 == 0 /\ i5 > 0)]
	22[(0 >= 0 /\ -5+i1 >= 0 /\ 5-i1 >= 0 /\ it2 > 0 /\ -i6+i5 >= 0)]
	
	Blocked

	{}
	{18[T]}
	{}
	{19[T], 21[T], 22[T]}
	
Backtrack

	Trace

	20[(-1+i1 == 0)]
	3[(-4+i1 == 0 /\ i5 > 0)]
	
	Blocked

	{}
	{18[T]}
	{22[T]}
	
Step with 21

	Trace

	20[(-1+i1 == 0)]
	3[(-4+i1 == 0 /\ i5 > 0)]
	21[(-5+i1 == 0 /\ i6-i5 <= 0)]
	
	Blocked

	{}
	{18[T]}
	{22[T]}
	{}
	
Step with 10

	Trace

	20[(-1+i1 == 0)]
	3[(-4+i1 == 0 /\ i5 > 0)]
	21[(-5+i1 == 0 /\ i6-i5 <= 0)]
	10[(-9+i1 == 0 /\ i4 <= 0)]
	
	Blocked

	{}
	{18[T]}
	{22[T]}
	{}
	{}
	
Accelerate

		Simplified Guard

		Original rule:
		(0 == 0 /\ -5+i1 == 0 /\ it2 <= 0 /\ i6-i5 <= 0) /\ i1'=5, i3'=4+i3, i4'=it2, i6'=1+i6
		New rule:
		(-5+i1 == 0 /\ it2 <= 0 /\ i6-i5 <= 0) /\ i1'=5, i3'=4+i3, i4'=it2, i6'=1+i6

	Loop Acceleration

	Original rule:
	(-5+i1 == 0 /\ it2 <= 0 /\ i6-i5 <= 0) /\ i1'=5, i3'=4+i3, i4'=it2, i6'=1+i6
	New rule:
	(1-i6-it60+i5 >= 0 /\ -it2 >= 0 /\ -5+i1 >= 0 /\ 5-i1 >= 0 /\ -i6+i5 >= 0 /\ -1+it60 >= 0) /\ i1'=i1, i3'=4*it60+i3, i4'=it2, i6'=i6+it60

		-it2 >= 0 [0]: unchanged
		
		-5+i1 >= 0 [0]: unchanged
		
		5-i1 >= 0 [0]: unchanged
		
		-i6+i5 >= 0 [0]: montonic decrease yields (1-i6-it60+i5 >= 0 /\ -i6+i5 >= 0)
		
		Replacement map: {-it2 >= 0 -> -it2 >= 0, -5+i1 >= 0 -> -5+i1 >= 0, 5-i1 >= 0 -> 5-i1 >= 0, -i6+i5 >= 0 -> (1-i6-it60+i5 >= 0 /\ -i6+i5 >= 0)}

	Removed Trivial Updates

	Original rule:
	(1-i6-it60+i5 >= 0 /\ -it2 >= 0 /\ -5+i1 >= 0 /\ 5-i1 >= 0 /\ -i6+i5 >= 0 /\ -1+it60 >= 0) /\ i1'=i1, i3'=4*it60+i3, i4'=it2, i6'=i6+it60
	New rule:
	(1-i6-it60+i5 >= 0 /\ -it2 >= 0 /\ -5+i1 >= 0 /\ 5-i1 >= 0 /\ -i6+i5 >= 0 /\ -1+it60 >= 0) /\ i3'=4*it60+i3, i4'=it2, i6'=i6+it60
	
	Instantiation

	Original rule:
	(1-i6-it60+i5 >= 0 /\ -it2 >= 0 /\ -5+i1 >= 0 /\ 5-i1 >= 0 /\ -i6+i5 >= 0 /\ -1+it60 >= 0) /\ i3'=4*it60+i3, i4'=it2, i6'=i6+it60
	New rule:
	(0 >= 0 /\ -it2 >= 0 /\ -5+i1 >= 0 /\ 5-i1 >= 0 /\ -i6+i5 >= 0) /\ i3'=4-4*i6+i3+4*i5, i4'=it2, i6'=1+i5

Start location: eval_random1d_start

Location map:
LoAT_sink -> 0
eval_random1d_start -> 1
eval_random1d_bb0_in -> 2
eval_random1d_0 -> 3
eval_random1d_1 -> 4
eval_random1d_bb1_in -> 5
eval_random1d_bb3_in -> 6
eval_random1d_bb2_in -> 7
eval_random1d_2 -> 8
eval_random1d_3 -> 9
eval_random1d_stop -> 10

Rules:
   3: (-4+i1 == 0 /\ i5 > 0) /\ i1'=5, i3'=1+i3, i6'=1
   9: (-9+i1 == 0 /\ i4 > 0) /\ i1'=5, i3'=1+i3, i6'=1+i6
  10: (-9+i1 == 0 /\ i4 <= 0) /\ i1'=5, i3'=1+i3, i6'=1+i6
  18: (-4+i1 == 0 /\ i5 <= 0) /\ i1'=10, i3'=2+i3
  19: (-5+i1 == 0 /\ i6-i5 > 0) /\ i1'=10, i3'=2+i3
  20: -1+i1 == 0 /\ i1'=4, i3'=3+i3
  21: (-5+i1 == 0 /\ i6-i5 <= 0) /\ i1'=9, i3'=3+i3, i4'=it2
  22: (0 >= 0 /\ -5+i1 >= 0 /\ 5-i1 >= 0 /\ it2 > 0 /\ -i6+i5 >= 0) /\ i3'=4-4*i6+i3+4*i5, i4'=it2, i6'=1+i5
  23: (0 >= 0 /\ -it2 >= 0 /\ -5+i1 >= 0 /\ 5-i1 >= 0 /\ -i6+i5 >= 0) /\ i3'=4-4*i6+i3+4*i5, i4'=it2, i6'=1+i5

Dependency graph:
3 -> 21, 3 -> 22, 3 -> 23
9 -> 19, 9 -> 21, 9 -> 22, 9 -> 23
10 -> 19, 10 -> 21, 10 -> 22, 10 -> 23
20 -> 3, 20 -> 18
21 -> 9, 21 -> 10
22 -> 19, 22 -> 21, 22 -> 23
23 -> 19, 23 -> 21, 23 -> 22

	Trace

	20[(-1+i1 == 0)]
	3[(-4+i1 == 0 /\ i5 > 0)]
	23[(0 >= 0 /\ -it2 >= 0 /\ -5+i1 >= 0 /\ 5-i1 >= 0 /\ -i6+i5 >= 0)]
	
	Blocked

	{}
	{18[T]}
	{22[T]}
	{23[T]}
	
Step with 19

	Trace

	20[(-1+i1 == 0)]
	3[(-4+i1 == 0 /\ i5 > 0)]
	23[(0 >= 0 /\ -it2 >= 0 /\ -5+i1 >= 0 /\ 5-i1 >= 0 /\ -i6+i5 >= 0)]
	19[(-5+i1 == 0 /\ i6-i5 > 0)]
	
	Blocked

	{}
	{18[T]}
	{22[T]}
	{23[T]}
	{}
	
Backtrack

	Trace

	20[(-1+i1 == 0)]
	3[(-4+i1 == 0 /\ i5 > 0)]
	23[(0 >= 0 /\ -it2 >= 0 /\ -5+i1 >= 0 /\ 5-i1 >= 0 /\ -i6+i5 >= 0)]
	
	Blocked

	{}
	{18[T]}
	{22[T]}
	{19[T], 23[T]}
	
Backtrack

	Trace

	20[(-1+i1 == 0)]
	3[(-4+i1 == 0 /\ i5 > 0)]
	
	Blocked

	{}
	{18[T]}
	{22[T], 23[T]}
	
Step with 21

	Trace

	20[(-1+i1 == 0)]
	3[(-4+i1 == 0 /\ i5 > 0)]
	21[(-5+i1 == 0 /\ i6-i5 <= 0)]
	
	Blocked

	{}
	{18[T]}
	{22[T], 23[T]}
	{}
	
Step with 10

	Trace

	20[(-1+i1 == 0)]
	3[(-4+i1 == 0 /\ i5 > 0)]
	21[(-5+i1 == 0 /\ i6-i5 <= 0)]
	10[(-9+i1 == 0 /\ i4 <= 0)]
	
	Blocked

	{}
	{18[T]}
	{22[T], 23[T]}
	{}
	{}
	
Covered

	Trace

	20[(-1+i1 == 0)]
	3[(-4+i1 == 0 /\ i5 > 0)]
	21[(-5+i1 == 0 /\ i6-i5 <= 0)]
	
	Blocked

	{}
	{18[T]}
	{22[T], 23[T]}
	{10[T]}
	
Step with 9

	Trace

	20[(-1+i1 == 0)]
	3[(-4+i1 == 0 /\ i5 > 0)]
	21[(-5+i1 == 0 /\ i6-i5 <= 0)]
	9[(-9+i1 == 0 /\ i4 > 0)]
	
	Blocked

	{}
	{18[T]}
	{22[T], 23[T]}
	{10[T]}
	{}
	
Covered

	Trace

	20[(-1+i1 == 0)]
	3[(-4+i1 == 0 /\ i5 > 0)]
	21[(-5+i1 == 0 /\ i6-i5 <= 0)]
	
	Blocked

	{}
	{18[T]}
	{22[T], 23[T]}
	{9[T], 10[T]}
	
Backtrack

	Trace

	20[(-1+i1 == 0)]
	3[(-4+i1 == 0 /\ i5 > 0)]
	
	Blocked

	{}
	{18[T]}
	{21[T], 22[T], 23[T]}
	
Backtrack

	Trace

	20[(-1+i1 == 0)]
	
	Blocked

	{}
	{3[T], 18[T]}
	
Backtrack

	Trace

	Blocked

	{20[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  nondef_0
  Locations:  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l2(X₀, X₁, X₂)
  t₃: l1(X₀, X₁, X₂) → l4(X₀, X₁, 1) :|: 1 ≤ X₁
  t₄: l1(X₀, X₁, X₂) → l5(X₀, X₁, X₂) :|: X₁ ≤ 0
  t₁: l2(X₀, X₁, X₂) → l3(X₀, X₁, X₂)
  t₂: l3(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₆: l4(X₀, X₁, X₂) → l5(X₀, X₁, X₂) :|: 1+X₁ ≤ X₂
  t₅: l4(X₀, X₁, X₂) → l7(X₀, X₁, X₂) :|: X₂ ≤ X₁
  t₁₁: l5(X₀, X₁, X₂) → l9(X₀, X₁, X₂)
  t₉: l6(X₀, X₁, X₂) → l4(X₀, X₁, 1+X₂) :|: 1 ≤ X₀
  t₁₀: l6(X₀, X₁, X₂) → l4(X₀, X₁, 1+X₂) :|: X₀ ≤ 0
  t₇: l7(X₀, X₁, X₂) → l8(X₀, X₁, X₂)
  t₈: l8(X₀, X₁, X₂) → l6(nondef_0, X₁, X₂)


Preprocessing
  Found invariant X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ 1 ≤ X₁ for location l6


  Found invariant X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ 1 ≤ X₁ for location l7


  Found invariant X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ 1 ≤ X₁ for location l8


  Found invariant X₂ ≤ 1+X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ 1 ≤ X₁ for location l4


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  nondef_0
  Locations:  l0, l1, l2, l3, l4, l5, l6, l7, l8, l9
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l2(X₀, X₁, X₂)
  t₃: l1(X₀, X₁, X₂) → l4(X₀, X₁, 1) :|: 1 ≤ X₁
  t₄: l1(X₀, X₁, X₂) → l5(X₀, X₁, X₂) :|: X₁ ≤ 0
  t₁: l2(X₀, X₁, X₂) → l3(X₀, X₁, X₂)
  t₂: l3(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₆: l4(X₀, X₁, X₂) → l5(X₀, X₁, X₂) :|: 1+X₁ ≤ X₂ ∧ X₂ ≤ 1+X₁ ∧ 1 ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁+X₂
  t₅: l4(X₀, X₁, X₂) → l7(X₀, X₁, X₂) :|: X₂ ≤ X₁ ∧ X₂ ≤ 1+X₁ ∧ 1 ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁+X₂
  t₁₁: l5(X₀, X₁, X₂) → l9(X₀, X₁, X₂)
  t₉: l6(X₀, X₁, X₂) → l4(X₀, X₁, 1+X₂) :|: 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ X₂ ≤ X₁
  t₁₀: l6(X₀, X₁, X₂) → l4(X₀, X₁, 1+X₂) :|: X₀ ≤ 0 ∧ 1 ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ X₂ ≤ X₁
  t₇: l7(X₀, X₁, X₂) → l8(X₀, X₁, X₂) :|: 1 ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ X₂ ≤ X₁
  t₈: l8(X₀, X₁, X₂) → l6(nondef_0, X₁, X₂) :|: 1 ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ X₂ ≤ X₁


MPRF for transition t₅: l4(X₀, X₁, X₂) → l7(X₀, X₁, X₂) :|: X₂ ≤ X₁ ∧ X₂ ≤ 1+X₁ ∧ 1 ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁+X₂ of depth 1:
  new bound:
    X₁+2 {O(n)}

  MPRF:
    • l4: [1+X₁-X₂]
    • l6: [X₁-X₂]
    • l7: [X₁-X₂]
    • l8: [X₁-X₂]




MPRF for transition t₇: l7(X₀, X₁, X₂) → l8(X₀, X₁, X₂) :|: 1 ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ X₂ ≤ X₁ of depth 1:
  new bound:
    X₁+2 {O(n)}

  MPRF:
    • l4: [1+X₁-X₂]
    • l6: [X₁-X₂]
    • l7: [1+X₁-X₂]
    • l8: [X₁-X₂]




MPRF for transition t₈: l8(X₀, X₁, X₂) → l6(nondef_0, X₁, X₂) :|: 1 ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ X₂ ≤ X₁ of depth 1:
  new bound:
    2⋅X₁+1 {O(n)}

  MPRF:
    • l4: [2⋅X₁-X₂]
    • l6: [2⋅X₁-1-X₂]
    • l7: [2⋅X₁-X₂]
    • l8: [2⋅X₁-X₂]




MPRF for transition t₉: l6(X₀, X₁, X₂) → l4(X₀, X₁, 1+X₂) :|: 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ X₂ ≤ X₁ of depth 1:
  new bound:
    2⋅X₁+1 {O(n)}

  MPRF:
    • l4: [2⋅X₁-X₂]
    • l6: [2⋅X₁-X₂]
    • l7: [2⋅X₁-X₂]
    • l8: [2⋅X₁-X₂]




MPRF for transition t₁₀: l6(X₀, X₁, X₂) → l4(X₀, X₁, 1+X₂) :|: X₀ ≤ 0 ∧ 1 ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ X₂ ≤ X₁ of depth 1:
  new bound:
    2⋅X₁+1 {O(n)}

  MPRF:
    • l4: [2⋅X₁-X₂]
    • l6: [2⋅X₁-X₂]
    • l7: [2⋅X₁-X₂]
    • l8: [2⋅X₁-X₂]




All Bounds
Timebounds
  Overall timebound:8⋅X₁+14 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: X₁+2 {O(n)}
    t₆: 1 {O(1)}
    t₇: X₁+2 {O(n)}
    t₈: 2⋅X₁+1 {O(n)}
    t₉: 2⋅X₁+1 {O(n)}
    t₁₀: 2⋅X₁+1 {O(n)}
    t₁₁: 1 {O(1)}


Costbounds
  Overall costbound: 8⋅X₁+14 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: X₁+2 {O(n)}
    t₆: 1 {O(1)}
    t₇: X₁+2 {O(n)}
    t₈: 2⋅X₁+1 {O(n)}
    t₉: 2⋅X₁+1 {O(n)}
    t₁₀: 2⋅X₁+1 {O(n)}
    t₁₁: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₀, X₂: X₂ {O(n)}
    t₁, X₀: X₀ {O(n)}
    t₁, X₁: X₁ {O(n)}
    t₁, X₂: X₂ {O(n)}
    t₂, X₀: X₀ {O(n)}
    t₂, X₁: X₁ {O(n)}
    t₂, X₂: X₂ {O(n)}
    t₃, X₀: X₀ {O(n)}
    t₃, X₁: X₁ {O(n)}
    t₃, X₂: 1 {O(1)}
    t₄, X₀: X₀ {O(n)}
    t₄, X₁: X₁ {O(n)}
    t₄, X₂: X₂ {O(n)}
    t₅, X₁: X₁ {O(n)}
    t₅, X₂: 4⋅X₁+3 {O(n)}
    t₆, X₁: 2⋅X₁ {O(n)}
    t₆, X₂: 8⋅X₁+6 {O(n)}
    t₇, X₁: X₁ {O(n)}
    t₇, X₂: 4⋅X₁+3 {O(n)}
    t₈, X₁: X₁ {O(n)}
    t₈, X₂: 4⋅X₁+3 {O(n)}
    t₉, X₁: X₁ {O(n)}
    t₉, X₂: 4⋅X₁+3 {O(n)}
    t₁₀, X₁: X₁ {O(n)}
    t₁₀, X₂: 4⋅X₁+3 {O(n)}
    t₁₁, X₁: 3⋅X₁ {O(n)}
    t₁₁, X₂: 8⋅X₁+X₂+6 {O(n)}

