WORST_CASE(?,O(1))

# LoAT Proof:
Initial ITS

Start location: f4

Location map:
LoAT_sink -> 0
f4 -> 1
f300 -> 2

Rules:
   0: (-1+i1 == 0 /\ -1-i4 >= 0) /\ i1'=2, i3'=1+i3, i5'=it2
   1: (i4 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=it3

Dependency graph:

Step with 1

	Trace

	1[(i4 >= 0 /\ -1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Backtrack

	Trace

	Blocked

	{1[T]}
	
Step with 0

	Trace

	0[(-1+i1 == 0 /\ -1-i4 >= 0)]
	
	Blocked

	{1[T]}
	{}
	
Backtrack

	Trace

	Blocked

	{0[T], 1[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  C
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(X₀, C) :|: 1+X₀ ≤ 0
  t₁: l0(X₀, X₁) → l1(1+X₀, C) :|: 0 ≤ X₀


Preprocessing
  Eliminate variables [C; X₁] that do not contribute to the problem


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₂: l0(X₀) → l1(X₀) :|: 1+X₀ ≤ 0
  t₃: l0(X₀) → l1(1+X₀) :|: 0 ≤ X₀


All Bounds
Timebounds
  Overall timebound:2 {O(1)}
    t₂: 1 {O(1)}
    t₃: 1 {O(1)}


Costbounds
  Overall costbound: 2 {O(1)}
    t₂: 1 {O(1)}
    t₃: 1 {O(1)}


Sizebounds
    t₂, X₀: X₀ {O(n)}
    t₃, X₀: X₀+1 {O(n)}

