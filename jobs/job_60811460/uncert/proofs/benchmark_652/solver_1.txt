WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: eval_easy2_start

Location map:
LoAT_sink -> 0
eval_easy2_start -> 1
eval_easy2_bb0_in -> 2
eval_easy2_0 -> 3
eval_easy2_1 -> 4
eval_easy2_2 -> 5
eval_easy2_3 -> 6
eval_easy2_4 -> 7
eval_easy2_5 -> 8
eval_easy2_6 -> 9
eval_easy2_bb1_in -> 10
eval_easy2_bb2_in -> 11
eval_easy2_bb3_in -> 12
eval_easy2_stop -> 13

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: -2+i1 == 0 /\ i1'=3, i3'=1+i3
   2: -3+i1 == 0 /\ i1'=4, i3'=1+i3
   3: -4+i1 == 0 /\ i1'=5, i3'=1+i3
   4: -5+i1 == 0 /\ i1'=6, i3'=1+i3
   5: -6+i1 == 0 /\ i1'=7, i3'=1+i3
   6: -7+i1 == 0 /\ i1'=8, i3'=1+i3
   7: -8+i1 == 0 /\ i1'=9, i3'=1+i3
   8: -9+i1 == 0 /\ i1'=10, i3'=1+i3, i4'=i5
   9: (i4 > 0 /\ -10+i1 == 0) /\ i1'=11, i3'=1+i3
  10: (i4 <= 0 /\ -10+i1 == 0) /\ i1'=12, i3'=1+i3
  11: -11+i1 == 0 /\ i1'=10, i3'=1+i3, i4'=-1+i4
  12: -12+i1 == 0 /\ i1'=13, i3'=1+i3

Dependency graph:
0 -> 1
1 -> 2
2 -> 3
3 -> 4
4 -> 5
5 -> 6
6 -> 7
7 -> 8
8 -> 9, 8 -> 10
9 -> 11
10 -> 12
11 -> 9, 11 -> 10

Chained Linear Paths

	Applied Chaining

	First rule:
	-1+i1 == 0 /\ i1'=2, i3'=1+i3
	Second rule:
	-2+i1 == 0 /\ i1'=3, i3'=1+i3
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 0, 1
	
	Applied Chaining

	First rule:
	-3+i1 == 0 /\ i1'=4, i3'=1+i3
	Second rule:
	-4+i1 == 0 /\ i1'=5, i3'=1+i3
	New rule:
	(0 == 0 /\ -3+i1 == 0) /\ i1'=5, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 2, 3
	
	Applied Chaining

	First rule:
	-5+i1 == 0 /\ i1'=6, i3'=1+i3
	Second rule:
	-6+i1 == 0 /\ i1'=7, i3'=1+i3
	New rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=7, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 4, 5
	
	Applied Chaining

	First rule:
	-7+i1 == 0 /\ i1'=8, i3'=1+i3
	Second rule:
	-8+i1 == 0 /\ i1'=9, i3'=1+i3
	New rule:
	(0 == 0 /\ -7+i1 == 0) /\ i1'=9, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 6, 7
	
	Applied Chaining

	First rule:
	(i4 > 0 /\ -10+i1 == 0) /\ i1'=11, i3'=1+i3
	Second rule:
	-11+i1 == 0 /\ i1'=10, i3'=1+i3, i4'=-1+i4
	New rule:
	(0 == 0 /\ i4 > 0 /\ -10+i1 == 0) /\ i1'=10, i3'=2+i3, i4'=-1+i4
	
	Applied Deletion

	Removed the following rules: 9, 11
	
	Applied Chaining

	First rule:
	(i4 <= 0 /\ -10+i1 == 0) /\ i1'=12, i3'=1+i3
	Second rule:
	-12+i1 == 0 /\ i1'=13, i3'=1+i3
	New rule:
	(0 == 0 /\ i4 <= 0 /\ -10+i1 == 0) /\ i1'=13, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 10, 12
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=3, i3'=2+i3
	Second rule:
	(0 == 0 /\ -3+i1 == 0) /\ i1'=5, i3'=2+i3
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=5, i3'=4+i3
	
	Applied Deletion

	Removed the following rules: 13, 14
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=7, i3'=2+i3
	Second rule:
	(0 == 0 /\ -7+i1 == 0) /\ i1'=9, i3'=2+i3
	New rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=9, i3'=4+i3
	
	Applied Deletion

	Removed the following rules: 15, 16
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=5, i3'=4+i3
	Second rule:
	(0 == 0 /\ -5+i1 == 0) /\ i1'=9, i3'=4+i3
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=9, i3'=8+i3
	
	Applied Deletion

	Removed the following rules: 19, 20
	
	Applied Chaining

	First rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=9, i3'=8+i3
	Second rule:
	-9+i1 == 0 /\ i1'=10, i3'=1+i3, i4'=i5
	New rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=10, i3'=9+i3, i4'=i5
	
	Applied Deletion

	Removed the following rules: 8, 21

Start location: eval_easy2_start

Location map:
LoAT_sink -> 0
eval_easy2_start -> 1
eval_easy2_bb0_in -> 2
eval_easy2_0 -> 3
eval_easy2_1 -> 4
eval_easy2_2 -> 5
eval_easy2_3 -> 6
eval_easy2_4 -> 7
eval_easy2_5 -> 8
eval_easy2_6 -> 9
eval_easy2_bb1_in -> 10
eval_easy2_bb2_in -> 11
eval_easy2_bb3_in -> 12
eval_easy2_stop -> 13

Rules:
  17: (0 == 0 /\ i4 > 0 /\ -10+i1 == 0) /\ i1'=10, i3'=2+i3, i4'=-1+i4
  18: (0 == 0 /\ i4 <= 0 /\ -10+i1 == 0) /\ i1'=13, i3'=2+i3
  22: (0 == 0 /\ -1+i1 == 0) /\ i1'=10, i3'=9+i3, i4'=i5

Dependency graph:
17 -> 17, 17 -> 18
22 -> 17, 22 -> 18

Preprocessed Transitions

	Simplified Guard

	Original rule:
	(0 == 0 /\ i4 > 0 /\ -10+i1 == 0) /\ i1'=10, i3'=2+i3, i4'=-1+i4
	New rule:
	(i4 > 0 /\ -10+i1 == 0) /\ i1'=10, i3'=2+i3, i4'=-1+i4
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ i4 <= 0 /\ -10+i1 == 0) /\ i1'=13, i3'=2+i3
	New rule:
	(i4 <= 0 /\ -10+i1 == 0) /\ i1'=13, i3'=2+i3
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -1+i1 == 0) /\ i1'=10, i3'=9+i3, i4'=i5
	New rule:
	-1+i1 == 0 /\ i1'=10, i3'=9+i3, i4'=i5

Start location: eval_easy2_start

Location map:
LoAT_sink -> 0
eval_easy2_start -> 1
eval_easy2_bb0_in -> 2
eval_easy2_0 -> 3
eval_easy2_1 -> 4
eval_easy2_2 -> 5
eval_easy2_3 -> 6
eval_easy2_4 -> 7
eval_easy2_5 -> 8
eval_easy2_6 -> 9
eval_easy2_bb1_in -> 10
eval_easy2_bb2_in -> 11
eval_easy2_bb3_in -> 12
eval_easy2_stop -> 13

Rules:
  23: (i4 > 0 /\ -10+i1 == 0) /\ i1'=10, i3'=2+i3, i4'=-1+i4
  24: (i4 <= 0 /\ -10+i1 == 0) /\ i1'=13, i3'=2+i3
  25: -1+i1 == 0 /\ i1'=10, i3'=9+i3, i4'=i5

Dependency graph:
23 -> 23, 23 -> 24
25 -> 23, 25 -> 24

Step with 25

	Trace

	25[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 24

	Trace

	25[(-1+i1 == 0)]
	24[(i4 <= 0 /\ -10+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	25[(-1+i1 == 0)]
	
	Blocked

	{}
	{24[T]}
	
Step with 23

	Trace

	25[(-1+i1 == 0)]
	23[(i4 > 0 /\ -10+i1 == 0)]
	
	Blocked

	{}
	{24[T]}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(i4 > 0 /\ -10+i1 == 0) /\ i1'=10, i3'=2+i3, i4'=-1+i4
	New rule:
	(10-i1 >= 0 /\ -1+it13 >= 0 /\ 1+i4-it13 > 0 /\ -10+i1 >= 0) /\ i1'=i1, i3'=i3+2*it13, i4'=i4-it13

		10-i1 >= 0 [0]: unchanged
		
		i4 > 0 [0]: montonic decrease yields 1+i4-it13 > 0
		
		-10+i1 >= 0 [0]: unchanged
		
		Replacement map: {10-i1 >= 0 -> 10-i1 >= 0, i4 > 0 -> 1+i4-it13 > 0, -10+i1 >= 0 -> -10+i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(10-i1 >= 0 /\ -1+it13 >= 0 /\ 1+i4-it13 > 0 /\ -10+i1 >= 0) /\ i1'=i1, i3'=i3+2*it13, i4'=i4-it13
	New rule:
	(10-i1 >= 0 /\ -1+it13 >= 0 /\ 1+i4-it13 > 0 /\ -10+i1 >= 0) /\ i3'=i3+2*it13, i4'=i4-it13
	
	Instantiation

	Original rule:
	(10-i1 >= 0 /\ -1+it13 >= 0 /\ 1+i4-it13 > 0 /\ -10+i1 >= 0) /\ i3'=i3+2*it13, i4'=i4-it13
	New rule:
	(1 > 0 /\ 10-i1 >= 0 /\ -1+i4 >= 0 /\ -10+i1 >= 0) /\ i3'=i3+2*i4, i4'=0

Start location: eval_easy2_start

Location map:
LoAT_sink -> 0
eval_easy2_start -> 1
eval_easy2_bb0_in -> 2
eval_easy2_0 -> 3
eval_easy2_1 -> 4
eval_easy2_2 -> 5
eval_easy2_3 -> 6
eval_easy2_4 -> 7
eval_easy2_5 -> 8
eval_easy2_6 -> 9
eval_easy2_bb1_in -> 10
eval_easy2_bb2_in -> 11
eval_easy2_bb3_in -> 12
eval_easy2_stop -> 13

Rules:
  23: (i4 > 0 /\ -10+i1 == 0) /\ i1'=10, i3'=2+i3, i4'=-1+i4
  24: (i4 <= 0 /\ -10+i1 == 0) /\ i1'=13, i3'=2+i3
  25: -1+i1 == 0 /\ i1'=10, i3'=9+i3, i4'=i5
  26: (1 > 0 /\ 10-i1 >= 0 /\ -1+i4 >= 0 /\ -10+i1 >= 0) /\ i3'=i3+2*i4, i4'=0

Dependency graph:
23 -> 23, 23 -> 24, 23 -> 26
25 -> 23, 25 -> 24, 25 -> 26
26 -> 23, 26 -> 24

	Trace

	25[(-1+i1 == 0)]
	26[(1 > 0 /\ 10-i1 >= 0 /\ -1+i4 >= 0 /\ -10+i1 >= 0)]
	
	Blocked

	{}
	{24[T]}
	{23[T], 26[T]}
	
Step with 24

	Trace

	25[(-1+i1 == 0)]
	26[(1 > 0 /\ 10-i1 >= 0 /\ -1+i4 >= 0 /\ -10+i1 >= 0)]
	24[(i4 <= 0 /\ -10+i1 == 0)]
	
	Blocked

	{}
	{24[T]}
	{23[T], 26[T]}
	{}
	
Backtrack

	Trace

	25[(-1+i1 == 0)]
	26[(1 > 0 /\ 10-i1 >= 0 /\ -1+i4 >= 0 /\ -10+i1 >= 0)]
	
	Blocked

	{}
	{24[T]}
	{23[T], 24[T], 26[T]}
	
Backtrack

	Trace

	25[(-1+i1 == 0)]
	
	Blocked

	{}
	{24[T], 26[T]}
	
Step with 23

	Trace

	25[(-1+i1 == 0)]
	23[(i4 > 0 /\ -10+i1 == 0)]
	
	Blocked

	{}
	{24[T], 26[T]}
	{}
	
Covered

	Trace

	25[(-1+i1 == 0)]
	
	Blocked

	{}
	{23[T], 24[T], 26[T]}
	
Backtrack

	Trace

	Blocked

	{25[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l10, l11, l12, l2, l3, l4, l5, l6, l7, l8, l9
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l2(X₀, X₁)
  t₃: l1(X₀, X₁) → l4(X₀, X₁)
  t₁₁: l10(X₀, X₁) → l9(X₀-1, X₁)
  t₁₂: l11(X₀, X₁) → l12(X₀, X₁)
  t₁: l2(X₀, X₁) → l3(X₀, X₁)
  t₂: l3(X₀, X₁) → l1(X₀, X₁)
  t₄: l4(X₀, X₁) → l5(X₀, X₁)
  t₅: l5(X₀, X₁) → l6(X₀, X₁)
  t₆: l6(X₀, X₁) → l7(X₀, X₁)
  t₇: l7(X₀, X₁) → l8(X₀, X₁)
  t₈: l8(X₀, X₁) → l9(X₁, X₁)
  t₉: l9(X₀, X₁) → l10(X₀, X₁) :|: 1 ≤ X₀
  t₁₀: l9(X₀, X₁) → l11(X₀, X₁) :|: X₀ ≤ 0


Preprocessing
  Found invariant X₀ ≤ X₁ ∧ X₀ ≤ 0 for location l11


  Found invariant X₀ ≤ X₁ ∧ X₀ ≤ 0 for location l12


  Found invariant 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ X₀ ≤ X₁ ∧ 1 ≤ X₀ for location l10


  Found invariant X₀ ≤ X₁ for location l9


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l10, l11, l12, l2, l3, l4, l5, l6, l7, l8, l9
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l2(X₀, X₁)
  t₃: l1(X₀, X₁) → l4(X₀, X₁)
  t₁₁: l10(X₀, X₁) → l9(X₀-1, X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ X₀ ≤ X₁
  t₁₂: l11(X₀, X₁) → l12(X₀, X₁) :|: X₀ ≤ 0 ∧ X₀ ≤ X₁
  t₁: l2(X₀, X₁) → l3(X₀, X₁)
  t₂: l3(X₀, X₁) → l1(X₀, X₁)
  t₄: l4(X₀, X₁) → l5(X₀, X₁)
  t₅: l5(X₀, X₁) → l6(X₀, X₁)
  t₆: l6(X₀, X₁) → l7(X₀, X₁)
  t₇: l7(X₀, X₁) → l8(X₀, X₁)
  t₈: l8(X₀, X₁) → l9(X₁, X₁)
  t₉: l9(X₀, X₁) → l10(X₀, X₁) :|: 1 ≤ X₀ ∧ X₀ ≤ X₁
  t₁₀: l9(X₀, X₁) → l11(X₀, X₁) :|: X₀ ≤ 0 ∧ X₀ ≤ X₁


MPRF for transition t₉: l9(X₀, X₁) → l10(X₀, X₁) :|: 1 ≤ X₀ ∧ X₀ ≤ X₁ of depth 1:
  new bound:
    X₁ {O(n)}

  MPRF:
    • l10: [X₀-1]
    • l9: [X₀]




MPRF for transition t₁₁: l10(X₀, X₁) → l9(X₀-1, X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ X₀ ≤ X₁ of depth 1:
  new bound:
    X₁ {O(n)}

  MPRF:
    • l10: [X₀]
    • l9: [X₀]




All Bounds
Timebounds
  Overall timebound:2⋅X₁+11 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: 1 {O(1)}
    t₇: 1 {O(1)}
    t₈: 1 {O(1)}
    t₉: X₁ {O(n)}
    t₁₀: 1 {O(1)}
    t₁₁: X₁ {O(n)}
    t₁₂: 1 {O(1)}


Costbounds
  Overall costbound: 2⋅X₁+11 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}
    t₃: 1 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1 {O(1)}
    t₆: 1 {O(1)}
    t₇: 1 {O(1)}
    t₈: 1 {O(1)}
    t₉: X₁ {O(n)}
    t₁₀: 1 {O(1)}
    t₁₁: X₁ {O(n)}
    t₁₂: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₁, X₀: X₀ {O(n)}
    t₁, X₁: X₁ {O(n)}
    t₂, X₀: X₀ {O(n)}
    t₂, X₁: X₁ {O(n)}
    t₃, X₀: X₀ {O(n)}
    t₃, X₁: X₁ {O(n)}
    t₄, X₀: X₀ {O(n)}
    t₄, X₁: X₁ {O(n)}
    t₅, X₀: X₀ {O(n)}
    t₅, X₁: X₁ {O(n)}
    t₆, X₀: X₀ {O(n)}
    t₆, X₁: X₁ {O(n)}
    t₇, X₀: X₀ {O(n)}
    t₇, X₁: X₁ {O(n)}
    t₈, X₀: X₁ {O(n)}
    t₈, X₁: X₁ {O(n)}
    t₉, X₀: X₁ {O(n)}
    t₉, X₁: X₁ {O(n)}
    t₁₀, X₀: 2⋅X₁ {O(n)}
    t₁₀, X₁: 2⋅X₁ {O(n)}
    t₁₁, X₀: X₁ {O(n)}
    t₁₁, X₁: X₁ {O(n)}
    t₁₂, X₀: 2⋅X₁ {O(n)}
    t₁₂, X₁: 2⋅X₁ {O(n)}

