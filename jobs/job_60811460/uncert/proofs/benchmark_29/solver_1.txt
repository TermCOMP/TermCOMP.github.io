WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: evalfstart

Location map:
LoAT_sink -> 0
evalfstart -> 1
evalfentryin -> 2
evalfbb3in -> 3
evalfbbin -> 4
evalfreturnin -> 5
evalfbb1in -> 6
evalfbb2in -> 7
evalfstop -> 8

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=1+i3, i4'=i6, i6'=i4
   2: (-3+i1 == 0 /\ -1-i6+i5 >= 0 /\ -1+i6 >= 0) /\ i1'=4, i3'=1+i3
   3: (-3+i1 == 0 /\ -i6 >= 0) /\ i1'=5, i3'=1+i3
   4: (-3+i1 == 0 /\ i6-i5 >= 0) /\ i1'=5, i3'=1+i3
   5: (-1+i4 >= 0 /\ -4+i1 == 0) /\ i1'=6, i3'=1+i3
   6: (-4+i1 == 0 /\ -i4 >= 0) /\ i1'=7, i3'=1+i3
   7: -6+i1 == 0 /\ i1'=3, i3'=1+i3, i6'=1+i6
   8: -7+i1 == 0 /\ i1'=3, i3'=1+i3, i6'=-1+i6
   9: -5+i1 == 0 /\ i1'=8, i3'=1+i3

Dependency graph:
0 -> 1
1 -> 2, 1 -> 3, 1 -> 4
2 -> 5, 2 -> 6
3 -> 9
4 -> 9
5 -> 7
6 -> 8
7 -> 2, 7 -> 3, 7 -> 4
8 -> 2, 8 -> 3, 8 -> 4

Chained Linear Paths

	Applied Chaining

	First rule:
	-1+i1 == 0 /\ i1'=2, i3'=1+i3
	Second rule:
	(-1+i4 >= 0 /\ -2+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=1+i3, i4'=i6, i6'=i4
	New rule:
	(0 == 0 /\ -1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=2+i3, i4'=i6, i6'=i4
	
	Applied Deletion

	Removed the following rules: 0, 1
	
	Applied Chaining

	First rule:
	(-3+i1 == 0 /\ -i6 >= 0) /\ i1'=5, i3'=1+i3
	Second rule:
	-5+i1 == 0 /\ i1'=8, i3'=1+i3
	New rule:
	(0 == 0 /\ -3+i1 == 0 /\ -i6 >= 0) /\ i1'=8, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 3
	
	Applied Chaining

	First rule:
	(-3+i1 == 0 /\ i6-i5 >= 0) /\ i1'=5, i3'=1+i3
	Second rule:
	-5+i1 == 0 /\ i1'=8, i3'=1+i3
	New rule:
	(0 == 0 /\ -3+i1 == 0 /\ i6-i5 >= 0) /\ i1'=8, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 4, 9
	
	Applied Chaining

	First rule:
	(-1+i4 >= 0 /\ -4+i1 == 0) /\ i1'=6, i3'=1+i3
	Second rule:
	-6+i1 == 0 /\ i1'=3, i3'=1+i3, i6'=1+i6
	New rule:
	(0 == 0 /\ -1+i4 >= 0 /\ -4+i1 == 0) /\ i1'=3, i3'=2+i3, i6'=1+i6
	
	Applied Deletion

	Removed the following rules: 5, 7
	
	Applied Chaining

	First rule:
	(-4+i1 == 0 /\ -i4 >= 0) /\ i1'=7, i3'=1+i3
	Second rule:
	-7+i1 == 0 /\ i1'=3, i3'=1+i3, i6'=-1+i6
	New rule:
	(0 == 0 /\ -4+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=2+i3, i6'=-1+i6
	
	Applied Deletion

	Removed the following rules: 6, 8

Start location: evalfstart

Location map:
LoAT_sink -> 0
evalfstart -> 1
evalfentryin -> 2
evalfbb3in -> 3
evalfbbin -> 4
evalfreturnin -> 5
evalfbb1in -> 6
evalfbb2in -> 7
evalfstop -> 8

Rules:
   2: (-3+i1 == 0 /\ -1-i6+i5 >= 0 /\ -1+i6 >= 0) /\ i1'=4, i3'=1+i3
  10: (0 == 0 /\ -1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=2+i3, i4'=i6, i6'=i4
  11: (0 == 0 /\ -3+i1 == 0 /\ -i6 >= 0) /\ i1'=8, i3'=2+i3
  12: (0 == 0 /\ -3+i1 == 0 /\ i6-i5 >= 0) /\ i1'=8, i3'=2+i3
  13: (0 == 0 /\ -1+i4 >= 0 /\ -4+i1 == 0) /\ i1'=3, i3'=2+i3, i6'=1+i6
  14: (0 == 0 /\ -4+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=2+i3, i6'=-1+i6

Dependency graph:
2 -> 13, 2 -> 14
10 -> 2, 10 -> 11, 10 -> 12
13 -> 2, 13 -> 11, 13 -> 12
14 -> 2, 14 -> 11, 14 -> 12

Preprocessed Transitions

	Simplified Guard

	Original rule:
	(0 == 0 /\ -1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=2+i3, i4'=i6, i6'=i4
	New rule:
	(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=2+i3, i4'=i6, i6'=i4
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -3+i1 == 0 /\ -i6 >= 0) /\ i1'=8, i3'=2+i3
	New rule:
	(-3+i1 == 0 /\ -i6 >= 0) /\ i1'=8, i3'=2+i3
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -3+i1 == 0 /\ i6-i5 >= 0) /\ i1'=8, i3'=2+i3
	New rule:
	(-3+i1 == 0 /\ i6-i5 >= 0) /\ i1'=8, i3'=2+i3
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -1+i4 >= 0 /\ -4+i1 == 0) /\ i1'=3, i3'=2+i3, i6'=1+i6
	New rule:
	(-1+i4 >= 0 /\ -4+i1 == 0) /\ i1'=3, i3'=2+i3, i6'=1+i6
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -4+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=2+i3, i6'=-1+i6
	New rule:
	(-4+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=2+i3, i6'=-1+i6

Start location: evalfstart

Location map:
LoAT_sink -> 0
evalfstart -> 1
evalfentryin -> 2
evalfbb3in -> 3
evalfbbin -> 4
evalfreturnin -> 5
evalfbb1in -> 6
evalfbb2in -> 7
evalfstop -> 8

Rules:
   2: (-3+i1 == 0 /\ -1-i6+i5 >= 0 /\ -1+i6 >= 0) /\ i1'=4, i3'=1+i3
  15: (-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=2+i3, i4'=i6, i6'=i4
  16: (-3+i1 == 0 /\ -i6 >= 0) /\ i1'=8, i3'=2+i3
  17: (-3+i1 == 0 /\ i6-i5 >= 0) /\ i1'=8, i3'=2+i3
  18: (-1+i4 >= 0 /\ -4+i1 == 0) /\ i1'=3, i3'=2+i3, i6'=1+i6
  19: (-4+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=2+i3, i6'=-1+i6

Dependency graph:
2 -> 18, 2 -> 19
15 -> 2, 15 -> 16, 15 -> 17
18 -> 2, 18 -> 16, 18 -> 17
19 -> 2, 19 -> 16, 19 -> 17

Refined Dependency Graph

	Removed the following edges: 15 -> 16, 15 -> 17

Start location: evalfstart

Location map:
LoAT_sink -> 0
evalfstart -> 1
evalfentryin -> 2
evalfbb3in -> 3
evalfbbin -> 4
evalfreturnin -> 5
evalfbb1in -> 6
evalfbb2in -> 7
evalfstop -> 8

Rules:
   2: (-3+i1 == 0 /\ -1-i6+i5 >= 0 /\ -1+i6 >= 0) /\ i1'=4, i3'=1+i3
  15: (-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=2+i3, i4'=i6, i6'=i4
  16: (-3+i1 == 0 /\ -i6 >= 0) /\ i1'=8, i3'=2+i3
  17: (-3+i1 == 0 /\ i6-i5 >= 0) /\ i1'=8, i3'=2+i3
  18: (-1+i4 >= 0 /\ -4+i1 == 0) /\ i1'=3, i3'=2+i3, i6'=1+i6
  19: (-4+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=2+i3, i6'=-1+i6

Dependency graph:
2 -> 18, 2 -> 19
15 -> 2
18 -> 2, 18 -> 16, 18 -> 17
19 -> 2, 19 -> 16, 19 -> 17

Step with 15

	Trace

	15[(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	15[(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	2[(-3+i1 == 0 /\ -1-i6+i5 >= 0 /\ -1+i6 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Step with 19

	Trace

	15[(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	2[(-3+i1 == 0 /\ -1-i6+i5 >= 0 /\ -1+i6 >= 0)]
	19[(-4+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{}
	{}
	{}
	
Poly(n^1)

Accelerate

		Simplified Guard

		Original rule:
		(0 == 0 /\ -3+i1 == 0 /\ -1-i6+i5 >= 0 /\ -i4 >= 0 /\ -1+i6 >= 0) /\ i1'=3, i3'=3+i3, i6'=-1+i6
		New rule:
		(-3+i1 == 0 /\ -1-i6+i5 >= 0 /\ -i4 >= 0 /\ -1+i6 >= 0) /\ i1'=3, i3'=3+i3, i6'=-1+i6

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ -1-i6+i5 >= 0 /\ -i4 >= 0 /\ -1+i6 >= 0) /\ i1'=3, i3'=3+i3, i6'=-1+i6
	New rule:
	(-3+i1 >= 0 /\ -1-i6+i5 >= 0 /\ 3-i1 >= 0 /\ i6-it16 >= 0 /\ -1+it16 >= 0 /\ -i4 >= 0) /\ i1'=i1, i3'=3*it16+i3, i6'=i6-it16

		-3+i1 >= 0 [0]: unchanged
		
		-1-i6+i5 >= 0 [0]: monotonic increase yields -1-i6+i5 >= 0
		
		3-i1 >= 0 [0]: unchanged
		
		-i4 >= 0 [0]: unchanged
		
		-1+i6 >= 0 [0]: montonic decrease yields i6-it16 >= 0
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, -1-i6+i5 >= 0 -> -1-i6+i5 >= 0, 3-i1 >= 0 -> 3-i1 >= 0, -i4 >= 0 -> -i4 >= 0, -1+i6 >= 0 -> i6-it16 >= 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ -1-i6+i5 >= 0 /\ 3-i1 >= 0 /\ i6-it16 >= 0 /\ -1+it16 >= 0 /\ -i4 >= 0) /\ i1'=i1, i3'=3*it16+i3, i6'=i6-it16
	New rule:
	(-3+i1 >= 0 /\ -1-i6+i5 >= 0 /\ 3-i1 >= 0 /\ i6-it16 >= 0 /\ -1+it16 >= 0 /\ -i4 >= 0) /\ i3'=3*it16+i3, i6'=i6-it16
	
	Instantiation

	Original rule:
	(-3+i1 >= 0 /\ -1-i6+i5 >= 0 /\ 3-i1 >= 0 /\ i6-it16 >= 0 /\ -1+it16 >= 0 /\ -i4 >= 0) /\ i3'=3*it16+i3, i6'=i6-it16
	New rule:
	(0 >= 0 /\ -3+i1 >= 0 /\ -1-i6+i5 >= 0 /\ 3-i1 >= 0 /\ -i4 >= 0 /\ -1+i6 >= 0) /\ i3'=3*i6+i3, i6'=0

Start location: evalfstart

Location map:
LoAT_sink -> 0
evalfstart -> 1
evalfentryin -> 2
evalfbb3in -> 3
evalfbbin -> 4
evalfreturnin -> 5
evalfbb1in -> 6
evalfbb2in -> 7
evalfstop -> 8

Rules:
   2: (-3+i1 == 0 /\ -1-i6+i5 >= 0 /\ -1+i6 >= 0) /\ i1'=4, i3'=1+i3
  15: (-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=2+i3, i4'=i6, i6'=i4
  16: (-3+i1 == 0 /\ -i6 >= 0) /\ i1'=8, i3'=2+i3
  17: (-3+i1 == 0 /\ i6-i5 >= 0) /\ i1'=8, i3'=2+i3
  18: (-1+i4 >= 0 /\ -4+i1 == 0) /\ i1'=3, i3'=2+i3, i6'=1+i6
  19: (-4+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=2+i3, i6'=-1+i6
  20: (0 >= 0 /\ -3+i1 >= 0 /\ -1-i6+i5 >= 0 /\ 3-i1 >= 0 /\ -i4 >= 0 /\ -1+i6 >= 0) /\ i3'=3*i6+i3, i6'=0

Dependency graph:
2 -> 18, 2 -> 19
15 -> 2, 15 -> 20
18 -> 2, 18 -> 16, 18 -> 17, 18 -> 20
19 -> 2, 19 -> 16, 19 -> 17, 19 -> 20
20 -> 2, 20 -> 16, 20 -> 17

	Trace

	15[(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	20[(0 >= 0 /\ -3+i1 >= 0 /\ -1-i6+i5 >= 0 /\ 3-i1 >= 0 /\ -i4 >= 0 /\ -1+i6 >= 0)]
	
	Blocked

	{}
	{}
	{20[T]}
	
Step with 16

	Trace

	15[(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	20[(0 >= 0 /\ -3+i1 >= 0 /\ -1-i6+i5 >= 0 /\ 3-i1 >= 0 /\ -i4 >= 0 /\ -1+i6 >= 0)]
	16[(-3+i1 == 0 /\ -i6 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 17[T], 20[T]}
	{}
	
Backtrack

	Trace

	15[(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	20[(0 >= 0 /\ -3+i1 >= 0 /\ -1-i6+i5 >= 0 /\ 3-i1 >= 0 /\ -i4 >= 0 /\ -1+i6 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 16[T], 17[T], 20[T]}
	
Backtrack

	Trace

	15[(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{20[T]}
	
Step with 2

	Trace

	15[(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	2[(-3+i1 == 0 /\ -1-i6+i5 >= 0 /\ -1+i6 >= 0)]
	
	Blocked

	{}
	{20[T]}
	{}
	
Step with 18

	Trace

	15[(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	2[(-3+i1 == 0 /\ -1-i6+i5 >= 0 /\ -1+i6 >= 0)]
	18[(-1+i4 >= 0 /\ -4+i1 == 0)]
	
	Blocked

	{}
	{20[T]}
	{}
	{}
	
Accelerate

		Simplified Guard

		Original rule:
		(0 == 0 /\ -3+i1 == 0 /\ -1+i4 >= 0 /\ -1-i6+i5 >= 0 /\ -1+i6 >= 0) /\ i1'=3, i3'=3+i3, i6'=1+i6
		New rule:
		(-3+i1 == 0 /\ -1+i4 >= 0 /\ -1-i6+i5 >= 0 /\ -1+i6 >= 0) /\ i1'=3, i3'=3+i3, i6'=1+i6

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ -1+i4 >= 0 /\ -1-i6+i5 >= 0 /\ -1+i6 >= 0) /\ i1'=3, i3'=3+i3, i6'=1+i6
	New rule:
	(-3+i1 >= 0 /\ -1+i4 >= 0 /\ -i6-it47+i5 >= 0 /\ 3-i1 >= 0 /\ -1+it47 >= 0 /\ -1+i6 >= 0) /\ i1'=i1, i3'=i3+3*it47, i6'=i6+it47

		-3+i1 >= 0 [0]: unchanged
		
		-1+i4 >= 0 [0]: unchanged
		
		-1-i6+i5 >= 0 [0]: montonic decrease yields -i6-it47+i5 >= 0
		
		3-i1 >= 0 [0]: unchanged
		
		-1+i6 >= 0 [0]: monotonic increase yields -1+i6 >= 0
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, -1+i4 >= 0 -> -1+i4 >= 0, -1-i6+i5 >= 0 -> -i6-it47+i5 >= 0, 3-i1 >= 0 -> 3-i1 >= 0, -1+i6 >= 0 -> -1+i6 >= 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ -1+i4 >= 0 /\ -i6-it47+i5 >= 0 /\ 3-i1 >= 0 /\ -1+it47 >= 0 /\ -1+i6 >= 0) /\ i1'=i1, i3'=i3+3*it47, i6'=i6+it47
	New rule:
	(-3+i1 >= 0 /\ -1+i4 >= 0 /\ -i6-it47+i5 >= 0 /\ 3-i1 >= 0 /\ -1+it47 >= 0 /\ -1+i6 >= 0) /\ i3'=i3+3*it47, i6'=i6+it47
	
	Instantiation

	Original rule:
	(-3+i1 >= 0 /\ -1+i4 >= 0 /\ -i6-it47+i5 >= 0 /\ 3-i1 >= 0 /\ -1+it47 >= 0 /\ -1+i6 >= 0) /\ i3'=i3+3*it47, i6'=i6+it47
	New rule:
	(0 >= 0 /\ -3+i1 >= 0 /\ -1+i4 >= 0 /\ -1-i6+i5 >= 0 /\ 3-i1 >= 0 /\ -1+i6 >= 0) /\ i3'=-3*i6+i3+3*i5, i6'=i5

Start location: evalfstart

Location map:
LoAT_sink -> 0
evalfstart -> 1
evalfentryin -> 2
evalfbb3in -> 3
evalfbbin -> 4
evalfreturnin -> 5
evalfbb1in -> 6
evalfbb2in -> 7
evalfstop -> 8

Rules:
   2: (-3+i1 == 0 /\ -1-i6+i5 >= 0 /\ -1+i6 >= 0) /\ i1'=4, i3'=1+i3
  15: (-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=3, i3'=2+i3, i4'=i6, i6'=i4
  16: (-3+i1 == 0 /\ -i6 >= 0) /\ i1'=8, i3'=2+i3
  17: (-3+i1 == 0 /\ i6-i5 >= 0) /\ i1'=8, i3'=2+i3
  18: (-1+i4 >= 0 /\ -4+i1 == 0) /\ i1'=3, i3'=2+i3, i6'=1+i6
  19: (-4+i1 == 0 /\ -i4 >= 0) /\ i1'=3, i3'=2+i3, i6'=-1+i6
  20: (0 >= 0 /\ -3+i1 >= 0 /\ -1-i6+i5 >= 0 /\ 3-i1 >= 0 /\ -i4 >= 0 /\ -1+i6 >= 0) /\ i3'=3*i6+i3, i6'=0
  21: (0 >= 0 /\ -3+i1 >= 0 /\ -1+i4 >= 0 /\ -1-i6+i5 >= 0 /\ 3-i1 >= 0 /\ -1+i6 >= 0) /\ i3'=-3*i6+i3+3*i5, i6'=i5

Dependency graph:
2 -> 18, 2 -> 19
15 -> 2, 15 -> 20, 15 -> 21
18 -> 2, 18 -> 16, 18 -> 17, 18 -> 20, 18 -> 21
19 -> 2, 19 -> 16, 19 -> 17, 19 -> 20, 19 -> 21
20 -> 2, 20 -> 16, 20 -> 17, 20 -> 21
21 -> 2, 21 -> 16, 21 -> 17, 21 -> 20

	Trace

	15[(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	21[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i4 >= 0 /\ -1-i6+i5 >= 0 /\ 3-i1 >= 0 /\ -1+i6 >= 0)]
	
	Blocked

	{}
	{20[T]}
	{21[T]}
	
Step with 17

	Trace

	15[(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	21[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i4 >= 0 /\ -1-i6+i5 >= 0 /\ 3-i1 >= 0 /\ -1+i6 >= 0)]
	17[(-3+i1 == 0 /\ i6-i5 >= 0)]
	
	Blocked

	{}
	{20[T]}
	{2[T], 16[T], 20[T], 21[T]}
	{}
	
Backtrack

	Trace

	15[(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	21[(0 >= 0 /\ -3+i1 >= 0 /\ -1+i4 >= 0 /\ -1-i6+i5 >= 0 /\ 3-i1 >= 0 /\ -1+i6 >= 0)]
	
	Blocked

	{}
	{20[T]}
	{2[T], 16[T], 17[T], 20[T], 21[T]}
	
Backtrack

	Trace

	15[(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{20[T], 21[T]}
	
Step with 2

	Trace

	15[(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	2[(-3+i1 == 0 /\ -1-i6+i5 >= 0 /\ -1+i6 >= 0)]
	
	Blocked

	{}
	{20[T], 21[T]}
	{}
	
Step with 19

	Trace

	15[(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	2[(-3+i1 == 0 /\ -1-i6+i5 >= 0 /\ -1+i6 >= 0)]
	19[(-4+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{20[T], 21[T]}
	{}
	{}
	
Covered

	Trace

	15[(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	2[(-3+i1 == 0 /\ -1-i6+i5 >= 0 /\ -1+i6 >= 0)]
	
	Blocked

	{}
	{20[T], 21[T]}
	{19[T]}
	
Step with 18

	Trace

	15[(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	2[(-3+i1 == 0 /\ -1-i6+i5 >= 0 /\ -1+i6 >= 0)]
	18[(-1+i4 >= 0 /\ -4+i1 == 0)]
	
	Blocked

	{}
	{20[T], 21[T]}
	{19[T]}
	{}
	
Covered

	Trace

	15[(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	2[(-3+i1 == 0 /\ -1-i6+i5 >= 0 /\ -1+i6 >= 0)]
	
	Blocked

	{}
	{20[T], 21[T]}
	{18[T], 19[T]}
	
Backtrack

	Trace

	15[(-1+i4 >= 0 /\ -1+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{2[T], 20[T], 21[T]}
	
Backtrack

	Trace

	Blocked

	{15[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l2, l3, l4, l5, l6, l7
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l6(X₀, X₁, X₂)
  t₂: l1(X₀, X₁, X₂) → l2(X₀, X₁, X₂) :|: 1+X₂ ≤ X₁ ∧ 1 ≤ X₂
  t₃: l1(X₀, X₁, X₂) → l5(X₀, X₁, X₂) :|: X₂ ≤ 0
  t₄: l1(X₀, X₁, X₂) → l5(X₀, X₁, X₂) :|: X₁ ≤ X₂
  t₅: l2(X₀, X₁, X₂) → l3(X₀, X₁, X₂) :|: 1 ≤ X₀
  t₆: l2(X₀, X₁, X₂) → l4(X₀, X₁, X₂) :|: X₀ ≤ 0
  t₇: l3(X₀, X₁, X₂) → l1(X₀, X₁, 1+X₂)
  t₈: l4(X₀, X₁, X₂) → l1(X₀, X₁, X₂-1)
  t₉: l5(X₀, X₁, X₂) → l7(X₀, X₁, X₂)
  t₁: l6(X₀, X₁, X₂) → l1(X₂, X₁, X₀) :|: 1 ≤ X₀ ∧ 1+X₀ ≤ X₁


Preprocessing
  Found invariant 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 3 ≤ X₁+X₂ ∧ 2 ≤ X₁ for location l2


  Found invariant X₂ ≤ X₁ ∧ 0 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ 2 ≤ X₁ for location l7


  Found invariant X₂ ≤ X₁ ∧ 0 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ 2 ≤ X₁ for location l5


  Found invariant X₂ ≤ X₁ ∧ 0 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ 2 ≤ X₁ for location l1


  Found invariant 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 3 ≤ X₁+X₂ ∧ 1+X₀ ≤ X₂ ∧ 2 ≤ X₁ ∧ 2+X₀ ≤ X₁ ∧ X₀ ≤ 0 for location l4


  Found invariant 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 3 ≤ X₁+X₂ ∧ 2 ≤ X₀+X₂ ∧ 2 ≤ X₁ ∧ 3 ≤ X₀+X₁ ∧ 1 ≤ X₀ for location l3


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l2, l3, l4, l5, l6, l7
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l6(X₀, X₁, X₂)
  t₂: l1(X₀, X₁, X₂) → l2(X₀, X₁, X₂) :|: 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁ ∧ 2 ≤ X₁+X₂ ∧ X₂ ≤ X₁ ∧ 0 ≤ X₂
  t₃: l1(X₀, X₁, X₂) → l5(X₀, X₁, X₂) :|: X₂ ≤ 0 ∧ 2 ≤ X₁ ∧ 2 ≤ X₁+X₂ ∧ X₂ ≤ X₁ ∧ 0 ≤ X₂
  t₄: l1(X₀, X₁, X₂) → l5(X₀, X₁, X₂) :|: X₁ ≤ X₂ ∧ 2 ≤ X₁ ∧ 2 ≤ X₁+X₂ ∧ X₂ ≤ X₁ ∧ 0 ≤ X₂
  t₅: l2(X₀, X₁, X₂) → l3(X₀, X₁, X₂) :|: 1 ≤ X₀ ∧ 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁ ∧ 3 ≤ X₁+X₂
  t₆: l2(X₀, X₁, X₂) → l4(X₀, X₁, X₂) :|: X₀ ≤ 0 ∧ 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁ ∧ 3 ≤ X₁+X₂
  t₇: l3(X₀, X₁, X₂) → l1(X₀, X₁, 1+X₂) :|: 1 ≤ X₀ ∧ 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₀+X₂ ∧ 2 ≤ X₁ ∧ 3 ≤ X₀+X₁ ∧ 3 ≤ X₁+X₂
  t₈: l4(X₀, X₁, X₂) → l1(X₀, X₁, X₂-1) :|: 1+X₀ ≤ X₂ ∧ 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2+X₀ ≤ X₁ ∧ 2 ≤ X₁ ∧ 3 ≤ X₁+X₂ ∧ X₀ ≤ 0
  t₉: l5(X₀, X₁, X₂) → l7(X₀, X₁, X₂) :|: 2 ≤ X₁ ∧ 2 ≤ X₁+X₂ ∧ X₂ ≤ X₁ ∧ 0 ≤ X₂
  t₁: l6(X₀, X₁, X₂) → l1(X₂, X₁, X₀) :|: 1 ≤ X₀ ∧ 1+X₀ ≤ X₁


  Cut unsatisfiable transition [t₃: l1→l5; t₄: l1→l5; t₂₂₄: l1→l5; t₂₂₅: l1→l5]


  Found invariant 2+X₂ ≤ X₁ ∧ 0 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ X₀ ≤ X₂ ∧ 2 ≤ X₁ ∧ 2+X₀ ≤ X₁ ∧ X₀ ≤ 0 for location l1_v2


  Found invariant 2+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 4 ≤ X₁+X₂ ∧ 1+X₀ ≤ X₂ ∧ 3 ≤ X₁ ∧ 3+X₀ ≤ X₁ ∧ X₀ ≤ 0 for location l2_v3


  Found invariant 1+X₂ ≤ X₁ ∧ 2 ≤ X₂ ∧ 5 ≤ X₁+X₂ ∧ 3 ≤ X₀+X₂ ∧ 3 ≤ X₁ ∧ 4 ≤ X₀+X₁ ∧ 1 ≤ X₀ for location l3_v2


  Found invariant X₂ ≤ X₁ ∧ 2 ≤ X₂ ∧ 4 ≤ X₁+X₂ ∧ 3 ≤ X₀+X₂ ∧ 2 ≤ X₁ ∧ 3 ≤ X₀+X₁ ∧ 1 ≤ X₀ for location l1_v1


  Found invariant 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 3 ≤ X₁+X₂ ∧ 2 ≤ X₁ for location l2_v1


  Found invariant 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 3 ≤ X₁+X₂ ∧ 1+X₀ ≤ X₂ ∧ 2 ≤ X₁ ∧ 2+X₀ ≤ X₁ ∧ X₀ ≤ 0 for location l4_v1


  Found invariant 2+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 4 ≤ X₁+X₂ ∧ 1+X₀ ≤ X₂ ∧ 3 ≤ X₁ ∧ 3+X₀ ≤ X₁ ∧ X₀ ≤ 0 for location l4_v2


  Found invariant 1+X₂ ≤ X₁ ∧ 2 ≤ X₂ ∧ 5 ≤ X₁+X₂ ∧ 3 ≤ X₀+X₂ ∧ 3 ≤ X₁ ∧ 4 ≤ X₀+X₁ ∧ 1 ≤ X₀ for location l2_v2


  Found invariant X₂ ≤ X₁ ∧ 0 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ 2 ≤ X₁ for location l7


  Found invariant X₂ ≤ X₁ ∧ 0 ≤ X₂ ∧ 2 ≤ X₁+X₂ ∧ 2 ≤ X₁ for location l5


  Found invariant 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 3 ≤ X₁+X₂ ∧ 2 ≤ X₁ for location l1


  Found invariant 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 3 ≤ X₁+X₂ ∧ 2 ≤ X₀+X₂ ∧ 2 ≤ X₁ ∧ 3 ≤ X₀+X₁ ∧ 1 ≤ X₀ for location l3_v1


Analysing control-flow refined program
MPRF for transition t₂₃₁: l1_v1(X₀, X₁, X₂) → l2_v2(X₀, X₁, X₂) :|: 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 1 ≤ X₀ ∧ 2 ≤ X₁ ∧ 2 ≤ X₁+X₂ ∧ 2 ≤ X₂ ∧ 3 ≤ X₀+X₁ ∧ 3 ≤ X₀+X₂ ∧ 4 ≤ X₁+X₂ ∧ X₂ ≤ X₁ ∧ 0 ≤ X₂ of depth 1:
  new bound:
    X₀+X₁+2 {O(n)}

  MPRF:
    • l1_v1: [1+X₁-X₂]
    • l2_v2: [X₁-X₂]
    • l3_v2: [X₁-X₂]




MPRF for transition t₂₃₂: l2_v2(X₀, X₁, X₂) → l3_v2(X₀, X₁, X₂) :|: 1 ≤ X₀ ∧ 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁ ∧ 2 ≤ X₂ ∧ 3 ≤ X₀+X₂ ∧ 3 ≤ X₁ ∧ 3 ≤ X₁+X₂ ∧ 4 ≤ X₀+X₁ ∧ 5 ≤ X₁+X₂ of depth 1:
  new bound:
    X₀+X₁+1 {O(n)}

  MPRF:
    • l1_v1: [X₁-X₂]
    • l2_v2: [X₁-X₂]
    • l3_v2: [X₁-1-X₂]




MPRF for transition t₂₃₃: l3_v2(X₀, X₁, X₂) → l1_v1(X₀, X₁, 1+X₂) :|: 1 ≤ X₀ ∧ 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₀+X₂ ∧ 2 ≤ X₁ ∧ 2 ≤ X₂ ∧ 3 ≤ X₀+X₁ ∧ 3 ≤ X₀+X₂ ∧ 3 ≤ X₁ ∧ 3 ≤ X₁+X₂ ∧ 4 ≤ X₀+X₁ ∧ 5 ≤ X₁+X₂ of depth 1:
  new bound:
    X₀+X₁+1 {O(n)}

  MPRF:
    • l1_v1: [X₁-X₂]
    • l2_v2: [X₁-X₂]
    • l3_v2: [X₁-X₂]




MPRF for transition t₂₃₆: l1_v2(X₀, X₁, X₂) → l2_v3(X₀, X₁, X₂) :|: 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2+X₀ ≤ X₁ ∧ 2 ≤ X₁ ∧ 2 ≤ X₁+X₂ ∧ 2+X₂ ≤ X₁ ∧ X₀ ≤ 0 ∧ X₀ ≤ X₂ ∧ X₂ ≤ X₁ ∧ 0 ≤ X₂ of depth 1:
  new bound:
    X₀+1 {O(n)}

  MPRF:
    • l1_v2: [1+X₂]
    • l2_v3: [X₂]
    • l4_v2: [X₂]




MPRF for transition t₂₃₇: l2_v3(X₀, X₁, X₂) → l4_v2(X₀, X₁, X₂) :|: X₀ ≤ 0 ∧ 1+X₀ ≤ X₂ ∧ 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁ ∧ 2+X₂ ≤ X₁ ∧ 3+X₀ ≤ X₁ ∧ 3 ≤ X₁ ∧ 3 ≤ X₁+X₂ ∧ 4 ≤ X₁+X₂ of depth 1:
  new bound:
    X₀+X₁+3 {O(n)}

  MPRF:
    • l1_v2: [X₁+X₂-3]
    • l2_v3: [X₁+X₂-3]
    • l4_v2: [X₁+X₂-4]




MPRF for transition t₂₃₈: l4_v2(X₀, X₁, X₂) → l1_v2(X₀, X₁, X₂-1) :|: 1+X₀ ≤ X₂ ∧ 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2+X₀ ≤ X₁ ∧ 2 ≤ X₁ ∧ 2+X₂ ≤ X₁ ∧ 3+X₀ ≤ X₁ ∧ 3 ≤ X₁ ∧ 3 ≤ X₁+X₂ ∧ 4 ≤ X₁+X₂ ∧ X₀ ≤ 0 of depth 1:
  new bound:
    X₀ {O(n)}

  MPRF:
    • l1_v2: [X₂]
    • l2_v3: [X₂]
    • l4_v2: [X₂]




CFR: Improvement to new bound with the following program: 
  method: PartialEvaluation new bound: 
    O(n)

  cfr-program: 
    Start:  l0
    Program_Vars:  X₀, X₁, X₂
    Temp_Vars:  
    Locations:  l0, l1, l1_v1, l1_v2, l2_v1, l2_v2, l2_v3, l3_v1, l3_v2, l4_v1, l4_v2, l5, l6, l7
    Return Locations:  
    Transitions:
    t₀: l0(X₀, X₁, X₂) → l6(X₀, X₁, X₂)
    t₂₂₆: l1(X₀, X₁, X₂) → l2_v1(X₀, X₁, X₂) :|: 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁ ∧ 2 ≤ X₁+X₂ ∧ 3 ≤ X₁+X₂ ∧ X₂ ≤ X₁ ∧ 0 ≤ X₂
    t₂₃₁: l1_v1(X₀, X₁, X₂) → l2_v2(X₀, X₁, X₂) :|: 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 1 ≤ X₀ ∧ 2 ≤ X₁ ∧ 2 ≤ X₁+X₂ ∧ 2 ≤ X₂ ∧ 3 ≤ X₀+X₁ ∧ 3 ≤ X₀+X₂ ∧ 4 ≤ X₁+X₂ ∧ X₂ ≤ X₁ ∧ 0 ≤ X₂
    t₂₃₀: l1_v1(X₀, X₁, X₂) → l5(X₀, X₁, X₂) :|: X₁ ≤ X₂ ∧ 1 ≤ X₀ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁ ∧ 2 ≤ X₁+X₂ ∧ 2 ≤ X₂ ∧ 3 ≤ X₀+X₁ ∧ 3 ≤ X₀+X₂ ∧ 4 ≤ X₁+X₂ ∧ X₂ ≤ X₁ ∧ 0 ≤ X₂
    t₂₃₆: l1_v2(X₀, X₁, X₂) → l2_v3(X₀, X₁, X₂) :|: 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2+X₀ ≤ X₁ ∧ 2 ≤ X₁ ∧ 2 ≤ X₁+X₂ ∧ 2+X₂ ≤ X₁ ∧ X₀ ≤ 0 ∧ X₀ ≤ X₂ ∧ X₂ ≤ X₁ ∧ 0 ≤ X₂
    t₂₃₅: l1_v2(X₀, X₁, X₂) → l5(X₀, X₁, X₂) :|: X₂ ≤ 0 ∧ 1+X₂ ≤ X₁ ∧ 2+X₀ ≤ X₁ ∧ 2 ≤ X₁ ∧ 2 ≤ X₁+X₂ ∧ 2+X₂ ≤ X₁ ∧ X₀ ≤ 0 ∧ X₀ ≤ X₂ ∧ X₂ ≤ X₁ ∧ 0 ≤ X₂
    t₂₂₈: l2_v1(X₀, X₁, X₂) → l3_v1(X₀, X₁, X₂) :|: 1 ≤ X₀ ∧ 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁ ∧ 3 ≤ X₁+X₂
    t₂₂₇: l2_v1(X₀, X₁, X₂) → l4_v1(X₀, X₁, X₂) :|: X₀ ≤ 0 ∧ 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁ ∧ 3 ≤ X₁+X₂
    t₂₃₂: l2_v2(X₀, X₁, X₂) → l3_v2(X₀, X₁, X₂) :|: 1 ≤ X₀ ∧ 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁ ∧ 2 ≤ X₂ ∧ 3 ≤ X₀+X₂ ∧ 3 ≤ X₁ ∧ 3 ≤ X₁+X₂ ∧ 4 ≤ X₀+X₁ ∧ 5 ≤ X₁+X₂
    t₂₃₇: l2_v3(X₀, X₁, X₂) → l4_v2(X₀, X₁, X₂) :|: X₀ ≤ 0 ∧ 1+X₀ ≤ X₂ ∧ 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₁ ∧ 2+X₂ ≤ X₁ ∧ 3+X₀ ≤ X₁ ∧ 3 ≤ X₁ ∧ 3 ≤ X₁+X₂ ∧ 4 ≤ X₁+X₂
    t₂₂₉: l3_v1(X₀, X₁, X₂) → l1_v1(X₀, X₁, 1+X₂) :|: 1 ≤ X₀ ∧ 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₀+X₂ ∧ 2 ≤ X₁ ∧ 3 ≤ X₀+X₁ ∧ 3 ≤ X₁+X₂
    t₂₃₃: l3_v2(X₀, X₁, X₂) → l1_v1(X₀, X₁, 1+X₂) :|: 1 ≤ X₀ ∧ 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2 ≤ X₀+X₂ ∧ 2 ≤ X₁ ∧ 2 ≤ X₂ ∧ 3 ≤ X₀+X₁ ∧ 3 ≤ X₀+X₂ ∧ 3 ≤ X₁ ∧ 3 ≤ X₁+X₂ ∧ 4 ≤ X₀+X₁ ∧ 5 ≤ X₁+X₂
    t₂₃₄: l4_v1(X₀, X₁, X₂) → l1_v2(X₀, X₁, X₂-1) :|: 1+X₀ ≤ X₂ ∧ 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2+X₀ ≤ X₁ ∧ 2 ≤ X₁ ∧ 3 ≤ X₁+X₂ ∧ X₀ ≤ 0
    t₂₃₈: l4_v2(X₀, X₁, X₂) → l1_v2(X₀, X₁, X₂-1) :|: 1+X₀ ≤ X₂ ∧ 1+X₂ ≤ X₁ ∧ 1 ≤ X₂ ∧ 2+X₀ ≤ X₁ ∧ 2 ≤ X₁ ∧ 2+X₂ ≤ X₁ ∧ 3+X₀ ≤ X₁ ∧ 3 ≤ X₁ ∧ 3 ≤ X₁+X₂ ∧ 4 ≤ X₁+X₂ ∧ X₀ ≤ 0
    t₉: l5(X₀, X₁, X₂) → l7(X₀, X₁, X₂) :|: 2 ≤ X₁ ∧ 2 ≤ X₁+X₂ ∧ X₂ ≤ X₁ ∧ 0 ≤ X₂
    t₁: l6(X₀, X₁, X₂) → l1(X₂, X₁, X₀) :|: 1 ≤ X₀ ∧ 1+X₀ ≤ X₁




All Bounds
Timebounds
  Overall timebound:4⋅X₁+6⋅X₀+18 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₉: 1 {O(1)}
    t₂₂₆: 1 {O(1)}
    t₂₂₇: 1 {O(1)}
    t₂₂₈: 1 {O(1)}
    t₂₂₉: 1 {O(1)}
    t₂₃₀: 1 {O(1)}
    t₂₃₁: X₀+X₁+2 {O(n)}
    t₂₃₂: X₀+X₁+1 {O(n)}
    t₂₃₃: X₀+X₁+1 {O(n)}
    t₂₃₄: 1 {O(1)}
    t₂₃₅: 1 {O(1)}
    t₂₃₆: X₀+1 {O(n)}
    t₂₃₇: X₀+X₁+3 {O(n)}
    t₂₃₈: X₀ {O(n)}


Costbounds
  Overall costbound: 4⋅X₁+6⋅X₀+18 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₉: 1 {O(1)}
    t₂₂₆: 1 {O(1)}
    t₂₂₇: 1 {O(1)}
    t₂₂₈: 1 {O(1)}
    t₂₂₉: 1 {O(1)}
    t₂₃₀: 1 {O(1)}
    t₂₃₁: X₀+X₁+2 {O(n)}
    t₂₃₂: X₀+X₁+1 {O(n)}
    t₂₃₃: X₀+X₁+1 {O(n)}
    t₂₃₄: 1 {O(1)}
    t₂₃₅: 1 {O(1)}
    t₂₃₆: X₀+1 {O(n)}
    t₂₃₇: X₀+X₁+3 {O(n)}
    t₂₃₈: X₀ {O(n)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₀, X₂: X₂ {O(n)}
    t₁, X₀: X₂ {O(n)}
    t₁, X₁: X₁ {O(n)}
    t₁, X₂: X₀ {O(n)}
    t₉, X₀: 4⋅X₂ {O(n)}
    t₉, X₁: 4⋅X₁ {O(n)}
    t₉, X₂: 3⋅X₀+X₁+3 {O(n)}
    t₂₂₆, X₀: X₂ {O(n)}
    t₂₂₆, X₁: X₁ {O(n)}
    t₂₂₆, X₂: X₀ {O(n)}
    t₂₂₇, X₀: X₂ {O(n)}
    t₂₂₇, X₁: X₁ {O(n)}
    t₂₂₇, X₂: X₀ {O(n)}
    t₂₂₈, X₀: X₂ {O(n)}
    t₂₂₈, X₁: X₁ {O(n)}
    t₂₂₈, X₂: X₀ {O(n)}
    t₂₂₉, X₀: X₂ {O(n)}
    t₂₂₉, X₁: X₁ {O(n)}
    t₂₂₉, X₂: X₀+1 {O(n)}
    t₂₃₀, X₀: 2⋅X₂ {O(n)}
    t₂₃₀, X₁: 2⋅X₁ {O(n)}
    t₂₃₀, X₂: 3⋅X₀+X₁+3 {O(n)}
    t₂₃₁, X₀: X₂ {O(n)}
    t₂₃₁, X₁: X₁ {O(n)}
    t₂₃₁, X₂: 2⋅X₀+X₁+2 {O(n)}
    t₂₃₂, X₀: X₂ {O(n)}
    t₂₃₂, X₁: X₁ {O(n)}
    t₂₃₂, X₂: 2⋅X₀+X₁+2 {O(n)}
    t₂₃₃, X₀: X₂ {O(n)}
    t₂₃₃, X₁: X₁ {O(n)}
    t₂₃₃, X₂: 2⋅X₀+X₁+2 {O(n)}
    t₂₃₄, X₀: X₂ {O(n)}
    t₂₃₄, X₁: X₁ {O(n)}
    t₂₃₄, X₂: X₀ {O(n)}
    t₂₃₅, X₀: 2⋅X₂ {O(n)}
    t₂₃₅, X₁: 2⋅X₁ {O(n)}
    t₂₃₅, X₂: 0 {O(1)}
    t₂₃₆, X₀: X₂ {O(n)}
    t₂₃₆, X₁: X₁ {O(n)}
    t₂₃₆, X₂: X₀ {O(n)}
    t₂₃₇, X₀: X₂ {O(n)}
    t₂₃₇, X₁: X₁ {O(n)}
    t₂₃₇, X₂: X₀ {O(n)}
    t₂₃₈, X₀: X₂ {O(n)}
    t₂₃₈, X₁: X₁ {O(n)}
    t₂₃₈, X₂: X₀ {O(n)}

