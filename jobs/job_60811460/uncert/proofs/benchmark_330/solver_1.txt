NO

# LoAT Proof:
NO

NO

Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f5 -> 2
f16 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0, i5'=0
   1: -2+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=2+i5, i6'=it4+it3
   2: -2+i1 == 0 /\ i1'=3, i3'=1+i3

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=2+i5, i6'=it4+it3
	New rule:
	(-1+it24 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i1'=0

		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Loop Acceleration

	Original rule:
	(-2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=2+i5, i6'=it4+it3
	New rule:
	(-1+it24 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it24, i4'=i4+it24, i5'=2*it24+i5, i6'=it4+it3

		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+it24 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it24, i4'=i4+it24, i5'=2*it24+i5, i6'=it4+it3
	New rule:
	(-1+it24 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it24, i4'=i4+it24, i5'=2*it24+i5, i6'=it4+it3

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f5 -> 2
f16 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0, i5'=0
   1: -2+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=2+i5, i6'=it4+it3
   2: -2+i1 == 0 /\ i1'=3, i3'=1+i3
   3: (-1+it24 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i1'=0
   4: (-1+it24 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it24, i4'=i4+it24, i5'=2*it24+i5, i6'=it4+it3

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3, 0 -> 4
1 -> 1, 1 -> 2, 1 -> 3, 1 -> 4
4 -> 1, 4 -> 2, 4 -> 3

Step with 3

	Trace

	0[(-1+i1 == 0)]
	3[(-1+it24 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{3[T]}
	
Refute

	Counterexample

	(i1=1, i3=-1, i6=0)
	-0-> (i1=2, i3=0, i4=0, i5=0, i6=0 )
	-3-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  D, E
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l1(0, 0, X₂)
  t₁: l1(X₀, X₁, X₂) → l1(1+X₀, 2+X₁, D+E)
  t₂: l1(X₀, X₁, X₂) → l2(X₀, X₁, X₂)


Preprocessing
  Eliminate variables [D; E; X₀; X₁; X₂] that do not contribute to the problem


Problem after Preprocessing
  Start:  l0
  Program_Vars:  
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₃: l0 → l1
  t₄: l1 → l1
  t₅: l1 → l2


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₃: 1 {O(1)}
    t₄: inf {Infinity}
    t₅: 1 {O(1)}


Costbounds
  Overall costbound: inf {Infinity}
    t₃: 1 {O(1)}
    t₄: inf {Infinity}
    t₅: 1 {O(1)}


Sizebounds

