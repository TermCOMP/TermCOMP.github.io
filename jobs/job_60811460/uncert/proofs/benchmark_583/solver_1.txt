WORST_CASE(?,O(1))

# LoAT Proof:
Initial ITS

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f0 -> 2
f4 -> 3
f1 -> 4
f2 -> 5

Rules:
   0: (-2+i1 == 0 /\ -10+i4 >= 0) /\ i1'=3, i3'=1+i3, i5'=it2
   1: (-2+i1 == 0 /\ 9-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i6'=i4
   2: (9-it3 >= 0 /\ -4+i1 == 0 /\ i4 == 0) /\ i1'=2, i3'=1+i3, i4'=1
   3: (9-i4 >= 0 /\ -5+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=2, i7'=2
   4: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0

Dependency graph:
1 -> 0, 1 -> 1
2 -> 0, 2 -> 1
3 -> 0, 3 -> 1
4 -> 0, 4 -> 1

Preprocessed Transitions

	Eliminated Temporary Variables

	Original rule:
	(9-it3 >= 0 /\ -4+i1 == 0 /\ i4 == 0) /\ i1'=2, i3'=1+i3, i4'=1
	New rule:
	(-4+i1 == 0 /\ i4 == 0) /\ i1'=2, i3'=1+i3, i4'=1

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f0 -> 2
f4 -> 3
f1 -> 4
f2 -> 5

Rules:
   0: (-2+i1 == 0 /\ -10+i4 >= 0) /\ i1'=3, i3'=1+i3, i5'=it2
   1: (-2+i1 == 0 /\ 9-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i6'=i4
   3: (9-i4 >= 0 /\ -5+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=2, i7'=2
   4: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0
   5: (-4+i1 == 0 /\ i4 == 0) /\ i1'=2, i3'=1+i3, i4'=1

Dependency graph:
1 -> 0, 1 -> 1
3 -> 0, 3 -> 1
4 -> 0, 4 -> 1
5 -> 0, 5 -> 1

Refined Dependency Graph

	Removed the following edges: 3 -> 0, 4 -> 0, 5 -> 0

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f0 -> 2
f4 -> 3
f1 -> 4
f2 -> 5

Rules:
   0: (-2+i1 == 0 /\ -10+i4 >= 0) /\ i1'=3, i3'=1+i3, i5'=it2
   1: (-2+i1 == 0 /\ 9-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i6'=i4
   3: (9-i4 >= 0 /\ -5+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=2, i7'=2
   4: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0
   5: (-4+i1 == 0 /\ i4 == 0) /\ i1'=2, i3'=1+i3, i4'=1

Dependency graph:
1 -> 0, 1 -> 1
3 -> 1
4 -> 1
5 -> 1

Step with 4

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 1

	Trace

	4[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ 9-i4 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ 9-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i6'=i4
	New rule:
	(-1+it16 >= 0 /\ -2+i1 >= 0 /\ 9-i4 >= 0 /\ 10-it16-i4 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it16, i4'=it16+i4, i6'=-1+it16+i4

		-2+i1 >= 0 [0]: unchanged
		
		9-i4 >= 0 [0]: montonic decrease yields (9-i4 >= 0 /\ 10-it16-i4 >= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 9-i4 >= 0 -> (9-i4 >= 0 /\ 10-it16-i4 >= 0), 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+it16 >= 0 /\ -2+i1 >= 0 /\ 9-i4 >= 0 /\ 10-it16-i4 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it16, i4'=it16+i4, i6'=-1+it16+i4
	New rule:
	(-1+it16 >= 0 /\ -2+i1 >= 0 /\ 9-i4 >= 0 /\ 10-it16-i4 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it16, i4'=it16+i4, i6'=-1+it16+i4
	
	Instantiation

	Original rule:
	(-1+it16 >= 0 /\ -2+i1 >= 0 /\ 9-i4 >= 0 /\ 10-it16-i4 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it16, i4'=it16+i4, i6'=-1+it16+i4
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ 9-i4 >= 0 /\ 2-i1 >= 0) /\ i3'=10+i3-i4, i4'=10, i6'=9

Start location: f3

Location map:
LoAT_sink -> 0
f3 -> 1
f0 -> 2
f4 -> 3
f1 -> 4
f2 -> 5

Rules:
   0: (-2+i1 == 0 /\ -10+i4 >= 0) /\ i1'=3, i3'=1+i3, i5'=it2
   1: (-2+i1 == 0 /\ 9-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i6'=i4
   3: (9-i4 >= 0 /\ -5+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=2, i7'=2
   4: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0
   5: (-4+i1 == 0 /\ i4 == 0) /\ i1'=2, i3'=1+i3, i4'=1
   6: (0 >= 0 /\ -2+i1 >= 0 /\ 9-i4 >= 0 /\ 2-i1 >= 0) /\ i3'=10+i3-i4, i4'=10, i6'=9

Dependency graph:
1 -> 0, 1 -> 1, 1 -> 6
3 -> 1, 3 -> 6
4 -> 1, 4 -> 6
5 -> 1, 5 -> 6
6 -> 0, 6 -> 1

	Trace

	4[(-1+i1 == 0)]
	6[(0 >= 0 /\ -2+i1 >= 0 /\ 9-i4 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 6[T]}
	
Step with 0

	Trace

	4[(-1+i1 == 0)]
	6[(0 >= 0 /\ -2+i1 >= 0 /\ 9-i4 >= 0 /\ 2-i1 >= 0)]
	0[(-2+i1 == 0 /\ -10+i4 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 6[T]}
	{}
	
Backtrack

	Trace

	4[(-1+i1 == 0)]
	6[(0 >= 0 /\ -2+i1 >= 0 /\ 9-i4 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{0[T], 1[T], 6[T]}
	
Backtrack

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{6[T]}
	
Step with 1

	Trace

	4[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ 9-i4 >= 0)]
	
	Blocked

	{}
	{6[T]}
	{}
	
Covered

	Trace

	4[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 6[T]}
	
Backtrack

	Trace

	Blocked

	{4[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃
  Temp_Vars:  E
  Locations:  l0, l1, l2, l3, l4
  Return Locations:  
  Transitions:
  t₄: l0(X₀, X₁, X₂, X₃) → l1(0, X₁, X₂, X₃)
  t₁: l1(X₀, X₁, X₂, X₃) → l1(1+X₀, X₁, X₀, X₃) :|: X₀ ≤ 9
  t₀: l1(X₀, X₁, X₂, X₃) → l2(X₀, E, X₂, X₃) :|: 10 ≤ X₀
  t₂: l3(X₀, X₁, X₂, X₃) → l1(1, X₁, X₂, X₃) :|: E ≤ 9 ∧ 0 ≤ X₀ ∧ X₀ ≤ 0
  t₃: l4(X₀, X₁, X₂, X₃) → l1(2, X₁, X₂, 2) :|: X₀ ≤ 9


Preprocessing
  Cut unreachable locations [l3; l4] from the program graph


  Eliminate variables [E; X₁; X₂; X₃] that do not contribute to the problem


  Found invariant X₀ ≤ 10 ∧ 0 ≤ X₀ for location l1


  Found invariant X₀ ≤ 10 ∧ 10 ≤ X₀ for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₅: l0(X₀) → l1(0)
  t₆: l1(X₀) → l1(1+X₀) :|: X₀ ≤ 9 ∧ X₀ ≤ 10 ∧ 0 ≤ X₀
  t₇: l1(X₀) → l2(X₀) :|: 10 ≤ X₀ ∧ X₀ ≤ 10 ∧ 0 ≤ X₀


MPRF for transition t₆: l1(X₀) → l1(1+X₀) :|: X₀ ≤ 9 ∧ X₀ ≤ 10 ∧ 0 ≤ X₀ of depth 1:
  new bound:
    11 {O(1)}

  MPRF:
    • l1: [11-X₀]




All Bounds
Timebounds
  Overall timebound:13 {O(1)}
    t₅: 1 {O(1)}
    t₆: 11 {O(1)}
    t₇: 1 {O(1)}


Costbounds
  Overall costbound: 13 {O(1)}
    t₅: 1 {O(1)}
    t₆: 11 {O(1)}
    t₇: 1 {O(1)}


Sizebounds
    t₅, X₀: 0 {O(1)}
    t₆, X₀: 10 {O(1)}
    t₇, X₀: 10 {O(1)}

