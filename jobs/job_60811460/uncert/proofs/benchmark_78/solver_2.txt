WORST_CASE(?,O(n^1))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalspeedpldi4bb2in/4,evalspeedpldi4bb3in/4,evalspeedpldi4bb4in/4,evalspeedpldi4bb5in/4]
1. non_recursive  : [evalspeedpldi4stop/3]
2. non_recursive  : [evalspeedpldi4returnin/3]
3. non_recursive  : [exit_location/1]
4. non_recursive  : [evalspeedpldi4bb5in_loop_cont/4]
5. non_recursive  : [evalspeedpldi4entryin/3]
6. non_recursive  : [evalspeedpldi4start/3]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalspeedpldi4bb5in/4
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into evalspeedpldi4bb5in_loop_cont/4
5. SCC is partially evaluated into evalspeedpldi4entryin/3
6. SCC is partially evaluated into evalspeedpldi4start/3

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalspeedpldi4bb5in/4 
* CE 8 is refined into CE [11] 
* CE 7 is refined into CE [12] 
* CE 6 is refined into CE [13] 
* CE 5 is refined into CE [14] 


### Cost equations --> "Loop" of evalspeedpldi4bb5in/4 
* CEs [13] --> Loop 11 
* CEs [14] --> Loop 12 
* CEs [11] --> Loop 13 
* CEs [12] --> Loop 14 

### Ranking functions of CR evalspeedpldi4bb5in(A,B,C,D) 
* RF of phase [11]: [-A+B+1,B]
* RF of phase [12]: [B]

#### Partial ranking functions of CR evalspeedpldi4bb5in(A,B,C,D) 
* Partial RF of phase [11]:
  - RF of loop [11:1]:
    -A+B+1
    B
* Partial RF of phase [12]:
  - RF of loop [12:1]:
    B


### Specialization of cost equations evalspeedpldi4bb5in_loop_cont/4 
* CE 10 is refined into CE [15] 
* CE 9 is refined into CE [16] 


### Cost equations --> "Loop" of evalspeedpldi4bb5in_loop_cont/4 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 

### Ranking functions of CR evalspeedpldi4bb5in_loop_cont(A,B,C,D) 

#### Partial ranking functions of CR evalspeedpldi4bb5in_loop_cont(A,B,C,D) 


### Specialization of cost equations evalspeedpldi4entryin/3 
* CE 3 is refined into CE [17] 
* CE 4 is refined into CE [18,19,20,21,22] 
* CE 2 is refined into CE [23] 


### Cost equations --> "Loop" of evalspeedpldi4entryin/3 
* CEs [17] --> Loop 17 
* CEs [19,22] --> Loop 18 
* CEs [18,20,21] --> Loop 19 
* CEs [23] --> Loop 20 

### Ranking functions of CR evalspeedpldi4entryin(A,B,C) 

#### Partial ranking functions of CR evalspeedpldi4entryin(A,B,C) 


### Specialization of cost equations evalspeedpldi4start/3 
* CE 1 is refined into CE [24,25,26,27] 


### Cost equations --> "Loop" of evalspeedpldi4start/3 
* CEs [27] --> Loop 21 
* CEs [26] --> Loop 22 
* CEs [25] --> Loop 23 
* CEs [24] --> Loop 24 

### Ranking functions of CR evalspeedpldi4start(A,B,C) 

#### Partial ranking functions of CR evalspeedpldi4start(A,B,C) 


Computing Bounds
=====================================

#### Cost of chains of evalspeedpldi4bb5in(A,B,C,D):
* Chain [[11],[12],14]: 1*it(11)+1*it(12)+0
  Such that:it(12) =< -A+B
it(11) =< -A+B+1
it(12) =< A

  with precondition: [C=2,D=0,A>=2,B>=A+1] 

* Chain [[11],[12],13]: 1*it(11)+1*it(12)+0
  Such that:it(12) =< -A+B
it(11) =< -A+B+1
it(12) =< A

  with precondition: [C=3,A>=2,B>=A+1] 

* Chain [[11],14]: 1*it(11)+0
  Such that:it(11) =< -A+B+1

  with precondition: [C=2,D=0,A>=1,B>=A] 

* Chain [[11],13]: 1*it(11)+0
  Such that:it(11) =< -A+B+1

  with precondition: [C=3,A>=1,B>=A] 

* Chain [13]: 0
  with precondition: [C=3,A>=1] 


#### Cost of chains of evalspeedpldi4bb5in_loop_cont(A,B,C,D):
* Chain [16]: 0
  with precondition: [A=2,B>=1] 

* Chain [15]: 0
  with precondition: [A=3,B>=1] 


#### Cost of chains of evalspeedpldi4entryin(A,B,C):
* Chain [20]: 0
  with precondition: [0>=A] 

* Chain [19]: 2*s(1)+0
  Such that:aux(1) =< -A+B+1
s(1) =< aux(1)

  with precondition: [A>=1,B>=A+1] 

* Chain [18]: 2*s(3)+2*s(4)+0
  Such that:aux(2) =< -A+B
aux(3) =< -A+B+1
aux(4) =< A
s(3) =< aux(2)
s(4) =< aux(3)
s(3) =< aux(4)

  with precondition: [A>=2,B>=A+1] 

* Chain [17]: 0
  with precondition: [A>=B] 


#### Cost of chains of evalspeedpldi4start(A,B,C):
* Chain [24]: 0
  with precondition: [0>=A] 

* Chain [23]: 2*s(8)+0
  Such that:s(7) =< -A+B+1
s(8) =< s(7)

  with precondition: [A>=1,B>=A+1] 

* Chain [22]: 2*s(12)+2*s(13)+0
  Such that:s(9) =< -A+B
s(10) =< -A+B+1
s(11) =< A
s(12) =< s(9)
s(13) =< s(10)
s(12) =< s(11)

  with precondition: [A>=2,B>=A+1] 

* Chain [21]: 0
  with precondition: [A>=B] 


Closed-form bounds of evalspeedpldi4start(A,B,C): 
-------------------------------------
* Chain [24] with precondition: [0>=A] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [23] with precondition: [A>=1,B>=A+1] 
    - Upper bound: -2*A+2*B+2 
    - Complexity: n 
* Chain [22] with precondition: [A>=2,B>=A+1] 
    - Upper bound: -4*A+4*B+2 
    - Complexity: n 
* Chain [21] with precondition: [A>=B] 
    - Upper bound: 0 
    - Complexity: constant 

### Maximum cost of evalspeedpldi4start(A,B,C): nat(-A+B+1)*2+nat(-A+B)*2 
Asymptotic class: n 
* Total analysis performed in 65 ms.

