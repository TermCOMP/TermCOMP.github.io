MAYBE

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalEx3bb1in/6,evalEx3bb2in/6,evalEx3bb3in/6]
1. recursive  : [evalEx3bb2in_loop_cont/8,evalEx3bb4in/7,evalEx3bbin/7]
2. non_recursive  : [evalEx3stop/4]
3. non_recursive  : [evalEx3returnin/4]
4. non_recursive  : [exit_location/1]
5. non_recursive  : [evalEx3bb4in_loop_cont/5]
6. non_recursive  : [evalEx3entryin/4]
7. non_recursive  : [evalEx3start/4]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalEx3bb2in/6
1. SCC is partially evaluated into evalEx3bb4in/7
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is partially evaluated into evalEx3bb4in_loop_cont/5
6. SCC is partially evaluated into evalEx3entryin/4
7. SCC is partially evaluated into evalEx3start/4

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalEx3bb2in/6 
* CE 12 is refined into CE [13] 
* CE 9 is refined into CE [14] 
* CE 11 is refined into CE [15] 
* CE 10 is refined into CE [16] 


### Cost equations --> "Loop" of evalEx3bb2in/6 
* CEs [16] --> Loop 13 
* CEs [13] --> Loop 14 
* CEs [14] --> Loop 15 
* CEs [15] --> Loop 16 

### Ranking functions of CR evalEx3bb2in(A,B,C,E,F,G) 
* RF of phase [13]: [C]

#### Partial ranking functions of CR evalEx3bb2in(A,B,C,E,F,G) 
* Partial RF of phase [13]:
  - RF of loop [13:1]:
    C


### Specialization of cost equations evalEx3bb4in/7 
* CE 5 is refined into CE [17] 
* CE 3 is refined into CE [18,19] 
* CE 6 is refined into CE [20] 
* CE 4 is refined into CE [21,22,23] 


### Cost equations --> "Loop" of evalEx3bb4in/7 
* CEs [23] --> Loop 17 
* CEs [22] --> Loop 18 
* CEs [21] --> Loop 19 
* CEs [17] --> Loop 20 
* CEs [18,19] --> Loop 21 
* CEs [20] --> Loop 22 

### Ranking functions of CR evalEx3bb4in(A,B,C,E,F,G,H) 

#### Partial ranking functions of CR evalEx3bb4in(A,B,C,E,F,G,H) 
* Partial RF of phase [17,18]:
  - RF of loop [17:1]:
    A-1


### Specialization of cost equations evalEx3bb4in_loop_cont/5 
* CE 7 is refined into CE [24] 
* CE 8 is refined into CE [25] 


### Cost equations --> "Loop" of evalEx3bb4in_loop_cont/5 
* CEs [24] --> Loop 23 
* CEs [25] --> Loop 24 

### Ranking functions of CR evalEx3bb4in_loop_cont(A,B,C,D,E) 

#### Partial ranking functions of CR evalEx3bb4in_loop_cont(A,B,C,D,E) 


### Specialization of cost equations evalEx3entryin/4 
* CE 2 is refined into CE [26,27,28,29,30,31] 


### Cost equations --> "Loop" of evalEx3entryin/4 
* CEs [30,31] --> Loop 25 
* CEs [27,28] --> Loop 26 
* CEs [29] --> Loop 27 
* CEs [26] --> Loop 28 

### Ranking functions of CR evalEx3entryin(A,B,C,E) 

#### Partial ranking functions of CR evalEx3entryin(A,B,C,E) 


### Specialization of cost equations evalEx3start/4 
* CE 1 is refined into CE [32,33,34,35] 


### Cost equations --> "Loop" of evalEx3start/4 
* CEs [35] --> Loop 29 
* CEs [34] --> Loop 30 
* CEs [33] --> Loop 31 
* CEs [32] --> Loop 32 

### Ranking functions of CR evalEx3start(A,B,C,E) 

#### Partial ranking functions of CR evalEx3start(A,B,C,E) 


Computing Bounds
=====================================

#### Cost of chains of evalEx3bb2in(A,B,C,E,F,G):
* Chain [[13],16]: 1*it(13)+0
  Such that:it(13) =< C

  with precondition: [E=2,F=0,G=0,C>=1,A>=C] 

* Chain [[13],15]: 1*it(13)+0
  Such that:it(13) =< C-F

  with precondition: [E=2,F=G,F>=1,A>=C,C>=F+1] 

* Chain [[13],14]: 1*it(13)+0
  Such that:it(13) =< C

  with precondition: [E=3,C>=1,A>=C] 

* Chain [15]: 0
  with precondition: [E=2,C=F,C=G,C>=1,A>=C] 

* Chain [14]: 0
  with precondition: [E=3,A>=1,A>=C] 


#### Cost of chains of evalEx3bb4in(A,B,C,E,F,G,H):
* Chain [[17,18]]...: 2*it(17)+1*it(18)+0
  Such that:aux(3) =< A
it(17) =< aux(3)

  with precondition: [A>=1] 

* Chain [[17,18],22]: 2*it(17)+1*it(18)+0
  Such that:aux(4) =< A
it(17) =< aux(4)

  with precondition: [E=3,A>=1] 

* Chain [[17,18],21]: 3*it(17)+1*it(18)+0
  Such that:aux(5) =< A
it(17) =< aux(5)

  with precondition: [E=3,A>=1] 

* Chain [[17,18],19,22]: 3*it(17)+1*it(18)+1
  Such that:aux(6) =< A
it(17) =< aux(6)

  with precondition: [E=3,A>=1] 

* Chain [[17,18],19,20]: 3*it(17)+1*it(18)+1
  Such that:aux(7) =< A
it(17) =< aux(7)

  with precondition: [E=4,F=0,H=0,A>=1] 

* Chain [22]: 0
  with precondition: [E=3] 

* Chain [21]: 1*s(4)+0
  Such that:s(4) =< A

  with precondition: [E=3,A>=1] 

* Chain [20]: 0
  with precondition: [E=4,G=B,H=C,A=F,0>=A] 

* Chain [19,22]: 1*s(5)+1
  Such that:s(5) =< A

  with precondition: [E=3,A>=1] 

* Chain [19,20]: 1*s(5)+1
  Such that:s(5) =< A

  with precondition: [E=4,F=0,H=0,A>=1] 


#### Cost of chains of evalEx3bb4in_loop_cont(A,B,C,D,E):
* Chain [24]: 0
  with precondition: [A=3] 

* Chain [23]: 0
  with precondition: [A=4] 


#### Cost of chains of evalEx3entryin(A,B,C,E):
* Chain [28]: 0
  with precondition: [] 

* Chain [27]: 0
  with precondition: [0>=A] 

* Chain [26]: 14*s(22)+4*s(23)+1
  Such that:aux(10) =< A
s(22) =< aux(10)

  with precondition: [A>=1] 

* Chain [25]...: 4*s(28)+2*s(29)+0
  Such that:aux(11) =< A
s(28) =< aux(11)

  with precondition: [A>=1] 


#### Cost of chains of evalEx3start(A,B,C,E):
* Chain [32]: 0
  with precondition: [] 

* Chain [31]: 0
  with precondition: [0>=A] 

* Chain [30]: 14*s(34)+4*s(35)+1
  Such that:s(33) =< A
s(34) =< s(33)

  with precondition: [A>=1] 

* Chain [29]...: 4*s(37)+2*s(38)+0
  Such that:s(36) =< A
s(37) =< s(36)

  with precondition: [A>=1] 


Closed-form bounds of evalEx3start(A,B,C,E): 
-------------------------------------
* Chain [32] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [31] with precondition: [0>=A] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [30] with precondition: [A>=1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [29]... with precondition: [A>=1] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of evalEx3start(A,B,C,E): inf 
Asymptotic class: infinity 
* Total analysis performed in 92 ms.

