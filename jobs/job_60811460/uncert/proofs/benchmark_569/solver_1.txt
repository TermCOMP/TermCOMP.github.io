WORST_CASE(?,O(1))

# LoAT Proof:
Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f23 -> 2

Rules:
   0: (99-it5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=0, i5'=1, i6'=it8, i7'=it7, i8'=it6
   1: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0, i5'=1, i6'=it11, i7'=it10, i8'=it9

Dependency graph:

Preprocessed Transitions

	Eliminated Temporary Variables

	Original rule:
	(99-it5 >= 0 /\ -1+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=0, i5'=1, i6'=it8, i7'=it7, i8'=it6
	New rule:
	(-1+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=0, i5'=1, i6'=it8, i7'=it7, i8'=it6

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f23 -> 2

Rules:
   1: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0, i5'=1, i6'=it11, i7'=it10, i8'=it9
   2: (-1+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=0, i5'=1, i6'=it8, i7'=it7, i8'=it6

Dependency graph:

Step with 2

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Backtrack

	Trace

	Blocked

	{2[T]}
	
Step with 1

	Trace

	1[(-1+i1 == 0)]
	
	Blocked

	{2[T]}
	{}
	
Backtrack

	Trace

	Blocked

	{1[T], 2[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃, X₄
  Temp_Vars:  F, G, H, I
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂, X₃, X₄) → l1(0, 1, G, H, I) :|: F ≤ 99
  t₁: l0(X₀, X₁, X₂, X₃, X₄) → l1(0, 1, G, H, I)


Preprocessing
  Eliminate variables [G; H; I; X₀; X₁; X₂; X₃; X₄] that do not contribute to the problem


Problem after Preprocessing
  Start:  l0
  Program_Vars:  
  Temp_Vars:  F
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₂: l0 → l1 :|: F ≤ 99
  t₃: l0 → l1


All Bounds
Timebounds
  Overall timebound:2 {O(1)}
    t₂: 1 {O(1)}
    t₃: 1 {O(1)}


Costbounds
  Overall costbound: 2 {O(1)}
    t₂: 1 {O(1)}
    t₃: 1 {O(1)}


Sizebounds

