WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalspeedpldi3bb2in/7,evalspeedpldi3bb3in/7,evalspeedpldi3bb4in/7,evalspeedpldi3bb5in/7]
1. non_recursive  : [evalspeedpldi3stop/5]
2. non_recursive  : [evalspeedpldi3returnin/5]
3. non_recursive  : [exit_location/1]
4. non_recursive  : [evalspeedpldi3bb5in_loop_cont/6]
5. non_recursive  : [evalspeedpldi3entryin/5]
6. non_recursive  : [evalspeedpldi3start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalspeedpldi3bb5in/7
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into evalspeedpldi3bb5in_loop_cont/6
5. SCC is partially evaluated into evalspeedpldi3entryin/5
6. SCC is partially evaluated into evalspeedpldi3start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalspeedpldi3bb5in/7 
* CE 8 is refined into CE [11] 
* CE 7 is refined into CE [12] 
* CE 5 is refined into CE [13] 
* CE 6 is refined into CE [14] 


### Cost equations --> "Loop" of evalspeedpldi3bb5in/7 
* CEs [13] --> Loop 11 
* CEs [14] --> Loop 12 
* CEs [11] --> Loop 13 
* CEs [12] --> Loop 14 

### Ranking functions of CR evalspeedpldi3bb5in(A,B,C,D,E,F,G) 

#### Partial ranking functions of CR evalspeedpldi3bb5in(A,B,C,D,E,F,G) 
* Partial RF of phase [11,12]:
  - RF of loop [11:1]:
    A-C depends on loops [12:1] 
    B-C-1 depends on loops [12:1] 
  - RF of loop [12:1]:
    -A+C+1 depends on loops [11:1] 
    B-D
    C depends on loops [11:1] 


### Specialization of cost equations evalspeedpldi3bb5in_loop_cont/6 
* CE 10 is refined into CE [15] 
* CE 9 is refined into CE [16] 


### Cost equations --> "Loop" of evalspeedpldi3bb5in_loop_cont/6 
* CEs [15] --> Loop 15 
* CEs [16] --> Loop 16 

### Ranking functions of CR evalspeedpldi3bb5in_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR evalspeedpldi3bb5in_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations evalspeedpldi3entryin/5 
* CE 3 is refined into CE [17] 
* CE 4 is refined into CE [18,19,20] 
* CE 2 is refined into CE [21] 


### Cost equations --> "Loop" of evalspeedpldi3entryin/5 
* CEs [17] --> Loop 17 
* CEs [18,19,20] --> Loop 18 
* CEs [21] --> Loop 19 

### Ranking functions of CR evalspeedpldi3entryin(A,B,C,D,E) 

#### Partial ranking functions of CR evalspeedpldi3entryin(A,B,C,D,E) 


### Specialization of cost equations evalspeedpldi3start/5 
* CE 1 is refined into CE [22,23,24] 


### Cost equations --> "Loop" of evalspeedpldi3start/5 
* CEs [24] --> Loop 20 
* CEs [23] --> Loop 21 
* CEs [22] --> Loop 22 

### Ranking functions of CR evalspeedpldi3start(A,B,C,D,E) 

#### Partial ranking functions of CR evalspeedpldi3start(A,B,C,D,E) 


Computing Bounds
=====================================

#### Cost of chains of evalspeedpldi3bb5in(A,B,C,D,E,F,G):
* Chain [[11,12],14]: 1*it(11)+1*it(12)+0
  Such that:aux(19) =< B
aux(4) =< B-C
it(12) =< B-D
aux(3) =< it(12)*aux(19)
it(11) =< aux(3)+aux(4)

  with precondition: [E=2,F=0,B=G,A>=1,C>=0,D>=0,B>=A+1,B>=D+1] 

* Chain [[11,12],13]: 1*it(11)+1*it(12)+0
  Such that:aux(19) =< B
aux(4) =< B-C
it(12) =< B-D
aux(3) =< it(12)*aux(19)
it(11) =< aux(3)+aux(4)

  with precondition: [E=3,A>=1,C>=0,D>=0,B>=A+1,B>=D+1] 

* Chain [13]: 0
  with precondition: [E=3,A>=1,C>=0,D>=0,B>=A+1] 


#### Cost of chains of evalspeedpldi3bb5in_loop_cont(A,B,C,D,E,F):
* Chain [16]: 0
  with precondition: [A=2,B>=1,C>=B+1] 

* Chain [15]: 0
  with precondition: [A=3,B>=1,C>=B+1] 


#### Cost of chains of evalspeedpldi3entryin(A,B,C,D,E):
* Chain [19]: 0
  with precondition: [0>=A] 

* Chain [18]: 2*s(3)+2*s(5)+0
  Such that:aux(24) =< B
s(3) =< aux(24)
s(4) =< s(3)*aux(24)
s(5) =< s(4)+aux(24)

  with precondition: [A>=1,B>=A+1] 

* Chain [17]: 0
  with precondition: [A>=B] 


#### Cost of chains of evalspeedpldi3start(A,B,C,D,E):
* Chain [22]: 0
  with precondition: [0>=A] 

* Chain [21]: 2*s(12)+2*s(14)+0
  Such that:s(11) =< B
s(12) =< s(11)
s(13) =< s(12)*s(11)
s(14) =< s(13)+s(11)

  with precondition: [A>=1,B>=A+1] 

* Chain [20]: 0
  with precondition: [A>=B] 


Closed-form bounds of evalspeedpldi3start(A,B,C,D,E): 
-------------------------------------
* Chain [22] with precondition: [0>=A] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [21] with precondition: [A>=1,B>=A+1] 
    - Upper bound: 2*B*B+4*B 
    - Complexity: n^2 
* Chain [20] with precondition: [A>=B] 
    - Upper bound: 0 
    - Complexity: constant 

### Maximum cost of evalspeedpldi3start(A,B,C,D,E): nat(B)*2*nat(B)+nat(B)*4 
Asymptotic class: n^2 
* Total analysis performed in 101 ms.

