WORST_CASE(?,O(1))

# LoAT Proof:
Initial ITS

Start location: f1

Location map:
LoAT_sink -> 0
f1 -> 1
f300 -> 2
f2 -> 3

Rules:
   0: (-2+i1 == 0 /\ -101+i4 >= 0 /\ 9-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-2+i1 == 0 /\ 100-i4 >= 0 /\ 9-i5 >= 0) /\ i1'=3, i3'=1+i3, i6'=0, i7'=0, i8'=0
   2: (-2+i1 == 0 /\ -10+i5 >= 0) /\ i1'=3, i3'=1+i3, i6'=0, i7'=0, i8'=0
   3: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=1000

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 2
3 -> 0, 3 -> 1, 3 -> 2

Refined Dependency Graph

	Removed the following edges: 0 -> 2, 3 -> 1

Start location: f1

Location map:
LoAT_sink -> 0
f1 -> 1
f300 -> 2
f2 -> 3

Rules:
   0: (-2+i1 == 0 /\ -101+i4 >= 0 /\ 9-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-2+i1 == 0 /\ 100-i4 >= 0 /\ 9-i5 >= 0) /\ i1'=3, i3'=1+i3, i6'=0, i7'=0, i8'=0
   2: (-2+i1 == 0 /\ -10+i5 >= 0) /\ i1'=3, i3'=1+i3, i6'=0, i7'=0, i8'=0
   3: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=1000

Dependency graph:
0 -> 0, 0 -> 1
3 -> 0, 3 -> 2

Step with 3

	Trace

	3[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	3[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ -10+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	3[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	
Step with 0

	Trace

	3[(-1+i1 == 0)]
	0[(-2+i1 == 0 /\ -101+i4 >= 0 /\ 9-i5 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -101+i4 >= 0 /\ 9-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
	New rule:
	(-1+it22 >= 0 /\ -100+i4-it22 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ 9-i5 >= 0) /\ i1'=i1, i3'=i3+it22, i4'=i4-it22

		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		-101+i4 >= 0 [0]: montonic decrease yields -100+i4-it22 >= 0
		
		9-i5 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, -101+i4 >= 0 -> -100+i4-it22 >= 0, 9-i5 >= 0 -> 9-i5 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+it22 >= 0 /\ -100+i4-it22 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ 9-i5 >= 0) /\ i1'=i1, i3'=i3+it22, i4'=i4-it22
	New rule:
	(-1+it22 >= 0 /\ -100+i4-it22 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ 9-i5 >= 0) /\ i3'=i3+it22, i4'=i4-it22
	
	Instantiation

	Original rule:
	(-1+it22 >= 0 /\ -100+i4-it22 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ 9-i5 >= 0) /\ i3'=i3+it22, i4'=i4-it22
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -101+i4 >= 0 /\ 9-i5 >= 0) /\ i3'=-100+i3+i4, i4'=100

Start location: f1

Location map:
LoAT_sink -> 0
f1 -> 1
f300 -> 2
f2 -> 3

Rules:
   0: (-2+i1 == 0 /\ -101+i4 >= 0 /\ 9-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-2+i1 == 0 /\ 100-i4 >= 0 /\ 9-i5 >= 0) /\ i1'=3, i3'=1+i3, i6'=0, i7'=0, i8'=0
   2: (-2+i1 == 0 /\ -10+i5 >= 0) /\ i1'=3, i3'=1+i3, i6'=0, i7'=0, i8'=0
   3: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=1000
   4: (0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -101+i4 >= 0 /\ 9-i5 >= 0) /\ i3'=-100+i3+i4, i4'=100

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 4
3 -> 0, 3 -> 2, 3 -> 4
4 -> 0, 4 -> 1

	Trace

	3[(-1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -101+i4 >= 0 /\ 9-i5 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{0[T], 4[T]}
	
Step with 1

	Trace

	3[(-1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -101+i4 >= 0 /\ 9-i5 >= 0)]
	1[(-2+i1 == 0 /\ 100-i4 >= 0 /\ 9-i5 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{0[T], 4[T]}
	{}
	
Backtrack

	Trace

	3[(-1+i1 == 0)]
	4[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -101+i4 >= 0 /\ 9-i5 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{0[T], 1[T], 4[T]}
	
Backtrack

	Trace

	3[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T], 4[T]}
	
Step with 0

	Trace

	3[(-1+i1 == 0)]
	0[(-2+i1 == 0 /\ -101+i4 >= 0 /\ 9-i5 >= 0)]
	
	Blocked

	{}
	{2[T], 4[T]}
	{}
	
Covered

	Trace

	3[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 2[T], 4[T]}
	
Backtrack

	Trace

	Blocked

	{3[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃, X₄
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₃: l0(X₀, X₁, X₂, X₃, X₄) → l1(1000, X₁, X₂, X₃, X₄)
  t₀: l1(X₀, X₁, X₂, X₃, X₄) → l1(X₀-1, X₁, X₂, X₃, X₄) :|: X₁ ≤ 9 ∧ 101 ≤ X₀
  t₁: l1(X₀, X₁, X₂, X₃, X₄) → l2(X₀, X₁, 0, 0, 0) :|: X₀ ≤ 100 ∧ X₁ ≤ 9
  t₂: l1(X₀, X₁, X₂, X₃, X₄) → l2(X₀, X₁, 0, 0, 0) :|: 10 ≤ X₁


Preprocessing
  Eliminate variables [X₂; X₃; X₄] that do not contribute to the problem


  Found invariant X₀ ≤ 1000 ∧ 100 ≤ X₀ for location l1


  Found invariant X₀ ≤ 1000 ∧ 100 ≤ X₀ for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₄: l0(X₀, X₁) → l1(1000, X₁)
  t₅: l1(X₀, X₁) → l1(X₀-1, X₁) :|: X₁ ≤ 9 ∧ 101 ≤ X₀ ∧ X₀ ≤ 1000 ∧ 100 ≤ X₀
  t₆: l1(X₀, X₁) → l2(X₀, X₁) :|: X₀ ≤ 100 ∧ X₁ ≤ 9 ∧ X₀ ≤ 1000 ∧ 100 ≤ X₀
  t₇: l1(X₀, X₁) → l2(X₀, X₁) :|: 10 ≤ X₁ ∧ X₀ ≤ 1000 ∧ 100 ≤ X₀


MPRF for transition t₅: l1(X₀, X₁) → l1(X₀-1, X₁) :|: X₁ ≤ 9 ∧ 101 ≤ X₀ ∧ X₀ ≤ 1000 ∧ 100 ≤ X₀ of depth 1:
  new bound:
    1000 {O(1)}

  MPRF:
    • l1: [X₀]




All Bounds
Timebounds
  Overall timebound:1003 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1000 {O(1)}
    t₆: 1 {O(1)}
    t₇: 1 {O(1)}


Costbounds
  Overall costbound: 1003 {O(1)}
    t₄: 1 {O(1)}
    t₅: 1000 {O(1)}
    t₆: 1 {O(1)}
    t₇: 1 {O(1)}


Sizebounds
    t₄, X₀: 1000 {O(1)}
    t₄, X₁: X₁ {O(n)}
    t₅, X₀: 999 {O(1)}
    t₅, X₁: X₁ {O(n)}
    t₆, X₀: 100 {O(1)}
    t₆, X₁: X₁ {O(n)}
    t₇, X₀: 1000 {O(1)}
    t₇, X₁: X₁ {O(n)}

