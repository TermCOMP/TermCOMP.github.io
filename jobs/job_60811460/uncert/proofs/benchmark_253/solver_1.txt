WORST_CASE(?,O(1))

# LoAT Proof:
Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f8 -> 2
f23 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0
   1: (-2+i1 == 0 /\ 3-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   2: (-2+i1 == 0 /\ 3-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=i4, i6'=1+i4, i7'=it2
   3: (-2+i1 == 0 /\ -4+i4 >= 0 /\ -1-it3 >= 0) /\ i1'=3, i3'=1+i3
   4: (-2+i1 == 0 /\ -4+i4 >= 0) /\ i1'=3, i3'=1+i3

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3, 0 -> 4
1 -> 1, 1 -> 2, 1 -> 3, 1 -> 4
2 -> 1, 2 -> 2, 2 -> 3, 2 -> 4

Preprocessed Transitions

	Eliminated Temporary Variables

	Original rule:
	(-2+i1 == 0 /\ -4+i4 >= 0 /\ -1-it3 >= 0) /\ i1'=3, i3'=1+i3
	New rule:
	(-2+i1 == 0 /\ -4+i4 >= 0) /\ i1'=3, i3'=1+i3

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f8 -> 2
f23 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0
   1: (-2+i1 == 0 /\ 3-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   2: (-2+i1 == 0 /\ 3-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=i4, i6'=1+i4, i7'=it2
   4: (-2+i1 == 0 /\ -4+i4 >= 0) /\ i1'=3, i3'=1+i3
   5: (-2+i1 == 0 /\ -4+i4 >= 0) /\ i1'=3, i3'=1+i3

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 4, 0 -> 5
1 -> 1, 1 -> 2, 1 -> 4, 1 -> 5
2 -> 1, 2 -> 2, 2 -> 4, 2 -> 5

Refined Dependency Graph

	Removed the following edges: 0 -> 4, 0 -> 5

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f8 -> 2
f23 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0
   1: (-2+i1 == 0 /\ 3-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   2: (-2+i1 == 0 /\ 3-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=i4, i6'=1+i4, i7'=it2
   4: (-2+i1 == 0 /\ -4+i4 >= 0) /\ i1'=3, i3'=1+i3
   5: (-2+i1 == 0 /\ -4+i4 >= 0) /\ i1'=3, i3'=1+i3

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2, 1 -> 4, 1 -> 5
2 -> 1, 2 -> 2, 2 -> 4, 2 -> 5

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ 3-i4 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ 3-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=i4, i6'=1+i4, i7'=it2
	New rule:
	(-2+i1 >= 0 /\ 3-i4 >= 0 /\ 4-it18-i4 >= 0 /\ 2-i1 >= 0 /\ -1+it18 >= 0) /\ i1'=i1, i3'=it18+i3, i4'=it18+i4, i5'=-1+it18+i4, i6'=it18+i4, i7'=it2

		-2+i1 >= 0 [0]: unchanged
		
		3-i4 >= 0 [0]: montonic decrease yields (3-i4 >= 0 /\ 4-it18-i4 >= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 3-i4 >= 0 -> (3-i4 >= 0 /\ 4-it18-i4 >= 0), 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ 3-i4 >= 0 /\ 4-it18-i4 >= 0 /\ 2-i1 >= 0 /\ -1+it18 >= 0) /\ i1'=i1, i3'=it18+i3, i4'=it18+i4, i5'=-1+it18+i4, i6'=it18+i4, i7'=it2
	New rule:
	(-2+i1 >= 0 /\ 3-i4 >= 0 /\ 4-it18-i4 >= 0 /\ 2-i1 >= 0 /\ -1+it18 >= 0) /\ i3'=it18+i3, i4'=it18+i4, i5'=-1+it18+i4, i6'=it18+i4, i7'=it2
	
	Instantiation

	Original rule:
	(-2+i1 >= 0 /\ 3-i4 >= 0 /\ 4-it18-i4 >= 0 /\ 2-i1 >= 0 /\ -1+it18 >= 0) /\ i3'=it18+i3, i4'=it18+i4, i5'=-1+it18+i4, i6'=it18+i4, i7'=it2
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ 3-i4 >= 0 /\ 2-i1 >= 0) /\ i3'=4+i3-i4, i4'=4, i5'=3, i6'=4, i7'=it2

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f8 -> 2
f23 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0
   1: (-2+i1 == 0 /\ 3-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   2: (-2+i1 == 0 /\ 3-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=i4, i6'=1+i4, i7'=it2
   4: (-2+i1 == 0 /\ -4+i4 >= 0) /\ i1'=3, i3'=1+i3
   5: (-2+i1 == 0 /\ -4+i4 >= 0) /\ i1'=3, i3'=1+i3
   6: (0 >= 0 /\ -2+i1 >= 0 /\ 3-i4 >= 0 /\ 2-i1 >= 0) /\ i3'=4+i3-i4, i4'=4, i5'=3, i6'=4, i7'=it2

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 6
1 -> 1, 1 -> 2, 1 -> 4, 1 -> 5, 1 -> 6
2 -> 1, 2 -> 2, 2 -> 4, 2 -> 5, 2 -> 6
6 -> 1, 6 -> 2, 6 -> 4, 6 -> 5

	Trace

	0[(-1+i1 == 0)]
	6[(0 >= 0 /\ -2+i1 >= 0 /\ 3-i4 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 6[T]}
	
Step with 5

	Trace

	0[(-1+i1 == 0)]
	6[(0 >= 0 /\ -2+i1 >= 0 /\ 3-i4 >= 0 /\ 2-i1 >= 0)]
	5[(-2+i1 == 0 /\ -4+i4 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 6[T]}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	6[(0 >= 0 /\ -2+i1 >= 0 /\ 3-i4 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 5[T], 6[T]}
	
Step with 4

	Trace

	0[(-1+i1 == 0)]
	6[(0 >= 0 /\ -2+i1 >= 0 /\ 3-i4 >= 0 /\ 2-i1 >= 0)]
	4[(-2+i1 == 0 /\ -4+i4 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 5[T], 6[T]}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	6[(0 >= 0 /\ -2+i1 >= 0 /\ 3-i4 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{2[T], 4[T], 5[T], 6[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{6[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ 3-i4 >= 0)]
	
	Blocked

	{}
	{6[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ 3-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
	New rule:
	(-2+i1 >= 0 /\ 4-i4-it44 >= 0 /\ -1+it44 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it44, i4'=i4+it44

		-2+i1 >= 0 [0]: unchanged
		
		3-i4 >= 0 [0]: montonic decrease yields 4-i4-it44 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 3-i4 >= 0 -> 4-i4-it44 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ 4-i4-it44 >= 0 /\ -1+it44 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it44, i4'=i4+it44
	New rule:
	(-2+i1 >= 0 /\ 4-i4-it44 >= 0 /\ -1+it44 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it44, i4'=i4+it44
	
	Instantiation

	Original rule:
	(-2+i1 >= 0 /\ 4-i4-it44 >= 0 /\ -1+it44 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it44, i4'=i4+it44
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ 3-i4 >= 0 /\ 2-i1 >= 0) /\ i3'=4+i3-i4, i4'=4

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f8 -> 2
f23 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0
   1: (-2+i1 == 0 /\ 3-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4
   2: (-2+i1 == 0 /\ 3-i4 >= 0) /\ i1'=2, i3'=1+i3, i4'=1+i4, i5'=i4, i6'=1+i4, i7'=it2
   4: (-2+i1 == 0 /\ -4+i4 >= 0) /\ i1'=3, i3'=1+i3
   5: (-2+i1 == 0 /\ -4+i4 >= 0) /\ i1'=3, i3'=1+i3
   6: (0 >= 0 /\ -2+i1 >= 0 /\ 3-i4 >= 0 /\ 2-i1 >= 0) /\ i3'=4+i3-i4, i4'=4, i5'=3, i6'=4, i7'=it2
   7: (0 >= 0 /\ -2+i1 >= 0 /\ 3-i4 >= 0 /\ 2-i1 >= 0) /\ i3'=4+i3-i4, i4'=4

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 6, 0 -> 7
1 -> 1, 1 -> 2, 1 -> 4, 1 -> 5, 1 -> 6, 1 -> 7
2 -> 1, 2 -> 2, 2 -> 4, 2 -> 5, 2 -> 6, 2 -> 7
6 -> 1, 6 -> 2, 6 -> 4, 6 -> 5, 6 -> 7
7 -> 1, 7 -> 2, 7 -> 4, 7 -> 5, 7 -> 6

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ -2+i1 >= 0 /\ 3-i4 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{6[T]}
	{1[T], 7[T]}
	
Step with 4

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ -2+i1 >= 0 /\ 3-i4 >= 0 /\ 2-i1 >= 0)]
	4[(-2+i1 == 0 /\ -4+i4 >= 0)]
	
	Blocked

	{}
	{6[T]}
	{1[T], 7[T]}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ -2+i1 >= 0 /\ 3-i4 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{6[T]}
	{1[T], 4[T], 7[T]}
	
Step with 5

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ -2+i1 >= 0 /\ 3-i4 >= 0 /\ 2-i1 >= 0)]
	5[(-2+i1 == 0 /\ -4+i4 >= 0)]
	
	Blocked

	{}
	{6[T]}
	{1[T], 4[T], 6[T], 7[T]}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	7[(0 >= 0 /\ -2+i1 >= 0 /\ 3-i4 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{6[T]}
	{1[T], 4[T], 5[T], 6[T], 7[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{6[T], 7[T]}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0 /\ 3-i4 >= 0)]
	
	Blocked

	{}
	{6[T], 7[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T], 6[T], 7[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ 3-i4 >= 0)]
	
	Blocked

	{}
	{2[T], 6[T], 7[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 2[T], 6[T], 7[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃
  Temp_Vars:  E
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂, X₃) → l1(0, X₁, X₂, X₃)
  t₁: l1(X₀, X₁, X₂, X₃) → l1(1+X₀, X₁, X₂, X₃) :|: X₀ ≤ 3
  t₂: l1(X₀, X₁, X₂, X₃) → l1(1+X₀, X₀, 1+X₀, E) :|: X₀ ≤ 3
  t₃: l1(X₀, X₁, X₂, X₃) → l2(X₀, X₁, X₂, X₃) :|: 1+E ≤ 0 ∧ 4 ≤ X₀
  t₄: l1(X₀, X₁, X₂, X₃) → l2(X₀, X₁, X₂, X₃) :|: 4 ≤ X₀


Preprocessing
  Eliminate variables [X₁; X₂; X₃] that do not contribute to the problem


  Found invariant X₀ ≤ 4 ∧ 0 ≤ X₀ for location l1


  Found invariant X₀ ≤ 4 ∧ 4 ≤ X₀ for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  E
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₅: l0(X₀) → l1(0)
  t₆: l1(X₀) → l1(1+X₀) :|: X₀ ≤ 3 ∧ X₀ ≤ 4 ∧ 0 ≤ X₀
  t₇: l1(X₀) → l1(1+X₀) :|: X₀ ≤ 3 ∧ X₀ ≤ 4 ∧ 0 ≤ X₀
  t₈: l1(X₀) → l2(X₀) :|: 1+E ≤ 0 ∧ 4 ≤ X₀ ∧ X₀ ≤ 4 ∧ 0 ≤ X₀
  t₉: l1(X₀) → l2(X₀) :|: 4 ≤ X₀ ∧ X₀ ≤ 4 ∧ 0 ≤ X₀


MPRF for transition t₆: l1(X₀) → l1(1+X₀) :|: X₀ ≤ 3 ∧ X₀ ≤ 4 ∧ 0 ≤ X₀ of depth 1:
  new bound:
    5 {O(1)}

  MPRF:
    • l1: [5-X₀]




MPRF for transition t₇: l1(X₀) → l1(1+X₀) :|: X₀ ≤ 3 ∧ X₀ ≤ 4 ∧ 0 ≤ X₀ of depth 1:
  new bound:
    5 {O(1)}

  MPRF:
    • l1: [5-X₀]




All Bounds
Timebounds
  Overall timebound:13 {O(1)}
    t₅: 1 {O(1)}
    t₆: 5 {O(1)}
    t₇: 5 {O(1)}
    t₈: 1 {O(1)}
    t₉: 1 {O(1)}


Costbounds
  Overall costbound: 13 {O(1)}
    t₅: 1 {O(1)}
    t₆: 5 {O(1)}
    t₇: 5 {O(1)}
    t₈: 1 {O(1)}
    t₉: 1 {O(1)}


Sizebounds
    t₅, X₀: 0 {O(1)}
    t₆, X₀: 4 {O(1)}
    t₇, X₀: 4 {O(1)}
    t₈, X₀: 4 {O(1)}
    t₉, X₀: 4 {O(1)}

