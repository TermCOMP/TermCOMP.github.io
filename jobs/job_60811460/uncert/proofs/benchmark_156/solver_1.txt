MAYBE

# LoAT Proof:
Initial ITS

Start location: f

Location map:
LoAT_sink -> 0
f -> 1
g -> 2
h -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=1, i5'=1
   1: (i6 > 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=i4+i5, i5'=i4+i5, i6'=-1+i6
   2: (i6 <= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3
   3: (-3+i1 == 0 /\ i5 > 0) /\ i1'=3, i3'=1+i3, i5'=-1+i5

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2
2 -> 3
3 -> 3

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	2[(i6 <= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	2[(i6 <= 0 /\ -2+i1 == 0)]
	3[(-3+i1 == 0 /\ i5 > 0)]
	
	Blocked

	{}
	{}
	{}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ i5 > 0) /\ i1'=3, i3'=1+i3, i5'=-1+i5
	New rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it16 >= 0 /\ 1-it16+i5 > 0) /\ i1'=i1, i3'=it16+i3, i5'=-it16+i5

		-3+i1 >= 0 [0]: unchanged
		
		3-i1 >= 0 [0]: unchanged
		
		i5 > 0 [0]: montonic decrease yields 1-it16+i5 > 0
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, 3-i1 >= 0 -> 3-i1 >= 0, i5 > 0 -> 1-it16+i5 > 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it16 >= 0 /\ 1-it16+i5 > 0) /\ i1'=i1, i3'=it16+i3, i5'=-it16+i5
	New rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it16 >= 0 /\ 1-it16+i5 > 0) /\ i3'=it16+i3, i5'=-it16+i5
	
	Instantiation

	Original rule:
	(-3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it16 >= 0 /\ 1-it16+i5 > 0) /\ i3'=it16+i3, i5'=-it16+i5
	New rule:
	(-3+i1 >= 0 /\ 1 > 0 /\ 3-i1 >= 0 /\ -1+i5 >= 0) /\ i3'=i3+i5, i5'=0

Start location: f

Location map:
LoAT_sink -> 0
f -> 1
g -> 2
h -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=1, i5'=1
   1: (i6 > 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=i4+i5, i5'=i4+i5, i6'=-1+i6
   2: (i6 <= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3
   3: (-3+i1 == 0 /\ i5 > 0) /\ i1'=3, i3'=1+i3, i5'=-1+i5
   4: (-3+i1 >= 0 /\ 1 > 0 /\ 3-i1 >= 0 /\ -1+i5 >= 0) /\ i3'=i3+i5, i5'=0

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2
2 -> 3, 2 -> 4
3 -> 3, 3 -> 4
4 -> 3

	Trace

	0[(-1+i1 == 0)]
	2[(i6 <= 0 /\ -2+i1 == 0)]
	4[(-3+i1 >= 0 /\ 1 > 0 /\ 3-i1 >= 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	{3[T], 4[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	2[(i6 <= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{}
	{4[T]}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	2[(i6 <= 0 /\ -2+i1 == 0)]
	3[(-3+i1 == 0 /\ i5 > 0)]
	
	Blocked

	{}
	{}
	{4[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	2[(i6 <= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{}
	{3[T], 4[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T]}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	2[(i6 <= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T]}
	{}
	
Step with 4

	Trace

	0[(-1+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	2[(i6 <= 0 /\ -2+i1 == 0)]
	4[(-3+i1 >= 0 /\ 1 > 0 /\ 3-i1 >= 0 /\ -1+i5 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T]}
	{}
	{4[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	2[(i6 <= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T]}
	{4[T]}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	2[(i6 <= 0 /\ -2+i1 == 0)]
	3[(-3+i1 == 0 /\ i5 > 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T]}
	{4[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	2[(i6 <= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T]}
	{3[T], 4[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T], 2[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 2[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(EXP))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l1(1, 1, X₂)
  t₁: l1(X₀, X₁, X₂) → l1(X₀+X₁, X₀+X₁, X₂-1) :|: 1 ≤ X₂
  t₂: l1(X₀, X₁, X₂) → l2(X₀, X₁, X₂) :|: X₂ ≤ 0
  t₃: l2(X₀, X₁, X₂) → l2(X₀, X₁-1, X₂) :|: 1 ≤ X₁


Preprocessing
  Found invariant 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ 1 ≤ X₀ for location l1


  Found invariant X₂ ≤ 0 ∧ X₂ ≤ X₁ ∧ 1+X₂ ≤ X₀ ∧ 0 ≤ X₁ ∧ 1 ≤ X₀+X₁ ∧ 1 ≤ X₀ for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l1(1, 1, X₂)
  t₁: l1(X₀, X₁, X₂) → l1(X₀+X₁, X₀+X₁, X₂-1) :|: 1 ≤ X₂ ∧ 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁
  t₂: l1(X₀, X₁, X₂) → l2(X₀, X₁, X₂) :|: X₂ ≤ 0 ∧ 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁
  t₃: l2(X₀, X₁, X₂) → l2(X₀, X₁-1, X₂) :|: 1 ≤ X₁ ∧ 1 ≤ X₀ ∧ 1 ≤ X₀+X₁ ∧ 1+X₂ ≤ X₀ ∧ 0 ≤ X₁ ∧ X₂ ≤ X₁ ∧ X₂ ≤ 0


MPRF for transition t₁: l1(X₀, X₁, X₂) → l1(X₀+X₁, X₀+X₁, X₂-1) :|: 1 ≤ X₂ ∧ 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ of depth 1:
  new bound:
    X₂ {O(n)}

  MPRF:
    • l1: [X₂]




MPRF for transition t₃: l2(X₀, X₁, X₂) → l2(X₀, X₁-1, X₂) :|: 1 ≤ X₁ ∧ 1 ≤ X₀ ∧ 1 ≤ X₀+X₁ ∧ 1+X₂ ≤ X₀ ∧ 0 ≤ X₁ ∧ X₂ ≤ X₁ ∧ X₂ ≤ 0 of depth 1:
  new bound:
    2⋅2^X₂+2 {O(EXP)}

  MPRF:
    • l2: [1+X₁]




  Found invariant X₂ ≤ 0 ∧ X₂ ≤ X₁ ∧ 1+X₂ ≤ X₀ ∧ 0 ≤ X₁ ∧ 1 ≤ X₀+X₁ ∧ 1 ≤ X₀ for location l2_v1


  Found invariant 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ 1 ≤ X₀ for location l1


  Found invariant X₂ ≤ 0 ∧ 1+X₂ ≤ X₁ ∧ 1+X₂ ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ 1 ≤ X₀ for location l2


All Bounds
Timebounds
  Overall timebound:2⋅2^X₂+X₂+4 {O(EXP)}
    t₀: 1 {O(1)}
    t₁: X₂ {O(n)}
    t₂: 1 {O(1)}
    t₃: 2⋅2^X₂+2 {O(EXP)}


Costbounds
  Overall costbound: 2⋅2^X₂+X₂+4 {O(EXP)}
    t₀: 1 {O(1)}
    t₁: X₂ {O(n)}
    t₂: 1 {O(1)}
    t₃: 2⋅2^X₂+2 {O(EXP)}


Sizebounds
    t₀, X₀: 1 {O(1)}
    t₀, X₁: 1 {O(1)}
    t₀, X₂: X₂ {O(n)}
    t₁, X₀: 2⋅2^X₂ {O(EXP)}
    t₁, X₁: 2⋅2^X₂ {O(EXP)}
    t₁, X₂: X₂ {O(n)}
    t₂, X₀: 2⋅2^X₂+1 {O(EXP)}
    t₂, X₁: 2⋅2^X₂+1 {O(EXP)}
    t₂, X₂: 2⋅X₂ {O(n)}
    t₃, X₀: 2⋅2^X₂+1 {O(EXP)}
    t₃, X₁: 2⋅2^X₂+1 {O(EXP)}
    t₃, X₂: 2⋅X₂ {O(n)}

