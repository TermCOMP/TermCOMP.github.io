WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: evalrandom1dstart

Location map:
LoAT_sink -> 0
evalrandom1dstart -> 1
evalrandom1dentryin -> 2
evalrandom1dbb5in -> 3
evalrandom1dreturnin -> 4
evalrandom1dbb1in -> 5
evalrandom1dstop -> 6

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3, i5'=1
   2: (-2+i1 == 0 /\ -i4 >= 0) /\ i1'=4, i3'=1+i3
   3: (-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=5, i3'=1+i3
   4: (-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=4, i3'=1+i3
   5: (-5+i1 == 0 /\ -1-it2 >= 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
   6: (-5+i1 == 0 /\ -1+it3 >= 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
   7: -5+i1 == 0 /\ i1'=3, i3'=1+i3, i5'=1+i5
   8: -4+i1 == 0 /\ i1'=6, i3'=1+i3

Dependency graph:
0 -> 1, 0 -> 2
1 -> 3, 1 -> 4
2 -> 8
3 -> 5, 3 -> 6, 3 -> 7
4 -> 8
5 -> 3, 5 -> 4
6 -> 3, 6 -> 4
7 -> 3, 7 -> 4

Chained Linear Paths

	Applied Chaining

	First rule:
	(-2+i1 == 0 /\ -i4 >= 0) /\ i1'=4, i3'=1+i3
	Second rule:
	-4+i1 == 0 /\ i1'=6, i3'=1+i3
	New rule:
	(0 == 0 /\ -2+i1 == 0 /\ -i4 >= 0) /\ i1'=6, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 2
	
	Applied Chaining

	First rule:
	(-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=4, i3'=1+i3
	Second rule:
	-4+i1 == 0 /\ i1'=6, i3'=1+i3
	New rule:
	(0 == 0 /\ -3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=6, i3'=2+i3
	
	Applied Deletion

	Removed the following rules: 4, 8

Start location: evalrandom1dstart

Location map:
LoAT_sink -> 0
evalrandom1dstart -> 1
evalrandom1dentryin -> 2
evalrandom1dbb5in -> 3
evalrandom1dreturnin -> 4
evalrandom1dbb1in -> 5
evalrandom1dstop -> 6

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3, i5'=1
   3: (-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=5, i3'=1+i3
   5: (-5+i1 == 0 /\ -1-it2 >= 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
   6: (-5+i1 == 0 /\ -1+it3 >= 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
   7: -5+i1 == 0 /\ i1'=3, i3'=1+i3, i5'=1+i5
   9: (0 == 0 /\ -2+i1 == 0 /\ -i4 >= 0) /\ i1'=6, i3'=2+i3
  10: (0 == 0 /\ -3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=6, i3'=2+i3

Dependency graph:
0 -> 1, 0 -> 9
1 -> 3, 1 -> 10
3 -> 5, 3 -> 6, 3 -> 7
5 -> 3, 5 -> 10
6 -> 3, 6 -> 10
7 -> 3, 7 -> 10

Preprocessed Transitions

	Eliminated Temporary Variables

	Original rule:
	(-5+i1 == 0 /\ -1-it2 >= 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
	New rule:
	(-5+i1 == 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
	
	Eliminated Temporary Variables

	Original rule:
	(-5+i1 == 0 /\ -1+it3 >= 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
	New rule:
	(-5+i1 == 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -2+i1 == 0 /\ -i4 >= 0) /\ i1'=6, i3'=2+i3
	New rule:
	(-2+i1 == 0 /\ -i4 >= 0) /\ i1'=6, i3'=2+i3
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=6, i3'=2+i3
	New rule:
	(-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=6, i3'=2+i3

Start location: evalrandom1dstart

Location map:
LoAT_sink -> 0
evalrandom1dstart -> 1
evalrandom1dentryin -> 2
evalrandom1dbb5in -> 3
evalrandom1dreturnin -> 4
evalrandom1dbb1in -> 5
evalrandom1dstop -> 6

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3, i5'=1
   3: (-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=5, i3'=1+i3
   7: -5+i1 == 0 /\ i1'=3, i3'=1+i3, i5'=1+i5
  11: (-5+i1 == 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
  12: (-5+i1 == 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
  13: (-2+i1 == 0 /\ -i4 >= 0) /\ i1'=6, i3'=2+i3
  14: (-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=6, i3'=2+i3

Dependency graph:
0 -> 1, 0 -> 13
1 -> 3, 1 -> 14
3 -> 7, 3 -> 11, 3 -> 12
7 -> 3, 7 -> 14
11 -> 3, 11 -> 14
12 -> 3, 12 -> 14

Refined Dependency Graph

	Removed the following edges: 1 -> 14

Start location: evalrandom1dstart

Location map:
LoAT_sink -> 0
evalrandom1dstart -> 1
evalrandom1dentryin -> 2
evalrandom1dbb5in -> 3
evalrandom1dreturnin -> 4
evalrandom1dbb1in -> 5
evalrandom1dstop -> 6

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3, i5'=1
   3: (-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=5, i3'=1+i3
   7: -5+i1 == 0 /\ i1'=3, i3'=1+i3, i5'=1+i5
  11: (-5+i1 == 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
  12: (-5+i1 == 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
  13: (-2+i1 == 0 /\ -i4 >= 0) /\ i1'=6, i3'=2+i3
  14: (-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=6, i3'=2+i3

Dependency graph:
0 -> 1, 0 -> 13
1 -> 3
3 -> 7, 3 -> 11, 3 -> 12
7 -> 3, 7 -> 14
11 -> 3, 11 -> 14
12 -> 3, 12 -> 14

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 13

	Trace

	0[(-1+i1 == 0)]
	13[(-2+i1 == 0 /\ -i4 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{13[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{13[T]}
	{}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	3[(-3+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{}
	{}
	
Step with 7

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	3[(-3+i1 == 0 /\ i4-i5 >= 0)]
	7[(-5+i1 == 0)]
	
	Blocked

	{}
	{13[T]}
	{}
	{}
	{}
	
Poly(n^1)

Accelerate

		Simplified Guard

		Original rule:
		(0 == 0 /\ -3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
		New rule:
		(-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=2+i3, i5'=1+i5

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
	New rule:
	(-3+i1 >= 0 /\ -1+it24 >= 0 /\ 3-i1 >= 0 /\ 1-it24+i4-i5 >= 0) /\ i1'=i1, i3'=i3+2*it24, i5'=it24+i5

		-3+i1 >= 0 [0]: unchanged
		
		i4-i5 >= 0 [0]: montonic decrease yields 1-it24+i4-i5 >= 0
		
		3-i1 >= 0 [0]: unchanged
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, i4-i5 >= 0 -> 1-it24+i4-i5 >= 0, 3-i1 >= 0 -> 3-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ -1+it24 >= 0 /\ 3-i1 >= 0 /\ 1-it24+i4-i5 >= 0) /\ i1'=i1, i3'=i3+2*it24, i5'=it24+i5
	New rule:
	(-3+i1 >= 0 /\ -1+it24 >= 0 /\ 3-i1 >= 0 /\ 1-it24+i4-i5 >= 0) /\ i3'=i3+2*it24, i5'=it24+i5
	
	Instantiation

	Original rule:
	(-3+i1 >= 0 /\ -1+it24 >= 0 /\ 3-i1 >= 0 /\ 1-it24+i4-i5 >= 0) /\ i3'=i3+2*it24, i5'=it24+i5
	New rule:
	(0 >= 0 /\ -3+i1 >= 0 /\ i4-i5 >= 0 /\ 3-i1 >= 0) /\ i3'=2+i3+2*i4-2*i5, i5'=1+i4

Start location: evalrandom1dstart

Location map:
LoAT_sink -> 0
evalrandom1dstart -> 1
evalrandom1dentryin -> 2
evalrandom1dbb5in -> 3
evalrandom1dreturnin -> 4
evalrandom1dbb1in -> 5
evalrandom1dstop -> 6

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3, i5'=1
   3: (-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=5, i3'=1+i3
   7: -5+i1 == 0 /\ i1'=3, i3'=1+i3, i5'=1+i5
  11: (-5+i1 == 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
  12: (-5+i1 == 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
  13: (-2+i1 == 0 /\ -i4 >= 0) /\ i1'=6, i3'=2+i3
  14: (-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=6, i3'=2+i3
  15: (0 >= 0 /\ -3+i1 >= 0 /\ i4-i5 >= 0 /\ 3-i1 >= 0) /\ i3'=2+i3+2*i4-2*i5, i5'=1+i4

Dependency graph:
0 -> 1, 0 -> 13
1 -> 3, 1 -> 15
3 -> 7, 3 -> 11, 3 -> 12
7 -> 3, 7 -> 14, 7 -> 15
11 -> 3, 11 -> 14, 11 -> 15
12 -> 3, 12 -> 14, 12 -> 15
15 -> 3, 15 -> 14

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	15[(0 >= 0 /\ -3+i1 >= 0 /\ i4-i5 >= 0 /\ 3-i1 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{}
	{15[T]}
	
Step with 14

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	15[(0 >= 0 /\ -3+i1 >= 0 /\ i4-i5 >= 0 /\ 3-i1 >= 0)]
	14[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{}
	{15[T]}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	15[(0 >= 0 /\ -3+i1 >= 0 /\ i4-i5 >= 0 /\ 3-i1 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{}
	{14[T], 15[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T]}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	3[(-3+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T]}
	{}
	
Step with 12

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	3[(-3+i1 == 0 /\ i4-i5 >= 0)]
	12[(-5+i1 == 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T]}
	{}
	{}
	
Accelerate

		Simplified Guard

		Original rule:
		(0 == 0 /\ -3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
		New rule:
		(-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=2+i3, i5'=1+i5

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
	New rule:
	(1+i4-it47-i5 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it47 >= 0) /\ i1'=i1, i3'=i3+2*it47, i5'=it47+i5

		-3+i1 >= 0 [0]: unchanged
		
		i4-i5 >= 0 [0]: montonic decrease yields 1+i4-it47-i5 >= 0
		
		3-i1 >= 0 [0]: unchanged
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, i4-i5 >= 0 -> 1+i4-it47-i5 >= 0, 3-i1 >= 0 -> 3-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(1+i4-it47-i5 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it47 >= 0) /\ i1'=i1, i3'=i3+2*it47, i5'=it47+i5
	New rule:
	(1+i4-it47-i5 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it47 >= 0) /\ i3'=i3+2*it47, i5'=it47+i5
	
	Instantiation

	Original rule:
	(1+i4-it47-i5 >= 0 /\ -3+i1 >= 0 /\ 3-i1 >= 0 /\ -1+it47 >= 0) /\ i3'=i3+2*it47, i5'=it47+i5
	New rule:
	(0 >= 0 /\ -3+i1 >= 0 /\ i4-i5 >= 0 /\ 3-i1 >= 0) /\ i3'=2+i3+2*i4-2*i5, i5'=1+i4

Start location: evalrandom1dstart

Location map:
LoAT_sink -> 0
evalrandom1dstart -> 1
evalrandom1dentryin -> 2
evalrandom1dbb5in -> 3
evalrandom1dreturnin -> 4
evalrandom1dbb1in -> 5
evalrandom1dstop -> 6

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3, i5'=1
   3: (-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=5, i3'=1+i3
   7: -5+i1 == 0 /\ i1'=3, i3'=1+i3, i5'=1+i5
  11: (-5+i1 == 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
  12: (-5+i1 == 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
  13: (-2+i1 == 0 /\ -i4 >= 0) /\ i1'=6, i3'=2+i3
  14: (-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=6, i3'=2+i3
  15: (0 >= 0 /\ -3+i1 >= 0 /\ i4-i5 >= 0 /\ 3-i1 >= 0) /\ i3'=2+i3+2*i4-2*i5, i5'=1+i4
  16: (0 >= 0 /\ -3+i1 >= 0 /\ i4-i5 >= 0 /\ 3-i1 >= 0) /\ i3'=2+i3+2*i4-2*i5, i5'=1+i4

Dependency graph:
0 -> 1, 0 -> 13
1 -> 3, 1 -> 15, 1 -> 16
3 -> 7, 3 -> 11, 3 -> 12
7 -> 3, 7 -> 14, 7 -> 15, 7 -> 16
11 -> 3, 11 -> 14, 11 -> 15, 11 -> 16
12 -> 3, 12 -> 14, 12 -> 15, 12 -> 16
15 -> 3, 15 -> 14, 15 -> 16
16 -> 3, 16 -> 14, 16 -> 15

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	16[(0 >= 0 /\ -3+i1 >= 0 /\ i4-i5 >= 0 /\ 3-i1 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T]}
	{16[T]}
	
Step with 14

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	16[(0 >= 0 /\ -3+i1 >= 0 /\ i4-i5 >= 0 /\ 3-i1 >= 0)]
	14[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T]}
	{3[T], 15[T], 16[T]}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	16[(0 >= 0 /\ -3+i1 >= 0 /\ i4-i5 >= 0 /\ 3-i1 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T]}
	{3[T], 14[T], 15[T], 16[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T], 16[T]}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	3[(-3+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T], 16[T]}
	{}
	
Step with 11

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	3[(-3+i1 == 0 /\ i4-i5 >= 0)]
	11[(-5+i1 == 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T], 16[T]}
	{}
	{}
	
Accelerate

		Simplified Guard

		Original rule:
		(0 == 0 /\ -3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
		New rule:
		(-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=2+i3, i5'=1+i5

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=3, i3'=2+i3, i5'=1+i5
	New rule:
	(-3+i1 >= 0 /\ 1+i4-it64-i5 >= 0 /\ 3-i1 >= 0 /\ -1+it64 >= 0) /\ i1'=i1, i3'=i3+2*it64, i5'=it64+i5

		-3+i1 >= 0 [0]: unchanged
		
		i4-i5 >= 0 [0]: montonic decrease yields 1+i4-it64-i5 >= 0
		
		3-i1 >= 0 [0]: unchanged
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, i4-i5 >= 0 -> 1+i4-it64-i5 >= 0, 3-i1 >= 0 -> 3-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ 1+i4-it64-i5 >= 0 /\ 3-i1 >= 0 /\ -1+it64 >= 0) /\ i1'=i1, i3'=i3+2*it64, i5'=it64+i5
	New rule:
	(-3+i1 >= 0 /\ 1+i4-it64-i5 >= 0 /\ 3-i1 >= 0 /\ -1+it64 >= 0) /\ i3'=i3+2*it64, i5'=it64+i5
	
	Instantiation

	Original rule:
	(-3+i1 >= 0 /\ 1+i4-it64-i5 >= 0 /\ 3-i1 >= 0 /\ -1+it64 >= 0) /\ i3'=i3+2*it64, i5'=it64+i5
	New rule:
	(0 >= 0 /\ -3+i1 >= 0 /\ i4-i5 >= 0 /\ 3-i1 >= 0) /\ i3'=2+i3+2*i4-2*i5, i5'=1+i4

Start location: evalrandom1dstart

Location map:
LoAT_sink -> 0
evalrandom1dstart -> 1
evalrandom1dentryin -> 2
evalrandom1dbb5in -> 3
evalrandom1dreturnin -> 4
evalrandom1dbb1in -> 5
evalrandom1dstop -> 6

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (-1+i4 >= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3, i5'=1
   3: (-3+i1 == 0 /\ i4-i5 >= 0) /\ i1'=5, i3'=1+i3
   7: -5+i1 == 0 /\ i1'=3, i3'=1+i3, i5'=1+i5
  11: (-5+i1 == 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
  12: (-5+i1 == 0) /\ i1'=3, i3'=1+i3, i5'=1+i5
  13: (-2+i1 == 0 /\ -i4 >= 0) /\ i1'=6, i3'=2+i3
  14: (-3+i1 == 0 /\ -1-i4+i5 >= 0) /\ i1'=6, i3'=2+i3
  15: (0 >= 0 /\ -3+i1 >= 0 /\ i4-i5 >= 0 /\ 3-i1 >= 0) /\ i3'=2+i3+2*i4-2*i5, i5'=1+i4
  16: (0 >= 0 /\ -3+i1 >= 0 /\ i4-i5 >= 0 /\ 3-i1 >= 0) /\ i3'=2+i3+2*i4-2*i5, i5'=1+i4
  17: (0 >= 0 /\ -3+i1 >= 0 /\ i4-i5 >= 0 /\ 3-i1 >= 0) /\ i3'=2+i3+2*i4-2*i5, i5'=1+i4

Dependency graph:
0 -> 1, 0 -> 13
1 -> 3, 1 -> 15, 1 -> 16, 1 -> 17
3 -> 7, 3 -> 11, 3 -> 12
7 -> 3, 7 -> 14, 7 -> 15, 7 -> 16, 7 -> 17
11 -> 3, 11 -> 14, 11 -> 15, 11 -> 16, 11 -> 17
12 -> 3, 12 -> 14, 12 -> 15, 12 -> 16, 12 -> 17
15 -> 3, 15 -> 14, 15 -> 16, 15 -> 17
16 -> 3, 16 -> 14, 16 -> 15, 16 -> 17
17 -> 3, 17 -> 14, 17 -> 15, 17 -> 16

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	17[(0 >= 0 /\ -3+i1 >= 0 /\ i4-i5 >= 0 /\ 3-i1 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T], 16[T]}
	{17[T]}
	
Step with 14

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	17[(0 >= 0 /\ -3+i1 >= 0 /\ i4-i5 >= 0 /\ 3-i1 >= 0)]
	14[(-3+i1 == 0 /\ -1-i4+i5 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T], 16[T]}
	{3[T], 15[T], 16[T], 17[T]}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	17[(0 >= 0 /\ -3+i1 >= 0 /\ i4-i5 >= 0 /\ 3-i1 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T], 16[T]}
	{3[T], 14[T], 15[T], 16[T], 17[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T], 16[T], 17[T]}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	3[(-3+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T], 16[T], 17[T]}
	{}
	
Step with 12

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	3[(-3+i1 == 0 /\ i4-i5 >= 0)]
	12[(-5+i1 == 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T], 16[T], 17[T]}
	{}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	3[(-3+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T], 16[T], 17[T]}
	{12[T]}
	
Step with 11

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	3[(-3+i1 == 0 /\ i4-i5 >= 0)]
	11[(-5+i1 == 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T], 16[T], 17[T]}
	{12[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	3[(-3+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T], 16[T], 17[T]}
	{11[T], 12[T]}
	
Step with 7

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	3[(-3+i1 == 0 /\ i4-i5 >= 0)]
	7[(-5+i1 == 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T], 16[T], 17[T]}
	{11[T], 12[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	3[(-3+i1 == 0 /\ i4-i5 >= 0)]
	
	Blocked

	{}
	{13[T]}
	{15[T], 16[T], 17[T]}
	{7[T], 11[T], 12[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	1[(-1+i4 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{13[T]}
	{3[T], 15[T], 16[T], 17[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 13[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  C
  Locations:  l0, l1, l2, l3, l4, l5
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l4(X₀, X₁)
  t₃: l1(X₀, X₁) → l2(X₀, X₁) :|: X₁ ≤ X₀
  t₄: l1(X₀, X₁) → l3(X₀, X₁) :|: 1+X₀ ≤ X₁
  t₅: l2(X₀, X₁) → l1(X₀, 1+X₁) :|: 1+C ≤ 0
  t₆: l2(X₀, X₁) → l1(X₀, 1+X₁) :|: 1 ≤ C
  t₇: l2(X₀, X₁) → l1(X₀, 1+X₁)
  t₈: l3(X₀, X₁) → l5(X₀, X₁)
  t₁: l4(X₀, X₁) → l1(X₀, 1) :|: 1 ≤ X₀
  t₂: l4(X₀, X₁) → l3(X₀, X₁) :|: X₀ ≤ 0


Preprocessing
  Found invariant X₁ ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ 1 ≤ X₀ for location l2


  Found invariant X₁ ≤ 1+X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ 1 ≤ X₀ for location l1


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  C
  Locations:  l0, l1, l2, l3, l4, l5
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l4(X₀, X₁)
  t₃: l1(X₀, X₁) → l2(X₀, X₁) :|: X₁ ≤ X₀ ∧ X₁ ≤ 1+X₀ ∧ 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁
  t₄: l1(X₀, X₁) → l3(X₀, X₁) :|: 1+X₀ ≤ X₁ ∧ X₁ ≤ 1+X₀ ∧ 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁
  t₅: l2(X₀, X₁) → l1(X₀, 1+X₁) :|: 1+C ≤ 0 ∧ 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ X₁ ≤ X₀
  t₆: l2(X₀, X₁) → l1(X₀, 1+X₁) :|: 1 ≤ C ∧ 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ X₁ ≤ X₀
  t₇: l2(X₀, X₁) → l1(X₀, 1+X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ X₁ ≤ X₀
  t₈: l3(X₀, X₁) → l5(X₀, X₁)
  t₁: l4(X₀, X₁) → l1(X₀, 1) :|: 1 ≤ X₀
  t₂: l4(X₀, X₁) → l3(X₀, X₁) :|: X₀ ≤ 0


MPRF for transition t₃: l1(X₀, X₁) → l2(X₀, X₁) :|: X₁ ≤ X₀ ∧ X₁ ≤ 1+X₀ ∧ 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ of depth 1:
  new bound:
    X₀+2 {O(n)}

  MPRF:
    • l1: [1+X₀-X₁]
    • l2: [X₀-X₁]




MPRF for transition t₅: l2(X₀, X₁) → l1(X₀, 1+X₁) :|: 1+C ≤ 0 ∧ 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ X₁ ≤ X₀ of depth 1:
  new bound:
    X₀+2 {O(n)}

  MPRF:
    • l1: [1+X₀-X₁]
    • l2: [1+X₀-X₁]




MPRF for transition t₆: l2(X₀, X₁) → l1(X₀, 1+X₁) :|: 1 ≤ C ∧ 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ X₁ ≤ X₀ of depth 1:
  new bound:
    X₀+2 {O(n)}

  MPRF:
    • l1: [1+X₀-X₁]
    • l2: [1+X₀-X₁]




MPRF for transition t₇: l2(X₀, X₁) → l1(X₀, 1+X₁) :|: 1 ≤ X₀ ∧ 1 ≤ X₁ ∧ 2 ≤ X₀+X₁ ∧ X₁ ≤ X₀ of depth 1:
  new bound:
    X₀+2 {O(n)}

  MPRF:
    • l1: [1+X₀-X₁]
    • l2: [1+X₀-X₁]




All Bounds
Timebounds
  Overall timebound:4⋅X₀+13 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}
    t₃: X₀+2 {O(n)}
    t₄: 1 {O(1)}
    t₅: X₀+2 {O(n)}
    t₆: X₀+2 {O(n)}
    t₇: X₀+2 {O(n)}
    t₈: 1 {O(1)}


Costbounds
  Overall costbound: 4⋅X₀+13 {O(n)}
    t₀: 1 {O(1)}
    t₁: 1 {O(1)}
    t₂: 1 {O(1)}
    t₃: X₀+2 {O(n)}
    t₄: 1 {O(1)}
    t₅: X₀+2 {O(n)}
    t₆: X₀+2 {O(n)}
    t₇: X₀+2 {O(n)}
    t₈: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₁, X₀: X₀ {O(n)}
    t₁, X₁: 1 {O(1)}
    t₂, X₀: X₀ {O(n)}
    t₂, X₁: X₁ {O(n)}
    t₃, X₀: X₀ {O(n)}
    t₃, X₁: 3⋅X₀+7 {O(n)}
    t₄, X₀: 3⋅X₀ {O(n)}
    t₄, X₁: 9⋅X₀+21 {O(n)}
    t₅, X₀: X₀ {O(n)}
    t₅, X₁: 3⋅X₀+7 {O(n)}
    t₆, X₀: X₀ {O(n)}
    t₆, X₁: 3⋅X₀+7 {O(n)}
    t₇, X₀: X₀ {O(n)}
    t₇, X₁: 3⋅X₀+7 {O(n)}
    t₈, X₀: 4⋅X₀ {O(n)}
    t₈, X₁: 9⋅X₀+X₁+21 {O(n)}

