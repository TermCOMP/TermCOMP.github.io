WORST_CASE(?,O(1))

# LoAT Proof:
Initial ITS

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
f -> 2

Rules:
   0: (-2+i1 == 0 /\ -1-i4^2 >= 0) /\ i1'=2, i3'=1+i3
   1: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 0
1 -> 0

Refined Dependency Graph

	Removed the following edges: 0 -> 0, 1 -> 0

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
f -> 2

Rules:
   0: (-2+i1 == 0 /\ -1-i4^2 >= 0) /\ i1'=2, i3'=1+i3
   1: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:

Step with 1

	Trace

	1[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Backtrack

	Trace

	Blocked

	{1[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₁: l0(X₀) → l1(X₀)
  t₀: l1(X₀) → l1(X₀) :|: 1+(X₀)² ≤ 0


Preprocessing
Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₁: l0(X₀) → l1(X₀)
  t₀: l1(X₀) → l1(X₀) :|: 1+(X₀)² ≤ 0


TWN: t₀: l1→l1


  cycle: [t₀: l1→l1]
  original loop: (1+(X₀)² ≤ 0,(X₀) -> (X₀))
  transformed loop: (1+(X₀)² ≤ 0,(X₀) -> (X₀))
  loop: (1+(X₀)² ≤ 0,(X₀) -> (X₀))
  order: [X₀]
closed-form:  X₀: X₀

  Termination: true
  Formula: 
    1+(X₀)² ≤ 0



TWN - Lifting for [0: l1->l1] of 2 {O(1)}
relevant size-bounds w.r.t. t₁: l0→l1:
Runtime-bound of t₁: 1 {O(1)}
Results in: 2 {O(1)}
All Bounds
Timebounds
  Overall timebound:3 {O(1)}
    t₀: 2 {O(1)}
    t₁: 1 {O(1)}


Costbounds
  Overall costbound: 3 {O(1)}
    t₀: 2 {O(1)}
    t₁: 1 {O(1)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₁, X₀: X₀ {O(n)}

