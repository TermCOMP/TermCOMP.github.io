MAYBE

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [eval_counterex1a_11/16,eval_counterex1a_12/16,eval_counterex1a_15/16,eval_counterex1a_16/16,eval_counterex1a_bb1_in/16,eval_counterex1a_bb2_in/16,eval_counterex1a_bb3_in/16,eval_counterex1a_bb4_in/16]
1. non_recursive  : [eval_counterex1a_stop/12]
2. non_recursive  : [eval_counterex1a__critedge_in/12]
3. non_recursive  : [exit_location/1]
4. non_recursive  : [eval_counterex1a_bb1_in_loop_cont/13]
5. non_recursive  : [eval_counterex1a_9/12]
6. non_recursive  : [eval_counterex1a_8/12]
7. non_recursive  : [eval_counterex1a_7/12]
8. non_recursive  : [eval_counterex1a_6/12]
9. non_recursive  : [eval_counterex1a_5/12]
10. non_recursive  : [eval_counterex1a_4/12]
11. non_recursive  : [eval_counterex1a_3/12]
12. non_recursive  : [eval_counterex1a_2/12]
13. non_recursive  : [eval_counterex1a_1/12]
14. non_recursive  : [eval_counterex1a_0/12]
15. non_recursive  : [eval_counterex1a_bb0_in/12]
16. non_recursive  : [eval_counterex1a_start/12]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into eval_counterex1a_bb1_in/16
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into eval_counterex1a_bb1_in_loop_cont/13
5. SCC is partially evaluated into eval_counterex1a_9/12
6. SCC is completely evaluated into other SCCs
7. SCC is completely evaluated into other SCCs
8. SCC is completely evaluated into other SCCs
9. SCC is completely evaluated into other SCCs
10. SCC is completely evaluated into other SCCs
11. SCC is completely evaluated into other SCCs
12. SCC is completely evaluated into other SCCs
13. SCC is completely evaluated into other SCCs
14. SCC is completely evaluated into other SCCs
15. SCC is completely evaluated into other SCCs
16. SCC is partially evaluated into eval_counterex1a_start/12

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations eval_counterex1a_bb1_in/16 
* CE 12 is refined into CE [15] 
* CE 11 is refined into CE [16] 
* CE 10 is refined into CE [17] 
* CE 9 is refined into CE [18] 
* CE 8 is refined into CE [19] 
* CE 7 is refined into CE [20] 
* CE 6 is refined into CE [21] 
* CE 5 is refined into CE [22] 
* CE 3 is refined into CE [23] 
* CE 4 is refined into CE [24] 


### Cost equations --> "Loop" of eval_counterex1a_bb1_in/16 
* CEs [19] --> Loop 15 
* CEs [20] --> Loop 16 
* CEs [21] --> Loop 17 
* CEs [22] --> Loop 18 
* CEs [23] --> Loop 19 
* CEs [24] --> Loop 20 
* CEs [15] --> Loop 21 
* CEs [16] --> Loop 22 
* CEs [17] --> Loop 23 
* CEs [18] --> Loop 24 

### Ranking functions of CR eval_counterex1a_bb1_in(V__0,V__01,V__04,V_4,V_5,V_7,V_8,V_n,B,C,D,E,F,G,H,I) 
* RF of phase [16]: [V__04+1]

#### Partial ranking functions of CR eval_counterex1a_bb1_in(V__0,V__01,V__04,V_4,V_5,V_7,V_8,V_n,B,C,D,E,F,G,H,I) 
* Partial RF of phase [15,17,19,20]:
  - RF of loop [15:1,17:1]:
    V__04+1 depends on loops [19:1,20:1] 
  - RF of loop [17:1]:
    V__0 depends on loops [19:1] 
    V__01+1
  - RF of loop [19:1]:
    -V__0+1 depends on loops [17:1] 
  - RF of loop [19:1,20:1]:
    -V__04+V_n+1 depends on loops [15:1,17:1] 
* Partial RF of phase [16]:
  - RF of loop [16:1]:
    V__04+1


### Specialization of cost equations eval_counterex1a_bb1_in_loop_cont/13 
* CE 14 is refined into CE [25] 
* CE 13 is refined into CE [26] 


### Cost equations --> "Loop" of eval_counterex1a_bb1_in_loop_cont/13 
* CEs [25] --> Loop 25 
* CEs [26] --> Loop 26 

### Ranking functions of CR eval_counterex1a_bb1_in_loop_cont(A,B,C,D,E,F,G,H,I,J,K,L,M) 

#### Partial ranking functions of CR eval_counterex1a_bb1_in_loop_cont(A,B,C,D,E,F,G,H,I,J,K,L,M) 


### Specialization of cost equations eval_counterex1a_9/12 
* CE 2 is refined into CE [27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55] 


### Cost equations --> "Loop" of eval_counterex1a_9/12 
* CEs [54,55] --> Loop 27 
* CEs [52,53] --> Loop 28 
* CEs [50,51] --> Loop 29 
* CEs [39] --> Loop 30 
* CEs [32] --> Loop 31 
* CEs [37,43,49] --> Loop 32 
* CEs [38] --> Loop 33 
* CEs [40] --> Loop 34 
* CEs [31,36,42,48] --> Loop 35 
* CEs [30,35,41,47] --> Loop 36 
* CEs [33,46] --> Loop 37 
* CEs [34,45] --> Loop 38 
* CEs [29] --> Loop 39 
* CEs [28] --> Loop 40 
* CEs [27] --> Loop 41 
* CEs [44] --> Loop 42 

### Ranking functions of CR eval_counterex1a_9(V__0,V__01,V__04,V_4,V_5,V_7,V_8,V_b,V_n,V_x,V_y,B) 

#### Partial ranking functions of CR eval_counterex1a_9(V__0,V__01,V__04,V_4,V_5,V_7,V_8,V_b,V_n,V_x,V_y,B) 


### Specialization of cost equations eval_counterex1a_start/12 
* CE 1 is refined into CE [56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71] 


### Cost equations --> "Loop" of eval_counterex1a_start/12 
* CEs [71] --> Loop 43 
* CEs [70] --> Loop 44 
* CEs [69] --> Loop 45 
* CEs [68] --> Loop 46 
* CEs [67] --> Loop 47 
* CEs [66] --> Loop 48 
* CEs [65] --> Loop 49 
* CEs [64] --> Loop 50 
* CEs [63] --> Loop 51 
* CEs [62] --> Loop 52 
* CEs [61] --> Loop 53 
* CEs [60] --> Loop 54 
* CEs [59] --> Loop 55 
* CEs [58] --> Loop 56 
* CEs [57] --> Loop 57 
* CEs [56] --> Loop 58 

### Ranking functions of CR eval_counterex1a_start(V__0,V__01,V__04,V_4,V_5,V_7,V_8,V_b,V_n,V_x,V_y,B) 

#### Partial ranking functions of CR eval_counterex1a_start(V__0,V__01,V__04,V_4,V_5,V_7,V_8,V_b,V_n,V_x,V_y,B) 


Computing Bounds
=====================================

#### Cost of chains of eval_counterex1a_bb1_in(V__0,V__01,V__04,V_4,V_5,V_7,V_8,V_n,B,C,D,E,F,G,H,I):
* Chain [[16],23]: 1*it(16)+0
  Such that:it(16) =< V__04+1

  with precondition: [B=2,E+1=0,H+1=0,V__0=C,V__01=D,V_4=F,V_5=G,0>=V__0+1,0>=I,V__01>=0,V__04>=0,V_n>=V__04] 

* Chain [[16],21]: 1*it(16)+0
  Such that:it(16) =< V__04+1

  with precondition: [B=3,0>=V__0+1,V__01>=0,V__04>=0,V_n>=V__04] 

* Chain [[16],18,[15,17,19,20]]...: 3*it(15)+1*it(16)+1*it(17)+1
  Such that:aux(20) =< V__01
it(16) =< V__04
it(17) =< aux(20)

  with precondition: [0>=V__0+1,V__01>=1,V__04>=2,V_n>=V__04] 

* Chain [[16],18,[15,17,19,20],24]: 3*it(15)+1*it(16)+1*it(17)+1
  Such that:aux(21) =< V__01
it(16) =< V__04
it(17) =< aux(21)

  with precondition: [B=2,C=0,D+1=0,E=H,0>=V__0+1,V__01>=1,V__04>=2,E+1>=0,I>=1,V_n>=V__04,V_n>=E+1] 

* Chain [[16],18,[15,17,19,20],23]: 3*it(15)+1*it(16)+1*it(17)+1
  Such that:aux(14) =< V__01
aux(15) =< V__01-D
it(16) =< V__04
it(17) =< aux(14)
it(17) =< aux(15)

  with precondition: [B=2,E+1=0,H+1=0,0>=V__0+1,V__01>=1,V__04>=2,C>=0,D+1>=0,V_n>=V__04,V__01>=D+1,V__01+C>=D+2] 

* Chain [[16],18,[15,17,19,20],22]: 3*it(15)+1*it(16)+1*it(17)+1
  Such that:aux(14) =< V__01
aux(15) =< V__01-D
it(16) =< V__04
it(17) =< aux(14)
it(17) =< aux(15)

  with precondition: [B=2,V_n+1=E,V_n+1=F,0>=V__0+1,1>=C,V__04>=2,C>=0,D>=0,V_n>=V__04,V__01>=D+1] 

* Chain [[16],18,[15,17,19,20],21]: 3*it(15)+1*it(16)+1*it(17)+1
  Such that:aux(22) =< V__01
it(16) =< V__04
it(17) =< aux(22)

  with precondition: [B=3,0>=V__0+1,V__01>=1,V__04>=2,V_n>=V__04] 

* Chain [[16],18,24]: 1*it(16)+1
  Such that:it(16) =< V__04-E

  with precondition: [V__01=0,B=2,C=0,D+1=0,V_4=F,V_5=G,E=H,0>=V__0+1,E+1>=0,I>=1,V_n>=V__04,V__04>=E+2] 

* Chain [[16],18,23]: 1*it(16)+1
  Such that:it(16) =< V__04

  with precondition: [B=2,C=0,E+1=0,H+1=0,V__01=D+1,V_4=F,V_5=G,0>=V__0+1,V__01>=0,V__04>=1,I>=1,V_n>=V__04] 

* Chain [[16],18,21]: 1*it(16)+1
  Such that:it(16) =< V__04

  with precondition: [B=3,0>=V__0+1,V__01>=0,V__04>=1,V_n>=V__04] 

* Chain [[15,17,19,20]]...: 3*it(15)+1*it(17)+0
  Such that:aux(20) =< V__01+1
it(17) =< aux(20)

  with precondition: [V__0>=0,V_n>=V__04,V__04>=0,V__01>=0] 

* Chain [[15,17,19,20],24]: 3*it(15)+1*it(17)+0
  Such that:aux(21) =< V__01+1
it(17) =< aux(21)

  with precondition: [B=2,C=0,D+1=0,E=H,V__0>=0,V__01>=0,V__04>=0,E+1>=0,I>=1,V_n>=V__04,V_n>=E+1,V__0+V_n>=V__04+1] 

* Chain [[15,17,19,20],23]: 3*it(15)+1*it(17)+0
  Such that:aux(14) =< V__01+1
aux(15) =< V__01-D
it(17) =< aux(14)
it(17) =< aux(15)

  with precondition: [B=2,E+1=0,H+1=0,V__0>=0,V__01>=0,V__04>=0,C>=0,D+1>=0,V_n>=V__04,V__01>=D,V__01+C>=D+1] 

* Chain [[15,17,19,20],22]: 3*it(15)+1*it(17)+0
  Such that:aux(14) =< V__01+1
aux(15) =< V__01-D
it(17) =< aux(14)
it(17) =< aux(15)

  with precondition: [B=2,V_n+1=E,V_n+1=F,1>=C,V__0>=0,V__04>=0,C>=0,D>=0,V_n>=V__04,V__01>=D] 

* Chain [[15,17,19,20],21]: 3*it(15)+1*it(17)+0
  Such that:aux(22) =< V__01+1
it(17) =< aux(22)

  with precondition: [B=3,V__0>=0,V__01>=0,V__04>=0,V_n>=V__04] 

* Chain [24]: 0
  with precondition: [B=2,C=V__0,E=V__04,F=V_4,G=V_5,H=V_7,I=V_8,V__01=D,0>=V__01+1] 

* Chain [23]: 0
  with precondition: [B=2,C=V__0,D=V__01,F=V_4,G=V_5,H=V_7,I=V_8,V__04=E,0>=V__04+1] 

* Chain [22]: 0
  with precondition: [B=2,C=V__0,D=V__01,F=V_4,G=V_5,H=V_7,I=V_8,V__04=E,V__04>=V_n+1] 

* Chain [21]: 0
  with precondition: [B=3] 

* Chain [18,[15,17,19,20]]...: 3*it(15)+1*it(17)+1
  Such that:aux(20) =< V__01
it(17) =< aux(20)

  with precondition: [0>=V__0+1,V__01>=1,V__04>=1,V_n>=V__04] 

* Chain [18,[15,17,19,20],24]: 3*it(15)+1*it(17)+1
  Such that:aux(21) =< V__01
it(17) =< aux(21)

  with precondition: [B=2,C=0,D+1=0,E=H,0>=V__0+1,V__01>=1,V__04>=1,E+1>=0,I>=1,V_n>=V__04,V_n>=E+1] 

* Chain [18,[15,17,19,20],23]: 3*it(15)+1*it(17)+1
  Such that:aux(14) =< V__01
aux(15) =< V__01-D
it(17) =< aux(14)
it(17) =< aux(15)

  with precondition: [B=2,E+1=0,H+1=0,0>=V__0+1,V__01>=1,V__04>=1,C>=0,D+1>=0,V_n>=V__04,V__01>=D+1,V__01+C>=D+2] 

* Chain [18,[15,17,19,20],22]: 3*it(15)+1*it(17)+1
  Such that:aux(14) =< V__01
aux(15) =< V__01-D
it(17) =< aux(14)
it(17) =< aux(15)

  with precondition: [B=2,V_n+1=E,V_n+1=F,0>=V__0+1,1>=C,V__04>=1,C>=0,D>=0,V_n>=V__04,V__01>=D+1] 

* Chain [18,[15,17,19,20],21]: 3*it(15)+1*it(17)+1
  Such that:aux(22) =< V__01
it(17) =< aux(22)

  with precondition: [B=3,0>=V__0+1,V__01>=1,V__04>=1,V_n>=V__04] 

* Chain [18,24]: 1
  with precondition: [V__01=0,B=2,C=0,D+1=0,E+1=V__04,V_4=F,V_5=G,E=H,0>=V__0+1,E+1>=0,I>=1,V_n>=E+1] 

* Chain [18,23]: 1
  with precondition: [V__04=0,B=2,C=0,E+1=0,H+1=0,V__01=D+1,V_4=F,V_5=G,0>=V__0+1,V__01>=0,V_n>=0,I>=1] 

* Chain [18,21]: 1
  with precondition: [B=3,0>=V__0+1,V__01>=0,V__04>=0,V_n>=V__04] 


#### Cost of chains of eval_counterex1a_bb1_in_loop_cont(A,B,C,D,E,F,G,H,I,J,K,L,M):
* Chain [26]: 0
  with precondition: [A=2] 

* Chain [25]: 0
  with precondition: [A=3] 


#### Cost of chains of eval_counterex1a_9(V__0,V__01,V__04,V_4,V_5,V_7,V_8,V_b,V_n,V_x,V_y,B):
* Chain [42]: 0
  with precondition: [] 

* Chain [41]: 1
  with precondition: [V_x=0,0>=V_b+1,V_y>=0,V_n>=V_y] 

* Chain [40]: 1*s(2)+1
  Such that:s(2) =< V_y+1

  with precondition: [V_x=0,0>=V_b+1,V_y>=1,V_n>=V_y] 

* Chain [39]: 1
  with precondition: [V_y=0,0>=V_b+1,V_n>=0,V_x>=0] 

* Chain [38]: 2*s(3)+1
  Such that:aux(23) =< V_y+1
s(3) =< aux(23)

  with precondition: [0>=V_b+1,V_x>=0,V_y>=0,V_n>=V_y] 

* Chain [37]: 2*s(5)+1
  Such that:aux(24) =< V_y
s(5) =< aux(24)

  with precondition: [0>=V_b+1,V_x>=0,V_y>=1,V_n>=V_y] 

* Chain [36]: 3*s(8)+12*s(9)+1*s(12)+1
  Such that:s(11) =< V_x+1
aux(26) =< V_x
s(8) =< aux(26)
s(12) =< aux(26)
s(12) =< s(11)

  with precondition: [0>=V_b+1,V_x>=1,V_y>=1,V_n>=V_y] 

* Chain [35]: 4*s(22)+3*s(23)+12*s(24)+1*s(28)+1
  Such that:s(26) =< V_x+1
aux(28) =< V_x
aux(29) =< V_y
s(22) =< aux(29)
s(23) =< aux(28)
s(28) =< aux(28)
s(28) =< s(26)

  with precondition: [0>=V_b+1,V_x>=1,V_y>=2,V_n>=V_y] 

* Chain [34]: 0
  with precondition: [0>=V_x+1] 

* Chain [33]: 0
  with precondition: [0>=V_y+1] 

* Chain [32]: 2*s(41)+9*s(42)+1*s(45)+0
  Such that:s(44) =< V_x
aux(31) =< V_x+1
s(45) =< aux(31)
s(45) =< s(44)
s(41) =< aux(31)

  with precondition: [V_b>=0,V_x>=0,V_y>=0,V_n>=V_y] 

* Chain [31]: 1*s(51)+3*s(52)+0
  Such that:s(50) =< V_x+1
s(51) =< s(50)

  with precondition: [V_b>=0,V_x>=0,V_y>=0,V_n>=V_y,V_b+V_n>=V_y+1] 

* Chain [30]: 0
  with precondition: [V_y>=V_n+1] 

* Chain [29]...: 2*s(54)+6*s(55)+1
  Such that:aux(32) =< V_x
s(54) =< aux(32)

  with precondition: [0>=V_b+1,V_x>=1,V_y>=1,V_n>=V_y] 

* Chain [28]...: 2*s(60)+2*s(61)+6*s(62)+1
  Such that:aux(33) =< V_x
aux(34) =< V_y
s(60) =< aux(34)
s(61) =< aux(33)

  with precondition: [0>=V_b+1,V_x>=1,V_y>=2,V_n>=V_y] 

* Chain [27]...: 2*s(68)+6*s(69)+0
  Such that:aux(35) =< V_x+1
s(68) =< aux(35)

  with precondition: [V_b>=0,V_x>=0,V_y>=0,V_n>=V_y] 


#### Cost of chains of eval_counterex1a_start(V__0,V__01,V__04,V_4,V_5,V_7,V_8,V_b,V_n,V_x,V_y,B):
* Chain [58]: 0
  with precondition: [] 

* Chain [57]: 1
  with precondition: [V_x=0,0>=V_b+1,V_y>=0,V_n>=V_y] 

* Chain [56]: 1*s(73)+1
  Such that:s(73) =< V_y+1

  with precondition: [V_x=0,0>=V_b+1,V_y>=1,V_n>=V_y] 

* Chain [55]: 1
  with precondition: [V_y=0,0>=V_b+1,V_n>=0,V_x>=0] 

* Chain [54]: 2*s(75)+1
  Such that:s(74) =< V_y+1
s(75) =< s(74)

  with precondition: [0>=V_b+1,V_x>=0,V_y>=0,V_n>=V_y] 

* Chain [53]: 2*s(77)+1
  Such that:s(76) =< V_y
s(77) =< s(76)

  with precondition: [0>=V_b+1,V_x>=0,V_y>=1,V_n>=V_y] 

* Chain [52]: 3*s(80)+1*s(81)+12*s(82)+1
  Such that:s(79) =< V_x
s(78) =< V_x+1
s(80) =< s(79)
s(81) =< s(79)
s(81) =< s(78)

  with precondition: [0>=V_b+1,V_x>=1,V_y>=1,V_n>=V_y] 

* Chain [51]: 4*s(86)+3*s(87)+1*s(88)+12*s(89)+1
  Such that:s(84) =< V_x
s(83) =< V_x+1
s(85) =< V_y
s(86) =< s(85)
s(87) =< s(84)
s(88) =< s(84)
s(88) =< s(83)

  with precondition: [0>=V_b+1,V_x>=1,V_y>=2,V_n>=V_y] 

* Chain [50]: 0
  with precondition: [0>=V_x+1] 

* Chain [49]: 0
  with precondition: [0>=V_y+1] 

* Chain [48]: 1*s(92)+2*s(93)+9*s(94)+0
  Such that:s(90) =< V_x
s(91) =< V_x+1
s(92) =< s(91)
s(92) =< s(90)
s(93) =< s(91)

  with precondition: [V_b>=0,V_x>=0,V_y>=0,V_n>=V_y] 

* Chain [47]: 1*s(96)+3*s(97)+0
  Such that:s(95) =< V_x+1
s(96) =< s(95)

  with precondition: [V_b>=0,V_x>=0,V_y>=0,V_n>=V_y,V_b+V_n>=V_y+1] 

* Chain [46]: 0
  with precondition: [V_y>=V_n+1] 

* Chain [45]...: 2*s(99)+6*s(100)+1
  Such that:s(98) =< V_x
s(99) =< s(98)

  with precondition: [0>=V_b+1,V_x>=1,V_y>=1,V_n>=V_y] 

* Chain [44]...: 2*s(103)+2*s(104)+6*s(105)+1
  Such that:s(101) =< V_x
s(102) =< V_y
s(103) =< s(102)
s(104) =< s(101)

  with precondition: [0>=V_b+1,V_x>=1,V_y>=2,V_n>=V_y] 

* Chain [43]...: 2*s(107)+6*s(108)+0
  Such that:s(106) =< V_x+1
s(107) =< s(106)

  with precondition: [V_b>=0,V_x>=0,V_y>=0,V_n>=V_y] 


Closed-form bounds of eval_counterex1a_start(V__0,V__01,V__04,V_4,V_5,V_7,V_8,V_b,V_n,V_x,V_y,B): 
-------------------------------------
* Chain [58] with precondition: [] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [57] with precondition: [V_x=0,0>=V_b+1,V_y>=0,V_n>=V_y] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [56] with precondition: [V_x=0,0>=V_b+1,V_y>=1,V_n>=V_y] 
    - Upper bound: V_y+2 
    - Complexity: n 
* Chain [55] with precondition: [V_y=0,0>=V_b+1,V_n>=0,V_x>=0] 
    - Upper bound: 1 
    - Complexity: constant 
* Chain [54] with precondition: [0>=V_b+1,V_x>=0,V_y>=0,V_n>=V_y] 
    - Upper bound: 2*V_y+3 
    - Complexity: n 
* Chain [53] with precondition: [0>=V_b+1,V_x>=0,V_y>=1,V_n>=V_y] 
    - Upper bound: 2*V_y+1 
    - Complexity: n 
* Chain [52] with precondition: [0>=V_b+1,V_x>=1,V_y>=1,V_n>=V_y] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [51] with precondition: [0>=V_b+1,V_x>=1,V_y>=2,V_n>=V_y] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [50] with precondition: [0>=V_x+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [49] with precondition: [0>=V_y+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [48] with precondition: [V_b>=0,V_x>=0,V_y>=0,V_n>=V_y] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [47] with precondition: [V_b>=0,V_x>=0,V_y>=0,V_n>=V_y,V_b+V_n>=V_y+1] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [46] with precondition: [V_y>=V_n+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [45]... with precondition: [0>=V_b+1,V_x>=1,V_y>=1,V_n>=V_y] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [44]... with precondition: [0>=V_b+1,V_x>=1,V_y>=2,V_n>=V_y] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [43]... with precondition: [V_b>=0,V_x>=0,V_y>=0,V_n>=V_y] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of eval_counterex1a_start(V__0,V__01,V__04,V_4,V_5,V_7,V_8,V_b,V_n,V_x,V_y,B): inf 
Asymptotic class: infinity 
* Total analysis performed in 600 ms.

