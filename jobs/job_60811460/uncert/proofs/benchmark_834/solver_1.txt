MAYBE

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2
l2 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (i6 > 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=i4+2*i5, i5'=3*i4+4*i5, i6'=-1+i6
   2: -2+i1 == 0 /\ i1'=3, i3'=1+i3
   3: (-3+i1 == 0 /\ i4 > 0) /\ i1'=3, i3'=1+i3, i4'=-1+i4

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2
2 -> 3
3 -> 3

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0)]
	3[(-3+i1 == 0 /\ i4 > 0)]
	
	Blocked

	{}
	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ i4 > 0) /\ i1'=3, i3'=1+i3, i4'=-1+i4
	New rule:
	(-3+i1 >= 0 /\ 1-it16+i4 > 0 /\ 3-i1 >= 0 /\ -1+it16 >= 0) /\ i1'=i1, i3'=it16+i3, i4'=-it16+i4

		-3+i1 >= 0 [0]: unchanged
		
		i4 > 0 [0]: montonic decrease yields 1-it16+i4 > 0
		
		3-i1 >= 0 [0]: unchanged
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, i4 > 0 -> 1-it16+i4 > 0, 3-i1 >= 0 -> 3-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ 1-it16+i4 > 0 /\ 3-i1 >= 0 /\ -1+it16 >= 0) /\ i1'=i1, i3'=it16+i3, i4'=-it16+i4
	New rule:
	(-3+i1 >= 0 /\ 1-it16+i4 > 0 /\ 3-i1 >= 0 /\ -1+it16 >= 0) /\ i3'=it16+i3, i4'=-it16+i4
	
	Instantiation

	Original rule:
	(-3+i1 >= 0 /\ 1-it16+i4 > 0 /\ 3-i1 >= 0 /\ -1+it16 >= 0) /\ i3'=it16+i3, i4'=-it16+i4
	New rule:
	(-3+i1 >= 0 /\ 1 > 0 /\ -1+i4 >= 0 /\ 3-i1 >= 0) /\ i3'=i3+i4, i4'=0

Start location: l0

Location map:
LoAT_sink -> 0
l0 -> 1
l1 -> 2
l2 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   1: (i6 > 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i4'=i4+2*i5, i5'=3*i4+4*i5, i6'=-1+i6
   2: -2+i1 == 0 /\ i1'=3, i3'=1+i3
   3: (-3+i1 == 0 /\ i4 > 0) /\ i1'=3, i3'=1+i3, i4'=-1+i4
   4: (-3+i1 >= 0 /\ 1 > 0 /\ -1+i4 >= 0 /\ 3-i1 >= 0) /\ i3'=i3+i4, i4'=0

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2
2 -> 3, 2 -> 4
3 -> 3, 3 -> 4
4 -> 3

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0)]
	4[(-3+i1 >= 0 /\ 1 > 0 /\ -1+i4 >= 0 /\ 3-i1 >= 0)]
	
	Blocked

	{}
	{}
	{}
	{3[T], 4[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0)]
	
	Blocked

	{}
	{}
	{4[T]}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0)]
	3[(-3+i1 == 0 /\ i4 > 0)]
	
	Blocked

	{}
	{}
	{4[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	2[(-2+i1 == 0)]
	
	Blocked

	{}
	{}
	{3[T], 4[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T]}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	2[(-2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T]}
	{}
	
Step with 4

	Trace

	0[(-1+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	2[(-2+i1 == 0)]
	4[(-3+i1 >= 0 /\ 1 > 0 /\ -1+i4 >= 0 /\ 3-i1 >= 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T]}
	{}
	{4[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	2[(-2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T]}
	{4[T]}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	2[(-2+i1 == 0)]
	3[(-3+i1 == 0 /\ i4 > 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T]}
	{4[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	2[(-2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T]}
	{3[T], 4[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	1[(i6 > 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{2[T]}
	{1[T], 2[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 2[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(EXP))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₁: l1(X₀, X₁, X₂) → l1(X₀+2⋅X₁, 3⋅X₀+4⋅X₁, X₂-1) :|: 1 ≤ X₂
  t₂: l1(X₀, X₁, X₂) → l2(X₀, X₁, X₂)
  t₃: l2(X₀, X₁, X₂) → l2(X₀-1, X₁, X₂) :|: 1 ≤ X₀


Preprocessing
Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₁: l1(X₀, X₁, X₂) → l1(X₀+2⋅X₁, 3⋅X₀+4⋅X₁, X₂-1) :|: 1 ≤ X₂
  t₂: l1(X₀, X₁, X₂) → l2(X₀, X₁, X₂)
  t₃: l2(X₀, X₁, X₂) → l2(X₀-1, X₁, X₂) :|: 1 ≤ X₀


MPRF for transition t₁: l1(X₀, X₁, X₂) → l1(X₀+2⋅X₁, 3⋅X₀+4⋅X₁, X₂-1) :|: 1 ≤ X₂ of depth 1:
  new bound:
    X₂ {O(n)}

  MPRF:
    • l1: [X₂]




MPRF for transition t₃: l2(X₀, X₁, X₂) → l2(X₀-1, X₁, X₂) :|: 1 ≤ X₀ of depth 1:
  new bound:
    8^X₂⋅X₀+8^X₂⋅X₁+X₀ {O(EXP)}

  MPRF:
    • l2: [X₀]




  Found invariant 0 ≤ X₀ for location l2_v1


All Bounds
Timebounds
  Overall timebound:8^X₂⋅X₀+8^X₂⋅X₁+X₀+X₂+2 {O(EXP)}
    t₀: 1 {O(1)}
    t₁: X₂ {O(n)}
    t₂: 1 {O(1)}
    t₃: 8^X₂⋅X₀+8^X₂⋅X₁+X₀ {O(EXP)}


Costbounds
  Overall costbound: 8^X₂⋅X₀+8^X₂⋅X₁+X₀+X₂+2 {O(EXP)}
    t₀: 1 {O(1)}
    t₁: X₂ {O(n)}
    t₂: 1 {O(1)}
    t₃: 8^X₂⋅X₀+8^X₂⋅X₁+X₀ {O(EXP)}


Sizebounds
    t₀, X₀: X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₀, X₂: X₂ {O(n)}
    t₁, X₀: 8^X₂⋅X₀+8^X₂⋅X₁ {O(EXP)}
    t₁, X₁: 8^X₂⋅X₀+8^X₂⋅X₁ {O(EXP)}
    t₁, X₂: X₂ {O(n)}
    t₂, X₀: 8^X₂⋅X₀+8^X₂⋅X₁+X₀ {O(EXP)}
    t₂, X₁: 8^X₂⋅X₀+8^X₂⋅X₁+X₁ {O(EXP)}
    t₂, X₂: 2⋅X₂ {O(n)}
    t₃, X₀: 8^X₂⋅X₀+8^X₂⋅X₁+X₀ {O(EXP)}
    t₃, X₁: 8^X₂⋅X₀+8^X₂⋅X₁+X₁ {O(EXP)}
    t₃, X₂: 2⋅X₂ {O(n)}

