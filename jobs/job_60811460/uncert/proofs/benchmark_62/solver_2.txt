WORST_CASE(?,O(n^2))  

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalnestedLoopbb5in/7,evalnestedLoopbb6in/7]
1. recursive  : [evalnestedLoopbb4in/11,evalnestedLoopbb6in_loop_cont/12,evalnestedLoopbb7in/11]
2. recursive  : [evalnestedLoopbb7in_loop_cont/15,evalnestedLoopbb8in/14,evalnestedLoopbb9in/14]
3. non_recursive  : [evalnestedLoopstop/9]
4. non_recursive  : [evalnestedLoopreturnin/9]
5. non_recursive  : [exit_location/1]
6. non_recursive  : [evalnestedLoopbb9in_loop_cont/10]
7. non_recursive  : [evalnestedLoopentryin/9]
8. non_recursive  : [evalnestedLoopstart/9]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalnestedLoopbb6in/7
1. SCC is partially evaluated into evalnestedLoopbb7in/11
2. SCC is partially evaluated into evalnestedLoopbb9in/14
3. SCC is completely evaluated into other SCCs
4. SCC is completely evaluated into other SCCs
5. SCC is completely evaluated into other SCCs
6. SCC is partially evaluated into evalnestedLoopbb9in_loop_cont/10
7. SCC is partially evaluated into evalnestedLoopentryin/9
8. SCC is partially evaluated into evalnestedLoopstart/9

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalnestedLoopbb6in/7 
* CE 18 is refined into CE [19] 
* CE 17 is refined into CE [20] 
* CE 16 is refined into CE [21] 


### Cost equations --> "Loop" of evalnestedLoopbb6in/7 
* CEs [21] --> Loop 19 
* CEs [19] --> Loop 20 
* CEs [20] --> Loop 21 

### Ranking functions of CR evalnestedLoopbb6in(C,E,F,H,I,J,K) 
* RF of phase [19]: [C-H]

#### Partial ranking functions of CR evalnestedLoopbb6in(C,E,F,H,I,J,K) 
* Partial RF of phase [19]:
  - RF of loop [19:1]:
    C-H


### Specialization of cost equations evalnestedLoopbb7in/11 
* CE 14 is refined into CE [22] 
* CE 12 is refined into CE [23,24] 
* CE 15 is refined into CE [25] 
* CE 13 is refined into CE [26,27] 


### Cost equations --> "Loop" of evalnestedLoopbb7in/11 
* CEs [27] --> Loop 22 
* CEs [26] --> Loop 23 
* CEs [22] --> Loop 24 
* CEs [24] --> Loop 25 
* CEs [23] --> Loop 26 
* CEs [25] --> Loop 27 

### Ranking functions of CR evalnestedLoopbb7in(B,C,E,F,G,H,I,J,K,L,M) 
* RF of phase [22]: [B-E]

#### Partial ranking functions of CR evalnestedLoopbb7in(B,C,E,F,G,H,I,J,K,L,M) 
* Partial RF of phase [22]:
  - RF of loop [22:1]:
    B-E


### Specialization of cost equations evalnestedLoopbb9in/14 
* CE 8 is refined into CE [28] 
* CE 6 is refined into CE [29,30,31,32,33,34,35] 
* CE 9 is refined into CE [36] 
* CE 7 is refined into CE [37,38,39,40] 


### Cost equations --> "Loop" of evalnestedLoopbb9in/14 
* CEs [40] --> Loop 28 
* CEs [38] --> Loop 29 
* CEs [37] --> Loop 30 
* CEs [39] --> Loop 31 
* CEs [28] --> Loop 32 
* CEs [33] --> Loop 33 
* CEs [32] --> Loop 34 
* CEs [31] --> Loop 35 
* CEs [30] --> Loop 36 
* CEs [29] --> Loop 37 
* CEs [35] --> Loop 38 
* CEs [34] --> Loop 39 
* CEs [36] --> Loop 40 

### Ranking functions of CR evalnestedLoopbb9in(A,B,C,D,E,F,G,H,I,J,K,L,M,N) 
* RF of phase [28]: [A-D]
* RF of phase [31]: [A-D]

#### Partial ranking functions of CR evalnestedLoopbb9in(A,B,C,D,E,F,G,H,I,J,K,L,M,N) 
* Partial RF of phase [28]:
  - RF of loop [28:1]:
    A-D
* Partial RF of phase [31]:
  - RF of loop [31:1]:
    A-D


### Specialization of cost equations evalnestedLoopbb9in_loop_cont/10 
* CE 10 is refined into CE [41] 
* CE 11 is refined into CE [42] 


### Cost equations --> "Loop" of evalnestedLoopbb9in_loop_cont/10 
* CEs [41] --> Loop 41 
* CEs [42] --> Loop 42 

### Ranking functions of CR evalnestedLoopbb9in_loop_cont(A,B,C,D,E,F,G,H,I,J) 

#### Partial ranking functions of CR evalnestedLoopbb9in_loop_cont(A,B,C,D,E,F,G,H,I,J) 


### Specialization of cost equations evalnestedLoopentryin/9 
* CE 5 is refined into CE [43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66] 
* CE 4 is refined into CE [67] 
* CE 3 is refined into CE [68] 
* CE 2 is refined into CE [69] 


### Cost equations --> "Loop" of evalnestedLoopentryin/9 
* CEs [55] --> Loop 43 
* CEs [54,56] --> Loop 44 
* CEs [53] --> Loop 45 
* CEs [57] --> Loop 46 
* CEs [52] --> Loop 47 
* CEs [51] --> Loop 48 
* CEs [60] --> Loop 49 
* CEs [59] --> Loop 50 
* CEs [58] --> Loop 51 
* CEs [67] --> Loop 52 
* CEs [68] --> Loop 53 
* CEs [69] --> Loop 54 
* CEs [64] --> Loop 55 
* CEs [62] --> Loop 56 
* CEs [63] --> Loop 57 
* CEs [61,66] --> Loop 58 
* CEs [48] --> Loop 59 
* CEs [47,49] --> Loop 60 
* CEs [50] --> Loop 61 
* CEs [46] --> Loop 62 
* CEs [44] --> Loop 63 
* CEs [43,45] --> Loop 64 
* CEs [65] --> Loop 65 

### Ranking functions of CR evalnestedLoopentryin(A,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR evalnestedLoopentryin(A,B,C,D,E,F,G,H,I) 


### Specialization of cost equations evalnestedLoopstart/9 
* CE 1 is refined into CE [70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92] 


### Cost equations --> "Loop" of evalnestedLoopstart/9 
* CEs [92] --> Loop 66 
* CEs [91] --> Loop 67 
* CEs [90] --> Loop 68 
* CEs [89] --> Loop 69 
* CEs [88] --> Loop 70 
* CEs [87] --> Loop 71 
* CEs [86] --> Loop 72 
* CEs [85] --> Loop 73 
* CEs [84] --> Loop 74 
* CEs [83] --> Loop 75 
* CEs [82] --> Loop 76 
* CEs [81] --> Loop 77 
* CEs [80] --> Loop 78 
* CEs [79] --> Loop 79 
* CEs [78] --> Loop 80 
* CEs [77] --> Loop 81 
* CEs [76] --> Loop 82 
* CEs [75] --> Loop 83 
* CEs [74] --> Loop 84 
* CEs [73] --> Loop 85 
* CEs [72] --> Loop 86 
* CEs [71] --> Loop 87 
* CEs [70] --> Loop 88 

### Ranking functions of CR evalnestedLoopstart(A,B,C,D,E,F,G,H,I) 

#### Partial ranking functions of CR evalnestedLoopstart(A,B,C,D,E,F,G,H,I) 


Computing Bounds
=====================================

#### Cost of chains of evalnestedLoopbb6in(C,E,F,H,I,J,K):
* Chain [[19],21]: 1*it(19)+0
  Such that:it(19) =< -H+K

  with precondition: [I=2,C=J,C=K,C>=0,E>=0,H>=F,C>=H+1] 

* Chain [[19],20]: 1*it(19)+0
  Such that:it(19) =< C-H

  with precondition: [I=3,C>=0,E>=0,H>=F,C>=H+1] 

* Chain [21]: 0
  with precondition: [I=2,H=J,H=K,C>=0,E>=0,H>=C,H>=F] 

* Chain [20]: 0
  with precondition: [I=3,C>=0,E>=0,H>=F] 


#### Cost of chains of evalnestedLoopbb7in(B,C,E,F,G,H,I,J,K,L,M):
* Chain [[22],27]: 1*it(22)+0
  Such that:it(22) =< B-E

  with precondition: [I=3,C>=0,E>=0,F>=C,B>=E+1] 

* Chain [[22],26]: 1*it(22)+0
  Such that:it(22) =< B-E

  with precondition: [I=3,C>=0,E>=0,F>=C,B>=E+2] 

* Chain [[22],24]: 1*it(22)+0
  Such that:it(22) =< -E+J

  with precondition: [I=4,B=J,F=K,B=L,F=M,C>=0,E>=0,F>=C,B>=E+1] 

* Chain [27]: 0
  with precondition: [I=3,C>=0,E>=0,B>=E] 

* Chain [26]: 0
  with precondition: [I=3,C>=0,E>=0,B>=E+1] 

* Chain [25]: 1*s(1)+0
  Such that:s(1) =< C-F

  with precondition: [E=0,I=3,B>=1,C>=0,C>=F+1] 

* Chain [24]: 0
  with precondition: [I=4,E=B,K=F,L=G,M=H,E=J,C>=0,E>=0] 

* Chain [23,[22],27]: 1*it(22)+1*s(2)+1
  Such that:it(22) =< B
s(2) =< C-F

  with precondition: [E=0,I=3,B>=2,C>=0,C>=F+1] 

* Chain [23,[22],26]: 1*it(22)+1*s(2)+1
  Such that:it(22) =< B
s(2) =< C-F

  with precondition: [E=0,I=3,B>=3,C>=0,C>=F+1] 

* Chain [23,[22],24]: 1*it(22)+1*s(2)+1
  Such that:s(2) =< -F+K
it(22) =< J

  with precondition: [E=0,I=4,B=J,C=K,B=L,C=M,B>=2,C>=0,C>=F+1] 

* Chain [23,27]: 1*s(2)+1
  Such that:s(2) =< C-F

  with precondition: [E=0,I=3,B>=1,C>=0,C>=F+1] 

* Chain [23,26]: 1*s(2)+1
  Such that:s(2) =< C-F

  with precondition: [E=0,I=3,B>=2,C>=0,C>=F+1] 

* Chain [23,24]: 1*s(2)+1
  Such that:s(2) =< -F+K

  with precondition: [B=1,E=0,I=4,J=1,L=1,C=K,C=M,C>=0,C>=F+1] 


#### Cost of chains of evalnestedLoopbb9in(A,B,C,D,E,F,G,H,I,J,K,L,M,N):
* Chain [[31],40]: 1*it(31)+0
  Such that:it(31) =< A-D

  with precondition: [B=0,I=3,C>=0,D>=0,A>=D+1] 

* Chain [[31],39]: 1*it(31)+0
  Such that:it(31) =< A-D

  with precondition: [B=0,I=3,C>=0,D>=0,A>=D+2] 

* Chain [[31],32]: 1*it(31)+0
  Such that:it(31) =< -D+J

  with precondition: [B=0,I=5,K=0,A=J,A=L+1,G=M,H=N,C>=0,D>=0,A>=D+1] 

* Chain [[28],40]: 1*it(28)+1*s(10)+0
  Such that:it(28) =< A-D
aux(3) =< B
s(10) =< it(28)*aux(3)

  with precondition: [I=3,B>=1,C>=0,D>=C,A>=D+1] 

* Chain [[28],39]: 1*it(28)+1*s(10)+0
  Such that:it(28) =< A-D
aux(3) =< B
s(10) =< it(28)*aux(3)

  with precondition: [I=3,B>=1,C>=0,D>=C,A>=D+2] 

* Chain [[28],38]: 1*it(28)+1*s(10)+0
  Such that:it(28) =< A-D
aux(3) =< B
s(10) =< it(28)*aux(3)

  with precondition: [I=3,B>=1,C>=0,D>=C,A>=D+2] 

* Chain [[28],34]: 1*it(28)+1*s(10)+1*s(11)+0
  Such that:it(28) =< A-D
aux(4) =< B
s(11) =< aux(4)
s(10) =< it(28)*aux(4)

  with precondition: [I=3,B>=1,C>=0,D>=C,A>=D+2] 

* Chain [[28],33]: 1*it(28)+1*s(10)+1*s(12)+0
  Such that:it(28) =< A-D
aux(5) =< B
s(12) =< aux(5)
s(10) =< it(28)*aux(5)

  with precondition: [I=3,B>=2,C>=0,D>=C,A>=D+2] 

* Chain [[28],32]: 1*it(28)+1*s(10)+0
  Such that:aux(3) =< B
it(28) =< -D+J
s(10) =< it(28)*aux(3)

  with precondition: [I=5,A=J,B=K,A=L+1,B=M,A=N+1,B>=1,C>=0,D>=C,A>=D+1] 

* Chain [40]: 0
  with precondition: [I=3,A>=0,B>=0,C>=0,D>=0] 

* Chain [39]: 0
  with precondition: [I=3,B>=0,C>=0,D>=0,A>=D+1] 

* Chain [38]: 0
  with precondition: [I=3,B>=1,C>=0,D>=0,A>=D+1] 

* Chain [37]: 2*s(14)+1
  Such that:s(13) =< C
s(14) =< s(13)

  with precondition: [D=0,I=3,A>=1,B>=1,C>=1] 

* Chain [36]: 1*s(15)+2*s(17)+1
  Such that:s(15) =< B
s(16) =< C
s(17) =< s(16)

  with precondition: [D=0,I=3,A>=1,B>=2,C>=1] 

* Chain [35]: 1*s(18)+1*s(19)+1
  Such that:s(18) =< B
s(19) =< C

  with precondition: [D=0,I=3,A>=1,B>=3,C>=1] 

* Chain [34]: 1*s(11)+0
  Such that:s(11) =< B

  with precondition: [I=3,B>=1,C>=0,D>=C,A>=D+1] 

* Chain [33]: 1*s(12)+0
  Such that:s(12) =< B

  with precondition: [I=3,B>=2,C>=0,D>=C,A>=D+1] 

* Chain [32]: 0
  with precondition: [I=5,K=E,L=F,M=G,N=H,D=J,A>=0,B>=0,C>=0,D>=A] 

* Chain [30,[28],40]: 1*it(28)+1*s(10)+1*s(20)+2
  Such that:aux(3) =< 1
it(28) =< A-C
s(20) =< C+1
s(10) =< it(28)*aux(3)

  with precondition: [B=1,D=0,I=3,C>=1,A>=C+2] 

* Chain [30,[28],39]: 1*it(28)+1*s(10)+1*s(20)+2
  Such that:aux(3) =< 1
it(28) =< A-C
s(20) =< C+1
s(10) =< it(28)*aux(3)

  with precondition: [B=1,D=0,I=3,C>=1,A>=C+3] 

* Chain [30,[28],38]: 1*it(28)+1*s(10)+1*s(20)+2
  Such that:aux(3) =< 1
it(28) =< A-C
s(20) =< C+1
s(10) =< it(28)*aux(3)

  with precondition: [B=1,D=0,I=3,C>=1,A>=C+3] 

* Chain [30,[28],34]: 1*it(28)+1*s(10)+1*s(11)+1*s(20)+2
  Such that:aux(4) =< 1
it(28) =< A-C
s(20) =< C+1
s(11) =< aux(4)
s(10) =< it(28)*aux(4)

  with precondition: [B=1,D=0,I=3,C>=1,A>=C+3] 

* Chain [30,[28],32]: 1*it(28)+1*s(10)+1*s(20)+2
  Such that:aux(3) =< 1
it(28) =< -C+J
s(20) =< C+1
s(10) =< it(28)*aux(3)

  with precondition: [B=1,D=0,I=5,K=1,M=1,A=J,A=L+1,A=N+1,C>=1,A>=C+2] 

* Chain [30,40]: 1*s(20)+2
  Such that:s(20) =< C+1

  with precondition: [B=1,D=0,I=3,A>=1,C>=1] 

* Chain [30,39]: 1*s(20)+2
  Such that:s(20) =< C+1

  with precondition: [B=1,D=0,I=3,C>=1,A>=C+2] 

* Chain [30,38]: 1*s(20)+2
  Such that:s(20) =< C+1

  with precondition: [B=1,D=0,I=3,C>=1,A>=C+2] 

* Chain [30,34]: 1*s(11)+1*s(20)+2
  Such that:s(11) =< 1
s(20) =< C+1

  with precondition: [B=1,D=0,I=3,C>=1,A>=C+2] 

* Chain [30,32]: 1*s(20)+2
  Such that:s(20) =< J

  with precondition: [B=1,D=0,I=5,K=1,M=1,C+1=J,C=L,C=N,A>=1,C>=1,C+1>=A] 

* Chain [29,[28],40]: 1*it(28)+1*s(10)+1*s(21)+1*s(22)+2
  Such that:it(28) =< A-C
s(21) =< C+1
aux(6) =< B
s(22) =< aux(6)
s(10) =< it(28)*aux(6)

  with precondition: [D=0,I=3,B>=2,C>=1,A>=C+2] 

* Chain [29,[28],39]: 1*it(28)+1*s(10)+1*s(21)+1*s(22)+2
  Such that:it(28) =< A-C
s(21) =< C+1
aux(7) =< B
s(22) =< aux(7)
s(10) =< it(28)*aux(7)

  with precondition: [D=0,I=3,B>=2,C>=1,A>=C+3] 

* Chain [29,[28],38]: 1*it(28)+1*s(10)+1*s(21)+1*s(22)+2
  Such that:it(28) =< A-C
s(21) =< C+1
aux(8) =< B
s(22) =< aux(8)
s(10) =< it(28)*aux(8)

  with precondition: [D=0,I=3,B>=2,C>=1,A>=C+3] 

* Chain [29,[28],34]: 1*it(28)+1*s(10)+2*s(11)+1*s(21)+2
  Such that:it(28) =< A-C
s(21) =< C+1
aux(9) =< B
s(11) =< aux(9)
s(10) =< it(28)*aux(9)

  with precondition: [D=0,I=3,B>=2,C>=1,A>=C+3] 

* Chain [29,[28],33]: 1*it(28)+1*s(10)+2*s(12)+1*s(21)+2
  Such that:it(28) =< A-C
s(21) =< C+1
aux(10) =< B
s(12) =< aux(10)
s(10) =< it(28)*aux(10)

  with precondition: [D=0,I=3,B>=2,C>=1,A>=C+3] 

* Chain [29,[28],32]: 1*it(28)+1*s(10)+1*s(21)+1*s(22)+2
  Such that:it(28) =< -C+J
s(21) =< C+1
aux(11) =< M
s(22) =< aux(11)
s(10) =< it(28)*aux(11)

  with precondition: [D=0,I=5,A=J,B=K,A=L+1,B=M,A=N+1,B>=2,C>=1,A>=C+2] 

* Chain [29,40]: 1*s(21)+1*s(22)+2
  Such that:s(22) =< B
s(21) =< C+1

  with precondition: [D=0,I=3,A>=1,B>=2,C>=1] 

* Chain [29,39]: 1*s(21)+1*s(22)+2
  Such that:s(22) =< B
s(21) =< C+1

  with precondition: [D=0,I=3,B>=2,C>=1,A>=C+2] 

* Chain [29,38]: 1*s(21)+1*s(22)+2
  Such that:s(22) =< B
s(21) =< C+1

  with precondition: [D=0,I=3,B>=2,C>=1,A>=C+2] 

* Chain [29,34]: 2*s(11)+1*s(21)+2
  Such that:s(21) =< C+1
aux(12) =< B
s(11) =< aux(12)

  with precondition: [D=0,I=3,B>=2,C>=1,A>=C+2] 

* Chain [29,33]: 2*s(12)+1*s(21)+2
  Such that:s(21) =< C+1
aux(13) =< B
s(12) =< aux(13)

  with precondition: [D=0,I=3,B>=2,C>=1,A>=C+2] 

* Chain [29,32]: 1*s(21)+1*s(22)+2
  Such that:s(22) =< B
s(21) =< J

  with precondition: [D=0,I=5,C+1=J,B=K,C=L,B=M,C=N,A>=1,B>=2,C>=1,C+1>=A] 


#### Cost of chains of evalnestedLoopbb9in_loop_cont(A,B,C,D,E,F,G,H,I,J):
* Chain [42]: 0
  with precondition: [A=3,B>=0,C>=0,D>=0] 

* Chain [41]: 0
  with precondition: [A=5,B>=0,C>=0,D>=0] 


#### Cost of chains of evalnestedLoopentryin(A,B,C,D,E,F,G,H,I):
* Chain [65]: 0
  with precondition: [A=0,B>=0,C>=0] 

* Chain [64]: 2*s(98)+0
  Such that:aux(28) =< A
s(98) =< aux(28)

  with precondition: [B=0,A>=1,C>=0] 

* Chain [63]: 1*s(100)+0
  Such that:s(100) =< A

  with precondition: [B=0,A>=2,C>=0] 

* Chain [62]: 1*s(101)+2
  Such that:s(101) =< C+1

  with precondition: [B=1,A>=1,C>=1] 

* Chain [61]: 1*s(102)+2
  Such that:s(102) =< C+1

  with precondition: [B=1,A>=1,C>=1,C+1>=A] 

* Chain [60]: 2*s(103)+1*s(106)+5*s(107)+2*s(108)+2
  Such that:aux(29) =< 1
aux(30) =< A-C
aux(31) =< C+1
s(103) =< aux(30)
s(107) =< aux(31)
s(106) =< aux(29)
s(108) =< s(103)*aux(29)

  with precondition: [B=1,C>=1,A>=C+2] 

* Chain [59]: 3*s(116)+3*s(117)+1*s(118)+3*s(119)+2
  Such that:s(113) =< 1
s(114) =< A-C
s(115) =< C+1
s(116) =< s(114)
s(117) =< s(115)
s(118) =< s(113)
s(119) =< s(116)*s(113)

  with precondition: [B=1,C>=1,A>=C+3] 

* Chain [58]: 2*s(120)+1*s(122)+2*s(123)+0
  Such that:aux(32) =< A
aux(33) =< B
s(120) =< aux(32)
s(122) =< aux(33)
s(123) =< s(120)*aux(33)

  with precondition: [C=0,A>=1,B>=1] 

* Chain [57]: 1*s(127)+0
  Such that:s(127) =< B

  with precondition: [C=0,A>=1,B>=2] 

* Chain [56]: 3*s(130)+1*s(131)+3*s(132)+0
  Such that:s(128) =< A
s(129) =< B
s(130) =< s(128)
s(131) =< s(129)
s(132) =< s(130)*s(129)

  with precondition: [C=0,A>=2,B>=1] 

* Chain [55]: 1*s(133)+1*s(135)+1*s(136)+0
  Such that:s(133) =< A
s(134) =< B
s(135) =< s(134)
s(136) =< s(133)*s(134)

  with precondition: [C=0,A>=2,B>=2] 

* Chain [54]: 0
  with precondition: [0>=A+1] 

* Chain [53]: 0
  with precondition: [0>=B+1] 

* Chain [52]: 0
  with precondition: [0>=C+1] 

* Chain [51]: 0
  with precondition: [A>=0,B>=0,C>=0] 

* Chain [50]: 0
  with precondition: [A>=1,B>=0,C>=0] 

* Chain [49]: 0
  with precondition: [A>=1,B>=1,C>=0] 

* Chain [48]: 2*s(138)+1
  Such that:s(137) =< C
s(138) =< s(137)

  with precondition: [A>=1,B>=1,C>=1] 

* Chain [47]: 1*s(140)+2*s(142)+2*s(143)+2
  Such that:s(141) =< B
s(139) =< C
s(140) =< C+1
s(142) =< s(141)
s(143) =< s(139)

  with precondition: [A>=1,B>=2,C>=1] 

* Chain [46]: 1*s(144)+1*s(145)+2
  Such that:s(144) =< B
s(145) =< C+1

  with precondition: [A>=1,B>=2,C>=1,C+1>=A] 

* Chain [45]: 1*s(146)+1*s(147)+1
  Such that:s(146) =< B
s(147) =< C

  with precondition: [A>=1,B>=3,C>=1] 

* Chain [44]: 2*s(148)+8*s(151)+6*s(152)+2*s(153)+2
  Such that:aux(34) =< A-C
aux(35) =< B
aux(36) =< C+1
s(148) =< aux(34)
s(152) =< aux(36)
s(151) =< aux(35)
s(153) =< s(148)*aux(35)

  with precondition: [B>=2,C>=1,A>=C+2] 

* Chain [43]: 4*s(162)+4*s(163)+6*s(164)+4*s(165)+2
  Such that:s(159) =< A-C
s(160) =< B
s(161) =< C+1
s(162) =< s(159)
s(163) =< s(161)
s(164) =< s(160)
s(165) =< s(162)*s(160)

  with precondition: [B>=2,C>=1,A>=C+3] 


#### Cost of chains of evalnestedLoopstart(A,B,C,D,E,F,G,H,I):
* Chain [88]: 0
  with precondition: [A=0,B>=0,C>=0] 

* Chain [87]: 2*s(167)+0
  Such that:s(166) =< A
s(167) =< s(166)

  with precondition: [B=0,A>=1,C>=0] 

* Chain [86]: 1*s(168)+0
  Such that:s(168) =< A

  with precondition: [B=0,A>=2,C>=0] 

* Chain [85]: 1*s(169)+2
  Such that:s(169) =< C+1

  with precondition: [B=1,A>=1,C>=1] 

* Chain [84]: 1*s(170)+2
  Such that:s(170) =< C+1

  with precondition: [B=1,A>=1,C>=1,C+1>=A] 

* Chain [83]: 2*s(174)+5*s(175)+1*s(176)+2*s(177)+2
  Such that:s(171) =< 1
s(172) =< A-C
s(173) =< C+1
s(174) =< s(172)
s(175) =< s(173)
s(176) =< s(171)
s(177) =< s(174)*s(171)

  with precondition: [B=1,C>=1,A>=C+2] 

* Chain [82]: 3*s(181)+3*s(182)+1*s(183)+3*s(184)+2
  Such that:s(178) =< 1
s(179) =< A-C
s(180) =< C+1
s(181) =< s(179)
s(182) =< s(180)
s(183) =< s(178)
s(184) =< s(181)*s(178)

  with precondition: [B=1,C>=1,A>=C+3] 

* Chain [81]: 2*s(187)+1*s(188)+2*s(189)+0
  Such that:s(185) =< A
s(186) =< B
s(187) =< s(185)
s(188) =< s(186)
s(189) =< s(187)*s(186)

  with precondition: [C=0,A>=1,B>=1] 

* Chain [80]: 1*s(190)+0
  Such that:s(190) =< B

  with precondition: [C=0,A>=1,B>=2] 

* Chain [79]: 3*s(193)+1*s(194)+3*s(195)+0
  Such that:s(191) =< A
s(192) =< B
s(193) =< s(191)
s(194) =< s(192)
s(195) =< s(193)*s(192)

  with precondition: [C=0,A>=2,B>=1] 

* Chain [78]: 1*s(196)+1*s(198)+1*s(199)+0
  Such that:s(196) =< A
s(197) =< B
s(198) =< s(197)
s(199) =< s(196)*s(197)

  with precondition: [C=0,A>=2,B>=2] 

* Chain [77]: 0
  with precondition: [0>=A+1] 

* Chain [76]: 0
  with precondition: [0>=B+1] 

* Chain [75]: 0
  with precondition: [0>=C+1] 

* Chain [74]: 0
  with precondition: [A>=0,B>=0,C>=0] 

* Chain [73]: 0
  with precondition: [A>=1,B>=0,C>=0] 

* Chain [72]: 0
  with precondition: [A>=1,B>=1,C>=0] 

* Chain [71]: 2*s(201)+1
  Such that:s(200) =< C
s(201) =< s(200)

  with precondition: [A>=1,B>=1,C>=1] 

* Chain [70]: 1*s(204)+2*s(205)+2*s(206)+2
  Such that:s(202) =< B
s(203) =< C
s(204) =< C+1
s(205) =< s(202)
s(206) =< s(203)

  with precondition: [A>=1,B>=2,C>=1] 

* Chain [69]: 1*s(207)+1*s(208)+2
  Such that:s(207) =< B
s(208) =< C+1

  with precondition: [A>=1,B>=2,C>=1,C+1>=A] 

* Chain [68]: 1*s(209)+1*s(210)+1
  Such that:s(209) =< B
s(210) =< C

  with precondition: [A>=1,B>=3,C>=1] 

* Chain [67]: 2*s(214)+6*s(215)+8*s(216)+2*s(217)+2
  Such that:s(211) =< A-C
s(212) =< B
s(213) =< C+1
s(214) =< s(211)
s(215) =< s(213)
s(216) =< s(212)
s(217) =< s(214)*s(212)

  with precondition: [B>=2,C>=1,A>=C+2] 

* Chain [66]: 4*s(221)+4*s(222)+6*s(223)+4*s(224)+2
  Such that:s(218) =< A-C
s(219) =< B
s(220) =< C+1
s(221) =< s(218)
s(222) =< s(220)
s(223) =< s(219)
s(224) =< s(221)*s(219)

  with precondition: [B>=2,C>=1,A>=C+3] 


Closed-form bounds of evalnestedLoopstart(A,B,C,D,E,F,G,H,I): 
-------------------------------------
* Chain [88] with precondition: [A=0,B>=0,C>=0] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [87] with precondition: [B=0,A>=1,C>=0] 
    - Upper bound: 2*A 
    - Complexity: n 
* Chain [86] with precondition: [B=0,A>=2,C>=0] 
    - Upper bound: A 
    - Complexity: n 
* Chain [85] with precondition: [B=1,A>=1,C>=1] 
    - Upper bound: C+3 
    - Complexity: n 
* Chain [84] with precondition: [B=1,A>=1,C>=1,C+1>=A] 
    - Upper bound: C+3 
    - Complexity: n 
* Chain [83] with precondition: [B=1,C>=1,A>=C+2] 
    - Upper bound: 4*A+C+8 
    - Complexity: n 
* Chain [82] with precondition: [B=1,C>=1,A>=C+3] 
    - Upper bound: 6*A-3*C+6 
    - Complexity: n 
* Chain [81] with precondition: [C=0,A>=1,B>=1] 
    - Upper bound: 2*A*B+2*A+B 
    - Complexity: n^2 
* Chain [80] with precondition: [C=0,A>=1,B>=2] 
    - Upper bound: B 
    - Complexity: n 
* Chain [79] with precondition: [C=0,A>=2,B>=1] 
    - Upper bound: 3*A*B+3*A+B 
    - Complexity: n^2 
* Chain [78] with precondition: [C=0,A>=2,B>=2] 
    - Upper bound: B*A+A+B 
    - Complexity: n^2 
* Chain [77] with precondition: [0>=A+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [76] with precondition: [0>=B+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [75] with precondition: [0>=C+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [74] with precondition: [A>=0,B>=0,C>=0] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [73] with precondition: [A>=1,B>=0,C>=0] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [72] with precondition: [A>=1,B>=1,C>=0] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [71] with precondition: [A>=1,B>=1,C>=1] 
    - Upper bound: 2*C+1 
    - Complexity: n 
* Chain [70] with precondition: [A>=1,B>=2,C>=1] 
    - Upper bound: 2*B+3*C+3 
    - Complexity: n 
* Chain [69] with precondition: [A>=1,B>=2,C>=1,C+1>=A] 
    - Upper bound: B+C+3 
    - Complexity: n 
* Chain [68] with precondition: [A>=1,B>=3,C>=1] 
    - Upper bound: B+C+1 
    - Complexity: n 
* Chain [67] with precondition: [B>=2,C>=1,A>=C+2] 
    - Upper bound: 2*A-2*C+(8*B+2+(A-C)*(2*B)+(6*C+6)) 
    - Complexity: n^2 
* Chain [66] with precondition: [B>=2,C>=1,A>=C+3] 
    - Upper bound: 4*A-4*C+(6*B+2+(A-C)*(4*B)+(4*C+4)) 
    - Complexity: n^2 

### Maximum cost of evalnestedLoopstart(A,B,C,D,E,F,G,H,I): max([max([max([nat(A)*2,nat(C)*2+1]),nat(C+1)*2+1+nat(A-C)*4+max([nat(C+1)*2,nat(A-C)*2])+(nat(C+1)+2)]),nat(B)+max([max([nat(C)+1,nat(B)*nat(A)+nat(A)+(nat(B)*nat(A)+nat(A))+(nat(B)*nat(A)+nat(A))]),nat(C+1)+2+(nat(B)+max([nat(C)*2,nat(B)*2*nat(A-C)+nat(B)*4+nat(C+1)*3+nat(A-C)*2+max([nat(C+1)*2+nat(B)*2,nat(B)*2*nat(A-C)+nat(A-C)*2])]))])]) 
Asymptotic class: n^2 
* Total analysis performed in 497 ms.

