MAYBE

Preprocessing Cost Relations
=====================================

#### Computed strongly connected components 
0. recursive  : [evalspeedFails4bb3in/6,evalspeedFails4bb4in/6,evalspeedFails4bb5in/6,evalspeedFails4bb6in/6]
1. non_recursive  : [evalspeedFails4stop/5]
2. non_recursive  : [evalspeedFails4returnin/5]
3. non_recursive  : [exit_location/1]
4. non_recursive  : [evalspeedFails4bb6in_loop_cont/6]
5. non_recursive  : [evalspeedFails4entryin/5]
6. non_recursive  : [evalspeedFails4start/5]

#### Obtained direct recursion through partial evaluation 
0. SCC is partially evaluated into evalspeedFails4bb6in/6
1. SCC is completely evaluated into other SCCs
2. SCC is completely evaluated into other SCCs
3. SCC is completely evaluated into other SCCs
4. SCC is partially evaluated into evalspeedFails4bb6in_loop_cont/6
5. SCC is partially evaluated into evalspeedFails4entryin/5
6. SCC is partially evaluated into evalspeedFails4start/5

Control-Flow Refinement of Cost Relations
=====================================

### Specialization of cost equations evalspeedFails4bb6in/6 
* CE 7 is refined into CE [10] 
* CE 6 is refined into CE [11] 
* CE 4 is refined into CE [12] 
* CE 5 is refined into CE [13] 


### Cost equations --> "Loop" of evalspeedFails4bb6in/6 
* CEs [12] --> Loop 10 
* CEs [13] --> Loop 11 
* CEs [10] --> Loop 12 
* CEs [11] --> Loop 13 

### Ranking functions of CR evalspeedFails4bb6in(A,B,C,D,E,F) 

#### Partial ranking functions of CR evalspeedFails4bb6in(A,B,C,D,E,F) 


### Specialization of cost equations evalspeedFails4bb6in_loop_cont/6 
* CE 9 is refined into CE [14] 
* CE 8 is refined into CE [15] 


### Cost equations --> "Loop" of evalspeedFails4bb6in_loop_cont/6 
* CEs [14] --> Loop 14 
* CEs [15] --> Loop 15 

### Ranking functions of CR evalspeedFails4bb6in_loop_cont(A,B,C,D,E,F) 

#### Partial ranking functions of CR evalspeedFails4bb6in_loop_cont(A,B,C,D,E,F) 


### Specialization of cost equations evalspeedFails4entryin/5 
* CE 2 is refined into CE [16,17,18,19,20,21] 
* CE 3 is refined into CE [22,23,24,25,26,27] 


### Cost equations --> "Loop" of evalspeedFails4entryin/5 
* CEs [20,21] --> Loop 16 
* CEs [26,27] --> Loop 17 
* CEs [17] --> Loop 18 
* CEs [16,19] --> Loop 19 
* CEs [18] --> Loop 20 
* CEs [23] --> Loop 21 
* CEs [22,24] --> Loop 22 
* CEs [25] --> Loop 23 

### Ranking functions of CR evalspeedFails4entryin(A,B,C,D,E) 

#### Partial ranking functions of CR evalspeedFails4entryin(A,B,C,D,E) 


### Specialization of cost equations evalspeedFails4start/5 
* CE 1 is refined into CE [28,29,30,31,32,33,34,35] 


### Cost equations --> "Loop" of evalspeedFails4start/5 
* CEs [35] --> Loop 24 
* CEs [34] --> Loop 25 
* CEs [33] --> Loop 26 
* CEs [32] --> Loop 27 
* CEs [31] --> Loop 28 
* CEs [30] --> Loop 29 
* CEs [29] --> Loop 30 
* CEs [28] --> Loop 31 

### Ranking functions of CR evalspeedFails4start(A,B,C,D,E) 

#### Partial ranking functions of CR evalspeedFails4start(A,B,C,D,E) 


Computing Bounds
=====================================

#### Cost of chains of evalspeedFails4bb6in(A,B,C,D,E,F):
* Chain [[11]]...: 1*it(11)+0
  with precondition: [1>=A,B>=D,A+1>=0,0>=C] 

* Chain [[11],13]: 1*it(11)+0
  with precondition: [A+1=0,E=2,B+1=F,0>=C,B>=D] 

* Chain [[11],12]: 1*it(11)+0
  with precondition: [E=3,1>=A,0>=C,A+1>=0,B>=D] 

* Chain [[10]]...: 1*it(10)+0
  with precondition: [1>=A,B>=D,A+1>=0,C>=1] 

* Chain [[10],13]: 1*it(10)+0
  with precondition: [A=1,E=2,B+1=F,C>=1,B>=D] 

* Chain [[10],12]: 1*it(10)+0
  with precondition: [E=3,1>=A,A+1>=0,C>=1,B>=D] 

* Chain [13]: 0
  with precondition: [E=2,D=F,1>=A,A+1>=0,D>=B+1] 

* Chain [12]: 0
  with precondition: [E=3,1>=A,A+1>=0] 


#### Cost of chains of evalspeedFails4bb6in_loop_cont(A,B,C,D,E,F):
* Chain [15]: 0
  with precondition: [A=2,1>=B,B+1>=0] 

* Chain [14]: 0
  with precondition: [A=3,1>=B,B+1>=0] 


#### Cost of chains of evalspeedFails4entryin(A,B,C,D,E):
* Chain [23]: 0
  with precondition: [0>=A] 

* Chain [22]: 1*aux(1)+0
  with precondition: [0>=A,C>=B] 

* Chain [21]: 0
  with precondition: [0>=A,B>=C+1] 

* Chain [20]: 0
  with precondition: [A>=1] 

* Chain [19]: 1*aux(2)+0
  with precondition: [A>=1,C>=B] 

* Chain [18]: 0
  with precondition: [A>=1,B>=C+1] 

* Chain [17]...: 1*aux(3)+0
  with precondition: [0>=A,C>=B] 

* Chain [16]...: 1*aux(4)+0
  with precondition: [A>=1,C>=B] 


#### Cost of chains of evalspeedFails4start(A,B,C,D,E):
* Chain [31]: 0
  with precondition: [0>=A] 

* Chain [30]: 1*s(9)+0
  with precondition: [0>=A,C>=B] 

* Chain [29]: 0
  with precondition: [0>=A,B>=C+1] 

* Chain [28]: 0
  with precondition: [A>=1] 

* Chain [27]: 1*s(10)+0
  with precondition: [A>=1,C>=B] 

* Chain [26]: 0
  with precondition: [A>=1,B>=C+1] 

* Chain [25]...: 1*s(11)+0
  with precondition: [0>=A,C>=B] 

* Chain [24]...: 1*s(12)+0
  with precondition: [A>=1,C>=B] 


Closed-form bounds of evalspeedFails4start(A,B,C,D,E): 
-------------------------------------
* Chain [31] with precondition: [0>=A] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [30] with precondition: [0>=A,C>=B] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [29] with precondition: [0>=A,B>=C+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [28] with precondition: [A>=1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [27] with precondition: [A>=1,C>=B] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [26] with precondition: [A>=1,B>=C+1] 
    - Upper bound: 0 
    - Complexity: constant 
* Chain [25]... with precondition: [0>=A,C>=B] 
    - Upper bound: inf 
    - Complexity: infinity 
* Chain [24]... with precondition: [A>=1,C>=B] 
    - Upper bound: inf 
    - Complexity: infinity 

### Maximum cost of evalspeedFails4start(A,B,C,D,E): inf 
Asymptotic class: infinity 
* Total analysis performed in 82 ms.

