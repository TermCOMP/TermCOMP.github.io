NO

# LoAT Proof:
NO

NO

Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f4 -> 2
f5 -> 3

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=3, i3'=1+i3
   1: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it2, i5'=1+it2, i6'=i5
   2: -2+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it3, i5'=1+it3, i6'=i5

Dependency graph:
1 -> 0, 1 -> 2
2 -> 0, 2 -> 2

Unrolled Loops

	Unrolling

	Original rule:
	-2+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it3, i5'=1+it3, i6'=i5
	New rule:
	(0 == 0 /\ -2+i1 == 0) /\ i1'=2, i3'=2+i3, i4'=it4, i5'=1+it4, i6'=1+it3
	
	Simplified Guard

	Original rule:
	(0 == 0 /\ -2+i1 == 0) /\ i1'=2, i3'=2+i3, i4'=it4, i5'=1+it4, i6'=1+it3
	New rule:
	-2+i1 == 0 /\ i1'=2, i3'=2+i3, i4'=it4, i5'=1+it4, i6'=1+it3

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f4 -> 2
f5 -> 3

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=3, i3'=1+i3
   1: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it2, i5'=1+it2, i6'=i5
   2: -2+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it3, i5'=1+it3, i6'=i5
   3: -2+i1 == 0 /\ i1'=2, i3'=2+i3, i4'=it4, i5'=1+it4, i6'=1+it3

Dependency graph:
1 -> 0, 1 -> 2, 1 -> 3
2 -> 0, 2 -> 2, 2 -> 3
3 -> 0, 3 -> 2, 3 -> 3

Refined Dependency Graph

	Removed the following edges: 1 -> 0, 2 -> 0, 3 -> 0

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f4 -> 2
f5 -> 3

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=3, i3'=1+i3
   1: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it2, i5'=1+it2, i6'=i5
   2: -2+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it3, i5'=1+it3, i6'=i5
   3: -2+i1 == 0 /\ i1'=2, i3'=2+i3, i4'=it4, i5'=1+it4, i6'=1+it3

Dependency graph:
1 -> 2, 1 -> 3
2 -> 2, 2 -> 3
3 -> 2, 3 -> 3

Step with 1

	Trace

	1[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 3

	Trace

	1[(-1+i1 == 0)]
	3[(-2+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-2+i1 == 0) /\ i1'=2, i3'=2+i3, i4'=it4, i5'=1+it4, i6'=1+it3
	New rule:
	(-2+i1 >= 0 /\ -1+it23 >= 0 /\ 2-i1 >= 0) /\ i1'=0

		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Loop Acceleration

	Original rule:
	(-2+i1 == 0) /\ i1'=2, i3'=2+i3, i4'=it4, i5'=1+it4, i6'=1+it3
	New rule:
	(-2+i1 >= 0 /\ -1+it23 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+2*it23, i4'=it4, i5'=1+it4, i6'=1+it3

		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ -1+it23 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+2*it23, i4'=it4, i5'=1+it4, i6'=1+it3
	New rule:
	(-2+i1 >= 0 /\ -1+it23 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+2*it23, i4'=it4, i5'=1+it4, i6'=1+it3

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f4 -> 2
f5 -> 3

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=3, i3'=1+i3
   1: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it2, i5'=1+it2, i6'=i5
   2: -2+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it3, i5'=1+it3, i6'=i5
   3: -2+i1 == 0 /\ i1'=2, i3'=2+i3, i4'=it4, i5'=1+it4, i6'=1+it3
   4: (-2+i1 >= 0 /\ -1+it23 >= 0 /\ 2-i1 >= 0) /\ i1'=0
   5: (-2+i1 >= 0 /\ -1+it23 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+2*it23, i4'=it4, i5'=1+it4, i6'=1+it3

Dependency graph:
1 -> 2, 1 -> 3, 1 -> 4, 1 -> 5
2 -> 2, 2 -> 3, 2 -> 4, 2 -> 5
3 -> 2, 3 -> 3, 3 -> 4, 3 -> 5
5 -> 2, 5 -> 3, 5 -> 4

Step with 4

	Trace

	1[(-1+i1 == 0)]
	4[(-2+i1 >= 0 /\ -1+it23 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{4[T]}
	
Refute

	Counterexample

	(i1=1, i3=-1, i5=0)
	-1-> (i1=2, i3=0, i4=0, i5=1, i6=0 )
	-4-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  D
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₁: l0(X₀, X₁, X₂) → l1(D, 1+D, X₁)
  t₂: l1(X₀, X₁, X₂) → l1(D, 1+D, X₁)
  t₀: l1(X₀, X₁, X₂) → l2(X₀, X₁, X₂) :|: 1+X₁ ≤ X₀


Preprocessing
  Cut unsatisfiable transition [t₀: l1→l2]


  Cut unreachable locations [l2] from the program graph


  Eliminate variables [D; X₀; X₁; X₂] that do not contribute to the problem


Problem after Preprocessing
  Start:  l0
  Program_Vars:  
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₃: l0 → l1
  t₄: l1 → l1


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₃: 1 {O(1)}
    t₄: inf {Infinity}


Costbounds
  Overall costbound: inf {Infinity}
    t₃: 1 {O(1)}
    t₄: inf {Infinity}


Sizebounds

