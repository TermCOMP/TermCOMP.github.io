WORST_CASE(Omega(n^1),O(n^1))

# LoAT Proof:
WORST_CASE(Omega(n^1),?)

WORST_CASE(Omega(n^1),?)
Initial ITS

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-1+i6-i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   2: (-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=-1+i6
   3: (-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i6'=-1+i6
   4: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -i6+i5 >= 0) /\ i1'=2, i3'=1+i3
   5: (-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0 /\ -i6+i5 >= 0) /\ i1'=2, i3'=1+i3
   6: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 2, 0 -> 3, 0 -> 4, 0 -> 5
1 -> 0, 1 -> 1, 1 -> 2, 1 -> 3, 1 -> 4, 1 -> 5
2 -> 0, 2 -> 1, 2 -> 2, 2 -> 3, 2 -> 4, 2 -> 5
3 -> 0, 3 -> 1, 3 -> 2, 3 -> 3, 3 -> 4, 3 -> 5
4 -> 0, 4 -> 1, 4 -> 2, 4 -> 3, 4 -> 4, 4 -> 5
5 -> 0, 5 -> 1, 5 -> 2, 5 -> 3, 5 -> 4, 5 -> 5
6 -> 0, 6 -> 1, 6 -> 2, 6 -> 3, 6 -> 4, 6 -> 5

Refined Dependency Graph

	Removed the following edges: 0 -> 2, 0 -> 4, 0 -> 5, 1 -> 2, 1 -> 4, 1 -> 5, 2 -> 0, 2 -> 1, 2 -> 2, 2 -> 3, 2 -> 4, 2 -> 5, 3 -> 0, 3 -> 1, 3 -> 2, 3 -> 4, 3 -> 5, 4 -> 0, 4 -> 1, 4 -> 2, 4 -> 3, 4 -> 4, 4 -> 5, 5 -> 0, 5 -> 1, 5 -> 2, 5 -> 3, 5 -> 4, 5 -> 5, 6 -> 2, 6 -> 4, 6 -> 5

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-1+i6-i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   2: (-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=-1+i6
   3: (-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i6'=-1+i6
   4: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -i6+i5 >= 0) /\ i1'=2, i3'=1+i3
   5: (-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0 /\ -i6+i5 >= 0) /\ i1'=2, i3'=1+i3
   6: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 3
1 -> 0, 1 -> 1, 1 -> 3
3 -> 3
6 -> 0, 6 -> 1, 6 -> 3

Step with 6

	Trace

	6[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 3

	Trace

	6[(-1+i1 == 0)]
	3[(-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Poly(n^1)

Accelerate

	Loop Acceleration

	Original rule:
	(-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i6'=-1+i6
	New rule:
	(-i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ i6-it11-i5 >= 0) /\ i1'=i1, i3'=i3+it11, i6'=i6-it11

		-1+i6-i5 >= 0 [0]: montonic decrease yields i6-it11-i5 >= 0
		
		-i4+i5 >= 0 [0]: unchanged
		
		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-1+i6-i5 >= 0 -> i6-it11-i5 >= 0, -i4+i5 >= 0 -> -i4+i5 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ i6-it11-i5 >= 0) /\ i1'=i1, i3'=i3+it11, i6'=i6-it11
	New rule:
	(-i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ i6-it11-i5 >= 0) /\ i3'=i3+it11, i6'=i6-it11
	
	Instantiation

	Original rule:
	(-i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it11 >= 0 /\ i6-it11-i5 >= 0) /\ i3'=i3+it11, i6'=i6-it11
	New rule:
	(0 >= 0 /\ -1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i6+i3-i5, i6'=i5

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-1+i6-i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   2: (-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=-1+i6
   3: (-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i6'=-1+i6
   4: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -i6+i5 >= 0) /\ i1'=2, i3'=1+i3
   5: (-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0 /\ -i6+i5 >= 0) /\ i1'=2, i3'=1+i3
   6: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   7: (0 >= 0 /\ -1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i6+i3-i5, i6'=i5

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 3, 0 -> 7
1 -> 0, 1 -> 1, 1 -> 3, 1 -> 7
3 -> 3, 3 -> 7
6 -> 0, 6 -> 1, 6 -> 3, 6 -> 7
7 -> 3

	Trace

	6[(-1+i1 == 0)]
	7[(0 >= 0 /\ -1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{3[T], 7[T]}
	
Backtrack

	Trace

	6[(-1+i1 == 0)]
	
	Blocked

	{}
	{7[T]}
	
Step with 1

	Trace

	6[(-1+i1 == 0)]
	1[(-1+i6-i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{7[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-1+i6-i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
	New rule:
	(-1+it32 >= 0 /\ -1+i6-i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i4-i5-it32 >= 0) /\ i1'=i1, i3'=i3+it32, i4'=i4-it32

		-1+i6-i5 >= 0 [0]: unchanged
		
		-2+i1 >= 0 [0]: unchanged
		
		-1+i4-i5 >= 0 [0]: montonic decrease yields i4-i5-it32 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-1+i6-i5 >= 0 -> -1+i6-i5 >= 0, -2+i1 >= 0 -> -2+i1 >= 0, -1+i4-i5 >= 0 -> i4-i5-it32 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-1+it32 >= 0 /\ -1+i6-i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i4-i5-it32 >= 0) /\ i1'=i1, i3'=i3+it32, i4'=i4-it32
	New rule:
	(-1+it32 >= 0 /\ -1+i6-i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i4-i5-it32 >= 0) /\ i3'=i3+it32, i4'=i4-it32
	
	Instantiation

	Original rule:
	(-1+it32 >= 0 /\ -1+i6-i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ i4-i5-it32 >= 0) /\ i3'=i3+it32, i4'=i4-it32
	New rule:
	(0 >= 0 /\ -1+i6-i5 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4-i5, i4'=i5

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-1+i6-i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   2: (-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=-1+i6
   3: (-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i6'=-1+i6
   4: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -i6+i5 >= 0) /\ i1'=2, i3'=1+i3
   5: (-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0 /\ -i6+i5 >= 0) /\ i1'=2, i3'=1+i3
   6: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   7: (0 >= 0 /\ -1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i6+i3-i5, i6'=i5
   8: (0 >= 0 /\ -1+i6-i5 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4-i5, i4'=i5

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 3, 0 -> 7, 0 -> 8
1 -> 0, 1 -> 1, 1 -> 3, 1 -> 7, 1 -> 8
3 -> 3, 3 -> 7
6 -> 0, 6 -> 1, 6 -> 3, 6 -> 7, 6 -> 8
7 -> 3
8 -> 0, 8 -> 1, 8 -> 3, 8 -> 7

	Trace

	6[(-1+i1 == 0)]
	8[(0 >= 0 /\ -1+i6-i5 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{7[T]}
	{1[T], 8[T]}
	
Step with 3

	Trace

	6[(-1+i1 == 0)]
	8[(0 >= 0 /\ -1+i6-i5 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0)]
	3[(-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{7[T]}
	{1[T], 8[T]}
	{}
	
Covered

	Trace

	6[(-1+i1 == 0)]
	8[(0 >= 0 /\ -1+i6-i5 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{7[T]}
	{1[T], 3[T], 8[T]}
	
Step with 7

	Trace

	6[(-1+i1 == 0)]
	8[(0 >= 0 /\ -1+i6-i5 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0)]
	7[(0 >= 0 /\ -1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{7[T]}
	{1[T], 3[T], 8[T]}
	{7[T]}
	
Backtrack

	Trace

	6[(-1+i1 == 0)]
	8[(0 >= 0 /\ -1+i6-i5 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{7[T]}
	{1[T], 3[T], 7[T], 8[T]}
	
Backtrack

	Trace

	6[(-1+i1 == 0)]
	
	Blocked

	{}
	{7[T], 8[T]}
	
Step with 0

	Trace

	6[(-1+i1 == 0)]
	0[(-2+i1 == 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{7[T], 8[T]}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
	New rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it53 >= 0 /\ i4-it53-i5 >= 0) /\ i1'=i1, i3'=i3+it53, i4'=i4-it53

		-2+i1 >= 0 [0]: unchanged
		
		-1+i4-i5 >= 0 [0]: montonic decrease yields i4-it53-i5 >= 0
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, -1+i4-i5 >= 0 -> i4-it53-i5 >= 0, 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it53 >= 0 /\ i4-it53-i5 >= 0) /\ i1'=i1, i3'=i3+it53, i4'=i4-it53
	New rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it53 >= 0 /\ i4-it53-i5 >= 0) /\ i3'=i3+it53, i4'=i4-it53
	
	Instantiation

	Original rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it53 >= 0 /\ i4-it53-i5 >= 0) /\ i3'=i3+it53, i4'=i4-it53
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4-i5, i4'=i5

Start location: start

Location map:
LoAT_sink -> 0
start -> 1
eval -> 2

Rules:
   0: (-2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   1: (-1+i6-i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=-1+i4
   2: (-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0) /\ i1'=2, i3'=1+i3, i6'=-1+i6
   3: (-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0) /\ i1'=2, i3'=1+i3, i6'=-1+i6
   4: (-i4+i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0 /\ -i6+i5 >= 0) /\ i1'=2, i3'=1+i3
   5: (-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0 /\ -i6+i5 >= 0) /\ i1'=2, i3'=1+i3
   6: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   7: (0 >= 0 /\ -1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0) /\ i3'=i6+i3-i5, i6'=i5
   8: (0 >= 0 /\ -1+i6-i5 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4-i5, i4'=i5
   9: (0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+i4-i5, i4'=i5

Dependency graph:
0 -> 0, 0 -> 1, 0 -> 3, 0 -> 7, 0 -> 8, 0 -> 9
1 -> 0, 1 -> 1, 1 -> 3, 1 -> 7, 1 -> 8, 1 -> 9
3 -> 3, 3 -> 7
6 -> 0, 6 -> 1, 6 -> 3, 6 -> 7, 6 -> 8, 6 -> 9
7 -> 3
8 -> 0, 8 -> 1, 8 -> 3, 8 -> 7, 8 -> 9
9 -> 0, 9 -> 1, 9 -> 3, 9 -> 7, 9 -> 8

	Trace

	6[(-1+i1 == 0)]
	9[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{7[T], 8[T]}
	{0[T], 9[T]}
	
Step with 3

	Trace

	6[(-1+i1 == 0)]
	9[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0)]
	3[(-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{7[T], 8[T]}
	{0[T], 9[T]}
	{}
	
Covered

	Trace

	6[(-1+i1 == 0)]
	9[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{7[T], 8[T]}
	{0[T], 3[T], 9[T]}
	
Step with 7

	Trace

	6[(-1+i1 == 0)]
	9[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0)]
	7[(0 >= 0 /\ -1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{7[T], 8[T]}
	{0[T], 3[T], 9[T]}
	{7[T]}
	
Backtrack

	Trace

	6[(-1+i1 == 0)]
	9[(0 >= 0 /\ -2+i1 >= 0 /\ -1+i4-i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{7[T], 8[T]}
	{0[T], 3[T], 7[T], 9[T]}
	
Backtrack

	Trace

	6[(-1+i1 == 0)]
	
	Blocked

	{}
	{7[T], 8[T], 9[T]}
	
Step with 3

	Trace

	6[(-1+i1 == 0)]
	3[(-1+i6-i5 >= 0 /\ -i4+i5 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{7[T], 8[T], 9[T]}
	{}
	
Covered

	Trace

	6[(-1+i1 == 0)]
	
	Blocked

	{}
	{3[T], 7[T], 8[T], 9[T]}
	
Step with 0

	Trace

	6[(-1+i1 == 0)]
	0[(-2+i1 == 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{3[T], 7[T], 8[T], 9[T]}
	{}
	
Covered

	Trace

	6[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 3[T], 7[T], 8[T], 9[T]}
	
Step with 1

	Trace

	6[(-1+i1 == 0)]
	1[(-1+i6-i5 >= 0 /\ -2+i1 == 0 /\ -1+i4-i5 >= 0)]
	
	Blocked

	{}
	{0[T], 3[T], 7[T], 8[T], 9[T]}
	{}
	
Covered

	Trace

	6[(-1+i1 == 0)]
	
	Blocked

	{}
	{0[T], 1[T], 3[T], 7[T], 8[T], 9[T]}
	
Backtrack

	Trace

	Blocked

	{6[T]}
	
Accept

Poly(n^1)


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(n^1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₆: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₀: l1(X₀, X₁, X₂) → l1(X₀-1, X₁, X₂) :|: 1+X₁ ≤ X₀
  t₁: l1(X₀, X₁, X₂) → l1(X₀-1, X₁, X₂) :|: 1+X₁ ≤ X₀ ∧ 1+X₁ ≤ X₂
  t₂: l1(X₀, X₁, X₂) → l1(X₀, X₁, X₂-1) :|: 1+X₁ ≤ X₀ ∧ 1+X₁ ≤ X₂ ∧ X₀ ≤ X₁
  t₃: l1(X₀, X₁, X₂) → l1(X₀, X₁, X₂-1) :|: 1+X₁ ≤ X₂ ∧ X₀ ≤ X₁
  t₄: l1(X₀, X₁, X₂) → l1(X₀, X₁, X₂) :|: 1+X₁ ≤ X₀ ∧ X₀ ≤ X₁ ∧ X₂ ≤ X₁
  t₅: l1(X₀, X₁, X₂) → l1(X₀, X₁, X₂) :|: 1+X₁ ≤ X₂ ∧ X₀ ≤ X₁ ∧ X₂ ≤ X₁


Preprocessing
  Cut unsatisfiable transition [t₂: l1→l1; t₄: l1→l1; t₅: l1→l1]


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  
  Locations:  l0, l1
  Return Locations:  
  Transitions:
  t₆: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₀: l1(X₀, X₁, X₂) → l1(X₀-1, X₁, X₂) :|: 1+X₁ ≤ X₀
  t₁: l1(X₀, X₁, X₂) → l1(X₀-1, X₁, X₂) :|: 1+X₁ ≤ X₀ ∧ 1+X₁ ≤ X₂
  t₃: l1(X₀, X₁, X₂) → l1(X₀, X₁, X₂-1) :|: 1+X₁ ≤ X₂ ∧ X₀ ≤ X₁


MPRF for transition t₀: l1(X₀, X₁, X₂) → l1(X₀-1, X₁, X₂) :|: 1+X₁ ≤ X₀ of depth 1:
  new bound:
    X₀+X₁ {O(n)}

  MPRF:
    • l1: [X₀-X₁]




MPRF for transition t₁: l1(X₀, X₁, X₂) → l1(X₀-1, X₁, X₂) :|: 1+X₁ ≤ X₀ ∧ 1+X₁ ≤ X₂ of depth 1:
  new bound:
    X₀+X₁ {O(n)}

  MPRF:
    • l1: [X₀-X₁]




MPRF for transition t₃: l1(X₀, X₁, X₂) → l1(X₀, X₁, X₂-1) :|: 1+X₁ ≤ X₂ ∧ X₀ ≤ X₁ of depth 1:
  new bound:
    X₁+X₂ {O(n)}

  MPRF:
    • l1: [X₂-X₁]




All Bounds
Timebounds
  Overall timebound:2⋅X₀+3⋅X₁+X₂+1 {O(n)}
    t₀: X₀+X₁ {O(n)}
    t₁: X₀+X₁ {O(n)}
    t₃: X₁+X₂ {O(n)}
    t₆: 1 {O(1)}


Costbounds
  Overall costbound: 2⋅X₀+3⋅X₁+X₂+1 {O(n)}
    t₀: X₀+X₁ {O(n)}
    t₁: X₀+X₁ {O(n)}
    t₃: X₁+X₂ {O(n)}
    t₆: 1 {O(1)}


Sizebounds
    t₀, X₀: 2⋅X₁+3⋅X₀ {O(n)}
    t₀, X₁: X₁ {O(n)}
    t₀, X₂: X₂ {O(n)}
    t₁, X₀: 2⋅X₁+3⋅X₀ {O(n)}
    t₁, X₁: X₁ {O(n)}
    t₁, X₂: X₂ {O(n)}
    t₃, X₀: 4⋅X₁+7⋅X₀ {O(n)}
    t₃, X₁: X₁ {O(n)}
    t₃, X₂: 4⋅X₂+X₁ {O(n)}
    t₆, X₀: X₀ {O(n)}
    t₆, X₁: X₁ {O(n)}
    t₆, X₂: X₂ {O(n)}

