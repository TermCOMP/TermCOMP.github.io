NO

# LoAT Proof:
NO

NO

Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f3 -> 2
f6 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0, i5'=0
   1: (-2+i1 == 0 /\ -1+it2 >= 0 /\ -1+i6 >= 0) /\ i1'=2, i3'=1+i3, i6'=-1+i6, i7'=it2
   2: (-2+i1 == 0 /\ -it3 >= 0 /\ -1+i6 >= 0) /\ i1'=2, i3'=1+i3, i6'=-2+i6, i7'=it3
   3: (-i6 >= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3, i8'=it4
   4: (-3+i1 == 0 /\ -1+i8 >= 0) /\ i1'=3, i3'=1+i3, i4'=1, i8'=it5
   5: (-3+i1 == 0 /\ -i8 >= 0) /\ i1'=3, i3'=1+i3, i4'=0, i8'=it6

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3
1 -> 1, 1 -> 2, 1 -> 3
2 -> 1, 2 -> 2, 2 -> 3
3 -> 4, 3 -> 5
4 -> 4, 4 -> 5
5 -> 4, 5 -> 5

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 3

	Trace

	0[(-1+i1 == 0)]
	3[(-i6 >= 0 /\ -2+i1 == 0)]
	
	Blocked

	{}
	{}
	{}
	
Step with 5

	Trace

	0[(-1+i1 == 0)]
	3[(-i6 >= 0 /\ -2+i1 == 0)]
	5[(-3+i1 == 0 /\ -i8 >= 0)]
	
	Blocked

	{}
	{}
	{}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-3+i1 == 0 /\ -i8 >= 0) /\ i1'=3, i3'=1+i3, i4'=0, i8'=it6
	New rule:
	(-3+i1 >= 0 /\ -i8 >= 0 /\ it6-i8 <= 0 /\ 3-i1 >= 0) /\ i1'=0

		-3+i1 >= 0 [0]: unchanged
		
		-i8 >= 0 [0]: eventual decrease yields (-it6 >= 0 /\ -i8 >= 0)
		
		-i8 >= 0 [1]: eventual increase yields (-i8 >= 0 /\ it6-i8 <= 0)
		
		3-i1 >= 0 [0]: unchanged
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, -i8 >= 0 -> (-i8 >= 0 /\ it6-i8 <= 0), 3-i1 >= 0 -> 3-i1 >= 0}

	Loop Acceleration

	Original rule:
	(-3+i1 == 0 /\ -i8 >= 0) /\ i1'=3, i3'=1+i3, i4'=0, i8'=it6
	New rule:
	(-3+i1 >= 0 /\ -it6 >= 0 /\ -i8 >= 0 /\ 3-i1 >= 0 /\ -1+it34 >= 0) /\ i1'=i1, i3'=i3+it34, i4'=0, i8'=it6

		-3+i1 >= 0 [0]: unchanged
		
		-i8 >= 0 [0]: eventual decrease yields (-it6 >= 0 /\ -i8 >= 0)
		
		-i8 >= 0 [1]: eventual increase yields (-i8 >= 0 /\ it6-i8 <= 0)
		
		3-i1 >= 0 [0]: unchanged
		
		Replacement map: {-3+i1 >= 0 -> -3+i1 >= 0, -i8 >= 0 -> (-it6 >= 0 /\ -i8 >= 0), 3-i1 >= 0 -> 3-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	(-3+i1 >= 0 /\ -it6 >= 0 /\ -i8 >= 0 /\ 3-i1 >= 0 /\ -1+it34 >= 0) /\ i1'=i1, i3'=i3+it34, i4'=0, i8'=it6
	New rule:
	(-3+i1 >= 0 /\ -it6 >= 0 /\ -i8 >= 0 /\ 3-i1 >= 0 /\ -1+it34 >= 0) /\ i3'=i3+it34, i4'=0, i8'=it6

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f3 -> 2
f6 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=0, i5'=0
   1: (-2+i1 == 0 /\ -1+it2 >= 0 /\ -1+i6 >= 0) /\ i1'=2, i3'=1+i3, i6'=-1+i6, i7'=it2
   2: (-2+i1 == 0 /\ -it3 >= 0 /\ -1+i6 >= 0) /\ i1'=2, i3'=1+i3, i6'=-2+i6, i7'=it3
   3: (-i6 >= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3, i8'=it4
   4: (-3+i1 == 0 /\ -1+i8 >= 0) /\ i1'=3, i3'=1+i3, i4'=1, i8'=it5
   5: (-3+i1 == 0 /\ -i8 >= 0) /\ i1'=3, i3'=1+i3, i4'=0, i8'=it6
   6: (-3+i1 >= 0 /\ -i8 >= 0 /\ it6-i8 <= 0 /\ 3-i1 >= 0) /\ i1'=0
   7: (-3+i1 >= 0 /\ -it6 >= 0 /\ -i8 >= 0 /\ 3-i1 >= 0 /\ -1+it34 >= 0) /\ i3'=i3+it34, i4'=0, i8'=it6

Dependency graph:
0 -> 1, 0 -> 2, 0 -> 3
1 -> 1, 1 -> 2, 1 -> 3
2 -> 1, 2 -> 2, 2 -> 3
3 -> 4, 3 -> 5, 3 -> 6, 3 -> 7
4 -> 4, 4 -> 5, 4 -> 6, 4 -> 7
5 -> 4, 5 -> 5, 5 -> 6, 5 -> 7
7 -> 4, 7 -> 5, 7 -> 6

Step with 6

	Trace

	0[(-1+i1 == 0)]
	3[(-i6 >= 0 /\ -2+i1 == 0)]
	6[(-3+i1 >= 0 /\ -i8 >= 0 /\ it6-i8 <= 0 /\ 3-i1 >= 0)]
	
	Blocked

	{}
	{}
	{}
	{6[T]}
	
Refute

	Counterexample

	(i1=1, i3=-1, i6=0, i7=0, i8=0)
	-0-> (i1=2, i3=0, i4=0, i5=0, i6=0, i7=0, i8=0 )
	-3-> (i1=3, i3=1, i4=0, i5=0, i6=0, i7=0, i8=0 )
	-6-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂, X₃, X₄
  Temp_Vars:  F
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁, X₂, X₃, X₄) → l1(0, 0, X₂, X₃, X₄)
  t₁: l1(X₀, X₁, X₂, X₃, X₄) → l1(X₀, X₁, X₂-1, F, X₄) :|: 1 ≤ F ∧ 1 ≤ X₂
  t₂: l1(X₀, X₁, X₂, X₃, X₄) → l1(X₀, X₁, X₂-2, F, X₄) :|: 1 ≤ X₂ ∧ F ≤ 0
  t₃: l1(X₀, X₁, X₂, X₃, X₄) → l2(X₀, X₁, X₂, X₃, F) :|: X₂ ≤ 0
  t₄: l2(X₀, X₁, X₂, X₃, X₄) → l2(1, X₁, X₂, X₃, F) :|: 1 ≤ X₄
  t₅: l2(X₀, X₁, X₂, X₃, X₄) → l2(0, X₁, X₂, X₃, F) :|: X₄ ≤ 0


Preprocessing
  Eliminate variables [X₀; X₁; X₃] that do not contribute to the problem


  Found invariant X₀ ≤ 0 for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  F
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₆: l0(X₀, X₁) → l1(X₀, X₁)
  t₇: l1(X₀, X₁) → l1(X₀-1, X₁) :|: 1 ≤ F ∧ 1 ≤ X₀
  t₈: l1(X₀, X₁) → l1(X₀-2, X₁) :|: 1 ≤ X₀ ∧ F ≤ 0
  t₉: l1(X₀, X₁) → l2(X₀, F) :|: X₀ ≤ 0
  t₁₀: l2(X₀, X₁) → l2(X₀, F) :|: 1 ≤ X₁ ∧ X₀ ≤ 0
  t₁₁: l2(X₀, X₁) → l2(X₀, F) :|: X₁ ≤ 0 ∧ X₀ ≤ 0


MPRF for transition t₇: l1(X₀, X₁) → l1(X₀-1, X₁) :|: 1 ≤ F ∧ 1 ≤ X₀ of depth 1:
  new bound:
    X₀ {O(n)}

  MPRF:
    • l1: [X₀]




MPRF for transition t₈: l1(X₀, X₁) → l1(X₀-2, X₁) :|: 1 ≤ X₀ ∧ F ≤ 0 of depth 1:
  new bound:
    X₀ {O(n)}

  MPRF:
    • l1: [X₀]




  Found invariant X₀ ≤ 0 for location l2_v1


  Found invariant X₀ ≤ 0 for location l2


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₆: 1 {O(1)}
    t₇: X₀ {O(n)}
    t₈: X₀ {O(n)}
    t₉: 1 {O(1)}
    t₁₀: inf {Infinity}
    t₁₁: inf {Infinity}


Costbounds
  Overall costbound: inf {Infinity}
    t₆: 1 {O(1)}
    t₇: X₀ {O(n)}
    t₈: X₀ {O(n)}
    t₉: 1 {O(1)}
    t₁₀: inf {Infinity}
    t₁₁: inf {Infinity}


Sizebounds
    t₆, X₀: X₀ {O(n)}
    t₆, X₁: X₁ {O(n)}
    t₇, X₀: X₀ {O(n)}
    t₇, X₁: X₁ {O(n)}
    t₈, X₀: X₀ {O(n)}
    t₈, X₁: X₁ {O(n)}
    t₉, X₀: 3⋅X₀ {O(n)}
    t₁₀, X₀: 3⋅X₀ {O(n)}
    t₁₁, X₀: 3⋅X₀ {O(n)}

