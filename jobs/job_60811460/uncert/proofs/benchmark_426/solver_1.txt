NO

# LoAT Proof:
NO

NO

Initial ITS

Start location: f300

Location map:
LoAT_sink -> 0
f300 -> 1
f2 -> 2
f1 -> 3

Rules:
   0: (-1-i4-i5 >= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3, i4'=i4+i5, i6'=it2
   1: (-2+i1 == 0 /\ i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i4+i5
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3

Dependency graph:
1 -> 0, 1 -> 1
2 -> 0, 2 -> 1

Step with 2

	Trace

	2[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 1

	Trace

	2[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ i4+i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Nonterm

	Certificate of Non-Termination

	Original rule:
	(-2+i1 == 0 /\ i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i4+i5
	New rule:
	(-2+i1 >= 0 /\ -i5 <= 0 /\ i4+i5 >= 0 /\ 2-i1 >= 0) /\ i1'=0

		-2+i1 >= 0 [0]: unchanged
		
		i4+i5 >= 0 [0]: eventual decrease yields ((-1+it13)*i5+i4+i5 >= 0 /\ i4+i5 >= 0)
		
		i4+i5 >= 0 [1]: eventual increase yields (-i5 <= 0 /\ i4+i5 >= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, i4+i5 >= 0 -> (-i5 <= 0 /\ i4+i5 >= 0), 2-i1 >= 0 -> 2-i1 >= 0}

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i4+i5
	New rule:
	((-1+it13)*i5+i4+i5 >= 0 /\ -2+i1 >= 0 /\ i4+i5 >= 0 /\ -1+it13 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it13, i4'=i4+it13*i5

		-2+i1 >= 0 [0]: unchanged
		
		i4+i5 >= 0 [0]: eventual decrease yields ((-1+it13)*i5+i4+i5 >= 0 /\ i4+i5 >= 0)
		
		i4+i5 >= 0 [1]: eventual increase yields (-i5 <= 0 /\ i4+i5 >= 0)
		
		2-i1 >= 0 [0]: unchanged
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, i4+i5 >= 0 -> ((-1+it13)*i5+i4+i5 >= 0 /\ i4+i5 >= 0), 2-i1 >= 0 -> 2-i1 >= 0}

	Removed Trivial Updates

	Original rule:
	((-1+it13)*i5+i4+i5 >= 0 /\ -2+i1 >= 0 /\ i4+i5 >= 0 /\ -1+it13 >= 0 /\ 2-i1 >= 0) /\ i1'=i1, i3'=i3+it13, i4'=i4+it13*i5
	New rule:
	((-1+it13)*i5+i4+i5 >= 0 /\ -2+i1 >= 0 /\ i4+i5 >= 0 /\ -1+it13 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it13, i4'=i4+it13*i5

Start location: f300

Location map:
LoAT_sink -> 0
f300 -> 1
f2 -> 2
f1 -> 3

Rules:
   0: (-1-i4-i5 >= 0 /\ -2+i1 == 0) /\ i1'=3, i3'=1+i3, i4'=i4+i5, i6'=it2
   1: (-2+i1 == 0 /\ i4+i5 >= 0) /\ i1'=2, i3'=1+i3, i4'=i4+i5
   2: -1+i1 == 0 /\ i1'=2, i3'=1+i3
   3: (-2+i1 >= 0 /\ -i5 <= 0 /\ i4+i5 >= 0 /\ 2-i1 >= 0) /\ i1'=0
   4: ((-1+it13)*i5+i4+i5 >= 0 /\ -2+i1 >= 0 /\ i4+i5 >= 0 /\ -1+it13 >= 0 /\ 2-i1 >= 0) /\ i3'=i3+it13, i4'=i4+it13*i5

Dependency graph:
1 -> 0, 1 -> 1, 1 -> 3, 1 -> 4
2 -> 0, 2 -> 1, 2 -> 3, 2 -> 4
4 -> 0, 4 -> 1, 4 -> 3

Step with 3

	Trace

	2[(-1+i1 == 0)]
	3[(-2+i1 >= 0 /\ -i5 <= 0 /\ i4+i5 >= 0 /\ 2-i1 >= 0)]
	
	Blocked

	{}
	{}
	{3[T]}
	
Refute

	Counterexample

	(i1=1, i3=-1, i4=0, i5=0, i6=0)
	-2-> (i1=2, i3=0, i4=0, i5=0, i6=0 )
	-3-> ( )
	
NO

Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
MAYBE


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁, X₂
  Temp_Vars:  D
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₂: l0(X₀, X₁, X₂) → l1(X₀, X₁, X₂)
  t₁: l1(X₀, X₁, X₂) → l1(X₀+X₁, X₁, X₂) :|: 0 ≤ X₀+X₁
  t₀: l1(X₀, X₁, X₂) → l2(X₀+X₁, X₁, D) :|: 1+X₀+X₁ ≤ 0


Preprocessing
  Eliminate variables [D; X₂] that do not contribute to the problem


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₃: l0(X₀, X₁) → l1(X₀, X₁)
  t₄: l1(X₀, X₁) → l1(X₀+X₁, X₁) :|: 0 ≤ X₀+X₁
  t₅: l1(X₀, X₁) → l2(X₀+X₁, X₁) :|: 1+X₀+X₁ ≤ 0


All Bounds
Timebounds
  Overall timebound:inf {Infinity}
    t₃: 1 {O(1)}
    t₄: inf {Infinity}
    t₅: 1 {O(1)}


Costbounds
  Overall costbound: inf {Infinity}
    t₃: 1 {O(1)}
    t₄: inf {Infinity}
    t₅: 1 {O(1)}


Sizebounds
    t₃, X₀: X₀ {O(n)}
    t₃, X₁: X₁ {O(n)}
    t₄, X₁: X₁ {O(n)}
    t₅, X₁: 2⋅X₁ {O(n)}

