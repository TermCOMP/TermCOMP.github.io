WORST_CASE(?,O(1))

# LoAT Proof:
Initial ITS

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f6 -> 2
f15 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it2, i5'=0
   1: (-2+i1 == 0 /\ 9-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
   2: (-2+i1 == 0 /\ -10+i5 >= 0) /\ i1'=3, i3'=1+i3

Dependency graph:
0 -> 1, 0 -> 2
1 -> 1, 1 -> 2

Refined Dependency Graph

	Removed the following edges: 0 -> 2

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f6 -> 2
f15 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it2, i5'=0
   1: (-2+i1 == 0 /\ 9-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
   2: (-2+i1 == 0 /\ -10+i5 >= 0) /\ i1'=3, i3'=1+i3

Dependency graph:
0 -> 1
1 -> 1, 1 -> 2

Step with 0

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ 9-i5 >= 0)]
	
	Blocked

	{}
	{}
	{}
	
Accelerate

	Loop Acceleration

	Original rule:
	(-2+i1 == 0 /\ 9-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
	New rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0 /\ 10-it12-i5 >= 0) /\ i1'=i1, i3'=i3+it12, i5'=it12+i5

		-2+i1 >= 0 [0]: unchanged
		
		2-i1 >= 0 [0]: unchanged
		
		9-i5 >= 0 [0]: montonic decrease yields 10-it12-i5 >= 0
		
		Replacement map: {-2+i1 >= 0 -> -2+i1 >= 0, 2-i1 >= 0 -> 2-i1 >= 0, 9-i5 >= 0 -> 10-it12-i5 >= 0}

	Removed Trivial Updates

	Original rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0 /\ 10-it12-i5 >= 0) /\ i1'=i1, i3'=i3+it12, i5'=it12+i5
	New rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0 /\ 10-it12-i5 >= 0) /\ i3'=i3+it12, i5'=it12+i5
	
	Instantiation

	Original rule:
	(-2+i1 >= 0 /\ 2-i1 >= 0 /\ -1+it12 >= 0 /\ 10-it12-i5 >= 0) /\ i3'=i3+it12, i5'=it12+i5
	New rule:
	(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ 9-i5 >= 0) /\ i3'=10+i3-i5, i5'=10

Start location: f0

Location map:
LoAT_sink -> 0
f0 -> 1
f6 -> 2
f15 -> 3

Rules:
   0: -1+i1 == 0 /\ i1'=2, i3'=1+i3, i4'=it2, i5'=0
   1: (-2+i1 == 0 /\ 9-i5 >= 0) /\ i1'=2, i3'=1+i3, i5'=1+i5
   2: (-2+i1 == 0 /\ -10+i5 >= 0) /\ i1'=3, i3'=1+i3
   3: (0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ 9-i5 >= 0) /\ i3'=10+i3-i5, i5'=10

Dependency graph:
0 -> 1, 0 -> 3
1 -> 1, 1 -> 2, 1 -> 3
3 -> 1, 3 -> 2

	Trace

	0[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ 9-i5 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 3[T]}
	
Step with 2

	Trace

	0[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ 9-i5 >= 0)]
	2[(-2+i1 == 0 /\ -10+i5 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 3[T]}
	{}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	3[(0 >= 0 /\ -2+i1 >= 0 /\ 2-i1 >= 0 /\ 9-i5 >= 0)]
	
	Blocked

	{}
	{}
	{1[T], 2[T], 3[T]}
	
Backtrack

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{3[T]}
	
Step with 1

	Trace

	0[(-1+i1 == 0)]
	1[(-2+i1 == 0 /\ 9-i5 >= 0)]
	
	Blocked

	{}
	{3[T]}
	{}
	
Covered

	Trace

	0[(-1+i1 == 0)]
	
	Blocked

	{}
	{1[T], 3[T]}
	
Backtrack

	Trace

	Blocked

	{0[T]}
	
Accept

Constant


Build SHA: 6b55ffa0f2e04038cf304ba1a3fdb6d4d62c77f7

# KoAT Proof:
WORST_CASE(?, O(1))


Initial Problem
  Start:  l0
  Program_Vars:  X₀, X₁
  Temp_Vars:  C
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₀: l0(X₀, X₁) → l1(C, 0)
  t₁: l1(X₀, X₁) → l1(X₀, 1+X₁) :|: X₁ ≤ 9
  t₂: l1(X₀, X₁) → l2(X₀, X₁) :|: 10 ≤ X₁


Preprocessing
  Eliminate variables [C; X₀] that do not contribute to the problem


  Found invariant X₀ ≤ 10 ∧ 0 ≤ X₀ for location l1


  Found invariant X₀ ≤ 10 ∧ 10 ≤ X₀ for location l2


Problem after Preprocessing
  Start:  l0
  Program_Vars:  X₀
  Temp_Vars:  
  Locations:  l0, l1, l2
  Return Locations:  
  Transitions:
  t₃: l0(X₀) → l1(0)
  t₄: l1(X₀) → l1(1+X₀) :|: X₀ ≤ 9 ∧ X₀ ≤ 10 ∧ 0 ≤ X₀
  t₅: l1(X₀) → l2(X₀) :|: 10 ≤ X₀ ∧ X₀ ≤ 10 ∧ 0 ≤ X₀


MPRF for transition t₄: l1(X₀) → l1(1+X₀) :|: X₀ ≤ 9 ∧ X₀ ≤ 10 ∧ 0 ≤ X₀ of depth 1:
  new bound:
    11 {O(1)}

  MPRF:
    • l1: [11-X₀]




All Bounds
Timebounds
  Overall timebound:13 {O(1)}
    t₃: 1 {O(1)}
    t₄: 11 {O(1)}
    t₅: 1 {O(1)}


Costbounds
  Overall costbound: 13 {O(1)}
    t₃: 1 {O(1)}
    t₄: 11 {O(1)}
    t₅: 1 {O(1)}


Sizebounds
    t₃, X₀: 0 {O(1)}
    t₄, X₀: 10 {O(1)}
    t₅, X₀: 10 {O(1)}

