Graph construction failed
Graph construction failed
Graph construction failed
MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/EM0eu.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

plans(g,g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) NotTransformerProof [EQUIVALENT, 0 ms]
(2) Prolog
    (3) CallTransformerProof [EQUIVALENT, 0 ms]
    (4) Prolog
    (5) CutEliminatorProof [SOUND, 0 ms]
    (6) Prolog
    (7) FailTransformerProof [EQUIVALENT, 0 ms]
    (8) Prolog
    (9) UnifyTransformerProof [EQUIVALENT, 0 ms]
    (10) Prolog
    (11) UndefinedPredicateHandlerProof [SOUND, 0 ms]
    (12) Prolog
(13) IntegerArithmeticTransformerProof [SOUND, 0 ms]
(14) Prolog
    (15) NotTransformerProof [EQUIVALENT, 0 ms]
    (16) Prolog
    (17) CallTransformerProof [EQUIVALENT, 0 ms]
    (18) Prolog
    (19) CutEliminatorProof [SOUND, 0 ms]
    (20) Prolog
    (21) FailTransformerProof [EQUIVALENT, 0 ms]
    (22) Prolog
    (23) UnifyTransformerProof [EQUIVALENT, 0 ms]
    (24) Prolog
    (25) UndefinedPredicateHandlerProof [SOUND, 0 ms]
    (26) Prolog


----------------------------------------

(0)
Obligation:
Clauses:

plans(C, X1) :- ','(not(consistent(C, true)), ','(!, ','(nl, ','(write('impossible'), nl)))).
plans(C, T) :- ','(time(M0), ','(plan(C, true, T, T1), ','(time(M1), ','(nl, ','(output(T1), ','(nl, ','(is(Time, /(-(M1, M0), 1000)), ','(write(Time), ','(write(' secs.'), nl))))))))).
time(T) :- statistics(runtime, .(T, .(X2, []))).
output(::(T, U)) :- ','(!, ','(output1(T), ','(write(U), ','(write('.'), nl)))).
output(T) :- ','(write(T), ','(write('.'), nl)).
output1('!!'(T, U)) :- ','(!, ','(output1(T), ','(write(U), ','(write(';'), nl)))).
output1(T) :- ','(write(T), ','(write(';'), nl)).
plan('##'(X, C), P, T, T2) :- ','(!, ','(solve(X, P, T, P1, T1), plan(C, P1, T1, T2))).
plan(X, P, T, T1) :- solve(X, P, T, X3, T1).
solve(X, P, T, P, T) :- always(X).
solve(X, P, T, P1, T) :- ','(holds(X, T), and(X, P, P1)).
solve(X, P, T, '##'(X, P), T1) :- ','(add(X, U), achieve(X, U, P, T, T1)).
achieve(X4, U, P, T, ::(T1, U)) :- ','(preserves(U, P), ','(can(U, C), ','(consistent(C, P), ','(plan(C, P, T, T1), preserves(U, P))))).
achieve(X, U, P, ::(T, V), ::(T1, V)) :- ','(preserved(X, V), ','(retrace(P, V, P1), ','(achieve(X, U, P1, T, T1), preserved(X, V)))).
holds(X, ::(X5, V)) :- add(X, V).
holds(X, ::(T, V)) :- ','(!, ','(preserved(X, V), ','(holds(X, T), preserved(X, V)))).
holds(X, T) :- given(T, X).
preserved(X, V) :- ','(mkground('##'(X, V), 0, X6), ','(del(X, V), ','(!, fail))).
preserved(X7, X8).
preserves(U, '##'(X, C)) :- ','(preserved(X, U), preserves(U, C)).
preserves(X9, true).
retrace(P, V, P2) :- ','(can(V, C), ','(retrace1(P, V, C, P1), conjoin(C, P1, P2))).
retrace1('##'(X, P), V, C, P1) :- ','(add(Y, V), ','(equiv(X, Y), ','(!, retrace1(P, V, C, P1)))).
retrace1('##'(X, P), V, C, P1) :- ','(elem(Y, C), ','(equiv(X, Y), ','(!, retrace1(P, V, C, P1)))).
retrace1('##'(X, P), V, C, '##'(X, P1)) :- retrace1(P, V, C, P1).
retrace1(true, X10, X11, true).
consistent(C, P) :- ','(mkground('##'(C, P), 0, X12), ','(imposs(S), ','(not(not(intersect(C, S))), ','(implied(S, '##'(C, P)), ','(!, fail))))).
consistent(X13, X14).
and(X, P, P) :- ','(elem(Y, P), ','(equiv(X, Y), !)).
and(X, P, '##'(X, P)).
conjoin('##'(X, C), P, '##'(X, P1)) :- ','(!, conjoin(C, P, P1)).
conjoin(X, P, '##'(X, P)).
elem(X, '##'(Y, X15)) :- elem(X, Y).
elem(X, '##'(X16, C)) :- ','(!, elem(X, C)).
elem(X, X).
intersect(S1, S2) :- ','(elem(X, S1), elem(X, S2)).
implied('##'(S1, S2), C) :- ','(!, ','(implied(S1, C), implied(S2, C))).
implied(X, C) :- elem(X, C).
notequal(X, Y) :- ','(not(=(X, Y)), ','(not(=(X, qqq(X17))), not(=(Y, qqq(X18))))).
equiv(X, Y) :- not(nonequiv(X, Y)).
nonequiv(X, Y) :- ','(mkground('##'(X, Y), 0, X19), ','(=(X, Y), ','(!, fail))).
nonequiv(X20, X21).
mkground(qqq(N1), N1, N2) :- ','(!, is(N2, +(N1, 1))).
mkground(qqq(X22), N1, N1) :- !.
mkground(X, N1, N2) :- ','(=..(X, .(X23, L)), mkgroundlist(L, N1, N2)).
mkgroundlist(.(X, L), N1, N3) :- ','(mkground(X, N1, N2), mkgroundlist(L, N2, N3)).
mkgroundlist([], N1, N1).
test1 :- plans(status(lightswitch(1), on), start).
test2 :- plans('##'(nextto(box(1), box(2)), nextto(box(2), box(3))), start).
test3 :- plans(at(robot, point(6)), start).
test4 :- plans('##'('##'('##'('##'(nextto(box(2), box(3)), nextto(box(3), door(1))), status(lightswitch(1), on)), nextto(box(1), box(2))), inroom(robot, room(2))), start).
imposs(X24) :- fail.
add(at(robot, P), goto1(P, X25)).
add(nextto(robot, X), goto2(X, X26)).
add(nextto(X, Y), pushto(X, Y, X27)).
add(nextto(Y, X), pushto(X, Y, X28)).
add(status(S, on), turnon(S)).
add(on(robot, B), climbon(B)).
add(onfloor, climboff(X29)).
add(inroom(robot, R2), gothru(X30, X31, R2)).
del(at(X, X32), U) :- moved(X, U).
del(nextto(Z, robot), U) :- ','(!, del(nextto(robot, Z), U)).
del(nextto(robot, X), pushto(X, X33, X34)) :- ','(!, fail).
del(nextto(robot, B), climbon(B)) :- ','(!, fail).
del(nextto(robot, B), climboff(B)) :- ','(!, fail).
del(nextto(X, X35), U) :- moved(X, U).
del(nextto(X36, X), U) :- moved(X, U).
del(on(X, X37), U) :- moved(X, U).
del(onfloor, climbon(X38)).
del(inroom(robot, X39), gothru(X40, X41, X42)).
del(status(S, X43), turnon(S)).
moved(robot, goto1(X44, X45)).
moved(robot, goto2(X46, X47)).
moved(robot, pushto(X48, X49, X50)).
moved(X, pushto(X, X51, X52)).
moved(robot, climbon(X53)).
moved(robot, climboff(X54)).
moved(robot, gothru(X55, X56, X57)).
can(goto1(P, R), '##'('##'(locinroom(P, R), inroom(robot, R)), onfloor)).
can(goto2(X, R), '##'('##'(inroom(X, R), inroom(robot, R)), onfloor)).
can(pushto(X, Y, R), '##'('##'('##'('##'(pushable(X), inroom(Y, R)), inroom(X, R)), nextto(robot, X)), onfloor)).
can(turnon(lightswitch(S)), '##'(on(robot, box(1)), nextto(box(1), lightswitch(S)))).
can(climbon(box(B)), '##'(nextto(robot, box(B)), onfloor)).
can(climboff(box(B)), on(robot, box(B))).
can(gothru(D, R1, R2), '##'('##'('##'(connects(D, R1, R2), inroom(robot, R1)), nextto(robot, D)), onfloor)).
always(connects(D, R1, R2)) :- connects1(D, R1, R2).
always(connects(D, R2, R1)) :- connects1(D, R1, R2).
always(inroom(D, R1)) :- always(connects(D, X58, R1)).
always(pushable(box(X59))).
always(locinroom(point(6), room(4))).
always(inroom(lightswitch(1), room(1))).
always(at(lightswitch(1), point(4))).
connects1(door(N), room(N), room(5)) :- range(N, 1, 4).
range(M, M, X60).
range(M, L, N) :- ','(<(L, N), ','(is(L1, +(L, 1)), range(M, L1, N))).
given(start, at(box(N), point(N))) :- range(N, 1, 3).
given(start, at(robot, point(5))).
given(start, inroom(box(N), room(1))) :- range(N, 1, 3).
given(start, inroom(robot, room(1))).
given(start, onfloor).
given(start, status(lightswitch(1), off)).
not(P) :- \+(P).


Query: plans(g,g)
----------------------------------------

(1) NotTransformerProof (EQUIVALENT)
Transformed all not-constructs [PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

plans(C, X1) :- ','(not(consistent(C, true)), ','(!, ','(nl, ','(write('impossible'), nl)))).
plans(C, T) :- ','(time(M0), ','(plan(C, true, T, T1), ','(time(M1), ','(nl, ','(output(T1), ','(nl, ','(is(Time, /(-(M1, M0), 1000)), ','(write(Time), ','(write(' secs.'), nl))))))))).
time(T) :- statistics(runtime, .(T, .(X2, []))).
output(::(T, U)) :- ','(!, ','(output1(T), ','(write(U), ','(write('.'), nl)))).
output(T) :- ','(write(T), ','(write('.'), nl)).
output1('!!'(T, U)) :- ','(!, ','(output1(T), ','(write(U), ','(write(';'), nl)))).
output1(T) :- ','(write(T), ','(write(';'), nl)).
plan('##'(X, C), P, T, T2) :- ','(!, ','(solve(X, P, T, P1, T1), plan(C, P1, T1, T2))).
plan(X, P, T, T1) :- solve(X, P, T, X3, T1).
solve(X, P, T, P, T) :- always(X).
solve(X, P, T, P1, T) :- ','(holds(X, T), and(X, P, P1)).
solve(X, P, T, '##'(X, P), T1) :- ','(add(X, U), achieve(X, U, P, T, T1)).
achieve(X4, U, P, T, ::(T1, U)) :- ','(preserves(U, P), ','(can(U, C), ','(consistent(C, P), ','(plan(C, P, T, T1), preserves(U, P))))).
achieve(X, U, P, ::(T, V), ::(T1, V)) :- ','(preserved(X, V), ','(retrace(P, V, P1), ','(achieve(X, U, P1, T, T1), preserved(X, V)))).
holds(X, ::(X5, V)) :- add(X, V).
holds(X, ::(T, V)) :- ','(!, ','(preserved(X, V), ','(holds(X, T), preserved(X, V)))).
holds(X, T) :- given(T, X).
preserved(X, V) :- ','(mkground('##'(X, V), 0, X6), ','(del(X, V), ','(!, fail))).
preserved(X7, X8).
preserves(U, '##'(X, C)) :- ','(preserved(X, U), preserves(U, C)).
preserves(X9, true).
retrace(P, V, P2) :- ','(can(V, C), ','(retrace1(P, V, C, P1), conjoin(C, P1, P2))).
retrace1('##'(X, P), V, C, P1) :- ','(add(Y, V), ','(equiv(X, Y), ','(!, retrace1(P, V, C, P1)))).
retrace1('##'(X, P), V, C, P1) :- ','(elem(Y, C), ','(equiv(X, Y), ','(!, retrace1(P, V, C, P1)))).
retrace1('##'(X, P), V, C, '##'(X, P1)) :- retrace1(P, V, C, P1).
retrace1(true, X10, X11, true).
consistent(C, P) :- ','(mkground('##'(C, P), 0, X12), ','(imposs(S), ','(not(not(intersect(C, S))), ','(implied(S, '##'(C, P)), ','(!, fail))))).
consistent(X13, X14).
and(X, P, P) :- ','(elem(Y, P), ','(equiv(X, Y), !)).
and(X, P, '##'(X, P)).
conjoin('##'(X, C), P, '##'(X, P1)) :- ','(!, conjoin(C, P, P1)).
conjoin(X, P, '##'(X, P)).
elem(X, '##'(Y, X15)) :- elem(X, Y).
elem(X, '##'(X16, C)) :- ','(!, elem(X, C)).
elem(X, X).
intersect(S1, S2) :- ','(elem(X, S1), elem(X, S2)).
implied('##'(S1, S2), C) :- ','(!, ','(implied(S1, C), implied(S2, C))).
implied(X, C) :- elem(X, C).
notequal(X, Y) :- ','(not(=(X, Y)), ','(not(=(X, qqq(X17))), not(=(Y, qqq(X18))))).
equiv(X, Y) :- not(nonequiv(X, Y)).
nonequiv(X, Y) :- ','(mkground('##'(X, Y), 0, X19), ','(=(X, Y), ','(!, fail))).
nonequiv(X20, X21).
mkground(qqq(N1), N1, N2) :- ','(!, is(N2, +(N1, 1))).
mkground(qqq(X22), N1, N1) :- !.
mkground(X, N1, N2) :- ','(=..(X, .(X23, L)), mkgroundlist(L, N1, N2)).
mkgroundlist(.(X, L), N1, N3) :- ','(mkground(X, N1, N2), mkgroundlist(L, N2, N3)).
mkgroundlist([], N1, N1).
test1 :- plans(status(lightswitch(1), on), start).
test2 :- plans('##'(nextto(box(1), box(2)), nextto(box(2), box(3))), start).
test3 :- plans(at(robot, point(6)), start).
test4 :- plans('##'('##'('##'('##'(nextto(box(2), box(3)), nextto(box(3), door(1))), status(lightswitch(1), on)), nextto(box(1), box(2))), inroom(robot, room(2))), start).
imposs(X24) :- fail.
add(at(robot, P), goto1(P, X25)).
add(nextto(robot, X), goto2(X, X26)).
add(nextto(X, Y), pushto(X, Y, X27)).
add(nextto(Y, X), pushto(X, Y, X28)).
add(status(S, on), turnon(S)).
add(on(robot, B), climbon(B)).
add(onfloor, climboff(X29)).
add(inroom(robot, R2), gothru(X30, X31, R2)).
del(at(X, X32), U) :- moved(X, U).
del(nextto(Z, robot), U) :- ','(!, del(nextto(robot, Z), U)).
del(nextto(robot, X), pushto(X, X33, X34)) :- ','(!, fail).
del(nextto(robot, B), climbon(B)) :- ','(!, fail).
del(nextto(robot, B), climboff(B)) :- ','(!, fail).
del(nextto(X, X35), U) :- moved(X, U).
del(nextto(X36, X), U) :- moved(X, U).
del(on(X, X37), U) :- moved(X, U).
del(onfloor, climbon(X38)).
del(inroom(robot, X39), gothru(X40, X41, X42)).
del(status(S, X43), turnon(S)).
moved(robot, goto1(X44, X45)).
moved(robot, goto2(X46, X47)).
moved(robot, pushto(X48, X49, X50)).
moved(X, pushto(X, X51, X52)).
moved(robot, climbon(X53)).
moved(robot, climboff(X54)).
moved(robot, gothru(X55, X56, X57)).
can(goto1(P, R), '##'('##'(locinroom(P, R), inroom(robot, R)), onfloor)).
can(goto2(X, R), '##'('##'(inroom(X, R), inroom(robot, R)), onfloor)).
can(pushto(X, Y, R), '##'('##'('##'('##'(pushable(X), inroom(Y, R)), inroom(X, R)), nextto(robot, X)), onfloor)).
can(turnon(lightswitch(S)), '##'(on(robot, box(1)), nextto(box(1), lightswitch(S)))).
can(climbon(box(B)), '##'(nextto(robot, box(B)), onfloor)).
can(climboff(box(B)), on(robot, box(B))).
can(gothru(D, R1, R2), '##'('##'('##'(connects(D, R1, R2), inroom(robot, R1)), nextto(robot, D)), onfloor)).
always(connects(D, R1, R2)) :- connects1(D, R1, R2).
always(connects(D, R2, R1)) :- connects1(D, R1, R2).
always(inroom(D, R1)) :- always(connects(D, X58, R1)).
always(pushable(box(X59))).
always(locinroom(point(6), room(4))).
always(inroom(lightswitch(1), room(1))).
always(at(lightswitch(1), point(4))).
connects1(door(N), room(N), room(5)) :- range(N, 1, 4).
range(M, M, X60).
range(M, L, N) :- ','(<(L, N), ','(is(L1, +(L, 1)), range(M, L1, N))).
given(start, at(box(N), point(N))) :- range(N, 1, 3).
given(start, at(robot, point(5))).
given(start, inroom(box(N), room(1))) :- range(N, 1, 3).
given(start, inroom(robot, room(1))).
given(start, onfloor).
given(start, status(lightswitch(1), off)).
not(P) :- not1(P).
not1(P) :- ','(call(P), ','(!, fail)).
not1(P).


Query: plans(g,g)
----------------------------------------

(3) CallTransformerProof (EQUIVALENT)
Transformed all call-constructs [PROLOG].
----------------------------------------

(4)
Obligation:
Clauses:

plans(C, X1) :- ','(not(consistent(C, true)), ','(!, ','(nl, ','(write('impossible'), nl)))).
plans(C, T) :- ','(time(M0), ','(plan(C, true, T, T1), ','(time(M1), ','(nl, ','(output(T1), ','(nl, ','(is(Time, /(-(M1, M0), 1000)), ','(write(Time), ','(write(' secs.'), nl))))))))).
time(T) :- statistics(runtime, .(T, .(X2, []))).
output(::(T, U)) :- ','(!, ','(output1(T), ','(write(U), ','(write('.'), nl)))).
output(T) :- ','(write(T), ','(write('.'), nl)).
output1('!!'(T, U)) :- ','(!, ','(output1(T), ','(write(U), ','(write(';'), nl)))).
output1(T) :- ','(write(T), ','(write(';'), nl)).
plan('##'(X, C), P, T, T2) :- ','(!, ','(solve(X, P, T, P1, T1), plan(C, P1, T1, T2))).
plan(X, P, T, T1) :- solve(X, P, T, X3, T1).
solve(X, P, T, P, T) :- always(X).
solve(X, P, T, P1, T) :- ','(holds(X, T), and(X, P, P1)).
solve(X, P, T, '##'(X, P), T1) :- ','(add(X, U), achieve(X, U, P, T, T1)).
achieve(X4, U, P, T, ::(T1, U)) :- ','(preserves(U, P), ','(can(U, C), ','(consistent(C, P), ','(plan(C, P, T, T1), preserves(U, P))))).
achieve(X, U, P, ::(T, V), ::(T1, V)) :- ','(preserved(X, V), ','(retrace(P, V, P1), ','(achieve(X, U, P1, T, T1), preserved(X, V)))).
holds(X, ::(X5, V)) :- add(X, V).
holds(X, ::(T, V)) :- ','(!, ','(preserved(X, V), ','(holds(X, T), preserved(X, V)))).
holds(X, T) :- given(T, X).
preserved(X, V) :- ','(mkground('##'(X, V), 0, X6), ','(del(X, V), ','(!, fail))).
preserved(X7, X8).
preserves(U, '##'(X, C)) :- ','(preserved(X, U), preserves(U, C)).
preserves(X9, true).
retrace(P, V, P2) :- ','(can(V, C), ','(retrace1(P, V, C, P1), conjoin(C, P1, P2))).
retrace1('##'(X, P), V, C, P1) :- ','(add(Y, V), ','(equiv(X, Y), ','(!, retrace1(P, V, C, P1)))).
retrace1('##'(X, P), V, C, P1) :- ','(elem(Y, C), ','(equiv(X, Y), ','(!, retrace1(P, V, C, P1)))).
retrace1('##'(X, P), V, C, '##'(X, P1)) :- retrace1(P, V, C, P1).
retrace1(true, X10, X11, true).
consistent(C, P) :- ','(mkground('##'(C, P), 0, X12), ','(imposs(S), ','(not(not(intersect(C, S))), ','(implied(S, '##'(C, P)), ','(!, fail))))).
consistent(X13, X14).
and(X, P, P) :- ','(elem(Y, P), ','(equiv(X, Y), !)).
and(X, P, '##'(X, P)).
conjoin('##'(X, C), P, '##'(X, P1)) :- ','(!, conjoin(C, P, P1)).
conjoin(X, P, '##'(X, P)).
elem(X, '##'(Y, X15)) :- elem(X, Y).
elem(X, '##'(X16, C)) :- ','(!, elem(X, C)).
elem(X, X).
intersect(S1, S2) :- ','(elem(X, S1), elem(X, S2)).
implied('##'(S1, S2), C) :- ','(!, ','(implied(S1, C), implied(S2, C))).
implied(X, C) :- elem(X, C).
notequal(X, Y) :- ','(not(=(X, Y)), ','(not(=(X, qqq(X17))), not(=(Y, qqq(X18))))).
equiv(X, Y) :- not(nonequiv(X, Y)).
nonequiv(X, Y) :- ','(mkground('##'(X, Y), 0, X19), ','(=(X, Y), ','(!, fail))).
nonequiv(X20, X21).
mkground(qqq(N1), N1, N2) :- ','(!, is(N2, +(N1, 1))).
mkground(qqq(X22), N1, N1) :- !.
mkground(X, N1, N2) :- ','(=..(X, .(X23, L)), mkgroundlist(L, N1, N2)).
mkgroundlist(.(X, L), N1, N3) :- ','(mkground(X, N1, N2), mkgroundlist(L, N2, N3)).
mkgroundlist([], N1, N1).
test1 :- plans(status(lightswitch(1), on), start).
test2 :- plans('##'(nextto(box(1), box(2)), nextto(box(2), box(3))), start).
test3 :- plans(at(robot, point(6)), start).
test4 :- plans('##'('##'('##'('##'(nextto(box(2), box(3)), nextto(box(3), door(1))), status(lightswitch(1), on)), nextto(box(1), box(2))), inroom(robot, room(2))), start).
imposs(X24) :- fail.
add(at(robot, P), goto1(P, X25)).
add(nextto(robot, X), goto2(X, X26)).
add(nextto(X, Y), pushto(X, Y, X27)).
add(nextto(Y, X), pushto(X, Y, X28)).
add(status(S, on), turnon(S)).
add(on(robot, B), climbon(B)).
add(onfloor, climboff(X29)).
add(inroom(robot, R2), gothru(X30, X31, R2)).
del(at(X, X32), U) :- moved(X, U).
del(nextto(Z, robot), U) :- ','(!, del(nextto(robot, Z), U)).
del(nextto(robot, X), pushto(X, X33, X34)) :- ','(!, fail).
del(nextto(robot, B), climbon(B)) :- ','(!, fail).
del(nextto(robot, B), climboff(B)) :- ','(!, fail).
del(nextto(X, X35), U) :- moved(X, U).
del(nextto(X36, X), U) :- moved(X, U).
del(on(X, X37), U) :- moved(X, U).
del(onfloor, climbon(X38)).
del(inroom(robot, X39), gothru(X40, X41, X42)).
del(status(S, X43), turnon(S)).
moved(robot, goto1(X44, X45)).
moved(robot, goto2(X46, X47)).
moved(robot, pushto(X48, X49, X50)).
moved(X, pushto(X, X51, X52)).
moved(robot, climbon(X53)).
moved(robot, climboff(X54)).
moved(robot, gothru(X55, X56, X57)).
can(goto1(P, R), '##'('##'(locinroom(P, R), inroom(robot, R)), onfloor)).
can(goto2(X, R), '##'('##'(inroom(X, R), inroom(robot, R)), onfloor)).
can(pushto(X, Y, R), '##'('##'('##'('##'(pushable(X), inroom(Y, R)), inroom(X, R)), nextto(robot, X)), onfloor)).
can(turnon(lightswitch(S)), '##'(on(robot, box(1)), nextto(box(1), lightswitch(S)))).
can(climbon(box(B)), '##'(nextto(robot, box(B)), onfloor)).
can(climboff(box(B)), on(robot, box(B))).
can(gothru(D, R1, R2), '##'('##'('##'(connects(D, R1, R2), inroom(robot, R1)), nextto(robot, D)), onfloor)).
always(connects(D, R1, R2)) :- connects1(D, R1, R2).
always(connects(D, R2, R1)) :- connects1(D, R1, R2).
always(inroom(D, R1)) :- always(connects(D, X58, R1)).
always(pushable(box(X59))).
always(locinroom(point(6), room(4))).
always(inroom(lightswitch(1), room(1))).
always(at(lightswitch(1), point(4))).
connects1(door(N), room(N), room(5)) :- range(N, 1, 4).
range(M, M, X60).
range(M, L, N) :- ','(<(L, N), ','(is(L1, +(L, 1)), range(M, L1, N))).
given(start, at(box(N), point(N))) :- range(N, 1, 3).
given(start, at(robot, point(5))).
given(start, inroom(box(N), room(1))) :- range(N, 1, 3).
given(start, inroom(robot, room(1))).
given(start, onfloor).
given(start, status(lightswitch(1), off)).
not(P) :- not1(P).
not1(P) :- ','(call1(P), ','(!, fail)).
not1(P).
call1(P) :- P.


Query: plans(g,g)
----------------------------------------

(5) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(6)
Obligation:
Clauses:

plans(C, X1) :- ','(not(consistent(C, true)), ','(nl, ','(write('impossible'), nl))).
plans(C, T) :- ','(time(M0), ','(plan(C, true, T, T1), ','(time(M1), ','(nl, ','(output(T1), ','(nl, ','(is(Time, /(-(M1, M0), 1000)), ','(write(Time), ','(write(' secs.'), nl))))))))).
time(T) :- statistics(runtime, .(T, .(X2, []))).
output(::(T, U)) :- ','(output1(T), ','(write(U), ','(write('.'), nl))).
output(T) :- ','(write(T), ','(write('.'), nl)).
output1('!!'(T, U)) :- ','(output1(T), ','(write(U), ','(write(';'), nl))).
output1(T) :- ','(write(T), ','(write(';'), nl)).
plan('##'(X, C), P, T, T2) :- ','(solve(X, P, T, P1, T1), plan(C, P1, T1, T2)).
plan(X, P, T, T1) :- solve(X, P, T, X3, T1).
solve(X, P, T, P, T) :- always(X).
solve(X, P, T, P1, T) :- ','(holds(X, T), and(X, P, P1)).
solve(X, P, T, '##'(X, P), T1) :- ','(add(X, U), achieve(X, U, P, T, T1)).
achieve(X4, U, P, T, ::(T1, U)) :- ','(preserves(U, P), ','(can(U, C), ','(consistent(C, P), ','(plan(C, P, T, T1), preserves(U, P))))).
achieve(X, U, P, ::(T, V), ::(T1, V)) :- ','(preserved(X, V), ','(retrace(P, V, P1), ','(achieve(X, U, P1, T, T1), preserved(X, V)))).
holds(X, ::(X5, V)) :- add(X, V).
holds(X, ::(T, V)) :- ','(preserved(X, V), ','(holds(X, T), preserved(X, V))).
holds(X, T) :- given(T, X).
preserved(X, V) :- ','(mkground('##'(X, V), 0, X6), ','(del(X, V), fail)).
preserved(X7, X8).
preserves(U, '##'(X, C)) :- ','(preserved(X, U), preserves(U, C)).
preserves(X9, true).
retrace(P, V, P2) :- ','(can(V, C), ','(retrace1(P, V, C, P1), conjoin(C, P1, P2))).
retrace1('##'(X, P), V, C, P1) :- ','(add(Y, V), ','(equiv(X, Y), retrace1(P, V, C, P1))).
retrace1('##'(X, P), V, C, P1) :- ','(elem(Y, C), ','(equiv(X, Y), retrace1(P, V, C, P1))).
retrace1('##'(X, P), V, C, '##'(X, P1)) :- retrace1(P, V, C, P1).
retrace1(true, X10, X11, true).
consistent(C, P) :- ','(mkground('##'(C, P), 0, X12), ','(imposs(S), ','(not(not(intersect(C, S))), ','(implied(S, '##'(C, P)), fail)))).
consistent(X13, X14).
and(X, P, P) :- ','(elem(Y, P), equiv(X, Y)).
and(X, P, '##'(X, P)).
conjoin('##'(X, C), P, '##'(X, P1)) :- conjoin(C, P, P1).
conjoin(X, P, '##'(X, P)).
elem(X, '##'(Y, X15)) :- elem(X, Y).
elem(X, '##'(X16, C)) :- elem(X, C).
elem(X, X).
intersect(S1, S2) :- ','(elem(X, S1), elem(X, S2)).
implied('##'(S1, S2), C) :- ','(implied(S1, C), implied(S2, C)).
implied(X, C) :- elem(X, C).
notequal(X, Y) :- ','(not(=(X, Y)), ','(not(=(X, qqq(X17))), not(=(Y, qqq(X18))))).
equiv(X, Y) :- not(nonequiv(X, Y)).
nonequiv(X, Y) :- ','(mkground('##'(X, Y), 0, X19), ','(=(X, Y), fail)).
nonequiv(X20, X21).
mkground(qqq(N1), N1, N2) :- is(N2, +(N1, 1)).
mkground(qqq(X22), N1, N1).
mkground(X, N1, N2) :- ','(=..(X, .(X23, L)), mkgroundlist(L, N1, N2)).
mkgroundlist(.(X, L), N1, N3) :- ','(mkground(X, N1, N2), mkgroundlist(L, N2, N3)).
mkgroundlist([], N1, N1).
test1 :- plans(status(lightswitch(1), on), start).
test2 :- plans('##'(nextto(box(1), box(2)), nextto(box(2), box(3))), start).
test3 :- plans(at(robot, point(6)), start).
test4 :- plans('##'('##'('##'('##'(nextto(box(2), box(3)), nextto(box(3), door(1))), status(lightswitch(1), on)), nextto(box(1), box(2))), inroom(robot, room(2))), start).
imposs(X24) :- fail.
add(at(robot, P), goto1(P, X25)).
add(nextto(robot, X), goto2(X, X26)).
add(nextto(X, Y), pushto(X, Y, X27)).
add(nextto(Y, X), pushto(X, Y, X28)).
add(status(S, on), turnon(S)).
add(on(robot, B), climbon(B)).
add(onfloor, climboff(X29)).
add(inroom(robot, R2), gothru(X30, X31, R2)).
del(at(X, X32), U) :- moved(X, U).
del(nextto(Z, robot), U) :- del(nextto(robot, Z), U).
del(nextto(robot, X), pushto(X, X33, X34)) :- fail.
del(nextto(robot, B), climbon(B)) :- fail.
del(nextto(robot, B), climboff(B)) :- fail.
del(nextto(X, X35), U) :- moved(X, U).
del(nextto(X36, X), U) :- moved(X, U).
del(on(X, X37), U) :- moved(X, U).
del(onfloor, climbon(X38)).
del(inroom(robot, X39), gothru(X40, X41, X42)).
del(status(S, X43), turnon(S)).
moved(robot, goto1(X44, X45)).
moved(robot, goto2(X46, X47)).
moved(robot, pushto(X48, X49, X50)).
moved(X, pushto(X, X51, X52)).
moved(robot, climbon(X53)).
moved(robot, climboff(X54)).
moved(robot, gothru(X55, X56, X57)).
can(goto1(P, R), '##'('##'(locinroom(P, R), inroom(robot, R)), onfloor)).
can(goto2(X, R), '##'('##'(inroom(X, R), inroom(robot, R)), onfloor)).
can(pushto(X, Y, R), '##'('##'('##'('##'(pushable(X), inroom(Y, R)), inroom(X, R)), nextto(robot, X)), onfloor)).
can(turnon(lightswitch(S)), '##'(on(robot, box(1)), nextto(box(1), lightswitch(S)))).
can(climbon(box(B)), '##'(nextto(robot, box(B)), onfloor)).
can(climboff(box(B)), on(robot, box(B))).
can(gothru(D, R1, R2), '##'('##'('##'(connects(D, R1, R2), inroom(robot, R1)), nextto(robot, D)), onfloor)).
always(connects(D, R1, R2)) :- connects1(D, R1, R2).
always(connects(D, R2, R1)) :- connects1(D, R1, R2).
always(inroom(D, R1)) :- always(connects(D, X58, R1)).
always(pushable(box(X59))).
always(locinroom(point(6), room(4))).
always(inroom(lightswitch(1), room(1))).
always(at(lightswitch(1), point(4))).
connects1(door(N), room(N), room(5)) :- range(N, 1, 4).
range(M, M, X60).
range(M, L, N) :- ','(<(L, N), ','(is(L1, +(L, 1)), range(M, L1, N))).
given(start, at(box(N), point(N))) :- range(N, 1, 3).
given(start, at(robot, point(5))).
given(start, inroom(box(N), room(1))) :- range(N, 1, 3).
given(start, inroom(robot, room(1))).
given(start, onfloor).
given(start, status(lightswitch(1), off)).
not(P) :- not1(P).
not1(P) :- ','(call1(P), fail).
not1(P).
call1(P) :- P.


Query: plans(g,g)
----------------------------------------

(7) FailTransformerProof (EQUIVALENT)
Added clauses for the built-in fail predicate [PROLOG].
----------------------------------------

(8)
Obligation:
Clauses:

plans(C, X1) :- ','(not(consistent(C, true)), ','(nl, ','(write('impossible'), nl))).
plans(C, T) :- ','(time(M0), ','(plan(C, true, T, T1), ','(time(M1), ','(nl, ','(output(T1), ','(nl, ','(is(Time, /(-(M1, M0), 1000)), ','(write(Time), ','(write(' secs.'), nl))))))))).
time(T) :- statistics(runtime, .(T, .(X2, []))).
output(::(T, U)) :- ','(output1(T), ','(write(U), ','(write('.'), nl))).
output(T) :- ','(write(T), ','(write('.'), nl)).
output1('!!'(T, U)) :- ','(output1(T), ','(write(U), ','(write(';'), nl))).
output1(T) :- ','(write(T), ','(write(';'), nl)).
plan('##'(X, C), P, T, T2) :- ','(solve(X, P, T, P1, T1), plan(C, P1, T1, T2)).
plan(X, P, T, T1) :- solve(X, P, T, X3, T1).
solve(X, P, T, P, T) :- always(X).
solve(X, P, T, P1, T) :- ','(holds(X, T), and(X, P, P1)).
solve(X, P, T, '##'(X, P), T1) :- ','(add(X, U), achieve(X, U, P, T, T1)).
achieve(X4, U, P, T, ::(T1, U)) :- ','(preserves(U, P), ','(can(U, C), ','(consistent(C, P), ','(plan(C, P, T, T1), preserves(U, P))))).
achieve(X, U, P, ::(T, V), ::(T1, V)) :- ','(preserved(X, V), ','(retrace(P, V, P1), ','(achieve(X, U, P1, T, T1), preserved(X, V)))).
holds(X, ::(X5, V)) :- add(X, V).
holds(X, ::(T, V)) :- ','(preserved(X, V), ','(holds(X, T), preserved(X, V))).
holds(X, T) :- given(T, X).
preserved(X, V) :- ','(mkground('##'(X, V), 0, X6), ','(del(X, V), fail)).
preserved(X7, X8).
preserves(U, '##'(X, C)) :- ','(preserved(X, U), preserves(U, C)).
preserves(X9, true).
retrace(P, V, P2) :- ','(can(V, C), ','(retrace1(P, V, C, P1), conjoin(C, P1, P2))).
retrace1('##'(X, P), V, C, P1) :- ','(add(Y, V), ','(equiv(X, Y), retrace1(P, V, C, P1))).
retrace1('##'(X, P), V, C, P1) :- ','(elem(Y, C), ','(equiv(X, Y), retrace1(P, V, C, P1))).
retrace1('##'(X, P), V, C, '##'(X, P1)) :- retrace1(P, V, C, P1).
retrace1(true, X10, X11, true).
consistent(C, P) :- ','(mkground('##'(C, P), 0, X12), ','(imposs(S), ','(not(not(intersect(C, S))), ','(implied(S, '##'(C, P)), fail)))).
consistent(X13, X14).
and(X, P, P) :- ','(elem(Y, P), equiv(X, Y)).
and(X, P, '##'(X, P)).
conjoin('##'(X, C), P, '##'(X, P1)) :- conjoin(C, P, P1).
conjoin(X, P, '##'(X, P)).
elem(X, '##'(Y, X15)) :- elem(X, Y).
elem(X, '##'(X16, C)) :- elem(X, C).
elem(X, X).
intersect(S1, S2) :- ','(elem(X, S1), elem(X, S2)).
implied('##'(S1, S2), C) :- ','(implied(S1, C), implied(S2, C)).
implied(X, C) :- elem(X, C).
notequal(X, Y) :- ','(not(=(X, Y)), ','(not(=(X, qqq(X17))), not(=(Y, qqq(X18))))).
equiv(X, Y) :- not(nonequiv(X, Y)).
nonequiv(X, Y) :- ','(mkground('##'(X, Y), 0, X19), ','(=(X, Y), fail)).
nonequiv(X20, X21).
mkground(qqq(N1), N1, N2) :- is(N2, +(N1, 1)).
mkground(qqq(X22), N1, N1).
mkground(X, N1, N2) :- ','(=..(X, .(X23, L)), mkgroundlist(L, N1, N2)).
mkgroundlist(.(X, L), N1, N3) :- ','(mkground(X, N1, N2), mkgroundlist(L, N2, N3)).
mkgroundlist([], N1, N1).
test1 :- plans(status(lightswitch(1), on), start).
test2 :- plans('##'(nextto(box(1), box(2)), nextto(box(2), box(3))), start).
test3 :- plans(at(robot, point(6)), start).
test4 :- plans('##'('##'('##'('##'(nextto(box(2), box(3)), nextto(box(3), door(1))), status(lightswitch(1), on)), nextto(box(1), box(2))), inroom(robot, room(2))), start).
imposs(X24) :- fail.
add(at(robot, P), goto1(P, X25)).
add(nextto(robot, X), goto2(X, X26)).
add(nextto(X, Y), pushto(X, Y, X27)).
add(nextto(Y, X), pushto(X, Y, X28)).
add(status(S, on), turnon(S)).
add(on(robot, B), climbon(B)).
add(onfloor, climboff(X29)).
add(inroom(robot, R2), gothru(X30, X31, R2)).
del(at(X, X32), U) :- moved(X, U).
del(nextto(Z, robot), U) :- del(nextto(robot, Z), U).
del(nextto(robot, X), pushto(X, X33, X34)) :- fail.
del(nextto(robot, B), climbon(B)) :- fail.
del(nextto(robot, B), climboff(B)) :- fail.
del(nextto(X, X35), U) :- moved(X, U).
del(nextto(X36, X), U) :- moved(X, U).
del(on(X, X37), U) :- moved(X, U).
del(onfloor, climbon(X38)).
del(inroom(robot, X39), gothru(X40, X41, X42)).
del(status(S, X43), turnon(S)).
moved(robot, goto1(X44, X45)).
moved(robot, goto2(X46, X47)).
moved(robot, pushto(X48, X49, X50)).
moved(X, pushto(X, X51, X52)).
moved(robot, climbon(X53)).
moved(robot, climboff(X54)).
moved(robot, gothru(X55, X56, X57)).
can(goto1(P, R), '##'('##'(locinroom(P, R), inroom(robot, R)), onfloor)).
can(goto2(X, R), '##'('##'(inroom(X, R), inroom(robot, R)), onfloor)).
can(pushto(X, Y, R), '##'('##'('##'('##'(pushable(X), inroom(Y, R)), inroom(X, R)), nextto(robot, X)), onfloor)).
can(turnon(lightswitch(S)), '##'(on(robot, box(1)), nextto(box(1), lightswitch(S)))).
can(climbon(box(B)), '##'(nextto(robot, box(B)), onfloor)).
can(climboff(box(B)), on(robot, box(B))).
can(gothru(D, R1, R2), '##'('##'('##'(connects(D, R1, R2), inroom(robot, R1)), nextto(robot, D)), onfloor)).
always(connects(D, R1, R2)) :- connects1(D, R1, R2).
always(connects(D, R2, R1)) :- connects1(D, R1, R2).
always(inroom(D, R1)) :- always(connects(D, X58, R1)).
always(pushable(box(X59))).
always(locinroom(point(6), room(4))).
always(inroom(lightswitch(1), room(1))).
always(at(lightswitch(1), point(4))).
connects1(door(N), room(N), room(5)) :- range(N, 1, 4).
range(M, M, X60).
range(M, L, N) :- ','(<(L, N), ','(is(L1, +(L, 1)), range(M, L1, N))).
given(start, at(box(N), point(N))) :- range(N, 1, 3).
given(start, at(robot, point(5))).
given(start, inroom(box(N), room(1))) :- range(N, 1, 3).
given(start, inroom(robot, room(1))).
given(start, onfloor).
given(start, status(lightswitch(1), off)).
not(P) :- not1(P).
not1(P) :- ','(call1(P), fail).
not1(P).
call1(P) :- P.
fail :- failure(a).
failure(b).


Query: plans(g,g)
----------------------------------------

(9) UnifyTransformerProof (EQUIVALENT)
Added a fact for the built-in = predicate [PROLOG].
----------------------------------------

(10)
Obligation:
Clauses:

plans(C, X1) :- ','(not(consistent(C, true)), ','(nl, ','(write('impossible'), nl))).
plans(C, T) :- ','(time(M0), ','(plan(C, true, T, T1), ','(time(M1), ','(nl, ','(output(T1), ','(nl, ','(is(Time, /(-(M1, M0), 1000)), ','(write(Time), ','(write(' secs.'), nl))))))))).
time(T) :- statistics(runtime, .(T, .(X2, []))).
output(::(T, U)) :- ','(output1(T), ','(write(U), ','(write('.'), nl))).
output(T) :- ','(write(T), ','(write('.'), nl)).
output1('!!'(T, U)) :- ','(output1(T), ','(write(U), ','(write(';'), nl))).
output1(T) :- ','(write(T), ','(write(';'), nl)).
plan('##'(X, C), P, T, T2) :- ','(solve(X, P, T, P1, T1), plan(C, P1, T1, T2)).
plan(X, P, T, T1) :- solve(X, P, T, X3, T1).
solve(X, P, T, P, T) :- always(X).
solve(X, P, T, P1, T) :- ','(holds(X, T), and(X, P, P1)).
solve(X, P, T, '##'(X, P), T1) :- ','(add(X, U), achieve(X, U, P, T, T1)).
achieve(X4, U, P, T, ::(T1, U)) :- ','(preserves(U, P), ','(can(U, C), ','(consistent(C, P), ','(plan(C, P, T, T1), preserves(U, P))))).
achieve(X, U, P, ::(T, V), ::(T1, V)) :- ','(preserved(X, V), ','(retrace(P, V, P1), ','(achieve(X, U, P1, T, T1), preserved(X, V)))).
holds(X, ::(X5, V)) :- add(X, V).
holds(X, ::(T, V)) :- ','(preserved(X, V), ','(holds(X, T), preserved(X, V))).
holds(X, T) :- given(T, X).
preserved(X, V) :- ','(mkground('##'(X, V), 0, X6), ','(del(X, V), fail)).
preserved(X7, X8).
preserves(U, '##'(X, C)) :- ','(preserved(X, U), preserves(U, C)).
preserves(X9, true).
retrace(P, V, P2) :- ','(can(V, C), ','(retrace1(P, V, C, P1), conjoin(C, P1, P2))).
retrace1('##'(X, P), V, C, P1) :- ','(add(Y, V), ','(equiv(X, Y), retrace1(P, V, C, P1))).
retrace1('##'(X, P), V, C, P1) :- ','(elem(Y, C), ','(equiv(X, Y), retrace1(P, V, C, P1))).
retrace1('##'(X, P), V, C, '##'(X, P1)) :- retrace1(P, V, C, P1).
retrace1(true, X10, X11, true).
consistent(C, P) :- ','(mkground('##'(C, P), 0, X12), ','(imposs(S), ','(not(not(intersect(C, S))), ','(implied(S, '##'(C, P)), fail)))).
consistent(X13, X14).
and(X, P, P) :- ','(elem(Y, P), equiv(X, Y)).
and(X, P, '##'(X, P)).
conjoin('##'(X, C), P, '##'(X, P1)) :- conjoin(C, P, P1).
conjoin(X, P, '##'(X, P)).
elem(X, '##'(Y, X15)) :- elem(X, Y).
elem(X, '##'(X16, C)) :- elem(X, C).
elem(X, X).
intersect(S1, S2) :- ','(elem(X, S1), elem(X, S2)).
implied('##'(S1, S2), C) :- ','(implied(S1, C), implied(S2, C)).
implied(X, C) :- elem(X, C).
notequal(X, Y) :- ','(not(=(X, Y)), ','(not(=(X, qqq(X17))), not(=(Y, qqq(X18))))).
equiv(X, Y) :- not(nonequiv(X, Y)).
nonequiv(X, Y) :- ','(mkground('##'(X, Y), 0, X19), ','(=(X, Y), fail)).
nonequiv(X20, X21).
mkground(qqq(N1), N1, N2) :- is(N2, +(N1, 1)).
mkground(qqq(X22), N1, N1).
mkground(X, N1, N2) :- ','(=..(X, .(X23, L)), mkgroundlist(L, N1, N2)).
mkgroundlist(.(X, L), N1, N3) :- ','(mkground(X, N1, N2), mkgroundlist(L, N2, N3)).
mkgroundlist([], N1, N1).
test1 :- plans(status(lightswitch(1), on), start).
test2 :- plans('##'(nextto(box(1), box(2)), nextto(box(2), box(3))), start).
test3 :- plans(at(robot, point(6)), start).
test4 :- plans('##'('##'('##'('##'(nextto(box(2), box(3)), nextto(box(3), door(1))), status(lightswitch(1), on)), nextto(box(1), box(2))), inroom(robot, room(2))), start).
imposs(X24) :- fail.
add(at(robot, P), goto1(P, X25)).
add(nextto(robot, X), goto2(X, X26)).
add(nextto(X, Y), pushto(X, Y, X27)).
add(nextto(Y, X), pushto(X, Y, X28)).
add(status(S, on), turnon(S)).
add(on(robot, B), climbon(B)).
add(onfloor, climboff(X29)).
add(inroom(robot, R2), gothru(X30, X31, R2)).
del(at(X, X32), U) :- moved(X, U).
del(nextto(Z, robot), U) :- del(nextto(robot, Z), U).
del(nextto(robot, X), pushto(X, X33, X34)) :- fail.
del(nextto(robot, B), climbon(B)) :- fail.
del(nextto(robot, B), climboff(B)) :- fail.
del(nextto(X, X35), U) :- moved(X, U).
del(nextto(X36, X), U) :- moved(X, U).
del(on(X, X37), U) :- moved(X, U).
del(onfloor, climbon(X38)).
del(inroom(robot, X39), gothru(X40, X41, X42)).
del(status(S, X43), turnon(S)).
moved(robot, goto1(X44, X45)).
moved(robot, goto2(X46, X47)).
moved(robot, pushto(X48, X49, X50)).
moved(X, pushto(X, X51, X52)).
moved(robot, climbon(X53)).
moved(robot, climboff(X54)).
moved(robot, gothru(X55, X56, X57)).
can(goto1(P, R), '##'('##'(locinroom(P, R), inroom(robot, R)), onfloor)).
can(goto2(X, R), '##'('##'(inroom(X, R), inroom(robot, R)), onfloor)).
can(pushto(X, Y, R), '##'('##'('##'('##'(pushable(X), inroom(Y, R)), inroom(X, R)), nextto(robot, X)), onfloor)).
can(turnon(lightswitch(S)), '##'(on(robot, box(1)), nextto(box(1), lightswitch(S)))).
can(climbon(box(B)), '##'(nextto(robot, box(B)), onfloor)).
can(climboff(box(B)), on(robot, box(B))).
can(gothru(D, R1, R2), '##'('##'('##'(connects(D, R1, R2), inroom(robot, R1)), nextto(robot, D)), onfloor)).
always(connects(D, R1, R2)) :- connects1(D, R1, R2).
always(connects(D, R2, R1)) :- connects1(D, R1, R2).
always(inroom(D, R1)) :- always(connects(D, X58, R1)).
always(pushable(box(X59))).
always(locinroom(point(6), room(4))).
always(inroom(lightswitch(1), room(1))).
always(at(lightswitch(1), point(4))).
connects1(door(N), room(N), room(5)) :- range(N, 1, 4).
range(M, M, X60).
range(M, L, N) :- ','(<(L, N), ','(is(L1, +(L, 1)), range(M, L1, N))).
given(start, at(box(N), point(N))) :- range(N, 1, 3).
given(start, at(robot, point(5))).
given(start, inroom(box(N), room(1))) :- range(N, 1, 3).
given(start, inroom(robot, room(1))).
given(start, onfloor).
given(start, status(lightswitch(1), off)).
not(P) :- not1(P).
not1(P) :- ','(call1(P), fail).
not1(P).
call1(P) :- P.
fail :- failure(a).
failure(b).
=(X, X).


Query: plans(g,g)
----------------------------------------

(11) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(12)
Obligation:
Clauses:

plans(C, X1) :- ','(not(consistent(C, true)), ','(nl, ','(write('impossible'), nl))).
plans(C, T) :- ','(time(M0), ','(plan(C, true, T, T1), ','(time(M1), ','(nl, ','(output(T1), ','(nl, ','(is(Time, /(-(M1, M0), 1000)), ','(write(Time), ','(write(' secs.'), nl))))))))).
time(T) :- statistics(runtime, .(T, .(X2, []))).
output(::(T, U)) :- ','(output1(T), ','(write(U), ','(write('.'), nl))).
output(T) :- ','(write(T), ','(write('.'), nl)).
output1('!!'(T, U)) :- ','(output1(T), ','(write(U), ','(write(';'), nl))).
output1(T) :- ','(write(T), ','(write(';'), nl)).
plan('##'(X, C), P, T, T2) :- ','(solve(X, P, T, P1, T1), plan(C, P1, T1, T2)).
plan(X, P, T, T1) :- solve(X, P, T, X3, T1).
solve(X, P, T, P, T) :- always(X).
solve(X, P, T, P1, T) :- ','(holds(X, T), and(X, P, P1)).
solve(X, P, T, '##'(X, P), T1) :- ','(add(X, U), achieve(X, U, P, T, T1)).
achieve(X4, U, P, T, ::(T1, U)) :- ','(preserves(U, P), ','(can(U, C), ','(consistent(C, P), ','(plan(C, P, T, T1), preserves(U, P))))).
achieve(X, U, P, ::(T, V), ::(T1, V)) :- ','(preserved(X, V), ','(retrace(P, V, P1), ','(achieve(X, U, P1, T, T1), preserved(X, V)))).
holds(X, ::(X5, V)) :- add(X, V).
holds(X, ::(T, V)) :- ','(preserved(X, V), ','(holds(X, T), preserved(X, V))).
holds(X, T) :- given(T, X).
preserved(X, V) :- ','(mkground('##'(X, V), 0, X6), ','(del(X, V), fail)).
preserved(X7, X8).
preserves(U, '##'(X, C)) :- ','(preserved(X, U), preserves(U, C)).
preserves(X9, true).
retrace(P, V, P2) :- ','(can(V, C), ','(retrace1(P, V, C, P1), conjoin(C, P1, P2))).
retrace1('##'(X, P), V, C, P1) :- ','(add(Y, V), ','(equiv(X, Y), retrace1(P, V, C, P1))).
retrace1('##'(X, P), V, C, P1) :- ','(elem(Y, C), ','(equiv(X, Y), retrace1(P, V, C, P1))).
retrace1('##'(X, P), V, C, '##'(X, P1)) :- retrace1(P, V, C, P1).
retrace1(true, X10, X11, true).
consistent(C, P) :- ','(mkground('##'(C, P), 0, X12), ','(imposs(S), ','(not(not(intersect(C, S))), ','(implied(S, '##'(C, P)), fail)))).
consistent(X13, X14).
and(X, P, P) :- ','(elem(Y, P), equiv(X, Y)).
and(X, P, '##'(X, P)).
conjoin('##'(X, C), P, '##'(X, P1)) :- conjoin(C, P, P1).
conjoin(X, P, '##'(X, P)).
elem(X, '##'(Y, X15)) :- elem(X, Y).
elem(X, '##'(X16, C)) :- elem(X, C).
elem(X, X).
intersect(S1, S2) :- ','(elem(X, S1), elem(X, S2)).
implied('##'(S1, S2), C) :- ','(implied(S1, C), implied(S2, C)).
implied(X, C) :- elem(X, C).
notequal(X, Y) :- ','(not(=(X, Y)), ','(not(=(X, qqq(X17))), not(=(Y, qqq(X18))))).
equiv(X, Y) :- not(nonequiv(X, Y)).
nonequiv(X, Y) :- ','(mkground('##'(X, Y), 0, X19), ','(=(X, Y), fail)).
nonequiv(X20, X21).
mkground(qqq(N1), N1, N2) :- is(N2, +(N1, 1)).
mkground(qqq(X22), N1, N1).
mkground(X, N1, N2) :- ','(=..(X, .(X23, L)), mkgroundlist(L, N1, N2)).
mkgroundlist(.(X, L), N1, N3) :- ','(mkground(X, N1, N2), mkgroundlist(L, N2, N3)).
mkgroundlist([], N1, N1).
test1 :- plans(status(lightswitch(1), on), start).
test2 :- plans('##'(nextto(box(1), box(2)), nextto(box(2), box(3))), start).
test3 :- plans(at(robot, point(6)), start).
test4 :- plans('##'('##'('##'('##'(nextto(box(2), box(3)), nextto(box(3), door(1))), status(lightswitch(1), on)), nextto(box(1), box(2))), inroom(robot, room(2))), start).
imposs(X24) :- fail.
add(at(robot, P), goto1(P, X25)).
add(nextto(robot, X), goto2(X, X26)).
add(nextto(X, Y), pushto(X, Y, X27)).
add(nextto(Y, X), pushto(X, Y, X28)).
add(status(S, on), turnon(S)).
add(on(robot, B), climbon(B)).
add(onfloor, climboff(X29)).
add(inroom(robot, R2), gothru(X30, X31, R2)).
del(at(X, X32), U) :- moved(X, U).
del(nextto(Z, robot), U) :- del(nextto(robot, Z), U).
del(nextto(robot, X), pushto(X, X33, X34)) :- fail.
del(nextto(robot, B), climbon(B)) :- fail.
del(nextto(robot, B), climboff(B)) :- fail.
del(nextto(X, X35), U) :- moved(X, U).
del(nextto(X36, X), U) :- moved(X, U).
del(on(X, X37), U) :- moved(X, U).
del(onfloor, climbon(X38)).
del(inroom(robot, X39), gothru(X40, X41, X42)).
del(status(S, X43), turnon(S)).
moved(robot, goto1(X44, X45)).
moved(robot, goto2(X46, X47)).
moved(robot, pushto(X48, X49, X50)).
moved(X, pushto(X, X51, X52)).
moved(robot, climbon(X53)).
moved(robot, climboff(X54)).
moved(robot, gothru(X55, X56, X57)).
can(goto1(P, R), '##'('##'(locinroom(P, R), inroom(robot, R)), onfloor)).
can(goto2(X, R), '##'('##'(inroom(X, R), inroom(robot, R)), onfloor)).
can(pushto(X, Y, R), '##'('##'('##'('##'(pushable(X), inroom(Y, R)), inroom(X, R)), nextto(robot, X)), onfloor)).
can(turnon(lightswitch(S)), '##'(on(robot, box(1)), nextto(box(1), lightswitch(S)))).
can(climbon(box(B)), '##'(nextto(robot, box(B)), onfloor)).
can(climboff(box(B)), on(robot, box(B))).
can(gothru(D, R1, R2), '##'('##'('##'(connects(D, R1, R2), inroom(robot, R1)), nextto(robot, D)), onfloor)).
always(connects(D, R1, R2)) :- connects1(D, R1, R2).
always(connects(D, R2, R1)) :- connects1(D, R1, R2).
always(inroom(D, R1)) :- always(connects(D, X58, R1)).
always(pushable(box(X59))).
always(locinroom(point(6), room(4))).
always(inroom(lightswitch(1), room(1))).
always(at(lightswitch(1), point(4))).
connects1(door(N), room(N), room(5)) :- range(N, 1, 4).
range(M, M, X60).
range(M, L, N) :- ','(<(L, N), ','(is(L1, +(L, 1)), range(M, L1, N))).
given(start, at(box(N), point(N))) :- range(N, 1, 3).
given(start, at(robot, point(5))).
given(start, inroom(box(N), room(1))) :- range(N, 1, 3).
given(start, inroom(robot, room(1))).
given(start, onfloor).
given(start, status(lightswitch(1), off)).
not(P) :- not1(P).
not1(P) :- ','(call1(P), fail).
not1(P).
call1(P) :- P.
fail :- failure(a).
failure(b).
=(X, X).
nl.
write(X0).
is(X0, X1).
statistics(X0, X1).
=..(X0, X1).
<(X0, X1).


Query: plans(g,g)
----------------------------------------

(13) IntegerArithmeticTransformerProof (SOUND)
Added definitions of predefined predicates [PROLOG].
----------------------------------------

(14)
Obligation:
Clauses:

plans(C, X1) :- ','(not(consistent(C, true)), ','(!, ','(nl, ','(write('impossible'), nl)))).
plans(C, T) :- ','(time(M0), ','(plan(C, true, T, T1), ','(time(M1), ','(nl, ','(output(T1), ','(nl, ','(is(Time, /(-(M1, M0), succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zerowrite(Time), ','(write(' secs.'), nl))))))))).
time(T) :- statistics(runtime, .(T, .(X2, []))).
output(::(T, U)) :- ','(!, ','(output1(T), ','(write(U), ','(write('.'), nl)))).
output(T) :- ','(write(T), ','(write('.'), nl)).
output1('!!'(T, U)) :- ','(!, ','(output1(T), ','(write(U), ','(write(';'), nl)))).
output1(T) :- ','(write(T), ','(write(';'), nl)).
plan('##'(X, C), P, T, T2) :- ','(!, ','(solve(X, P, T, P1, T1), plan(C, P1, T1, T2))).
plan(X, P, T, T1) :- solve(X, P, T, X3, T1).
solve(X, P, T, P, T) :- always(X).
solve(X, P, T, P1, T) :- ','(holds(X, T), and(X, P, P1)).
solve(X, P, T, '##'(X, P), T1) :- ','(add(X, U), achieve(X, U, P, T, T1)).
achieve(X4, U, P, T, ::(T1, U)) :- ','(preserves(U, P), ','(can(U, C), ','(consistent(C, P), ','(plan(C, P, T, T1), preserves(U, P))))).
achieve(X, U, P, ::(T, V), ::(T1, V)) :- ','(preserved(X, V), ','(retrace(P, V, P1), ','(achieve(X, U, P1, T, T1), preserved(X, V)))).
holds(X, ::(X5, V)) :- add(X, V).
holds(X, ::(T, V)) :- ','(!, ','(preserved(X, V), ','(holds(X, T), preserved(X, V)))).
holds(X, T) :- given(T, X).
preserved(X, V) :- ','(mkground('##'(X, V), zero, X6), ','(del(X, V), ','(!, fail))).
preserved(X7, X8).
preserves(U, '##'(X, C)) :- ','(preserved(X, U), preserves(U, C)).
preserves(X9, true).
retrace(P, V, P2) :- ','(can(V, C), ','(retrace1(P, V, C, P1), conjoin(C, P1, P2))).
retrace1('##'(X, P), V, C, P1) :- ','(add(Y, V), ','(equiv(X, Y), ','(!, retrace1(P, V, C, P1)))).
retrace1('##'(X, P), V, C, P1) :- ','(elem(Y, C), ','(equiv(X, Y), ','(!, retrace1(P, V, C, P1)))).
retrace1('##'(X, P), V, C, '##'(X, P1)) :- retrace1(P, V, C, P1).
retrace1(true, X10, X11, true).
consistent(C, P) :- ','(mkground('##'(C, P), zero, X12), ','(imposs(S), ','(not(not(intersect(C, S))), ','(implied(S, '##'(C, P)), ','(!, fail))))).
consistent(X13, X14).
and(X, P, P) :- ','(elem(Y, P), ','(equiv(X, Y), !)).
and(X, P, '##'(X, P)).
conjoin('##'(X, C), P, '##'(X, P1)) :- ','(!, conjoin(C, P, P1)).
conjoin(X, P, '##'(X, P)).
elem(X, '##'(Y, X15)) :- elem(X, Y).
elem(X, '##'(X16, C)) :- ','(!, elem(X, C)).
elem(X, X).
intersect(S1, S2) :- ','(elem(X, S1), elem(X, S2)).
implied('##'(S1, S2), C) :- ','(!, ','(implied(S1, C), implied(S2, C))).
implied(X, C) :- elem(X, C).
notequal(X, Y) :- ','(not(=(X, Y)), ','(not(=(X, qqq(X17))), not(=(Y, qqq(X18))))).
equiv(X, Y) :- not(nonequiv(X, Y)).
nonequiv(X, Y) :- ','(mkground('##'(X, Y), zero, X19), ','(=(X, Y), ','(!, fail))).
nonequiv(X20, X21).
mkground(qqq(N1), N1, N2) :- ','(!, ','(isPlus(N1, succ(zero), U), =(N2, U))).
mkground(qqq(X22), N1, N1) :- !.
mkground(X, N1, N2) :- ','(=..(X, .(X23, L)), mkgroundlist(L, N1, N2)).
mkgroundlist(.(X, L), N1, N3) :- ','(mkground(X, N1, N2), mkgroundlist(L, N2, N3)).
mkgroundlist([], N1, N1).
test1 :- plans(status(lightswitch(succ(zero)), on), start).
test2 :- plans('##'(nextto(box(succ(zero)), box(succ(succ(zero)))), nextto(box(succ(succ(zero))), box(succ(succ(succ(zero)))))), start).
test3 :- plans(at(robot, point(succ(succ(succ(succ(succ(succ(zero)))))))), start).
test4 :- plans('##'('##'('##'('##'(nextto(box(succ(succ(zero))), box(succ(succ(succ(zero))))), nextto(box(succ(succ(succ(zero)))), door(succ(zero)))), status(lightswitch(succ(zero)), on)), nextto(box(succ(zero)), box(succ(succ(zero))))), inroom(robot, room(succ(succ(zero))))), start).
imposs(X24) :- fail.
add(at(robot, P), goto1(P, X25)).
add(nextto(robot, X), goto2(X, X26)).
add(nextto(X, Y), pushto(X, Y, X27)).
add(nextto(Y, X), pushto(X, Y, X28)).
add(status(S, on), turnon(S)).
add(on(robot, B), climbon(B)).
add(onfloor, climboff(X29)).
add(inroom(robot, R2), gothru(X30, X31, R2)).
del(at(X, X32), U) :- moved(X, U).
del(nextto(Z, robot), U) :- ','(!, del(nextto(robot, Z), U)).
del(nextto(robot, X), pushto(X, X33, X34)) :- ','(!, fail).
del(nextto(robot, B), climbon(B)) :- ','(!, fail).
del(nextto(robot, B), climboff(B)) :- ','(!, fail).
del(nextto(X, X35), U) :- moved(X, U).
del(nextto(X36, X), U) :- moved(X, U).
del(on(X, X37), U) :- moved(X, U).
del(onfloor, climbon(X38)).
del(inroom(robot, X39), gothru(X40, X41, X42)).
del(status(S, X43), turnon(S)).
moved(robot, goto1(X44, X45)).
moved(robot, goto2(X46, X47)).
moved(robot, pushto(X48, X49, X50)).
moved(X, pushto(X, X51, X52)).
moved(robot, climbon(X53)).
moved(robot, climboff(X54)).
moved(robot, gothru(X55, X56, X57)).
can(goto1(P, R), '##'('##'(locinroom(P, R), inroom(robot, R)), onfloor)).
can(goto2(X, R), '##'('##'(inroom(X, R), inroom(robot, R)), onfloor)).
can(pushto(X, Y, R), '##'('##'('##'('##'(pushable(X), inroom(Y, R)), inroom(X, R)), nextto(robot, X)), onfloor)).
can(turnon(lightswitch(S)), '##'(on(robot, box(succ(zero))), nextto(box(succ(zero)), lightswitch(S)))).
can(climbon(box(B)), '##'(nextto(robot, box(B)), onfloor)).
can(climboff(box(B)), on(robot, box(B))).
can(gothru(D, R1, R2), '##'('##'('##'(connects(D, R1, R2), inroom(robot, R1)), nextto(robot, D)), onfloor)).
always(connects(D, R1, R2)) :- connects1(D, R1, R2).
always(connects(D, R2, R1)) :- connects1(D, R1, R2).
always(inroom(D, R1)) :- always(connects(D, X58, R1)).
always(pushable(box(X59))).
always(locinroom(point(succ(succ(succ(succ(succ(succ(zero))))))), room(succ(succ(succ(succ(zero))))))).
always(inroom(lightswitch(succ(zero)), room(succ(zero)))).
always(at(lightswitch(succ(zero)), point(succ(succ(succ(succ(zero))))))).
connects1(door(N), room(N), room(succ(succ(succ(succ(succ(zero))))))) :- range(N, succ(zero), succ(succ(succ(succ(zero))))).
range(M, M, X60).
range(M, L, N) :- ','(=(X, L), ','(=(X1, N), ','(isLess(X, X1), ','(isPlus(L, succ(zero), U), ','(=(L1, U), range(M, L1, N)))))).
given(start, at(box(N), point(N))) :- range(N, succ(zero), succ(succ(succ(zero)))).
given(start, at(robot, point(succ(succ(succ(succ(succ(zero)))))))).
given(start, inroom(box(N), room(succ(zero)))) :- range(N, succ(zero), succ(succ(succ(zero)))).
given(start, inroom(robot, room(succ(zero)))).
given(start, onfloor).
given(start, status(lightswitch(succ(zero)), off)).
not(P) :- \+(P).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).


Query: plans(g,g)
----------------------------------------

(15) NotTransformerProof (EQUIVALENT)
Transformed all not-constructs [PROLOG].
----------------------------------------

(16)
Obligation:
Clauses:

plans(C, X1) :- ','(not(consistent(C, true)), ','(!, ','(nl, ','(write('impossible'), nl)))).
plans(C, T) :- ','(time(M0), ','(plan(C, true, T, T1), ','(time(M1), ','(nl, ','(output(T1), ','(nl, ','(is(Time, /(-(M1, M0), succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zerowrite(Time), ','(write(' secs.'), nl))))))))).
time(T) :- statistics(runtime, .(T, .(X2, []))).
output(::(T, U)) :- ','(!, ','(output1(T), ','(write(U), ','(write('.'), nl)))).
output(T) :- ','(write(T), ','(write('.'), nl)).
output1('!!'(T, U)) :- ','(!, ','(output1(T), ','(write(U), ','(write(';'), nl)))).
output1(T) :- ','(write(T), ','(write(';'), nl)).
plan('##'(X, C), P, T, T2) :- ','(!, ','(solve(X, P, T, P1, T1), plan(C, P1, T1, T2))).
plan(X, P, T, T1) :- solve(X, P, T, X3, T1).
solve(X, P, T, P, T) :- always(X).
solve(X, P, T, P1, T) :- ','(holds(X, T), and(X, P, P1)).
solve(X, P, T, '##'(X, P), T1) :- ','(add(X, U), achieve(X, U, P, T, T1)).
achieve(X4, U, P, T, ::(T1, U)) :- ','(preserves(U, P), ','(can(U, C), ','(consistent(C, P), ','(plan(C, P, T, T1), preserves(U, P))))).
achieve(X, U, P, ::(T, V), ::(T1, V)) :- ','(preserved(X, V), ','(retrace(P, V, P1), ','(achieve(X, U, P1, T, T1), preserved(X, V)))).
holds(X, ::(X5, V)) :- add(X, V).
holds(X, ::(T, V)) :- ','(!, ','(preserved(X, V), ','(holds(X, T), preserved(X, V)))).
holds(X, T) :- given(T, X).
preserved(X, V) :- ','(mkground('##'(X, V), zero, X6), ','(del(X, V), ','(!, fail))).
preserved(X7, X8).
preserves(U, '##'(X, C)) :- ','(preserved(X, U), preserves(U, C)).
preserves(X9, true).
retrace(P, V, P2) :- ','(can(V, C), ','(retrace1(P, V, C, P1), conjoin(C, P1, P2))).
retrace1('##'(X, P), V, C, P1) :- ','(add(Y, V), ','(equiv(X, Y), ','(!, retrace1(P, V, C, P1)))).
retrace1('##'(X, P), V, C, P1) :- ','(elem(Y, C), ','(equiv(X, Y), ','(!, retrace1(P, V, C, P1)))).
retrace1('##'(X, P), V, C, '##'(X, P1)) :- retrace1(P, V, C, P1).
retrace1(true, X10, X11, true).
consistent(C, P) :- ','(mkground('##'(C, P), zero, X12), ','(imposs(S), ','(not(not(intersect(C, S))), ','(implied(S, '##'(C, P)), ','(!, fail))))).
consistent(X13, X14).
and(X, P, P) :- ','(elem(Y, P), ','(equiv(X, Y), !)).
and(X, P, '##'(X, P)).
conjoin('##'(X, C), P, '##'(X, P1)) :- ','(!, conjoin(C, P, P1)).
conjoin(X, P, '##'(X, P)).
elem(X, '##'(Y, X15)) :- elem(X, Y).
elem(X, '##'(X16, C)) :- ','(!, elem(X, C)).
elem(X, X).
intersect(S1, S2) :- ','(elem(X, S1), elem(X, S2)).
implied('##'(S1, S2), C) :- ','(!, ','(implied(S1, C), implied(S2, C))).
implied(X, C) :- elem(X, C).
notequal(X, Y) :- ','(not(=(X, Y)), ','(not(=(X, qqq(X17))), not(=(Y, qqq(X18))))).
equiv(X, Y) :- not(nonequiv(X, Y)).
nonequiv(X, Y) :- ','(mkground('##'(X, Y), zero, X19), ','(=(X, Y), ','(!, fail))).
nonequiv(X20, X21).
mkground(qqq(N1), N1, N2) :- ','(!, ','(isPlus(N1, succ(zero), U), =(N2, U))).
mkground(qqq(X22), N1, N1) :- !.
mkground(X, N1, N2) :- ','(=..(X, .(X23, L)), mkgroundlist(L, N1, N2)).
mkgroundlist(.(X, L), N1, N3) :- ','(mkground(X, N1, N2), mkgroundlist(L, N2, N3)).
mkgroundlist([], N1, N1).
test1 :- plans(status(lightswitch(succ(zero)), on), start).
test2 :- plans('##'(nextto(box(succ(zero)), box(succ(succ(zero)))), nextto(box(succ(succ(zero))), box(succ(succ(succ(zero)))))), start).
test3 :- plans(at(robot, point(succ(succ(succ(succ(succ(succ(zero)))))))), start).
test4 :- plans('##'('##'('##'('##'(nextto(box(succ(succ(zero))), box(succ(succ(succ(zero))))), nextto(box(succ(succ(succ(zero)))), door(succ(zero)))), status(lightswitch(succ(zero)), on)), nextto(box(succ(zero)), box(succ(succ(zero))))), inroom(robot, room(succ(succ(zero))))), start).
imposs(X24) :- fail.
add(at(robot, P), goto1(P, X25)).
add(nextto(robot, X), goto2(X, X26)).
add(nextto(X, Y), pushto(X, Y, X27)).
add(nextto(Y, X), pushto(X, Y, X28)).
add(status(S, on), turnon(S)).
add(on(robot, B), climbon(B)).
add(onfloor, climboff(X29)).
add(inroom(robot, R2), gothru(X30, X31, R2)).
del(at(X, X32), U) :- moved(X, U).
del(nextto(Z, robot), U) :- ','(!, del(nextto(robot, Z), U)).
del(nextto(robot, X), pushto(X, X33, X34)) :- ','(!, fail).
del(nextto(robot, B), climbon(B)) :- ','(!, fail).
del(nextto(robot, B), climboff(B)) :- ','(!, fail).
del(nextto(X, X35), U) :- moved(X, U).
del(nextto(X36, X), U) :- moved(X, U).
del(on(X, X37), U) :- moved(X, U).
del(onfloor, climbon(X38)).
del(inroom(robot, X39), gothru(X40, X41, X42)).
del(status(S, X43), turnon(S)).
moved(robot, goto1(X44, X45)).
moved(robot, goto2(X46, X47)).
moved(robot, pushto(X48, X49, X50)).
moved(X, pushto(X, X51, X52)).
moved(robot, climbon(X53)).
moved(robot, climboff(X54)).
moved(robot, gothru(X55, X56, X57)).
can(goto1(P, R), '##'('##'(locinroom(P, R), inroom(robot, R)), onfloor)).
can(goto2(X, R), '##'('##'(inroom(X, R), inroom(robot, R)), onfloor)).
can(pushto(X, Y, R), '##'('##'('##'('##'(pushable(X), inroom(Y, R)), inroom(X, R)), nextto(robot, X)), onfloor)).
can(turnon(lightswitch(S)), '##'(on(robot, box(succ(zero))), nextto(box(succ(zero)), lightswitch(S)))).
can(climbon(box(B)), '##'(nextto(robot, box(B)), onfloor)).
can(climboff(box(B)), on(robot, box(B))).
can(gothru(D, R1, R2), '##'('##'('##'(connects(D, R1, R2), inroom(robot, R1)), nextto(robot, D)), onfloor)).
always(connects(D, R1, R2)) :- connects1(D, R1, R2).
always(connects(D, R2, R1)) :- connects1(D, R1, R2).
always(inroom(D, R1)) :- always(connects(D, X58, R1)).
always(pushable(box(X59))).
always(locinroom(point(succ(succ(succ(succ(succ(succ(zero))))))), room(succ(succ(succ(succ(zero))))))).
always(inroom(lightswitch(succ(zero)), room(succ(zero)))).
always(at(lightswitch(succ(zero)), point(succ(succ(succ(succ(zero))))))).
connects1(door(N), room(N), room(succ(succ(succ(succ(succ(zero))))))) :- range(N, succ(zero), succ(succ(succ(succ(zero))))).
range(M, M, X60).
range(M, L, N) :- ','(=(X, L), ','(=(X1, N), ','(isLess(X, X1), ','(isPlus(L, succ(zero), U), ','(=(L1, U), range(M, L1, N)))))).
given(start, at(box(N), point(N))) :- range(N, succ(zero), succ(succ(succ(zero)))).
given(start, at(robot, point(succ(succ(succ(succ(succ(zero)))))))).
given(start, inroom(box(N), room(succ(zero)))) :- range(N, succ(zero), succ(succ(succ(zero)))).
given(start, inroom(robot, room(succ(zero)))).
given(start, onfloor).
given(start, status(lightswitch(succ(zero)), off)).
not(P) :- not1(P).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).
not1(P) :- ','(call(P), ','(!, fail)).
not1(P).


Query: plans(g,g)
----------------------------------------

(17) CallTransformerProof (EQUIVALENT)
Transformed all call-constructs [PROLOG].
----------------------------------------

(18)
Obligation:
Clauses:

plans(C, X1) :- ','(not(consistent(C, true)), ','(!, ','(nl, ','(write('impossible'), nl)))).
plans(C, T) :- ','(time(M0), ','(plan(C, true, T, T1), ','(time(M1), ','(nl, ','(output(T1), ','(nl, ','(is(Time, /(-(M1, M0), succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zerowrite(Time), ','(write(' secs.'), nl))))))))).
time(T) :- statistics(runtime, .(T, .(X2, []))).
output(::(T, U)) :- ','(!, ','(output1(T), ','(write(U), ','(write('.'), nl)))).
output(T) :- ','(write(T), ','(write('.'), nl)).
output1('!!'(T, U)) :- ','(!, ','(output1(T), ','(write(U), ','(write(';'), nl)))).
output1(T) :- ','(write(T), ','(write(';'), nl)).
plan('##'(X, C), P, T, T2) :- ','(!, ','(solve(X, P, T, P1, T1), plan(C, P1, T1, T2))).
plan(X, P, T, T1) :- solve(X, P, T, X3, T1).
solve(X, P, T, P, T) :- always(X).
solve(X, P, T, P1, T) :- ','(holds(X, T), and(X, P, P1)).
solve(X, P, T, '##'(X, P), T1) :- ','(add(X, U), achieve(X, U, P, T, T1)).
achieve(X4, U, P, T, ::(T1, U)) :- ','(preserves(U, P), ','(can(U, C), ','(consistent(C, P), ','(plan(C, P, T, T1), preserves(U, P))))).
achieve(X, U, P, ::(T, V), ::(T1, V)) :- ','(preserved(X, V), ','(retrace(P, V, P1), ','(achieve(X, U, P1, T, T1), preserved(X, V)))).
holds(X, ::(X5, V)) :- add(X, V).
holds(X, ::(T, V)) :- ','(!, ','(preserved(X, V), ','(holds(X, T), preserved(X, V)))).
holds(X, T) :- given(T, X).
preserved(X, V) :- ','(mkground('##'(X, V), zero, X6), ','(del(X, V), ','(!, fail))).
preserved(X7, X8).
preserves(U, '##'(X, C)) :- ','(preserved(X, U), preserves(U, C)).
preserves(X9, true).
retrace(P, V, P2) :- ','(can(V, C), ','(retrace1(P, V, C, P1), conjoin(C, P1, P2))).
retrace1('##'(X, P), V, C, P1) :- ','(add(Y, V), ','(equiv(X, Y), ','(!, retrace1(P, V, C, P1)))).
retrace1('##'(X, P), V, C, P1) :- ','(elem(Y, C), ','(equiv(X, Y), ','(!, retrace1(P, V, C, P1)))).
retrace1('##'(X, P), V, C, '##'(X, P1)) :- retrace1(P, V, C, P1).
retrace1(true, X10, X11, true).
consistent(C, P) :- ','(mkground('##'(C, P), zero, X12), ','(imposs(S), ','(not(not(intersect(C, S))), ','(implied(S, '##'(C, P)), ','(!, fail))))).
consistent(X13, X14).
and(X, P, P) :- ','(elem(Y, P), ','(equiv(X, Y), !)).
and(X, P, '##'(X, P)).
conjoin('##'(X, C), P, '##'(X, P1)) :- ','(!, conjoin(C, P, P1)).
conjoin(X, P, '##'(X, P)).
elem(X, '##'(Y, X15)) :- elem(X, Y).
elem(X, '##'(X16, C)) :- ','(!, elem(X, C)).
elem(X, X).
intersect(S1, S2) :- ','(elem(X, S1), elem(X, S2)).
implied('##'(S1, S2), C) :- ','(!, ','(implied(S1, C), implied(S2, C))).
implied(X, C) :- elem(X, C).
notequal(X, Y) :- ','(not(=(X, Y)), ','(not(=(X, qqq(X17))), not(=(Y, qqq(X18))))).
equiv(X, Y) :- not(nonequiv(X, Y)).
nonequiv(X, Y) :- ','(mkground('##'(X, Y), zero, X19), ','(=(X, Y), ','(!, fail))).
nonequiv(X20, X21).
mkground(qqq(N1), N1, N2) :- ','(!, ','(isPlus(N1, succ(zero), U), =(N2, U))).
mkground(qqq(X22), N1, N1) :- !.
mkground(X, N1, N2) :- ','(=..(X, .(X23, L)), mkgroundlist(L, N1, N2)).
mkgroundlist(.(X, L), N1, N3) :- ','(mkground(X, N1, N2), mkgroundlist(L, N2, N3)).
mkgroundlist([], N1, N1).
test1 :- plans(status(lightswitch(succ(zero)), on), start).
test2 :- plans('##'(nextto(box(succ(zero)), box(succ(succ(zero)))), nextto(box(succ(succ(zero))), box(succ(succ(succ(zero)))))), start).
test3 :- plans(at(robot, point(succ(succ(succ(succ(succ(succ(zero)))))))), start).
test4 :- plans('##'('##'('##'('##'(nextto(box(succ(succ(zero))), box(succ(succ(succ(zero))))), nextto(box(succ(succ(succ(zero)))), door(succ(zero)))), status(lightswitch(succ(zero)), on)), nextto(box(succ(zero)), box(succ(succ(zero))))), inroom(robot, room(succ(succ(zero))))), start).
imposs(X24) :- fail.
add(at(robot, P), goto1(P, X25)).
add(nextto(robot, X), goto2(X, X26)).
add(nextto(X, Y), pushto(X, Y, X27)).
add(nextto(Y, X), pushto(X, Y, X28)).
add(status(S, on), turnon(S)).
add(on(robot, B), climbon(B)).
add(onfloor, climboff(X29)).
add(inroom(robot, R2), gothru(X30, X31, R2)).
del(at(X, X32), U) :- moved(X, U).
del(nextto(Z, robot), U) :- ','(!, del(nextto(robot, Z), U)).
del(nextto(robot, X), pushto(X, X33, X34)) :- ','(!, fail).
del(nextto(robot, B), climbon(B)) :- ','(!, fail).
del(nextto(robot, B), climboff(B)) :- ','(!, fail).
del(nextto(X, X35), U) :- moved(X, U).
del(nextto(X36, X), U) :- moved(X, U).
del(on(X, X37), U) :- moved(X, U).
del(onfloor, climbon(X38)).
del(inroom(robot, X39), gothru(X40, X41, X42)).
del(status(S, X43), turnon(S)).
moved(robot, goto1(X44, X45)).
moved(robot, goto2(X46, X47)).
moved(robot, pushto(X48, X49, X50)).
moved(X, pushto(X, X51, X52)).
moved(robot, climbon(X53)).
moved(robot, climboff(X54)).
moved(robot, gothru(X55, X56, X57)).
can(goto1(P, R), '##'('##'(locinroom(P, R), inroom(robot, R)), onfloor)).
can(goto2(X, R), '##'('##'(inroom(X, R), inroom(robot, R)), onfloor)).
can(pushto(X, Y, R), '##'('##'('##'('##'(pushable(X), inroom(Y, R)), inroom(X, R)), nextto(robot, X)), onfloor)).
can(turnon(lightswitch(S)), '##'(on(robot, box(succ(zero))), nextto(box(succ(zero)), lightswitch(S)))).
can(climbon(box(B)), '##'(nextto(robot, box(B)), onfloor)).
can(climboff(box(B)), on(robot, box(B))).
can(gothru(D, R1, R2), '##'('##'('##'(connects(D, R1, R2), inroom(robot, R1)), nextto(robot, D)), onfloor)).
always(connects(D, R1, R2)) :- connects1(D, R1, R2).
always(connects(D, R2, R1)) :- connects1(D, R1, R2).
always(inroom(D, R1)) :- always(connects(D, X58, R1)).
always(pushable(box(X59))).
always(locinroom(point(succ(succ(succ(succ(succ(succ(zero))))))), room(succ(succ(succ(succ(zero))))))).
always(inroom(lightswitch(succ(zero)), room(succ(zero)))).
always(at(lightswitch(succ(zero)), point(succ(succ(succ(succ(zero))))))).
connects1(door(N), room(N), room(succ(succ(succ(succ(succ(zero))))))) :- range(N, succ(zero), succ(succ(succ(succ(zero))))).
range(M, M, X60).
range(M, L, N) :- ','(=(X, L), ','(=(X1, N), ','(isLess(X, X1), ','(isPlus(L, succ(zero), U), ','(=(L1, U), range(M, L1, N)))))).
given(start, at(box(N), point(N))) :- range(N, succ(zero), succ(succ(succ(zero)))).
given(start, at(robot, point(succ(succ(succ(succ(succ(zero)))))))).
given(start, inroom(box(N), room(succ(zero)))) :- range(N, succ(zero), succ(succ(succ(zero)))).
given(start, inroom(robot, room(succ(zero)))).
given(start, onfloor).
given(start, status(lightswitch(succ(zero)), off)).
not(P) :- not1(P).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).
not1(P) :- ','(call1(P), ','(!, fail)).
not1(P).
call1(P) :- P.


Query: plans(g,g)
----------------------------------------

(19) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(20)
Obligation:
Clauses:

plans(C, X1) :- ','(not(consistent(C, true)), ','(nl, ','(write('impossible'), nl))).
plans(C, T) :- ','(time(M0), ','(plan(C, true, T, T1), ','(time(M1), ','(nl, ','(output(T1), ','(nl, ','(is(Time, /(-(M1, M0), succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zerowrite(Time), ','(write(' secs.'), nl))))))))).
time(T) :- statistics(runtime, .(T, .(X2, []))).
output(::(T, U)) :- ','(output1(T), ','(write(U), ','(write('.'), nl))).
output(T) :- ','(write(T), ','(write('.'), nl)).
output1('!!'(T, U)) :- ','(output1(T), ','(write(U), ','(write(';'), nl))).
output1(T) :- ','(write(T), ','(write(';'), nl)).
plan('##'(X, C), P, T, T2) :- ','(solve(X, P, T, P1, T1), plan(C, P1, T1, T2)).
plan(X, P, T, T1) :- solve(X, P, T, X3, T1).
solve(X, P, T, P, T) :- always(X).
solve(X, P, T, P1, T) :- ','(holds(X, T), and(X, P, P1)).
solve(X, P, T, '##'(X, P), T1) :- ','(add(X, U), achieve(X, U, P, T, T1)).
achieve(X4, U, P, T, ::(T1, U)) :- ','(preserves(U, P), ','(can(U, C), ','(consistent(C, P), ','(plan(C, P, T, T1), preserves(U, P))))).
achieve(X, U, P, ::(T, V), ::(T1, V)) :- ','(preserved(X, V), ','(retrace(P, V, P1), ','(achieve(X, U, P1, T, T1), preserved(X, V)))).
holds(X, ::(X5, V)) :- add(X, V).
holds(X, ::(T, V)) :- ','(preserved(X, V), ','(holds(X, T), preserved(X, V))).
holds(X, T) :- given(T, X).
preserved(X, V) :- ','(mkground('##'(X, V), zero, X6), ','(del(X, V), fail)).
preserved(X7, X8).
preserves(U, '##'(X, C)) :- ','(preserved(X, U), preserves(U, C)).
preserves(X9, true).
retrace(P, V, P2) :- ','(can(V, C), ','(retrace1(P, V, C, P1), conjoin(C, P1, P2))).
retrace1('##'(X, P), V, C, P1) :- ','(add(Y, V), ','(equiv(X, Y), retrace1(P, V, C, P1))).
retrace1('##'(X, P), V, C, P1) :- ','(elem(Y, C), ','(equiv(X, Y), retrace1(P, V, C, P1))).
retrace1('##'(X, P), V, C, '##'(X, P1)) :- retrace1(P, V, C, P1).
retrace1(true, X10, X11, true).
consistent(C, P) :- ','(mkground('##'(C, P), zero, X12), ','(imposs(S), ','(not(not(intersect(C, S))), ','(implied(S, '##'(C, P)), fail)))).
consistent(X13, X14).
and(X, P, P) :- ','(elem(Y, P), equiv(X, Y)).
and(X, P, '##'(X, P)).
conjoin('##'(X, C), P, '##'(X, P1)) :- conjoin(C, P, P1).
conjoin(X, P, '##'(X, P)).
elem(X, '##'(Y, X15)) :- elem(X, Y).
elem(X, '##'(X16, C)) :- elem(X, C).
elem(X, X).
intersect(S1, S2) :- ','(elem(X, S1), elem(X, S2)).
implied('##'(S1, S2), C) :- ','(implied(S1, C), implied(S2, C)).
implied(X, C) :- elem(X, C).
notequal(X, Y) :- ','(not(=(X, Y)), ','(not(=(X, qqq(X17))), not(=(Y, qqq(X18))))).
equiv(X, Y) :- not(nonequiv(X, Y)).
nonequiv(X, Y) :- ','(mkground('##'(X, Y), zero, X19), ','(=(X, Y), fail)).
nonequiv(X20, X21).
mkground(qqq(N1), N1, N2) :- ','(isPlus(N1, succ(zero), U), =(N2, U)).
mkground(qqq(X22), N1, N1).
mkground(X, N1, N2) :- ','(=..(X, .(X23, L)), mkgroundlist(L, N1, N2)).
mkgroundlist(.(X, L), N1, N3) :- ','(mkground(X, N1, N2), mkgroundlist(L, N2, N3)).
mkgroundlist([], N1, N1).
test1 :- plans(status(lightswitch(succ(zero)), on), start).
test2 :- plans('##'(nextto(box(succ(zero)), box(succ(succ(zero)))), nextto(box(succ(succ(zero))), box(succ(succ(succ(zero)))))), start).
test3 :- plans(at(robot, point(succ(succ(succ(succ(succ(succ(zero)))))))), start).
test4 :- plans('##'('##'('##'('##'(nextto(box(succ(succ(zero))), box(succ(succ(succ(zero))))), nextto(box(succ(succ(succ(zero)))), door(succ(zero)))), status(lightswitch(succ(zero)), on)), nextto(box(succ(zero)), box(succ(succ(zero))))), inroom(robot, room(succ(succ(zero))))), start).
imposs(X24) :- fail.
add(at(robot, P), goto1(P, X25)).
add(nextto(robot, X), goto2(X, X26)).
add(nextto(X, Y), pushto(X, Y, X27)).
add(nextto(Y, X), pushto(X, Y, X28)).
add(status(S, on), turnon(S)).
add(on(robot, B), climbon(B)).
add(onfloor, climboff(X29)).
add(inroom(robot, R2), gothru(X30, X31, R2)).
del(at(X, X32), U) :- moved(X, U).
del(nextto(Z, robot), U) :- del(nextto(robot, Z), U).
del(nextto(robot, X), pushto(X, X33, X34)) :- fail.
del(nextto(robot, B), climbon(B)) :- fail.
del(nextto(robot, B), climboff(B)) :- fail.
del(nextto(X, X35), U) :- moved(X, U).
del(nextto(X36, X), U) :- moved(X, U).
del(on(X, X37), U) :- moved(X, U).
del(onfloor, climbon(X38)).
del(inroom(robot, X39), gothru(X40, X41, X42)).
del(status(S, X43), turnon(S)).
moved(robot, goto1(X44, X45)).
moved(robot, goto2(X46, X47)).
moved(robot, pushto(X48, X49, X50)).
moved(X, pushto(X, X51, X52)).
moved(robot, climbon(X53)).
moved(robot, climboff(X54)).
moved(robot, gothru(X55, X56, X57)).
can(goto1(P, R), '##'('##'(locinroom(P, R), inroom(robot, R)), onfloor)).
can(goto2(X, R), '##'('##'(inroom(X, R), inroom(robot, R)), onfloor)).
can(pushto(X, Y, R), '##'('##'('##'('##'(pushable(X), inroom(Y, R)), inroom(X, R)), nextto(robot, X)), onfloor)).
can(turnon(lightswitch(S)), '##'(on(robot, box(succ(zero))), nextto(box(succ(zero)), lightswitch(S)))).
can(climbon(box(B)), '##'(nextto(robot, box(B)), onfloor)).
can(climboff(box(B)), on(robot, box(B))).
can(gothru(D, R1, R2), '##'('##'('##'(connects(D, R1, R2), inroom(robot, R1)), nextto(robot, D)), onfloor)).
always(connects(D, R1, R2)) :- connects1(D, R1, R2).
always(connects(D, R2, R1)) :- connects1(D, R1, R2).
always(inroom(D, R1)) :- always(connects(D, X58, R1)).
always(pushable(box(X59))).
always(locinroom(point(succ(succ(succ(succ(succ(succ(zero))))))), room(succ(succ(succ(succ(zero))))))).
always(inroom(lightswitch(succ(zero)), room(succ(zero)))).
always(at(lightswitch(succ(zero)), point(succ(succ(succ(succ(zero))))))).
connects1(door(N), room(N), room(succ(succ(succ(succ(succ(zero))))))) :- range(N, succ(zero), succ(succ(succ(succ(zero))))).
range(M, M, X60).
range(M, L, N) :- ','(=(X, L), ','(=(X1, N), ','(isLess(X, X1), ','(isPlus(L, succ(zero), U), ','(=(L1, U), range(M, L1, N)))))).
given(start, at(box(N), point(N))) :- range(N, succ(zero), succ(succ(succ(zero)))).
given(start, at(robot, point(succ(succ(succ(succ(succ(zero)))))))).
given(start, inroom(box(N), room(succ(zero)))) :- range(N, succ(zero), succ(succ(succ(zero)))).
given(start, inroom(robot, room(succ(zero)))).
given(start, onfloor).
given(start, status(lightswitch(succ(zero)), off)).
not(P) :- not1(P).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).
not1(P) :- ','(call1(P), fail).
not1(P).
call1(P) :- P.


Query: plans(g,g)
----------------------------------------

(21) FailTransformerProof (EQUIVALENT)
Added clauses for the built-in fail predicate [PROLOG].
----------------------------------------

(22)
Obligation:
Clauses:

plans(C, X1) :- ','(not(consistent(C, true)), ','(nl, ','(write('impossible'), nl))).
plans(C, T) :- ','(time(M0), ','(plan(C, true, T, T1), ','(time(M1), ','(nl, ','(output(T1), ','(nl, ','(is(Time, /(-(M1, M0), succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), ','(write(Time), ','(write(' secs.'), nl))))))))).
time(T) :- statistics(runtime, .(T, .(X2, []))).
output(::(T, U)) :- ','(output1(T), ','(write(U), ','(write('.'), nl))).
output(T) :- ','(write(T), ','(write('.'), nl)).
output1('!!'(T, U)) :- ','(output1(T), ','(write(U), ','(write(';'), nl))).
output1(T) :- ','(write(T), ','(write(';'), nl)).
plan('##'(X, C), P, T, T2) :- ','(solve(X, P, T, P1, T1), plan(C, P1, T1, T2)).
plan(X, P, T, T1) :- solve(X, P, T, X3, T1).
solve(X, P, T, P, T) :- always(X).
solve(X, P, T, P1, T) :- ','(holds(X, T), and(X, P, P1)).
solve(X, P, T, '##'(X, P), T1) :- ','(add(X, U), achieve(X, U, P, T, T1)).
achieve(X4, U, P, T, ::(T1, U)) :- ','(preserves(U, P), ','(can(U, C), ','(consistent(C, P), ','(plan(C, P, T, T1), preserves(U, P))))).
achieve(X, U, P, ::(T, V), ::(T1, V)) :- ','(preserved(X, V), ','(retrace(P, V, P1), ','(achieve(X, U, P1, T, T1), preserved(X, V)))).
holds(X, ::(X5, V)) :- add(X, V).
holds(X, ::(T, V)) :- ','(preserved(X, V), ','(holds(X, T), preserved(X, V))).
holds(X, T) :- given(T, X).
preserved(X, V) :- ','(mkground('##'(X, V), zero, X6), ','(del(X, V), fail)).
preserved(X7, X8).
preserves(U, '##'(X, C)) :- ','(preserved(X, U), preserves(U, C)).
preserves(X9, true).
retrace(P, V, P2) :- ','(can(V, C), ','(retrace1(P, V, C, P1), conjoin(C, P1, P2))).
retrace1('##'(X, P), V, C, P1) :- ','(add(Y, V), ','(equiv(X, Y), retrace1(P, V, C, P1))).
retrace1('##'(X, P), V, C, P1) :- ','(elem(Y, C), ','(equiv(X, Y), retrace1(P, V, C, P1))).
retrace1('##'(X, P), V, C, '##'(X, P1)) :- retrace1(P, V, C, P1).
retrace1(true, X10, X11, true).
consistent(C, P) :- ','(mkground('##'(C, P), zero, X12), ','(imposs(S), ','(not(not(intersect(C, S))), ','(implied(S, '##'(C, P)), fail)))).
consistent(X13, X14).
and(X, P, P) :- ','(elem(Y, P), equiv(X, Y)).
and(X, P, '##'(X, P)).
conjoin('##'(X, C), P, '##'(X, P1)) :- conjoin(C, P, P1).
conjoin(X, P, '##'(X, P)).
elem(X, '##'(Y, X15)) :- elem(X, Y).
elem(X, '##'(X16, C)) :- elem(X, C).
elem(X, X).
intersect(S1, S2) :- ','(elem(X, S1), elem(X, S2)).
implied('##'(S1, S2), C) :- ','(implied(S1, C), implied(S2, C)).
implied(X, C) :- elem(X, C).
notequal(X, Y) :- ','(not(=(X, Y)), ','(not(=(X, qqq(X17))), not(=(Y, qqq(X18))))).
equiv(X, Y) :- not(nonequiv(X, Y)).
nonequiv(X, Y) :- ','(mkground('##'(X, Y), zero, X19), ','(=(X, Y), fail)).
nonequiv(X20, X21).
mkground(qqq(N1), N1, N2) :- ','(isPlus(N1, succ(zero), U), =(N2, U)).
mkground(qqq(X22), N1, N1).
mkground(X, N1, N2) :- ','(=..(X, .(X23, L)), mkgroundlist(L, N1, N2)).
mkgroundlist(.(X, L), N1, N3) :- ','(mkground(X, N1, N2), mkgroundlist(L, N2, N3)).
mkgroundlist([], N1, N1).
test1 :- plans(status(lightswitch(succ(zero)), on), start).
test2 :- plans('##'(nextto(box(succ(zero)), box(succ(succ(zero)))), nextto(box(succ(succ(zero))), box(succ(succ(succ(zero)))))), start).
test3 :- plans(at(robot, point(succ(succ(succ(succ(succ(succ(zero)))))))), start).
test4 :- plans('##'('##'('##'('##'(nextto(box(succ(succ(zero))), box(succ(succ(succ(zero))))), nextto(box(succ(succ(succ(zero)))), door(succ(zero)))), status(lightswitch(succ(zero)), on)), nextto(box(succ(zero)), box(succ(succ(zero))))), inroom(robot, room(succ(succ(zero))))), start).
imposs(X24) :- fail.
add(at(robot, P), goto1(P, X25)).
add(nextto(robot, X), goto2(X, X26)).
add(nextto(X, Y), pushto(X, Y, X27)).
add(nextto(Y, X), pushto(X, Y, X28)).
add(status(S, on), turnon(S)).
add(on(robot, B), climbon(B)).
add(onfloor, climboff(X29)).
add(inroom(robot, R2), gothru(X30, X31, R2)).
del(at(X, X32), U) :- moved(X, U).
del(nextto(Z, robot), U) :- del(nextto(robot, Z), U).
del(nextto(robot, X), pushto(X, X33, X34)) :- fail.
del(nextto(robot, B), climbon(B)) :- fail.
del(nextto(robot, B), climboff(B)) :- fail.
del(nextto(X, X35), U) :- moved(X, U).
del(nextto(X36, X), U) :- moved(X, U).
del(on(X, X37), U) :- moved(X, U).
del(onfloor, climbon(X38)).
del(inroom(robot, X39), gothru(X40, X41, X42)).
del(status(S, X43), turnon(S)).
moved(robot, goto1(X44, X45)).
moved(robot, goto2(X46, X47)).
moved(robot, pushto(X48, X49, X50)).
moved(X, pushto(X, X51, X52)).
moved(robot, climbon(X53)).
moved(robot, climboff(X54)).
moved(robot, gothru(X55, X56, X57)).
can(goto1(P, R), '##'('##'(locinroom(P, R), inroom(robot, R)), onfloor)).
can(goto2(X, R), '##'('##'(inroom(X, R), inroom(robot, R)), onfloor)).
can(pushto(X, Y, R), '##'('##'('##'('##'(pushable(X), inroom(Y, R)), inroom(X, R)), nextto(robot, X)), onfloor)).
can(turnon(lightswitch(S)), '##'(on(robot, box(succ(zero))), nextto(box(succ(zero)), lightswitch(S)))).
can(climbon(box(B)), '##'(nextto(robot, box(B)), onfloor)).
can(climboff(box(B)), on(robot, box(B))).
can(gothru(D, R1, R2), '##'('##'('##'(connects(D, R1, R2), inroom(robot, R1)), nextto(robot, D)), onfloor)).
always(connects(D, R1, R2)) :- connects1(D, R1, R2).
always(connects(D, R2, R1)) :- connects1(D, R1, R2).
always(inroom(D, R1)) :- always(connects(D, X58, R1)).
always(pushable(box(X59))).
always(locinroom(point(succ(succ(succ(succ(succ(succ(zero))))))), room(succ(succ(succ(succ(zero))))))).
always(inroom(lightswitch(succ(zero)), room(succ(zero)))).
always(at(lightswitch(succ(zero)), point(succ(succ(succ(succ(zero))))))).
connects1(door(N), room(N), room(succ(succ(succ(succ(succ(zero))))))) :- range(N, succ(zero), succ(succ(succ(succ(zero))))).
range(M, M, X60).
range(M, L, N) :- ','(=(X, L), ','(=(X1, N), ','(isLess(X, X1), ','(isPlus(L, succ(zero), U), ','(=(L1, U), range(M, L1, N)))))).
given(start, at(box(N), point(N))) :- range(N, succ(zero), succ(succ(succ(zero)))).
given(start, at(robot, point(succ(succ(succ(succ(succ(zero)))))))).
given(start, inroom(box(N), room(succ(zero)))) :- range(N, succ(zero), succ(succ(succ(zero)))).
given(start, inroom(robot, room(succ(zero)))).
given(start, onfloor).
given(start, status(lightswitch(succ(zero)), off)).
not(P) :- not1(P).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).
not1(P) :- ','(call1(P), fail).
not1(P).
call1(P) :- P.
fail :- failure(a).
failure(b).


Query: plans(g,g)
----------------------------------------

(23) UnifyTransformerProof (EQUIVALENT)
Added a fact for the built-in = predicate [PROLOG].
----------------------------------------

(24)
Obligation:
Clauses:

plans(C, X1) :- ','(not(consistent(C, true)), ','(nl, ','(write('impossible'), nl))).
plans(C, T) :- ','(time(M0), ','(plan(C, true, T, T1), ','(time(M1), ','(nl, ','(output(T1), ','(nl, ','(is(Time, /(-(M1, M0), succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zerowrite(Time), ','(write(' secs.'), nl))))))))).
time(T) :- statistics(runtime, .(T, .(X2, []))).
output(::(T, U)) :- ','(output1(T), ','(write(U), ','(write('.'), nl))).
output(T) :- ','(write(T), ','(write('.'), nl)).
output1('!!'(T, U)) :- ','(output1(T), ','(write(U), ','(write(';'), nl))).
output1(T) :- ','(write(T), ','(write(';'), nl)).
plan('##'(X, C), P, T, T2) :- ','(solve(X, P, T, P1, T1), plan(C, P1, T1, T2)).
plan(X, P, T, T1) :- solve(X, P, T, X3, T1).
solve(X, P, T, P, T) :- always(X).
solve(X, P, T, P1, T) :- ','(holds(X, T), and(X, P, P1)).
solve(X, P, T, '##'(X, P), T1) :- ','(add(X, U), achieve(X, U, P, T, T1)).
achieve(X4, U, P, T, ::(T1, U)) :- ','(preserves(U, P), ','(can(U, C), ','(consistent(C, P), ','(plan(C, P, T, T1), preserves(U, P))))).
achieve(X, U, P, ::(T, V), ::(T1, V)) :- ','(preserved(X, V), ','(retrace(P, V, P1), ','(achieve(X, U, P1, T, T1), preserved(X, V)))).
holds(X, ::(X5, V)) :- add(X, V).
holds(X, ::(T, V)) :- ','(preserved(X, V), ','(holds(X, T), preserved(X, V))).
holds(X, T) :- given(T, X).
preserved(X, V) :- ','(mkground('##'(X, V), zero, X6), ','(del(X, V), fail)).
preserved(X7, X8).
preserves(U, '##'(X, C)) :- ','(preserved(X, U), preserves(U, C)).
preserves(X9, true).
retrace(P, V, P2) :- ','(can(V, C), ','(retrace1(P, V, C, P1), conjoin(C, P1, P2))).
retrace1('##'(X, P), V, C, P1) :- ','(add(Y, V), ','(equiv(X, Y), retrace1(P, V, C, P1))).
retrace1('##'(X, P), V, C, P1) :- ','(elem(Y, C), ','(equiv(X, Y), retrace1(P, V, C, P1))).
retrace1('##'(X, P), V, C, '##'(X, P1)) :- retrace1(P, V, C, P1).
retrace1(true, X10, X11, true).
consistent(C, P) :- ','(mkground('##'(C, P), zero, X12), ','(imposs(S), ','(not(not(intersect(C, S))), ','(implied(S, '##'(C, P)), fail)))).
consistent(X13, X14).
and(X, P, P) :- ','(elem(Y, P), equiv(X, Y)).
and(X, P, '##'(X, P)).
conjoin('##'(X, C), P, '##'(X, P1)) :- conjoin(C, P, P1).
conjoin(X, P, '##'(X, P)).
elem(X, '##'(Y, X15)) :- elem(X, Y).
elem(X, '##'(X16, C)) :- elem(X, C).
elem(X, X).
intersect(S1, S2) :- ','(elem(X, S1), elem(X, S2)).
implied('##'(S1, S2), C) :- ','(implied(S1, C), implied(S2, C)).
implied(X, C) :- elem(X, C).
notequal(X, Y) :- ','(not(=(X, Y)), ','(not(=(X, qqq(X17))), not(=(Y, qqq(X18))))).
equiv(X, Y) :- not(nonequiv(X, Y)).
nonequiv(X, Y) :- ','(mkground('##'(X, Y), zero, X19), ','(=(X, Y), fail)).
nonequiv(X20, X21).
mkground(qqq(N1), N1, N2) :- ','(isPlus(N1, succ(zero), U), =(N2, U)).
mkground(qqq(X22), N1, N1).
mkground(X, N1, N2) :- ','(=..(X, .(X23, L)), mkgroundlist(L, N1, N2)).
mkgroundlist(.(X, L), N1, N3) :- ','(mkground(X, N1, N2), mkgroundlist(L, N2, N3)).
mkgroundlist([], N1, N1).
test1 :- plans(status(lightswitch(succ(zero)), on), start).
test2 :- plans('##'(nextto(box(succ(zero)), box(succ(succ(zero)))), nextto(box(succ(succ(zero))), box(succ(succ(succ(zero)))))), start).
test3 :- plans(at(robot, point(succ(succ(succ(succ(succ(succ(zero)))))))), start).
test4 :- plans('##'('##'('##'('##'(nextto(box(succ(succ(zero))), box(succ(succ(succ(zero))))), nextto(box(succ(succ(succ(zero)))), door(succ(zero)))), status(lightswitch(succ(zero)), on)), nextto(box(succ(zero)), box(succ(succ(zero))))), inroom(robot, room(succ(succ(zero))))), start).
imposs(X24) :- fail.
add(at(robot, P), goto1(P, X25)).
add(nextto(robot, X), goto2(X, X26)).
add(nextto(X, Y), pushto(X, Y, X27)).
add(nextto(Y, X), pushto(X, Y, X28)).
add(status(S, on), turnon(S)).
add(on(robot, B), climbon(B)).
add(onfloor, climboff(X29)).
add(inroom(robot, R2), gothru(X30, X31, R2)).
del(at(X, X32), U) :- moved(X, U).
del(nextto(Z, robot), U) :- del(nextto(robot, Z), U).
del(nextto(robot, X), pushto(X, X33, X34)) :- fail.
del(nextto(robot, B), climbon(B)) :- fail.
del(nextto(robot, B), climboff(B)) :- fail.
del(nextto(X, X35), U) :- moved(X, U).
del(nextto(X36, X), U) :- moved(X, U).
del(on(X, X37), U) :- moved(X, U).
del(onfloor, climbon(X38)).
del(inroom(robot, X39), gothru(X40, X41, X42)).
del(status(S, X43), turnon(S)).
moved(robot, goto1(X44, X45)).
moved(robot, goto2(X46, X47)).
moved(robot, pushto(X48, X49, X50)).
moved(X, pushto(X, X51, X52)).
moved(robot, climbon(X53)).
moved(robot, climboff(X54)).
moved(robot, gothru(X55, X56, X57)).
can(goto1(P, R), '##'('##'(locinroom(P, R), inroom(robot, R)), onfloor)).
can(goto2(X, R), '##'('##'(inroom(X, R), inroom(robot, R)), onfloor)).
can(pushto(X, Y, R), '##'('##'('##'('##'(pushable(X), inroom(Y, R)), inroom(X, R)), nextto(robot, X)), onfloor)).
can(turnon(lightswitch(S)), '##'(on(robot, box(succ(zero))), nextto(box(succ(zero)), lightswitch(S)))).
can(climbon(box(B)), '##'(nextto(robot, box(B)), onfloor)).
can(climboff(box(B)), on(robot, box(B))).
can(gothru(D, R1, R2), '##'('##'('##'(connects(D, R1, R2), inroom(robot, R1)), nextto(robot, D)), onfloor)).
always(connects(D, R1, R2)) :- connects1(D, R1, R2).
always(connects(D, R2, R1)) :- connects1(D, R1, R2).
always(inroom(D, R1)) :- always(connects(D, X58, R1)).
always(pushable(box(X59))).
always(locinroom(point(succ(succ(succ(succ(succ(succ(zero))))))), room(succ(succ(succ(succ(zero))))))).
always(inroom(lightswitch(succ(zero)), room(succ(zero)))).
always(at(lightswitch(succ(zero)), point(succ(succ(succ(succ(zero))))))).
connects1(door(N), room(N), room(succ(succ(succ(succ(succ(zero))))))) :- range(N, succ(zero), succ(succ(succ(succ(zero))))).
range(M, M, X60).
range(M, L, N) :- ','(=(X, L), ','(=(X1, N), ','(isLess(X, X1), ','(isPlus(L, succ(zero), U), ','(=(L1, U), range(M, L1, N)))))).
given(start, at(box(N), point(N))) :- range(N, succ(zero), succ(succ(succ(zero)))).
given(start, at(robot, point(succ(succ(succ(succ(succ(zero)))))))).
given(start, inroom(box(N), room(succ(zero)))) :- range(N, succ(zero), succ(succ(succ(zero)))).
given(start, inroom(robot, room(succ(zero)))).
given(start, onfloor).
given(start, status(lightswitch(succ(zero)), off)).
not(P) :- not1(P).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).
not1(P) :- ','(call1(P), fail).
not1(P).
call1(P) :- P.
fail :- failure(a).
failure(b).
=(X, X).


Query: plans(g,g)
----------------------------------------

(25) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(26)
Obligation:
Clauses:

plans(C, X1) :- ','(not(consistent(C, true)), ','(nl, ','(write('impossible'), nl))).
plans(C, T) :- ','(time(M0), ','(plan(C, true, T, T1), ','(time(M1), ','(nl, ','(output(T1), ','(nl, ','(is(Time, /(-(M1, M0), succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zerowrite(Time), ','(write(' secs.'), nl))))))))).
time(T) :- statistics(runtime, .(T, .(X2, []))).
output(::(T, U)) :- ','(output1(T), ','(write(U), ','(write('.'), nl))).
output(T) :- ','(write(T), ','(write('.'), nl)).
output1('!!'(T, U)) :- ','(output1(T), ','(write(U), ','(write(';'), nl))).
output1(T) :- ','(write(T), ','(write(';'), nl)).
plan('##'(X, C), P, T, T2) :- ','(solve(X, P, T, P1, T1), plan(C, P1, T1, T2)).
plan(X, P, T, T1) :- solve(X, P, T, X3, T1).
solve(X, P, T, P, T) :- always(X).
solve(X, P, T, P1, T) :- ','(holds(X, T), and(X, P, P1)).
solve(X, P, T, '##'(X, P), T1) :- ','(add(X, U), achieve(X, U, P, T, T1)).
achieve(X4, U, P, T, ::(T1, U)) :- ','(preserves(U, P), ','(can(U, C), ','(consistent(C, P), ','(plan(C, P, T, T1), preserves(U, P))))).
achieve(X, U, P, ::(T, V), ::(T1, V)) :- ','(preserved(X, V), ','(retrace(P, V, P1), ','(achieve(X, U, P1, T, T1), preserved(X, V)))).
holds(X, ::(X5, V)) :- add(X, V).
holds(X, ::(T, V)) :- ','(preserved(X, V), ','(holds(X, T), preserved(X, V))).
holds(X, T) :- given(T, X).
preserved(X, V) :- ','(mkground('##'(X, V), zero, X6), ','(del(X, V), fail)).
preserved(X7, X8).
preserves(U, '##'(X, C)) :- ','(preserved(X, U), preserves(U, C)).
preserves(X9, true).
retrace(P, V, P2) :- ','(can(V, C), ','(retrace1(P, V, C, P1), conjoin(C, P1, P2))).
retrace1('##'(X, P), V, C, P1) :- ','(add(Y, V), ','(equiv(X, Y), retrace1(P, V, C, P1))).
retrace1('##'(X, P), V, C, P1) :- ','(elem(Y, C), ','(equiv(X, Y), retrace1(P, V, C, P1))).
retrace1('##'(X, P), V, C, '##'(X, P1)) :- retrace1(P, V, C, P1).
retrace1(true, X10, X11, true).
consistent(C, P) :- ','(mkground('##'(C, P), zero, X12), ','(imposs(S), ','(not(not(intersect(C, S))), ','(implied(S, '##'(C, P)), fail)))).
consistent(X13, X14).
and(X, P, P) :- ','(elem(Y, P), equiv(X, Y)).
and(X, P, '##'(X, P)).
conjoin('##'(X, C), P, '##'(X, P1)) :- conjoin(C, P, P1).
conjoin(X, P, '##'(X, P)).
elem(X, '##'(Y, X15)) :- elem(X, Y).
elem(X, '##'(X16, C)) :- elem(X, C).
elem(X, X).
intersect(S1, S2) :- ','(elem(X, S1), elem(X, S2)).
implied('##'(S1, S2), C) :- ','(implied(S1, C), implied(S2, C)).
implied(X, C) :- elem(X, C).
notequal(X, Y) :- ','(not(=(X, Y)), ','(not(=(X, qqq(X17))), not(=(Y, qqq(X18))))).
equiv(X, Y) :- not(nonequiv(X, Y)).
nonequiv(X, Y) :- ','(mkground('##'(X, Y), zero, X19), ','(=(X, Y), fail)).
nonequiv(X20, X21).
mkground(qqq(N1), N1, N2) :- ','(isPlus(N1, succ(zero), U), =(N2, U)).
mkground(qqq(X22), N1, N1).
mkground(X, N1, N2) :- ','(=..(X, .(X23, L)), mkgroundlist(L, N1, N2)).
mkgroundlist(.(X, L), N1, N3) :- ','(mkground(X, N1, N2), mkgroundlist(L, N2, N3)).
mkgroundlist([], N1, N1).
test1 :- plans(status(lightswitch(succ(zero)), on), start).
test2 :- plans('##'(nextto(box(succ(zero)), box(succ(succ(zero)))), nextto(box(succ(succ(zero))), box(succ(succ(succ(zero)))))), start).
test3 :- plans(at(robot, point(succ(succ(succ(succ(succ(succ(zero)))))))), start).
test4 :- plans('##'('##'('##'('##'(nextto(box(succ(succ(zero))), box(succ(succ(succ(zero))))), nextto(box(succ(succ(succ(zero)))), door(succ(zero)))), status(lightswitch(succ(zero)), on)), nextto(box(succ(zero)), box(succ(succ(zero))))), inroom(robot, room(succ(succ(zero))))), start).
imposs(X24) :- fail.
add(at(robot, P), goto1(P, X25)).
add(nextto(robot, X), goto2(X, X26)).
add(nextto(X, Y), pushto(X, Y, X27)).
add(nextto(Y, X), pushto(X, Y, X28)).
add(status(S, on), turnon(S)).
add(on(robot, B), climbon(B)).
add(onfloor, climboff(X29)).
add(inroom(robot, R2), gothru(X30, X31, R2)).
del(at(X, X32), U) :- moved(X, U).
del(nextto(Z, robot), U) :- del(nextto(robot, Z), U).
del(nextto(robot, X), pushto(X, X33, X34)) :- fail.
del(nextto(robot, B), climbon(B)) :- fail.
del(nextto(robot, B), climboff(B)) :- fail.
del(nextto(X, X35), U) :- moved(X, U).
del(nextto(X36, X), U) :- moved(X, U).
del(on(X, X37), U) :- moved(X, U).
del(onfloor, climbon(X38)).
del(inroom(robot, X39), gothru(X40, X41, X42)).
del(status(S, X43), turnon(S)).
moved(robot, goto1(X44, X45)).
moved(robot, goto2(X46, X47)).
moved(robot, pushto(X48, X49, X50)).
moved(X, pushto(X, X51, X52)).
moved(robot, climbon(X53)).
moved(robot, climboff(X54)).
moved(robot, gothru(X55, X56, X57)).
can(goto1(P, R), '##'('##'(locinroom(P, R), inroom(robot, R)), onfloor)).
can(goto2(X, R), '##'('##'(inroom(X, R), inroom(robot, R)), onfloor)).
can(pushto(X, Y, R), '##'('##'('##'('##'(pushable(X), inroom(Y, R)), inroom(X, R)), nextto(robot, X)), onfloor)).
can(turnon(lightswitch(S)), '##'(on(robot, box(succ(zero))), nextto(box(succ(zero)), lightswitch(S)))).
can(climbon(box(B)), '##'(nextto(robot, box(B)), onfloor)).
can(climboff(box(B)), on(robot, box(B))).
can(gothru(D, R1, R2), '##'('##'('##'(connects(D, R1, R2), inroom(robot, R1)), nextto(robot, D)), onfloor)).
always(connects(D, R1, R2)) :- connects1(D, R1, R2).
always(connects(D, R2, R1)) :- connects1(D, R1, R2).
always(inroom(D, R1)) :- always(connects(D, X58, R1)).
always(pushable(box(X59))).
always(locinroom(point(succ(succ(succ(succ(succ(succ(zero))))))), room(succ(succ(succ(succ(zero))))))).
always(inroom(lightswitch(succ(zero)), room(succ(zero)))).
always(at(lightswitch(succ(zero)), point(succ(succ(succ(succ(zero))))))).
connects1(door(N), room(N), room(succ(succ(succ(succ(succ(zero))))))) :- range(N, succ(zero), succ(succ(succ(succ(zero))))).
range(M, M, X60).
range(M, L, N) :- ','(=(X, L), ','(=(X1, N), ','(isLess(X, X1), ','(isPlus(L, succ(zero), U), ','(=(L1, U), range(M, L1, N)))))).
given(start, at(box(N), point(N))) :- range(N, succ(zero), succ(succ(succ(zero)))).
given(start, at(robot, point(succ(succ(succ(succ(succ(zero)))))))).
given(start, inroom(box(N), room(succ(zero)))) :- range(N, succ(zero), succ(succ(succ(zero)))).
given(start, inroom(robot, room(succ(zero)))).
given(start, onfloor).
given(start, status(lightswitch(succ(zero)), off)).
not(P) :- not1(P).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).
not1(P) :- ','(call1(P), fail).
not1(P).
call1(P) :- P.
fail :- failure(a).
failure(b).
=(X, X).
nl.
write(X0).
is(X0, X1).
statistics(X0, X1).
=..(X0, X1).


Query: plans(g,g)