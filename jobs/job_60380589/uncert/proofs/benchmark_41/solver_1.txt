MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/24WlK.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

main(g,g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) IntegerArithmeticTransformerProof [SOUND, 0 ms]
(2) Prolog
    (3) CutEliminatorProof [SOUND, 0 ms]
    (4) Prolog
    (5) UnifyTransformerProof [EQUIVALENT, 0 ms]
    (6) Prolog
    (7) OrTransformerProof [EQUIVALENT, 0 ms]
    (8) Prolog
    (9) PrologToPiTRSProof [SOUND, 29 ms]
    (10) PiTRS
        (11) DependencyPairsProof [EQUIVALENT, 190 ms]
        (12) PiDP
        (13) DependencyGraphProof [EQUIVALENT, 0 ms]
        (14) AND
            (15) PiDP
                (16) UsableRulesProof [EQUIVALENT, 0 ms]
                (17) PiDP
                (18) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (19) QDP
                (20) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (21) YES
            (22) PiDP
                (23) UsableRulesProof [EQUIVALENT, 0 ms]
                (24) PiDP
                (25) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (26) QDP
                (27) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (28) YES
            (29) PiDP
                (30) UsableRulesProof [EQUIVALENT, 0 ms]
                (31) PiDP
                (32) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (33) QDP
                (34) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (35) YES
            (36) PiDP
                (37) UsableRulesProof [EQUIVALENT, 0 ms]
                (38) PiDP
                (39) PiDPToQDPProof [SOUND, 0 ms]
                (40) QDP
                (41) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (42) YES
            (43) PiDP
                (44) UsableRulesProof [EQUIVALENT, 0 ms]
                (45) PiDP
                (46) PiDPToQDPProof [SOUND, 0 ms]
                (47) QDP
                (48) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (49) YES
            (50) PiDP
                (51) UsableRulesProof [EQUIVALENT, 0 ms]
                (52) PiDP
                (53) PiDPToQDPProof [SOUND, 0 ms]
                (54) QDP
                (55) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (56) YES
            (57) PiDP
                (58) UsableRulesProof [EQUIVALENT, 0 ms]
                (59) PiDP
                (60) PiDPToQDPProof [SOUND, 0 ms]
                (61) QDP
                (62) TransformationProof [EQUIVALENT, 5 ms]
                (63) QDP
                (64) TransformationProof [EQUIVALENT, 0 ms]
                (65) QDP
                (66) TransformationProof [EQUIVALENT, 0 ms]
                (67) QDP
                (68) TransformationProof [EQUIVALENT, 0 ms]
                (69) QDP
                (70) TransformationProof [EQUIVALENT, 0 ms]
                (71) QDP
                (72) TransformationProof [SOUND, 0 ms]
                (73) QDP
                (74) TransformationProof [EQUIVALENT, 0 ms]
                (75) QDP
                (76) TransformationProof [EQUIVALENT, 0 ms]
                (77) QDP
                (78) TransformationProof [EQUIVALENT, 0 ms]
                (79) QDP
            (80) PiDP
                (81) UsableRulesProof [EQUIVALENT, 0 ms]
                (82) PiDP
    (83) PrologToPiTRSProof [SOUND, 32 ms]
    (84) PiTRS
        (85) DependencyPairsProof [EQUIVALENT, 166 ms]
        (86) PiDP
        (87) DependencyGraphProof [EQUIVALENT, 0 ms]
        (88) AND
            (89) PiDP
                (90) UsableRulesProof [EQUIVALENT, 0 ms]
                (91) PiDP
                (92) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (93) QDP
                (94) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (95) YES
            (96) PiDP
                (97) UsableRulesProof [EQUIVALENT, 0 ms]
                (98) PiDP
                (99) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (100) QDP
                (101) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (102) YES
            (103) PiDP
                (104) UsableRulesProof [EQUIVALENT, 0 ms]
                (105) PiDP
                (106) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (107) QDP
                (108) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (109) YES
            (110) PiDP
                (111) UsableRulesProof [EQUIVALENT, 0 ms]
                (112) PiDP
                (113) PiDPToQDPProof [SOUND, 0 ms]
                (114) QDP
                (115) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (116) YES
            (117) PiDP
                (118) UsableRulesProof [EQUIVALENT, 0 ms]
                (119) PiDP
                (120) PiDPToQDPProof [SOUND, 0 ms]
                (121) QDP
                (122) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (123) YES
            (124) PiDP
                (125) UsableRulesProof [EQUIVALENT, 0 ms]
                (126) PiDP
                (127) PiDPToQDPProof [SOUND, 0 ms]
                (128) QDP
                (129) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (130) YES
            (131) PiDP
                (132) UsableRulesProof [EQUIVALENT, 0 ms]
                (133) PiDP
                (134) PiDPToQDPProof [SOUND, 0 ms]
                (135) QDP
                (136) TransformationProof [EQUIVALENT, 0 ms]
                (137) QDP
                (138) TransformationProof [EQUIVALENT, 0 ms]
                (139) QDP
                (140) TransformationProof [EQUIVALENT, 0 ms]
                (141) QDP
                (142) TransformationProof [EQUIVALENT, 0 ms]
                (143) QDP
                (144) TransformationProof [EQUIVALENT, 1 ms]
                (145) QDP
                (146) TransformationProof [SOUND, 0 ms]
                (147) QDP
                (148) TransformationProof [EQUIVALENT, 0 ms]
                (149) QDP
                (150) TransformationProof [EQUIVALENT, 0 ms]
                (151) QDP
                (152) TransformationProof [EQUIVALENT, 0 ms]
                (153) QDP
            (154) PiDP
                (155) UsableRulesProof [EQUIVALENT, 0 ms]
                (156) PiDP
(157) CutEliminatorProof [SOUND, 0 ms]
(158) Prolog
    (159) UndefinedPredicateHandlerProof [SOUND, 0 ms]
    (160) Prolog
    (161) PrologToPiTRSProof [SOUND, 0 ms]
    (162) PiTRS
        (163) DependencyPairsProof [EQUIVALENT, 39 ms]
        (164) PiDP
        (165) DependencyGraphProof [EQUIVALENT, 0 ms]
        (166) AND
            (167) PiDP
                (168) UsableRulesProof [EQUIVALENT, 0 ms]
                (169) PiDP
                (170) PiDPToQDPProof [SOUND, 0 ms]
                (171) QDP
                (172) TransformationProof [EQUIVALENT, 0 ms]
                (173) QDP
                (174) TransformationProof [EQUIVALENT, 0 ms]
                (175) QDP
                (176) TransformationProof [EQUIVALENT, 0 ms]
                (177) QDP
                (178) TransformationProof [EQUIVALENT, 0 ms]
                (179) QDP
                (180) TransformationProof [EQUIVALENT, 0 ms]
                (181) QDP
                (182) TransformationProof [EQUIVALENT, 0 ms]
                (183) QDP
                (184) TransformationProof [EQUIVALENT, 0 ms]
                (185) QDP
                (186) TransformationProof [EQUIVALENT, 0 ms]
                (187) QDP
                (188) TransformationProof [EQUIVALENT, 0 ms]
                (189) QDP
                (190) TransformationProof [EQUIVALENT, 0 ms]
                (191) QDP
            (192) PiDP
                (193) UsableRulesProof [EQUIVALENT, 0 ms]
                (194) PiDP
    (195) PrologToPiTRSProof [SOUND, 0 ms]
    (196) PiTRS
        (197) DependencyPairsProof [EQUIVALENT, 32 ms]
        (198) PiDP
        (199) DependencyGraphProof [EQUIVALENT, 0 ms]
        (200) AND
            (201) PiDP
                (202) UsableRulesProof [EQUIVALENT, 0 ms]
                (203) PiDP
                (204) PiDPToQDPProof [SOUND, 0 ms]
                (205) QDP
                (206) TransformationProof [EQUIVALENT, 0 ms]
                (207) QDP
                (208) TransformationProof [EQUIVALENT, 0 ms]
                (209) QDP
                (210) TransformationProof [EQUIVALENT, 0 ms]
                (211) QDP
                (212) TransformationProof [EQUIVALENT, 0 ms]
                (213) QDP
                (214) TransformationProof [EQUIVALENT, 0 ms]
                (215) QDP
                (216) TransformationProof [EQUIVALENT, 0 ms]
                (217) QDP
                (218) TransformationProof [EQUIVALENT, 0 ms]
                (219) QDP
                (220) TransformationProof [EQUIVALENT, 0 ms]
                (221) QDP
                (222) TransformationProof [EQUIVALENT, 0 ms]
                (223) QDP
                (224) TransformationProof [EQUIVALENT, 0 ms]
                (225) QDP
                (226) TransformationProof [EQUIVALENT, 0 ms]
                (227) QDP
                (228) TransformationProof [EQUIVALENT, 0 ms]
                (229) QDP
                (230) TransformationProof [EQUIVALENT, 0 ms]
                (231) QDP
                (232) TransformationProof [EQUIVALENT, 0 ms]
                (233) QDP
                (234) TransformationProof [EQUIVALENT, 0 ms]
                (235) QDP
                (236) TransformationProof [EQUIVALENT, 0 ms]
                (237) QDP
            (238) PiDP
                (239) UsableRulesProof [EQUIVALENT, 0 ms]
                (240) PiDP
(241) PrologToDTProblemTransformerProof [SOUND, 58 ms]
(242) TRIPLES
    (243) TriplesToPiDPProof [SOUND, 6 ms]
    (244) PiDP
    (245) DependencyGraphProof [EQUIVALENT, 0 ms]
    (246) AND
        (247) PiDP
            (248) UsableRulesProof [EQUIVALENT, 0 ms]
            (249) PiDP
            (250) PiDPToQDPProof [SOUND, 0 ms]
            (251) QDP
        (252) PiDP
            (253) UsableRulesProof [EQUIVALENT, 0 ms]
            (254) PiDP
(255) PrologToIRSwTTransformerProof [SOUND, 25 ms]
(256) IRSwT
    (257) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (258) IRSwT
    (259) IntTRSCompressionProof [EQUIVALENT, 9 ms]
    (260) IRSwT
    (261) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (262) IRSwT
    (263) IRSwTTerminationDigraphProof [EQUIVALENT, 20 ms]
    (264) AND
        (265) IRSwT
            (266) IntTRSCompressionProof [EQUIVALENT, 0 ms]
            (267) IRSwT
            (268) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
            (269) IRSwT
            (270) FilterProof [EQUIVALENT, 0 ms]
            (271) IntTRS
            (272) IntTRSPeriodicNontermProof [COMPLETE, 3 ms]
            (273) NO
        (274) IRSwT
            (275) IntTRSCompressionProof [EQUIVALENT, 0 ms]
            (276) IRSwT
            (277) IntTRSUnneededArgumentFilterProof [EQUIVALENT, 0 ms]
            (278) IRSwT
            (279) FilterProof [EQUIVALENT, 0 ms]
            (280) IntTRS
            (281) IntTRSPeriodicNontermProof [COMPLETE, 3 ms]
            (282) NO


----------------------------------------

(0)
Obligation:
Clauses:

main(M, N) :- ','(>=(M, 0), ','(=<(M, 3), ','(>=(N, 0), ','(=<(N, 23), ackermann(M, N, X1))))).
ackermann(M, N, Ret) :- ','(=:=(M, 0), ','(!, is(Ret, +(N, 1)))).
ackermann(M, N, Ret) :- ','(=:=(N, 0), ','(!, ','(is(M1, -(M, 1)), ackermann(M1, 1, Ret)))).
ackermann(M, N, Ret) :- ','(!, ','(is(N1, -(N, 1)), ','(ackermann(M, N1, Ret1), ','(is(M1, -(M, 1)), ','(ackermann(M1, Ret1, Ret2), is(Ret, Ret2)))))).


Query: main(g,g)
----------------------------------------

(1) IntegerArithmeticTransformerProof (SOUND)
Added definitions of predefined predicates [PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

main(M, N) :- ','(=(X, M), ','(=(X2, zero), ','(;(isGreater(X, X2), =(X, X2)), ','(=(X5, M), ','(=(X6, succ(succ(succ(zero)))), ','(;(=(X5, X6), isLess(X5, X6)), ','(=(X3, N), ','(=(X4, zero), ','(;(isGreater(X3, X4), =(X3, X4)), ','(=(X7, N), ','(=(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))), ','(;(=(X7, X8), isLess(X7, X8)), ackermann(M, N, X1))))))))))))).
ackermann(M, N, Ret) :- ','(=(X, M), ','(=(X1, zero), ','(=(X, X1), ','(!, ','(isPlus(N, succ(zero), U), =(Ret, U)))))).
ackermann(M, N, Ret) :- ','(=(X, N), ','(=(X1, zero), ','(=(X, X1), ','(!, ','(isMinus(M, succ(zero), U), ','(=(M1, U), ackermann(M1, succ(zero), Ret))))))).
ackermann(M, N, Ret) :- ','(!, ','(isMinus(N, succ(zero), U), ','(=(N1, U), ','(ackermann(M, N1, Ret1), ','(isMinus(M, succ(zero), U), ','(=(M1, U), ','(ackermann(M1, Ret1, Ret2), =(Ret, Ret2)))))))).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isGreater(succ(X), zero).
isGreater(succ(X), pred(Y)).
isGreater(succ(X), succ(Y)) :- isGreater(X, Y).
isGreater(zero, pred(Y)).
isGreater(pred(X), pred(Y)) :- isGreater(X, Y).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).


Query: main(g,g)
----------------------------------------

(3) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(4)
Obligation:
Clauses:

main(M, N) :- ','(=(X, M), ','(=(X2, zero), ','(;(isGreater(X, X2), =(X, X2)), ','(=(X5, M), ','(=(X6, succ(succ(succ(zero)))), ','(;(=(X5, X6), isLess(X5, X6)), ','(=(X3, N), ','(=(X4, zero), ','(;(isGreater(X3, X4), =(X3, X4)), ','(=(X7, N), ','(=(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))), ','(;(=(X7, X8), isLess(X7, X8)), ackermann(M, N, X1))))))))))))).
ackermann(M, N, Ret) :- ','(=(X, M), ','(=(X1, zero), ','(=(X, X1), ','(isPlus(N, succ(zero), U), =(Ret, U))))).
ackermann(M, N, Ret) :- ','(=(X, N), ','(=(X1, zero), ','(=(X, X1), ','(isMinus(M, succ(zero), U), ','(=(M1, U), ackermann(M1, succ(zero), Ret)))))).
ackermann(M, N, Ret) :- ','(isMinus(N, succ(zero), U), ','(=(N1, U), ','(ackermann(M, N1, Ret1), ','(isMinus(M, succ(zero), U), ','(=(M1, U), ','(ackermann(M1, Ret1, Ret2), =(Ret, Ret2))))))).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isGreater(succ(X), zero).
isGreater(succ(X), pred(Y)).
isGreater(succ(X), succ(Y)) :- isGreater(X, Y).
isGreater(zero, pred(Y)).
isGreater(pred(X), pred(Y)) :- isGreater(X, Y).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).


Query: main(g,g)
----------------------------------------

(5) UnifyTransformerProof (EQUIVALENT)
Added a fact for the built-in = predicate [PROLOG].
----------------------------------------

(6)
Obligation:
Clauses:

main(M, N) :- ','(=(X, M), ','(=(X2, zero), ','(;(isGreater(X, X2), =(X, X2)), ','(=(X5, M), ','(=(X6, succ(succ(succ(zero)))), ','(;(=(X5, X6), isLess(X5, X6)), ','(=(X3, N), ','(=(X4, zero), ','(;(isGreater(X3, X4), =(X3, X4)), ','(=(X7, N), ','(=(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))), ','(;(=(X7, X8), isLess(X7, X8)), ackermann(M, N, X1))))))))))))).
ackermann(M, N, Ret) :- ','(=(X, M), ','(=(X1, zero), ','(=(X, X1), ','(isPlus(N, succ(zero), U), =(Ret, U))))).
ackermann(M, N, Ret) :- ','(=(X, N), ','(=(X1, zero), ','(=(X, X1), ','(isMinus(M, succ(zero), U), ','(=(M1, U), ackermann(M1, succ(zero), Ret)))))).
ackermann(M, N, Ret) :- ','(isMinus(N, succ(zero), U), ','(=(N1, U), ','(ackermann(M, N1, Ret1), ','(isMinus(M, succ(zero), U), ','(=(M1, U), ','(ackermann(M1, Ret1, Ret2), =(Ret, Ret2))))))).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isGreater(succ(X), zero).
isGreater(succ(X), pred(Y)).
isGreater(succ(X), succ(Y)) :- isGreater(X, Y).
isGreater(zero, pred(Y)).
isGreater(pred(X), pred(Y)) :- isGreater(X, Y).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).
=(X, X).


Query: main(g,g)
----------------------------------------

(7) OrTransformerProof (EQUIVALENT)
Transformed all or-constructs[PROLOG].
----------------------------------------

(8)
Obligation:
Clauses:

main(M, N) :- ','(=(X, M), ','(=(X2, zero), ','(isGreater(X, X2), ','(=(X5, M), ','(=(X6, succ(succ(succ(zero)))), ','(=(X5, X6), ','(=(X3, N), ','(=(X4, zero), ','(isGreater(X3, X4), ','(=(X7, N), ','(=(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))), ','(=(X7, X8), ackermann(M, N, X1))))))))))))).
main(M, N) :- ','(=(X, M), ','(=(X2, zero), ','(isGreater(X, X2), ','(=(X5, M), ','(=(X6, succ(succ(succ(zero)))), ','(=(X5, X6), ','(=(X3, N), ','(=(X4, zero), ','(isGreater(X3, X4), ','(=(X7, N), ','(=(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))), ','(isLess(X7, X8), ackermann(M, N, X1))))))))))))).
main(M, N) :- ','(=(X, M), ','(=(X2, zero), ','(isGreater(X, X2), ','(=(X5, M), ','(=(X6, succ(succ(succ(zero)))), ','(=(X5, X6), ','(=(X3, N), ','(=(X4, zero), ','(=(X3, X4), ','(=(X7, N), ','(=(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))), ','(=(X7, X8), ackermann(M, N, X1))))))))))))).
main(M, N) :- ','(=(X, M), ','(=(X2, zero), ','(isGreater(X, X2), ','(=(X5, M), ','(=(X6, succ(succ(succ(zero)))), ','(=(X5, X6), ','(=(X3, N), ','(=(X4, zero), ','(=(X3, X4), ','(=(X7, N), ','(=(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))), ','(isLess(X7, X8), ackermann(M, N, X1))))))))))))).
main(M, N) :- ','(=(X, M), ','(=(X2, zero), ','(isGreater(X, X2), ','(=(X5, M), ','(=(X6, succ(succ(succ(zero)))), ','(isLess(X5, X6), ','(=(X3, N), ','(=(X4, zero), ','(isGreater(X3, X4), ','(=(X7, N), ','(=(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))), ','(=(X7, X8), ackermann(M, N, X1))))))))))))).
main(M, N) :- ','(=(X, M), ','(=(X2, zero), ','(isGreater(X, X2), ','(=(X5, M), ','(=(X6, succ(succ(succ(zero)))), ','(isLess(X5, X6), ','(=(X3, N), ','(=(X4, zero), ','(isGreater(X3, X4), ','(=(X7, N), ','(=(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))), ','(isLess(X7, X8), ackermann(M, N, X1))))))))))))).
main(M, N) :- ','(=(X, M), ','(=(X2, zero), ','(isGreater(X, X2), ','(=(X5, M), ','(=(X6, succ(succ(succ(zero)))), ','(isLess(X5, X6), ','(=(X3, N), ','(=(X4, zero), ','(=(X3, X4), ','(=(X7, N), ','(=(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))), ','(=(X7, X8), ackermann(M, N, X1))))))))))))).
main(M, N) :- ','(=(X, M), ','(=(X2, zero), ','(isGreater(X, X2), ','(=(X5, M), ','(=(X6, succ(succ(succ(zero)))), ','(isLess(X5, X6), ','(=(X3, N), ','(=(X4, zero), ','(=(X3, X4), ','(=(X7, N), ','(=(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))), ','(isLess(X7, X8), ackermann(M, N, X1))))))))))))).
main(M, N) :- ','(=(X, M), ','(=(X2, zero), ','(=(X, X2), ','(=(X5, M), ','(=(X6, succ(succ(succ(zero)))), ','(=(X5, X6), ','(=(X3, N), ','(=(X4, zero), ','(isGreater(X3, X4), ','(=(X7, N), ','(=(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))), ','(=(X7, X8), ackermann(M, N, X1))))))))))))).
main(M, N) :- ','(=(X, M), ','(=(X2, zero), ','(=(X, X2), ','(=(X5, M), ','(=(X6, succ(succ(succ(zero)))), ','(=(X5, X6), ','(=(X3, N), ','(=(X4, zero), ','(isGreater(X3, X4), ','(=(X7, N), ','(=(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))), ','(isLess(X7, X8), ackermann(M, N, X1))))))))))))).
main(M, N) :- ','(=(X, M), ','(=(X2, zero), ','(=(X, X2), ','(=(X5, M), ','(=(X6, succ(succ(succ(zero)))), ','(=(X5, X6), ','(=(X3, N), ','(=(X4, zero), ','(=(X3, X4), ','(=(X7, N), ','(=(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))), ','(=(X7, X8), ackermann(M, N, X1))))))))))))).
main(M, N) :- ','(=(X, M), ','(=(X2, zero), ','(=(X, X2), ','(=(X5, M), ','(=(X6, succ(succ(succ(zero)))), ','(=(X5, X6), ','(=(X3, N), ','(=(X4, zero), ','(=(X3, X4), ','(=(X7, N), ','(=(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))), ','(isLess(X7, X8), ackermann(M, N, X1))))))))))))).
main(M, N) :- ','(=(X, M), ','(=(X2, zero), ','(=(X, X2), ','(=(X5, M), ','(=(X6, succ(succ(succ(zero)))), ','(isLess(X5, X6), ','(=(X3, N), ','(=(X4, zero), ','(isGreater(X3, X4), ','(=(X7, N), ','(=(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))), ','(=(X7, X8), ackermann(M, N, X1))))))))))))).
main(M, N) :- ','(=(X, M), ','(=(X2, zero), ','(=(X, X2), ','(=(X5, M), ','(=(X6, succ(succ(succ(zero)))), ','(isLess(X5, X6), ','(=(X3, N), ','(=(X4, zero), ','(isGreater(X3, X4), ','(=(X7, N), ','(=(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))), ','(isLess(X7, X8), ackermann(M, N, X1))))))))))))).
main(M, N) :- ','(=(X, M), ','(=(X2, zero), ','(=(X, X2), ','(=(X5, M), ','(=(X6, succ(succ(succ(zero)))), ','(isLess(X5, X6), ','(=(X3, N), ','(=(X4, zero), ','(=(X3, X4), ','(=(X7, N), ','(=(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))), ','(=(X7, X8), ackermann(M, N, X1))))))))))))).
main(M, N) :- ','(=(X, M), ','(=(X2, zero), ','(=(X, X2), ','(=(X5, M), ','(=(X6, succ(succ(succ(zero)))), ','(isLess(X5, X6), ','(=(X3, N), ','(=(X4, zero), ','(=(X3, X4), ','(=(X7, N), ','(=(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))), ','(isLess(X7, X8), ackermann(M, N, X1))))))))))))).
ackermann(M, N, Ret) :- ','(=(X, M), ','(=(X1, zero), ','(=(X, X1), ','(isPlus(N, succ(zero), U), =(Ret, U))))).
ackermann(M, N, Ret) :- ','(=(X, N), ','(=(X1, zero), ','(=(X, X1), ','(isMinus(M, succ(zero), U), ','(=(M1, U), ackermann(M1, succ(zero), Ret)))))).
ackermann(M, N, Ret) :- ','(isMinus(N, succ(zero), U), ','(=(N1, U), ','(ackermann(M, N1, Ret1), ','(isMinus(M, succ(zero), U), ','(=(M1, U), ','(ackermann(M1, Ret1, Ret2), =(Ret, Ret2))))))).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isGreater(succ(X), zero).
isGreater(succ(X), pred(Y)).
isGreater(succ(X), succ(Y)) :- isGreater(X, Y).
isGreater(zero, pred(Y)).
isGreater(pred(X), pred(Y)) :- isGreater(X, Y).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).
=(X, X).


Query: main(g,g)
----------------------------------------

(9) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

main_in_2: (b,b)

isGreater_in_2: (b,b)

ackermann_in_3: (b,b,f)

isPlus_in_3: (b,b,f)

isMinus_in_3: (b,b,f) (b,b,b)

isLess_in_2: (b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x1, x2, x3)

U129_gg(x1, x2, x3)  =  U129_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x1, x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x1, x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x1, x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x1, x2, x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x1, x2, x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x1, x2, x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x1, x2, x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x1, x2, x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x1, x2, x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x2, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x2, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x2, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U99_gga(x1, x2, x3)  =  U99_gga(x1, x3)

U100_gga(x1, x2, x3)  =  U100_gga(x1, x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x1, x2, x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x1, x2, x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x1, x2, x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x1, x2, x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x1, x2, x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x1, x2, x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x2, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x2, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x2, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x1, x2, x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U99_ggg(x1, x2, x3)  =  U99_ggg(x1, x2, x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x1, x2, x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x1, x2, x3, x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x1, x2, x3, x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x1, x2, x3, x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x1, x2, x3, x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x1, x2, x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x1, x2, x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x1, x2, x4)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U130_gg(x1, x2, x3)  =  U130_gg(x1, x2, x3)

U131_gg(x1, x2, x3)  =  U131_gg(x1, x2, x3)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x1, x2, x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x1, x2, x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x1, x2, x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x1, x2, x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x1, x2, x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x1, x2, x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x1, x2, x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x1, x2, x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x1, x2, x3)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(10)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x1, x2, x3)

U129_gg(x1, x2, x3)  =  U129_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x1, x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x1, x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x1, x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x1, x2, x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x1, x2, x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x1, x2, x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x1, x2, x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x1, x2, x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x1, x2, x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x2, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x2, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x2, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U99_gga(x1, x2, x3)  =  U99_gga(x1, x3)

U100_gga(x1, x2, x3)  =  U100_gga(x1, x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x1, x2, x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x1, x2, x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x1, x2, x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x1, x2, x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x1, x2, x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x1, x2, x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x2, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x2, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x2, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x1, x2, x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U99_ggg(x1, x2, x3)  =  U99_ggg(x1, x2, x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x1, x2, x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x1, x2, x3, x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x1, x2, x3, x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x1, x2, x3, x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x1, x2, x3, x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x1, x2, x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x1, x2, x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x1, x2, x4)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U130_gg(x1, x2, x3)  =  U130_gg(x1, x2, x3)

U131_gg(x1, x2, x3)  =  U131_gg(x1, x2, x3)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x1, x2, x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x1, x2, x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x1, x2, x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x1, x2, x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x1, x2, x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x1, x2, x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x1, x2, x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x1, x2, x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x1, x2, x3)



----------------------------------------

(11) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GG(M, N) -> U1_GG(M, N, =_in_ag(X, M))
   MAIN_IN_GG(M, N) -> =_IN_AG(X, M)
   U1_GG(M, N, =_out_ag(X, M)) -> U2_GG(M, N, X, =_in_ag(X2, zero))
   U1_GG(M, N, =_out_ag(X, M)) -> =_IN_AG(X2, zero)
   U2_GG(M, N, X, =_out_ag(X2, zero)) -> U3_GG(M, N, isGreater_in_gg(X, X2))
   U2_GG(M, N, X, =_out_ag(X2, zero)) -> ISGREATER_IN_GG(X, X2)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> U128_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(pred(X), pred(Y)) -> U129_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   U3_GG(M, N, isGreater_out_gg(X, X2)) -> U4_GG(M, N, =_in_ag(X5, M))
   U3_GG(M, N, isGreater_out_gg(X, X2)) -> =_IN_AG(X5, M)
   U4_GG(M, N, =_out_ag(X5, M)) -> U5_GG(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U4_GG(M, N, =_out_ag(X5, M)) -> =_IN_AG(X6, succ(succ(succ(zero))))
   U5_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_GG(M, N, =_in_gg(X5, X6))
   U5_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> =_IN_GG(X5, X6)
   U6_GG(M, N, =_out_gg(X5, X6)) -> U7_GG(M, N, =_in_ag(X3, N))
   U6_GG(M, N, =_out_gg(X5, X6)) -> =_IN_AG(X3, N)
   U7_GG(M, N, =_out_ag(X3, N)) -> U8_GG(M, N, X3, =_in_ag(X4, zero))
   U7_GG(M, N, =_out_ag(X3, N)) -> =_IN_AG(X4, zero)
   U8_GG(M, N, X3, =_out_ag(X4, zero)) -> U9_GG(M, N, isGreater_in_gg(X3, X4))
   U8_GG(M, N, X3, =_out_ag(X4, zero)) -> ISGREATER_IN_GG(X3, X4)
   U9_GG(M, N, isGreater_out_gg(X3, X4)) -> U10_GG(M, N, =_in_ag(X7, N))
   U9_GG(M, N, isGreater_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U10_GG(M, N, =_out_ag(X7, N)) -> U11_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U10_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U11_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_GG(M, N, =_in_gg(X7, X8))
   U11_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U12_GG(M, N, =_out_gg(X7, X8)) -> U13_GG(M, N, ackermann_in_gga(M, N, X1))
   U12_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   ACKERMANN_IN_GGA(M, N, Ret) -> U77_GGA(M, N, Ret, =_in_ag(X, M))
   ACKERMANN_IN_GGA(M, N, Ret) -> =_IN_AG(X, M)
   U77_GGA(M, N, Ret, =_out_ag(X, M)) -> U78_GGA(M, N, Ret, X, =_in_ag(X1, zero))
   U77_GGA(M, N, Ret, =_out_ag(X, M)) -> =_IN_AG(X1, zero)
   U78_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_GGA(M, N, Ret, =_in_gg(X, X1))
   U78_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> =_IN_GG(X, X1)
   U79_GGA(M, N, Ret, =_out_gg(X, X1)) -> U80_GGA(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   U79_GGA(M, N, Ret, =_out_gg(X, X1)) -> ISPLUS_IN_GGA(N, succ(zero), U)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> U95_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> U96_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> U97_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> U98_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   U80_GGA(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_GGA(M, N, Ret, =_in_ag(Ret, U))
   U80_GGA(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> =_IN_AG(Ret, U)
   ACKERMANN_IN_GGA(M, N, Ret) -> U82_GGA(M, N, Ret, =_in_ag(X, N))
   ACKERMANN_IN_GGA(M, N, Ret) -> =_IN_AG(X, N)
   U82_GGA(M, N, Ret, =_out_ag(X, N)) -> U83_GGA(M, N, Ret, X, =_in_ag(X1, zero))
   U82_GGA(M, N, Ret, =_out_ag(X, N)) -> =_IN_AG(X1, zero)
   U83_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_GGA(M, N, Ret, =_in_gg(X, X1))
   U83_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> =_IN_GG(X, X1)
   U84_GGA(M, N, Ret, =_out_gg(X, X1)) -> U85_GGA(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   U84_GGA(M, N, Ret, =_out_gg(X, X1)) -> ISMINUS_IN_GGA(M, succ(zero), U)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> U99_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> U100_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> U101_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> U102_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> U103_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> U104_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   U85_GGA(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, Ret, =_in_ag(M1, U))
   U85_GGA(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> =_IN_AG(M1, U)
   U86_GGA(M, N, Ret, =_out_ag(M1, U)) -> U87_GGA(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   U86_GGA(M, N, Ret, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, succ(zero), Ret)
   ACKERMANN_IN_GGA(M, N, Ret) -> U88_GGA(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   ACKERMANN_IN_GGA(M, N, Ret) -> ISMINUS_IN_GGA(N, succ(zero), U)
   U88_GGA(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, Ret, U, =_in_ag(N1, U))
   U88_GGA(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> =_IN_AG(N1, U)
   U89_GGA(M, N, Ret, U, =_out_ag(N1, U)) -> U90_GGA(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U89_GGA(M, N, Ret, U, =_out_ag(N1, U)) -> ACKERMANN_IN_GGA(M, N1, Ret1)
   U90_GGA(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_GGA(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U90_GGA(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> ISMINUS_IN_GGG(M, succ(zero), U)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> U99_GGG(Y, Z, isMinus_in_ggg(zero, Y, Z))
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> U100_GGG(Y, Z, isMinus_in_ggg(zero, Y, Z))
   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> U101_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> U102_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> U103_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> U104_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   U91_GGA(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret, Ret1, =_in_ag(M1, U))
   U91_GGA(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> =_IN_AG(M1, U)
   U92_GGA(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_GGA(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U92_GGA(M, N, Ret, Ret1, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, Ret1, Ret2)
   U93_GGA(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_GGA(M, N, Ret, =_in_ag(Ret, Ret2))
   U93_GGA(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> =_IN_AG(Ret, Ret2)
   U11_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_GG(M, N, isLess_in_gg(X7, X8))
   U11_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   ISLESS_IN_GG(pred(X), pred(Y)) -> U130_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(succ(X), succ(Y)) -> U131_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   U14_GG(M, N, isLess_out_gg(X7, X8)) -> U15_GG(M, N, ackermann_in_gga(M, N, X1))
   U14_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U8_GG(M, N, X3, =_out_ag(X4, zero)) -> U16_GG(M, N, =_in_gg(X3, X4))
   U8_GG(M, N, X3, =_out_ag(X4, zero)) -> =_IN_GG(X3, X4)
   U16_GG(M, N, =_out_gg(X3, X4)) -> U17_GG(M, N, =_in_ag(X7, N))
   U16_GG(M, N, =_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U17_GG(M, N, =_out_ag(X7, N)) -> U18_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U17_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U18_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_GG(M, N, =_in_gg(X7, X8))
   U18_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U19_GG(M, N, =_out_gg(X7, X8)) -> U20_GG(M, N, ackermann_in_gga(M, N, X1))
   U19_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U18_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_GG(M, N, isLess_in_gg(X7, X8))
   U18_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U21_GG(M, N, isLess_out_gg(X7, X8)) -> U22_GG(M, N, ackermann_in_gga(M, N, X1))
   U21_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U5_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_GG(M, N, isLess_in_gg(X5, X6))
   U5_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> ISLESS_IN_GG(X5, X6)
   U23_GG(M, N, isLess_out_gg(X5, X6)) -> U24_GG(M, N, =_in_ag(X3, N))
   U23_GG(M, N, isLess_out_gg(X5, X6)) -> =_IN_AG(X3, N)
   U24_GG(M, N, =_out_ag(X3, N)) -> U25_GG(M, N, X3, =_in_ag(X4, zero))
   U24_GG(M, N, =_out_ag(X3, N)) -> =_IN_AG(X4, zero)
   U25_GG(M, N, X3, =_out_ag(X4, zero)) -> U26_GG(M, N, isGreater_in_gg(X3, X4))
   U25_GG(M, N, X3, =_out_ag(X4, zero)) -> ISGREATER_IN_GG(X3, X4)
   U26_GG(M, N, isGreater_out_gg(X3, X4)) -> U27_GG(M, N, =_in_ag(X7, N))
   U26_GG(M, N, isGreater_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U27_GG(M, N, =_out_ag(X7, N)) -> U28_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U27_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U28_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_GG(M, N, =_in_gg(X7, X8))
   U28_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U29_GG(M, N, =_out_gg(X7, X8)) -> U30_GG(M, N, ackermann_in_gga(M, N, X1))
   U29_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U28_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_GG(M, N, isLess_in_gg(X7, X8))
   U28_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U31_GG(M, N, isLess_out_gg(X7, X8)) -> U32_GG(M, N, ackermann_in_gga(M, N, X1))
   U31_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U25_GG(M, N, X3, =_out_ag(X4, zero)) -> U33_GG(M, N, =_in_gg(X3, X4))
   U25_GG(M, N, X3, =_out_ag(X4, zero)) -> =_IN_GG(X3, X4)
   U33_GG(M, N, =_out_gg(X3, X4)) -> U34_GG(M, N, =_in_ag(X7, N))
   U33_GG(M, N, =_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U34_GG(M, N, =_out_ag(X7, N)) -> U35_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U34_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U35_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_GG(M, N, =_in_gg(X7, X8))
   U35_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U36_GG(M, N, =_out_gg(X7, X8)) -> U37_GG(M, N, ackermann_in_gga(M, N, X1))
   U36_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U35_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_GG(M, N, isLess_in_gg(X7, X8))
   U35_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U38_GG(M, N, isLess_out_gg(X7, X8)) -> U39_GG(M, N, ackermann_in_gga(M, N, X1))
   U38_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U2_GG(M, N, X, =_out_ag(X2, zero)) -> U40_GG(M, N, =_in_gg(X, X2))
   U2_GG(M, N, X, =_out_ag(X2, zero)) -> =_IN_GG(X, X2)
   U40_GG(M, N, =_out_gg(X, X2)) -> U41_GG(M, N, =_in_ag(X5, M))
   U40_GG(M, N, =_out_gg(X, X2)) -> =_IN_AG(X5, M)
   U41_GG(M, N, =_out_ag(X5, M)) -> U42_GG(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U41_GG(M, N, =_out_ag(X5, M)) -> =_IN_AG(X6, succ(succ(succ(zero))))
   U42_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_GG(M, N, =_in_gg(X5, X6))
   U42_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> =_IN_GG(X5, X6)
   U43_GG(M, N, =_out_gg(X5, X6)) -> U44_GG(M, N, =_in_ag(X3, N))
   U43_GG(M, N, =_out_gg(X5, X6)) -> =_IN_AG(X3, N)
   U44_GG(M, N, =_out_ag(X3, N)) -> U45_GG(M, N, X3, =_in_ag(X4, zero))
   U44_GG(M, N, =_out_ag(X3, N)) -> =_IN_AG(X4, zero)
   U45_GG(M, N, X3, =_out_ag(X4, zero)) -> U46_GG(M, N, isGreater_in_gg(X3, X4))
   U45_GG(M, N, X3, =_out_ag(X4, zero)) -> ISGREATER_IN_GG(X3, X4)
   U46_GG(M, N, isGreater_out_gg(X3, X4)) -> U47_GG(M, N, =_in_ag(X7, N))
   U46_GG(M, N, isGreater_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U47_GG(M, N, =_out_ag(X7, N)) -> U48_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U47_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U48_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_GG(M, N, =_in_gg(X7, X8))
   U48_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U49_GG(M, N, =_out_gg(X7, X8)) -> U50_GG(M, N, ackermann_in_gga(M, N, X1))
   U49_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U48_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_GG(M, N, isLess_in_gg(X7, X8))
   U48_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U51_GG(M, N, isLess_out_gg(X7, X8)) -> U52_GG(M, N, ackermann_in_gga(M, N, X1))
   U51_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U45_GG(M, N, X3, =_out_ag(X4, zero)) -> U53_GG(M, N, =_in_gg(X3, X4))
   U45_GG(M, N, X3, =_out_ag(X4, zero)) -> =_IN_GG(X3, X4)
   U53_GG(M, N, =_out_gg(X3, X4)) -> U54_GG(M, N, =_in_ag(X7, N))
   U53_GG(M, N, =_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U54_GG(M, N, =_out_ag(X7, N)) -> U55_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U54_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U55_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_GG(M, N, =_in_gg(X7, X8))
   U55_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U56_GG(M, N, =_out_gg(X7, X8)) -> U57_GG(M, N, ackermann_in_gga(M, N, X1))
   U56_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U55_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_GG(M, N, isLess_in_gg(X7, X8))
   U55_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U58_GG(M, N, isLess_out_gg(X7, X8)) -> U59_GG(M, N, ackermann_in_gga(M, N, X1))
   U58_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U42_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_GG(M, N, isLess_in_gg(X5, X6))
   U42_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> ISLESS_IN_GG(X5, X6)
   U60_GG(M, N, isLess_out_gg(X5, X6)) -> U61_GG(M, N, =_in_ag(X3, N))
   U60_GG(M, N, isLess_out_gg(X5, X6)) -> =_IN_AG(X3, N)
   U61_GG(M, N, =_out_ag(X3, N)) -> U62_GG(M, N, X3, =_in_ag(X4, zero))
   U61_GG(M, N, =_out_ag(X3, N)) -> =_IN_AG(X4, zero)
   U62_GG(M, N, X3, =_out_ag(X4, zero)) -> U63_GG(M, N, isGreater_in_gg(X3, X4))
   U62_GG(M, N, X3, =_out_ag(X4, zero)) -> ISGREATER_IN_GG(X3, X4)
   U63_GG(M, N, isGreater_out_gg(X3, X4)) -> U64_GG(M, N, =_in_ag(X7, N))
   U63_GG(M, N, isGreater_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U64_GG(M, N, =_out_ag(X7, N)) -> U65_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U64_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U65_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_GG(M, N, =_in_gg(X7, X8))
   U65_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U66_GG(M, N, =_out_gg(X7, X8)) -> U67_GG(M, N, ackermann_in_gga(M, N, X1))
   U66_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U65_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_GG(M, N, isLess_in_gg(X7, X8))
   U65_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U68_GG(M, N, isLess_out_gg(X7, X8)) -> U69_GG(M, N, ackermann_in_gga(M, N, X1))
   U68_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U62_GG(M, N, X3, =_out_ag(X4, zero)) -> U70_GG(M, N, =_in_gg(X3, X4))
   U62_GG(M, N, X3, =_out_ag(X4, zero)) -> =_IN_GG(X3, X4)
   U70_GG(M, N, =_out_gg(X3, X4)) -> U71_GG(M, N, =_in_ag(X7, N))
   U70_GG(M, N, =_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U71_GG(M, N, =_out_ag(X7, N)) -> U72_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U71_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U72_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_GG(M, N, =_in_gg(X7, X8))
   U72_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U73_GG(M, N, =_out_gg(X7, X8)) -> U74_GG(M, N, ackermann_in_gga(M, N, X1))
   U73_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U72_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_GG(M, N, isLess_in_gg(X7, X8))
   U72_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U75_GG(M, N, isLess_out_gg(X7, X8)) -> U76_GG(M, N, ackermann_in_gga(M, N, X1))
   U75_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x1, x2, x3)

U129_gg(x1, x2, x3)  =  U129_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x1, x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x1, x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x1, x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x1, x2, x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x1, x2, x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x1, x2, x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x1, x2, x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x1, x2, x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x1, x2, x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x2, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x2, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x2, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U99_gga(x1, x2, x3)  =  U99_gga(x1, x3)

U100_gga(x1, x2, x3)  =  U100_gga(x1, x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x1, x2, x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x1, x2, x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x1, x2, x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x1, x2, x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x1, x2, x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x1, x2, x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x2, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x2, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x2, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x1, x2, x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U99_ggg(x1, x2, x3)  =  U99_ggg(x1, x2, x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x1, x2, x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x1, x2, x3, x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x1, x2, x3, x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x1, x2, x3, x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x1, x2, x3, x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x1, x2, x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x1, x2, x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x1, x2, x4)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U130_gg(x1, x2, x3)  =  U130_gg(x1, x2, x3)

U131_gg(x1, x2, x3)  =  U131_gg(x1, x2, x3)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x1, x2, x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x1, x2, x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x1, x2, x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x1, x2, x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x1, x2, x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x1, x2, x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x1, x2, x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x1, x2, x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x1, x2, x3)

MAIN_IN_GG(x1, x2)  =  MAIN_IN_GG(x1, x2)

U1_GG(x1, x2, x3)  =  U1_GG(x1, x2, x3)

=_IN_AG(x1, x2)  =  =_IN_AG(x2)

U2_GG(x1, x2, x3, x4)  =  U2_GG(x1, x2, x3, x4)

U3_GG(x1, x2, x3)  =  U3_GG(x1, x2, x3)

ISGREATER_IN_GG(x1, x2)  =  ISGREATER_IN_GG(x1, x2)

U128_GG(x1, x2, x3)  =  U128_GG(x1, x2, x3)

U129_GG(x1, x2, x3)  =  U129_GG(x1, x2, x3)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)

U5_GG(x1, x2, x3, x4)  =  U5_GG(x1, x2, x3, x4)

U6_GG(x1, x2, x3)  =  U6_GG(x1, x2, x3)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U7_GG(x1, x2, x3)  =  U7_GG(x1, x2, x3)

U8_GG(x1, x2, x3, x4)  =  U8_GG(x1, x2, x3, x4)

U9_GG(x1, x2, x3)  =  U9_GG(x1, x2, x3)

U10_GG(x1, x2, x3)  =  U10_GG(x1, x2, x3)

U11_GG(x1, x2, x3, x4)  =  U11_GG(x1, x2, x3, x4)

U12_GG(x1, x2, x3)  =  U12_GG(x1, x2, x3)

U13_GG(x1, x2, x3)  =  U13_GG(x1, x2, x3)

ACKERMANN_IN_GGA(x1, x2, x3)  =  ACKERMANN_IN_GGA(x1, x2)

U77_GGA(x1, x2, x3, x4)  =  U77_GGA(x1, x2, x4)

U78_GGA(x1, x2, x3, x4, x5)  =  U78_GGA(x1, x2, x4, x5)

U79_GGA(x1, x2, x3, x4)  =  U79_GGA(x1, x2, x4)

U80_GGA(x1, x2, x3, x4)  =  U80_GGA(x1, x2, x4)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)

U95_GGA(x1, x2, x3, x4)  =  U95_GGA(x1, x2, x4)

U96_GGA(x1, x2, x3, x4)  =  U96_GGA(x1, x2, x4)

U97_GGA(x1, x2, x3, x4)  =  U97_GGA(x1, x2, x4)

U98_GGA(x1, x2, x3, x4)  =  U98_GGA(x1, x2, x4)

U81_GGA(x1, x2, x3, x4)  =  U81_GGA(x1, x2, x4)

U82_GGA(x1, x2, x3, x4)  =  U82_GGA(x1, x2, x4)

U83_GGA(x1, x2, x3, x4, x5)  =  U83_GGA(x1, x2, x4, x5)

U84_GGA(x1, x2, x3, x4)  =  U84_GGA(x1, x2, x4)

U85_GGA(x1, x2, x3, x4)  =  U85_GGA(x1, x2, x4)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)

U99_GGA(x1, x2, x3)  =  U99_GGA(x1, x3)

U100_GGA(x1, x2, x3)  =  U100_GGA(x1, x3)

U101_GGA(x1, x2, x3, x4)  =  U101_GGA(x1, x2, x4)

U102_GGA(x1, x2, x3, x4)  =  U102_GGA(x1, x2, x4)

U103_GGA(x1, x2, x3, x4)  =  U103_GGA(x1, x2, x4)

U104_GGA(x1, x2, x3, x4)  =  U104_GGA(x1, x2, x4)

U86_GGA(x1, x2, x3, x4)  =  U86_GGA(x1, x2, x4)

U87_GGA(x1, x2, x3, x4)  =  U87_GGA(x1, x2, x4)

U88_GGA(x1, x2, x3, x4)  =  U88_GGA(x1, x2, x4)

U89_GGA(x1, x2, x3, x4, x5)  =  U89_GGA(x1, x2, x4, x5)

U90_GGA(x1, x2, x3, x4, x5)  =  U90_GGA(x1, x2, x4, x5)

U91_GGA(x1, x2, x3, x4, x5, x6)  =  U91_GGA(x1, x2, x4, x5, x6)

ISMINUS_IN_GGG(x1, x2, x3)  =  ISMINUS_IN_GGG(x1, x2, x3)

U99_GGG(x1, x2, x3)  =  U99_GGG(x1, x2, x3)

U100_GGG(x1, x2, x3)  =  U100_GGG(x1, x2, x3)

U101_GGG(x1, x2, x3, x4)  =  U101_GGG(x1, x2, x3, x4)

U102_GGG(x1, x2, x3, x4)  =  U102_GGG(x1, x2, x3, x4)

U103_GGG(x1, x2, x3, x4)  =  U103_GGG(x1, x2, x3, x4)

U104_GGG(x1, x2, x3, x4)  =  U104_GGG(x1, x2, x3, x4)

U92_GGA(x1, x2, x3, x4, x5)  =  U92_GGA(x1, x2, x4, x5)

U93_GGA(x1, x2, x3, x4)  =  U93_GGA(x1, x2, x4)

U94_GGA(x1, x2, x3, x4)  =  U94_GGA(x1, x2, x4)

U14_GG(x1, x2, x3)  =  U14_GG(x1, x2, x3)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)

U130_GG(x1, x2, x3)  =  U130_GG(x1, x2, x3)

U131_GG(x1, x2, x3)  =  U131_GG(x1, x2, x3)

U15_GG(x1, x2, x3)  =  U15_GG(x1, x2, x3)

U16_GG(x1, x2, x3)  =  U16_GG(x1, x2, x3)

U17_GG(x1, x2, x3)  =  U17_GG(x1, x2, x3)

U18_GG(x1, x2, x3, x4)  =  U18_GG(x1, x2, x3, x4)

U19_GG(x1, x2, x3)  =  U19_GG(x1, x2, x3)

U20_GG(x1, x2, x3)  =  U20_GG(x1, x2, x3)

U21_GG(x1, x2, x3)  =  U21_GG(x1, x2, x3)

U22_GG(x1, x2, x3)  =  U22_GG(x1, x2, x3)

U23_GG(x1, x2, x3)  =  U23_GG(x1, x2, x3)

U24_GG(x1, x2, x3)  =  U24_GG(x1, x2, x3)

U25_GG(x1, x2, x3, x4)  =  U25_GG(x1, x2, x3, x4)

U26_GG(x1, x2, x3)  =  U26_GG(x1, x2, x3)

U27_GG(x1, x2, x3)  =  U27_GG(x1, x2, x3)

U28_GG(x1, x2, x3, x4)  =  U28_GG(x1, x2, x3, x4)

U29_GG(x1, x2, x3)  =  U29_GG(x1, x2, x3)

U30_GG(x1, x2, x3)  =  U30_GG(x1, x2, x3)

U31_GG(x1, x2, x3)  =  U31_GG(x1, x2, x3)

U32_GG(x1, x2, x3)  =  U32_GG(x1, x2, x3)

U33_GG(x1, x2, x3)  =  U33_GG(x1, x2, x3)

U34_GG(x1, x2, x3)  =  U34_GG(x1, x2, x3)

U35_GG(x1, x2, x3, x4)  =  U35_GG(x1, x2, x3, x4)

U36_GG(x1, x2, x3)  =  U36_GG(x1, x2, x3)

U37_GG(x1, x2, x3)  =  U37_GG(x1, x2, x3)

U38_GG(x1, x2, x3)  =  U38_GG(x1, x2, x3)

U39_GG(x1, x2, x3)  =  U39_GG(x1, x2, x3)

U40_GG(x1, x2, x3)  =  U40_GG(x1, x2, x3)

U41_GG(x1, x2, x3)  =  U41_GG(x1, x2, x3)

U42_GG(x1, x2, x3, x4)  =  U42_GG(x1, x2, x3, x4)

U43_GG(x1, x2, x3)  =  U43_GG(x1, x2, x3)

U44_GG(x1, x2, x3)  =  U44_GG(x1, x2, x3)

U45_GG(x1, x2, x3, x4)  =  U45_GG(x1, x2, x3, x4)

U46_GG(x1, x2, x3)  =  U46_GG(x1, x2, x3)

U47_GG(x1, x2, x3)  =  U47_GG(x1, x2, x3)

U48_GG(x1, x2, x3, x4)  =  U48_GG(x1, x2, x3, x4)

U49_GG(x1, x2, x3)  =  U49_GG(x1, x2, x3)

U50_GG(x1, x2, x3)  =  U50_GG(x1, x2, x3)

U51_GG(x1, x2, x3)  =  U51_GG(x1, x2, x3)

U52_GG(x1, x2, x3)  =  U52_GG(x1, x2, x3)

U53_GG(x1, x2, x3)  =  U53_GG(x1, x2, x3)

U54_GG(x1, x2, x3)  =  U54_GG(x1, x2, x3)

U55_GG(x1, x2, x3, x4)  =  U55_GG(x1, x2, x3, x4)

U56_GG(x1, x2, x3)  =  U56_GG(x1, x2, x3)

U57_GG(x1, x2, x3)  =  U57_GG(x1, x2, x3)

U58_GG(x1, x2, x3)  =  U58_GG(x1, x2, x3)

U59_GG(x1, x2, x3)  =  U59_GG(x1, x2, x3)

U60_GG(x1, x2, x3)  =  U60_GG(x1, x2, x3)

U61_GG(x1, x2, x3)  =  U61_GG(x1, x2, x3)

U62_GG(x1, x2, x3, x4)  =  U62_GG(x1, x2, x3, x4)

U63_GG(x1, x2, x3)  =  U63_GG(x1, x2, x3)

U64_GG(x1, x2, x3)  =  U64_GG(x1, x2, x3)

U65_GG(x1, x2, x3, x4)  =  U65_GG(x1, x2, x3, x4)

U66_GG(x1, x2, x3)  =  U66_GG(x1, x2, x3)

U67_GG(x1, x2, x3)  =  U67_GG(x1, x2, x3)

U68_GG(x1, x2, x3)  =  U68_GG(x1, x2, x3)

U69_GG(x1, x2, x3)  =  U69_GG(x1, x2, x3)

U70_GG(x1, x2, x3)  =  U70_GG(x1, x2, x3)

U71_GG(x1, x2, x3)  =  U71_GG(x1, x2, x3)

U72_GG(x1, x2, x3, x4)  =  U72_GG(x1, x2, x3, x4)

U73_GG(x1, x2, x3)  =  U73_GG(x1, x2, x3)

U74_GG(x1, x2, x3)  =  U74_GG(x1, x2, x3)

U75_GG(x1, x2, x3)  =  U75_GG(x1, x2, x3)

U76_GG(x1, x2, x3)  =  U76_GG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(12)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GG(M, N) -> U1_GG(M, N, =_in_ag(X, M))
   MAIN_IN_GG(M, N) -> =_IN_AG(X, M)
   U1_GG(M, N, =_out_ag(X, M)) -> U2_GG(M, N, X, =_in_ag(X2, zero))
   U1_GG(M, N, =_out_ag(X, M)) -> =_IN_AG(X2, zero)
   U2_GG(M, N, X, =_out_ag(X2, zero)) -> U3_GG(M, N, isGreater_in_gg(X, X2))
   U2_GG(M, N, X, =_out_ag(X2, zero)) -> ISGREATER_IN_GG(X, X2)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> U128_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(pred(X), pred(Y)) -> U129_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   U3_GG(M, N, isGreater_out_gg(X, X2)) -> U4_GG(M, N, =_in_ag(X5, M))
   U3_GG(M, N, isGreater_out_gg(X, X2)) -> =_IN_AG(X5, M)
   U4_GG(M, N, =_out_ag(X5, M)) -> U5_GG(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U4_GG(M, N, =_out_ag(X5, M)) -> =_IN_AG(X6, succ(succ(succ(zero))))
   U5_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_GG(M, N, =_in_gg(X5, X6))
   U5_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> =_IN_GG(X5, X6)
   U6_GG(M, N, =_out_gg(X5, X6)) -> U7_GG(M, N, =_in_ag(X3, N))
   U6_GG(M, N, =_out_gg(X5, X6)) -> =_IN_AG(X3, N)
   U7_GG(M, N, =_out_ag(X3, N)) -> U8_GG(M, N, X3, =_in_ag(X4, zero))
   U7_GG(M, N, =_out_ag(X3, N)) -> =_IN_AG(X4, zero)
   U8_GG(M, N, X3, =_out_ag(X4, zero)) -> U9_GG(M, N, isGreater_in_gg(X3, X4))
   U8_GG(M, N, X3, =_out_ag(X4, zero)) -> ISGREATER_IN_GG(X3, X4)
   U9_GG(M, N, isGreater_out_gg(X3, X4)) -> U10_GG(M, N, =_in_ag(X7, N))
   U9_GG(M, N, isGreater_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U10_GG(M, N, =_out_ag(X7, N)) -> U11_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U10_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U11_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_GG(M, N, =_in_gg(X7, X8))
   U11_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U12_GG(M, N, =_out_gg(X7, X8)) -> U13_GG(M, N, ackermann_in_gga(M, N, X1))
   U12_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   ACKERMANN_IN_GGA(M, N, Ret) -> U77_GGA(M, N, Ret, =_in_ag(X, M))
   ACKERMANN_IN_GGA(M, N, Ret) -> =_IN_AG(X, M)
   U77_GGA(M, N, Ret, =_out_ag(X, M)) -> U78_GGA(M, N, Ret, X, =_in_ag(X1, zero))
   U77_GGA(M, N, Ret, =_out_ag(X, M)) -> =_IN_AG(X1, zero)
   U78_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_GGA(M, N, Ret, =_in_gg(X, X1))
   U78_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> =_IN_GG(X, X1)
   U79_GGA(M, N, Ret, =_out_gg(X, X1)) -> U80_GGA(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   U79_GGA(M, N, Ret, =_out_gg(X, X1)) -> ISPLUS_IN_GGA(N, succ(zero), U)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> U95_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> U96_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> U97_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> U98_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   U80_GGA(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_GGA(M, N, Ret, =_in_ag(Ret, U))
   U80_GGA(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> =_IN_AG(Ret, U)
   ACKERMANN_IN_GGA(M, N, Ret) -> U82_GGA(M, N, Ret, =_in_ag(X, N))
   ACKERMANN_IN_GGA(M, N, Ret) -> =_IN_AG(X, N)
   U82_GGA(M, N, Ret, =_out_ag(X, N)) -> U83_GGA(M, N, Ret, X, =_in_ag(X1, zero))
   U82_GGA(M, N, Ret, =_out_ag(X, N)) -> =_IN_AG(X1, zero)
   U83_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_GGA(M, N, Ret, =_in_gg(X, X1))
   U83_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> =_IN_GG(X, X1)
   U84_GGA(M, N, Ret, =_out_gg(X, X1)) -> U85_GGA(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   U84_GGA(M, N, Ret, =_out_gg(X, X1)) -> ISMINUS_IN_GGA(M, succ(zero), U)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> U99_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> U100_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> U101_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> U102_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> U103_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> U104_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   U85_GGA(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, Ret, =_in_ag(M1, U))
   U85_GGA(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> =_IN_AG(M1, U)
   U86_GGA(M, N, Ret, =_out_ag(M1, U)) -> U87_GGA(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   U86_GGA(M, N, Ret, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, succ(zero), Ret)
   ACKERMANN_IN_GGA(M, N, Ret) -> U88_GGA(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   ACKERMANN_IN_GGA(M, N, Ret) -> ISMINUS_IN_GGA(N, succ(zero), U)
   U88_GGA(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, Ret, U, =_in_ag(N1, U))
   U88_GGA(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> =_IN_AG(N1, U)
   U89_GGA(M, N, Ret, U, =_out_ag(N1, U)) -> U90_GGA(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U89_GGA(M, N, Ret, U, =_out_ag(N1, U)) -> ACKERMANN_IN_GGA(M, N1, Ret1)
   U90_GGA(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_GGA(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U90_GGA(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> ISMINUS_IN_GGG(M, succ(zero), U)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> U99_GGG(Y, Z, isMinus_in_ggg(zero, Y, Z))
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> U100_GGG(Y, Z, isMinus_in_ggg(zero, Y, Z))
   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> U101_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> U102_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> U103_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> U104_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   U91_GGA(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret, Ret1, =_in_ag(M1, U))
   U91_GGA(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> =_IN_AG(M1, U)
   U92_GGA(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_GGA(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U92_GGA(M, N, Ret, Ret1, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, Ret1, Ret2)
   U93_GGA(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_GGA(M, N, Ret, =_in_ag(Ret, Ret2))
   U93_GGA(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> =_IN_AG(Ret, Ret2)
   U11_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_GG(M, N, isLess_in_gg(X7, X8))
   U11_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   ISLESS_IN_GG(pred(X), pred(Y)) -> U130_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(succ(X), succ(Y)) -> U131_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   U14_GG(M, N, isLess_out_gg(X7, X8)) -> U15_GG(M, N, ackermann_in_gga(M, N, X1))
   U14_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U8_GG(M, N, X3, =_out_ag(X4, zero)) -> U16_GG(M, N, =_in_gg(X3, X4))
   U8_GG(M, N, X3, =_out_ag(X4, zero)) -> =_IN_GG(X3, X4)
   U16_GG(M, N, =_out_gg(X3, X4)) -> U17_GG(M, N, =_in_ag(X7, N))
   U16_GG(M, N, =_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U17_GG(M, N, =_out_ag(X7, N)) -> U18_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U17_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U18_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_GG(M, N, =_in_gg(X7, X8))
   U18_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U19_GG(M, N, =_out_gg(X7, X8)) -> U20_GG(M, N, ackermann_in_gga(M, N, X1))
   U19_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U18_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_GG(M, N, isLess_in_gg(X7, X8))
   U18_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U21_GG(M, N, isLess_out_gg(X7, X8)) -> U22_GG(M, N, ackermann_in_gga(M, N, X1))
   U21_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U5_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_GG(M, N, isLess_in_gg(X5, X6))
   U5_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> ISLESS_IN_GG(X5, X6)
   U23_GG(M, N, isLess_out_gg(X5, X6)) -> U24_GG(M, N, =_in_ag(X3, N))
   U23_GG(M, N, isLess_out_gg(X5, X6)) -> =_IN_AG(X3, N)
   U24_GG(M, N, =_out_ag(X3, N)) -> U25_GG(M, N, X3, =_in_ag(X4, zero))
   U24_GG(M, N, =_out_ag(X3, N)) -> =_IN_AG(X4, zero)
   U25_GG(M, N, X3, =_out_ag(X4, zero)) -> U26_GG(M, N, isGreater_in_gg(X3, X4))
   U25_GG(M, N, X3, =_out_ag(X4, zero)) -> ISGREATER_IN_GG(X3, X4)
   U26_GG(M, N, isGreater_out_gg(X3, X4)) -> U27_GG(M, N, =_in_ag(X7, N))
   U26_GG(M, N, isGreater_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U27_GG(M, N, =_out_ag(X7, N)) -> U28_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U27_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U28_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_GG(M, N, =_in_gg(X7, X8))
   U28_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U29_GG(M, N, =_out_gg(X7, X8)) -> U30_GG(M, N, ackermann_in_gga(M, N, X1))
   U29_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U28_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_GG(M, N, isLess_in_gg(X7, X8))
   U28_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U31_GG(M, N, isLess_out_gg(X7, X8)) -> U32_GG(M, N, ackermann_in_gga(M, N, X1))
   U31_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U25_GG(M, N, X3, =_out_ag(X4, zero)) -> U33_GG(M, N, =_in_gg(X3, X4))
   U25_GG(M, N, X3, =_out_ag(X4, zero)) -> =_IN_GG(X3, X4)
   U33_GG(M, N, =_out_gg(X3, X4)) -> U34_GG(M, N, =_in_ag(X7, N))
   U33_GG(M, N, =_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U34_GG(M, N, =_out_ag(X7, N)) -> U35_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U34_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U35_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_GG(M, N, =_in_gg(X7, X8))
   U35_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U36_GG(M, N, =_out_gg(X7, X8)) -> U37_GG(M, N, ackermann_in_gga(M, N, X1))
   U36_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U35_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_GG(M, N, isLess_in_gg(X7, X8))
   U35_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U38_GG(M, N, isLess_out_gg(X7, X8)) -> U39_GG(M, N, ackermann_in_gga(M, N, X1))
   U38_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U2_GG(M, N, X, =_out_ag(X2, zero)) -> U40_GG(M, N, =_in_gg(X, X2))
   U2_GG(M, N, X, =_out_ag(X2, zero)) -> =_IN_GG(X, X2)
   U40_GG(M, N, =_out_gg(X, X2)) -> U41_GG(M, N, =_in_ag(X5, M))
   U40_GG(M, N, =_out_gg(X, X2)) -> =_IN_AG(X5, M)
   U41_GG(M, N, =_out_ag(X5, M)) -> U42_GG(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U41_GG(M, N, =_out_ag(X5, M)) -> =_IN_AG(X6, succ(succ(succ(zero))))
   U42_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_GG(M, N, =_in_gg(X5, X6))
   U42_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> =_IN_GG(X5, X6)
   U43_GG(M, N, =_out_gg(X5, X6)) -> U44_GG(M, N, =_in_ag(X3, N))
   U43_GG(M, N, =_out_gg(X5, X6)) -> =_IN_AG(X3, N)
   U44_GG(M, N, =_out_ag(X3, N)) -> U45_GG(M, N, X3, =_in_ag(X4, zero))
   U44_GG(M, N, =_out_ag(X3, N)) -> =_IN_AG(X4, zero)
   U45_GG(M, N, X3, =_out_ag(X4, zero)) -> U46_GG(M, N, isGreater_in_gg(X3, X4))
   U45_GG(M, N, X3, =_out_ag(X4, zero)) -> ISGREATER_IN_GG(X3, X4)
   U46_GG(M, N, isGreater_out_gg(X3, X4)) -> U47_GG(M, N, =_in_ag(X7, N))
   U46_GG(M, N, isGreater_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U47_GG(M, N, =_out_ag(X7, N)) -> U48_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U47_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U48_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_GG(M, N, =_in_gg(X7, X8))
   U48_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U49_GG(M, N, =_out_gg(X7, X8)) -> U50_GG(M, N, ackermann_in_gga(M, N, X1))
   U49_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U48_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_GG(M, N, isLess_in_gg(X7, X8))
   U48_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U51_GG(M, N, isLess_out_gg(X7, X8)) -> U52_GG(M, N, ackermann_in_gga(M, N, X1))
   U51_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U45_GG(M, N, X3, =_out_ag(X4, zero)) -> U53_GG(M, N, =_in_gg(X3, X4))
   U45_GG(M, N, X3, =_out_ag(X4, zero)) -> =_IN_GG(X3, X4)
   U53_GG(M, N, =_out_gg(X3, X4)) -> U54_GG(M, N, =_in_ag(X7, N))
   U53_GG(M, N, =_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U54_GG(M, N, =_out_ag(X7, N)) -> U55_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U54_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U55_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_GG(M, N, =_in_gg(X7, X8))
   U55_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U56_GG(M, N, =_out_gg(X7, X8)) -> U57_GG(M, N, ackermann_in_gga(M, N, X1))
   U56_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U55_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_GG(M, N, isLess_in_gg(X7, X8))
   U55_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U58_GG(M, N, isLess_out_gg(X7, X8)) -> U59_GG(M, N, ackermann_in_gga(M, N, X1))
   U58_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U42_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_GG(M, N, isLess_in_gg(X5, X6))
   U42_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> ISLESS_IN_GG(X5, X6)
   U60_GG(M, N, isLess_out_gg(X5, X6)) -> U61_GG(M, N, =_in_ag(X3, N))
   U60_GG(M, N, isLess_out_gg(X5, X6)) -> =_IN_AG(X3, N)
   U61_GG(M, N, =_out_ag(X3, N)) -> U62_GG(M, N, X3, =_in_ag(X4, zero))
   U61_GG(M, N, =_out_ag(X3, N)) -> =_IN_AG(X4, zero)
   U62_GG(M, N, X3, =_out_ag(X4, zero)) -> U63_GG(M, N, isGreater_in_gg(X3, X4))
   U62_GG(M, N, X3, =_out_ag(X4, zero)) -> ISGREATER_IN_GG(X3, X4)
   U63_GG(M, N, isGreater_out_gg(X3, X4)) -> U64_GG(M, N, =_in_ag(X7, N))
   U63_GG(M, N, isGreater_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U64_GG(M, N, =_out_ag(X7, N)) -> U65_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U64_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U65_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_GG(M, N, =_in_gg(X7, X8))
   U65_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U66_GG(M, N, =_out_gg(X7, X8)) -> U67_GG(M, N, ackermann_in_gga(M, N, X1))
   U66_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U65_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_GG(M, N, isLess_in_gg(X7, X8))
   U65_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U68_GG(M, N, isLess_out_gg(X7, X8)) -> U69_GG(M, N, ackermann_in_gga(M, N, X1))
   U68_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U62_GG(M, N, X3, =_out_ag(X4, zero)) -> U70_GG(M, N, =_in_gg(X3, X4))
   U62_GG(M, N, X3, =_out_ag(X4, zero)) -> =_IN_GG(X3, X4)
   U70_GG(M, N, =_out_gg(X3, X4)) -> U71_GG(M, N, =_in_ag(X7, N))
   U70_GG(M, N, =_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U71_GG(M, N, =_out_ag(X7, N)) -> U72_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U71_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U72_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_GG(M, N, =_in_gg(X7, X8))
   U72_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U73_GG(M, N, =_out_gg(X7, X8)) -> U74_GG(M, N, ackermann_in_gga(M, N, X1))
   U73_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U72_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_GG(M, N, isLess_in_gg(X7, X8))
   U72_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U75_GG(M, N, isLess_out_gg(X7, X8)) -> U76_GG(M, N, ackermann_in_gga(M, N, X1))
   U75_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x1, x2, x3)

U129_gg(x1, x2, x3)  =  U129_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x1, x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x1, x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x1, x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x1, x2, x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x1, x2, x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x1, x2, x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x1, x2, x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x1, x2, x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x1, x2, x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x2, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x2, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x2, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U99_gga(x1, x2, x3)  =  U99_gga(x1, x3)

U100_gga(x1, x2, x3)  =  U100_gga(x1, x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x1, x2, x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x1, x2, x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x1, x2, x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x1, x2, x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x1, x2, x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x1, x2, x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x2, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x2, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x2, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x1, x2, x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U99_ggg(x1, x2, x3)  =  U99_ggg(x1, x2, x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x1, x2, x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x1, x2, x3, x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x1, x2, x3, x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x1, x2, x3, x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x1, x2, x3, x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x1, x2, x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x1, x2, x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x1, x2, x4)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U130_gg(x1, x2, x3)  =  U130_gg(x1, x2, x3)

U131_gg(x1, x2, x3)  =  U131_gg(x1, x2, x3)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x1, x2, x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x1, x2, x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x1, x2, x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x1, x2, x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x1, x2, x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x1, x2, x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x1, x2, x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x1, x2, x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x1, x2, x3)

MAIN_IN_GG(x1, x2)  =  MAIN_IN_GG(x1, x2)

U1_GG(x1, x2, x3)  =  U1_GG(x1, x2, x3)

=_IN_AG(x1, x2)  =  =_IN_AG(x2)

U2_GG(x1, x2, x3, x4)  =  U2_GG(x1, x2, x3, x4)

U3_GG(x1, x2, x3)  =  U3_GG(x1, x2, x3)

ISGREATER_IN_GG(x1, x2)  =  ISGREATER_IN_GG(x1, x2)

U128_GG(x1, x2, x3)  =  U128_GG(x1, x2, x3)

U129_GG(x1, x2, x3)  =  U129_GG(x1, x2, x3)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)

U5_GG(x1, x2, x3, x4)  =  U5_GG(x1, x2, x3, x4)

U6_GG(x1, x2, x3)  =  U6_GG(x1, x2, x3)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U7_GG(x1, x2, x3)  =  U7_GG(x1, x2, x3)

U8_GG(x1, x2, x3, x4)  =  U8_GG(x1, x2, x3, x4)

U9_GG(x1, x2, x3)  =  U9_GG(x1, x2, x3)

U10_GG(x1, x2, x3)  =  U10_GG(x1, x2, x3)

U11_GG(x1, x2, x3, x4)  =  U11_GG(x1, x2, x3, x4)

U12_GG(x1, x2, x3)  =  U12_GG(x1, x2, x3)

U13_GG(x1, x2, x3)  =  U13_GG(x1, x2, x3)

ACKERMANN_IN_GGA(x1, x2, x3)  =  ACKERMANN_IN_GGA(x1, x2)

U77_GGA(x1, x2, x3, x4)  =  U77_GGA(x1, x2, x4)

U78_GGA(x1, x2, x3, x4, x5)  =  U78_GGA(x1, x2, x4, x5)

U79_GGA(x1, x2, x3, x4)  =  U79_GGA(x1, x2, x4)

U80_GGA(x1, x2, x3, x4)  =  U80_GGA(x1, x2, x4)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)

U95_GGA(x1, x2, x3, x4)  =  U95_GGA(x1, x2, x4)

U96_GGA(x1, x2, x3, x4)  =  U96_GGA(x1, x2, x4)

U97_GGA(x1, x2, x3, x4)  =  U97_GGA(x1, x2, x4)

U98_GGA(x1, x2, x3, x4)  =  U98_GGA(x1, x2, x4)

U81_GGA(x1, x2, x3, x4)  =  U81_GGA(x1, x2, x4)

U82_GGA(x1, x2, x3, x4)  =  U82_GGA(x1, x2, x4)

U83_GGA(x1, x2, x3, x4, x5)  =  U83_GGA(x1, x2, x4, x5)

U84_GGA(x1, x2, x3, x4)  =  U84_GGA(x1, x2, x4)

U85_GGA(x1, x2, x3, x4)  =  U85_GGA(x1, x2, x4)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)

U99_GGA(x1, x2, x3)  =  U99_GGA(x1, x3)

U100_GGA(x1, x2, x3)  =  U100_GGA(x1, x3)

U101_GGA(x1, x2, x3, x4)  =  U101_GGA(x1, x2, x4)

U102_GGA(x1, x2, x3, x4)  =  U102_GGA(x1, x2, x4)

U103_GGA(x1, x2, x3, x4)  =  U103_GGA(x1, x2, x4)

U104_GGA(x1, x2, x3, x4)  =  U104_GGA(x1, x2, x4)

U86_GGA(x1, x2, x3, x4)  =  U86_GGA(x1, x2, x4)

U87_GGA(x1, x2, x3, x4)  =  U87_GGA(x1, x2, x4)

U88_GGA(x1, x2, x3, x4)  =  U88_GGA(x1, x2, x4)

U89_GGA(x1, x2, x3, x4, x5)  =  U89_GGA(x1, x2, x4, x5)

U90_GGA(x1, x2, x3, x4, x5)  =  U90_GGA(x1, x2, x4, x5)

U91_GGA(x1, x2, x3, x4, x5, x6)  =  U91_GGA(x1, x2, x4, x5, x6)

ISMINUS_IN_GGG(x1, x2, x3)  =  ISMINUS_IN_GGG(x1, x2, x3)

U99_GGG(x1, x2, x3)  =  U99_GGG(x1, x2, x3)

U100_GGG(x1, x2, x3)  =  U100_GGG(x1, x2, x3)

U101_GGG(x1, x2, x3, x4)  =  U101_GGG(x1, x2, x3, x4)

U102_GGG(x1, x2, x3, x4)  =  U102_GGG(x1, x2, x3, x4)

U103_GGG(x1, x2, x3, x4)  =  U103_GGG(x1, x2, x3, x4)

U104_GGG(x1, x2, x3, x4)  =  U104_GGG(x1, x2, x3, x4)

U92_GGA(x1, x2, x3, x4, x5)  =  U92_GGA(x1, x2, x4, x5)

U93_GGA(x1, x2, x3, x4)  =  U93_GGA(x1, x2, x4)

U94_GGA(x1, x2, x3, x4)  =  U94_GGA(x1, x2, x4)

U14_GG(x1, x2, x3)  =  U14_GG(x1, x2, x3)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)

U130_GG(x1, x2, x3)  =  U130_GG(x1, x2, x3)

U131_GG(x1, x2, x3)  =  U131_GG(x1, x2, x3)

U15_GG(x1, x2, x3)  =  U15_GG(x1, x2, x3)

U16_GG(x1, x2, x3)  =  U16_GG(x1, x2, x3)

U17_GG(x1, x2, x3)  =  U17_GG(x1, x2, x3)

U18_GG(x1, x2, x3, x4)  =  U18_GG(x1, x2, x3, x4)

U19_GG(x1, x2, x3)  =  U19_GG(x1, x2, x3)

U20_GG(x1, x2, x3)  =  U20_GG(x1, x2, x3)

U21_GG(x1, x2, x3)  =  U21_GG(x1, x2, x3)

U22_GG(x1, x2, x3)  =  U22_GG(x1, x2, x3)

U23_GG(x1, x2, x3)  =  U23_GG(x1, x2, x3)

U24_GG(x1, x2, x3)  =  U24_GG(x1, x2, x3)

U25_GG(x1, x2, x3, x4)  =  U25_GG(x1, x2, x3, x4)

U26_GG(x1, x2, x3)  =  U26_GG(x1, x2, x3)

U27_GG(x1, x2, x3)  =  U27_GG(x1, x2, x3)

U28_GG(x1, x2, x3, x4)  =  U28_GG(x1, x2, x3, x4)

U29_GG(x1, x2, x3)  =  U29_GG(x1, x2, x3)

U30_GG(x1, x2, x3)  =  U30_GG(x1, x2, x3)

U31_GG(x1, x2, x3)  =  U31_GG(x1, x2, x3)

U32_GG(x1, x2, x3)  =  U32_GG(x1, x2, x3)

U33_GG(x1, x2, x3)  =  U33_GG(x1, x2, x3)

U34_GG(x1, x2, x3)  =  U34_GG(x1, x2, x3)

U35_GG(x1, x2, x3, x4)  =  U35_GG(x1, x2, x3, x4)

U36_GG(x1, x2, x3)  =  U36_GG(x1, x2, x3)

U37_GG(x1, x2, x3)  =  U37_GG(x1, x2, x3)

U38_GG(x1, x2, x3)  =  U38_GG(x1, x2, x3)

U39_GG(x1, x2, x3)  =  U39_GG(x1, x2, x3)

U40_GG(x1, x2, x3)  =  U40_GG(x1, x2, x3)

U41_GG(x1, x2, x3)  =  U41_GG(x1, x2, x3)

U42_GG(x1, x2, x3, x4)  =  U42_GG(x1, x2, x3, x4)

U43_GG(x1, x2, x3)  =  U43_GG(x1, x2, x3)

U44_GG(x1, x2, x3)  =  U44_GG(x1, x2, x3)

U45_GG(x1, x2, x3, x4)  =  U45_GG(x1, x2, x3, x4)

U46_GG(x1, x2, x3)  =  U46_GG(x1, x2, x3)

U47_GG(x1, x2, x3)  =  U47_GG(x1, x2, x3)

U48_GG(x1, x2, x3, x4)  =  U48_GG(x1, x2, x3, x4)

U49_GG(x1, x2, x3)  =  U49_GG(x1, x2, x3)

U50_GG(x1, x2, x3)  =  U50_GG(x1, x2, x3)

U51_GG(x1, x2, x3)  =  U51_GG(x1, x2, x3)

U52_GG(x1, x2, x3)  =  U52_GG(x1, x2, x3)

U53_GG(x1, x2, x3)  =  U53_GG(x1, x2, x3)

U54_GG(x1, x2, x3)  =  U54_GG(x1, x2, x3)

U55_GG(x1, x2, x3, x4)  =  U55_GG(x1, x2, x3, x4)

U56_GG(x1, x2, x3)  =  U56_GG(x1, x2, x3)

U57_GG(x1, x2, x3)  =  U57_GG(x1, x2, x3)

U58_GG(x1, x2, x3)  =  U58_GG(x1, x2, x3)

U59_GG(x1, x2, x3)  =  U59_GG(x1, x2, x3)

U60_GG(x1, x2, x3)  =  U60_GG(x1, x2, x3)

U61_GG(x1, x2, x3)  =  U61_GG(x1, x2, x3)

U62_GG(x1, x2, x3, x4)  =  U62_GG(x1, x2, x3, x4)

U63_GG(x1, x2, x3)  =  U63_GG(x1, x2, x3)

U64_GG(x1, x2, x3)  =  U64_GG(x1, x2, x3)

U65_GG(x1, x2, x3, x4)  =  U65_GG(x1, x2, x3, x4)

U66_GG(x1, x2, x3)  =  U66_GG(x1, x2, x3)

U67_GG(x1, x2, x3)  =  U67_GG(x1, x2, x3)

U68_GG(x1, x2, x3)  =  U68_GG(x1, x2, x3)

U69_GG(x1, x2, x3)  =  U69_GG(x1, x2, x3)

U70_GG(x1, x2, x3)  =  U70_GG(x1, x2, x3)

U71_GG(x1, x2, x3)  =  U71_GG(x1, x2, x3)

U72_GG(x1, x2, x3, x4)  =  U72_GG(x1, x2, x3, x4)

U73_GG(x1, x2, x3)  =  U73_GG(x1, x2, x3)

U74_GG(x1, x2, x3)  =  U74_GG(x1, x2, x3)

U75_GG(x1, x2, x3)  =  U75_GG(x1, x2, x3)

U76_GG(x1, x2, x3)  =  U76_GG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(13) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 8 SCCs with 195 less nodes.
----------------------------------------

(14)
Complex Obligation (AND)

----------------------------------------

(15)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x1, x2, x3)

U129_gg(x1, x2, x3)  =  U129_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x1, x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x1, x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x1, x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x1, x2, x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x1, x2, x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x1, x2, x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x1, x2, x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x1, x2, x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x1, x2, x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x2, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x2, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x2, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U99_gga(x1, x2, x3)  =  U99_gga(x1, x3)

U100_gga(x1, x2, x3)  =  U100_gga(x1, x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x1, x2, x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x1, x2, x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x1, x2, x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x1, x2, x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x1, x2, x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x1, x2, x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x2, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x2, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x2, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x1, x2, x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U99_ggg(x1, x2, x3)  =  U99_ggg(x1, x2, x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x1, x2, x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x1, x2, x3, x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x1, x2, x3, x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x1, x2, x3, x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x1, x2, x3, x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x1, x2, x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x1, x2, x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x1, x2, x4)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U130_gg(x1, x2, x3)  =  U130_gg(x1, x2, x3)

U131_gg(x1, x2, x3)  =  U131_gg(x1, x2, x3)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x1, x2, x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x1, x2, x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x1, x2, x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x1, x2, x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x1, x2, x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x1, x2, x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x1, x2, x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x1, x2, x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x1, x2, x3)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(16) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(17)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(18) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(19)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(20) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(21)
YES

----------------------------------------

(22)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x1, x2, x3)

U129_gg(x1, x2, x3)  =  U129_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x1, x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x1, x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x1, x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x1, x2, x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x1, x2, x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x1, x2, x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x1, x2, x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x1, x2, x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x1, x2, x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x2, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x2, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x2, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U99_gga(x1, x2, x3)  =  U99_gga(x1, x3)

U100_gga(x1, x2, x3)  =  U100_gga(x1, x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x1, x2, x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x1, x2, x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x1, x2, x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x1, x2, x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x1, x2, x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x1, x2, x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x2, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x2, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x2, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x1, x2, x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U99_ggg(x1, x2, x3)  =  U99_ggg(x1, x2, x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x1, x2, x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x1, x2, x3, x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x1, x2, x3, x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x1, x2, x3, x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x1, x2, x3, x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x1, x2, x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x1, x2, x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x1, x2, x4)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U130_gg(x1, x2, x3)  =  U130_gg(x1, x2, x3)

U131_gg(x1, x2, x3)  =  U131_gg(x1, x2, x3)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x1, x2, x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x1, x2, x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x1, x2, x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x1, x2, x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x1, x2, x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x1, x2, x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x1, x2, x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x1, x2, x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x1, x2, x3)

ISMINUS_IN_GGG(x1, x2, x3)  =  ISMINUS_IN_GGG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(23) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(24)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(25) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(27) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
The graph contains the following edges 1 >= 1, 2 > 2, 3 > 3


*ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
The graph contains the following edges 1 >= 1, 2 > 2, 3 > 3


----------------------------------------

(28)
YES

----------------------------------------

(29)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x1, x2, x3)

U129_gg(x1, x2, x3)  =  U129_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x1, x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x1, x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x1, x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x1, x2, x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x1, x2, x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x1, x2, x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x1, x2, x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x1, x2, x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x1, x2, x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x2, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x2, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x2, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U99_gga(x1, x2, x3)  =  U99_gga(x1, x3)

U100_gga(x1, x2, x3)  =  U100_gga(x1, x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x1, x2, x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x1, x2, x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x1, x2, x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x1, x2, x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x1, x2, x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x1, x2, x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x2, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x2, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x2, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x1, x2, x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U99_ggg(x1, x2, x3)  =  U99_ggg(x1, x2, x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x1, x2, x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x1, x2, x3, x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x1, x2, x3, x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x1, x2, x3, x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x1, x2, x3, x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x1, x2, x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x1, x2, x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x1, x2, x4)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U130_gg(x1, x2, x3)  =  U130_gg(x1, x2, x3)

U131_gg(x1, x2, x3)  =  U131_gg(x1, x2, x3)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x1, x2, x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x1, x2, x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x1, x2, x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x1, x2, x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x1, x2, x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x1, x2, x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x1, x2, x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x1, x2, x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x1, x2, x3)

ISMINUS_IN_GGG(x1, x2, x3)  =  ISMINUS_IN_GGG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(30) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(31)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(32) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(34) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 > 3


*ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


*ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 > 3


*ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


----------------------------------------

(35)
YES

----------------------------------------

(36)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x1, x2, x3)

U129_gg(x1, x2, x3)  =  U129_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x1, x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x1, x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x1, x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x1, x2, x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x1, x2, x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x1, x2, x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x1, x2, x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x1, x2, x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x1, x2, x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x2, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x2, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x2, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U99_gga(x1, x2, x3)  =  U99_gga(x1, x3)

U100_gga(x1, x2, x3)  =  U100_gga(x1, x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x1, x2, x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x1, x2, x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x1, x2, x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x1, x2, x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x1, x2, x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x1, x2, x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x2, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x2, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x2, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x1, x2, x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U99_ggg(x1, x2, x3)  =  U99_ggg(x1, x2, x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x1, x2, x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x1, x2, x3, x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x1, x2, x3, x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x1, x2, x3, x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x1, x2, x3, x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x1, x2, x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x1, x2, x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x1, x2, x4)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U130_gg(x1, x2, x3)  =  U130_gg(x1, x2, x3)

U131_gg(x1, x2, x3)  =  U131_gg(x1, x2, x3)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x1, x2, x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x1, x2, x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x1, x2, x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x1, x2, x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x1, x2, x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x1, x2, x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x1, x2, x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x1, x2, x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x1, x2, x3)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(37) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(38)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
zero  =  zero

succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(39) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y)) -> ISMINUS_IN_GGA(zero, Y)
   ISMINUS_IN_GGA(zero, succ(Y)) -> ISMINUS_IN_GGA(zero, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(41) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGA(zero, pred(Y)) -> ISMINUS_IN_GGA(zero, Y)
The graph contains the following edges 1 >= 1, 2 > 2


*ISMINUS_IN_GGA(zero, succ(Y)) -> ISMINUS_IN_GGA(zero, Y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(42)
YES

----------------------------------------

(43)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x1, x2, x3)

U129_gg(x1, x2, x3)  =  U129_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x1, x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x1, x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x1, x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x1, x2, x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x1, x2, x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x1, x2, x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x1, x2, x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x1, x2, x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x1, x2, x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x2, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x2, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x2, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U99_gga(x1, x2, x3)  =  U99_gga(x1, x3)

U100_gga(x1, x2, x3)  =  U100_gga(x1, x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x1, x2, x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x1, x2, x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x1, x2, x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x1, x2, x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x1, x2, x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x1, x2, x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x2, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x2, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x2, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x1, x2, x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U99_ggg(x1, x2, x3)  =  U99_ggg(x1, x2, x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x1, x2, x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x1, x2, x3, x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x1, x2, x3, x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x1, x2, x3, x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x1, x2, x3, x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x1, x2, x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x1, x2, x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x1, x2, x4)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U130_gg(x1, x2, x3)  =  U130_gg(x1, x2, x3)

U131_gg(x1, x2, x3)  =  U131_gg(x1, x2, x3)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x1, x2, x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x1, x2, x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x1, x2, x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x1, x2, x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x1, x2, x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x1, x2, x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x1, x2, x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x1, x2, x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x1, x2, x3)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(44) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(45)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(46) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(47)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(succ(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(pred(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(pred(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(48) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGA(succ(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(succ(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(pred(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(pred(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(49)
YES

----------------------------------------

(50)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x1, x2, x3)

U129_gg(x1, x2, x3)  =  U129_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x1, x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x1, x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x1, x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x1, x2, x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x1, x2, x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x1, x2, x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x1, x2, x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x1, x2, x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x1, x2, x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x2, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x2, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x2, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U99_gga(x1, x2, x3)  =  U99_gga(x1, x3)

U100_gga(x1, x2, x3)  =  U100_gga(x1, x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x1, x2, x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x1, x2, x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x1, x2, x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x1, x2, x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x1, x2, x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x1, x2, x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x2, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x2, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x2, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x1, x2, x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U99_ggg(x1, x2, x3)  =  U99_ggg(x1, x2, x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x1, x2, x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x1, x2, x3, x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x1, x2, x3, x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x1, x2, x3, x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x1, x2, x3, x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x1, x2, x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x1, x2, x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x1, x2, x4)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U130_gg(x1, x2, x3)  =  U130_gg(x1, x2, x3)

U131_gg(x1, x2, x3)  =  U131_gg(x1, x2, x3)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x1, x2, x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x1, x2, x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x1, x2, x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x1, x2, x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x1, x2, x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x1, x2, x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x1, x2, x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x1, x2, x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x1, x2, x3)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(51) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(52)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(53) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGA(succ(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)
   ISPLUS_IN_GGA(succ(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
   ISPLUS_IN_GGA(pred(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
   ISPLUS_IN_GGA(pred(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(55) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISPLUS_IN_GGA(succ(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISPLUS_IN_GGA(succ(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISPLUS_IN_GGA(pred(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISPLUS_IN_GGA(pred(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(56)
YES

----------------------------------------

(57)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ACKERMANN_IN_GGA(M, N, Ret) -> U82_GGA(M, N, Ret, =_in_ag(X, N))
   U82_GGA(M, N, Ret, =_out_ag(X, N)) -> U83_GGA(M, N, Ret, X, =_in_ag(X1, zero))
   U83_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_GGA(M, N, Ret, =_in_gg(X, X1))
   U84_GGA(M, N, Ret, =_out_gg(X, X1)) -> U85_GGA(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   U85_GGA(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, Ret, =_in_ag(M1, U))
   U86_GGA(M, N, Ret, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, succ(zero), Ret)
   ACKERMANN_IN_GGA(M, N, Ret) -> U88_GGA(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_GGA(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, Ret, U, =_in_ag(N1, U))
   U89_GGA(M, N, Ret, U, =_out_ag(N1, U)) -> U90_GGA(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_GGA(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_GGA(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U91_GGA(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_GGA(M, N, Ret, Ret1, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, Ret1, Ret2)
   U89_GGA(M, N, Ret, U, =_out_ag(N1, U)) -> ACKERMANN_IN_GGA(M, N1, Ret1)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x1, x2, x3)

U129_gg(x1, x2, x3)  =  U129_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x1, x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x1, x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x1, x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x1, x2, x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x1, x2, x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x1, x2, x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x1, x2, x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x1, x2, x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x1, x2, x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x2, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x2, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x2, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U99_gga(x1, x2, x3)  =  U99_gga(x1, x3)

U100_gga(x1, x2, x3)  =  U100_gga(x1, x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x1, x2, x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x1, x2, x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x1, x2, x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x1, x2, x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x1, x2, x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x1, x2, x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x2, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x2, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x2, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x1, x2, x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U99_ggg(x1, x2, x3)  =  U99_ggg(x1, x2, x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x1, x2, x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x1, x2, x3, x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x1, x2, x3, x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x1, x2, x3, x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x1, x2, x3, x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x1, x2, x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x1, x2, x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x1, x2, x4)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U130_gg(x1, x2, x3)  =  U130_gg(x1, x2, x3)

U131_gg(x1, x2, x3)  =  U131_gg(x1, x2, x3)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x1, x2, x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x1, x2, x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x1, x2, x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x1, x2, x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x1, x2, x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x1, x2, x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x1, x2, x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x1, x2, x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x1, x2, x3)

ACKERMANN_IN_GGA(x1, x2, x3)  =  ACKERMANN_IN_GGA(x1, x2)

U82_GGA(x1, x2, x3, x4)  =  U82_GGA(x1, x2, x4)

U83_GGA(x1, x2, x3, x4, x5)  =  U83_GGA(x1, x2, x4, x5)

U84_GGA(x1, x2, x3, x4)  =  U84_GGA(x1, x2, x4)

U85_GGA(x1, x2, x3, x4)  =  U85_GGA(x1, x2, x4)

U86_GGA(x1, x2, x3, x4)  =  U86_GGA(x1, x2, x4)

U88_GGA(x1, x2, x3, x4)  =  U88_GGA(x1, x2, x4)

U89_GGA(x1, x2, x3, x4, x5)  =  U89_GGA(x1, x2, x4, x5)

U90_GGA(x1, x2, x3, x4, x5)  =  U90_GGA(x1, x2, x4, x5)

U91_GGA(x1, x2, x3, x4, x5, x6)  =  U91_GGA(x1, x2, x4, x5, x6)

U92_GGA(x1, x2, x3, x4, x5)  =  U92_GGA(x1, x2, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(58) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(59)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ACKERMANN_IN_GGA(M, N, Ret) -> U82_GGA(M, N, Ret, =_in_ag(X, N))
   U82_GGA(M, N, Ret, =_out_ag(X, N)) -> U83_GGA(M, N, Ret, X, =_in_ag(X1, zero))
   U83_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_GGA(M, N, Ret, =_in_gg(X, X1))
   U84_GGA(M, N, Ret, =_out_gg(X, X1)) -> U85_GGA(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   U85_GGA(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, Ret, =_in_ag(M1, U))
   U86_GGA(M, N, Ret, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, succ(zero), Ret)
   ACKERMANN_IN_GGA(M, N, Ret) -> U88_GGA(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_GGA(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, Ret, U, =_in_ag(N1, U))
   U89_GGA(M, N, Ret, U, =_out_ag(N1, U)) -> U90_GGA(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_GGA(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_GGA(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U91_GGA(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_GGA(M, N, Ret, Ret1, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, Ret1, Ret2)
   U89_GGA(M, N, Ret, U, =_out_ag(N1, U)) -> ACKERMANN_IN_GGA(M, N1, Ret1)

The TRS R consists of the following rules:

   =_in_ag(X, X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))

The argument filtering Pi contains the following mapping:
=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

zero  =  zero

succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x1, x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x1, x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x1, x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x1, x2, x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x1, x2, x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x1, x2, x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x1, x2, x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x1, x2, x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x1, x2, x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x2, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x2, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x2, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U99_gga(x1, x2, x3)  =  U99_gga(x1, x3)

U100_gga(x1, x2, x3)  =  U100_gga(x1, x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x1, x2, x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x1, x2, x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x1, x2, x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x1, x2, x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x1, x2, x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x1, x2, x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x2, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x2, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x2, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x1, x2, x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U99_ggg(x1, x2, x3)  =  U99_ggg(x1, x2, x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x1, x2, x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x1, x2, x3, x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x1, x2, x3, x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x1, x2, x3, x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x1, x2, x3, x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x1, x2, x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x1, x2, x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x1, x2, x4)

ACKERMANN_IN_GGA(x1, x2, x3)  =  ACKERMANN_IN_GGA(x1, x2)

U82_GGA(x1, x2, x3, x4)  =  U82_GGA(x1, x2, x4)

U83_GGA(x1, x2, x3, x4, x5)  =  U83_GGA(x1, x2, x4, x5)

U84_GGA(x1, x2, x3, x4)  =  U84_GGA(x1, x2, x4)

U85_GGA(x1, x2, x3, x4)  =  U85_GGA(x1, x2, x4)

U86_GGA(x1, x2, x3, x4)  =  U86_GGA(x1, x2, x4)

U88_GGA(x1, x2, x3, x4)  =  U88_GGA(x1, x2, x4)

U89_GGA(x1, x2, x3, x4, x5)  =  U89_GGA(x1, x2, x4, x5)

U90_GGA(x1, x2, x3, x4, x5)  =  U90_GGA(x1, x2, x4, x5)

U91_GGA(x1, x2, x3, x4, x5, x6)  =  U91_GGA(x1, x2, x4, x5, x6)

U92_GGA(x1, x2, x3, x4, x5)  =  U92_GGA(x1, x2, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(60) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(61)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, N, =_in_ag(N))
   U82_GGA(M, N, =_out_ag(X, N)) -> U83_GGA(M, N, X, =_in_ag(zero))
   U83_GGA(M, N, X, =_out_ag(X1, zero)) -> U84_GGA(M, N, =_in_gg(X, X1))
   U84_GGA(M, N, =_out_gg(X, X1)) -> U85_GGA(M, N, isMinus_in_gga(M, succ(zero)))
   U85_GGA(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, =_in_ag(U))
   U86_GGA(M, N, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, succ(zero))
   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, N, isMinus_in_gga(N, succ(zero)))
   U88_GGA(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, U, =_in_ag(U))
   U89_GGA(M, N, U, =_out_ag(N1, U)) -> U90_GGA(M, N, U, ackermann_in_gga(M, N1))
   U90_GGA(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_GGA(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U91_GGA(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret1, =_in_ag(U))
   U92_GGA(M, N, Ret1, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, Ret1)
   U89_GGA(M, N, U, =_out_ag(N1, U)) -> ACKERMANN_IN_GGA(M, N1)

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(X, Y, isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(M, N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, N, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, N, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U99_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U101_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U103_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U77_gga(M, N, =_out_ag(X, M)) -> U78_gga(M, N, X, =_in_ag(zero))
   U82_gga(M, N, =_out_ag(X, N)) -> U83_gga(M, N, X, =_in_ag(zero))
   U88_gga(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, U, =_in_ag(U))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(X, Y, isMinus_in_gga(X, Y))
   U78_gga(M, N, X, =_out_ag(X1, zero)) -> U79_gga(M, N, =_in_gg(X, X1))
   U83_gga(M, N, X, =_out_ag(X1, zero)) -> U84_gga(M, N, =_in_gg(X, X1))
   U89_gga(M, N, U, =_out_ag(N1, U)) -> U90_gga(M, N, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U100_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U102_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U104_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U79_gga(M, N, =_out_gg(X, X1)) -> U80_gga(M, N, isPlus_in_gga(N, succ(zero)))
   U84_gga(M, N, =_out_gg(X, X1)) -> U85_gga(M, N, isMinus_in_gga(M, succ(zero)))
   U90_gga(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U80_gga(M, N, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, =_in_ag(U))
   U85_gga(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, =_in_ag(U))
   U91_gga(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(X, Y, isPlus_in_gga(X, Y))
   U81_gga(M, N, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   U86_gga(M, N, =_out_ag(M1, U)) -> U87_gga(M, N, ackermann_in_gga(M1, succ(zero)))
   U92_gga(M, N, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, ackermann_in_gga(M1, Ret1))
   U95_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U97_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U87_gga(M, N, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U93_gga(M, N, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, =_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(X, Y, isPlus_in_gga(X, Y))
   U94_gga(M, N, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U96_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U98_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0, x1)
   U101_gga(x0, x1, x2)
   U103_gga(x0, x1, x2)
   U77_gga(x0, x1, x2)
   U82_gga(x0, x1, x2)
   U88_gga(x0, x1, x2)
   U99_ggg(x0, x1, x2)
   U101_ggg(x0, x1, x2, x3)
   U103_ggg(x0, x1, x2, x3)
   U78_gga(x0, x1, x2, x3)
   U83_gga(x0, x1, x2, x3)
   U89_gga(x0, x1, x2, x3)
   U100_gga(x0, x1)
   U102_gga(x0, x1, x2)
   U104_gga(x0, x1, x2)
   U79_gga(x0, x1, x2)
   U84_gga(x0, x1, x2)
   U90_gga(x0, x1, x2, x3)
   U100_ggg(x0, x1, x2)
   U102_ggg(x0, x1, x2, x3)
   U104_ggg(x0, x1, x2, x3)
   U80_gga(x0, x1, x2)
   U85_gga(x0, x1, x2)
   U91_gga(x0, x1, x2, x3, x4)
   isPlus_in_gga(x0, x1)
   U81_gga(x0, x1, x2)
   U86_gga(x0, x1, x2)
   U92_gga(x0, x1, x2, x3)
   U95_gga(x0, x1, x2)
   U97_gga(x0, x1, x2)
   U87_gga(x0, x1, x2)
   U93_gga(x0, x1, x2)
   U94_gga(x0, x1, x2)
   U96_gga(x0, x1, x2)
   U98_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(62) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, N, =_in_ag(N)) at position [2] we obtained the following new rules [LPAR04]:

   (ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, N, =_out_ag(N, N)),ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, N, =_out_ag(N, N)))


----------------------------------------

(63)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U82_GGA(M, N, =_out_ag(X, N)) -> U83_GGA(M, N, X, =_in_ag(zero))
   U83_GGA(M, N, X, =_out_ag(X1, zero)) -> U84_GGA(M, N, =_in_gg(X, X1))
   U84_GGA(M, N, =_out_gg(X, X1)) -> U85_GGA(M, N, isMinus_in_gga(M, succ(zero)))
   U85_GGA(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, =_in_ag(U))
   U86_GGA(M, N, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, succ(zero))
   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, N, isMinus_in_gga(N, succ(zero)))
   U88_GGA(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, U, =_in_ag(U))
   U89_GGA(M, N, U, =_out_ag(N1, U)) -> U90_GGA(M, N, U, ackermann_in_gga(M, N1))
   U90_GGA(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_GGA(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U91_GGA(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret1, =_in_ag(U))
   U92_GGA(M, N, Ret1, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, Ret1)
   U89_GGA(M, N, U, =_out_ag(N1, U)) -> ACKERMANN_IN_GGA(M, N1)
   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, N, =_out_ag(N, N))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(X, Y, isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(M, N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, N, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, N, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U99_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U101_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U103_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U77_gga(M, N, =_out_ag(X, M)) -> U78_gga(M, N, X, =_in_ag(zero))
   U82_gga(M, N, =_out_ag(X, N)) -> U83_gga(M, N, X, =_in_ag(zero))
   U88_gga(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, U, =_in_ag(U))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(X, Y, isMinus_in_gga(X, Y))
   U78_gga(M, N, X, =_out_ag(X1, zero)) -> U79_gga(M, N, =_in_gg(X, X1))
   U83_gga(M, N, X, =_out_ag(X1, zero)) -> U84_gga(M, N, =_in_gg(X, X1))
   U89_gga(M, N, U, =_out_ag(N1, U)) -> U90_gga(M, N, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U100_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U102_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U104_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U79_gga(M, N, =_out_gg(X, X1)) -> U80_gga(M, N, isPlus_in_gga(N, succ(zero)))
   U84_gga(M, N, =_out_gg(X, X1)) -> U85_gga(M, N, isMinus_in_gga(M, succ(zero)))
   U90_gga(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U80_gga(M, N, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, =_in_ag(U))
   U85_gga(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, =_in_ag(U))
   U91_gga(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(X, Y, isPlus_in_gga(X, Y))
   U81_gga(M, N, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   U86_gga(M, N, =_out_ag(M1, U)) -> U87_gga(M, N, ackermann_in_gga(M1, succ(zero)))
   U92_gga(M, N, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, ackermann_in_gga(M1, Ret1))
   U95_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U97_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U87_gga(M, N, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U93_gga(M, N, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, =_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(X, Y, isPlus_in_gga(X, Y))
   U94_gga(M, N, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U96_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U98_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0, x1)
   U101_gga(x0, x1, x2)
   U103_gga(x0, x1, x2)
   U77_gga(x0, x1, x2)
   U82_gga(x0, x1, x2)
   U88_gga(x0, x1, x2)
   U99_ggg(x0, x1, x2)
   U101_ggg(x0, x1, x2, x3)
   U103_ggg(x0, x1, x2, x3)
   U78_gga(x0, x1, x2, x3)
   U83_gga(x0, x1, x2, x3)
   U89_gga(x0, x1, x2, x3)
   U100_gga(x0, x1)
   U102_gga(x0, x1, x2)
   U104_gga(x0, x1, x2)
   U79_gga(x0, x1, x2)
   U84_gga(x0, x1, x2)
   U90_gga(x0, x1, x2, x3)
   U100_ggg(x0, x1, x2)
   U102_ggg(x0, x1, x2, x3)
   U104_ggg(x0, x1, x2, x3)
   U80_gga(x0, x1, x2)
   U85_gga(x0, x1, x2)
   U91_gga(x0, x1, x2, x3, x4)
   isPlus_in_gga(x0, x1)
   U81_gga(x0, x1, x2)
   U86_gga(x0, x1, x2)
   U92_gga(x0, x1, x2, x3)
   U95_gga(x0, x1, x2)
   U97_gga(x0, x1, x2)
   U87_gga(x0, x1, x2)
   U93_gga(x0, x1, x2)
   U94_gga(x0, x1, x2)
   U96_gga(x0, x1, x2)
   U98_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(64) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U82_GGA(M, N, =_out_ag(X, N)) -> U83_GGA(M, N, X, =_in_ag(zero)) at position [3] we obtained the following new rules [LPAR04]:

   (U82_GGA(M, N, =_out_ag(X, N)) -> U83_GGA(M, N, X, =_out_ag(zero, zero)),U82_GGA(M, N, =_out_ag(X, N)) -> U83_GGA(M, N, X, =_out_ag(zero, zero)))


----------------------------------------

(65)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U83_GGA(M, N, X, =_out_ag(X1, zero)) -> U84_GGA(M, N, =_in_gg(X, X1))
   U84_GGA(M, N, =_out_gg(X, X1)) -> U85_GGA(M, N, isMinus_in_gga(M, succ(zero)))
   U85_GGA(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, =_in_ag(U))
   U86_GGA(M, N, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, succ(zero))
   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, N, isMinus_in_gga(N, succ(zero)))
   U88_GGA(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, U, =_in_ag(U))
   U89_GGA(M, N, U, =_out_ag(N1, U)) -> U90_GGA(M, N, U, ackermann_in_gga(M, N1))
   U90_GGA(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_GGA(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U91_GGA(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret1, =_in_ag(U))
   U92_GGA(M, N, Ret1, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, Ret1)
   U89_GGA(M, N, U, =_out_ag(N1, U)) -> ACKERMANN_IN_GGA(M, N1)
   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, N, =_out_ag(N, N))
   U82_GGA(M, N, =_out_ag(X, N)) -> U83_GGA(M, N, X, =_out_ag(zero, zero))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(X, Y, isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(M, N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, N, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, N, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U99_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U101_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U103_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U77_gga(M, N, =_out_ag(X, M)) -> U78_gga(M, N, X, =_in_ag(zero))
   U82_gga(M, N, =_out_ag(X, N)) -> U83_gga(M, N, X, =_in_ag(zero))
   U88_gga(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, U, =_in_ag(U))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(X, Y, isMinus_in_gga(X, Y))
   U78_gga(M, N, X, =_out_ag(X1, zero)) -> U79_gga(M, N, =_in_gg(X, X1))
   U83_gga(M, N, X, =_out_ag(X1, zero)) -> U84_gga(M, N, =_in_gg(X, X1))
   U89_gga(M, N, U, =_out_ag(N1, U)) -> U90_gga(M, N, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U100_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U102_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U104_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U79_gga(M, N, =_out_gg(X, X1)) -> U80_gga(M, N, isPlus_in_gga(N, succ(zero)))
   U84_gga(M, N, =_out_gg(X, X1)) -> U85_gga(M, N, isMinus_in_gga(M, succ(zero)))
   U90_gga(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U80_gga(M, N, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, =_in_ag(U))
   U85_gga(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, =_in_ag(U))
   U91_gga(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(X, Y, isPlus_in_gga(X, Y))
   U81_gga(M, N, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   U86_gga(M, N, =_out_ag(M1, U)) -> U87_gga(M, N, ackermann_in_gga(M1, succ(zero)))
   U92_gga(M, N, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, ackermann_in_gga(M1, Ret1))
   U95_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U97_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U87_gga(M, N, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U93_gga(M, N, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, =_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(X, Y, isPlus_in_gga(X, Y))
   U94_gga(M, N, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U96_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U98_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0, x1)
   U101_gga(x0, x1, x2)
   U103_gga(x0, x1, x2)
   U77_gga(x0, x1, x2)
   U82_gga(x0, x1, x2)
   U88_gga(x0, x1, x2)
   U99_ggg(x0, x1, x2)
   U101_ggg(x0, x1, x2, x3)
   U103_ggg(x0, x1, x2, x3)
   U78_gga(x0, x1, x2, x3)
   U83_gga(x0, x1, x2, x3)
   U89_gga(x0, x1, x2, x3)
   U100_gga(x0, x1)
   U102_gga(x0, x1, x2)
   U104_gga(x0, x1, x2)
   U79_gga(x0, x1, x2)
   U84_gga(x0, x1, x2)
   U90_gga(x0, x1, x2, x3)
   U100_ggg(x0, x1, x2)
   U102_ggg(x0, x1, x2, x3)
   U104_ggg(x0, x1, x2, x3)
   U80_gga(x0, x1, x2)
   U85_gga(x0, x1, x2)
   U91_gga(x0, x1, x2, x3, x4)
   isPlus_in_gga(x0, x1)
   U81_gga(x0, x1, x2)
   U86_gga(x0, x1, x2)
   U92_gga(x0, x1, x2, x3)
   U95_gga(x0, x1, x2)
   U97_gga(x0, x1, x2)
   U87_gga(x0, x1, x2)
   U93_gga(x0, x1, x2)
   U94_gga(x0, x1, x2)
   U96_gga(x0, x1, x2)
   U98_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(66) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U85_GGA(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, =_in_ag(U)) at position [2] we obtained the following new rules [LPAR04]:

   (U85_GGA(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, =_out_ag(U, U)),U85_GGA(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, =_out_ag(U, U)))


----------------------------------------

(67)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U83_GGA(M, N, X, =_out_ag(X1, zero)) -> U84_GGA(M, N, =_in_gg(X, X1))
   U84_GGA(M, N, =_out_gg(X, X1)) -> U85_GGA(M, N, isMinus_in_gga(M, succ(zero)))
   U86_GGA(M, N, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, succ(zero))
   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, N, isMinus_in_gga(N, succ(zero)))
   U88_GGA(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, U, =_in_ag(U))
   U89_GGA(M, N, U, =_out_ag(N1, U)) -> U90_GGA(M, N, U, ackermann_in_gga(M, N1))
   U90_GGA(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_GGA(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U91_GGA(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret1, =_in_ag(U))
   U92_GGA(M, N, Ret1, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, Ret1)
   U89_GGA(M, N, U, =_out_ag(N1, U)) -> ACKERMANN_IN_GGA(M, N1)
   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, N, =_out_ag(N, N))
   U82_GGA(M, N, =_out_ag(X, N)) -> U83_GGA(M, N, X, =_out_ag(zero, zero))
   U85_GGA(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, =_out_ag(U, U))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(X, Y, isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(M, N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, N, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, N, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U99_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U101_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U103_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U77_gga(M, N, =_out_ag(X, M)) -> U78_gga(M, N, X, =_in_ag(zero))
   U82_gga(M, N, =_out_ag(X, N)) -> U83_gga(M, N, X, =_in_ag(zero))
   U88_gga(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, U, =_in_ag(U))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(X, Y, isMinus_in_gga(X, Y))
   U78_gga(M, N, X, =_out_ag(X1, zero)) -> U79_gga(M, N, =_in_gg(X, X1))
   U83_gga(M, N, X, =_out_ag(X1, zero)) -> U84_gga(M, N, =_in_gg(X, X1))
   U89_gga(M, N, U, =_out_ag(N1, U)) -> U90_gga(M, N, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U100_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U102_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U104_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U79_gga(M, N, =_out_gg(X, X1)) -> U80_gga(M, N, isPlus_in_gga(N, succ(zero)))
   U84_gga(M, N, =_out_gg(X, X1)) -> U85_gga(M, N, isMinus_in_gga(M, succ(zero)))
   U90_gga(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U80_gga(M, N, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, =_in_ag(U))
   U85_gga(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, =_in_ag(U))
   U91_gga(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(X, Y, isPlus_in_gga(X, Y))
   U81_gga(M, N, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   U86_gga(M, N, =_out_ag(M1, U)) -> U87_gga(M, N, ackermann_in_gga(M1, succ(zero)))
   U92_gga(M, N, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, ackermann_in_gga(M1, Ret1))
   U95_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U97_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U87_gga(M, N, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U93_gga(M, N, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, =_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(X, Y, isPlus_in_gga(X, Y))
   U94_gga(M, N, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U96_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U98_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0, x1)
   U101_gga(x0, x1, x2)
   U103_gga(x0, x1, x2)
   U77_gga(x0, x1, x2)
   U82_gga(x0, x1, x2)
   U88_gga(x0, x1, x2)
   U99_ggg(x0, x1, x2)
   U101_ggg(x0, x1, x2, x3)
   U103_ggg(x0, x1, x2, x3)
   U78_gga(x0, x1, x2, x3)
   U83_gga(x0, x1, x2, x3)
   U89_gga(x0, x1, x2, x3)
   U100_gga(x0, x1)
   U102_gga(x0, x1, x2)
   U104_gga(x0, x1, x2)
   U79_gga(x0, x1, x2)
   U84_gga(x0, x1, x2)
   U90_gga(x0, x1, x2, x3)
   U100_ggg(x0, x1, x2)
   U102_ggg(x0, x1, x2, x3)
   U104_ggg(x0, x1, x2, x3)
   U80_gga(x0, x1, x2)
   U85_gga(x0, x1, x2)
   U91_gga(x0, x1, x2, x3, x4)
   isPlus_in_gga(x0, x1)
   U81_gga(x0, x1, x2)
   U86_gga(x0, x1, x2)
   U92_gga(x0, x1, x2, x3)
   U95_gga(x0, x1, x2)
   U97_gga(x0, x1, x2)
   U87_gga(x0, x1, x2)
   U93_gga(x0, x1, x2)
   U94_gga(x0, x1, x2)
   U96_gga(x0, x1, x2)
   U98_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(68) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U88_GGA(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, U, =_in_ag(U)) at position [3] we obtained the following new rules [LPAR04]:

   (U88_GGA(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, U, =_out_ag(U, U)),U88_GGA(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, U, =_out_ag(U, U)))


----------------------------------------

(69)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U83_GGA(M, N, X, =_out_ag(X1, zero)) -> U84_GGA(M, N, =_in_gg(X, X1))
   U84_GGA(M, N, =_out_gg(X, X1)) -> U85_GGA(M, N, isMinus_in_gga(M, succ(zero)))
   U86_GGA(M, N, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, succ(zero))
   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, N, isMinus_in_gga(N, succ(zero)))
   U89_GGA(M, N, U, =_out_ag(N1, U)) -> U90_GGA(M, N, U, ackermann_in_gga(M, N1))
   U90_GGA(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_GGA(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U91_GGA(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret1, =_in_ag(U))
   U92_GGA(M, N, Ret1, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, Ret1)
   U89_GGA(M, N, U, =_out_ag(N1, U)) -> ACKERMANN_IN_GGA(M, N1)
   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, N, =_out_ag(N, N))
   U82_GGA(M, N, =_out_ag(X, N)) -> U83_GGA(M, N, X, =_out_ag(zero, zero))
   U85_GGA(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, =_out_ag(U, U))
   U88_GGA(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, U, =_out_ag(U, U))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(X, Y, isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(M, N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, N, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, N, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U99_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U101_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U103_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U77_gga(M, N, =_out_ag(X, M)) -> U78_gga(M, N, X, =_in_ag(zero))
   U82_gga(M, N, =_out_ag(X, N)) -> U83_gga(M, N, X, =_in_ag(zero))
   U88_gga(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, U, =_in_ag(U))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(X, Y, isMinus_in_gga(X, Y))
   U78_gga(M, N, X, =_out_ag(X1, zero)) -> U79_gga(M, N, =_in_gg(X, X1))
   U83_gga(M, N, X, =_out_ag(X1, zero)) -> U84_gga(M, N, =_in_gg(X, X1))
   U89_gga(M, N, U, =_out_ag(N1, U)) -> U90_gga(M, N, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U100_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U102_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U104_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U79_gga(M, N, =_out_gg(X, X1)) -> U80_gga(M, N, isPlus_in_gga(N, succ(zero)))
   U84_gga(M, N, =_out_gg(X, X1)) -> U85_gga(M, N, isMinus_in_gga(M, succ(zero)))
   U90_gga(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U80_gga(M, N, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, =_in_ag(U))
   U85_gga(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, =_in_ag(U))
   U91_gga(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(X, Y, isPlus_in_gga(X, Y))
   U81_gga(M, N, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   U86_gga(M, N, =_out_ag(M1, U)) -> U87_gga(M, N, ackermann_in_gga(M1, succ(zero)))
   U92_gga(M, N, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, ackermann_in_gga(M1, Ret1))
   U95_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U97_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U87_gga(M, N, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U93_gga(M, N, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, =_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(X, Y, isPlus_in_gga(X, Y))
   U94_gga(M, N, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U96_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U98_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0, x1)
   U101_gga(x0, x1, x2)
   U103_gga(x0, x1, x2)
   U77_gga(x0, x1, x2)
   U82_gga(x0, x1, x2)
   U88_gga(x0, x1, x2)
   U99_ggg(x0, x1, x2)
   U101_ggg(x0, x1, x2, x3)
   U103_ggg(x0, x1, x2, x3)
   U78_gga(x0, x1, x2, x3)
   U83_gga(x0, x1, x2, x3)
   U89_gga(x0, x1, x2, x3)
   U100_gga(x0, x1)
   U102_gga(x0, x1, x2)
   U104_gga(x0, x1, x2)
   U79_gga(x0, x1, x2)
   U84_gga(x0, x1, x2)
   U90_gga(x0, x1, x2, x3)
   U100_ggg(x0, x1, x2)
   U102_ggg(x0, x1, x2, x3)
   U104_ggg(x0, x1, x2, x3)
   U80_gga(x0, x1, x2)
   U85_gga(x0, x1, x2)
   U91_gga(x0, x1, x2, x3, x4)
   isPlus_in_gga(x0, x1)
   U81_gga(x0, x1, x2)
   U86_gga(x0, x1, x2)
   U92_gga(x0, x1, x2, x3)
   U95_gga(x0, x1, x2)
   U97_gga(x0, x1, x2)
   U87_gga(x0, x1, x2)
   U93_gga(x0, x1, x2)
   U94_gga(x0, x1, x2)
   U96_gga(x0, x1, x2)
   U98_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(70) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U91_GGA(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret1, =_in_ag(U)) at position [3] we obtained the following new rules [LPAR04]:

   (U91_GGA(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret1, =_out_ag(U, U)),U91_GGA(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret1, =_out_ag(U, U)))


----------------------------------------

(71)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U83_GGA(M, N, X, =_out_ag(X1, zero)) -> U84_GGA(M, N, =_in_gg(X, X1))
   U84_GGA(M, N, =_out_gg(X, X1)) -> U85_GGA(M, N, isMinus_in_gga(M, succ(zero)))
   U86_GGA(M, N, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, succ(zero))
   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, N, isMinus_in_gga(N, succ(zero)))
   U89_GGA(M, N, U, =_out_ag(N1, U)) -> U90_GGA(M, N, U, ackermann_in_gga(M, N1))
   U90_GGA(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_GGA(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U92_GGA(M, N, Ret1, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, Ret1)
   U89_GGA(M, N, U, =_out_ag(N1, U)) -> ACKERMANN_IN_GGA(M, N1)
   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, N, =_out_ag(N, N))
   U82_GGA(M, N, =_out_ag(X, N)) -> U83_GGA(M, N, X, =_out_ag(zero, zero))
   U85_GGA(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, =_out_ag(U, U))
   U88_GGA(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, U, =_out_ag(U, U))
   U91_GGA(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret1, =_out_ag(U, U))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(X, Y, isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(M, N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, N, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, N, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U99_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U101_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U103_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U77_gga(M, N, =_out_ag(X, M)) -> U78_gga(M, N, X, =_in_ag(zero))
   U82_gga(M, N, =_out_ag(X, N)) -> U83_gga(M, N, X, =_in_ag(zero))
   U88_gga(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, U, =_in_ag(U))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(X, Y, isMinus_in_gga(X, Y))
   U78_gga(M, N, X, =_out_ag(X1, zero)) -> U79_gga(M, N, =_in_gg(X, X1))
   U83_gga(M, N, X, =_out_ag(X1, zero)) -> U84_gga(M, N, =_in_gg(X, X1))
   U89_gga(M, N, U, =_out_ag(N1, U)) -> U90_gga(M, N, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U100_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U102_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U104_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U79_gga(M, N, =_out_gg(X, X1)) -> U80_gga(M, N, isPlus_in_gga(N, succ(zero)))
   U84_gga(M, N, =_out_gg(X, X1)) -> U85_gga(M, N, isMinus_in_gga(M, succ(zero)))
   U90_gga(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U80_gga(M, N, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, =_in_ag(U))
   U85_gga(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, =_in_ag(U))
   U91_gga(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(X, Y, isPlus_in_gga(X, Y))
   U81_gga(M, N, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   U86_gga(M, N, =_out_ag(M1, U)) -> U87_gga(M, N, ackermann_in_gga(M1, succ(zero)))
   U92_gga(M, N, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, ackermann_in_gga(M1, Ret1))
   U95_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U97_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U87_gga(M, N, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U93_gga(M, N, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, =_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(X, Y, isPlus_in_gga(X, Y))
   U94_gga(M, N, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U96_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U98_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0, x1)
   U101_gga(x0, x1, x2)
   U103_gga(x0, x1, x2)
   U77_gga(x0, x1, x2)
   U82_gga(x0, x1, x2)
   U88_gga(x0, x1, x2)
   U99_ggg(x0, x1, x2)
   U101_ggg(x0, x1, x2, x3)
   U103_ggg(x0, x1, x2, x3)
   U78_gga(x0, x1, x2, x3)
   U83_gga(x0, x1, x2, x3)
   U89_gga(x0, x1, x2, x3)
   U100_gga(x0, x1)
   U102_gga(x0, x1, x2)
   U104_gga(x0, x1, x2)
   U79_gga(x0, x1, x2)
   U84_gga(x0, x1, x2)
   U90_gga(x0, x1, x2, x3)
   U100_ggg(x0, x1, x2)
   U102_ggg(x0, x1, x2, x3)
   U104_ggg(x0, x1, x2, x3)
   U80_gga(x0, x1, x2)
   U85_gga(x0, x1, x2)
   U91_gga(x0, x1, x2, x3, x4)
   isPlus_in_gga(x0, x1)
   U81_gga(x0, x1, x2)
   U86_gga(x0, x1, x2)
   U92_gga(x0, x1, x2, x3)
   U95_gga(x0, x1, x2)
   U97_gga(x0, x1, x2)
   U87_gga(x0, x1, x2)
   U93_gga(x0, x1, x2)
   U94_gga(x0, x1, x2)
   U96_gga(x0, x1, x2)
   U98_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(72) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U83_GGA(M, N, X, =_out_ag(X1, zero)) -> U84_GGA(M, N, =_in_gg(X, X1)) at position [2] we obtained the following new rules [LPAR04]:

   (U83_GGA(y0, y1, x0, =_out_ag(x0, zero)) -> U84_GGA(y0, y1, =_out_gg(x0, x0)),U83_GGA(y0, y1, x0, =_out_ag(x0, zero)) -> U84_GGA(y0, y1, =_out_gg(x0, x0)))


----------------------------------------

(73)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U84_GGA(M, N, =_out_gg(X, X1)) -> U85_GGA(M, N, isMinus_in_gga(M, succ(zero)))
   U86_GGA(M, N, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, succ(zero))
   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, N, isMinus_in_gga(N, succ(zero)))
   U89_GGA(M, N, U, =_out_ag(N1, U)) -> U90_GGA(M, N, U, ackermann_in_gga(M, N1))
   U90_GGA(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_GGA(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U92_GGA(M, N, Ret1, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, Ret1)
   U89_GGA(M, N, U, =_out_ag(N1, U)) -> ACKERMANN_IN_GGA(M, N1)
   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, N, =_out_ag(N, N))
   U82_GGA(M, N, =_out_ag(X, N)) -> U83_GGA(M, N, X, =_out_ag(zero, zero))
   U85_GGA(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, =_out_ag(U, U))
   U88_GGA(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, U, =_out_ag(U, U))
   U91_GGA(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret1, =_out_ag(U, U))
   U83_GGA(y0, y1, x0, =_out_ag(x0, zero)) -> U84_GGA(y0, y1, =_out_gg(x0, x0))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(X, Y, isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(M, N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, N, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, N, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U99_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U101_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U103_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U77_gga(M, N, =_out_ag(X, M)) -> U78_gga(M, N, X, =_in_ag(zero))
   U82_gga(M, N, =_out_ag(X, N)) -> U83_gga(M, N, X, =_in_ag(zero))
   U88_gga(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, U, =_in_ag(U))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(X, Y, isMinus_in_gga(X, Y))
   U78_gga(M, N, X, =_out_ag(X1, zero)) -> U79_gga(M, N, =_in_gg(X, X1))
   U83_gga(M, N, X, =_out_ag(X1, zero)) -> U84_gga(M, N, =_in_gg(X, X1))
   U89_gga(M, N, U, =_out_ag(N1, U)) -> U90_gga(M, N, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U100_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U102_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U104_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U79_gga(M, N, =_out_gg(X, X1)) -> U80_gga(M, N, isPlus_in_gga(N, succ(zero)))
   U84_gga(M, N, =_out_gg(X, X1)) -> U85_gga(M, N, isMinus_in_gga(M, succ(zero)))
   U90_gga(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U80_gga(M, N, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, =_in_ag(U))
   U85_gga(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, =_in_ag(U))
   U91_gga(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(X, Y, isPlus_in_gga(X, Y))
   U81_gga(M, N, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   U86_gga(M, N, =_out_ag(M1, U)) -> U87_gga(M, N, ackermann_in_gga(M1, succ(zero)))
   U92_gga(M, N, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, ackermann_in_gga(M1, Ret1))
   U95_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U97_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U87_gga(M, N, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U93_gga(M, N, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, =_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(X, Y, isPlus_in_gga(X, Y))
   U94_gga(M, N, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U96_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U98_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0, x1)
   U101_gga(x0, x1, x2)
   U103_gga(x0, x1, x2)
   U77_gga(x0, x1, x2)
   U82_gga(x0, x1, x2)
   U88_gga(x0, x1, x2)
   U99_ggg(x0, x1, x2)
   U101_ggg(x0, x1, x2, x3)
   U103_ggg(x0, x1, x2, x3)
   U78_gga(x0, x1, x2, x3)
   U83_gga(x0, x1, x2, x3)
   U89_gga(x0, x1, x2, x3)
   U100_gga(x0, x1)
   U102_gga(x0, x1, x2)
   U104_gga(x0, x1, x2)
   U79_gga(x0, x1, x2)
   U84_gga(x0, x1, x2)
   U90_gga(x0, x1, x2, x3)
   U100_ggg(x0, x1, x2)
   U102_ggg(x0, x1, x2, x3)
   U104_ggg(x0, x1, x2, x3)
   U80_gga(x0, x1, x2)
   U85_gga(x0, x1, x2)
   U91_gga(x0, x1, x2, x3, x4)
   isPlus_in_gga(x0, x1)
   U81_gga(x0, x1, x2)
   U86_gga(x0, x1, x2)
   U92_gga(x0, x1, x2, x3)
   U95_gga(x0, x1, x2)
   U97_gga(x0, x1, x2)
   U87_gga(x0, x1, x2)
   U93_gga(x0, x1, x2)
   U94_gga(x0, x1, x2)
   U96_gga(x0, x1, x2)
   U98_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(74) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U84_GGA(M, N, =_out_gg(X, X1)) -> U85_GGA(M, N, isMinus_in_gga(M, succ(zero))) we obtained the following new rules [LPAR04]:

   (U84_GGA(z0, z1, =_out_gg(z2, z2)) -> U85_GGA(z0, z1, isMinus_in_gga(z0, succ(zero))),U84_GGA(z0, z1, =_out_gg(z2, z2)) -> U85_GGA(z0, z1, isMinus_in_gga(z0, succ(zero))))


----------------------------------------

(75)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U86_GGA(M, N, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, succ(zero))
   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, N, isMinus_in_gga(N, succ(zero)))
   U89_GGA(M, N, U, =_out_ag(N1, U)) -> U90_GGA(M, N, U, ackermann_in_gga(M, N1))
   U90_GGA(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_GGA(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U92_GGA(M, N, Ret1, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, Ret1)
   U89_GGA(M, N, U, =_out_ag(N1, U)) -> ACKERMANN_IN_GGA(M, N1)
   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, N, =_out_ag(N, N))
   U82_GGA(M, N, =_out_ag(X, N)) -> U83_GGA(M, N, X, =_out_ag(zero, zero))
   U85_GGA(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, =_out_ag(U, U))
   U88_GGA(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, U, =_out_ag(U, U))
   U91_GGA(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret1, =_out_ag(U, U))
   U83_GGA(y0, y1, x0, =_out_ag(x0, zero)) -> U84_GGA(y0, y1, =_out_gg(x0, x0))
   U84_GGA(z0, z1, =_out_gg(z2, z2)) -> U85_GGA(z0, z1, isMinus_in_gga(z0, succ(zero)))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(X, Y, isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(M, N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, N, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, N, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U99_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U101_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U103_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U77_gga(M, N, =_out_ag(X, M)) -> U78_gga(M, N, X, =_in_ag(zero))
   U82_gga(M, N, =_out_ag(X, N)) -> U83_gga(M, N, X, =_in_ag(zero))
   U88_gga(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, U, =_in_ag(U))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(X, Y, isMinus_in_gga(X, Y))
   U78_gga(M, N, X, =_out_ag(X1, zero)) -> U79_gga(M, N, =_in_gg(X, X1))
   U83_gga(M, N, X, =_out_ag(X1, zero)) -> U84_gga(M, N, =_in_gg(X, X1))
   U89_gga(M, N, U, =_out_ag(N1, U)) -> U90_gga(M, N, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U100_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U102_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U104_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U79_gga(M, N, =_out_gg(X, X1)) -> U80_gga(M, N, isPlus_in_gga(N, succ(zero)))
   U84_gga(M, N, =_out_gg(X, X1)) -> U85_gga(M, N, isMinus_in_gga(M, succ(zero)))
   U90_gga(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U80_gga(M, N, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, =_in_ag(U))
   U85_gga(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, =_in_ag(U))
   U91_gga(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(X, Y, isPlus_in_gga(X, Y))
   U81_gga(M, N, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   U86_gga(M, N, =_out_ag(M1, U)) -> U87_gga(M, N, ackermann_in_gga(M1, succ(zero)))
   U92_gga(M, N, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, ackermann_in_gga(M1, Ret1))
   U95_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U97_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U87_gga(M, N, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U93_gga(M, N, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, =_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(X, Y, isPlus_in_gga(X, Y))
   U94_gga(M, N, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U96_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U98_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0, x1)
   U101_gga(x0, x1, x2)
   U103_gga(x0, x1, x2)
   U77_gga(x0, x1, x2)
   U82_gga(x0, x1, x2)
   U88_gga(x0, x1, x2)
   U99_ggg(x0, x1, x2)
   U101_ggg(x0, x1, x2, x3)
   U103_ggg(x0, x1, x2, x3)
   U78_gga(x0, x1, x2, x3)
   U83_gga(x0, x1, x2, x3)
   U89_gga(x0, x1, x2, x3)
   U100_gga(x0, x1)
   U102_gga(x0, x1, x2)
   U104_gga(x0, x1, x2)
   U79_gga(x0, x1, x2)
   U84_gga(x0, x1, x2)
   U90_gga(x0, x1, x2, x3)
   U100_ggg(x0, x1, x2)
   U102_ggg(x0, x1, x2, x3)
   U104_ggg(x0, x1, x2, x3)
   U80_gga(x0, x1, x2)
   U85_gga(x0, x1, x2)
   U91_gga(x0, x1, x2, x3, x4)
   isPlus_in_gga(x0, x1)
   U81_gga(x0, x1, x2)
   U86_gga(x0, x1, x2)
   U92_gga(x0, x1, x2, x3)
   U95_gga(x0, x1, x2)
   U97_gga(x0, x1, x2)
   U87_gga(x0, x1, x2)
   U93_gga(x0, x1, x2)
   U94_gga(x0, x1, x2)
   U96_gga(x0, x1, x2)
   U98_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(76) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U86_GGA(M, N, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, succ(zero)) we obtained the following new rules [LPAR04]:

   (U86_GGA(z0, z1, =_out_ag(z2, z2)) -> ACKERMANN_IN_GGA(z2, succ(zero)),U86_GGA(z0, z1, =_out_ag(z2, z2)) -> ACKERMANN_IN_GGA(z2, succ(zero)))


----------------------------------------

(77)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, N, isMinus_in_gga(N, succ(zero)))
   U89_GGA(M, N, U, =_out_ag(N1, U)) -> U90_GGA(M, N, U, ackermann_in_gga(M, N1))
   U90_GGA(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_GGA(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U92_GGA(M, N, Ret1, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, Ret1)
   U89_GGA(M, N, U, =_out_ag(N1, U)) -> ACKERMANN_IN_GGA(M, N1)
   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, N, =_out_ag(N, N))
   U82_GGA(M, N, =_out_ag(X, N)) -> U83_GGA(M, N, X, =_out_ag(zero, zero))
   U85_GGA(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, =_out_ag(U, U))
   U88_GGA(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, U, =_out_ag(U, U))
   U91_GGA(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret1, =_out_ag(U, U))
   U83_GGA(y0, y1, x0, =_out_ag(x0, zero)) -> U84_GGA(y0, y1, =_out_gg(x0, x0))
   U84_GGA(z0, z1, =_out_gg(z2, z2)) -> U85_GGA(z0, z1, isMinus_in_gga(z0, succ(zero)))
   U86_GGA(z0, z1, =_out_ag(z2, z2)) -> ACKERMANN_IN_GGA(z2, succ(zero))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(X, Y, isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(M, N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, N, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, N, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U99_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U101_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U103_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U77_gga(M, N, =_out_ag(X, M)) -> U78_gga(M, N, X, =_in_ag(zero))
   U82_gga(M, N, =_out_ag(X, N)) -> U83_gga(M, N, X, =_in_ag(zero))
   U88_gga(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, U, =_in_ag(U))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(X, Y, isMinus_in_gga(X, Y))
   U78_gga(M, N, X, =_out_ag(X1, zero)) -> U79_gga(M, N, =_in_gg(X, X1))
   U83_gga(M, N, X, =_out_ag(X1, zero)) -> U84_gga(M, N, =_in_gg(X, X1))
   U89_gga(M, N, U, =_out_ag(N1, U)) -> U90_gga(M, N, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U100_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U102_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U104_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U79_gga(M, N, =_out_gg(X, X1)) -> U80_gga(M, N, isPlus_in_gga(N, succ(zero)))
   U84_gga(M, N, =_out_gg(X, X1)) -> U85_gga(M, N, isMinus_in_gga(M, succ(zero)))
   U90_gga(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U80_gga(M, N, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, =_in_ag(U))
   U85_gga(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, =_in_ag(U))
   U91_gga(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(X, Y, isPlus_in_gga(X, Y))
   U81_gga(M, N, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   U86_gga(M, N, =_out_ag(M1, U)) -> U87_gga(M, N, ackermann_in_gga(M1, succ(zero)))
   U92_gga(M, N, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, ackermann_in_gga(M1, Ret1))
   U95_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U97_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U87_gga(M, N, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U93_gga(M, N, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, =_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(X, Y, isPlus_in_gga(X, Y))
   U94_gga(M, N, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U96_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U98_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0, x1)
   U101_gga(x0, x1, x2)
   U103_gga(x0, x1, x2)
   U77_gga(x0, x1, x2)
   U82_gga(x0, x1, x2)
   U88_gga(x0, x1, x2)
   U99_ggg(x0, x1, x2)
   U101_ggg(x0, x1, x2, x3)
   U103_ggg(x0, x1, x2, x3)
   U78_gga(x0, x1, x2, x3)
   U83_gga(x0, x1, x2, x3)
   U89_gga(x0, x1, x2, x3)
   U100_gga(x0, x1)
   U102_gga(x0, x1, x2)
   U104_gga(x0, x1, x2)
   U79_gga(x0, x1, x2)
   U84_gga(x0, x1, x2)
   U90_gga(x0, x1, x2, x3)
   U100_ggg(x0, x1, x2)
   U102_ggg(x0, x1, x2, x3)
   U104_ggg(x0, x1, x2, x3)
   U80_gga(x0, x1, x2)
   U85_gga(x0, x1, x2)
   U91_gga(x0, x1, x2, x3, x4)
   isPlus_in_gga(x0, x1)
   U81_gga(x0, x1, x2)
   U86_gga(x0, x1, x2)
   U92_gga(x0, x1, x2, x3)
   U95_gga(x0, x1, x2)
   U97_gga(x0, x1, x2)
   U87_gga(x0, x1, x2)
   U93_gga(x0, x1, x2)
   U94_gga(x0, x1, x2)
   U96_gga(x0, x1, x2)
   U98_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(78) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U89_GGA(M, N, U, =_out_ag(N1, U)) -> U90_GGA(M, N, U, ackermann_in_gga(M, N1)) we obtained the following new rules [LPAR04]:

   (U89_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> U90_GGA(z0, z1, z2, ackermann_in_gga(z0, z2)),U89_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> U90_GGA(z0, z1, z2, ackermann_in_gga(z0, z2)))


----------------------------------------

(79)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, N, isMinus_in_gga(N, succ(zero)))
   U90_GGA(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_GGA(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U92_GGA(M, N, Ret1, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, Ret1)
   U89_GGA(M, N, U, =_out_ag(N1, U)) -> ACKERMANN_IN_GGA(M, N1)
   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, N, =_out_ag(N, N))
   U82_GGA(M, N, =_out_ag(X, N)) -> U83_GGA(M, N, X, =_out_ag(zero, zero))
   U85_GGA(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, =_out_ag(U, U))
   U88_GGA(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, U, =_out_ag(U, U))
   U91_GGA(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret1, =_out_ag(U, U))
   U83_GGA(y0, y1, x0, =_out_ag(x0, zero)) -> U84_GGA(y0, y1, =_out_gg(x0, x0))
   U84_GGA(z0, z1, =_out_gg(z2, z2)) -> U85_GGA(z0, z1, isMinus_in_gga(z0, succ(zero)))
   U86_GGA(z0, z1, =_out_ag(z2, z2)) -> ACKERMANN_IN_GGA(z2, succ(zero))
   U89_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> U90_GGA(z0, z1, z2, ackermann_in_gga(z0, z2))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(X, Y, isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(M, N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, N, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, N, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U99_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U101_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U103_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U77_gga(M, N, =_out_ag(X, M)) -> U78_gga(M, N, X, =_in_ag(zero))
   U82_gga(M, N, =_out_ag(X, N)) -> U83_gga(M, N, X, =_in_ag(zero))
   U88_gga(M, N, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, U, =_in_ag(U))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(X, Y, isMinus_in_gga(X, Y))
   U78_gga(M, N, X, =_out_ag(X1, zero)) -> U79_gga(M, N, =_in_gg(X, X1))
   U83_gga(M, N, X, =_out_ag(X1, zero)) -> U84_gga(M, N, =_in_gg(X, X1))
   U89_gga(M, N, U, =_out_ag(N1, U)) -> U90_gga(M, N, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U100_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U102_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U104_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U79_gga(M, N, =_out_gg(X, X1)) -> U80_gga(M, N, isPlus_in_gga(N, succ(zero)))
   U84_gga(M, N, =_out_gg(X, X1)) -> U85_gga(M, N, isMinus_in_gga(M, succ(zero)))
   U90_gga(M, N, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U80_gga(M, N, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, =_in_ag(U))
   U85_gga(M, N, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, =_in_ag(U))
   U91_gga(M, N, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(X, Y, isPlus_in_gga(X, Y))
   U81_gga(M, N, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   U86_gga(M, N, =_out_ag(M1, U)) -> U87_gga(M, N, ackermann_in_gga(M1, succ(zero)))
   U92_gga(M, N, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, ackermann_in_gga(M1, Ret1))
   U95_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U97_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U87_gga(M, N, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U93_gga(M, N, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, =_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(X, Y, isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(X, Y, isPlus_in_gga(X, Y))
   U94_gga(M, N, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U96_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U98_gga(X, Y, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0, x1)
   U101_gga(x0, x1, x2)
   U103_gga(x0, x1, x2)
   U77_gga(x0, x1, x2)
   U82_gga(x0, x1, x2)
   U88_gga(x0, x1, x2)
   U99_ggg(x0, x1, x2)
   U101_ggg(x0, x1, x2, x3)
   U103_ggg(x0, x1, x2, x3)
   U78_gga(x0, x1, x2, x3)
   U83_gga(x0, x1, x2, x3)
   U89_gga(x0, x1, x2, x3)
   U100_gga(x0, x1)
   U102_gga(x0, x1, x2)
   U104_gga(x0, x1, x2)
   U79_gga(x0, x1, x2)
   U84_gga(x0, x1, x2)
   U90_gga(x0, x1, x2, x3)
   U100_ggg(x0, x1, x2)
   U102_ggg(x0, x1, x2, x3)
   U104_ggg(x0, x1, x2, x3)
   U80_gga(x0, x1, x2)
   U85_gga(x0, x1, x2)
   U91_gga(x0, x1, x2, x3, x4)
   isPlus_in_gga(x0, x1)
   U81_gga(x0, x1, x2)
   U86_gga(x0, x1, x2)
   U92_gga(x0, x1, x2, x3)
   U95_gga(x0, x1, x2)
   U97_gga(x0, x1, x2)
   U87_gga(x0, x1, x2)
   U93_gga(x0, x1, x2)
   U94_gga(x0, x1, x2)
   U96_gga(x0, x1, x2)
   U98_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(80)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x1, x2, x3)

U129_gg(x1, x2, x3)  =  U129_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x1, x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x1, x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x1, x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x1, x2, x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x1, x2, x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x1, x2, x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x1, x2, x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x1, x2, x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x1, x2, x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x1, x2, x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x1, x2, x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x2, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x2, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x2, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U99_gga(x1, x2, x3)  =  U99_gga(x1, x3)

U100_gga(x1, x2, x3)  =  U100_gga(x1, x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x1, x2, x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x1, x2, x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x1, x2, x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x1, x2, x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x1, x2, x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x1, x2, x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x2, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x2, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x2, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x1, x2, x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg(x1, x2, x3)

U99_ggg(x1, x2, x3)  =  U99_ggg(x1, x2, x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x1, x2, x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x1, x2, x3, x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x1, x2, x3, x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x1, x2, x3, x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x1, x2, x3, x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x1, x2, x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x1, x2, x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x1, x2, x4)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U130_gg(x1, x2, x3)  =  U130_gg(x1, x2, x3)

U131_gg(x1, x2, x3)  =  U131_gg(x1, x2, x3)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x1, x2, x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x1, x2, x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x1, x2, x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x1, x2, x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x1, x2, x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x1, x2, x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x1, x2, x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x1, x2, x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x1, x2, x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x1, x2, x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x1, x2, x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x1, x2, x3)

ISGREATER_IN_GG(x1, x2)  =  ISGREATER_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(81) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(82)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(83) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

main_in_2: (b,b)

isGreater_in_2: (b,b)

ackermann_in_3: (b,b,f)

isPlus_in_3: (b,b,f)

isMinus_in_3: (b,b,f) (b,b,b)

isLess_in_2: (b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x3)

U129_gg(x1, x2, x3)  =  U129_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U99_gga(x1, x2, x3)  =  U99_gga(x3)

U100_gga(x1, x2, x3)  =  U100_gga(x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U99_ggg(x1, x2, x3)  =  U99_ggg(x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x4)

main_out_gg(x1, x2)  =  main_out_gg

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U130_gg(x1, x2, x3)  =  U130_gg(x3)

U131_gg(x1, x2, x3)  =  U131_gg(x3)

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x3)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(84)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x3)

U129_gg(x1, x2, x3)  =  U129_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U99_gga(x1, x2, x3)  =  U99_gga(x3)

U100_gga(x1, x2, x3)  =  U100_gga(x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U99_ggg(x1, x2, x3)  =  U99_ggg(x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x4)

main_out_gg(x1, x2)  =  main_out_gg

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U130_gg(x1, x2, x3)  =  U130_gg(x3)

U131_gg(x1, x2, x3)  =  U131_gg(x3)

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x3)



----------------------------------------

(85) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GG(M, N) -> U1_GG(M, N, =_in_ag(X, M))
   MAIN_IN_GG(M, N) -> =_IN_AG(X, M)
   U1_GG(M, N, =_out_ag(X, M)) -> U2_GG(M, N, X, =_in_ag(X2, zero))
   U1_GG(M, N, =_out_ag(X, M)) -> =_IN_AG(X2, zero)
   U2_GG(M, N, X, =_out_ag(X2, zero)) -> U3_GG(M, N, isGreater_in_gg(X, X2))
   U2_GG(M, N, X, =_out_ag(X2, zero)) -> ISGREATER_IN_GG(X, X2)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> U128_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(pred(X), pred(Y)) -> U129_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   U3_GG(M, N, isGreater_out_gg(X, X2)) -> U4_GG(M, N, =_in_ag(X5, M))
   U3_GG(M, N, isGreater_out_gg(X, X2)) -> =_IN_AG(X5, M)
   U4_GG(M, N, =_out_ag(X5, M)) -> U5_GG(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U4_GG(M, N, =_out_ag(X5, M)) -> =_IN_AG(X6, succ(succ(succ(zero))))
   U5_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_GG(M, N, =_in_gg(X5, X6))
   U5_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> =_IN_GG(X5, X6)
   U6_GG(M, N, =_out_gg(X5, X6)) -> U7_GG(M, N, =_in_ag(X3, N))
   U6_GG(M, N, =_out_gg(X5, X6)) -> =_IN_AG(X3, N)
   U7_GG(M, N, =_out_ag(X3, N)) -> U8_GG(M, N, X3, =_in_ag(X4, zero))
   U7_GG(M, N, =_out_ag(X3, N)) -> =_IN_AG(X4, zero)
   U8_GG(M, N, X3, =_out_ag(X4, zero)) -> U9_GG(M, N, isGreater_in_gg(X3, X4))
   U8_GG(M, N, X3, =_out_ag(X4, zero)) -> ISGREATER_IN_GG(X3, X4)
   U9_GG(M, N, isGreater_out_gg(X3, X4)) -> U10_GG(M, N, =_in_ag(X7, N))
   U9_GG(M, N, isGreater_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U10_GG(M, N, =_out_ag(X7, N)) -> U11_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U10_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U11_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_GG(M, N, =_in_gg(X7, X8))
   U11_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U12_GG(M, N, =_out_gg(X7, X8)) -> U13_GG(M, N, ackermann_in_gga(M, N, X1))
   U12_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   ACKERMANN_IN_GGA(M, N, Ret) -> U77_GGA(M, N, Ret, =_in_ag(X, M))
   ACKERMANN_IN_GGA(M, N, Ret) -> =_IN_AG(X, M)
   U77_GGA(M, N, Ret, =_out_ag(X, M)) -> U78_GGA(M, N, Ret, X, =_in_ag(X1, zero))
   U77_GGA(M, N, Ret, =_out_ag(X, M)) -> =_IN_AG(X1, zero)
   U78_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_GGA(M, N, Ret, =_in_gg(X, X1))
   U78_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> =_IN_GG(X, X1)
   U79_GGA(M, N, Ret, =_out_gg(X, X1)) -> U80_GGA(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   U79_GGA(M, N, Ret, =_out_gg(X, X1)) -> ISPLUS_IN_GGA(N, succ(zero), U)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> U95_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> U96_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> U97_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> U98_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   U80_GGA(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_GGA(M, N, Ret, =_in_ag(Ret, U))
   U80_GGA(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> =_IN_AG(Ret, U)
   ACKERMANN_IN_GGA(M, N, Ret) -> U82_GGA(M, N, Ret, =_in_ag(X, N))
   ACKERMANN_IN_GGA(M, N, Ret) -> =_IN_AG(X, N)
   U82_GGA(M, N, Ret, =_out_ag(X, N)) -> U83_GGA(M, N, Ret, X, =_in_ag(X1, zero))
   U82_GGA(M, N, Ret, =_out_ag(X, N)) -> =_IN_AG(X1, zero)
   U83_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_GGA(M, N, Ret, =_in_gg(X, X1))
   U83_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> =_IN_GG(X, X1)
   U84_GGA(M, N, Ret, =_out_gg(X, X1)) -> U85_GGA(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   U84_GGA(M, N, Ret, =_out_gg(X, X1)) -> ISMINUS_IN_GGA(M, succ(zero), U)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> U99_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> U100_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> U101_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> U102_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> U103_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> U104_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   U85_GGA(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, Ret, =_in_ag(M1, U))
   U85_GGA(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> =_IN_AG(M1, U)
   U86_GGA(M, N, Ret, =_out_ag(M1, U)) -> U87_GGA(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   U86_GGA(M, N, Ret, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, succ(zero), Ret)
   ACKERMANN_IN_GGA(M, N, Ret) -> U88_GGA(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   ACKERMANN_IN_GGA(M, N, Ret) -> ISMINUS_IN_GGA(N, succ(zero), U)
   U88_GGA(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, Ret, U, =_in_ag(N1, U))
   U88_GGA(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> =_IN_AG(N1, U)
   U89_GGA(M, N, Ret, U, =_out_ag(N1, U)) -> U90_GGA(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U89_GGA(M, N, Ret, U, =_out_ag(N1, U)) -> ACKERMANN_IN_GGA(M, N1, Ret1)
   U90_GGA(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_GGA(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U90_GGA(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> ISMINUS_IN_GGG(M, succ(zero), U)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> U99_GGG(Y, Z, isMinus_in_ggg(zero, Y, Z))
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> U100_GGG(Y, Z, isMinus_in_ggg(zero, Y, Z))
   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> U101_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> U102_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> U103_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> U104_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   U91_GGA(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret, Ret1, =_in_ag(M1, U))
   U91_GGA(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> =_IN_AG(M1, U)
   U92_GGA(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_GGA(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U92_GGA(M, N, Ret, Ret1, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, Ret1, Ret2)
   U93_GGA(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_GGA(M, N, Ret, =_in_ag(Ret, Ret2))
   U93_GGA(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> =_IN_AG(Ret, Ret2)
   U11_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_GG(M, N, isLess_in_gg(X7, X8))
   U11_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   ISLESS_IN_GG(pred(X), pred(Y)) -> U130_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(succ(X), succ(Y)) -> U131_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   U14_GG(M, N, isLess_out_gg(X7, X8)) -> U15_GG(M, N, ackermann_in_gga(M, N, X1))
   U14_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U8_GG(M, N, X3, =_out_ag(X4, zero)) -> U16_GG(M, N, =_in_gg(X3, X4))
   U8_GG(M, N, X3, =_out_ag(X4, zero)) -> =_IN_GG(X3, X4)
   U16_GG(M, N, =_out_gg(X3, X4)) -> U17_GG(M, N, =_in_ag(X7, N))
   U16_GG(M, N, =_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U17_GG(M, N, =_out_ag(X7, N)) -> U18_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U17_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U18_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_GG(M, N, =_in_gg(X7, X8))
   U18_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U19_GG(M, N, =_out_gg(X7, X8)) -> U20_GG(M, N, ackermann_in_gga(M, N, X1))
   U19_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U18_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_GG(M, N, isLess_in_gg(X7, X8))
   U18_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U21_GG(M, N, isLess_out_gg(X7, X8)) -> U22_GG(M, N, ackermann_in_gga(M, N, X1))
   U21_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U5_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_GG(M, N, isLess_in_gg(X5, X6))
   U5_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> ISLESS_IN_GG(X5, X6)
   U23_GG(M, N, isLess_out_gg(X5, X6)) -> U24_GG(M, N, =_in_ag(X3, N))
   U23_GG(M, N, isLess_out_gg(X5, X6)) -> =_IN_AG(X3, N)
   U24_GG(M, N, =_out_ag(X3, N)) -> U25_GG(M, N, X3, =_in_ag(X4, zero))
   U24_GG(M, N, =_out_ag(X3, N)) -> =_IN_AG(X4, zero)
   U25_GG(M, N, X3, =_out_ag(X4, zero)) -> U26_GG(M, N, isGreater_in_gg(X3, X4))
   U25_GG(M, N, X3, =_out_ag(X4, zero)) -> ISGREATER_IN_GG(X3, X4)
   U26_GG(M, N, isGreater_out_gg(X3, X4)) -> U27_GG(M, N, =_in_ag(X7, N))
   U26_GG(M, N, isGreater_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U27_GG(M, N, =_out_ag(X7, N)) -> U28_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U27_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U28_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_GG(M, N, =_in_gg(X7, X8))
   U28_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U29_GG(M, N, =_out_gg(X7, X8)) -> U30_GG(M, N, ackermann_in_gga(M, N, X1))
   U29_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U28_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_GG(M, N, isLess_in_gg(X7, X8))
   U28_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U31_GG(M, N, isLess_out_gg(X7, X8)) -> U32_GG(M, N, ackermann_in_gga(M, N, X1))
   U31_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U25_GG(M, N, X3, =_out_ag(X4, zero)) -> U33_GG(M, N, =_in_gg(X3, X4))
   U25_GG(M, N, X3, =_out_ag(X4, zero)) -> =_IN_GG(X3, X4)
   U33_GG(M, N, =_out_gg(X3, X4)) -> U34_GG(M, N, =_in_ag(X7, N))
   U33_GG(M, N, =_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U34_GG(M, N, =_out_ag(X7, N)) -> U35_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U34_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U35_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_GG(M, N, =_in_gg(X7, X8))
   U35_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U36_GG(M, N, =_out_gg(X7, X8)) -> U37_GG(M, N, ackermann_in_gga(M, N, X1))
   U36_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U35_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_GG(M, N, isLess_in_gg(X7, X8))
   U35_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U38_GG(M, N, isLess_out_gg(X7, X8)) -> U39_GG(M, N, ackermann_in_gga(M, N, X1))
   U38_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U2_GG(M, N, X, =_out_ag(X2, zero)) -> U40_GG(M, N, =_in_gg(X, X2))
   U2_GG(M, N, X, =_out_ag(X2, zero)) -> =_IN_GG(X, X2)
   U40_GG(M, N, =_out_gg(X, X2)) -> U41_GG(M, N, =_in_ag(X5, M))
   U40_GG(M, N, =_out_gg(X, X2)) -> =_IN_AG(X5, M)
   U41_GG(M, N, =_out_ag(X5, M)) -> U42_GG(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U41_GG(M, N, =_out_ag(X5, M)) -> =_IN_AG(X6, succ(succ(succ(zero))))
   U42_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_GG(M, N, =_in_gg(X5, X6))
   U42_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> =_IN_GG(X5, X6)
   U43_GG(M, N, =_out_gg(X5, X6)) -> U44_GG(M, N, =_in_ag(X3, N))
   U43_GG(M, N, =_out_gg(X5, X6)) -> =_IN_AG(X3, N)
   U44_GG(M, N, =_out_ag(X3, N)) -> U45_GG(M, N, X3, =_in_ag(X4, zero))
   U44_GG(M, N, =_out_ag(X3, N)) -> =_IN_AG(X4, zero)
   U45_GG(M, N, X3, =_out_ag(X4, zero)) -> U46_GG(M, N, isGreater_in_gg(X3, X4))
   U45_GG(M, N, X3, =_out_ag(X4, zero)) -> ISGREATER_IN_GG(X3, X4)
   U46_GG(M, N, isGreater_out_gg(X3, X4)) -> U47_GG(M, N, =_in_ag(X7, N))
   U46_GG(M, N, isGreater_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U47_GG(M, N, =_out_ag(X7, N)) -> U48_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U47_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U48_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_GG(M, N, =_in_gg(X7, X8))
   U48_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U49_GG(M, N, =_out_gg(X7, X8)) -> U50_GG(M, N, ackermann_in_gga(M, N, X1))
   U49_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U48_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_GG(M, N, isLess_in_gg(X7, X8))
   U48_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U51_GG(M, N, isLess_out_gg(X7, X8)) -> U52_GG(M, N, ackermann_in_gga(M, N, X1))
   U51_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U45_GG(M, N, X3, =_out_ag(X4, zero)) -> U53_GG(M, N, =_in_gg(X3, X4))
   U45_GG(M, N, X3, =_out_ag(X4, zero)) -> =_IN_GG(X3, X4)
   U53_GG(M, N, =_out_gg(X3, X4)) -> U54_GG(M, N, =_in_ag(X7, N))
   U53_GG(M, N, =_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U54_GG(M, N, =_out_ag(X7, N)) -> U55_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U54_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U55_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_GG(M, N, =_in_gg(X7, X8))
   U55_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U56_GG(M, N, =_out_gg(X7, X8)) -> U57_GG(M, N, ackermann_in_gga(M, N, X1))
   U56_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U55_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_GG(M, N, isLess_in_gg(X7, X8))
   U55_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U58_GG(M, N, isLess_out_gg(X7, X8)) -> U59_GG(M, N, ackermann_in_gga(M, N, X1))
   U58_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U42_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_GG(M, N, isLess_in_gg(X5, X6))
   U42_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> ISLESS_IN_GG(X5, X6)
   U60_GG(M, N, isLess_out_gg(X5, X6)) -> U61_GG(M, N, =_in_ag(X3, N))
   U60_GG(M, N, isLess_out_gg(X5, X6)) -> =_IN_AG(X3, N)
   U61_GG(M, N, =_out_ag(X3, N)) -> U62_GG(M, N, X3, =_in_ag(X4, zero))
   U61_GG(M, N, =_out_ag(X3, N)) -> =_IN_AG(X4, zero)
   U62_GG(M, N, X3, =_out_ag(X4, zero)) -> U63_GG(M, N, isGreater_in_gg(X3, X4))
   U62_GG(M, N, X3, =_out_ag(X4, zero)) -> ISGREATER_IN_GG(X3, X4)
   U63_GG(M, N, isGreater_out_gg(X3, X4)) -> U64_GG(M, N, =_in_ag(X7, N))
   U63_GG(M, N, isGreater_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U64_GG(M, N, =_out_ag(X7, N)) -> U65_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U64_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U65_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_GG(M, N, =_in_gg(X7, X8))
   U65_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U66_GG(M, N, =_out_gg(X7, X8)) -> U67_GG(M, N, ackermann_in_gga(M, N, X1))
   U66_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U65_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_GG(M, N, isLess_in_gg(X7, X8))
   U65_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U68_GG(M, N, isLess_out_gg(X7, X8)) -> U69_GG(M, N, ackermann_in_gga(M, N, X1))
   U68_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U62_GG(M, N, X3, =_out_ag(X4, zero)) -> U70_GG(M, N, =_in_gg(X3, X4))
   U62_GG(M, N, X3, =_out_ag(X4, zero)) -> =_IN_GG(X3, X4)
   U70_GG(M, N, =_out_gg(X3, X4)) -> U71_GG(M, N, =_in_ag(X7, N))
   U70_GG(M, N, =_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U71_GG(M, N, =_out_ag(X7, N)) -> U72_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U71_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U72_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_GG(M, N, =_in_gg(X7, X8))
   U72_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U73_GG(M, N, =_out_gg(X7, X8)) -> U74_GG(M, N, ackermann_in_gga(M, N, X1))
   U73_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U72_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_GG(M, N, isLess_in_gg(X7, X8))
   U72_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U75_GG(M, N, isLess_out_gg(X7, X8)) -> U76_GG(M, N, ackermann_in_gga(M, N, X1))
   U75_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x3)

U129_gg(x1, x2, x3)  =  U129_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U99_gga(x1, x2, x3)  =  U99_gga(x3)

U100_gga(x1, x2, x3)  =  U100_gga(x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U99_ggg(x1, x2, x3)  =  U99_ggg(x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x4)

main_out_gg(x1, x2)  =  main_out_gg

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U130_gg(x1, x2, x3)  =  U130_gg(x3)

U131_gg(x1, x2, x3)  =  U131_gg(x3)

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x3)

MAIN_IN_GG(x1, x2)  =  MAIN_IN_GG(x1, x2)

U1_GG(x1, x2, x3)  =  U1_GG(x1, x2, x3)

=_IN_AG(x1, x2)  =  =_IN_AG(x2)

U2_GG(x1, x2, x3, x4)  =  U2_GG(x1, x2, x3, x4)

U3_GG(x1, x2, x3)  =  U3_GG(x1, x2, x3)

ISGREATER_IN_GG(x1, x2)  =  ISGREATER_IN_GG(x1, x2)

U128_GG(x1, x2, x3)  =  U128_GG(x3)

U129_GG(x1, x2, x3)  =  U129_GG(x3)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)

U5_GG(x1, x2, x3, x4)  =  U5_GG(x1, x2, x3, x4)

U6_GG(x1, x2, x3)  =  U6_GG(x1, x2, x3)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U7_GG(x1, x2, x3)  =  U7_GG(x1, x2, x3)

U8_GG(x1, x2, x3, x4)  =  U8_GG(x1, x2, x3, x4)

U9_GG(x1, x2, x3)  =  U9_GG(x1, x2, x3)

U10_GG(x1, x2, x3)  =  U10_GG(x1, x2, x3)

U11_GG(x1, x2, x3, x4)  =  U11_GG(x1, x2, x3, x4)

U12_GG(x1, x2, x3)  =  U12_GG(x1, x2, x3)

U13_GG(x1, x2, x3)  =  U13_GG(x3)

ACKERMANN_IN_GGA(x1, x2, x3)  =  ACKERMANN_IN_GGA(x1, x2)

U77_GGA(x1, x2, x3, x4)  =  U77_GGA(x2, x4)

U78_GGA(x1, x2, x3, x4, x5)  =  U78_GGA(x2, x4, x5)

U79_GGA(x1, x2, x3, x4)  =  U79_GGA(x2, x4)

U80_GGA(x1, x2, x3, x4)  =  U80_GGA(x4)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)

U95_GGA(x1, x2, x3, x4)  =  U95_GGA(x4)

U96_GGA(x1, x2, x3, x4)  =  U96_GGA(x4)

U97_GGA(x1, x2, x3, x4)  =  U97_GGA(x4)

U98_GGA(x1, x2, x3, x4)  =  U98_GGA(x4)

U81_GGA(x1, x2, x3, x4)  =  U81_GGA(x4)

U82_GGA(x1, x2, x3, x4)  =  U82_GGA(x1, x4)

U83_GGA(x1, x2, x3, x4, x5)  =  U83_GGA(x1, x4, x5)

U84_GGA(x1, x2, x3, x4)  =  U84_GGA(x1, x4)

U85_GGA(x1, x2, x3, x4)  =  U85_GGA(x4)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)

U99_GGA(x1, x2, x3)  =  U99_GGA(x3)

U100_GGA(x1, x2, x3)  =  U100_GGA(x3)

U101_GGA(x1, x2, x3, x4)  =  U101_GGA(x4)

U102_GGA(x1, x2, x3, x4)  =  U102_GGA(x4)

U103_GGA(x1, x2, x3, x4)  =  U103_GGA(x4)

U104_GGA(x1, x2, x3, x4)  =  U104_GGA(x4)

U86_GGA(x1, x2, x3, x4)  =  U86_GGA(x4)

U87_GGA(x1, x2, x3, x4)  =  U87_GGA(x4)

U88_GGA(x1, x2, x3, x4)  =  U88_GGA(x1, x4)

U89_GGA(x1, x2, x3, x4, x5)  =  U89_GGA(x1, x4, x5)

U90_GGA(x1, x2, x3, x4, x5)  =  U90_GGA(x1, x4, x5)

U91_GGA(x1, x2, x3, x4, x5, x6)  =  U91_GGA(x4, x5, x6)

ISMINUS_IN_GGG(x1, x2, x3)  =  ISMINUS_IN_GGG(x1, x2, x3)

U99_GGG(x1, x2, x3)  =  U99_GGG(x3)

U100_GGG(x1, x2, x3)  =  U100_GGG(x3)

U101_GGG(x1, x2, x3, x4)  =  U101_GGG(x4)

U102_GGG(x1, x2, x3, x4)  =  U102_GGG(x4)

U103_GGG(x1, x2, x3, x4)  =  U103_GGG(x4)

U104_GGG(x1, x2, x3, x4)  =  U104_GGG(x4)

U92_GGA(x1, x2, x3, x4, x5)  =  U92_GGA(x4, x5)

U93_GGA(x1, x2, x3, x4)  =  U93_GGA(x4)

U94_GGA(x1, x2, x3, x4)  =  U94_GGA(x4)

U14_GG(x1, x2, x3)  =  U14_GG(x1, x2, x3)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)

U130_GG(x1, x2, x3)  =  U130_GG(x3)

U131_GG(x1, x2, x3)  =  U131_GG(x3)

U15_GG(x1, x2, x3)  =  U15_GG(x3)

U16_GG(x1, x2, x3)  =  U16_GG(x1, x2, x3)

U17_GG(x1, x2, x3)  =  U17_GG(x1, x2, x3)

U18_GG(x1, x2, x3, x4)  =  U18_GG(x1, x2, x3, x4)

U19_GG(x1, x2, x3)  =  U19_GG(x1, x2, x3)

U20_GG(x1, x2, x3)  =  U20_GG(x3)

U21_GG(x1, x2, x3)  =  U21_GG(x1, x2, x3)

U22_GG(x1, x2, x3)  =  U22_GG(x3)

U23_GG(x1, x2, x3)  =  U23_GG(x1, x2, x3)

U24_GG(x1, x2, x3)  =  U24_GG(x1, x2, x3)

U25_GG(x1, x2, x3, x4)  =  U25_GG(x1, x2, x3, x4)

U26_GG(x1, x2, x3)  =  U26_GG(x1, x2, x3)

U27_GG(x1, x2, x3)  =  U27_GG(x1, x2, x3)

U28_GG(x1, x2, x3, x4)  =  U28_GG(x1, x2, x3, x4)

U29_GG(x1, x2, x3)  =  U29_GG(x1, x2, x3)

U30_GG(x1, x2, x3)  =  U30_GG(x3)

U31_GG(x1, x2, x3)  =  U31_GG(x1, x2, x3)

U32_GG(x1, x2, x3)  =  U32_GG(x3)

U33_GG(x1, x2, x3)  =  U33_GG(x1, x2, x3)

U34_GG(x1, x2, x3)  =  U34_GG(x1, x2, x3)

U35_GG(x1, x2, x3, x4)  =  U35_GG(x1, x2, x3, x4)

U36_GG(x1, x2, x3)  =  U36_GG(x1, x2, x3)

U37_GG(x1, x2, x3)  =  U37_GG(x3)

U38_GG(x1, x2, x3)  =  U38_GG(x1, x2, x3)

U39_GG(x1, x2, x3)  =  U39_GG(x3)

U40_GG(x1, x2, x3)  =  U40_GG(x1, x2, x3)

U41_GG(x1, x2, x3)  =  U41_GG(x1, x2, x3)

U42_GG(x1, x2, x3, x4)  =  U42_GG(x1, x2, x3, x4)

U43_GG(x1, x2, x3)  =  U43_GG(x1, x2, x3)

U44_GG(x1, x2, x3)  =  U44_GG(x1, x2, x3)

U45_GG(x1, x2, x3, x4)  =  U45_GG(x1, x2, x3, x4)

U46_GG(x1, x2, x3)  =  U46_GG(x1, x2, x3)

U47_GG(x1, x2, x3)  =  U47_GG(x1, x2, x3)

U48_GG(x1, x2, x3, x4)  =  U48_GG(x1, x2, x3, x4)

U49_GG(x1, x2, x3)  =  U49_GG(x1, x2, x3)

U50_GG(x1, x2, x3)  =  U50_GG(x3)

U51_GG(x1, x2, x3)  =  U51_GG(x1, x2, x3)

U52_GG(x1, x2, x3)  =  U52_GG(x3)

U53_GG(x1, x2, x3)  =  U53_GG(x1, x2, x3)

U54_GG(x1, x2, x3)  =  U54_GG(x1, x2, x3)

U55_GG(x1, x2, x3, x4)  =  U55_GG(x1, x2, x3, x4)

U56_GG(x1, x2, x3)  =  U56_GG(x1, x2, x3)

U57_GG(x1, x2, x3)  =  U57_GG(x3)

U58_GG(x1, x2, x3)  =  U58_GG(x1, x2, x3)

U59_GG(x1, x2, x3)  =  U59_GG(x3)

U60_GG(x1, x2, x3)  =  U60_GG(x1, x2, x3)

U61_GG(x1, x2, x3)  =  U61_GG(x1, x2, x3)

U62_GG(x1, x2, x3, x4)  =  U62_GG(x1, x2, x3, x4)

U63_GG(x1, x2, x3)  =  U63_GG(x1, x2, x3)

U64_GG(x1, x2, x3)  =  U64_GG(x1, x2, x3)

U65_GG(x1, x2, x3, x4)  =  U65_GG(x1, x2, x3, x4)

U66_GG(x1, x2, x3)  =  U66_GG(x1, x2, x3)

U67_GG(x1, x2, x3)  =  U67_GG(x3)

U68_GG(x1, x2, x3)  =  U68_GG(x1, x2, x3)

U69_GG(x1, x2, x3)  =  U69_GG(x3)

U70_GG(x1, x2, x3)  =  U70_GG(x1, x2, x3)

U71_GG(x1, x2, x3)  =  U71_GG(x1, x2, x3)

U72_GG(x1, x2, x3, x4)  =  U72_GG(x1, x2, x3, x4)

U73_GG(x1, x2, x3)  =  U73_GG(x1, x2, x3)

U74_GG(x1, x2, x3)  =  U74_GG(x3)

U75_GG(x1, x2, x3)  =  U75_GG(x1, x2, x3)

U76_GG(x1, x2, x3)  =  U76_GG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(86)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GG(M, N) -> U1_GG(M, N, =_in_ag(X, M))
   MAIN_IN_GG(M, N) -> =_IN_AG(X, M)
   U1_GG(M, N, =_out_ag(X, M)) -> U2_GG(M, N, X, =_in_ag(X2, zero))
   U1_GG(M, N, =_out_ag(X, M)) -> =_IN_AG(X2, zero)
   U2_GG(M, N, X, =_out_ag(X2, zero)) -> U3_GG(M, N, isGreater_in_gg(X, X2))
   U2_GG(M, N, X, =_out_ag(X2, zero)) -> ISGREATER_IN_GG(X, X2)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> U128_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(pred(X), pred(Y)) -> U129_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   U3_GG(M, N, isGreater_out_gg(X, X2)) -> U4_GG(M, N, =_in_ag(X5, M))
   U3_GG(M, N, isGreater_out_gg(X, X2)) -> =_IN_AG(X5, M)
   U4_GG(M, N, =_out_ag(X5, M)) -> U5_GG(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U4_GG(M, N, =_out_ag(X5, M)) -> =_IN_AG(X6, succ(succ(succ(zero))))
   U5_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_GG(M, N, =_in_gg(X5, X6))
   U5_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> =_IN_GG(X5, X6)
   U6_GG(M, N, =_out_gg(X5, X6)) -> U7_GG(M, N, =_in_ag(X3, N))
   U6_GG(M, N, =_out_gg(X5, X6)) -> =_IN_AG(X3, N)
   U7_GG(M, N, =_out_ag(X3, N)) -> U8_GG(M, N, X3, =_in_ag(X4, zero))
   U7_GG(M, N, =_out_ag(X3, N)) -> =_IN_AG(X4, zero)
   U8_GG(M, N, X3, =_out_ag(X4, zero)) -> U9_GG(M, N, isGreater_in_gg(X3, X4))
   U8_GG(M, N, X3, =_out_ag(X4, zero)) -> ISGREATER_IN_GG(X3, X4)
   U9_GG(M, N, isGreater_out_gg(X3, X4)) -> U10_GG(M, N, =_in_ag(X7, N))
   U9_GG(M, N, isGreater_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U10_GG(M, N, =_out_ag(X7, N)) -> U11_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U10_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U11_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_GG(M, N, =_in_gg(X7, X8))
   U11_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U12_GG(M, N, =_out_gg(X7, X8)) -> U13_GG(M, N, ackermann_in_gga(M, N, X1))
   U12_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   ACKERMANN_IN_GGA(M, N, Ret) -> U77_GGA(M, N, Ret, =_in_ag(X, M))
   ACKERMANN_IN_GGA(M, N, Ret) -> =_IN_AG(X, M)
   U77_GGA(M, N, Ret, =_out_ag(X, M)) -> U78_GGA(M, N, Ret, X, =_in_ag(X1, zero))
   U77_GGA(M, N, Ret, =_out_ag(X, M)) -> =_IN_AG(X1, zero)
   U78_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_GGA(M, N, Ret, =_in_gg(X, X1))
   U78_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> =_IN_GG(X, X1)
   U79_GGA(M, N, Ret, =_out_gg(X, X1)) -> U80_GGA(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   U79_GGA(M, N, Ret, =_out_gg(X, X1)) -> ISPLUS_IN_GGA(N, succ(zero), U)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> U95_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> U96_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> U97_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> U98_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   U80_GGA(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_GGA(M, N, Ret, =_in_ag(Ret, U))
   U80_GGA(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> =_IN_AG(Ret, U)
   ACKERMANN_IN_GGA(M, N, Ret) -> U82_GGA(M, N, Ret, =_in_ag(X, N))
   ACKERMANN_IN_GGA(M, N, Ret) -> =_IN_AG(X, N)
   U82_GGA(M, N, Ret, =_out_ag(X, N)) -> U83_GGA(M, N, Ret, X, =_in_ag(X1, zero))
   U82_GGA(M, N, Ret, =_out_ag(X, N)) -> =_IN_AG(X1, zero)
   U83_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_GGA(M, N, Ret, =_in_gg(X, X1))
   U83_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> =_IN_GG(X, X1)
   U84_GGA(M, N, Ret, =_out_gg(X, X1)) -> U85_GGA(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   U84_GGA(M, N, Ret, =_out_gg(X, X1)) -> ISMINUS_IN_GGA(M, succ(zero), U)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> U99_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> U100_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> U101_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> U102_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> U103_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> U104_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   U85_GGA(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, Ret, =_in_ag(M1, U))
   U85_GGA(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> =_IN_AG(M1, U)
   U86_GGA(M, N, Ret, =_out_ag(M1, U)) -> U87_GGA(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   U86_GGA(M, N, Ret, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, succ(zero), Ret)
   ACKERMANN_IN_GGA(M, N, Ret) -> U88_GGA(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   ACKERMANN_IN_GGA(M, N, Ret) -> ISMINUS_IN_GGA(N, succ(zero), U)
   U88_GGA(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, Ret, U, =_in_ag(N1, U))
   U88_GGA(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> =_IN_AG(N1, U)
   U89_GGA(M, N, Ret, U, =_out_ag(N1, U)) -> U90_GGA(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U89_GGA(M, N, Ret, U, =_out_ag(N1, U)) -> ACKERMANN_IN_GGA(M, N1, Ret1)
   U90_GGA(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_GGA(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U90_GGA(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> ISMINUS_IN_GGG(M, succ(zero), U)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> U99_GGG(Y, Z, isMinus_in_ggg(zero, Y, Z))
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> U100_GGG(Y, Z, isMinus_in_ggg(zero, Y, Z))
   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> U101_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> U102_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> U103_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> U104_GGG(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   U91_GGA(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret, Ret1, =_in_ag(M1, U))
   U91_GGA(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> =_IN_AG(M1, U)
   U92_GGA(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_GGA(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U92_GGA(M, N, Ret, Ret1, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, Ret1, Ret2)
   U93_GGA(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_GGA(M, N, Ret, =_in_ag(Ret, Ret2))
   U93_GGA(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> =_IN_AG(Ret, Ret2)
   U11_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_GG(M, N, isLess_in_gg(X7, X8))
   U11_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   ISLESS_IN_GG(pred(X), pred(Y)) -> U130_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(succ(X), succ(Y)) -> U131_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   U14_GG(M, N, isLess_out_gg(X7, X8)) -> U15_GG(M, N, ackermann_in_gga(M, N, X1))
   U14_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U8_GG(M, N, X3, =_out_ag(X4, zero)) -> U16_GG(M, N, =_in_gg(X3, X4))
   U8_GG(M, N, X3, =_out_ag(X4, zero)) -> =_IN_GG(X3, X4)
   U16_GG(M, N, =_out_gg(X3, X4)) -> U17_GG(M, N, =_in_ag(X7, N))
   U16_GG(M, N, =_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U17_GG(M, N, =_out_ag(X7, N)) -> U18_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U17_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U18_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_GG(M, N, =_in_gg(X7, X8))
   U18_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U19_GG(M, N, =_out_gg(X7, X8)) -> U20_GG(M, N, ackermann_in_gga(M, N, X1))
   U19_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U18_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_GG(M, N, isLess_in_gg(X7, X8))
   U18_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U21_GG(M, N, isLess_out_gg(X7, X8)) -> U22_GG(M, N, ackermann_in_gga(M, N, X1))
   U21_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U5_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_GG(M, N, isLess_in_gg(X5, X6))
   U5_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> ISLESS_IN_GG(X5, X6)
   U23_GG(M, N, isLess_out_gg(X5, X6)) -> U24_GG(M, N, =_in_ag(X3, N))
   U23_GG(M, N, isLess_out_gg(X5, X6)) -> =_IN_AG(X3, N)
   U24_GG(M, N, =_out_ag(X3, N)) -> U25_GG(M, N, X3, =_in_ag(X4, zero))
   U24_GG(M, N, =_out_ag(X3, N)) -> =_IN_AG(X4, zero)
   U25_GG(M, N, X3, =_out_ag(X4, zero)) -> U26_GG(M, N, isGreater_in_gg(X3, X4))
   U25_GG(M, N, X3, =_out_ag(X4, zero)) -> ISGREATER_IN_GG(X3, X4)
   U26_GG(M, N, isGreater_out_gg(X3, X4)) -> U27_GG(M, N, =_in_ag(X7, N))
   U26_GG(M, N, isGreater_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U27_GG(M, N, =_out_ag(X7, N)) -> U28_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U27_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U28_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_GG(M, N, =_in_gg(X7, X8))
   U28_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U29_GG(M, N, =_out_gg(X7, X8)) -> U30_GG(M, N, ackermann_in_gga(M, N, X1))
   U29_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U28_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_GG(M, N, isLess_in_gg(X7, X8))
   U28_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U31_GG(M, N, isLess_out_gg(X7, X8)) -> U32_GG(M, N, ackermann_in_gga(M, N, X1))
   U31_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U25_GG(M, N, X3, =_out_ag(X4, zero)) -> U33_GG(M, N, =_in_gg(X3, X4))
   U25_GG(M, N, X3, =_out_ag(X4, zero)) -> =_IN_GG(X3, X4)
   U33_GG(M, N, =_out_gg(X3, X4)) -> U34_GG(M, N, =_in_ag(X7, N))
   U33_GG(M, N, =_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U34_GG(M, N, =_out_ag(X7, N)) -> U35_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U34_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U35_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_GG(M, N, =_in_gg(X7, X8))
   U35_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U36_GG(M, N, =_out_gg(X7, X8)) -> U37_GG(M, N, ackermann_in_gga(M, N, X1))
   U36_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U35_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_GG(M, N, isLess_in_gg(X7, X8))
   U35_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U38_GG(M, N, isLess_out_gg(X7, X8)) -> U39_GG(M, N, ackermann_in_gga(M, N, X1))
   U38_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U2_GG(M, N, X, =_out_ag(X2, zero)) -> U40_GG(M, N, =_in_gg(X, X2))
   U2_GG(M, N, X, =_out_ag(X2, zero)) -> =_IN_GG(X, X2)
   U40_GG(M, N, =_out_gg(X, X2)) -> U41_GG(M, N, =_in_ag(X5, M))
   U40_GG(M, N, =_out_gg(X, X2)) -> =_IN_AG(X5, M)
   U41_GG(M, N, =_out_ag(X5, M)) -> U42_GG(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U41_GG(M, N, =_out_ag(X5, M)) -> =_IN_AG(X6, succ(succ(succ(zero))))
   U42_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_GG(M, N, =_in_gg(X5, X6))
   U42_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> =_IN_GG(X5, X6)
   U43_GG(M, N, =_out_gg(X5, X6)) -> U44_GG(M, N, =_in_ag(X3, N))
   U43_GG(M, N, =_out_gg(X5, X6)) -> =_IN_AG(X3, N)
   U44_GG(M, N, =_out_ag(X3, N)) -> U45_GG(M, N, X3, =_in_ag(X4, zero))
   U44_GG(M, N, =_out_ag(X3, N)) -> =_IN_AG(X4, zero)
   U45_GG(M, N, X3, =_out_ag(X4, zero)) -> U46_GG(M, N, isGreater_in_gg(X3, X4))
   U45_GG(M, N, X3, =_out_ag(X4, zero)) -> ISGREATER_IN_GG(X3, X4)
   U46_GG(M, N, isGreater_out_gg(X3, X4)) -> U47_GG(M, N, =_in_ag(X7, N))
   U46_GG(M, N, isGreater_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U47_GG(M, N, =_out_ag(X7, N)) -> U48_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U47_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U48_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_GG(M, N, =_in_gg(X7, X8))
   U48_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U49_GG(M, N, =_out_gg(X7, X8)) -> U50_GG(M, N, ackermann_in_gga(M, N, X1))
   U49_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U48_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_GG(M, N, isLess_in_gg(X7, X8))
   U48_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U51_GG(M, N, isLess_out_gg(X7, X8)) -> U52_GG(M, N, ackermann_in_gga(M, N, X1))
   U51_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U45_GG(M, N, X3, =_out_ag(X4, zero)) -> U53_GG(M, N, =_in_gg(X3, X4))
   U45_GG(M, N, X3, =_out_ag(X4, zero)) -> =_IN_GG(X3, X4)
   U53_GG(M, N, =_out_gg(X3, X4)) -> U54_GG(M, N, =_in_ag(X7, N))
   U53_GG(M, N, =_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U54_GG(M, N, =_out_ag(X7, N)) -> U55_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U54_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U55_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_GG(M, N, =_in_gg(X7, X8))
   U55_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U56_GG(M, N, =_out_gg(X7, X8)) -> U57_GG(M, N, ackermann_in_gga(M, N, X1))
   U56_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U55_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_GG(M, N, isLess_in_gg(X7, X8))
   U55_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U58_GG(M, N, isLess_out_gg(X7, X8)) -> U59_GG(M, N, ackermann_in_gga(M, N, X1))
   U58_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U42_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_GG(M, N, isLess_in_gg(X5, X6))
   U42_GG(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> ISLESS_IN_GG(X5, X6)
   U60_GG(M, N, isLess_out_gg(X5, X6)) -> U61_GG(M, N, =_in_ag(X3, N))
   U60_GG(M, N, isLess_out_gg(X5, X6)) -> =_IN_AG(X3, N)
   U61_GG(M, N, =_out_ag(X3, N)) -> U62_GG(M, N, X3, =_in_ag(X4, zero))
   U61_GG(M, N, =_out_ag(X3, N)) -> =_IN_AG(X4, zero)
   U62_GG(M, N, X3, =_out_ag(X4, zero)) -> U63_GG(M, N, isGreater_in_gg(X3, X4))
   U62_GG(M, N, X3, =_out_ag(X4, zero)) -> ISGREATER_IN_GG(X3, X4)
   U63_GG(M, N, isGreater_out_gg(X3, X4)) -> U64_GG(M, N, =_in_ag(X7, N))
   U63_GG(M, N, isGreater_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U64_GG(M, N, =_out_ag(X7, N)) -> U65_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U64_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U65_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_GG(M, N, =_in_gg(X7, X8))
   U65_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U66_GG(M, N, =_out_gg(X7, X8)) -> U67_GG(M, N, ackermann_in_gga(M, N, X1))
   U66_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U65_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_GG(M, N, isLess_in_gg(X7, X8))
   U65_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U68_GG(M, N, isLess_out_gg(X7, X8)) -> U69_GG(M, N, ackermann_in_gga(M, N, X1))
   U68_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U62_GG(M, N, X3, =_out_ag(X4, zero)) -> U70_GG(M, N, =_in_gg(X3, X4))
   U62_GG(M, N, X3, =_out_ag(X4, zero)) -> =_IN_GG(X3, X4)
   U70_GG(M, N, =_out_gg(X3, X4)) -> U71_GG(M, N, =_in_ag(X7, N))
   U70_GG(M, N, =_out_gg(X3, X4)) -> =_IN_AG(X7, N)
   U71_GG(M, N, =_out_ag(X7, N)) -> U72_GG(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U71_GG(M, N, =_out_ag(X7, N)) -> =_IN_AG(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))
   U72_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_GG(M, N, =_in_gg(X7, X8))
   U72_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> =_IN_GG(X7, X8)
   U73_GG(M, N, =_out_gg(X7, X8)) -> U74_GG(M, N, ackermann_in_gga(M, N, X1))
   U73_GG(M, N, =_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)
   U72_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_GG(M, N, isLess_in_gg(X7, X8))
   U72_GG(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> ISLESS_IN_GG(X7, X8)
   U75_GG(M, N, isLess_out_gg(X7, X8)) -> U76_GG(M, N, ackermann_in_gga(M, N, X1))
   U75_GG(M, N, isLess_out_gg(X7, X8)) -> ACKERMANN_IN_GGA(M, N, X1)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x3)

U129_gg(x1, x2, x3)  =  U129_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U99_gga(x1, x2, x3)  =  U99_gga(x3)

U100_gga(x1, x2, x3)  =  U100_gga(x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U99_ggg(x1, x2, x3)  =  U99_ggg(x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x4)

main_out_gg(x1, x2)  =  main_out_gg

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U130_gg(x1, x2, x3)  =  U130_gg(x3)

U131_gg(x1, x2, x3)  =  U131_gg(x3)

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x3)

MAIN_IN_GG(x1, x2)  =  MAIN_IN_GG(x1, x2)

U1_GG(x1, x2, x3)  =  U1_GG(x1, x2, x3)

=_IN_AG(x1, x2)  =  =_IN_AG(x2)

U2_GG(x1, x2, x3, x4)  =  U2_GG(x1, x2, x3, x4)

U3_GG(x1, x2, x3)  =  U3_GG(x1, x2, x3)

ISGREATER_IN_GG(x1, x2)  =  ISGREATER_IN_GG(x1, x2)

U128_GG(x1, x2, x3)  =  U128_GG(x3)

U129_GG(x1, x2, x3)  =  U129_GG(x3)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)

U5_GG(x1, x2, x3, x4)  =  U5_GG(x1, x2, x3, x4)

U6_GG(x1, x2, x3)  =  U6_GG(x1, x2, x3)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U7_GG(x1, x2, x3)  =  U7_GG(x1, x2, x3)

U8_GG(x1, x2, x3, x4)  =  U8_GG(x1, x2, x3, x4)

U9_GG(x1, x2, x3)  =  U9_GG(x1, x2, x3)

U10_GG(x1, x2, x3)  =  U10_GG(x1, x2, x3)

U11_GG(x1, x2, x3, x4)  =  U11_GG(x1, x2, x3, x4)

U12_GG(x1, x2, x3)  =  U12_GG(x1, x2, x3)

U13_GG(x1, x2, x3)  =  U13_GG(x3)

ACKERMANN_IN_GGA(x1, x2, x3)  =  ACKERMANN_IN_GGA(x1, x2)

U77_GGA(x1, x2, x3, x4)  =  U77_GGA(x2, x4)

U78_GGA(x1, x2, x3, x4, x5)  =  U78_GGA(x2, x4, x5)

U79_GGA(x1, x2, x3, x4)  =  U79_GGA(x2, x4)

U80_GGA(x1, x2, x3, x4)  =  U80_GGA(x4)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)

U95_GGA(x1, x2, x3, x4)  =  U95_GGA(x4)

U96_GGA(x1, x2, x3, x4)  =  U96_GGA(x4)

U97_GGA(x1, x2, x3, x4)  =  U97_GGA(x4)

U98_GGA(x1, x2, x3, x4)  =  U98_GGA(x4)

U81_GGA(x1, x2, x3, x4)  =  U81_GGA(x4)

U82_GGA(x1, x2, x3, x4)  =  U82_GGA(x1, x4)

U83_GGA(x1, x2, x3, x4, x5)  =  U83_GGA(x1, x4, x5)

U84_GGA(x1, x2, x3, x4)  =  U84_GGA(x1, x4)

U85_GGA(x1, x2, x3, x4)  =  U85_GGA(x4)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)

U99_GGA(x1, x2, x3)  =  U99_GGA(x3)

U100_GGA(x1, x2, x3)  =  U100_GGA(x3)

U101_GGA(x1, x2, x3, x4)  =  U101_GGA(x4)

U102_GGA(x1, x2, x3, x4)  =  U102_GGA(x4)

U103_GGA(x1, x2, x3, x4)  =  U103_GGA(x4)

U104_GGA(x1, x2, x3, x4)  =  U104_GGA(x4)

U86_GGA(x1, x2, x3, x4)  =  U86_GGA(x4)

U87_GGA(x1, x2, x3, x4)  =  U87_GGA(x4)

U88_GGA(x1, x2, x3, x4)  =  U88_GGA(x1, x4)

U89_GGA(x1, x2, x3, x4, x5)  =  U89_GGA(x1, x4, x5)

U90_GGA(x1, x2, x3, x4, x5)  =  U90_GGA(x1, x4, x5)

U91_GGA(x1, x2, x3, x4, x5, x6)  =  U91_GGA(x4, x5, x6)

ISMINUS_IN_GGG(x1, x2, x3)  =  ISMINUS_IN_GGG(x1, x2, x3)

U99_GGG(x1, x2, x3)  =  U99_GGG(x3)

U100_GGG(x1, x2, x3)  =  U100_GGG(x3)

U101_GGG(x1, x2, x3, x4)  =  U101_GGG(x4)

U102_GGG(x1, x2, x3, x4)  =  U102_GGG(x4)

U103_GGG(x1, x2, x3, x4)  =  U103_GGG(x4)

U104_GGG(x1, x2, x3, x4)  =  U104_GGG(x4)

U92_GGA(x1, x2, x3, x4, x5)  =  U92_GGA(x4, x5)

U93_GGA(x1, x2, x3, x4)  =  U93_GGA(x4)

U94_GGA(x1, x2, x3, x4)  =  U94_GGA(x4)

U14_GG(x1, x2, x3)  =  U14_GG(x1, x2, x3)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)

U130_GG(x1, x2, x3)  =  U130_GG(x3)

U131_GG(x1, x2, x3)  =  U131_GG(x3)

U15_GG(x1, x2, x3)  =  U15_GG(x3)

U16_GG(x1, x2, x3)  =  U16_GG(x1, x2, x3)

U17_GG(x1, x2, x3)  =  U17_GG(x1, x2, x3)

U18_GG(x1, x2, x3, x4)  =  U18_GG(x1, x2, x3, x4)

U19_GG(x1, x2, x3)  =  U19_GG(x1, x2, x3)

U20_GG(x1, x2, x3)  =  U20_GG(x3)

U21_GG(x1, x2, x3)  =  U21_GG(x1, x2, x3)

U22_GG(x1, x2, x3)  =  U22_GG(x3)

U23_GG(x1, x2, x3)  =  U23_GG(x1, x2, x3)

U24_GG(x1, x2, x3)  =  U24_GG(x1, x2, x3)

U25_GG(x1, x2, x3, x4)  =  U25_GG(x1, x2, x3, x4)

U26_GG(x1, x2, x3)  =  U26_GG(x1, x2, x3)

U27_GG(x1, x2, x3)  =  U27_GG(x1, x2, x3)

U28_GG(x1, x2, x3, x4)  =  U28_GG(x1, x2, x3, x4)

U29_GG(x1, x2, x3)  =  U29_GG(x1, x2, x3)

U30_GG(x1, x2, x3)  =  U30_GG(x3)

U31_GG(x1, x2, x3)  =  U31_GG(x1, x2, x3)

U32_GG(x1, x2, x3)  =  U32_GG(x3)

U33_GG(x1, x2, x3)  =  U33_GG(x1, x2, x3)

U34_GG(x1, x2, x3)  =  U34_GG(x1, x2, x3)

U35_GG(x1, x2, x3, x4)  =  U35_GG(x1, x2, x3, x4)

U36_GG(x1, x2, x3)  =  U36_GG(x1, x2, x3)

U37_GG(x1, x2, x3)  =  U37_GG(x3)

U38_GG(x1, x2, x3)  =  U38_GG(x1, x2, x3)

U39_GG(x1, x2, x3)  =  U39_GG(x3)

U40_GG(x1, x2, x3)  =  U40_GG(x1, x2, x3)

U41_GG(x1, x2, x3)  =  U41_GG(x1, x2, x3)

U42_GG(x1, x2, x3, x4)  =  U42_GG(x1, x2, x3, x4)

U43_GG(x1, x2, x3)  =  U43_GG(x1, x2, x3)

U44_GG(x1, x2, x3)  =  U44_GG(x1, x2, x3)

U45_GG(x1, x2, x3, x4)  =  U45_GG(x1, x2, x3, x4)

U46_GG(x1, x2, x3)  =  U46_GG(x1, x2, x3)

U47_GG(x1, x2, x3)  =  U47_GG(x1, x2, x3)

U48_GG(x1, x2, x3, x4)  =  U48_GG(x1, x2, x3, x4)

U49_GG(x1, x2, x3)  =  U49_GG(x1, x2, x3)

U50_GG(x1, x2, x3)  =  U50_GG(x3)

U51_GG(x1, x2, x3)  =  U51_GG(x1, x2, x3)

U52_GG(x1, x2, x3)  =  U52_GG(x3)

U53_GG(x1, x2, x3)  =  U53_GG(x1, x2, x3)

U54_GG(x1, x2, x3)  =  U54_GG(x1, x2, x3)

U55_GG(x1, x2, x3, x4)  =  U55_GG(x1, x2, x3, x4)

U56_GG(x1, x2, x3)  =  U56_GG(x1, x2, x3)

U57_GG(x1, x2, x3)  =  U57_GG(x3)

U58_GG(x1, x2, x3)  =  U58_GG(x1, x2, x3)

U59_GG(x1, x2, x3)  =  U59_GG(x3)

U60_GG(x1, x2, x3)  =  U60_GG(x1, x2, x3)

U61_GG(x1, x2, x3)  =  U61_GG(x1, x2, x3)

U62_GG(x1, x2, x3, x4)  =  U62_GG(x1, x2, x3, x4)

U63_GG(x1, x2, x3)  =  U63_GG(x1, x2, x3)

U64_GG(x1, x2, x3)  =  U64_GG(x1, x2, x3)

U65_GG(x1, x2, x3, x4)  =  U65_GG(x1, x2, x3, x4)

U66_GG(x1, x2, x3)  =  U66_GG(x1, x2, x3)

U67_GG(x1, x2, x3)  =  U67_GG(x3)

U68_GG(x1, x2, x3)  =  U68_GG(x1, x2, x3)

U69_GG(x1, x2, x3)  =  U69_GG(x3)

U70_GG(x1, x2, x3)  =  U70_GG(x1, x2, x3)

U71_GG(x1, x2, x3)  =  U71_GG(x1, x2, x3)

U72_GG(x1, x2, x3, x4)  =  U72_GG(x1, x2, x3, x4)

U73_GG(x1, x2, x3)  =  U73_GG(x1, x2, x3)

U74_GG(x1, x2, x3)  =  U74_GG(x3)

U75_GG(x1, x2, x3)  =  U75_GG(x1, x2, x3)

U76_GG(x1, x2, x3)  =  U76_GG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(87) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 8 SCCs with 195 less nodes.
----------------------------------------

(88)
Complex Obligation (AND)

----------------------------------------

(89)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x3)

U129_gg(x1, x2, x3)  =  U129_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U99_gga(x1, x2, x3)  =  U99_gga(x3)

U100_gga(x1, x2, x3)  =  U100_gga(x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U99_ggg(x1, x2, x3)  =  U99_ggg(x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x4)

main_out_gg(x1, x2)  =  main_out_gg

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U130_gg(x1, x2, x3)  =  U130_gg(x3)

U131_gg(x1, x2, x3)  =  U131_gg(x3)

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x3)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(90) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(91)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(92) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(93)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(94) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(95)
YES

----------------------------------------

(96)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x3)

U129_gg(x1, x2, x3)  =  U129_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U99_gga(x1, x2, x3)  =  U99_gga(x3)

U100_gga(x1, x2, x3)  =  U100_gga(x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U99_ggg(x1, x2, x3)  =  U99_ggg(x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x4)

main_out_gg(x1, x2)  =  main_out_gg

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U130_gg(x1, x2, x3)  =  U130_gg(x3)

U131_gg(x1, x2, x3)  =  U131_gg(x3)

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x3)

ISMINUS_IN_GGG(x1, x2, x3)  =  ISMINUS_IN_GGG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(97) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(98)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(99) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(100)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
   ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(101) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGG(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
The graph contains the following edges 1 >= 1, 2 > 2, 3 > 3


*ISMINUS_IN_GGG(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGG(zero, Y, Z)
The graph contains the following edges 1 >= 1, 2 > 2, 3 > 3


----------------------------------------

(102)
YES

----------------------------------------

(103)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x3)

U129_gg(x1, x2, x3)  =  U129_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U99_gga(x1, x2, x3)  =  U99_gga(x3)

U100_gga(x1, x2, x3)  =  U100_gga(x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U99_ggg(x1, x2, x3)  =  U99_ggg(x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x4)

main_out_gg(x1, x2)  =  main_out_gg

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U130_gg(x1, x2, x3)  =  U130_gg(x3)

U131_gg(x1, x2, x3)  =  U131_gg(x3)

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x3)

ISMINUS_IN_GGG(x1, x2, x3)  =  ISMINUS_IN_GGG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(104) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(105)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(106) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(107)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
   ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(108) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGG(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 > 3


*ISMINUS_IN_GGG(succ(X), succ(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


*ISMINUS_IN_GGG(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 > 3


*ISMINUS_IN_GGG(pred(X), pred(Y), Z) -> ISMINUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


----------------------------------------

(109)
YES

----------------------------------------

(110)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x3)

U129_gg(x1, x2, x3)  =  U129_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U99_gga(x1, x2, x3)  =  U99_gga(x3)

U100_gga(x1, x2, x3)  =  U100_gga(x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U99_ggg(x1, x2, x3)  =  U99_ggg(x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x4)

main_out_gg(x1, x2)  =  main_out_gg

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U130_gg(x1, x2, x3)  =  U130_gg(x3)

U131_gg(x1, x2, x3)  =  U131_gg(x3)

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x3)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(111) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(112)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
zero  =  zero

succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(113) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(114)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y)) -> ISMINUS_IN_GGA(zero, Y)
   ISMINUS_IN_GGA(zero, succ(Y)) -> ISMINUS_IN_GGA(zero, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(115) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGA(zero, pred(Y)) -> ISMINUS_IN_GGA(zero, Y)
The graph contains the following edges 1 >= 1, 2 > 2


*ISMINUS_IN_GGA(zero, succ(Y)) -> ISMINUS_IN_GGA(zero, Y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(116)
YES

----------------------------------------

(117)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x3)

U129_gg(x1, x2, x3)  =  U129_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U99_gga(x1, x2, x3)  =  U99_gga(x3)

U100_gga(x1, x2, x3)  =  U100_gga(x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U99_ggg(x1, x2, x3)  =  U99_ggg(x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x4)

main_out_gg(x1, x2)  =  main_out_gg

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U130_gg(x1, x2, x3)  =  U130_gg(x3)

U131_gg(x1, x2, x3)  =  U131_gg(x3)

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x3)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(118) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(119)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(120) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(121)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(succ(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(pred(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(pred(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(122) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGA(succ(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(succ(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(pred(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(pred(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(123)
YES

----------------------------------------

(124)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x3)

U129_gg(x1, x2, x3)  =  U129_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U99_gga(x1, x2, x3)  =  U99_gga(x3)

U100_gga(x1, x2, x3)  =  U100_gga(x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U99_ggg(x1, x2, x3)  =  U99_ggg(x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x4)

main_out_gg(x1, x2)  =  main_out_gg

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U130_gg(x1, x2, x3)  =  U130_gg(x3)

U131_gg(x1, x2, x3)  =  U131_gg(x3)

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x3)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(125) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(126)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(127) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(128)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGA(succ(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)
   ISPLUS_IN_GGA(succ(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
   ISPLUS_IN_GGA(pred(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
   ISPLUS_IN_GGA(pred(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(129) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISPLUS_IN_GGA(succ(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISPLUS_IN_GGA(succ(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISPLUS_IN_GGA(pred(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISPLUS_IN_GGA(pred(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(130)
YES

----------------------------------------

(131)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ACKERMANN_IN_GGA(M, N, Ret) -> U82_GGA(M, N, Ret, =_in_ag(X, N))
   U82_GGA(M, N, Ret, =_out_ag(X, N)) -> U83_GGA(M, N, Ret, X, =_in_ag(X1, zero))
   U83_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_GGA(M, N, Ret, =_in_gg(X, X1))
   U84_GGA(M, N, Ret, =_out_gg(X, X1)) -> U85_GGA(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   U85_GGA(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, Ret, =_in_ag(M1, U))
   U86_GGA(M, N, Ret, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, succ(zero), Ret)
   ACKERMANN_IN_GGA(M, N, Ret) -> U88_GGA(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_GGA(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, Ret, U, =_in_ag(N1, U))
   U89_GGA(M, N, Ret, U, =_out_ag(N1, U)) -> U90_GGA(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_GGA(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_GGA(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U91_GGA(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_GGA(M, N, Ret, Ret1, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, Ret1, Ret2)
   U89_GGA(M, N, Ret, U, =_out_ag(N1, U)) -> ACKERMANN_IN_GGA(M, N1, Ret1)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x3)

U129_gg(x1, x2, x3)  =  U129_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U99_gga(x1, x2, x3)  =  U99_gga(x3)

U100_gga(x1, x2, x3)  =  U100_gga(x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U99_ggg(x1, x2, x3)  =  U99_ggg(x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x4)

main_out_gg(x1, x2)  =  main_out_gg

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U130_gg(x1, x2, x3)  =  U130_gg(x3)

U131_gg(x1, x2, x3)  =  U131_gg(x3)

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x3)

ACKERMANN_IN_GGA(x1, x2, x3)  =  ACKERMANN_IN_GGA(x1, x2)

U82_GGA(x1, x2, x3, x4)  =  U82_GGA(x1, x4)

U83_GGA(x1, x2, x3, x4, x5)  =  U83_GGA(x1, x4, x5)

U84_GGA(x1, x2, x3, x4)  =  U84_GGA(x1, x4)

U85_GGA(x1, x2, x3, x4)  =  U85_GGA(x4)

U86_GGA(x1, x2, x3, x4)  =  U86_GGA(x4)

U88_GGA(x1, x2, x3, x4)  =  U88_GGA(x1, x4)

U89_GGA(x1, x2, x3, x4, x5)  =  U89_GGA(x1, x4, x5)

U90_GGA(x1, x2, x3, x4, x5)  =  U90_GGA(x1, x4, x5)

U91_GGA(x1, x2, x3, x4, x5, x6)  =  U91_GGA(x4, x5, x6)

U92_GGA(x1, x2, x3, x4, x5)  =  U92_GGA(x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(132) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(133)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ACKERMANN_IN_GGA(M, N, Ret) -> U82_GGA(M, N, Ret, =_in_ag(X, N))
   U82_GGA(M, N, Ret, =_out_ag(X, N)) -> U83_GGA(M, N, Ret, X, =_in_ag(X1, zero))
   U83_GGA(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_GGA(M, N, Ret, =_in_gg(X, X1))
   U84_GGA(M, N, Ret, =_out_gg(X, X1)) -> U85_GGA(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   U85_GGA(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_GGA(M, N, Ret, =_in_ag(M1, U))
   U86_GGA(M, N, Ret, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, succ(zero), Ret)
   ACKERMANN_IN_GGA(M, N, Ret) -> U88_GGA(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_GGA(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_GGA(M, N, Ret, U, =_in_ag(N1, U))
   U89_GGA(M, N, Ret, U, =_out_ag(N1, U)) -> U90_GGA(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_GGA(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_GGA(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U91_GGA(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_GGA(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_GGA(M, N, Ret, Ret1, =_out_ag(M1, U)) -> ACKERMANN_IN_GGA(M1, Ret1, Ret2)
   U89_GGA(M, N, Ret, U, =_out_ag(N1, U)) -> ACKERMANN_IN_GGA(M, N1, Ret1)

The TRS R consists of the following rules:

   =_in_ag(X, X) -> =_out_ag(X, X)
   =_in_gg(X, X) -> =_out_gg(X, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))

The argument filtering Pi contains the following mapping:
=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

zero  =  zero

succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U99_gga(x1, x2, x3)  =  U99_gga(x3)

U100_gga(x1, x2, x3)  =  U100_gga(x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U99_ggg(x1, x2, x3)  =  U99_ggg(x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x4)

ACKERMANN_IN_GGA(x1, x2, x3)  =  ACKERMANN_IN_GGA(x1, x2)

U82_GGA(x1, x2, x3, x4)  =  U82_GGA(x1, x4)

U83_GGA(x1, x2, x3, x4, x5)  =  U83_GGA(x1, x4, x5)

U84_GGA(x1, x2, x3, x4)  =  U84_GGA(x1, x4)

U85_GGA(x1, x2, x3, x4)  =  U85_GGA(x4)

U86_GGA(x1, x2, x3, x4)  =  U86_GGA(x4)

U88_GGA(x1, x2, x3, x4)  =  U88_GGA(x1, x4)

U89_GGA(x1, x2, x3, x4, x5)  =  U89_GGA(x1, x4, x5)

U90_GGA(x1, x2, x3, x4, x5)  =  U90_GGA(x1, x4, x5)

U91_GGA(x1, x2, x3, x4, x5, x6)  =  U91_GGA(x4, x5, x6)

U92_GGA(x1, x2, x3, x4, x5)  =  U92_GGA(x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(134) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(135)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, =_in_ag(N))
   U82_GGA(M, =_out_ag(X)) -> U83_GGA(M, X, =_in_ag(zero))
   U83_GGA(M, X, =_out_ag(X1)) -> U84_GGA(M, =_in_gg(X, X1))
   U84_GGA(M, =_out_gg) -> U85_GGA(isMinus_in_gga(M, succ(zero)))
   U85_GGA(isMinus_out_gga(U)) -> U86_GGA(=_in_ag(U))
   U86_GGA(=_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, succ(zero))
   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, isMinus_in_gga(N, succ(zero)))
   U88_GGA(M, isMinus_out_gga(U)) -> U89_GGA(M, U, =_in_ag(U))
   U89_GGA(M, U, =_out_ag(N1)) -> U90_GGA(M, U, ackermann_in_gga(M, N1))
   U90_GGA(M, U, ackermann_out_gga(Ret1)) -> U91_GGA(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U91_GGA(U, Ret1, isMinus_out_ggg) -> U92_GGA(Ret1, =_in_ag(U))
   U92_GGA(Ret1, =_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, Ret1)
   U89_GGA(M, U, =_out_ag(N1)) -> ACKERMANN_IN_GGA(M, N1)

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(isMinus_in_ggg(X, Y, Z))
   U99_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U101_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U103_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U77_gga(N, =_out_ag(X)) -> U78_gga(N, X, =_in_ag(zero))
   U82_gga(M, =_out_ag(X)) -> U83_gga(M, X, =_in_ag(zero))
   U88_gga(M, isMinus_out_gga(U)) -> U89_gga(M, U, =_in_ag(U))
   U99_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U101_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U103_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(isMinus_in_gga(X, Y))
   U78_gga(N, X, =_out_ag(X1)) -> U79_gga(N, =_in_gg(X, X1))
   U83_gga(M, X, =_out_ag(X1)) -> U84_gga(M, =_in_gg(X, X1))
   U89_gga(M, U, =_out_ag(N1)) -> U90_gga(M, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(isMinus_in_ggg(X, Y, Z))
   U100_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U102_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U104_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U79_gga(N, =_out_gg) -> U80_gga(isPlus_in_gga(N, succ(zero)))
   U84_gga(M, =_out_gg) -> U85_gga(isMinus_in_gga(M, succ(zero)))
   U90_gga(M, U, ackermann_out_gga(Ret1)) -> U91_gga(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U102_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U104_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U80_gga(isPlus_out_gga(U)) -> U81_gga(=_in_ag(U))
   U85_gga(isMinus_out_gga(U)) -> U86_gga(=_in_ag(U))
   U91_gga(U, Ret1, isMinus_out_ggg) -> U92_gga(Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(isPlus_in_gga(X, Y))
   U81_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U86_gga(=_out_ag(M1)) -> U87_gga(ackermann_in_gga(M1, succ(zero)))
   U92_gga(Ret1, =_out_ag(M1)) -> U93_gga(ackermann_in_gga(M1, Ret1))
   U95_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   U97_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U87_gga(ackermann_out_gga(Ret)) -> ackermann_out_gga(Ret)
   U93_gga(ackermann_out_gga(Ret2)) -> U94_gga(=_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(isPlus_in_gga(X, Y))
   U94_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U96_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U98_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0)
   U101_gga(x0)
   U103_gga(x0)
   U77_gga(x0, x1)
   U82_gga(x0, x1)
   U88_gga(x0, x1)
   U99_ggg(x0)
   U101_ggg(x0)
   U103_ggg(x0)
   U78_gga(x0, x1, x2)
   U83_gga(x0, x1, x2)
   U89_gga(x0, x1, x2)
   U100_gga(x0)
   U102_gga(x0)
   U104_gga(x0)
   U79_gga(x0, x1)
   U84_gga(x0, x1)
   U90_gga(x0, x1, x2)
   U100_ggg(x0)
   U102_ggg(x0)
   U104_ggg(x0)
   U80_gga(x0)
   U85_gga(x0)
   U91_gga(x0, x1, x2)
   isPlus_in_gga(x0, x1)
   U81_gga(x0)
   U86_gga(x0)
   U92_gga(x0, x1)
   U95_gga(x0)
   U97_gga(x0)
   U87_gga(x0)
   U93_gga(x0)
   U94_gga(x0)
   U96_gga(x0)
   U98_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(136) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, =_in_ag(N)) at position [1] we obtained the following new rules [LPAR04]:

   (ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, =_out_ag(N)),ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, =_out_ag(N)))


----------------------------------------

(137)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U82_GGA(M, =_out_ag(X)) -> U83_GGA(M, X, =_in_ag(zero))
   U83_GGA(M, X, =_out_ag(X1)) -> U84_GGA(M, =_in_gg(X, X1))
   U84_GGA(M, =_out_gg) -> U85_GGA(isMinus_in_gga(M, succ(zero)))
   U85_GGA(isMinus_out_gga(U)) -> U86_GGA(=_in_ag(U))
   U86_GGA(=_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, succ(zero))
   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, isMinus_in_gga(N, succ(zero)))
   U88_GGA(M, isMinus_out_gga(U)) -> U89_GGA(M, U, =_in_ag(U))
   U89_GGA(M, U, =_out_ag(N1)) -> U90_GGA(M, U, ackermann_in_gga(M, N1))
   U90_GGA(M, U, ackermann_out_gga(Ret1)) -> U91_GGA(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U91_GGA(U, Ret1, isMinus_out_ggg) -> U92_GGA(Ret1, =_in_ag(U))
   U92_GGA(Ret1, =_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, Ret1)
   U89_GGA(M, U, =_out_ag(N1)) -> ACKERMANN_IN_GGA(M, N1)
   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, =_out_ag(N))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(isMinus_in_ggg(X, Y, Z))
   U99_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U101_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U103_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U77_gga(N, =_out_ag(X)) -> U78_gga(N, X, =_in_ag(zero))
   U82_gga(M, =_out_ag(X)) -> U83_gga(M, X, =_in_ag(zero))
   U88_gga(M, isMinus_out_gga(U)) -> U89_gga(M, U, =_in_ag(U))
   U99_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U101_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U103_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(isMinus_in_gga(X, Y))
   U78_gga(N, X, =_out_ag(X1)) -> U79_gga(N, =_in_gg(X, X1))
   U83_gga(M, X, =_out_ag(X1)) -> U84_gga(M, =_in_gg(X, X1))
   U89_gga(M, U, =_out_ag(N1)) -> U90_gga(M, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(isMinus_in_ggg(X, Y, Z))
   U100_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U102_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U104_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U79_gga(N, =_out_gg) -> U80_gga(isPlus_in_gga(N, succ(zero)))
   U84_gga(M, =_out_gg) -> U85_gga(isMinus_in_gga(M, succ(zero)))
   U90_gga(M, U, ackermann_out_gga(Ret1)) -> U91_gga(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U102_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U104_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U80_gga(isPlus_out_gga(U)) -> U81_gga(=_in_ag(U))
   U85_gga(isMinus_out_gga(U)) -> U86_gga(=_in_ag(U))
   U91_gga(U, Ret1, isMinus_out_ggg) -> U92_gga(Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(isPlus_in_gga(X, Y))
   U81_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U86_gga(=_out_ag(M1)) -> U87_gga(ackermann_in_gga(M1, succ(zero)))
   U92_gga(Ret1, =_out_ag(M1)) -> U93_gga(ackermann_in_gga(M1, Ret1))
   U95_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   U97_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U87_gga(ackermann_out_gga(Ret)) -> ackermann_out_gga(Ret)
   U93_gga(ackermann_out_gga(Ret2)) -> U94_gga(=_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(isPlus_in_gga(X, Y))
   U94_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U96_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U98_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0)
   U101_gga(x0)
   U103_gga(x0)
   U77_gga(x0, x1)
   U82_gga(x0, x1)
   U88_gga(x0, x1)
   U99_ggg(x0)
   U101_ggg(x0)
   U103_ggg(x0)
   U78_gga(x0, x1, x2)
   U83_gga(x0, x1, x2)
   U89_gga(x0, x1, x2)
   U100_gga(x0)
   U102_gga(x0)
   U104_gga(x0)
   U79_gga(x0, x1)
   U84_gga(x0, x1)
   U90_gga(x0, x1, x2)
   U100_ggg(x0)
   U102_ggg(x0)
   U104_ggg(x0)
   U80_gga(x0)
   U85_gga(x0)
   U91_gga(x0, x1, x2)
   isPlus_in_gga(x0, x1)
   U81_gga(x0)
   U86_gga(x0)
   U92_gga(x0, x1)
   U95_gga(x0)
   U97_gga(x0)
   U87_gga(x0)
   U93_gga(x0)
   U94_gga(x0)
   U96_gga(x0)
   U98_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(138) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U82_GGA(M, =_out_ag(X)) -> U83_GGA(M, X, =_in_ag(zero)) at position [2] we obtained the following new rules [LPAR04]:

   (U82_GGA(M, =_out_ag(X)) -> U83_GGA(M, X, =_out_ag(zero)),U82_GGA(M, =_out_ag(X)) -> U83_GGA(M, X, =_out_ag(zero)))


----------------------------------------

(139)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U83_GGA(M, X, =_out_ag(X1)) -> U84_GGA(M, =_in_gg(X, X1))
   U84_GGA(M, =_out_gg) -> U85_GGA(isMinus_in_gga(M, succ(zero)))
   U85_GGA(isMinus_out_gga(U)) -> U86_GGA(=_in_ag(U))
   U86_GGA(=_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, succ(zero))
   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, isMinus_in_gga(N, succ(zero)))
   U88_GGA(M, isMinus_out_gga(U)) -> U89_GGA(M, U, =_in_ag(U))
   U89_GGA(M, U, =_out_ag(N1)) -> U90_GGA(M, U, ackermann_in_gga(M, N1))
   U90_GGA(M, U, ackermann_out_gga(Ret1)) -> U91_GGA(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U91_GGA(U, Ret1, isMinus_out_ggg) -> U92_GGA(Ret1, =_in_ag(U))
   U92_GGA(Ret1, =_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, Ret1)
   U89_GGA(M, U, =_out_ag(N1)) -> ACKERMANN_IN_GGA(M, N1)
   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, =_out_ag(N))
   U82_GGA(M, =_out_ag(X)) -> U83_GGA(M, X, =_out_ag(zero))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(isMinus_in_ggg(X, Y, Z))
   U99_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U101_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U103_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U77_gga(N, =_out_ag(X)) -> U78_gga(N, X, =_in_ag(zero))
   U82_gga(M, =_out_ag(X)) -> U83_gga(M, X, =_in_ag(zero))
   U88_gga(M, isMinus_out_gga(U)) -> U89_gga(M, U, =_in_ag(U))
   U99_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U101_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U103_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(isMinus_in_gga(X, Y))
   U78_gga(N, X, =_out_ag(X1)) -> U79_gga(N, =_in_gg(X, X1))
   U83_gga(M, X, =_out_ag(X1)) -> U84_gga(M, =_in_gg(X, X1))
   U89_gga(M, U, =_out_ag(N1)) -> U90_gga(M, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(isMinus_in_ggg(X, Y, Z))
   U100_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U102_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U104_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U79_gga(N, =_out_gg) -> U80_gga(isPlus_in_gga(N, succ(zero)))
   U84_gga(M, =_out_gg) -> U85_gga(isMinus_in_gga(M, succ(zero)))
   U90_gga(M, U, ackermann_out_gga(Ret1)) -> U91_gga(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U102_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U104_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U80_gga(isPlus_out_gga(U)) -> U81_gga(=_in_ag(U))
   U85_gga(isMinus_out_gga(U)) -> U86_gga(=_in_ag(U))
   U91_gga(U, Ret1, isMinus_out_ggg) -> U92_gga(Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(isPlus_in_gga(X, Y))
   U81_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U86_gga(=_out_ag(M1)) -> U87_gga(ackermann_in_gga(M1, succ(zero)))
   U92_gga(Ret1, =_out_ag(M1)) -> U93_gga(ackermann_in_gga(M1, Ret1))
   U95_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   U97_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U87_gga(ackermann_out_gga(Ret)) -> ackermann_out_gga(Ret)
   U93_gga(ackermann_out_gga(Ret2)) -> U94_gga(=_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(isPlus_in_gga(X, Y))
   U94_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U96_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U98_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0)
   U101_gga(x0)
   U103_gga(x0)
   U77_gga(x0, x1)
   U82_gga(x0, x1)
   U88_gga(x0, x1)
   U99_ggg(x0)
   U101_ggg(x0)
   U103_ggg(x0)
   U78_gga(x0, x1, x2)
   U83_gga(x0, x1, x2)
   U89_gga(x0, x1, x2)
   U100_gga(x0)
   U102_gga(x0)
   U104_gga(x0)
   U79_gga(x0, x1)
   U84_gga(x0, x1)
   U90_gga(x0, x1, x2)
   U100_ggg(x0)
   U102_ggg(x0)
   U104_ggg(x0)
   U80_gga(x0)
   U85_gga(x0)
   U91_gga(x0, x1, x2)
   isPlus_in_gga(x0, x1)
   U81_gga(x0)
   U86_gga(x0)
   U92_gga(x0, x1)
   U95_gga(x0)
   U97_gga(x0)
   U87_gga(x0)
   U93_gga(x0)
   U94_gga(x0)
   U96_gga(x0)
   U98_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(140) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U85_GGA(isMinus_out_gga(U)) -> U86_GGA(=_in_ag(U)) at position [0] we obtained the following new rules [LPAR04]:

   (U85_GGA(isMinus_out_gga(U)) -> U86_GGA(=_out_ag(U)),U85_GGA(isMinus_out_gga(U)) -> U86_GGA(=_out_ag(U)))


----------------------------------------

(141)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U83_GGA(M, X, =_out_ag(X1)) -> U84_GGA(M, =_in_gg(X, X1))
   U84_GGA(M, =_out_gg) -> U85_GGA(isMinus_in_gga(M, succ(zero)))
   U86_GGA(=_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, succ(zero))
   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, isMinus_in_gga(N, succ(zero)))
   U88_GGA(M, isMinus_out_gga(U)) -> U89_GGA(M, U, =_in_ag(U))
   U89_GGA(M, U, =_out_ag(N1)) -> U90_GGA(M, U, ackermann_in_gga(M, N1))
   U90_GGA(M, U, ackermann_out_gga(Ret1)) -> U91_GGA(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U91_GGA(U, Ret1, isMinus_out_ggg) -> U92_GGA(Ret1, =_in_ag(U))
   U92_GGA(Ret1, =_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, Ret1)
   U89_GGA(M, U, =_out_ag(N1)) -> ACKERMANN_IN_GGA(M, N1)
   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, =_out_ag(N))
   U82_GGA(M, =_out_ag(X)) -> U83_GGA(M, X, =_out_ag(zero))
   U85_GGA(isMinus_out_gga(U)) -> U86_GGA(=_out_ag(U))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(isMinus_in_ggg(X, Y, Z))
   U99_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U101_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U103_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U77_gga(N, =_out_ag(X)) -> U78_gga(N, X, =_in_ag(zero))
   U82_gga(M, =_out_ag(X)) -> U83_gga(M, X, =_in_ag(zero))
   U88_gga(M, isMinus_out_gga(U)) -> U89_gga(M, U, =_in_ag(U))
   U99_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U101_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U103_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(isMinus_in_gga(X, Y))
   U78_gga(N, X, =_out_ag(X1)) -> U79_gga(N, =_in_gg(X, X1))
   U83_gga(M, X, =_out_ag(X1)) -> U84_gga(M, =_in_gg(X, X1))
   U89_gga(M, U, =_out_ag(N1)) -> U90_gga(M, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(isMinus_in_ggg(X, Y, Z))
   U100_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U102_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U104_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U79_gga(N, =_out_gg) -> U80_gga(isPlus_in_gga(N, succ(zero)))
   U84_gga(M, =_out_gg) -> U85_gga(isMinus_in_gga(M, succ(zero)))
   U90_gga(M, U, ackermann_out_gga(Ret1)) -> U91_gga(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U102_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U104_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U80_gga(isPlus_out_gga(U)) -> U81_gga(=_in_ag(U))
   U85_gga(isMinus_out_gga(U)) -> U86_gga(=_in_ag(U))
   U91_gga(U, Ret1, isMinus_out_ggg) -> U92_gga(Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(isPlus_in_gga(X, Y))
   U81_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U86_gga(=_out_ag(M1)) -> U87_gga(ackermann_in_gga(M1, succ(zero)))
   U92_gga(Ret1, =_out_ag(M1)) -> U93_gga(ackermann_in_gga(M1, Ret1))
   U95_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   U97_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U87_gga(ackermann_out_gga(Ret)) -> ackermann_out_gga(Ret)
   U93_gga(ackermann_out_gga(Ret2)) -> U94_gga(=_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(isPlus_in_gga(X, Y))
   U94_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U96_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U98_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0)
   U101_gga(x0)
   U103_gga(x0)
   U77_gga(x0, x1)
   U82_gga(x0, x1)
   U88_gga(x0, x1)
   U99_ggg(x0)
   U101_ggg(x0)
   U103_ggg(x0)
   U78_gga(x0, x1, x2)
   U83_gga(x0, x1, x2)
   U89_gga(x0, x1, x2)
   U100_gga(x0)
   U102_gga(x0)
   U104_gga(x0)
   U79_gga(x0, x1)
   U84_gga(x0, x1)
   U90_gga(x0, x1, x2)
   U100_ggg(x0)
   U102_ggg(x0)
   U104_ggg(x0)
   U80_gga(x0)
   U85_gga(x0)
   U91_gga(x0, x1, x2)
   isPlus_in_gga(x0, x1)
   U81_gga(x0)
   U86_gga(x0)
   U92_gga(x0, x1)
   U95_gga(x0)
   U97_gga(x0)
   U87_gga(x0)
   U93_gga(x0)
   U94_gga(x0)
   U96_gga(x0)
   U98_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(142) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U88_GGA(M, isMinus_out_gga(U)) -> U89_GGA(M, U, =_in_ag(U)) at position [2] we obtained the following new rules [LPAR04]:

   (U88_GGA(M, isMinus_out_gga(U)) -> U89_GGA(M, U, =_out_ag(U)),U88_GGA(M, isMinus_out_gga(U)) -> U89_GGA(M, U, =_out_ag(U)))


----------------------------------------

(143)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U83_GGA(M, X, =_out_ag(X1)) -> U84_GGA(M, =_in_gg(X, X1))
   U84_GGA(M, =_out_gg) -> U85_GGA(isMinus_in_gga(M, succ(zero)))
   U86_GGA(=_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, succ(zero))
   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, isMinus_in_gga(N, succ(zero)))
   U89_GGA(M, U, =_out_ag(N1)) -> U90_GGA(M, U, ackermann_in_gga(M, N1))
   U90_GGA(M, U, ackermann_out_gga(Ret1)) -> U91_GGA(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U91_GGA(U, Ret1, isMinus_out_ggg) -> U92_GGA(Ret1, =_in_ag(U))
   U92_GGA(Ret1, =_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, Ret1)
   U89_GGA(M, U, =_out_ag(N1)) -> ACKERMANN_IN_GGA(M, N1)
   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, =_out_ag(N))
   U82_GGA(M, =_out_ag(X)) -> U83_GGA(M, X, =_out_ag(zero))
   U85_GGA(isMinus_out_gga(U)) -> U86_GGA(=_out_ag(U))
   U88_GGA(M, isMinus_out_gga(U)) -> U89_GGA(M, U, =_out_ag(U))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(isMinus_in_ggg(X, Y, Z))
   U99_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U101_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U103_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U77_gga(N, =_out_ag(X)) -> U78_gga(N, X, =_in_ag(zero))
   U82_gga(M, =_out_ag(X)) -> U83_gga(M, X, =_in_ag(zero))
   U88_gga(M, isMinus_out_gga(U)) -> U89_gga(M, U, =_in_ag(U))
   U99_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U101_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U103_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(isMinus_in_gga(X, Y))
   U78_gga(N, X, =_out_ag(X1)) -> U79_gga(N, =_in_gg(X, X1))
   U83_gga(M, X, =_out_ag(X1)) -> U84_gga(M, =_in_gg(X, X1))
   U89_gga(M, U, =_out_ag(N1)) -> U90_gga(M, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(isMinus_in_ggg(X, Y, Z))
   U100_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U102_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U104_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U79_gga(N, =_out_gg) -> U80_gga(isPlus_in_gga(N, succ(zero)))
   U84_gga(M, =_out_gg) -> U85_gga(isMinus_in_gga(M, succ(zero)))
   U90_gga(M, U, ackermann_out_gga(Ret1)) -> U91_gga(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U102_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U104_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U80_gga(isPlus_out_gga(U)) -> U81_gga(=_in_ag(U))
   U85_gga(isMinus_out_gga(U)) -> U86_gga(=_in_ag(U))
   U91_gga(U, Ret1, isMinus_out_ggg) -> U92_gga(Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(isPlus_in_gga(X, Y))
   U81_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U86_gga(=_out_ag(M1)) -> U87_gga(ackermann_in_gga(M1, succ(zero)))
   U92_gga(Ret1, =_out_ag(M1)) -> U93_gga(ackermann_in_gga(M1, Ret1))
   U95_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   U97_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U87_gga(ackermann_out_gga(Ret)) -> ackermann_out_gga(Ret)
   U93_gga(ackermann_out_gga(Ret2)) -> U94_gga(=_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(isPlus_in_gga(X, Y))
   U94_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U96_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U98_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0)
   U101_gga(x0)
   U103_gga(x0)
   U77_gga(x0, x1)
   U82_gga(x0, x1)
   U88_gga(x0, x1)
   U99_ggg(x0)
   U101_ggg(x0)
   U103_ggg(x0)
   U78_gga(x0, x1, x2)
   U83_gga(x0, x1, x2)
   U89_gga(x0, x1, x2)
   U100_gga(x0)
   U102_gga(x0)
   U104_gga(x0)
   U79_gga(x0, x1)
   U84_gga(x0, x1)
   U90_gga(x0, x1, x2)
   U100_ggg(x0)
   U102_ggg(x0)
   U104_ggg(x0)
   U80_gga(x0)
   U85_gga(x0)
   U91_gga(x0, x1, x2)
   isPlus_in_gga(x0, x1)
   U81_gga(x0)
   U86_gga(x0)
   U92_gga(x0, x1)
   U95_gga(x0)
   U97_gga(x0)
   U87_gga(x0)
   U93_gga(x0)
   U94_gga(x0)
   U96_gga(x0)
   U98_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(144) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U91_GGA(U, Ret1, isMinus_out_ggg) -> U92_GGA(Ret1, =_in_ag(U)) at position [1] we obtained the following new rules [LPAR04]:

   (U91_GGA(U, Ret1, isMinus_out_ggg) -> U92_GGA(Ret1, =_out_ag(U)),U91_GGA(U, Ret1, isMinus_out_ggg) -> U92_GGA(Ret1, =_out_ag(U)))


----------------------------------------

(145)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U83_GGA(M, X, =_out_ag(X1)) -> U84_GGA(M, =_in_gg(X, X1))
   U84_GGA(M, =_out_gg) -> U85_GGA(isMinus_in_gga(M, succ(zero)))
   U86_GGA(=_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, succ(zero))
   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, isMinus_in_gga(N, succ(zero)))
   U89_GGA(M, U, =_out_ag(N1)) -> U90_GGA(M, U, ackermann_in_gga(M, N1))
   U90_GGA(M, U, ackermann_out_gga(Ret1)) -> U91_GGA(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U92_GGA(Ret1, =_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, Ret1)
   U89_GGA(M, U, =_out_ag(N1)) -> ACKERMANN_IN_GGA(M, N1)
   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, =_out_ag(N))
   U82_GGA(M, =_out_ag(X)) -> U83_GGA(M, X, =_out_ag(zero))
   U85_GGA(isMinus_out_gga(U)) -> U86_GGA(=_out_ag(U))
   U88_GGA(M, isMinus_out_gga(U)) -> U89_GGA(M, U, =_out_ag(U))
   U91_GGA(U, Ret1, isMinus_out_ggg) -> U92_GGA(Ret1, =_out_ag(U))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(isMinus_in_ggg(X, Y, Z))
   U99_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U101_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U103_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U77_gga(N, =_out_ag(X)) -> U78_gga(N, X, =_in_ag(zero))
   U82_gga(M, =_out_ag(X)) -> U83_gga(M, X, =_in_ag(zero))
   U88_gga(M, isMinus_out_gga(U)) -> U89_gga(M, U, =_in_ag(U))
   U99_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U101_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U103_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(isMinus_in_gga(X, Y))
   U78_gga(N, X, =_out_ag(X1)) -> U79_gga(N, =_in_gg(X, X1))
   U83_gga(M, X, =_out_ag(X1)) -> U84_gga(M, =_in_gg(X, X1))
   U89_gga(M, U, =_out_ag(N1)) -> U90_gga(M, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(isMinus_in_ggg(X, Y, Z))
   U100_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U102_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U104_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U79_gga(N, =_out_gg) -> U80_gga(isPlus_in_gga(N, succ(zero)))
   U84_gga(M, =_out_gg) -> U85_gga(isMinus_in_gga(M, succ(zero)))
   U90_gga(M, U, ackermann_out_gga(Ret1)) -> U91_gga(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U102_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U104_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U80_gga(isPlus_out_gga(U)) -> U81_gga(=_in_ag(U))
   U85_gga(isMinus_out_gga(U)) -> U86_gga(=_in_ag(U))
   U91_gga(U, Ret1, isMinus_out_ggg) -> U92_gga(Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(isPlus_in_gga(X, Y))
   U81_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U86_gga(=_out_ag(M1)) -> U87_gga(ackermann_in_gga(M1, succ(zero)))
   U92_gga(Ret1, =_out_ag(M1)) -> U93_gga(ackermann_in_gga(M1, Ret1))
   U95_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   U97_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U87_gga(ackermann_out_gga(Ret)) -> ackermann_out_gga(Ret)
   U93_gga(ackermann_out_gga(Ret2)) -> U94_gga(=_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(isPlus_in_gga(X, Y))
   U94_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U96_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U98_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0)
   U101_gga(x0)
   U103_gga(x0)
   U77_gga(x0, x1)
   U82_gga(x0, x1)
   U88_gga(x0, x1)
   U99_ggg(x0)
   U101_ggg(x0)
   U103_ggg(x0)
   U78_gga(x0, x1, x2)
   U83_gga(x0, x1, x2)
   U89_gga(x0, x1, x2)
   U100_gga(x0)
   U102_gga(x0)
   U104_gga(x0)
   U79_gga(x0, x1)
   U84_gga(x0, x1)
   U90_gga(x0, x1, x2)
   U100_ggg(x0)
   U102_ggg(x0)
   U104_ggg(x0)
   U80_gga(x0)
   U85_gga(x0)
   U91_gga(x0, x1, x2)
   isPlus_in_gga(x0, x1)
   U81_gga(x0)
   U86_gga(x0)
   U92_gga(x0, x1)
   U95_gga(x0)
   U97_gga(x0)
   U87_gga(x0)
   U93_gga(x0)
   U94_gga(x0)
   U96_gga(x0)
   U98_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(146) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U83_GGA(M, X, =_out_ag(X1)) -> U84_GGA(M, =_in_gg(X, X1)) at position [1] we obtained the following new rules [LPAR04]:

   (U83_GGA(y0, x0, =_out_ag(x0)) -> U84_GGA(y0, =_out_gg),U83_GGA(y0, x0, =_out_ag(x0)) -> U84_GGA(y0, =_out_gg))


----------------------------------------

(147)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U84_GGA(M, =_out_gg) -> U85_GGA(isMinus_in_gga(M, succ(zero)))
   U86_GGA(=_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, succ(zero))
   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, isMinus_in_gga(N, succ(zero)))
   U89_GGA(M, U, =_out_ag(N1)) -> U90_GGA(M, U, ackermann_in_gga(M, N1))
   U90_GGA(M, U, ackermann_out_gga(Ret1)) -> U91_GGA(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U92_GGA(Ret1, =_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, Ret1)
   U89_GGA(M, U, =_out_ag(N1)) -> ACKERMANN_IN_GGA(M, N1)
   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, =_out_ag(N))
   U82_GGA(M, =_out_ag(X)) -> U83_GGA(M, X, =_out_ag(zero))
   U85_GGA(isMinus_out_gga(U)) -> U86_GGA(=_out_ag(U))
   U88_GGA(M, isMinus_out_gga(U)) -> U89_GGA(M, U, =_out_ag(U))
   U91_GGA(U, Ret1, isMinus_out_ggg) -> U92_GGA(Ret1, =_out_ag(U))
   U83_GGA(y0, x0, =_out_ag(x0)) -> U84_GGA(y0, =_out_gg)

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(isMinus_in_ggg(X, Y, Z))
   U99_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U101_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U103_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U77_gga(N, =_out_ag(X)) -> U78_gga(N, X, =_in_ag(zero))
   U82_gga(M, =_out_ag(X)) -> U83_gga(M, X, =_in_ag(zero))
   U88_gga(M, isMinus_out_gga(U)) -> U89_gga(M, U, =_in_ag(U))
   U99_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U101_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U103_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(isMinus_in_gga(X, Y))
   U78_gga(N, X, =_out_ag(X1)) -> U79_gga(N, =_in_gg(X, X1))
   U83_gga(M, X, =_out_ag(X1)) -> U84_gga(M, =_in_gg(X, X1))
   U89_gga(M, U, =_out_ag(N1)) -> U90_gga(M, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(isMinus_in_ggg(X, Y, Z))
   U100_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U102_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U104_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U79_gga(N, =_out_gg) -> U80_gga(isPlus_in_gga(N, succ(zero)))
   U84_gga(M, =_out_gg) -> U85_gga(isMinus_in_gga(M, succ(zero)))
   U90_gga(M, U, ackermann_out_gga(Ret1)) -> U91_gga(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U102_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U104_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U80_gga(isPlus_out_gga(U)) -> U81_gga(=_in_ag(U))
   U85_gga(isMinus_out_gga(U)) -> U86_gga(=_in_ag(U))
   U91_gga(U, Ret1, isMinus_out_ggg) -> U92_gga(Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(isPlus_in_gga(X, Y))
   U81_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U86_gga(=_out_ag(M1)) -> U87_gga(ackermann_in_gga(M1, succ(zero)))
   U92_gga(Ret1, =_out_ag(M1)) -> U93_gga(ackermann_in_gga(M1, Ret1))
   U95_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   U97_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U87_gga(ackermann_out_gga(Ret)) -> ackermann_out_gga(Ret)
   U93_gga(ackermann_out_gga(Ret2)) -> U94_gga(=_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(isPlus_in_gga(X, Y))
   U94_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U96_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U98_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0)
   U101_gga(x0)
   U103_gga(x0)
   U77_gga(x0, x1)
   U82_gga(x0, x1)
   U88_gga(x0, x1)
   U99_ggg(x0)
   U101_ggg(x0)
   U103_ggg(x0)
   U78_gga(x0, x1, x2)
   U83_gga(x0, x1, x2)
   U89_gga(x0, x1, x2)
   U100_gga(x0)
   U102_gga(x0)
   U104_gga(x0)
   U79_gga(x0, x1)
   U84_gga(x0, x1)
   U90_gga(x0, x1, x2)
   U100_ggg(x0)
   U102_ggg(x0)
   U104_ggg(x0)
   U80_gga(x0)
   U85_gga(x0)
   U91_gga(x0, x1, x2)
   isPlus_in_gga(x0, x1)
   U81_gga(x0)
   U86_gga(x0)
   U92_gga(x0, x1)
   U95_gga(x0)
   U97_gga(x0)
   U87_gga(x0)
   U93_gga(x0)
   U94_gga(x0)
   U96_gga(x0)
   U98_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(148) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U89_GGA(M, U, =_out_ag(N1)) -> U90_GGA(M, U, ackermann_in_gga(M, N1)) we obtained the following new rules [LPAR04]:

   (U89_GGA(z0, z1, =_out_ag(z1)) -> U90_GGA(z0, z1, ackermann_in_gga(z0, z1)),U89_GGA(z0, z1, =_out_ag(z1)) -> U90_GGA(z0, z1, ackermann_in_gga(z0, z1)))


----------------------------------------

(149)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U84_GGA(M, =_out_gg) -> U85_GGA(isMinus_in_gga(M, succ(zero)))
   U86_GGA(=_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, succ(zero))
   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, isMinus_in_gga(N, succ(zero)))
   U90_GGA(M, U, ackermann_out_gga(Ret1)) -> U91_GGA(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U92_GGA(Ret1, =_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, Ret1)
   U89_GGA(M, U, =_out_ag(N1)) -> ACKERMANN_IN_GGA(M, N1)
   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, =_out_ag(N))
   U82_GGA(M, =_out_ag(X)) -> U83_GGA(M, X, =_out_ag(zero))
   U85_GGA(isMinus_out_gga(U)) -> U86_GGA(=_out_ag(U))
   U88_GGA(M, isMinus_out_gga(U)) -> U89_GGA(M, U, =_out_ag(U))
   U91_GGA(U, Ret1, isMinus_out_ggg) -> U92_GGA(Ret1, =_out_ag(U))
   U83_GGA(y0, x0, =_out_ag(x0)) -> U84_GGA(y0, =_out_gg)
   U89_GGA(z0, z1, =_out_ag(z1)) -> U90_GGA(z0, z1, ackermann_in_gga(z0, z1))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(isMinus_in_ggg(X, Y, Z))
   U99_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U101_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U103_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U77_gga(N, =_out_ag(X)) -> U78_gga(N, X, =_in_ag(zero))
   U82_gga(M, =_out_ag(X)) -> U83_gga(M, X, =_in_ag(zero))
   U88_gga(M, isMinus_out_gga(U)) -> U89_gga(M, U, =_in_ag(U))
   U99_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U101_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U103_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(isMinus_in_gga(X, Y))
   U78_gga(N, X, =_out_ag(X1)) -> U79_gga(N, =_in_gg(X, X1))
   U83_gga(M, X, =_out_ag(X1)) -> U84_gga(M, =_in_gg(X, X1))
   U89_gga(M, U, =_out_ag(N1)) -> U90_gga(M, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(isMinus_in_ggg(X, Y, Z))
   U100_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U102_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U104_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U79_gga(N, =_out_gg) -> U80_gga(isPlus_in_gga(N, succ(zero)))
   U84_gga(M, =_out_gg) -> U85_gga(isMinus_in_gga(M, succ(zero)))
   U90_gga(M, U, ackermann_out_gga(Ret1)) -> U91_gga(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U102_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U104_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U80_gga(isPlus_out_gga(U)) -> U81_gga(=_in_ag(U))
   U85_gga(isMinus_out_gga(U)) -> U86_gga(=_in_ag(U))
   U91_gga(U, Ret1, isMinus_out_ggg) -> U92_gga(Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(isPlus_in_gga(X, Y))
   U81_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U86_gga(=_out_ag(M1)) -> U87_gga(ackermann_in_gga(M1, succ(zero)))
   U92_gga(Ret1, =_out_ag(M1)) -> U93_gga(ackermann_in_gga(M1, Ret1))
   U95_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   U97_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U87_gga(ackermann_out_gga(Ret)) -> ackermann_out_gga(Ret)
   U93_gga(ackermann_out_gga(Ret2)) -> U94_gga(=_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(isPlus_in_gga(X, Y))
   U94_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U96_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U98_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0)
   U101_gga(x0)
   U103_gga(x0)
   U77_gga(x0, x1)
   U82_gga(x0, x1)
   U88_gga(x0, x1)
   U99_ggg(x0)
   U101_ggg(x0)
   U103_ggg(x0)
   U78_gga(x0, x1, x2)
   U83_gga(x0, x1, x2)
   U89_gga(x0, x1, x2)
   U100_gga(x0)
   U102_gga(x0)
   U104_gga(x0)
   U79_gga(x0, x1)
   U84_gga(x0, x1)
   U90_gga(x0, x1, x2)
   U100_ggg(x0)
   U102_ggg(x0)
   U104_ggg(x0)
   U80_gga(x0)
   U85_gga(x0)
   U91_gga(x0, x1, x2)
   isPlus_in_gga(x0, x1)
   U81_gga(x0)
   U86_gga(x0)
   U92_gga(x0, x1)
   U95_gga(x0)
   U97_gga(x0)
   U87_gga(x0)
   U93_gga(x0)
   U94_gga(x0)
   U96_gga(x0)
   U98_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(150) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U89_GGA(M, U, =_out_ag(N1)) -> ACKERMANN_IN_GGA(M, N1) we obtained the following new rules [LPAR04]:

   (U89_GGA(z0, z1, =_out_ag(z1)) -> ACKERMANN_IN_GGA(z0, z1),U89_GGA(z0, z1, =_out_ag(z1)) -> ACKERMANN_IN_GGA(z0, z1))


----------------------------------------

(151)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U84_GGA(M, =_out_gg) -> U85_GGA(isMinus_in_gga(M, succ(zero)))
   U86_GGA(=_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, succ(zero))
   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, isMinus_in_gga(N, succ(zero)))
   U90_GGA(M, U, ackermann_out_gga(Ret1)) -> U91_GGA(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U92_GGA(Ret1, =_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, Ret1)
   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, =_out_ag(N))
   U82_GGA(M, =_out_ag(X)) -> U83_GGA(M, X, =_out_ag(zero))
   U85_GGA(isMinus_out_gga(U)) -> U86_GGA(=_out_ag(U))
   U88_GGA(M, isMinus_out_gga(U)) -> U89_GGA(M, U, =_out_ag(U))
   U91_GGA(U, Ret1, isMinus_out_ggg) -> U92_GGA(Ret1, =_out_ag(U))
   U83_GGA(y0, x0, =_out_ag(x0)) -> U84_GGA(y0, =_out_gg)
   U89_GGA(z0, z1, =_out_ag(z1)) -> U90_GGA(z0, z1, ackermann_in_gga(z0, z1))
   U89_GGA(z0, z1, =_out_ag(z1)) -> ACKERMANN_IN_GGA(z0, z1)

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(isMinus_in_ggg(X, Y, Z))
   U99_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U101_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U103_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U77_gga(N, =_out_ag(X)) -> U78_gga(N, X, =_in_ag(zero))
   U82_gga(M, =_out_ag(X)) -> U83_gga(M, X, =_in_ag(zero))
   U88_gga(M, isMinus_out_gga(U)) -> U89_gga(M, U, =_in_ag(U))
   U99_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U101_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U103_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(isMinus_in_gga(X, Y))
   U78_gga(N, X, =_out_ag(X1)) -> U79_gga(N, =_in_gg(X, X1))
   U83_gga(M, X, =_out_ag(X1)) -> U84_gga(M, =_in_gg(X, X1))
   U89_gga(M, U, =_out_ag(N1)) -> U90_gga(M, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(isMinus_in_ggg(X, Y, Z))
   U100_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U102_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U104_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U79_gga(N, =_out_gg) -> U80_gga(isPlus_in_gga(N, succ(zero)))
   U84_gga(M, =_out_gg) -> U85_gga(isMinus_in_gga(M, succ(zero)))
   U90_gga(M, U, ackermann_out_gga(Ret1)) -> U91_gga(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U102_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U104_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U80_gga(isPlus_out_gga(U)) -> U81_gga(=_in_ag(U))
   U85_gga(isMinus_out_gga(U)) -> U86_gga(=_in_ag(U))
   U91_gga(U, Ret1, isMinus_out_ggg) -> U92_gga(Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(isPlus_in_gga(X, Y))
   U81_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U86_gga(=_out_ag(M1)) -> U87_gga(ackermann_in_gga(M1, succ(zero)))
   U92_gga(Ret1, =_out_ag(M1)) -> U93_gga(ackermann_in_gga(M1, Ret1))
   U95_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   U97_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U87_gga(ackermann_out_gga(Ret)) -> ackermann_out_gga(Ret)
   U93_gga(ackermann_out_gga(Ret2)) -> U94_gga(=_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(isPlus_in_gga(X, Y))
   U94_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U96_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U98_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0)
   U101_gga(x0)
   U103_gga(x0)
   U77_gga(x0, x1)
   U82_gga(x0, x1)
   U88_gga(x0, x1)
   U99_ggg(x0)
   U101_ggg(x0)
   U103_ggg(x0)
   U78_gga(x0, x1, x2)
   U83_gga(x0, x1, x2)
   U89_gga(x0, x1, x2)
   U100_gga(x0)
   U102_gga(x0)
   U104_gga(x0)
   U79_gga(x0, x1)
   U84_gga(x0, x1)
   U90_gga(x0, x1, x2)
   U100_ggg(x0)
   U102_ggg(x0)
   U104_ggg(x0)
   U80_gga(x0)
   U85_gga(x0)
   U91_gga(x0, x1, x2)
   isPlus_in_gga(x0, x1)
   U81_gga(x0)
   U86_gga(x0)
   U92_gga(x0, x1)
   U95_gga(x0)
   U97_gga(x0)
   U87_gga(x0)
   U93_gga(x0)
   U94_gga(x0)
   U96_gga(x0)
   U98_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(152) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U83_GGA(y0, x0, =_out_ag(x0)) -> U84_GGA(y0, =_out_gg) we obtained the following new rules [LPAR04]:

   (U83_GGA(z0, zero, =_out_ag(zero)) -> U84_GGA(z0, =_out_gg),U83_GGA(z0, zero, =_out_ag(zero)) -> U84_GGA(z0, =_out_gg))


----------------------------------------

(153)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U84_GGA(M, =_out_gg) -> U85_GGA(isMinus_in_gga(M, succ(zero)))
   U86_GGA(=_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, succ(zero))
   ACKERMANN_IN_GGA(M, N) -> U88_GGA(M, isMinus_in_gga(N, succ(zero)))
   U90_GGA(M, U, ackermann_out_gga(Ret1)) -> U91_GGA(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U92_GGA(Ret1, =_out_ag(M1)) -> ACKERMANN_IN_GGA(M1, Ret1)
   ACKERMANN_IN_GGA(M, N) -> U82_GGA(M, =_out_ag(N))
   U82_GGA(M, =_out_ag(X)) -> U83_GGA(M, X, =_out_ag(zero))
   U85_GGA(isMinus_out_gga(U)) -> U86_GGA(=_out_ag(U))
   U88_GGA(M, isMinus_out_gga(U)) -> U89_GGA(M, U, =_out_ag(U))
   U91_GGA(U, Ret1, isMinus_out_ggg) -> U92_GGA(Ret1, =_out_ag(U))
   U89_GGA(z0, z1, =_out_ag(z1)) -> U90_GGA(z0, z1, ackermann_in_gga(z0, z1))
   U89_GGA(z0, z1, =_out_ag(z1)) -> ACKERMANN_IN_GGA(z0, z1)
   U83_GGA(z0, zero, =_out_ag(zero)) -> U84_GGA(z0, =_out_gg)

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   =_in_gg(X, X) -> =_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U99_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U101_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U103_gga(isMinus_in_gga(X, Y))
   ackermann_in_gga(M, N) -> U77_gga(N, =_in_ag(M))
   ackermann_in_gga(M, N) -> U82_gga(M, =_in_ag(N))
   ackermann_in_gga(M, N) -> U88_gga(M, isMinus_in_gga(N, succ(zero)))
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(isMinus_in_ggg(X, Y, Z))
   U99_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U101_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U103_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U77_gga(N, =_out_ag(X)) -> U78_gga(N, X, =_in_ag(zero))
   U82_gga(M, =_out_ag(X)) -> U83_gga(M, X, =_in_ag(zero))
   U88_gga(M, isMinus_out_gga(U)) -> U89_gga(M, U, =_in_ag(U))
   U99_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U101_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U103_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U100_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U102_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U104_gga(isMinus_in_gga(X, Y))
   U78_gga(N, X, =_out_ag(X1)) -> U79_gga(N, =_in_gg(X, X1))
   U83_gga(M, X, =_out_ag(X1)) -> U84_gga(M, =_in_gg(X, X1))
   U89_gga(M, U, =_out_ag(N1)) -> U90_gga(M, U, ackermann_in_gga(M, N1))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(isMinus_in_ggg(X, Y, Z))
   U100_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U102_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U104_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U79_gga(N, =_out_gg) -> U80_gga(isPlus_in_gga(N, succ(zero)))
   U84_gga(M, =_out_gg) -> U85_gga(isMinus_in_gga(M, succ(zero)))
   U90_gga(M, U, ackermann_out_gga(Ret1)) -> U91_gga(U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   U100_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U102_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U104_ggg(isMinus_out_ggg) -> isMinus_out_ggg
   U80_gga(isPlus_out_gga(U)) -> U81_gga(=_in_ag(U))
   U85_gga(isMinus_out_gga(U)) -> U86_gga(=_in_ag(U))
   U91_gga(U, Ret1, isMinus_out_ggg) -> U92_gga(Ret1, =_in_ag(U))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), succ(Y)) -> U95_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), succ(Y)) -> U97_gga(isPlus_in_gga(X, Y))
   U81_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U86_gga(=_out_ag(M1)) -> U87_gga(ackermann_in_gga(M1, succ(zero)))
   U92_gga(Ret1, =_out_ag(M1)) -> U93_gga(ackermann_in_gga(M1, Ret1))
   U95_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   U97_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U87_gga(ackermann_out_gga(Ret)) -> ackermann_out_gga(Ret)
   U93_gga(ackermann_out_gga(Ret2)) -> U94_gga(=_in_ag(Ret2))
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), pred(Y)) -> U96_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), pred(Y)) -> U98_gga(isPlus_in_gga(X, Y))
   U94_gga(=_out_ag(Ret)) -> ackermann_out_gga(Ret)
   U96_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U98_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))

The set Q consists of the following terms:

   =_in_ag(x0)
   =_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   ackermann_in_gga(x0, x1)
   isMinus_in_ggg(x0, x1, x2)
   U99_gga(x0)
   U101_gga(x0)
   U103_gga(x0)
   U77_gga(x0, x1)
   U82_gga(x0, x1)
   U88_gga(x0, x1)
   U99_ggg(x0)
   U101_ggg(x0)
   U103_ggg(x0)
   U78_gga(x0, x1, x2)
   U83_gga(x0, x1, x2)
   U89_gga(x0, x1, x2)
   U100_gga(x0)
   U102_gga(x0)
   U104_gga(x0)
   U79_gga(x0, x1)
   U84_gga(x0, x1)
   U90_gga(x0, x1, x2)
   U100_ggg(x0)
   U102_ggg(x0)
   U104_ggg(x0)
   U80_gga(x0)
   U85_gga(x0)
   U91_gga(x0, x1, x2)
   isPlus_in_gga(x0, x1)
   U81_gga(x0)
   U86_gga(x0)
   U92_gga(x0, x1)
   U95_gga(x0)
   U97_gga(x0)
   U87_gga(x0)
   U93_gga(x0)
   U94_gga(x0)
   U96_gga(x0)
   U98_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(154)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X2, zero))
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X2))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U128_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U129_gg(X, Y, isGreater_in_gg(X, Y))
   U129_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U128_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X2)) -> U4_gg(M, N, =_in_ag(X5, M))
   U4_gg(M, N, =_out_ag(X5, M)) -> U5_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U6_gg(M, N, =_in_gg(X5, X6))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U6_gg(M, N, =_out_gg(X5, X6)) -> U7_gg(M, N, =_in_ag(X3, N))
   U7_gg(M, N, =_out_ag(X3, N)) -> U8_gg(M, N, X3, =_in_ag(X4, zero))
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U9_gg(M, N, isGreater_in_gg(X3, X4))
   U9_gg(M, N, isGreater_out_gg(X3, X4)) -> U10_gg(M, N, =_in_ag(X7, N))
   U10_gg(M, N, =_out_ag(X7, N)) -> U11_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U12_gg(M, N, =_in_gg(X7, X8))
   U12_gg(M, N, =_out_gg(X7, X8)) -> U13_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U77_gga(M, N, Ret, =_in_ag(X, M))
   U77_gga(M, N, Ret, =_out_ag(X, M)) -> U78_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U78_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U79_gga(M, N, Ret, =_in_gg(X, X1))
   U79_gga(M, N, Ret, =_out_gg(X, X1)) -> U80_gga(M, N, Ret, isPlus_in_gga(N, succ(zero), U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U95_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U96_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U97_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U98_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U98_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U97_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U96_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U95_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U80_gga(M, N, Ret, isPlus_out_gga(N, succ(zero), U)) -> U81_gga(M, N, Ret, =_in_ag(Ret, U))
   U81_gga(M, N, Ret, =_out_ag(Ret, U)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U82_gga(M, N, Ret, =_in_ag(X, N))
   U82_gga(M, N, Ret, =_out_ag(X, N)) -> U83_gga(M, N, Ret, X, =_in_ag(X1, zero))
   U83_gga(M, N, Ret, X, =_out_ag(X1, zero)) -> U84_gga(M, N, Ret, =_in_gg(X, X1))
   U84_gga(M, N, Ret, =_out_gg(X, X1)) -> U85_gga(M, N, Ret, isMinus_in_gga(M, succ(zero), U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U99_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U100_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U101_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U102_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U103_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U104_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U104_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U103_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U102_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U101_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U100_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U99_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U85_gga(M, N, Ret, isMinus_out_gga(M, succ(zero), U)) -> U86_gga(M, N, Ret, =_in_ag(M1, U))
   U86_gga(M, N, Ret, =_out_ag(M1, U)) -> U87_gga(M, N, Ret, ackermann_in_gga(M1, succ(zero), Ret))
   ackermann_in_gga(M, N, Ret) -> U88_gga(M, N, Ret, isMinus_in_gga(N, succ(zero), U))
   U88_gga(M, N, Ret, isMinus_out_gga(N, succ(zero), U)) -> U89_gga(M, N, Ret, U, =_in_ag(N1, U))
   U89_gga(M, N, Ret, U, =_out_ag(N1, U)) -> U90_gga(M, N, Ret, U, ackermann_in_gga(M, N1, Ret1))
   U90_gga(M, N, Ret, U, ackermann_out_gga(M, N1, Ret1)) -> U91_gga(M, N, Ret, U, Ret1, isMinus_in_ggg(M, succ(zero), U))
   isMinus_in_ggg(X, zero, X) -> isMinus_out_ggg(X, zero, X)
   isMinus_in_ggg(zero, succ(Y), pred(Z)) -> U99_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(zero, pred(Y), succ(Z)) -> U100_ggg(Y, Z, isMinus_in_ggg(zero, Y, Z))
   isMinus_in_ggg(succ(X), succ(Y), Z) -> U101_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(succ(X), pred(Y), succ(succ(Z))) -> U102_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), succ(Y), pred(pred(Z))) -> U103_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   isMinus_in_ggg(pred(X), pred(Y), Z) -> U104_ggg(X, Y, Z, isMinus_in_ggg(X, Y, Z))
   U104_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), pred(Y), Z)
   U103_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(pred(X), succ(Y), pred(pred(Z)))
   U102_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), pred(Y), succ(succ(Z)))
   U101_ggg(X, Y, Z, isMinus_out_ggg(X, Y, Z)) -> isMinus_out_ggg(succ(X), succ(Y), Z)
   U100_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, pred(Y), succ(Z))
   U99_ggg(Y, Z, isMinus_out_ggg(zero, Y, Z)) -> isMinus_out_ggg(zero, succ(Y), pred(Z))
   U91_gga(M, N, Ret, U, Ret1, isMinus_out_ggg(M, succ(zero), U)) -> U92_gga(M, N, Ret, Ret1, =_in_ag(M1, U))
   U92_gga(M, N, Ret, Ret1, =_out_ag(M1, U)) -> U93_gga(M, N, Ret, ackermann_in_gga(M1, Ret1, Ret2))
   U93_gga(M, N, Ret, ackermann_out_gga(M1, Ret1, Ret2)) -> U94_gga(M, N, Ret, =_in_ag(Ret, Ret2))
   U94_gga(M, N, Ret, =_out_ag(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U87_gga(M, N, Ret, ackermann_out_gga(M1, succ(zero), Ret)) -> ackermann_out_gga(M, N, Ret)
   U13_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U11_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U14_gg(M, N, isLess_in_gg(X7, X8))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U130_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U131_gg(X, Y, isLess_in_gg(X, Y))
   U131_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U130_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U14_gg(M, N, isLess_out_gg(X7, X8)) -> U15_gg(M, N, ackermann_in_gga(M, N, X1))
   U15_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U8_gg(M, N, X3, =_out_ag(X4, zero)) -> U16_gg(M, N, =_in_gg(X3, X4))
   U16_gg(M, N, =_out_gg(X3, X4)) -> U17_gg(M, N, =_in_ag(X7, N))
   U17_gg(M, N, =_out_ag(X7, N)) -> U18_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U19_gg(M, N, =_in_gg(X7, X8))
   U19_gg(M, N, =_out_gg(X7, X8)) -> U20_gg(M, N, ackermann_in_gga(M, N, X1))
   U20_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U18_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U21_gg(M, N, isLess_in_gg(X7, X8))
   U21_gg(M, N, isLess_out_gg(X7, X8)) -> U22_gg(M, N, ackermann_in_gga(M, N, X1))
   U22_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U5_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U23_gg(M, N, isLess_in_gg(X5, X6))
   U23_gg(M, N, isLess_out_gg(X5, X6)) -> U24_gg(M, N, =_in_ag(X3, N))
   U24_gg(M, N, =_out_ag(X3, N)) -> U25_gg(M, N, X3, =_in_ag(X4, zero))
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U26_gg(M, N, isGreater_in_gg(X3, X4))
   U26_gg(M, N, isGreater_out_gg(X3, X4)) -> U27_gg(M, N, =_in_ag(X7, N))
   U27_gg(M, N, =_out_ag(X7, N)) -> U28_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U29_gg(M, N, =_in_gg(X7, X8))
   U29_gg(M, N, =_out_gg(X7, X8)) -> U30_gg(M, N, ackermann_in_gga(M, N, X1))
   U30_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U28_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U31_gg(M, N, isLess_in_gg(X7, X8))
   U31_gg(M, N, isLess_out_gg(X7, X8)) -> U32_gg(M, N, ackermann_in_gga(M, N, X1))
   U32_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U25_gg(M, N, X3, =_out_ag(X4, zero)) -> U33_gg(M, N, =_in_gg(X3, X4))
   U33_gg(M, N, =_out_gg(X3, X4)) -> U34_gg(M, N, =_in_ag(X7, N))
   U34_gg(M, N, =_out_ag(X7, N)) -> U35_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U36_gg(M, N, =_in_gg(X7, X8))
   U36_gg(M, N, =_out_gg(X7, X8)) -> U37_gg(M, N, ackermann_in_gga(M, N, X1))
   U37_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U35_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U38_gg(M, N, isLess_in_gg(X7, X8))
   U38_gg(M, N, isLess_out_gg(X7, X8)) -> U39_gg(M, N, ackermann_in_gga(M, N, X1))
   U39_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X2, zero)) -> U40_gg(M, N, =_in_gg(X, X2))
   U40_gg(M, N, =_out_gg(X, X2)) -> U41_gg(M, N, =_in_ag(X5, M))
   U41_gg(M, N, =_out_ag(X5, M)) -> U42_gg(M, N, X5, =_in_ag(X6, succ(succ(succ(zero)))))
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U43_gg(M, N, =_in_gg(X5, X6))
   U43_gg(M, N, =_out_gg(X5, X6)) -> U44_gg(M, N, =_in_ag(X3, N))
   U44_gg(M, N, =_out_ag(X3, N)) -> U45_gg(M, N, X3, =_in_ag(X4, zero))
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U46_gg(M, N, isGreater_in_gg(X3, X4))
   U46_gg(M, N, isGreater_out_gg(X3, X4)) -> U47_gg(M, N, =_in_ag(X7, N))
   U47_gg(M, N, =_out_ag(X7, N)) -> U48_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U49_gg(M, N, =_in_gg(X7, X8))
   U49_gg(M, N, =_out_gg(X7, X8)) -> U50_gg(M, N, ackermann_in_gga(M, N, X1))
   U50_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U48_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U51_gg(M, N, isLess_in_gg(X7, X8))
   U51_gg(M, N, isLess_out_gg(X7, X8)) -> U52_gg(M, N, ackermann_in_gga(M, N, X1))
   U52_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U45_gg(M, N, X3, =_out_ag(X4, zero)) -> U53_gg(M, N, =_in_gg(X3, X4))
   U53_gg(M, N, =_out_gg(X3, X4)) -> U54_gg(M, N, =_in_ag(X7, N))
   U54_gg(M, N, =_out_ag(X7, N)) -> U55_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U56_gg(M, N, =_in_gg(X7, X8))
   U56_gg(M, N, =_out_gg(X7, X8)) -> U57_gg(M, N, ackermann_in_gga(M, N, X1))
   U57_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U55_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U58_gg(M, N, isLess_in_gg(X7, X8))
   U58_gg(M, N, isLess_out_gg(X7, X8)) -> U59_gg(M, N, ackermann_in_gga(M, N, X1))
   U59_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U42_gg(M, N, X5, =_out_ag(X6, succ(succ(succ(zero))))) -> U60_gg(M, N, isLess_in_gg(X5, X6))
   U60_gg(M, N, isLess_out_gg(X5, X6)) -> U61_gg(M, N, =_in_ag(X3, N))
   U61_gg(M, N, =_out_ag(X3, N)) -> U62_gg(M, N, X3, =_in_ag(X4, zero))
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U63_gg(M, N, isGreater_in_gg(X3, X4))
   U63_gg(M, N, isGreater_out_gg(X3, X4)) -> U64_gg(M, N, =_in_ag(X7, N))
   U64_gg(M, N, =_out_ag(X7, N)) -> U65_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U66_gg(M, N, =_in_gg(X7, X8))
   U66_gg(M, N, =_out_gg(X7, X8)) -> U67_gg(M, N, ackermann_in_gga(M, N, X1))
   U67_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U65_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U68_gg(M, N, isLess_in_gg(X7, X8))
   U68_gg(M, N, isLess_out_gg(X7, X8)) -> U69_gg(M, N, ackermann_in_gga(M, N, X1))
   U69_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U62_gg(M, N, X3, =_out_ag(X4, zero)) -> U70_gg(M, N, =_in_gg(X3, X4))
   U70_gg(M, N, =_out_gg(X3, X4)) -> U71_gg(M, N, =_in_ag(X7, N))
   U71_gg(M, N, =_out_ag(X7, N)) -> U72_gg(M, N, X7, =_in_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero)))))))))))))))))))))))))
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U73_gg(M, N, =_in_gg(X7, X8))
   U73_gg(M, N, =_out_gg(X7, X8)) -> U74_gg(M, N, ackermann_in_gga(M, N, X1))
   U74_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)
   U72_gg(M, N, X7, =_out_ag(X8, succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(succ(zero))))))))))))))))))))))))) -> U75_gg(M, N, isLess_in_gg(X7, X8))
   U75_gg(M, N, isLess_out_gg(X7, X8)) -> U76_gg(M, N, ackermann_in_gga(M, N, X1))
   U76_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U128_gg(x1, x2, x3)  =  U128_gg(x3)

U129_gg(x1, x2, x3)  =  U129_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

U8_gg(x1, x2, x3, x4)  =  U8_gg(x1, x2, x3, x4)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3, x4)  =  U11_gg(x1, x2, x3, x4)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U77_gga(x1, x2, x3, x4)  =  U77_gga(x2, x4)

U78_gga(x1, x2, x3, x4, x5)  =  U78_gga(x2, x4, x5)

U79_gga(x1, x2, x3, x4)  =  U79_gga(x2, x4)

U80_gga(x1, x2, x3, x4)  =  U80_gga(x4)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

U95_gga(x1, x2, x3, x4)  =  U95_gga(x4)

U96_gga(x1, x2, x3, x4)  =  U96_gga(x4)

U97_gga(x1, x2, x3, x4)  =  U97_gga(x4)

U98_gga(x1, x2, x3, x4)  =  U98_gga(x4)

U81_gga(x1, x2, x3, x4)  =  U81_gga(x4)

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x3)

U82_gga(x1, x2, x3, x4)  =  U82_gga(x1, x4)

U83_gga(x1, x2, x3, x4, x5)  =  U83_gga(x1, x4, x5)

U84_gga(x1, x2, x3, x4)  =  U84_gga(x1, x4)

U85_gga(x1, x2, x3, x4)  =  U85_gga(x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U99_gga(x1, x2, x3)  =  U99_gga(x3)

U100_gga(x1, x2, x3)  =  U100_gga(x3)

U101_gga(x1, x2, x3, x4)  =  U101_gga(x4)

U102_gga(x1, x2, x3, x4)  =  U102_gga(x4)

U103_gga(x1, x2, x3, x4)  =  U103_gga(x4)

U104_gga(x1, x2, x3, x4)  =  U104_gga(x4)

U86_gga(x1, x2, x3, x4)  =  U86_gga(x4)

U87_gga(x1, x2, x3, x4)  =  U87_gga(x4)

U88_gga(x1, x2, x3, x4)  =  U88_gga(x1, x4)

U89_gga(x1, x2, x3, x4, x5)  =  U89_gga(x1, x4, x5)

U90_gga(x1, x2, x3, x4, x5)  =  U90_gga(x1, x4, x5)

U91_gga(x1, x2, x3, x4, x5, x6)  =  U91_gga(x4, x5, x6)

isMinus_in_ggg(x1, x2, x3)  =  isMinus_in_ggg(x1, x2, x3)

isMinus_out_ggg(x1, x2, x3)  =  isMinus_out_ggg

U99_ggg(x1, x2, x3)  =  U99_ggg(x3)

U100_ggg(x1, x2, x3)  =  U100_ggg(x3)

U101_ggg(x1, x2, x3, x4)  =  U101_ggg(x4)

U102_ggg(x1, x2, x3, x4)  =  U102_ggg(x4)

U103_ggg(x1, x2, x3, x4)  =  U103_ggg(x4)

U104_ggg(x1, x2, x3, x4)  =  U104_ggg(x4)

U92_gga(x1, x2, x3, x4, x5)  =  U92_gga(x4, x5)

U93_gga(x1, x2, x3, x4)  =  U93_gga(x4)

U94_gga(x1, x2, x3, x4)  =  U94_gga(x4)

main_out_gg(x1, x2)  =  main_out_gg

U14_gg(x1, x2, x3)  =  U14_gg(x1, x2, x3)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U130_gg(x1, x2, x3)  =  U130_gg(x3)

U131_gg(x1, x2, x3)  =  U131_gg(x3)

U15_gg(x1, x2, x3)  =  U15_gg(x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3, x4)  =  U18_gg(x1, x2, x3, x4)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

U21_gg(x1, x2, x3)  =  U21_gg(x1, x2, x3)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

U23_gg(x1, x2, x3)  =  U23_gg(x1, x2, x3)

U24_gg(x1, x2, x3)  =  U24_gg(x1, x2, x3)

U25_gg(x1, x2, x3, x4)  =  U25_gg(x1, x2, x3, x4)

U26_gg(x1, x2, x3)  =  U26_gg(x1, x2, x3)

U27_gg(x1, x2, x3)  =  U27_gg(x1, x2, x3)

U28_gg(x1, x2, x3, x4)  =  U28_gg(x1, x2, x3, x4)

U29_gg(x1, x2, x3)  =  U29_gg(x1, x2, x3)

U30_gg(x1, x2, x3)  =  U30_gg(x3)

U31_gg(x1, x2, x3)  =  U31_gg(x1, x2, x3)

U32_gg(x1, x2, x3)  =  U32_gg(x3)

U33_gg(x1, x2, x3)  =  U33_gg(x1, x2, x3)

U34_gg(x1, x2, x3)  =  U34_gg(x1, x2, x3)

U35_gg(x1, x2, x3, x4)  =  U35_gg(x1, x2, x3, x4)

U36_gg(x1, x2, x3)  =  U36_gg(x1, x2, x3)

U37_gg(x1, x2, x3)  =  U37_gg(x3)

U38_gg(x1, x2, x3)  =  U38_gg(x1, x2, x3)

U39_gg(x1, x2, x3)  =  U39_gg(x3)

U40_gg(x1, x2, x3)  =  U40_gg(x1, x2, x3)

U41_gg(x1, x2, x3)  =  U41_gg(x1, x2, x3)

U42_gg(x1, x2, x3, x4)  =  U42_gg(x1, x2, x3, x4)

U43_gg(x1, x2, x3)  =  U43_gg(x1, x2, x3)

U44_gg(x1, x2, x3)  =  U44_gg(x1, x2, x3)

U45_gg(x1, x2, x3, x4)  =  U45_gg(x1, x2, x3, x4)

U46_gg(x1, x2, x3)  =  U46_gg(x1, x2, x3)

U47_gg(x1, x2, x3)  =  U47_gg(x1, x2, x3)

U48_gg(x1, x2, x3, x4)  =  U48_gg(x1, x2, x3, x4)

U49_gg(x1, x2, x3)  =  U49_gg(x1, x2, x3)

U50_gg(x1, x2, x3)  =  U50_gg(x3)

U51_gg(x1, x2, x3)  =  U51_gg(x1, x2, x3)

U52_gg(x1, x2, x3)  =  U52_gg(x3)

U53_gg(x1, x2, x3)  =  U53_gg(x1, x2, x3)

U54_gg(x1, x2, x3)  =  U54_gg(x1, x2, x3)

U55_gg(x1, x2, x3, x4)  =  U55_gg(x1, x2, x3, x4)

U56_gg(x1, x2, x3)  =  U56_gg(x1, x2, x3)

U57_gg(x1, x2, x3)  =  U57_gg(x3)

U58_gg(x1, x2, x3)  =  U58_gg(x1, x2, x3)

U59_gg(x1, x2, x3)  =  U59_gg(x3)

U60_gg(x1, x2, x3)  =  U60_gg(x1, x2, x3)

U61_gg(x1, x2, x3)  =  U61_gg(x1, x2, x3)

U62_gg(x1, x2, x3, x4)  =  U62_gg(x1, x2, x3, x4)

U63_gg(x1, x2, x3)  =  U63_gg(x1, x2, x3)

U64_gg(x1, x2, x3)  =  U64_gg(x1, x2, x3)

U65_gg(x1, x2, x3, x4)  =  U65_gg(x1, x2, x3, x4)

U66_gg(x1, x2, x3)  =  U66_gg(x1, x2, x3)

U67_gg(x1, x2, x3)  =  U67_gg(x3)

U68_gg(x1, x2, x3)  =  U68_gg(x1, x2, x3)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3, x4)  =  U72_gg(x1, x2, x3, x4)

U73_gg(x1, x2, x3)  =  U73_gg(x1, x2, x3)

U74_gg(x1, x2, x3)  =  U74_gg(x3)

U75_gg(x1, x2, x3)  =  U75_gg(x1, x2, x3)

U76_gg(x1, x2, x3)  =  U76_gg(x3)

ISGREATER_IN_GG(x1, x2)  =  ISGREATER_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(155) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(156)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(157) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(158)
Obligation:
Clauses:

main(M, N) :- ','(>=(M, 0), ','(=<(M, 3), ','(>=(N, 0), ','(=<(N, 23), ackermann(M, N, X1))))).
ackermann(M, N, Ret) :- ','(=:=(M, 0), is(Ret, +(N, 1))).
ackermann(M, N, Ret) :- ','(=:=(N, 0), ','(is(M1, -(M, 1)), ackermann(M1, 1, Ret))).
ackermann(M, N, Ret) :- ','(is(N1, -(N, 1)), ','(ackermann(M, N1, Ret1), ','(is(M1, -(M, 1)), ','(ackermann(M1, Ret1, Ret2), is(Ret, Ret2))))).


Query: main(g,g)
----------------------------------------

(159) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(160)
Obligation:
Clauses:

main(M, N) :- ','(>=(M, 0), ','(=<(M, 3), ','(>=(N, 0), ','(=<(N, 23), ackermann(M, N, X1))))).
ackermann(M, N, Ret) :- ','(=:=(M, 0), is(Ret, +(N, 1))).
ackermann(M, N, Ret) :- ','(=:=(N, 0), ','(is(M1, -(M, 1)), ackermann(M1, 1, Ret))).
ackermann(M, N, Ret) :- ','(is(N1, -(N, 1)), ','(ackermann(M, N1, Ret1), ','(is(M1, -(M, 1)), ','(ackermann(M1, Ret1, Ret2), is(Ret, Ret2))))).
>=(X0, X1).
=<(X0, X1).
=:=(X0, X1).
is(X0, X1).


Query: main(g,g)
----------------------------------------

(161) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

main_in_2: (b,b)

ackermann_in_3: (b,b,f) (f,b,f) (f,f,f) (b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, =<_in_gg(M, 3))
   =<_in_gg(X0, X1) -> =<_out_gg(X0, X1)
   U2_gg(M, N, =<_out_gg(M, 3)) -> U3_gg(M, N, >=_in_gg(N, 0))
   U3_gg(M, N, >=_out_gg(N, 0)) -> U4_gg(M, N, =<_in_gg(N, 23))
   U4_gg(M, N, =<_out_gg(N, 23)) -> U5_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U6_gga(M, N, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U6_gga(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U7_gga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U8_gga(M, N, Ret, =:=_in_gg(N, 0))
   U8_gga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_gga(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gga(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U6_aga(M, N, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U6_aga(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U7_aga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_aga(M, N, Ret)
   ackermann_in_aga(M, N, Ret) -> U8_aga(M, N, Ret, =:=_in_gg(N, 0))
   U8_aga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_aga(M, N, Ret, is_in_aa(M1, -(M, 1)))
   is_in_aa(X0, X1) -> is_out_aa(X0, X1)
   U9_aga(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U11_aga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_aga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_aga(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   ackermann_in_aaa(M, N, Ret) -> U6_aaa(M, N, Ret, =:=_in_ag(M, 0))
   U6_aaa(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_aaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U8_aaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_aaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_aaa(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_aaa(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_aaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U11_aaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_aaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_aaa(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_aaa(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aaa(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aaa(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aaa(M, N, Ret)
   U12_aga(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aga(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aga(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aga(M, N, Ret)
   U10_aga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aga(M, N, Ret)
   U10_gga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U11_gga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_gga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_gga(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   ackermann_in_gaa(M, N, Ret) -> U6_gaa(M, N, Ret, =:=_in_gg(M, 0))
   U6_gaa(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_gaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U8_gaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_gaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_gaa(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gaa(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_gaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U11_gaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_gaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_gaa(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U12_gaa(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gaa(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gaa(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gaa(M, N, Ret)
   U12_gga(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gga(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gga(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U5_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

=<_in_gg(x1, x2)  =  =<_in_gg(x1, x2)

=<_out_gg(x1, x2)  =  =<_out_gg

3  =  3

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

23  =  23

U5_gg(x1, x2, x3)  =  U5_gg(x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg

U7_gga(x1, x2, x3, x4)  =  U7_gga(x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x1, x2)

1  =  1

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x4)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x4)

-(x1, x2)  =  -(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x4)

ackermann_in_aga(x1, x2, x3)  =  ackermann_in_aga(x2)

U6_aga(x1, x2, x3, x4)  =  U6_aga(x2, x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag

U7_aga(x1, x2, x3, x4)  =  U7_aga(x4)

ackermann_out_aga(x1, x2, x3)  =  ackermann_out_aga

U8_aga(x1, x2, x3, x4)  =  U8_aga(x4)

U9_aga(x1, x2, x3, x4)  =  U9_aga(x4)

is_in_aa(x1, x2)  =  is_in_aa

is_out_aa(x1, x2)  =  is_out_aa

U10_aga(x1, x2, x3, x4)  =  U10_aga(x4)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x4)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x5)

ackermann_in_aaa(x1, x2, x3)  =  ackermann_in_aaa

U6_aaa(x1, x2, x3, x4)  =  U6_aaa(x4)

U7_aaa(x1, x2, x3, x4)  =  U7_aaa(x4)

ackermann_out_aaa(x1, x2, x3)  =  ackermann_out_aaa

U8_aaa(x1, x2, x3, x4)  =  U8_aaa(x4)

U9_aaa(x1, x2, x3, x4)  =  U9_aaa(x4)

U10_aaa(x1, x2, x3, x4)  =  U10_aaa(x4)

U11_aaa(x1, x2, x3, x4)  =  U11_aaa(x4)

U12_aaa(x1, x2, x3, x4, x5)  =  U12_aaa(x5)

U13_aaa(x1, x2, x3, x4, x5)  =  U13_aaa(x5)

U14_aaa(x1, x2, x3, x4)  =  U14_aaa(x4)

U15_aaa(x1, x2, x3, x4)  =  U15_aaa(x4)

U13_aga(x1, x2, x3, x4, x5)  =  U13_aga(x5)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x4)

U15_aga(x1, x2, x3, x4)  =  U15_aga(x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x4)

U12_gga(x1, x2, x3, x4, x5)  =  U12_gga(x1, x5)

ackermann_in_gaa(x1, x2, x3)  =  ackermann_in_gaa(x1)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x4)

ackermann_out_gaa(x1, x2, x3)  =  ackermann_out_gaa

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x4)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x4)

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4, x5)  =  U12_gaa(x1, x5)

U13_gaa(x1, x2, x3, x4, x5)  =  U13_gaa(x5)

U14_gaa(x1, x2, x3, x4)  =  U14_gaa(x4)

U15_gaa(x1, x2, x3, x4)  =  U15_gaa(x4)

U13_gga(x1, x2, x3, x4, x5)  =  U13_gga(x5)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U15_gga(x1, x2, x3, x4)  =  U15_gga(x4)

main_out_gg(x1, x2)  =  main_out_gg





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(162)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, =<_in_gg(M, 3))
   =<_in_gg(X0, X1) -> =<_out_gg(X0, X1)
   U2_gg(M, N, =<_out_gg(M, 3)) -> U3_gg(M, N, >=_in_gg(N, 0))
   U3_gg(M, N, >=_out_gg(N, 0)) -> U4_gg(M, N, =<_in_gg(N, 23))
   U4_gg(M, N, =<_out_gg(N, 23)) -> U5_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U6_gga(M, N, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U6_gga(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U7_gga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U8_gga(M, N, Ret, =:=_in_gg(N, 0))
   U8_gga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_gga(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gga(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U6_aga(M, N, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U6_aga(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U7_aga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_aga(M, N, Ret)
   ackermann_in_aga(M, N, Ret) -> U8_aga(M, N, Ret, =:=_in_gg(N, 0))
   U8_aga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_aga(M, N, Ret, is_in_aa(M1, -(M, 1)))
   is_in_aa(X0, X1) -> is_out_aa(X0, X1)
   U9_aga(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U11_aga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_aga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_aga(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   ackermann_in_aaa(M, N, Ret) -> U6_aaa(M, N, Ret, =:=_in_ag(M, 0))
   U6_aaa(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_aaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U8_aaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_aaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_aaa(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_aaa(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_aaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U11_aaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_aaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_aaa(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_aaa(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aaa(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aaa(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aaa(M, N, Ret)
   U12_aga(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aga(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aga(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aga(M, N, Ret)
   U10_aga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aga(M, N, Ret)
   U10_gga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U11_gga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_gga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_gga(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   ackermann_in_gaa(M, N, Ret) -> U6_gaa(M, N, Ret, =:=_in_gg(M, 0))
   U6_gaa(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_gaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U8_gaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_gaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_gaa(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gaa(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_gaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U11_gaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_gaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_gaa(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U12_gaa(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gaa(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gaa(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gaa(M, N, Ret)
   U12_gga(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gga(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gga(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U5_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

=<_in_gg(x1, x2)  =  =<_in_gg(x1, x2)

=<_out_gg(x1, x2)  =  =<_out_gg

3  =  3

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

23  =  23

U5_gg(x1, x2, x3)  =  U5_gg(x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg

U7_gga(x1, x2, x3, x4)  =  U7_gga(x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x1, x2)

1  =  1

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x4)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x4)

-(x1, x2)  =  -(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x4)

ackermann_in_aga(x1, x2, x3)  =  ackermann_in_aga(x2)

U6_aga(x1, x2, x3, x4)  =  U6_aga(x2, x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag

U7_aga(x1, x2, x3, x4)  =  U7_aga(x4)

ackermann_out_aga(x1, x2, x3)  =  ackermann_out_aga

U8_aga(x1, x2, x3, x4)  =  U8_aga(x4)

U9_aga(x1, x2, x3, x4)  =  U9_aga(x4)

is_in_aa(x1, x2)  =  is_in_aa

is_out_aa(x1, x2)  =  is_out_aa

U10_aga(x1, x2, x3, x4)  =  U10_aga(x4)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x4)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x5)

ackermann_in_aaa(x1, x2, x3)  =  ackermann_in_aaa

U6_aaa(x1, x2, x3, x4)  =  U6_aaa(x4)

U7_aaa(x1, x2, x3, x4)  =  U7_aaa(x4)

ackermann_out_aaa(x1, x2, x3)  =  ackermann_out_aaa

U8_aaa(x1, x2, x3, x4)  =  U8_aaa(x4)

U9_aaa(x1, x2, x3, x4)  =  U9_aaa(x4)

U10_aaa(x1, x2, x3, x4)  =  U10_aaa(x4)

U11_aaa(x1, x2, x3, x4)  =  U11_aaa(x4)

U12_aaa(x1, x2, x3, x4, x5)  =  U12_aaa(x5)

U13_aaa(x1, x2, x3, x4, x5)  =  U13_aaa(x5)

U14_aaa(x1, x2, x3, x4)  =  U14_aaa(x4)

U15_aaa(x1, x2, x3, x4)  =  U15_aaa(x4)

U13_aga(x1, x2, x3, x4, x5)  =  U13_aga(x5)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x4)

U15_aga(x1, x2, x3, x4)  =  U15_aga(x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x4)

U12_gga(x1, x2, x3, x4, x5)  =  U12_gga(x1, x5)

ackermann_in_gaa(x1, x2, x3)  =  ackermann_in_gaa(x1)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x4)

ackermann_out_gaa(x1, x2, x3)  =  ackermann_out_gaa

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x4)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x4)

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4, x5)  =  U12_gaa(x1, x5)

U13_gaa(x1, x2, x3, x4, x5)  =  U13_gaa(x5)

U14_gaa(x1, x2, x3, x4)  =  U14_gaa(x4)

U15_gaa(x1, x2, x3, x4)  =  U15_gaa(x4)

U13_gga(x1, x2, x3, x4, x5)  =  U13_gga(x5)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U15_gga(x1, x2, x3, x4)  =  U15_gga(x4)

main_out_gg(x1, x2)  =  main_out_gg



----------------------------------------

(163) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GG(M, N) -> U1_GG(M, N, >=_in_gg(M, 0))
   MAIN_IN_GG(M, N) -> >=_IN_GG(M, 0)
   U1_GG(M, N, >=_out_gg(M, 0)) -> U2_GG(M, N, =<_in_gg(M, 3))
   U1_GG(M, N, >=_out_gg(M, 0)) -> =<_IN_GG(M, 3)
   U2_GG(M, N, =<_out_gg(M, 3)) -> U3_GG(M, N, >=_in_gg(N, 0))
   U2_GG(M, N, =<_out_gg(M, 3)) -> >=_IN_GG(N, 0)
   U3_GG(M, N, >=_out_gg(N, 0)) -> U4_GG(M, N, =<_in_gg(N, 23))
   U3_GG(M, N, >=_out_gg(N, 0)) -> =<_IN_GG(N, 23)
   U4_GG(M, N, =<_out_gg(N, 23)) -> U5_GG(M, N, ackermann_in_gga(M, N, X1))
   U4_GG(M, N, =<_out_gg(N, 23)) -> ACKERMANN_IN_GGA(M, N, X1)
   ACKERMANN_IN_GGA(M, N, Ret) -> U6_GGA(M, N, Ret, =:=_in_gg(M, 0))
   ACKERMANN_IN_GGA(M, N, Ret) -> =:=_IN_GG(M, 0)
   U6_GGA(M, N, Ret, =:=_out_gg(M, 0)) -> U7_GGA(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U6_GGA(M, N, Ret, =:=_out_gg(M, 0)) -> IS_IN_AG(Ret, +(N, 1))
   ACKERMANN_IN_GGA(M, N, Ret) -> U8_GGA(M, N, Ret, =:=_in_gg(N, 0))
   ACKERMANN_IN_GGA(M, N, Ret) -> =:=_IN_GG(N, 0)
   U8_GGA(M, N, Ret, =:=_out_gg(N, 0)) -> U9_GGA(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U8_GGA(M, N, Ret, =:=_out_gg(N, 0)) -> IS_IN_AG(M1, -(M, 1))
   U9_GGA(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_GGA(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U9_GGA(M, N, Ret, is_out_ag(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AGA(M, N, Ret) -> U6_AGA(M, N, Ret, =:=_in_ag(M, 0))
   ACKERMANN_IN_AGA(M, N, Ret) -> =:=_IN_AG(M, 0)
   U6_AGA(M, N, Ret, =:=_out_ag(M, 0)) -> U7_AGA(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U6_AGA(M, N, Ret, =:=_out_ag(M, 0)) -> IS_IN_AG(Ret, +(N, 1))
   ACKERMANN_IN_AGA(M, N, Ret) -> U8_AGA(M, N, Ret, =:=_in_gg(N, 0))
   ACKERMANN_IN_AGA(M, N, Ret) -> =:=_IN_GG(N, 0)
   U8_AGA(M, N, Ret, =:=_out_gg(N, 0)) -> U9_AGA(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U8_AGA(M, N, Ret, =:=_out_gg(N, 0)) -> IS_IN_AA(M1, -(M, 1))
   U9_AGA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_AGA(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U9_AGA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AGA(M, N, Ret) -> U11_AGA(M, N, Ret, is_in_ag(N1, -(N, 1)))
   ACKERMANN_IN_AGA(M, N, Ret) -> IS_IN_AG(N1, -(N, 1))
   U11_AGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_AGA(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U11_AGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> ACKERMANN_IN_AAA(M, N1, Ret1)
   ACKERMANN_IN_AAA(M, N, Ret) -> U6_AAA(M, N, Ret, =:=_in_ag(M, 0))
   ACKERMANN_IN_AAA(M, N, Ret) -> =:=_IN_AG(M, 0)
   U6_AAA(M, N, Ret, =:=_out_ag(M, 0)) -> U7_AAA(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U6_AAA(M, N, Ret, =:=_out_ag(M, 0)) -> IS_IN_AA(Ret, +(N, 1))
   ACKERMANN_IN_AAA(M, N, Ret) -> U8_AAA(M, N, Ret, =:=_in_ag(N, 0))
   ACKERMANN_IN_AAA(M, N, Ret) -> =:=_IN_AG(N, 0)
   U8_AAA(M, N, Ret, =:=_out_ag(N, 0)) -> U9_AAA(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U8_AAA(M, N, Ret, =:=_out_ag(N, 0)) -> IS_IN_AA(M1, -(M, 1))
   U9_AAA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_AAA(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U9_AAA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AAA(M, N, Ret) -> U11_AAA(M, N, Ret, is_in_aa(N1, -(N, 1)))
   ACKERMANN_IN_AAA(M, N, Ret) -> IS_IN_AA(N1, -(N, 1))
   U11_AAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_AAA(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U11_AAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> ACKERMANN_IN_AAA(M, N1, Ret1)
   U12_AAA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_AAA(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U12_AAA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> IS_IN_AA(M1, -(M, 1))
   U13_AAA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_AAA(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U13_AAA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U14_AAA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_AAA(M, N, Ret, is_in_aa(Ret, Ret2))
   U14_AAA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> IS_IN_AA(Ret, Ret2)
   U12_AGA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_AGA(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U12_AGA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> IS_IN_AA(M1, -(M, 1))
   U13_AGA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_AGA(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U13_AGA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U14_AGA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_AGA(M, N, Ret, is_in_aa(Ret, Ret2))
   U14_AGA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> IS_IN_AA(Ret, Ret2)
   ACKERMANN_IN_GGA(M, N, Ret) -> U11_GGA(M, N, Ret, is_in_ag(N1, -(N, 1)))
   ACKERMANN_IN_GGA(M, N, Ret) -> IS_IN_AG(N1, -(N, 1))
   U11_GGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_GGA(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U11_GGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> ACKERMANN_IN_GAA(M, N1, Ret1)
   ACKERMANN_IN_GAA(M, N, Ret) -> U6_GAA(M, N, Ret, =:=_in_gg(M, 0))
   ACKERMANN_IN_GAA(M, N, Ret) -> =:=_IN_GG(M, 0)
   U6_GAA(M, N, Ret, =:=_out_gg(M, 0)) -> U7_GAA(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U6_GAA(M, N, Ret, =:=_out_gg(M, 0)) -> IS_IN_AA(Ret, +(N, 1))
   ACKERMANN_IN_GAA(M, N, Ret) -> U8_GAA(M, N, Ret, =:=_in_ag(N, 0))
   ACKERMANN_IN_GAA(M, N, Ret) -> =:=_IN_AG(N, 0)
   U8_GAA(M, N, Ret, =:=_out_ag(N, 0)) -> U9_GAA(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U8_GAA(M, N, Ret, =:=_out_ag(N, 0)) -> IS_IN_AG(M1, -(M, 1))
   U9_GAA(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_GAA(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U9_GAA(M, N, Ret, is_out_ag(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_GAA(M, N, Ret) -> U11_GAA(M, N, Ret, is_in_aa(N1, -(N, 1)))
   ACKERMANN_IN_GAA(M, N, Ret) -> IS_IN_AA(N1, -(N, 1))
   U11_GAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_GAA(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U11_GAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> ACKERMANN_IN_GAA(M, N1, Ret1)
   U12_GAA(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_GAA(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U12_GAA(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> IS_IN_AG(M1, -(M, 1))
   U13_GAA(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_GAA(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U13_GAA(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U14_GAA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_GAA(M, N, Ret, is_in_aa(Ret, Ret2))
   U14_GAA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> IS_IN_AA(Ret, Ret2)
   U12_GGA(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_GGA(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U12_GGA(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> IS_IN_AG(M1, -(M, 1))
   U13_GGA(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_GGA(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U13_GGA(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U14_GGA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_GGA(M, N, Ret, is_in_aa(Ret, Ret2))
   U14_GGA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> IS_IN_AA(Ret, Ret2)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, =<_in_gg(M, 3))
   =<_in_gg(X0, X1) -> =<_out_gg(X0, X1)
   U2_gg(M, N, =<_out_gg(M, 3)) -> U3_gg(M, N, >=_in_gg(N, 0))
   U3_gg(M, N, >=_out_gg(N, 0)) -> U4_gg(M, N, =<_in_gg(N, 23))
   U4_gg(M, N, =<_out_gg(N, 23)) -> U5_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U6_gga(M, N, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U6_gga(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U7_gga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U8_gga(M, N, Ret, =:=_in_gg(N, 0))
   U8_gga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_gga(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gga(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U6_aga(M, N, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U6_aga(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U7_aga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_aga(M, N, Ret)
   ackermann_in_aga(M, N, Ret) -> U8_aga(M, N, Ret, =:=_in_gg(N, 0))
   U8_aga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_aga(M, N, Ret, is_in_aa(M1, -(M, 1)))
   is_in_aa(X0, X1) -> is_out_aa(X0, X1)
   U9_aga(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U11_aga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_aga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_aga(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   ackermann_in_aaa(M, N, Ret) -> U6_aaa(M, N, Ret, =:=_in_ag(M, 0))
   U6_aaa(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_aaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U8_aaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_aaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_aaa(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_aaa(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_aaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U11_aaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_aaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_aaa(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_aaa(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aaa(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aaa(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aaa(M, N, Ret)
   U12_aga(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aga(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aga(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aga(M, N, Ret)
   U10_aga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aga(M, N, Ret)
   U10_gga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U11_gga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_gga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_gga(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   ackermann_in_gaa(M, N, Ret) -> U6_gaa(M, N, Ret, =:=_in_gg(M, 0))
   U6_gaa(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_gaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U8_gaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_gaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_gaa(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gaa(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_gaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U11_gaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_gaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_gaa(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U12_gaa(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gaa(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gaa(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gaa(M, N, Ret)
   U12_gga(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gga(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gga(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U5_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

=<_in_gg(x1, x2)  =  =<_in_gg(x1, x2)

=<_out_gg(x1, x2)  =  =<_out_gg

3  =  3

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

23  =  23

U5_gg(x1, x2, x3)  =  U5_gg(x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg

U7_gga(x1, x2, x3, x4)  =  U7_gga(x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x1, x2)

1  =  1

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x4)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x4)

-(x1, x2)  =  -(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x4)

ackermann_in_aga(x1, x2, x3)  =  ackermann_in_aga(x2)

U6_aga(x1, x2, x3, x4)  =  U6_aga(x2, x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag

U7_aga(x1, x2, x3, x4)  =  U7_aga(x4)

ackermann_out_aga(x1, x2, x3)  =  ackermann_out_aga

U8_aga(x1, x2, x3, x4)  =  U8_aga(x4)

U9_aga(x1, x2, x3, x4)  =  U9_aga(x4)

is_in_aa(x1, x2)  =  is_in_aa

is_out_aa(x1, x2)  =  is_out_aa

U10_aga(x1, x2, x3, x4)  =  U10_aga(x4)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x4)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x5)

ackermann_in_aaa(x1, x2, x3)  =  ackermann_in_aaa

U6_aaa(x1, x2, x3, x4)  =  U6_aaa(x4)

U7_aaa(x1, x2, x3, x4)  =  U7_aaa(x4)

ackermann_out_aaa(x1, x2, x3)  =  ackermann_out_aaa

U8_aaa(x1, x2, x3, x4)  =  U8_aaa(x4)

U9_aaa(x1, x2, x3, x4)  =  U9_aaa(x4)

U10_aaa(x1, x2, x3, x4)  =  U10_aaa(x4)

U11_aaa(x1, x2, x3, x4)  =  U11_aaa(x4)

U12_aaa(x1, x2, x3, x4, x5)  =  U12_aaa(x5)

U13_aaa(x1, x2, x3, x4, x5)  =  U13_aaa(x5)

U14_aaa(x1, x2, x3, x4)  =  U14_aaa(x4)

U15_aaa(x1, x2, x3, x4)  =  U15_aaa(x4)

U13_aga(x1, x2, x3, x4, x5)  =  U13_aga(x5)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x4)

U15_aga(x1, x2, x3, x4)  =  U15_aga(x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x4)

U12_gga(x1, x2, x3, x4, x5)  =  U12_gga(x1, x5)

ackermann_in_gaa(x1, x2, x3)  =  ackermann_in_gaa(x1)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x4)

ackermann_out_gaa(x1, x2, x3)  =  ackermann_out_gaa

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x4)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x4)

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4, x5)  =  U12_gaa(x1, x5)

U13_gaa(x1, x2, x3, x4, x5)  =  U13_gaa(x5)

U14_gaa(x1, x2, x3, x4)  =  U14_gaa(x4)

U15_gaa(x1, x2, x3, x4)  =  U15_gaa(x4)

U13_gga(x1, x2, x3, x4, x5)  =  U13_gga(x5)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U15_gga(x1, x2, x3, x4)  =  U15_gga(x4)

main_out_gg(x1, x2)  =  main_out_gg

MAIN_IN_GG(x1, x2)  =  MAIN_IN_GG(x1, x2)

U1_GG(x1, x2, x3)  =  U1_GG(x1, x2, x3)

>=_IN_GG(x1, x2)  =  >=_IN_GG(x1, x2)

U2_GG(x1, x2, x3)  =  U2_GG(x1, x2, x3)

=<_IN_GG(x1, x2)  =  =<_IN_GG(x1, x2)

U3_GG(x1, x2, x3)  =  U3_GG(x1, x2, x3)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)

U5_GG(x1, x2, x3)  =  U5_GG(x3)

ACKERMANN_IN_GGA(x1, x2, x3)  =  ACKERMANN_IN_GGA(x1, x2)

U6_GGA(x1, x2, x3, x4)  =  U6_GGA(x2, x4)

=:=_IN_GG(x1, x2)  =  =:=_IN_GG(x1, x2)

U7_GGA(x1, x2, x3, x4)  =  U7_GGA(x4)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U8_GGA(x1, x2, x3, x4)  =  U8_GGA(x1, x4)

U9_GGA(x1, x2, x3, x4)  =  U9_GGA(x4)

U10_GGA(x1, x2, x3, x4)  =  U10_GGA(x4)

ACKERMANN_IN_AGA(x1, x2, x3)  =  ACKERMANN_IN_AGA(x2)

U6_AGA(x1, x2, x3, x4)  =  U6_AGA(x2, x4)

=:=_IN_AG(x1, x2)  =  =:=_IN_AG(x2)

U7_AGA(x1, x2, x3, x4)  =  U7_AGA(x4)

U8_AGA(x1, x2, x3, x4)  =  U8_AGA(x4)

U9_AGA(x1, x2, x3, x4)  =  U9_AGA(x4)

IS_IN_AA(x1, x2)  =  IS_IN_AA

U10_AGA(x1, x2, x3, x4)  =  U10_AGA(x4)

U11_AGA(x1, x2, x3, x4)  =  U11_AGA(x4)

U12_AGA(x1, x2, x3, x4, x5)  =  U12_AGA(x5)

ACKERMANN_IN_AAA(x1, x2, x3)  =  ACKERMANN_IN_AAA

U6_AAA(x1, x2, x3, x4)  =  U6_AAA(x4)

U7_AAA(x1, x2, x3, x4)  =  U7_AAA(x4)

U8_AAA(x1, x2, x3, x4)  =  U8_AAA(x4)

U9_AAA(x1, x2, x3, x4)  =  U9_AAA(x4)

U10_AAA(x1, x2, x3, x4)  =  U10_AAA(x4)

U11_AAA(x1, x2, x3, x4)  =  U11_AAA(x4)

U12_AAA(x1, x2, x3, x4, x5)  =  U12_AAA(x5)

U13_AAA(x1, x2, x3, x4, x5)  =  U13_AAA(x5)

U14_AAA(x1, x2, x3, x4)  =  U14_AAA(x4)

U15_AAA(x1, x2, x3, x4)  =  U15_AAA(x4)

U13_AGA(x1, x2, x3, x4, x5)  =  U13_AGA(x5)

U14_AGA(x1, x2, x3, x4)  =  U14_AGA(x4)

U15_AGA(x1, x2, x3, x4)  =  U15_AGA(x4)

U11_GGA(x1, x2, x3, x4)  =  U11_GGA(x1, x4)

U12_GGA(x1, x2, x3, x4, x5)  =  U12_GGA(x1, x5)

ACKERMANN_IN_GAA(x1, x2, x3)  =  ACKERMANN_IN_GAA(x1)

U6_GAA(x1, x2, x3, x4)  =  U6_GAA(x4)

U7_GAA(x1, x2, x3, x4)  =  U7_GAA(x4)

U8_GAA(x1, x2, x3, x4)  =  U8_GAA(x1, x4)

U9_GAA(x1, x2, x3, x4)  =  U9_GAA(x4)

U10_GAA(x1, x2, x3, x4)  =  U10_GAA(x4)

U11_GAA(x1, x2, x3, x4)  =  U11_GAA(x1, x4)

U12_GAA(x1, x2, x3, x4, x5)  =  U12_GAA(x1, x5)

U13_GAA(x1, x2, x3, x4, x5)  =  U13_GAA(x5)

U14_GAA(x1, x2, x3, x4)  =  U14_GAA(x4)

U15_GAA(x1, x2, x3, x4)  =  U15_GAA(x4)

U13_GGA(x1, x2, x3, x4, x5)  =  U13_GGA(x5)

U14_GGA(x1, x2, x3, x4)  =  U14_GGA(x4)

U15_GGA(x1, x2, x3, x4)  =  U15_GGA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(164)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GG(M, N) -> U1_GG(M, N, >=_in_gg(M, 0))
   MAIN_IN_GG(M, N) -> >=_IN_GG(M, 0)
   U1_GG(M, N, >=_out_gg(M, 0)) -> U2_GG(M, N, =<_in_gg(M, 3))
   U1_GG(M, N, >=_out_gg(M, 0)) -> =<_IN_GG(M, 3)
   U2_GG(M, N, =<_out_gg(M, 3)) -> U3_GG(M, N, >=_in_gg(N, 0))
   U2_GG(M, N, =<_out_gg(M, 3)) -> >=_IN_GG(N, 0)
   U3_GG(M, N, >=_out_gg(N, 0)) -> U4_GG(M, N, =<_in_gg(N, 23))
   U3_GG(M, N, >=_out_gg(N, 0)) -> =<_IN_GG(N, 23)
   U4_GG(M, N, =<_out_gg(N, 23)) -> U5_GG(M, N, ackermann_in_gga(M, N, X1))
   U4_GG(M, N, =<_out_gg(N, 23)) -> ACKERMANN_IN_GGA(M, N, X1)
   ACKERMANN_IN_GGA(M, N, Ret) -> U6_GGA(M, N, Ret, =:=_in_gg(M, 0))
   ACKERMANN_IN_GGA(M, N, Ret) -> =:=_IN_GG(M, 0)
   U6_GGA(M, N, Ret, =:=_out_gg(M, 0)) -> U7_GGA(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U6_GGA(M, N, Ret, =:=_out_gg(M, 0)) -> IS_IN_AG(Ret, +(N, 1))
   ACKERMANN_IN_GGA(M, N, Ret) -> U8_GGA(M, N, Ret, =:=_in_gg(N, 0))
   ACKERMANN_IN_GGA(M, N, Ret) -> =:=_IN_GG(N, 0)
   U8_GGA(M, N, Ret, =:=_out_gg(N, 0)) -> U9_GGA(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U8_GGA(M, N, Ret, =:=_out_gg(N, 0)) -> IS_IN_AG(M1, -(M, 1))
   U9_GGA(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_GGA(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U9_GGA(M, N, Ret, is_out_ag(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AGA(M, N, Ret) -> U6_AGA(M, N, Ret, =:=_in_ag(M, 0))
   ACKERMANN_IN_AGA(M, N, Ret) -> =:=_IN_AG(M, 0)
   U6_AGA(M, N, Ret, =:=_out_ag(M, 0)) -> U7_AGA(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U6_AGA(M, N, Ret, =:=_out_ag(M, 0)) -> IS_IN_AG(Ret, +(N, 1))
   ACKERMANN_IN_AGA(M, N, Ret) -> U8_AGA(M, N, Ret, =:=_in_gg(N, 0))
   ACKERMANN_IN_AGA(M, N, Ret) -> =:=_IN_GG(N, 0)
   U8_AGA(M, N, Ret, =:=_out_gg(N, 0)) -> U9_AGA(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U8_AGA(M, N, Ret, =:=_out_gg(N, 0)) -> IS_IN_AA(M1, -(M, 1))
   U9_AGA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_AGA(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U9_AGA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AGA(M, N, Ret) -> U11_AGA(M, N, Ret, is_in_ag(N1, -(N, 1)))
   ACKERMANN_IN_AGA(M, N, Ret) -> IS_IN_AG(N1, -(N, 1))
   U11_AGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_AGA(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U11_AGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> ACKERMANN_IN_AAA(M, N1, Ret1)
   ACKERMANN_IN_AAA(M, N, Ret) -> U6_AAA(M, N, Ret, =:=_in_ag(M, 0))
   ACKERMANN_IN_AAA(M, N, Ret) -> =:=_IN_AG(M, 0)
   U6_AAA(M, N, Ret, =:=_out_ag(M, 0)) -> U7_AAA(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U6_AAA(M, N, Ret, =:=_out_ag(M, 0)) -> IS_IN_AA(Ret, +(N, 1))
   ACKERMANN_IN_AAA(M, N, Ret) -> U8_AAA(M, N, Ret, =:=_in_ag(N, 0))
   ACKERMANN_IN_AAA(M, N, Ret) -> =:=_IN_AG(N, 0)
   U8_AAA(M, N, Ret, =:=_out_ag(N, 0)) -> U9_AAA(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U8_AAA(M, N, Ret, =:=_out_ag(N, 0)) -> IS_IN_AA(M1, -(M, 1))
   U9_AAA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_AAA(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U9_AAA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AAA(M, N, Ret) -> U11_AAA(M, N, Ret, is_in_aa(N1, -(N, 1)))
   ACKERMANN_IN_AAA(M, N, Ret) -> IS_IN_AA(N1, -(N, 1))
   U11_AAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_AAA(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U11_AAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> ACKERMANN_IN_AAA(M, N1, Ret1)
   U12_AAA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_AAA(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U12_AAA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> IS_IN_AA(M1, -(M, 1))
   U13_AAA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_AAA(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U13_AAA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U14_AAA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_AAA(M, N, Ret, is_in_aa(Ret, Ret2))
   U14_AAA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> IS_IN_AA(Ret, Ret2)
   U12_AGA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_AGA(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U12_AGA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> IS_IN_AA(M1, -(M, 1))
   U13_AGA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_AGA(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U13_AGA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U14_AGA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_AGA(M, N, Ret, is_in_aa(Ret, Ret2))
   U14_AGA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> IS_IN_AA(Ret, Ret2)
   ACKERMANN_IN_GGA(M, N, Ret) -> U11_GGA(M, N, Ret, is_in_ag(N1, -(N, 1)))
   ACKERMANN_IN_GGA(M, N, Ret) -> IS_IN_AG(N1, -(N, 1))
   U11_GGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_GGA(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U11_GGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> ACKERMANN_IN_GAA(M, N1, Ret1)
   ACKERMANN_IN_GAA(M, N, Ret) -> U6_GAA(M, N, Ret, =:=_in_gg(M, 0))
   ACKERMANN_IN_GAA(M, N, Ret) -> =:=_IN_GG(M, 0)
   U6_GAA(M, N, Ret, =:=_out_gg(M, 0)) -> U7_GAA(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U6_GAA(M, N, Ret, =:=_out_gg(M, 0)) -> IS_IN_AA(Ret, +(N, 1))
   ACKERMANN_IN_GAA(M, N, Ret) -> U8_GAA(M, N, Ret, =:=_in_ag(N, 0))
   ACKERMANN_IN_GAA(M, N, Ret) -> =:=_IN_AG(N, 0)
   U8_GAA(M, N, Ret, =:=_out_ag(N, 0)) -> U9_GAA(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U8_GAA(M, N, Ret, =:=_out_ag(N, 0)) -> IS_IN_AG(M1, -(M, 1))
   U9_GAA(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_GAA(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U9_GAA(M, N, Ret, is_out_ag(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_GAA(M, N, Ret) -> U11_GAA(M, N, Ret, is_in_aa(N1, -(N, 1)))
   ACKERMANN_IN_GAA(M, N, Ret) -> IS_IN_AA(N1, -(N, 1))
   U11_GAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_GAA(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U11_GAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> ACKERMANN_IN_GAA(M, N1, Ret1)
   U12_GAA(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_GAA(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U12_GAA(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> IS_IN_AG(M1, -(M, 1))
   U13_GAA(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_GAA(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U13_GAA(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U14_GAA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_GAA(M, N, Ret, is_in_aa(Ret, Ret2))
   U14_GAA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> IS_IN_AA(Ret, Ret2)
   U12_GGA(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_GGA(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U12_GGA(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> IS_IN_AG(M1, -(M, 1))
   U13_GGA(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_GGA(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U13_GGA(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U14_GGA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_GGA(M, N, Ret, is_in_aa(Ret, Ret2))
   U14_GGA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> IS_IN_AA(Ret, Ret2)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, =<_in_gg(M, 3))
   =<_in_gg(X0, X1) -> =<_out_gg(X0, X1)
   U2_gg(M, N, =<_out_gg(M, 3)) -> U3_gg(M, N, >=_in_gg(N, 0))
   U3_gg(M, N, >=_out_gg(N, 0)) -> U4_gg(M, N, =<_in_gg(N, 23))
   U4_gg(M, N, =<_out_gg(N, 23)) -> U5_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U6_gga(M, N, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U6_gga(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U7_gga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U8_gga(M, N, Ret, =:=_in_gg(N, 0))
   U8_gga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_gga(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gga(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U6_aga(M, N, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U6_aga(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U7_aga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_aga(M, N, Ret)
   ackermann_in_aga(M, N, Ret) -> U8_aga(M, N, Ret, =:=_in_gg(N, 0))
   U8_aga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_aga(M, N, Ret, is_in_aa(M1, -(M, 1)))
   is_in_aa(X0, X1) -> is_out_aa(X0, X1)
   U9_aga(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U11_aga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_aga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_aga(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   ackermann_in_aaa(M, N, Ret) -> U6_aaa(M, N, Ret, =:=_in_ag(M, 0))
   U6_aaa(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_aaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U8_aaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_aaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_aaa(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_aaa(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_aaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U11_aaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_aaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_aaa(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_aaa(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aaa(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aaa(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aaa(M, N, Ret)
   U12_aga(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aga(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aga(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aga(M, N, Ret)
   U10_aga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aga(M, N, Ret)
   U10_gga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U11_gga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_gga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_gga(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   ackermann_in_gaa(M, N, Ret) -> U6_gaa(M, N, Ret, =:=_in_gg(M, 0))
   U6_gaa(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_gaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U8_gaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_gaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_gaa(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gaa(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_gaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U11_gaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_gaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_gaa(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U12_gaa(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gaa(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gaa(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gaa(M, N, Ret)
   U12_gga(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gga(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gga(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U5_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

=<_in_gg(x1, x2)  =  =<_in_gg(x1, x2)

=<_out_gg(x1, x2)  =  =<_out_gg

3  =  3

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

23  =  23

U5_gg(x1, x2, x3)  =  U5_gg(x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg

U7_gga(x1, x2, x3, x4)  =  U7_gga(x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x1, x2)

1  =  1

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x4)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x4)

-(x1, x2)  =  -(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x4)

ackermann_in_aga(x1, x2, x3)  =  ackermann_in_aga(x2)

U6_aga(x1, x2, x3, x4)  =  U6_aga(x2, x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag

U7_aga(x1, x2, x3, x4)  =  U7_aga(x4)

ackermann_out_aga(x1, x2, x3)  =  ackermann_out_aga

U8_aga(x1, x2, x3, x4)  =  U8_aga(x4)

U9_aga(x1, x2, x3, x4)  =  U9_aga(x4)

is_in_aa(x1, x2)  =  is_in_aa

is_out_aa(x1, x2)  =  is_out_aa

U10_aga(x1, x2, x3, x4)  =  U10_aga(x4)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x4)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x5)

ackermann_in_aaa(x1, x2, x3)  =  ackermann_in_aaa

U6_aaa(x1, x2, x3, x4)  =  U6_aaa(x4)

U7_aaa(x1, x2, x3, x4)  =  U7_aaa(x4)

ackermann_out_aaa(x1, x2, x3)  =  ackermann_out_aaa

U8_aaa(x1, x2, x3, x4)  =  U8_aaa(x4)

U9_aaa(x1, x2, x3, x4)  =  U9_aaa(x4)

U10_aaa(x1, x2, x3, x4)  =  U10_aaa(x4)

U11_aaa(x1, x2, x3, x4)  =  U11_aaa(x4)

U12_aaa(x1, x2, x3, x4, x5)  =  U12_aaa(x5)

U13_aaa(x1, x2, x3, x4, x5)  =  U13_aaa(x5)

U14_aaa(x1, x2, x3, x4)  =  U14_aaa(x4)

U15_aaa(x1, x2, x3, x4)  =  U15_aaa(x4)

U13_aga(x1, x2, x3, x4, x5)  =  U13_aga(x5)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x4)

U15_aga(x1, x2, x3, x4)  =  U15_aga(x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x4)

U12_gga(x1, x2, x3, x4, x5)  =  U12_gga(x1, x5)

ackermann_in_gaa(x1, x2, x3)  =  ackermann_in_gaa(x1)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x4)

ackermann_out_gaa(x1, x2, x3)  =  ackermann_out_gaa

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x4)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x4)

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4, x5)  =  U12_gaa(x1, x5)

U13_gaa(x1, x2, x3, x4, x5)  =  U13_gaa(x5)

U14_gaa(x1, x2, x3, x4)  =  U14_gaa(x4)

U15_gaa(x1, x2, x3, x4)  =  U15_gaa(x4)

U13_gga(x1, x2, x3, x4, x5)  =  U13_gga(x5)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U15_gga(x1, x2, x3, x4)  =  U15_gga(x4)

main_out_gg(x1, x2)  =  main_out_gg

MAIN_IN_GG(x1, x2)  =  MAIN_IN_GG(x1, x2)

U1_GG(x1, x2, x3)  =  U1_GG(x1, x2, x3)

>=_IN_GG(x1, x2)  =  >=_IN_GG(x1, x2)

U2_GG(x1, x2, x3)  =  U2_GG(x1, x2, x3)

=<_IN_GG(x1, x2)  =  =<_IN_GG(x1, x2)

U3_GG(x1, x2, x3)  =  U3_GG(x1, x2, x3)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)

U5_GG(x1, x2, x3)  =  U5_GG(x3)

ACKERMANN_IN_GGA(x1, x2, x3)  =  ACKERMANN_IN_GGA(x1, x2)

U6_GGA(x1, x2, x3, x4)  =  U6_GGA(x2, x4)

=:=_IN_GG(x1, x2)  =  =:=_IN_GG(x1, x2)

U7_GGA(x1, x2, x3, x4)  =  U7_GGA(x4)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U8_GGA(x1, x2, x3, x4)  =  U8_GGA(x1, x4)

U9_GGA(x1, x2, x3, x4)  =  U9_GGA(x4)

U10_GGA(x1, x2, x3, x4)  =  U10_GGA(x4)

ACKERMANN_IN_AGA(x1, x2, x3)  =  ACKERMANN_IN_AGA(x2)

U6_AGA(x1, x2, x3, x4)  =  U6_AGA(x2, x4)

=:=_IN_AG(x1, x2)  =  =:=_IN_AG(x2)

U7_AGA(x1, x2, x3, x4)  =  U7_AGA(x4)

U8_AGA(x1, x2, x3, x4)  =  U8_AGA(x4)

U9_AGA(x1, x2, x3, x4)  =  U9_AGA(x4)

IS_IN_AA(x1, x2)  =  IS_IN_AA

U10_AGA(x1, x2, x3, x4)  =  U10_AGA(x4)

U11_AGA(x1, x2, x3, x4)  =  U11_AGA(x4)

U12_AGA(x1, x2, x3, x4, x5)  =  U12_AGA(x5)

ACKERMANN_IN_AAA(x1, x2, x3)  =  ACKERMANN_IN_AAA

U6_AAA(x1, x2, x3, x4)  =  U6_AAA(x4)

U7_AAA(x1, x2, x3, x4)  =  U7_AAA(x4)

U8_AAA(x1, x2, x3, x4)  =  U8_AAA(x4)

U9_AAA(x1, x2, x3, x4)  =  U9_AAA(x4)

U10_AAA(x1, x2, x3, x4)  =  U10_AAA(x4)

U11_AAA(x1, x2, x3, x4)  =  U11_AAA(x4)

U12_AAA(x1, x2, x3, x4, x5)  =  U12_AAA(x5)

U13_AAA(x1, x2, x3, x4, x5)  =  U13_AAA(x5)

U14_AAA(x1, x2, x3, x4)  =  U14_AAA(x4)

U15_AAA(x1, x2, x3, x4)  =  U15_AAA(x4)

U13_AGA(x1, x2, x3, x4, x5)  =  U13_AGA(x5)

U14_AGA(x1, x2, x3, x4)  =  U14_AGA(x4)

U15_AGA(x1, x2, x3, x4)  =  U15_AGA(x4)

U11_GGA(x1, x2, x3, x4)  =  U11_GGA(x1, x4)

U12_GGA(x1, x2, x3, x4, x5)  =  U12_GGA(x1, x5)

ACKERMANN_IN_GAA(x1, x2, x3)  =  ACKERMANN_IN_GAA(x1)

U6_GAA(x1, x2, x3, x4)  =  U6_GAA(x4)

U7_GAA(x1, x2, x3, x4)  =  U7_GAA(x4)

U8_GAA(x1, x2, x3, x4)  =  U8_GAA(x1, x4)

U9_GAA(x1, x2, x3, x4)  =  U9_GAA(x4)

U10_GAA(x1, x2, x3, x4)  =  U10_GAA(x4)

U11_GAA(x1, x2, x3, x4)  =  U11_GAA(x1, x4)

U12_GAA(x1, x2, x3, x4, x5)  =  U12_GAA(x1, x5)

U13_GAA(x1, x2, x3, x4, x5)  =  U13_GAA(x5)

U14_GAA(x1, x2, x3, x4)  =  U14_GAA(x4)

U15_GAA(x1, x2, x3, x4)  =  U15_GAA(x4)

U13_GGA(x1, x2, x3, x4, x5)  =  U13_GGA(x5)

U14_GGA(x1, x2, x3, x4)  =  U14_GGA(x4)

U15_GGA(x1, x2, x3, x4)  =  U15_GGA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(165) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 72 less nodes.
----------------------------------------

(166)
Complex Obligation (AND)

----------------------------------------

(167)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ACKERMANN_IN_AGA(M, N, Ret) -> U8_AGA(M, N, Ret, =:=_in_gg(N, 0))
   U8_AGA(M, N, Ret, =:=_out_gg(N, 0)) -> U9_AGA(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_AGA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AGA(M, N, Ret) -> U11_AGA(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_AGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_AGA(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_AGA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_AGA(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_AGA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   ACKERMANN_IN_AAA(M, N, Ret) -> U8_AAA(M, N, Ret, =:=_in_ag(N, 0))
   U8_AAA(M, N, Ret, =:=_out_ag(N, 0)) -> U9_AAA(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_AAA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AAA(M, N, Ret) -> U11_AAA(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_AAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_AAA(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_AAA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_AAA(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_AAA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U11_AAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> ACKERMANN_IN_AAA(M, N1, Ret1)
   U11_AGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> ACKERMANN_IN_AAA(M, N1, Ret1)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, =<_in_gg(M, 3))
   =<_in_gg(X0, X1) -> =<_out_gg(X0, X1)
   U2_gg(M, N, =<_out_gg(M, 3)) -> U3_gg(M, N, >=_in_gg(N, 0))
   U3_gg(M, N, >=_out_gg(N, 0)) -> U4_gg(M, N, =<_in_gg(N, 23))
   U4_gg(M, N, =<_out_gg(N, 23)) -> U5_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U6_gga(M, N, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U6_gga(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U7_gga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U8_gga(M, N, Ret, =:=_in_gg(N, 0))
   U8_gga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_gga(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gga(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U6_aga(M, N, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U6_aga(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U7_aga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_aga(M, N, Ret)
   ackermann_in_aga(M, N, Ret) -> U8_aga(M, N, Ret, =:=_in_gg(N, 0))
   U8_aga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_aga(M, N, Ret, is_in_aa(M1, -(M, 1)))
   is_in_aa(X0, X1) -> is_out_aa(X0, X1)
   U9_aga(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U11_aga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_aga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_aga(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   ackermann_in_aaa(M, N, Ret) -> U6_aaa(M, N, Ret, =:=_in_ag(M, 0))
   U6_aaa(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_aaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U8_aaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_aaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_aaa(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_aaa(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_aaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U11_aaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_aaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_aaa(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_aaa(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aaa(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aaa(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aaa(M, N, Ret)
   U12_aga(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aga(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aga(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aga(M, N, Ret)
   U10_aga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aga(M, N, Ret)
   U10_gga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U11_gga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_gga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_gga(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   ackermann_in_gaa(M, N, Ret) -> U6_gaa(M, N, Ret, =:=_in_gg(M, 0))
   U6_gaa(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_gaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U8_gaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_gaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_gaa(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gaa(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_gaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U11_gaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_gaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_gaa(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U12_gaa(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gaa(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gaa(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gaa(M, N, Ret)
   U12_gga(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gga(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gga(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U5_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

=<_in_gg(x1, x2)  =  =<_in_gg(x1, x2)

=<_out_gg(x1, x2)  =  =<_out_gg

3  =  3

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

23  =  23

U5_gg(x1, x2, x3)  =  U5_gg(x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg

U7_gga(x1, x2, x3, x4)  =  U7_gga(x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x1, x2)

1  =  1

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x4)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x4)

-(x1, x2)  =  -(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x4)

ackermann_in_aga(x1, x2, x3)  =  ackermann_in_aga(x2)

U6_aga(x1, x2, x3, x4)  =  U6_aga(x2, x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag

U7_aga(x1, x2, x3, x4)  =  U7_aga(x4)

ackermann_out_aga(x1, x2, x3)  =  ackermann_out_aga

U8_aga(x1, x2, x3, x4)  =  U8_aga(x4)

U9_aga(x1, x2, x3, x4)  =  U9_aga(x4)

is_in_aa(x1, x2)  =  is_in_aa

is_out_aa(x1, x2)  =  is_out_aa

U10_aga(x1, x2, x3, x4)  =  U10_aga(x4)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x4)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x5)

ackermann_in_aaa(x1, x2, x3)  =  ackermann_in_aaa

U6_aaa(x1, x2, x3, x4)  =  U6_aaa(x4)

U7_aaa(x1, x2, x3, x4)  =  U7_aaa(x4)

ackermann_out_aaa(x1, x2, x3)  =  ackermann_out_aaa

U8_aaa(x1, x2, x3, x4)  =  U8_aaa(x4)

U9_aaa(x1, x2, x3, x4)  =  U9_aaa(x4)

U10_aaa(x1, x2, x3, x4)  =  U10_aaa(x4)

U11_aaa(x1, x2, x3, x4)  =  U11_aaa(x4)

U12_aaa(x1, x2, x3, x4, x5)  =  U12_aaa(x5)

U13_aaa(x1, x2, x3, x4, x5)  =  U13_aaa(x5)

U14_aaa(x1, x2, x3, x4)  =  U14_aaa(x4)

U15_aaa(x1, x2, x3, x4)  =  U15_aaa(x4)

U13_aga(x1, x2, x3, x4, x5)  =  U13_aga(x5)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x4)

U15_aga(x1, x2, x3, x4)  =  U15_aga(x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x4)

U12_gga(x1, x2, x3, x4, x5)  =  U12_gga(x1, x5)

ackermann_in_gaa(x1, x2, x3)  =  ackermann_in_gaa(x1)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x4)

ackermann_out_gaa(x1, x2, x3)  =  ackermann_out_gaa

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x4)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x4)

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4, x5)  =  U12_gaa(x1, x5)

U13_gaa(x1, x2, x3, x4, x5)  =  U13_gaa(x5)

U14_gaa(x1, x2, x3, x4)  =  U14_gaa(x4)

U15_gaa(x1, x2, x3, x4)  =  U15_gaa(x4)

U13_gga(x1, x2, x3, x4, x5)  =  U13_gga(x5)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U15_gga(x1, x2, x3, x4)  =  U15_gga(x4)

main_out_gg(x1, x2)  =  main_out_gg

ACKERMANN_IN_AGA(x1, x2, x3)  =  ACKERMANN_IN_AGA(x2)

U8_AGA(x1, x2, x3, x4)  =  U8_AGA(x4)

U9_AGA(x1, x2, x3, x4)  =  U9_AGA(x4)

U11_AGA(x1, x2, x3, x4)  =  U11_AGA(x4)

U12_AGA(x1, x2, x3, x4, x5)  =  U12_AGA(x5)

ACKERMANN_IN_AAA(x1, x2, x3)  =  ACKERMANN_IN_AAA

U8_AAA(x1, x2, x3, x4)  =  U8_AAA(x4)

U9_AAA(x1, x2, x3, x4)  =  U9_AAA(x4)

U11_AAA(x1, x2, x3, x4)  =  U11_AAA(x4)

U12_AAA(x1, x2, x3, x4, x5)  =  U12_AAA(x5)

U13_AAA(x1, x2, x3, x4, x5)  =  U13_AAA(x5)

U13_AGA(x1, x2, x3, x4, x5)  =  U13_AGA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(168) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(169)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ACKERMANN_IN_AGA(M, N, Ret) -> U8_AGA(M, N, Ret, =:=_in_gg(N, 0))
   U8_AGA(M, N, Ret, =:=_out_gg(N, 0)) -> U9_AGA(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_AGA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AGA(M, N, Ret) -> U11_AGA(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_AGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_AGA(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_AGA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_AGA(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_AGA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   ACKERMANN_IN_AAA(M, N, Ret) -> U8_AAA(M, N, Ret, =:=_in_ag(N, 0))
   U8_AAA(M, N, Ret, =:=_out_ag(N, 0)) -> U9_AAA(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_AAA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AAA(M, N, Ret) -> U11_AAA(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_AAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_AAA(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_AAA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_AAA(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_AAA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U11_AAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> ACKERMANN_IN_AAA(M, N1, Ret1)
   U11_AGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> ACKERMANN_IN_AAA(M, N1, Ret1)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_aa(X0, X1) -> is_out_aa(X0, X1)
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   ackermann_in_aaa(M, N, Ret) -> U6_aaa(M, N, Ret, =:=_in_ag(M, 0))
   ackermann_in_aaa(M, N, Ret) -> U8_aaa(M, N, Ret, =:=_in_ag(N, 0))
   ackermann_in_aaa(M, N, Ret) -> U11_aaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U6_aaa(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U8_aaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_aaa(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U11_aaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_aaa(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U7_aaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_aaa(M, N, Ret)
   U9_aaa(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U12_aaa(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aaa(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U10_aaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aaa(M, N, Ret)
   U13_aaa(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   ackermann_in_aga(M, N, Ret) -> U6_aga(M, N, Ret, =:=_in_ag(M, 0))
   ackermann_in_aga(M, N, Ret) -> U8_aga(M, N, Ret, =:=_in_gg(N, 0))
   ackermann_in_aga(M, N, Ret) -> U11_aga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U14_aaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U6_aga(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U8_aga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_aga(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U11_aga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_aga(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U15_aaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aaa(M, N, Ret)
   U7_aga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_aga(M, N, Ret)
   U9_aga(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U12_aga(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aga(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U10_aga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aga(M, N, Ret)
   U13_aga(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aga(M, N, Ret)

The argument filtering Pi contains the following mapping:
0  =  0

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x1, x2)

1  =  1

-(x1, x2)  =  -(x1, x2)

ackermann_in_aga(x1, x2, x3)  =  ackermann_in_aga(x2)

U6_aga(x1, x2, x3, x4)  =  U6_aga(x2, x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag

U7_aga(x1, x2, x3, x4)  =  U7_aga(x4)

ackermann_out_aga(x1, x2, x3)  =  ackermann_out_aga

U8_aga(x1, x2, x3, x4)  =  U8_aga(x4)

U9_aga(x1, x2, x3, x4)  =  U9_aga(x4)

is_in_aa(x1, x2)  =  is_in_aa

is_out_aa(x1, x2)  =  is_out_aa

U10_aga(x1, x2, x3, x4)  =  U10_aga(x4)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x4)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x5)

ackermann_in_aaa(x1, x2, x3)  =  ackermann_in_aaa

U6_aaa(x1, x2, x3, x4)  =  U6_aaa(x4)

U7_aaa(x1, x2, x3, x4)  =  U7_aaa(x4)

ackermann_out_aaa(x1, x2, x3)  =  ackermann_out_aaa

U8_aaa(x1, x2, x3, x4)  =  U8_aaa(x4)

U9_aaa(x1, x2, x3, x4)  =  U9_aaa(x4)

U10_aaa(x1, x2, x3, x4)  =  U10_aaa(x4)

U11_aaa(x1, x2, x3, x4)  =  U11_aaa(x4)

U12_aaa(x1, x2, x3, x4, x5)  =  U12_aaa(x5)

U13_aaa(x1, x2, x3, x4, x5)  =  U13_aaa(x5)

U14_aaa(x1, x2, x3, x4)  =  U14_aaa(x4)

U15_aaa(x1, x2, x3, x4)  =  U15_aaa(x4)

U13_aga(x1, x2, x3, x4, x5)  =  U13_aga(x5)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x4)

U15_aga(x1, x2, x3, x4)  =  U15_aga(x4)

ACKERMANN_IN_AGA(x1, x2, x3)  =  ACKERMANN_IN_AGA(x2)

U8_AGA(x1, x2, x3, x4)  =  U8_AGA(x4)

U9_AGA(x1, x2, x3, x4)  =  U9_AGA(x4)

U11_AGA(x1, x2, x3, x4)  =  U11_AGA(x4)

U12_AGA(x1, x2, x3, x4, x5)  =  U12_AGA(x5)

ACKERMANN_IN_AAA(x1, x2, x3)  =  ACKERMANN_IN_AAA

U8_AAA(x1, x2, x3, x4)  =  U8_AAA(x4)

U9_AAA(x1, x2, x3, x4)  =  U9_AAA(x4)

U11_AAA(x1, x2, x3, x4)  =  U11_AAA(x4)

U12_AAA(x1, x2, x3, x4, x5)  =  U12_AAA(x5)

U13_AAA(x1, x2, x3, x4, x5)  =  U13_AAA(x5)

U13_AGA(x1, x2, x3, x4, x5)  =  U13_AGA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(170) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(171)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACKERMANN_IN_AGA(N) -> U8_AGA(=:=_in_gg(N, 0))
   U8_AGA(=:=_out_gg) -> U9_AGA(is_in_aa)
   U9_AGA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AGA(N) -> U11_AGA(is_in_ag(-(N, 1)))
   U11_AGA(is_out_ag) -> U12_AGA(ackermann_in_aaa)
   U12_AGA(ackermann_out_aaa) -> U13_AGA(is_in_aa)
   U13_AGA(is_out_aa) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AAA -> U8_AAA(=:=_in_ag(0))
   U8_AAA(=:=_out_ag) -> U9_AAA(is_in_aa)
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AAA -> U11_AAA(is_in_aa)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_in_aa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(is_out_ag) -> ACKERMANN_IN_AAA

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag
   U6_aaa(=:=_out_ag) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(=:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag) -> U7_aga(is_in_ag(+(N, 1)))
   U8_aga(=:=_out_gg) -> U9_aga(is_in_aa)
   U11_aga(is_out_ag) -> U12_aga(ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(is_out_ag) -> ackermann_out_aga
   U9_aga(is_out_aa) -> U10_aga(ackermann_in_aga(1))
   U12_aga(ackermann_out_aaa) -> U13_aga(is_in_aa)
   U10_aga(ackermann_out_aga) -> ackermann_out_aga
   U13_aga(is_out_aa) -> U14_aga(ackermann_in_aaa)
   U14_aga(ackermann_out_aaa) -> U15_aga(is_in_aa)
   U15_aga(is_out_aa) -> ackermann_out_aga

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0)
   U11_aga(x0)
   U15_aaa(x0)
   U7_aga(x0)
   U9_aga(x0)
   U12_aga(x0)
   U10_aga(x0)
   U13_aga(x0)
   U14_aga(x0)
   U15_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(172) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule ACKERMANN_IN_AGA(N) -> U8_AGA(=:=_in_gg(N, 0)) at position [0] we obtained the following new rules [LPAR04]:

   (ACKERMANN_IN_AGA(N) -> U8_AGA(=:=_out_gg),ACKERMANN_IN_AGA(N) -> U8_AGA(=:=_out_gg))


----------------------------------------

(173)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_AGA(=:=_out_gg) -> U9_AGA(is_in_aa)
   U9_AGA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AGA(N) -> U11_AGA(is_in_ag(-(N, 1)))
   U11_AGA(is_out_ag) -> U12_AGA(ackermann_in_aaa)
   U12_AGA(ackermann_out_aaa) -> U13_AGA(is_in_aa)
   U13_AGA(is_out_aa) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AAA -> U8_AAA(=:=_in_ag(0))
   U8_AAA(=:=_out_ag) -> U9_AAA(is_in_aa)
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AAA -> U11_AAA(is_in_aa)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_in_aa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(is_out_ag) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AGA(N) -> U8_AGA(=:=_out_gg)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag
   U6_aaa(=:=_out_ag) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(=:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag) -> U7_aga(is_in_ag(+(N, 1)))
   U8_aga(=:=_out_gg) -> U9_aga(is_in_aa)
   U11_aga(is_out_ag) -> U12_aga(ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(is_out_ag) -> ackermann_out_aga
   U9_aga(is_out_aa) -> U10_aga(ackermann_in_aga(1))
   U12_aga(ackermann_out_aaa) -> U13_aga(is_in_aa)
   U10_aga(ackermann_out_aga) -> ackermann_out_aga
   U13_aga(is_out_aa) -> U14_aga(ackermann_in_aaa)
   U14_aga(ackermann_out_aaa) -> U15_aga(is_in_aa)
   U15_aga(is_out_aa) -> ackermann_out_aga

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0)
   U11_aga(x0)
   U15_aaa(x0)
   U7_aga(x0)
   U9_aga(x0)
   U12_aga(x0)
   U10_aga(x0)
   U13_aga(x0)
   U14_aga(x0)
   U15_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(174) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U8_AGA(=:=_out_gg) -> U9_AGA(is_in_aa) at position [0] we obtained the following new rules [LPAR04]:

   (U8_AGA(=:=_out_gg) -> U9_AGA(is_out_aa),U8_AGA(=:=_out_gg) -> U9_AGA(is_out_aa))


----------------------------------------

(175)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_AGA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AGA(N) -> U11_AGA(is_in_ag(-(N, 1)))
   U11_AGA(is_out_ag) -> U12_AGA(ackermann_in_aaa)
   U12_AGA(ackermann_out_aaa) -> U13_AGA(is_in_aa)
   U13_AGA(is_out_aa) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AAA -> U8_AAA(=:=_in_ag(0))
   U8_AAA(=:=_out_ag) -> U9_AAA(is_in_aa)
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AAA -> U11_AAA(is_in_aa)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_in_aa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(is_out_ag) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AGA(N) -> U8_AGA(=:=_out_gg)
   U8_AGA(=:=_out_gg) -> U9_AGA(is_out_aa)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag
   U6_aaa(=:=_out_ag) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(=:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag) -> U7_aga(is_in_ag(+(N, 1)))
   U8_aga(=:=_out_gg) -> U9_aga(is_in_aa)
   U11_aga(is_out_ag) -> U12_aga(ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(is_out_ag) -> ackermann_out_aga
   U9_aga(is_out_aa) -> U10_aga(ackermann_in_aga(1))
   U12_aga(ackermann_out_aaa) -> U13_aga(is_in_aa)
   U10_aga(ackermann_out_aga) -> ackermann_out_aga
   U13_aga(is_out_aa) -> U14_aga(ackermann_in_aaa)
   U14_aga(ackermann_out_aaa) -> U15_aga(is_in_aa)
   U15_aga(is_out_aa) -> ackermann_out_aga

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0)
   U11_aga(x0)
   U15_aaa(x0)
   U7_aga(x0)
   U9_aga(x0)
   U12_aga(x0)
   U10_aga(x0)
   U13_aga(x0)
   U14_aga(x0)
   U15_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(176) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule ACKERMANN_IN_AGA(N) -> U11_AGA(is_in_ag(-(N, 1))) at position [0] we obtained the following new rules [LPAR04]:

   (ACKERMANN_IN_AGA(N) -> U11_AGA(is_out_ag),ACKERMANN_IN_AGA(N) -> U11_AGA(is_out_ag))


----------------------------------------

(177)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_AGA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AGA(is_out_ag) -> U12_AGA(ackermann_in_aaa)
   U12_AGA(ackermann_out_aaa) -> U13_AGA(is_in_aa)
   U13_AGA(is_out_aa) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AAA -> U8_AAA(=:=_in_ag(0))
   U8_AAA(=:=_out_ag) -> U9_AAA(is_in_aa)
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AAA -> U11_AAA(is_in_aa)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_in_aa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(is_out_ag) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AGA(N) -> U8_AGA(=:=_out_gg)
   U8_AGA(=:=_out_gg) -> U9_AGA(is_out_aa)
   ACKERMANN_IN_AGA(N) -> U11_AGA(is_out_ag)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag
   U6_aaa(=:=_out_ag) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(=:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag) -> U7_aga(is_in_ag(+(N, 1)))
   U8_aga(=:=_out_gg) -> U9_aga(is_in_aa)
   U11_aga(is_out_ag) -> U12_aga(ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(is_out_ag) -> ackermann_out_aga
   U9_aga(is_out_aa) -> U10_aga(ackermann_in_aga(1))
   U12_aga(ackermann_out_aaa) -> U13_aga(is_in_aa)
   U10_aga(ackermann_out_aga) -> ackermann_out_aga
   U13_aga(is_out_aa) -> U14_aga(ackermann_in_aaa)
   U14_aga(ackermann_out_aaa) -> U15_aga(is_in_aa)
   U15_aga(is_out_aa) -> ackermann_out_aga

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0)
   U11_aga(x0)
   U15_aaa(x0)
   U7_aga(x0)
   U9_aga(x0)
   U12_aga(x0)
   U10_aga(x0)
   U13_aga(x0)
   U14_aga(x0)
   U15_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(178) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U12_AGA(ackermann_out_aaa) -> U13_AGA(is_in_aa) at position [0] we obtained the following new rules [LPAR04]:

   (U12_AGA(ackermann_out_aaa) -> U13_AGA(is_out_aa),U12_AGA(ackermann_out_aaa) -> U13_AGA(is_out_aa))


----------------------------------------

(179)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_AGA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AGA(is_out_ag) -> U12_AGA(ackermann_in_aaa)
   U13_AGA(is_out_aa) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AAA -> U8_AAA(=:=_in_ag(0))
   U8_AAA(=:=_out_ag) -> U9_AAA(is_in_aa)
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AAA -> U11_AAA(is_in_aa)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_in_aa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(is_out_ag) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AGA(N) -> U8_AGA(=:=_out_gg)
   U8_AGA(=:=_out_gg) -> U9_AGA(is_out_aa)
   ACKERMANN_IN_AGA(N) -> U11_AGA(is_out_ag)
   U12_AGA(ackermann_out_aaa) -> U13_AGA(is_out_aa)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag
   U6_aaa(=:=_out_ag) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(=:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag) -> U7_aga(is_in_ag(+(N, 1)))
   U8_aga(=:=_out_gg) -> U9_aga(is_in_aa)
   U11_aga(is_out_ag) -> U12_aga(ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(is_out_ag) -> ackermann_out_aga
   U9_aga(is_out_aa) -> U10_aga(ackermann_in_aga(1))
   U12_aga(ackermann_out_aaa) -> U13_aga(is_in_aa)
   U10_aga(ackermann_out_aga) -> ackermann_out_aga
   U13_aga(is_out_aa) -> U14_aga(ackermann_in_aaa)
   U14_aga(ackermann_out_aaa) -> U15_aga(is_in_aa)
   U15_aga(is_out_aa) -> ackermann_out_aga

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0)
   U11_aga(x0)
   U15_aaa(x0)
   U7_aga(x0)
   U9_aga(x0)
   U12_aga(x0)
   U10_aga(x0)
   U13_aga(x0)
   U14_aga(x0)
   U15_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(180) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule ACKERMANN_IN_AAA -> U8_AAA(=:=_in_ag(0)) at position [0] we obtained the following new rules [LPAR04]:

   (ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag),ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag))


----------------------------------------

(181)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_AGA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AGA(is_out_ag) -> U12_AGA(ackermann_in_aaa)
   U13_AGA(is_out_aa) -> ACKERMANN_IN_AAA
   U8_AAA(=:=_out_ag) -> U9_AAA(is_in_aa)
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AAA -> U11_AAA(is_in_aa)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_in_aa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(is_out_ag) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AGA(N) -> U8_AGA(=:=_out_gg)
   U8_AGA(=:=_out_gg) -> U9_AGA(is_out_aa)
   ACKERMANN_IN_AGA(N) -> U11_AGA(is_out_ag)
   U12_AGA(ackermann_out_aaa) -> U13_AGA(is_out_aa)
   ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag
   U6_aaa(=:=_out_ag) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(=:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag) -> U7_aga(is_in_ag(+(N, 1)))
   U8_aga(=:=_out_gg) -> U9_aga(is_in_aa)
   U11_aga(is_out_ag) -> U12_aga(ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(is_out_ag) -> ackermann_out_aga
   U9_aga(is_out_aa) -> U10_aga(ackermann_in_aga(1))
   U12_aga(ackermann_out_aaa) -> U13_aga(is_in_aa)
   U10_aga(ackermann_out_aga) -> ackermann_out_aga
   U13_aga(is_out_aa) -> U14_aga(ackermann_in_aaa)
   U14_aga(ackermann_out_aaa) -> U15_aga(is_in_aa)
   U15_aga(is_out_aa) -> ackermann_out_aga

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0)
   U11_aga(x0)
   U15_aaa(x0)
   U7_aga(x0)
   U9_aga(x0)
   U12_aga(x0)
   U10_aga(x0)
   U13_aga(x0)
   U14_aga(x0)
   U15_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(182) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U8_AAA(=:=_out_ag) -> U9_AAA(is_in_aa) at position [0] we obtained the following new rules [LPAR04]:

   (U8_AAA(=:=_out_ag) -> U9_AAA(is_out_aa),U8_AAA(=:=_out_ag) -> U9_AAA(is_out_aa))


----------------------------------------

(183)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_AGA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AGA(is_out_ag) -> U12_AGA(ackermann_in_aaa)
   U13_AGA(is_out_aa) -> ACKERMANN_IN_AAA
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AAA -> U11_AAA(is_in_aa)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_in_aa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(is_out_ag) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AGA(N) -> U8_AGA(=:=_out_gg)
   U8_AGA(=:=_out_gg) -> U9_AGA(is_out_aa)
   ACKERMANN_IN_AGA(N) -> U11_AGA(is_out_ag)
   U12_AGA(ackermann_out_aaa) -> U13_AGA(is_out_aa)
   ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag)
   U8_AAA(=:=_out_ag) -> U9_AAA(is_out_aa)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag
   U6_aaa(=:=_out_ag) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(=:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag) -> U7_aga(is_in_ag(+(N, 1)))
   U8_aga(=:=_out_gg) -> U9_aga(is_in_aa)
   U11_aga(is_out_ag) -> U12_aga(ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(is_out_ag) -> ackermann_out_aga
   U9_aga(is_out_aa) -> U10_aga(ackermann_in_aga(1))
   U12_aga(ackermann_out_aaa) -> U13_aga(is_in_aa)
   U10_aga(ackermann_out_aga) -> ackermann_out_aga
   U13_aga(is_out_aa) -> U14_aga(ackermann_in_aaa)
   U14_aga(ackermann_out_aaa) -> U15_aga(is_in_aa)
   U15_aga(is_out_aa) -> ackermann_out_aga

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0)
   U11_aga(x0)
   U15_aaa(x0)
   U7_aga(x0)
   U9_aga(x0)
   U12_aga(x0)
   U10_aga(x0)
   U13_aga(x0)
   U14_aga(x0)
   U15_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(184) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule ACKERMANN_IN_AAA -> U11_AAA(is_in_aa) at position [0] we obtained the following new rules [LPAR04]:

   (ACKERMANN_IN_AAA -> U11_AAA(is_out_aa),ACKERMANN_IN_AAA -> U11_AAA(is_out_aa))


----------------------------------------

(185)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_AGA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AGA(is_out_ag) -> U12_AGA(ackermann_in_aaa)
   U13_AGA(is_out_aa) -> ACKERMANN_IN_AAA
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_in_aa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(is_out_ag) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AGA(N) -> U8_AGA(=:=_out_gg)
   U8_AGA(=:=_out_gg) -> U9_AGA(is_out_aa)
   ACKERMANN_IN_AGA(N) -> U11_AGA(is_out_ag)
   U12_AGA(ackermann_out_aaa) -> U13_AGA(is_out_aa)
   ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag)
   U8_AAA(=:=_out_ag) -> U9_AAA(is_out_aa)
   ACKERMANN_IN_AAA -> U11_AAA(is_out_aa)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag
   U6_aaa(=:=_out_ag) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(=:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag) -> U7_aga(is_in_ag(+(N, 1)))
   U8_aga(=:=_out_gg) -> U9_aga(is_in_aa)
   U11_aga(is_out_ag) -> U12_aga(ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(is_out_ag) -> ackermann_out_aga
   U9_aga(is_out_aa) -> U10_aga(ackermann_in_aga(1))
   U12_aga(ackermann_out_aaa) -> U13_aga(is_in_aa)
   U10_aga(ackermann_out_aga) -> ackermann_out_aga
   U13_aga(is_out_aa) -> U14_aga(ackermann_in_aaa)
   U14_aga(ackermann_out_aaa) -> U15_aga(is_in_aa)
   U15_aga(is_out_aa) -> ackermann_out_aga

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0)
   U11_aga(x0)
   U15_aaa(x0)
   U7_aga(x0)
   U9_aga(x0)
   U12_aga(x0)
   U10_aga(x0)
   U13_aga(x0)
   U14_aga(x0)
   U15_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(186) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U12_AAA(ackermann_out_aaa) -> U13_AAA(is_in_aa) at position [0] we obtained the following new rules [LPAR04]:

   (U12_AAA(ackermann_out_aaa) -> U13_AAA(is_out_aa),U12_AAA(ackermann_out_aaa) -> U13_AAA(is_out_aa))


----------------------------------------

(187)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_AGA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AGA(is_out_ag) -> U12_AGA(ackermann_in_aaa)
   U13_AGA(is_out_aa) -> ACKERMANN_IN_AAA
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(is_out_ag) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AGA(N) -> U8_AGA(=:=_out_gg)
   U8_AGA(=:=_out_gg) -> U9_AGA(is_out_aa)
   ACKERMANN_IN_AGA(N) -> U11_AGA(is_out_ag)
   U12_AGA(ackermann_out_aaa) -> U13_AGA(is_out_aa)
   ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag)
   U8_AAA(=:=_out_ag) -> U9_AAA(is_out_aa)
   ACKERMANN_IN_AAA -> U11_AAA(is_out_aa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_out_aa)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag
   U6_aaa(=:=_out_ag) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(=:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag) -> U7_aga(is_in_ag(+(N, 1)))
   U8_aga(=:=_out_gg) -> U9_aga(is_in_aa)
   U11_aga(is_out_ag) -> U12_aga(ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(is_out_ag) -> ackermann_out_aga
   U9_aga(is_out_aa) -> U10_aga(ackermann_in_aga(1))
   U12_aga(ackermann_out_aaa) -> U13_aga(is_in_aa)
   U10_aga(ackermann_out_aga) -> ackermann_out_aga
   U13_aga(is_out_aa) -> U14_aga(ackermann_in_aaa)
   U14_aga(ackermann_out_aaa) -> U15_aga(is_in_aa)
   U15_aga(is_out_aa) -> ackermann_out_aga

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0)
   U11_aga(x0)
   U15_aaa(x0)
   U7_aga(x0)
   U9_aga(x0)
   U12_aga(x0)
   U10_aga(x0)
   U13_aga(x0)
   U14_aga(x0)
   U15_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(188) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule ACKERMANN_IN_AGA(N) -> U8_AGA(=:=_out_gg) we obtained the following new rules [LPAR04]:

   (ACKERMANN_IN_AGA(1) -> U8_AGA(=:=_out_gg),ACKERMANN_IN_AGA(1) -> U8_AGA(=:=_out_gg))


----------------------------------------

(189)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_AGA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AGA(is_out_ag) -> U12_AGA(ackermann_in_aaa)
   U13_AGA(is_out_aa) -> ACKERMANN_IN_AAA
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(is_out_ag) -> ACKERMANN_IN_AAA
   U8_AGA(=:=_out_gg) -> U9_AGA(is_out_aa)
   ACKERMANN_IN_AGA(N) -> U11_AGA(is_out_ag)
   U12_AGA(ackermann_out_aaa) -> U13_AGA(is_out_aa)
   ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag)
   U8_AAA(=:=_out_ag) -> U9_AAA(is_out_aa)
   ACKERMANN_IN_AAA -> U11_AAA(is_out_aa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_out_aa)
   ACKERMANN_IN_AGA(1) -> U8_AGA(=:=_out_gg)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag
   U6_aaa(=:=_out_ag) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(=:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag) -> U7_aga(is_in_ag(+(N, 1)))
   U8_aga(=:=_out_gg) -> U9_aga(is_in_aa)
   U11_aga(is_out_ag) -> U12_aga(ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(is_out_ag) -> ackermann_out_aga
   U9_aga(is_out_aa) -> U10_aga(ackermann_in_aga(1))
   U12_aga(ackermann_out_aaa) -> U13_aga(is_in_aa)
   U10_aga(ackermann_out_aga) -> ackermann_out_aga
   U13_aga(is_out_aa) -> U14_aga(ackermann_in_aaa)
   U14_aga(ackermann_out_aaa) -> U15_aga(is_in_aa)
   U15_aga(is_out_aa) -> ackermann_out_aga

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0)
   U11_aga(x0)
   U15_aaa(x0)
   U7_aga(x0)
   U9_aga(x0)
   U12_aga(x0)
   U10_aga(x0)
   U13_aga(x0)
   U14_aga(x0)
   U15_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(190) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule ACKERMANN_IN_AGA(N) -> U11_AGA(is_out_ag) we obtained the following new rules [LPAR04]:

   (ACKERMANN_IN_AGA(1) -> U11_AGA(is_out_ag),ACKERMANN_IN_AGA(1) -> U11_AGA(is_out_ag))


----------------------------------------

(191)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_AGA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AGA(is_out_ag) -> U12_AGA(ackermann_in_aaa)
   U13_AGA(is_out_aa) -> ACKERMANN_IN_AAA
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(is_out_ag) -> ACKERMANN_IN_AAA
   U8_AGA(=:=_out_gg) -> U9_AGA(is_out_aa)
   U12_AGA(ackermann_out_aaa) -> U13_AGA(is_out_aa)
   ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag)
   U8_AAA(=:=_out_ag) -> U9_AAA(is_out_aa)
   ACKERMANN_IN_AAA -> U11_AAA(is_out_aa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_out_aa)
   ACKERMANN_IN_AGA(1) -> U8_AGA(=:=_out_gg)
   ACKERMANN_IN_AGA(1) -> U11_AGA(is_out_ag)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag
   U6_aaa(=:=_out_ag) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(=:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag) -> U7_aga(is_in_ag(+(N, 1)))
   U8_aga(=:=_out_gg) -> U9_aga(is_in_aa)
   U11_aga(is_out_ag) -> U12_aga(ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(is_out_ag) -> ackermann_out_aga
   U9_aga(is_out_aa) -> U10_aga(ackermann_in_aga(1))
   U12_aga(ackermann_out_aaa) -> U13_aga(is_in_aa)
   U10_aga(ackermann_out_aga) -> ackermann_out_aga
   U13_aga(is_out_aa) -> U14_aga(ackermann_in_aaa)
   U14_aga(ackermann_out_aaa) -> U15_aga(is_in_aa)
   U15_aga(is_out_aa) -> ackermann_out_aga

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0)
   U11_aga(x0)
   U15_aaa(x0)
   U7_aga(x0)
   U9_aga(x0)
   U12_aga(x0)
   U10_aga(x0)
   U13_aga(x0)
   U14_aga(x0)
   U15_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(192)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ACKERMANN_IN_GAA(M, N, Ret) -> U11_GAA(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_GAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> ACKERMANN_IN_GAA(M, N1, Ret1)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, =<_in_gg(M, 3))
   =<_in_gg(X0, X1) -> =<_out_gg(X0, X1)
   U2_gg(M, N, =<_out_gg(M, 3)) -> U3_gg(M, N, >=_in_gg(N, 0))
   U3_gg(M, N, >=_out_gg(N, 0)) -> U4_gg(M, N, =<_in_gg(N, 23))
   U4_gg(M, N, =<_out_gg(N, 23)) -> U5_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U6_gga(M, N, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U6_gga(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U7_gga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U8_gga(M, N, Ret, =:=_in_gg(N, 0))
   U8_gga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_gga(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gga(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U6_aga(M, N, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U6_aga(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U7_aga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_aga(M, N, Ret)
   ackermann_in_aga(M, N, Ret) -> U8_aga(M, N, Ret, =:=_in_gg(N, 0))
   U8_aga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_aga(M, N, Ret, is_in_aa(M1, -(M, 1)))
   is_in_aa(X0, X1) -> is_out_aa(X0, X1)
   U9_aga(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U11_aga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_aga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_aga(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   ackermann_in_aaa(M, N, Ret) -> U6_aaa(M, N, Ret, =:=_in_ag(M, 0))
   U6_aaa(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_aaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U8_aaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_aaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_aaa(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_aaa(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_aaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U11_aaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_aaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_aaa(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_aaa(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aaa(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aaa(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aaa(M, N, Ret)
   U12_aga(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aga(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aga(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aga(M, N, Ret)
   U10_aga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aga(M, N, Ret)
   U10_gga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U11_gga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_gga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_gga(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   ackermann_in_gaa(M, N, Ret) -> U6_gaa(M, N, Ret, =:=_in_gg(M, 0))
   U6_gaa(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_gaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U8_gaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_gaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_gaa(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gaa(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_gaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U11_gaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_gaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_gaa(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U12_gaa(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gaa(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gaa(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gaa(M, N, Ret)
   U12_gga(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gga(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gga(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U5_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

=<_in_gg(x1, x2)  =  =<_in_gg(x1, x2)

=<_out_gg(x1, x2)  =  =<_out_gg

3  =  3

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

23  =  23

U5_gg(x1, x2, x3)  =  U5_gg(x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg

U7_gga(x1, x2, x3, x4)  =  U7_gga(x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x1, x2)

1  =  1

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x4)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x4)

-(x1, x2)  =  -(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x4)

ackermann_in_aga(x1, x2, x3)  =  ackermann_in_aga(x2)

U6_aga(x1, x2, x3, x4)  =  U6_aga(x2, x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag

U7_aga(x1, x2, x3, x4)  =  U7_aga(x4)

ackermann_out_aga(x1, x2, x3)  =  ackermann_out_aga

U8_aga(x1, x2, x3, x4)  =  U8_aga(x4)

U9_aga(x1, x2, x3, x4)  =  U9_aga(x4)

is_in_aa(x1, x2)  =  is_in_aa

is_out_aa(x1, x2)  =  is_out_aa

U10_aga(x1, x2, x3, x4)  =  U10_aga(x4)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x4)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x5)

ackermann_in_aaa(x1, x2, x3)  =  ackermann_in_aaa

U6_aaa(x1, x2, x3, x4)  =  U6_aaa(x4)

U7_aaa(x1, x2, x3, x4)  =  U7_aaa(x4)

ackermann_out_aaa(x1, x2, x3)  =  ackermann_out_aaa

U8_aaa(x1, x2, x3, x4)  =  U8_aaa(x4)

U9_aaa(x1, x2, x3, x4)  =  U9_aaa(x4)

U10_aaa(x1, x2, x3, x4)  =  U10_aaa(x4)

U11_aaa(x1, x2, x3, x4)  =  U11_aaa(x4)

U12_aaa(x1, x2, x3, x4, x5)  =  U12_aaa(x5)

U13_aaa(x1, x2, x3, x4, x5)  =  U13_aaa(x5)

U14_aaa(x1, x2, x3, x4)  =  U14_aaa(x4)

U15_aaa(x1, x2, x3, x4)  =  U15_aaa(x4)

U13_aga(x1, x2, x3, x4, x5)  =  U13_aga(x5)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x4)

U15_aga(x1, x2, x3, x4)  =  U15_aga(x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x4)

U12_gga(x1, x2, x3, x4, x5)  =  U12_gga(x1, x5)

ackermann_in_gaa(x1, x2, x3)  =  ackermann_in_gaa(x1)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x4)

ackermann_out_gaa(x1, x2, x3)  =  ackermann_out_gaa

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x4)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x4)

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4, x5)  =  U12_gaa(x1, x5)

U13_gaa(x1, x2, x3, x4, x5)  =  U13_gaa(x5)

U14_gaa(x1, x2, x3, x4)  =  U14_gaa(x4)

U15_gaa(x1, x2, x3, x4)  =  U15_gaa(x4)

U13_gga(x1, x2, x3, x4, x5)  =  U13_gga(x5)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U15_gga(x1, x2, x3, x4)  =  U15_gga(x4)

main_out_gg(x1, x2)  =  main_out_gg

ACKERMANN_IN_GAA(x1, x2, x3)  =  ACKERMANN_IN_GAA(x1)

U11_GAA(x1, x2, x3, x4)  =  U11_GAA(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(193) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(194)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ACKERMANN_IN_GAA(M, N, Ret) -> U11_GAA(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_GAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> ACKERMANN_IN_GAA(M, N1, Ret1)

The TRS R consists of the following rules:

   is_in_aa(X0, X1) -> is_out_aa(X0, X1)

The argument filtering Pi contains the following mapping:
1  =  1

-(x1, x2)  =  -(x1, x2)

is_in_aa(x1, x2)  =  is_in_aa

is_out_aa(x1, x2)  =  is_out_aa

ACKERMANN_IN_GAA(x1, x2, x3)  =  ACKERMANN_IN_GAA(x1)

U11_GAA(x1, x2, x3, x4)  =  U11_GAA(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(195) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

main_in_2: (b,b)

ackermann_in_3: (b,b,f) (f,b,f) (f,f,f) (b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, =<_in_gg(M, 3))
   =<_in_gg(X0, X1) -> =<_out_gg(X0, X1)
   U2_gg(M, N, =<_out_gg(M, 3)) -> U3_gg(M, N, >=_in_gg(N, 0))
   U3_gg(M, N, >=_out_gg(N, 0)) -> U4_gg(M, N, =<_in_gg(N, 23))
   U4_gg(M, N, =<_out_gg(N, 23)) -> U5_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U6_gga(M, N, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U6_gga(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U7_gga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U8_gga(M, N, Ret, =:=_in_gg(N, 0))
   U8_gga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_gga(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gga(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U6_aga(M, N, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U6_aga(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U7_aga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_aga(M, N, Ret)
   ackermann_in_aga(M, N, Ret) -> U8_aga(M, N, Ret, =:=_in_gg(N, 0))
   U8_aga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_aga(M, N, Ret, is_in_aa(M1, -(M, 1)))
   is_in_aa(X0, X1) -> is_out_aa(X0, X1)
   U9_aga(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U11_aga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_aga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_aga(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   ackermann_in_aaa(M, N, Ret) -> U6_aaa(M, N, Ret, =:=_in_ag(M, 0))
   U6_aaa(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_aaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U8_aaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_aaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_aaa(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_aaa(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_aaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U11_aaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_aaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_aaa(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_aaa(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aaa(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aaa(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aaa(M, N, Ret)
   U12_aga(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aga(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aga(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aga(M, N, Ret)
   U10_aga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aga(M, N, Ret)
   U10_gga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U11_gga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_gga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_gga(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   ackermann_in_gaa(M, N, Ret) -> U6_gaa(M, N, Ret, =:=_in_gg(M, 0))
   U6_gaa(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_gaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U8_gaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_gaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_gaa(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gaa(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_gaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U11_gaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_gaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_gaa(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U12_gaa(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gaa(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gaa(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gaa(M, N, Ret)
   U12_gga(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gga(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gga(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U5_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg(x1, x2)

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

=<_in_gg(x1, x2)  =  =<_in_gg(x1, x2)

=<_out_gg(x1, x2)  =  =<_out_gg(x1, x2)

3  =  3

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

23  =  23

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg(x1, x2)

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

+(x1, x2)  =  +(x1, x2)

1  =  1

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x1, x2)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x1, x2, x4)

-(x1, x2)  =  -(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

ackermann_in_aga(x1, x2, x3)  =  ackermann_in_aga(x2)

U6_aga(x1, x2, x3, x4)  =  U6_aga(x2, x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag(x2)

U7_aga(x1, x2, x3, x4)  =  U7_aga(x2, x4)

ackermann_out_aga(x1, x2, x3)  =  ackermann_out_aga(x2)

U8_aga(x1, x2, x3, x4)  =  U8_aga(x2, x4)

U9_aga(x1, x2, x3, x4)  =  U9_aga(x2, x4)

is_in_aa(x1, x2)  =  is_in_aa

is_out_aa(x1, x2)  =  is_out_aa

U10_aga(x1, x2, x3, x4)  =  U10_aga(x2, x4)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x2, x4)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x5)

ackermann_in_aaa(x1, x2, x3)  =  ackermann_in_aaa

U6_aaa(x1, x2, x3, x4)  =  U6_aaa(x4)

U7_aaa(x1, x2, x3, x4)  =  U7_aaa(x4)

ackermann_out_aaa(x1, x2, x3)  =  ackermann_out_aaa

U8_aaa(x1, x2, x3, x4)  =  U8_aaa(x4)

U9_aaa(x1, x2, x3, x4)  =  U9_aaa(x4)

U10_aaa(x1, x2, x3, x4)  =  U10_aaa(x4)

U11_aaa(x1, x2, x3, x4)  =  U11_aaa(x4)

U12_aaa(x1, x2, x3, x4, x5)  =  U12_aaa(x5)

U13_aaa(x1, x2, x3, x4, x5)  =  U13_aaa(x5)

U14_aaa(x1, x2, x3, x4)  =  U14_aaa(x4)

U15_aaa(x1, x2, x3, x4)  =  U15_aaa(x4)

U13_aga(x1, x2, x3, x4, x5)  =  U13_aga(x2, x5)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x2, x4)

U15_aga(x1, x2, x3, x4)  =  U15_aga(x2, x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x2, x4)

U12_gga(x1, x2, x3, x4, x5)  =  U12_gga(x1, x2, x5)

ackermann_in_gaa(x1, x2, x3)  =  ackermann_in_gaa(x1)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

ackermann_out_gaa(x1, x2, x3)  =  ackermann_out_gaa(x1)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x1, x4)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4, x5)  =  U12_gaa(x1, x5)

U13_gaa(x1, x2, x3, x4, x5)  =  U13_gaa(x1, x5)

U14_gaa(x1, x2, x3, x4)  =  U14_gaa(x1, x4)

U15_gaa(x1, x2, x3, x4)  =  U15_gaa(x1, x4)

U13_gga(x1, x2, x3, x4, x5)  =  U13_gga(x1, x2, x5)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x1, x2, x4)

U15_gga(x1, x2, x3, x4)  =  U15_gga(x1, x2, x4)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(196)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, =<_in_gg(M, 3))
   =<_in_gg(X0, X1) -> =<_out_gg(X0, X1)
   U2_gg(M, N, =<_out_gg(M, 3)) -> U3_gg(M, N, >=_in_gg(N, 0))
   U3_gg(M, N, >=_out_gg(N, 0)) -> U4_gg(M, N, =<_in_gg(N, 23))
   U4_gg(M, N, =<_out_gg(N, 23)) -> U5_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U6_gga(M, N, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U6_gga(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U7_gga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U8_gga(M, N, Ret, =:=_in_gg(N, 0))
   U8_gga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_gga(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gga(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U6_aga(M, N, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U6_aga(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U7_aga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_aga(M, N, Ret)
   ackermann_in_aga(M, N, Ret) -> U8_aga(M, N, Ret, =:=_in_gg(N, 0))
   U8_aga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_aga(M, N, Ret, is_in_aa(M1, -(M, 1)))
   is_in_aa(X0, X1) -> is_out_aa(X0, X1)
   U9_aga(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U11_aga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_aga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_aga(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   ackermann_in_aaa(M, N, Ret) -> U6_aaa(M, N, Ret, =:=_in_ag(M, 0))
   U6_aaa(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_aaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U8_aaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_aaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_aaa(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_aaa(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_aaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U11_aaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_aaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_aaa(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_aaa(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aaa(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aaa(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aaa(M, N, Ret)
   U12_aga(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aga(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aga(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aga(M, N, Ret)
   U10_aga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aga(M, N, Ret)
   U10_gga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U11_gga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_gga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_gga(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   ackermann_in_gaa(M, N, Ret) -> U6_gaa(M, N, Ret, =:=_in_gg(M, 0))
   U6_gaa(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_gaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U8_gaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_gaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_gaa(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gaa(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_gaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U11_gaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_gaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_gaa(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U12_gaa(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gaa(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gaa(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gaa(M, N, Ret)
   U12_gga(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gga(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gga(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U5_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg(x1, x2)

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

=<_in_gg(x1, x2)  =  =<_in_gg(x1, x2)

=<_out_gg(x1, x2)  =  =<_out_gg(x1, x2)

3  =  3

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

23  =  23

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg(x1, x2)

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

+(x1, x2)  =  +(x1, x2)

1  =  1

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x1, x2)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x1, x2, x4)

-(x1, x2)  =  -(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

ackermann_in_aga(x1, x2, x3)  =  ackermann_in_aga(x2)

U6_aga(x1, x2, x3, x4)  =  U6_aga(x2, x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag(x2)

U7_aga(x1, x2, x3, x4)  =  U7_aga(x2, x4)

ackermann_out_aga(x1, x2, x3)  =  ackermann_out_aga(x2)

U8_aga(x1, x2, x3, x4)  =  U8_aga(x2, x4)

U9_aga(x1, x2, x3, x4)  =  U9_aga(x2, x4)

is_in_aa(x1, x2)  =  is_in_aa

is_out_aa(x1, x2)  =  is_out_aa

U10_aga(x1, x2, x3, x4)  =  U10_aga(x2, x4)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x2, x4)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x5)

ackermann_in_aaa(x1, x2, x3)  =  ackermann_in_aaa

U6_aaa(x1, x2, x3, x4)  =  U6_aaa(x4)

U7_aaa(x1, x2, x3, x4)  =  U7_aaa(x4)

ackermann_out_aaa(x1, x2, x3)  =  ackermann_out_aaa

U8_aaa(x1, x2, x3, x4)  =  U8_aaa(x4)

U9_aaa(x1, x2, x3, x4)  =  U9_aaa(x4)

U10_aaa(x1, x2, x3, x4)  =  U10_aaa(x4)

U11_aaa(x1, x2, x3, x4)  =  U11_aaa(x4)

U12_aaa(x1, x2, x3, x4, x5)  =  U12_aaa(x5)

U13_aaa(x1, x2, x3, x4, x5)  =  U13_aaa(x5)

U14_aaa(x1, x2, x3, x4)  =  U14_aaa(x4)

U15_aaa(x1, x2, x3, x4)  =  U15_aaa(x4)

U13_aga(x1, x2, x3, x4, x5)  =  U13_aga(x2, x5)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x2, x4)

U15_aga(x1, x2, x3, x4)  =  U15_aga(x2, x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x2, x4)

U12_gga(x1, x2, x3, x4, x5)  =  U12_gga(x1, x2, x5)

ackermann_in_gaa(x1, x2, x3)  =  ackermann_in_gaa(x1)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

ackermann_out_gaa(x1, x2, x3)  =  ackermann_out_gaa(x1)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x1, x4)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4, x5)  =  U12_gaa(x1, x5)

U13_gaa(x1, x2, x3, x4, x5)  =  U13_gaa(x1, x5)

U14_gaa(x1, x2, x3, x4)  =  U14_gaa(x1, x4)

U15_gaa(x1, x2, x3, x4)  =  U15_gaa(x1, x4)

U13_gga(x1, x2, x3, x4, x5)  =  U13_gga(x1, x2, x5)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x1, x2, x4)

U15_gga(x1, x2, x3, x4)  =  U15_gga(x1, x2, x4)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)



----------------------------------------

(197) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GG(M, N) -> U1_GG(M, N, >=_in_gg(M, 0))
   MAIN_IN_GG(M, N) -> >=_IN_GG(M, 0)
   U1_GG(M, N, >=_out_gg(M, 0)) -> U2_GG(M, N, =<_in_gg(M, 3))
   U1_GG(M, N, >=_out_gg(M, 0)) -> =<_IN_GG(M, 3)
   U2_GG(M, N, =<_out_gg(M, 3)) -> U3_GG(M, N, >=_in_gg(N, 0))
   U2_GG(M, N, =<_out_gg(M, 3)) -> >=_IN_GG(N, 0)
   U3_GG(M, N, >=_out_gg(N, 0)) -> U4_GG(M, N, =<_in_gg(N, 23))
   U3_GG(M, N, >=_out_gg(N, 0)) -> =<_IN_GG(N, 23)
   U4_GG(M, N, =<_out_gg(N, 23)) -> U5_GG(M, N, ackermann_in_gga(M, N, X1))
   U4_GG(M, N, =<_out_gg(N, 23)) -> ACKERMANN_IN_GGA(M, N, X1)
   ACKERMANN_IN_GGA(M, N, Ret) -> U6_GGA(M, N, Ret, =:=_in_gg(M, 0))
   ACKERMANN_IN_GGA(M, N, Ret) -> =:=_IN_GG(M, 0)
   U6_GGA(M, N, Ret, =:=_out_gg(M, 0)) -> U7_GGA(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U6_GGA(M, N, Ret, =:=_out_gg(M, 0)) -> IS_IN_AG(Ret, +(N, 1))
   ACKERMANN_IN_GGA(M, N, Ret) -> U8_GGA(M, N, Ret, =:=_in_gg(N, 0))
   ACKERMANN_IN_GGA(M, N, Ret) -> =:=_IN_GG(N, 0)
   U8_GGA(M, N, Ret, =:=_out_gg(N, 0)) -> U9_GGA(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U8_GGA(M, N, Ret, =:=_out_gg(N, 0)) -> IS_IN_AG(M1, -(M, 1))
   U9_GGA(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_GGA(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U9_GGA(M, N, Ret, is_out_ag(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AGA(M, N, Ret) -> U6_AGA(M, N, Ret, =:=_in_ag(M, 0))
   ACKERMANN_IN_AGA(M, N, Ret) -> =:=_IN_AG(M, 0)
   U6_AGA(M, N, Ret, =:=_out_ag(M, 0)) -> U7_AGA(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U6_AGA(M, N, Ret, =:=_out_ag(M, 0)) -> IS_IN_AG(Ret, +(N, 1))
   ACKERMANN_IN_AGA(M, N, Ret) -> U8_AGA(M, N, Ret, =:=_in_gg(N, 0))
   ACKERMANN_IN_AGA(M, N, Ret) -> =:=_IN_GG(N, 0)
   U8_AGA(M, N, Ret, =:=_out_gg(N, 0)) -> U9_AGA(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U8_AGA(M, N, Ret, =:=_out_gg(N, 0)) -> IS_IN_AA(M1, -(M, 1))
   U9_AGA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_AGA(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U9_AGA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AGA(M, N, Ret) -> U11_AGA(M, N, Ret, is_in_ag(N1, -(N, 1)))
   ACKERMANN_IN_AGA(M, N, Ret) -> IS_IN_AG(N1, -(N, 1))
   U11_AGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_AGA(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U11_AGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> ACKERMANN_IN_AAA(M, N1, Ret1)
   ACKERMANN_IN_AAA(M, N, Ret) -> U6_AAA(M, N, Ret, =:=_in_ag(M, 0))
   ACKERMANN_IN_AAA(M, N, Ret) -> =:=_IN_AG(M, 0)
   U6_AAA(M, N, Ret, =:=_out_ag(M, 0)) -> U7_AAA(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U6_AAA(M, N, Ret, =:=_out_ag(M, 0)) -> IS_IN_AA(Ret, +(N, 1))
   ACKERMANN_IN_AAA(M, N, Ret) -> U8_AAA(M, N, Ret, =:=_in_ag(N, 0))
   ACKERMANN_IN_AAA(M, N, Ret) -> =:=_IN_AG(N, 0)
   U8_AAA(M, N, Ret, =:=_out_ag(N, 0)) -> U9_AAA(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U8_AAA(M, N, Ret, =:=_out_ag(N, 0)) -> IS_IN_AA(M1, -(M, 1))
   U9_AAA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_AAA(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U9_AAA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AAA(M, N, Ret) -> U11_AAA(M, N, Ret, is_in_aa(N1, -(N, 1)))
   ACKERMANN_IN_AAA(M, N, Ret) -> IS_IN_AA(N1, -(N, 1))
   U11_AAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_AAA(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U11_AAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> ACKERMANN_IN_AAA(M, N1, Ret1)
   U12_AAA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_AAA(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U12_AAA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> IS_IN_AA(M1, -(M, 1))
   U13_AAA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_AAA(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U13_AAA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U14_AAA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_AAA(M, N, Ret, is_in_aa(Ret, Ret2))
   U14_AAA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> IS_IN_AA(Ret, Ret2)
   U12_AGA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_AGA(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U12_AGA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> IS_IN_AA(M1, -(M, 1))
   U13_AGA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_AGA(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U13_AGA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U14_AGA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_AGA(M, N, Ret, is_in_aa(Ret, Ret2))
   U14_AGA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> IS_IN_AA(Ret, Ret2)
   ACKERMANN_IN_GGA(M, N, Ret) -> U11_GGA(M, N, Ret, is_in_ag(N1, -(N, 1)))
   ACKERMANN_IN_GGA(M, N, Ret) -> IS_IN_AG(N1, -(N, 1))
   U11_GGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_GGA(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U11_GGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> ACKERMANN_IN_GAA(M, N1, Ret1)
   ACKERMANN_IN_GAA(M, N, Ret) -> U6_GAA(M, N, Ret, =:=_in_gg(M, 0))
   ACKERMANN_IN_GAA(M, N, Ret) -> =:=_IN_GG(M, 0)
   U6_GAA(M, N, Ret, =:=_out_gg(M, 0)) -> U7_GAA(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U6_GAA(M, N, Ret, =:=_out_gg(M, 0)) -> IS_IN_AA(Ret, +(N, 1))
   ACKERMANN_IN_GAA(M, N, Ret) -> U8_GAA(M, N, Ret, =:=_in_ag(N, 0))
   ACKERMANN_IN_GAA(M, N, Ret) -> =:=_IN_AG(N, 0)
   U8_GAA(M, N, Ret, =:=_out_ag(N, 0)) -> U9_GAA(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U8_GAA(M, N, Ret, =:=_out_ag(N, 0)) -> IS_IN_AG(M1, -(M, 1))
   U9_GAA(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_GAA(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U9_GAA(M, N, Ret, is_out_ag(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_GAA(M, N, Ret) -> U11_GAA(M, N, Ret, is_in_aa(N1, -(N, 1)))
   ACKERMANN_IN_GAA(M, N, Ret) -> IS_IN_AA(N1, -(N, 1))
   U11_GAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_GAA(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U11_GAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> ACKERMANN_IN_GAA(M, N1, Ret1)
   U12_GAA(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_GAA(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U12_GAA(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> IS_IN_AG(M1, -(M, 1))
   U13_GAA(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_GAA(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U13_GAA(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U14_GAA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_GAA(M, N, Ret, is_in_aa(Ret, Ret2))
   U14_GAA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> IS_IN_AA(Ret, Ret2)
   U12_GGA(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_GGA(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U12_GGA(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> IS_IN_AG(M1, -(M, 1))
   U13_GGA(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_GGA(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U13_GGA(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U14_GGA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_GGA(M, N, Ret, is_in_aa(Ret, Ret2))
   U14_GGA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> IS_IN_AA(Ret, Ret2)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, =<_in_gg(M, 3))
   =<_in_gg(X0, X1) -> =<_out_gg(X0, X1)
   U2_gg(M, N, =<_out_gg(M, 3)) -> U3_gg(M, N, >=_in_gg(N, 0))
   U3_gg(M, N, >=_out_gg(N, 0)) -> U4_gg(M, N, =<_in_gg(N, 23))
   U4_gg(M, N, =<_out_gg(N, 23)) -> U5_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U6_gga(M, N, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U6_gga(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U7_gga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U8_gga(M, N, Ret, =:=_in_gg(N, 0))
   U8_gga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_gga(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gga(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U6_aga(M, N, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U6_aga(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U7_aga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_aga(M, N, Ret)
   ackermann_in_aga(M, N, Ret) -> U8_aga(M, N, Ret, =:=_in_gg(N, 0))
   U8_aga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_aga(M, N, Ret, is_in_aa(M1, -(M, 1)))
   is_in_aa(X0, X1) -> is_out_aa(X0, X1)
   U9_aga(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U11_aga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_aga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_aga(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   ackermann_in_aaa(M, N, Ret) -> U6_aaa(M, N, Ret, =:=_in_ag(M, 0))
   U6_aaa(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_aaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U8_aaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_aaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_aaa(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_aaa(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_aaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U11_aaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_aaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_aaa(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_aaa(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aaa(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aaa(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aaa(M, N, Ret)
   U12_aga(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aga(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aga(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aga(M, N, Ret)
   U10_aga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aga(M, N, Ret)
   U10_gga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U11_gga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_gga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_gga(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   ackermann_in_gaa(M, N, Ret) -> U6_gaa(M, N, Ret, =:=_in_gg(M, 0))
   U6_gaa(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_gaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U8_gaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_gaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_gaa(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gaa(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_gaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U11_gaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_gaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_gaa(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U12_gaa(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gaa(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gaa(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gaa(M, N, Ret)
   U12_gga(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gga(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gga(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U5_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg(x1, x2)

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

=<_in_gg(x1, x2)  =  =<_in_gg(x1, x2)

=<_out_gg(x1, x2)  =  =<_out_gg(x1, x2)

3  =  3

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

23  =  23

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg(x1, x2)

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

+(x1, x2)  =  +(x1, x2)

1  =  1

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x1, x2)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x1, x2, x4)

-(x1, x2)  =  -(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

ackermann_in_aga(x1, x2, x3)  =  ackermann_in_aga(x2)

U6_aga(x1, x2, x3, x4)  =  U6_aga(x2, x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag(x2)

U7_aga(x1, x2, x3, x4)  =  U7_aga(x2, x4)

ackermann_out_aga(x1, x2, x3)  =  ackermann_out_aga(x2)

U8_aga(x1, x2, x3, x4)  =  U8_aga(x2, x4)

U9_aga(x1, x2, x3, x4)  =  U9_aga(x2, x4)

is_in_aa(x1, x2)  =  is_in_aa

is_out_aa(x1, x2)  =  is_out_aa

U10_aga(x1, x2, x3, x4)  =  U10_aga(x2, x4)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x2, x4)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x5)

ackermann_in_aaa(x1, x2, x3)  =  ackermann_in_aaa

U6_aaa(x1, x2, x3, x4)  =  U6_aaa(x4)

U7_aaa(x1, x2, x3, x4)  =  U7_aaa(x4)

ackermann_out_aaa(x1, x2, x3)  =  ackermann_out_aaa

U8_aaa(x1, x2, x3, x4)  =  U8_aaa(x4)

U9_aaa(x1, x2, x3, x4)  =  U9_aaa(x4)

U10_aaa(x1, x2, x3, x4)  =  U10_aaa(x4)

U11_aaa(x1, x2, x3, x4)  =  U11_aaa(x4)

U12_aaa(x1, x2, x3, x4, x5)  =  U12_aaa(x5)

U13_aaa(x1, x2, x3, x4, x5)  =  U13_aaa(x5)

U14_aaa(x1, x2, x3, x4)  =  U14_aaa(x4)

U15_aaa(x1, x2, x3, x4)  =  U15_aaa(x4)

U13_aga(x1, x2, x3, x4, x5)  =  U13_aga(x2, x5)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x2, x4)

U15_aga(x1, x2, x3, x4)  =  U15_aga(x2, x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x2, x4)

U12_gga(x1, x2, x3, x4, x5)  =  U12_gga(x1, x2, x5)

ackermann_in_gaa(x1, x2, x3)  =  ackermann_in_gaa(x1)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

ackermann_out_gaa(x1, x2, x3)  =  ackermann_out_gaa(x1)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x1, x4)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4, x5)  =  U12_gaa(x1, x5)

U13_gaa(x1, x2, x3, x4, x5)  =  U13_gaa(x1, x5)

U14_gaa(x1, x2, x3, x4)  =  U14_gaa(x1, x4)

U15_gaa(x1, x2, x3, x4)  =  U15_gaa(x1, x4)

U13_gga(x1, x2, x3, x4, x5)  =  U13_gga(x1, x2, x5)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x1, x2, x4)

U15_gga(x1, x2, x3, x4)  =  U15_gga(x1, x2, x4)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

MAIN_IN_GG(x1, x2)  =  MAIN_IN_GG(x1, x2)

U1_GG(x1, x2, x3)  =  U1_GG(x1, x2, x3)

>=_IN_GG(x1, x2)  =  >=_IN_GG(x1, x2)

U2_GG(x1, x2, x3)  =  U2_GG(x1, x2, x3)

=<_IN_GG(x1, x2)  =  =<_IN_GG(x1, x2)

U3_GG(x1, x2, x3)  =  U3_GG(x1, x2, x3)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)

U5_GG(x1, x2, x3)  =  U5_GG(x1, x2, x3)

ACKERMANN_IN_GGA(x1, x2, x3)  =  ACKERMANN_IN_GGA(x1, x2)

U6_GGA(x1, x2, x3, x4)  =  U6_GGA(x1, x2, x4)

=:=_IN_GG(x1, x2)  =  =:=_IN_GG(x1, x2)

U7_GGA(x1, x2, x3, x4)  =  U7_GGA(x1, x2, x4)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U8_GGA(x1, x2, x3, x4)  =  U8_GGA(x1, x2, x4)

U9_GGA(x1, x2, x3, x4)  =  U9_GGA(x1, x2, x4)

U10_GGA(x1, x2, x3, x4)  =  U10_GGA(x1, x2, x4)

ACKERMANN_IN_AGA(x1, x2, x3)  =  ACKERMANN_IN_AGA(x2)

U6_AGA(x1, x2, x3, x4)  =  U6_AGA(x2, x4)

=:=_IN_AG(x1, x2)  =  =:=_IN_AG(x2)

U7_AGA(x1, x2, x3, x4)  =  U7_AGA(x2, x4)

U8_AGA(x1, x2, x3, x4)  =  U8_AGA(x2, x4)

U9_AGA(x1, x2, x3, x4)  =  U9_AGA(x2, x4)

IS_IN_AA(x1, x2)  =  IS_IN_AA

U10_AGA(x1, x2, x3, x4)  =  U10_AGA(x2, x4)

U11_AGA(x1, x2, x3, x4)  =  U11_AGA(x2, x4)

U12_AGA(x1, x2, x3, x4, x5)  =  U12_AGA(x2, x5)

ACKERMANN_IN_AAA(x1, x2, x3)  =  ACKERMANN_IN_AAA

U6_AAA(x1, x2, x3, x4)  =  U6_AAA(x4)

U7_AAA(x1, x2, x3, x4)  =  U7_AAA(x4)

U8_AAA(x1, x2, x3, x4)  =  U8_AAA(x4)

U9_AAA(x1, x2, x3, x4)  =  U9_AAA(x4)

U10_AAA(x1, x2, x3, x4)  =  U10_AAA(x4)

U11_AAA(x1, x2, x3, x4)  =  U11_AAA(x4)

U12_AAA(x1, x2, x3, x4, x5)  =  U12_AAA(x5)

U13_AAA(x1, x2, x3, x4, x5)  =  U13_AAA(x5)

U14_AAA(x1, x2, x3, x4)  =  U14_AAA(x4)

U15_AAA(x1, x2, x3, x4)  =  U15_AAA(x4)

U13_AGA(x1, x2, x3, x4, x5)  =  U13_AGA(x2, x5)

U14_AGA(x1, x2, x3, x4)  =  U14_AGA(x2, x4)

U15_AGA(x1, x2, x3, x4)  =  U15_AGA(x2, x4)

U11_GGA(x1, x2, x3, x4)  =  U11_GGA(x1, x2, x4)

U12_GGA(x1, x2, x3, x4, x5)  =  U12_GGA(x1, x2, x5)

ACKERMANN_IN_GAA(x1, x2, x3)  =  ACKERMANN_IN_GAA(x1)

U6_GAA(x1, x2, x3, x4)  =  U6_GAA(x1, x4)

U7_GAA(x1, x2, x3, x4)  =  U7_GAA(x1, x4)

U8_GAA(x1, x2, x3, x4)  =  U8_GAA(x1, x4)

U9_GAA(x1, x2, x3, x4)  =  U9_GAA(x1, x4)

U10_GAA(x1, x2, x3, x4)  =  U10_GAA(x1, x4)

U11_GAA(x1, x2, x3, x4)  =  U11_GAA(x1, x4)

U12_GAA(x1, x2, x3, x4, x5)  =  U12_GAA(x1, x5)

U13_GAA(x1, x2, x3, x4, x5)  =  U13_GAA(x1, x5)

U14_GAA(x1, x2, x3, x4)  =  U14_GAA(x1, x4)

U15_GAA(x1, x2, x3, x4)  =  U15_GAA(x1, x4)

U13_GGA(x1, x2, x3, x4, x5)  =  U13_GGA(x1, x2, x5)

U14_GGA(x1, x2, x3, x4)  =  U14_GGA(x1, x2, x4)

U15_GGA(x1, x2, x3, x4)  =  U15_GGA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(198)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GG(M, N) -> U1_GG(M, N, >=_in_gg(M, 0))
   MAIN_IN_GG(M, N) -> >=_IN_GG(M, 0)
   U1_GG(M, N, >=_out_gg(M, 0)) -> U2_GG(M, N, =<_in_gg(M, 3))
   U1_GG(M, N, >=_out_gg(M, 0)) -> =<_IN_GG(M, 3)
   U2_GG(M, N, =<_out_gg(M, 3)) -> U3_GG(M, N, >=_in_gg(N, 0))
   U2_GG(M, N, =<_out_gg(M, 3)) -> >=_IN_GG(N, 0)
   U3_GG(M, N, >=_out_gg(N, 0)) -> U4_GG(M, N, =<_in_gg(N, 23))
   U3_GG(M, N, >=_out_gg(N, 0)) -> =<_IN_GG(N, 23)
   U4_GG(M, N, =<_out_gg(N, 23)) -> U5_GG(M, N, ackermann_in_gga(M, N, X1))
   U4_GG(M, N, =<_out_gg(N, 23)) -> ACKERMANN_IN_GGA(M, N, X1)
   ACKERMANN_IN_GGA(M, N, Ret) -> U6_GGA(M, N, Ret, =:=_in_gg(M, 0))
   ACKERMANN_IN_GGA(M, N, Ret) -> =:=_IN_GG(M, 0)
   U6_GGA(M, N, Ret, =:=_out_gg(M, 0)) -> U7_GGA(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U6_GGA(M, N, Ret, =:=_out_gg(M, 0)) -> IS_IN_AG(Ret, +(N, 1))
   ACKERMANN_IN_GGA(M, N, Ret) -> U8_GGA(M, N, Ret, =:=_in_gg(N, 0))
   ACKERMANN_IN_GGA(M, N, Ret) -> =:=_IN_GG(N, 0)
   U8_GGA(M, N, Ret, =:=_out_gg(N, 0)) -> U9_GGA(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U8_GGA(M, N, Ret, =:=_out_gg(N, 0)) -> IS_IN_AG(M1, -(M, 1))
   U9_GGA(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_GGA(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U9_GGA(M, N, Ret, is_out_ag(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AGA(M, N, Ret) -> U6_AGA(M, N, Ret, =:=_in_ag(M, 0))
   ACKERMANN_IN_AGA(M, N, Ret) -> =:=_IN_AG(M, 0)
   U6_AGA(M, N, Ret, =:=_out_ag(M, 0)) -> U7_AGA(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U6_AGA(M, N, Ret, =:=_out_ag(M, 0)) -> IS_IN_AG(Ret, +(N, 1))
   ACKERMANN_IN_AGA(M, N, Ret) -> U8_AGA(M, N, Ret, =:=_in_gg(N, 0))
   ACKERMANN_IN_AGA(M, N, Ret) -> =:=_IN_GG(N, 0)
   U8_AGA(M, N, Ret, =:=_out_gg(N, 0)) -> U9_AGA(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U8_AGA(M, N, Ret, =:=_out_gg(N, 0)) -> IS_IN_AA(M1, -(M, 1))
   U9_AGA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_AGA(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U9_AGA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AGA(M, N, Ret) -> U11_AGA(M, N, Ret, is_in_ag(N1, -(N, 1)))
   ACKERMANN_IN_AGA(M, N, Ret) -> IS_IN_AG(N1, -(N, 1))
   U11_AGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_AGA(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U11_AGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> ACKERMANN_IN_AAA(M, N1, Ret1)
   ACKERMANN_IN_AAA(M, N, Ret) -> U6_AAA(M, N, Ret, =:=_in_ag(M, 0))
   ACKERMANN_IN_AAA(M, N, Ret) -> =:=_IN_AG(M, 0)
   U6_AAA(M, N, Ret, =:=_out_ag(M, 0)) -> U7_AAA(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U6_AAA(M, N, Ret, =:=_out_ag(M, 0)) -> IS_IN_AA(Ret, +(N, 1))
   ACKERMANN_IN_AAA(M, N, Ret) -> U8_AAA(M, N, Ret, =:=_in_ag(N, 0))
   ACKERMANN_IN_AAA(M, N, Ret) -> =:=_IN_AG(N, 0)
   U8_AAA(M, N, Ret, =:=_out_ag(N, 0)) -> U9_AAA(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U8_AAA(M, N, Ret, =:=_out_ag(N, 0)) -> IS_IN_AA(M1, -(M, 1))
   U9_AAA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_AAA(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U9_AAA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AAA(M, N, Ret) -> U11_AAA(M, N, Ret, is_in_aa(N1, -(N, 1)))
   ACKERMANN_IN_AAA(M, N, Ret) -> IS_IN_AA(N1, -(N, 1))
   U11_AAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_AAA(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U11_AAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> ACKERMANN_IN_AAA(M, N1, Ret1)
   U12_AAA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_AAA(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U12_AAA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> IS_IN_AA(M1, -(M, 1))
   U13_AAA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_AAA(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U13_AAA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U14_AAA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_AAA(M, N, Ret, is_in_aa(Ret, Ret2))
   U14_AAA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> IS_IN_AA(Ret, Ret2)
   U12_AGA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_AGA(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U12_AGA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> IS_IN_AA(M1, -(M, 1))
   U13_AGA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_AGA(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U13_AGA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U14_AGA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_AGA(M, N, Ret, is_in_aa(Ret, Ret2))
   U14_AGA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> IS_IN_AA(Ret, Ret2)
   ACKERMANN_IN_GGA(M, N, Ret) -> U11_GGA(M, N, Ret, is_in_ag(N1, -(N, 1)))
   ACKERMANN_IN_GGA(M, N, Ret) -> IS_IN_AG(N1, -(N, 1))
   U11_GGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_GGA(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U11_GGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> ACKERMANN_IN_GAA(M, N1, Ret1)
   ACKERMANN_IN_GAA(M, N, Ret) -> U6_GAA(M, N, Ret, =:=_in_gg(M, 0))
   ACKERMANN_IN_GAA(M, N, Ret) -> =:=_IN_GG(M, 0)
   U6_GAA(M, N, Ret, =:=_out_gg(M, 0)) -> U7_GAA(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U6_GAA(M, N, Ret, =:=_out_gg(M, 0)) -> IS_IN_AA(Ret, +(N, 1))
   ACKERMANN_IN_GAA(M, N, Ret) -> U8_GAA(M, N, Ret, =:=_in_ag(N, 0))
   ACKERMANN_IN_GAA(M, N, Ret) -> =:=_IN_AG(N, 0)
   U8_GAA(M, N, Ret, =:=_out_ag(N, 0)) -> U9_GAA(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U8_GAA(M, N, Ret, =:=_out_ag(N, 0)) -> IS_IN_AG(M1, -(M, 1))
   U9_GAA(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_GAA(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U9_GAA(M, N, Ret, is_out_ag(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_GAA(M, N, Ret) -> U11_GAA(M, N, Ret, is_in_aa(N1, -(N, 1)))
   ACKERMANN_IN_GAA(M, N, Ret) -> IS_IN_AA(N1, -(N, 1))
   U11_GAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_GAA(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U11_GAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> ACKERMANN_IN_GAA(M, N1, Ret1)
   U12_GAA(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_GAA(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U12_GAA(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> IS_IN_AG(M1, -(M, 1))
   U13_GAA(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_GAA(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U13_GAA(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U14_GAA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_GAA(M, N, Ret, is_in_aa(Ret, Ret2))
   U14_GAA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> IS_IN_AA(Ret, Ret2)
   U12_GGA(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_GGA(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U12_GGA(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> IS_IN_AG(M1, -(M, 1))
   U13_GGA(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_GGA(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U13_GGA(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U14_GGA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_GGA(M, N, Ret, is_in_aa(Ret, Ret2))
   U14_GGA(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> IS_IN_AA(Ret, Ret2)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, =<_in_gg(M, 3))
   =<_in_gg(X0, X1) -> =<_out_gg(X0, X1)
   U2_gg(M, N, =<_out_gg(M, 3)) -> U3_gg(M, N, >=_in_gg(N, 0))
   U3_gg(M, N, >=_out_gg(N, 0)) -> U4_gg(M, N, =<_in_gg(N, 23))
   U4_gg(M, N, =<_out_gg(N, 23)) -> U5_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U6_gga(M, N, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U6_gga(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U7_gga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U8_gga(M, N, Ret, =:=_in_gg(N, 0))
   U8_gga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_gga(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gga(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U6_aga(M, N, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U6_aga(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U7_aga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_aga(M, N, Ret)
   ackermann_in_aga(M, N, Ret) -> U8_aga(M, N, Ret, =:=_in_gg(N, 0))
   U8_aga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_aga(M, N, Ret, is_in_aa(M1, -(M, 1)))
   is_in_aa(X0, X1) -> is_out_aa(X0, X1)
   U9_aga(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U11_aga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_aga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_aga(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   ackermann_in_aaa(M, N, Ret) -> U6_aaa(M, N, Ret, =:=_in_ag(M, 0))
   U6_aaa(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_aaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U8_aaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_aaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_aaa(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_aaa(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_aaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U11_aaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_aaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_aaa(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_aaa(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aaa(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aaa(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aaa(M, N, Ret)
   U12_aga(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aga(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aga(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aga(M, N, Ret)
   U10_aga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aga(M, N, Ret)
   U10_gga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U11_gga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_gga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_gga(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   ackermann_in_gaa(M, N, Ret) -> U6_gaa(M, N, Ret, =:=_in_gg(M, 0))
   U6_gaa(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_gaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U8_gaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_gaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_gaa(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gaa(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_gaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U11_gaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_gaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_gaa(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U12_gaa(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gaa(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gaa(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gaa(M, N, Ret)
   U12_gga(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gga(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gga(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U5_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg(x1, x2)

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

=<_in_gg(x1, x2)  =  =<_in_gg(x1, x2)

=<_out_gg(x1, x2)  =  =<_out_gg(x1, x2)

3  =  3

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

23  =  23

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg(x1, x2)

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

+(x1, x2)  =  +(x1, x2)

1  =  1

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x1, x2)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x1, x2, x4)

-(x1, x2)  =  -(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

ackermann_in_aga(x1, x2, x3)  =  ackermann_in_aga(x2)

U6_aga(x1, x2, x3, x4)  =  U6_aga(x2, x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag(x2)

U7_aga(x1, x2, x3, x4)  =  U7_aga(x2, x4)

ackermann_out_aga(x1, x2, x3)  =  ackermann_out_aga(x2)

U8_aga(x1, x2, x3, x4)  =  U8_aga(x2, x4)

U9_aga(x1, x2, x3, x4)  =  U9_aga(x2, x4)

is_in_aa(x1, x2)  =  is_in_aa

is_out_aa(x1, x2)  =  is_out_aa

U10_aga(x1, x2, x3, x4)  =  U10_aga(x2, x4)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x2, x4)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x5)

ackermann_in_aaa(x1, x2, x3)  =  ackermann_in_aaa

U6_aaa(x1, x2, x3, x4)  =  U6_aaa(x4)

U7_aaa(x1, x2, x3, x4)  =  U7_aaa(x4)

ackermann_out_aaa(x1, x2, x3)  =  ackermann_out_aaa

U8_aaa(x1, x2, x3, x4)  =  U8_aaa(x4)

U9_aaa(x1, x2, x3, x4)  =  U9_aaa(x4)

U10_aaa(x1, x2, x3, x4)  =  U10_aaa(x4)

U11_aaa(x1, x2, x3, x4)  =  U11_aaa(x4)

U12_aaa(x1, x2, x3, x4, x5)  =  U12_aaa(x5)

U13_aaa(x1, x2, x3, x4, x5)  =  U13_aaa(x5)

U14_aaa(x1, x2, x3, x4)  =  U14_aaa(x4)

U15_aaa(x1, x2, x3, x4)  =  U15_aaa(x4)

U13_aga(x1, x2, x3, x4, x5)  =  U13_aga(x2, x5)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x2, x4)

U15_aga(x1, x2, x3, x4)  =  U15_aga(x2, x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x2, x4)

U12_gga(x1, x2, x3, x4, x5)  =  U12_gga(x1, x2, x5)

ackermann_in_gaa(x1, x2, x3)  =  ackermann_in_gaa(x1)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

ackermann_out_gaa(x1, x2, x3)  =  ackermann_out_gaa(x1)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x1, x4)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4, x5)  =  U12_gaa(x1, x5)

U13_gaa(x1, x2, x3, x4, x5)  =  U13_gaa(x1, x5)

U14_gaa(x1, x2, x3, x4)  =  U14_gaa(x1, x4)

U15_gaa(x1, x2, x3, x4)  =  U15_gaa(x1, x4)

U13_gga(x1, x2, x3, x4, x5)  =  U13_gga(x1, x2, x5)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x1, x2, x4)

U15_gga(x1, x2, x3, x4)  =  U15_gga(x1, x2, x4)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

MAIN_IN_GG(x1, x2)  =  MAIN_IN_GG(x1, x2)

U1_GG(x1, x2, x3)  =  U1_GG(x1, x2, x3)

>=_IN_GG(x1, x2)  =  >=_IN_GG(x1, x2)

U2_GG(x1, x2, x3)  =  U2_GG(x1, x2, x3)

=<_IN_GG(x1, x2)  =  =<_IN_GG(x1, x2)

U3_GG(x1, x2, x3)  =  U3_GG(x1, x2, x3)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)

U5_GG(x1, x2, x3)  =  U5_GG(x1, x2, x3)

ACKERMANN_IN_GGA(x1, x2, x3)  =  ACKERMANN_IN_GGA(x1, x2)

U6_GGA(x1, x2, x3, x4)  =  U6_GGA(x1, x2, x4)

=:=_IN_GG(x1, x2)  =  =:=_IN_GG(x1, x2)

U7_GGA(x1, x2, x3, x4)  =  U7_GGA(x1, x2, x4)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U8_GGA(x1, x2, x3, x4)  =  U8_GGA(x1, x2, x4)

U9_GGA(x1, x2, x3, x4)  =  U9_GGA(x1, x2, x4)

U10_GGA(x1, x2, x3, x4)  =  U10_GGA(x1, x2, x4)

ACKERMANN_IN_AGA(x1, x2, x3)  =  ACKERMANN_IN_AGA(x2)

U6_AGA(x1, x2, x3, x4)  =  U6_AGA(x2, x4)

=:=_IN_AG(x1, x2)  =  =:=_IN_AG(x2)

U7_AGA(x1, x2, x3, x4)  =  U7_AGA(x2, x4)

U8_AGA(x1, x2, x3, x4)  =  U8_AGA(x2, x4)

U9_AGA(x1, x2, x3, x4)  =  U9_AGA(x2, x4)

IS_IN_AA(x1, x2)  =  IS_IN_AA

U10_AGA(x1, x2, x3, x4)  =  U10_AGA(x2, x4)

U11_AGA(x1, x2, x3, x4)  =  U11_AGA(x2, x4)

U12_AGA(x1, x2, x3, x4, x5)  =  U12_AGA(x2, x5)

ACKERMANN_IN_AAA(x1, x2, x3)  =  ACKERMANN_IN_AAA

U6_AAA(x1, x2, x3, x4)  =  U6_AAA(x4)

U7_AAA(x1, x2, x3, x4)  =  U7_AAA(x4)

U8_AAA(x1, x2, x3, x4)  =  U8_AAA(x4)

U9_AAA(x1, x2, x3, x4)  =  U9_AAA(x4)

U10_AAA(x1, x2, x3, x4)  =  U10_AAA(x4)

U11_AAA(x1, x2, x3, x4)  =  U11_AAA(x4)

U12_AAA(x1, x2, x3, x4, x5)  =  U12_AAA(x5)

U13_AAA(x1, x2, x3, x4, x5)  =  U13_AAA(x5)

U14_AAA(x1, x2, x3, x4)  =  U14_AAA(x4)

U15_AAA(x1, x2, x3, x4)  =  U15_AAA(x4)

U13_AGA(x1, x2, x3, x4, x5)  =  U13_AGA(x2, x5)

U14_AGA(x1, x2, x3, x4)  =  U14_AGA(x2, x4)

U15_AGA(x1, x2, x3, x4)  =  U15_AGA(x2, x4)

U11_GGA(x1, x2, x3, x4)  =  U11_GGA(x1, x2, x4)

U12_GGA(x1, x2, x3, x4, x5)  =  U12_GGA(x1, x2, x5)

ACKERMANN_IN_GAA(x1, x2, x3)  =  ACKERMANN_IN_GAA(x1)

U6_GAA(x1, x2, x3, x4)  =  U6_GAA(x1, x4)

U7_GAA(x1, x2, x3, x4)  =  U7_GAA(x1, x4)

U8_GAA(x1, x2, x3, x4)  =  U8_GAA(x1, x4)

U9_GAA(x1, x2, x3, x4)  =  U9_GAA(x1, x4)

U10_GAA(x1, x2, x3, x4)  =  U10_GAA(x1, x4)

U11_GAA(x1, x2, x3, x4)  =  U11_GAA(x1, x4)

U12_GAA(x1, x2, x3, x4, x5)  =  U12_GAA(x1, x5)

U13_GAA(x1, x2, x3, x4, x5)  =  U13_GAA(x1, x5)

U14_GAA(x1, x2, x3, x4)  =  U14_GAA(x1, x4)

U15_GAA(x1, x2, x3, x4)  =  U15_GAA(x1, x4)

U13_GGA(x1, x2, x3, x4, x5)  =  U13_GGA(x1, x2, x5)

U14_GGA(x1, x2, x3, x4)  =  U14_GGA(x1, x2, x4)

U15_GGA(x1, x2, x3, x4)  =  U15_GGA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(199) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 72 less nodes.
----------------------------------------

(200)
Complex Obligation (AND)

----------------------------------------

(201)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ACKERMANN_IN_AGA(M, N, Ret) -> U8_AGA(M, N, Ret, =:=_in_gg(N, 0))
   U8_AGA(M, N, Ret, =:=_out_gg(N, 0)) -> U9_AGA(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_AGA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AGA(M, N, Ret) -> U11_AGA(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_AGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_AGA(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_AGA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_AGA(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_AGA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   ACKERMANN_IN_AAA(M, N, Ret) -> U8_AAA(M, N, Ret, =:=_in_ag(N, 0))
   U8_AAA(M, N, Ret, =:=_out_ag(N, 0)) -> U9_AAA(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_AAA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AAA(M, N, Ret) -> U11_AAA(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_AAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_AAA(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_AAA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_AAA(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_AAA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U11_AAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> ACKERMANN_IN_AAA(M, N1, Ret1)
   U11_AGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> ACKERMANN_IN_AAA(M, N1, Ret1)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, =<_in_gg(M, 3))
   =<_in_gg(X0, X1) -> =<_out_gg(X0, X1)
   U2_gg(M, N, =<_out_gg(M, 3)) -> U3_gg(M, N, >=_in_gg(N, 0))
   U3_gg(M, N, >=_out_gg(N, 0)) -> U4_gg(M, N, =<_in_gg(N, 23))
   U4_gg(M, N, =<_out_gg(N, 23)) -> U5_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U6_gga(M, N, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U6_gga(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U7_gga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U8_gga(M, N, Ret, =:=_in_gg(N, 0))
   U8_gga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_gga(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gga(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U6_aga(M, N, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U6_aga(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U7_aga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_aga(M, N, Ret)
   ackermann_in_aga(M, N, Ret) -> U8_aga(M, N, Ret, =:=_in_gg(N, 0))
   U8_aga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_aga(M, N, Ret, is_in_aa(M1, -(M, 1)))
   is_in_aa(X0, X1) -> is_out_aa(X0, X1)
   U9_aga(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U11_aga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_aga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_aga(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   ackermann_in_aaa(M, N, Ret) -> U6_aaa(M, N, Ret, =:=_in_ag(M, 0))
   U6_aaa(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_aaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U8_aaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_aaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_aaa(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_aaa(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_aaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U11_aaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_aaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_aaa(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_aaa(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aaa(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aaa(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aaa(M, N, Ret)
   U12_aga(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aga(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aga(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aga(M, N, Ret)
   U10_aga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aga(M, N, Ret)
   U10_gga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U11_gga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_gga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_gga(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   ackermann_in_gaa(M, N, Ret) -> U6_gaa(M, N, Ret, =:=_in_gg(M, 0))
   U6_gaa(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_gaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U8_gaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_gaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_gaa(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gaa(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_gaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U11_gaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_gaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_gaa(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U12_gaa(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gaa(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gaa(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gaa(M, N, Ret)
   U12_gga(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gga(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gga(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U5_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg(x1, x2)

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

=<_in_gg(x1, x2)  =  =<_in_gg(x1, x2)

=<_out_gg(x1, x2)  =  =<_out_gg(x1, x2)

3  =  3

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

23  =  23

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg(x1, x2)

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

+(x1, x2)  =  +(x1, x2)

1  =  1

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x1, x2)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x1, x2, x4)

-(x1, x2)  =  -(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

ackermann_in_aga(x1, x2, x3)  =  ackermann_in_aga(x2)

U6_aga(x1, x2, x3, x4)  =  U6_aga(x2, x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag(x2)

U7_aga(x1, x2, x3, x4)  =  U7_aga(x2, x4)

ackermann_out_aga(x1, x2, x3)  =  ackermann_out_aga(x2)

U8_aga(x1, x2, x3, x4)  =  U8_aga(x2, x4)

U9_aga(x1, x2, x3, x4)  =  U9_aga(x2, x4)

is_in_aa(x1, x2)  =  is_in_aa

is_out_aa(x1, x2)  =  is_out_aa

U10_aga(x1, x2, x3, x4)  =  U10_aga(x2, x4)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x2, x4)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x5)

ackermann_in_aaa(x1, x2, x3)  =  ackermann_in_aaa

U6_aaa(x1, x2, x3, x4)  =  U6_aaa(x4)

U7_aaa(x1, x2, x3, x4)  =  U7_aaa(x4)

ackermann_out_aaa(x1, x2, x3)  =  ackermann_out_aaa

U8_aaa(x1, x2, x3, x4)  =  U8_aaa(x4)

U9_aaa(x1, x2, x3, x4)  =  U9_aaa(x4)

U10_aaa(x1, x2, x3, x4)  =  U10_aaa(x4)

U11_aaa(x1, x2, x3, x4)  =  U11_aaa(x4)

U12_aaa(x1, x2, x3, x4, x5)  =  U12_aaa(x5)

U13_aaa(x1, x2, x3, x4, x5)  =  U13_aaa(x5)

U14_aaa(x1, x2, x3, x4)  =  U14_aaa(x4)

U15_aaa(x1, x2, x3, x4)  =  U15_aaa(x4)

U13_aga(x1, x2, x3, x4, x5)  =  U13_aga(x2, x5)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x2, x4)

U15_aga(x1, x2, x3, x4)  =  U15_aga(x2, x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x2, x4)

U12_gga(x1, x2, x3, x4, x5)  =  U12_gga(x1, x2, x5)

ackermann_in_gaa(x1, x2, x3)  =  ackermann_in_gaa(x1)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

ackermann_out_gaa(x1, x2, x3)  =  ackermann_out_gaa(x1)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x1, x4)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4, x5)  =  U12_gaa(x1, x5)

U13_gaa(x1, x2, x3, x4, x5)  =  U13_gaa(x1, x5)

U14_gaa(x1, x2, x3, x4)  =  U14_gaa(x1, x4)

U15_gaa(x1, x2, x3, x4)  =  U15_gaa(x1, x4)

U13_gga(x1, x2, x3, x4, x5)  =  U13_gga(x1, x2, x5)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x1, x2, x4)

U15_gga(x1, x2, x3, x4)  =  U15_gga(x1, x2, x4)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

ACKERMANN_IN_AGA(x1, x2, x3)  =  ACKERMANN_IN_AGA(x2)

U8_AGA(x1, x2, x3, x4)  =  U8_AGA(x2, x4)

U9_AGA(x1, x2, x3, x4)  =  U9_AGA(x2, x4)

U11_AGA(x1, x2, x3, x4)  =  U11_AGA(x2, x4)

U12_AGA(x1, x2, x3, x4, x5)  =  U12_AGA(x2, x5)

ACKERMANN_IN_AAA(x1, x2, x3)  =  ACKERMANN_IN_AAA

U8_AAA(x1, x2, x3, x4)  =  U8_AAA(x4)

U9_AAA(x1, x2, x3, x4)  =  U9_AAA(x4)

U11_AAA(x1, x2, x3, x4)  =  U11_AAA(x4)

U12_AAA(x1, x2, x3, x4, x5)  =  U12_AAA(x5)

U13_AAA(x1, x2, x3, x4, x5)  =  U13_AAA(x5)

U13_AGA(x1, x2, x3, x4, x5)  =  U13_AGA(x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(202) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(203)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ACKERMANN_IN_AGA(M, N, Ret) -> U8_AGA(M, N, Ret, =:=_in_gg(N, 0))
   U8_AGA(M, N, Ret, =:=_out_gg(N, 0)) -> U9_AGA(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_AGA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AGA(M, N, Ret) -> U11_AGA(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_AGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_AGA(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_AGA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_AGA(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_AGA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   ACKERMANN_IN_AAA(M, N, Ret) -> U8_AAA(M, N, Ret, =:=_in_ag(N, 0))
   U8_AAA(M, N, Ret, =:=_out_ag(N, 0)) -> U9_AAA(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_AAA(M, N, Ret, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AGA(M1, 1, Ret)
   ACKERMANN_IN_AAA(M, N, Ret) -> U11_AAA(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_AAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_AAA(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_AAA(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_AAA(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_AAA(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> ACKERMANN_IN_AAA(M1, Ret1, Ret2)
   U11_AAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> ACKERMANN_IN_AAA(M, N1, Ret1)
   U11_AGA(M, N, Ret, is_out_ag(N1, -(N, 1))) -> ACKERMANN_IN_AAA(M, N1, Ret1)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_aa(X0, X1) -> is_out_aa(X0, X1)
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   ackermann_in_aaa(M, N, Ret) -> U6_aaa(M, N, Ret, =:=_in_ag(M, 0))
   ackermann_in_aaa(M, N, Ret) -> U8_aaa(M, N, Ret, =:=_in_ag(N, 0))
   ackermann_in_aaa(M, N, Ret) -> U11_aaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U6_aaa(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U8_aaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_aaa(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U11_aaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_aaa(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U7_aaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_aaa(M, N, Ret)
   U9_aaa(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U12_aaa(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aaa(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U10_aaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aaa(M, N, Ret)
   U13_aaa(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   ackermann_in_aga(M, N, Ret) -> U6_aga(M, N, Ret, =:=_in_ag(M, 0))
   ackermann_in_aga(M, N, Ret) -> U8_aga(M, N, Ret, =:=_in_gg(N, 0))
   ackermann_in_aga(M, N, Ret) -> U11_aga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U14_aaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U6_aga(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U8_aga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_aga(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U11_aga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_aga(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U15_aaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aaa(M, N, Ret)
   U7_aga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_aga(M, N, Ret)
   U9_aga(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U12_aga(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aga(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U10_aga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aga(M, N, Ret)
   U13_aga(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aga(M, N, Ret)

The argument filtering Pi contains the following mapping:
0  =  0

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg(x1, x2)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

+(x1, x2)  =  +(x1, x2)

1  =  1

-(x1, x2)  =  -(x1, x2)

ackermann_in_aga(x1, x2, x3)  =  ackermann_in_aga(x2)

U6_aga(x1, x2, x3, x4)  =  U6_aga(x2, x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag(x2)

U7_aga(x1, x2, x3, x4)  =  U7_aga(x2, x4)

ackermann_out_aga(x1, x2, x3)  =  ackermann_out_aga(x2)

U8_aga(x1, x2, x3, x4)  =  U8_aga(x2, x4)

U9_aga(x1, x2, x3, x4)  =  U9_aga(x2, x4)

is_in_aa(x1, x2)  =  is_in_aa

is_out_aa(x1, x2)  =  is_out_aa

U10_aga(x1, x2, x3, x4)  =  U10_aga(x2, x4)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x2, x4)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x5)

ackermann_in_aaa(x1, x2, x3)  =  ackermann_in_aaa

U6_aaa(x1, x2, x3, x4)  =  U6_aaa(x4)

U7_aaa(x1, x2, x3, x4)  =  U7_aaa(x4)

ackermann_out_aaa(x1, x2, x3)  =  ackermann_out_aaa

U8_aaa(x1, x2, x3, x4)  =  U8_aaa(x4)

U9_aaa(x1, x2, x3, x4)  =  U9_aaa(x4)

U10_aaa(x1, x2, x3, x4)  =  U10_aaa(x4)

U11_aaa(x1, x2, x3, x4)  =  U11_aaa(x4)

U12_aaa(x1, x2, x3, x4, x5)  =  U12_aaa(x5)

U13_aaa(x1, x2, x3, x4, x5)  =  U13_aaa(x5)

U14_aaa(x1, x2, x3, x4)  =  U14_aaa(x4)

U15_aaa(x1, x2, x3, x4)  =  U15_aaa(x4)

U13_aga(x1, x2, x3, x4, x5)  =  U13_aga(x2, x5)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x2, x4)

U15_aga(x1, x2, x3, x4)  =  U15_aga(x2, x4)

ACKERMANN_IN_AGA(x1, x2, x3)  =  ACKERMANN_IN_AGA(x2)

U8_AGA(x1, x2, x3, x4)  =  U8_AGA(x2, x4)

U9_AGA(x1, x2, x3, x4)  =  U9_AGA(x2, x4)

U11_AGA(x1, x2, x3, x4)  =  U11_AGA(x2, x4)

U12_AGA(x1, x2, x3, x4, x5)  =  U12_AGA(x2, x5)

ACKERMANN_IN_AAA(x1, x2, x3)  =  ACKERMANN_IN_AAA

U8_AAA(x1, x2, x3, x4)  =  U8_AAA(x4)

U9_AAA(x1, x2, x3, x4)  =  U9_AAA(x4)

U11_AAA(x1, x2, x3, x4)  =  U11_AAA(x4)

U12_AAA(x1, x2, x3, x4, x5)  =  U12_AAA(x5)

U13_AAA(x1, x2, x3, x4, x5)  =  U13_AAA(x5)

U13_AGA(x1, x2, x3, x4, x5)  =  U13_AGA(x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(204) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(205)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACKERMANN_IN_AGA(N) -> U8_AGA(N, =:=_in_gg(N, 0))
   U8_AGA(N, =:=_out_gg(N, 0)) -> U9_AGA(N, is_in_aa)
   U9_AGA(N, is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AGA(N) -> U11_AGA(N, is_in_ag(-(N, 1)))
   U11_AGA(N, is_out_ag(-(N, 1))) -> U12_AGA(N, ackermann_in_aaa)
   U12_AGA(N, ackermann_out_aaa) -> U13_AGA(N, is_in_aa)
   U13_AGA(N, is_out_aa) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AAA -> U8_AAA(=:=_in_ag(0))
   U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_in_aa)
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AAA -> U11_AAA(is_in_aa)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_in_aa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(N, is_out_ag(-(N, 1))) -> ACKERMANN_IN_AAA

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag(X1)
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag(X1)
   U6_aaa(=:=_out_ag(0)) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag(0)) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga(1)) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(N, =:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(N, is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag(0)) -> U7_aga(N, is_in_ag(+(N, 1)))
   U8_aga(N, =:=_out_gg(N, 0)) -> U9_aga(N, is_in_aa)
   U11_aga(N, is_out_ag(-(N, 1))) -> U12_aga(N, ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(N, is_out_ag(+(N, 1))) -> ackermann_out_aga(N)
   U9_aga(N, is_out_aa) -> U10_aga(N, ackermann_in_aga(1))
   U12_aga(N, ackermann_out_aaa) -> U13_aga(N, is_in_aa)
   U10_aga(N, ackermann_out_aga(1)) -> ackermann_out_aga(N)
   U13_aga(N, is_out_aa) -> U14_aga(N, ackermann_in_aaa)
   U14_aga(N, ackermann_out_aaa) -> U15_aga(N, is_in_aa)
   U15_aga(N, is_out_aa) -> ackermann_out_aga(N)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0, x1)
   U11_aga(x0, x1)
   U15_aaa(x0)
   U7_aga(x0, x1)
   U9_aga(x0, x1)
   U12_aga(x0, x1)
   U10_aga(x0, x1)
   U13_aga(x0, x1)
   U14_aga(x0, x1)
   U15_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(206) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule ACKERMANN_IN_AGA(N) -> U8_AGA(N, =:=_in_gg(N, 0)) at position [1] we obtained the following new rules [LPAR04]:

   (ACKERMANN_IN_AGA(N) -> U8_AGA(N, =:=_out_gg(N, 0)),ACKERMANN_IN_AGA(N) -> U8_AGA(N, =:=_out_gg(N, 0)))


----------------------------------------

(207)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_AGA(N, =:=_out_gg(N, 0)) -> U9_AGA(N, is_in_aa)
   U9_AGA(N, is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AGA(N) -> U11_AGA(N, is_in_ag(-(N, 1)))
   U11_AGA(N, is_out_ag(-(N, 1))) -> U12_AGA(N, ackermann_in_aaa)
   U12_AGA(N, ackermann_out_aaa) -> U13_AGA(N, is_in_aa)
   U13_AGA(N, is_out_aa) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AAA -> U8_AAA(=:=_in_ag(0))
   U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_in_aa)
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AAA -> U11_AAA(is_in_aa)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_in_aa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(N, is_out_ag(-(N, 1))) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AGA(N) -> U8_AGA(N, =:=_out_gg(N, 0))

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag(X1)
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag(X1)
   U6_aaa(=:=_out_ag(0)) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag(0)) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga(1)) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(N, =:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(N, is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag(0)) -> U7_aga(N, is_in_ag(+(N, 1)))
   U8_aga(N, =:=_out_gg(N, 0)) -> U9_aga(N, is_in_aa)
   U11_aga(N, is_out_ag(-(N, 1))) -> U12_aga(N, ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(N, is_out_ag(+(N, 1))) -> ackermann_out_aga(N)
   U9_aga(N, is_out_aa) -> U10_aga(N, ackermann_in_aga(1))
   U12_aga(N, ackermann_out_aaa) -> U13_aga(N, is_in_aa)
   U10_aga(N, ackermann_out_aga(1)) -> ackermann_out_aga(N)
   U13_aga(N, is_out_aa) -> U14_aga(N, ackermann_in_aaa)
   U14_aga(N, ackermann_out_aaa) -> U15_aga(N, is_in_aa)
   U15_aga(N, is_out_aa) -> ackermann_out_aga(N)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0, x1)
   U11_aga(x0, x1)
   U15_aaa(x0)
   U7_aga(x0, x1)
   U9_aga(x0, x1)
   U12_aga(x0, x1)
   U10_aga(x0, x1)
   U13_aga(x0, x1)
   U14_aga(x0, x1)
   U15_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(208) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U8_AGA(N, =:=_out_gg(N, 0)) -> U9_AGA(N, is_in_aa) at position [1] we obtained the following new rules [LPAR04]:

   (U8_AGA(N, =:=_out_gg(N, 0)) -> U9_AGA(N, is_out_aa),U8_AGA(N, =:=_out_gg(N, 0)) -> U9_AGA(N, is_out_aa))


----------------------------------------

(209)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_AGA(N, is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AGA(N) -> U11_AGA(N, is_in_ag(-(N, 1)))
   U11_AGA(N, is_out_ag(-(N, 1))) -> U12_AGA(N, ackermann_in_aaa)
   U12_AGA(N, ackermann_out_aaa) -> U13_AGA(N, is_in_aa)
   U13_AGA(N, is_out_aa) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AAA -> U8_AAA(=:=_in_ag(0))
   U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_in_aa)
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AAA -> U11_AAA(is_in_aa)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_in_aa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(N, is_out_ag(-(N, 1))) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AGA(N) -> U8_AGA(N, =:=_out_gg(N, 0))
   U8_AGA(N, =:=_out_gg(N, 0)) -> U9_AGA(N, is_out_aa)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag(X1)
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag(X1)
   U6_aaa(=:=_out_ag(0)) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag(0)) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga(1)) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(N, =:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(N, is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag(0)) -> U7_aga(N, is_in_ag(+(N, 1)))
   U8_aga(N, =:=_out_gg(N, 0)) -> U9_aga(N, is_in_aa)
   U11_aga(N, is_out_ag(-(N, 1))) -> U12_aga(N, ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(N, is_out_ag(+(N, 1))) -> ackermann_out_aga(N)
   U9_aga(N, is_out_aa) -> U10_aga(N, ackermann_in_aga(1))
   U12_aga(N, ackermann_out_aaa) -> U13_aga(N, is_in_aa)
   U10_aga(N, ackermann_out_aga(1)) -> ackermann_out_aga(N)
   U13_aga(N, is_out_aa) -> U14_aga(N, ackermann_in_aaa)
   U14_aga(N, ackermann_out_aaa) -> U15_aga(N, is_in_aa)
   U15_aga(N, is_out_aa) -> ackermann_out_aga(N)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0, x1)
   U11_aga(x0, x1)
   U15_aaa(x0)
   U7_aga(x0, x1)
   U9_aga(x0, x1)
   U12_aga(x0, x1)
   U10_aga(x0, x1)
   U13_aga(x0, x1)
   U14_aga(x0, x1)
   U15_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(210) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule ACKERMANN_IN_AGA(N) -> U11_AGA(N, is_in_ag(-(N, 1))) at position [1] we obtained the following new rules [LPAR04]:

   (ACKERMANN_IN_AGA(N) -> U11_AGA(N, is_out_ag(-(N, 1))),ACKERMANN_IN_AGA(N) -> U11_AGA(N, is_out_ag(-(N, 1))))


----------------------------------------

(211)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_AGA(N, is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AGA(N, is_out_ag(-(N, 1))) -> U12_AGA(N, ackermann_in_aaa)
   U12_AGA(N, ackermann_out_aaa) -> U13_AGA(N, is_in_aa)
   U13_AGA(N, is_out_aa) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AAA -> U8_AAA(=:=_in_ag(0))
   U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_in_aa)
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AAA -> U11_AAA(is_in_aa)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_in_aa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(N, is_out_ag(-(N, 1))) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AGA(N) -> U8_AGA(N, =:=_out_gg(N, 0))
   U8_AGA(N, =:=_out_gg(N, 0)) -> U9_AGA(N, is_out_aa)
   ACKERMANN_IN_AGA(N) -> U11_AGA(N, is_out_ag(-(N, 1)))

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag(X1)
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag(X1)
   U6_aaa(=:=_out_ag(0)) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag(0)) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga(1)) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(N, =:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(N, is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag(0)) -> U7_aga(N, is_in_ag(+(N, 1)))
   U8_aga(N, =:=_out_gg(N, 0)) -> U9_aga(N, is_in_aa)
   U11_aga(N, is_out_ag(-(N, 1))) -> U12_aga(N, ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(N, is_out_ag(+(N, 1))) -> ackermann_out_aga(N)
   U9_aga(N, is_out_aa) -> U10_aga(N, ackermann_in_aga(1))
   U12_aga(N, ackermann_out_aaa) -> U13_aga(N, is_in_aa)
   U10_aga(N, ackermann_out_aga(1)) -> ackermann_out_aga(N)
   U13_aga(N, is_out_aa) -> U14_aga(N, ackermann_in_aaa)
   U14_aga(N, ackermann_out_aaa) -> U15_aga(N, is_in_aa)
   U15_aga(N, is_out_aa) -> ackermann_out_aga(N)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0, x1)
   U11_aga(x0, x1)
   U15_aaa(x0)
   U7_aga(x0, x1)
   U9_aga(x0, x1)
   U12_aga(x0, x1)
   U10_aga(x0, x1)
   U13_aga(x0, x1)
   U14_aga(x0, x1)
   U15_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(212) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U12_AGA(N, ackermann_out_aaa) -> U13_AGA(N, is_in_aa) at position [1] we obtained the following new rules [LPAR04]:

   (U12_AGA(N, ackermann_out_aaa) -> U13_AGA(N, is_out_aa),U12_AGA(N, ackermann_out_aaa) -> U13_AGA(N, is_out_aa))


----------------------------------------

(213)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_AGA(N, is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AGA(N, is_out_ag(-(N, 1))) -> U12_AGA(N, ackermann_in_aaa)
   U13_AGA(N, is_out_aa) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AAA -> U8_AAA(=:=_in_ag(0))
   U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_in_aa)
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AAA -> U11_AAA(is_in_aa)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_in_aa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(N, is_out_ag(-(N, 1))) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AGA(N) -> U8_AGA(N, =:=_out_gg(N, 0))
   U8_AGA(N, =:=_out_gg(N, 0)) -> U9_AGA(N, is_out_aa)
   ACKERMANN_IN_AGA(N) -> U11_AGA(N, is_out_ag(-(N, 1)))
   U12_AGA(N, ackermann_out_aaa) -> U13_AGA(N, is_out_aa)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag(X1)
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag(X1)
   U6_aaa(=:=_out_ag(0)) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag(0)) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga(1)) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(N, =:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(N, is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag(0)) -> U7_aga(N, is_in_ag(+(N, 1)))
   U8_aga(N, =:=_out_gg(N, 0)) -> U9_aga(N, is_in_aa)
   U11_aga(N, is_out_ag(-(N, 1))) -> U12_aga(N, ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(N, is_out_ag(+(N, 1))) -> ackermann_out_aga(N)
   U9_aga(N, is_out_aa) -> U10_aga(N, ackermann_in_aga(1))
   U12_aga(N, ackermann_out_aaa) -> U13_aga(N, is_in_aa)
   U10_aga(N, ackermann_out_aga(1)) -> ackermann_out_aga(N)
   U13_aga(N, is_out_aa) -> U14_aga(N, ackermann_in_aaa)
   U14_aga(N, ackermann_out_aaa) -> U15_aga(N, is_in_aa)
   U15_aga(N, is_out_aa) -> ackermann_out_aga(N)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0, x1)
   U11_aga(x0, x1)
   U15_aaa(x0)
   U7_aga(x0, x1)
   U9_aga(x0, x1)
   U12_aga(x0, x1)
   U10_aga(x0, x1)
   U13_aga(x0, x1)
   U14_aga(x0, x1)
   U15_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(214) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule ACKERMANN_IN_AAA -> U8_AAA(=:=_in_ag(0)) at position [0] we obtained the following new rules [LPAR04]:

   (ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag(0)),ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag(0)))


----------------------------------------

(215)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_AGA(N, is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AGA(N, is_out_ag(-(N, 1))) -> U12_AGA(N, ackermann_in_aaa)
   U13_AGA(N, is_out_aa) -> ACKERMANN_IN_AAA
   U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_in_aa)
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AAA -> U11_AAA(is_in_aa)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_in_aa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(N, is_out_ag(-(N, 1))) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AGA(N) -> U8_AGA(N, =:=_out_gg(N, 0))
   U8_AGA(N, =:=_out_gg(N, 0)) -> U9_AGA(N, is_out_aa)
   ACKERMANN_IN_AGA(N) -> U11_AGA(N, is_out_ag(-(N, 1)))
   U12_AGA(N, ackermann_out_aaa) -> U13_AGA(N, is_out_aa)
   ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag(0))

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag(X1)
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag(X1)
   U6_aaa(=:=_out_ag(0)) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag(0)) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga(1)) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(N, =:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(N, is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag(0)) -> U7_aga(N, is_in_ag(+(N, 1)))
   U8_aga(N, =:=_out_gg(N, 0)) -> U9_aga(N, is_in_aa)
   U11_aga(N, is_out_ag(-(N, 1))) -> U12_aga(N, ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(N, is_out_ag(+(N, 1))) -> ackermann_out_aga(N)
   U9_aga(N, is_out_aa) -> U10_aga(N, ackermann_in_aga(1))
   U12_aga(N, ackermann_out_aaa) -> U13_aga(N, is_in_aa)
   U10_aga(N, ackermann_out_aga(1)) -> ackermann_out_aga(N)
   U13_aga(N, is_out_aa) -> U14_aga(N, ackermann_in_aaa)
   U14_aga(N, ackermann_out_aaa) -> U15_aga(N, is_in_aa)
   U15_aga(N, is_out_aa) -> ackermann_out_aga(N)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0, x1)
   U11_aga(x0, x1)
   U15_aaa(x0)
   U7_aga(x0, x1)
   U9_aga(x0, x1)
   U12_aga(x0, x1)
   U10_aga(x0, x1)
   U13_aga(x0, x1)
   U14_aga(x0, x1)
   U15_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(216) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_in_aa) at position [0] we obtained the following new rules [LPAR04]:

   (U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_out_aa),U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_out_aa))


----------------------------------------

(217)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_AGA(N, is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AGA(N, is_out_ag(-(N, 1))) -> U12_AGA(N, ackermann_in_aaa)
   U13_AGA(N, is_out_aa) -> ACKERMANN_IN_AAA
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AAA -> U11_AAA(is_in_aa)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_in_aa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(N, is_out_ag(-(N, 1))) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AGA(N) -> U8_AGA(N, =:=_out_gg(N, 0))
   U8_AGA(N, =:=_out_gg(N, 0)) -> U9_AGA(N, is_out_aa)
   ACKERMANN_IN_AGA(N) -> U11_AGA(N, is_out_ag(-(N, 1)))
   U12_AGA(N, ackermann_out_aaa) -> U13_AGA(N, is_out_aa)
   ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag(0))
   U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_out_aa)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag(X1)
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag(X1)
   U6_aaa(=:=_out_ag(0)) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag(0)) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga(1)) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(N, =:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(N, is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag(0)) -> U7_aga(N, is_in_ag(+(N, 1)))
   U8_aga(N, =:=_out_gg(N, 0)) -> U9_aga(N, is_in_aa)
   U11_aga(N, is_out_ag(-(N, 1))) -> U12_aga(N, ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(N, is_out_ag(+(N, 1))) -> ackermann_out_aga(N)
   U9_aga(N, is_out_aa) -> U10_aga(N, ackermann_in_aga(1))
   U12_aga(N, ackermann_out_aaa) -> U13_aga(N, is_in_aa)
   U10_aga(N, ackermann_out_aga(1)) -> ackermann_out_aga(N)
   U13_aga(N, is_out_aa) -> U14_aga(N, ackermann_in_aaa)
   U14_aga(N, ackermann_out_aaa) -> U15_aga(N, is_in_aa)
   U15_aga(N, is_out_aa) -> ackermann_out_aga(N)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0, x1)
   U11_aga(x0, x1)
   U15_aaa(x0)
   U7_aga(x0, x1)
   U9_aga(x0, x1)
   U12_aga(x0, x1)
   U10_aga(x0, x1)
   U13_aga(x0, x1)
   U14_aga(x0, x1)
   U15_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(218) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule ACKERMANN_IN_AAA -> U11_AAA(is_in_aa) at position [0] we obtained the following new rules [LPAR04]:

   (ACKERMANN_IN_AAA -> U11_AAA(is_out_aa),ACKERMANN_IN_AAA -> U11_AAA(is_out_aa))


----------------------------------------

(219)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_AGA(N, is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AGA(N, is_out_ag(-(N, 1))) -> U12_AGA(N, ackermann_in_aaa)
   U13_AGA(N, is_out_aa) -> ACKERMANN_IN_AAA
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_in_aa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(N, is_out_ag(-(N, 1))) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AGA(N) -> U8_AGA(N, =:=_out_gg(N, 0))
   U8_AGA(N, =:=_out_gg(N, 0)) -> U9_AGA(N, is_out_aa)
   ACKERMANN_IN_AGA(N) -> U11_AGA(N, is_out_ag(-(N, 1)))
   U12_AGA(N, ackermann_out_aaa) -> U13_AGA(N, is_out_aa)
   ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag(0))
   U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_out_aa)
   ACKERMANN_IN_AAA -> U11_AAA(is_out_aa)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag(X1)
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag(X1)
   U6_aaa(=:=_out_ag(0)) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag(0)) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga(1)) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(N, =:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(N, is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag(0)) -> U7_aga(N, is_in_ag(+(N, 1)))
   U8_aga(N, =:=_out_gg(N, 0)) -> U9_aga(N, is_in_aa)
   U11_aga(N, is_out_ag(-(N, 1))) -> U12_aga(N, ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(N, is_out_ag(+(N, 1))) -> ackermann_out_aga(N)
   U9_aga(N, is_out_aa) -> U10_aga(N, ackermann_in_aga(1))
   U12_aga(N, ackermann_out_aaa) -> U13_aga(N, is_in_aa)
   U10_aga(N, ackermann_out_aga(1)) -> ackermann_out_aga(N)
   U13_aga(N, is_out_aa) -> U14_aga(N, ackermann_in_aaa)
   U14_aga(N, ackermann_out_aaa) -> U15_aga(N, is_in_aa)
   U15_aga(N, is_out_aa) -> ackermann_out_aga(N)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0, x1)
   U11_aga(x0, x1)
   U15_aaa(x0)
   U7_aga(x0, x1)
   U9_aga(x0, x1)
   U12_aga(x0, x1)
   U10_aga(x0, x1)
   U13_aga(x0, x1)
   U14_aga(x0, x1)
   U15_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(220) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U12_AAA(ackermann_out_aaa) -> U13_AAA(is_in_aa) at position [0] we obtained the following new rules [LPAR04]:

   (U12_AAA(ackermann_out_aaa) -> U13_AAA(is_out_aa),U12_AAA(ackermann_out_aaa) -> U13_AAA(is_out_aa))


----------------------------------------

(221)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_AGA(N, is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AGA(N, is_out_ag(-(N, 1))) -> U12_AGA(N, ackermann_in_aaa)
   U13_AGA(N, is_out_aa) -> ACKERMANN_IN_AAA
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(N, is_out_ag(-(N, 1))) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AGA(N) -> U8_AGA(N, =:=_out_gg(N, 0))
   U8_AGA(N, =:=_out_gg(N, 0)) -> U9_AGA(N, is_out_aa)
   ACKERMANN_IN_AGA(N) -> U11_AGA(N, is_out_ag(-(N, 1)))
   U12_AGA(N, ackermann_out_aaa) -> U13_AGA(N, is_out_aa)
   ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag(0))
   U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_out_aa)
   ACKERMANN_IN_AAA -> U11_AAA(is_out_aa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_out_aa)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag(X1)
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag(X1)
   U6_aaa(=:=_out_ag(0)) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag(0)) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga(1)) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(N, =:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(N, is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag(0)) -> U7_aga(N, is_in_ag(+(N, 1)))
   U8_aga(N, =:=_out_gg(N, 0)) -> U9_aga(N, is_in_aa)
   U11_aga(N, is_out_ag(-(N, 1))) -> U12_aga(N, ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(N, is_out_ag(+(N, 1))) -> ackermann_out_aga(N)
   U9_aga(N, is_out_aa) -> U10_aga(N, ackermann_in_aga(1))
   U12_aga(N, ackermann_out_aaa) -> U13_aga(N, is_in_aa)
   U10_aga(N, ackermann_out_aga(1)) -> ackermann_out_aga(N)
   U13_aga(N, is_out_aa) -> U14_aga(N, ackermann_in_aaa)
   U14_aga(N, ackermann_out_aaa) -> U15_aga(N, is_in_aa)
   U15_aga(N, is_out_aa) -> ackermann_out_aga(N)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0, x1)
   U11_aga(x0, x1)
   U15_aaa(x0)
   U7_aga(x0, x1)
   U9_aga(x0, x1)
   U12_aga(x0, x1)
   U10_aga(x0, x1)
   U13_aga(x0, x1)
   U14_aga(x0, x1)
   U15_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(222) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule ACKERMANN_IN_AGA(N) -> U8_AGA(N, =:=_out_gg(N, 0)) we obtained the following new rules [LPAR04]:

   (ACKERMANN_IN_AGA(1) -> U8_AGA(1, =:=_out_gg(1, 0)),ACKERMANN_IN_AGA(1) -> U8_AGA(1, =:=_out_gg(1, 0)))


----------------------------------------

(223)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_AGA(N, is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AGA(N, is_out_ag(-(N, 1))) -> U12_AGA(N, ackermann_in_aaa)
   U13_AGA(N, is_out_aa) -> ACKERMANN_IN_AAA
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(N, is_out_ag(-(N, 1))) -> ACKERMANN_IN_AAA
   U8_AGA(N, =:=_out_gg(N, 0)) -> U9_AGA(N, is_out_aa)
   ACKERMANN_IN_AGA(N) -> U11_AGA(N, is_out_ag(-(N, 1)))
   U12_AGA(N, ackermann_out_aaa) -> U13_AGA(N, is_out_aa)
   ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag(0))
   U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_out_aa)
   ACKERMANN_IN_AAA -> U11_AAA(is_out_aa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_out_aa)
   ACKERMANN_IN_AGA(1) -> U8_AGA(1, =:=_out_gg(1, 0))

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag(X1)
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag(X1)
   U6_aaa(=:=_out_ag(0)) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag(0)) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga(1)) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(N, =:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(N, is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag(0)) -> U7_aga(N, is_in_ag(+(N, 1)))
   U8_aga(N, =:=_out_gg(N, 0)) -> U9_aga(N, is_in_aa)
   U11_aga(N, is_out_ag(-(N, 1))) -> U12_aga(N, ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(N, is_out_ag(+(N, 1))) -> ackermann_out_aga(N)
   U9_aga(N, is_out_aa) -> U10_aga(N, ackermann_in_aga(1))
   U12_aga(N, ackermann_out_aaa) -> U13_aga(N, is_in_aa)
   U10_aga(N, ackermann_out_aga(1)) -> ackermann_out_aga(N)
   U13_aga(N, is_out_aa) -> U14_aga(N, ackermann_in_aaa)
   U14_aga(N, ackermann_out_aaa) -> U15_aga(N, is_in_aa)
   U15_aga(N, is_out_aa) -> ackermann_out_aga(N)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0, x1)
   U11_aga(x0, x1)
   U15_aaa(x0)
   U7_aga(x0, x1)
   U9_aga(x0, x1)
   U12_aga(x0, x1)
   U10_aga(x0, x1)
   U13_aga(x0, x1)
   U14_aga(x0, x1)
   U15_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(224) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U8_AGA(N, =:=_out_gg(N, 0)) -> U9_AGA(N, is_out_aa) we obtained the following new rules [LPAR04]:

   (U8_AGA(1, =:=_out_gg(1, 0)) -> U9_AGA(1, is_out_aa),U8_AGA(1, =:=_out_gg(1, 0)) -> U9_AGA(1, is_out_aa))


----------------------------------------

(225)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_AGA(N, is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AGA(N, is_out_ag(-(N, 1))) -> U12_AGA(N, ackermann_in_aaa)
   U13_AGA(N, is_out_aa) -> ACKERMANN_IN_AAA
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(N, is_out_ag(-(N, 1))) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AGA(N) -> U11_AGA(N, is_out_ag(-(N, 1)))
   U12_AGA(N, ackermann_out_aaa) -> U13_AGA(N, is_out_aa)
   ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag(0))
   U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_out_aa)
   ACKERMANN_IN_AAA -> U11_AAA(is_out_aa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_out_aa)
   ACKERMANN_IN_AGA(1) -> U8_AGA(1, =:=_out_gg(1, 0))
   U8_AGA(1, =:=_out_gg(1, 0)) -> U9_AGA(1, is_out_aa)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag(X1)
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag(X1)
   U6_aaa(=:=_out_ag(0)) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag(0)) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga(1)) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(N, =:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(N, is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag(0)) -> U7_aga(N, is_in_ag(+(N, 1)))
   U8_aga(N, =:=_out_gg(N, 0)) -> U9_aga(N, is_in_aa)
   U11_aga(N, is_out_ag(-(N, 1))) -> U12_aga(N, ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(N, is_out_ag(+(N, 1))) -> ackermann_out_aga(N)
   U9_aga(N, is_out_aa) -> U10_aga(N, ackermann_in_aga(1))
   U12_aga(N, ackermann_out_aaa) -> U13_aga(N, is_in_aa)
   U10_aga(N, ackermann_out_aga(1)) -> ackermann_out_aga(N)
   U13_aga(N, is_out_aa) -> U14_aga(N, ackermann_in_aaa)
   U14_aga(N, ackermann_out_aaa) -> U15_aga(N, is_in_aa)
   U15_aga(N, is_out_aa) -> ackermann_out_aga(N)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0, x1)
   U11_aga(x0, x1)
   U15_aaa(x0)
   U7_aga(x0, x1)
   U9_aga(x0, x1)
   U12_aga(x0, x1)
   U10_aga(x0, x1)
   U13_aga(x0, x1)
   U14_aga(x0, x1)
   U15_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(226) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U9_AGA(N, is_out_aa) -> ACKERMANN_IN_AGA(1) we obtained the following new rules [LPAR04]:

   (U9_AGA(1, is_out_aa) -> ACKERMANN_IN_AGA(1),U9_AGA(1, is_out_aa) -> ACKERMANN_IN_AGA(1))


----------------------------------------

(227)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11_AGA(N, is_out_ag(-(N, 1))) -> U12_AGA(N, ackermann_in_aaa)
   U13_AGA(N, is_out_aa) -> ACKERMANN_IN_AAA
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(N, is_out_ag(-(N, 1))) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AGA(N) -> U11_AGA(N, is_out_ag(-(N, 1)))
   U12_AGA(N, ackermann_out_aaa) -> U13_AGA(N, is_out_aa)
   ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag(0))
   U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_out_aa)
   ACKERMANN_IN_AAA -> U11_AAA(is_out_aa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_out_aa)
   ACKERMANN_IN_AGA(1) -> U8_AGA(1, =:=_out_gg(1, 0))
   U8_AGA(1, =:=_out_gg(1, 0)) -> U9_AGA(1, is_out_aa)
   U9_AGA(1, is_out_aa) -> ACKERMANN_IN_AGA(1)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag(X1)
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag(X1)
   U6_aaa(=:=_out_ag(0)) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag(0)) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga(1)) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(N, =:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(N, is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag(0)) -> U7_aga(N, is_in_ag(+(N, 1)))
   U8_aga(N, =:=_out_gg(N, 0)) -> U9_aga(N, is_in_aa)
   U11_aga(N, is_out_ag(-(N, 1))) -> U12_aga(N, ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(N, is_out_ag(+(N, 1))) -> ackermann_out_aga(N)
   U9_aga(N, is_out_aa) -> U10_aga(N, ackermann_in_aga(1))
   U12_aga(N, ackermann_out_aaa) -> U13_aga(N, is_in_aa)
   U10_aga(N, ackermann_out_aga(1)) -> ackermann_out_aga(N)
   U13_aga(N, is_out_aa) -> U14_aga(N, ackermann_in_aaa)
   U14_aga(N, ackermann_out_aaa) -> U15_aga(N, is_in_aa)
   U15_aga(N, is_out_aa) -> ackermann_out_aga(N)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0, x1)
   U11_aga(x0, x1)
   U15_aaa(x0)
   U7_aga(x0, x1)
   U9_aga(x0, x1)
   U12_aga(x0, x1)
   U10_aga(x0, x1)
   U13_aga(x0, x1)
   U14_aga(x0, x1)
   U15_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(228) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule ACKERMANN_IN_AGA(N) -> U11_AGA(N, is_out_ag(-(N, 1))) we obtained the following new rules [LPAR04]:

   (ACKERMANN_IN_AGA(1) -> U11_AGA(1, is_out_ag(-(1, 1))),ACKERMANN_IN_AGA(1) -> U11_AGA(1, is_out_ag(-(1, 1))))


----------------------------------------

(229)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U11_AGA(N, is_out_ag(-(N, 1))) -> U12_AGA(N, ackermann_in_aaa)
   U13_AGA(N, is_out_aa) -> ACKERMANN_IN_AAA
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(N, is_out_ag(-(N, 1))) -> ACKERMANN_IN_AAA
   U12_AGA(N, ackermann_out_aaa) -> U13_AGA(N, is_out_aa)
   ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag(0))
   U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_out_aa)
   ACKERMANN_IN_AAA -> U11_AAA(is_out_aa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_out_aa)
   ACKERMANN_IN_AGA(1) -> U8_AGA(1, =:=_out_gg(1, 0))
   U8_AGA(1, =:=_out_gg(1, 0)) -> U9_AGA(1, is_out_aa)
   U9_AGA(1, is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AGA(1) -> U11_AGA(1, is_out_ag(-(1, 1)))

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag(X1)
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag(X1)
   U6_aaa(=:=_out_ag(0)) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag(0)) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga(1)) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(N, =:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(N, is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag(0)) -> U7_aga(N, is_in_ag(+(N, 1)))
   U8_aga(N, =:=_out_gg(N, 0)) -> U9_aga(N, is_in_aa)
   U11_aga(N, is_out_ag(-(N, 1))) -> U12_aga(N, ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(N, is_out_ag(+(N, 1))) -> ackermann_out_aga(N)
   U9_aga(N, is_out_aa) -> U10_aga(N, ackermann_in_aga(1))
   U12_aga(N, ackermann_out_aaa) -> U13_aga(N, is_in_aa)
   U10_aga(N, ackermann_out_aga(1)) -> ackermann_out_aga(N)
   U13_aga(N, is_out_aa) -> U14_aga(N, ackermann_in_aaa)
   U14_aga(N, ackermann_out_aaa) -> U15_aga(N, is_in_aa)
   U15_aga(N, is_out_aa) -> ackermann_out_aga(N)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0, x1)
   U11_aga(x0, x1)
   U15_aaa(x0)
   U7_aga(x0, x1)
   U9_aga(x0, x1)
   U12_aga(x0, x1)
   U10_aga(x0, x1)
   U13_aga(x0, x1)
   U14_aga(x0, x1)
   U15_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(230) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U11_AGA(N, is_out_ag(-(N, 1))) -> U12_AGA(N, ackermann_in_aaa) we obtained the following new rules [LPAR04]:

   (U11_AGA(1, is_out_ag(-(1, 1))) -> U12_AGA(1, ackermann_in_aaa),U11_AGA(1, is_out_ag(-(1, 1))) -> U12_AGA(1, ackermann_in_aaa))


----------------------------------------

(231)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U13_AGA(N, is_out_aa) -> ACKERMANN_IN_AAA
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AGA(N, is_out_ag(-(N, 1))) -> ACKERMANN_IN_AAA
   U12_AGA(N, ackermann_out_aaa) -> U13_AGA(N, is_out_aa)
   ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag(0))
   U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_out_aa)
   ACKERMANN_IN_AAA -> U11_AAA(is_out_aa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_out_aa)
   ACKERMANN_IN_AGA(1) -> U8_AGA(1, =:=_out_gg(1, 0))
   U8_AGA(1, =:=_out_gg(1, 0)) -> U9_AGA(1, is_out_aa)
   U9_AGA(1, is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AGA(1) -> U11_AGA(1, is_out_ag(-(1, 1)))
   U11_AGA(1, is_out_ag(-(1, 1))) -> U12_AGA(1, ackermann_in_aaa)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag(X1)
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag(X1)
   U6_aaa(=:=_out_ag(0)) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag(0)) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga(1)) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(N, =:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(N, is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag(0)) -> U7_aga(N, is_in_ag(+(N, 1)))
   U8_aga(N, =:=_out_gg(N, 0)) -> U9_aga(N, is_in_aa)
   U11_aga(N, is_out_ag(-(N, 1))) -> U12_aga(N, ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(N, is_out_ag(+(N, 1))) -> ackermann_out_aga(N)
   U9_aga(N, is_out_aa) -> U10_aga(N, ackermann_in_aga(1))
   U12_aga(N, ackermann_out_aaa) -> U13_aga(N, is_in_aa)
   U10_aga(N, ackermann_out_aga(1)) -> ackermann_out_aga(N)
   U13_aga(N, is_out_aa) -> U14_aga(N, ackermann_in_aaa)
   U14_aga(N, ackermann_out_aaa) -> U15_aga(N, is_in_aa)
   U15_aga(N, is_out_aa) -> ackermann_out_aga(N)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0, x1)
   U11_aga(x0, x1)
   U15_aaa(x0)
   U7_aga(x0, x1)
   U9_aga(x0, x1)
   U12_aga(x0, x1)
   U10_aga(x0, x1)
   U13_aga(x0, x1)
   U14_aga(x0, x1)
   U15_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(232) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U11_AGA(N, is_out_ag(-(N, 1))) -> ACKERMANN_IN_AAA we obtained the following new rules [LPAR04]:

   (U11_AGA(1, is_out_ag(-(1, 1))) -> ACKERMANN_IN_AAA,U11_AGA(1, is_out_ag(-(1, 1))) -> ACKERMANN_IN_AAA)


----------------------------------------

(233)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U13_AGA(N, is_out_aa) -> ACKERMANN_IN_AAA
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U12_AGA(N, ackermann_out_aaa) -> U13_AGA(N, is_out_aa)
   ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag(0))
   U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_out_aa)
   ACKERMANN_IN_AAA -> U11_AAA(is_out_aa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_out_aa)
   ACKERMANN_IN_AGA(1) -> U8_AGA(1, =:=_out_gg(1, 0))
   U8_AGA(1, =:=_out_gg(1, 0)) -> U9_AGA(1, is_out_aa)
   U9_AGA(1, is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AGA(1) -> U11_AGA(1, is_out_ag(-(1, 1)))
   U11_AGA(1, is_out_ag(-(1, 1))) -> U12_AGA(1, ackermann_in_aaa)
   U11_AGA(1, is_out_ag(-(1, 1))) -> ACKERMANN_IN_AAA

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag(X1)
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag(X1)
   U6_aaa(=:=_out_ag(0)) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag(0)) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga(1)) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(N, =:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(N, is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag(0)) -> U7_aga(N, is_in_ag(+(N, 1)))
   U8_aga(N, =:=_out_gg(N, 0)) -> U9_aga(N, is_in_aa)
   U11_aga(N, is_out_ag(-(N, 1))) -> U12_aga(N, ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(N, is_out_ag(+(N, 1))) -> ackermann_out_aga(N)
   U9_aga(N, is_out_aa) -> U10_aga(N, ackermann_in_aga(1))
   U12_aga(N, ackermann_out_aaa) -> U13_aga(N, is_in_aa)
   U10_aga(N, ackermann_out_aga(1)) -> ackermann_out_aga(N)
   U13_aga(N, is_out_aa) -> U14_aga(N, ackermann_in_aaa)
   U14_aga(N, ackermann_out_aaa) -> U15_aga(N, is_in_aa)
   U15_aga(N, is_out_aa) -> ackermann_out_aga(N)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0, x1)
   U11_aga(x0, x1)
   U15_aaa(x0)
   U7_aga(x0, x1)
   U9_aga(x0, x1)
   U12_aga(x0, x1)
   U10_aga(x0, x1)
   U13_aga(x0, x1)
   U14_aga(x0, x1)
   U15_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(234) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U12_AGA(N, ackermann_out_aaa) -> U13_AGA(N, is_out_aa) we obtained the following new rules [LPAR04]:

   (U12_AGA(1, ackermann_out_aaa) -> U13_AGA(1, is_out_aa),U12_AGA(1, ackermann_out_aaa) -> U13_AGA(1, is_out_aa))


----------------------------------------

(235)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U13_AGA(N, is_out_aa) -> ACKERMANN_IN_AAA
   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag(0))
   U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_out_aa)
   ACKERMANN_IN_AAA -> U11_AAA(is_out_aa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_out_aa)
   ACKERMANN_IN_AGA(1) -> U8_AGA(1, =:=_out_gg(1, 0))
   U8_AGA(1, =:=_out_gg(1, 0)) -> U9_AGA(1, is_out_aa)
   U9_AGA(1, is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AGA(1) -> U11_AGA(1, is_out_ag(-(1, 1)))
   U11_AGA(1, is_out_ag(-(1, 1))) -> U12_AGA(1, ackermann_in_aaa)
   U11_AGA(1, is_out_ag(-(1, 1))) -> ACKERMANN_IN_AAA
   U12_AGA(1, ackermann_out_aaa) -> U13_AGA(1, is_out_aa)

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag(X1)
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag(X1)
   U6_aaa(=:=_out_ag(0)) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag(0)) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga(1)) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(N, =:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(N, is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag(0)) -> U7_aga(N, is_in_ag(+(N, 1)))
   U8_aga(N, =:=_out_gg(N, 0)) -> U9_aga(N, is_in_aa)
   U11_aga(N, is_out_ag(-(N, 1))) -> U12_aga(N, ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(N, is_out_ag(+(N, 1))) -> ackermann_out_aga(N)
   U9_aga(N, is_out_aa) -> U10_aga(N, ackermann_in_aga(1))
   U12_aga(N, ackermann_out_aaa) -> U13_aga(N, is_in_aa)
   U10_aga(N, ackermann_out_aga(1)) -> ackermann_out_aga(N)
   U13_aga(N, is_out_aa) -> U14_aga(N, ackermann_in_aaa)
   U14_aga(N, ackermann_out_aaa) -> U15_aga(N, is_in_aa)
   U15_aga(N, is_out_aa) -> ackermann_out_aga(N)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0, x1)
   U11_aga(x0, x1)
   U15_aaa(x0)
   U7_aga(x0, x1)
   U9_aga(x0, x1)
   U12_aga(x0, x1)
   U10_aga(x0, x1)
   U13_aga(x0, x1)
   U14_aga(x0, x1)
   U15_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(236) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U13_AGA(N, is_out_aa) -> ACKERMANN_IN_AAA we obtained the following new rules [LPAR04]:

   (U13_AGA(1, is_out_aa) -> ACKERMANN_IN_AAA,U13_AGA(1, is_out_aa) -> ACKERMANN_IN_AAA)


----------------------------------------

(237)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U9_AAA(is_out_aa) -> ACKERMANN_IN_AGA(1)
   U11_AAA(is_out_aa) -> U12_AAA(ackermann_in_aaa)
   U13_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   U11_AAA(is_out_aa) -> ACKERMANN_IN_AAA
   ACKERMANN_IN_AAA -> U8_AAA(=:=_out_ag(0))
   U8_AAA(=:=_out_ag(0)) -> U9_AAA(is_out_aa)
   ACKERMANN_IN_AAA -> U11_AAA(is_out_aa)
   U12_AAA(ackermann_out_aaa) -> U13_AAA(is_out_aa)
   ACKERMANN_IN_AGA(1) -> U8_AGA(1, =:=_out_gg(1, 0))
   U8_AGA(1, =:=_out_gg(1, 0)) -> U9_AGA(1, is_out_aa)
   U9_AGA(1, is_out_aa) -> ACKERMANN_IN_AGA(1)
   ACKERMANN_IN_AGA(1) -> U11_AGA(1, is_out_ag(-(1, 1)))
   U11_AGA(1, is_out_ag(-(1, 1))) -> U12_AGA(1, ackermann_in_aaa)
   U11_AGA(1, is_out_ag(-(1, 1))) -> ACKERMANN_IN_AAA
   U12_AGA(1, ackermann_out_aaa) -> U13_AGA(1, is_out_aa)
   U13_AGA(1, is_out_aa) -> ACKERMANN_IN_AAA

The TRS R consists of the following rules:

   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   is_in_aa -> is_out_aa
   is_in_ag(X1) -> is_out_ag(X1)
   ackermann_in_aaa -> U6_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U8_aaa(=:=_in_ag(0))
   ackermann_in_aaa -> U11_aaa(is_in_aa)
   =:=_in_ag(X1) -> =:=_out_ag(X1)
   U6_aaa(=:=_out_ag(0)) -> U7_aaa(is_in_aa)
   U8_aaa(=:=_out_ag(0)) -> U9_aaa(is_in_aa)
   U11_aaa(is_out_aa) -> U12_aaa(ackermann_in_aaa)
   U7_aaa(is_out_aa) -> ackermann_out_aaa
   U9_aaa(is_out_aa) -> U10_aaa(ackermann_in_aga(1))
   U12_aaa(ackermann_out_aaa) -> U13_aaa(is_in_aa)
   U10_aaa(ackermann_out_aga(1)) -> ackermann_out_aaa
   U13_aaa(is_out_aa) -> U14_aaa(ackermann_in_aaa)
   ackermann_in_aga(N) -> U6_aga(N, =:=_in_ag(0))
   ackermann_in_aga(N) -> U8_aga(N, =:=_in_gg(N, 0))
   ackermann_in_aga(N) -> U11_aga(N, is_in_ag(-(N, 1)))
   U14_aaa(ackermann_out_aaa) -> U15_aaa(is_in_aa)
   U6_aga(N, =:=_out_ag(0)) -> U7_aga(N, is_in_ag(+(N, 1)))
   U8_aga(N, =:=_out_gg(N, 0)) -> U9_aga(N, is_in_aa)
   U11_aga(N, is_out_ag(-(N, 1))) -> U12_aga(N, ackermann_in_aaa)
   U15_aaa(is_out_aa) -> ackermann_out_aaa
   U7_aga(N, is_out_ag(+(N, 1))) -> ackermann_out_aga(N)
   U9_aga(N, is_out_aa) -> U10_aga(N, ackermann_in_aga(1))
   U12_aga(N, ackermann_out_aaa) -> U13_aga(N, is_in_aa)
   U10_aga(N, ackermann_out_aga(1)) -> ackermann_out_aga(N)
   U13_aga(N, is_out_aa) -> U14_aga(N, ackermann_in_aaa)
   U14_aga(N, ackermann_out_aaa) -> U15_aga(N, is_in_aa)
   U15_aga(N, is_out_aa) -> ackermann_out_aga(N)

The set Q consists of the following terms:

   =:=_in_gg(x0, x1)
   is_in_aa
   is_in_ag(x0)
   ackermann_in_aaa
   =:=_in_ag(x0)
   U6_aaa(x0)
   U8_aaa(x0)
   U11_aaa(x0)
   U7_aaa(x0)
   U9_aaa(x0)
   U12_aaa(x0)
   U10_aaa(x0)
   U13_aaa(x0)
   ackermann_in_aga(x0)
   U14_aaa(x0)
   U6_aga(x0, x1)
   U8_aga(x0, x1)
   U11_aga(x0, x1)
   U15_aaa(x0)
   U7_aga(x0, x1)
   U9_aga(x0, x1)
   U12_aga(x0, x1)
   U10_aga(x0, x1)
   U13_aga(x0, x1)
   U14_aga(x0, x1)
   U15_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(238)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ACKERMANN_IN_GAA(M, N, Ret) -> U11_GAA(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_GAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> ACKERMANN_IN_GAA(M, N1, Ret1)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, =<_in_gg(M, 3))
   =<_in_gg(X0, X1) -> =<_out_gg(X0, X1)
   U2_gg(M, N, =<_out_gg(M, 3)) -> U3_gg(M, N, >=_in_gg(N, 0))
   U3_gg(M, N, >=_out_gg(N, 0)) -> U4_gg(M, N, =<_in_gg(N, 23))
   U4_gg(M, N, =<_out_gg(N, 23)) -> U5_gg(M, N, ackermann_in_gga(M, N, X1))
   ackermann_in_gga(M, N, Ret) -> U6_gga(M, N, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U6_gga(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U7_gga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U8_gga(M, N, Ret, =:=_in_gg(N, 0))
   U8_gga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_gga(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gga(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U6_aga(M, N, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U6_aga(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aga(M, N, Ret, is_in_ag(Ret, +(N, 1)))
   U7_aga(M, N, Ret, is_out_ag(Ret, +(N, 1))) -> ackermann_out_aga(M, N, Ret)
   ackermann_in_aga(M, N, Ret) -> U8_aga(M, N, Ret, =:=_in_gg(N, 0))
   U8_aga(M, N, Ret, =:=_out_gg(N, 0)) -> U9_aga(M, N, Ret, is_in_aa(M1, -(M, 1)))
   is_in_aa(X0, X1) -> is_out_aa(X0, X1)
   U9_aga(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aga(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   ackermann_in_aga(M, N, Ret) -> U11_aga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_aga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_aga(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   ackermann_in_aaa(M, N, Ret) -> U6_aaa(M, N, Ret, =:=_in_ag(M, 0))
   U6_aaa(M, N, Ret, =:=_out_ag(M, 0)) -> U7_aaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_aaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U8_aaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_aaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_aaa(M, N, Ret, is_in_aa(M1, -(M, 1)))
   U9_aaa(M, N, Ret, is_out_aa(M1, -(M, 1))) -> U10_aaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_aaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aaa(M, N, Ret)
   ackermann_in_aaa(M, N, Ret) -> U11_aaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_aaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_aaa(M, N, Ret, N1, ackermann_in_aaa(M, N1, Ret1))
   U12_aaa(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aaa(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aaa(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aaa(M, N, Ret)
   U12_aga(M, N, Ret, N1, ackermann_out_aaa(M, N1, Ret1)) -> U13_aga(M, N, Ret, Ret1, is_in_aa(M1, -(M, 1)))
   U13_aga(M, N, Ret, Ret1, is_out_aa(M1, -(M, 1))) -> U14_aga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_aga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_aga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_aga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_aga(M, N, Ret)
   U10_aga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_aga(M, N, Ret)
   U10_gga(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gga(M, N, Ret)
   ackermann_in_gga(M, N, Ret) -> U11_gga(M, N, Ret, is_in_ag(N1, -(N, 1)))
   U11_gga(M, N, Ret, is_out_ag(N1, -(N, 1))) -> U12_gga(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   ackermann_in_gaa(M, N, Ret) -> U6_gaa(M, N, Ret, =:=_in_gg(M, 0))
   U6_gaa(M, N, Ret, =:=_out_gg(M, 0)) -> U7_gaa(M, N, Ret, is_in_aa(Ret, +(N, 1)))
   U7_gaa(M, N, Ret, is_out_aa(Ret, +(N, 1))) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U8_gaa(M, N, Ret, =:=_in_ag(N, 0))
   U8_gaa(M, N, Ret, =:=_out_ag(N, 0)) -> U9_gaa(M, N, Ret, is_in_ag(M1, -(M, 1)))
   U9_gaa(M, N, Ret, is_out_ag(M1, -(M, 1))) -> U10_gaa(M, N, Ret, ackermann_in_aga(M1, 1, Ret))
   U10_gaa(M, N, Ret, ackermann_out_aga(M1, 1, Ret)) -> ackermann_out_gaa(M, N, Ret)
   ackermann_in_gaa(M, N, Ret) -> U11_gaa(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_gaa(M, N, Ret, is_out_aa(N1, -(N, 1))) -> U12_gaa(M, N, Ret, N1, ackermann_in_gaa(M, N1, Ret1))
   U12_gaa(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gaa(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gaa(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gaa(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gaa(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gaa(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gaa(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gaa(M, N, Ret)
   U12_gga(M, N, Ret, N1, ackermann_out_gaa(M, N1, Ret1)) -> U13_gga(M, N, Ret, Ret1, is_in_ag(M1, -(M, 1)))
   U13_gga(M, N, Ret, Ret1, is_out_ag(M1, -(M, 1))) -> U14_gga(M, N, Ret, ackermann_in_aaa(M1, Ret1, Ret2))
   U14_gga(M, N, Ret, ackermann_out_aaa(M1, Ret1, Ret2)) -> U15_gga(M, N, Ret, is_in_aa(Ret, Ret2))
   U15_gga(M, N, Ret, is_out_aa(Ret, Ret2)) -> ackermann_out_gga(M, N, Ret)
   U5_gg(M, N, ackermann_out_gga(M, N, X1)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg(x1, x2)

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

=<_in_gg(x1, x2)  =  =<_in_gg(x1, x2)

=<_out_gg(x1, x2)  =  =<_out_gg(x1, x2)

3  =  3

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

23  =  23

U5_gg(x1, x2, x3)  =  U5_gg(x1, x2, x3)

ackermann_in_gga(x1, x2, x3)  =  ackermann_in_gga(x1, x2)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg(x1, x2)

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

+(x1, x2)  =  +(x1, x2)

1  =  1

ackermann_out_gga(x1, x2, x3)  =  ackermann_out_gga(x1, x2)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x1, x2, x4)

-(x1, x2)  =  -(x1, x2)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

ackermann_in_aga(x1, x2, x3)  =  ackermann_in_aga(x2)

U6_aga(x1, x2, x3, x4)  =  U6_aga(x2, x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag(x2)

U7_aga(x1, x2, x3, x4)  =  U7_aga(x2, x4)

ackermann_out_aga(x1, x2, x3)  =  ackermann_out_aga(x2)

U8_aga(x1, x2, x3, x4)  =  U8_aga(x2, x4)

U9_aga(x1, x2, x3, x4)  =  U9_aga(x2, x4)

is_in_aa(x1, x2)  =  is_in_aa

is_out_aa(x1, x2)  =  is_out_aa

U10_aga(x1, x2, x3, x4)  =  U10_aga(x2, x4)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x2, x4)

U12_aga(x1, x2, x3, x4, x5)  =  U12_aga(x2, x5)

ackermann_in_aaa(x1, x2, x3)  =  ackermann_in_aaa

U6_aaa(x1, x2, x3, x4)  =  U6_aaa(x4)

U7_aaa(x1, x2, x3, x4)  =  U7_aaa(x4)

ackermann_out_aaa(x1, x2, x3)  =  ackermann_out_aaa

U8_aaa(x1, x2, x3, x4)  =  U8_aaa(x4)

U9_aaa(x1, x2, x3, x4)  =  U9_aaa(x4)

U10_aaa(x1, x2, x3, x4)  =  U10_aaa(x4)

U11_aaa(x1, x2, x3, x4)  =  U11_aaa(x4)

U12_aaa(x1, x2, x3, x4, x5)  =  U12_aaa(x5)

U13_aaa(x1, x2, x3, x4, x5)  =  U13_aaa(x5)

U14_aaa(x1, x2, x3, x4)  =  U14_aaa(x4)

U15_aaa(x1, x2, x3, x4)  =  U15_aaa(x4)

U13_aga(x1, x2, x3, x4, x5)  =  U13_aga(x2, x5)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x2, x4)

U15_aga(x1, x2, x3, x4)  =  U15_aga(x2, x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x2, x4)

U12_gga(x1, x2, x3, x4, x5)  =  U12_gga(x1, x2, x5)

ackermann_in_gaa(x1, x2, x3)  =  ackermann_in_gaa(x1)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

ackermann_out_gaa(x1, x2, x3)  =  ackermann_out_gaa(x1)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x1, x4)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4, x5)  =  U12_gaa(x1, x5)

U13_gaa(x1, x2, x3, x4, x5)  =  U13_gaa(x1, x5)

U14_gaa(x1, x2, x3, x4)  =  U14_gaa(x1, x4)

U15_gaa(x1, x2, x3, x4)  =  U15_gaa(x1, x4)

U13_gga(x1, x2, x3, x4, x5)  =  U13_gga(x1, x2, x5)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x1, x2, x4)

U15_gga(x1, x2, x3, x4)  =  U15_gga(x1, x2, x4)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

ACKERMANN_IN_GAA(x1, x2, x3)  =  ACKERMANN_IN_GAA(x1)

U11_GAA(x1, x2, x3, x4)  =  U11_GAA(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(239) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(240)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ACKERMANN_IN_GAA(M, N, Ret) -> U11_GAA(M, N, Ret, is_in_aa(N1, -(N, 1)))
   U11_GAA(M, N, Ret, is_out_aa(N1, -(N, 1))) -> ACKERMANN_IN_GAA(M, N1, Ret1)

The TRS R consists of the following rules:

   is_in_aa(X0, X1) -> is_out_aa(X0, X1)

The argument filtering Pi contains the following mapping:
1  =  1

-(x1, x2)  =  -(x1, x2)

is_in_aa(x1, x2)  =  is_in_aa

is_out_aa(x1, x2)  =  is_out_aa

ACKERMANN_IN_GAA(x1, x2, x3)  =  ACKERMANN_IN_GAA(x1)

U11_GAA(x1, x2, x3, x4)  =  U11_GAA(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(241) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(main M N)",
                "(',' (>= M (0)) (',' (=< M (3)) (',' (>= N (0)) (',' (=< N (23)) (ackermann M N X1)))))"
            ],
            [
                "(ackermann M N Ret)",
                "(',' (=:= M (0)) (',' (!) (is Ret (+ N (1)))))"
            ],
            [
                "(ackermann M N Ret)",
                "(',' (=:= N (0)) (',' (!) (',' (is M1 (- M (1))) (ackermann M1 (1) Ret))))"
            ],
            [
                "(ackermann M N Ret)",
                "(',' (!) (',' (is N1 (- N (1))) (',' (ackermann M N1 Ret1) (',' (is M1 (- M (1))) (',' (ackermann M1 Ret1 Ret2) (is Ret Ret2))))))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "5320": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(ackermann T36 T33 X60)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T36",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T28",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [
                        "T36",
                        "T33"
                    ],
                    "free": ["X60"],
                    "exprvars": [
                        "T36",
                        "T28"
                    ]
                }
            },
            "5321": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(is X61 T39)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T39"],
                    "free": ["X61"],
                    "exprvars": []
                }
            },
            "4893": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=< T6 (23)) (ackermann T5 T6 X6))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T5",
                        "T6"
                    ],
                    "free": ["X6"],
                    "exprvars": [
                        "T5",
                        "T6"
                    ]
                }
            },
            "4894": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">"
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T5",
                        "T6"
                    ],
                    "free": ["X6"],
                    "exprvars": [
                        "T5",
                        "T6"
                    ]
                }
            },
            "type": "Nodes",
            "4884": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (>= T6 (0)) (',' (=< T6 (23)) (ackermann T5 T6 X6)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T5",
                        "T6"
                    ],
                    "free": ["X6"],
                    "exprvars": ["T5"]
                }
            },
            "4885": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": ">"
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T5",
                        "T6"
                    ],
                    "free": ["X6"],
                    "exprvars": ["T5"]
                }
            },
            "5710": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T42",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T39",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [
                        "T42",
                        "T39"
                    ],
                    "free": ["X61"],
                    "exprvars": [
                        "T42",
                        "T39"
                    ]
                }
            },
            "4886": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5711": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T42",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T39",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T42",
                        "T39"
                    ]
                }
            },
            "4900": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (=:= T11 (0)) (',' (!_2) (is X18 (+ T12 (1)))))"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(ackermann T11 T12 X6)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(ackermann T11 T12 X6)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T12",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T11",
                        "T12"
                    ],
                    "free": [
                        "X6",
                        "X18"
                    ],
                    "exprvars": [
                        "T5",
                        "T6",
                        "T12",
                        "T11"
                    ]
                }
            },
            "5318": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5319": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (ackermann T36 T33 X60) (is X61 X60))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T36",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T28",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [
                        "T36",
                        "T28",
                        "T33"
                    ],
                    "free": [
                        "X61",
                        "X59",
                        "X60"
                    ],
                    "exprvars": [
                        "T36",
                        "T28"
                    ]
                }
            },
            "5151": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(ackermann T28 T30 X58)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T30",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T29",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T12",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T30",
                        "T28"
                    ],
                    "free": ["X58"],
                    "exprvars": [
                        "T5",
                        "T30",
                        "T6",
                        "T29",
                        "T12",
                        "T28",
                        "T11"
                    ]
                }
            },
            "5130": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(is X18 (+ T12 (1)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T12",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": ["T12"],
                    "free": ["X18"],
                    "exprvars": [
                        "T5",
                        "T6",
                        "T12",
                        "T11"
                    ]
                }
            },
            "5152": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (is X59 (- T28 (1))) (',' (ackermann X59 T33 X60) (is X61 X60)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T28",
                        "T33"
                    ],
                    "free": [
                        "X61",
                        "X59",
                        "X60"
                    ],
                    "exprvars": []
                }
            },
            "5131": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T13",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T12",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "+"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T12",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T13",
                        "T12"
                    ],
                    "free": ["X18"],
                    "exprvars": [
                        "T5",
                        "T13",
                        "T6",
                        "T12",
                        "T11"
                    ]
                }
            },
            "5132": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T13",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T12",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "+"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T12",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T5",
                        "T13",
                        "T6",
                        "T12",
                        "T11"
                    ]
                }
            },
            "5133": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(ackermann T11 T12 X6)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T12",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T12",
                        "T11"
                    ],
                    "free": ["X6"],
                    "exprvars": [
                        "T5",
                        "T6",
                        "T12",
                        "T11"
                    ]
                }
            },
            "5134": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(ackermann T11 T12 X6)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T12",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T12",
                        "T11"
                    ],
                    "free": ["X6"],
                    "exprvars": [
                        "T5",
                        "T6",
                        "T12",
                        "T11"
                    ]
                }
            },
            "5135": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=:= T23 (0)) (',' (!_2) (',' (is X40 (- T22 (1))) (ackermann X40 (1) X41))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T12",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T22",
                        "T23"
                    ],
                    "free": [
                        "X41",
                        "X40"
                    ],
                    "exprvars": [
                        "T5",
                        "T6",
                        "T12",
                        "T23",
                        "T11",
                        "T22"
                    ]
                }
            },
            "5150": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (ackermann T28 T30 X58) (',' (is X59 (- T28 (1))) (',' (ackermann X59 X58 X60) (is X61 X60))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T30",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T29",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T12",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T30",
                        "T29",
                        "T28"
                    ],
                    "free": [
                        "X61",
                        "X57",
                        "X58",
                        "X59",
                        "X60"
                    ],
                    "exprvars": [
                        "T5",
                        "T30",
                        "T6",
                        "T29",
                        "T12",
                        "T28",
                        "T11"
                    ]
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(main T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T1",
                        "T2"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(main T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T1",
                        "T2"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "5709": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (>= T5 (0)) (',' (=< T5 (3)) (',' (>= T6 (0)) (',' (=< T6 (23)) (ackermann T5 T6 X6)))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T5",
                        "T6"
                    ],
                    "free": ["X6"],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5148": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (!_2) (',' (is X57 (- T29 (1))) (',' (ackermann T28 X57 X58) (',' (is X59 (- T28 (1))) (',' (ackermann X59 X58 X60) (is X61 X60))))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T12",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T28",
                        "T29"
                    ],
                    "free": [
                        "X61",
                        "X57",
                        "X58",
                        "X59",
                        "X60"
                    ],
                    "exprvars": [
                        "T5",
                        "T6",
                        "T29",
                        "T12",
                        "T28",
                        "T11"
                    ]
                }
            },
            "5149": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (is X57 (- T29 (1))) (',' (ackermann T28 X57 X58) (',' (is X59 (- T28 (1))) (',' (ackermann X59 X58 X60) (is X61 X60)))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T12",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T28",
                        "T29"
                    ],
                    "free": [
                        "X61",
                        "X57",
                        "X58",
                        "X59",
                        "X60"
                    ],
                    "exprvars": [
                        "T5",
                        "T6",
                        "T29",
                        "T12",
                        "T28",
                        "T11"
                    ]
                }
            },
            "4897": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(ackermann T5 T6 X6)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T5",
                        "T6"
                    ],
                    "free": ["X6"],
                    "exprvars": [
                        "T5",
                        "T6"
                    ]
                }
            },
            "5128": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (!_2) (is X18 (+ T12 (1))))"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(ackermann T11 T12 X6)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(ackermann T11 T12 X6)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T12",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T12",
                        "T11"
                    ],
                    "free": [
                        "X6",
                        "X18"
                    ],
                    "exprvars": [
                        "T5",
                        "T6",
                        "T12",
                        "T11"
                    ]
                }
            },
            "4755": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=< T5 (3)) (',' (>= T6 (0)) (',' (=< T6 (23)) (ackermann T5 T6 X6))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "type": "PlainIntegerConstant",
                                "value": "0"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T5",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T5",
                        "T6"
                    ],
                    "free": ["X6"],
                    "exprvars": ["T5"]
                }
            },
            "4898": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": ">"
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T5",
                        "T6"
                    ],
                    "free": ["X6"],
                    "exprvars": [
                        "T5",
                        "T6"
                    ]
                }
            },
            "5129": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(ackermann T11 T12 X6)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(ackermann T11 T12 X6)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T11",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T12",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T12",
                        "T11"
                    ],
                    "free": [
                        "X6",
                        "X18"
                    ],
                    "exprvars": [
                        "T5",
                        "T6",
                        "T12",
                        "T11"
                    ]
                }
            },
            "4756": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "type": "PlainIntegerConstant",
                                "value": "0"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T5",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": ">"
                        }]
                    },
                    "ground": [
                        "T5",
                        "T6"
                    ],
                    "free": ["X6"],
                    "exprvars": ["T5"]
                }
            },
            "4899": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(ackermann T5 T6 X6)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(ackermann T5 T6 X6)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(ackermann T5 T6 X6)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T5",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T6",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T5",
                        "T6"
                    ],
                    "free": ["X6"],
                    "exprvars": [
                        "T5",
                        "T6"
                    ]
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 3,
                "label": "CASE"
            },
            {
                "from": 3,
                "to": 5,
                "label": "ONLY EVAL with clause\nmain(X4, X5) :- ','(>=(X4, 0), ','(=<(X4, 3), ','(>=(X5, 0), ','(=<(X5, 23), ackermann(X4, X5, X6))))).\nand substitutionT1 -> T5,\nX4 -> T5,\nT2 -> T6,\nX5 -> T6"
            },
            {
                "from": 5,
                "to": 7,
                "label": "IS ERROR"
            },
            {
                "from": 5,
                "to": 4755,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 5,
                "to": 4756,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 4755,
                "to": 4884,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 4755,
                "to": 4885,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 4884,
                "to": 4886,
                "label": "IS ERROR"
            },
            {
                "from": 4884,
                "to": 4893,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 4884,
                "to": 4894,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 4893,
                "to": 4897,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 4893,
                "to": 4898,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 4897,
                "to": 4899,
                "label": "CASE"
            },
            {
                "from": 4899,
                "to": 4900,
                "label": "ONLY EVAL with clause\nackermann(X15, X16, X17) :- ','(=:=(X15, 0), ','(!_2, is(X17, +(X16, 1)))).\nand substitutionT5 -> T11,\nX15 -> T11,\nT6 -> T12,\nX16 -> T12,\nX6 -> X18,\nX17 -> X18"
            },
            {
                "from": 4900,
                "to": 5128,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 4900,
                "to": 5129,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 5128,
                "to": 5130,
                "label": "CUT"
            },
            {
                "from": 5129,
                "to": 5133,
                "label": "PARALLEL"
            },
            {
                "from": 5129,
                "to": 5134,
                "label": "PARALLEL"
            },
            {
                "from": 5130,
                "to": 5131,
                "label": "\nX18 -> T13"
            },
            {
                "from": 5131,
                "to": 5132,
                "label": "SUCCESS"
            },
            {
                "from": 5133,
                "to": 5135,
                "label": "ONLY EVAL with clause\nackermann(X37, X38, X39) :- ','(=:=(X38, 0), ','(!_2, ','(is(X40, -(X37, 1)), ackermann(X40, 1, X39)))).\nand substitutionT11 -> T22,\nX37 -> T22,\nT12 -> T23,\nX38 -> T23,\nX6 -> X41,\nX39 -> X41"
            },
            {
                "from": 5134,
                "to": 5148,
                "label": "ONLY EVAL with clause\nackermann(X54, X55, X56) :- ','(!_2, ','(is(X57, -(X55, 1)), ','(ackermann(X54, X57, X58), ','(is(X59, -(X54, 1)), ','(ackermann(X59, X58, X60), is(X56, X60)))))).\nand substitutionT11 -> T28,\nX54 -> T28,\nT12 -> T29,\nX55 -> T29,\nX6 -> X61,\nX56 -> X61"
            },
            {
                "from": 5148,
                "to": 5149,
                "label": "CUT"
            },
            {
                "from": 5149,
                "to": 5150,
                "label": "\nX57 -> T30"
            },
            {
                "from": 5150,
                "to": 5151,
                "label": "SPLIT 1"
            },
            {
                "from": 5150,
                "to": 5152,
                "label": "SPLIT 2\nnew knowledge:\nT28 is ground\nT30 is ground\nT33 is ground\nreplacements:X58 -> T33"
            },
            {
                "from": 5151,
                "to": 4897,
                "label": "INSTANCE with matching:\nT5 -> T28\nT6 -> T30\nX6 -> X58"
            },
            {
                "from": 5152,
                "to": 5318,
                "label": "IS ERROR"
            },
            {
                "from": 5152,
                "to": 5319,
                "label": "\nX59 -> T36"
            },
            {
                "from": 5319,
                "to": 5320,
                "label": "SPLIT 1"
            },
            {
                "from": 5319,
                "to": 5321,
                "label": "SPLIT 2\nnew knowledge:\nT36 is ground\nT33 is ground\nT39 is ground\nreplacements:X60 -> T39"
            },
            {
                "from": 5320,
                "to": 4897,
                "label": "INSTANCE with matching:\nT5 -> T36\nT6 -> T33\nX6 -> X60"
            },
            {
                "from": 5321,
                "to": 5709,
                "label": "IS ERROR"
            },
            {
                "from": 5321,
                "to": 5710,
                "label": "\nX61 -> T42"
            },
            {
                "from": 5710,
                "to": 5711,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(242)
Obligation:
Triples:

ackermannA(X1, X2, X3) :- ackermannA(X1, X4, X5).
ackermannA(X1, X2, X3) :- ','(ackermanncA(X1, X4, X5), ackermannA(X6, X5, X7)).
mainB(X1, X2) :- ackermannA(X1, X2, X3).

Clauses:

ackermanncA(X1, X2, X3).
ackermanncA(X1, X2, X3) :- ','(ackermanncA(X1, X4, X5), ackermanncA(X6, X5, X7)).

Afs:

mainB(x1, x2)  =  mainB(x1, x2)


----------------------------------------

(243) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

mainB_in_2: (b,b)

ackermannA_in_3: (b,b,f) (b,f,f) (f,f,f)

ackermanncA_in_3: (b,f,f) (f,f,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   MAINB_IN_GG(X1, X2) -> U4_GG(X1, X2, ackermannA_in_gga(X1, X2, X3))
   MAINB_IN_GG(X1, X2) -> ACKERMANNA_IN_GGA(X1, X2, X3)
   ACKERMANNA_IN_GGA(X1, X2, X3) -> U1_GGA(X1, X2, X3, ackermannA_in_gaa(X1, X4, X5))
   ACKERMANNA_IN_GGA(X1, X2, X3) -> ACKERMANNA_IN_GAA(X1, X4, X5)
   ACKERMANNA_IN_GAA(X1, X2, X3) -> U1_GAA(X1, X2, X3, ackermannA_in_gaa(X1, X4, X5))
   ACKERMANNA_IN_GAA(X1, X2, X3) -> ACKERMANNA_IN_GAA(X1, X4, X5)
   ACKERMANNA_IN_GAA(X1, X2, X3) -> U2_GAA(X1, X2, X3, ackermanncA_in_gaa(X1, X4, X5))
   U2_GAA(X1, X2, X3, ackermanncA_out_gaa(X1, X4, X5)) -> U3_GAA(X1, X2, X3, ackermannA_in_aaa(X6, X5, X7))
   U2_GAA(X1, X2, X3, ackermanncA_out_gaa(X1, X4, X5)) -> ACKERMANNA_IN_AAA(X6, X5, X7)
   ACKERMANNA_IN_AAA(X1, X2, X3) -> U1_AAA(X1, X2, X3, ackermannA_in_aaa(X1, X4, X5))
   ACKERMANNA_IN_AAA(X1, X2, X3) -> ACKERMANNA_IN_AAA(X1, X4, X5)
   ACKERMANNA_IN_AAA(X1, X2, X3) -> U2_AAA(X1, X2, X3, ackermanncA_in_aaa(X1, X4, X5))
   U2_AAA(X1, X2, X3, ackermanncA_out_aaa(X1, X4, X5)) -> U3_AAA(X1, X2, X3, ackermannA_in_aaa(X6, X5, X7))
   U2_AAA(X1, X2, X3, ackermanncA_out_aaa(X1, X4, X5)) -> ACKERMANNA_IN_AAA(X6, X5, X7)
   ACKERMANNA_IN_GGA(X1, X2, X3) -> U2_GGA(X1, X2, X3, ackermanncA_in_gaa(X1, X4, X5))
   U2_GGA(X1, X2, X3, ackermanncA_out_gaa(X1, X4, X5)) -> U3_GGA(X1, X2, X3, ackermannA_in_aaa(X6, X5, X7))
   U2_GGA(X1, X2, X3, ackermanncA_out_gaa(X1, X4, X5)) -> ACKERMANNA_IN_AAA(X6, X5, X7)

The TRS R consists of the following rules:

   ackermanncA_in_gaa(X1, X2, X3) -> ackermanncA_out_gaa(X1, X2, X3)
   ackermanncA_in_gaa(X1, X2, X3) -> U6_gaa(X1, X2, X3, ackermanncA_in_gaa(X1, X4, X5))
   U6_gaa(X1, X2, X3, ackermanncA_out_gaa(X1, X4, X5)) -> U7_gaa(X1, X2, X3, X4, X5, ackermanncA_in_aaa(X6, X5, X7))
   ackermanncA_in_aaa(X1, X2, X3) -> ackermanncA_out_aaa(X1, X2, X3)
   ackermanncA_in_aaa(X1, X2, X3) -> U6_aaa(X1, X2, X3, ackermanncA_in_aaa(X1, X4, X5))
   U6_aaa(X1, X2, X3, ackermanncA_out_aaa(X1, X4, X5)) -> U7_aaa(X1, X2, X3, X4, X5, ackermanncA_in_aaa(X6, X5, X7))
   U7_aaa(X1, X2, X3, X4, X5, ackermanncA_out_aaa(X6, X5, X7)) -> ackermanncA_out_aaa(X1, X2, X3)
   U7_gaa(X1, X2, X3, X4, X5, ackermanncA_out_aaa(X6, X5, X7)) -> ackermanncA_out_gaa(X1, X2, X3)

The argument filtering Pi contains the following mapping:
ackermannA_in_gga(x1, x2, x3)  =  ackermannA_in_gga(x1, x2)

ackermannA_in_gaa(x1, x2, x3)  =  ackermannA_in_gaa(x1)

ackermanncA_in_gaa(x1, x2, x3)  =  ackermanncA_in_gaa(x1)

ackermanncA_out_gaa(x1, x2, x3)  =  ackermanncA_out_gaa(x1)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4, x5, x6)  =  U7_gaa(x1, x6)

ackermanncA_in_aaa(x1, x2, x3)  =  ackermanncA_in_aaa

ackermanncA_out_aaa(x1, x2, x3)  =  ackermanncA_out_aaa

U6_aaa(x1, x2, x3, x4)  =  U6_aaa(x4)

U7_aaa(x1, x2, x3, x4, x5, x6)  =  U7_aaa(x6)

ackermannA_in_aaa(x1, x2, x3)  =  ackermannA_in_aaa

MAINB_IN_GG(x1, x2)  =  MAINB_IN_GG(x1, x2)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)

ACKERMANNA_IN_GGA(x1, x2, x3)  =  ACKERMANNA_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4)  =  U1_GGA(x1, x2, x4)

ACKERMANNA_IN_GAA(x1, x2, x3)  =  ACKERMANNA_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4)  =  U1_GAA(x1, x4)

U2_GAA(x1, x2, x3, x4)  =  U2_GAA(x1, x4)

U3_GAA(x1, x2, x3, x4)  =  U3_GAA(x1, x4)

ACKERMANNA_IN_AAA(x1, x2, x3)  =  ACKERMANNA_IN_AAA

U1_AAA(x1, x2, x3, x4)  =  U1_AAA(x4)

U2_AAA(x1, x2, x3, x4)  =  U2_AAA(x4)

U3_AAA(x1, x2, x3, x4)  =  U3_AAA(x4)

U2_GGA(x1, x2, x3, x4)  =  U2_GGA(x1, x2, x4)

U3_GGA(x1, x2, x3, x4)  =  U3_GGA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(244)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MAINB_IN_GG(X1, X2) -> U4_GG(X1, X2, ackermannA_in_gga(X1, X2, X3))
   MAINB_IN_GG(X1, X2) -> ACKERMANNA_IN_GGA(X1, X2, X3)
   ACKERMANNA_IN_GGA(X1, X2, X3) -> U1_GGA(X1, X2, X3, ackermannA_in_gaa(X1, X4, X5))
   ACKERMANNA_IN_GGA(X1, X2, X3) -> ACKERMANNA_IN_GAA(X1, X4, X5)
   ACKERMANNA_IN_GAA(X1, X2, X3) -> U1_GAA(X1, X2, X3, ackermannA_in_gaa(X1, X4, X5))
   ACKERMANNA_IN_GAA(X1, X2, X3) -> ACKERMANNA_IN_GAA(X1, X4, X5)
   ACKERMANNA_IN_GAA(X1, X2, X3) -> U2_GAA(X1, X2, X3, ackermanncA_in_gaa(X1, X4, X5))
   U2_GAA(X1, X2, X3, ackermanncA_out_gaa(X1, X4, X5)) -> U3_GAA(X1, X2, X3, ackermannA_in_aaa(X6, X5, X7))
   U2_GAA(X1, X2, X3, ackermanncA_out_gaa(X1, X4, X5)) -> ACKERMANNA_IN_AAA(X6, X5, X7)
   ACKERMANNA_IN_AAA(X1, X2, X3) -> U1_AAA(X1, X2, X3, ackermannA_in_aaa(X1, X4, X5))
   ACKERMANNA_IN_AAA(X1, X2, X3) -> ACKERMANNA_IN_AAA(X1, X4, X5)
   ACKERMANNA_IN_AAA(X1, X2, X3) -> U2_AAA(X1, X2, X3, ackermanncA_in_aaa(X1, X4, X5))
   U2_AAA(X1, X2, X3, ackermanncA_out_aaa(X1, X4, X5)) -> U3_AAA(X1, X2, X3, ackermannA_in_aaa(X6, X5, X7))
   U2_AAA(X1, X2, X3, ackermanncA_out_aaa(X1, X4, X5)) -> ACKERMANNA_IN_AAA(X6, X5, X7)
   ACKERMANNA_IN_GGA(X1, X2, X3) -> U2_GGA(X1, X2, X3, ackermanncA_in_gaa(X1, X4, X5))
   U2_GGA(X1, X2, X3, ackermanncA_out_gaa(X1, X4, X5)) -> U3_GGA(X1, X2, X3, ackermannA_in_aaa(X6, X5, X7))
   U2_GGA(X1, X2, X3, ackermanncA_out_gaa(X1, X4, X5)) -> ACKERMANNA_IN_AAA(X6, X5, X7)

The TRS R consists of the following rules:

   ackermanncA_in_gaa(X1, X2, X3) -> ackermanncA_out_gaa(X1, X2, X3)
   ackermanncA_in_gaa(X1, X2, X3) -> U6_gaa(X1, X2, X3, ackermanncA_in_gaa(X1, X4, X5))
   U6_gaa(X1, X2, X3, ackermanncA_out_gaa(X1, X4, X5)) -> U7_gaa(X1, X2, X3, X4, X5, ackermanncA_in_aaa(X6, X5, X7))
   ackermanncA_in_aaa(X1, X2, X3) -> ackermanncA_out_aaa(X1, X2, X3)
   ackermanncA_in_aaa(X1, X2, X3) -> U6_aaa(X1, X2, X3, ackermanncA_in_aaa(X1, X4, X5))
   U6_aaa(X1, X2, X3, ackermanncA_out_aaa(X1, X4, X5)) -> U7_aaa(X1, X2, X3, X4, X5, ackermanncA_in_aaa(X6, X5, X7))
   U7_aaa(X1, X2, X3, X4, X5, ackermanncA_out_aaa(X6, X5, X7)) -> ackermanncA_out_aaa(X1, X2, X3)
   U7_gaa(X1, X2, X3, X4, X5, ackermanncA_out_aaa(X6, X5, X7)) -> ackermanncA_out_gaa(X1, X2, X3)

The argument filtering Pi contains the following mapping:
ackermannA_in_gga(x1, x2, x3)  =  ackermannA_in_gga(x1, x2)

ackermannA_in_gaa(x1, x2, x3)  =  ackermannA_in_gaa(x1)

ackermanncA_in_gaa(x1, x2, x3)  =  ackermanncA_in_gaa(x1)

ackermanncA_out_gaa(x1, x2, x3)  =  ackermanncA_out_gaa(x1)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4, x5, x6)  =  U7_gaa(x1, x6)

ackermanncA_in_aaa(x1, x2, x3)  =  ackermanncA_in_aaa

ackermanncA_out_aaa(x1, x2, x3)  =  ackermanncA_out_aaa

U6_aaa(x1, x2, x3, x4)  =  U6_aaa(x4)

U7_aaa(x1, x2, x3, x4, x5, x6)  =  U7_aaa(x6)

ackermannA_in_aaa(x1, x2, x3)  =  ackermannA_in_aaa

MAINB_IN_GG(x1, x2)  =  MAINB_IN_GG(x1, x2)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)

ACKERMANNA_IN_GGA(x1, x2, x3)  =  ACKERMANNA_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4)  =  U1_GGA(x1, x2, x4)

ACKERMANNA_IN_GAA(x1, x2, x3)  =  ACKERMANNA_IN_GAA(x1)

U1_GAA(x1, x2, x3, x4)  =  U1_GAA(x1, x4)

U2_GAA(x1, x2, x3, x4)  =  U2_GAA(x1, x4)

U3_GAA(x1, x2, x3, x4)  =  U3_GAA(x1, x4)

ACKERMANNA_IN_AAA(x1, x2, x3)  =  ACKERMANNA_IN_AAA

U1_AAA(x1, x2, x3, x4)  =  U1_AAA(x4)

U2_AAA(x1, x2, x3, x4)  =  U2_AAA(x4)

U3_AAA(x1, x2, x3, x4)  =  U3_AAA(x4)

U2_GGA(x1, x2, x3, x4)  =  U2_GGA(x1, x2, x4)

U3_GGA(x1, x2, x3, x4)  =  U3_GGA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(245) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 13 less nodes.
----------------------------------------

(246)
Complex Obligation (AND)

----------------------------------------

(247)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ACKERMANNA_IN_AAA(X1, X2, X3) -> U2_AAA(X1, X2, X3, ackermanncA_in_aaa(X1, X4, X5))
   U2_AAA(X1, X2, X3, ackermanncA_out_aaa(X1, X4, X5)) -> ACKERMANNA_IN_AAA(X6, X5, X7)
   ACKERMANNA_IN_AAA(X1, X2, X3) -> ACKERMANNA_IN_AAA(X1, X4, X5)

The TRS R consists of the following rules:

   ackermanncA_in_gaa(X1, X2, X3) -> ackermanncA_out_gaa(X1, X2, X3)
   ackermanncA_in_gaa(X1, X2, X3) -> U6_gaa(X1, X2, X3, ackermanncA_in_gaa(X1, X4, X5))
   U6_gaa(X1, X2, X3, ackermanncA_out_gaa(X1, X4, X5)) -> U7_gaa(X1, X2, X3, X4, X5, ackermanncA_in_aaa(X6, X5, X7))
   ackermanncA_in_aaa(X1, X2, X3) -> ackermanncA_out_aaa(X1, X2, X3)
   ackermanncA_in_aaa(X1, X2, X3) -> U6_aaa(X1, X2, X3, ackermanncA_in_aaa(X1, X4, X5))
   U6_aaa(X1, X2, X3, ackermanncA_out_aaa(X1, X4, X5)) -> U7_aaa(X1, X2, X3, X4, X5, ackermanncA_in_aaa(X6, X5, X7))
   U7_aaa(X1, X2, X3, X4, X5, ackermanncA_out_aaa(X6, X5, X7)) -> ackermanncA_out_aaa(X1, X2, X3)
   U7_gaa(X1, X2, X3, X4, X5, ackermanncA_out_aaa(X6, X5, X7)) -> ackermanncA_out_gaa(X1, X2, X3)

The argument filtering Pi contains the following mapping:
ackermanncA_in_gaa(x1, x2, x3)  =  ackermanncA_in_gaa(x1)

ackermanncA_out_gaa(x1, x2, x3)  =  ackermanncA_out_gaa(x1)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4, x5, x6)  =  U7_gaa(x1, x6)

ackermanncA_in_aaa(x1, x2, x3)  =  ackermanncA_in_aaa

ackermanncA_out_aaa(x1, x2, x3)  =  ackermanncA_out_aaa

U6_aaa(x1, x2, x3, x4)  =  U6_aaa(x4)

U7_aaa(x1, x2, x3, x4, x5, x6)  =  U7_aaa(x6)

ACKERMANNA_IN_AAA(x1, x2, x3)  =  ACKERMANNA_IN_AAA

U2_AAA(x1, x2, x3, x4)  =  U2_AAA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(248) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(249)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ACKERMANNA_IN_AAA(X1, X2, X3) -> U2_AAA(X1, X2, X3, ackermanncA_in_aaa(X1, X4, X5))
   U2_AAA(X1, X2, X3, ackermanncA_out_aaa(X1, X4, X5)) -> ACKERMANNA_IN_AAA(X6, X5, X7)
   ACKERMANNA_IN_AAA(X1, X2, X3) -> ACKERMANNA_IN_AAA(X1, X4, X5)

The TRS R consists of the following rules:

   ackermanncA_in_aaa(X1, X2, X3) -> ackermanncA_out_aaa(X1, X2, X3)
   ackermanncA_in_aaa(X1, X2, X3) -> U6_aaa(X1, X2, X3, ackermanncA_in_aaa(X1, X4, X5))
   U6_aaa(X1, X2, X3, ackermanncA_out_aaa(X1, X4, X5)) -> U7_aaa(X1, X2, X3, X4, X5, ackermanncA_in_aaa(X6, X5, X7))
   U7_aaa(X1, X2, X3, X4, X5, ackermanncA_out_aaa(X6, X5, X7)) -> ackermanncA_out_aaa(X1, X2, X3)

The argument filtering Pi contains the following mapping:
ackermanncA_in_aaa(x1, x2, x3)  =  ackermanncA_in_aaa

ackermanncA_out_aaa(x1, x2, x3)  =  ackermanncA_out_aaa

U6_aaa(x1, x2, x3, x4)  =  U6_aaa(x4)

U7_aaa(x1, x2, x3, x4, x5, x6)  =  U7_aaa(x6)

ACKERMANNA_IN_AAA(x1, x2, x3)  =  ACKERMANNA_IN_AAA

U2_AAA(x1, x2, x3, x4)  =  U2_AAA(x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(250) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(251)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ACKERMANNA_IN_AAA -> U2_AAA(ackermanncA_in_aaa)
   U2_AAA(ackermanncA_out_aaa) -> ACKERMANNA_IN_AAA
   ACKERMANNA_IN_AAA -> ACKERMANNA_IN_AAA

The TRS R consists of the following rules:

   ackermanncA_in_aaa -> ackermanncA_out_aaa
   ackermanncA_in_aaa -> U6_aaa(ackermanncA_in_aaa)
   U6_aaa(ackermanncA_out_aaa) -> U7_aaa(ackermanncA_in_aaa)
   U7_aaa(ackermanncA_out_aaa) -> ackermanncA_out_aaa

The set Q consists of the following terms:

   ackermanncA_in_aaa
   U6_aaa(x0)
   U7_aaa(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(252)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ACKERMANNA_IN_GAA(X1, X2, X3) -> ACKERMANNA_IN_GAA(X1, X4, X5)

The TRS R consists of the following rules:

   ackermanncA_in_gaa(X1, X2, X3) -> ackermanncA_out_gaa(X1, X2, X3)
   ackermanncA_in_gaa(X1, X2, X3) -> U6_gaa(X1, X2, X3, ackermanncA_in_gaa(X1, X4, X5))
   U6_gaa(X1, X2, X3, ackermanncA_out_gaa(X1, X4, X5)) -> U7_gaa(X1, X2, X3, X4, X5, ackermanncA_in_aaa(X6, X5, X7))
   ackermanncA_in_aaa(X1, X2, X3) -> ackermanncA_out_aaa(X1, X2, X3)
   ackermanncA_in_aaa(X1, X2, X3) -> U6_aaa(X1, X2, X3, ackermanncA_in_aaa(X1, X4, X5))
   U6_aaa(X1, X2, X3, ackermanncA_out_aaa(X1, X4, X5)) -> U7_aaa(X1, X2, X3, X4, X5, ackermanncA_in_aaa(X6, X5, X7))
   U7_aaa(X1, X2, X3, X4, X5, ackermanncA_out_aaa(X6, X5, X7)) -> ackermanncA_out_aaa(X1, X2, X3)
   U7_gaa(X1, X2, X3, X4, X5, ackermanncA_out_aaa(X6, X5, X7)) -> ackermanncA_out_gaa(X1, X2, X3)

The argument filtering Pi contains the following mapping:
ackermanncA_in_gaa(x1, x2, x3)  =  ackermanncA_in_gaa(x1)

ackermanncA_out_gaa(x1, x2, x3)  =  ackermanncA_out_gaa(x1)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4, x5, x6)  =  U7_gaa(x1, x6)

ackermanncA_in_aaa(x1, x2, x3)  =  ackermanncA_in_aaa

ackermanncA_out_aaa(x1, x2, x3)  =  ackermanncA_out_aaa

U6_aaa(x1, x2, x3, x4)  =  U6_aaa(x4)

U7_aaa(x1, x2, x3, x4, x5, x6)  =  U7_aaa(x6)

ACKERMANNA_IN_GAA(x1, x2, x3)  =  ACKERMANNA_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(253) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(254)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ACKERMANNA_IN_GAA(X1, X2, X3) -> ACKERMANNA_IN_GAA(X1, X4, X5)

R is empty.
The argument filtering Pi contains the following mapping:
ACKERMANNA_IN_GAA(x1, x2, x3)  =  ACKERMANNA_IN_GAA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(255) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 9,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(main M N)",
                "(',' (>= M (0)) (',' (=< M (3)) (',' (>= N (0)) (',' (=< N (23)) (ackermann M N X1)))))"
            ],
            [
                "(ackermann M N Ret)",
                "(',' (=:= M (0)) (',' (!) (is Ret (+ N (1)))))"
            ],
            [
                "(ackermann M N Ret)",
                "(',' (=:= N (0)) (',' (!) (',' (is M1 (- M (1))) (ackermann M1 (1) Ret))))"
            ],
            [
                "(ackermann M N Ret)",
                "(',' (!) (',' (is N1 (- N (1))) (',' (ackermann M N1 Ret1) (',' (is M1 (- M (1))) (',' (ackermann M1 Ret1 Ret2) (is Ret Ret2))))))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "5241": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (!_2) (is X25 (+ T16 (1))))"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(ackermann T15 T16 X9)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(ackermann T15 T16 X9)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T16",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T16",
                        "T15"
                    ],
                    "free": [
                        "X9",
                        "X25"
                    ],
                    "exprvars": [
                        "T7",
                        "T8",
                        "T16",
                        "T15"
                    ]
                }
            },
            "5143": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(ackermann T7 T8 X9)"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(ackermann T7 T8 X9)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(ackermann T7 T8 X9)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T7",
                        "T8"
                    ],
                    "free": ["X9"],
                    "exprvars": [
                        "T7",
                        "T8"
                    ]
                }
            },
            "5242": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(ackermann T15 T16 X9)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(ackermann T15 T16 X9)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T16",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T16",
                        "T15"
                    ],
                    "free": [
                        "X9",
                        "X25"
                    ],
                    "exprvars": [
                        "T7",
                        "T8",
                        "T16",
                        "T15"
                    ]
                }
            },
            "5243": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(is X25 (+ T16 (1)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T16",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": ["T16"],
                    "free": ["X25"],
                    "exprvars": [
                        "T7",
                        "T8",
                        "T16",
                        "T15"
                    ]
                }
            },
            "5980": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5244": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T17",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T16",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "+"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T16",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T17",
                        "T16"
                    ],
                    "free": ["X25"],
                    "exprvars": [
                        "T7",
                        "T17",
                        "T8",
                        "T16",
                        "T15"
                    ]
                }
            },
            "5981": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T46",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T43",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [
                        "T46",
                        "T43"
                    ],
                    "free": ["X68"],
                    "exprvars": [
                        "T46",
                        "T43"
                    ]
                }
            },
            "5146": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (=:= T15 (0)) (',' (!_2) (is X25 (+ T16 (1)))))"
                    },
                    {
                        "clause": 2,
                        "scope": 2,
                        "term": "(ackermann T15 T16 X9)"
                    },
                    {
                        "clause": 3,
                        "scope": 2,
                        "term": "(ackermann T15 T16 X9)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T16",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T15",
                        "T16"
                    ],
                    "free": [
                        "X9",
                        "X25"
                    ],
                    "exprvars": [
                        "T7",
                        "T8",
                        "T16",
                        "T15"
                    ]
                }
            },
            "5245": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T17",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T16",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "+"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T16",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T7",
                        "T17",
                        "T8",
                        "T16",
                        "T15"
                    ]
                }
            },
            "5322": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (!_2) (',' (is X64 (- T33 (1))) (',' (ackermann T32 X64 X65) (',' (is X66 (- T32 (1))) (',' (ackermann X66 X65 X67) (is X68 X67))))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T16",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T32",
                        "T33"
                    ],
                    "free": [
                        "X68",
                        "X64",
                        "X65",
                        "X66",
                        "X67"
                    ],
                    "exprvars": [
                        "T7",
                        "T33",
                        "T8",
                        "T16",
                        "T32",
                        "T15"
                    ]
                }
            },
            "5982": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T46",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T43",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T46",
                        "T43"
                    ]
                }
            },
            "5246": {
                "goal": [{
                    "clause": 2,
                    "scope": 2,
                    "term": "(ackermann T15 T16 X9)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T16",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T16",
                        "T15"
                    ],
                    "free": ["X9"],
                    "exprvars": [
                        "T7",
                        "T8",
                        "T16",
                        "T15"
                    ]
                }
            },
            "5323": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (is X64 (- T33 (1))) (',' (ackermann T32 X64 X65) (',' (is X66 (- T32 (1))) (',' (ackermann X66 X65 X67) (is X68 X67)))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T16",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T32",
                        "T33"
                    ],
                    "free": [
                        "X68",
                        "X64",
                        "X65",
                        "X66",
                        "X67"
                    ],
                    "exprvars": [
                        "T7",
                        "T33",
                        "T8",
                        "T16",
                        "T32",
                        "T15"
                    ]
                }
            },
            "type": "Nodes",
            "4905": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=< T8 (23)) (ackermann T7 T8 X9))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T7",
                        "T8"
                    ],
                    "free": ["X9"],
                    "exprvars": [
                        "T7",
                        "T8"
                    ]
                }
            },
            "4906": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": ">"
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T7",
                        "T8"
                    ],
                    "free": ["X9"],
                    "exprvars": [
                        "T7",
                        "T8"
                    ]
                }
            },
            "5137": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": ">"
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T7",
                        "T8"
                    ],
                    "free": ["X9"],
                    "exprvars": [
                        "T7",
                        "T8"
                    ]
                }
            },
            "4887": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (>= T8 (0)) (',' (=< T8 (23)) (ackermann T7 T8 X9)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T7",
                        "T8"
                    ],
                    "free": ["X9"],
                    "exprvars": ["T7"]
                }
            },
            "5712": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4888": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": ">"
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T7",
                        "T8"
                    ],
                    "free": ["X9"],
                    "exprvars": ["T7"]
                }
            },
            "5713": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (ackermann T40 T37 X67) (is X68 X67))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T40",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T32",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [
                        "T40",
                        "T32",
                        "T37"
                    ],
                    "free": [
                        "X68",
                        "X66",
                        "X67"
                    ],
                    "exprvars": [
                        "T40",
                        "T32"
                    ]
                }
            },
            "4889": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5714": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(ackermann T40 T37 X67)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T40",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T32",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [
                        "T40",
                        "T37"
                    ],
                    "free": ["X67"],
                    "exprvars": [
                        "T40",
                        "T32"
                    ]
                }
            },
            "5715": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(is X68 T43)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T43"],
                    "free": ["X68"],
                    "exprvars": []
                }
            },
            "10": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(main T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T1",
                        "T2"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "11": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (>= T7 (0)) (',' (=< T7 (3)) (',' (>= T8 (0)) (',' (=< T8 (23)) (ackermann T7 T8 X9)))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T7",
                        "T8"
                    ],
                    "free": ["X9"],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5136": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(ackermann T7 T8 X9)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T7",
                        "T8"
                    ],
                    "free": ["X9"],
                    "exprvars": [
                        "T7",
                        "T8"
                    ]
                }
            },
            "5247": {
                "goal": [{
                    "clause": 3,
                    "scope": 2,
                    "term": "(ackermann T15 T16 X9)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T16",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T16",
                        "T15"
                    ],
                    "free": ["X9"],
                    "exprvars": [
                        "T7",
                        "T8",
                        "T16",
                        "T15"
                    ]
                }
            },
            "5324": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (ackermann T32 T34 X65) (',' (is X66 (- T32 (1))) (',' (ackermann X66 X65 X67) (is X68 X67))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T34",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T33",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T16",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T34",
                        "T33",
                        "T32"
                    ],
                    "free": [
                        "X68",
                        "X64",
                        "X65",
                        "X66",
                        "X67"
                    ],
                    "exprvars": [
                        "T34",
                        "T7",
                        "T33",
                        "T8",
                        "T16",
                        "T32",
                        "T15"
                    ]
                }
            },
            "9": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(main T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T1",
                        "T2"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "5248": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=:= T27 (0)) (',' (!_2) (',' (is X47 (- T26 (1))) (ackermann X47 (1) X48))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T16",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T26",
                        "T27"
                    ],
                    "free": [
                        "X48",
                        "X47"
                    ],
                    "exprvars": [
                        "T7",
                        "T8",
                        "T16",
                        "T27",
                        "T15",
                        "T26"
                    ]
                }
            },
            "5325": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(ackermann T32 T34 X65)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T34",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T33",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "operation": "!="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "0"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T15",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T16",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T7",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "3"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T8",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "23"
                                },
                                "operation": "<="
                            }
                        ]
                    },
                    "ground": [
                        "T34",
                        "T32"
                    ],
                    "free": ["X65"],
                    "exprvars": [
                        "T34",
                        "T7",
                        "T33",
                        "T8",
                        "T16",
                        "T32",
                        "T15"
                    ]
                }
            },
            "5326": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (is X66 (- T32 (1))) (',' (ackermann X66 T37 X67) (is X68 X67)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T32",
                        "T37"
                    ],
                    "free": [
                        "X68",
                        "X66",
                        "X67"
                    ],
                    "exprvars": []
                }
            },
            "4757": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (=< T7 (3)) (',' (>= T8 (0)) (',' (=< T8 (23)) (ackermann T7 T8 X9))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "type": "PlainIntegerConstant",
                                "value": "0"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T7",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<="
                        }]
                    },
                    "ground": [
                        "T7",
                        "T8"
                    ],
                    "free": ["X9"],
                    "exprvars": ["T7"]
                }
            },
            "4758": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "type": "PlainIntegerConstant",
                                "value": "0"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T7",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": ">"
                        }]
                    },
                    "ground": [
                        "T7",
                        "T8"
                    ],
                    "free": ["X9"],
                    "exprvars": ["T7"]
                }
            }
        },
        "edges": [
            {
                "from": 9,
                "to": 10,
                "label": "CASE"
            },
            {
                "from": 10,
                "to": 11,
                "label": "ONLY EVAL with clause\nmain(X7, X8) :- ','(>=(X7, 0), ','(=<(X7, 3), ','(>=(X8, 0), ','(=<(X8, 23), ackermann(X7, X8, X9))))).\nand substitutionT1 -> T7,\nX7 -> T7,\nT2 -> T8,\nX8 -> T8"
            },
            {
                "from": 11,
                "to": 12,
                "label": "IS ERROR"
            },
            {
                "from": 11,
                "to": 4757,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 11,
                "to": 4758,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 4757,
                "to": 4887,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 4757,
                "to": 4888,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 4887,
                "to": 4889,
                "label": "IS ERROR"
            },
            {
                "from": 4887,
                "to": 4905,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 4887,
                "to": 4906,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 4905,
                "to": 5136,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 4905,
                "to": 5137,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 5136,
                "to": 5143,
                "label": "CASE"
            },
            {
                "from": 5143,
                "to": 5146,
                "label": "ONLY EVAL with clause\nackermann(X22, X23, X24) :- ','(=:=(X22, 0), ','(!_2, is(X24, +(X23, 1)))).\nand substitutionT7 -> T15,\nX22 -> T15,\nT8 -> T16,\nX23 -> T16,\nX9 -> X25,\nX24 -> X25"
            },
            {
                "from": 5146,
                "to": 5241,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 5146,
                "to": 5242,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 5241,
                "to": 5243,
                "label": "CUT"
            },
            {
                "from": 5242,
                "to": 5246,
                "label": "PARALLEL"
            },
            {
                "from": 5242,
                "to": 5247,
                "label": "PARALLEL"
            },
            {
                "from": 5243,
                "to": 5244,
                "label": "\nX25 -> T17"
            },
            {
                "from": 5244,
                "to": 5245,
                "label": "SUCCESS"
            },
            {
                "from": 5246,
                "to": 5248,
                "label": "ONLY EVAL with clause\nackermann(X44, X45, X46) :- ','(=:=(X45, 0), ','(!_2, ','(is(X47, -(X44, 1)), ackermann(X47, 1, X46)))).\nand substitutionT15 -> T26,\nX44 -> T26,\nT16 -> T27,\nX45 -> T27,\nX9 -> X48,\nX46 -> X48"
            },
            {
                "from": 5247,
                "to": 5322,
                "label": "ONLY EVAL with clause\nackermann(X61, X62, X63) :- ','(!_2, ','(is(X64, -(X62, 1)), ','(ackermann(X61, X64, X65), ','(is(X66, -(X61, 1)), ','(ackermann(X66, X65, X67), is(X63, X67)))))).\nand substitutionT15 -> T32,\nX61 -> T32,\nT16 -> T33,\nX62 -> T33,\nX9 -> X68,\nX63 -> X68"
            },
            {
                "from": 5322,
                "to": 5323,
                "label": "CUT"
            },
            {
                "from": 5323,
                "to": 5324,
                "label": "\nX64 -> T34"
            },
            {
                "from": 5324,
                "to": 5325,
                "label": "SPLIT 1"
            },
            {
                "from": 5324,
                "to": 5326,
                "label": "SPLIT 2\nnew knowledge:\nT32 is ground\nT34 is ground\nT37 is ground\nreplacements:X65 -> T37"
            },
            {
                "from": 5325,
                "to": 5136,
                "label": "INSTANCE with matching:\nT7 -> T32\nT8 -> T34\nX9 -> X65"
            },
            {
                "from": 5326,
                "to": 5712,
                "label": "IS ERROR"
            },
            {
                "from": 5326,
                "to": 5713,
                "label": "\nX66 -> T40"
            },
            {
                "from": 5713,
                "to": 5714,
                "label": "SPLIT 1"
            },
            {
                "from": 5713,
                "to": 5715,
                "label": "SPLIT 2\nnew knowledge:\nT40 is ground\nT37 is ground\nT43 is ground\nreplacements:X67 -> T43"
            },
            {
                "from": 5714,
                "to": 5136,
                "label": "INSTANCE with matching:\nT7 -> T40\nT8 -> T37\nX9 -> X67"
            },
            {
                "from": 5715,
                "to": 5980,
                "label": "IS ERROR"
            },
            {
                "from": 5715,
                "to": 5981,
                "label": "\nX68 -> T46"
            },
            {
                "from": 5981,
                "to": 5982,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(256)
Obligation:
Rules:
f5136_out(T40, T37) -> f5714_out(T40, T37) :|: TRUE
f5714_in(x, x1) -> f5136_in(x, x1) :|: TRUE
f5322_out(T33, T32) -> f5247_out(T32, T33) :|: TRUE
f5247_in(x2, x3) -> f5322_in(x3, x2) :|: TRUE
f5324_in(x4, x5, x6) -> f5325_in(x4, x5) :|: TRUE
f5325_out(x7, x8) -> f5326_in(x7, x9) :|: TRUE
f5326_out(x10, x11) -> f5324_out(x10, x12, x13) :|: TRUE
f5715_in(T43) -> f5981_in(T46, T43) :|: T46 = T43
f5980_out -> f5715_out(x14) :|: TRUE
f5715_in(x15) -> f5980_in :|: TRUE
f5981_out(x16, x17) -> f5715_out(x17) :|: TRUE
f5323_out(x18, x19) -> f5322_out(x18, x19) :|: TRUE
f5322_in(x20, x21) -> f5323_in(x20, x21) :|: TRUE
f5246_out(T15, T16) -> f5242_out(T15, T16) :|: TRUE
f5247_out(x22, x23) -> f5242_out(x22, x23) :|: TRUE
f5242_in(x24, x25) -> f5246_in(x24, x25) :|: TRUE
f5242_in(x26, x27) -> f5247_in(x26, x27) :|: TRUE
f5325_in(x28, x29) -> f5136_in(x28, x29) :|: TRUE
f5136_out(x30, x31) -> f5325_out(x30, x31) :|: TRUE
f5714_out(x32, x33) -> f5715_in(x34) :|: TRUE
f5715_out(x35) -> f5713_out(x36, x37, x38) :|: TRUE
f5713_in(x39, x40, x41) -> f5714_in(x39, x40) :|: TRUE
f5713_out(x42, x43, x44) -> f5326_out(x44, x43) :|: TRUE
f5326_in(x45, x46) -> f5713_in(x47, x46, x45) :|: x47 = x45 - 1
f5326_in(x48, x49) -> f5712_in :|: TRUE
f5712_out -> f5326_out(x50, x51) :|: TRUE
f5136_in(T7, T8) -> f5143_in(T7, T8) :|: TRUE
f5143_out(x52, x53) -> f5136_out(x52, x53) :|: TRUE
f5324_out(x54, x55, x56) -> f5323_out(x56, x54) :|: TRUE
f5323_in(x57, x58) -> f5324_in(x58, x59, x57) :|: x59 = x57 - 1
f5241_out(x60, x61) -> f5146_out(x61, x60) :|: x61 = 0
f5242_out(x62, x63) -> f5146_out(x62, x63) :|: !(x62 = 0)
f5146_in(x64, x65) -> f5241_in(x65, x64) :|: x64 = 0
f5146_in(x66, x67) -> f5242_in(x66, x67) :|: !(x66 = 0)
f5146_out(x68, x69) -> f5143_out(x68, x69) :|: TRUE
f5143_in(x70, x71) -> f5146_in(x70, x71) :|: TRUE
f5981_in(x72, x73) -> f5981_out(x72, x73) :|: TRUE
f10_out(T1, T2) -> f9_out(T1, T2) :|: TRUE
f9_in(x74, x75) -> f10_in(x74, x75) :|: TRUE
f10_in(x76, x77) -> f11_in(x76, x77) :|: TRUE
f11_out(x78, x79) -> f10_out(x78, x79) :|: TRUE
f12_out -> f11_out(x80, x81) :|: TRUE
f4758_out(x82, x83) -> f11_out(x82, x83) :|: x82 < 0
f11_in(x84, x85) -> f4757_in(x84, x85) :|: x84 >= 0
f4757_out(x86, x87) -> f11_out(x86, x87) :|: x86 >= 0
f11_in(x88, x89) -> f12_in :|: TRUE
f11_in(x90, x91) -> f4758_in(x90, x91) :|: x90 < 0
f4887_out(x92, x93) -> f4757_out(x93, x92) :|: x93 <= 3
f4888_out(x94, x95) -> f4757_out(x94, x95) :|: x94 > 3
f4757_in(x96, x97) -> f4887_in(x97, x96) :|: x96 <= 3
f4757_in(x98, x99) -> f4888_in(x98, x99) :|: x98 > 3
f4889_out -> f4887_out(x100, x101) :|: TRUE
f4887_in(x102, x103) -> f4905_in(x102, x103) :|: x102 >= 0
f4887_in(x104, x105) -> f4889_in :|: TRUE
f4906_out(x106, x107) -> f4887_out(x107, x106) :|: x107 < 0
f4887_in(x108, x109) -> f4906_in(x109, x108) :|: x108 < 0
f4905_out(x110, x111) -> f4887_out(x110, x111) :|: x110 >= 0
f4905_in(x112, x113) -> f5137_in(x113, x112) :|: x112 > 23
f4905_in(x114, x115) -> f5136_in(x115, x114) :|: x114 <= 23
f5137_out(x116, x117) -> f4905_out(x117, x116) :|: x117 > 23
f5136_out(x118, x119) -> f4905_out(x119, x118) :|: x119 <= 23
Start term: f9_in(T1, T2)

----------------------------------------

(257) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f5247_in(x2, x3) -> f5322_in(x3, x2) :|: TRUE
f5324_in(x4, x5, x6) -> f5325_in(x4, x5) :|: TRUE
f5322_in(x20, x21) -> f5323_in(x20, x21) :|: TRUE
f5242_in(x26, x27) -> f5247_in(x26, x27) :|: TRUE
f5325_in(x28, x29) -> f5136_in(x28, x29) :|: TRUE
f5136_in(T7, T8) -> f5143_in(T7, T8) :|: TRUE
f5323_in(x57, x58) -> f5324_in(x58, x59, x57) :|: x59 = x57 - 1
f5146_in(x66, x67) -> f5242_in(x66, x67) :|: !(x66 = 0)
f5143_in(x70, x71) -> f5146_in(x70, x71) :|: TRUE


----------------------------------------

(258)
Obligation:
Rules:
f5247_in(x2, x3) -> f5322_in(x3, x2) :|: TRUE
f5324_in(x4, x5, x6) -> f5325_in(x4, x5) :|: TRUE
f5322_in(x20, x21) -> f5323_in(x20, x21) :|: TRUE
f5242_in(x26, x27) -> f5247_in(x26, x27) :|: TRUE
f5325_in(x28, x29) -> f5136_in(x28, x29) :|: TRUE
f5136_in(T7, T8) -> f5143_in(T7, T8) :|: TRUE
f5323_in(x57, x58) -> f5324_in(x58, x59, x57) :|: x59 = x57 - 1
f5146_in(x66, x67) -> f5242_in(x66, x67) :|: !(x66 = 0)
f5143_in(x70, x71) -> f5146_in(x70, x71) :|: TRUE

----------------------------------------

(259) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(260)
Obligation:
Rules:
f5146_in(x66:0, x67:0) -> f5146_in(x66:0, x67:0 - 1) :|: x66:0 < 0
f5146_in(x, x1) -> f5146_in(x, x1 - 1) :|: x > 0

----------------------------------------

(261) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(262)
Obligation:
Rules:
f5146_in(x66:0, x67:0) -> f5146_in(x66:0, arith) :|: x66:0 < 0 && arith = x67:0 - 1
f5146_in(x2, x3) -> f5146_in(x2, x4) :|: x2 > 0 && x4 = x3 - 1

----------------------------------------

(263) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f5146_in(x66:0, x67:0) -> f5146_in(x66:0, arith) :|: x66:0 < 0 && arith = x67:0 - 1
(2) f5146_in(x2, x3) -> f5146_in(x2, x4) :|: x2 > 0 && x4 = x3 - 1

Arcs:
(1) -> (1)
(2) -> (2)

This digraph is fully evaluated!
----------------------------------------

(264)
Complex Obligation (AND)

----------------------------------------

(265)
Obligation:

Termination digraph:
Nodes:
(1) f5146_in(x2, x3) -> f5146_in(x2, x4) :|: x2 > 0 && x4 = x3 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(266) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(267)
Obligation:
Rules:
f5146_in(x2:0, x3:0) -> f5146_in(x2:0, x3:0 - 1) :|: x2:0 > 0

----------------------------------------

(268) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f5146_in(x1, x2) -> f5146_in(x1)

----------------------------------------

(269)
Obligation:
Rules:
f5146_in(x2:0) -> f5146_in(x2:0) :|: x2:0 > 0

----------------------------------------

(270) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f5146_in(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(271)
Obligation:
Rules:
f5146_in(x2:0) -> f5146_in(x2:0) :|: x2:0 > 0

----------------------------------------

(272) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, x2:0) -> f(1, x2:0) :|: pc = 1 && x2:0 > 0
Witness term starting non-terminating reduction: f(1, 1)
----------------------------------------

(273)
NO

----------------------------------------

(274)
Obligation:

Termination digraph:
Nodes:
(1) f5146_in(x66:0, x67:0) -> f5146_in(x66:0, arith) :|: x66:0 < 0 && arith = x67:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(275) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(276)
Obligation:
Rules:
f5146_in(x66:0:0, x67:0:0) -> f5146_in(x66:0:0, x67:0:0 - 1) :|: x66:0:0 < 0

----------------------------------------

(277) IntTRSUnneededArgumentFilterProof (EQUIVALENT)
Some arguments are removed because they cannot influence termination. We removed arguments according to the following replacements:

   f5146_in(x1, x2) -> f5146_in(x1)

----------------------------------------

(278)
Obligation:
Rules:
f5146_in(x66:0:0) -> f5146_in(x66:0:0) :|: x66:0:0 < 0

----------------------------------------

(279) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f5146_in(INTEGER)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(280)
Obligation:
Rules:
f5146_in(x66:0:0) -> f5146_in(x66:0:0) :|: x66:0:0 < 0

----------------------------------------

(281) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, x66:0:0) -> f(1, x66:0:0) :|: pc = 1 && x66:0:0 < 0
Witness term starting non-terminating reduction: f(1, -1)
----------------------------------------

(282)
NO
