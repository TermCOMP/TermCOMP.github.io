YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Kwmrh.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

inner_product(g,g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) UndefinedPredicateHandlerProof [SOUND, 0 ms]
(2) Prolog
(3) PrologToPiTRSProof [SOUND, 0 ms]
(4) PiTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) PiDP
(11) PiDPToQDPProof [SOUND, 0 ms]
(12) QDP
(13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
Clauses:

inner_product(Xs, Ys, IP) :- inner_product(Xs, Ys, 0, IP).
inner_product(.(X, Xs), .(Y, Ys), Temp, IP) :- ','(is(Temp1, +(*(X, Y), Temp)), inner_product(Xs, Ys, Temp1, IP)).
inner_product([], [], IP, IP).


Query: inner_product(g,g,a)
----------------------------------------

(1) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

inner_product(Xs, Ys, IP) :- inner_product(Xs, Ys, 0, IP).
inner_product(.(X, Xs), .(Y, Ys), Temp, IP) :- ','(is(Temp1, +(*(X, Y), Temp)), inner_product(Xs, Ys, Temp1, IP)).
inner_product([], [], IP, IP).
is(X0, X1).


Query: inner_product(g,g,a)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

inner_product_in_3: (b,b,f)

inner_product_in_4: (b,b,b,f) (b,b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   inner_product_in_gga(Xs, Ys, IP) -> U1_gga(Xs, Ys, IP, inner_product_in_ggga(Xs, Ys, 0, IP))
   inner_product_in_ggga(.(X, Xs), .(Y, Ys), Temp, IP) -> U2_ggga(X, Xs, Y, Ys, Temp, IP, is_in_ag(Temp1, +(*(X, Y), Temp)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ggga(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> U3_ggga(X, Xs, Y, Ys, Temp, IP, inner_product_in_ggaa(Xs, Ys, Temp1, IP))
   inner_product_in_ggaa(.(X, Xs), .(Y, Ys), Temp, IP) -> U2_ggaa(X, Xs, Y, Ys, Temp, IP, is_in_ag(Temp1, +(*(X, Y), Temp)))
   U2_ggaa(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> U3_ggaa(X, Xs, Y, Ys, Temp, IP, inner_product_in_ggaa(Xs, Ys, Temp1, IP))
   inner_product_in_ggaa([], [], IP, IP) -> inner_product_out_ggaa([], [], IP, IP)
   U3_ggaa(X, Xs, Y, Ys, Temp, IP, inner_product_out_ggaa(Xs, Ys, Temp1, IP)) -> inner_product_out_ggaa(.(X, Xs), .(Y, Ys), Temp, IP)
   U3_ggga(X, Xs, Y, Ys, Temp, IP, inner_product_out_ggaa(Xs, Ys, Temp1, IP)) -> inner_product_out_ggga(.(X, Xs), .(Y, Ys), Temp, IP)
   inner_product_in_ggga([], [], IP, IP) -> inner_product_out_ggga([], [], IP, IP)
   U1_gga(Xs, Ys, IP, inner_product_out_ggga(Xs, Ys, 0, IP)) -> inner_product_out_gga(Xs, Ys, IP)

The argument filtering Pi contains the following mapping:
inner_product_in_gga(x1, x2, x3)  =  inner_product_in_gga(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x1, x2, x4)

inner_product_in_ggga(x1, x2, x3, x4)  =  inner_product_in_ggga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U2_ggga(x1, x2, x3, x4, x5, x6, x7)  =  U2_ggga(x1, x2, x3, x4, x5, x7)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

+(x1, x2)  =  +(x1)

*(x1, x2)  =  *(x1, x2)

U3_ggga(x1, x2, x3, x4, x5, x6, x7)  =  U3_ggga(x1, x2, x3, x4, x5, x7)

inner_product_in_ggaa(x1, x2, x3, x4)  =  inner_product_in_ggaa(x1, x2)

U2_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U2_ggaa(x1, x2, x3, x4, x7)

U3_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U3_ggaa(x1, x2, x3, x4, x7)

[]  =  []

inner_product_out_ggaa(x1, x2, x3, x4)  =  inner_product_out_ggaa(x1, x2)

inner_product_out_ggga(x1, x2, x3, x4)  =  inner_product_out_ggga(x1, x2, x3)

0  =  0

inner_product_out_gga(x1, x2, x3)  =  inner_product_out_gga(x1, x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   inner_product_in_gga(Xs, Ys, IP) -> U1_gga(Xs, Ys, IP, inner_product_in_ggga(Xs, Ys, 0, IP))
   inner_product_in_ggga(.(X, Xs), .(Y, Ys), Temp, IP) -> U2_ggga(X, Xs, Y, Ys, Temp, IP, is_in_ag(Temp1, +(*(X, Y), Temp)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ggga(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> U3_ggga(X, Xs, Y, Ys, Temp, IP, inner_product_in_ggaa(Xs, Ys, Temp1, IP))
   inner_product_in_ggaa(.(X, Xs), .(Y, Ys), Temp, IP) -> U2_ggaa(X, Xs, Y, Ys, Temp, IP, is_in_ag(Temp1, +(*(X, Y), Temp)))
   U2_ggaa(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> U3_ggaa(X, Xs, Y, Ys, Temp, IP, inner_product_in_ggaa(Xs, Ys, Temp1, IP))
   inner_product_in_ggaa([], [], IP, IP) -> inner_product_out_ggaa([], [], IP, IP)
   U3_ggaa(X, Xs, Y, Ys, Temp, IP, inner_product_out_ggaa(Xs, Ys, Temp1, IP)) -> inner_product_out_ggaa(.(X, Xs), .(Y, Ys), Temp, IP)
   U3_ggga(X, Xs, Y, Ys, Temp, IP, inner_product_out_ggaa(Xs, Ys, Temp1, IP)) -> inner_product_out_ggga(.(X, Xs), .(Y, Ys), Temp, IP)
   inner_product_in_ggga([], [], IP, IP) -> inner_product_out_ggga([], [], IP, IP)
   U1_gga(Xs, Ys, IP, inner_product_out_ggga(Xs, Ys, 0, IP)) -> inner_product_out_gga(Xs, Ys, IP)

The argument filtering Pi contains the following mapping:
inner_product_in_gga(x1, x2, x3)  =  inner_product_in_gga(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x1, x2, x4)

inner_product_in_ggga(x1, x2, x3, x4)  =  inner_product_in_ggga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U2_ggga(x1, x2, x3, x4, x5, x6, x7)  =  U2_ggga(x1, x2, x3, x4, x5, x7)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

+(x1, x2)  =  +(x1)

*(x1, x2)  =  *(x1, x2)

U3_ggga(x1, x2, x3, x4, x5, x6, x7)  =  U3_ggga(x1, x2, x3, x4, x5, x7)

inner_product_in_ggaa(x1, x2, x3, x4)  =  inner_product_in_ggaa(x1, x2)

U2_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U2_ggaa(x1, x2, x3, x4, x7)

U3_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U3_ggaa(x1, x2, x3, x4, x7)

[]  =  []

inner_product_out_ggaa(x1, x2, x3, x4)  =  inner_product_out_ggaa(x1, x2)

inner_product_out_ggga(x1, x2, x3, x4)  =  inner_product_out_ggga(x1, x2, x3)

0  =  0

inner_product_out_gga(x1, x2, x3)  =  inner_product_out_gga(x1, x2)



----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   INNER_PRODUCT_IN_GGA(Xs, Ys, IP) -> U1_GGA(Xs, Ys, IP, inner_product_in_ggga(Xs, Ys, 0, IP))
   INNER_PRODUCT_IN_GGA(Xs, Ys, IP) -> INNER_PRODUCT_IN_GGGA(Xs, Ys, 0, IP)
   INNER_PRODUCT_IN_GGGA(.(X, Xs), .(Y, Ys), Temp, IP) -> U2_GGGA(X, Xs, Y, Ys, Temp, IP, is_in_ag(Temp1, +(*(X, Y), Temp)))
   INNER_PRODUCT_IN_GGGA(.(X, Xs), .(Y, Ys), Temp, IP) -> IS_IN_AG(Temp1, +(*(X, Y), Temp))
   U2_GGGA(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> U3_GGGA(X, Xs, Y, Ys, Temp, IP, inner_product_in_ggaa(Xs, Ys, Temp1, IP))
   U2_GGGA(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> INNER_PRODUCT_IN_GGAA(Xs, Ys, Temp1, IP)
   INNER_PRODUCT_IN_GGAA(.(X, Xs), .(Y, Ys), Temp, IP) -> U2_GGAA(X, Xs, Y, Ys, Temp, IP, is_in_ag(Temp1, +(*(X, Y), Temp)))
   INNER_PRODUCT_IN_GGAA(.(X, Xs), .(Y, Ys), Temp, IP) -> IS_IN_AG(Temp1, +(*(X, Y), Temp))
   U2_GGAA(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> U3_GGAA(X, Xs, Y, Ys, Temp, IP, inner_product_in_ggaa(Xs, Ys, Temp1, IP))
   U2_GGAA(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> INNER_PRODUCT_IN_GGAA(Xs, Ys, Temp1, IP)

The TRS R consists of the following rules:

   inner_product_in_gga(Xs, Ys, IP) -> U1_gga(Xs, Ys, IP, inner_product_in_ggga(Xs, Ys, 0, IP))
   inner_product_in_ggga(.(X, Xs), .(Y, Ys), Temp, IP) -> U2_ggga(X, Xs, Y, Ys, Temp, IP, is_in_ag(Temp1, +(*(X, Y), Temp)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ggga(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> U3_ggga(X, Xs, Y, Ys, Temp, IP, inner_product_in_ggaa(Xs, Ys, Temp1, IP))
   inner_product_in_ggaa(.(X, Xs), .(Y, Ys), Temp, IP) -> U2_ggaa(X, Xs, Y, Ys, Temp, IP, is_in_ag(Temp1, +(*(X, Y), Temp)))
   U2_ggaa(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> U3_ggaa(X, Xs, Y, Ys, Temp, IP, inner_product_in_ggaa(Xs, Ys, Temp1, IP))
   inner_product_in_ggaa([], [], IP, IP) -> inner_product_out_ggaa([], [], IP, IP)
   U3_ggaa(X, Xs, Y, Ys, Temp, IP, inner_product_out_ggaa(Xs, Ys, Temp1, IP)) -> inner_product_out_ggaa(.(X, Xs), .(Y, Ys), Temp, IP)
   U3_ggga(X, Xs, Y, Ys, Temp, IP, inner_product_out_ggaa(Xs, Ys, Temp1, IP)) -> inner_product_out_ggga(.(X, Xs), .(Y, Ys), Temp, IP)
   inner_product_in_ggga([], [], IP, IP) -> inner_product_out_ggga([], [], IP, IP)
   U1_gga(Xs, Ys, IP, inner_product_out_ggga(Xs, Ys, 0, IP)) -> inner_product_out_gga(Xs, Ys, IP)

The argument filtering Pi contains the following mapping:
inner_product_in_gga(x1, x2, x3)  =  inner_product_in_gga(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x1, x2, x4)

inner_product_in_ggga(x1, x2, x3, x4)  =  inner_product_in_ggga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U2_ggga(x1, x2, x3, x4, x5, x6, x7)  =  U2_ggga(x1, x2, x3, x4, x5, x7)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

+(x1, x2)  =  +(x1)

*(x1, x2)  =  *(x1, x2)

U3_ggga(x1, x2, x3, x4, x5, x6, x7)  =  U3_ggga(x1, x2, x3, x4, x5, x7)

inner_product_in_ggaa(x1, x2, x3, x4)  =  inner_product_in_ggaa(x1, x2)

U2_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U2_ggaa(x1, x2, x3, x4, x7)

U3_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U3_ggaa(x1, x2, x3, x4, x7)

[]  =  []

inner_product_out_ggaa(x1, x2, x3, x4)  =  inner_product_out_ggaa(x1, x2)

inner_product_out_ggga(x1, x2, x3, x4)  =  inner_product_out_ggga(x1, x2, x3)

0  =  0

inner_product_out_gga(x1, x2, x3)  =  inner_product_out_gga(x1, x2)

INNER_PRODUCT_IN_GGA(x1, x2, x3)  =  INNER_PRODUCT_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4)  =  U1_GGA(x1, x2, x4)

INNER_PRODUCT_IN_GGGA(x1, x2, x3, x4)  =  INNER_PRODUCT_IN_GGGA(x1, x2, x3)

U2_GGGA(x1, x2, x3, x4, x5, x6, x7)  =  U2_GGGA(x1, x2, x3, x4, x5, x7)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U3_GGGA(x1, x2, x3, x4, x5, x6, x7)  =  U3_GGGA(x1, x2, x3, x4, x5, x7)

INNER_PRODUCT_IN_GGAA(x1, x2, x3, x4)  =  INNER_PRODUCT_IN_GGAA(x1, x2)

U2_GGAA(x1, x2, x3, x4, x5, x6, x7)  =  U2_GGAA(x1, x2, x3, x4, x7)

U3_GGAA(x1, x2, x3, x4, x5, x6, x7)  =  U3_GGAA(x1, x2, x3, x4, x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   INNER_PRODUCT_IN_GGA(Xs, Ys, IP) -> U1_GGA(Xs, Ys, IP, inner_product_in_ggga(Xs, Ys, 0, IP))
   INNER_PRODUCT_IN_GGA(Xs, Ys, IP) -> INNER_PRODUCT_IN_GGGA(Xs, Ys, 0, IP)
   INNER_PRODUCT_IN_GGGA(.(X, Xs), .(Y, Ys), Temp, IP) -> U2_GGGA(X, Xs, Y, Ys, Temp, IP, is_in_ag(Temp1, +(*(X, Y), Temp)))
   INNER_PRODUCT_IN_GGGA(.(X, Xs), .(Y, Ys), Temp, IP) -> IS_IN_AG(Temp1, +(*(X, Y), Temp))
   U2_GGGA(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> U3_GGGA(X, Xs, Y, Ys, Temp, IP, inner_product_in_ggaa(Xs, Ys, Temp1, IP))
   U2_GGGA(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> INNER_PRODUCT_IN_GGAA(Xs, Ys, Temp1, IP)
   INNER_PRODUCT_IN_GGAA(.(X, Xs), .(Y, Ys), Temp, IP) -> U2_GGAA(X, Xs, Y, Ys, Temp, IP, is_in_ag(Temp1, +(*(X, Y), Temp)))
   INNER_PRODUCT_IN_GGAA(.(X, Xs), .(Y, Ys), Temp, IP) -> IS_IN_AG(Temp1, +(*(X, Y), Temp))
   U2_GGAA(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> U3_GGAA(X, Xs, Y, Ys, Temp, IP, inner_product_in_ggaa(Xs, Ys, Temp1, IP))
   U2_GGAA(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> INNER_PRODUCT_IN_GGAA(Xs, Ys, Temp1, IP)

The TRS R consists of the following rules:

   inner_product_in_gga(Xs, Ys, IP) -> U1_gga(Xs, Ys, IP, inner_product_in_ggga(Xs, Ys, 0, IP))
   inner_product_in_ggga(.(X, Xs), .(Y, Ys), Temp, IP) -> U2_ggga(X, Xs, Y, Ys, Temp, IP, is_in_ag(Temp1, +(*(X, Y), Temp)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ggga(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> U3_ggga(X, Xs, Y, Ys, Temp, IP, inner_product_in_ggaa(Xs, Ys, Temp1, IP))
   inner_product_in_ggaa(.(X, Xs), .(Y, Ys), Temp, IP) -> U2_ggaa(X, Xs, Y, Ys, Temp, IP, is_in_ag(Temp1, +(*(X, Y), Temp)))
   U2_ggaa(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> U3_ggaa(X, Xs, Y, Ys, Temp, IP, inner_product_in_ggaa(Xs, Ys, Temp1, IP))
   inner_product_in_ggaa([], [], IP, IP) -> inner_product_out_ggaa([], [], IP, IP)
   U3_ggaa(X, Xs, Y, Ys, Temp, IP, inner_product_out_ggaa(Xs, Ys, Temp1, IP)) -> inner_product_out_ggaa(.(X, Xs), .(Y, Ys), Temp, IP)
   U3_ggga(X, Xs, Y, Ys, Temp, IP, inner_product_out_ggaa(Xs, Ys, Temp1, IP)) -> inner_product_out_ggga(.(X, Xs), .(Y, Ys), Temp, IP)
   inner_product_in_ggga([], [], IP, IP) -> inner_product_out_ggga([], [], IP, IP)
   U1_gga(Xs, Ys, IP, inner_product_out_ggga(Xs, Ys, 0, IP)) -> inner_product_out_gga(Xs, Ys, IP)

The argument filtering Pi contains the following mapping:
inner_product_in_gga(x1, x2, x3)  =  inner_product_in_gga(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x1, x2, x4)

inner_product_in_ggga(x1, x2, x3, x4)  =  inner_product_in_ggga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U2_ggga(x1, x2, x3, x4, x5, x6, x7)  =  U2_ggga(x1, x2, x3, x4, x5, x7)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

+(x1, x2)  =  +(x1)

*(x1, x2)  =  *(x1, x2)

U3_ggga(x1, x2, x3, x4, x5, x6, x7)  =  U3_ggga(x1, x2, x3, x4, x5, x7)

inner_product_in_ggaa(x1, x2, x3, x4)  =  inner_product_in_ggaa(x1, x2)

U2_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U2_ggaa(x1, x2, x3, x4, x7)

U3_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U3_ggaa(x1, x2, x3, x4, x7)

[]  =  []

inner_product_out_ggaa(x1, x2, x3, x4)  =  inner_product_out_ggaa(x1, x2)

inner_product_out_ggga(x1, x2, x3, x4)  =  inner_product_out_ggga(x1, x2, x3)

0  =  0

inner_product_out_gga(x1, x2, x3)  =  inner_product_out_gga(x1, x2)

INNER_PRODUCT_IN_GGA(x1, x2, x3)  =  INNER_PRODUCT_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4)  =  U1_GGA(x1, x2, x4)

INNER_PRODUCT_IN_GGGA(x1, x2, x3, x4)  =  INNER_PRODUCT_IN_GGGA(x1, x2, x3)

U2_GGGA(x1, x2, x3, x4, x5, x6, x7)  =  U2_GGGA(x1, x2, x3, x4, x5, x7)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U3_GGGA(x1, x2, x3, x4, x5, x6, x7)  =  U3_GGGA(x1, x2, x3, x4, x5, x7)

INNER_PRODUCT_IN_GGAA(x1, x2, x3, x4)  =  INNER_PRODUCT_IN_GGAA(x1, x2)

U2_GGAA(x1, x2, x3, x4, x5, x6, x7)  =  U2_GGAA(x1, x2, x3, x4, x7)

U3_GGAA(x1, x2, x3, x4, x5, x6, x7)  =  U3_GGAA(x1, x2, x3, x4, x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 8 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GGAA(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> INNER_PRODUCT_IN_GGAA(Xs, Ys, Temp1, IP)
   INNER_PRODUCT_IN_GGAA(.(X, Xs), .(Y, Ys), Temp, IP) -> U2_GGAA(X, Xs, Y, Ys, Temp, IP, is_in_ag(Temp1, +(*(X, Y), Temp)))

The TRS R consists of the following rules:

   inner_product_in_gga(Xs, Ys, IP) -> U1_gga(Xs, Ys, IP, inner_product_in_ggga(Xs, Ys, 0, IP))
   inner_product_in_ggga(.(X, Xs), .(Y, Ys), Temp, IP) -> U2_ggga(X, Xs, Y, Ys, Temp, IP, is_in_ag(Temp1, +(*(X, Y), Temp)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ggga(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> U3_ggga(X, Xs, Y, Ys, Temp, IP, inner_product_in_ggaa(Xs, Ys, Temp1, IP))
   inner_product_in_ggaa(.(X, Xs), .(Y, Ys), Temp, IP) -> U2_ggaa(X, Xs, Y, Ys, Temp, IP, is_in_ag(Temp1, +(*(X, Y), Temp)))
   U2_ggaa(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> U3_ggaa(X, Xs, Y, Ys, Temp, IP, inner_product_in_ggaa(Xs, Ys, Temp1, IP))
   inner_product_in_ggaa([], [], IP, IP) -> inner_product_out_ggaa([], [], IP, IP)
   U3_ggaa(X, Xs, Y, Ys, Temp, IP, inner_product_out_ggaa(Xs, Ys, Temp1, IP)) -> inner_product_out_ggaa(.(X, Xs), .(Y, Ys), Temp, IP)
   U3_ggga(X, Xs, Y, Ys, Temp, IP, inner_product_out_ggaa(Xs, Ys, Temp1, IP)) -> inner_product_out_ggga(.(X, Xs), .(Y, Ys), Temp, IP)
   inner_product_in_ggga([], [], IP, IP) -> inner_product_out_ggga([], [], IP, IP)
   U1_gga(Xs, Ys, IP, inner_product_out_ggga(Xs, Ys, 0, IP)) -> inner_product_out_gga(Xs, Ys, IP)

The argument filtering Pi contains the following mapping:
inner_product_in_gga(x1, x2, x3)  =  inner_product_in_gga(x1, x2)

U1_gga(x1, x2, x3, x4)  =  U1_gga(x1, x2, x4)

inner_product_in_ggga(x1, x2, x3, x4)  =  inner_product_in_ggga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

U2_ggga(x1, x2, x3, x4, x5, x6, x7)  =  U2_ggga(x1, x2, x3, x4, x5, x7)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

+(x1, x2)  =  +(x1)

*(x1, x2)  =  *(x1, x2)

U3_ggga(x1, x2, x3, x4, x5, x6, x7)  =  U3_ggga(x1, x2, x3, x4, x5, x7)

inner_product_in_ggaa(x1, x2, x3, x4)  =  inner_product_in_ggaa(x1, x2)

U2_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U2_ggaa(x1, x2, x3, x4, x7)

U3_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U3_ggaa(x1, x2, x3, x4, x7)

[]  =  []

inner_product_out_ggaa(x1, x2, x3, x4)  =  inner_product_out_ggaa(x1, x2)

inner_product_out_ggga(x1, x2, x3, x4)  =  inner_product_out_ggga(x1, x2, x3)

0  =  0

inner_product_out_gga(x1, x2, x3)  =  inner_product_out_gga(x1, x2)

INNER_PRODUCT_IN_GGAA(x1, x2, x3, x4)  =  INNER_PRODUCT_IN_GGAA(x1, x2)

U2_GGAA(x1, x2, x3, x4, x5, x6, x7)  =  U2_GGAA(x1, x2, x3, x4, x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GGAA(X, Xs, Y, Ys, Temp, IP, is_out_ag(Temp1, +(*(X, Y), Temp))) -> INNER_PRODUCT_IN_GGAA(Xs, Ys, Temp1, IP)
   INNER_PRODUCT_IN_GGAA(.(X, Xs), .(Y, Ys), Temp, IP) -> U2_GGAA(X, Xs, Y, Ys, Temp, IP, is_in_ag(Temp1, +(*(X, Y), Temp)))

The TRS R consists of the following rules:

   is_in_ag(X0, X1) -> is_out_ag(X0, X1)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

+(x1, x2)  =  +(x1)

*(x1, x2)  =  *(x1, x2)

INNER_PRODUCT_IN_GGAA(x1, x2, x3, x4)  =  INNER_PRODUCT_IN_GGAA(x1, x2)

U2_GGAA(x1, x2, x3, x4, x5, x6, x7)  =  U2_GGAA(x1, x2, x3, x4, x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGAA(X, Xs, Y, Ys, is_out_ag(+(*(X, Y)))) -> INNER_PRODUCT_IN_GGAA(Xs, Ys)
   INNER_PRODUCT_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U2_GGAA(X, Xs, Y, Ys, is_in_ag(+(*(X, Y))))

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag(X1)

The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*INNER_PRODUCT_IN_GGAA(.(X, Xs), .(Y, Ys)) -> U2_GGAA(X, Xs, Y, Ys, is_in_ag(+(*(X, Y))))
The graph contains the following edges 1 > 1, 1 > 2, 2 > 3, 2 > 4


*U2_GGAA(X, Xs, Y, Ys, is_out_ag(+(*(X, Y)))) -> INNER_PRODUCT_IN_GGAA(Xs, Ys)
The graph contains the following edges 2 >= 1, 4 >= 2


----------------------------------------

(14)
YES
