YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/V2fYj.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

evenSpaced2(g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) UndefinedPredicateHandlerProof [SOUND, 0 ms]
(2) Prolog
(3) PrologToPiTRSProof [SOUND, 0 ms]
(4) PiTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) DependencyGraphProof [EQUIVALENT, 1 ms]
(8) PiDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) PiDP
(11) PiDPToQDPProof [SOUND, 0 ms]
(12) QDP
(13) MRRProof [EQUIVALENT, 25 ms]
(14) QDP
(15) PisEmptyProof [EQUIVALENT, 0 ms]
(16) YES


----------------------------------------

(0)
Obligation:
Clauses:

evenSpacedWithDiff(.(X, .(Y, [])), Diff) :- =:=(Diff, -(Y, X)).
evenSpacedWithDiff(.(X, .(Y, Tail)), Diff) :- ','(=:=(Diff, -(Y, X)), evenSpacedWithDiff(.(Y, Tail), Diff)).
evenSpaced2(.(X1, .(X2, []))).
evenSpaced2(.(X, .(Y, Ys))) :- ','(is(Diff, -(Y, X)), evenSpacedWithDiff(.(Y, Ys), Diff)).


Query: evenSpaced2(g)
----------------------------------------

(1) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

evenSpacedWithDiff(.(X, .(Y, [])), Diff) :- =:=(Diff, -(Y, X)).
evenSpacedWithDiff(.(X, .(Y, Tail)), Diff) :- ','(=:=(Diff, -(Y, X)), evenSpacedWithDiff(.(Y, Tail), Diff)).
evenSpaced2(.(X1, .(X2, []))).
evenSpaced2(.(X, .(Y, Ys))) :- ','(is(Diff, -(Y, X)), evenSpacedWithDiff(.(Y, Ys), Diff)).
=:=(X0, X1).
is(X0, X1).


Query: evenSpaced2(g)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

evenSpaced2_in_1: (b)

evenSpacedWithDiff_in_2: (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   evenSpaced2_in_g(.(X1, .(X2, []))) -> evenSpaced2_out_g(.(X1, .(X2, [])))
   evenSpaced2_in_g(.(X, .(Y, Ys))) -> U4_g(X, Y, Ys, is_in_ag(Diff, -(Y, X)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U4_g(X, Y, Ys, is_out_ag(Diff, -(Y, X))) -> U5_g(X, Y, Ys, evenSpacedWithDiff_in_ga(.(Y, Ys), Diff))
   evenSpacedWithDiff_in_ga(.(X, .(Y, [])), Diff) -> U1_ga(X, Y, Diff, =:=_in_ag(Diff, -(Y, X)))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U1_ga(X, Y, Diff, =:=_out_ag(Diff, -(Y, X))) -> evenSpacedWithDiff_out_ga(.(X, .(Y, [])), Diff)
   evenSpacedWithDiff_in_ga(.(X, .(Y, Tail)), Diff) -> U2_ga(X, Y, Tail, Diff, =:=_in_ag(Diff, -(Y, X)))
   U2_ga(X, Y, Tail, Diff, =:=_out_ag(Diff, -(Y, X))) -> U3_ga(X, Y, Tail, Diff, evenSpacedWithDiff_in_ga(.(Y, Tail), Diff))
   U3_ga(X, Y, Tail, Diff, evenSpacedWithDiff_out_ga(.(Y, Tail), Diff)) -> evenSpacedWithDiff_out_ga(.(X, .(Y, Tail)), Diff)
   U5_g(X, Y, Ys, evenSpacedWithDiff_out_ga(.(Y, Ys), Diff)) -> evenSpaced2_out_g(.(X, .(Y, Ys)))

The argument filtering Pi contains the following mapping:
evenSpaced2_in_g(x1)  =  evenSpaced2_in_g(x1)

.(x1, x2)  =  .(x1, x2)

[]  =  []

evenSpaced2_out_g(x1)  =  evenSpaced2_out_g

U4_g(x1, x2, x3, x4)  =  U4_g(x2, x3, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x1, x2)

U5_g(x1, x2, x3, x4)  =  U5_g(x4)

evenSpacedWithDiff_in_ga(x1, x2)  =  evenSpacedWithDiff_in_ga(x1)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag

evenSpacedWithDiff_out_ga(x1, x2)  =  evenSpacedWithDiff_out_ga

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x2, x3, x5)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   evenSpaced2_in_g(.(X1, .(X2, []))) -> evenSpaced2_out_g(.(X1, .(X2, [])))
   evenSpaced2_in_g(.(X, .(Y, Ys))) -> U4_g(X, Y, Ys, is_in_ag(Diff, -(Y, X)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U4_g(X, Y, Ys, is_out_ag(Diff, -(Y, X))) -> U5_g(X, Y, Ys, evenSpacedWithDiff_in_ga(.(Y, Ys), Diff))
   evenSpacedWithDiff_in_ga(.(X, .(Y, [])), Diff) -> U1_ga(X, Y, Diff, =:=_in_ag(Diff, -(Y, X)))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U1_ga(X, Y, Diff, =:=_out_ag(Diff, -(Y, X))) -> evenSpacedWithDiff_out_ga(.(X, .(Y, [])), Diff)
   evenSpacedWithDiff_in_ga(.(X, .(Y, Tail)), Diff) -> U2_ga(X, Y, Tail, Diff, =:=_in_ag(Diff, -(Y, X)))
   U2_ga(X, Y, Tail, Diff, =:=_out_ag(Diff, -(Y, X))) -> U3_ga(X, Y, Tail, Diff, evenSpacedWithDiff_in_ga(.(Y, Tail), Diff))
   U3_ga(X, Y, Tail, Diff, evenSpacedWithDiff_out_ga(.(Y, Tail), Diff)) -> evenSpacedWithDiff_out_ga(.(X, .(Y, Tail)), Diff)
   U5_g(X, Y, Ys, evenSpacedWithDiff_out_ga(.(Y, Ys), Diff)) -> evenSpaced2_out_g(.(X, .(Y, Ys)))

The argument filtering Pi contains the following mapping:
evenSpaced2_in_g(x1)  =  evenSpaced2_in_g(x1)

.(x1, x2)  =  .(x1, x2)

[]  =  []

evenSpaced2_out_g(x1)  =  evenSpaced2_out_g

U4_g(x1, x2, x3, x4)  =  U4_g(x2, x3, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x1, x2)

U5_g(x1, x2, x3, x4)  =  U5_g(x4)

evenSpacedWithDiff_in_ga(x1, x2)  =  evenSpacedWithDiff_in_ga(x1)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag

evenSpacedWithDiff_out_ga(x1, x2)  =  evenSpacedWithDiff_out_ga

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x2, x3, x5)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)



----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   EVENSPACED2_IN_G(.(X, .(Y, Ys))) -> U4_G(X, Y, Ys, is_in_ag(Diff, -(Y, X)))
   EVENSPACED2_IN_G(.(X, .(Y, Ys))) -> IS_IN_AG(Diff, -(Y, X))
   U4_G(X, Y, Ys, is_out_ag(Diff, -(Y, X))) -> U5_G(X, Y, Ys, evenSpacedWithDiff_in_ga(.(Y, Ys), Diff))
   U4_G(X, Y, Ys, is_out_ag(Diff, -(Y, X))) -> EVENSPACEDWITHDIFF_IN_GA(.(Y, Ys), Diff)
   EVENSPACEDWITHDIFF_IN_GA(.(X, .(Y, [])), Diff) -> U1_GA(X, Y, Diff, =:=_in_ag(Diff, -(Y, X)))
   EVENSPACEDWITHDIFF_IN_GA(.(X, .(Y, [])), Diff) -> =:=_IN_AG(Diff, -(Y, X))
   EVENSPACEDWITHDIFF_IN_GA(.(X, .(Y, Tail)), Diff) -> U2_GA(X, Y, Tail, Diff, =:=_in_ag(Diff, -(Y, X)))
   EVENSPACEDWITHDIFF_IN_GA(.(X, .(Y, Tail)), Diff) -> =:=_IN_AG(Diff, -(Y, X))
   U2_GA(X, Y, Tail, Diff, =:=_out_ag(Diff, -(Y, X))) -> U3_GA(X, Y, Tail, Diff, evenSpacedWithDiff_in_ga(.(Y, Tail), Diff))
   U2_GA(X, Y, Tail, Diff, =:=_out_ag(Diff, -(Y, X))) -> EVENSPACEDWITHDIFF_IN_GA(.(Y, Tail), Diff)

The TRS R consists of the following rules:

   evenSpaced2_in_g(.(X1, .(X2, []))) -> evenSpaced2_out_g(.(X1, .(X2, [])))
   evenSpaced2_in_g(.(X, .(Y, Ys))) -> U4_g(X, Y, Ys, is_in_ag(Diff, -(Y, X)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U4_g(X, Y, Ys, is_out_ag(Diff, -(Y, X))) -> U5_g(X, Y, Ys, evenSpacedWithDiff_in_ga(.(Y, Ys), Diff))
   evenSpacedWithDiff_in_ga(.(X, .(Y, [])), Diff) -> U1_ga(X, Y, Diff, =:=_in_ag(Diff, -(Y, X)))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U1_ga(X, Y, Diff, =:=_out_ag(Diff, -(Y, X))) -> evenSpacedWithDiff_out_ga(.(X, .(Y, [])), Diff)
   evenSpacedWithDiff_in_ga(.(X, .(Y, Tail)), Diff) -> U2_ga(X, Y, Tail, Diff, =:=_in_ag(Diff, -(Y, X)))
   U2_ga(X, Y, Tail, Diff, =:=_out_ag(Diff, -(Y, X))) -> U3_ga(X, Y, Tail, Diff, evenSpacedWithDiff_in_ga(.(Y, Tail), Diff))
   U3_ga(X, Y, Tail, Diff, evenSpacedWithDiff_out_ga(.(Y, Tail), Diff)) -> evenSpacedWithDiff_out_ga(.(X, .(Y, Tail)), Diff)
   U5_g(X, Y, Ys, evenSpacedWithDiff_out_ga(.(Y, Ys), Diff)) -> evenSpaced2_out_g(.(X, .(Y, Ys)))

The argument filtering Pi contains the following mapping:
evenSpaced2_in_g(x1)  =  evenSpaced2_in_g(x1)

.(x1, x2)  =  .(x1, x2)

[]  =  []

evenSpaced2_out_g(x1)  =  evenSpaced2_out_g

U4_g(x1, x2, x3, x4)  =  U4_g(x2, x3, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x1, x2)

U5_g(x1, x2, x3, x4)  =  U5_g(x4)

evenSpacedWithDiff_in_ga(x1, x2)  =  evenSpacedWithDiff_in_ga(x1)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag

evenSpacedWithDiff_out_ga(x1, x2)  =  evenSpacedWithDiff_out_ga

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x2, x3, x5)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

EVENSPACED2_IN_G(x1)  =  EVENSPACED2_IN_G(x1)

U4_G(x1, x2, x3, x4)  =  U4_G(x2, x3, x4)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U5_G(x1, x2, x3, x4)  =  U5_G(x4)

EVENSPACEDWITHDIFF_IN_GA(x1, x2)  =  EVENSPACEDWITHDIFF_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x4)

=:=_IN_AG(x1, x2)  =  =:=_IN_AG(x2)

U2_GA(x1, x2, x3, x4, x5)  =  U2_GA(x2, x3, x5)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   EVENSPACED2_IN_G(.(X, .(Y, Ys))) -> U4_G(X, Y, Ys, is_in_ag(Diff, -(Y, X)))
   EVENSPACED2_IN_G(.(X, .(Y, Ys))) -> IS_IN_AG(Diff, -(Y, X))
   U4_G(X, Y, Ys, is_out_ag(Diff, -(Y, X))) -> U5_G(X, Y, Ys, evenSpacedWithDiff_in_ga(.(Y, Ys), Diff))
   U4_G(X, Y, Ys, is_out_ag(Diff, -(Y, X))) -> EVENSPACEDWITHDIFF_IN_GA(.(Y, Ys), Diff)
   EVENSPACEDWITHDIFF_IN_GA(.(X, .(Y, [])), Diff) -> U1_GA(X, Y, Diff, =:=_in_ag(Diff, -(Y, X)))
   EVENSPACEDWITHDIFF_IN_GA(.(X, .(Y, [])), Diff) -> =:=_IN_AG(Diff, -(Y, X))
   EVENSPACEDWITHDIFF_IN_GA(.(X, .(Y, Tail)), Diff) -> U2_GA(X, Y, Tail, Diff, =:=_in_ag(Diff, -(Y, X)))
   EVENSPACEDWITHDIFF_IN_GA(.(X, .(Y, Tail)), Diff) -> =:=_IN_AG(Diff, -(Y, X))
   U2_GA(X, Y, Tail, Diff, =:=_out_ag(Diff, -(Y, X))) -> U3_GA(X, Y, Tail, Diff, evenSpacedWithDiff_in_ga(.(Y, Tail), Diff))
   U2_GA(X, Y, Tail, Diff, =:=_out_ag(Diff, -(Y, X))) -> EVENSPACEDWITHDIFF_IN_GA(.(Y, Tail), Diff)

The TRS R consists of the following rules:

   evenSpaced2_in_g(.(X1, .(X2, []))) -> evenSpaced2_out_g(.(X1, .(X2, [])))
   evenSpaced2_in_g(.(X, .(Y, Ys))) -> U4_g(X, Y, Ys, is_in_ag(Diff, -(Y, X)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U4_g(X, Y, Ys, is_out_ag(Diff, -(Y, X))) -> U5_g(X, Y, Ys, evenSpacedWithDiff_in_ga(.(Y, Ys), Diff))
   evenSpacedWithDiff_in_ga(.(X, .(Y, [])), Diff) -> U1_ga(X, Y, Diff, =:=_in_ag(Diff, -(Y, X)))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U1_ga(X, Y, Diff, =:=_out_ag(Diff, -(Y, X))) -> evenSpacedWithDiff_out_ga(.(X, .(Y, [])), Diff)
   evenSpacedWithDiff_in_ga(.(X, .(Y, Tail)), Diff) -> U2_ga(X, Y, Tail, Diff, =:=_in_ag(Diff, -(Y, X)))
   U2_ga(X, Y, Tail, Diff, =:=_out_ag(Diff, -(Y, X))) -> U3_ga(X, Y, Tail, Diff, evenSpacedWithDiff_in_ga(.(Y, Tail), Diff))
   U3_ga(X, Y, Tail, Diff, evenSpacedWithDiff_out_ga(.(Y, Tail), Diff)) -> evenSpacedWithDiff_out_ga(.(X, .(Y, Tail)), Diff)
   U5_g(X, Y, Ys, evenSpacedWithDiff_out_ga(.(Y, Ys), Diff)) -> evenSpaced2_out_g(.(X, .(Y, Ys)))

The argument filtering Pi contains the following mapping:
evenSpaced2_in_g(x1)  =  evenSpaced2_in_g(x1)

.(x1, x2)  =  .(x1, x2)

[]  =  []

evenSpaced2_out_g(x1)  =  evenSpaced2_out_g

U4_g(x1, x2, x3, x4)  =  U4_g(x2, x3, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x1, x2)

U5_g(x1, x2, x3, x4)  =  U5_g(x4)

evenSpacedWithDiff_in_ga(x1, x2)  =  evenSpacedWithDiff_in_ga(x1)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag

evenSpacedWithDiff_out_ga(x1, x2)  =  evenSpacedWithDiff_out_ga

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x2, x3, x5)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

EVENSPACED2_IN_G(x1)  =  EVENSPACED2_IN_G(x1)

U4_G(x1, x2, x3, x4)  =  U4_G(x2, x3, x4)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U5_G(x1, x2, x3, x4)  =  U5_G(x4)

EVENSPACEDWITHDIFF_IN_GA(x1, x2)  =  EVENSPACEDWITHDIFF_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x4)

=:=_IN_AG(x1, x2)  =  =:=_IN_AG(x2)

U2_GA(x1, x2, x3, x4, x5)  =  U2_GA(x2, x3, x5)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 8 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   EVENSPACEDWITHDIFF_IN_GA(.(X, .(Y, Tail)), Diff) -> U2_GA(X, Y, Tail, Diff, =:=_in_ag(Diff, -(Y, X)))
   U2_GA(X, Y, Tail, Diff, =:=_out_ag(Diff, -(Y, X))) -> EVENSPACEDWITHDIFF_IN_GA(.(Y, Tail), Diff)

The TRS R consists of the following rules:

   evenSpaced2_in_g(.(X1, .(X2, []))) -> evenSpaced2_out_g(.(X1, .(X2, [])))
   evenSpaced2_in_g(.(X, .(Y, Ys))) -> U4_g(X, Y, Ys, is_in_ag(Diff, -(Y, X)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U4_g(X, Y, Ys, is_out_ag(Diff, -(Y, X))) -> U5_g(X, Y, Ys, evenSpacedWithDiff_in_ga(.(Y, Ys), Diff))
   evenSpacedWithDiff_in_ga(.(X, .(Y, [])), Diff) -> U1_ga(X, Y, Diff, =:=_in_ag(Diff, -(Y, X)))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U1_ga(X, Y, Diff, =:=_out_ag(Diff, -(Y, X))) -> evenSpacedWithDiff_out_ga(.(X, .(Y, [])), Diff)
   evenSpacedWithDiff_in_ga(.(X, .(Y, Tail)), Diff) -> U2_ga(X, Y, Tail, Diff, =:=_in_ag(Diff, -(Y, X)))
   U2_ga(X, Y, Tail, Diff, =:=_out_ag(Diff, -(Y, X))) -> U3_ga(X, Y, Tail, Diff, evenSpacedWithDiff_in_ga(.(Y, Tail), Diff))
   U3_ga(X, Y, Tail, Diff, evenSpacedWithDiff_out_ga(.(Y, Tail), Diff)) -> evenSpacedWithDiff_out_ga(.(X, .(Y, Tail)), Diff)
   U5_g(X, Y, Ys, evenSpacedWithDiff_out_ga(.(Y, Ys), Diff)) -> evenSpaced2_out_g(.(X, .(Y, Ys)))

The argument filtering Pi contains the following mapping:
evenSpaced2_in_g(x1)  =  evenSpaced2_in_g(x1)

.(x1, x2)  =  .(x1, x2)

[]  =  []

evenSpaced2_out_g(x1)  =  evenSpaced2_out_g

U4_g(x1, x2, x3, x4)  =  U4_g(x2, x3, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x1, x2)

U5_g(x1, x2, x3, x4)  =  U5_g(x4)

evenSpacedWithDiff_in_ga(x1, x2)  =  evenSpacedWithDiff_in_ga(x1)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag

evenSpacedWithDiff_out_ga(x1, x2)  =  evenSpacedWithDiff_out_ga

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x2, x3, x5)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

EVENSPACEDWITHDIFF_IN_GA(x1, x2)  =  EVENSPACEDWITHDIFF_IN_GA(x1)

U2_GA(x1, x2, x3, x4, x5)  =  U2_GA(x2, x3, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   EVENSPACEDWITHDIFF_IN_GA(.(X, .(Y, Tail)), Diff) -> U2_GA(X, Y, Tail, Diff, =:=_in_ag(Diff, -(Y, X)))
   U2_GA(X, Y, Tail, Diff, =:=_out_ag(Diff, -(Y, X))) -> EVENSPACEDWITHDIFF_IN_GA(.(Y, Tail), Diff)

The TRS R consists of the following rules:

   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

-(x1, x2)  =  -(x1, x2)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag

EVENSPACEDWITHDIFF_IN_GA(x1, x2)  =  EVENSPACEDWITHDIFF_IN_GA(x1)

U2_GA(x1, x2, x3, x4, x5)  =  U2_GA(x2, x3, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EVENSPACEDWITHDIFF_IN_GA(.(X, .(Y, Tail))) -> U2_GA(Y, Tail, =:=_in_ag(-(Y, X)))
   U2_GA(Y, Tail, =:=_out_ag) -> EVENSPACEDWITHDIFF_IN_GA(.(Y, Tail))

The TRS R consists of the following rules:

   =:=_in_ag(X1) -> =:=_out_ag

The set Q consists of the following terms:

   =:=_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   EVENSPACEDWITHDIFF_IN_GA(.(X, .(Y, Tail))) -> U2_GA(Y, Tail, =:=_in_ag(-(Y, X)))
   U2_GA(Y, Tail, =:=_out_ag) -> EVENSPACEDWITHDIFF_IN_GA(.(Y, Tail))


Used ordering: Polynomial interpretation [POLO]:

   POL(-(x_1, x_2)) = x_1 + x_2
   POL(.(x_1, x_2)) = 1 + 2*x_1 + 2*x_2
   POL(=:=_in_ag(x_1)) = 2 + 2*x_1
   POL(=:=_out_ag) = 2
   POL(EVENSPACEDWITHDIFF_IN_GA(x_1)) = 2 + x_1
   POL(U2_GA(x_1, x_2, x_3)) = 2 + 2*x_1 + 2*x_2 + x_3


----------------------------------------

(14)
Obligation:
Q DP problem:
P is empty.
The TRS R consists of the following rules:

   =:=_in_ag(X1) -> =:=_out_ag

The set Q consists of the following terms:

   =:=_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(16)
YES
