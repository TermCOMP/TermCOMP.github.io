YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/T2fIY.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

slice(g,g,g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) UndefinedPredicateHandlerProof [SOUND, 0 ms]
(2) Prolog
(3) PrologToPiTRSProof [SOUND, 0 ms]
(4) PiTRS
(5) DependencyPairsProof [EQUIVALENT, 10 ms]
(6) PiDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) PiDP
(11) PiDPToQDPProof [SOUND, 7 ms]
(12) QDP
(13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
Clauses:

slice(.(X, X1), 1, 1, .(X, [])).
slice(.(X, Xs), 1, K, .(X, Ys)) :- ','(>(K, 1), ','(is(K1, -(K, 1)), slice(Xs, 1, K1, Ys))).
slice(.(X2, Xs), I, K, Ys) :- ','(>(I, 1), ','(is(I1, -(I, 1)), ','(is(K1, -(K, 1)), slice(Xs, I1, K1, Ys)))).


Query: slice(g,g,g,a)
----------------------------------------

(1) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

slice(.(X, X1), 1, 1, .(X, [])).
slice(.(X, Xs), 1, K, .(X, Ys)) :- ','(>(K, 1), ','(is(K1, -(K, 1)), slice(Xs, 1, K1, Ys))).
slice(.(X2, Xs), I, K, Ys) :- ','(>(I, 1), ','(is(I1, -(I, 1)), ','(is(K1, -(K, 1)), slice(Xs, I1, K1, Ys)))).
>(X0, X1).
is(X0, X1).


Query: slice(g,g,g,a)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

slice_in_4: (b,b,b,f) (b,b,f,f) (b,f,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   slice_in_ggga(.(X, X1), 1, 1, .(X, [])) -> slice_out_ggga(.(X, X1), 1, 1, .(X, []))
   slice_in_ggga(.(X, Xs), 1, K, .(X, Ys)) -> U1_ggga(X, Xs, K, Ys, >_in_gg(K, 1))
   >_in_gg(X0, X1) -> >_out_gg(X0, X1)
   U1_ggga(X, Xs, K, Ys, >_out_gg(K, 1)) -> U2_ggga(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ggga(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_ggga(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   slice_in_ggaa(.(X, X1), 1, 1, .(X, [])) -> slice_out_ggaa(.(X, X1), 1, 1, .(X, []))
   slice_in_ggaa(.(X, Xs), 1, K, .(X, Ys)) -> U1_ggaa(X, Xs, K, Ys, >_in_ag(K, 1))
   >_in_ag(X0, X1) -> >_out_ag(X0, X1)
   U1_ggaa(X, Xs, K, Ys, >_out_ag(K, 1)) -> U2_ggaa(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_ggaa(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_ggaa(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   slice_in_ggaa(.(X2, Xs), I, K, Ys) -> U4_ggaa(X2, Xs, I, K, Ys, >_in_gg(I, 1))
   U4_ggaa(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> U5_ggaa(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U5_ggaa(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_ggaa(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U6_ggaa(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_ggaa(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   slice_in_gaaa(.(X, X1), 1, 1, .(X, [])) -> slice_out_gaaa(.(X, X1), 1, 1, .(X, []))
   slice_in_gaaa(.(X, Xs), 1, K, .(X, Ys)) -> U1_gaaa(X, Xs, K, Ys, >_in_ag(K, 1))
   U1_gaaa(X, Xs, K, Ys, >_out_ag(K, 1)) -> U2_gaaa(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_gaaa(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_gaaa(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   U3_gaaa(X, Xs, K, Ys, K1, slice_out_ggaa(Xs, 1, K1, Ys)) -> slice_out_gaaa(.(X, Xs), 1, K, .(X, Ys))
   slice_in_gaaa(.(X2, Xs), I, K, Ys) -> U4_gaaa(X2, Xs, I, K, Ys, >_in_ag(I, 1))
   U4_gaaa(X2, Xs, I, K, Ys, >_out_ag(I, 1)) -> U5_gaaa(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U5_gaaa(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_gaaa(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U6_gaaa(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_gaaa(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   U7_gaaa(X2, Xs, I, K, Ys, I1, K1, slice_out_gaaa(Xs, I1, K1, Ys)) -> slice_out_gaaa(.(X2, Xs), I, K, Ys)
   U7_ggaa(X2, Xs, I, K, Ys, I1, K1, slice_out_gaaa(Xs, I1, K1, Ys)) -> slice_out_ggaa(.(X2, Xs), I, K, Ys)
   U3_ggaa(X, Xs, K, Ys, K1, slice_out_ggaa(Xs, 1, K1, Ys)) -> slice_out_ggaa(.(X, Xs), 1, K, .(X, Ys))
   U3_ggga(X, Xs, K, Ys, K1, slice_out_ggaa(Xs, 1, K1, Ys)) -> slice_out_ggga(.(X, Xs), 1, K, .(X, Ys))
   slice_in_ggga(.(X2, Xs), I, K, Ys) -> U4_ggga(X2, Xs, I, K, Ys, >_in_gg(I, 1))
   U4_ggga(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> U5_ggga(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U5_ggga(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_ggga(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U6_ggga(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_ggga(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   U7_ggga(X2, Xs, I, K, Ys, I1, K1, slice_out_gaaa(Xs, I1, K1, Ys)) -> slice_out_ggga(.(X2, Xs), I, K, Ys)

The argument filtering Pi contains the following mapping:
slice_in_ggga(x1, x2, x3, x4)  =  slice_in_ggga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

1  =  1

slice_out_ggga(x1, x2, x3, x4)  =  slice_out_ggga(x4)

U1_ggga(x1, x2, x3, x4, x5)  =  U1_ggga(x1, x2, x5)

>_in_gg(x1, x2)  =  >_in_gg(x1, x2)

>_out_gg(x1, x2)  =  >_out_gg

U2_ggga(x1, x2, x3, x4, x5)  =  U2_ggga(x1, x2, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x2)

U3_ggga(x1, x2, x3, x4, x5, x6)  =  U3_ggga(x1, x6)

slice_in_ggaa(x1, x2, x3, x4)  =  slice_in_ggaa(x1, x2)

slice_out_ggaa(x1, x2, x3, x4)  =  slice_out_ggaa(x4)

U1_ggaa(x1, x2, x3, x4, x5)  =  U1_ggaa(x1, x2, x5)

>_in_ag(x1, x2)  =  >_in_ag(x2)

>_out_ag(x1, x2)  =  >_out_ag

U2_ggaa(x1, x2, x3, x4, x5)  =  U2_ggaa(x1, x2, x5)

U3_ggaa(x1, x2, x3, x4, x5, x6)  =  U3_ggaa(x1, x6)

U4_ggaa(x1, x2, x3, x4, x5, x6)  =  U4_ggaa(x2, x6)

U5_ggaa(x1, x2, x3, x4, x5, x6)  =  U5_ggaa(x2, x6)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U6_ggaa(x2, x7)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggaa(x8)

slice_in_gaaa(x1, x2, x3, x4)  =  slice_in_gaaa(x1)

slice_out_gaaa(x1, x2, x3, x4)  =  slice_out_gaaa(x4)

U1_gaaa(x1, x2, x3, x4, x5)  =  U1_gaaa(x1, x2, x5)

U2_gaaa(x1, x2, x3, x4, x5)  =  U2_gaaa(x1, x2, x5)

U3_gaaa(x1, x2, x3, x4, x5, x6)  =  U3_gaaa(x1, x6)

U4_gaaa(x1, x2, x3, x4, x5, x6)  =  U4_gaaa(x2, x6)

U5_gaaa(x1, x2, x3, x4, x5, x6)  =  U5_gaaa(x2, x6)

U6_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U6_gaaa(x2, x7)

U7_gaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_gaaa(x8)

U4_ggga(x1, x2, x3, x4, x5, x6)  =  U4_ggga(x2, x6)

U5_ggga(x1, x2, x3, x4, x5, x6)  =  U5_ggga(x2, x6)

U6_ggga(x1, x2, x3, x4, x5, x6, x7)  =  U6_ggga(x2, x7)

U7_ggga(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggga(x8)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   slice_in_ggga(.(X, X1), 1, 1, .(X, [])) -> slice_out_ggga(.(X, X1), 1, 1, .(X, []))
   slice_in_ggga(.(X, Xs), 1, K, .(X, Ys)) -> U1_ggga(X, Xs, K, Ys, >_in_gg(K, 1))
   >_in_gg(X0, X1) -> >_out_gg(X0, X1)
   U1_ggga(X, Xs, K, Ys, >_out_gg(K, 1)) -> U2_ggga(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ggga(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_ggga(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   slice_in_ggaa(.(X, X1), 1, 1, .(X, [])) -> slice_out_ggaa(.(X, X1), 1, 1, .(X, []))
   slice_in_ggaa(.(X, Xs), 1, K, .(X, Ys)) -> U1_ggaa(X, Xs, K, Ys, >_in_ag(K, 1))
   >_in_ag(X0, X1) -> >_out_ag(X0, X1)
   U1_ggaa(X, Xs, K, Ys, >_out_ag(K, 1)) -> U2_ggaa(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_ggaa(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_ggaa(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   slice_in_ggaa(.(X2, Xs), I, K, Ys) -> U4_ggaa(X2, Xs, I, K, Ys, >_in_gg(I, 1))
   U4_ggaa(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> U5_ggaa(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U5_ggaa(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_ggaa(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U6_ggaa(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_ggaa(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   slice_in_gaaa(.(X, X1), 1, 1, .(X, [])) -> slice_out_gaaa(.(X, X1), 1, 1, .(X, []))
   slice_in_gaaa(.(X, Xs), 1, K, .(X, Ys)) -> U1_gaaa(X, Xs, K, Ys, >_in_ag(K, 1))
   U1_gaaa(X, Xs, K, Ys, >_out_ag(K, 1)) -> U2_gaaa(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_gaaa(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_gaaa(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   U3_gaaa(X, Xs, K, Ys, K1, slice_out_ggaa(Xs, 1, K1, Ys)) -> slice_out_gaaa(.(X, Xs), 1, K, .(X, Ys))
   slice_in_gaaa(.(X2, Xs), I, K, Ys) -> U4_gaaa(X2, Xs, I, K, Ys, >_in_ag(I, 1))
   U4_gaaa(X2, Xs, I, K, Ys, >_out_ag(I, 1)) -> U5_gaaa(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U5_gaaa(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_gaaa(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U6_gaaa(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_gaaa(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   U7_gaaa(X2, Xs, I, K, Ys, I1, K1, slice_out_gaaa(Xs, I1, K1, Ys)) -> slice_out_gaaa(.(X2, Xs), I, K, Ys)
   U7_ggaa(X2, Xs, I, K, Ys, I1, K1, slice_out_gaaa(Xs, I1, K1, Ys)) -> slice_out_ggaa(.(X2, Xs), I, K, Ys)
   U3_ggaa(X, Xs, K, Ys, K1, slice_out_ggaa(Xs, 1, K1, Ys)) -> slice_out_ggaa(.(X, Xs), 1, K, .(X, Ys))
   U3_ggga(X, Xs, K, Ys, K1, slice_out_ggaa(Xs, 1, K1, Ys)) -> slice_out_ggga(.(X, Xs), 1, K, .(X, Ys))
   slice_in_ggga(.(X2, Xs), I, K, Ys) -> U4_ggga(X2, Xs, I, K, Ys, >_in_gg(I, 1))
   U4_ggga(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> U5_ggga(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U5_ggga(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_ggga(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U6_ggga(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_ggga(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   U7_ggga(X2, Xs, I, K, Ys, I1, K1, slice_out_gaaa(Xs, I1, K1, Ys)) -> slice_out_ggga(.(X2, Xs), I, K, Ys)

The argument filtering Pi contains the following mapping:
slice_in_ggga(x1, x2, x3, x4)  =  slice_in_ggga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

1  =  1

slice_out_ggga(x1, x2, x3, x4)  =  slice_out_ggga(x4)

U1_ggga(x1, x2, x3, x4, x5)  =  U1_ggga(x1, x2, x5)

>_in_gg(x1, x2)  =  >_in_gg(x1, x2)

>_out_gg(x1, x2)  =  >_out_gg

U2_ggga(x1, x2, x3, x4, x5)  =  U2_ggga(x1, x2, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x2)

U3_ggga(x1, x2, x3, x4, x5, x6)  =  U3_ggga(x1, x6)

slice_in_ggaa(x1, x2, x3, x4)  =  slice_in_ggaa(x1, x2)

slice_out_ggaa(x1, x2, x3, x4)  =  slice_out_ggaa(x4)

U1_ggaa(x1, x2, x3, x4, x5)  =  U1_ggaa(x1, x2, x5)

>_in_ag(x1, x2)  =  >_in_ag(x2)

>_out_ag(x1, x2)  =  >_out_ag

U2_ggaa(x1, x2, x3, x4, x5)  =  U2_ggaa(x1, x2, x5)

U3_ggaa(x1, x2, x3, x4, x5, x6)  =  U3_ggaa(x1, x6)

U4_ggaa(x1, x2, x3, x4, x5, x6)  =  U4_ggaa(x2, x6)

U5_ggaa(x1, x2, x3, x4, x5, x6)  =  U5_ggaa(x2, x6)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U6_ggaa(x2, x7)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggaa(x8)

slice_in_gaaa(x1, x2, x3, x4)  =  slice_in_gaaa(x1)

slice_out_gaaa(x1, x2, x3, x4)  =  slice_out_gaaa(x4)

U1_gaaa(x1, x2, x3, x4, x5)  =  U1_gaaa(x1, x2, x5)

U2_gaaa(x1, x2, x3, x4, x5)  =  U2_gaaa(x1, x2, x5)

U3_gaaa(x1, x2, x3, x4, x5, x6)  =  U3_gaaa(x1, x6)

U4_gaaa(x1, x2, x3, x4, x5, x6)  =  U4_gaaa(x2, x6)

U5_gaaa(x1, x2, x3, x4, x5, x6)  =  U5_gaaa(x2, x6)

U6_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U6_gaaa(x2, x7)

U7_gaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_gaaa(x8)

U4_ggga(x1, x2, x3, x4, x5, x6)  =  U4_ggga(x2, x6)

U5_ggga(x1, x2, x3, x4, x5, x6)  =  U5_ggga(x2, x6)

U6_ggga(x1, x2, x3, x4, x5, x6, x7)  =  U6_ggga(x2, x7)

U7_ggga(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggga(x8)



----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   SLICE_IN_GGGA(.(X, Xs), 1, K, .(X, Ys)) -> U1_GGGA(X, Xs, K, Ys, >_in_gg(K, 1))
   SLICE_IN_GGGA(.(X, Xs), 1, K, .(X, Ys)) -> >_IN_GG(K, 1)
   U1_GGGA(X, Xs, K, Ys, >_out_gg(K, 1)) -> U2_GGGA(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U1_GGGA(X, Xs, K, Ys, >_out_gg(K, 1)) -> IS_IN_AG(K1, -(K, 1))
   U2_GGGA(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_GGGA(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   U2_GGGA(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GGAA(Xs, 1, K1, Ys)
   SLICE_IN_GGAA(.(X, Xs), 1, K, .(X, Ys)) -> U1_GGAA(X, Xs, K, Ys, >_in_ag(K, 1))
   SLICE_IN_GGAA(.(X, Xs), 1, K, .(X, Ys)) -> >_IN_AG(K, 1)
   U1_GGAA(X, Xs, K, Ys, >_out_ag(K, 1)) -> U2_GGAA(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U1_GGAA(X, Xs, K, Ys, >_out_ag(K, 1)) -> IS_IN_AG(K1, -(K, 1))
   U2_GGAA(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_GGAA(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   U2_GGAA(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GGAA(Xs, 1, K1, Ys)
   SLICE_IN_GGAA(.(X2, Xs), I, K, Ys) -> U4_GGAA(X2, Xs, I, K, Ys, >_in_gg(I, 1))
   SLICE_IN_GGAA(.(X2, Xs), I, K, Ys) -> >_IN_GG(I, 1)
   U4_GGAA(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> U5_GGAA(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U4_GGAA(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> IS_IN_AG(I1, -(I, 1))
   U5_GGAA(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_GGAA(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U5_GGAA(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> IS_IN_AG(K1, -(K, 1))
   U6_GGAA(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_GGAA(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   U6_GGAA(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GAAA(Xs, I1, K1, Ys)
   SLICE_IN_GAAA(.(X, Xs), 1, K, .(X, Ys)) -> U1_GAAA(X, Xs, K, Ys, >_in_ag(K, 1))
   SLICE_IN_GAAA(.(X, Xs), 1, K, .(X, Ys)) -> >_IN_AG(K, 1)
   U1_GAAA(X, Xs, K, Ys, >_out_ag(K, 1)) -> U2_GAAA(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U1_GAAA(X, Xs, K, Ys, >_out_ag(K, 1)) -> IS_IN_AG(K1, -(K, 1))
   U2_GAAA(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_GAAA(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   U2_GAAA(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GGAA(Xs, 1, K1, Ys)
   SLICE_IN_GAAA(.(X2, Xs), I, K, Ys) -> U4_GAAA(X2, Xs, I, K, Ys, >_in_ag(I, 1))
   SLICE_IN_GAAA(.(X2, Xs), I, K, Ys) -> >_IN_AG(I, 1)
   U4_GAAA(X2, Xs, I, K, Ys, >_out_ag(I, 1)) -> U5_GAAA(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U4_GAAA(X2, Xs, I, K, Ys, >_out_ag(I, 1)) -> IS_IN_AG(I1, -(I, 1))
   U5_GAAA(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_GAAA(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U5_GAAA(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> IS_IN_AG(K1, -(K, 1))
   U6_GAAA(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_GAAA(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   U6_GAAA(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GAAA(Xs, I1, K1, Ys)
   SLICE_IN_GGGA(.(X2, Xs), I, K, Ys) -> U4_GGGA(X2, Xs, I, K, Ys, >_in_gg(I, 1))
   SLICE_IN_GGGA(.(X2, Xs), I, K, Ys) -> >_IN_GG(I, 1)
   U4_GGGA(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> U5_GGGA(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U4_GGGA(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> IS_IN_AG(I1, -(I, 1))
   U5_GGGA(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_GGGA(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U5_GGGA(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> IS_IN_AG(K1, -(K, 1))
   U6_GGGA(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_GGGA(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   U6_GGGA(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GAAA(Xs, I1, K1, Ys)

The TRS R consists of the following rules:

   slice_in_ggga(.(X, X1), 1, 1, .(X, [])) -> slice_out_ggga(.(X, X1), 1, 1, .(X, []))
   slice_in_ggga(.(X, Xs), 1, K, .(X, Ys)) -> U1_ggga(X, Xs, K, Ys, >_in_gg(K, 1))
   >_in_gg(X0, X1) -> >_out_gg(X0, X1)
   U1_ggga(X, Xs, K, Ys, >_out_gg(K, 1)) -> U2_ggga(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ggga(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_ggga(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   slice_in_ggaa(.(X, X1), 1, 1, .(X, [])) -> slice_out_ggaa(.(X, X1), 1, 1, .(X, []))
   slice_in_ggaa(.(X, Xs), 1, K, .(X, Ys)) -> U1_ggaa(X, Xs, K, Ys, >_in_ag(K, 1))
   >_in_ag(X0, X1) -> >_out_ag(X0, X1)
   U1_ggaa(X, Xs, K, Ys, >_out_ag(K, 1)) -> U2_ggaa(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_ggaa(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_ggaa(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   slice_in_ggaa(.(X2, Xs), I, K, Ys) -> U4_ggaa(X2, Xs, I, K, Ys, >_in_gg(I, 1))
   U4_ggaa(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> U5_ggaa(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U5_ggaa(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_ggaa(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U6_ggaa(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_ggaa(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   slice_in_gaaa(.(X, X1), 1, 1, .(X, [])) -> slice_out_gaaa(.(X, X1), 1, 1, .(X, []))
   slice_in_gaaa(.(X, Xs), 1, K, .(X, Ys)) -> U1_gaaa(X, Xs, K, Ys, >_in_ag(K, 1))
   U1_gaaa(X, Xs, K, Ys, >_out_ag(K, 1)) -> U2_gaaa(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_gaaa(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_gaaa(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   U3_gaaa(X, Xs, K, Ys, K1, slice_out_ggaa(Xs, 1, K1, Ys)) -> slice_out_gaaa(.(X, Xs), 1, K, .(X, Ys))
   slice_in_gaaa(.(X2, Xs), I, K, Ys) -> U4_gaaa(X2, Xs, I, K, Ys, >_in_ag(I, 1))
   U4_gaaa(X2, Xs, I, K, Ys, >_out_ag(I, 1)) -> U5_gaaa(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U5_gaaa(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_gaaa(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U6_gaaa(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_gaaa(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   U7_gaaa(X2, Xs, I, K, Ys, I1, K1, slice_out_gaaa(Xs, I1, K1, Ys)) -> slice_out_gaaa(.(X2, Xs), I, K, Ys)
   U7_ggaa(X2, Xs, I, K, Ys, I1, K1, slice_out_gaaa(Xs, I1, K1, Ys)) -> slice_out_ggaa(.(X2, Xs), I, K, Ys)
   U3_ggaa(X, Xs, K, Ys, K1, slice_out_ggaa(Xs, 1, K1, Ys)) -> slice_out_ggaa(.(X, Xs), 1, K, .(X, Ys))
   U3_ggga(X, Xs, K, Ys, K1, slice_out_ggaa(Xs, 1, K1, Ys)) -> slice_out_ggga(.(X, Xs), 1, K, .(X, Ys))
   slice_in_ggga(.(X2, Xs), I, K, Ys) -> U4_ggga(X2, Xs, I, K, Ys, >_in_gg(I, 1))
   U4_ggga(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> U5_ggga(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U5_ggga(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_ggga(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U6_ggga(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_ggga(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   U7_ggga(X2, Xs, I, K, Ys, I1, K1, slice_out_gaaa(Xs, I1, K1, Ys)) -> slice_out_ggga(.(X2, Xs), I, K, Ys)

The argument filtering Pi contains the following mapping:
slice_in_ggga(x1, x2, x3, x4)  =  slice_in_ggga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

1  =  1

slice_out_ggga(x1, x2, x3, x4)  =  slice_out_ggga(x4)

U1_ggga(x1, x2, x3, x4, x5)  =  U1_ggga(x1, x2, x5)

>_in_gg(x1, x2)  =  >_in_gg(x1, x2)

>_out_gg(x1, x2)  =  >_out_gg

U2_ggga(x1, x2, x3, x4, x5)  =  U2_ggga(x1, x2, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x2)

U3_ggga(x1, x2, x3, x4, x5, x6)  =  U3_ggga(x1, x6)

slice_in_ggaa(x1, x2, x3, x4)  =  slice_in_ggaa(x1, x2)

slice_out_ggaa(x1, x2, x3, x4)  =  slice_out_ggaa(x4)

U1_ggaa(x1, x2, x3, x4, x5)  =  U1_ggaa(x1, x2, x5)

>_in_ag(x1, x2)  =  >_in_ag(x2)

>_out_ag(x1, x2)  =  >_out_ag

U2_ggaa(x1, x2, x3, x4, x5)  =  U2_ggaa(x1, x2, x5)

U3_ggaa(x1, x2, x3, x4, x5, x6)  =  U3_ggaa(x1, x6)

U4_ggaa(x1, x2, x3, x4, x5, x6)  =  U4_ggaa(x2, x6)

U5_ggaa(x1, x2, x3, x4, x5, x6)  =  U5_ggaa(x2, x6)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U6_ggaa(x2, x7)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggaa(x8)

slice_in_gaaa(x1, x2, x3, x4)  =  slice_in_gaaa(x1)

slice_out_gaaa(x1, x2, x3, x4)  =  slice_out_gaaa(x4)

U1_gaaa(x1, x2, x3, x4, x5)  =  U1_gaaa(x1, x2, x5)

U2_gaaa(x1, x2, x3, x4, x5)  =  U2_gaaa(x1, x2, x5)

U3_gaaa(x1, x2, x3, x4, x5, x6)  =  U3_gaaa(x1, x6)

U4_gaaa(x1, x2, x3, x4, x5, x6)  =  U4_gaaa(x2, x6)

U5_gaaa(x1, x2, x3, x4, x5, x6)  =  U5_gaaa(x2, x6)

U6_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U6_gaaa(x2, x7)

U7_gaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_gaaa(x8)

U4_ggga(x1, x2, x3, x4, x5, x6)  =  U4_ggga(x2, x6)

U5_ggga(x1, x2, x3, x4, x5, x6)  =  U5_ggga(x2, x6)

U6_ggga(x1, x2, x3, x4, x5, x6, x7)  =  U6_ggga(x2, x7)

U7_ggga(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggga(x8)

SLICE_IN_GGGA(x1, x2, x3, x4)  =  SLICE_IN_GGGA(x1, x2, x3)

U1_GGGA(x1, x2, x3, x4, x5)  =  U1_GGGA(x1, x2, x5)

>_IN_GG(x1, x2)  =  >_IN_GG(x1, x2)

U2_GGGA(x1, x2, x3, x4, x5)  =  U2_GGGA(x1, x2, x5)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U3_GGGA(x1, x2, x3, x4, x5, x6)  =  U3_GGGA(x1, x6)

SLICE_IN_GGAA(x1, x2, x3, x4)  =  SLICE_IN_GGAA(x1, x2)

U1_GGAA(x1, x2, x3, x4, x5)  =  U1_GGAA(x1, x2, x5)

>_IN_AG(x1, x2)  =  >_IN_AG(x2)

U2_GGAA(x1, x2, x3, x4, x5)  =  U2_GGAA(x1, x2, x5)

U3_GGAA(x1, x2, x3, x4, x5, x6)  =  U3_GGAA(x1, x6)

U4_GGAA(x1, x2, x3, x4, x5, x6)  =  U4_GGAA(x2, x6)

U5_GGAA(x1, x2, x3, x4, x5, x6)  =  U5_GGAA(x2, x6)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7)  =  U6_GGAA(x2, x7)

U7_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_GGAA(x8)

SLICE_IN_GAAA(x1, x2, x3, x4)  =  SLICE_IN_GAAA(x1)

U1_GAAA(x1, x2, x3, x4, x5)  =  U1_GAAA(x1, x2, x5)

U2_GAAA(x1, x2, x3, x4, x5)  =  U2_GAAA(x1, x2, x5)

U3_GAAA(x1, x2, x3, x4, x5, x6)  =  U3_GAAA(x1, x6)

U4_GAAA(x1, x2, x3, x4, x5, x6)  =  U4_GAAA(x2, x6)

U5_GAAA(x1, x2, x3, x4, x5, x6)  =  U5_GAAA(x2, x6)

U6_GAAA(x1, x2, x3, x4, x5, x6, x7)  =  U6_GAAA(x2, x7)

U7_GAAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_GAAA(x8)

U4_GGGA(x1, x2, x3, x4, x5, x6)  =  U4_GGGA(x2, x6)

U5_GGGA(x1, x2, x3, x4, x5, x6)  =  U5_GGGA(x2, x6)

U6_GGGA(x1, x2, x3, x4, x5, x6, x7)  =  U6_GGGA(x2, x7)

U7_GGGA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_GGGA(x8)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   SLICE_IN_GGGA(.(X, Xs), 1, K, .(X, Ys)) -> U1_GGGA(X, Xs, K, Ys, >_in_gg(K, 1))
   SLICE_IN_GGGA(.(X, Xs), 1, K, .(X, Ys)) -> >_IN_GG(K, 1)
   U1_GGGA(X, Xs, K, Ys, >_out_gg(K, 1)) -> U2_GGGA(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U1_GGGA(X, Xs, K, Ys, >_out_gg(K, 1)) -> IS_IN_AG(K1, -(K, 1))
   U2_GGGA(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_GGGA(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   U2_GGGA(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GGAA(Xs, 1, K1, Ys)
   SLICE_IN_GGAA(.(X, Xs), 1, K, .(X, Ys)) -> U1_GGAA(X, Xs, K, Ys, >_in_ag(K, 1))
   SLICE_IN_GGAA(.(X, Xs), 1, K, .(X, Ys)) -> >_IN_AG(K, 1)
   U1_GGAA(X, Xs, K, Ys, >_out_ag(K, 1)) -> U2_GGAA(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U1_GGAA(X, Xs, K, Ys, >_out_ag(K, 1)) -> IS_IN_AG(K1, -(K, 1))
   U2_GGAA(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_GGAA(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   U2_GGAA(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GGAA(Xs, 1, K1, Ys)
   SLICE_IN_GGAA(.(X2, Xs), I, K, Ys) -> U4_GGAA(X2, Xs, I, K, Ys, >_in_gg(I, 1))
   SLICE_IN_GGAA(.(X2, Xs), I, K, Ys) -> >_IN_GG(I, 1)
   U4_GGAA(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> U5_GGAA(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U4_GGAA(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> IS_IN_AG(I1, -(I, 1))
   U5_GGAA(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_GGAA(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U5_GGAA(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> IS_IN_AG(K1, -(K, 1))
   U6_GGAA(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_GGAA(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   U6_GGAA(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GAAA(Xs, I1, K1, Ys)
   SLICE_IN_GAAA(.(X, Xs), 1, K, .(X, Ys)) -> U1_GAAA(X, Xs, K, Ys, >_in_ag(K, 1))
   SLICE_IN_GAAA(.(X, Xs), 1, K, .(X, Ys)) -> >_IN_AG(K, 1)
   U1_GAAA(X, Xs, K, Ys, >_out_ag(K, 1)) -> U2_GAAA(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U1_GAAA(X, Xs, K, Ys, >_out_ag(K, 1)) -> IS_IN_AG(K1, -(K, 1))
   U2_GAAA(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_GAAA(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   U2_GAAA(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GGAA(Xs, 1, K1, Ys)
   SLICE_IN_GAAA(.(X2, Xs), I, K, Ys) -> U4_GAAA(X2, Xs, I, K, Ys, >_in_ag(I, 1))
   SLICE_IN_GAAA(.(X2, Xs), I, K, Ys) -> >_IN_AG(I, 1)
   U4_GAAA(X2, Xs, I, K, Ys, >_out_ag(I, 1)) -> U5_GAAA(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U4_GAAA(X2, Xs, I, K, Ys, >_out_ag(I, 1)) -> IS_IN_AG(I1, -(I, 1))
   U5_GAAA(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_GAAA(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U5_GAAA(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> IS_IN_AG(K1, -(K, 1))
   U6_GAAA(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_GAAA(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   U6_GAAA(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GAAA(Xs, I1, K1, Ys)
   SLICE_IN_GGGA(.(X2, Xs), I, K, Ys) -> U4_GGGA(X2, Xs, I, K, Ys, >_in_gg(I, 1))
   SLICE_IN_GGGA(.(X2, Xs), I, K, Ys) -> >_IN_GG(I, 1)
   U4_GGGA(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> U5_GGGA(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U4_GGGA(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> IS_IN_AG(I1, -(I, 1))
   U5_GGGA(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_GGGA(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U5_GGGA(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> IS_IN_AG(K1, -(K, 1))
   U6_GGGA(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_GGGA(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   U6_GGGA(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GAAA(Xs, I1, K1, Ys)

The TRS R consists of the following rules:

   slice_in_ggga(.(X, X1), 1, 1, .(X, [])) -> slice_out_ggga(.(X, X1), 1, 1, .(X, []))
   slice_in_ggga(.(X, Xs), 1, K, .(X, Ys)) -> U1_ggga(X, Xs, K, Ys, >_in_gg(K, 1))
   >_in_gg(X0, X1) -> >_out_gg(X0, X1)
   U1_ggga(X, Xs, K, Ys, >_out_gg(K, 1)) -> U2_ggga(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ggga(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_ggga(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   slice_in_ggaa(.(X, X1), 1, 1, .(X, [])) -> slice_out_ggaa(.(X, X1), 1, 1, .(X, []))
   slice_in_ggaa(.(X, Xs), 1, K, .(X, Ys)) -> U1_ggaa(X, Xs, K, Ys, >_in_ag(K, 1))
   >_in_ag(X0, X1) -> >_out_ag(X0, X1)
   U1_ggaa(X, Xs, K, Ys, >_out_ag(K, 1)) -> U2_ggaa(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_ggaa(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_ggaa(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   slice_in_ggaa(.(X2, Xs), I, K, Ys) -> U4_ggaa(X2, Xs, I, K, Ys, >_in_gg(I, 1))
   U4_ggaa(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> U5_ggaa(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U5_ggaa(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_ggaa(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U6_ggaa(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_ggaa(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   slice_in_gaaa(.(X, X1), 1, 1, .(X, [])) -> slice_out_gaaa(.(X, X1), 1, 1, .(X, []))
   slice_in_gaaa(.(X, Xs), 1, K, .(X, Ys)) -> U1_gaaa(X, Xs, K, Ys, >_in_ag(K, 1))
   U1_gaaa(X, Xs, K, Ys, >_out_ag(K, 1)) -> U2_gaaa(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_gaaa(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_gaaa(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   U3_gaaa(X, Xs, K, Ys, K1, slice_out_ggaa(Xs, 1, K1, Ys)) -> slice_out_gaaa(.(X, Xs), 1, K, .(X, Ys))
   slice_in_gaaa(.(X2, Xs), I, K, Ys) -> U4_gaaa(X2, Xs, I, K, Ys, >_in_ag(I, 1))
   U4_gaaa(X2, Xs, I, K, Ys, >_out_ag(I, 1)) -> U5_gaaa(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U5_gaaa(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_gaaa(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U6_gaaa(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_gaaa(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   U7_gaaa(X2, Xs, I, K, Ys, I1, K1, slice_out_gaaa(Xs, I1, K1, Ys)) -> slice_out_gaaa(.(X2, Xs), I, K, Ys)
   U7_ggaa(X2, Xs, I, K, Ys, I1, K1, slice_out_gaaa(Xs, I1, K1, Ys)) -> slice_out_ggaa(.(X2, Xs), I, K, Ys)
   U3_ggaa(X, Xs, K, Ys, K1, slice_out_ggaa(Xs, 1, K1, Ys)) -> slice_out_ggaa(.(X, Xs), 1, K, .(X, Ys))
   U3_ggga(X, Xs, K, Ys, K1, slice_out_ggaa(Xs, 1, K1, Ys)) -> slice_out_ggga(.(X, Xs), 1, K, .(X, Ys))
   slice_in_ggga(.(X2, Xs), I, K, Ys) -> U4_ggga(X2, Xs, I, K, Ys, >_in_gg(I, 1))
   U4_ggga(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> U5_ggga(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U5_ggga(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_ggga(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U6_ggga(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_ggga(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   U7_ggga(X2, Xs, I, K, Ys, I1, K1, slice_out_gaaa(Xs, I1, K1, Ys)) -> slice_out_ggga(.(X2, Xs), I, K, Ys)

The argument filtering Pi contains the following mapping:
slice_in_ggga(x1, x2, x3, x4)  =  slice_in_ggga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

1  =  1

slice_out_ggga(x1, x2, x3, x4)  =  slice_out_ggga(x4)

U1_ggga(x1, x2, x3, x4, x5)  =  U1_ggga(x1, x2, x5)

>_in_gg(x1, x2)  =  >_in_gg(x1, x2)

>_out_gg(x1, x2)  =  >_out_gg

U2_ggga(x1, x2, x3, x4, x5)  =  U2_ggga(x1, x2, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x2)

U3_ggga(x1, x2, x3, x4, x5, x6)  =  U3_ggga(x1, x6)

slice_in_ggaa(x1, x2, x3, x4)  =  slice_in_ggaa(x1, x2)

slice_out_ggaa(x1, x2, x3, x4)  =  slice_out_ggaa(x4)

U1_ggaa(x1, x2, x3, x4, x5)  =  U1_ggaa(x1, x2, x5)

>_in_ag(x1, x2)  =  >_in_ag(x2)

>_out_ag(x1, x2)  =  >_out_ag

U2_ggaa(x1, x2, x3, x4, x5)  =  U2_ggaa(x1, x2, x5)

U3_ggaa(x1, x2, x3, x4, x5, x6)  =  U3_ggaa(x1, x6)

U4_ggaa(x1, x2, x3, x4, x5, x6)  =  U4_ggaa(x2, x6)

U5_ggaa(x1, x2, x3, x4, x5, x6)  =  U5_ggaa(x2, x6)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U6_ggaa(x2, x7)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggaa(x8)

slice_in_gaaa(x1, x2, x3, x4)  =  slice_in_gaaa(x1)

slice_out_gaaa(x1, x2, x3, x4)  =  slice_out_gaaa(x4)

U1_gaaa(x1, x2, x3, x4, x5)  =  U1_gaaa(x1, x2, x5)

U2_gaaa(x1, x2, x3, x4, x5)  =  U2_gaaa(x1, x2, x5)

U3_gaaa(x1, x2, x3, x4, x5, x6)  =  U3_gaaa(x1, x6)

U4_gaaa(x1, x2, x3, x4, x5, x6)  =  U4_gaaa(x2, x6)

U5_gaaa(x1, x2, x3, x4, x5, x6)  =  U5_gaaa(x2, x6)

U6_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U6_gaaa(x2, x7)

U7_gaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_gaaa(x8)

U4_ggga(x1, x2, x3, x4, x5, x6)  =  U4_ggga(x2, x6)

U5_ggga(x1, x2, x3, x4, x5, x6)  =  U5_ggga(x2, x6)

U6_ggga(x1, x2, x3, x4, x5, x6, x7)  =  U6_ggga(x2, x7)

U7_ggga(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggga(x8)

SLICE_IN_GGGA(x1, x2, x3, x4)  =  SLICE_IN_GGGA(x1, x2, x3)

U1_GGGA(x1, x2, x3, x4, x5)  =  U1_GGGA(x1, x2, x5)

>_IN_GG(x1, x2)  =  >_IN_GG(x1, x2)

U2_GGGA(x1, x2, x3, x4, x5)  =  U2_GGGA(x1, x2, x5)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U3_GGGA(x1, x2, x3, x4, x5, x6)  =  U3_GGGA(x1, x6)

SLICE_IN_GGAA(x1, x2, x3, x4)  =  SLICE_IN_GGAA(x1, x2)

U1_GGAA(x1, x2, x3, x4, x5)  =  U1_GGAA(x1, x2, x5)

>_IN_AG(x1, x2)  =  >_IN_AG(x2)

U2_GGAA(x1, x2, x3, x4, x5)  =  U2_GGAA(x1, x2, x5)

U3_GGAA(x1, x2, x3, x4, x5, x6)  =  U3_GGAA(x1, x6)

U4_GGAA(x1, x2, x3, x4, x5, x6)  =  U4_GGAA(x2, x6)

U5_GGAA(x1, x2, x3, x4, x5, x6)  =  U5_GGAA(x2, x6)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7)  =  U6_GGAA(x2, x7)

U7_GGAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_GGAA(x8)

SLICE_IN_GAAA(x1, x2, x3, x4)  =  SLICE_IN_GAAA(x1)

U1_GAAA(x1, x2, x3, x4, x5)  =  U1_GAAA(x1, x2, x5)

U2_GAAA(x1, x2, x3, x4, x5)  =  U2_GAAA(x1, x2, x5)

U3_GAAA(x1, x2, x3, x4, x5, x6)  =  U3_GAAA(x1, x6)

U4_GAAA(x1, x2, x3, x4, x5, x6)  =  U4_GAAA(x2, x6)

U5_GAAA(x1, x2, x3, x4, x5, x6)  =  U5_GAAA(x2, x6)

U6_GAAA(x1, x2, x3, x4, x5, x6, x7)  =  U6_GAAA(x2, x7)

U7_GAAA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_GAAA(x8)

U4_GGGA(x1, x2, x3, x4, x5, x6)  =  U4_GGGA(x2, x6)

U5_GGGA(x1, x2, x3, x4, x5, x6)  =  U5_GGGA(x2, x6)

U6_GGGA(x1, x2, x3, x4, x5, x6, x7)  =  U6_GGGA(x2, x7)

U7_GGGA(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_GGGA(x8)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 28 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GGAA(X, Xs, K, Ys, >_out_ag(K, 1)) -> U2_GGAA(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_GGAA(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GGAA(Xs, 1, K1, Ys)
   SLICE_IN_GGAA(.(X, Xs), 1, K, .(X, Ys)) -> U1_GGAA(X, Xs, K, Ys, >_in_ag(K, 1))
   SLICE_IN_GGAA(.(X2, Xs), I, K, Ys) -> U4_GGAA(X2, Xs, I, K, Ys, >_in_gg(I, 1))
   U4_GGAA(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> U5_GGAA(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U5_GGAA(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_GGAA(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U6_GGAA(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GAAA(Xs, I1, K1, Ys)
   SLICE_IN_GAAA(.(X, Xs), 1, K, .(X, Ys)) -> U1_GAAA(X, Xs, K, Ys, >_in_ag(K, 1))
   U1_GAAA(X, Xs, K, Ys, >_out_ag(K, 1)) -> U2_GAAA(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_GAAA(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GGAA(Xs, 1, K1, Ys)
   SLICE_IN_GAAA(.(X2, Xs), I, K, Ys) -> U4_GAAA(X2, Xs, I, K, Ys, >_in_ag(I, 1))
   U4_GAAA(X2, Xs, I, K, Ys, >_out_ag(I, 1)) -> U5_GAAA(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U5_GAAA(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_GAAA(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U6_GAAA(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GAAA(Xs, I1, K1, Ys)

The TRS R consists of the following rules:

   slice_in_ggga(.(X, X1), 1, 1, .(X, [])) -> slice_out_ggga(.(X, X1), 1, 1, .(X, []))
   slice_in_ggga(.(X, Xs), 1, K, .(X, Ys)) -> U1_ggga(X, Xs, K, Ys, >_in_gg(K, 1))
   >_in_gg(X0, X1) -> >_out_gg(X0, X1)
   U1_ggga(X, Xs, K, Ys, >_out_gg(K, 1)) -> U2_ggga(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ggga(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_ggga(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   slice_in_ggaa(.(X, X1), 1, 1, .(X, [])) -> slice_out_ggaa(.(X, X1), 1, 1, .(X, []))
   slice_in_ggaa(.(X, Xs), 1, K, .(X, Ys)) -> U1_ggaa(X, Xs, K, Ys, >_in_ag(K, 1))
   >_in_ag(X0, X1) -> >_out_ag(X0, X1)
   U1_ggaa(X, Xs, K, Ys, >_out_ag(K, 1)) -> U2_ggaa(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_ggaa(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_ggaa(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   slice_in_ggaa(.(X2, Xs), I, K, Ys) -> U4_ggaa(X2, Xs, I, K, Ys, >_in_gg(I, 1))
   U4_ggaa(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> U5_ggaa(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U5_ggaa(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_ggaa(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U6_ggaa(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_ggaa(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   slice_in_gaaa(.(X, X1), 1, 1, .(X, [])) -> slice_out_gaaa(.(X, X1), 1, 1, .(X, []))
   slice_in_gaaa(.(X, Xs), 1, K, .(X, Ys)) -> U1_gaaa(X, Xs, K, Ys, >_in_ag(K, 1))
   U1_gaaa(X, Xs, K, Ys, >_out_ag(K, 1)) -> U2_gaaa(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_gaaa(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_gaaa(X, Xs, K, Ys, K1, slice_in_ggaa(Xs, 1, K1, Ys))
   U3_gaaa(X, Xs, K, Ys, K1, slice_out_ggaa(Xs, 1, K1, Ys)) -> slice_out_gaaa(.(X, Xs), 1, K, .(X, Ys))
   slice_in_gaaa(.(X2, Xs), I, K, Ys) -> U4_gaaa(X2, Xs, I, K, Ys, >_in_ag(I, 1))
   U4_gaaa(X2, Xs, I, K, Ys, >_out_ag(I, 1)) -> U5_gaaa(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U5_gaaa(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_gaaa(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U6_gaaa(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_gaaa(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   U7_gaaa(X2, Xs, I, K, Ys, I1, K1, slice_out_gaaa(Xs, I1, K1, Ys)) -> slice_out_gaaa(.(X2, Xs), I, K, Ys)
   U7_ggaa(X2, Xs, I, K, Ys, I1, K1, slice_out_gaaa(Xs, I1, K1, Ys)) -> slice_out_ggaa(.(X2, Xs), I, K, Ys)
   U3_ggaa(X, Xs, K, Ys, K1, slice_out_ggaa(Xs, 1, K1, Ys)) -> slice_out_ggaa(.(X, Xs), 1, K, .(X, Ys))
   U3_ggga(X, Xs, K, Ys, K1, slice_out_ggaa(Xs, 1, K1, Ys)) -> slice_out_ggga(.(X, Xs), 1, K, .(X, Ys))
   slice_in_ggga(.(X2, Xs), I, K, Ys) -> U4_ggga(X2, Xs, I, K, Ys, >_in_gg(I, 1))
   U4_ggga(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> U5_ggga(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U5_ggga(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_ggga(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U6_ggga(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> U7_ggga(X2, Xs, I, K, Ys, I1, K1, slice_in_gaaa(Xs, I1, K1, Ys))
   U7_ggga(X2, Xs, I, K, Ys, I1, K1, slice_out_gaaa(Xs, I1, K1, Ys)) -> slice_out_ggga(.(X2, Xs), I, K, Ys)

The argument filtering Pi contains the following mapping:
slice_in_ggga(x1, x2, x3, x4)  =  slice_in_ggga(x1, x2, x3)

.(x1, x2)  =  .(x1, x2)

1  =  1

slice_out_ggga(x1, x2, x3, x4)  =  slice_out_ggga(x4)

U1_ggga(x1, x2, x3, x4, x5)  =  U1_ggga(x1, x2, x5)

>_in_gg(x1, x2)  =  >_in_gg(x1, x2)

>_out_gg(x1, x2)  =  >_out_gg

U2_ggga(x1, x2, x3, x4, x5)  =  U2_ggga(x1, x2, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x2)

U3_ggga(x1, x2, x3, x4, x5, x6)  =  U3_ggga(x1, x6)

slice_in_ggaa(x1, x2, x3, x4)  =  slice_in_ggaa(x1, x2)

slice_out_ggaa(x1, x2, x3, x4)  =  slice_out_ggaa(x4)

U1_ggaa(x1, x2, x3, x4, x5)  =  U1_ggaa(x1, x2, x5)

>_in_ag(x1, x2)  =  >_in_ag(x2)

>_out_ag(x1, x2)  =  >_out_ag

U2_ggaa(x1, x2, x3, x4, x5)  =  U2_ggaa(x1, x2, x5)

U3_ggaa(x1, x2, x3, x4, x5, x6)  =  U3_ggaa(x1, x6)

U4_ggaa(x1, x2, x3, x4, x5, x6)  =  U4_ggaa(x2, x6)

U5_ggaa(x1, x2, x3, x4, x5, x6)  =  U5_ggaa(x2, x6)

U6_ggaa(x1, x2, x3, x4, x5, x6, x7)  =  U6_ggaa(x2, x7)

U7_ggaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggaa(x8)

slice_in_gaaa(x1, x2, x3, x4)  =  slice_in_gaaa(x1)

slice_out_gaaa(x1, x2, x3, x4)  =  slice_out_gaaa(x4)

U1_gaaa(x1, x2, x3, x4, x5)  =  U1_gaaa(x1, x2, x5)

U2_gaaa(x1, x2, x3, x4, x5)  =  U2_gaaa(x1, x2, x5)

U3_gaaa(x1, x2, x3, x4, x5, x6)  =  U3_gaaa(x1, x6)

U4_gaaa(x1, x2, x3, x4, x5, x6)  =  U4_gaaa(x2, x6)

U5_gaaa(x1, x2, x3, x4, x5, x6)  =  U5_gaaa(x2, x6)

U6_gaaa(x1, x2, x3, x4, x5, x6, x7)  =  U6_gaaa(x2, x7)

U7_gaaa(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_gaaa(x8)

U4_ggga(x1, x2, x3, x4, x5, x6)  =  U4_ggga(x2, x6)

U5_ggga(x1, x2, x3, x4, x5, x6)  =  U5_ggga(x2, x6)

U6_ggga(x1, x2, x3, x4, x5, x6, x7)  =  U6_ggga(x2, x7)

U7_ggga(x1, x2, x3, x4, x5, x6, x7, x8)  =  U7_ggga(x8)

SLICE_IN_GGAA(x1, x2, x3, x4)  =  SLICE_IN_GGAA(x1, x2)

U1_GGAA(x1, x2, x3, x4, x5)  =  U1_GGAA(x1, x2, x5)

U2_GGAA(x1, x2, x3, x4, x5)  =  U2_GGAA(x1, x2, x5)

U4_GGAA(x1, x2, x3, x4, x5, x6)  =  U4_GGAA(x2, x6)

U5_GGAA(x1, x2, x3, x4, x5, x6)  =  U5_GGAA(x2, x6)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7)  =  U6_GGAA(x2, x7)

SLICE_IN_GAAA(x1, x2, x3, x4)  =  SLICE_IN_GAAA(x1)

U1_GAAA(x1, x2, x3, x4, x5)  =  U1_GAAA(x1, x2, x5)

U2_GAAA(x1, x2, x3, x4, x5)  =  U2_GAAA(x1, x2, x5)

U4_GAAA(x1, x2, x3, x4, x5, x6)  =  U4_GAAA(x2, x6)

U5_GAAA(x1, x2, x3, x4, x5, x6)  =  U5_GAAA(x2, x6)

U6_GAAA(x1, x2, x3, x4, x5, x6, x7)  =  U6_GAAA(x2, x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GGAA(X, Xs, K, Ys, >_out_ag(K, 1)) -> U2_GGAA(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_GGAA(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GGAA(Xs, 1, K1, Ys)
   SLICE_IN_GGAA(.(X, Xs), 1, K, .(X, Ys)) -> U1_GGAA(X, Xs, K, Ys, >_in_ag(K, 1))
   SLICE_IN_GGAA(.(X2, Xs), I, K, Ys) -> U4_GGAA(X2, Xs, I, K, Ys, >_in_gg(I, 1))
   U4_GGAA(X2, Xs, I, K, Ys, >_out_gg(I, 1)) -> U5_GGAA(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U5_GGAA(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_GGAA(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U6_GGAA(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GAAA(Xs, I1, K1, Ys)
   SLICE_IN_GAAA(.(X, Xs), 1, K, .(X, Ys)) -> U1_GAAA(X, Xs, K, Ys, >_in_ag(K, 1))
   U1_GAAA(X, Xs, K, Ys, >_out_ag(K, 1)) -> U2_GAAA(X, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_GAAA(X, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GGAA(Xs, 1, K1, Ys)
   SLICE_IN_GAAA(.(X2, Xs), I, K, Ys) -> U4_GAAA(X2, Xs, I, K, Ys, >_in_ag(I, 1))
   U4_GAAA(X2, Xs, I, K, Ys, >_out_ag(I, 1)) -> U5_GAAA(X2, Xs, I, K, Ys, is_in_ag(I1, -(I, 1)))
   U5_GAAA(X2, Xs, I, K, Ys, is_out_ag(I1, -(I, 1))) -> U6_GAAA(X2, Xs, I, K, Ys, I1, is_in_ag(K1, -(K, 1)))
   U6_GAAA(X2, Xs, I, K, Ys, I1, is_out_ag(K1, -(K, 1))) -> SLICE_IN_GAAA(Xs, I1, K1, Ys)

The TRS R consists of the following rules:

   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   >_in_ag(X0, X1) -> >_out_ag(X0, X1)
   >_in_gg(X0, X1) -> >_out_gg(X0, X1)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

1  =  1

>_in_gg(x1, x2)  =  >_in_gg(x1, x2)

>_out_gg(x1, x2)  =  >_out_gg

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x2)

>_in_ag(x1, x2)  =  >_in_ag(x2)

>_out_ag(x1, x2)  =  >_out_ag

SLICE_IN_GGAA(x1, x2, x3, x4)  =  SLICE_IN_GGAA(x1, x2)

U1_GGAA(x1, x2, x3, x4, x5)  =  U1_GGAA(x1, x2, x5)

U2_GGAA(x1, x2, x3, x4, x5)  =  U2_GGAA(x1, x2, x5)

U4_GGAA(x1, x2, x3, x4, x5, x6)  =  U4_GGAA(x2, x6)

U5_GGAA(x1, x2, x3, x4, x5, x6)  =  U5_GGAA(x2, x6)

U6_GGAA(x1, x2, x3, x4, x5, x6, x7)  =  U6_GGAA(x2, x7)

SLICE_IN_GAAA(x1, x2, x3, x4)  =  SLICE_IN_GAAA(x1)

U1_GAAA(x1, x2, x3, x4, x5)  =  U1_GAAA(x1, x2, x5)

U2_GAAA(x1, x2, x3, x4, x5)  =  U2_GAAA(x1, x2, x5)

U4_GAAA(x1, x2, x3, x4, x5, x6)  =  U4_GAAA(x2, x6)

U5_GAAA(x1, x2, x3, x4, x5, x6)  =  U5_GAAA(x2, x6)

U6_GAAA(x1, x2, x3, x4, x5, x6, x7)  =  U6_GAAA(x2, x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GGAA(X, Xs, >_out_ag) -> U2_GGAA(X, Xs, is_in_ag(-(1)))
   U2_GGAA(X, Xs, is_out_ag) -> SLICE_IN_GGAA(Xs, 1)
   SLICE_IN_GGAA(.(X, Xs), 1) -> U1_GGAA(X, Xs, >_in_ag(1))
   SLICE_IN_GGAA(.(X2, Xs), I) -> U4_GGAA(Xs, >_in_gg(I, 1))
   U4_GGAA(Xs, >_out_gg) -> U5_GGAA(Xs, is_in_ag(-(1)))
   U5_GGAA(Xs, is_out_ag) -> U6_GGAA(Xs, is_in_ag(-(1)))
   U6_GGAA(Xs, is_out_ag) -> SLICE_IN_GAAA(Xs)
   SLICE_IN_GAAA(.(X, Xs)) -> U1_GAAA(X, Xs, >_in_ag(1))
   U1_GAAA(X, Xs, >_out_ag) -> U2_GAAA(X, Xs, is_in_ag(-(1)))
   U2_GAAA(X, Xs, is_out_ag) -> SLICE_IN_GGAA(Xs, 1)
   SLICE_IN_GAAA(.(X2, Xs)) -> U4_GAAA(Xs, >_in_ag(1))
   U4_GAAA(Xs, >_out_ag) -> U5_GAAA(Xs, is_in_ag(-(1)))
   U5_GAAA(Xs, is_out_ag) -> U6_GAAA(Xs, is_in_ag(-(1)))
   U6_GAAA(Xs, is_out_ag) -> SLICE_IN_GAAA(Xs)

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag
   >_in_ag(X1) -> >_out_ag
   >_in_gg(X0, X1) -> >_out_gg

The set Q consists of the following terms:

   is_in_ag(x0)
   >_in_ag(x0)
   >_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U2_GGAA(X, Xs, is_out_ag) -> SLICE_IN_GGAA(Xs, 1)
The graph contains the following edges 2 >= 1


*SLICE_IN_GGAA(.(X, Xs), 1) -> U1_GGAA(X, Xs, >_in_ag(1))
The graph contains the following edges 1 > 1, 1 > 2


*SLICE_IN_GGAA(.(X2, Xs), I) -> U4_GGAA(Xs, >_in_gg(I, 1))
The graph contains the following edges 1 > 1


*U1_GGAA(X, Xs, >_out_ag) -> U2_GGAA(X, Xs, is_in_ag(-(1)))
The graph contains the following edges 1 >= 1, 2 >= 2


*U2_GAAA(X, Xs, is_out_ag) -> SLICE_IN_GGAA(Xs, 1)
The graph contains the following edges 2 >= 1


*U4_GGAA(Xs, >_out_gg) -> U5_GGAA(Xs, is_in_ag(-(1)))
The graph contains the following edges 1 >= 1


*U5_GGAA(Xs, is_out_ag) -> U6_GGAA(Xs, is_in_ag(-(1)))
The graph contains the following edges 1 >= 1


*U6_GGAA(Xs, is_out_ag) -> SLICE_IN_GAAA(Xs)
The graph contains the following edges 1 >= 1


*U1_GAAA(X, Xs, >_out_ag) -> U2_GAAA(X, Xs, is_in_ag(-(1)))
The graph contains the following edges 1 >= 1, 2 >= 2


*U6_GAAA(Xs, is_out_ag) -> SLICE_IN_GAAA(Xs)
The graph contains the following edges 1 >= 1


*SLICE_IN_GAAA(.(X, Xs)) -> U1_GAAA(X, Xs, >_in_ag(1))
The graph contains the following edges 1 > 1, 1 > 2


*SLICE_IN_GAAA(.(X2, Xs)) -> U4_GAAA(Xs, >_in_ag(1))
The graph contains the following edges 1 > 1


*U4_GAAA(Xs, >_out_ag) -> U5_GAAA(Xs, is_in_ag(-(1)))
The graph contains the following edges 1 >= 1


*U5_GAAA(Xs, is_out_ag) -> U6_GAAA(Xs, is_in_ag(-(1)))
The graph contains the following edges 1 >= 1


----------------------------------------

(14)
YES
