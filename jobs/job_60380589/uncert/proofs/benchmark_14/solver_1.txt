Graph construction failed
Graph construction failed
Graph construction failed
MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/M4gVc.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

q(a,a)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) UndefinedPredicateHandlerProof [SOUND, 0 ms]
(2) Prolog
(3) PrologToPiTRSProof [SOUND, 0 ms]
(4) PiTRS
    (5) DependencyPairsProof [EQUIVALENT, 0 ms]
    (6) PiDP
    (7) DependencyGraphProof [EQUIVALENT, 0 ms]
    (8) PiDP
    (9) UsableRulesProof [EQUIVALENT, 0 ms]
    (10) PiDP
    (11) PiDPToQDPProof [SOUND, 0 ms]
    (12) QDP
    (13) TransformationProof [EQUIVALENT, 0 ms]
    (14) QDP
    (15) UsableRulesProof [EQUIVALENT, 0 ms]
    (16) QDP
    (17) QReductionProof [EQUIVALENT, 0 ms]
    (18) QDP
    (19) NonTerminationLoopProof [COMPLETE, 0 ms]
    (20) NO
(21) PrologToPiTRSProof [SOUND, 0 ms]
(22) PiTRS
    (23) DependencyPairsProof [EQUIVALENT, 0 ms]
    (24) PiDP
    (25) DependencyGraphProof [EQUIVALENT, 0 ms]
    (26) PiDP
    (27) UsableRulesProof [EQUIVALENT, 0 ms]
    (28) PiDP
    (29) PiDPToQDPProof [SOUND, 0 ms]
    (30) QDP
    (31) TransformationProof [EQUIVALENT, 0 ms]
    (32) QDP
    (33) UsableRulesProof [EQUIVALENT, 0 ms]
    (34) QDP
    (35) QReductionProof [EQUIVALENT, 0 ms]
    (36) QDP
    (37) NonTerminationLoopProof [COMPLETE, 0 ms]
    (38) NO


----------------------------------------

(0)
Obligation:
Clauses:

q(X, Y) :- ','(\==(X, Y), p(X, Y)).
p(X, Y) :- ','(==(X, Y), p(X, Y)).
p(X, Y).


Query: q(a,a)
----------------------------------------

(1) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

q(X, Y) :- ','(\==(X, Y), p(X, Y)).
p(X, Y) :- ','(==(X, Y), p(X, Y)).
p(X, Y).
\==(X0, X1).
==(X0, X1).


Query: q(a,a)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

q_in_2: (f,f)

p_in_2: (f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, \==_in_aa(X, Y))
   \==_in_aa(X0, X1) -> \==_out_aa(X0, X1)
   U1_aa(X, Y, \==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> U3_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U3_aa(X, Y, ==_out_aa(X, Y)) -> U4_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> p_out_aa(X, Y)
   U4_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

\==_in_aa(x1, x2)  =  \==_in_aa

\==_out_aa(x1, x2)  =  \==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U4_aa(x1, x2, x3)  =  U4_aa(x3)

p_out_aa(x1, x2)  =  p_out_aa

q_out_aa(x1, x2)  =  q_out_aa





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, \==_in_aa(X, Y))
   \==_in_aa(X0, X1) -> \==_out_aa(X0, X1)
   U1_aa(X, Y, \==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> U3_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U3_aa(X, Y, ==_out_aa(X, Y)) -> U4_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> p_out_aa(X, Y)
   U4_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

\==_in_aa(x1, x2)  =  \==_in_aa

\==_out_aa(x1, x2)  =  \==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U4_aa(x1, x2, x3)  =  U4_aa(x3)

p_out_aa(x1, x2)  =  p_out_aa

q_out_aa(x1, x2)  =  q_out_aa



----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   Q_IN_AA(X, Y) -> U1_AA(X, Y, \==_in_aa(X, Y))
   Q_IN_AA(X, Y) -> \==_IN_AA(X, Y)
   U1_AA(X, Y, \==_out_aa(X, Y)) -> U2_AA(X, Y, p_in_aa(X, Y))
   U1_AA(X, Y, \==_out_aa(X, Y)) -> P_IN_AA(X, Y)
   P_IN_AA(X, Y) -> U3_AA(X, Y, ==_in_aa(X, Y))
   P_IN_AA(X, Y) -> ==_IN_AA(X, Y)
   U3_AA(X, Y, ==_out_aa(X, Y)) -> U4_AA(X, Y, p_in_aa(X, Y))
   U3_AA(X, Y, ==_out_aa(X, Y)) -> P_IN_AA(X, Y)

The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, \==_in_aa(X, Y))
   \==_in_aa(X0, X1) -> \==_out_aa(X0, X1)
   U1_aa(X, Y, \==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> U3_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U3_aa(X, Y, ==_out_aa(X, Y)) -> U4_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> p_out_aa(X, Y)
   U4_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

\==_in_aa(x1, x2)  =  \==_in_aa

\==_out_aa(x1, x2)  =  \==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U4_aa(x1, x2, x3)  =  U4_aa(x3)

p_out_aa(x1, x2)  =  p_out_aa

q_out_aa(x1, x2)  =  q_out_aa

Q_IN_AA(x1, x2)  =  Q_IN_AA

U1_AA(x1, x2, x3)  =  U1_AA(x3)

\==_IN_AA(x1, x2)  =  \==_IN_AA

U2_AA(x1, x2, x3)  =  U2_AA(x3)

P_IN_AA(x1, x2)  =  P_IN_AA

U3_AA(x1, x2, x3)  =  U3_AA(x3)

==_IN_AA(x1, x2)  =  ==_IN_AA

U4_AA(x1, x2, x3)  =  U4_AA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   Q_IN_AA(X, Y) -> U1_AA(X, Y, \==_in_aa(X, Y))
   Q_IN_AA(X, Y) -> \==_IN_AA(X, Y)
   U1_AA(X, Y, \==_out_aa(X, Y)) -> U2_AA(X, Y, p_in_aa(X, Y))
   U1_AA(X, Y, \==_out_aa(X, Y)) -> P_IN_AA(X, Y)
   P_IN_AA(X, Y) -> U3_AA(X, Y, ==_in_aa(X, Y))
   P_IN_AA(X, Y) -> ==_IN_AA(X, Y)
   U3_AA(X, Y, ==_out_aa(X, Y)) -> U4_AA(X, Y, p_in_aa(X, Y))
   U3_AA(X, Y, ==_out_aa(X, Y)) -> P_IN_AA(X, Y)

The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, \==_in_aa(X, Y))
   \==_in_aa(X0, X1) -> \==_out_aa(X0, X1)
   U1_aa(X, Y, \==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> U3_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U3_aa(X, Y, ==_out_aa(X, Y)) -> U4_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> p_out_aa(X, Y)
   U4_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

\==_in_aa(x1, x2)  =  \==_in_aa

\==_out_aa(x1, x2)  =  \==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U4_aa(x1, x2, x3)  =  U4_aa(x3)

p_out_aa(x1, x2)  =  p_out_aa

q_out_aa(x1, x2)  =  q_out_aa

Q_IN_AA(x1, x2)  =  Q_IN_AA

U1_AA(x1, x2, x3)  =  U1_AA(x3)

\==_IN_AA(x1, x2)  =  \==_IN_AA

U2_AA(x1, x2, x3)  =  U2_AA(x3)

P_IN_AA(x1, x2)  =  P_IN_AA

U3_AA(x1, x2, x3)  =  U3_AA(x3)

==_IN_AA(x1, x2)  =  ==_IN_AA

U4_AA(x1, x2, x3)  =  U4_AA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 6 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U3_AA(X, Y, ==_out_aa(X, Y)) -> P_IN_AA(X, Y)
   P_IN_AA(X, Y) -> U3_AA(X, Y, ==_in_aa(X, Y))

The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, \==_in_aa(X, Y))
   \==_in_aa(X0, X1) -> \==_out_aa(X0, X1)
   U1_aa(X, Y, \==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> U3_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U3_aa(X, Y, ==_out_aa(X, Y)) -> U4_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> p_out_aa(X, Y)
   U4_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

\==_in_aa(x1, x2)  =  \==_in_aa

\==_out_aa(x1, x2)  =  \==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U4_aa(x1, x2, x3)  =  U4_aa(x3)

p_out_aa(x1, x2)  =  p_out_aa

q_out_aa(x1, x2)  =  q_out_aa

P_IN_AA(x1, x2)  =  P_IN_AA

U3_AA(x1, x2, x3)  =  U3_AA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U3_AA(X, Y, ==_out_aa(X, Y)) -> P_IN_AA(X, Y)
   P_IN_AA(X, Y) -> U3_AA(X, Y, ==_in_aa(X, Y))

The TRS R consists of the following rules:

   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)

The argument filtering Pi contains the following mapping:
==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

P_IN_AA(x1, x2)  =  P_IN_AA

U3_AA(x1, x2, x3)  =  U3_AA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_AA(==_out_aa) -> P_IN_AA
   P_IN_AA -> U3_AA(==_in_aa)

The TRS R consists of the following rules:

   ==_in_aa -> ==_out_aa

The set Q consists of the following terms:

   ==_in_aa

We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule P_IN_AA -> U3_AA(==_in_aa) at position [0] we obtained the following new rules [LPAR04]:

   (P_IN_AA -> U3_AA(==_out_aa),P_IN_AA -> U3_AA(==_out_aa))


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_AA(==_out_aa) -> P_IN_AA
   P_IN_AA -> U3_AA(==_out_aa)

The TRS R consists of the following rules:

   ==_in_aa -> ==_out_aa

The set Q consists of the following terms:

   ==_in_aa

We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_AA(==_out_aa) -> P_IN_AA
   P_IN_AA -> U3_AA(==_out_aa)

R is empty.
The set Q consists of the following terms:

   ==_in_aa

We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   ==_in_aa


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_AA(==_out_aa) -> P_IN_AA
   P_IN_AA -> U3_AA(==_out_aa)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = P_IN_AA evaluates to  t =P_IN_AA

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

P_IN_AA -> U3_AA(==_out_aa)
with rule P_IN_AA -> U3_AA(==_out_aa) at position [] and matcher [ ]

U3_AA(==_out_aa) -> P_IN_AA
with rule U3_AA(==_out_aa) -> P_IN_AA

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(20)
NO

----------------------------------------

(21) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

q_in_2: (f,f)

p_in_2: (f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, \==_in_aa(X, Y))
   \==_in_aa(X0, X1) -> \==_out_aa(X0, X1)
   U1_aa(X, Y, \==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> U3_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U3_aa(X, Y, ==_out_aa(X, Y)) -> U4_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> p_out_aa(X, Y)
   U4_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

\==_in_aa(x1, x2)  =  \==_in_aa

\==_out_aa(x1, x2)  =  \==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U4_aa(x1, x2, x3)  =  U4_aa(x3)

p_out_aa(x1, x2)  =  p_out_aa

q_out_aa(x1, x2)  =  q_out_aa





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(22)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, \==_in_aa(X, Y))
   \==_in_aa(X0, X1) -> \==_out_aa(X0, X1)
   U1_aa(X, Y, \==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> U3_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U3_aa(X, Y, ==_out_aa(X, Y)) -> U4_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> p_out_aa(X, Y)
   U4_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

\==_in_aa(x1, x2)  =  \==_in_aa

\==_out_aa(x1, x2)  =  \==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U4_aa(x1, x2, x3)  =  U4_aa(x3)

p_out_aa(x1, x2)  =  p_out_aa

q_out_aa(x1, x2)  =  q_out_aa



----------------------------------------

(23) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   Q_IN_AA(X, Y) -> U1_AA(X, Y, \==_in_aa(X, Y))
   Q_IN_AA(X, Y) -> \==_IN_AA(X, Y)
   U1_AA(X, Y, \==_out_aa(X, Y)) -> U2_AA(X, Y, p_in_aa(X, Y))
   U1_AA(X, Y, \==_out_aa(X, Y)) -> P_IN_AA(X, Y)
   P_IN_AA(X, Y) -> U3_AA(X, Y, ==_in_aa(X, Y))
   P_IN_AA(X, Y) -> ==_IN_AA(X, Y)
   U3_AA(X, Y, ==_out_aa(X, Y)) -> U4_AA(X, Y, p_in_aa(X, Y))
   U3_AA(X, Y, ==_out_aa(X, Y)) -> P_IN_AA(X, Y)

The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, \==_in_aa(X, Y))
   \==_in_aa(X0, X1) -> \==_out_aa(X0, X1)
   U1_aa(X, Y, \==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> U3_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U3_aa(X, Y, ==_out_aa(X, Y)) -> U4_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> p_out_aa(X, Y)
   U4_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

\==_in_aa(x1, x2)  =  \==_in_aa

\==_out_aa(x1, x2)  =  \==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U4_aa(x1, x2, x3)  =  U4_aa(x3)

p_out_aa(x1, x2)  =  p_out_aa

q_out_aa(x1, x2)  =  q_out_aa

Q_IN_AA(x1, x2)  =  Q_IN_AA

U1_AA(x1, x2, x3)  =  U1_AA(x3)

\==_IN_AA(x1, x2)  =  \==_IN_AA

U2_AA(x1, x2, x3)  =  U2_AA(x3)

P_IN_AA(x1, x2)  =  P_IN_AA

U3_AA(x1, x2, x3)  =  U3_AA(x3)

==_IN_AA(x1, x2)  =  ==_IN_AA

U4_AA(x1, x2, x3)  =  U4_AA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(24)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   Q_IN_AA(X, Y) -> U1_AA(X, Y, \==_in_aa(X, Y))
   Q_IN_AA(X, Y) -> \==_IN_AA(X, Y)
   U1_AA(X, Y, \==_out_aa(X, Y)) -> U2_AA(X, Y, p_in_aa(X, Y))
   U1_AA(X, Y, \==_out_aa(X, Y)) -> P_IN_AA(X, Y)
   P_IN_AA(X, Y) -> U3_AA(X, Y, ==_in_aa(X, Y))
   P_IN_AA(X, Y) -> ==_IN_AA(X, Y)
   U3_AA(X, Y, ==_out_aa(X, Y)) -> U4_AA(X, Y, p_in_aa(X, Y))
   U3_AA(X, Y, ==_out_aa(X, Y)) -> P_IN_AA(X, Y)

The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, \==_in_aa(X, Y))
   \==_in_aa(X0, X1) -> \==_out_aa(X0, X1)
   U1_aa(X, Y, \==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> U3_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U3_aa(X, Y, ==_out_aa(X, Y)) -> U4_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> p_out_aa(X, Y)
   U4_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

\==_in_aa(x1, x2)  =  \==_in_aa

\==_out_aa(x1, x2)  =  \==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U4_aa(x1, x2, x3)  =  U4_aa(x3)

p_out_aa(x1, x2)  =  p_out_aa

q_out_aa(x1, x2)  =  q_out_aa

Q_IN_AA(x1, x2)  =  Q_IN_AA

U1_AA(x1, x2, x3)  =  U1_AA(x3)

\==_IN_AA(x1, x2)  =  \==_IN_AA

U2_AA(x1, x2, x3)  =  U2_AA(x3)

P_IN_AA(x1, x2)  =  P_IN_AA

U3_AA(x1, x2, x3)  =  U3_AA(x3)

==_IN_AA(x1, x2)  =  ==_IN_AA

U4_AA(x1, x2, x3)  =  U4_AA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(25) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 6 less nodes.
----------------------------------------

(26)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U3_AA(X, Y, ==_out_aa(X, Y)) -> P_IN_AA(X, Y)
   P_IN_AA(X, Y) -> U3_AA(X, Y, ==_in_aa(X, Y))

The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, \==_in_aa(X, Y))
   \==_in_aa(X0, X1) -> \==_out_aa(X0, X1)
   U1_aa(X, Y, \==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> U3_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U3_aa(X, Y, ==_out_aa(X, Y)) -> U4_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, Y) -> p_out_aa(X, Y)
   U4_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

\==_in_aa(x1, x2)  =  \==_in_aa

\==_out_aa(x1, x2)  =  \==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U4_aa(x1, x2, x3)  =  U4_aa(x3)

p_out_aa(x1, x2)  =  p_out_aa

q_out_aa(x1, x2)  =  q_out_aa

P_IN_AA(x1, x2)  =  P_IN_AA

U3_AA(x1, x2, x3)  =  U3_AA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(27) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(28)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U3_AA(X, Y, ==_out_aa(X, Y)) -> P_IN_AA(X, Y)
   P_IN_AA(X, Y) -> U3_AA(X, Y, ==_in_aa(X, Y))

The TRS R consists of the following rules:

   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)

The argument filtering Pi contains the following mapping:
==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

P_IN_AA(x1, x2)  =  P_IN_AA

U3_AA(x1, x2, x3)  =  U3_AA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(29) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_AA(==_out_aa) -> P_IN_AA
   P_IN_AA -> U3_AA(==_in_aa)

The TRS R consists of the following rules:

   ==_in_aa -> ==_out_aa

The set Q consists of the following terms:

   ==_in_aa

We have to consider all (P,Q,R)-chains.
----------------------------------------

(31) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule P_IN_AA -> U3_AA(==_in_aa) at position [0] we obtained the following new rules [LPAR04]:

   (P_IN_AA -> U3_AA(==_out_aa),P_IN_AA -> U3_AA(==_out_aa))


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_AA(==_out_aa) -> P_IN_AA
   P_IN_AA -> U3_AA(==_out_aa)

The TRS R consists of the following rules:

   ==_in_aa -> ==_out_aa

The set Q consists of the following terms:

   ==_in_aa

We have to consider all (P,Q,R)-chains.
----------------------------------------

(33) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_AA(==_out_aa) -> P_IN_AA
   P_IN_AA -> U3_AA(==_out_aa)

R is empty.
The set Q consists of the following terms:

   ==_in_aa

We have to consider all (P,Q,R)-chains.
----------------------------------------

(35) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   ==_in_aa


----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_AA(==_out_aa) -> P_IN_AA
   P_IN_AA -> U3_AA(==_out_aa)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(37) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = P_IN_AA evaluates to  t =P_IN_AA

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

P_IN_AA -> U3_AA(==_out_aa)
with rule P_IN_AA -> U3_AA(==_out_aa) at position [] and matcher [ ]

U3_AA(==_out_aa) -> P_IN_AA
with rule U3_AA(==_out_aa) -> P_IN_AA

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(38)
NO
