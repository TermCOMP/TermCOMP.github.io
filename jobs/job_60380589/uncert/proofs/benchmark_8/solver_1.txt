MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/n4sSg.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

e(g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) CutEliminatorProof [SOUND, 0 ms]
(2) Prolog
    (3) UnifyTransformerProof [EQUIVALENT, 0 ms]
    (4) Prolog
    (5) PrologToPiTRSProof [SOUND, 0 ms]
    (6) PiTRS
        (7) DependencyPairsProof [EQUIVALENT, 0 ms]
        (8) PiDP
        (9) DependencyGraphProof [EQUIVALENT, 0 ms]
        (10) AND
            (11) PiDP
                (12) UsableRulesProof [EQUIVALENT, 0 ms]
                (13) PiDP
                (14) PiDPToQDPProof [SOUND, 0 ms]
                (15) QDP
                (16) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (17) YES
            (18) PiDP
                (19) UsableRulesProof [EQUIVALENT, 0 ms]
                (20) PiDP
                (21) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (22) QDP
    (23) PrologToPiTRSProof [SOUND, 0 ms]
    (24) PiTRS
        (25) DependencyPairsProof [EQUIVALENT, 0 ms]
        (26) PiDP
        (27) DependencyGraphProof [EQUIVALENT, 0 ms]
        (28) AND
            (29) PiDP
                (30) UsableRulesProof [EQUIVALENT, 0 ms]
                (31) PiDP
                (32) PiDPToQDPProof [SOUND, 1 ms]
                (33) QDP
                (34) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (35) YES
            (36) PiDP
                (37) UsableRulesProof [EQUIVALENT, 0 ms]
                (38) PiDP
                (39) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (40) QDP
(41) PrologToTRSTransformerProof [SOUND, 0 ms]
(42) QTRS
    (43) Overlay + Local Confluence [EQUIVALENT, 0 ms]
    (44) QTRS
    (45) DependencyPairsProof [EQUIVALENT, 0 ms]
    (46) QDP
    (47) DependencyGraphProof [EQUIVALENT, 0 ms]
    (48) QDP
    (49) UsableRulesProof [EQUIVALENT, 0 ms]
    (50) QDP
    (51) QReductionProof [EQUIVALENT, 0 ms]
    (52) QDP
(53) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(54) TRIPLES
    (55) TriplesToPiDPProof [SOUND, 1 ms]
    (56) PiDP
    (57) DependencyGraphProof [EQUIVALENT, 0 ms]
    (58) PiDP
    (59) PiDPToQDPProof [EQUIVALENT, 0 ms]
    (60) QDP
(61) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(62) IRSwT
    (63) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (64) IRSwT
    (65) IntTRSCompressionProof [EQUIVALENT, 11 ms]
    (66) IRSwT
    (67) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (68) IRSwT
    (69) IRSwTTerminationDigraphProof [EQUIVALENT, 5 ms]
    (70) IRSwT
    (71) FilterProof [EQUIVALENT, 0 ms]
    (72) IntTRS
    (73) IntTRSPeriodicNontermProof [COMPLETE, 3 ms]
    (74) NO


----------------------------------------

(0)
Obligation:
Clauses:

e(X) :- ','(=(Y, f(e, f(o, Y))), ','(!, c(Y, X))).
e(X) :- e(X).
c(f(e, X1), 0).
c(f(X2, X), s(Y)) :- c(X, Y).


Query: e(g)
----------------------------------------

(1) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

e(X) :- ','(=(Y, f(e, f(o, Y))), c(Y, X)).
e(X) :- e(X).
c(f(e, X1), 0).
c(f(X2, X), s(Y)) :- c(X, Y).


Query: e(g)
----------------------------------------

(3) UnifyTransformerProof (EQUIVALENT)
Added a fact for the built-in = predicate [PROLOG].
----------------------------------------

(4)
Obligation:
Clauses:

e(X) :- ','(=(Y, f(e, f(o, Y))), c(Y, X)).
e(X) :- e(X).
c(f(e, X1), 0).
c(f(X2, X), s(Y)) :- c(X, Y).
=(X, X).


Query: e(g)
----------------------------------------

(5) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

e_in_1: (b)

c_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   e_in_g(X) -> U1_g(X, =_in_aa(Y, f(e, f(o, Y))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_g(X, =_out_aa(Y, f(e, f(o, Y)))) -> U2_g(X, c_in_ag(Y, X))
   c_in_ag(f(e, X1), 0) -> c_out_ag(f(e, X1), 0)
   c_in_ag(f(X2, X), s(Y)) -> U4_ag(X2, X, Y, c_in_ag(X, Y))
   U4_ag(X2, X, Y, c_out_ag(X, Y)) -> c_out_ag(f(X2, X), s(Y))
   U2_g(X, c_out_ag(Y, X)) -> e_out_g(X)
   e_in_g(X) -> U3_g(X, e_in_g(X))
   U3_g(X, e_out_g(X)) -> e_out_g(X)

The argument filtering Pi contains the following mapping:
e_in_g(x1)  =  e_in_g(x1)

U1_g(x1, x2)  =  U1_g(x1, x2)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_g(x1, x2)  =  U2_g(x2)

c_in_ag(x1, x2)  =  c_in_ag(x2)

0  =  0

c_out_ag(x1, x2)  =  c_out_ag

s(x1)  =  s(x1)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x4)

e_out_g(x1)  =  e_out_g

U3_g(x1, x2)  =  U3_g(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(6)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   e_in_g(X) -> U1_g(X, =_in_aa(Y, f(e, f(o, Y))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_g(X, =_out_aa(Y, f(e, f(o, Y)))) -> U2_g(X, c_in_ag(Y, X))
   c_in_ag(f(e, X1), 0) -> c_out_ag(f(e, X1), 0)
   c_in_ag(f(X2, X), s(Y)) -> U4_ag(X2, X, Y, c_in_ag(X, Y))
   U4_ag(X2, X, Y, c_out_ag(X, Y)) -> c_out_ag(f(X2, X), s(Y))
   U2_g(X, c_out_ag(Y, X)) -> e_out_g(X)
   e_in_g(X) -> U3_g(X, e_in_g(X))
   U3_g(X, e_out_g(X)) -> e_out_g(X)

The argument filtering Pi contains the following mapping:
e_in_g(x1)  =  e_in_g(x1)

U1_g(x1, x2)  =  U1_g(x1, x2)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_g(x1, x2)  =  U2_g(x2)

c_in_ag(x1, x2)  =  c_in_ag(x2)

0  =  0

c_out_ag(x1, x2)  =  c_out_ag

s(x1)  =  s(x1)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x4)

e_out_g(x1)  =  e_out_g

U3_g(x1, x2)  =  U3_g(x2)



----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   E_IN_G(X) -> U1_G(X, =_in_aa(Y, f(e, f(o, Y))))
   E_IN_G(X) -> =_IN_AA(Y, f(e, f(o, Y)))
   U1_G(X, =_out_aa(Y, f(e, f(o, Y)))) -> U2_G(X, c_in_ag(Y, X))
   U1_G(X, =_out_aa(Y, f(e, f(o, Y)))) -> C_IN_AG(Y, X)
   C_IN_AG(f(X2, X), s(Y)) -> U4_AG(X2, X, Y, c_in_ag(X, Y))
   C_IN_AG(f(X2, X), s(Y)) -> C_IN_AG(X, Y)
   E_IN_G(X) -> U3_G(X, e_in_g(X))
   E_IN_G(X) -> E_IN_G(X)

The TRS R consists of the following rules:

   e_in_g(X) -> U1_g(X, =_in_aa(Y, f(e, f(o, Y))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_g(X, =_out_aa(Y, f(e, f(o, Y)))) -> U2_g(X, c_in_ag(Y, X))
   c_in_ag(f(e, X1), 0) -> c_out_ag(f(e, X1), 0)
   c_in_ag(f(X2, X), s(Y)) -> U4_ag(X2, X, Y, c_in_ag(X, Y))
   U4_ag(X2, X, Y, c_out_ag(X, Y)) -> c_out_ag(f(X2, X), s(Y))
   U2_g(X, c_out_ag(Y, X)) -> e_out_g(X)
   e_in_g(X) -> U3_g(X, e_in_g(X))
   U3_g(X, e_out_g(X)) -> e_out_g(X)

The argument filtering Pi contains the following mapping:
e_in_g(x1)  =  e_in_g(x1)

U1_g(x1, x2)  =  U1_g(x1, x2)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_g(x1, x2)  =  U2_g(x2)

c_in_ag(x1, x2)  =  c_in_ag(x2)

0  =  0

c_out_ag(x1, x2)  =  c_out_ag

s(x1)  =  s(x1)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x4)

e_out_g(x1)  =  e_out_g

U3_g(x1, x2)  =  U3_g(x2)

E_IN_G(x1)  =  E_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x1, x2)

=_IN_AA(x1, x2)  =  =_IN_AA

U2_G(x1, x2)  =  U2_G(x2)

C_IN_AG(x1, x2)  =  C_IN_AG(x2)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x4)

U3_G(x1, x2)  =  U3_G(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   E_IN_G(X) -> U1_G(X, =_in_aa(Y, f(e, f(o, Y))))
   E_IN_G(X) -> =_IN_AA(Y, f(e, f(o, Y)))
   U1_G(X, =_out_aa(Y, f(e, f(o, Y)))) -> U2_G(X, c_in_ag(Y, X))
   U1_G(X, =_out_aa(Y, f(e, f(o, Y)))) -> C_IN_AG(Y, X)
   C_IN_AG(f(X2, X), s(Y)) -> U4_AG(X2, X, Y, c_in_ag(X, Y))
   C_IN_AG(f(X2, X), s(Y)) -> C_IN_AG(X, Y)
   E_IN_G(X) -> U3_G(X, e_in_g(X))
   E_IN_G(X) -> E_IN_G(X)

The TRS R consists of the following rules:

   e_in_g(X) -> U1_g(X, =_in_aa(Y, f(e, f(o, Y))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_g(X, =_out_aa(Y, f(e, f(o, Y)))) -> U2_g(X, c_in_ag(Y, X))
   c_in_ag(f(e, X1), 0) -> c_out_ag(f(e, X1), 0)
   c_in_ag(f(X2, X), s(Y)) -> U4_ag(X2, X, Y, c_in_ag(X, Y))
   U4_ag(X2, X, Y, c_out_ag(X, Y)) -> c_out_ag(f(X2, X), s(Y))
   U2_g(X, c_out_ag(Y, X)) -> e_out_g(X)
   e_in_g(X) -> U3_g(X, e_in_g(X))
   U3_g(X, e_out_g(X)) -> e_out_g(X)

The argument filtering Pi contains the following mapping:
e_in_g(x1)  =  e_in_g(x1)

U1_g(x1, x2)  =  U1_g(x1, x2)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_g(x1, x2)  =  U2_g(x2)

c_in_ag(x1, x2)  =  c_in_ag(x2)

0  =  0

c_out_ag(x1, x2)  =  c_out_ag

s(x1)  =  s(x1)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x4)

e_out_g(x1)  =  e_out_g

U3_g(x1, x2)  =  U3_g(x2)

E_IN_G(x1)  =  E_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x1, x2)

=_IN_AA(x1, x2)  =  =_IN_AA

U2_G(x1, x2)  =  U2_G(x2)

C_IN_AG(x1, x2)  =  C_IN_AG(x2)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x4)

U3_G(x1, x2)  =  U3_G(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(10)
Complex Obligation (AND)

----------------------------------------

(11)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   C_IN_AG(f(X2, X), s(Y)) -> C_IN_AG(X, Y)

The TRS R consists of the following rules:

   e_in_g(X) -> U1_g(X, =_in_aa(Y, f(e, f(o, Y))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_g(X, =_out_aa(Y, f(e, f(o, Y)))) -> U2_g(X, c_in_ag(Y, X))
   c_in_ag(f(e, X1), 0) -> c_out_ag(f(e, X1), 0)
   c_in_ag(f(X2, X), s(Y)) -> U4_ag(X2, X, Y, c_in_ag(X, Y))
   U4_ag(X2, X, Y, c_out_ag(X, Y)) -> c_out_ag(f(X2, X), s(Y))
   U2_g(X, c_out_ag(Y, X)) -> e_out_g(X)
   e_in_g(X) -> U3_g(X, e_in_g(X))
   U3_g(X, e_out_g(X)) -> e_out_g(X)

The argument filtering Pi contains the following mapping:
e_in_g(x1)  =  e_in_g(x1)

U1_g(x1, x2)  =  U1_g(x1, x2)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_g(x1, x2)  =  U2_g(x2)

c_in_ag(x1, x2)  =  c_in_ag(x2)

0  =  0

c_out_ag(x1, x2)  =  c_out_ag

s(x1)  =  s(x1)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x4)

e_out_g(x1)  =  e_out_g

U3_g(x1, x2)  =  U3_g(x2)

C_IN_AG(x1, x2)  =  C_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(12) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(13)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   C_IN_AG(f(X2, X), s(Y)) -> C_IN_AG(X, Y)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

C_IN_AG(x1, x2)  =  C_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(14) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C_IN_AG(s(Y)) -> C_IN_AG(Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(16) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*C_IN_AG(s(Y)) -> C_IN_AG(Y)
The graph contains the following edges 1 > 1


----------------------------------------

(17)
YES

----------------------------------------

(18)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   E_IN_G(X) -> E_IN_G(X)

The TRS R consists of the following rules:

   e_in_g(X) -> U1_g(X, =_in_aa(Y, f(e, f(o, Y))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_g(X, =_out_aa(Y, f(e, f(o, Y)))) -> U2_g(X, c_in_ag(Y, X))
   c_in_ag(f(e, X1), 0) -> c_out_ag(f(e, X1), 0)
   c_in_ag(f(X2, X), s(Y)) -> U4_ag(X2, X, Y, c_in_ag(X, Y))
   U4_ag(X2, X, Y, c_out_ag(X, Y)) -> c_out_ag(f(X2, X), s(Y))
   U2_g(X, c_out_ag(Y, X)) -> e_out_g(X)
   e_in_g(X) -> U3_g(X, e_in_g(X))
   U3_g(X, e_out_g(X)) -> e_out_g(X)

The argument filtering Pi contains the following mapping:
e_in_g(x1)  =  e_in_g(x1)

U1_g(x1, x2)  =  U1_g(x1, x2)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_g(x1, x2)  =  U2_g(x2)

c_in_ag(x1, x2)  =  c_in_ag(x2)

0  =  0

c_out_ag(x1, x2)  =  c_out_ag

s(x1)  =  s(x1)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x4)

e_out_g(x1)  =  e_out_g

U3_g(x1, x2)  =  U3_g(x2)

E_IN_G(x1)  =  E_IN_G(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(20)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   E_IN_G(X) -> E_IN_G(X)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(21) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   E_IN_G(X) -> E_IN_G(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

e_in_1: (b)

c_in_2: (f,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   e_in_g(X) -> U1_g(X, =_in_aa(Y, f(e, f(o, Y))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_g(X, =_out_aa(Y, f(e, f(o, Y)))) -> U2_g(X, c_in_ag(Y, X))
   c_in_ag(f(e, X1), 0) -> c_out_ag(f(e, X1), 0)
   c_in_ag(f(X2, X), s(Y)) -> U4_ag(X2, X, Y, c_in_ag(X, Y))
   U4_ag(X2, X, Y, c_out_ag(X, Y)) -> c_out_ag(f(X2, X), s(Y))
   U2_g(X, c_out_ag(Y, X)) -> e_out_g(X)
   e_in_g(X) -> U3_g(X, e_in_g(X))
   U3_g(X, e_out_g(X)) -> e_out_g(X)

The argument filtering Pi contains the following mapping:
e_in_g(x1)  =  e_in_g(x1)

U1_g(x1, x2)  =  U1_g(x1, x2)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_g(x1, x2)  =  U2_g(x1, x2)

c_in_ag(x1, x2)  =  c_in_ag(x2)

0  =  0

c_out_ag(x1, x2)  =  c_out_ag(x2)

s(x1)  =  s(x1)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x3, x4)

e_out_g(x1)  =  e_out_g(x1)

U3_g(x1, x2)  =  U3_g(x1, x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(24)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   e_in_g(X) -> U1_g(X, =_in_aa(Y, f(e, f(o, Y))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_g(X, =_out_aa(Y, f(e, f(o, Y)))) -> U2_g(X, c_in_ag(Y, X))
   c_in_ag(f(e, X1), 0) -> c_out_ag(f(e, X1), 0)
   c_in_ag(f(X2, X), s(Y)) -> U4_ag(X2, X, Y, c_in_ag(X, Y))
   U4_ag(X2, X, Y, c_out_ag(X, Y)) -> c_out_ag(f(X2, X), s(Y))
   U2_g(X, c_out_ag(Y, X)) -> e_out_g(X)
   e_in_g(X) -> U3_g(X, e_in_g(X))
   U3_g(X, e_out_g(X)) -> e_out_g(X)

The argument filtering Pi contains the following mapping:
e_in_g(x1)  =  e_in_g(x1)

U1_g(x1, x2)  =  U1_g(x1, x2)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_g(x1, x2)  =  U2_g(x1, x2)

c_in_ag(x1, x2)  =  c_in_ag(x2)

0  =  0

c_out_ag(x1, x2)  =  c_out_ag(x2)

s(x1)  =  s(x1)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x3, x4)

e_out_g(x1)  =  e_out_g(x1)

U3_g(x1, x2)  =  U3_g(x1, x2)



----------------------------------------

(25) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   E_IN_G(X) -> U1_G(X, =_in_aa(Y, f(e, f(o, Y))))
   E_IN_G(X) -> =_IN_AA(Y, f(e, f(o, Y)))
   U1_G(X, =_out_aa(Y, f(e, f(o, Y)))) -> U2_G(X, c_in_ag(Y, X))
   U1_G(X, =_out_aa(Y, f(e, f(o, Y)))) -> C_IN_AG(Y, X)
   C_IN_AG(f(X2, X), s(Y)) -> U4_AG(X2, X, Y, c_in_ag(X, Y))
   C_IN_AG(f(X2, X), s(Y)) -> C_IN_AG(X, Y)
   E_IN_G(X) -> U3_G(X, e_in_g(X))
   E_IN_G(X) -> E_IN_G(X)

The TRS R consists of the following rules:

   e_in_g(X) -> U1_g(X, =_in_aa(Y, f(e, f(o, Y))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_g(X, =_out_aa(Y, f(e, f(o, Y)))) -> U2_g(X, c_in_ag(Y, X))
   c_in_ag(f(e, X1), 0) -> c_out_ag(f(e, X1), 0)
   c_in_ag(f(X2, X), s(Y)) -> U4_ag(X2, X, Y, c_in_ag(X, Y))
   U4_ag(X2, X, Y, c_out_ag(X, Y)) -> c_out_ag(f(X2, X), s(Y))
   U2_g(X, c_out_ag(Y, X)) -> e_out_g(X)
   e_in_g(X) -> U3_g(X, e_in_g(X))
   U3_g(X, e_out_g(X)) -> e_out_g(X)

The argument filtering Pi contains the following mapping:
e_in_g(x1)  =  e_in_g(x1)

U1_g(x1, x2)  =  U1_g(x1, x2)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_g(x1, x2)  =  U2_g(x1, x2)

c_in_ag(x1, x2)  =  c_in_ag(x2)

0  =  0

c_out_ag(x1, x2)  =  c_out_ag(x2)

s(x1)  =  s(x1)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x3, x4)

e_out_g(x1)  =  e_out_g(x1)

U3_g(x1, x2)  =  U3_g(x1, x2)

E_IN_G(x1)  =  E_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x1, x2)

=_IN_AA(x1, x2)  =  =_IN_AA

U2_G(x1, x2)  =  U2_G(x1, x2)

C_IN_AG(x1, x2)  =  C_IN_AG(x2)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x3, x4)

U3_G(x1, x2)  =  U3_G(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(26)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   E_IN_G(X) -> U1_G(X, =_in_aa(Y, f(e, f(o, Y))))
   E_IN_G(X) -> =_IN_AA(Y, f(e, f(o, Y)))
   U1_G(X, =_out_aa(Y, f(e, f(o, Y)))) -> U2_G(X, c_in_ag(Y, X))
   U1_G(X, =_out_aa(Y, f(e, f(o, Y)))) -> C_IN_AG(Y, X)
   C_IN_AG(f(X2, X), s(Y)) -> U4_AG(X2, X, Y, c_in_ag(X, Y))
   C_IN_AG(f(X2, X), s(Y)) -> C_IN_AG(X, Y)
   E_IN_G(X) -> U3_G(X, e_in_g(X))
   E_IN_G(X) -> E_IN_G(X)

The TRS R consists of the following rules:

   e_in_g(X) -> U1_g(X, =_in_aa(Y, f(e, f(o, Y))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_g(X, =_out_aa(Y, f(e, f(o, Y)))) -> U2_g(X, c_in_ag(Y, X))
   c_in_ag(f(e, X1), 0) -> c_out_ag(f(e, X1), 0)
   c_in_ag(f(X2, X), s(Y)) -> U4_ag(X2, X, Y, c_in_ag(X, Y))
   U4_ag(X2, X, Y, c_out_ag(X, Y)) -> c_out_ag(f(X2, X), s(Y))
   U2_g(X, c_out_ag(Y, X)) -> e_out_g(X)
   e_in_g(X) -> U3_g(X, e_in_g(X))
   U3_g(X, e_out_g(X)) -> e_out_g(X)

The argument filtering Pi contains the following mapping:
e_in_g(x1)  =  e_in_g(x1)

U1_g(x1, x2)  =  U1_g(x1, x2)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_g(x1, x2)  =  U2_g(x1, x2)

c_in_ag(x1, x2)  =  c_in_ag(x2)

0  =  0

c_out_ag(x1, x2)  =  c_out_ag(x2)

s(x1)  =  s(x1)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x3, x4)

e_out_g(x1)  =  e_out_g(x1)

U3_g(x1, x2)  =  U3_g(x1, x2)

E_IN_G(x1)  =  E_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x1, x2)

=_IN_AA(x1, x2)  =  =_IN_AA

U2_G(x1, x2)  =  U2_G(x1, x2)

C_IN_AG(x1, x2)  =  C_IN_AG(x2)

U4_AG(x1, x2, x3, x4)  =  U4_AG(x3, x4)

U3_G(x1, x2)  =  U3_G(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(27) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(28)
Complex Obligation (AND)

----------------------------------------

(29)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   C_IN_AG(f(X2, X), s(Y)) -> C_IN_AG(X, Y)

The TRS R consists of the following rules:

   e_in_g(X) -> U1_g(X, =_in_aa(Y, f(e, f(o, Y))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_g(X, =_out_aa(Y, f(e, f(o, Y)))) -> U2_g(X, c_in_ag(Y, X))
   c_in_ag(f(e, X1), 0) -> c_out_ag(f(e, X1), 0)
   c_in_ag(f(X2, X), s(Y)) -> U4_ag(X2, X, Y, c_in_ag(X, Y))
   U4_ag(X2, X, Y, c_out_ag(X, Y)) -> c_out_ag(f(X2, X), s(Y))
   U2_g(X, c_out_ag(Y, X)) -> e_out_g(X)
   e_in_g(X) -> U3_g(X, e_in_g(X))
   U3_g(X, e_out_g(X)) -> e_out_g(X)

The argument filtering Pi contains the following mapping:
e_in_g(x1)  =  e_in_g(x1)

U1_g(x1, x2)  =  U1_g(x1, x2)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_g(x1, x2)  =  U2_g(x1, x2)

c_in_ag(x1, x2)  =  c_in_ag(x2)

0  =  0

c_out_ag(x1, x2)  =  c_out_ag(x2)

s(x1)  =  s(x1)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x3, x4)

e_out_g(x1)  =  e_out_g(x1)

U3_g(x1, x2)  =  U3_g(x1, x2)

C_IN_AG(x1, x2)  =  C_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(30) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(31)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   C_IN_AG(f(X2, X), s(Y)) -> C_IN_AG(X, Y)

R is empty.
The argument filtering Pi contains the following mapping:
s(x1)  =  s(x1)

C_IN_AG(x1, x2)  =  C_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(32) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(33)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   C_IN_AG(s(Y)) -> C_IN_AG(Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(34) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*C_IN_AG(s(Y)) -> C_IN_AG(Y)
The graph contains the following edges 1 > 1


----------------------------------------

(35)
YES

----------------------------------------

(36)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   E_IN_G(X) -> E_IN_G(X)

The TRS R consists of the following rules:

   e_in_g(X) -> U1_g(X, =_in_aa(Y, f(e, f(o, Y))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_g(X, =_out_aa(Y, f(e, f(o, Y)))) -> U2_g(X, c_in_ag(Y, X))
   c_in_ag(f(e, X1), 0) -> c_out_ag(f(e, X1), 0)
   c_in_ag(f(X2, X), s(Y)) -> U4_ag(X2, X, Y, c_in_ag(X, Y))
   U4_ag(X2, X, Y, c_out_ag(X, Y)) -> c_out_ag(f(X2, X), s(Y))
   U2_g(X, c_out_ag(Y, X)) -> e_out_g(X)
   e_in_g(X) -> U3_g(X, e_in_g(X))
   U3_g(X, e_out_g(X)) -> e_out_g(X)

The argument filtering Pi contains the following mapping:
e_in_g(x1)  =  e_in_g(x1)

U1_g(x1, x2)  =  U1_g(x1, x2)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_g(x1, x2)  =  U2_g(x1, x2)

c_in_ag(x1, x2)  =  c_in_ag(x2)

0  =  0

c_out_ag(x1, x2)  =  c_out_ag(x2)

s(x1)  =  s(x1)

U4_ag(x1, x2, x3, x4)  =  U4_ag(x3, x4)

e_out_g(x1)  =  e_out_g(x1)

U3_g(x1, x2)  =  U3_g(x1, x2)

E_IN_G(x1)  =  E_IN_G(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(37) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(38)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   E_IN_G(X) -> E_IN_G(X)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(39) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   E_IN_G(X) -> E_IN_G(X)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(41) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(e X)",
                "(',' (= Y (f (e) (f (o) Y))) (',' (!) (c Y X)))"
            ],
            [
                "(e X)",
                "(e X)"
            ],
            [
                "(c (f (e) X1) (0))",
                null
            ],
            [
                "(c (f X2 X) (s Y))",
                "(c X Y)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "12": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (= X10 (f (e) (f (o) X10))) (',' (!_1) (c X10 T6)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": ["X10"],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(e T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(e T1)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(e T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(e T10)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(e T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(e T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes"
        },
        "edges": [
            {
                "from": 2,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 8,
                "label": "PARALLEL"
            },
            {
                "from": 5,
                "to": 9,
                "label": "PARALLEL"
            },
            {
                "from": 8,
                "to": 12,
                "label": "ONLY EVAL with clause\ne(X9) :- ','(=(X10, f(e, f(o, X10))), ','(!_1, c(X10, X9))).\nand substitutionT1 -> T6,\nX9 -> T6"
            },
            {
                "from": 9,
                "to": 17,
                "label": "ONLY EVAL with clause\ne(X16) :- e(X16).\nand substitutionT1 -> T10,\nX16 -> T10"
            },
            {
                "from": 12,
                "to": 14,
                "label": "UNIFY-FAIL\nbecause of non-unification"
            },
            {
                "from": 17,
                "to": 2,
                "label": "INSTANCE with matching:\nT1 -> T10"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(42)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in(T10) -> U1(f2_in(T10), T10)
   U1(f2_out1, T10) -> f2_out1

Q is empty.

----------------------------------------

(43) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(44)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f2_in(T10) -> U1(f2_in(T10), T10)
   U1(f2_out1, T10) -> f2_out1

The set Q consists of the following terms:

   f2_in(x0)
   U1(f2_out1, x0)


----------------------------------------

(45) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN(T10) -> U1^1(f2_in(T10), T10)
   F2_IN(T10) -> F2_IN(T10)

The TRS R consists of the following rules:

   f2_in(T10) -> U1(f2_in(T10), T10)
   U1(f2_out1, T10) -> f2_out1

The set Q consists of the following terms:

   f2_in(x0)
   U1(f2_out1, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(47) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN(T10) -> F2_IN(T10)

The TRS R consists of the following rules:

   f2_in(T10) -> U1(f2_in(T10), T10)
   U1(f2_out1, T10) -> f2_out1

The set Q consists of the following terms:

   f2_in(x0)
   U1(f2_out1, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(49) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN(T10) -> F2_IN(T10)

R is empty.
The set Q consists of the following terms:

   f2_in(x0)
   U1(f2_out1, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(51) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f2_in(x0)
   U1(f2_out1, x0)


----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F2_IN(T10) -> F2_IN(T10)

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(53) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(e X)",
                "(',' (= Y (f (e) (f (o) Y))) (',' (!) (c Y X)))"
            ],
            [
                "(e X)",
                "(e X)"
            ],
            [
                "(c (f (e) X1) (0))",
                null
            ],
            [
                "(c (f X2 X) (s Y))",
                "(c X Y)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "11": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(e T5)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(e T5)"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(e T5)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(e T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(e T5)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [],
                    "exprvars": []
                }
            },
            "16": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(e T5)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(e T1)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(e T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (= X5 (f (e) (f (o) X5))) (',' (!_1) (c X5 T3)))"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(e T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T3"],
                    "free": ["X5"],
                    "exprvars": []
                }
            },
            "18": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (= X16 (f (e) (f (o) X16))) (',' (!_2) (c X16 T10)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": ["X16"],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "20": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(e T14)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T14"],
                    "free": [],
                    "exprvars": []
                }
            },
            "10": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(e T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T3"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 7,
                "label": "ONLY EVAL with clause\ne(X4) :- ','(=(X5, f(e, f(o, X5))), ','(!_1, c(X5, X4))).\nand substitutionT1 -> T3,\nX4 -> T3"
            },
            {
                "from": 7,
                "to": 10,
                "label": "UNIFY-FAIL\nbecause of non-unification"
            },
            {
                "from": 10,
                "to": 11,
                "label": "ONLY EVAL with clause\ne(X8) :- e(X8).\nand substitutionT3 -> T5,\nX8 -> T5"
            },
            {
                "from": 11,
                "to": 13,
                "label": "CASE"
            },
            {
                "from": 13,
                "to": 15,
                "label": "PARALLEL"
            },
            {
                "from": 13,
                "to": 16,
                "label": "PARALLEL"
            },
            {
                "from": 15,
                "to": 18,
                "label": "ONLY EVAL with clause\ne(X15) :- ','(=(X16, f(e, f(o, X16))), ','(!_2, c(X16, X15))).\nand substitutionT5 -> T10,\nX15 -> T10"
            },
            {
                "from": 16,
                "to": 20,
                "label": "ONLY EVAL with clause\ne(X22) :- e(X22).\nand substitutionT5 -> T14,\nX22 -> T14"
            },
            {
                "from": 18,
                "to": 19,
                "label": "UNIFY-FAIL\nbecause of non-unification"
            },
            {
                "from": 20,
                "to": 3,
                "label": "INSTANCE with matching:\nT1 -> T14"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(54)
Obligation:
Triples:

eA(X1) :- eA(X1).

Clauses:

ecA(X1) :- ecA(X1).

Afs:

eA(x1)  =  eA(x1)


----------------------------------------

(55) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

eA_in_1: (b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   EA_IN_G(X1) -> U1_G(X1, eA_in_g(X1))
   EA_IN_G(X1) -> EA_IN_G(X1)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(56)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   EA_IN_G(X1) -> U1_G(X1, eA_in_g(X1))
   EA_IN_G(X1) -> EA_IN_G(X1)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(57) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(58)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   EA_IN_G(X1) -> EA_IN_G(X1)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(59) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   EA_IN_G(X1) -> EA_IN_G(X1)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(61) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(e X)",
                "(',' (= Y (f (e) (f (o) Y))) (',' (!) (c Y X)))"
            ],
            [
                "(e X)",
                "(e X)"
            ],
            [
                "(c (f (e) X1) (0))",
                null
            ],
            [
                "(c (f X2 X) (s Y))",
                "(c X Y)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "22": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(e T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(e T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "23": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (= X10 (f (e) (f (o) X10))) (',' (!_1) (c X10 T6)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T6"],
                    "free": ["X10"],
                    "exprvars": []
                }
            },
            "24": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(e T10)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T10"],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(e T1)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(e T1)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "21": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(e T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 21,
                "label": "PARALLEL"
            },
            {
                "from": 4,
                "to": 22,
                "label": "PARALLEL"
            },
            {
                "from": 21,
                "to": 23,
                "label": "ONLY EVAL with clause\ne(X9) :- ','(=(X10, f(e, f(o, X10))), ','(!_1, c(X10, X9))).\nand substitutionT1 -> T6,\nX9 -> T6"
            },
            {
                "from": 22,
                "to": 25,
                "label": "ONLY EVAL with clause\ne(X16) :- e(X16).\nand substitutionT1 -> T10,\nX16 -> T10"
            },
            {
                "from": 23,
                "to": 24,
                "label": "UNIFY-FAIL\nbecause of non-unification"
            },
            {
                "from": 25,
                "to": 1,
                "label": "INSTANCE with matching:\nT1 -> T10"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(62)
Obligation:
Rules:
f21_out(T1) -> f4_out(T1) :|: TRUE
f4_in(x) -> f22_in(x) :|: TRUE
f4_in(x1) -> f21_in(x1) :|: TRUE
f22_out(x2) -> f4_out(x2) :|: TRUE
f25_in(T10) -> f1_in(T10) :|: TRUE
f1_out(x3) -> f25_out(x3) :|: TRUE
f22_in(x4) -> f25_in(x4) :|: TRUE
f25_out(x5) -> f22_out(x5) :|: TRUE
f4_out(x6) -> f1_out(x6) :|: TRUE
f1_in(x7) -> f4_in(x7) :|: TRUE
Start term: f1_in(T1)

----------------------------------------

(63) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f4_in(x) -> f22_in(x) :|: TRUE
f25_in(T10) -> f1_in(T10) :|: TRUE
f22_in(x4) -> f25_in(x4) :|: TRUE
f1_in(x7) -> f4_in(x7) :|: TRUE


----------------------------------------

(64)
Obligation:
Rules:
f4_in(x) -> f22_in(x) :|: TRUE
f25_in(T10) -> f1_in(T10) :|: TRUE
f22_in(x4) -> f25_in(x4) :|: TRUE
f1_in(x7) -> f4_in(x7) :|: TRUE

----------------------------------------

(65) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(66)
Obligation:
Rules:
f4_in(x:0) -> f4_in(x:0) :|: TRUE

----------------------------------------

(67) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(68)
Obligation:
Rules:
f4_in(x:0) -> f4_in(x:0) :|: TRUE

----------------------------------------

(69) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f4_in(x:0) -> f4_in(x:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(70)
Obligation:

Termination digraph:
Nodes:
(1) f4_in(x:0) -> f4_in(x:0) :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(71) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f4_in(VARIABLE)
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(72)
Obligation:
Rules:
f4_in(x:0) -> f4_in(x:0) :|: TRUE

----------------------------------------

(73) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, x:0) -> f(1, x:0) :|: pc = 1 && TRUE
Witness term starting non-terminating reduction: f(1, -8)
----------------------------------------

(74)
NO
