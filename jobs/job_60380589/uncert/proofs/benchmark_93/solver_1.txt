YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/EuYKK.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

min(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) CutEliminatorProof [SOUND, 0 ms]
(2) Prolog
(3) UndefinedPredicateHandlerProof [SOUND, 0 ms]
(4) Prolog
(5) PrologToPiTRSProof [SOUND, 0 ms]
(6) PiTRS
(7) DependencyPairsProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) DependencyGraphProof [EQUIVALENT, 0 ms]
(10) PiDP
(11) UsableRulesProof [EQUIVALENT, 0 ms]
(12) PiDP
(13) PiDPToQDPProof [SOUND, 4 ms]
(14) QDP
(15) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(16) YES


----------------------------------------

(0)
Obligation:
Clauses:

min(.(I, Is), M) :- min(Is, I, M).
min([], Min, Min).
min(.(I, Is), Temp, Min) :- ','(min_1(I, Temp, Temp1), min(Is, Temp1, Min)).
min_1(I, J, I) :- ','(>=(J, I), !).
min_1(I, J, J) :- <(J, I).


Query: min(g,a)
----------------------------------------

(1) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

min(.(I, Is), M) :- min(Is, I, M).
min([], Min, Min).
min(.(I, Is), Temp, Min) :- ','(min_1(I, Temp, Temp1), min(Is, Temp1, Min)).
min_1(I, J, I) :- >=(J, I).
min_1(I, J, J) :- <(J, I).


Query: min(g,a)
----------------------------------------

(3) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(4)
Obligation:
Clauses:

min(.(I, Is), M) :- min(Is, I, M).
min([], Min, Min).
min(.(I, Is), Temp, Min) :- ','(min_1(I, Temp, Temp1), min(Is, Temp1, Min)).
min_1(I, J, I) :- >=(J, I).
min_1(I, J, J) :- <(J, I).
>=(X0, X1).
<(X0, X1).


Query: min(g,a)
----------------------------------------

(5) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

min_in_2: (b,f)

min_in_3: (b,b,f)

min_1_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   min_in_ga(.(I, Is), M) -> U1_ga(I, Is, M, min_in_gga(Is, I, M))
   min_in_gga([], Min, Min) -> min_out_gga([], Min, Min)
   min_in_gga(.(I, Is), Temp, Min) -> U2_gga(I, Is, Temp, Min, min_1_in_gga(I, Temp, Temp1))
   min_1_in_gga(I, J, I) -> U4_gga(I, J, >=_in_gg(J, I))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U4_gga(I, J, >=_out_gg(J, I)) -> min_1_out_gga(I, J, I)
   min_1_in_gga(I, J, J) -> U5_gga(I, J, <_in_gg(J, I))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U5_gga(I, J, <_out_gg(J, I)) -> min_1_out_gga(I, J, J)
   U2_gga(I, Is, Temp, Min, min_1_out_gga(I, Temp, Temp1)) -> U3_gga(I, Is, Temp, Min, min_in_gga(Is, Temp1, Min))
   U3_gga(I, Is, Temp, Min, min_out_gga(Is, Temp1, Min)) -> min_out_gga(.(I, Is), Temp, Min)
   U1_ga(I, Is, M, min_out_gga(Is, I, M)) -> min_out_ga(.(I, Is), M)

The argument filtering Pi contains the following mapping:
min_in_ga(x1, x2)  =  min_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

min_in_gga(x1, x2, x3)  =  min_in_gga(x1, x2)

[]  =  []

min_out_gga(x1, x2, x3)  =  min_out_gga(x3)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x2, x5)

min_1_in_gga(x1, x2, x3)  =  min_1_in_gga(x1, x2)

U4_gga(x1, x2, x3)  =  U4_gga(x1, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg

min_1_out_gga(x1, x2, x3)  =  min_1_out_gga(x3)

U5_gga(x1, x2, x3)  =  U5_gga(x2, x3)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x5)

min_out_ga(x1, x2)  =  min_out_ga(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(6)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   min_in_ga(.(I, Is), M) -> U1_ga(I, Is, M, min_in_gga(Is, I, M))
   min_in_gga([], Min, Min) -> min_out_gga([], Min, Min)
   min_in_gga(.(I, Is), Temp, Min) -> U2_gga(I, Is, Temp, Min, min_1_in_gga(I, Temp, Temp1))
   min_1_in_gga(I, J, I) -> U4_gga(I, J, >=_in_gg(J, I))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U4_gga(I, J, >=_out_gg(J, I)) -> min_1_out_gga(I, J, I)
   min_1_in_gga(I, J, J) -> U5_gga(I, J, <_in_gg(J, I))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U5_gga(I, J, <_out_gg(J, I)) -> min_1_out_gga(I, J, J)
   U2_gga(I, Is, Temp, Min, min_1_out_gga(I, Temp, Temp1)) -> U3_gga(I, Is, Temp, Min, min_in_gga(Is, Temp1, Min))
   U3_gga(I, Is, Temp, Min, min_out_gga(Is, Temp1, Min)) -> min_out_gga(.(I, Is), Temp, Min)
   U1_ga(I, Is, M, min_out_gga(Is, I, M)) -> min_out_ga(.(I, Is), M)

The argument filtering Pi contains the following mapping:
min_in_ga(x1, x2)  =  min_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

min_in_gga(x1, x2, x3)  =  min_in_gga(x1, x2)

[]  =  []

min_out_gga(x1, x2, x3)  =  min_out_gga(x3)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x2, x5)

min_1_in_gga(x1, x2, x3)  =  min_1_in_gga(x1, x2)

U4_gga(x1, x2, x3)  =  U4_gga(x1, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg

min_1_out_gga(x1, x2, x3)  =  min_1_out_gga(x3)

U5_gga(x1, x2, x3)  =  U5_gga(x2, x3)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x5)

min_out_ga(x1, x2)  =  min_out_ga(x2)



----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MIN_IN_GA(.(I, Is), M) -> U1_GA(I, Is, M, min_in_gga(Is, I, M))
   MIN_IN_GA(.(I, Is), M) -> MIN_IN_GGA(Is, I, M)
   MIN_IN_GGA(.(I, Is), Temp, Min) -> U2_GGA(I, Is, Temp, Min, min_1_in_gga(I, Temp, Temp1))
   MIN_IN_GGA(.(I, Is), Temp, Min) -> MIN_1_IN_GGA(I, Temp, Temp1)
   MIN_1_IN_GGA(I, J, I) -> U4_GGA(I, J, >=_in_gg(J, I))
   MIN_1_IN_GGA(I, J, I) -> >=_IN_GG(J, I)
   MIN_1_IN_GGA(I, J, J) -> U5_GGA(I, J, <_in_gg(J, I))
   MIN_1_IN_GGA(I, J, J) -> <_IN_GG(J, I)
   U2_GGA(I, Is, Temp, Min, min_1_out_gga(I, Temp, Temp1)) -> U3_GGA(I, Is, Temp, Min, min_in_gga(Is, Temp1, Min))
   U2_GGA(I, Is, Temp, Min, min_1_out_gga(I, Temp, Temp1)) -> MIN_IN_GGA(Is, Temp1, Min)

The TRS R consists of the following rules:

   min_in_ga(.(I, Is), M) -> U1_ga(I, Is, M, min_in_gga(Is, I, M))
   min_in_gga([], Min, Min) -> min_out_gga([], Min, Min)
   min_in_gga(.(I, Is), Temp, Min) -> U2_gga(I, Is, Temp, Min, min_1_in_gga(I, Temp, Temp1))
   min_1_in_gga(I, J, I) -> U4_gga(I, J, >=_in_gg(J, I))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U4_gga(I, J, >=_out_gg(J, I)) -> min_1_out_gga(I, J, I)
   min_1_in_gga(I, J, J) -> U5_gga(I, J, <_in_gg(J, I))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U5_gga(I, J, <_out_gg(J, I)) -> min_1_out_gga(I, J, J)
   U2_gga(I, Is, Temp, Min, min_1_out_gga(I, Temp, Temp1)) -> U3_gga(I, Is, Temp, Min, min_in_gga(Is, Temp1, Min))
   U3_gga(I, Is, Temp, Min, min_out_gga(Is, Temp1, Min)) -> min_out_gga(.(I, Is), Temp, Min)
   U1_ga(I, Is, M, min_out_gga(Is, I, M)) -> min_out_ga(.(I, Is), M)

The argument filtering Pi contains the following mapping:
min_in_ga(x1, x2)  =  min_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

min_in_gga(x1, x2, x3)  =  min_in_gga(x1, x2)

[]  =  []

min_out_gga(x1, x2, x3)  =  min_out_gga(x3)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x2, x5)

min_1_in_gga(x1, x2, x3)  =  min_1_in_gga(x1, x2)

U4_gga(x1, x2, x3)  =  U4_gga(x1, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg

min_1_out_gga(x1, x2, x3)  =  min_1_out_gga(x3)

U5_gga(x1, x2, x3)  =  U5_gga(x2, x3)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x5)

min_out_ga(x1, x2)  =  min_out_ga(x2)

MIN_IN_GA(x1, x2)  =  MIN_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x4)

MIN_IN_GGA(x1, x2, x3)  =  MIN_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x2, x5)

MIN_1_IN_GGA(x1, x2, x3)  =  MIN_1_IN_GGA(x1, x2)

U4_GGA(x1, x2, x3)  =  U4_GGA(x1, x3)

>=_IN_GG(x1, x2)  =  >=_IN_GG(x1, x2)

U5_GGA(x1, x2, x3)  =  U5_GGA(x2, x3)

<_IN_GG(x1, x2)  =  <_IN_GG(x1, x2)

U3_GGA(x1, x2, x3, x4, x5)  =  U3_GGA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MIN_IN_GA(.(I, Is), M) -> U1_GA(I, Is, M, min_in_gga(Is, I, M))
   MIN_IN_GA(.(I, Is), M) -> MIN_IN_GGA(Is, I, M)
   MIN_IN_GGA(.(I, Is), Temp, Min) -> U2_GGA(I, Is, Temp, Min, min_1_in_gga(I, Temp, Temp1))
   MIN_IN_GGA(.(I, Is), Temp, Min) -> MIN_1_IN_GGA(I, Temp, Temp1)
   MIN_1_IN_GGA(I, J, I) -> U4_GGA(I, J, >=_in_gg(J, I))
   MIN_1_IN_GGA(I, J, I) -> >=_IN_GG(J, I)
   MIN_1_IN_GGA(I, J, J) -> U5_GGA(I, J, <_in_gg(J, I))
   MIN_1_IN_GGA(I, J, J) -> <_IN_GG(J, I)
   U2_GGA(I, Is, Temp, Min, min_1_out_gga(I, Temp, Temp1)) -> U3_GGA(I, Is, Temp, Min, min_in_gga(Is, Temp1, Min))
   U2_GGA(I, Is, Temp, Min, min_1_out_gga(I, Temp, Temp1)) -> MIN_IN_GGA(Is, Temp1, Min)

The TRS R consists of the following rules:

   min_in_ga(.(I, Is), M) -> U1_ga(I, Is, M, min_in_gga(Is, I, M))
   min_in_gga([], Min, Min) -> min_out_gga([], Min, Min)
   min_in_gga(.(I, Is), Temp, Min) -> U2_gga(I, Is, Temp, Min, min_1_in_gga(I, Temp, Temp1))
   min_1_in_gga(I, J, I) -> U4_gga(I, J, >=_in_gg(J, I))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U4_gga(I, J, >=_out_gg(J, I)) -> min_1_out_gga(I, J, I)
   min_1_in_gga(I, J, J) -> U5_gga(I, J, <_in_gg(J, I))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U5_gga(I, J, <_out_gg(J, I)) -> min_1_out_gga(I, J, J)
   U2_gga(I, Is, Temp, Min, min_1_out_gga(I, Temp, Temp1)) -> U3_gga(I, Is, Temp, Min, min_in_gga(Is, Temp1, Min))
   U3_gga(I, Is, Temp, Min, min_out_gga(Is, Temp1, Min)) -> min_out_gga(.(I, Is), Temp, Min)
   U1_ga(I, Is, M, min_out_gga(Is, I, M)) -> min_out_ga(.(I, Is), M)

The argument filtering Pi contains the following mapping:
min_in_ga(x1, x2)  =  min_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

min_in_gga(x1, x2, x3)  =  min_in_gga(x1, x2)

[]  =  []

min_out_gga(x1, x2, x3)  =  min_out_gga(x3)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x2, x5)

min_1_in_gga(x1, x2, x3)  =  min_1_in_gga(x1, x2)

U4_gga(x1, x2, x3)  =  U4_gga(x1, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg

min_1_out_gga(x1, x2, x3)  =  min_1_out_gga(x3)

U5_gga(x1, x2, x3)  =  U5_gga(x2, x3)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x5)

min_out_ga(x1, x2)  =  min_out_ga(x2)

MIN_IN_GA(x1, x2)  =  MIN_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x4)

MIN_IN_GGA(x1, x2, x3)  =  MIN_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x2, x5)

MIN_1_IN_GGA(x1, x2, x3)  =  MIN_1_IN_GGA(x1, x2)

U4_GGA(x1, x2, x3)  =  U4_GGA(x1, x3)

>=_IN_GG(x1, x2)  =  >=_IN_GG(x1, x2)

U5_GGA(x1, x2, x3)  =  U5_GGA(x2, x3)

<_IN_GG(x1, x2)  =  <_IN_GG(x1, x2)

U3_GGA(x1, x2, x3, x4, x5)  =  U3_GGA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 8 less nodes.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GGA(I, Is, Temp, Min, min_1_out_gga(I, Temp, Temp1)) -> MIN_IN_GGA(Is, Temp1, Min)
   MIN_IN_GGA(.(I, Is), Temp, Min) -> U2_GGA(I, Is, Temp, Min, min_1_in_gga(I, Temp, Temp1))

The TRS R consists of the following rules:

   min_in_ga(.(I, Is), M) -> U1_ga(I, Is, M, min_in_gga(Is, I, M))
   min_in_gga([], Min, Min) -> min_out_gga([], Min, Min)
   min_in_gga(.(I, Is), Temp, Min) -> U2_gga(I, Is, Temp, Min, min_1_in_gga(I, Temp, Temp1))
   min_1_in_gga(I, J, I) -> U4_gga(I, J, >=_in_gg(J, I))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U4_gga(I, J, >=_out_gg(J, I)) -> min_1_out_gga(I, J, I)
   min_1_in_gga(I, J, J) -> U5_gga(I, J, <_in_gg(J, I))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U5_gga(I, J, <_out_gg(J, I)) -> min_1_out_gga(I, J, J)
   U2_gga(I, Is, Temp, Min, min_1_out_gga(I, Temp, Temp1)) -> U3_gga(I, Is, Temp, Min, min_in_gga(Is, Temp1, Min))
   U3_gga(I, Is, Temp, Min, min_out_gga(Is, Temp1, Min)) -> min_out_gga(.(I, Is), Temp, Min)
   U1_ga(I, Is, M, min_out_gga(Is, I, M)) -> min_out_ga(.(I, Is), M)

The argument filtering Pi contains the following mapping:
min_in_ga(x1, x2)  =  min_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

min_in_gga(x1, x2, x3)  =  min_in_gga(x1, x2)

[]  =  []

min_out_gga(x1, x2, x3)  =  min_out_gga(x3)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x2, x5)

min_1_in_gga(x1, x2, x3)  =  min_1_in_gga(x1, x2)

U4_gga(x1, x2, x3)  =  U4_gga(x1, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg

min_1_out_gga(x1, x2, x3)  =  min_1_out_gga(x3)

U5_gga(x1, x2, x3)  =  U5_gga(x2, x3)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x5)

min_out_ga(x1, x2)  =  min_out_ga(x2)

MIN_IN_GGA(x1, x2, x3)  =  MIN_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(12)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GGA(I, Is, Temp, Min, min_1_out_gga(I, Temp, Temp1)) -> MIN_IN_GGA(Is, Temp1, Min)
   MIN_IN_GGA(.(I, Is), Temp, Min) -> U2_GGA(I, Is, Temp, Min, min_1_in_gga(I, Temp, Temp1))

The TRS R consists of the following rules:

   min_1_in_gga(I, J, I) -> U4_gga(I, J, >=_in_gg(J, I))
   min_1_in_gga(I, J, J) -> U5_gga(I, J, <_in_gg(J, I))
   U4_gga(I, J, >=_out_gg(J, I)) -> min_1_out_gga(I, J, I)
   U5_gga(I, J, <_out_gg(J, I)) -> min_1_out_gga(I, J, J)
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

min_1_in_gga(x1, x2, x3)  =  min_1_in_gga(x1, x2)

U4_gga(x1, x2, x3)  =  U4_gga(x1, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg

min_1_out_gga(x1, x2, x3)  =  min_1_out_gga(x3)

U5_gga(x1, x2, x3)  =  U5_gga(x2, x3)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg

MIN_IN_GGA(x1, x2, x3)  =  MIN_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(13) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGA(Is, min_1_out_gga(Temp1)) -> MIN_IN_GGA(Is, Temp1)
   MIN_IN_GGA(.(I, Is), Temp) -> U2_GGA(Is, min_1_in_gga(I, Temp))

The TRS R consists of the following rules:

   min_1_in_gga(I, J) -> U4_gga(I, >=_in_gg(J, I))
   min_1_in_gga(I, J) -> U5_gga(J, <_in_gg(J, I))
   U4_gga(I, >=_out_gg) -> min_1_out_gga(I)
   U5_gga(J, <_out_gg) -> min_1_out_gga(J)
   >=_in_gg(X0, X1) -> >=_out_gg
   <_in_gg(X0, X1) -> <_out_gg

The set Q consists of the following terms:

   min_1_in_gga(x0, x1)
   U4_gga(x0, x1)
   U5_gga(x0, x1)
   >=_in_gg(x0, x1)
   <_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MIN_IN_GGA(.(I, Is), Temp) -> U2_GGA(Is, min_1_in_gga(I, Temp))
The graph contains the following edges 1 > 1


*U2_GGA(Is, min_1_out_gga(Temp1)) -> MIN_IN_GGA(Is, Temp1)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(16)
YES
