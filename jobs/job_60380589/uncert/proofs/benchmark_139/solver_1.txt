YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/LGm1M.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

remove_at(a,g,g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) UndefinedPredicateHandlerProof [SOUND, 0 ms]
(2) Prolog
(3) PrologToPiTRSProof [SOUND, 0 ms]
(4) PiTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) PiDP
(11) PiDPToQDPProof [SOUND, 4 ms]
(12) QDP
(13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
Clauses:

remove_at(X, .(X, Xs), 1, Xs).
remove_at(X, .(Y, Xs), K, .(Y, Ys)) :- ','(>(K, 1), ','(is(K1, -(K, 1)), remove_at(X, Xs, K1, Ys))).


Query: remove_at(a,g,g,a)
----------------------------------------

(1) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

remove_at(X, .(X, Xs), 1, Xs).
remove_at(X, .(Y, Xs), K, .(Y, Ys)) :- ','(>(K, 1), ','(is(K1, -(K, 1)), remove_at(X, Xs, K1, Ys))).
>(X0, X1).
is(X0, X1).


Query: remove_at(a,g,g,a)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

remove_at_in_4: (f,b,b,f) (f,b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   remove_at_in_agga(X, .(X, Xs), 1, Xs) -> remove_at_out_agga(X, .(X, Xs), 1, Xs)
   remove_at_in_agga(X, .(Y, Xs), K, .(Y, Ys)) -> U1_agga(X, Y, Xs, K, Ys, >_in_gg(K, 1))
   >_in_gg(X0, X1) -> >_out_gg(X0, X1)
   U1_agga(X, Y, Xs, K, Ys, >_out_gg(K, 1)) -> U2_agga(X, Y, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_agga(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_agga(X, Y, Xs, K, Ys, K1, remove_at_in_agaa(X, Xs, K1, Ys))
   remove_at_in_agaa(X, .(X, Xs), 1, Xs) -> remove_at_out_agaa(X, .(X, Xs), 1, Xs)
   remove_at_in_agaa(X, .(Y, Xs), K, .(Y, Ys)) -> U1_agaa(X, Y, Xs, K, Ys, >_in_ag(K, 1))
   >_in_ag(X0, X1) -> >_out_ag(X0, X1)
   U1_agaa(X, Y, Xs, K, Ys, >_out_ag(K, 1)) -> U2_agaa(X, Y, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_agaa(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_agaa(X, Y, Xs, K, Ys, K1, remove_at_in_agaa(X, Xs, K1, Ys))
   U3_agaa(X, Y, Xs, K, Ys, K1, remove_at_out_agaa(X, Xs, K1, Ys)) -> remove_at_out_agaa(X, .(Y, Xs), K, .(Y, Ys))
   U3_agga(X, Y, Xs, K, Ys, K1, remove_at_out_agaa(X, Xs, K1, Ys)) -> remove_at_out_agga(X, .(Y, Xs), K, .(Y, Ys))

The argument filtering Pi contains the following mapping:
remove_at_in_agga(x1, x2, x3, x4)  =  remove_at_in_agga(x2, x3)

.(x1, x2)  =  .(x1, x2)

1  =  1

remove_at_out_agga(x1, x2, x3, x4)  =  remove_at_out_agga(x1, x4)

U1_agga(x1, x2, x3, x4, x5, x6)  =  U1_agga(x2, x3, x6)

>_in_gg(x1, x2)  =  >_in_gg(x1, x2)

>_out_gg(x1, x2)  =  >_out_gg

U2_agga(x1, x2, x3, x4, x5, x6)  =  U2_agga(x2, x3, x6)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x2)

U3_agga(x1, x2, x3, x4, x5, x6, x7)  =  U3_agga(x2, x7)

remove_at_in_agaa(x1, x2, x3, x4)  =  remove_at_in_agaa(x2)

remove_at_out_agaa(x1, x2, x3, x4)  =  remove_at_out_agaa(x1, x4)

U1_agaa(x1, x2, x3, x4, x5, x6)  =  U1_agaa(x2, x3, x6)

>_in_ag(x1, x2)  =  >_in_ag(x2)

>_out_ag(x1, x2)  =  >_out_ag

U2_agaa(x1, x2, x3, x4, x5, x6)  =  U2_agaa(x2, x3, x6)

U3_agaa(x1, x2, x3, x4, x5, x6, x7)  =  U3_agaa(x2, x7)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   remove_at_in_agga(X, .(X, Xs), 1, Xs) -> remove_at_out_agga(X, .(X, Xs), 1, Xs)
   remove_at_in_agga(X, .(Y, Xs), K, .(Y, Ys)) -> U1_agga(X, Y, Xs, K, Ys, >_in_gg(K, 1))
   >_in_gg(X0, X1) -> >_out_gg(X0, X1)
   U1_agga(X, Y, Xs, K, Ys, >_out_gg(K, 1)) -> U2_agga(X, Y, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_agga(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_agga(X, Y, Xs, K, Ys, K1, remove_at_in_agaa(X, Xs, K1, Ys))
   remove_at_in_agaa(X, .(X, Xs), 1, Xs) -> remove_at_out_agaa(X, .(X, Xs), 1, Xs)
   remove_at_in_agaa(X, .(Y, Xs), K, .(Y, Ys)) -> U1_agaa(X, Y, Xs, K, Ys, >_in_ag(K, 1))
   >_in_ag(X0, X1) -> >_out_ag(X0, X1)
   U1_agaa(X, Y, Xs, K, Ys, >_out_ag(K, 1)) -> U2_agaa(X, Y, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_agaa(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_agaa(X, Y, Xs, K, Ys, K1, remove_at_in_agaa(X, Xs, K1, Ys))
   U3_agaa(X, Y, Xs, K, Ys, K1, remove_at_out_agaa(X, Xs, K1, Ys)) -> remove_at_out_agaa(X, .(Y, Xs), K, .(Y, Ys))
   U3_agga(X, Y, Xs, K, Ys, K1, remove_at_out_agaa(X, Xs, K1, Ys)) -> remove_at_out_agga(X, .(Y, Xs), K, .(Y, Ys))

The argument filtering Pi contains the following mapping:
remove_at_in_agga(x1, x2, x3, x4)  =  remove_at_in_agga(x2, x3)

.(x1, x2)  =  .(x1, x2)

1  =  1

remove_at_out_agga(x1, x2, x3, x4)  =  remove_at_out_agga(x1, x4)

U1_agga(x1, x2, x3, x4, x5, x6)  =  U1_agga(x2, x3, x6)

>_in_gg(x1, x2)  =  >_in_gg(x1, x2)

>_out_gg(x1, x2)  =  >_out_gg

U2_agga(x1, x2, x3, x4, x5, x6)  =  U2_agga(x2, x3, x6)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x2)

U3_agga(x1, x2, x3, x4, x5, x6, x7)  =  U3_agga(x2, x7)

remove_at_in_agaa(x1, x2, x3, x4)  =  remove_at_in_agaa(x2)

remove_at_out_agaa(x1, x2, x3, x4)  =  remove_at_out_agaa(x1, x4)

U1_agaa(x1, x2, x3, x4, x5, x6)  =  U1_agaa(x2, x3, x6)

>_in_ag(x1, x2)  =  >_in_ag(x2)

>_out_ag(x1, x2)  =  >_out_ag

U2_agaa(x1, x2, x3, x4, x5, x6)  =  U2_agaa(x2, x3, x6)

U3_agaa(x1, x2, x3, x4, x5, x6, x7)  =  U3_agaa(x2, x7)



----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   REMOVE_AT_IN_AGGA(X, .(Y, Xs), K, .(Y, Ys)) -> U1_AGGA(X, Y, Xs, K, Ys, >_in_gg(K, 1))
   REMOVE_AT_IN_AGGA(X, .(Y, Xs), K, .(Y, Ys)) -> >_IN_GG(K, 1)
   U1_AGGA(X, Y, Xs, K, Ys, >_out_gg(K, 1)) -> U2_AGGA(X, Y, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U1_AGGA(X, Y, Xs, K, Ys, >_out_gg(K, 1)) -> IS_IN_AG(K1, -(K, 1))
   U2_AGGA(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_AGGA(X, Y, Xs, K, Ys, K1, remove_at_in_agaa(X, Xs, K1, Ys))
   U2_AGGA(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> REMOVE_AT_IN_AGAA(X, Xs, K1, Ys)
   REMOVE_AT_IN_AGAA(X, .(Y, Xs), K, .(Y, Ys)) -> U1_AGAA(X, Y, Xs, K, Ys, >_in_ag(K, 1))
   REMOVE_AT_IN_AGAA(X, .(Y, Xs), K, .(Y, Ys)) -> >_IN_AG(K, 1)
   U1_AGAA(X, Y, Xs, K, Ys, >_out_ag(K, 1)) -> U2_AGAA(X, Y, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U1_AGAA(X, Y, Xs, K, Ys, >_out_ag(K, 1)) -> IS_IN_AG(K1, -(K, 1))
   U2_AGAA(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_AGAA(X, Y, Xs, K, Ys, K1, remove_at_in_agaa(X, Xs, K1, Ys))
   U2_AGAA(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> REMOVE_AT_IN_AGAA(X, Xs, K1, Ys)

The TRS R consists of the following rules:

   remove_at_in_agga(X, .(X, Xs), 1, Xs) -> remove_at_out_agga(X, .(X, Xs), 1, Xs)
   remove_at_in_agga(X, .(Y, Xs), K, .(Y, Ys)) -> U1_agga(X, Y, Xs, K, Ys, >_in_gg(K, 1))
   >_in_gg(X0, X1) -> >_out_gg(X0, X1)
   U1_agga(X, Y, Xs, K, Ys, >_out_gg(K, 1)) -> U2_agga(X, Y, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_agga(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_agga(X, Y, Xs, K, Ys, K1, remove_at_in_agaa(X, Xs, K1, Ys))
   remove_at_in_agaa(X, .(X, Xs), 1, Xs) -> remove_at_out_agaa(X, .(X, Xs), 1, Xs)
   remove_at_in_agaa(X, .(Y, Xs), K, .(Y, Ys)) -> U1_agaa(X, Y, Xs, K, Ys, >_in_ag(K, 1))
   >_in_ag(X0, X1) -> >_out_ag(X0, X1)
   U1_agaa(X, Y, Xs, K, Ys, >_out_ag(K, 1)) -> U2_agaa(X, Y, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_agaa(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_agaa(X, Y, Xs, K, Ys, K1, remove_at_in_agaa(X, Xs, K1, Ys))
   U3_agaa(X, Y, Xs, K, Ys, K1, remove_at_out_agaa(X, Xs, K1, Ys)) -> remove_at_out_agaa(X, .(Y, Xs), K, .(Y, Ys))
   U3_agga(X, Y, Xs, K, Ys, K1, remove_at_out_agaa(X, Xs, K1, Ys)) -> remove_at_out_agga(X, .(Y, Xs), K, .(Y, Ys))

The argument filtering Pi contains the following mapping:
remove_at_in_agga(x1, x2, x3, x4)  =  remove_at_in_agga(x2, x3)

.(x1, x2)  =  .(x1, x2)

1  =  1

remove_at_out_agga(x1, x2, x3, x4)  =  remove_at_out_agga(x1, x4)

U1_agga(x1, x2, x3, x4, x5, x6)  =  U1_agga(x2, x3, x6)

>_in_gg(x1, x2)  =  >_in_gg(x1, x2)

>_out_gg(x1, x2)  =  >_out_gg

U2_agga(x1, x2, x3, x4, x5, x6)  =  U2_agga(x2, x3, x6)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x2)

U3_agga(x1, x2, x3, x4, x5, x6, x7)  =  U3_agga(x2, x7)

remove_at_in_agaa(x1, x2, x3, x4)  =  remove_at_in_agaa(x2)

remove_at_out_agaa(x1, x2, x3, x4)  =  remove_at_out_agaa(x1, x4)

U1_agaa(x1, x2, x3, x4, x5, x6)  =  U1_agaa(x2, x3, x6)

>_in_ag(x1, x2)  =  >_in_ag(x2)

>_out_ag(x1, x2)  =  >_out_ag

U2_agaa(x1, x2, x3, x4, x5, x6)  =  U2_agaa(x2, x3, x6)

U3_agaa(x1, x2, x3, x4, x5, x6, x7)  =  U3_agaa(x2, x7)

REMOVE_AT_IN_AGGA(x1, x2, x3, x4)  =  REMOVE_AT_IN_AGGA(x2, x3)

U1_AGGA(x1, x2, x3, x4, x5, x6)  =  U1_AGGA(x2, x3, x6)

>_IN_GG(x1, x2)  =  >_IN_GG(x1, x2)

U2_AGGA(x1, x2, x3, x4, x5, x6)  =  U2_AGGA(x2, x3, x6)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U3_AGGA(x1, x2, x3, x4, x5, x6, x7)  =  U3_AGGA(x2, x7)

REMOVE_AT_IN_AGAA(x1, x2, x3, x4)  =  REMOVE_AT_IN_AGAA(x2)

U1_AGAA(x1, x2, x3, x4, x5, x6)  =  U1_AGAA(x2, x3, x6)

>_IN_AG(x1, x2)  =  >_IN_AG(x2)

U2_AGAA(x1, x2, x3, x4, x5, x6)  =  U2_AGAA(x2, x3, x6)

U3_AGAA(x1, x2, x3, x4, x5, x6, x7)  =  U3_AGAA(x2, x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   REMOVE_AT_IN_AGGA(X, .(Y, Xs), K, .(Y, Ys)) -> U1_AGGA(X, Y, Xs, K, Ys, >_in_gg(K, 1))
   REMOVE_AT_IN_AGGA(X, .(Y, Xs), K, .(Y, Ys)) -> >_IN_GG(K, 1)
   U1_AGGA(X, Y, Xs, K, Ys, >_out_gg(K, 1)) -> U2_AGGA(X, Y, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U1_AGGA(X, Y, Xs, K, Ys, >_out_gg(K, 1)) -> IS_IN_AG(K1, -(K, 1))
   U2_AGGA(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_AGGA(X, Y, Xs, K, Ys, K1, remove_at_in_agaa(X, Xs, K1, Ys))
   U2_AGGA(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> REMOVE_AT_IN_AGAA(X, Xs, K1, Ys)
   REMOVE_AT_IN_AGAA(X, .(Y, Xs), K, .(Y, Ys)) -> U1_AGAA(X, Y, Xs, K, Ys, >_in_ag(K, 1))
   REMOVE_AT_IN_AGAA(X, .(Y, Xs), K, .(Y, Ys)) -> >_IN_AG(K, 1)
   U1_AGAA(X, Y, Xs, K, Ys, >_out_ag(K, 1)) -> U2_AGAA(X, Y, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U1_AGAA(X, Y, Xs, K, Ys, >_out_ag(K, 1)) -> IS_IN_AG(K1, -(K, 1))
   U2_AGAA(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_AGAA(X, Y, Xs, K, Ys, K1, remove_at_in_agaa(X, Xs, K1, Ys))
   U2_AGAA(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> REMOVE_AT_IN_AGAA(X, Xs, K1, Ys)

The TRS R consists of the following rules:

   remove_at_in_agga(X, .(X, Xs), 1, Xs) -> remove_at_out_agga(X, .(X, Xs), 1, Xs)
   remove_at_in_agga(X, .(Y, Xs), K, .(Y, Ys)) -> U1_agga(X, Y, Xs, K, Ys, >_in_gg(K, 1))
   >_in_gg(X0, X1) -> >_out_gg(X0, X1)
   U1_agga(X, Y, Xs, K, Ys, >_out_gg(K, 1)) -> U2_agga(X, Y, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_agga(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_agga(X, Y, Xs, K, Ys, K1, remove_at_in_agaa(X, Xs, K1, Ys))
   remove_at_in_agaa(X, .(X, Xs), 1, Xs) -> remove_at_out_agaa(X, .(X, Xs), 1, Xs)
   remove_at_in_agaa(X, .(Y, Xs), K, .(Y, Ys)) -> U1_agaa(X, Y, Xs, K, Ys, >_in_ag(K, 1))
   >_in_ag(X0, X1) -> >_out_ag(X0, X1)
   U1_agaa(X, Y, Xs, K, Ys, >_out_ag(K, 1)) -> U2_agaa(X, Y, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_agaa(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_agaa(X, Y, Xs, K, Ys, K1, remove_at_in_agaa(X, Xs, K1, Ys))
   U3_agaa(X, Y, Xs, K, Ys, K1, remove_at_out_agaa(X, Xs, K1, Ys)) -> remove_at_out_agaa(X, .(Y, Xs), K, .(Y, Ys))
   U3_agga(X, Y, Xs, K, Ys, K1, remove_at_out_agaa(X, Xs, K1, Ys)) -> remove_at_out_agga(X, .(Y, Xs), K, .(Y, Ys))

The argument filtering Pi contains the following mapping:
remove_at_in_agga(x1, x2, x3, x4)  =  remove_at_in_agga(x2, x3)

.(x1, x2)  =  .(x1, x2)

1  =  1

remove_at_out_agga(x1, x2, x3, x4)  =  remove_at_out_agga(x1, x4)

U1_agga(x1, x2, x3, x4, x5, x6)  =  U1_agga(x2, x3, x6)

>_in_gg(x1, x2)  =  >_in_gg(x1, x2)

>_out_gg(x1, x2)  =  >_out_gg

U2_agga(x1, x2, x3, x4, x5, x6)  =  U2_agga(x2, x3, x6)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x2)

U3_agga(x1, x2, x3, x4, x5, x6, x7)  =  U3_agga(x2, x7)

remove_at_in_agaa(x1, x2, x3, x4)  =  remove_at_in_agaa(x2)

remove_at_out_agaa(x1, x2, x3, x4)  =  remove_at_out_agaa(x1, x4)

U1_agaa(x1, x2, x3, x4, x5, x6)  =  U1_agaa(x2, x3, x6)

>_in_ag(x1, x2)  =  >_in_ag(x2)

>_out_ag(x1, x2)  =  >_out_ag

U2_agaa(x1, x2, x3, x4, x5, x6)  =  U2_agaa(x2, x3, x6)

U3_agaa(x1, x2, x3, x4, x5, x6, x7)  =  U3_agaa(x2, x7)

REMOVE_AT_IN_AGGA(x1, x2, x3, x4)  =  REMOVE_AT_IN_AGGA(x2, x3)

U1_AGGA(x1, x2, x3, x4, x5, x6)  =  U1_AGGA(x2, x3, x6)

>_IN_GG(x1, x2)  =  >_IN_GG(x1, x2)

U2_AGGA(x1, x2, x3, x4, x5, x6)  =  U2_AGGA(x2, x3, x6)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U3_AGGA(x1, x2, x3, x4, x5, x6, x7)  =  U3_AGGA(x2, x7)

REMOVE_AT_IN_AGAA(x1, x2, x3, x4)  =  REMOVE_AT_IN_AGAA(x2)

U1_AGAA(x1, x2, x3, x4, x5, x6)  =  U1_AGAA(x2, x3, x6)

>_IN_AG(x1, x2)  =  >_IN_AG(x2)

U2_AGAA(x1, x2, x3, x4, x5, x6)  =  U2_AGAA(x2, x3, x6)

U3_AGAA(x1, x2, x3, x4, x5, x6, x7)  =  U3_AGAA(x2, x7)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 9 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AGAA(X, Y, Xs, K, Ys, >_out_ag(K, 1)) -> U2_AGAA(X, Y, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_AGAA(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> REMOVE_AT_IN_AGAA(X, Xs, K1, Ys)
   REMOVE_AT_IN_AGAA(X, .(Y, Xs), K, .(Y, Ys)) -> U1_AGAA(X, Y, Xs, K, Ys, >_in_ag(K, 1))

The TRS R consists of the following rules:

   remove_at_in_agga(X, .(X, Xs), 1, Xs) -> remove_at_out_agga(X, .(X, Xs), 1, Xs)
   remove_at_in_agga(X, .(Y, Xs), K, .(Y, Ys)) -> U1_agga(X, Y, Xs, K, Ys, >_in_gg(K, 1))
   >_in_gg(X0, X1) -> >_out_gg(X0, X1)
   U1_agga(X, Y, Xs, K, Ys, >_out_gg(K, 1)) -> U2_agga(X, Y, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_agga(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_agga(X, Y, Xs, K, Ys, K1, remove_at_in_agaa(X, Xs, K1, Ys))
   remove_at_in_agaa(X, .(X, Xs), 1, Xs) -> remove_at_out_agaa(X, .(X, Xs), 1, Xs)
   remove_at_in_agaa(X, .(Y, Xs), K, .(Y, Ys)) -> U1_agaa(X, Y, Xs, K, Ys, >_in_ag(K, 1))
   >_in_ag(X0, X1) -> >_out_ag(X0, X1)
   U1_agaa(X, Y, Xs, K, Ys, >_out_ag(K, 1)) -> U2_agaa(X, Y, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_agaa(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> U3_agaa(X, Y, Xs, K, Ys, K1, remove_at_in_agaa(X, Xs, K1, Ys))
   U3_agaa(X, Y, Xs, K, Ys, K1, remove_at_out_agaa(X, Xs, K1, Ys)) -> remove_at_out_agaa(X, .(Y, Xs), K, .(Y, Ys))
   U3_agga(X, Y, Xs, K, Ys, K1, remove_at_out_agaa(X, Xs, K1, Ys)) -> remove_at_out_agga(X, .(Y, Xs), K, .(Y, Ys))

The argument filtering Pi contains the following mapping:
remove_at_in_agga(x1, x2, x3, x4)  =  remove_at_in_agga(x2, x3)

.(x1, x2)  =  .(x1, x2)

1  =  1

remove_at_out_agga(x1, x2, x3, x4)  =  remove_at_out_agga(x1, x4)

U1_agga(x1, x2, x3, x4, x5, x6)  =  U1_agga(x2, x3, x6)

>_in_gg(x1, x2)  =  >_in_gg(x1, x2)

>_out_gg(x1, x2)  =  >_out_gg

U2_agga(x1, x2, x3, x4, x5, x6)  =  U2_agga(x2, x3, x6)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x2)

U3_agga(x1, x2, x3, x4, x5, x6, x7)  =  U3_agga(x2, x7)

remove_at_in_agaa(x1, x2, x3, x4)  =  remove_at_in_agaa(x2)

remove_at_out_agaa(x1, x2, x3, x4)  =  remove_at_out_agaa(x1, x4)

U1_agaa(x1, x2, x3, x4, x5, x6)  =  U1_agaa(x2, x3, x6)

>_in_ag(x1, x2)  =  >_in_ag(x2)

>_out_ag(x1, x2)  =  >_out_ag

U2_agaa(x1, x2, x3, x4, x5, x6)  =  U2_agaa(x2, x3, x6)

U3_agaa(x1, x2, x3, x4, x5, x6, x7)  =  U3_agaa(x2, x7)

REMOVE_AT_IN_AGAA(x1, x2, x3, x4)  =  REMOVE_AT_IN_AGAA(x2)

U1_AGAA(x1, x2, x3, x4, x5, x6)  =  U1_AGAA(x2, x3, x6)

U2_AGAA(x1, x2, x3, x4, x5, x6)  =  U2_AGAA(x2, x3, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_AGAA(X, Y, Xs, K, Ys, >_out_ag(K, 1)) -> U2_AGAA(X, Y, Xs, K, Ys, is_in_ag(K1, -(K, 1)))
   U2_AGAA(X, Y, Xs, K, Ys, is_out_ag(K1, -(K, 1))) -> REMOVE_AT_IN_AGAA(X, Xs, K1, Ys)
   REMOVE_AT_IN_AGAA(X, .(Y, Xs), K, .(Y, Ys)) -> U1_AGAA(X, Y, Xs, K, Ys, >_in_ag(K, 1))

The TRS R consists of the following rules:

   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   >_in_ag(X0, X1) -> >_out_ag(X0, X1)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

1  =  1

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1, x2)  =  -(x2)

>_in_ag(x1, x2)  =  >_in_ag(x2)

>_out_ag(x1, x2)  =  >_out_ag

REMOVE_AT_IN_AGAA(x1, x2, x3, x4)  =  REMOVE_AT_IN_AGAA(x2)

U1_AGAA(x1, x2, x3, x4, x5, x6)  =  U1_AGAA(x2, x3, x6)

U2_AGAA(x1, x2, x3, x4, x5, x6)  =  U2_AGAA(x2, x3, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_AGAA(Y, Xs, >_out_ag) -> U2_AGAA(Y, Xs, is_in_ag(-(1)))
   U2_AGAA(Y, Xs, is_out_ag) -> REMOVE_AT_IN_AGAA(Xs)
   REMOVE_AT_IN_AGAA(.(Y, Xs)) -> U1_AGAA(Y, Xs, >_in_ag(1))

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag
   >_in_ag(X1) -> >_out_ag

The set Q consists of the following terms:

   is_in_ag(x0)
   >_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U2_AGAA(Y, Xs, is_out_ag) -> REMOVE_AT_IN_AGAA(Xs)
The graph contains the following edges 2 >= 1


*REMOVE_AT_IN_AGAA(.(Y, Xs)) -> U1_AGAA(Y, Xs, >_in_ag(1))
The graph contains the following edges 1 > 1, 1 > 2


*U1_AGAA(Y, Xs, >_out_ag) -> U2_AGAA(Y, Xs, is_in_ag(-(1)))
The graph contains the following edges 1 >= 1, 2 >= 2


----------------------------------------

(14)
YES
