MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/xZVVH.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

t()

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) CutEliminatorProof [SOUND, 0 ms]
(2) Prolog
    (3) UnifyTransformerProof [EQUIVALENT, 0 ms]
    (4) Prolog
    (5) PrologToPiTRSProof [SOUND, 0 ms]
    (6) PiTRS
        (7) DependencyPairsProof [EQUIVALENT, 0 ms]
        (8) PiDP
        (9) DependencyGraphProof [EQUIVALENT, 0 ms]
        (10) AND
            (11) PiDP
                (12) UsableRulesProof [EQUIVALENT, 0 ms]
                (13) PiDP
                (14) PiDPToQDPProof [SOUND, 0 ms]
                (15) QDP
            (16) PiDP
                (17) UsableRulesProof [EQUIVALENT, 0 ms]
                (18) PiDP
    (19) PrologToPiTRSProof [SOUND, 0 ms]
    (20) PiTRS
        (21) DependencyPairsProof [EQUIVALENT, 0 ms]
        (22) PiDP
        (23) DependencyGraphProof [EQUIVALENT, 0 ms]
        (24) AND
            (25) PiDP
                (26) UsableRulesProof [EQUIVALENT, 0 ms]
                (27) PiDP
                (28) PiDPToQDPProof [SOUND, 0 ms]
                (29) QDP
            (30) PiDP
                (31) UsableRulesProof [EQUIVALENT, 0 ms]
                (32) PiDP
(33) PrologToTRSTransformerProof [SOUND, 0 ms]
(34) QTRS
    (35) QTRSRRRProof [EQUIVALENT, 25 ms]
    (36) QTRS
    (37) Overlay + Local Confluence [EQUIVALENT, 0 ms]
    (38) QTRS
    (39) DependencyPairsProof [EQUIVALENT, 0 ms]
    (40) QDP
    (41) UsableRulesProof [EQUIVALENT, 0 ms]
    (42) QDP
    (43) QReductionProof [EQUIVALENT, 0 ms]
    (44) QDP
(45) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(46) TRIPLES
    (47) TriplesToPiDPProof [SOUND, 0 ms]
    (48) PiDP
    (49) DependencyGraphProof [EQUIVALENT, 0 ms]
    (50) PiDP
    (51) PiDPToQDPProof [EQUIVALENT, 0 ms]
    (52) QDP
(53) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(54) IRSwT
    (55) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (56) IRSwT
    (57) IntTRSCompressionProof [EQUIVALENT, 9 ms]
    (58) IRSwT
    (59) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (60) IRSwT
    (61) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
    (62) IRSwT
    (63) FilterProof [EQUIVALENT, 0 ms]
    (64) IntTRS
    (65) IntTRSPeriodicNontermProof [COMPLETE, 4 ms]
    (66) NO


----------------------------------------

(0)
Obligation:
Clauses:

t :- ','(=(X, f(0, f(1, f(0, X)))), ','(!, g(X))).
t :- t.
g(f(X, f(X, X1))) :- !.
g(f(X2, X)) :- g(X).


Query: t()
----------------------------------------

(1) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

t :- ','(=(X, f(0, f(1, f(0, X)))), g(X)).
t :- t.
g(f(X, f(X, X1))).
g(f(X2, X)) :- g(X).


Query: t()
----------------------------------------

(3) UnifyTransformerProof (EQUIVALENT)
Added a fact for the built-in = predicate [PROLOG].
----------------------------------------

(4)
Obligation:
Clauses:

t :- ','(=(X, f(0, f(1, f(0, X)))), g(X)).
t :- t.
g(f(X, f(X, X1))).
g(f(X2, X)) :- g(X).
=(X, X).


Query: t()
----------------------------------------

(5) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

g_in_1: (f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   t_in_ -> U1_(=_in_aa(X, f(0, f(1, f(0, X)))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_(=_out_aa(X, f(0, f(1, f(0, X))))) -> U2_(g_in_a(X))
   g_in_a(f(X, f(X, X1))) -> g_out_a(f(X, f(X, X1)))
   g_in_a(f(X2, X)) -> U4_a(X2, X, g_in_a(X))
   U4_a(X2, X, g_out_a(X)) -> g_out_a(f(X2, X))
   U2_(g_out_a(X)) -> t_out_
   t_in_ -> U3_(t_in_)
   U3_(t_out_) -> t_out_

The argument filtering Pi contains the following mapping:
t_in_  =  t_in_

U1_(x1)  =  U1_(x1)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_(x1)  =  U2_(x1)

g_in_a(x1)  =  g_in_a

g_out_a(x1)  =  g_out_a

f(x1, x2)  =  f(x2)

U4_a(x1, x2, x3)  =  U4_a(x3)

t_out_  =  t_out_

U3_(x1)  =  U3_(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(6)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   t_in_ -> U1_(=_in_aa(X, f(0, f(1, f(0, X)))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_(=_out_aa(X, f(0, f(1, f(0, X))))) -> U2_(g_in_a(X))
   g_in_a(f(X, f(X, X1))) -> g_out_a(f(X, f(X, X1)))
   g_in_a(f(X2, X)) -> U4_a(X2, X, g_in_a(X))
   U4_a(X2, X, g_out_a(X)) -> g_out_a(f(X2, X))
   U2_(g_out_a(X)) -> t_out_
   t_in_ -> U3_(t_in_)
   U3_(t_out_) -> t_out_

The argument filtering Pi contains the following mapping:
t_in_  =  t_in_

U1_(x1)  =  U1_(x1)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_(x1)  =  U2_(x1)

g_in_a(x1)  =  g_in_a

g_out_a(x1)  =  g_out_a

f(x1, x2)  =  f(x2)

U4_a(x1, x2, x3)  =  U4_a(x3)

t_out_  =  t_out_

U3_(x1)  =  U3_(x1)



----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   T_IN_ -> U1_^1(=_in_aa(X, f(0, f(1, f(0, X)))))
   T_IN_ -> =_IN_AA(X, f(0, f(1, f(0, X))))
   U1_^1(=_out_aa(X, f(0, f(1, f(0, X))))) -> U2_^1(g_in_a(X))
   U1_^1(=_out_aa(X, f(0, f(1, f(0, X))))) -> G_IN_A(X)
   G_IN_A(f(X2, X)) -> U4_A(X2, X, g_in_a(X))
   G_IN_A(f(X2, X)) -> G_IN_A(X)
   T_IN_ -> U3_^1(t_in_)
   T_IN_ -> T_IN_

The TRS R consists of the following rules:

   t_in_ -> U1_(=_in_aa(X, f(0, f(1, f(0, X)))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_(=_out_aa(X, f(0, f(1, f(0, X))))) -> U2_(g_in_a(X))
   g_in_a(f(X, f(X, X1))) -> g_out_a(f(X, f(X, X1)))
   g_in_a(f(X2, X)) -> U4_a(X2, X, g_in_a(X))
   U4_a(X2, X, g_out_a(X)) -> g_out_a(f(X2, X))
   U2_(g_out_a(X)) -> t_out_
   t_in_ -> U3_(t_in_)
   U3_(t_out_) -> t_out_

The argument filtering Pi contains the following mapping:
t_in_  =  t_in_

U1_(x1)  =  U1_(x1)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_(x1)  =  U2_(x1)

g_in_a(x1)  =  g_in_a

g_out_a(x1)  =  g_out_a

f(x1, x2)  =  f(x2)

U4_a(x1, x2, x3)  =  U4_a(x3)

t_out_  =  t_out_

U3_(x1)  =  U3_(x1)

T_IN_  =  T_IN_

U1_^1(x1)  =  U1_^1(x1)

=_IN_AA(x1, x2)  =  =_IN_AA

U2_^1(x1)  =  U2_^1(x1)

G_IN_A(x1)  =  G_IN_A

U4_A(x1, x2, x3)  =  U4_A(x3)

U3_^1(x1)  =  U3_^1(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   T_IN_ -> U1_^1(=_in_aa(X, f(0, f(1, f(0, X)))))
   T_IN_ -> =_IN_AA(X, f(0, f(1, f(0, X))))
   U1_^1(=_out_aa(X, f(0, f(1, f(0, X))))) -> U2_^1(g_in_a(X))
   U1_^1(=_out_aa(X, f(0, f(1, f(0, X))))) -> G_IN_A(X)
   G_IN_A(f(X2, X)) -> U4_A(X2, X, g_in_a(X))
   G_IN_A(f(X2, X)) -> G_IN_A(X)
   T_IN_ -> U3_^1(t_in_)
   T_IN_ -> T_IN_

The TRS R consists of the following rules:

   t_in_ -> U1_(=_in_aa(X, f(0, f(1, f(0, X)))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_(=_out_aa(X, f(0, f(1, f(0, X))))) -> U2_(g_in_a(X))
   g_in_a(f(X, f(X, X1))) -> g_out_a(f(X, f(X, X1)))
   g_in_a(f(X2, X)) -> U4_a(X2, X, g_in_a(X))
   U4_a(X2, X, g_out_a(X)) -> g_out_a(f(X2, X))
   U2_(g_out_a(X)) -> t_out_
   t_in_ -> U3_(t_in_)
   U3_(t_out_) -> t_out_

The argument filtering Pi contains the following mapping:
t_in_  =  t_in_

U1_(x1)  =  U1_(x1)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_(x1)  =  U2_(x1)

g_in_a(x1)  =  g_in_a

g_out_a(x1)  =  g_out_a

f(x1, x2)  =  f(x2)

U4_a(x1, x2, x3)  =  U4_a(x3)

t_out_  =  t_out_

U3_(x1)  =  U3_(x1)

T_IN_  =  T_IN_

U1_^1(x1)  =  U1_^1(x1)

=_IN_AA(x1, x2)  =  =_IN_AA

U2_^1(x1)  =  U2_^1(x1)

G_IN_A(x1)  =  G_IN_A

U4_A(x1, x2, x3)  =  U4_A(x3)

U3_^1(x1)  =  U3_^1(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(10)
Complex Obligation (AND)

----------------------------------------

(11)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   G_IN_A(f(X2, X)) -> G_IN_A(X)

The TRS R consists of the following rules:

   t_in_ -> U1_(=_in_aa(X, f(0, f(1, f(0, X)))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_(=_out_aa(X, f(0, f(1, f(0, X))))) -> U2_(g_in_a(X))
   g_in_a(f(X, f(X, X1))) -> g_out_a(f(X, f(X, X1)))
   g_in_a(f(X2, X)) -> U4_a(X2, X, g_in_a(X))
   U4_a(X2, X, g_out_a(X)) -> g_out_a(f(X2, X))
   U2_(g_out_a(X)) -> t_out_
   t_in_ -> U3_(t_in_)
   U3_(t_out_) -> t_out_

The argument filtering Pi contains the following mapping:
t_in_  =  t_in_

U1_(x1)  =  U1_(x1)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_(x1)  =  U2_(x1)

g_in_a(x1)  =  g_in_a

g_out_a(x1)  =  g_out_a

f(x1, x2)  =  f(x2)

U4_a(x1, x2, x3)  =  U4_a(x3)

t_out_  =  t_out_

U3_(x1)  =  U3_(x1)

G_IN_A(x1)  =  G_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(12) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(13)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   G_IN_A(f(X2, X)) -> G_IN_A(X)

R is empty.
The argument filtering Pi contains the following mapping:
f(x1, x2)  =  f(x2)

G_IN_A(x1)  =  G_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(14) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(15)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G_IN_A -> G_IN_A

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   T_IN_ -> T_IN_

The TRS R consists of the following rules:

   t_in_ -> U1_(=_in_aa(X, f(0, f(1, f(0, X)))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_(=_out_aa(X, f(0, f(1, f(0, X))))) -> U2_(g_in_a(X))
   g_in_a(f(X, f(X, X1))) -> g_out_a(f(X, f(X, X1)))
   g_in_a(f(X2, X)) -> U4_a(X2, X, g_in_a(X))
   U4_a(X2, X, g_out_a(X)) -> g_out_a(f(X2, X))
   U2_(g_out_a(X)) -> t_out_
   t_in_ -> U3_(t_in_)
   U3_(t_out_) -> t_out_

The argument filtering Pi contains the following mapping:
t_in_  =  t_in_

U1_(x1)  =  U1_(x1)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_(x1)  =  U2_(x1)

g_in_a(x1)  =  g_in_a

g_out_a(x1)  =  g_out_a

f(x1, x2)  =  f(x2)

U4_a(x1, x2, x3)  =  U4_a(x3)

t_out_  =  t_out_

U3_(x1)  =  U3_(x1)

T_IN_  =  T_IN_


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(18)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   T_IN_ -> T_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(19) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

g_in_1: (f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   t_in_ -> U1_(=_in_aa(X, f(0, f(1, f(0, X)))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_(=_out_aa(X, f(0, f(1, f(0, X))))) -> U2_(g_in_a(X))
   g_in_a(f(X, f(X, X1))) -> g_out_a(f(X, f(X, X1)))
   g_in_a(f(X2, X)) -> U4_a(X2, X, g_in_a(X))
   U4_a(X2, X, g_out_a(X)) -> g_out_a(f(X2, X))
   U2_(g_out_a(X)) -> t_out_
   t_in_ -> U3_(t_in_)
   U3_(t_out_) -> t_out_

The argument filtering Pi contains the following mapping:
t_in_  =  t_in_

U1_(x1)  =  U1_(x1)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_(x1)  =  U2_(x1)

g_in_a(x1)  =  g_in_a

g_out_a(x1)  =  g_out_a

f(x1, x2)  =  f(x2)

U4_a(x1, x2, x3)  =  U4_a(x3)

t_out_  =  t_out_

U3_(x1)  =  U3_(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(20)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   t_in_ -> U1_(=_in_aa(X, f(0, f(1, f(0, X)))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_(=_out_aa(X, f(0, f(1, f(0, X))))) -> U2_(g_in_a(X))
   g_in_a(f(X, f(X, X1))) -> g_out_a(f(X, f(X, X1)))
   g_in_a(f(X2, X)) -> U4_a(X2, X, g_in_a(X))
   U4_a(X2, X, g_out_a(X)) -> g_out_a(f(X2, X))
   U2_(g_out_a(X)) -> t_out_
   t_in_ -> U3_(t_in_)
   U3_(t_out_) -> t_out_

The argument filtering Pi contains the following mapping:
t_in_  =  t_in_

U1_(x1)  =  U1_(x1)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_(x1)  =  U2_(x1)

g_in_a(x1)  =  g_in_a

g_out_a(x1)  =  g_out_a

f(x1, x2)  =  f(x2)

U4_a(x1, x2, x3)  =  U4_a(x3)

t_out_  =  t_out_

U3_(x1)  =  U3_(x1)



----------------------------------------

(21) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   T_IN_ -> U1_^1(=_in_aa(X, f(0, f(1, f(0, X)))))
   T_IN_ -> =_IN_AA(X, f(0, f(1, f(0, X))))
   U1_^1(=_out_aa(X, f(0, f(1, f(0, X))))) -> U2_^1(g_in_a(X))
   U1_^1(=_out_aa(X, f(0, f(1, f(0, X))))) -> G_IN_A(X)
   G_IN_A(f(X2, X)) -> U4_A(X2, X, g_in_a(X))
   G_IN_A(f(X2, X)) -> G_IN_A(X)
   T_IN_ -> U3_^1(t_in_)
   T_IN_ -> T_IN_

The TRS R consists of the following rules:

   t_in_ -> U1_(=_in_aa(X, f(0, f(1, f(0, X)))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_(=_out_aa(X, f(0, f(1, f(0, X))))) -> U2_(g_in_a(X))
   g_in_a(f(X, f(X, X1))) -> g_out_a(f(X, f(X, X1)))
   g_in_a(f(X2, X)) -> U4_a(X2, X, g_in_a(X))
   U4_a(X2, X, g_out_a(X)) -> g_out_a(f(X2, X))
   U2_(g_out_a(X)) -> t_out_
   t_in_ -> U3_(t_in_)
   U3_(t_out_) -> t_out_

The argument filtering Pi contains the following mapping:
t_in_  =  t_in_

U1_(x1)  =  U1_(x1)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_(x1)  =  U2_(x1)

g_in_a(x1)  =  g_in_a

g_out_a(x1)  =  g_out_a

f(x1, x2)  =  f(x2)

U4_a(x1, x2, x3)  =  U4_a(x3)

t_out_  =  t_out_

U3_(x1)  =  U3_(x1)

T_IN_  =  T_IN_

U1_^1(x1)  =  U1_^1(x1)

=_IN_AA(x1, x2)  =  =_IN_AA

U2_^1(x1)  =  U2_^1(x1)

G_IN_A(x1)  =  G_IN_A

U4_A(x1, x2, x3)  =  U4_A(x3)

U3_^1(x1)  =  U3_^1(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(22)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   T_IN_ -> U1_^1(=_in_aa(X, f(0, f(1, f(0, X)))))
   T_IN_ -> =_IN_AA(X, f(0, f(1, f(0, X))))
   U1_^1(=_out_aa(X, f(0, f(1, f(0, X))))) -> U2_^1(g_in_a(X))
   U1_^1(=_out_aa(X, f(0, f(1, f(0, X))))) -> G_IN_A(X)
   G_IN_A(f(X2, X)) -> U4_A(X2, X, g_in_a(X))
   G_IN_A(f(X2, X)) -> G_IN_A(X)
   T_IN_ -> U3_^1(t_in_)
   T_IN_ -> T_IN_

The TRS R consists of the following rules:

   t_in_ -> U1_(=_in_aa(X, f(0, f(1, f(0, X)))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_(=_out_aa(X, f(0, f(1, f(0, X))))) -> U2_(g_in_a(X))
   g_in_a(f(X, f(X, X1))) -> g_out_a(f(X, f(X, X1)))
   g_in_a(f(X2, X)) -> U4_a(X2, X, g_in_a(X))
   U4_a(X2, X, g_out_a(X)) -> g_out_a(f(X2, X))
   U2_(g_out_a(X)) -> t_out_
   t_in_ -> U3_(t_in_)
   U3_(t_out_) -> t_out_

The argument filtering Pi contains the following mapping:
t_in_  =  t_in_

U1_(x1)  =  U1_(x1)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_(x1)  =  U2_(x1)

g_in_a(x1)  =  g_in_a

g_out_a(x1)  =  g_out_a

f(x1, x2)  =  f(x2)

U4_a(x1, x2, x3)  =  U4_a(x3)

t_out_  =  t_out_

U3_(x1)  =  U3_(x1)

T_IN_  =  T_IN_

U1_^1(x1)  =  U1_^1(x1)

=_IN_AA(x1, x2)  =  =_IN_AA

U2_^1(x1)  =  U2_^1(x1)

G_IN_A(x1)  =  G_IN_A

U4_A(x1, x2, x3)  =  U4_A(x3)

U3_^1(x1)  =  U3_^1(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(23) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 2 SCCs with 6 less nodes.
----------------------------------------

(24)
Complex Obligation (AND)

----------------------------------------

(25)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   G_IN_A(f(X2, X)) -> G_IN_A(X)

The TRS R consists of the following rules:

   t_in_ -> U1_(=_in_aa(X, f(0, f(1, f(0, X)))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_(=_out_aa(X, f(0, f(1, f(0, X))))) -> U2_(g_in_a(X))
   g_in_a(f(X, f(X, X1))) -> g_out_a(f(X, f(X, X1)))
   g_in_a(f(X2, X)) -> U4_a(X2, X, g_in_a(X))
   U4_a(X2, X, g_out_a(X)) -> g_out_a(f(X2, X))
   U2_(g_out_a(X)) -> t_out_
   t_in_ -> U3_(t_in_)
   U3_(t_out_) -> t_out_

The argument filtering Pi contains the following mapping:
t_in_  =  t_in_

U1_(x1)  =  U1_(x1)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_(x1)  =  U2_(x1)

g_in_a(x1)  =  g_in_a

g_out_a(x1)  =  g_out_a

f(x1, x2)  =  f(x2)

U4_a(x1, x2, x3)  =  U4_a(x3)

t_out_  =  t_out_

U3_(x1)  =  U3_(x1)

G_IN_A(x1)  =  G_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(26) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(27)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   G_IN_A(f(X2, X)) -> G_IN_A(X)

R is empty.
The argument filtering Pi contains the following mapping:
f(x1, x2)  =  f(x2)

G_IN_A(x1)  =  G_IN_A


We have to consider all (P,R,Pi)-chains
----------------------------------------

(28) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(29)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   G_IN_A -> G_IN_A

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(30)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   T_IN_ -> T_IN_

The TRS R consists of the following rules:

   t_in_ -> U1_(=_in_aa(X, f(0, f(1, f(0, X)))))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_(=_out_aa(X, f(0, f(1, f(0, X))))) -> U2_(g_in_a(X))
   g_in_a(f(X, f(X, X1))) -> g_out_a(f(X, f(X, X1)))
   g_in_a(f(X2, X)) -> U4_a(X2, X, g_in_a(X))
   U4_a(X2, X, g_out_a(X)) -> g_out_a(f(X2, X))
   U2_(g_out_a(X)) -> t_out_
   t_in_ -> U3_(t_in_)
   U3_(t_out_) -> t_out_

The argument filtering Pi contains the following mapping:
t_in_  =  t_in_

U1_(x1)  =  U1_(x1)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

U2_(x1)  =  U2_(x1)

g_in_a(x1)  =  g_in_a

g_out_a(x1)  =  g_out_a

f(x1, x2)  =  f(x2)

U4_a(x1, x2, x3)  =  U4_a(x3)

t_out_  =  t_out_

U3_(x1)  =  U3_(x1)

T_IN_  =  T_IN_


We have to consider all (P,R,Pi)-chains
----------------------------------------

(31) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(32)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   T_IN_ -> T_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(33) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(t)",
                "(',' (= X (f (0) (f (1) (f (0) X)))) (',' (!) (g X)))"
            ],
            [
                "(t)",
                "(t)"
            ],
            [
                "(g (f X (f X X1)))",
                "(!)"
            ],
            [
                "(g (f X2 X))",
                "(g X)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(t)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(t)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(t)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(t)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(t)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (= X5 (f (0) (f (1) (f (0) X5)))) (',' (!_1) (g X5)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X5"],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "16": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(t)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes"
        },
        "edges": [
            {
                "from": 1,
                "to": 2,
                "label": "CASE"
            },
            {
                "from": 2,
                "to": 12,
                "label": "PARALLEL"
            },
            {
                "from": 2,
                "to": 13,
                "label": "PARALLEL"
            },
            {
                "from": 12,
                "to": 14,
                "label": "ONLY EVAL with clause\nt :- ','(=(X5, f(0, f(1, f(0, X5)))), ','(!_1, g(X5))).\nand substitution"
            },
            {
                "from": 13,
                "to": 16,
                "label": "ONLY EVAL with clause\nt :- t.\nand substitution"
            },
            {
                "from": 14,
                "to": 15,
                "label": "UNIFY-FAIL\nbecause of non-unification"
            },
            {
                "from": 16,
                "to": 1,
                "label": "INSTANCE"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(34)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f1_in -> U1(f1_in)
   U1(f1_out1) -> f1_out1

Q is empty.

----------------------------------------

(35) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1)) = 2*x_1
   POL(f1_in) = 0
   POL(f1_out1) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U1(f1_out1) -> f1_out1




----------------------------------------

(36)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f1_in -> U1(f1_in)

Q is empty.

----------------------------------------

(37) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(38)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f1_in -> U1(f1_in)

The set Q consists of the following terms:

   f1_in


----------------------------------------

(39) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN -> F1_IN

The TRS R consists of the following rules:

   f1_in -> U1(f1_in)

The set Q consists of the following terms:

   f1_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN -> F1_IN

R is empty.
The set Q consists of the following terms:

   f1_in

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f1_in


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F1_IN -> F1_IN

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(t)",
                "(',' (= X (f (0) (f (1) (f (0) X)))) (',' (!) (g X)))"
            ],
            [
                "(t)",
                "(t)"
            ],
            [
                "(g (f X (f X X1)))",
                "(!)"
            ],
            [
                "(g (f X2 X))",
                "(g X)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "22": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(t)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "23": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (= X7 (f (0) (f (1) (f (0) X7)))) (',' (!_2) (g X7)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X7"],
                    "exprvars": []
                }
            },
            "24": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(t)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(t)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(t)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(t)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (= X3 (f (0) (f (1) (f (0) X3)))) (',' (!_1) (g X3)))"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(t)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X3"],
                    "exprvars": []
                }
            },
            "18": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(t)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(t)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "20": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(t)"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(t)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "21": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(t)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 17,
                "label": "ONLY EVAL with clause\nt :- ','(=(X3, f(0, f(1, f(0, X3)))), ','(!_1, g(X3))).\nand substitution"
            },
            {
                "from": 17,
                "to": 18,
                "label": "UNIFY-FAIL\nbecause of non-unification"
            },
            {
                "from": 18,
                "to": 19,
                "label": "ONLY EVAL with clause\nt :- t.\nand substitution"
            },
            {
                "from": 19,
                "to": 20,
                "label": "CASE"
            },
            {
                "from": 20,
                "to": 21,
                "label": "PARALLEL"
            },
            {
                "from": 20,
                "to": 22,
                "label": "PARALLEL"
            },
            {
                "from": 21,
                "to": 23,
                "label": "ONLY EVAL with clause\nt :- ','(=(X7, f(0, f(1, f(0, X7)))), ','(!_2, g(X7))).\nand substitution"
            },
            {
                "from": 22,
                "to": 25,
                "label": "ONLY EVAL with clause\nt :- t.\nand substitution"
            },
            {
                "from": 23,
                "to": 24,
                "label": "UNIFY-FAIL\nbecause of non-unification"
            },
            {
                "from": 25,
                "to": 3,
                "label": "INSTANCE"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(46)
Obligation:
Triples:

tA :- tA.

Clauses:

tcA :- tcA.

Afs:

tA  =  tA


----------------------------------------

(47) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   TA_IN_ -> U1_^1(tA_in_)
   TA_IN_ -> TA_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(48)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TA_IN_ -> U1_^1(tA_in_)
   TA_IN_ -> TA_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(49) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(50)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TA_IN_ -> TA_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(51) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   TA_IN_ -> TA_IN_

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(53) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 5,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(t)",
                "(',' (= X (f (0) (f (1) (f (0) X)))) (',' (!) (g X)))"
            ],
            [
                "(t)",
                "(t)"
            ],
            [
                "(g (f X (f X X1)))",
                "(!)"
            ],
            [
                "(g (f X2 X))",
                "(g X)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "11": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(t)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(t)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(t)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(t)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(t)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(t)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (= X5 (f (0) (f (1) (f (0) X5)))) (',' (!_1) (g X5)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X5"],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "10": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 5,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 7,
                "label": "PARALLEL"
            },
            {
                "from": 6,
                "to": 8,
                "label": "PARALLEL"
            },
            {
                "from": 7,
                "to": 9,
                "label": "ONLY EVAL with clause\nt :- ','(=(X5, f(0, f(1, f(0, X5)))), ','(!_1, g(X5))).\nand substitution"
            },
            {
                "from": 8,
                "to": 11,
                "label": "ONLY EVAL with clause\nt :- t.\nand substitution"
            },
            {
                "from": 9,
                "to": 10,
                "label": "UNIFY-FAIL\nbecause of non-unification"
            },
            {
                "from": 11,
                "to": 5,
                "label": "INSTANCE"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(54)
Obligation:
Rules:
f6_out -> f5_out :|: TRUE
f5_in -> f6_in :|: TRUE
f7_out -> f6_out :|: TRUE
f8_out -> f6_out :|: TRUE
f6_in -> f7_in :|: TRUE
f6_in -> f8_in :|: TRUE
f11_in -> f5_in :|: TRUE
f5_out -> f11_out :|: TRUE
f8_in -> f11_in :|: TRUE
f11_out -> f8_out :|: TRUE
Start term: f5_in

----------------------------------------

(55) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f5_in -> f6_in :|: TRUE
f6_in -> f8_in :|: TRUE
f11_in -> f5_in :|: TRUE
f8_in -> f11_in :|: TRUE


----------------------------------------

(56)
Obligation:
Rules:
f5_in -> f6_in :|: TRUE
f6_in -> f8_in :|: TRUE
f11_in -> f5_in :|: TRUE
f8_in -> f11_in :|: TRUE

----------------------------------------

(57) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(58)
Obligation:
Rules:
f11_in -> f11_in :|: TRUE

----------------------------------------

(59) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(60)
Obligation:
Rules:
f11_in -> f11_in :|: TRUE

----------------------------------------

(61) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f11_in -> f11_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(62)
Obligation:

Termination digraph:
Nodes:
(1) f11_in -> f11_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(63) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f11_in()
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(64)
Obligation:
Rules:
f11_in -> f11_in :|: TRUE

----------------------------------------

(65) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc) -> f(1) :|: pc = 1 && TRUE
Witness term starting non-terminating reduction: f(1)
----------------------------------------

(66)
NO
