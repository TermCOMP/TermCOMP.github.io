YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/TrCah.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

lsort(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToDTProblemTransformerProof [SOUND, 24 ms]
(2) TRIPLES
(3) TriplesToPiDPProof [SOUND, 0 ms]
(4) PiDP
(5) DependencyGraphProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) PiDPToQDPProof [SOUND, 4 ms]
(8) QDP
(9) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(10) YES


----------------------------------------

(0)
Obligation:
Clauses:

lsort(InList, OutList) :- lsort(InList, OutList, asc).
lsort(InList, OutList, Dir) :- ','(add_key(InList, KList, Dir), ','(keysort(KList, SKList), rem_key(SKList, OutList))).
add_key([], [], X1).
add_key(.(X, Xs), .(-(L, p(X)), Ys), asc) :- ','(!, ','(length(X, L), add_key(Xs, Ys, asc))).
add_key(.(X, Xs), .(-(L, p(X)), Ys), desc) :- ','(length(X, L1), ','(is(L, -(L1)), add_key(Xs, Ys, desc))).
rem_key([], []).
rem_key(.(-(X2, p(X)), Xs), .(X, Ys)) :- rem_key(Xs, Ys).
length(X3, X4).


Query: lsort(g,a)
----------------------------------------

(1) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(lsort InList OutList)",
                "(lsort InList OutList (asc))"
            ],
            [
                "(lsort InList OutList Dir)",
                "(',' (add_key InList KList Dir) (',' (keysort KList SKList) (rem_key SKList OutList)))"
            ],
            [
                "(add_key ([]) ([]) X1)",
                null
            ],
            [
                "(add_key (. X Xs) (. (- L (p X)) Ys) (asc))",
                "(',' (!) (',' (length X L) (add_key Xs Ys (asc))))"
            ],
            [
                "(add_key (. X Xs) (. (- L (p X)) Ys) (desc))",
                "(',' (length X L1) (',' (is L (- L1)) (add_key Xs Ys (desc))))"
            ],
            [
                "(rem_key ([]) ([]))",
                null
            ],
            [
                "(rem_key (. (- X2 (p X)) Xs) (. X Ys))",
                "(rem_key Xs Ys)"
            ],
            [
                "(length X3 X4)",
                null
            ]
        ]
    },
    "graph": {
        "nodes": {
            "1143": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (keysort T16 X23) (rem_key X23 T15))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X23"],
                    "exprvars": []
                }
            },
            "1165": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(add_key T13 X22 (asc))"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(add_key T13 X22 (asc))"
                    }
                ],
                "kb": {
                    "nonunifying": [[
                        "(add_key T13 X22 (asc))",
                        "(add_key ([]) ([]) X30)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T13"],
                    "free": [
                        "X22",
                        "X30"
                    ],
                    "exprvars": []
                }
            },
            "1164": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(add_key ([]) X22 (asc))"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(add_key ([]) X22 (asc))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X22"],
                    "exprvars": []
                }
            },
            "1141": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(add_key T13 X22 (asc))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T13"],
                    "free": ["X22"],
                    "exprvars": []
                }
            },
            "1163": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 3,
                        "term": "(add_key T13 X22 (asc))"
                    },
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(add_key T13 X22 (asc))"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(add_key T13 X22 (asc))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T13"],
                    "free": ["X22"],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "385": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(lsort T5 T7 (asc))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [],
                    "exprvars": []
                }
            },
            "1910": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(lsort T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "398": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(lsort T5 T7 (asc))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [],
                    "exprvars": []
                }
            },
            "2128": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2127": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(lsort T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "1983": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(add_key T26 X68 (asc))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T26"],
                    "free": ["X68"],
                    "exprvars": []
                }
            },
            "1168": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1167": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(add_key ([]) X22 (asc))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X22"],
                    "exprvars": []
                }
            },
            "1166": {
                "goal": [
                    {
                        "clause": 3,
                        "scope": 3,
                        "term": "(add_key ([]) X22 (asc))"
                    },
                    {
                        "clause": 4,
                        "scope": 3,
                        "term": "(add_key ([]) X22 (asc))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X22"],
                    "exprvars": []
                }
            },
            "536": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (add_key T13 X22 (asc)) (',' (keysort X22 X23) (rem_key X23 T15)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T13"],
                    "free": [
                        "X22",
                        "X23"
                    ],
                    "exprvars": []
                }
            },
            "1904": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (!_3) (',' (length T25 X67) (add_key T26 X68 (asc))))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T25",
                        "T26"
                    ],
                    "free": [
                        "X67",
                        "X68"
                    ],
                    "exprvars": []
                }
            },
            "1837": {
                "goal": [{
                    "clause": 4,
                    "scope": 3,
                    "term": "(add_key T13 X22 (asc))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(add_key T13 X22 (asc))",
                        "(add_key ([]) ([]) X30)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T13"],
                    "free": [
                        "X22",
                        "X30"
                    ],
                    "exprvars": []
                }
            },
            "1836": {
                "goal": [{
                    "clause": 3,
                    "scope": 3,
                    "term": "(add_key T13 X22 (asc))"
                }],
                "kb": {
                    "nonunifying": [[
                        "(add_key T13 X22 (asc))",
                        "(add_key ([]) ([]) X30)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T13"],
                    "free": [
                        "X22",
                        "X30"
                    ],
                    "exprvars": []
                }
            },
            "1979": {
                "goal": [{
                    "clause": 7,
                    "scope": 4,
                    "term": "(',' (length T25 X67) (add_key T26 X68 (asc)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T25",
                        "T26"
                    ],
                    "free": [
                        "X67",
                        "X68"
                    ],
                    "exprvars": []
                }
            },
            "1911": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (length T25 X67) (add_key T26 X68 (asc)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T25",
                        "T26"
                    ],
                    "free": [
                        "X67",
                        "X68"
                    ],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 385,
                "label": "ONLY EVAL with clause\nlsort(X7, X8) :- lsort(X7, X8, asc).\nand substitutionT1 -> T5,\nX7 -> T5,\nT2 -> T7,\nX8 -> T7,\nT6 -> T7"
            },
            {
                "from": 385,
                "to": 398,
                "label": "CASE"
            },
            {
                "from": 398,
                "to": 536,
                "label": "ONLY EVAL with clause\nlsort(X19, X20, X21) :- ','(add_key(X19, X22, X21), ','(keysort(X22, X23), rem_key(X23, X20))).\nand substitutionT5 -> T13,\nX19 -> T13,\nT7 -> T15,\nX20 -> T15,\nX21 -> asc,\nT14 -> T15"
            },
            {
                "from": 536,
                "to": 1141,
                "label": "SPLIT 1"
            },
            {
                "from": 536,
                "to": 1143,
                "label": "SPLIT 2\nnew knowledge:\nT13 is ground\nreplacements:X22 -> T16"
            },
            {
                "from": 1141,
                "to": 1163,
                "label": "CASE"
            },
            {
                "from": 1143,
                "to": 2128,
                "label": "UNDEFINED ERROR"
            },
            {
                "from": 1163,
                "to": 1164,
                "label": "EVAL with clause\nadd_key([], [], X30).\nand substitutionT13 -> [],\nX22 -> [],\nX30 -> asc"
            },
            {
                "from": 1163,
                "to": 1165,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 1164,
                "to": 1166,
                "label": "SUCCESS"
            },
            {
                "from": 1165,
                "to": 1836,
                "label": "PARALLEL"
            },
            {
                "from": 1165,
                "to": 1837,
                "label": "PARALLEL"
            },
            {
                "from": 1166,
                "to": 1167,
                "label": "BACKTRACK\nfor clause: add_key(.(X, Xs), .(-(L, p(X)), Ys), asc) :- ','(!, ','(length(X, L), add_key(Xs, Ys, asc)))because of non-unification"
            },
            {
                "from": 1167,
                "to": 1168,
                "label": "BACKTRACK\nfor clause: add_key(.(X, Xs), .(-(L, p(X)), Ys), desc) :- ','(length(X, L1), ','(is(L, -(L1)), add_key(Xs, Ys, desc)))because of non-unification"
            },
            {
                "from": 1836,
                "to": 1904,
                "label": "EVAL with clause\nadd_key(.(X63, X64), .(-(X65, p(X63)), X66), asc) :- ','(!_3, ','(length(X63, X65), add_key(X64, X66, asc))).\nand substitutionX63 -> T25,\nX64 -> T26,\nT13 -> .(T25, T26),\nX65 -> X67,\nX66 -> X68,\nX22 -> .(-(X67, p(T25)), X68)"
            },
            {
                "from": 1836,
                "to": 1910,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 1837,
                "to": 2127,
                "label": "BACKTRACK\nfor clause: add_key(.(X, Xs), .(-(L, p(X)), Ys), desc) :- ','(length(X, L1), ','(is(L, -(L1)), add_key(Xs, Ys, desc)))because of non-unification"
            },
            {
                "from": 1904,
                "to": 1911,
                "label": "CUT"
            },
            {
                "from": 1911,
                "to": 1979,
                "label": "CASE"
            },
            {
                "from": 1979,
                "to": 1983,
                "label": "ONLY EVAL with clause\nlength(X79, X80).\nand substitutionT25 -> T29,\nX79 -> T29,\nX67 -> X81,\nX80 -> X81"
            },
            {
                "from": 1983,
                "to": 1141,
                "label": "INSTANCE with matching:\nT13 -> T26\nX22 -> X68"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Triples:

add_keyA(.(X1, X2), .(-(X3, p(X1)), X4)) :- add_keyA(X2, X4).
lsortB(X1, X2) :- add_keyA(X1, X3).

Clauses:

add_keycA([], []).
add_keycA(.(X1, X2), .(-(X3, p(X1)), X4)) :- add_keycA(X2, X4).

Afs:

lsortB(x1, x2)  =  lsortB(x1)


----------------------------------------

(3) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

lsortB_in_2: (b,f)

add_keyA_in_2: (b,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   LSORTB_IN_GA(X1, X2) -> U2_GA(X1, X2, add_keyA_in_ga(X1, X3))
   LSORTB_IN_GA(X1, X2) -> ADD_KEYA_IN_GA(X1, X3)
   ADD_KEYA_IN_GA(.(X1, X2), .(-(X3, p(X1)), X4)) -> U1_GA(X1, X2, X3, X4, add_keyA_in_ga(X2, X4))
   ADD_KEYA_IN_GA(.(X1, X2), .(-(X3, p(X1)), X4)) -> ADD_KEYA_IN_GA(X2, X4)

R is empty.
The argument filtering Pi contains the following mapping:
add_keyA_in_ga(x1, x2)  =  add_keyA_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

-(x1, x2)  =  -(x2)

p(x1)  =  p(x1)

LSORTB_IN_GA(x1, x2)  =  LSORTB_IN_GA(x1)

U2_GA(x1, x2, x3)  =  U2_GA(x1, x3)

ADD_KEYA_IN_GA(x1, x2)  =  ADD_KEYA_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x1, x2, x5)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LSORTB_IN_GA(X1, X2) -> U2_GA(X1, X2, add_keyA_in_ga(X1, X3))
   LSORTB_IN_GA(X1, X2) -> ADD_KEYA_IN_GA(X1, X3)
   ADD_KEYA_IN_GA(.(X1, X2), .(-(X3, p(X1)), X4)) -> U1_GA(X1, X2, X3, X4, add_keyA_in_ga(X2, X4))
   ADD_KEYA_IN_GA(.(X1, X2), .(-(X3, p(X1)), X4)) -> ADD_KEYA_IN_GA(X2, X4)

R is empty.
The argument filtering Pi contains the following mapping:
add_keyA_in_ga(x1, x2)  =  add_keyA_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

-(x1, x2)  =  -(x2)

p(x1)  =  p(x1)

LSORTB_IN_GA(x1, x2)  =  LSORTB_IN_GA(x1)

U2_GA(x1, x2, x3)  =  U2_GA(x1, x3)

ADD_KEYA_IN_GA(x1, x2)  =  ADD_KEYA_IN_GA(x1)

U1_GA(x1, x2, x3, x4, x5)  =  U1_GA(x1, x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ADD_KEYA_IN_GA(.(X1, X2), .(-(X3, p(X1)), X4)) -> ADD_KEYA_IN_GA(X2, X4)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

-(x1, x2)  =  -(x2)

p(x1)  =  p(x1)

ADD_KEYA_IN_GA(x1, x2)  =  ADD_KEYA_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(8)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ADD_KEYA_IN_GA(.(X1, X2)) -> ADD_KEYA_IN_GA(X2)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(9) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ADD_KEYA_IN_GA(.(X1, X2)) -> ADD_KEYA_IN_GA(X2)
The graph contains the following edges 1 > 1


----------------------------------------

(10)
YES
