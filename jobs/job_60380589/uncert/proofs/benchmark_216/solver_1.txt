MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/fWaqQ.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

get(a,a,a)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) UnifyTransformerProof [EQUIVALENT, 0 ms]
(2) Prolog
    (3) UndefinedPredicateHandlerProof [SOUND, 0 ms]
    (4) Prolog
    (5) PrologToPiTRSProof [SOUND, 0 ms]
    (6) PiTRS
        (7) DependencyPairsProof [EQUIVALENT, 0 ms]
        (8) PiDP
        (9) DependencyGraphProof [EQUIVALENT, 0 ms]
        (10) PiDP
        (11) UsableRulesProof [EQUIVALENT, 1 ms]
        (12) PiDP
        (13) PiDPToQDPProof [SOUND, 0 ms]
        (14) QDP
        (15) TransformationProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) UsableRulesProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) QReductionProof [EQUIVALENT, 0 ms]
        (20) QDP
    (21) PrologToPiTRSProof [SOUND, 0 ms]
    (22) PiTRS
        (23) DependencyPairsProof [EQUIVALENT, 0 ms]
        (24) PiDP
        (25) DependencyGraphProof [EQUIVALENT, 0 ms]
        (26) PiDP
        (27) UsableRulesProof [EQUIVALENT, 0 ms]
        (28) PiDP
        (29) PiDPToQDPProof [SOUND, 0 ms]
        (30) QDP
        (31) TransformationProof [EQUIVALENT, 0 ms]
        (32) QDP
        (33) UsableRulesProof [EQUIVALENT, 0 ms]
        (34) QDP
        (35) QReductionProof [EQUIVALENT, 0 ms]
        (36) QDP
(37) IntegerArithmeticTransformerProof [SOUND, 0 ms]
(38) Prolog
    (39) UnifyTransformerProof [EQUIVALENT, 0 ms]
    (40) Prolog
    (41) PrologToPiTRSProof [SOUND, 0 ms]
    (42) PiTRS
        (43) DependencyPairsProof [EQUIVALENT, 5 ms]
        (44) PiDP
        (45) DependencyGraphProof [EQUIVALENT, 0 ms]
        (46) AND
            (47) PiDP
                (48) UsableRulesProof [EQUIVALENT, 0 ms]
                (49) PiDP
                (50) PiDPToQDPProof [SOUND, 0 ms]
                (51) QDP
                (52) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (53) YES
            (54) PiDP
                (55) UsableRulesProof [EQUIVALENT, 0 ms]
                (56) PiDP
                (57) PiDPToQDPProof [SOUND, 0 ms]
                (58) QDP
                (59) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (60) YES
            (61) PiDP
                (62) UsableRulesProof [EQUIVALENT, 0 ms]
                (63) PiDP
                (64) PiDPToQDPProof [SOUND, 0 ms]
                (65) QDP
                (66) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (67) YES
            (68) PiDP
                (69) UsableRulesProof [EQUIVALENT, 0 ms]
                (70) PiDP
                (71) PiDPToQDPProof [SOUND, 0 ms]
                (72) QDP
                (73) TransformationProof [EQUIVALENT, 0 ms]
                (74) QDP
                (75) UsableRulesProof [EQUIVALENT, 0 ms]
                (76) QDP
                (77) QReductionProof [EQUIVALENT, 0 ms]
                (78) QDP
                (79) QDPQMonotonicMRRProof [EQUIVALENT, 28 ms]
                (80) QDP
                (81) UsableRulesProof [EQUIVALENT, 0 ms]
                (82) QDP
                (83) QReductionProof [EQUIVALENT, 0 ms]
                (84) QDP
                (85) QDPQMonotonicMRRProof [EQUIVALENT, 14 ms]
                (86) QDP
                (87) UsableRulesProof [EQUIVALENT, 0 ms]
                (88) QDP
                (89) QReductionProof [EQUIVALENT, 0 ms]
                (90) QDP
    (91) PrologToPiTRSProof [SOUND, 11 ms]
    (92) PiTRS
        (93) DependencyPairsProof [EQUIVALENT, 0 ms]
        (94) PiDP
        (95) DependencyGraphProof [EQUIVALENT, 0 ms]
        (96) AND
            (97) PiDP
                (98) UsableRulesProof [EQUIVALENT, 0 ms]
                (99) PiDP
                (100) PiDPToQDPProof [SOUND, 0 ms]
                (101) QDP
                (102) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (103) YES
            (104) PiDP
                (105) UsableRulesProof [EQUIVALENT, 0 ms]
                (106) PiDP
                (107) PiDPToQDPProof [SOUND, 0 ms]
                (108) QDP
                (109) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (110) YES
            (111) PiDP
                (112) UsableRulesProof [EQUIVALENT, 0 ms]
                (113) PiDP
                (114) PiDPToQDPProof [SOUND, 0 ms]
                (115) QDP
                (116) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (117) YES
            (118) PiDP
                (119) UsableRulesProof [EQUIVALENT, 0 ms]
                (120) PiDP
                (121) PiDPToQDPProof [SOUND, 0 ms]
                (122) QDP
                (123) TransformationProof [EQUIVALENT, 0 ms]
                (124) QDP
                (125) UsableRulesProof [EQUIVALENT, 0 ms]
                (126) QDP
                (127) QReductionProof [EQUIVALENT, 0 ms]
                (128) QDP
                (129) QDPQMonotonicMRRProof [EQUIVALENT, 30 ms]
                (130) QDP
                (131) MRRProof [EQUIVALENT, 14 ms]
                (132) QDP
                (133) QReductionProof [EQUIVALENT, 0 ms]
                (134) QDP
                (135) QDPQMonotonicMRRProof [EQUIVALENT, 8 ms]
                (136) QDP
                (137) QDPQMonotonicMRRProof [EQUIVALENT, 11 ms]
                (138) QDP
                (139) QReductionProof [EQUIVALENT, 0 ms]
                (140) QDP
(141) PrologToDTProblemTransformerProof [SOUND, 18 ms]
(142) TRIPLES
    (143) TriplesToPiDPProof [SOUND, 0 ms]
    (144) PiDP
    (145) DependencyGraphProof [EQUIVALENT, 0 ms]
    (146) PiDP
    (147) PiDPToQDPProof [SOUND, 0 ms]
    (148) QDP
    (149) NonTerminationLoopProof [COMPLETE, 0 ms]
    (150) NO
(151) PrologToIRSwTTransformerProof [SOUND, 25 ms]
(152) IRSwT
    (153) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (154) IRSwT
    (155) IntTRSCompressionProof [EQUIVALENT, 3 ms]
    (156) IRSwT
    (157) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (158) IRSwT
    (159) IRSwTTerminationDigraphProof [EQUIVALENT, 3 ms]
    (160) IRSwT
    (161) IntTRSCompressionProof [EQUIVALENT, 0 ms]
    (162) IRSwT
    (163) IRSwTToIntTRSProof [SOUND, 3 ms]
    (164) IRSwT
    (165) IntTRSNonPeriodicNontermProof [COMPLETE, 2 ms]
    (166) NO


----------------------------------------

(0)
Obligation:
Clauses:

get(.(X, XS), 0, Res) :- =(Res, X).
get(.(X, XS), Y, Res) :- ','(is(YP, -(Y, 1)), get(XS, YP, Res)).


Query: get(a,a,a)
----------------------------------------

(1) UnifyTransformerProof (EQUIVALENT)
Added a fact for the built-in = predicate [PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

get(.(X, XS), 0, Res) :- =(Res, X).
get(.(X, XS), Y, Res) :- ','(is(YP, -(Y, 1)), get(XS, YP, Res)).
=(X, X).


Query: get(a,a,a)
----------------------------------------

(3) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(4)
Obligation:
Clauses:

get(.(X, XS), 0, Res) :- =(Res, X).
get(.(X, XS), Y, Res) :- ','(is(YP, -(Y, 1)), get(XS, YP, Res)).
=(X, X).
is(X0, X1).


Query: get(a,a,a)
----------------------------------------

(5) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

get_in_3: (f,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), 0, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), 0, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, is_in_ag(YP, -(Y, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_aaa(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> U3_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U3_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

.(x1, x2)  =  .(x2)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

-(x1, x2)  =  -(x2)

is_out_ag(x1, x2)  =  is_out_ag

1  =  1

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(6)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), 0, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), 0, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, is_in_ag(YP, -(Y, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_aaa(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> U3_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U3_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

.(x1, x2)  =  .(x2)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

-(x1, x2)  =  -(x2)

is_out_ag(x1, x2)  =  is_out_ag

1  =  1

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)



----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA(.(X, XS), 0, Res) -> U1_AAA(X, XS, Res, =_in_aa(Res, X))
   GET_IN_AAA(.(X, XS), 0, Res) -> =_IN_AA(Res, X)
   GET_IN_AAA(.(X, XS), Y, Res) -> U2_AAA(X, XS, Y, Res, is_in_ag(YP, -(Y, 1)))
   GET_IN_AAA(.(X, XS), Y, Res) -> IS_IN_AG(YP, -(Y, 1))
   U2_AAA(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> U3_AAA(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U2_AAA(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> GET_IN_AAA(XS, YP, Res)

The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), 0, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), 0, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, is_in_ag(YP, -(Y, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_aaa(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> U3_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U3_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

.(x1, x2)  =  .(x2)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

-(x1, x2)  =  -(x2)

is_out_ag(x1, x2)  =  is_out_ag

1  =  1

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

GET_IN_AAA(x1, x2, x3)  =  GET_IN_AAA

U1_AAA(x1, x2, x3, x4)  =  U1_AAA(x4)

=_IN_AA(x1, x2)  =  =_IN_AA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U3_AAA(x1, x2, x3, x4, x5)  =  U3_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA(.(X, XS), 0, Res) -> U1_AAA(X, XS, Res, =_in_aa(Res, X))
   GET_IN_AAA(.(X, XS), 0, Res) -> =_IN_AA(Res, X)
   GET_IN_AAA(.(X, XS), Y, Res) -> U2_AAA(X, XS, Y, Res, is_in_ag(YP, -(Y, 1)))
   GET_IN_AAA(.(X, XS), Y, Res) -> IS_IN_AG(YP, -(Y, 1))
   U2_AAA(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> U3_AAA(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U2_AAA(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> GET_IN_AAA(XS, YP, Res)

The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), 0, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), 0, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, is_in_ag(YP, -(Y, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_aaa(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> U3_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U3_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

.(x1, x2)  =  .(x2)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

-(x1, x2)  =  -(x2)

is_out_ag(x1, x2)  =  is_out_ag

1  =  1

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

GET_IN_AAA(x1, x2, x3)  =  GET_IN_AAA

U1_AAA(x1, x2, x3, x4)  =  U1_AAA(x4)

=_IN_AA(x1, x2)  =  =_IN_AA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U3_AAA(x1, x2, x3, x4, x5)  =  U3_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 4 less nodes.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA(.(X, XS), Y, Res) -> U2_AAA(X, XS, Y, Res, is_in_ag(YP, -(Y, 1)))
   U2_AAA(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> GET_IN_AAA(XS, YP, Res)

The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), 0, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), 0, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, is_in_ag(YP, -(Y, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_aaa(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> U3_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U3_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

.(x1, x2)  =  .(x2)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

-(x1, x2)  =  -(x2)

is_out_ag(x1, x2)  =  is_out_ag

1  =  1

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

GET_IN_AAA(x1, x2, x3)  =  GET_IN_AAA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(12)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA(.(X, XS), Y, Res) -> U2_AAA(X, XS, Y, Res, is_in_ag(YP, -(Y, 1)))
   U2_AAA(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> GET_IN_AAA(XS, YP, Res)

The TRS R consists of the following rules:

   is_in_ag(X0, X1) -> is_out_ag(X0, X1)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

is_in_ag(x1, x2)  =  is_in_ag(x2)

-(x1, x2)  =  -(x2)

is_out_ag(x1, x2)  =  is_out_ag

1  =  1

GET_IN_AAA(x1, x2, x3)  =  GET_IN_AAA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(13) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(is_in_ag(-(1)))
   U2_AAA(is_out_ag) -> GET_IN_AAA

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag

The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule GET_IN_AAA -> U2_AAA(is_in_ag(-(1))) at position [0] we obtained the following new rules [LPAR04]:

   (GET_IN_AAA -> U2_AAA(is_out_ag),GET_IN_AAA -> U2_AAA(is_out_ag))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_AAA(is_out_ag) -> GET_IN_AAA
   GET_IN_AAA -> U2_AAA(is_out_ag)

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag

The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_AAA(is_out_ag) -> GET_IN_AAA
   GET_IN_AAA -> U2_AAA(is_out_ag)

R is empty.
The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   is_in_ag(x0)


----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_AAA(is_out_ag) -> GET_IN_AAA
   GET_IN_AAA -> U2_AAA(is_out_ag)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

get_in_3: (f,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), 0, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), 0, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, is_in_ag(YP, -(Y, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_aaa(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> U3_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U3_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

.(x1, x2)  =  .(x2)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

-(x1, x2)  =  -(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

1  =  1

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(22)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), 0, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), 0, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, is_in_ag(YP, -(Y, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_aaa(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> U3_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U3_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

.(x1, x2)  =  .(x2)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

-(x1, x2)  =  -(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

1  =  1

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)



----------------------------------------

(23) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA(.(X, XS), 0, Res) -> U1_AAA(X, XS, Res, =_in_aa(Res, X))
   GET_IN_AAA(.(X, XS), 0, Res) -> =_IN_AA(Res, X)
   GET_IN_AAA(.(X, XS), Y, Res) -> U2_AAA(X, XS, Y, Res, is_in_ag(YP, -(Y, 1)))
   GET_IN_AAA(.(X, XS), Y, Res) -> IS_IN_AG(YP, -(Y, 1))
   U2_AAA(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> U3_AAA(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U2_AAA(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> GET_IN_AAA(XS, YP, Res)

The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), 0, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), 0, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, is_in_ag(YP, -(Y, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_aaa(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> U3_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U3_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

.(x1, x2)  =  .(x2)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

-(x1, x2)  =  -(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

1  =  1

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

GET_IN_AAA(x1, x2, x3)  =  GET_IN_AAA

U1_AAA(x1, x2, x3, x4)  =  U1_AAA(x4)

=_IN_AA(x1, x2)  =  =_IN_AA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U3_AAA(x1, x2, x3, x4, x5)  =  U3_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(24)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA(.(X, XS), 0, Res) -> U1_AAA(X, XS, Res, =_in_aa(Res, X))
   GET_IN_AAA(.(X, XS), 0, Res) -> =_IN_AA(Res, X)
   GET_IN_AAA(.(X, XS), Y, Res) -> U2_AAA(X, XS, Y, Res, is_in_ag(YP, -(Y, 1)))
   GET_IN_AAA(.(X, XS), Y, Res) -> IS_IN_AG(YP, -(Y, 1))
   U2_AAA(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> U3_AAA(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U2_AAA(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> GET_IN_AAA(XS, YP, Res)

The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), 0, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), 0, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, is_in_ag(YP, -(Y, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_aaa(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> U3_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U3_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

.(x1, x2)  =  .(x2)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

-(x1, x2)  =  -(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

1  =  1

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

GET_IN_AAA(x1, x2, x3)  =  GET_IN_AAA

U1_AAA(x1, x2, x3, x4)  =  U1_AAA(x4)

=_IN_AA(x1, x2)  =  =_IN_AA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U3_AAA(x1, x2, x3, x4, x5)  =  U3_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(25) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 4 less nodes.
----------------------------------------

(26)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA(.(X, XS), Y, Res) -> U2_AAA(X, XS, Y, Res, is_in_ag(YP, -(Y, 1)))
   U2_AAA(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> GET_IN_AAA(XS, YP, Res)

The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), 0, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), 0, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, is_in_ag(YP, -(Y, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_aaa(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> U3_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U3_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

.(x1, x2)  =  .(x2)

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

-(x1, x2)  =  -(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

1  =  1

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

GET_IN_AAA(x1, x2, x3)  =  GET_IN_AAA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(27) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(28)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA(.(X, XS), Y, Res) -> U2_AAA(X, XS, Y, Res, is_in_ag(YP, -(Y, 1)))
   U2_AAA(X, XS, Y, Res, is_out_ag(YP, -(Y, 1))) -> GET_IN_AAA(XS, YP, Res)

The TRS R consists of the following rules:

   is_in_ag(X0, X1) -> is_out_ag(X0, X1)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

is_in_ag(x1, x2)  =  is_in_ag(x2)

-(x1, x2)  =  -(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

1  =  1

GET_IN_AAA(x1, x2, x3)  =  GET_IN_AAA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(29) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(is_in_ag(-(1)))
   U2_AAA(is_out_ag(-(1))) -> GET_IN_AAA

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag(X1)

The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(31) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule GET_IN_AAA -> U2_AAA(is_in_ag(-(1))) at position [0] we obtained the following new rules [LPAR04]:

   (GET_IN_AAA -> U2_AAA(is_out_ag(-(1))),GET_IN_AAA -> U2_AAA(is_out_ag(-(1))))


----------------------------------------

(32)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_AAA(is_out_ag(-(1))) -> GET_IN_AAA
   GET_IN_AAA -> U2_AAA(is_out_ag(-(1)))

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag(X1)

The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(33) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(34)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_AAA(is_out_ag(-(1))) -> GET_IN_AAA
   GET_IN_AAA -> U2_AAA(is_out_ag(-(1)))

R is empty.
The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(35) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   is_in_ag(x0)


----------------------------------------

(36)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_AAA(is_out_ag(-(1))) -> GET_IN_AAA
   GET_IN_AAA -> U2_AAA(is_out_ag(-(1)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(37) IntegerArithmeticTransformerProof (SOUND)
Added definitions of predefined predicates [PROLOG].
----------------------------------------

(38)
Obligation:
Clauses:

get(.(X, XS), zero, Res) :- =(Res, X).
get(.(X, XS), Y, Res) :- ','(isMinus(Y, succ(zero), U), ','(=(YP, U), get(XS, YP, Res))).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).


Query: get(a,a,a)
----------------------------------------

(39) UnifyTransformerProof (EQUIVALENT)
Added a fact for the built-in = predicate [PROLOG].
----------------------------------------

(40)
Obligation:
Clauses:

get(.(X, XS), zero, Res) :- =(Res, X).
get(.(X, XS), Y, Res) :- ','(isMinus(Y, succ(zero), U), ','(=(YP, U), get(XS, YP, Res))).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
=(X, X).


Query: get(a,a,a)
----------------------------------------

(41) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

get_in_3: (f,f,f)

isMinus_in_3: (f,b,f) (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), zero, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), zero, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   isMinus_in_aga(X, zero, X) -> isMinus_out_aga(X, zero, X)
   isMinus_in_aga(zero, succ(Y), pred(Z)) -> U9_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U9_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U10_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U11_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U12_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U13_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U14_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U13_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U12_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U11_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U10_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U9_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, succ(Y), pred(Z))
   isMinus_in_aga(zero, pred(Y), succ(Z)) -> U10_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   U10_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, pred(Y), succ(Z))
   isMinus_in_aga(succ(X), succ(Y), Z) -> U11_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(succ(X), pred(Y), succ(succ(Z))) -> U12_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), succ(Y), pred(pred(Z))) -> U13_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), pred(Y), Z) -> U14_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   U14_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), pred(Y), Z)
   U13_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), succ(Y), pred(pred(Z)))
   U12_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), pred(Y), succ(succ(Z)))
   U11_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), succ(Y), Z)
   U2_aaa(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_aaa(X, XS, Y, Res, =_in_aa(YP, U))
   U3_aaa(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U4_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

isMinus_in_aga(x1, x2, x3)  =  isMinus_in_aga(x2)

zero  =  zero

isMinus_out_aga(x1, x2, x3)  =  isMinus_out_aga(x2)

succ(x1)  =  succ(x1)

U9_aga(x1, x2, x3)  =  U9_aga(x1, x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U9_gga(x1, x2, x3)  =  U9_gga(x1, x3)

pred(x1)  =  pred(x1)

U10_gga(x1, x2, x3)  =  U10_gga(x1, x3)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x2, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4)  =  U13_gga(x1, x2, x4)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x1, x2, x4)

U10_aga(x1, x2, x3)  =  U10_aga(x1, x3)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x2, x4)

U12_aga(x1, x2, x3, x4)  =  U12_aga(x2, x4)

U13_aga(x1, x2, x3, x4)  =  U13_aga(x2, x4)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x2, x4)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

U4_aaa(x1, x2, x3, x4, x5)  =  U4_aaa(x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(42)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), zero, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), zero, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   isMinus_in_aga(X, zero, X) -> isMinus_out_aga(X, zero, X)
   isMinus_in_aga(zero, succ(Y), pred(Z)) -> U9_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U9_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U10_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U11_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U12_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U13_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U14_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U13_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U12_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U11_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U10_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U9_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, succ(Y), pred(Z))
   isMinus_in_aga(zero, pred(Y), succ(Z)) -> U10_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   U10_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, pred(Y), succ(Z))
   isMinus_in_aga(succ(X), succ(Y), Z) -> U11_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(succ(X), pred(Y), succ(succ(Z))) -> U12_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), succ(Y), pred(pred(Z))) -> U13_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), pred(Y), Z) -> U14_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   U14_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), pred(Y), Z)
   U13_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), succ(Y), pred(pred(Z)))
   U12_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), pred(Y), succ(succ(Z)))
   U11_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), succ(Y), Z)
   U2_aaa(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_aaa(X, XS, Y, Res, =_in_aa(YP, U))
   U3_aaa(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U4_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

isMinus_in_aga(x1, x2, x3)  =  isMinus_in_aga(x2)

zero  =  zero

isMinus_out_aga(x1, x2, x3)  =  isMinus_out_aga(x2)

succ(x1)  =  succ(x1)

U9_aga(x1, x2, x3)  =  U9_aga(x1, x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U9_gga(x1, x2, x3)  =  U9_gga(x1, x3)

pred(x1)  =  pred(x1)

U10_gga(x1, x2, x3)  =  U10_gga(x1, x3)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x2, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4)  =  U13_gga(x1, x2, x4)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x1, x2, x4)

U10_aga(x1, x2, x3)  =  U10_aga(x1, x3)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x2, x4)

U12_aga(x1, x2, x3, x4)  =  U12_aga(x2, x4)

U13_aga(x1, x2, x3, x4)  =  U13_aga(x2, x4)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x2, x4)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

U4_aaa(x1, x2, x3, x4, x5)  =  U4_aaa(x5)



----------------------------------------

(43) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA(.(X, XS), zero, Res) -> U1_AAA(X, XS, Res, =_in_aa(Res, X))
   GET_IN_AAA(.(X, XS), zero, Res) -> =_IN_AA(Res, X)
   GET_IN_AAA(.(X, XS), Y, Res) -> U2_AAA(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   GET_IN_AAA(.(X, XS), Y, Res) -> ISMINUS_IN_AGA(Y, succ(zero), U)
   ISMINUS_IN_AGA(zero, succ(Y), pred(Z)) -> U9_AGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_AGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> U9_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> U10_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> U11_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> U12_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> U13_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> U14_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_AGA(zero, pred(Y), succ(Z)) -> U10_AGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_AGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_AGA(succ(X), succ(Y), Z) -> U11_AGA(X, Y, Z, isMinus_in_aga(X, Y, Z))
   ISMINUS_IN_AGA(succ(X), succ(Y), Z) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(succ(X), pred(Y), succ(succ(Z))) -> U12_AGA(X, Y, Z, isMinus_in_aga(X, Y, Z))
   ISMINUS_IN_AGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(pred(X), succ(Y), pred(pred(Z))) -> U13_AGA(X, Y, Z, isMinus_in_aga(X, Y, Z))
   ISMINUS_IN_AGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(pred(X), pred(Y), Z) -> U14_AGA(X, Y, Z, isMinus_in_aga(X, Y, Z))
   ISMINUS_IN_AGA(pred(X), pred(Y), Z) -> ISMINUS_IN_AGA(X, Y, Z)
   U2_AAA(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_AAA(X, XS, Y, Res, =_in_aa(YP, U))
   U2_AAA(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> =_IN_AA(YP, U)
   U3_AAA(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_AAA(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U3_AAA(X, XS, Y, Res, =_out_aa(YP, U)) -> GET_IN_AAA(XS, YP, Res)

The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), zero, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), zero, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   isMinus_in_aga(X, zero, X) -> isMinus_out_aga(X, zero, X)
   isMinus_in_aga(zero, succ(Y), pred(Z)) -> U9_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U9_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U10_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U11_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U12_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U13_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U14_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U13_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U12_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U11_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U10_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U9_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, succ(Y), pred(Z))
   isMinus_in_aga(zero, pred(Y), succ(Z)) -> U10_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   U10_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, pred(Y), succ(Z))
   isMinus_in_aga(succ(X), succ(Y), Z) -> U11_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(succ(X), pred(Y), succ(succ(Z))) -> U12_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), succ(Y), pred(pred(Z))) -> U13_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), pred(Y), Z) -> U14_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   U14_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), pred(Y), Z)
   U13_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), succ(Y), pred(pred(Z)))
   U12_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), pred(Y), succ(succ(Z)))
   U11_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), succ(Y), Z)
   U2_aaa(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_aaa(X, XS, Y, Res, =_in_aa(YP, U))
   U3_aaa(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U4_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

isMinus_in_aga(x1, x2, x3)  =  isMinus_in_aga(x2)

zero  =  zero

isMinus_out_aga(x1, x2, x3)  =  isMinus_out_aga(x2)

succ(x1)  =  succ(x1)

U9_aga(x1, x2, x3)  =  U9_aga(x1, x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U9_gga(x1, x2, x3)  =  U9_gga(x1, x3)

pred(x1)  =  pred(x1)

U10_gga(x1, x2, x3)  =  U10_gga(x1, x3)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x2, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4)  =  U13_gga(x1, x2, x4)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x1, x2, x4)

U10_aga(x1, x2, x3)  =  U10_aga(x1, x3)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x2, x4)

U12_aga(x1, x2, x3, x4)  =  U12_aga(x2, x4)

U13_aga(x1, x2, x3, x4)  =  U13_aga(x2, x4)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x2, x4)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

U4_aaa(x1, x2, x3, x4, x5)  =  U4_aaa(x5)

GET_IN_AAA(x1, x2, x3)  =  GET_IN_AAA

U1_AAA(x1, x2, x3, x4)  =  U1_AAA(x4)

=_IN_AA(x1, x2)  =  =_IN_AA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)

ISMINUS_IN_AGA(x1, x2, x3)  =  ISMINUS_IN_AGA(x2)

U9_AGA(x1, x2, x3)  =  U9_AGA(x1, x3)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)

U9_GGA(x1, x2, x3)  =  U9_GGA(x1, x3)

U10_GGA(x1, x2, x3)  =  U10_GGA(x1, x3)

U11_GGA(x1, x2, x3, x4)  =  U11_GGA(x1, x2, x4)

U12_GGA(x1, x2, x3, x4)  =  U12_GGA(x1, x2, x4)

U13_GGA(x1, x2, x3, x4)  =  U13_GGA(x1, x2, x4)

U14_GGA(x1, x2, x3, x4)  =  U14_GGA(x1, x2, x4)

U10_AGA(x1, x2, x3)  =  U10_AGA(x1, x3)

U11_AGA(x1, x2, x3, x4)  =  U11_AGA(x2, x4)

U12_AGA(x1, x2, x3, x4)  =  U12_AGA(x2, x4)

U13_AGA(x1, x2, x3, x4)  =  U13_AGA(x2, x4)

U14_AGA(x1, x2, x3, x4)  =  U14_AGA(x2, x4)

U3_AAA(x1, x2, x3, x4, x5)  =  U3_AAA(x5)

U4_AAA(x1, x2, x3, x4, x5)  =  U4_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(44)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA(.(X, XS), zero, Res) -> U1_AAA(X, XS, Res, =_in_aa(Res, X))
   GET_IN_AAA(.(X, XS), zero, Res) -> =_IN_AA(Res, X)
   GET_IN_AAA(.(X, XS), Y, Res) -> U2_AAA(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   GET_IN_AAA(.(X, XS), Y, Res) -> ISMINUS_IN_AGA(Y, succ(zero), U)
   ISMINUS_IN_AGA(zero, succ(Y), pred(Z)) -> U9_AGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_AGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> U9_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> U10_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> U11_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> U12_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> U13_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> U14_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_AGA(zero, pred(Y), succ(Z)) -> U10_AGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_AGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_AGA(succ(X), succ(Y), Z) -> U11_AGA(X, Y, Z, isMinus_in_aga(X, Y, Z))
   ISMINUS_IN_AGA(succ(X), succ(Y), Z) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(succ(X), pred(Y), succ(succ(Z))) -> U12_AGA(X, Y, Z, isMinus_in_aga(X, Y, Z))
   ISMINUS_IN_AGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(pred(X), succ(Y), pred(pred(Z))) -> U13_AGA(X, Y, Z, isMinus_in_aga(X, Y, Z))
   ISMINUS_IN_AGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(pred(X), pred(Y), Z) -> U14_AGA(X, Y, Z, isMinus_in_aga(X, Y, Z))
   ISMINUS_IN_AGA(pred(X), pred(Y), Z) -> ISMINUS_IN_AGA(X, Y, Z)
   U2_AAA(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_AAA(X, XS, Y, Res, =_in_aa(YP, U))
   U2_AAA(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> =_IN_AA(YP, U)
   U3_AAA(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_AAA(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U3_AAA(X, XS, Y, Res, =_out_aa(YP, U)) -> GET_IN_AAA(XS, YP, Res)

The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), zero, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), zero, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   isMinus_in_aga(X, zero, X) -> isMinus_out_aga(X, zero, X)
   isMinus_in_aga(zero, succ(Y), pred(Z)) -> U9_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U9_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U10_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U11_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U12_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U13_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U14_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U13_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U12_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U11_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U10_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U9_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, succ(Y), pred(Z))
   isMinus_in_aga(zero, pred(Y), succ(Z)) -> U10_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   U10_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, pred(Y), succ(Z))
   isMinus_in_aga(succ(X), succ(Y), Z) -> U11_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(succ(X), pred(Y), succ(succ(Z))) -> U12_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), succ(Y), pred(pred(Z))) -> U13_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), pred(Y), Z) -> U14_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   U14_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), pred(Y), Z)
   U13_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), succ(Y), pred(pred(Z)))
   U12_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), pred(Y), succ(succ(Z)))
   U11_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), succ(Y), Z)
   U2_aaa(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_aaa(X, XS, Y, Res, =_in_aa(YP, U))
   U3_aaa(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U4_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

isMinus_in_aga(x1, x2, x3)  =  isMinus_in_aga(x2)

zero  =  zero

isMinus_out_aga(x1, x2, x3)  =  isMinus_out_aga(x2)

succ(x1)  =  succ(x1)

U9_aga(x1, x2, x3)  =  U9_aga(x1, x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U9_gga(x1, x2, x3)  =  U9_gga(x1, x3)

pred(x1)  =  pred(x1)

U10_gga(x1, x2, x3)  =  U10_gga(x1, x3)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x2, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4)  =  U13_gga(x1, x2, x4)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x1, x2, x4)

U10_aga(x1, x2, x3)  =  U10_aga(x1, x3)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x2, x4)

U12_aga(x1, x2, x3, x4)  =  U12_aga(x2, x4)

U13_aga(x1, x2, x3, x4)  =  U13_aga(x2, x4)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x2, x4)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

U4_aaa(x1, x2, x3, x4, x5)  =  U4_aaa(x5)

GET_IN_AAA(x1, x2, x3)  =  GET_IN_AAA

U1_AAA(x1, x2, x3, x4)  =  U1_AAA(x4)

=_IN_AA(x1, x2)  =  =_IN_AA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)

ISMINUS_IN_AGA(x1, x2, x3)  =  ISMINUS_IN_AGA(x2)

U9_AGA(x1, x2, x3)  =  U9_AGA(x1, x3)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)

U9_GGA(x1, x2, x3)  =  U9_GGA(x1, x3)

U10_GGA(x1, x2, x3)  =  U10_GGA(x1, x3)

U11_GGA(x1, x2, x3, x4)  =  U11_GGA(x1, x2, x4)

U12_GGA(x1, x2, x3, x4)  =  U12_GGA(x1, x2, x4)

U13_GGA(x1, x2, x3, x4)  =  U13_GGA(x1, x2, x4)

U14_GGA(x1, x2, x3, x4)  =  U14_GGA(x1, x2, x4)

U10_AGA(x1, x2, x3)  =  U10_AGA(x1, x3)

U11_AGA(x1, x2, x3, x4)  =  U11_AGA(x2, x4)

U12_AGA(x1, x2, x3, x4)  =  U12_AGA(x2, x4)

U13_AGA(x1, x2, x3, x4)  =  U13_AGA(x2, x4)

U14_AGA(x1, x2, x3, x4)  =  U14_AGA(x2, x4)

U3_AAA(x1, x2, x3, x4, x5)  =  U3_AAA(x5)

U4_AAA(x1, x2, x3, x4, x5)  =  U4_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(45) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 4 SCCs with 19 less nodes.
----------------------------------------

(46)
Complex Obligation (AND)

----------------------------------------

(47)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)

The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), zero, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), zero, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   isMinus_in_aga(X, zero, X) -> isMinus_out_aga(X, zero, X)
   isMinus_in_aga(zero, succ(Y), pred(Z)) -> U9_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U9_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U10_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U11_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U12_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U13_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U14_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U13_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U12_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U11_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U10_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U9_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, succ(Y), pred(Z))
   isMinus_in_aga(zero, pred(Y), succ(Z)) -> U10_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   U10_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, pred(Y), succ(Z))
   isMinus_in_aga(succ(X), succ(Y), Z) -> U11_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(succ(X), pred(Y), succ(succ(Z))) -> U12_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), succ(Y), pred(pred(Z))) -> U13_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), pred(Y), Z) -> U14_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   U14_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), pred(Y), Z)
   U13_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), succ(Y), pred(pred(Z)))
   U12_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), pred(Y), succ(succ(Z)))
   U11_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), succ(Y), Z)
   U2_aaa(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_aaa(X, XS, Y, Res, =_in_aa(YP, U))
   U3_aaa(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U4_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

isMinus_in_aga(x1, x2, x3)  =  isMinus_in_aga(x2)

zero  =  zero

isMinus_out_aga(x1, x2, x3)  =  isMinus_out_aga(x2)

succ(x1)  =  succ(x1)

U9_aga(x1, x2, x3)  =  U9_aga(x1, x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U9_gga(x1, x2, x3)  =  U9_gga(x1, x3)

pred(x1)  =  pred(x1)

U10_gga(x1, x2, x3)  =  U10_gga(x1, x3)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x2, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4)  =  U13_gga(x1, x2, x4)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x1, x2, x4)

U10_aga(x1, x2, x3)  =  U10_aga(x1, x3)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x2, x4)

U12_aga(x1, x2, x3, x4)  =  U12_aga(x2, x4)

U13_aga(x1, x2, x3, x4)  =  U13_aga(x2, x4)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x2, x4)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

U4_aaa(x1, x2, x3, x4, x5)  =  U4_aaa(x5)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(48) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(49)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
zero  =  zero

succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(50) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y)) -> ISMINUS_IN_GGA(zero, Y)
   ISMINUS_IN_GGA(zero, succ(Y)) -> ISMINUS_IN_GGA(zero, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(52) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGA(zero, pred(Y)) -> ISMINUS_IN_GGA(zero, Y)
The graph contains the following edges 1 >= 1, 2 > 2


*ISMINUS_IN_GGA(zero, succ(Y)) -> ISMINUS_IN_GGA(zero, Y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(53)
YES

----------------------------------------

(54)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), zero, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), zero, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   isMinus_in_aga(X, zero, X) -> isMinus_out_aga(X, zero, X)
   isMinus_in_aga(zero, succ(Y), pred(Z)) -> U9_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U9_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U10_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U11_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U12_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U13_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U14_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U13_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U12_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U11_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U10_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U9_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, succ(Y), pred(Z))
   isMinus_in_aga(zero, pred(Y), succ(Z)) -> U10_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   U10_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, pred(Y), succ(Z))
   isMinus_in_aga(succ(X), succ(Y), Z) -> U11_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(succ(X), pred(Y), succ(succ(Z))) -> U12_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), succ(Y), pred(pred(Z))) -> U13_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), pred(Y), Z) -> U14_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   U14_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), pred(Y), Z)
   U13_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), succ(Y), pred(pred(Z)))
   U12_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), pred(Y), succ(succ(Z)))
   U11_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), succ(Y), Z)
   U2_aaa(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_aaa(X, XS, Y, Res, =_in_aa(YP, U))
   U3_aaa(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U4_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

isMinus_in_aga(x1, x2, x3)  =  isMinus_in_aga(x2)

zero  =  zero

isMinus_out_aga(x1, x2, x3)  =  isMinus_out_aga(x2)

succ(x1)  =  succ(x1)

U9_aga(x1, x2, x3)  =  U9_aga(x1, x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U9_gga(x1, x2, x3)  =  U9_gga(x1, x3)

pred(x1)  =  pred(x1)

U10_gga(x1, x2, x3)  =  U10_gga(x1, x3)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x2, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4)  =  U13_gga(x1, x2, x4)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x1, x2, x4)

U10_aga(x1, x2, x3)  =  U10_aga(x1, x3)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x2, x4)

U12_aga(x1, x2, x3, x4)  =  U12_aga(x2, x4)

U13_aga(x1, x2, x3, x4)  =  U13_aga(x2, x4)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x2, x4)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

U4_aaa(x1, x2, x3, x4, x5)  =  U4_aaa(x5)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(55) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(56)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(57) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(succ(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(pred(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(pred(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(59) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGA(succ(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(succ(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(pred(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(pred(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(60)
YES

----------------------------------------

(61)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_AGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(succ(X), succ(Y), Z) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(pred(X), pred(Y), Z) -> ISMINUS_IN_AGA(X, Y, Z)

The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), zero, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), zero, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   isMinus_in_aga(X, zero, X) -> isMinus_out_aga(X, zero, X)
   isMinus_in_aga(zero, succ(Y), pred(Z)) -> U9_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U9_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U10_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U11_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U12_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U13_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U14_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U13_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U12_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U11_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U10_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U9_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, succ(Y), pred(Z))
   isMinus_in_aga(zero, pred(Y), succ(Z)) -> U10_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   U10_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, pred(Y), succ(Z))
   isMinus_in_aga(succ(X), succ(Y), Z) -> U11_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(succ(X), pred(Y), succ(succ(Z))) -> U12_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), succ(Y), pred(pred(Z))) -> U13_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), pred(Y), Z) -> U14_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   U14_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), pred(Y), Z)
   U13_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), succ(Y), pred(pred(Z)))
   U12_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), pred(Y), succ(succ(Z)))
   U11_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), succ(Y), Z)
   U2_aaa(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_aaa(X, XS, Y, Res, =_in_aa(YP, U))
   U3_aaa(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U4_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

isMinus_in_aga(x1, x2, x3)  =  isMinus_in_aga(x2)

zero  =  zero

isMinus_out_aga(x1, x2, x3)  =  isMinus_out_aga(x2)

succ(x1)  =  succ(x1)

U9_aga(x1, x2, x3)  =  U9_aga(x1, x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U9_gga(x1, x2, x3)  =  U9_gga(x1, x3)

pred(x1)  =  pred(x1)

U10_gga(x1, x2, x3)  =  U10_gga(x1, x3)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x2, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4)  =  U13_gga(x1, x2, x4)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x1, x2, x4)

U10_aga(x1, x2, x3)  =  U10_aga(x1, x3)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x2, x4)

U12_aga(x1, x2, x3, x4)  =  U12_aga(x2, x4)

U13_aga(x1, x2, x3, x4)  =  U13_aga(x2, x4)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x2, x4)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

U4_aaa(x1, x2, x3, x4, x5)  =  U4_aaa(x5)

ISMINUS_IN_AGA(x1, x2, x3)  =  ISMINUS_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(62) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(63)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_AGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(succ(X), succ(Y), Z) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(pred(X), pred(Y), Z) -> ISMINUS_IN_AGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

ISMINUS_IN_AGA(x1, x2, x3)  =  ISMINUS_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(64) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(65)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_AGA(pred(Y)) -> ISMINUS_IN_AGA(Y)
   ISMINUS_IN_AGA(succ(Y)) -> ISMINUS_IN_AGA(Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(66) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_AGA(pred(Y)) -> ISMINUS_IN_AGA(Y)
The graph contains the following edges 1 > 1


*ISMINUS_IN_AGA(succ(Y)) -> ISMINUS_IN_AGA(Y)
The graph contains the following edges 1 > 1


----------------------------------------

(67)
YES

----------------------------------------

(68)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA(.(X, XS), Y, Res) -> U2_AAA(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   U2_AAA(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_AAA(X, XS, Y, Res, =_in_aa(YP, U))
   U3_AAA(X, XS, Y, Res, =_out_aa(YP, U)) -> GET_IN_AAA(XS, YP, Res)

The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), zero, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), zero, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   isMinus_in_aga(X, zero, X) -> isMinus_out_aga(X, zero, X)
   isMinus_in_aga(zero, succ(Y), pred(Z)) -> U9_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U9_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U10_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U11_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U12_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U13_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U14_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U13_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U12_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U11_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U10_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U9_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, succ(Y), pred(Z))
   isMinus_in_aga(zero, pred(Y), succ(Z)) -> U10_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   U10_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, pred(Y), succ(Z))
   isMinus_in_aga(succ(X), succ(Y), Z) -> U11_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(succ(X), pred(Y), succ(succ(Z))) -> U12_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), succ(Y), pred(pred(Z))) -> U13_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), pred(Y), Z) -> U14_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   U14_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), pred(Y), Z)
   U13_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), succ(Y), pred(pred(Z)))
   U12_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), pred(Y), succ(succ(Z)))
   U11_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), succ(Y), Z)
   U2_aaa(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_aaa(X, XS, Y, Res, =_in_aa(YP, U))
   U3_aaa(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U4_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

isMinus_in_aga(x1, x2, x3)  =  isMinus_in_aga(x2)

zero  =  zero

isMinus_out_aga(x1, x2, x3)  =  isMinus_out_aga(x2)

succ(x1)  =  succ(x1)

U9_aga(x1, x2, x3)  =  U9_aga(x1, x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U9_gga(x1, x2, x3)  =  U9_gga(x1, x3)

pred(x1)  =  pred(x1)

U10_gga(x1, x2, x3)  =  U10_gga(x1, x3)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x2, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U13_gga(x1, x2, x3, x4)  =  U13_gga(x1, x2, x4)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x1, x2, x4)

U10_aga(x1, x2, x3)  =  U10_aga(x1, x3)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x2, x4)

U12_aga(x1, x2, x3, x4)  =  U12_aga(x2, x4)

U13_aga(x1, x2, x3, x4)  =  U13_aga(x2, x4)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x2, x4)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

U4_aaa(x1, x2, x3, x4, x5)  =  U4_aaa(x5)

GET_IN_AAA(x1, x2, x3)  =  GET_IN_AAA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)

U3_AAA(x1, x2, x3, x4, x5)  =  U3_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(69) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(70)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA(.(X, XS), Y, Res) -> U2_AAA(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   U2_AAA(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_AAA(X, XS, Y, Res, =_in_aa(YP, U))
   U3_AAA(X, XS, Y, Res, =_out_aa(YP, U)) -> GET_IN_AAA(XS, YP, Res)

The TRS R consists of the following rules:

   isMinus_in_aga(zero, succ(Y), pred(Z)) -> U9_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_aga(succ(X), succ(Y), Z) -> U11_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), succ(Y), pred(pred(Z))) -> U13_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U9_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, succ(Y), pred(Z))
   U11_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), succ(Y), Z)
   U13_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U9_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U10_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_aga(X, zero, X) -> isMinus_out_aga(X, zero, X)
   isMinus_in_aga(zero, pred(Y), succ(Z)) -> U10_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_aga(succ(X), pred(Y), succ(succ(Z))) -> U12_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), pred(Y), Z) -> U14_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   U9_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U10_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U10_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, pred(Y), succ(Z))
   U12_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), pred(Y), succ(succ(Z)))
   U14_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), pred(Y), Z)

The argument filtering Pi contains the following mapping:
=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

isMinus_in_aga(x1, x2, x3)  =  isMinus_in_aga(x2)

zero  =  zero

isMinus_out_aga(x1, x2, x3)  =  isMinus_out_aga(x2)

succ(x1)  =  succ(x1)

U9_aga(x1, x2, x3)  =  U9_aga(x1, x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U9_gga(x1, x2, x3)  =  U9_gga(x1, x3)

pred(x1)  =  pred(x1)

U10_gga(x1, x2, x3)  =  U10_gga(x1, x3)

U10_aga(x1, x2, x3)  =  U10_aga(x1, x3)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x2, x4)

U12_aga(x1, x2, x3, x4)  =  U12_aga(x2, x4)

U13_aga(x1, x2, x3, x4)  =  U13_aga(x2, x4)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x2, x4)

GET_IN_AAA(x1, x2, x3)  =  GET_IN_AAA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)

U3_AAA(x1, x2, x3, x4, x5)  =  U3_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(71) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(72)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U2_AAA(isMinus_out_aga(succ(zero))) -> U3_AAA(=_in_aa)
   U3_AAA(=_out_aa) -> GET_IN_AAA

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(Y, isMinus_in_aga(Y))
   =_in_aa -> =_out_aa
   U9_aga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(succ(Y))
   U11_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   U13_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(zero, pred(Y)) -> U10_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_aga(zero) -> isMinus_out_aga(zero)
   isMinus_in_aga(pred(Y)) -> U10_aga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_aga(pred(Y)) -> U12_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(pred(Y)) -> U14_aga(Y, isMinus_in_aga(Y))
   U9_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U10_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U10_aga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(pred(Y))
   U12_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(pred(Y))
   U14_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(pred(Y))

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   =_in_aa
   U9_aga(x0, x1)
   U11_aga(x0, x1)
   U13_aga(x0, x1)
   isMinus_in_gga(x0, x1)
   U9_gga(x0, x1)
   U10_gga(x0, x1)
   U10_aga(x0, x1)
   U12_aga(x0, x1)
   U14_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(73) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U2_AAA(isMinus_out_aga(succ(zero))) -> U3_AAA(=_in_aa) at position [0] we obtained the following new rules [LPAR04]:

   (U2_AAA(isMinus_out_aga(succ(zero))) -> U3_AAA(=_out_aa),U2_AAA(isMinus_out_aga(succ(zero))) -> U3_AAA(=_out_aa))


----------------------------------------

(74)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U3_AAA(=_out_aa) -> GET_IN_AAA
   U2_AAA(isMinus_out_aga(succ(zero))) -> U3_AAA(=_out_aa)

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(Y, isMinus_in_aga(Y))
   =_in_aa -> =_out_aa
   U9_aga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(succ(Y))
   U11_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   U13_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(zero, pred(Y)) -> U10_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_aga(zero) -> isMinus_out_aga(zero)
   isMinus_in_aga(pred(Y)) -> U10_aga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_aga(pred(Y)) -> U12_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(pred(Y)) -> U14_aga(Y, isMinus_in_aga(Y))
   U9_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U10_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U10_aga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(pred(Y))
   U12_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(pred(Y))
   U14_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(pred(Y))

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   =_in_aa
   U9_aga(x0, x1)
   U11_aga(x0, x1)
   U13_aga(x0, x1)
   isMinus_in_gga(x0, x1)
   U9_gga(x0, x1)
   U10_gga(x0, x1)
   U10_aga(x0, x1)
   U12_aga(x0, x1)
   U14_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(75) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(76)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U3_AAA(=_out_aa) -> GET_IN_AAA
   U2_AAA(isMinus_out_aga(succ(zero))) -> U3_AAA(=_out_aa)

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(zero) -> isMinus_out_aga(zero)
   isMinus_in_aga(pred(Y)) -> U10_aga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_aga(pred(Y)) -> U12_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(pred(Y)) -> U14_aga(Y, isMinus_in_aga(Y))
   U13_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   U14_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(pred(Y))
   U12_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(pred(Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(zero, pred(Y)) -> U10_gga(Y, isMinus_in_gga(zero, Y))
   U10_aga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(pred(Y))
   U10_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U11_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   U9_aga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(succ(Y))

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   =_in_aa
   U9_aga(x0, x1)
   U11_aga(x0, x1)
   U13_aga(x0, x1)
   isMinus_in_gga(x0, x1)
   U9_gga(x0, x1)
   U10_gga(x0, x1)
   U10_aga(x0, x1)
   U12_aga(x0, x1)
   U14_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(77) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =_in_aa


----------------------------------------

(78)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U3_AAA(=_out_aa) -> GET_IN_AAA
   U2_AAA(isMinus_out_aga(succ(zero))) -> U3_AAA(=_out_aa)

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(zero) -> isMinus_out_aga(zero)
   isMinus_in_aga(pred(Y)) -> U10_aga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_aga(pred(Y)) -> U12_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(pred(Y)) -> U14_aga(Y, isMinus_in_aga(Y))
   U13_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   U14_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(pred(Y))
   U12_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(pred(Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(zero, pred(Y)) -> U10_gga(Y, isMinus_in_gga(zero, Y))
   U10_aga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(pred(Y))
   U10_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U11_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   U9_aga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(succ(Y))

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   U9_aga(x0, x1)
   U11_aga(x0, x1)
   U13_aga(x0, x1)
   isMinus_in_gga(x0, x1)
   U9_gga(x0, x1)
   U10_gga(x0, x1)
   U10_aga(x0, x1)
   U12_aga(x0, x1)
   U14_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(79) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   isMinus_in_aga(pred(Y)) -> U10_aga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_aga(pred(Y)) -> U12_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(pred(Y)) -> U14_aga(Y, isMinus_in_aga(Y))
   U14_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(pred(Y))
   U12_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(pred(Y))

Used ordering: Polynomial interpretation [POLO]:

   POL(=_out_aa) = 1
   POL(GET_IN_AAA) = 0
   POL(U10_aga(x_1, x_2)) = 0
   POL(U10_gga(x_1, x_2)) = 0
   POL(U11_aga(x_1, x_2)) = x_2
   POL(U12_aga(x_1, x_2)) = 1 + x_2
   POL(U13_aga(x_1, x_2)) = x_2
   POL(U14_aga(x_1, x_2)) = 1 + 2*x_2
   POL(U2_AAA(x_1)) = 2*x_1
   POL(U3_AAA(x_1)) = 0
   POL(U9_aga(x_1, x_2)) = 0
   POL(U9_gga(x_1, x_2)) = 0
   POL(isMinus_in_aga(x_1)) = 2*x_1
   POL(isMinus_in_gga(x_1, x_2)) = 0
   POL(isMinus_out_aga(x_1)) = 0
   POL(isMinus_out_gga(x_1, x_2, x_3)) = 0
   POL(pred(x_1)) = 1 + 2*x_1
   POL(succ(x_1)) = x_1
   POL(zero) = 0


----------------------------------------

(80)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U3_AAA(=_out_aa) -> GET_IN_AAA
   U2_AAA(isMinus_out_aga(succ(zero))) -> U3_AAA(=_out_aa)

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(zero) -> isMinus_out_aga(zero)
   U13_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(zero, pred(Y)) -> U10_gga(Y, isMinus_in_gga(zero, Y))
   U10_aga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(pred(Y))
   U10_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U11_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   U9_aga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(succ(Y))

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   U9_aga(x0, x1)
   U11_aga(x0, x1)
   U13_aga(x0, x1)
   isMinus_in_gga(x0, x1)
   U9_gga(x0, x1)
   U10_gga(x0, x1)
   U10_aga(x0, x1)
   U12_aga(x0, x1)
   U14_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(81) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(82)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U3_AAA(=_out_aa) -> GET_IN_AAA
   U2_AAA(isMinus_out_aga(succ(zero))) -> U3_AAA(=_out_aa)

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(zero) -> isMinus_out_aga(zero)
   U13_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   U11_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(zero, pred(Y)) -> U10_gga(Y, isMinus_in_gga(zero, Y))
   U9_aga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(succ(Y))
   U10_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   U9_aga(x0, x1)
   U11_aga(x0, x1)
   U13_aga(x0, x1)
   isMinus_in_gga(x0, x1)
   U9_gga(x0, x1)
   U10_gga(x0, x1)
   U10_aga(x0, x1)
   U12_aga(x0, x1)
   U14_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(83) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U10_aga(x0, x1)
   U12_aga(x0, x1)
   U14_aga(x0, x1)


----------------------------------------

(84)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U3_AAA(=_out_aa) -> GET_IN_AAA
   U2_AAA(isMinus_out_aga(succ(zero))) -> U3_AAA(=_out_aa)

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(zero) -> isMinus_out_aga(zero)
   U13_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   U11_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(zero, pred(Y)) -> U10_gga(Y, isMinus_in_gga(zero, Y))
   U9_aga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(succ(Y))
   U10_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   U9_aga(x0, x1)
   U11_aga(x0, x1)
   U13_aga(x0, x1)
   isMinus_in_gga(x0, x1)
   U9_gga(x0, x1)
   U10_gga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(85) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   isMinus_in_gga(zero, pred(Y)) -> U10_gga(Y, isMinus_in_gga(zero, Y))

Used ordering: Polynomial interpretation [POLO]:

   POL(=_out_aa) = 0
   POL(GET_IN_AAA) = 0
   POL(U10_gga(x_1, x_2)) = 2*x_2
   POL(U11_aga(x_1, x_2)) = x_2
   POL(U13_aga(x_1, x_2)) = x_2
   POL(U2_AAA(x_1)) = 2*x_1
   POL(U3_AAA(x_1)) = 2*x_1
   POL(U9_aga(x_1, x_2)) = 2*x_2
   POL(U9_gga(x_1, x_2)) = x_2
   POL(isMinus_in_aga(x_1)) = 2*x_1
   POL(isMinus_in_gga(x_1, x_2)) = x_2
   POL(isMinus_out_aga(x_1)) = 0
   POL(isMinus_out_gga(x_1, x_2, x_3)) = 0
   POL(pred(x_1)) = 2 + 2*x_1
   POL(succ(x_1)) = x_1
   POL(zero) = 0


----------------------------------------

(86)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U3_AAA(=_out_aa) -> GET_IN_AAA
   U2_AAA(isMinus_out_aga(succ(zero))) -> U3_AAA(=_out_aa)

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(zero) -> isMinus_out_aga(zero)
   U13_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   U11_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(Y, isMinus_in_gga(zero, Y))
   U9_aga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(succ(Y))
   U10_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   U9_aga(x0, x1)
   U11_aga(x0, x1)
   U13_aga(x0, x1)
   isMinus_in_gga(x0, x1)
   U9_gga(x0, x1)
   U10_gga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(87) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(88)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U3_AAA(=_out_aa) -> GET_IN_AAA
   U2_AAA(isMinus_out_aga(succ(zero))) -> U3_AAA(=_out_aa)

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(zero) -> isMinus_out_aga(zero)
   U13_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   U11_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(Y, isMinus_in_gga(zero, Y))
   U9_aga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(succ(Y))
   U9_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   U9_aga(x0, x1)
   U11_aga(x0, x1)
   U13_aga(x0, x1)
   isMinus_in_gga(x0, x1)
   U9_gga(x0, x1)
   U10_gga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(89) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U10_gga(x0, x1)


----------------------------------------

(90)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U3_AAA(=_out_aa) -> GET_IN_AAA
   U2_AAA(isMinus_out_aga(succ(zero))) -> U3_AAA(=_out_aa)

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(Y, isMinus_in_aga(Y))
   isMinus_in_aga(zero) -> isMinus_out_aga(zero)
   U13_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   U11_aga(Y, isMinus_out_aga(Y)) -> isMinus_out_aga(succ(Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(Y, isMinus_in_gga(zero, Y))
   U9_aga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(succ(Y))
   U9_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   U9_aga(x0, x1)
   U11_aga(x0, x1)
   U13_aga(x0, x1)
   isMinus_in_gga(x0, x1)
   U9_gga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(91) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

get_in_3: (f,f,f)

isMinus_in_3: (f,b,f) (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), zero, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), zero, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   isMinus_in_aga(X, zero, X) -> isMinus_out_aga(X, zero, X)
   isMinus_in_aga(zero, succ(Y), pred(Z)) -> U9_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U9_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U10_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U11_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U12_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U13_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U14_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U13_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U12_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U11_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U10_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U9_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, succ(Y), pred(Z))
   isMinus_in_aga(zero, pred(Y), succ(Z)) -> U10_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   U10_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, pred(Y), succ(Z))
   isMinus_in_aga(succ(X), succ(Y), Z) -> U11_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(succ(X), pred(Y), succ(succ(Z))) -> U12_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), succ(Y), pred(pred(Z))) -> U13_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), pred(Y), Z) -> U14_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   U14_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), pred(Y), Z)
   U13_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), succ(Y), pred(pred(Z)))
   U12_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), pred(Y), succ(succ(Z)))
   U11_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), succ(Y), Z)
   U2_aaa(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_aaa(X, XS, Y, Res, =_in_aa(YP, U))
   U3_aaa(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U4_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

isMinus_in_aga(x1, x2, x3)  =  isMinus_in_aga(x2)

zero  =  zero

isMinus_out_aga(x1, x2, x3)  =  isMinus_out_aga

succ(x1)  =  succ(x1)

U9_aga(x1, x2, x3)  =  U9_aga(x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U9_gga(x1, x2, x3)  =  U9_gga(x3)

pred(x1)  =  pred(x1)

U10_gga(x1, x2, x3)  =  U10_gga(x3)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4)  =  U13_gga(x4)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U10_aga(x1, x2, x3)  =  U10_aga(x3)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x4)

U12_aga(x1, x2, x3, x4)  =  U12_aga(x4)

U13_aga(x1, x2, x3, x4)  =  U13_aga(x4)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x4)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

U4_aaa(x1, x2, x3, x4, x5)  =  U4_aaa(x5)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(92)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), zero, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), zero, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   isMinus_in_aga(X, zero, X) -> isMinus_out_aga(X, zero, X)
   isMinus_in_aga(zero, succ(Y), pred(Z)) -> U9_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U9_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U10_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U11_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U12_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U13_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U14_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U13_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U12_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U11_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U10_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U9_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, succ(Y), pred(Z))
   isMinus_in_aga(zero, pred(Y), succ(Z)) -> U10_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   U10_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, pred(Y), succ(Z))
   isMinus_in_aga(succ(X), succ(Y), Z) -> U11_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(succ(X), pred(Y), succ(succ(Z))) -> U12_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), succ(Y), pred(pred(Z))) -> U13_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), pred(Y), Z) -> U14_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   U14_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), pred(Y), Z)
   U13_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), succ(Y), pred(pred(Z)))
   U12_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), pred(Y), succ(succ(Z)))
   U11_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), succ(Y), Z)
   U2_aaa(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_aaa(X, XS, Y, Res, =_in_aa(YP, U))
   U3_aaa(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U4_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

isMinus_in_aga(x1, x2, x3)  =  isMinus_in_aga(x2)

zero  =  zero

isMinus_out_aga(x1, x2, x3)  =  isMinus_out_aga

succ(x1)  =  succ(x1)

U9_aga(x1, x2, x3)  =  U9_aga(x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U9_gga(x1, x2, x3)  =  U9_gga(x3)

pred(x1)  =  pred(x1)

U10_gga(x1, x2, x3)  =  U10_gga(x3)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4)  =  U13_gga(x4)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U10_aga(x1, x2, x3)  =  U10_aga(x3)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x4)

U12_aga(x1, x2, x3, x4)  =  U12_aga(x4)

U13_aga(x1, x2, x3, x4)  =  U13_aga(x4)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x4)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

U4_aaa(x1, x2, x3, x4, x5)  =  U4_aaa(x5)



----------------------------------------

(93) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA(.(X, XS), zero, Res) -> U1_AAA(X, XS, Res, =_in_aa(Res, X))
   GET_IN_AAA(.(X, XS), zero, Res) -> =_IN_AA(Res, X)
   GET_IN_AAA(.(X, XS), Y, Res) -> U2_AAA(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   GET_IN_AAA(.(X, XS), Y, Res) -> ISMINUS_IN_AGA(Y, succ(zero), U)
   ISMINUS_IN_AGA(zero, succ(Y), pred(Z)) -> U9_AGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_AGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> U9_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> U10_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> U11_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> U12_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> U13_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> U14_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_AGA(zero, pred(Y), succ(Z)) -> U10_AGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_AGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_AGA(succ(X), succ(Y), Z) -> U11_AGA(X, Y, Z, isMinus_in_aga(X, Y, Z))
   ISMINUS_IN_AGA(succ(X), succ(Y), Z) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(succ(X), pred(Y), succ(succ(Z))) -> U12_AGA(X, Y, Z, isMinus_in_aga(X, Y, Z))
   ISMINUS_IN_AGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(pred(X), succ(Y), pred(pred(Z))) -> U13_AGA(X, Y, Z, isMinus_in_aga(X, Y, Z))
   ISMINUS_IN_AGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(pred(X), pred(Y), Z) -> U14_AGA(X, Y, Z, isMinus_in_aga(X, Y, Z))
   ISMINUS_IN_AGA(pred(X), pred(Y), Z) -> ISMINUS_IN_AGA(X, Y, Z)
   U2_AAA(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_AAA(X, XS, Y, Res, =_in_aa(YP, U))
   U2_AAA(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> =_IN_AA(YP, U)
   U3_AAA(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_AAA(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U3_AAA(X, XS, Y, Res, =_out_aa(YP, U)) -> GET_IN_AAA(XS, YP, Res)

The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), zero, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), zero, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   isMinus_in_aga(X, zero, X) -> isMinus_out_aga(X, zero, X)
   isMinus_in_aga(zero, succ(Y), pred(Z)) -> U9_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U9_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U10_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U11_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U12_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U13_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U14_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U13_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U12_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U11_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U10_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U9_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, succ(Y), pred(Z))
   isMinus_in_aga(zero, pred(Y), succ(Z)) -> U10_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   U10_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, pred(Y), succ(Z))
   isMinus_in_aga(succ(X), succ(Y), Z) -> U11_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(succ(X), pred(Y), succ(succ(Z))) -> U12_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), succ(Y), pred(pred(Z))) -> U13_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), pred(Y), Z) -> U14_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   U14_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), pred(Y), Z)
   U13_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), succ(Y), pred(pred(Z)))
   U12_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), pred(Y), succ(succ(Z)))
   U11_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), succ(Y), Z)
   U2_aaa(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_aaa(X, XS, Y, Res, =_in_aa(YP, U))
   U3_aaa(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U4_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

isMinus_in_aga(x1, x2, x3)  =  isMinus_in_aga(x2)

zero  =  zero

isMinus_out_aga(x1, x2, x3)  =  isMinus_out_aga

succ(x1)  =  succ(x1)

U9_aga(x1, x2, x3)  =  U9_aga(x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U9_gga(x1, x2, x3)  =  U9_gga(x3)

pred(x1)  =  pred(x1)

U10_gga(x1, x2, x3)  =  U10_gga(x3)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4)  =  U13_gga(x4)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U10_aga(x1, x2, x3)  =  U10_aga(x3)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x4)

U12_aga(x1, x2, x3, x4)  =  U12_aga(x4)

U13_aga(x1, x2, x3, x4)  =  U13_aga(x4)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x4)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

U4_aaa(x1, x2, x3, x4, x5)  =  U4_aaa(x5)

GET_IN_AAA(x1, x2, x3)  =  GET_IN_AAA

U1_AAA(x1, x2, x3, x4)  =  U1_AAA(x4)

=_IN_AA(x1, x2)  =  =_IN_AA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)

ISMINUS_IN_AGA(x1, x2, x3)  =  ISMINUS_IN_AGA(x2)

U9_AGA(x1, x2, x3)  =  U9_AGA(x3)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)

U9_GGA(x1, x2, x3)  =  U9_GGA(x3)

U10_GGA(x1, x2, x3)  =  U10_GGA(x3)

U11_GGA(x1, x2, x3, x4)  =  U11_GGA(x4)

U12_GGA(x1, x2, x3, x4)  =  U12_GGA(x4)

U13_GGA(x1, x2, x3, x4)  =  U13_GGA(x4)

U14_GGA(x1, x2, x3, x4)  =  U14_GGA(x4)

U10_AGA(x1, x2, x3)  =  U10_AGA(x3)

U11_AGA(x1, x2, x3, x4)  =  U11_AGA(x4)

U12_AGA(x1, x2, x3, x4)  =  U12_AGA(x4)

U13_AGA(x1, x2, x3, x4)  =  U13_AGA(x4)

U14_AGA(x1, x2, x3, x4)  =  U14_AGA(x4)

U3_AAA(x1, x2, x3, x4, x5)  =  U3_AAA(x5)

U4_AAA(x1, x2, x3, x4, x5)  =  U4_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(94)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA(.(X, XS), zero, Res) -> U1_AAA(X, XS, Res, =_in_aa(Res, X))
   GET_IN_AAA(.(X, XS), zero, Res) -> =_IN_AA(Res, X)
   GET_IN_AAA(.(X, XS), Y, Res) -> U2_AAA(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   GET_IN_AAA(.(X, XS), Y, Res) -> ISMINUS_IN_AGA(Y, succ(zero), U)
   ISMINUS_IN_AGA(zero, succ(Y), pred(Z)) -> U9_AGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_AGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> U9_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> U10_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> U11_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> U12_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> U13_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> U14_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_AGA(zero, pred(Y), succ(Z)) -> U10_AGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_AGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_AGA(succ(X), succ(Y), Z) -> U11_AGA(X, Y, Z, isMinus_in_aga(X, Y, Z))
   ISMINUS_IN_AGA(succ(X), succ(Y), Z) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(succ(X), pred(Y), succ(succ(Z))) -> U12_AGA(X, Y, Z, isMinus_in_aga(X, Y, Z))
   ISMINUS_IN_AGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(pred(X), succ(Y), pred(pred(Z))) -> U13_AGA(X, Y, Z, isMinus_in_aga(X, Y, Z))
   ISMINUS_IN_AGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(pred(X), pred(Y), Z) -> U14_AGA(X, Y, Z, isMinus_in_aga(X, Y, Z))
   ISMINUS_IN_AGA(pred(X), pred(Y), Z) -> ISMINUS_IN_AGA(X, Y, Z)
   U2_AAA(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_AAA(X, XS, Y, Res, =_in_aa(YP, U))
   U2_AAA(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> =_IN_AA(YP, U)
   U3_AAA(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_AAA(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U3_AAA(X, XS, Y, Res, =_out_aa(YP, U)) -> GET_IN_AAA(XS, YP, Res)

The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), zero, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), zero, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   isMinus_in_aga(X, zero, X) -> isMinus_out_aga(X, zero, X)
   isMinus_in_aga(zero, succ(Y), pred(Z)) -> U9_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U9_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U10_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U11_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U12_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U13_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U14_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U13_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U12_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U11_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U10_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U9_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, succ(Y), pred(Z))
   isMinus_in_aga(zero, pred(Y), succ(Z)) -> U10_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   U10_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, pred(Y), succ(Z))
   isMinus_in_aga(succ(X), succ(Y), Z) -> U11_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(succ(X), pred(Y), succ(succ(Z))) -> U12_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), succ(Y), pred(pred(Z))) -> U13_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), pred(Y), Z) -> U14_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   U14_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), pred(Y), Z)
   U13_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), succ(Y), pred(pred(Z)))
   U12_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), pred(Y), succ(succ(Z)))
   U11_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), succ(Y), Z)
   U2_aaa(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_aaa(X, XS, Y, Res, =_in_aa(YP, U))
   U3_aaa(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U4_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

isMinus_in_aga(x1, x2, x3)  =  isMinus_in_aga(x2)

zero  =  zero

isMinus_out_aga(x1, x2, x3)  =  isMinus_out_aga

succ(x1)  =  succ(x1)

U9_aga(x1, x2, x3)  =  U9_aga(x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U9_gga(x1, x2, x3)  =  U9_gga(x3)

pred(x1)  =  pred(x1)

U10_gga(x1, x2, x3)  =  U10_gga(x3)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4)  =  U13_gga(x4)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U10_aga(x1, x2, x3)  =  U10_aga(x3)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x4)

U12_aga(x1, x2, x3, x4)  =  U12_aga(x4)

U13_aga(x1, x2, x3, x4)  =  U13_aga(x4)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x4)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

U4_aaa(x1, x2, x3, x4, x5)  =  U4_aaa(x5)

GET_IN_AAA(x1, x2, x3)  =  GET_IN_AAA

U1_AAA(x1, x2, x3, x4)  =  U1_AAA(x4)

=_IN_AA(x1, x2)  =  =_IN_AA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)

ISMINUS_IN_AGA(x1, x2, x3)  =  ISMINUS_IN_AGA(x2)

U9_AGA(x1, x2, x3)  =  U9_AGA(x3)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)

U9_GGA(x1, x2, x3)  =  U9_GGA(x3)

U10_GGA(x1, x2, x3)  =  U10_GGA(x3)

U11_GGA(x1, x2, x3, x4)  =  U11_GGA(x4)

U12_GGA(x1, x2, x3, x4)  =  U12_GGA(x4)

U13_GGA(x1, x2, x3, x4)  =  U13_GGA(x4)

U14_GGA(x1, x2, x3, x4)  =  U14_GGA(x4)

U10_AGA(x1, x2, x3)  =  U10_AGA(x3)

U11_AGA(x1, x2, x3, x4)  =  U11_AGA(x4)

U12_AGA(x1, x2, x3, x4)  =  U12_AGA(x4)

U13_AGA(x1, x2, x3, x4)  =  U13_AGA(x4)

U14_AGA(x1, x2, x3, x4)  =  U14_AGA(x4)

U3_AAA(x1, x2, x3, x4, x5)  =  U3_AAA(x5)

U4_AAA(x1, x2, x3, x4, x5)  =  U4_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(95) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 4 SCCs with 19 less nodes.
----------------------------------------

(96)
Complex Obligation (AND)

----------------------------------------

(97)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)

The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), zero, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), zero, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   isMinus_in_aga(X, zero, X) -> isMinus_out_aga(X, zero, X)
   isMinus_in_aga(zero, succ(Y), pred(Z)) -> U9_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U9_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U10_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U11_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U12_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U13_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U14_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U13_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U12_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U11_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U10_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U9_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, succ(Y), pred(Z))
   isMinus_in_aga(zero, pred(Y), succ(Z)) -> U10_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   U10_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, pred(Y), succ(Z))
   isMinus_in_aga(succ(X), succ(Y), Z) -> U11_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(succ(X), pred(Y), succ(succ(Z))) -> U12_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), succ(Y), pred(pred(Z))) -> U13_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), pred(Y), Z) -> U14_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   U14_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), pred(Y), Z)
   U13_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), succ(Y), pred(pred(Z)))
   U12_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), pred(Y), succ(succ(Z)))
   U11_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), succ(Y), Z)
   U2_aaa(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_aaa(X, XS, Y, Res, =_in_aa(YP, U))
   U3_aaa(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U4_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

isMinus_in_aga(x1, x2, x3)  =  isMinus_in_aga(x2)

zero  =  zero

isMinus_out_aga(x1, x2, x3)  =  isMinus_out_aga

succ(x1)  =  succ(x1)

U9_aga(x1, x2, x3)  =  U9_aga(x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U9_gga(x1, x2, x3)  =  U9_gga(x3)

pred(x1)  =  pred(x1)

U10_gga(x1, x2, x3)  =  U10_gga(x3)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4)  =  U13_gga(x4)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U10_aga(x1, x2, x3)  =  U10_aga(x3)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x4)

U12_aga(x1, x2, x3, x4)  =  U12_aga(x4)

U13_aga(x1, x2, x3, x4)  =  U13_aga(x4)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x4)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

U4_aaa(x1, x2, x3, x4, x5)  =  U4_aaa(x5)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(98) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(99)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
zero  =  zero

succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(100) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(101)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y)) -> ISMINUS_IN_GGA(zero, Y)
   ISMINUS_IN_GGA(zero, succ(Y)) -> ISMINUS_IN_GGA(zero, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(102) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGA(zero, pred(Y)) -> ISMINUS_IN_GGA(zero, Y)
The graph contains the following edges 1 >= 1, 2 > 2


*ISMINUS_IN_GGA(zero, succ(Y)) -> ISMINUS_IN_GGA(zero, Y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(103)
YES

----------------------------------------

(104)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), zero, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), zero, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   isMinus_in_aga(X, zero, X) -> isMinus_out_aga(X, zero, X)
   isMinus_in_aga(zero, succ(Y), pred(Z)) -> U9_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U9_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U10_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U11_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U12_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U13_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U14_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U13_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U12_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U11_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U10_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U9_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, succ(Y), pred(Z))
   isMinus_in_aga(zero, pred(Y), succ(Z)) -> U10_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   U10_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, pred(Y), succ(Z))
   isMinus_in_aga(succ(X), succ(Y), Z) -> U11_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(succ(X), pred(Y), succ(succ(Z))) -> U12_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), succ(Y), pred(pred(Z))) -> U13_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), pred(Y), Z) -> U14_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   U14_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), pred(Y), Z)
   U13_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), succ(Y), pred(pred(Z)))
   U12_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), pred(Y), succ(succ(Z)))
   U11_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), succ(Y), Z)
   U2_aaa(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_aaa(X, XS, Y, Res, =_in_aa(YP, U))
   U3_aaa(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U4_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

isMinus_in_aga(x1, x2, x3)  =  isMinus_in_aga(x2)

zero  =  zero

isMinus_out_aga(x1, x2, x3)  =  isMinus_out_aga

succ(x1)  =  succ(x1)

U9_aga(x1, x2, x3)  =  U9_aga(x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U9_gga(x1, x2, x3)  =  U9_gga(x3)

pred(x1)  =  pred(x1)

U10_gga(x1, x2, x3)  =  U10_gga(x3)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4)  =  U13_gga(x4)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U10_aga(x1, x2, x3)  =  U10_aga(x3)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x4)

U12_aga(x1, x2, x3, x4)  =  U12_aga(x4)

U13_aga(x1, x2, x3, x4)  =  U13_aga(x4)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x4)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

U4_aaa(x1, x2, x3, x4, x5)  =  U4_aaa(x5)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(105) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(106)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(107) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(108)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(succ(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(pred(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(pred(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(109) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGA(succ(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(succ(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(pred(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(pred(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(110)
YES

----------------------------------------

(111)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_AGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(succ(X), succ(Y), Z) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(pred(X), pred(Y), Z) -> ISMINUS_IN_AGA(X, Y, Z)

The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), zero, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), zero, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   isMinus_in_aga(X, zero, X) -> isMinus_out_aga(X, zero, X)
   isMinus_in_aga(zero, succ(Y), pred(Z)) -> U9_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U9_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U10_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U11_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U12_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U13_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U14_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U13_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U12_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U11_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U10_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U9_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, succ(Y), pred(Z))
   isMinus_in_aga(zero, pred(Y), succ(Z)) -> U10_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   U10_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, pred(Y), succ(Z))
   isMinus_in_aga(succ(X), succ(Y), Z) -> U11_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(succ(X), pred(Y), succ(succ(Z))) -> U12_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), succ(Y), pred(pred(Z))) -> U13_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), pred(Y), Z) -> U14_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   U14_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), pred(Y), Z)
   U13_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), succ(Y), pred(pred(Z)))
   U12_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), pred(Y), succ(succ(Z)))
   U11_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), succ(Y), Z)
   U2_aaa(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_aaa(X, XS, Y, Res, =_in_aa(YP, U))
   U3_aaa(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U4_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

isMinus_in_aga(x1, x2, x3)  =  isMinus_in_aga(x2)

zero  =  zero

isMinus_out_aga(x1, x2, x3)  =  isMinus_out_aga

succ(x1)  =  succ(x1)

U9_aga(x1, x2, x3)  =  U9_aga(x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U9_gga(x1, x2, x3)  =  U9_gga(x3)

pred(x1)  =  pred(x1)

U10_gga(x1, x2, x3)  =  U10_gga(x3)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4)  =  U13_gga(x4)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U10_aga(x1, x2, x3)  =  U10_aga(x3)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x4)

U12_aga(x1, x2, x3, x4)  =  U12_aga(x4)

U13_aga(x1, x2, x3, x4)  =  U13_aga(x4)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x4)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

U4_aaa(x1, x2, x3, x4, x5)  =  U4_aaa(x5)

ISMINUS_IN_AGA(x1, x2, x3)  =  ISMINUS_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(112) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(113)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_AGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(succ(X), succ(Y), Z) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_AGA(X, Y, Z)
   ISMINUS_IN_AGA(pred(X), pred(Y), Z) -> ISMINUS_IN_AGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

ISMINUS_IN_AGA(x1, x2, x3)  =  ISMINUS_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(114) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(115)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_AGA(pred(Y)) -> ISMINUS_IN_AGA(Y)
   ISMINUS_IN_AGA(succ(Y)) -> ISMINUS_IN_AGA(Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(116) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_AGA(pred(Y)) -> ISMINUS_IN_AGA(Y)
The graph contains the following edges 1 > 1


*ISMINUS_IN_AGA(succ(Y)) -> ISMINUS_IN_AGA(Y)
The graph contains the following edges 1 > 1


----------------------------------------

(117)
YES

----------------------------------------

(118)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA(.(X, XS), Y, Res) -> U2_AAA(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   U2_AAA(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_AAA(X, XS, Y, Res, =_in_aa(YP, U))
   U3_AAA(X, XS, Y, Res, =_out_aa(YP, U)) -> GET_IN_AAA(XS, YP, Res)

The TRS R consists of the following rules:

   get_in_aaa(.(X, XS), zero, Res) -> U1_aaa(X, XS, Res, =_in_aa(Res, X))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U1_aaa(X, XS, Res, =_out_aa(Res, X)) -> get_out_aaa(.(X, XS), zero, Res)
   get_in_aaa(.(X, XS), Y, Res) -> U2_aaa(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   isMinus_in_aga(X, zero, X) -> isMinus_out_aga(X, zero, X)
   isMinus_in_aga(zero, succ(Y), pred(Z)) -> U9_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U9_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U10_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U11_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U12_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U13_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U14_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U14_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U13_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U12_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U11_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U10_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U9_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U9_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, succ(Y), pred(Z))
   isMinus_in_aga(zero, pred(Y), succ(Z)) -> U10_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   U10_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, pred(Y), succ(Z))
   isMinus_in_aga(succ(X), succ(Y), Z) -> U11_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(succ(X), pred(Y), succ(succ(Z))) -> U12_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), succ(Y), pred(pred(Z))) -> U13_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), pred(Y), Z) -> U14_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   U14_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), pred(Y), Z)
   U13_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), succ(Y), pred(pred(Z)))
   U12_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), pred(Y), succ(succ(Z)))
   U11_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), succ(Y), Z)
   U2_aaa(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_aaa(X, XS, Y, Res, =_in_aa(YP, U))
   U3_aaa(X, XS, Y, Res, =_out_aa(YP, U)) -> U4_aaa(X, XS, Y, Res, get_in_aaa(XS, YP, Res))
   U4_aaa(X, XS, Y, Res, get_out_aaa(XS, YP, Res)) -> get_out_aaa(.(X, XS), Y, Res)

The argument filtering Pi contains the following mapping:
get_in_aaa(x1, x2, x3)  =  get_in_aaa

U1_aaa(x1, x2, x3, x4)  =  U1_aaa(x4)

=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

get_out_aaa(x1, x2, x3)  =  get_out_aaa

U2_aaa(x1, x2, x3, x4, x5)  =  U2_aaa(x5)

isMinus_in_aga(x1, x2, x3)  =  isMinus_in_aga(x2)

zero  =  zero

isMinus_out_aga(x1, x2, x3)  =  isMinus_out_aga

succ(x1)  =  succ(x1)

U9_aga(x1, x2, x3)  =  U9_aga(x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U9_gga(x1, x2, x3)  =  U9_gga(x3)

pred(x1)  =  pred(x1)

U10_gga(x1, x2, x3)  =  U10_gga(x3)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U13_gga(x1, x2, x3, x4)  =  U13_gga(x4)

U14_gga(x1, x2, x3, x4)  =  U14_gga(x4)

U10_aga(x1, x2, x3)  =  U10_aga(x3)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x4)

U12_aga(x1, x2, x3, x4)  =  U12_aga(x4)

U13_aga(x1, x2, x3, x4)  =  U13_aga(x4)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x4)

U3_aaa(x1, x2, x3, x4, x5)  =  U3_aaa(x5)

U4_aaa(x1, x2, x3, x4, x5)  =  U4_aaa(x5)

GET_IN_AAA(x1, x2, x3)  =  GET_IN_AAA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)

U3_AAA(x1, x2, x3, x4, x5)  =  U3_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(119) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(120)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA(.(X, XS), Y, Res) -> U2_AAA(X, XS, Y, Res, isMinus_in_aga(Y, succ(zero), U))
   U2_AAA(X, XS, Y, Res, isMinus_out_aga(Y, succ(zero), U)) -> U3_AAA(X, XS, Y, Res, =_in_aa(YP, U))
   U3_AAA(X, XS, Y, Res, =_out_aa(YP, U)) -> GET_IN_AAA(XS, YP, Res)

The TRS R consists of the following rules:

   isMinus_in_aga(zero, succ(Y), pred(Z)) -> U9_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_aga(succ(X), succ(Y), Z) -> U11_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), succ(Y), pred(pred(Z))) -> U13_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   =_in_aa(X, X) -> =_out_aa(X, X)
   U9_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, succ(Y), pred(Z))
   U11_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), succ(Y), Z)
   U13_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U9_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U10_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_aga(X, zero, X) -> isMinus_out_aga(X, zero, X)
   isMinus_in_aga(zero, pred(Y), succ(Z)) -> U10_aga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_aga(succ(X), pred(Y), succ(succ(Z))) -> U12_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   isMinus_in_aga(pred(X), pred(Y), Z) -> U14_aga(X, Y, Z, isMinus_in_aga(X, Y, Z))
   U9_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U10_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U10_aga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_aga(zero, pred(Y), succ(Z))
   U12_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(succ(X), pred(Y), succ(succ(Z)))
   U14_aga(X, Y, Z, isMinus_out_aga(X, Y, Z)) -> isMinus_out_aga(pred(X), pred(Y), Z)

The argument filtering Pi contains the following mapping:
=_in_aa(x1, x2)  =  =_in_aa

=_out_aa(x1, x2)  =  =_out_aa

isMinus_in_aga(x1, x2, x3)  =  isMinus_in_aga(x2)

zero  =  zero

isMinus_out_aga(x1, x2, x3)  =  isMinus_out_aga

succ(x1)  =  succ(x1)

U9_aga(x1, x2, x3)  =  U9_aga(x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U9_gga(x1, x2, x3)  =  U9_gga(x3)

pred(x1)  =  pred(x1)

U10_gga(x1, x2, x3)  =  U10_gga(x3)

U10_aga(x1, x2, x3)  =  U10_aga(x3)

U11_aga(x1, x2, x3, x4)  =  U11_aga(x4)

U12_aga(x1, x2, x3, x4)  =  U12_aga(x4)

U13_aga(x1, x2, x3, x4)  =  U13_aga(x4)

U14_aga(x1, x2, x3, x4)  =  U14_aga(x4)

GET_IN_AAA(x1, x2, x3)  =  GET_IN_AAA

U2_AAA(x1, x2, x3, x4, x5)  =  U2_AAA(x5)

U3_AAA(x1, x2, x3, x4, x5)  =  U3_AAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(121) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(122)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U2_AAA(isMinus_out_aga) -> U3_AAA(=_in_aa)
   U3_AAA(=_out_aa) -> GET_IN_AAA

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(isMinus_in_aga(Y))
   =_in_aa -> =_out_aa
   U9_aga(isMinus_out_gga(Z)) -> isMinus_out_aga
   U11_aga(isMinus_out_aga) -> isMinus_out_aga
   U13_aga(isMinus_out_aga) -> isMinus_out_aga
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(zero, pred(Y)) -> U10_gga(isMinus_in_gga(zero, Y))
   isMinus_in_aga(zero) -> isMinus_out_aga
   isMinus_in_aga(pred(Y)) -> U10_aga(isMinus_in_gga(zero, Y))
   isMinus_in_aga(pred(Y)) -> U12_aga(isMinus_in_aga(Y))
   isMinus_in_aga(pred(Y)) -> U14_aga(isMinus_in_aga(Y))
   U9_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U10_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U10_aga(isMinus_out_gga(Z)) -> isMinus_out_aga
   U12_aga(isMinus_out_aga) -> isMinus_out_aga
   U14_aga(isMinus_out_aga) -> isMinus_out_aga

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   =_in_aa
   U9_aga(x0)
   U11_aga(x0)
   U13_aga(x0)
   isMinus_in_gga(x0, x1)
   U9_gga(x0)
   U10_gga(x0)
   U10_aga(x0)
   U12_aga(x0)
   U14_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(123) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U2_AAA(isMinus_out_aga) -> U3_AAA(=_in_aa) at position [0] we obtained the following new rules [LPAR04]:

   (U2_AAA(isMinus_out_aga) -> U3_AAA(=_out_aa),U2_AAA(isMinus_out_aga) -> U3_AAA(=_out_aa))


----------------------------------------

(124)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U3_AAA(=_out_aa) -> GET_IN_AAA
   U2_AAA(isMinus_out_aga) -> U3_AAA(=_out_aa)

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(isMinus_in_aga(Y))
   =_in_aa -> =_out_aa
   U9_aga(isMinus_out_gga(Z)) -> isMinus_out_aga
   U11_aga(isMinus_out_aga) -> isMinus_out_aga
   U13_aga(isMinus_out_aga) -> isMinus_out_aga
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(zero, pred(Y)) -> U10_gga(isMinus_in_gga(zero, Y))
   isMinus_in_aga(zero) -> isMinus_out_aga
   isMinus_in_aga(pred(Y)) -> U10_aga(isMinus_in_gga(zero, Y))
   isMinus_in_aga(pred(Y)) -> U12_aga(isMinus_in_aga(Y))
   isMinus_in_aga(pred(Y)) -> U14_aga(isMinus_in_aga(Y))
   U9_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U10_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U10_aga(isMinus_out_gga(Z)) -> isMinus_out_aga
   U12_aga(isMinus_out_aga) -> isMinus_out_aga
   U14_aga(isMinus_out_aga) -> isMinus_out_aga

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   =_in_aa
   U9_aga(x0)
   U11_aga(x0)
   U13_aga(x0)
   isMinus_in_gga(x0, x1)
   U9_gga(x0)
   U10_gga(x0)
   U10_aga(x0)
   U12_aga(x0)
   U14_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(125) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(126)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U3_AAA(=_out_aa) -> GET_IN_AAA
   U2_AAA(isMinus_out_aga) -> U3_AAA(=_out_aa)

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(isMinus_in_aga(Y))
   isMinus_in_aga(zero) -> isMinus_out_aga
   isMinus_in_aga(pred(Y)) -> U10_aga(isMinus_in_gga(zero, Y))
   isMinus_in_aga(pred(Y)) -> U12_aga(isMinus_in_aga(Y))
   isMinus_in_aga(pred(Y)) -> U14_aga(isMinus_in_aga(Y))
   U13_aga(isMinus_out_aga) -> isMinus_out_aga
   U14_aga(isMinus_out_aga) -> isMinus_out_aga
   U12_aga(isMinus_out_aga) -> isMinus_out_aga
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(zero, pred(Y)) -> U10_gga(isMinus_in_gga(zero, Y))
   U10_aga(isMinus_out_gga(Z)) -> isMinus_out_aga
   U10_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U9_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U11_aga(isMinus_out_aga) -> isMinus_out_aga
   U9_aga(isMinus_out_gga(Z)) -> isMinus_out_aga

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   =_in_aa
   U9_aga(x0)
   U11_aga(x0)
   U13_aga(x0)
   isMinus_in_gga(x0, x1)
   U9_gga(x0)
   U10_gga(x0)
   U10_aga(x0)
   U12_aga(x0)
   U14_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(127) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =_in_aa


----------------------------------------

(128)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U3_AAA(=_out_aa) -> GET_IN_AAA
   U2_AAA(isMinus_out_aga) -> U3_AAA(=_out_aa)

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(isMinus_in_aga(Y))
   isMinus_in_aga(zero) -> isMinus_out_aga
   isMinus_in_aga(pred(Y)) -> U10_aga(isMinus_in_gga(zero, Y))
   isMinus_in_aga(pred(Y)) -> U12_aga(isMinus_in_aga(Y))
   isMinus_in_aga(pred(Y)) -> U14_aga(isMinus_in_aga(Y))
   U13_aga(isMinus_out_aga) -> isMinus_out_aga
   U14_aga(isMinus_out_aga) -> isMinus_out_aga
   U12_aga(isMinus_out_aga) -> isMinus_out_aga
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(zero, pred(Y)) -> U10_gga(isMinus_in_gga(zero, Y))
   U10_aga(isMinus_out_gga(Z)) -> isMinus_out_aga
   U10_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U9_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U11_aga(isMinus_out_aga) -> isMinus_out_aga
   U9_aga(isMinus_out_gga(Z)) -> isMinus_out_aga

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   U9_aga(x0)
   U11_aga(x0)
   U13_aga(x0)
   isMinus_in_gga(x0, x1)
   U9_gga(x0)
   U10_gga(x0)
   U10_aga(x0)
   U12_aga(x0)
   U14_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(129) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U14_aga(isMinus_out_aga) -> isMinus_out_aga
   U12_aga(isMinus_out_aga) -> isMinus_out_aga
   U10_aga(isMinus_out_gga(Z)) -> isMinus_out_aga

Used ordering: Polynomial interpretation [POLO]:

   POL(=_out_aa) = 0
   POL(GET_IN_AAA) = 0
   POL(U10_aga(x_1)) = 2
   POL(U10_gga(x_1)) = 0
   POL(U11_aga(x_1)) = x_1
   POL(U12_aga(x_1)) = 2 + x_1
   POL(U13_aga(x_1)) = x_1
   POL(U14_aga(x_1)) = 2 + x_1
   POL(U2_AAA(x_1)) = 2*x_1
   POL(U3_AAA(x_1)) = x_1
   POL(U9_aga(x_1)) = 0
   POL(U9_gga(x_1)) = 0
   POL(isMinus_in_aga(x_1)) = 2*x_1
   POL(isMinus_in_gga(x_1, x_2)) = 0
   POL(isMinus_out_aga) = 0
   POL(isMinus_out_gga(x_1)) = 0
   POL(pred(x_1)) = 1 + x_1
   POL(succ(x_1)) = x_1
   POL(zero) = 0


----------------------------------------

(130)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U3_AAA(=_out_aa) -> GET_IN_AAA
   U2_AAA(isMinus_out_aga) -> U3_AAA(=_out_aa)

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(isMinus_in_aga(Y))
   isMinus_in_aga(zero) -> isMinus_out_aga
   isMinus_in_aga(pred(Y)) -> U10_aga(isMinus_in_gga(zero, Y))
   isMinus_in_aga(pred(Y)) -> U12_aga(isMinus_in_aga(Y))
   isMinus_in_aga(pred(Y)) -> U14_aga(isMinus_in_aga(Y))
   U13_aga(isMinus_out_aga) -> isMinus_out_aga
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(zero, pred(Y)) -> U10_gga(isMinus_in_gga(zero, Y))
   U10_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U9_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U11_aga(isMinus_out_aga) -> isMinus_out_aga
   U9_aga(isMinus_out_gga(Z)) -> isMinus_out_aga

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   U9_aga(x0)
   U11_aga(x0)
   U13_aga(x0)
   isMinus_in_gga(x0, x1)
   U9_gga(x0)
   U10_gga(x0)
   U10_aga(x0)
   U12_aga(x0)
   U14_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(131) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.


Strictly oriented rules of the TRS R:

   isMinus_in_aga(pred(Y)) -> U10_aga(isMinus_in_gga(zero, Y))

Used ordering: Polynomial interpretation [POLO]:

   POL(=_out_aa) = 0
   POL(GET_IN_AAA) = 2
   POL(U10_aga(x_1)) = 1 + 2*x_1
   POL(U10_gga(x_1)) = 2*x_1
   POL(U11_aga(x_1)) = x_1
   POL(U12_aga(x_1)) = x_1
   POL(U13_aga(x_1)) = x_1
   POL(U14_aga(x_1)) = x_1
   POL(U2_AAA(x_1)) = x_1
   POL(U3_AAA(x_1)) = 2 + 2*x_1
   POL(U9_aga(x_1)) = 2 + 2*x_1
   POL(U9_gga(x_1)) = 2*x_1
   POL(isMinus_in_aga(x_1)) = 2 + 2*x_1
   POL(isMinus_in_gga(x_1, x_2)) = 2*x_1 + x_2
   POL(isMinus_out_aga) = 2
   POL(isMinus_out_gga(x_1)) = 2*x_1
   POL(pred(x_1)) = 2*x_1
   POL(succ(x_1)) = 2*x_1
   POL(zero) = 0


----------------------------------------

(132)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U3_AAA(=_out_aa) -> GET_IN_AAA
   U2_AAA(isMinus_out_aga) -> U3_AAA(=_out_aa)

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(isMinus_in_aga(Y))
   isMinus_in_aga(zero) -> isMinus_out_aga
   isMinus_in_aga(pred(Y)) -> U12_aga(isMinus_in_aga(Y))
   isMinus_in_aga(pred(Y)) -> U14_aga(isMinus_in_aga(Y))
   U13_aga(isMinus_out_aga) -> isMinus_out_aga
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(zero, pred(Y)) -> U10_gga(isMinus_in_gga(zero, Y))
   U10_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U9_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U11_aga(isMinus_out_aga) -> isMinus_out_aga
   U9_aga(isMinus_out_gga(Z)) -> isMinus_out_aga

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   U9_aga(x0)
   U11_aga(x0)
   U13_aga(x0)
   isMinus_in_gga(x0, x1)
   U9_gga(x0)
   U10_gga(x0)
   U10_aga(x0)
   U12_aga(x0)
   U14_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(133) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U10_aga(x0)


----------------------------------------

(134)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U3_AAA(=_out_aa) -> GET_IN_AAA
   U2_AAA(isMinus_out_aga) -> U3_AAA(=_out_aa)

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(isMinus_in_aga(Y))
   isMinus_in_aga(zero) -> isMinus_out_aga
   isMinus_in_aga(pred(Y)) -> U12_aga(isMinus_in_aga(Y))
   isMinus_in_aga(pred(Y)) -> U14_aga(isMinus_in_aga(Y))
   U13_aga(isMinus_out_aga) -> isMinus_out_aga
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(zero, pred(Y)) -> U10_gga(isMinus_in_gga(zero, Y))
   U10_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U9_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U11_aga(isMinus_out_aga) -> isMinus_out_aga
   U9_aga(isMinus_out_gga(Z)) -> isMinus_out_aga

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   U9_aga(x0)
   U11_aga(x0)
   U13_aga(x0)
   isMinus_in_gga(x0, x1)
   U9_gga(x0)
   U10_gga(x0)
   U12_aga(x0)
   U14_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(135) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U10_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))

Used ordering: Polynomial interpretation [POLO]:

   POL(=_out_aa) = 0
   POL(GET_IN_AAA) = 0
   POL(U10_gga(x_1)) = 2 + x_1
   POL(U11_aga(x_1)) = x_1
   POL(U12_aga(x_1)) = 2 + x_1
   POL(U13_aga(x_1)) = 2*x_1
   POL(U14_aga(x_1)) = 2 + 2*x_1
   POL(U2_AAA(x_1)) = 2*x_1
   POL(U3_AAA(x_1)) = x_1
   POL(U9_aga(x_1)) = 2*x_1
   POL(U9_gga(x_1)) = x_1
   POL(isMinus_in_aga(x_1)) = 2*x_1
   POL(isMinus_in_gga(x_1, x_2)) = 2*x_2
   POL(isMinus_out_aga) = 0
   POL(isMinus_out_gga(x_1)) = 0
   POL(pred(x_1)) = 1 + 2*x_1
   POL(succ(x_1)) = 2*x_1
   POL(zero) = 0


----------------------------------------

(136)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U3_AAA(=_out_aa) -> GET_IN_AAA
   U2_AAA(isMinus_out_aga) -> U3_AAA(=_out_aa)

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(isMinus_in_aga(Y))
   isMinus_in_aga(zero) -> isMinus_out_aga
   isMinus_in_aga(pred(Y)) -> U12_aga(isMinus_in_aga(Y))
   isMinus_in_aga(pred(Y)) -> U14_aga(isMinus_in_aga(Y))
   U13_aga(isMinus_out_aga) -> isMinus_out_aga
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(zero, pred(Y)) -> U10_gga(isMinus_in_gga(zero, Y))
   U9_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U11_aga(isMinus_out_aga) -> isMinus_out_aga
   U9_aga(isMinus_out_gga(Z)) -> isMinus_out_aga

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   U9_aga(x0)
   U11_aga(x0)
   U13_aga(x0)
   isMinus_in_gga(x0, x1)
   U9_gga(x0)
   U10_gga(x0)
   U12_aga(x0)
   U14_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(137) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   isMinus_in_gga(zero, pred(Y)) -> U10_gga(isMinus_in_gga(zero, Y))

Used ordering: Polynomial interpretation [POLO]:

   POL(=_out_aa) = 1
   POL(GET_IN_AAA) = 0
   POL(U10_gga(x_1)) = 2*x_1
   POL(U11_aga(x_1)) = 2*x_1
   POL(U12_aga(x_1)) = 2 + x_1
   POL(U13_aga(x_1)) = x_1
   POL(U14_aga(x_1)) = 2 + 2*x_1
   POL(U2_AAA(x_1)) = 2*x_1
   POL(U3_AAA(x_1)) = 0
   POL(U9_aga(x_1)) = 2*x_1
   POL(U9_gga(x_1)) = 2*x_1
   POL(isMinus_in_aga(x_1)) = 2*x_1
   POL(isMinus_in_gga(x_1, x_2)) = x_2
   POL(isMinus_out_aga) = 0
   POL(isMinus_out_gga(x_1)) = 0
   POL(pred(x_1)) = 1 + 2*x_1
   POL(succ(x_1)) = 2*x_1
   POL(zero) = 0


----------------------------------------

(138)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U3_AAA(=_out_aa) -> GET_IN_AAA
   U2_AAA(isMinus_out_aga) -> U3_AAA(=_out_aa)

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(isMinus_in_aga(Y))
   isMinus_in_aga(zero) -> isMinus_out_aga
   isMinus_in_aga(pred(Y)) -> U12_aga(isMinus_in_aga(Y))
   isMinus_in_aga(pred(Y)) -> U14_aga(isMinus_in_aga(Y))
   U13_aga(isMinus_out_aga) -> isMinus_out_aga
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(isMinus_in_gga(zero, Y))
   U9_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U11_aga(isMinus_out_aga) -> isMinus_out_aga
   U9_aga(isMinus_out_gga(Z)) -> isMinus_out_aga

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   U9_aga(x0)
   U11_aga(x0)
   U13_aga(x0)
   isMinus_in_gga(x0, x1)
   U9_gga(x0)
   U10_gga(x0)
   U12_aga(x0)
   U14_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(139) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U10_gga(x0)


----------------------------------------

(140)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GET_IN_AAA -> U2_AAA(isMinus_in_aga(succ(zero)))
   U3_AAA(=_out_aa) -> GET_IN_AAA
   U2_AAA(isMinus_out_aga) -> U3_AAA(=_out_aa)

The TRS R consists of the following rules:

   isMinus_in_aga(succ(Y)) -> U9_aga(isMinus_in_gga(zero, Y))
   isMinus_in_aga(succ(Y)) -> U11_aga(isMinus_in_aga(Y))
   isMinus_in_aga(succ(Y)) -> U13_aga(isMinus_in_aga(Y))
   isMinus_in_aga(zero) -> isMinus_out_aga
   isMinus_in_aga(pred(Y)) -> U12_aga(isMinus_in_aga(Y))
   isMinus_in_aga(pred(Y)) -> U14_aga(isMinus_in_aga(Y))
   U13_aga(isMinus_out_aga) -> isMinus_out_aga
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, succ(Y)) -> U9_gga(isMinus_in_gga(zero, Y))
   U9_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U11_aga(isMinus_out_aga) -> isMinus_out_aga
   U9_aga(isMinus_out_gga(Z)) -> isMinus_out_aga

The set Q consists of the following terms:

   isMinus_in_aga(x0)
   U9_aga(x0)
   U11_aga(x0)
   U13_aga(x0)
   isMinus_in_gga(x0, x1)
   U9_gga(x0)
   U12_aga(x0)
   U14_aga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(141) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 21,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(get (. X XS) (0) Res)",
                "(= Res X)"
            ],
            [
                "(get (. X XS) Y Res)",
                "(',' (is YP (- Y (1))) (get XS YP Res))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "type": "Nodes",
            "195": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(= T10 T11)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(get T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "196": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(get T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [[
                        "(get T1 T2 T3)",
                        "(get (. X4 X5) (0) X6)"
                    ]],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [
                        "X4",
                        "X5",
                        "X6"
                    ],
                    "exprvars": []
                }
            },
            "198": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(true)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(get T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "550": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(get T23 T25 T24)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T25",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T22",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": ["T25"],
                    "free": [],
                    "exprvars": [
                        "T25",
                        "T22"
                    ]
                }
            },
            "199": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(get T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "551": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(get T23 T25 T24)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T25",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T22",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": ["T25"],
                    "free": [],
                    "exprvars": [
                        "T25",
                        "T22"
                    ]
                }
            },
            "1499": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1498": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (is X97 (- T120 (1))) (get T121 X97 T122))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X97"],
                    "exprvars": []
                }
            },
            "1473": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T74",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T71",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T74",
                        "T71"
                    ]
                }
            },
            "1472": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (is X85 (- T104 (1))) (get T106 X85 T107))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T74",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T71",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "arguments": [
                                        {
                                            "name": "T71",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T71",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            }
                        ]
                    },
                    "ground": ["T104"],
                    "free": ["X85"],
                    "exprvars": [
                        "T104",
                        "T74",
                        "T71"
                    ]
                }
            },
            "1503": {
                "goal": [{
                    "clause": 0,
                    "scope": 4,
                    "term": "(get T121 T123 T122)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T123",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T120",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": ["T123"],
                    "free": [],
                    "exprvars": [
                        "T120",
                        "T123"
                    ]
                }
            },
            "562": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(= T41 T42)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T25",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T22",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "arguments": [
                                        {
                                            "name": "T22",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T22",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T25",
                        "T22"
                    ]
                }
            },
            "1502": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 4,
                        "term": "(get T121 T123 T122)"
                    },
                    {
                        "clause": 1,
                        "scope": 4,
                        "term": "(get T121 T123 T122)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T123",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T120",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": ["T123"],
                    "free": [],
                    "exprvars": [
                        "T120",
                        "T123"
                    ]
                }
            },
            "200": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(get T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "563": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T25",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T22",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T25",
                        "T22"
                    ]
                }
            },
            "1501": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(get T121 T123 T122)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T123",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T120",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [
                        "T120",
                        "T123"
                    ],
                    "free": ["X97"],
                    "exprvars": [
                        "T120",
                        "T123"
                    ]
                }
            },
            "201": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (is X15 (- T22 (1))) (get T23 X15 T24))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X15"],
                    "exprvars": []
                }
            },
            "564": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1500": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "202": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "565": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T25",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T22",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "arguments": [
                                        {
                                            "name": "T22",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T22",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T25",
                        "T22"
                    ]
                }
            },
            "203": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "566": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "567": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (is X44 (- T55 (1))) (get T57 X44 T58))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T25",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T22",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "arguments": [
                                        {
                                            "name": "T22",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T22",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            }
                        ]
                    },
                    "ground": ["T55"],
                    "free": ["X44"],
                    "exprvars": [
                        "T25",
                        "T22",
                        "T55"
                    ]
                }
            },
            "568": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T25",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T22",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T25",
                        "T22"
                    ]
                }
            },
            "569": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(get T57 T59 T58)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T25",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T22",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "arguments": [
                                        {
                                            "name": "T22",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T22",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T59",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T55",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            }
                        ]
                    },
                    "ground": [
                        "T55",
                        "T59"
                    ],
                    "free": ["X44"],
                    "exprvars": [
                        "T25",
                        "T22",
                        "T55",
                        "T59"
                    ]
                }
            },
            "1509": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1508": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T123",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T120",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "arguments": [
                                        {
                                            "name": "T120",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T120",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T120",
                        "T123"
                    ]
                }
            },
            "1507": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1506": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T123",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T120",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T120",
                        "T123"
                    ]
                }
            },
            "1505": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(= T139 T140)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T123",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T120",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "arguments": [
                                        {
                                            "name": "T120",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T120",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T120",
                        "T123"
                    ]
                }
            },
            "21": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(get T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1504": {
                "goal": [{
                    "clause": 1,
                    "scope": 4,
                    "term": "(get T121 T123 T122)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T123",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T120",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": ["T123"],
                    "free": [],
                    "exprvars": [
                        "T120",
                        "T123"
                    ]
                }
            },
            "22": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(get T1 T2 T3)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(get T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1512": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(get T155 T157 T156)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T123",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T120",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "arguments": [
                                        {
                                            "name": "T120",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T120",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T157",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T153",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            }
                        ]
                    },
                    "ground": [
                        "T153",
                        "T157"
                    ],
                    "free": ["X126"],
                    "exprvars": [
                        "T120",
                        "T153",
                        "T123",
                        "T157"
                    ]
                }
            },
            "850": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (is X56 (- T71 (1))) (get T72 X56 T73))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X56"],
                    "exprvars": []
                }
            },
            "1511": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T123",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T120",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T120",
                        "T123"
                    ]
                }
            },
            "851": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "1510": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (is X126 (- T153 (1))) (get T155 X126 T156))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T123",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T120",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "arguments": [
                                        {
                                            "name": "T120",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T120",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            }
                        ]
                    },
                    "ground": ["T153"],
                    "free": ["X126"],
                    "exprvars": [
                        "T120",
                        "T153",
                        "T123"
                    ]
                }
            },
            "533": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(get T23 T25 T24)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T25",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T22",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [
                        "T25",
                        "T22"
                    ],
                    "free": ["X15"],
                    "exprvars": [
                        "T25",
                        "T22"
                    ]
                }
            },
            "852": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "853": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(get T72 T74 T73)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T74",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T71",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [
                        "T74",
                        "T71"
                    ],
                    "free": ["X56"],
                    "exprvars": [
                        "T74",
                        "T71"
                    ]
                }
            },
            "1474": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(get T106 T108 T107)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T74",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T71",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "arguments": [
                                        {
                                            "name": "T71",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T71",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T108",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T104",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            }
                        ]
                    },
                    "ground": [
                        "T104",
                        "T108"
                    ],
                    "free": ["X85"],
                    "exprvars": [
                        "T104",
                        "T74",
                        "T108",
                        "T71"
                    ]
                }
            },
            "855": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 3,
                        "term": "(get T72 T74 T73)"
                    },
                    {
                        "clause": 1,
                        "scope": 3,
                        "term": "(get T72 T74 T73)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T74",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T71",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": ["T74"],
                    "free": [],
                    "exprvars": [
                        "T74",
                        "T71"
                    ]
                }
            },
            "858": {
                "goal": [{
                    "clause": 0,
                    "scope": 3,
                    "term": "(get T72 T74 T73)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T74",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T71",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": ["T74"],
                    "free": [],
                    "exprvars": [
                        "T74",
                        "T71"
                    ]
                }
            },
            "859": {
                "goal": [{
                    "clause": 1,
                    "scope": 3,
                    "term": "(get T72 T74 T73)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T74",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T71",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": ["T74"],
                    "free": [],
                    "exprvars": [
                        "T74",
                        "T71"
                    ]
                }
            },
            "865": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(= T90 T91)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T74",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T71",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "arguments": [
                                        {
                                            "name": "T71",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T71",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T74",
                        "T71"
                    ]
                }
            },
            "866": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T74",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T71",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T74",
                        "T71"
                    ]
                }
            },
            "867": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "549": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(get T23 T25 T24)"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(get T23 T25 T24)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T25",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T22",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": ["T25"],
                    "free": [],
                    "exprvars": [
                        "T25",
                        "T22"
                    ]
                }
            },
            "868": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T74",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T71",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "arguments": [
                                        {
                                            "name": "T71",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T71",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T74",
                        "T71"
                    ]
                }
            },
            "869": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 21,
                "to": 22,
                "label": "CASE"
            },
            {
                "from": 22,
                "to": 195,
                "label": "EVAL with clause\nget(.(X4, X5), 0, X6) :- =(X6, X4).\nand substitutionX4 -> T11,\nX5 -> T8,\nT1 -> .(T11, T8),\nT2 -> 0,\nT3 -> T10,\nX6 -> T10,\nT9 -> T10,\nT7 -> T11"
            },
            {
                "from": 22,
                "to": 196,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 195,
                "to": 198,
                "label": "UNIFY CASE with substitutionT10 -> T13,\nT11 -> T13"
            },
            {
                "from": 195,
                "to": 199,
                "label": "UNIFY-BACKTRACK"
            },
            {
                "from": 196,
                "to": 1498,
                "label": "EVAL with clause\nget(.(X93, X94), X95, X96) :- ','(is(X97, -(X95, 1)), get(X94, X97, X96)).\nand substitutionX93 -> T116,\nX94 -> T121,\nT1 -> .(T116, T121),\nT2 -> T120,\nX95 -> T120,\nT3 -> T122,\nX96 -> T122,\nT118 -> T120,\nT117 -> T121,\nT119 -> T122"
            },
            {
                "from": 196,
                "to": 1499,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 198,
                "to": 200,
                "label": "SUCCESS"
            },
            {
                "from": 199,
                "to": 850,
                "label": "EVAL with clause\nget(.(X52, X53), X54, X55) :- ','(is(X56, -(X54, 1)), get(X53, X56, X55)).\nand substitutionX52 -> T67,\nX53 -> T72,\nT1 -> .(T67, T72),\nT2 -> T71,\nX54 -> T71,\nT3 -> T73,\nX55 -> T73,\nT69 -> T71,\nT68 -> T72,\nT70 -> T73"
            },
            {
                "from": 199,
                "to": 851,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 200,
                "to": 201,
                "label": "EVAL with clause\nget(.(X11, X12), X13, X14) :- ','(is(X15, -(X13, 1)), get(X12, X15, X14)).\nand substitutionX11 -> T18,\nX12 -> T23,\nT1 -> .(T18, T23),\nT2 -> T22,\nX13 -> T22,\nT3 -> T24,\nX14 -> T24,\nT20 -> T22,\nT19 -> T23,\nT21 -> T24"
            },
            {
                "from": 200,
                "to": 202,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 201,
                "to": 203,
                "label": "IS ERROR"
            },
            {
                "from": 201,
                "to": 533,
                "label": "\nX15 -> T25"
            },
            {
                "from": 533,
                "to": 549,
                "label": "CASE"
            },
            {
                "from": 549,
                "to": 550,
                "label": "PARALLEL"
            },
            {
                "from": 549,
                "to": 551,
                "label": "PARALLEL"
            },
            {
                "from": 550,
                "to": 562,
                "label": "EVAL with clause\nget(.(X28, X29), 0, X30) :- =(X30, X28).\nand substitutionX28 -> T42,\nX29 -> T39,\nT23 -> .(T42, T39),\nT25 -> 0,\nT24 -> T41,\nX30 -> T41,\nT40 -> T41,\nT38 -> T42"
            },
            {
                "from": 550,
                "to": 563,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 551,
                "to": 567,
                "label": "EVAL with clause\nget(.(X40, X41), X42, X43) :- ','(is(X44, -(X42, 1)), get(X41, X44, X43)).\nand substitutionX40 -> T53,\nX41 -> T57,\nT23 -> .(T53, T57),\nT25 -> T55,\nX42 -> T55,\nT24 -> T58,\nX43 -> T58,\nT54 -> T57,\nT56 -> T58"
            },
            {
                "from": 551,
                "to": 568,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 562,
                "to": 564,
                "label": "UNIFY CASE with substitutionT41 -> T44,\nT42 -> T44"
            },
            {
                "from": 562,
                "to": 565,
                "label": "UNIFY-BACKTRACK"
            },
            {
                "from": 564,
                "to": 566,
                "label": "SUCCESS"
            },
            {
                "from": 567,
                "to": 569,
                "label": "\nX44 -> T59"
            },
            {
                "from": 569,
                "to": 21,
                "label": "INSTANCE with matching:\nT1 -> T57\nT2 -> T59\nT3 -> T58"
            },
            {
                "from": 850,
                "to": 852,
                "label": "IS ERROR"
            },
            {
                "from": 850,
                "to": 853,
                "label": "\nX56 -> T74"
            },
            {
                "from": 853,
                "to": 855,
                "label": "CASE"
            },
            {
                "from": 855,
                "to": 858,
                "label": "PARALLEL"
            },
            {
                "from": 855,
                "to": 859,
                "label": "PARALLEL"
            },
            {
                "from": 858,
                "to": 865,
                "label": "EVAL with clause\nget(.(X69, X70), 0, X71) :- =(X71, X69).\nand substitutionX69 -> T91,\nX70 -> T88,\nT72 -> .(T91, T88),\nT74 -> 0,\nT73 -> T90,\nX71 -> T90,\nT89 -> T90,\nT87 -> T91"
            },
            {
                "from": 858,
                "to": 866,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 859,
                "to": 1472,
                "label": "EVAL with clause\nget(.(X81, X82), X83, X84) :- ','(is(X85, -(X83, 1)), get(X82, X85, X84)).\nand substitutionX81 -> T102,\nX82 -> T106,\nT72 -> .(T102, T106),\nT74 -> T104,\nX83 -> T104,\nT73 -> T107,\nX84 -> T107,\nT103 -> T106,\nT105 -> T107"
            },
            {
                "from": 859,
                "to": 1473,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 865,
                "to": 867,
                "label": "UNIFY CASE with substitutionT90 -> T93,\nT91 -> T93"
            },
            {
                "from": 865,
                "to": 868,
                "label": "UNIFY-BACKTRACK"
            },
            {
                "from": 867,
                "to": 869,
                "label": "SUCCESS"
            },
            {
                "from": 1472,
                "to": 1474,
                "label": "\nX85 -> T108"
            },
            {
                "from": 1474,
                "to": 21,
                "label": "INSTANCE with matching:\nT1 -> T106\nT2 -> T108\nT3 -> T107"
            },
            {
                "from": 1498,
                "to": 1500,
                "label": "IS ERROR"
            },
            {
                "from": 1498,
                "to": 1501,
                "label": "\nX97 -> T123"
            },
            {
                "from": 1501,
                "to": 1502,
                "label": "CASE"
            },
            {
                "from": 1502,
                "to": 1503,
                "label": "PARALLEL"
            },
            {
                "from": 1502,
                "to": 1504,
                "label": "PARALLEL"
            },
            {
                "from": 1503,
                "to": 1505,
                "label": "EVAL with clause\nget(.(X110, X111), 0, X112) :- =(X112, X110).\nand substitutionX110 -> T140,\nX111 -> T137,\nT121 -> .(T140, T137),\nT123 -> 0,\nT122 -> T139,\nX112 -> T139,\nT138 -> T139,\nT136 -> T140"
            },
            {
                "from": 1503,
                "to": 1506,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 1504,
                "to": 1510,
                "label": "EVAL with clause\nget(.(X122, X123), X124, X125) :- ','(is(X126, -(X124, 1)), get(X123, X126, X125)).\nand substitutionX122 -> T151,\nX123 -> T155,\nT121 -> .(T151, T155),\nT123 -> T153,\nX124 -> T153,\nT122 -> T156,\nX125 -> T156,\nT152 -> T155,\nT154 -> T156"
            },
            {
                "from": 1504,
                "to": 1511,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 1505,
                "to": 1507,
                "label": "UNIFY CASE with substitutionT139 -> T142,\nT140 -> T142"
            },
            {
                "from": 1505,
                "to": 1508,
                "label": "UNIFY-BACKTRACK"
            },
            {
                "from": 1507,
                "to": 1509,
                "label": "SUCCESS"
            },
            {
                "from": 1510,
                "to": 1512,
                "label": "\nX126 -> T157"
            },
            {
                "from": 1512,
                "to": 21,
                "label": "INSTANCE with matching:\nT1 -> T155\nT2 -> T157\nT3 -> T156"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(142)
Obligation:
Triples:

getA(.(X1, .(X2, X3)), X4, X5) :- getA(X3, X6, X5).
getA(.(X1, .(X2, X3)), X4, X5) :- getA(X3, X6, X5).
getA(.(X1, .(X2, X3)), X4, X5) :- getA(X3, X6, X5).

Clauses:

getcA(.(X1, X2), 0, X1).
getcA(.(X1, .(X2, X3)), X4, X2).
getcA(.(X1, .(X2, X3)), X4, X5) :- getcA(X3, X6, X5).
getcA(.(X1, .(X2, X3)), X4, X2).
getcA(.(X1, .(X2, X3)), X4, X5) :- getcA(X3, X6, X5).
getcA(.(X1, .(X2, X3)), X4, X2).
getcA(.(X1, .(X2, X3)), X4, X5) :- getcA(X3, X6, X5).

Afs:

getA(x1, x2, x3)  =  getA


----------------------------------------

(143) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

getA_in_3: (f,f,f)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   GETA_IN_AAA(.(X1, .(X2, X3)), X4, X5) -> U1_AAA(X1, X2, X3, X4, X5, getA_in_aaa(X3, X6, X5))
   GETA_IN_AAA(.(X1, .(X2, X3)), X4, X5) -> GETA_IN_AAA(X3, X6, X5)

R is empty.
The argument filtering Pi contains the following mapping:
getA_in_aaa(x1, x2, x3)  =  getA_in_aaa

.(x1, x2)  =  .(x2)

GETA_IN_AAA(x1, x2, x3)  =  GETA_IN_AAA

U1_AAA(x1, x2, x3, x4, x5, x6)  =  U1_AAA(x6)


We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(144)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GETA_IN_AAA(.(X1, .(X2, X3)), X4, X5) -> U1_AAA(X1, X2, X3, X4, X5, getA_in_aaa(X3, X6, X5))
   GETA_IN_AAA(.(X1, .(X2, X3)), X4, X5) -> GETA_IN_AAA(X3, X6, X5)

R is empty.
The argument filtering Pi contains the following mapping:
getA_in_aaa(x1, x2, x3)  =  getA_in_aaa

.(x1, x2)  =  .(x2)

GETA_IN_AAA(x1, x2, x3)  =  GETA_IN_AAA

U1_AAA(x1, x2, x3, x4, x5, x6)  =  U1_AAA(x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(145) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(146)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   GETA_IN_AAA(.(X1, .(X2, X3)), X4, X5) -> GETA_IN_AAA(X3, X6, X5)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x2)

GETA_IN_AAA(x1, x2, x3)  =  GETA_IN_AAA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(147) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(148)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   GETA_IN_AAA -> GETA_IN_AAA

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(149) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = GETA_IN_AAA evaluates to  t =GETA_IN_AAA

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from GETA_IN_AAA to GETA_IN_AAA.




----------------------------------------

(150)
NO

----------------------------------------

(151) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 23,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(get (. X XS) (0) Res)",
                "(= Res X)"
            ],
            [
                "(get (. X XS) Y Res)",
                "(',' (is YP (- Y (1))) (get XS YP Res))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "23": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(get T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "24": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(get T1 T2 T3)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(get T1 T2 T3)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(get T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "26": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(get T1 T2 T3)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "191": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (is X29 (- T35 (1))) (get T36 X29 T37))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": ["X29"],
                    "exprvars": []
                }
            },
            "170": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "192": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "172": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "570": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 2,
                        "term": "(get T36 T38 T37)"
                    },
                    {
                        "clause": 1,
                        "scope": 2,
                        "term": "(get T36 T38 T37)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T38",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T35",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": ["T38"],
                    "free": [],
                    "exprvars": [
                        "T35",
                        "T38"
                    ]
                }
            },
            "197": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "552": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(get T36 T38 T37)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T38",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T35",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [
                        "T35",
                        "T38"
                    ],
                    "free": ["X29"],
                    "exprvars": [
                        "T35",
                        "T38"
                    ]
                }
            },
            "166": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(= T19 T20)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "167": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "169": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "840": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(get T36 T38 T37)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T38",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T35",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": ["T38"],
                    "free": [],
                    "exprvars": [
                        "T35",
                        "T38"
                    ]
                }
            },
            "841": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(get T36 T38 T37)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T38",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T35",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": ["T38"],
                    "free": [],
                    "exprvars": [
                        "T35",
                        "T38"
                    ]
                }
            },
            "842": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(= T57 T58)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T38",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T35",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "arguments": [
                                        {
                                            "name": "T35",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T35",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T35",
                        "T38"
                    ]
                }
            },
            "843": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T38",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T35",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T35",
                        "T38"
                    ]
                }
            },
            "844": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "845": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T38",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T35",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "arguments": [
                                        {
                                            "name": "T35",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T35",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            }
                        ]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T35",
                        "T38"
                    ]
                }
            },
            "846": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "847": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (is X61 (- T71 (1))) (get T73 X61 T74))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T38",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T35",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "arguments": [
                                        {
                                            "name": "T35",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T35",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            }
                        ]
                    },
                    "ground": ["T71"],
                    "free": ["X61"],
                    "exprvars": [
                        "T35",
                        "T38",
                        "T71"
                    ]
                }
            },
            "848": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "name": "T38",
                                "type": "PlainIntegerVariable"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "arguments": [
                                    {
                                        "name": "T35",
                                        "type": "PlainIntegerVariable"
                                    },
                                    {
                                        "type": "PlainIntegerConstant",
                                        "value": "1"
                                    }
                                ],
                                "type": "PlainIntegerOperation",
                                "operation": "-"
                            },
                            "operation": "="
                        }]
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": [
                        "T35",
                        "T38"
                    ]
                }
            },
            "849": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(get T73 T75 T74)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T38",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T35",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "arguments": [
                                        {
                                            "name": "T35",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T35",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "name": "T75",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T71",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            }
                        ]
                    },
                    "ground": [
                        "T75",
                        "T71"
                    ],
                    "free": ["X61"],
                    "exprvars": [
                        "T75",
                        "T35",
                        "T38",
                        "T71"
                    ]
                }
            }
        },
        "edges": [
            {
                "from": 23,
                "to": 24,
                "label": "CASE"
            },
            {
                "from": 24,
                "to": 25,
                "label": "PARALLEL"
            },
            {
                "from": 24,
                "to": 26,
                "label": "PARALLEL"
            },
            {
                "from": 25,
                "to": 166,
                "label": "EVAL with clause\nget(.(X13, X14), 0, X15) :- =(X15, X13).\nand substitutionX13 -> T20,\nX14 -> T17,\nT1 -> .(T20, T17),\nT2 -> 0,\nT3 -> T19,\nX15 -> T19,\nT18 -> T19,\nT16 -> T20"
            },
            {
                "from": 25,
                "to": 167,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 26,
                "to": 191,
                "label": "EVAL with clause\nget(.(X25, X26), X27, X28) :- ','(is(X29, -(X27, 1)), get(X26, X29, X28)).\nand substitutionX25 -> T31,\nX26 -> T36,\nT1 -> .(T31, T36),\nT2 -> T35,\nX27 -> T35,\nT3 -> T37,\nX28 -> T37,\nT33 -> T35,\nT32 -> T36,\nT34 -> T37"
            },
            {
                "from": 26,
                "to": 192,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 166,
                "to": 169,
                "label": "UNIFY CASE with substitutionT19 -> T22,\nT20 -> T22"
            },
            {
                "from": 166,
                "to": 170,
                "label": "UNIFY-BACKTRACK"
            },
            {
                "from": 169,
                "to": 172,
                "label": "SUCCESS"
            },
            {
                "from": 191,
                "to": 197,
                "label": "IS ERROR"
            },
            {
                "from": 191,
                "to": 552,
                "label": "\nX29 -> T38"
            },
            {
                "from": 552,
                "to": 570,
                "label": "CASE"
            },
            {
                "from": 570,
                "to": 840,
                "label": "PARALLEL"
            },
            {
                "from": 570,
                "to": 841,
                "label": "PARALLEL"
            },
            {
                "from": 840,
                "to": 842,
                "label": "EVAL with clause\nget(.(X45, X46), 0, X47) :- =(X47, X45).\nand substitutionX45 -> T58,\nX46 -> T55,\nT36 -> .(T58, T55),\nT38 -> 0,\nT37 -> T57,\nX47 -> T57,\nT56 -> T57,\nT54 -> T58"
            },
            {
                "from": 840,
                "to": 843,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 841,
                "to": 847,
                "label": "EVAL with clause\nget(.(X57, X58), X59, X60) :- ','(is(X61, -(X59, 1)), get(X58, X61, X60)).\nand substitutionX57 -> T69,\nX58 -> T73,\nT36 -> .(T69, T73),\nT38 -> T71,\nX59 -> T71,\nT37 -> T74,\nX60 -> T74,\nT70 -> T73,\nT72 -> T74"
            },
            {
                "from": 841,
                "to": 848,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 842,
                "to": 844,
                "label": "UNIFY CASE with substitutionT57 -> T60,\nT58 -> T60"
            },
            {
                "from": 842,
                "to": 845,
                "label": "UNIFY-BACKTRACK"
            },
            {
                "from": 844,
                "to": 846,
                "label": "SUCCESS"
            },
            {
                "from": 847,
                "to": 849,
                "label": "\nX61 -> T75"
            },
            {
                "from": 849,
                "to": 552,
                "label": "INSTANCE with matching:\nT36 -> T73\nT38 -> T75\nT37 -> T74\nX29 -> X61"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(152)
Obligation:
Rules:
f570_out(T38) -> f552_out(T38, T35) :|: TRUE
f552_in(x, x1) -> f570_in(x) :|: TRUE
f849_out(T75, T71) -> f847_out(T71) :|: TRUE
f847_in(x2) -> f849_in(x3, x2) :|: x3 = x2 - 1
f840_out(x4) -> f570_out(x4) :|: TRUE
f570_in(x5) -> f840_in(x5) :|: TRUE
f841_out(x6) -> f570_out(x6) :|: TRUE
f570_in(x7) -> f841_in(x7) :|: TRUE
f841_in(x8) -> f847_in(x8) :|: TRUE
f848_out -> f841_out(x9) :|: TRUE
f847_out(x10) -> f841_out(x10) :|: TRUE
f841_in(x11) -> f848_in :|: TRUE
f849_in(x12, x13) -> f552_in(x12, x14) :|: TRUE
f552_out(x15, x16) -> f849_out(x15, x17) :|: TRUE
f24_out -> f23_out :|: TRUE
f23_in -> f24_in :|: TRUE
f24_in -> f26_in :|: TRUE
f25_out -> f24_out :|: TRUE
f24_in -> f25_in :|: TRUE
f26_out -> f24_out :|: TRUE
f191_out -> f26_out :|: TRUE
f26_in -> f192_in :|: TRUE
f192_out -> f26_out :|: TRUE
f26_in -> f191_in :|: TRUE
f191_in -> f197_in :|: TRUE
f552_out(x18, x19) -> f191_out :|: TRUE
f191_in -> f552_in(x20, x21) :|: x20 = x21 - 1
f197_out -> f191_out :|: TRUE
Start term: f23_in

----------------------------------------

(153) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f552_in(x, x1) -> f570_in(x) :|: TRUE
f847_in(x2) -> f849_in(x3, x2) :|: x3 = x2 - 1
f570_in(x7) -> f841_in(x7) :|: TRUE
f841_in(x8) -> f847_in(x8) :|: TRUE
f849_in(x12, x13) -> f552_in(x12, x14) :|: TRUE


----------------------------------------

(154)
Obligation:
Rules:
f552_in(x, x1) -> f570_in(x) :|: TRUE
f847_in(x2) -> f849_in(x3, x2) :|: x3 = x2 - 1
f570_in(x7) -> f841_in(x7) :|: TRUE
f841_in(x8) -> f847_in(x8) :|: TRUE
f849_in(x12, x13) -> f552_in(x12, x14) :|: TRUE

----------------------------------------

(155) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(156)
Obligation:
Rules:
f552_in(x:0, x1:0) -> f552_in(x:0 - 1, x14:0) :|: TRUE

----------------------------------------

(157) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(158)
Obligation:
Rules:
f552_in(x:0, x1:0) -> f552_in(arith, x14:0) :|: TRUE && arith = x:0 - 1

----------------------------------------

(159) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f552_in(x:0, x1:0) -> f552_in(arith, x14:0) :|: TRUE && arith = x:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(160)
Obligation:

Termination digraph:
Nodes:
(1) f552_in(x:0, x1:0) -> f552_in(arith, x14:0) :|: TRUE && arith = x:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(161) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(162)
Obligation:
Rules:
f552_in(x:0:0, x1:0:0) -> f552_in(x:0:0 - 1, x14:0:0) :|: TRUE

----------------------------------------

(163) IRSwTToIntTRSProof (SOUND)
Applied path-length measure to transform intTRS with terms to intTRS.
----------------------------------------

(164)
Obligation:
Rules:
f552_in(x, x1) -> f552_in(x - 1, x2) :|: TRUE

----------------------------------------

(165) IntTRSNonPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc, x, x1) -> f(1, x - 1, x2) :|: pc = 1 && TRUE
Proved unsatisfiability of the following formula, indicating that the system is never left after entering:
(((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1) + (1 * -1)) and run2_2 = ((run1_3 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and T)) and !(((run2_0 * 1)) = ((1 * 1)) and T))
Proved satisfiability of the following formula, indicating that the system is entered at least once:
((run2_0 = ((1 * 1)) and run2_1 = ((run1_1 * 1) + (1 * -1)) and run2_2 = ((run1_3 * 1))) and (((run1_0 * 1)) = ((1 * 1)) and T))

----------------------------------------

(166)
NO
