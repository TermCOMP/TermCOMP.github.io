YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Ueg2R.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

length(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) UndefinedPredicateHandlerProof [SOUND, 0 ms]
(2) Prolog
(3) PrologToPiTRSProof [SOUND, 0 ms]
(4) PiTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) PiDP
(11) PiDPToQDPProof [SOUND, 0 ms]
(12) QDP
(13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
Clauses:

length(Xs, L) :- length(Xs, 0, L).
length([], L, L).
length(.(X, Xs), L0, L) :- ','(is(L1, +(L0, 1)), length(Xs, L1, L)).


Query: length(g,a)
----------------------------------------

(1) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

length(Xs, L) :- length(Xs, 0, L).
length([], L, L).
length(.(X, Xs), L0, L) :- ','(is(L1, +(L0, 1)), length(Xs, L1, L)).
is(X0, X1).


Query: length(g,a)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

length_in_2: (b,f)

length_in_3: (b,b,f) (b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   length_in_ga(Xs, L) -> U1_ga(Xs, L, length_in_gga(Xs, 0, L))
   length_in_gga([], L, L) -> length_out_gga([], L, L)
   length_in_gga(.(X, Xs), L0, L) -> U2_gga(X, Xs, L0, L, is_in_ag(L1, +(L0, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_gga(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> U3_gga(X, Xs, L0, L, length_in_gaa(Xs, L1, L))
   length_in_gaa([], L, L) -> length_out_gaa([], L, L)
   length_in_gaa(.(X, Xs), L0, L) -> U2_gaa(X, Xs, L0, L, is_in_ag(L1, +(L0, 1)))
   U2_gaa(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> U3_gaa(X, Xs, L0, L, length_in_gaa(Xs, L1, L))
   U3_gaa(X, Xs, L0, L, length_out_gaa(Xs, L1, L)) -> length_out_gaa(.(X, Xs), L0, L)
   U3_gga(X, Xs, L0, L, length_out_gaa(Xs, L1, L)) -> length_out_gga(.(X, Xs), L0, L)
   U1_ga(Xs, L, length_out_gga(Xs, 0, L)) -> length_out_ga(Xs, L)

The argument filtering Pi contains the following mapping:
length_in_ga(x1, x2)  =  length_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

length_in_gga(x1, x2, x3)  =  length_in_gga(x1, x2)

[]  =  []

length_out_gga(x1, x2, x3)  =  length_out_gga

.(x1, x2)  =  .(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x2, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x2)

1  =  1

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x5)

length_in_gaa(x1, x2, x3)  =  length_in_gaa(x1)

length_out_gaa(x1, x2, x3)  =  length_out_gaa

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x2, x5)

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x5)

0  =  0

length_out_ga(x1, x2)  =  length_out_ga





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   length_in_ga(Xs, L) -> U1_ga(Xs, L, length_in_gga(Xs, 0, L))
   length_in_gga([], L, L) -> length_out_gga([], L, L)
   length_in_gga(.(X, Xs), L0, L) -> U2_gga(X, Xs, L0, L, is_in_ag(L1, +(L0, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_gga(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> U3_gga(X, Xs, L0, L, length_in_gaa(Xs, L1, L))
   length_in_gaa([], L, L) -> length_out_gaa([], L, L)
   length_in_gaa(.(X, Xs), L0, L) -> U2_gaa(X, Xs, L0, L, is_in_ag(L1, +(L0, 1)))
   U2_gaa(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> U3_gaa(X, Xs, L0, L, length_in_gaa(Xs, L1, L))
   U3_gaa(X, Xs, L0, L, length_out_gaa(Xs, L1, L)) -> length_out_gaa(.(X, Xs), L0, L)
   U3_gga(X, Xs, L0, L, length_out_gaa(Xs, L1, L)) -> length_out_gga(.(X, Xs), L0, L)
   U1_ga(Xs, L, length_out_gga(Xs, 0, L)) -> length_out_ga(Xs, L)

The argument filtering Pi contains the following mapping:
length_in_ga(x1, x2)  =  length_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

length_in_gga(x1, x2, x3)  =  length_in_gga(x1, x2)

[]  =  []

length_out_gga(x1, x2, x3)  =  length_out_gga

.(x1, x2)  =  .(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x2, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x2)

1  =  1

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x5)

length_in_gaa(x1, x2, x3)  =  length_in_gaa(x1)

length_out_gaa(x1, x2, x3)  =  length_out_gaa

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x2, x5)

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x5)

0  =  0

length_out_ga(x1, x2)  =  length_out_ga



----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   LENGTH_IN_GA(Xs, L) -> U1_GA(Xs, L, length_in_gga(Xs, 0, L))
   LENGTH_IN_GA(Xs, L) -> LENGTH_IN_GGA(Xs, 0, L)
   LENGTH_IN_GGA(.(X, Xs), L0, L) -> U2_GGA(X, Xs, L0, L, is_in_ag(L1, +(L0, 1)))
   LENGTH_IN_GGA(.(X, Xs), L0, L) -> IS_IN_AG(L1, +(L0, 1))
   U2_GGA(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> U3_GGA(X, Xs, L0, L, length_in_gaa(Xs, L1, L))
   U2_GGA(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> LENGTH_IN_GAA(Xs, L1, L)
   LENGTH_IN_GAA(.(X, Xs), L0, L) -> U2_GAA(X, Xs, L0, L, is_in_ag(L1, +(L0, 1)))
   LENGTH_IN_GAA(.(X, Xs), L0, L) -> IS_IN_AG(L1, +(L0, 1))
   U2_GAA(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> U3_GAA(X, Xs, L0, L, length_in_gaa(Xs, L1, L))
   U2_GAA(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> LENGTH_IN_GAA(Xs, L1, L)

The TRS R consists of the following rules:

   length_in_ga(Xs, L) -> U1_ga(Xs, L, length_in_gga(Xs, 0, L))
   length_in_gga([], L, L) -> length_out_gga([], L, L)
   length_in_gga(.(X, Xs), L0, L) -> U2_gga(X, Xs, L0, L, is_in_ag(L1, +(L0, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_gga(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> U3_gga(X, Xs, L0, L, length_in_gaa(Xs, L1, L))
   length_in_gaa([], L, L) -> length_out_gaa([], L, L)
   length_in_gaa(.(X, Xs), L0, L) -> U2_gaa(X, Xs, L0, L, is_in_ag(L1, +(L0, 1)))
   U2_gaa(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> U3_gaa(X, Xs, L0, L, length_in_gaa(Xs, L1, L))
   U3_gaa(X, Xs, L0, L, length_out_gaa(Xs, L1, L)) -> length_out_gaa(.(X, Xs), L0, L)
   U3_gga(X, Xs, L0, L, length_out_gaa(Xs, L1, L)) -> length_out_gga(.(X, Xs), L0, L)
   U1_ga(Xs, L, length_out_gga(Xs, 0, L)) -> length_out_ga(Xs, L)

The argument filtering Pi contains the following mapping:
length_in_ga(x1, x2)  =  length_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

length_in_gga(x1, x2, x3)  =  length_in_gga(x1, x2)

[]  =  []

length_out_gga(x1, x2, x3)  =  length_out_gga

.(x1, x2)  =  .(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x2, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x2)

1  =  1

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x5)

length_in_gaa(x1, x2, x3)  =  length_in_gaa(x1)

length_out_gaa(x1, x2, x3)  =  length_out_gaa

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x2, x5)

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x5)

0  =  0

length_out_ga(x1, x2)  =  length_out_ga

LENGTH_IN_GA(x1, x2)  =  LENGTH_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

LENGTH_IN_GGA(x1, x2, x3)  =  LENGTH_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x2, x5)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U3_GGA(x1, x2, x3, x4, x5)  =  U3_GGA(x5)

LENGTH_IN_GAA(x1, x2, x3)  =  LENGTH_IN_GAA(x1)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x2, x5)

U3_GAA(x1, x2, x3, x4, x5)  =  U3_GAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   LENGTH_IN_GA(Xs, L) -> U1_GA(Xs, L, length_in_gga(Xs, 0, L))
   LENGTH_IN_GA(Xs, L) -> LENGTH_IN_GGA(Xs, 0, L)
   LENGTH_IN_GGA(.(X, Xs), L0, L) -> U2_GGA(X, Xs, L0, L, is_in_ag(L1, +(L0, 1)))
   LENGTH_IN_GGA(.(X, Xs), L0, L) -> IS_IN_AG(L1, +(L0, 1))
   U2_GGA(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> U3_GGA(X, Xs, L0, L, length_in_gaa(Xs, L1, L))
   U2_GGA(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> LENGTH_IN_GAA(Xs, L1, L)
   LENGTH_IN_GAA(.(X, Xs), L0, L) -> U2_GAA(X, Xs, L0, L, is_in_ag(L1, +(L0, 1)))
   LENGTH_IN_GAA(.(X, Xs), L0, L) -> IS_IN_AG(L1, +(L0, 1))
   U2_GAA(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> U3_GAA(X, Xs, L0, L, length_in_gaa(Xs, L1, L))
   U2_GAA(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> LENGTH_IN_GAA(Xs, L1, L)

The TRS R consists of the following rules:

   length_in_ga(Xs, L) -> U1_ga(Xs, L, length_in_gga(Xs, 0, L))
   length_in_gga([], L, L) -> length_out_gga([], L, L)
   length_in_gga(.(X, Xs), L0, L) -> U2_gga(X, Xs, L0, L, is_in_ag(L1, +(L0, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_gga(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> U3_gga(X, Xs, L0, L, length_in_gaa(Xs, L1, L))
   length_in_gaa([], L, L) -> length_out_gaa([], L, L)
   length_in_gaa(.(X, Xs), L0, L) -> U2_gaa(X, Xs, L0, L, is_in_ag(L1, +(L0, 1)))
   U2_gaa(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> U3_gaa(X, Xs, L0, L, length_in_gaa(Xs, L1, L))
   U3_gaa(X, Xs, L0, L, length_out_gaa(Xs, L1, L)) -> length_out_gaa(.(X, Xs), L0, L)
   U3_gga(X, Xs, L0, L, length_out_gaa(Xs, L1, L)) -> length_out_gga(.(X, Xs), L0, L)
   U1_ga(Xs, L, length_out_gga(Xs, 0, L)) -> length_out_ga(Xs, L)

The argument filtering Pi contains the following mapping:
length_in_ga(x1, x2)  =  length_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

length_in_gga(x1, x2, x3)  =  length_in_gga(x1, x2)

[]  =  []

length_out_gga(x1, x2, x3)  =  length_out_gga

.(x1, x2)  =  .(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x2, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x2)

1  =  1

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x5)

length_in_gaa(x1, x2, x3)  =  length_in_gaa(x1)

length_out_gaa(x1, x2, x3)  =  length_out_gaa

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x2, x5)

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x5)

0  =  0

length_out_ga(x1, x2)  =  length_out_ga

LENGTH_IN_GA(x1, x2)  =  LENGTH_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

LENGTH_IN_GGA(x1, x2, x3)  =  LENGTH_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x2, x5)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U3_GGA(x1, x2, x3, x4, x5)  =  U3_GGA(x5)

LENGTH_IN_GAA(x1, x2, x3)  =  LENGTH_IN_GAA(x1)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x2, x5)

U3_GAA(x1, x2, x3, x4, x5)  =  U3_GAA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 8 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GAA(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> LENGTH_IN_GAA(Xs, L1, L)
   LENGTH_IN_GAA(.(X, Xs), L0, L) -> U2_GAA(X, Xs, L0, L, is_in_ag(L1, +(L0, 1)))

The TRS R consists of the following rules:

   length_in_ga(Xs, L) -> U1_ga(Xs, L, length_in_gga(Xs, 0, L))
   length_in_gga([], L, L) -> length_out_gga([], L, L)
   length_in_gga(.(X, Xs), L0, L) -> U2_gga(X, Xs, L0, L, is_in_ag(L1, +(L0, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_gga(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> U3_gga(X, Xs, L0, L, length_in_gaa(Xs, L1, L))
   length_in_gaa([], L, L) -> length_out_gaa([], L, L)
   length_in_gaa(.(X, Xs), L0, L) -> U2_gaa(X, Xs, L0, L, is_in_ag(L1, +(L0, 1)))
   U2_gaa(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> U3_gaa(X, Xs, L0, L, length_in_gaa(Xs, L1, L))
   U3_gaa(X, Xs, L0, L, length_out_gaa(Xs, L1, L)) -> length_out_gaa(.(X, Xs), L0, L)
   U3_gga(X, Xs, L0, L, length_out_gaa(Xs, L1, L)) -> length_out_gga(.(X, Xs), L0, L)
   U1_ga(Xs, L, length_out_gga(Xs, 0, L)) -> length_out_ga(Xs, L)

The argument filtering Pi contains the following mapping:
length_in_ga(x1, x2)  =  length_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

length_in_gga(x1, x2, x3)  =  length_in_gga(x1, x2)

[]  =  []

length_out_gga(x1, x2, x3)  =  length_out_gga

.(x1, x2)  =  .(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x2, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x2)

1  =  1

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x5)

length_in_gaa(x1, x2, x3)  =  length_in_gaa(x1)

length_out_gaa(x1, x2, x3)  =  length_out_gaa

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x2, x5)

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x5)

0  =  0

length_out_ga(x1, x2)  =  length_out_ga

LENGTH_IN_GAA(x1, x2, x3)  =  LENGTH_IN_GAA(x1)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GAA(X, Xs, L0, L, is_out_ag(L1, +(L0, 1))) -> LENGTH_IN_GAA(Xs, L1, L)
   LENGTH_IN_GAA(.(X, Xs), L0, L) -> U2_GAA(X, Xs, L0, L, is_in_ag(L1, +(L0, 1)))

The TRS R consists of the following rules:

   is_in_ag(X0, X1) -> is_out_ag(X0, X1)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x2)

1  =  1

LENGTH_IN_GAA(x1, x2, x3)  =  LENGTH_IN_GAA(x1)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GAA(Xs, is_out_ag) -> LENGTH_IN_GAA(Xs)
   LENGTH_IN_GAA(.(X, Xs)) -> U2_GAA(Xs, is_in_ag(+(1)))

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag

The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*LENGTH_IN_GAA(.(X, Xs)) -> U2_GAA(Xs, is_in_ag(+(1)))
The graph contains the following edges 1 > 1


*U2_GAA(Xs, is_out_ag) -> LENGTH_IN_GAA(Xs)
The graph contains the following edges 1 >= 1


----------------------------------------

(14)
YES
