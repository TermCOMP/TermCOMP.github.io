YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/fmkfw.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

dcsolve(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(2) TRUE


----------------------------------------

(0)
Obligation:
Clauses:

dcsolve(X, Y) :- ','(base(X), conquer(X, Y)).
dcsolve(X, Y) :- ','(divide(X, X0, X1, X2), ','(dcsolve(X1, Y1), ','(dcsolve(X2, Y2), merge(X0, Y1, Y2, Y)))).


Query: dcsolve(g,a)
----------------------------------------

(1) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(dcsolve X Y)",
                "(',' (base X) (conquer X Y))"
            ],
            [
                "(dcsolve X Y)",
                "(',' (divide X X0 X1 X2) (',' (dcsolve X1 Y1) (',' (dcsolve X2 Y2) (merge X0 Y1 Y2 Y))))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(dcsolve T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "3": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(dcsolve T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(dcsolve T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (base T8) (conquer T8 T10))"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(dcsolve T8 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T8"],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes"
        },
        "edges": [
            {
                "from": 2,
                "to": 3,
                "label": "CASE"
            },
            {
                "from": 3,
                "to": 7,
                "label": "ONLY EVAL with clause\ndcsolve(X7, X8) :- ','(base(X7), conquer(X7, X8)).\nand substitutionT1 -> T8,\nX7 -> T8,\nT2 -> T10,\nX8 -> T10,\nT9 -> T10"
            },
            {
                "from": 7,
                "to": 8,
                "label": "UNDEFINED ERROR"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
TRUE
