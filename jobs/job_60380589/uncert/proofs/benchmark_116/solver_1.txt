Graph construction failed
Graph construction failed
Graph construction failed
YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/qF6dz.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

count(g,g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) UnifyTransformerProof [EQUIVALENT, 0 ms]
(2) Prolog
(3) UndefinedPredicateHandlerProof [SOUND, 0 ms]
(4) Prolog
(5) PrologToPiTRSProof [SOUND, 0 ms]
(6) PiTRS
(7) DependencyPairsProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) DependencyGraphProof [EQUIVALENT, 0 ms]
(10) PiDP
(11) UsableRulesProof [EQUIVALENT, 0 ms]
(12) PiDP
(13) PiDPToQDPProof [SOUND, 1 ms]
(14) QDP
(15) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(16) YES


----------------------------------------

(0)
Obligation:
Clauses:

count(Item, [], 0).
count(Item, .(X, Xs), Result) :- ','(=(Item, X), ','(count(Item, Xs, TailCount), is(Result, +(TailCount, 1)))).
count(Item, .(X, Xs), TailCount) :- ','(\=(Item, X), count(Item, Xs, TailCount)).


Query: count(g,g,a)
----------------------------------------

(1) UnifyTransformerProof (EQUIVALENT)
Added a fact for the built-in = predicate [PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

count(Item, [], 0).
count(Item, .(X, Xs), Result) :- ','(=(Item, X), ','(count(Item, Xs, TailCount), is(Result, +(TailCount, 1)))).
count(Item, .(X, Xs), TailCount) :- ','(\=(Item, X), count(Item, Xs, TailCount)).
=(X, X).


Query: count(g,g,a)
----------------------------------------

(3) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(4)
Obligation:
Clauses:

count(Item, [], 0).
count(Item, .(X, Xs), Result) :- ','(=(Item, X), ','(count(Item, Xs, TailCount), is(Result, +(TailCount, 1)))).
count(Item, .(X, Xs), TailCount) :- ','(\=(Item, X), count(Item, Xs, TailCount)).
=(X, X).
is(X0, X1).
\=(X0, X1).


Query: count(g,g,a)
----------------------------------------

(5) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

count_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   count_in_gga(Item, [], 0) -> count_out_gga(Item, [], 0)
   count_in_gga(Item, .(X, Xs), Result) -> U1_gga(Item, X, Xs, Result, =_in_gg(Item, X))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U1_gga(Item, X, Xs, Result, =_out_gg(Item, X)) -> U2_gga(Item, X, Xs, Result, count_in_gga(Item, Xs, TailCount))
   count_in_gga(Item, .(X, Xs), TailCount) -> U4_gga(Item, X, Xs, TailCount, \=_in_gg(Item, X))
   \=_in_gg(X0, X1) -> \=_out_gg(X0, X1)
   U4_gga(Item, X, Xs, TailCount, \=_out_gg(Item, X)) -> U5_gga(Item, X, Xs, TailCount, count_in_gga(Item, Xs, TailCount))
   U5_gga(Item, X, Xs, TailCount, count_out_gga(Item, Xs, TailCount)) -> count_out_gga(Item, .(X, Xs), TailCount)
   U2_gga(Item, X, Xs, Result, count_out_gga(Item, Xs, TailCount)) -> U3_gga(Item, X, Xs, Result, TailCount, is_in_ag(Result, +(TailCount, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U3_gga(Item, X, Xs, Result, TailCount, is_out_ag(Result, +(TailCount, 1))) -> count_out_gga(Item, .(X, Xs), Result)

The argument filtering Pi contains the following mapping:
count_in_gga(x1, x2, x3)  =  count_in_gga(x1, x2)

[]  =  []

count_out_gga(x1, x2, x3)  =  count_out_gga

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x1, x3, x5)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x1, x3, x5)

\=_in_gg(x1, x2)  =  \=_in_gg(x1, x2)

\=_out_gg(x1, x2)  =  \=_out_gg

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x5)

U3_gga(x1, x2, x3, x4, x5, x6)  =  U3_gga(x6)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x2)

1  =  1





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(6)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   count_in_gga(Item, [], 0) -> count_out_gga(Item, [], 0)
   count_in_gga(Item, .(X, Xs), Result) -> U1_gga(Item, X, Xs, Result, =_in_gg(Item, X))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U1_gga(Item, X, Xs, Result, =_out_gg(Item, X)) -> U2_gga(Item, X, Xs, Result, count_in_gga(Item, Xs, TailCount))
   count_in_gga(Item, .(X, Xs), TailCount) -> U4_gga(Item, X, Xs, TailCount, \=_in_gg(Item, X))
   \=_in_gg(X0, X1) -> \=_out_gg(X0, X1)
   U4_gga(Item, X, Xs, TailCount, \=_out_gg(Item, X)) -> U5_gga(Item, X, Xs, TailCount, count_in_gga(Item, Xs, TailCount))
   U5_gga(Item, X, Xs, TailCount, count_out_gga(Item, Xs, TailCount)) -> count_out_gga(Item, .(X, Xs), TailCount)
   U2_gga(Item, X, Xs, Result, count_out_gga(Item, Xs, TailCount)) -> U3_gga(Item, X, Xs, Result, TailCount, is_in_ag(Result, +(TailCount, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U3_gga(Item, X, Xs, Result, TailCount, is_out_ag(Result, +(TailCount, 1))) -> count_out_gga(Item, .(X, Xs), Result)

The argument filtering Pi contains the following mapping:
count_in_gga(x1, x2, x3)  =  count_in_gga(x1, x2)

[]  =  []

count_out_gga(x1, x2, x3)  =  count_out_gga

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x1, x3, x5)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x1, x3, x5)

\=_in_gg(x1, x2)  =  \=_in_gg(x1, x2)

\=_out_gg(x1, x2)  =  \=_out_gg

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x5)

U3_gga(x1, x2, x3, x4, x5, x6)  =  U3_gga(x6)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x2)

1  =  1



----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   COUNT_IN_GGA(Item, .(X, Xs), Result) -> U1_GGA(Item, X, Xs, Result, =_in_gg(Item, X))
   COUNT_IN_GGA(Item, .(X, Xs), Result) -> =_IN_GG(Item, X)
   U1_GGA(Item, X, Xs, Result, =_out_gg(Item, X)) -> U2_GGA(Item, X, Xs, Result, count_in_gga(Item, Xs, TailCount))
   U1_GGA(Item, X, Xs, Result, =_out_gg(Item, X)) -> COUNT_IN_GGA(Item, Xs, TailCount)
   COUNT_IN_GGA(Item, .(X, Xs), TailCount) -> U4_GGA(Item, X, Xs, TailCount, \=_in_gg(Item, X))
   COUNT_IN_GGA(Item, .(X, Xs), TailCount) -> \=_IN_GG(Item, X)
   U4_GGA(Item, X, Xs, TailCount, \=_out_gg(Item, X)) -> U5_GGA(Item, X, Xs, TailCount, count_in_gga(Item, Xs, TailCount))
   U4_GGA(Item, X, Xs, TailCount, \=_out_gg(Item, X)) -> COUNT_IN_GGA(Item, Xs, TailCount)
   U2_GGA(Item, X, Xs, Result, count_out_gga(Item, Xs, TailCount)) -> U3_GGA(Item, X, Xs, Result, TailCount, is_in_ag(Result, +(TailCount, 1)))
   U2_GGA(Item, X, Xs, Result, count_out_gga(Item, Xs, TailCount)) -> IS_IN_AG(Result, +(TailCount, 1))

The TRS R consists of the following rules:

   count_in_gga(Item, [], 0) -> count_out_gga(Item, [], 0)
   count_in_gga(Item, .(X, Xs), Result) -> U1_gga(Item, X, Xs, Result, =_in_gg(Item, X))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U1_gga(Item, X, Xs, Result, =_out_gg(Item, X)) -> U2_gga(Item, X, Xs, Result, count_in_gga(Item, Xs, TailCount))
   count_in_gga(Item, .(X, Xs), TailCount) -> U4_gga(Item, X, Xs, TailCount, \=_in_gg(Item, X))
   \=_in_gg(X0, X1) -> \=_out_gg(X0, X1)
   U4_gga(Item, X, Xs, TailCount, \=_out_gg(Item, X)) -> U5_gga(Item, X, Xs, TailCount, count_in_gga(Item, Xs, TailCount))
   U5_gga(Item, X, Xs, TailCount, count_out_gga(Item, Xs, TailCount)) -> count_out_gga(Item, .(X, Xs), TailCount)
   U2_gga(Item, X, Xs, Result, count_out_gga(Item, Xs, TailCount)) -> U3_gga(Item, X, Xs, Result, TailCount, is_in_ag(Result, +(TailCount, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U3_gga(Item, X, Xs, Result, TailCount, is_out_ag(Result, +(TailCount, 1))) -> count_out_gga(Item, .(X, Xs), Result)

The argument filtering Pi contains the following mapping:
count_in_gga(x1, x2, x3)  =  count_in_gga(x1, x2)

[]  =  []

count_out_gga(x1, x2, x3)  =  count_out_gga

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x1, x3, x5)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x1, x3, x5)

\=_in_gg(x1, x2)  =  \=_in_gg(x1, x2)

\=_out_gg(x1, x2)  =  \=_out_gg

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x5)

U3_gga(x1, x2, x3, x4, x5, x6)  =  U3_gga(x6)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x2)

1  =  1

COUNT_IN_GGA(x1, x2, x3)  =  COUNT_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5)  =  U1_GGA(x1, x3, x5)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x5)

U4_GGA(x1, x2, x3, x4, x5)  =  U4_GGA(x1, x3, x5)

\=_IN_GG(x1, x2)  =  \=_IN_GG(x1, x2)

U5_GGA(x1, x2, x3, x4, x5)  =  U5_GGA(x5)

U3_GGA(x1, x2, x3, x4, x5, x6)  =  U3_GGA(x6)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   COUNT_IN_GGA(Item, .(X, Xs), Result) -> U1_GGA(Item, X, Xs, Result, =_in_gg(Item, X))
   COUNT_IN_GGA(Item, .(X, Xs), Result) -> =_IN_GG(Item, X)
   U1_GGA(Item, X, Xs, Result, =_out_gg(Item, X)) -> U2_GGA(Item, X, Xs, Result, count_in_gga(Item, Xs, TailCount))
   U1_GGA(Item, X, Xs, Result, =_out_gg(Item, X)) -> COUNT_IN_GGA(Item, Xs, TailCount)
   COUNT_IN_GGA(Item, .(X, Xs), TailCount) -> U4_GGA(Item, X, Xs, TailCount, \=_in_gg(Item, X))
   COUNT_IN_GGA(Item, .(X, Xs), TailCount) -> \=_IN_GG(Item, X)
   U4_GGA(Item, X, Xs, TailCount, \=_out_gg(Item, X)) -> U5_GGA(Item, X, Xs, TailCount, count_in_gga(Item, Xs, TailCount))
   U4_GGA(Item, X, Xs, TailCount, \=_out_gg(Item, X)) -> COUNT_IN_GGA(Item, Xs, TailCount)
   U2_GGA(Item, X, Xs, Result, count_out_gga(Item, Xs, TailCount)) -> U3_GGA(Item, X, Xs, Result, TailCount, is_in_ag(Result, +(TailCount, 1)))
   U2_GGA(Item, X, Xs, Result, count_out_gga(Item, Xs, TailCount)) -> IS_IN_AG(Result, +(TailCount, 1))

The TRS R consists of the following rules:

   count_in_gga(Item, [], 0) -> count_out_gga(Item, [], 0)
   count_in_gga(Item, .(X, Xs), Result) -> U1_gga(Item, X, Xs, Result, =_in_gg(Item, X))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U1_gga(Item, X, Xs, Result, =_out_gg(Item, X)) -> U2_gga(Item, X, Xs, Result, count_in_gga(Item, Xs, TailCount))
   count_in_gga(Item, .(X, Xs), TailCount) -> U4_gga(Item, X, Xs, TailCount, \=_in_gg(Item, X))
   \=_in_gg(X0, X1) -> \=_out_gg(X0, X1)
   U4_gga(Item, X, Xs, TailCount, \=_out_gg(Item, X)) -> U5_gga(Item, X, Xs, TailCount, count_in_gga(Item, Xs, TailCount))
   U5_gga(Item, X, Xs, TailCount, count_out_gga(Item, Xs, TailCount)) -> count_out_gga(Item, .(X, Xs), TailCount)
   U2_gga(Item, X, Xs, Result, count_out_gga(Item, Xs, TailCount)) -> U3_gga(Item, X, Xs, Result, TailCount, is_in_ag(Result, +(TailCount, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U3_gga(Item, X, Xs, Result, TailCount, is_out_ag(Result, +(TailCount, 1))) -> count_out_gga(Item, .(X, Xs), Result)

The argument filtering Pi contains the following mapping:
count_in_gga(x1, x2, x3)  =  count_in_gga(x1, x2)

[]  =  []

count_out_gga(x1, x2, x3)  =  count_out_gga

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x1, x3, x5)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x1, x3, x5)

\=_in_gg(x1, x2)  =  \=_in_gg(x1, x2)

\=_out_gg(x1, x2)  =  \=_out_gg

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x5)

U3_gga(x1, x2, x3, x4, x5, x6)  =  U3_gga(x6)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x2)

1  =  1

COUNT_IN_GGA(x1, x2, x3)  =  COUNT_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5)  =  U1_GGA(x1, x3, x5)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x5)

U4_GGA(x1, x2, x3, x4, x5)  =  U4_GGA(x1, x3, x5)

\=_IN_GG(x1, x2)  =  \=_IN_GG(x1, x2)

U5_GGA(x1, x2, x3, x4, x5)  =  U5_GGA(x5)

U3_GGA(x1, x2, x3, x4, x5, x6)  =  U3_GGA(x6)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 6 less nodes.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GGA(Item, X, Xs, Result, =_out_gg(Item, X)) -> COUNT_IN_GGA(Item, Xs, TailCount)
   COUNT_IN_GGA(Item, .(X, Xs), Result) -> U1_GGA(Item, X, Xs, Result, =_in_gg(Item, X))
   COUNT_IN_GGA(Item, .(X, Xs), TailCount) -> U4_GGA(Item, X, Xs, TailCount, \=_in_gg(Item, X))
   U4_GGA(Item, X, Xs, TailCount, \=_out_gg(Item, X)) -> COUNT_IN_GGA(Item, Xs, TailCount)

The TRS R consists of the following rules:

   count_in_gga(Item, [], 0) -> count_out_gga(Item, [], 0)
   count_in_gga(Item, .(X, Xs), Result) -> U1_gga(Item, X, Xs, Result, =_in_gg(Item, X))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U1_gga(Item, X, Xs, Result, =_out_gg(Item, X)) -> U2_gga(Item, X, Xs, Result, count_in_gga(Item, Xs, TailCount))
   count_in_gga(Item, .(X, Xs), TailCount) -> U4_gga(Item, X, Xs, TailCount, \=_in_gg(Item, X))
   \=_in_gg(X0, X1) -> \=_out_gg(X0, X1)
   U4_gga(Item, X, Xs, TailCount, \=_out_gg(Item, X)) -> U5_gga(Item, X, Xs, TailCount, count_in_gga(Item, Xs, TailCount))
   U5_gga(Item, X, Xs, TailCount, count_out_gga(Item, Xs, TailCount)) -> count_out_gga(Item, .(X, Xs), TailCount)
   U2_gga(Item, X, Xs, Result, count_out_gga(Item, Xs, TailCount)) -> U3_gga(Item, X, Xs, Result, TailCount, is_in_ag(Result, +(TailCount, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U3_gga(Item, X, Xs, Result, TailCount, is_out_ag(Result, +(TailCount, 1))) -> count_out_gga(Item, .(X, Xs), Result)

The argument filtering Pi contains the following mapping:
count_in_gga(x1, x2, x3)  =  count_in_gga(x1, x2)

[]  =  []

count_out_gga(x1, x2, x3)  =  count_out_gga

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5)  =  U1_gga(x1, x3, x5)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x5)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x1, x3, x5)

\=_in_gg(x1, x2)  =  \=_in_gg(x1, x2)

\=_out_gg(x1, x2)  =  \=_out_gg

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x5)

U3_gga(x1, x2, x3, x4, x5, x6)  =  U3_gga(x6)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x2)

1  =  1

COUNT_IN_GGA(x1, x2, x3)  =  COUNT_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5)  =  U1_GGA(x1, x3, x5)

U4_GGA(x1, x2, x3, x4, x5)  =  U4_GGA(x1, x3, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(12)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GGA(Item, X, Xs, Result, =_out_gg(Item, X)) -> COUNT_IN_GGA(Item, Xs, TailCount)
   COUNT_IN_GGA(Item, .(X, Xs), Result) -> U1_GGA(Item, X, Xs, Result, =_in_gg(Item, X))
   COUNT_IN_GGA(Item, .(X, Xs), TailCount) -> U4_GGA(Item, X, Xs, TailCount, \=_in_gg(Item, X))
   U4_GGA(Item, X, Xs, TailCount, \=_out_gg(Item, X)) -> COUNT_IN_GGA(Item, Xs, TailCount)

The TRS R consists of the following rules:

   =_in_gg(X, X) -> =_out_gg(X, X)
   \=_in_gg(X0, X1) -> \=_out_gg(X0, X1)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

\=_in_gg(x1, x2)  =  \=_in_gg(x1, x2)

\=_out_gg(x1, x2)  =  \=_out_gg

COUNT_IN_GGA(x1, x2, x3)  =  COUNT_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5)  =  U1_GGA(x1, x3, x5)

U4_GGA(x1, x2, x3, x4, x5)  =  U4_GGA(x1, x3, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(13) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GGA(Item, Xs, =_out_gg) -> COUNT_IN_GGA(Item, Xs)
   COUNT_IN_GGA(Item, .(X, Xs)) -> U1_GGA(Item, Xs, =_in_gg(Item, X))
   COUNT_IN_GGA(Item, .(X, Xs)) -> U4_GGA(Item, Xs, \=_in_gg(Item, X))
   U4_GGA(Item, Xs, \=_out_gg) -> COUNT_IN_GGA(Item, Xs)

The TRS R consists of the following rules:

   =_in_gg(X, X) -> =_out_gg
   \=_in_gg(X0, X1) -> \=_out_gg

The set Q consists of the following terms:

   =_in_gg(x0, x1)
   \=_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*COUNT_IN_GGA(Item, .(X, Xs)) -> U1_GGA(Item, Xs, =_in_gg(Item, X))
The graph contains the following edges 1 >= 1, 2 > 2


*COUNT_IN_GGA(Item, .(X, Xs)) -> U4_GGA(Item, Xs, \=_in_gg(Item, X))
The graph contains the following edges 1 >= 1, 2 > 2


*U1_GGA(Item, Xs, =_out_gg) -> COUNT_IN_GGA(Item, Xs)
The graph contains the following edges 1 >= 1, 2 >= 2


*U4_GGA(Item, Xs, \=_out_gg) -> COUNT_IN_GGA(Item, Xs)
The graph contains the following edges 1 >= 1, 2 >= 2


----------------------------------------

(16)
YES
