YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/VK9Hk.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

evenSpaced(g)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) UndefinedPredicateHandlerProof [SOUND, 0 ms]
(2) Prolog
(3) PrologToPiTRSProof [SOUND, 0 ms]
(4) PiTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) PiDP
(11) PiDPToQDPProof [SOUND, 1 ms]
(12) QDP
(13) MRRProof [EQUIVALENT, 33 ms]
(14) QDP
(15) DependencyGraphProof [EQUIVALENT, 0 ms]
(16) TRUE


----------------------------------------

(0)
Obligation:
Clauses:

evenSpaced(.(X1, .(X2, []))).
evenSpaced(.(X, .(Y, .(Z, Xs)))) :- ','(is(Diff, -(Y, X)), ','(=:=(Diff, -(Z, Y)), evenSpaced(.(Y, .(Z, Xs))))).


Query: evenSpaced(g)
----------------------------------------

(1) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

evenSpaced(.(X1, .(X2, []))).
evenSpaced(.(X, .(Y, .(Z, Xs)))) :- ','(is(Diff, -(Y, X)), ','(=:=(Diff, -(Z, Y)), evenSpaced(.(Y, .(Z, Xs))))).
is(X0, X1).
=:=(X0, X1).


Query: evenSpaced(g)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

evenSpaced_in_1: (b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   evenSpaced_in_g(.(X1, .(X2, []))) -> evenSpaced_out_g(.(X1, .(X2, [])))
   evenSpaced_in_g(.(X, .(Y, .(Z, Xs)))) -> U1_g(X, Y, Z, Xs, is_in_ag(Diff, -(Y, X)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U1_g(X, Y, Z, Xs, is_out_ag(Diff, -(Y, X))) -> U2_g(X, Y, Z, Xs, Diff, =:=_in_ag(Diff, -(Z, Y)))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U2_g(X, Y, Z, Xs, Diff, =:=_out_ag(Diff, -(Z, Y))) -> U3_g(X, Y, Z, Xs, Diff, evenSpaced_in_g(.(Y, .(Z, Xs))))
   U3_g(X, Y, Z, Xs, Diff, evenSpaced_out_g(.(Y, .(Z, Xs)))) -> evenSpaced_out_g(.(X, .(Y, .(Z, Xs))))

The argument filtering Pi contains the following mapping:
evenSpaced_in_g(x1)  =  evenSpaced_in_g(x1)

.(x1, x2)  =  .(x1, x2)

[]  =  []

evenSpaced_out_g(x1)  =  evenSpaced_out_g(x1)

U1_g(x1, x2, x3, x4, x5)  =  U1_g(x1, x2, x3, x4, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

-(x1, x2)  =  -(x1, x2)

U2_g(x1, x2, x3, x4, x5, x6)  =  U2_g(x1, x2, x3, x4, x6)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag(x2)

U3_g(x1, x2, x3, x4, x5, x6)  =  U3_g(x1, x2, x3, x4, x6)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   evenSpaced_in_g(.(X1, .(X2, []))) -> evenSpaced_out_g(.(X1, .(X2, [])))
   evenSpaced_in_g(.(X, .(Y, .(Z, Xs)))) -> U1_g(X, Y, Z, Xs, is_in_ag(Diff, -(Y, X)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U1_g(X, Y, Z, Xs, is_out_ag(Diff, -(Y, X))) -> U2_g(X, Y, Z, Xs, Diff, =:=_in_ag(Diff, -(Z, Y)))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U2_g(X, Y, Z, Xs, Diff, =:=_out_ag(Diff, -(Z, Y))) -> U3_g(X, Y, Z, Xs, Diff, evenSpaced_in_g(.(Y, .(Z, Xs))))
   U3_g(X, Y, Z, Xs, Diff, evenSpaced_out_g(.(Y, .(Z, Xs)))) -> evenSpaced_out_g(.(X, .(Y, .(Z, Xs))))

The argument filtering Pi contains the following mapping:
evenSpaced_in_g(x1)  =  evenSpaced_in_g(x1)

.(x1, x2)  =  .(x1, x2)

[]  =  []

evenSpaced_out_g(x1)  =  evenSpaced_out_g(x1)

U1_g(x1, x2, x3, x4, x5)  =  U1_g(x1, x2, x3, x4, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

-(x1, x2)  =  -(x1, x2)

U2_g(x1, x2, x3, x4, x5, x6)  =  U2_g(x1, x2, x3, x4, x6)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag(x2)

U3_g(x1, x2, x3, x4, x5, x6)  =  U3_g(x1, x2, x3, x4, x6)



----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   EVENSPACED_IN_G(.(X, .(Y, .(Z, Xs)))) -> U1_G(X, Y, Z, Xs, is_in_ag(Diff, -(Y, X)))
   EVENSPACED_IN_G(.(X, .(Y, .(Z, Xs)))) -> IS_IN_AG(Diff, -(Y, X))
   U1_G(X, Y, Z, Xs, is_out_ag(Diff, -(Y, X))) -> U2_G(X, Y, Z, Xs, Diff, =:=_in_ag(Diff, -(Z, Y)))
   U1_G(X, Y, Z, Xs, is_out_ag(Diff, -(Y, X))) -> =:=_IN_AG(Diff, -(Z, Y))
   U2_G(X, Y, Z, Xs, Diff, =:=_out_ag(Diff, -(Z, Y))) -> U3_G(X, Y, Z, Xs, Diff, evenSpaced_in_g(.(Y, .(Z, Xs))))
   U2_G(X, Y, Z, Xs, Diff, =:=_out_ag(Diff, -(Z, Y))) -> EVENSPACED_IN_G(.(Y, .(Z, Xs)))

The TRS R consists of the following rules:

   evenSpaced_in_g(.(X1, .(X2, []))) -> evenSpaced_out_g(.(X1, .(X2, [])))
   evenSpaced_in_g(.(X, .(Y, .(Z, Xs)))) -> U1_g(X, Y, Z, Xs, is_in_ag(Diff, -(Y, X)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U1_g(X, Y, Z, Xs, is_out_ag(Diff, -(Y, X))) -> U2_g(X, Y, Z, Xs, Diff, =:=_in_ag(Diff, -(Z, Y)))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U2_g(X, Y, Z, Xs, Diff, =:=_out_ag(Diff, -(Z, Y))) -> U3_g(X, Y, Z, Xs, Diff, evenSpaced_in_g(.(Y, .(Z, Xs))))
   U3_g(X, Y, Z, Xs, Diff, evenSpaced_out_g(.(Y, .(Z, Xs)))) -> evenSpaced_out_g(.(X, .(Y, .(Z, Xs))))

The argument filtering Pi contains the following mapping:
evenSpaced_in_g(x1)  =  evenSpaced_in_g(x1)

.(x1, x2)  =  .(x1, x2)

[]  =  []

evenSpaced_out_g(x1)  =  evenSpaced_out_g(x1)

U1_g(x1, x2, x3, x4, x5)  =  U1_g(x1, x2, x3, x4, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

-(x1, x2)  =  -(x1, x2)

U2_g(x1, x2, x3, x4, x5, x6)  =  U2_g(x1, x2, x3, x4, x6)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag(x2)

U3_g(x1, x2, x3, x4, x5, x6)  =  U3_g(x1, x2, x3, x4, x6)

EVENSPACED_IN_G(x1)  =  EVENSPACED_IN_G(x1)

U1_G(x1, x2, x3, x4, x5)  =  U1_G(x1, x2, x3, x4, x5)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U2_G(x1, x2, x3, x4, x5, x6)  =  U2_G(x1, x2, x3, x4, x6)

=:=_IN_AG(x1, x2)  =  =:=_IN_AG(x2)

U3_G(x1, x2, x3, x4, x5, x6)  =  U3_G(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   EVENSPACED_IN_G(.(X, .(Y, .(Z, Xs)))) -> U1_G(X, Y, Z, Xs, is_in_ag(Diff, -(Y, X)))
   EVENSPACED_IN_G(.(X, .(Y, .(Z, Xs)))) -> IS_IN_AG(Diff, -(Y, X))
   U1_G(X, Y, Z, Xs, is_out_ag(Diff, -(Y, X))) -> U2_G(X, Y, Z, Xs, Diff, =:=_in_ag(Diff, -(Z, Y)))
   U1_G(X, Y, Z, Xs, is_out_ag(Diff, -(Y, X))) -> =:=_IN_AG(Diff, -(Z, Y))
   U2_G(X, Y, Z, Xs, Diff, =:=_out_ag(Diff, -(Z, Y))) -> U3_G(X, Y, Z, Xs, Diff, evenSpaced_in_g(.(Y, .(Z, Xs))))
   U2_G(X, Y, Z, Xs, Diff, =:=_out_ag(Diff, -(Z, Y))) -> EVENSPACED_IN_G(.(Y, .(Z, Xs)))

The TRS R consists of the following rules:

   evenSpaced_in_g(.(X1, .(X2, []))) -> evenSpaced_out_g(.(X1, .(X2, [])))
   evenSpaced_in_g(.(X, .(Y, .(Z, Xs)))) -> U1_g(X, Y, Z, Xs, is_in_ag(Diff, -(Y, X)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U1_g(X, Y, Z, Xs, is_out_ag(Diff, -(Y, X))) -> U2_g(X, Y, Z, Xs, Diff, =:=_in_ag(Diff, -(Z, Y)))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U2_g(X, Y, Z, Xs, Diff, =:=_out_ag(Diff, -(Z, Y))) -> U3_g(X, Y, Z, Xs, Diff, evenSpaced_in_g(.(Y, .(Z, Xs))))
   U3_g(X, Y, Z, Xs, Diff, evenSpaced_out_g(.(Y, .(Z, Xs)))) -> evenSpaced_out_g(.(X, .(Y, .(Z, Xs))))

The argument filtering Pi contains the following mapping:
evenSpaced_in_g(x1)  =  evenSpaced_in_g(x1)

.(x1, x2)  =  .(x1, x2)

[]  =  []

evenSpaced_out_g(x1)  =  evenSpaced_out_g(x1)

U1_g(x1, x2, x3, x4, x5)  =  U1_g(x1, x2, x3, x4, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

-(x1, x2)  =  -(x1, x2)

U2_g(x1, x2, x3, x4, x5, x6)  =  U2_g(x1, x2, x3, x4, x6)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag(x2)

U3_g(x1, x2, x3, x4, x5, x6)  =  U3_g(x1, x2, x3, x4, x6)

EVENSPACED_IN_G(x1)  =  EVENSPACED_IN_G(x1)

U1_G(x1, x2, x3, x4, x5)  =  U1_G(x1, x2, x3, x4, x5)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U2_G(x1, x2, x3, x4, x5, x6)  =  U2_G(x1, x2, x3, x4, x6)

=:=_IN_AG(x1, x2)  =  =:=_IN_AG(x2)

U3_G(x1, x2, x3, x4, x5, x6)  =  U3_G(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_G(X, Y, Z, Xs, is_out_ag(Diff, -(Y, X))) -> U2_G(X, Y, Z, Xs, Diff, =:=_in_ag(Diff, -(Z, Y)))
   U2_G(X, Y, Z, Xs, Diff, =:=_out_ag(Diff, -(Z, Y))) -> EVENSPACED_IN_G(.(Y, .(Z, Xs)))
   EVENSPACED_IN_G(.(X, .(Y, .(Z, Xs)))) -> U1_G(X, Y, Z, Xs, is_in_ag(Diff, -(Y, X)))

The TRS R consists of the following rules:

   evenSpaced_in_g(.(X1, .(X2, []))) -> evenSpaced_out_g(.(X1, .(X2, [])))
   evenSpaced_in_g(.(X, .(Y, .(Z, Xs)))) -> U1_g(X, Y, Z, Xs, is_in_ag(Diff, -(Y, X)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U1_g(X, Y, Z, Xs, is_out_ag(Diff, -(Y, X))) -> U2_g(X, Y, Z, Xs, Diff, =:=_in_ag(Diff, -(Z, Y)))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U2_g(X, Y, Z, Xs, Diff, =:=_out_ag(Diff, -(Z, Y))) -> U3_g(X, Y, Z, Xs, Diff, evenSpaced_in_g(.(Y, .(Z, Xs))))
   U3_g(X, Y, Z, Xs, Diff, evenSpaced_out_g(.(Y, .(Z, Xs)))) -> evenSpaced_out_g(.(X, .(Y, .(Z, Xs))))

The argument filtering Pi contains the following mapping:
evenSpaced_in_g(x1)  =  evenSpaced_in_g(x1)

.(x1, x2)  =  .(x1, x2)

[]  =  []

evenSpaced_out_g(x1)  =  evenSpaced_out_g(x1)

U1_g(x1, x2, x3, x4, x5)  =  U1_g(x1, x2, x3, x4, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

-(x1, x2)  =  -(x1, x2)

U2_g(x1, x2, x3, x4, x5, x6)  =  U2_g(x1, x2, x3, x4, x6)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag(x2)

U3_g(x1, x2, x3, x4, x5, x6)  =  U3_g(x1, x2, x3, x4, x6)

EVENSPACED_IN_G(x1)  =  EVENSPACED_IN_G(x1)

U1_G(x1, x2, x3, x4, x5)  =  U1_G(x1, x2, x3, x4, x5)

U2_G(x1, x2, x3, x4, x5, x6)  =  U2_G(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_G(X, Y, Z, Xs, is_out_ag(Diff, -(Y, X))) -> U2_G(X, Y, Z, Xs, Diff, =:=_in_ag(Diff, -(Z, Y)))
   U2_G(X, Y, Z, Xs, Diff, =:=_out_ag(Diff, -(Z, Y))) -> EVENSPACED_IN_G(.(Y, .(Z, Xs)))
   EVENSPACED_IN_G(.(X, .(Y, .(Z, Xs)))) -> U1_G(X, Y, Z, Xs, is_in_ag(Diff, -(Y, X)))

The TRS R consists of the following rules:

   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

-(x1, x2)  =  -(x1, x2)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag(x2)

EVENSPACED_IN_G(x1)  =  EVENSPACED_IN_G(x1)

U1_G(x1, x2, x3, x4, x5)  =  U1_G(x1, x2, x3, x4, x5)

U2_G(x1, x2, x3, x4, x5, x6)  =  U2_G(x1, x2, x3, x4, x6)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_G(X, Y, Z, Xs, is_out_ag(-(Y, X))) -> U2_G(X, Y, Z, Xs, =:=_in_ag(-(Z, Y)))
   U2_G(X, Y, Z, Xs, =:=_out_ag(-(Z, Y))) -> EVENSPACED_IN_G(.(Y, .(Z, Xs)))
   EVENSPACED_IN_G(.(X, .(Y, .(Z, Xs)))) -> U1_G(X, Y, Z, Xs, is_in_ag(-(Y, X)))

The TRS R consists of the following rules:

   =:=_in_ag(X1) -> =:=_out_ag(X1)
   is_in_ag(X1) -> is_out_ag(X1)

The set Q consists of the following terms:

   =:=_in_ag(x0)
   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U2_G(X, Y, Z, Xs, =:=_out_ag(-(Z, Y))) -> EVENSPACED_IN_G(.(Y, .(Z, Xs)))


Used ordering: Polynomial interpretation [POLO]:

   POL(-(x_1, x_2)) = x_1 + x_2
   POL(.(x_1, x_2)) = 1 + 2*x_1 + x_2
   POL(=:=_in_ag(x_1)) = 2 + x_1
   POL(=:=_out_ag(x_1)) = 2 + x_1
   POL(EVENSPACED_IN_G(x_1)) = 1 + x_1
   POL(U1_G(x_1, x_2, x_3, x_4, x_5)) = 2 + x_1 + x_2 + 2*x_3 + x_4 + x_5
   POL(U2_G(x_1, x_2, x_3, x_4, x_5)) = 2 + 2*x_1 + x_2 + x_3 + x_4 + x_5
   POL(is_in_ag(x_1)) = 2 + x_1
   POL(is_out_ag(x_1)) = 2 + x_1


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_G(X, Y, Z, Xs, is_out_ag(-(Y, X))) -> U2_G(X, Y, Z, Xs, =:=_in_ag(-(Z, Y)))
   EVENSPACED_IN_G(.(X, .(Y, .(Z, Xs)))) -> U1_G(X, Y, Z, Xs, is_in_ag(-(Y, X)))

The TRS R consists of the following rules:

   =:=_in_ag(X1) -> =:=_out_ag(X1)
   is_in_ag(X1) -> is_out_ag(X1)

The set Q consists of the following terms:

   =:=_in_ag(x0)
   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 0 SCCs with 2 less nodes.
----------------------------------------

(16)
TRUE
