YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/Qjkx5.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

p()

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(2) TRIPLES
(3) TPisEmptyProof [EQUIVALENT, 0 ms]
(4) YES


----------------------------------------

(0)
Obligation:
Clauses:

p :- q(','(r, !)).
q(X) :- X.
r.
r :- r.


Query: p()
----------------------------------------

(1) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p)",
                "(q (',' (r) (!)))"
            ],
            [
                "(q X)",
                "X"
            ],
            [
                "(r)",
                null
            ],
            [
                "(r)",
                "(r)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "11": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q (',' (r) (!)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(q (',' (r) (!)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "23": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(call (',' (r) (!)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "16": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (r) (!_3))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 4,
                        "term": "(',' (r) (!_3))"
                    },
                    {
                        "clause": 3,
                        "scope": 4,
                        "term": "(',' (r) (!_3))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(!_3)"
                    },
                    {
                        "clause": 3,
                        "scope": 4,
                        "term": "(',' (r) (!_3))"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "21": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 11,
                "label": "ONLY EVAL with clause\np :- q(','(r, !)).\nand substitution"
            },
            {
                "from": 11,
                "to": 12,
                "label": "CASE"
            },
            {
                "from": 12,
                "to": 14,
                "label": "ONLY EVAL with clause\nq(X3) :- call(X3).\nand substitutionX3 -> ','(r, !)"
            },
            {
                "from": 14,
                "to": 16,
                "label": "CALL"
            },
            {
                "from": 16,
                "to": 17,
                "label": "CASE"
            },
            {
                "from": 17,
                "to": 19,
                "label": "ONLY EVAL with clause\nr.\nand substitution"
            },
            {
                "from": 19,
                "to": 21,
                "label": "CUT"
            },
            {
                "from": 21,
                "to": 23,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Triples:


Clauses:


Afs:


----------------------------------------

(3) TPisEmptyProof (EQUIVALENT)
There are no more dependency triples. Hence, the dependency triple problem trivially terminates.
----------------------------------------

(4)
YES
