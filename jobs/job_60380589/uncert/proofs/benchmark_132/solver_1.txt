YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/vEUfN.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

decode(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) PrologToIRSwTTransformerProof [SOUND, 13 ms]
(2) IRSwT
(3) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
(4) IRSwT
(5) IntTRSCompressionProof [EQUIVALENT, 13 ms]
(6) IRSwT
(7) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
(8) IRSwT
(9) IRSwTTerminationDigraphProof [EQUIVALENT, 14 ms]
(10) IRSwT
(11) IntTRSCompressionProof [EQUIVALENT, 0 ms]
(12) IRSwT
(13) TempFilterProof [SOUND, 130 ms]
(14) IRSwT
(15) IRSwTTerminationDigraphProof [EQUIVALENT, 1 ms]
(16) IRSwT
(17) IRSwTOrderProof [EQUIVALENT, 0 ms]
(18) YES


----------------------------------------

(0)
Obligation:
Clauses:

decode([], []).
decode(.(X, Ys), .(X, Zs)) :- ','(\+(is_list(X)), decode(Ys, Zs)).
decode(.(.(1, .(X, [])), Ys), .(X, Zs)) :- decode(Ys, Zs).
decode(.(.(N, .(X, [])), Ys), .(X, Zs)) :- ','(>(N, 1), ','(is(N1, -(N, 1)), decode(.(.(N1, .(X, [])), Ys), Zs))).


Query: decode(g,a)
----------------------------------------

(1) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 25,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(decode ([]) ([]))",
                null
            ],
            [
                "(decode (. X Ys) (. X Zs))",
                "(',' (\\+ (is_list X)) (decode Ys Zs))"
            ],
            [
                "(decode (. (. (1) (. X ([]))) Ys) (. X Zs))",
                "(decode Ys Zs)"
            ],
            [
                "(decode (. (. N (. X ([]))) Ys) (. X Zs))",
                "(',' (> N (1)) (',' (is N1 (- N (1))) (decode (. (. N1 (. X ([]))) Ys) Zs)))"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "88": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(decode T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "26": {
                "goal": [
                    {
                        "clause": 0,
                        "scope": 1,
                        "term": "(decode T1 T2)"
                    },
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(decode T1 T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(decode T1 T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(decode T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(decode T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "28": {
                "goal": [
                    {
                        "clause": 1,
                        "scope": 1,
                        "term": "(decode T1 T2)"
                    },
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(decode T1 T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(decode T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "29": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "370": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (> T43 (1)) (',' (is X44 (- T43 (1))) (decode (. (. X44 (. T44 ([]))) T45) T47)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T43",
                        "T44",
                        "T45"
                    ],
                    "free": ["X44"],
                    "exprvars": []
                }
            },
            "371": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "30": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "31": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "75": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(decode T32 T34)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T32"],
                    "free": [],
                    "exprvars": []
                }
            },
            "32": {
                "goal": [{
                    "clause": 1,
                    "scope": 1,
                    "term": "(decode T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "33": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 1,
                        "term": "(decode T1 T2)"
                    },
                    {
                        "clause": 3,
                        "scope": 1,
                        "term": "(decode T1 T2)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "34": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (\\+ (is_list T15)) (decode T16 T18))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T15",
                        "T16"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "35": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "36": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (call (is_list T15)) (',' (!_2) (fail)))"
                    },
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(decode T16 T18)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T15",
                        "T16"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "37": {
                "goal": [
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(',' (is_list T15) (',' (!_2) (fail)))"
                    },
                    {
                        "clause": -1,
                        "scope": 3,
                        "term": null
                    },
                    {
                        "clause": -1,
                        "scope": -1,
                        "term": "(decode T16 T18)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [
                        "T15",
                        "T16"
                    ],
                    "free": [],
                    "exprvars": []
                }
            },
            "38": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "39": {
                "goal": [{
                    "clause": 2,
                    "scope": 1,
                    "term": "(decode T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "2660": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(decode (. (. T48 (. T44 ([]))) T45) T47)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [
                            {
                                "lhs": {
                                    "name": "T48",
                                    "type": "PlainIntegerVariable"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "arguments": [
                                        {
                                            "name": "T43",
                                            "type": "PlainIntegerVariable"
                                        },
                                        {
                                            "type": "PlainIntegerConstant",
                                            "value": "1"
                                        }
                                    ],
                                    "type": "PlainIntegerOperation",
                                    "operation": "-"
                                },
                                "operation": "="
                            },
                            {
                                "lhs": {
                                    "type": "PlainIntegerConstant",
                                    "value": "1"
                                },
                                "type": "PlainIntegerRelation",
                                "rhs": {
                                    "name": "T43",
                                    "type": "PlainIntegerVariable"
                                },
                                "operation": "<"
                            }
                        ]
                    },
                    "ground": [
                        "T45",
                        "T44",
                        "T43",
                        "T48"
                    ],
                    "free": ["X44"],
                    "exprvars": [
                        "T43",
                        "T48"
                    ]
                }
            },
            "2658": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "type": "PlainIntegerConstant",
                                "value": "1"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T43",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": ">="
                        }]
                    },
                    "ground": [
                        "T45",
                        "T44",
                        "T43"
                    ],
                    "free": ["X44"],
                    "exprvars": ["T43"]
                }
            },
            "2657": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (is X44 (- T43 (1))) (decode (. (. X44 (. T44 ([]))) T45) T47))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": [{
                            "lhs": {
                                "type": "PlainIntegerConstant",
                                "value": "1"
                            },
                            "type": "PlainIntegerRelation",
                            "rhs": {
                                "name": "T43",
                                "type": "PlainIntegerVariable"
                            },
                            "operation": "<"
                        }]
                    },
                    "ground": [
                        "T45",
                        "T44",
                        "T43"
                    ],
                    "free": ["X44"],
                    "exprvars": ["T43"]
                }
            },
            "387": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "40": {
                "goal": [{
                    "clause": 3,
                    "scope": 1,
                    "term": "(decode T1 T2)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 25,
                "to": 26,
                "label": "CASE"
            },
            {
                "from": 26,
                "to": 27,
                "label": "PARALLEL"
            },
            {
                "from": 26,
                "to": 28,
                "label": "PARALLEL"
            },
            {
                "from": 27,
                "to": 29,
                "label": "EVAL with clause\ndecode([], []).\nand substitutionT1 -> [],\nT2 -> []"
            },
            {
                "from": 27,
                "to": 30,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 28,
                "to": 32,
                "label": "PARALLEL"
            },
            {
                "from": 28,
                "to": 33,
                "label": "PARALLEL"
            },
            {
                "from": 29,
                "to": 31,
                "label": "SUCCESS"
            },
            {
                "from": 32,
                "to": 34,
                "label": "EVAL with clause\ndecode(.(X13, X14), .(X13, X15)) :- ','(\\+(is_list(X13)), decode(X14, X15)).\nand substitutionX13 -> T15,\nX14 -> T16,\nT1 -> .(T15, T16),\nX15 -> T18,\nT2 -> .(T15, T18),\nT17 -> T18"
            },
            {
                "from": 32,
                "to": 35,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 33,
                "to": 39,
                "label": "PARALLEL"
            },
            {
                "from": 33,
                "to": 40,
                "label": "PARALLEL"
            },
            {
                "from": 34,
                "to": 36,
                "label": "NOT"
            },
            {
                "from": 36,
                "to": 37,
                "label": "CALL"
            },
            {
                "from": 37,
                "to": 38,
                "label": "UNDEFINED ERROR"
            },
            {
                "from": 39,
                "to": 75,
                "label": "EVAL with clause\ndecode(.(.(1, .(X28, [])), X29), .(X28, X30)) :- decode(X29, X30).\nand substitutionX28 -> T31,\nX29 -> T32,\nT1 -> .(.(1, .(T31, [])), T32),\nX30 -> T34,\nT2 -> .(T31, T34),\nT33 -> T34"
            },
            {
                "from": 39,
                "to": 88,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 40,
                "to": 370,
                "label": "EVAL with clause\ndecode(.(.(X40, .(X41, [])), X42), .(X41, X43)) :- ','(>(X40, 1), ','(is(X44, -(X40, 1)), decode(.(.(X44, .(X41, [])), X42), X43))).\nand substitutionX40 -> T43,\nX41 -> T44,\nX42 -> T45,\nT1 -> .(.(T43, .(T44, [])), T45),\nX43 -> T47,\nT2 -> .(T44, T47),\nT46 -> T47"
            },
            {
                "from": 40,
                "to": 371,
                "label": "EVAL-BACKTRACK"
            },
            {
                "from": 75,
                "to": 25,
                "label": "INSTANCE with matching:\nT1 -> T32\nT2 -> T34"
            },
            {
                "from": 370,
                "to": 387,
                "label": "IS ERROR"
            },
            {
                "from": 370,
                "to": 2657,
                "label": "ARITHCOMP SUCCESS"
            },
            {
                "from": 370,
                "to": 2658,
                "label": "ARITHCOMP FAIL"
            },
            {
                "from": 2657,
                "to": 2660,
                "label": "\nX44 -> T48"
            },
            {
                "from": 2660,
                "to": 25,
                "label": "INSTANCE with matching:\nT1 -> .(.(T48, .(T44, [])), T45)\nT2 -> T47"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Rules:
f27_out(T1) -> f26_out(T1) :|: TRUE
f26_in(x) -> f27_in(x) :|: TRUE
f28_out(x1) -> f26_out(x1) :|: TRUE
f26_in(x2) -> f28_in(x2) :|: TRUE
f25_out(.(.(T48, .(T44, [])), T45)) -> f2660_out(T48, T44, T45, T43) :|: TRUE
f2660_in(x3, x4, x5, x6) -> f25_in(.(.(x3, .(x4, [])), x5)) :|: TRUE
f75_in(T32) -> f25_in(T32) :|: TRUE
f25_out(x7) -> f75_out(x7) :|: TRUE
f2658_out(x8, x9, x10) -> f370_out(x10, x9, x8) :|: x10 <= 1
f370_in(x11, x12, x13) -> f2657_in(x11, x12, x13) :|: x11 > 1
f387_out -> f370_out(x14, x15, x16) :|: TRUE
f370_in(x17, x18, x19) -> f387_in :|: TRUE
f2657_out(x20, x21, x22) -> f370_out(x20, x21, x22) :|: x20 > 1
f370_in(x23, x24, x25) -> f2658_in(x25, x24, x23) :|: x23 <= 1
f2660_out(x26, x27, x28, x29) -> f2657_out(x29, x27, x28) :|: TRUE
f2657_in(x30, x31, x32) -> f2660_in(x33, x31, x32, x30) :|: x33 = x30 - 1
f25_in(x34) -> f26_in(x34) :|: TRUE
f26_out(x35) -> f25_out(x35) :|: TRUE
f39_out(x36) -> f33_out(x36) :|: TRUE
f33_in(x37) -> f40_in(x37) :|: TRUE
f40_out(x38) -> f33_out(x38) :|: TRUE
f33_in(x39) -> f39_in(x39) :|: TRUE
f39_in(.(.(1, .(x40, [])), x41)) -> f75_in(x41) :|: TRUE
f75_out(x42) -> f39_out(.(.(1, .(x43, [])), x42)) :|: TRUE
f88_out -> f39_out(x44) :|: TRUE
f39_in(x45) -> f88_in :|: TRUE
f40_in(x46) -> f371_in :|: TRUE
f370_out(x47, x48, x49) -> f40_out(.(.(x47, .(x48, [])), x49)) :|: TRUE
f40_in(.(.(x50, .(x51, [])), x52)) -> f370_in(x50, x51, x52) :|: TRUE
f371_out -> f40_out(x53) :|: TRUE
f28_in(x54) -> f32_in(x54) :|: TRUE
f32_out(x55) -> f28_out(x55) :|: TRUE
f33_out(x56) -> f28_out(x56) :|: TRUE
f28_in(x57) -> f33_in(x57) :|: TRUE
Start term: f25_in(T1)

----------------------------------------

(3) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f26_in(x2) -> f28_in(x2) :|: TRUE
f2660_in(x3, x4, x5, x6) -> f25_in(.(.(x3, .(x4, [])), x5)) :|: TRUE
f75_in(T32) -> f25_in(T32) :|: TRUE
f370_in(x11, x12, x13) -> f2657_in(x11, x12, x13) :|: x11 > 1
f2657_in(x30, x31, x32) -> f2660_in(x33, x31, x32, x30) :|: x33 = x30 - 1
f25_in(x34) -> f26_in(x34) :|: TRUE
f33_in(x37) -> f40_in(x37) :|: TRUE
f33_in(x39) -> f39_in(x39) :|: TRUE
f39_in(.(.(1, .(x40, [])), x41)) -> f75_in(x41) :|: TRUE
f40_in(.(.(x50, .(x51, [])), x52)) -> f370_in(x50, x51, x52) :|: TRUE
f28_in(x57) -> f33_in(x57) :|: TRUE


----------------------------------------

(4)
Obligation:
Rules:
f26_in(x2) -> f28_in(x2) :|: TRUE
f2660_in(x3, x4, x5, x6) -> f25_in(.(.(x3, .(x4, [])), x5)) :|: TRUE
f75_in(T32) -> f25_in(T32) :|: TRUE
f370_in(x11, x12, x13) -> f2657_in(x11, x12, x13) :|: x11 > 1
f2657_in(x30, x31, x32) -> f2660_in(x33, x31, x32, x30) :|: x33 = x30 - 1
f25_in(x34) -> f26_in(x34) :|: TRUE
f33_in(x37) -> f40_in(x37) :|: TRUE
f33_in(x39) -> f39_in(x39) :|: TRUE
f39_in(.(.(1, .(x40, [])), x41)) -> f75_in(x41) :|: TRUE
f40_in(.(.(x50, .(x51, [])), x52)) -> f370_in(x50, x51, x52) :|: TRUE
f28_in(x57) -> f33_in(x57) :|: TRUE

----------------------------------------

(5) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(6)
Obligation:
Rules:
f33_in(.(.(cons_1, .(x40:0, [])), x41:0)) -> f33_in(x41:0) :|: TRUE && cons_1 = 1
f33_in(.(.(x50:0, .(x51:0, [])), x52:0)) -> f33_in(.(.(x50:0 - 1, .(x51:0, [])), x52:0)) :|: x50:0 > 1

----------------------------------------

(7) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(8)
Obligation:
Rules:
f33_in(.(.(cons_1, .(x40:0, [])), x41:0)) -> f33_in(x41:0) :|: TRUE && cons_1 = 1
f33_in(.(.(x50:0, .(x51:0, [])), x52:0)) -> f33_in(.(.(arith, .(x51:0, [])), x52:0)) :|: x50:0 > 1 && arith = x50:0 - 1

----------------------------------------

(9) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f33_in(.(.(cons_1, .(x40:0, [])), x41:0)) -> f33_in(x41:0) :|: TRUE && cons_1 = 1
(2) f33_in(.(.(x50:0, .(x51:0, [])), x52:0)) -> f33_in(.(.(arith, .(x51:0, [])), x52:0)) :|: x50:0 > 1 && arith = x50:0 - 1

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!
----------------------------------------

(10)
Obligation:

Termination digraph:
Nodes:
(1) f33_in(.(.(cons_1, .(x40:0, [])), x41:0)) -> f33_in(x41:0) :|: TRUE && cons_1 = 1
(2) f33_in(.(.(x50:0, .(x51:0, [])), x52:0)) -> f33_in(.(.(arith, .(x51:0, [])), x52:0)) :|: x50:0 > 1 && arith = x50:0 - 1

Arcs:
(1) -> (1), (2)
(2) -> (1), (2)

This digraph is fully evaluated!

----------------------------------------

(11) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(12)
Obligation:
Rules:
f33_in(.(.(cons_1, .(x40:0:0, [])), x41:0:0)) -> f33_in(x41:0:0) :|: TRUE && cons_1 = 1
f33_in(.(.(x50:0:0, .(x51:0:0, [])), x52:0:0)) -> f33_in(.(.(x50:0:0 - 1, .(x51:0:0, [])), x52:0:0)) :|: x50:0:0 > 1

----------------------------------------

(13) TempFilterProof (SOUND)
Used the following sort dictionary for filtering: 
f33_in(VARIABLE)
.(VARIABLE, VARIABLE)
[]()
Removed predefined arithmetic.The following proof was generated: 
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Termination of the given IRSwT could not be shown:



- IRSwT
  - IRSwTToQDPProof

Rules:
f33_in(.(.(predef, .(x40:0:0, [])), x41:0:0)) -> f33_in(x41:0:0)
f33_in(.(.(x50:0:0, .(x51:0:0, [])), x52:0:0)) -> f33_in(.(.(predef, .(x51:0:0, [])), x52:0:0))

Removed the integers and created a QDP-Problem.

- IRSwT
  - IRSwTToQDPProof
    - QDP
      - MRRProof

Q DP problem:
The TRS P consists of the following rules:

   f33_in(.(.(predef, .(x40:0:0, [])), x41:0:0)) -> f33_in(x41:0:0)
   f33_in(.(.(x50:0:0, .(x51:0:0, [])), x52:0:0)) -> f33_in(.(.(predef, .(x51:0:0, [])), x52:0:0))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   f33_in(.(.(predef, .(x40:0:0, [])), x41:0:0)) -> f33_in(x41:0:0)


Used ordering: Knuth-Bendix order [KBO] with precedence:[] > predef > ._2 > f33_in_1

and weight map:

   predef=1
   []=1
   f33_in_1=1
   ._2=0

The variable weight is 1


- IRSwT
  - IRSwTToQDPProof
    - QDP
      - MRRProof
        - QDP

Q DP problem:
The TRS P consists of the following rules:

   f33_in(.(.(x50:0:0, .(x51:0:0, [])), x52:0:0)) -> f33_in(.(.(predef, .(x51:0:0, [])), x52:0:0))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.


----------------------------------------

(14)
Obligation:
Rules:
f33_in(.(.(x50:0:0, .(x51:0:0, [])), x52:0:0)) -> f33_in(.(.(x50:0:0 - 1, .(x51:0:0, [])), x52:0:0)) :|: x50:0:0 > 1

----------------------------------------

(15) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f33_in(.(.(x50:0:0, .(x51:0:0, [])), x52:0:0)) -> f33_in(.(.(x50:0:0 - 1, .(x51:0:0, [])), x52:0:0)) :|: x50:0:0 > 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(16)
Obligation:

Termination digraph:
Nodes:
(1) f33_in(.(.(x50:0:0, .(x51:0:0, [])), x52:0:0)) -> f33_in(.(.(x50:0:0 - 1, .(x51:0:0, [])), x52:0:0)) :|: x50:0:0 > 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(17) IRSwTOrderProof (EQUIVALENT)
[f33_in(x)] = -8 + 4*x
[.(x1, x2)] = 0 + 1*x1 + 0*x2
[[]()] = 0

The following rules are decreasing: 
f33_in(.(.(x50:0:0, .(x51:0:0, [])), x52:0:0)) -> f33_in(.(.(x50:0:0 - 1, .(x51:0:0, [])), x52:0:0)) :|: x50:0:0 > 1

The following rules are bounded: 
f33_in(.(.(x50:0:0, .(x51:0:0, [])), x52:0:0)) -> f33_in(.(.(x50:0:0 - 1, .(x51:0:0, [])), x52:0:0)) :|: x50:0:0 > 1

----------------------------------------

(18)
YES
