MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/ktMXf.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

p()

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToTRSTransformerProof [SOUND, 0 ms]
(2) QTRS
    (3) QTRSRRRProof [EQUIVALENT, 29 ms]
    (4) QTRS
    (5) QTRSRRRProof [EQUIVALENT, 4 ms]
    (6) QTRS
    (7) QTRSRRRProof [EQUIVALENT, 3 ms]
    (8) QTRS
    (9) QTRSRRRProof [EQUIVALENT, 0 ms]
    (10) QTRS
    (11) QTRSRRRProof [EQUIVALENT, 5 ms]
    (12) QTRS
    (13) QTRSRRRProof [EQUIVALENT, 0 ms]
    (14) QTRS
(15) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(16) TRIPLES
    (17) TriplesToPiDPProof [SOUND, 0 ms]
    (18) PiDP
    (19) DependencyGraphProof [EQUIVALENT, 0 ms]
    (20) PiDP
    (21) PiDPToQDPProof [EQUIVALENT, 0 ms]
    (22) QDP
(23) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(24) IRSwT
    (25) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (26) IRSwT
    (27) IntTRSCompressionProof [EQUIVALENT, 23 ms]
    (28) IRSwT
    (29) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (30) IRSwT
    (31) IRSwTTerminationDigraphProof [EQUIVALENT, 4 ms]
    (32) IRSwT
    (33) FilterProof [EQUIVALENT, 0 ms]
    (34) IntTRS
    (35) IntTRSPeriodicNontermProof [COMPLETE, 2 ms]
    (36) NO


----------------------------------------

(0)
Obligation:
Clauses:

p :- q(and(r, !)).
q(X) :- X.
r.
r :- r.
and(X, Y) :- ','(X, Y).


Query: p()
----------------------------------------

(1) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 1,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p)",
                "(q (and (r) (!)))"
            ],
            [
                "(q X)",
                "X"
            ],
            [
                "(r)",
                null
            ],
            [
                "(r)",
                "(r)"
            ],
            [
                "(and X Y)",
                "(',' X Y)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "22": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (r) (call (!)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "44": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "47": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(r)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "49": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(!_7)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "28": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(r)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "18": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(call (and (r) (!)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "29": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(call (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "19": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(and (r) (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "1": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "5": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q (and (r) (!)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "50": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "40": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 6,
                        "term": "(r)"
                    },
                    {
                        "clause": 3,
                        "scope": 6,
                        "term": "(r)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "51": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "41": {
                "goal": [{
                    "clause": 2,
                    "scope": 6,
                    "term": "(r)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "20": {
                "goal": [{
                    "clause": 4,
                    "scope": 4,
                    "term": "(and (r) (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "42": {
                "goal": [{
                    "clause": 3,
                    "scope": 6,
                    "term": "(r)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "10": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(q (and (r) (!)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "21": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (call (r)) (call (!)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "43": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 1,
                "to": 5,
                "label": "CASE"
            },
            {
                "from": 5,
                "to": 9,
                "label": "ONLY EVAL with clause\np :- q(and(r, !)).\nand substitution"
            },
            {
                "from": 9,
                "to": 10,
                "label": "CASE"
            },
            {
                "from": 10,
                "to": 18,
                "label": "ONLY EVAL with clause\nq(X3) :- call(X3).\nand substitutionX3 -> and(r, !)"
            },
            {
                "from": 18,
                "to": 19,
                "label": "CALL"
            },
            {
                "from": 19,
                "to": 20,
                "label": "CASE"
            },
            {
                "from": 20,
                "to": 21,
                "label": "ONLY EVAL with clause\nand(X8, X9) :- ','(call(X8), call(X9)).\nand substitutionX8 -> r,\nX9 -> !"
            },
            {
                "from": 21,
                "to": 22,
                "label": "CALL"
            },
            {
                "from": 22,
                "to": 28,
                "label": "SPLIT 1"
            },
            {
                "from": 22,
                "to": 29,
                "label": "SPLIT 2"
            },
            {
                "from": 28,
                "to": 40,
                "label": "CASE"
            },
            {
                "from": 29,
                "to": 49,
                "label": "CALL"
            },
            {
                "from": 40,
                "to": 41,
                "label": "PARALLEL"
            },
            {
                "from": 40,
                "to": 42,
                "label": "PARALLEL"
            },
            {
                "from": 41,
                "to": 43,
                "label": "ONLY EVAL with clause\nr.\nand substitution"
            },
            {
                "from": 42,
                "to": 47,
                "label": "ONLY EVAL with clause\nr :- r.\nand substitution"
            },
            {
                "from": 43,
                "to": 44,
                "label": "SUCCESS"
            },
            {
                "from": 47,
                "to": 28,
                "label": "INSTANCE"
            },
            {
                "from": 49,
                "to": 50,
                "label": "CUT"
            },
            {
                "from": 50,
                "to": 51,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(2)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f1_in -> U1(f22_in)
   U1(f22_out1) -> f1_out1
   f28_in -> f28_out1
   f28_in -> U2(f28_in)
   U2(f28_out1) -> f28_out1
   f29_in -> f29_out1
   f22_in -> U3(f28_in)
   U3(f28_out1) -> U4(f29_in)
   U4(f29_out1) -> f22_out1

Q is empty.

----------------------------------------

(3) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1)) = 2*x_1
   POL(U2(x_1)) = 2*x_1
   POL(U3(x_1)) = 2*x_1
   POL(U4(x_1)) = x_1
   POL(f1_in) = 2
   POL(f1_out1) = 0
   POL(f22_in) = 0
   POL(f22_out1) = 0
   POL(f28_in) = 0
   POL(f28_out1) = 0
   POL(f29_in) = 0
   POL(f29_out1) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f1_in -> U1(f22_in)




----------------------------------------

(4)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   U1(f22_out1) -> f1_out1
   f28_in -> f28_out1
   f28_in -> U2(f28_in)
   U2(f28_out1) -> f28_out1
   f29_in -> f29_out1
   f22_in -> U3(f28_in)
   U3(f28_out1) -> U4(f29_in)
   U4(f29_out1) -> f22_out1

Q is empty.

----------------------------------------

(5) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U1(x_1)) = 1 + 2*x_1
   POL(U2(x_1)) = 2*x_1
   POL(U3(x_1)) = 2*x_1
   POL(U4(x_1)) = 2*x_1
   POL(f1_out1) = 0
   POL(f22_in) = 1
   POL(f22_out1) = 0
   POL(f28_in) = 0
   POL(f28_out1) = 0
   POL(f29_in) = 0
   POL(f29_out1) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U1(f22_out1) -> f1_out1
   f22_in -> U3(f28_in)




----------------------------------------

(6)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f28_in -> f28_out1
   f28_in -> U2(f28_in)
   U2(f28_out1) -> f28_out1
   f29_in -> f29_out1
   U3(f28_out1) -> U4(f29_in)
   U4(f29_out1) -> f22_out1

Q is empty.

----------------------------------------

(7) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U2(x_1)) = 2*x_1
   POL(U3(x_1)) = 2 + 2*x_1
   POL(U4(x_1)) = 1 + 2*x_1
   POL(f22_out1) = 1
   POL(f28_in) = 0
   POL(f28_out1) = 0
   POL(f29_in) = 0
   POL(f29_out1) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U3(f28_out1) -> U4(f29_in)




----------------------------------------

(8)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f28_in -> f28_out1
   f28_in -> U2(f28_in)
   U2(f28_out1) -> f28_out1
   f29_in -> f29_out1
   U4(f29_out1) -> f22_out1

Q is empty.

----------------------------------------

(9) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U2(x_1)) = 2*x_1
   POL(U4(x_1)) = 2 + 2*x_1
   POL(f22_out1) = 0
   POL(f28_in) = 0
   POL(f28_out1) = 0
   POL(f29_in) = 1
   POL(f29_out1) = 1
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   U4(f29_out1) -> f22_out1




----------------------------------------

(10)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f28_in -> f28_out1
   f28_in -> U2(f28_in)
   U2(f28_out1) -> f28_out1
   f29_in -> f29_out1

Q is empty.

----------------------------------------

(11) QTRSRRRProof (EQUIVALENT)
Used ordering:
f28_in/0)
f28_out1/0)
U2/1)YES(
f29_in/0)
f29_out1/0)

Quasi precedence:
[f28_in, f28_out1]
f29_in > f29_out1


Status:
f28_in: multiset status
f28_out1: multiset status
f29_in: multiset status
f29_out1: multiset status

With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f29_in -> f29_out1




----------------------------------------

(12)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f28_in -> f28_out1
   f28_in -> U2(f28_in)
   U2(f28_out1) -> f28_out1

Q is empty.

----------------------------------------

(13) QTRSRRRProof (EQUIVALENT)
Used ordering:
Polynomial interpretation [POLO]:

   POL(U2(x_1)) = x_1
   POL(f28_in) = 2
   POL(f28_out1) = 0
With this ordering the following rules can be removed by the rule removal processor [LPAR04] because they are oriented strictly:

   f28_in -> f28_out1




----------------------------------------

(14)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f28_in -> U2(f28_in)
   U2(f28_out1) -> f28_out1

Q is empty.

----------------------------------------

(15) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 3,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p)",
                "(q (and (r) (!)))"
            ],
            [
                "(q X)",
                "X"
            ],
            [
                "(r)",
                null
            ],
            [
                "(r)",
                "(r)"
            ],
            [
                "(and X Y)",
                "(',' X Y)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "34": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 6,
                        "term": "(r)"
                    },
                    {
                        "clause": 3,
                        "scope": 6,
                        "term": "(r)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "45": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(!_7)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "13": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(call (and (r) (!)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "35": {
                "goal": [{
                    "clause": 2,
                    "scope": 6,
                    "term": "(r)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "46": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "14": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(and (r) (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "36": {
                "goal": [{
                    "clause": 3,
                    "scope": 6,
                    "term": "(r)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "15": {
                "goal": [{
                    "clause": 4,
                    "scope": 4,
                    "term": "(and (r) (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "37": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "48": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "16": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (call (r)) (call (!)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "38": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "17": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (r) (call (!)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "39": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(r)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "3": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "4": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q (and (r) (!)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(q (and (r) (!)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "30": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(r)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "31": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(call (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 3,
                "to": 4,
                "label": "CASE"
            },
            {
                "from": 4,
                "to": 7,
                "label": "ONLY EVAL with clause\np :- q(and(r, !)).\nand substitution"
            },
            {
                "from": 7,
                "to": 8,
                "label": "CASE"
            },
            {
                "from": 8,
                "to": 13,
                "label": "ONLY EVAL with clause\nq(X3) :- call(X3).\nand substitutionX3 -> and(r, !)"
            },
            {
                "from": 13,
                "to": 14,
                "label": "CALL"
            },
            {
                "from": 14,
                "to": 15,
                "label": "CASE"
            },
            {
                "from": 15,
                "to": 16,
                "label": "ONLY EVAL with clause\nand(X8, X9) :- ','(call(X8), call(X9)).\nand substitutionX8 -> r,\nX9 -> !"
            },
            {
                "from": 16,
                "to": 17,
                "label": "CALL"
            },
            {
                "from": 17,
                "to": 30,
                "label": "SPLIT 1"
            },
            {
                "from": 17,
                "to": 31,
                "label": "SPLIT 2"
            },
            {
                "from": 30,
                "to": 34,
                "label": "CASE"
            },
            {
                "from": 31,
                "to": 45,
                "label": "CALL"
            },
            {
                "from": 34,
                "to": 35,
                "label": "PARALLEL"
            },
            {
                "from": 34,
                "to": 36,
                "label": "PARALLEL"
            },
            {
                "from": 35,
                "to": 37,
                "label": "ONLY EVAL with clause\nr.\nand substitution"
            },
            {
                "from": 36,
                "to": 39,
                "label": "ONLY EVAL with clause\nr :- r.\nand substitution"
            },
            {
                "from": 37,
                "to": 38,
                "label": "SUCCESS"
            },
            {
                "from": 39,
                "to": 30,
                "label": "INSTANCE"
            },
            {
                "from": 45,
                "to": 46,
                "label": "CUT"
            },
            {
                "from": 46,
                "to": 48,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(16)
Obligation:
Triples:

rA :- rA.
pB :- rA.

Clauses:

rcA.
rcA :- rcA.

Afs:

pB  =  pB


----------------------------------------

(17) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   PB_IN_ -> U2_^1(rA_in_)
   PB_IN_ -> RA_IN_
   RA_IN_ -> U1_^1(rA_in_)
   RA_IN_ -> RA_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(18)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   PB_IN_ -> U2_^1(rA_in_)
   PB_IN_ -> RA_IN_
   RA_IN_ -> U1_^1(rA_in_)
   RA_IN_ -> RA_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(19) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(20)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   RA_IN_ -> RA_IN_

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(21) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   RA_IN_ -> RA_IN_

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 2,
    "program": {
        "directives": [],
        "clauses": [
            [
                "(p)",
                "(q (and (r) (!)))"
            ],
            [
                "(q X)",
                "X"
            ],
            [
                "(r)",
                null
            ],
            [
                "(r)",
                "(r)"
            ],
            [
                "(and X Y)",
                "(',' X Y)"
            ]
        ]
    },
    "graph": {
        "nodes": {
            "11": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(q (and (r) (!)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "33": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(call (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "55": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "12": {
                "goal": [{
                    "clause": 1,
                    "scope": 2,
                    "term": "(q (and (r) (!)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "23": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(call (and (r) (!)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "56": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "24": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(and (r) (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "57": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(r)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "25": {
                "goal": [{
                    "clause": 4,
                    "scope": 4,
                    "term": "(and (r) (!))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "58": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(!_7)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "26": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (call (r)) (call (!)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "59": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(true)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(',' (r) (call (!)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "2": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "6": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(p)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "60": {
                "goal": [],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "52": {
                "goal": [
                    {
                        "clause": 2,
                        "scope": 6,
                        "term": "(r)"
                    },
                    {
                        "clause": 3,
                        "scope": 6,
                        "term": "(r)"
                    }
                ],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "53": {
                "goal": [{
                    "clause": 2,
                    "scope": 6,
                    "term": "(r)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "32": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(r)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            },
            "54": {
                "goal": [{
                    "clause": 3,
                    "scope": 6,
                    "term": "(r)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": [],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 2,
                "to": 6,
                "label": "CASE"
            },
            {
                "from": 6,
                "to": 11,
                "label": "ONLY EVAL with clause\np :- q(and(r, !)).\nand substitution"
            },
            {
                "from": 11,
                "to": 12,
                "label": "CASE"
            },
            {
                "from": 12,
                "to": 23,
                "label": "ONLY EVAL with clause\nq(X3) :- call(X3).\nand substitutionX3 -> and(r, !)"
            },
            {
                "from": 23,
                "to": 24,
                "label": "CALL"
            },
            {
                "from": 24,
                "to": 25,
                "label": "CASE"
            },
            {
                "from": 25,
                "to": 26,
                "label": "ONLY EVAL with clause\nand(X8, X9) :- ','(call(X8), call(X9)).\nand substitutionX8 -> r,\nX9 -> !"
            },
            {
                "from": 26,
                "to": 27,
                "label": "CALL"
            },
            {
                "from": 27,
                "to": 32,
                "label": "SPLIT 1"
            },
            {
                "from": 27,
                "to": 33,
                "label": "SPLIT 2"
            },
            {
                "from": 32,
                "to": 52,
                "label": "CASE"
            },
            {
                "from": 33,
                "to": 58,
                "label": "CALL"
            },
            {
                "from": 52,
                "to": 53,
                "label": "PARALLEL"
            },
            {
                "from": 52,
                "to": 54,
                "label": "PARALLEL"
            },
            {
                "from": 53,
                "to": 55,
                "label": "ONLY EVAL with clause\nr.\nand substitution"
            },
            {
                "from": 54,
                "to": 57,
                "label": "ONLY EVAL with clause\nr :- r.\nand substitution"
            },
            {
                "from": 55,
                "to": 56,
                "label": "SUCCESS"
            },
            {
                "from": 57,
                "to": 32,
                "label": "INSTANCE"
            },
            {
                "from": 58,
                "to": 59,
                "label": "CUT"
            },
            {
                "from": 59,
                "to": 60,
                "label": "SUCCESS"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(24)
Obligation:
Rules:
f57_in -> f32_in :|: TRUE
f32_out -> f57_out :|: TRUE
f52_in -> f53_in :|: TRUE
f54_out -> f52_out :|: TRUE
f52_in -> f54_in :|: TRUE
f53_out -> f52_out :|: TRUE
f32_in -> f52_in :|: TRUE
f52_out -> f32_out :|: TRUE
f54_in -> f57_in :|: TRUE
f57_out -> f54_out :|: TRUE
f6_out -> f2_out :|: TRUE
f2_in -> f6_in :|: TRUE
f6_in -> f11_in :|: TRUE
f11_out -> f6_out :|: TRUE
f12_out -> f11_out :|: TRUE
f11_in -> f12_in :|: TRUE
f12_in -> f23_in :|: TRUE
f23_out -> f12_out :|: TRUE
f24_out -> f23_out :|: TRUE
f23_in -> f24_in :|: TRUE
f25_out -> f24_out :|: TRUE
f24_in -> f25_in :|: TRUE
f25_in -> f26_in :|: TRUE
f26_out -> f25_out :|: TRUE
f26_in -> f27_in :|: TRUE
f27_out -> f26_out :|: TRUE
f27_in -> f32_in :|: TRUE
f32_out -> f33_in :|: TRUE
f33_out -> f27_out :|: TRUE
Start term: f2_in

----------------------------------------

(25) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f57_in -> f32_in :|: TRUE
f52_in -> f54_in :|: TRUE
f32_in -> f52_in :|: TRUE
f54_in -> f57_in :|: TRUE


----------------------------------------

(26)
Obligation:
Rules:
f57_in -> f32_in :|: TRUE
f52_in -> f54_in :|: TRUE
f32_in -> f52_in :|: TRUE
f54_in -> f57_in :|: TRUE

----------------------------------------

(27) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(28)
Obligation:
Rules:
f57_in -> f57_in :|: TRUE

----------------------------------------

(29) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(30)
Obligation:
Rules:
f57_in -> f57_in :|: TRUE

----------------------------------------

(31) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f57_in -> f57_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(32)
Obligation:

Termination digraph:
Nodes:
(1) f57_in -> f57_in :|: TRUE

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(33) FilterProof (EQUIVALENT)
Used the following sort dictionary for filtering: 
f57_in()
Replaced non-predefined constructor symbols by 0.
----------------------------------------

(34)
Obligation:
Rules:
f57_in -> f57_in :|: TRUE

----------------------------------------

(35) IntTRSPeriodicNontermProof (COMPLETE)
Normalized system to the following form:
f(pc) -> f(1) :|: pc = 1 && TRUE
Witness term starting non-terminating reduction: f(1)
----------------------------------------

(36)
NO
