YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/y4bYS.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

check_length(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) UndefinedPredicateHandlerProof [SOUND, 0 ms]
(2) Prolog
(3) PrologToPiTRSProof [SOUND, 0 ms]
(4) PiTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) PiDP
(11) PiDPToQDPProof [SOUND, 0 ms]
(12) QDP
(13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
Clauses:

check_length(.(X1, Xs), N) :- ','(>(N, 0), ','(is(N1, -(N, 1)), check_length(Xs, N1))).
check_length([], 0).


Query: check_length(g,a)
----------------------------------------

(1) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

check_length(.(X1, Xs), N) :- ','(>(N, 0), ','(is(N1, -(N, 1)), check_length(Xs, N1))).
check_length([], 0).
>(X0, X1).
is(X0, X1).


Query: check_length(g,a)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

check_length_in_2: (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   check_length_in_ga(.(X1, Xs), N) -> U1_ga(X1, Xs, N, >_in_ag(N, 0))
   >_in_ag(X0, X1) -> >_out_ag(X0, X1)
   U1_ga(X1, Xs, N, >_out_ag(N, 0)) -> U2_ga(X1, Xs, N, is_in_ag(N1, -(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ga(X1, Xs, N, is_out_ag(N1, -(N, 1))) -> U3_ga(X1, Xs, N, check_length_in_ga(Xs, N1))
   check_length_in_ga([], 0) -> check_length_out_ga([], 0)
   U3_ga(X1, Xs, N, check_length_out_ga(Xs, N1)) -> check_length_out_ga(.(X1, Xs), N)

The argument filtering Pi contains the following mapping:
check_length_in_ga(x1, x2)  =  check_length_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

>_in_ag(x1, x2)  =  >_in_ag(x2)

>_out_ag(x1, x2)  =  >_out_ag(x2)

0  =  0

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

-(x1, x2)  =  -(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

1  =  1

U3_ga(x1, x2, x3, x4)  =  U3_ga(x1, x2, x4)

[]  =  []

check_length_out_ga(x1, x2)  =  check_length_out_ga(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   check_length_in_ga(.(X1, Xs), N) -> U1_ga(X1, Xs, N, >_in_ag(N, 0))
   >_in_ag(X0, X1) -> >_out_ag(X0, X1)
   U1_ga(X1, Xs, N, >_out_ag(N, 0)) -> U2_ga(X1, Xs, N, is_in_ag(N1, -(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ga(X1, Xs, N, is_out_ag(N1, -(N, 1))) -> U3_ga(X1, Xs, N, check_length_in_ga(Xs, N1))
   check_length_in_ga([], 0) -> check_length_out_ga([], 0)
   U3_ga(X1, Xs, N, check_length_out_ga(Xs, N1)) -> check_length_out_ga(.(X1, Xs), N)

The argument filtering Pi contains the following mapping:
check_length_in_ga(x1, x2)  =  check_length_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

>_in_ag(x1, x2)  =  >_in_ag(x2)

>_out_ag(x1, x2)  =  >_out_ag(x2)

0  =  0

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

-(x1, x2)  =  -(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

1  =  1

U3_ga(x1, x2, x3, x4)  =  U3_ga(x1, x2, x4)

[]  =  []

check_length_out_ga(x1, x2)  =  check_length_out_ga(x1)



----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   CHECK_LENGTH_IN_GA(.(X1, Xs), N) -> U1_GA(X1, Xs, N, >_in_ag(N, 0))
   CHECK_LENGTH_IN_GA(.(X1, Xs), N) -> >_IN_AG(N, 0)
   U1_GA(X1, Xs, N, >_out_ag(N, 0)) -> U2_GA(X1, Xs, N, is_in_ag(N1, -(N, 1)))
   U1_GA(X1, Xs, N, >_out_ag(N, 0)) -> IS_IN_AG(N1, -(N, 1))
   U2_GA(X1, Xs, N, is_out_ag(N1, -(N, 1))) -> U3_GA(X1, Xs, N, check_length_in_ga(Xs, N1))
   U2_GA(X1, Xs, N, is_out_ag(N1, -(N, 1))) -> CHECK_LENGTH_IN_GA(Xs, N1)

The TRS R consists of the following rules:

   check_length_in_ga(.(X1, Xs), N) -> U1_ga(X1, Xs, N, >_in_ag(N, 0))
   >_in_ag(X0, X1) -> >_out_ag(X0, X1)
   U1_ga(X1, Xs, N, >_out_ag(N, 0)) -> U2_ga(X1, Xs, N, is_in_ag(N1, -(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ga(X1, Xs, N, is_out_ag(N1, -(N, 1))) -> U3_ga(X1, Xs, N, check_length_in_ga(Xs, N1))
   check_length_in_ga([], 0) -> check_length_out_ga([], 0)
   U3_ga(X1, Xs, N, check_length_out_ga(Xs, N1)) -> check_length_out_ga(.(X1, Xs), N)

The argument filtering Pi contains the following mapping:
check_length_in_ga(x1, x2)  =  check_length_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

>_in_ag(x1, x2)  =  >_in_ag(x2)

>_out_ag(x1, x2)  =  >_out_ag(x2)

0  =  0

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

-(x1, x2)  =  -(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

1  =  1

U3_ga(x1, x2, x3, x4)  =  U3_ga(x1, x2, x4)

[]  =  []

check_length_out_ga(x1, x2)  =  check_length_out_ga(x1)

CHECK_LENGTH_IN_GA(x1, x2)  =  CHECK_LENGTH_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x2, x4)

>_IN_AG(x1, x2)  =  >_IN_AG(x2)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x1, x2, x4)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   CHECK_LENGTH_IN_GA(.(X1, Xs), N) -> U1_GA(X1, Xs, N, >_in_ag(N, 0))
   CHECK_LENGTH_IN_GA(.(X1, Xs), N) -> >_IN_AG(N, 0)
   U1_GA(X1, Xs, N, >_out_ag(N, 0)) -> U2_GA(X1, Xs, N, is_in_ag(N1, -(N, 1)))
   U1_GA(X1, Xs, N, >_out_ag(N, 0)) -> IS_IN_AG(N1, -(N, 1))
   U2_GA(X1, Xs, N, is_out_ag(N1, -(N, 1))) -> U3_GA(X1, Xs, N, check_length_in_ga(Xs, N1))
   U2_GA(X1, Xs, N, is_out_ag(N1, -(N, 1))) -> CHECK_LENGTH_IN_GA(Xs, N1)

The TRS R consists of the following rules:

   check_length_in_ga(.(X1, Xs), N) -> U1_ga(X1, Xs, N, >_in_ag(N, 0))
   >_in_ag(X0, X1) -> >_out_ag(X0, X1)
   U1_ga(X1, Xs, N, >_out_ag(N, 0)) -> U2_ga(X1, Xs, N, is_in_ag(N1, -(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ga(X1, Xs, N, is_out_ag(N1, -(N, 1))) -> U3_ga(X1, Xs, N, check_length_in_ga(Xs, N1))
   check_length_in_ga([], 0) -> check_length_out_ga([], 0)
   U3_ga(X1, Xs, N, check_length_out_ga(Xs, N1)) -> check_length_out_ga(.(X1, Xs), N)

The argument filtering Pi contains the following mapping:
check_length_in_ga(x1, x2)  =  check_length_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

>_in_ag(x1, x2)  =  >_in_ag(x2)

>_out_ag(x1, x2)  =  >_out_ag(x2)

0  =  0

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

-(x1, x2)  =  -(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

1  =  1

U3_ga(x1, x2, x3, x4)  =  U3_ga(x1, x2, x4)

[]  =  []

check_length_out_ga(x1, x2)  =  check_length_out_ga(x1)

CHECK_LENGTH_IN_GA(x1, x2)  =  CHECK_LENGTH_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x2, x4)

>_IN_AG(x1, x2)  =  >_IN_AG(x2)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x1, x2, x4)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U3_GA(x1, x2, x3, x4)  =  U3_GA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(X1, Xs, N, >_out_ag(N, 0)) -> U2_GA(X1, Xs, N, is_in_ag(N1, -(N, 1)))
   U2_GA(X1, Xs, N, is_out_ag(N1, -(N, 1))) -> CHECK_LENGTH_IN_GA(Xs, N1)
   CHECK_LENGTH_IN_GA(.(X1, Xs), N) -> U1_GA(X1, Xs, N, >_in_ag(N, 0))

The TRS R consists of the following rules:

   check_length_in_ga(.(X1, Xs), N) -> U1_ga(X1, Xs, N, >_in_ag(N, 0))
   >_in_ag(X0, X1) -> >_out_ag(X0, X1)
   U1_ga(X1, Xs, N, >_out_ag(N, 0)) -> U2_ga(X1, Xs, N, is_in_ag(N1, -(N, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ga(X1, Xs, N, is_out_ag(N1, -(N, 1))) -> U3_ga(X1, Xs, N, check_length_in_ga(Xs, N1))
   check_length_in_ga([], 0) -> check_length_out_ga([], 0)
   U3_ga(X1, Xs, N, check_length_out_ga(Xs, N1)) -> check_length_out_ga(.(X1, Xs), N)

The argument filtering Pi contains the following mapping:
check_length_in_ga(x1, x2)  =  check_length_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

>_in_ag(x1, x2)  =  >_in_ag(x2)

>_out_ag(x1, x2)  =  >_out_ag(x2)

0  =  0

U2_ga(x1, x2, x3, x4)  =  U2_ga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

-(x1, x2)  =  -(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

1  =  1

U3_ga(x1, x2, x3, x4)  =  U3_ga(x1, x2, x4)

[]  =  []

check_length_out_ga(x1, x2)  =  check_length_out_ga(x1)

CHECK_LENGTH_IN_GA(x1, x2)  =  CHECK_LENGTH_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x2, x4)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U1_GA(X1, Xs, N, >_out_ag(N, 0)) -> U2_GA(X1, Xs, N, is_in_ag(N1, -(N, 1)))
   U2_GA(X1, Xs, N, is_out_ag(N1, -(N, 1))) -> CHECK_LENGTH_IN_GA(Xs, N1)
   CHECK_LENGTH_IN_GA(.(X1, Xs), N) -> U1_GA(X1, Xs, N, >_in_ag(N, 0))

The TRS R consists of the following rules:

   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   >_in_ag(X0, X1) -> >_out_ag(X0, X1)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

>_in_ag(x1, x2)  =  >_in_ag(x2)

>_out_ag(x1, x2)  =  >_out_ag(x2)

0  =  0

is_in_ag(x1, x2)  =  is_in_ag(x2)

-(x1, x2)  =  -(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

1  =  1

CHECK_LENGTH_IN_GA(x1, x2)  =  CHECK_LENGTH_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x2, x4)

U2_GA(x1, x2, x3, x4)  =  U2_GA(x1, x2, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U1_GA(X1, Xs, >_out_ag(0)) -> U2_GA(X1, Xs, is_in_ag(-(1)))
   U2_GA(X1, Xs, is_out_ag(-(1))) -> CHECK_LENGTH_IN_GA(Xs)
   CHECK_LENGTH_IN_GA(.(X1, Xs)) -> U1_GA(X1, Xs, >_in_ag(0))

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag(X1)
   >_in_ag(X1) -> >_out_ag(X1)

The set Q consists of the following terms:

   is_in_ag(x0)
   >_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U2_GA(X1, Xs, is_out_ag(-(1))) -> CHECK_LENGTH_IN_GA(Xs)
The graph contains the following edges 2 >= 1


*CHECK_LENGTH_IN_GA(.(X1, Xs)) -> U1_GA(X1, Xs, >_in_ag(0))
The graph contains the following edges 1 > 1, 1 > 2


*U1_GA(X1, Xs, >_out_ag(0)) -> U2_GA(X1, Xs, is_in_ag(-(1)))
The graph contains the following edges 1 >= 1, 2 >= 2


----------------------------------------

(14)
YES
