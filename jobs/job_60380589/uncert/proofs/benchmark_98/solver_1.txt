YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/rwSm7.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

timeslist(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) UndefinedPredicateHandlerProof [SOUND, 0 ms]
(2) Prolog
(3) PrologToPiTRSProof [SOUND, 0 ms]
(4) PiTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) PiDP
(11) PiDPToQDPProof [SOUND, 0 ms]
(12) QDP
(13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
Clauses:

timeslist(.(I, Is), Prod) :- timeslist(Is, I, Prod).
timeslist([], Prod, Prod).
timeslist(.(I, Is), Temp, Prod) :- ','(is(Temp1, *(Temp, I)), timeslist(Is, Temp1, Prod)).


Query: timeslist(g,a)
----------------------------------------

(1) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

timeslist(.(I, Is), Prod) :- timeslist(Is, I, Prod).
timeslist([], Prod, Prod).
timeslist(.(I, Is), Temp, Prod) :- ','(is(Temp1, *(Temp, I)), timeslist(Is, Temp1, Prod)).
is(X0, X1).


Query: timeslist(g,a)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

timeslist_in_2: (b,f)

timeslist_in_3: (b,b,f) (b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   timeslist_in_ga(.(I, Is), Prod) -> U1_ga(I, Is, Prod, timeslist_in_gga(Is, I, Prod))
   timeslist_in_gga([], Prod, Prod) -> timeslist_out_gga([], Prod, Prod)
   timeslist_in_gga(.(I, Is), Temp, Prod) -> U2_gga(I, Is, Temp, Prod, is_in_ag(Temp1, *(Temp, I)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_gga(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> U3_gga(I, Is, Temp, Prod, timeslist_in_gaa(Is, Temp1, Prod))
   timeslist_in_gaa([], Prod, Prod) -> timeslist_out_gaa([], Prod, Prod)
   timeslist_in_gaa(.(I, Is), Temp, Prod) -> U2_gaa(I, Is, Temp, Prod, is_in_ag(Temp1, *(Temp, I)))
   U2_gaa(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> U3_gaa(I, Is, Temp, Prod, timeslist_in_gaa(Is, Temp1, Prod))
   U3_gaa(I, Is, Temp, Prod, timeslist_out_gaa(Is, Temp1, Prod)) -> timeslist_out_gaa(.(I, Is), Temp, Prod)
   U3_gga(I, Is, Temp, Prod, timeslist_out_gaa(Is, Temp1, Prod)) -> timeslist_out_gga(.(I, Is), Temp, Prod)
   U1_ga(I, Is, Prod, timeslist_out_gga(Is, I, Prod)) -> timeslist_out_ga(.(I, Is), Prod)

The argument filtering Pi contains the following mapping:
timeslist_in_ga(x1, x2)  =  timeslist_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

timeslist_in_gga(x1, x2, x3)  =  timeslist_in_gga(x1, x2)

[]  =  []

timeslist_out_gga(x1, x2, x3)  =  timeslist_out_gga(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x1, x2, x3, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

*(x1, x2)  =  *(x2)

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x1, x2, x3, x5)

timeslist_in_gaa(x1, x2, x3)  =  timeslist_in_gaa(x1)

timeslist_out_gaa(x1, x2, x3)  =  timeslist_out_gaa(x1)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x1, x2, x5)

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x1, x2, x5)

timeslist_out_ga(x1, x2)  =  timeslist_out_ga(x1)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   timeslist_in_ga(.(I, Is), Prod) -> U1_ga(I, Is, Prod, timeslist_in_gga(Is, I, Prod))
   timeslist_in_gga([], Prod, Prod) -> timeslist_out_gga([], Prod, Prod)
   timeslist_in_gga(.(I, Is), Temp, Prod) -> U2_gga(I, Is, Temp, Prod, is_in_ag(Temp1, *(Temp, I)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_gga(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> U3_gga(I, Is, Temp, Prod, timeslist_in_gaa(Is, Temp1, Prod))
   timeslist_in_gaa([], Prod, Prod) -> timeslist_out_gaa([], Prod, Prod)
   timeslist_in_gaa(.(I, Is), Temp, Prod) -> U2_gaa(I, Is, Temp, Prod, is_in_ag(Temp1, *(Temp, I)))
   U2_gaa(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> U3_gaa(I, Is, Temp, Prod, timeslist_in_gaa(Is, Temp1, Prod))
   U3_gaa(I, Is, Temp, Prod, timeslist_out_gaa(Is, Temp1, Prod)) -> timeslist_out_gaa(.(I, Is), Temp, Prod)
   U3_gga(I, Is, Temp, Prod, timeslist_out_gaa(Is, Temp1, Prod)) -> timeslist_out_gga(.(I, Is), Temp, Prod)
   U1_ga(I, Is, Prod, timeslist_out_gga(Is, I, Prod)) -> timeslist_out_ga(.(I, Is), Prod)

The argument filtering Pi contains the following mapping:
timeslist_in_ga(x1, x2)  =  timeslist_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

timeslist_in_gga(x1, x2, x3)  =  timeslist_in_gga(x1, x2)

[]  =  []

timeslist_out_gga(x1, x2, x3)  =  timeslist_out_gga(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x1, x2, x3, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

*(x1, x2)  =  *(x2)

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x1, x2, x3, x5)

timeslist_in_gaa(x1, x2, x3)  =  timeslist_in_gaa(x1)

timeslist_out_gaa(x1, x2, x3)  =  timeslist_out_gaa(x1)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x1, x2, x5)

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x1, x2, x5)

timeslist_out_ga(x1, x2)  =  timeslist_out_ga(x1)



----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   TIMESLIST_IN_GA(.(I, Is), Prod) -> U1_GA(I, Is, Prod, timeslist_in_gga(Is, I, Prod))
   TIMESLIST_IN_GA(.(I, Is), Prod) -> TIMESLIST_IN_GGA(Is, I, Prod)
   TIMESLIST_IN_GGA(.(I, Is), Temp, Prod) -> U2_GGA(I, Is, Temp, Prod, is_in_ag(Temp1, *(Temp, I)))
   TIMESLIST_IN_GGA(.(I, Is), Temp, Prod) -> IS_IN_AG(Temp1, *(Temp, I))
   U2_GGA(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> U3_GGA(I, Is, Temp, Prod, timeslist_in_gaa(Is, Temp1, Prod))
   U2_GGA(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> TIMESLIST_IN_GAA(Is, Temp1, Prod)
   TIMESLIST_IN_GAA(.(I, Is), Temp, Prod) -> U2_GAA(I, Is, Temp, Prod, is_in_ag(Temp1, *(Temp, I)))
   TIMESLIST_IN_GAA(.(I, Is), Temp, Prod) -> IS_IN_AG(Temp1, *(Temp, I))
   U2_GAA(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> U3_GAA(I, Is, Temp, Prod, timeslist_in_gaa(Is, Temp1, Prod))
   U2_GAA(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> TIMESLIST_IN_GAA(Is, Temp1, Prod)

The TRS R consists of the following rules:

   timeslist_in_ga(.(I, Is), Prod) -> U1_ga(I, Is, Prod, timeslist_in_gga(Is, I, Prod))
   timeslist_in_gga([], Prod, Prod) -> timeslist_out_gga([], Prod, Prod)
   timeslist_in_gga(.(I, Is), Temp, Prod) -> U2_gga(I, Is, Temp, Prod, is_in_ag(Temp1, *(Temp, I)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_gga(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> U3_gga(I, Is, Temp, Prod, timeslist_in_gaa(Is, Temp1, Prod))
   timeslist_in_gaa([], Prod, Prod) -> timeslist_out_gaa([], Prod, Prod)
   timeslist_in_gaa(.(I, Is), Temp, Prod) -> U2_gaa(I, Is, Temp, Prod, is_in_ag(Temp1, *(Temp, I)))
   U2_gaa(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> U3_gaa(I, Is, Temp, Prod, timeslist_in_gaa(Is, Temp1, Prod))
   U3_gaa(I, Is, Temp, Prod, timeslist_out_gaa(Is, Temp1, Prod)) -> timeslist_out_gaa(.(I, Is), Temp, Prod)
   U3_gga(I, Is, Temp, Prod, timeslist_out_gaa(Is, Temp1, Prod)) -> timeslist_out_gga(.(I, Is), Temp, Prod)
   U1_ga(I, Is, Prod, timeslist_out_gga(Is, I, Prod)) -> timeslist_out_ga(.(I, Is), Prod)

The argument filtering Pi contains the following mapping:
timeslist_in_ga(x1, x2)  =  timeslist_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

timeslist_in_gga(x1, x2, x3)  =  timeslist_in_gga(x1, x2)

[]  =  []

timeslist_out_gga(x1, x2, x3)  =  timeslist_out_gga(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x1, x2, x3, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

*(x1, x2)  =  *(x2)

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x1, x2, x3, x5)

timeslist_in_gaa(x1, x2, x3)  =  timeslist_in_gaa(x1)

timeslist_out_gaa(x1, x2, x3)  =  timeslist_out_gaa(x1)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x1, x2, x5)

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x1, x2, x5)

timeslist_out_ga(x1, x2)  =  timeslist_out_ga(x1)

TIMESLIST_IN_GA(x1, x2)  =  TIMESLIST_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x2, x4)

TIMESLIST_IN_GGA(x1, x2, x3)  =  TIMESLIST_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x1, x2, x3, x5)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U3_GGA(x1, x2, x3, x4, x5)  =  U3_GGA(x1, x2, x3, x5)

TIMESLIST_IN_GAA(x1, x2, x3)  =  TIMESLIST_IN_GAA(x1)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x1, x2, x5)

U3_GAA(x1, x2, x3, x4, x5)  =  U3_GAA(x1, x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   TIMESLIST_IN_GA(.(I, Is), Prod) -> U1_GA(I, Is, Prod, timeslist_in_gga(Is, I, Prod))
   TIMESLIST_IN_GA(.(I, Is), Prod) -> TIMESLIST_IN_GGA(Is, I, Prod)
   TIMESLIST_IN_GGA(.(I, Is), Temp, Prod) -> U2_GGA(I, Is, Temp, Prod, is_in_ag(Temp1, *(Temp, I)))
   TIMESLIST_IN_GGA(.(I, Is), Temp, Prod) -> IS_IN_AG(Temp1, *(Temp, I))
   U2_GGA(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> U3_GGA(I, Is, Temp, Prod, timeslist_in_gaa(Is, Temp1, Prod))
   U2_GGA(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> TIMESLIST_IN_GAA(Is, Temp1, Prod)
   TIMESLIST_IN_GAA(.(I, Is), Temp, Prod) -> U2_GAA(I, Is, Temp, Prod, is_in_ag(Temp1, *(Temp, I)))
   TIMESLIST_IN_GAA(.(I, Is), Temp, Prod) -> IS_IN_AG(Temp1, *(Temp, I))
   U2_GAA(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> U3_GAA(I, Is, Temp, Prod, timeslist_in_gaa(Is, Temp1, Prod))
   U2_GAA(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> TIMESLIST_IN_GAA(Is, Temp1, Prod)

The TRS R consists of the following rules:

   timeslist_in_ga(.(I, Is), Prod) -> U1_ga(I, Is, Prod, timeslist_in_gga(Is, I, Prod))
   timeslist_in_gga([], Prod, Prod) -> timeslist_out_gga([], Prod, Prod)
   timeslist_in_gga(.(I, Is), Temp, Prod) -> U2_gga(I, Is, Temp, Prod, is_in_ag(Temp1, *(Temp, I)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_gga(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> U3_gga(I, Is, Temp, Prod, timeslist_in_gaa(Is, Temp1, Prod))
   timeslist_in_gaa([], Prod, Prod) -> timeslist_out_gaa([], Prod, Prod)
   timeslist_in_gaa(.(I, Is), Temp, Prod) -> U2_gaa(I, Is, Temp, Prod, is_in_ag(Temp1, *(Temp, I)))
   U2_gaa(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> U3_gaa(I, Is, Temp, Prod, timeslist_in_gaa(Is, Temp1, Prod))
   U3_gaa(I, Is, Temp, Prod, timeslist_out_gaa(Is, Temp1, Prod)) -> timeslist_out_gaa(.(I, Is), Temp, Prod)
   U3_gga(I, Is, Temp, Prod, timeslist_out_gaa(Is, Temp1, Prod)) -> timeslist_out_gga(.(I, Is), Temp, Prod)
   U1_ga(I, Is, Prod, timeslist_out_gga(Is, I, Prod)) -> timeslist_out_ga(.(I, Is), Prod)

The argument filtering Pi contains the following mapping:
timeslist_in_ga(x1, x2)  =  timeslist_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

timeslist_in_gga(x1, x2, x3)  =  timeslist_in_gga(x1, x2)

[]  =  []

timeslist_out_gga(x1, x2, x3)  =  timeslist_out_gga(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x1, x2, x3, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

*(x1, x2)  =  *(x2)

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x1, x2, x3, x5)

timeslist_in_gaa(x1, x2, x3)  =  timeslist_in_gaa(x1)

timeslist_out_gaa(x1, x2, x3)  =  timeslist_out_gaa(x1)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x1, x2, x5)

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x1, x2, x5)

timeslist_out_ga(x1, x2)  =  timeslist_out_ga(x1)

TIMESLIST_IN_GA(x1, x2)  =  TIMESLIST_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x1, x2, x4)

TIMESLIST_IN_GGA(x1, x2, x3)  =  TIMESLIST_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x1, x2, x3, x5)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U3_GGA(x1, x2, x3, x4, x5)  =  U3_GGA(x1, x2, x3, x5)

TIMESLIST_IN_GAA(x1, x2, x3)  =  TIMESLIST_IN_GAA(x1)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x1, x2, x5)

U3_GAA(x1, x2, x3, x4, x5)  =  U3_GAA(x1, x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 8 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GAA(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> TIMESLIST_IN_GAA(Is, Temp1, Prod)
   TIMESLIST_IN_GAA(.(I, Is), Temp, Prod) -> U2_GAA(I, Is, Temp, Prod, is_in_ag(Temp1, *(Temp, I)))

The TRS R consists of the following rules:

   timeslist_in_ga(.(I, Is), Prod) -> U1_ga(I, Is, Prod, timeslist_in_gga(Is, I, Prod))
   timeslist_in_gga([], Prod, Prod) -> timeslist_out_gga([], Prod, Prod)
   timeslist_in_gga(.(I, Is), Temp, Prod) -> U2_gga(I, Is, Temp, Prod, is_in_ag(Temp1, *(Temp, I)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_gga(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> U3_gga(I, Is, Temp, Prod, timeslist_in_gaa(Is, Temp1, Prod))
   timeslist_in_gaa([], Prod, Prod) -> timeslist_out_gaa([], Prod, Prod)
   timeslist_in_gaa(.(I, Is), Temp, Prod) -> U2_gaa(I, Is, Temp, Prod, is_in_ag(Temp1, *(Temp, I)))
   U2_gaa(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> U3_gaa(I, Is, Temp, Prod, timeslist_in_gaa(Is, Temp1, Prod))
   U3_gaa(I, Is, Temp, Prod, timeslist_out_gaa(Is, Temp1, Prod)) -> timeslist_out_gaa(.(I, Is), Temp, Prod)
   U3_gga(I, Is, Temp, Prod, timeslist_out_gaa(Is, Temp1, Prod)) -> timeslist_out_gga(.(I, Is), Temp, Prod)
   U1_ga(I, Is, Prod, timeslist_out_gga(Is, I, Prod)) -> timeslist_out_ga(.(I, Is), Prod)

The argument filtering Pi contains the following mapping:
timeslist_in_ga(x1, x2)  =  timeslist_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x1, x2, x4)

timeslist_in_gga(x1, x2, x3)  =  timeslist_in_gga(x1, x2)

[]  =  []

timeslist_out_gga(x1, x2, x3)  =  timeslist_out_gga(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x1, x2, x3, x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

*(x1, x2)  =  *(x2)

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x1, x2, x3, x5)

timeslist_in_gaa(x1, x2, x3)  =  timeslist_in_gaa(x1)

timeslist_out_gaa(x1, x2, x3)  =  timeslist_out_gaa(x1)

U2_gaa(x1, x2, x3, x4, x5)  =  U2_gaa(x1, x2, x5)

U3_gaa(x1, x2, x3, x4, x5)  =  U3_gaa(x1, x2, x5)

timeslist_out_ga(x1, x2)  =  timeslist_out_ga(x1)

TIMESLIST_IN_GAA(x1, x2, x3)  =  TIMESLIST_IN_GAA(x1)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x1, x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GAA(I, Is, Temp, Prod, is_out_ag(Temp1, *(Temp, I))) -> TIMESLIST_IN_GAA(Is, Temp1, Prod)
   TIMESLIST_IN_GAA(.(I, Is), Temp, Prod) -> U2_GAA(I, Is, Temp, Prod, is_in_ag(Temp1, *(Temp, I)))

The TRS R consists of the following rules:

   is_in_ag(X0, X1) -> is_out_ag(X0, X1)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

*(x1, x2)  =  *(x2)

TIMESLIST_IN_GAA(x1, x2, x3)  =  TIMESLIST_IN_GAA(x1)

U2_GAA(x1, x2, x3, x4, x5)  =  U2_GAA(x1, x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GAA(I, Is, is_out_ag(*(I))) -> TIMESLIST_IN_GAA(Is)
   TIMESLIST_IN_GAA(.(I, Is)) -> U2_GAA(I, Is, is_in_ag(*(I)))

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag(X1)

The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*TIMESLIST_IN_GAA(.(I, Is)) -> U2_GAA(I, Is, is_in_ag(*(I)))
The graph contains the following edges 1 > 1, 1 > 2


*U2_GAA(I, Is, is_out_ag(*(I))) -> TIMESLIST_IN_GAA(Is)
The graph contains the following edges 2 >= 1


----------------------------------------

(14)
YES
