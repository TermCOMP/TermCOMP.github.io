YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/MQ2xx.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

inner_product(g,g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) UndefinedPredicateHandlerProof [SOUND, 0 ms]
(2) Prolog
(3) PrologToPiTRSProof [SOUND, 0 ms]
(4) PiTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) PiDP
(11) PiDPToQDPProof [SOUND, 0 ms]
(12) QDP
(13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
Clauses:

inner_product(.(X, Xs), .(Y, Ys), IP) :- ','(inner_product(Xs, Ys, IP1), is(IP, +(*(X, Y), IP1))).
inner_product([], [], 0).


Query: inner_product(g,g,a)
----------------------------------------

(1) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

inner_product(.(X, Xs), .(Y, Ys), IP) :- ','(inner_product(Xs, Ys, IP1), is(IP, +(*(X, Y), IP1))).
inner_product([], [], 0).
is(X0, X1).


Query: inner_product(g,g,a)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

inner_product_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   inner_product_in_gga(.(X, Xs), .(Y, Ys), IP) -> U1_gga(X, Xs, Y, Ys, IP, inner_product_in_gga(Xs, Ys, IP1))
   inner_product_in_gga([], [], 0) -> inner_product_out_gga([], [], 0)
   U1_gga(X, Xs, Y, Ys, IP, inner_product_out_gga(Xs, Ys, IP1)) -> U2_gga(X, Xs, Y, Ys, IP, is_in_ag(IP, +(*(X, Y), IP1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_gga(X, Xs, Y, Ys, IP, is_out_ag(IP, +(*(X, Y), IP1))) -> inner_product_out_gga(.(X, Xs), .(Y, Ys), IP)

The argument filtering Pi contains the following mapping:
inner_product_in_gga(x1, x2, x3)  =  inner_product_in_gga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5, x6)  =  U1_gga(x1, x3, x6)

[]  =  []

inner_product_out_gga(x1, x2, x3)  =  inner_product_out_gga

U2_gga(x1, x2, x3, x4, x5, x6)  =  U2_gga(x6)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x1)

*(x1, x2)  =  *(x1, x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   inner_product_in_gga(.(X, Xs), .(Y, Ys), IP) -> U1_gga(X, Xs, Y, Ys, IP, inner_product_in_gga(Xs, Ys, IP1))
   inner_product_in_gga([], [], 0) -> inner_product_out_gga([], [], 0)
   U1_gga(X, Xs, Y, Ys, IP, inner_product_out_gga(Xs, Ys, IP1)) -> U2_gga(X, Xs, Y, Ys, IP, is_in_ag(IP, +(*(X, Y), IP1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_gga(X, Xs, Y, Ys, IP, is_out_ag(IP, +(*(X, Y), IP1))) -> inner_product_out_gga(.(X, Xs), .(Y, Ys), IP)

The argument filtering Pi contains the following mapping:
inner_product_in_gga(x1, x2, x3)  =  inner_product_in_gga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5, x6)  =  U1_gga(x1, x3, x6)

[]  =  []

inner_product_out_gga(x1, x2, x3)  =  inner_product_out_gga

U2_gga(x1, x2, x3, x4, x5, x6)  =  U2_gga(x6)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x1)

*(x1, x2)  =  *(x1, x2)



----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   INNER_PRODUCT_IN_GGA(.(X, Xs), .(Y, Ys), IP) -> U1_GGA(X, Xs, Y, Ys, IP, inner_product_in_gga(Xs, Ys, IP1))
   INNER_PRODUCT_IN_GGA(.(X, Xs), .(Y, Ys), IP) -> INNER_PRODUCT_IN_GGA(Xs, Ys, IP1)
   U1_GGA(X, Xs, Y, Ys, IP, inner_product_out_gga(Xs, Ys, IP1)) -> U2_GGA(X, Xs, Y, Ys, IP, is_in_ag(IP, +(*(X, Y), IP1)))
   U1_GGA(X, Xs, Y, Ys, IP, inner_product_out_gga(Xs, Ys, IP1)) -> IS_IN_AG(IP, +(*(X, Y), IP1))

The TRS R consists of the following rules:

   inner_product_in_gga(.(X, Xs), .(Y, Ys), IP) -> U1_gga(X, Xs, Y, Ys, IP, inner_product_in_gga(Xs, Ys, IP1))
   inner_product_in_gga([], [], 0) -> inner_product_out_gga([], [], 0)
   U1_gga(X, Xs, Y, Ys, IP, inner_product_out_gga(Xs, Ys, IP1)) -> U2_gga(X, Xs, Y, Ys, IP, is_in_ag(IP, +(*(X, Y), IP1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_gga(X, Xs, Y, Ys, IP, is_out_ag(IP, +(*(X, Y), IP1))) -> inner_product_out_gga(.(X, Xs), .(Y, Ys), IP)

The argument filtering Pi contains the following mapping:
inner_product_in_gga(x1, x2, x3)  =  inner_product_in_gga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5, x6)  =  U1_gga(x1, x3, x6)

[]  =  []

inner_product_out_gga(x1, x2, x3)  =  inner_product_out_gga

U2_gga(x1, x2, x3, x4, x5, x6)  =  U2_gga(x6)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x1)

*(x1, x2)  =  *(x1, x2)

INNER_PRODUCT_IN_GGA(x1, x2, x3)  =  INNER_PRODUCT_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5, x6)  =  U1_GGA(x1, x3, x6)

U2_GGA(x1, x2, x3, x4, x5, x6)  =  U2_GGA(x6)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   INNER_PRODUCT_IN_GGA(.(X, Xs), .(Y, Ys), IP) -> U1_GGA(X, Xs, Y, Ys, IP, inner_product_in_gga(Xs, Ys, IP1))
   INNER_PRODUCT_IN_GGA(.(X, Xs), .(Y, Ys), IP) -> INNER_PRODUCT_IN_GGA(Xs, Ys, IP1)
   U1_GGA(X, Xs, Y, Ys, IP, inner_product_out_gga(Xs, Ys, IP1)) -> U2_GGA(X, Xs, Y, Ys, IP, is_in_ag(IP, +(*(X, Y), IP1)))
   U1_GGA(X, Xs, Y, Ys, IP, inner_product_out_gga(Xs, Ys, IP1)) -> IS_IN_AG(IP, +(*(X, Y), IP1))

The TRS R consists of the following rules:

   inner_product_in_gga(.(X, Xs), .(Y, Ys), IP) -> U1_gga(X, Xs, Y, Ys, IP, inner_product_in_gga(Xs, Ys, IP1))
   inner_product_in_gga([], [], 0) -> inner_product_out_gga([], [], 0)
   U1_gga(X, Xs, Y, Ys, IP, inner_product_out_gga(Xs, Ys, IP1)) -> U2_gga(X, Xs, Y, Ys, IP, is_in_ag(IP, +(*(X, Y), IP1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_gga(X, Xs, Y, Ys, IP, is_out_ag(IP, +(*(X, Y), IP1))) -> inner_product_out_gga(.(X, Xs), .(Y, Ys), IP)

The argument filtering Pi contains the following mapping:
inner_product_in_gga(x1, x2, x3)  =  inner_product_in_gga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5, x6)  =  U1_gga(x1, x3, x6)

[]  =  []

inner_product_out_gga(x1, x2, x3)  =  inner_product_out_gga

U2_gga(x1, x2, x3, x4, x5, x6)  =  U2_gga(x6)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x1)

*(x1, x2)  =  *(x1, x2)

INNER_PRODUCT_IN_GGA(x1, x2, x3)  =  INNER_PRODUCT_IN_GGA(x1, x2)

U1_GGA(x1, x2, x3, x4, x5, x6)  =  U1_GGA(x1, x3, x6)

U2_GGA(x1, x2, x3, x4, x5, x6)  =  U2_GGA(x6)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   INNER_PRODUCT_IN_GGA(.(X, Xs), .(Y, Ys), IP) -> INNER_PRODUCT_IN_GGA(Xs, Ys, IP1)

The TRS R consists of the following rules:

   inner_product_in_gga(.(X, Xs), .(Y, Ys), IP) -> U1_gga(X, Xs, Y, Ys, IP, inner_product_in_gga(Xs, Ys, IP1))
   inner_product_in_gga([], [], 0) -> inner_product_out_gga([], [], 0)
   U1_gga(X, Xs, Y, Ys, IP, inner_product_out_gga(Xs, Ys, IP1)) -> U2_gga(X, Xs, Y, Ys, IP, is_in_ag(IP, +(*(X, Y), IP1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_gga(X, Xs, Y, Ys, IP, is_out_ag(IP, +(*(X, Y), IP1))) -> inner_product_out_gga(.(X, Xs), .(Y, Ys), IP)

The argument filtering Pi contains the following mapping:
inner_product_in_gga(x1, x2, x3)  =  inner_product_in_gga(x1, x2)

.(x1, x2)  =  .(x1, x2)

U1_gga(x1, x2, x3, x4, x5, x6)  =  U1_gga(x1, x3, x6)

[]  =  []

inner_product_out_gga(x1, x2, x3)  =  inner_product_out_gga

U2_gga(x1, x2, x3, x4, x5, x6)  =  U2_gga(x6)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x1)

*(x1, x2)  =  *(x1, x2)

INNER_PRODUCT_IN_GGA(x1, x2, x3)  =  INNER_PRODUCT_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   INNER_PRODUCT_IN_GGA(.(X, Xs), .(Y, Ys), IP) -> INNER_PRODUCT_IN_GGA(Xs, Ys, IP1)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

INNER_PRODUCT_IN_GGA(x1, x2, x3)  =  INNER_PRODUCT_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   INNER_PRODUCT_IN_GGA(.(X, Xs), .(Y, Ys)) -> INNER_PRODUCT_IN_GGA(Xs, Ys)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*INNER_PRODUCT_IN_GGA(.(X, Xs), .(Y, Ys)) -> INNER_PRODUCT_IN_GGA(Xs, Ys)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(14)
YES
