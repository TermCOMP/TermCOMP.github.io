YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/K9G37.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

queens(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) IntegerArithmeticTransformerProof [SOUND, 0 ms]
(2) Prolog
(3) NotTransformerProof [EQUIVALENT, 0 ms]
(4) Prolog
(5) CallTransformerProof [EQUIVALENT, 0 ms]
(6) Prolog
(7) CutEliminatorProof [SOUND, 0 ms]
(8) Prolog
(9) FailTransformerProof [EQUIVALENT, 0 ms]
(10) Prolog
(11) UnifyTransformerProof [EQUIVALENT, 0 ms]
(12) Prolog
(13) PrologToPiTRSProof [SOUND, 15 ms]
(14) PiTRS
(15) DependencyPairsProof [EQUIVALENT, 40 ms]
(16) PiDP
(17) DependencyGraphProof [EQUIVALENT, 0 ms]
(18) AND
    (19) PiDP
        (20) UsableRulesProof [EQUIVALENT, 0 ms]
        (21) PiDP
        (22) PiDPToQDPProof [EQUIVALENT, 0 ms]
        (23) QDP
        (24) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (25) YES
    (26) PiDP
        (27) UsableRulesProof [EQUIVALENT, 0 ms]
        (28) PiDP
        (29) PiDPToQDPProof [SOUND, 0 ms]
        (30) QDP
        (31) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (32) YES
    (33) PiDP
        (34) UsableRulesProof [EQUIVALENT, 0 ms]
        (35) PiDP
        (36) PiDPToQDPProof [SOUND, 5 ms]
        (37) QDP
        (38) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (39) YES
    (40) PiDP
        (41) UsableRulesProof [EQUIVALENT, 0 ms]
        (42) PiDP
        (43) PiDPToQDPProof [SOUND, 0 ms]
        (44) QDP
        (45) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (46) YES
    (47) PiDP
        (48) UsableRulesProof [EQUIVALENT, 0 ms]
        (49) PiDP
        (50) PiDPToQDPProof [SOUND, 0 ms]
        (51) QDP
        (52) QDPSizeChangeProof [EQUIVALENT, 0 ms]
        (53) YES
    (54) PiDP
        (55) UsableRulesProof [EQUIVALENT, 0 ms]
        (56) PiDP
        (57) PiDPToQDPProof [SOUND, 0 ms]
        (58) QDP
        (59) MRRProof [EQUIVALENT, 1 ms]
        (60) QDP
        (61) PisEmptyProof [EQUIVALENT, 0 ms]
        (62) YES


----------------------------------------

(0)
Obligation:
Clauses:

queens(X, Y) :- ','(perm(X, Y), safe(Y)).
perm([], []).
perm(.(X, Y), .(V, Res)) :- ','(delete(V, .(X, Y), Rest), perm(Rest, Res)).
delete(X, .(X, Y), Y).
delete(X, .(F, T), .(F, R)) :- delete(X, T, R).
safe([]).
safe(.(X, Y)) :- ','(noattack(X, Y, 1), safe(Y)).
noattack(X, [], N).
noattack(X, .(F, T), N) :- ','(=\=(X, F), ','(=\=(X, +(F, N)), ','(=\=(F, +(X, N)), ','(is(N1, +(N, 1)), noattack(X, T, N1))))).


Query: queens(g,a)
----------------------------------------

(1) IntegerArithmeticTransformerProof (SOUND)
Added definitions of predefined predicates [PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

queens(X, Y) :- ','(perm(X, Y), safe(Y)).
perm([], []).
perm(.(X, Y), .(V, Res)) :- ','(delete(V, .(X, Y), Rest), perm(Rest, Res)).
delete(X, .(X, Y), Y).
delete(X, .(F, T), .(F, R)) :- delete(X, T, R).
safe([]).
safe(.(X, Y)) :- ','(noattack(X, Y, succ(zero)), safe(Y)).
noattack(X, [], N).
noattack(X, .(F, T), N) :- ','(=(X1, X), ','(=(X2, F), ','(nounify(X1, X2), ','(=(X3, X), ','(isPlus(F, N, U), ','(=(X4, U), ','(nounify(X3, X4), ','(=(X5, F), ','(isPlus(X, N, U), ','(=(X6, U), ','(nounify(X5, X6), ','(isPlus(N, succ(zero), U), ','(=(N1, U), noattack(X, T, N1)))))))))))))).
nounify(X, Y) :- \+(=(X, Y)).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).


Query: queens(g,a)
----------------------------------------

(3) NotTransformerProof (EQUIVALENT)
Transformed all not-constructs [PROLOG].
----------------------------------------

(4)
Obligation:
Clauses:

queens(X, Y) :- ','(perm(X, Y), safe(Y)).
perm([], []).
perm(.(X, Y), .(V, Res)) :- ','(delete(V, .(X, Y), Rest), perm(Rest, Res)).
delete(X, .(X, Y), Y).
delete(X, .(F, T), .(F, R)) :- delete(X, T, R).
safe([]).
safe(.(X, Y)) :- ','(noattack(X, Y, succ(zero)), safe(Y)).
noattack(X, [], N).
noattack(X, .(F, T), N) :- ','(=(X1, X), ','(=(X2, F), ','(nounify(X1, X2), ','(=(X3, X), ','(isPlus(F, N, U), ','(=(X4, U), ','(nounify(X3, X4), ','(=(X5, F), ','(isPlus(X, N, U), ','(=(X6, U), ','(nounify(X5, X6), ','(isPlus(N, succ(zero), U), ','(=(N1, U), noattack(X, T, N1)))))))))))))).
nounify(X, Y) :- not(X, Y).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
not(X, Y) :- ','(call(=(X, Y)), ','(!, fail)).
not(X, Y).


Query: queens(g,a)
----------------------------------------

(5) CallTransformerProof (EQUIVALENT)
Transformed all call-constructs [PROLOG].
----------------------------------------

(6)
Obligation:
Clauses:

queens(X, Y) :- ','(perm(X, Y), safe(Y)).
perm([], []).
perm(.(X, Y), .(V, Res)) :- ','(delete(V, .(X, Y), Rest), perm(Rest, Res)).
delete(X, .(X, Y), Y).
delete(X, .(F, T), .(F, R)) :- delete(X, T, R).
safe([]).
safe(.(X, Y)) :- ','(noattack(X, Y, succ(zero)), safe(Y)).
noattack(X, [], N).
noattack(X, .(F, T), N) :- ','(=(X1, X), ','(=(X2, F), ','(nounify(X1, X2), ','(=(X3, X), ','(isPlus(F, N, U), ','(=(X4, U), ','(nounify(X3, X4), ','(=(X5, F), ','(isPlus(X, N, U), ','(=(X6, U), ','(nounify(X5, X6), ','(isPlus(N, succ(zero), U), ','(=(N1, U), noattack(X, T, N1)))))))))))))).
nounify(X, Y) :- not(X, Y).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
not(X, Y) :- ','(call1(X, Y), ','(!, fail)).
not(X, Y).
call1(X, Y) :- =(X, Y).


Query: queens(g,a)
----------------------------------------

(7) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(8)
Obligation:
Clauses:

queens(X, Y) :- ','(perm(X, Y), safe(Y)).
perm([], []).
perm(.(X, Y), .(V, Res)) :- ','(delete(V, .(X, Y), Rest), perm(Rest, Res)).
delete(X, .(X, Y), Y).
delete(X, .(F, T), .(F, R)) :- delete(X, T, R).
safe([]).
safe(.(X, Y)) :- ','(noattack(X, Y, succ(zero)), safe(Y)).
noattack(X, [], N).
noattack(X, .(F, T), N) :- ','(=(X1, X), ','(=(X2, F), ','(nounify(X1, X2), ','(=(X3, X), ','(isPlus(F, N, U), ','(=(X4, U), ','(nounify(X3, X4), ','(=(X5, F), ','(isPlus(X, N, U), ','(=(X6, U), ','(nounify(X5, X6), ','(isPlus(N, succ(zero), U), ','(=(N1, U), noattack(X, T, N1)))))))))))))).
nounify(X, Y) :- not(X, Y).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
not(X, Y) :- ','(call1(X, Y), fail).
not(X, Y).
call1(X, Y) :- =(X, Y).


Query: queens(g,a)
----------------------------------------

(9) FailTransformerProof (EQUIVALENT)
Added clauses for the built-in fail predicate [PROLOG].
----------------------------------------

(10)
Obligation:
Clauses:

queens(X, Y) :- ','(perm(X, Y), safe(Y)).
perm([], []).
perm(.(X, Y), .(V, Res)) :- ','(delete(V, .(X, Y), Rest), perm(Rest, Res)).
delete(X, .(X, Y), Y).
delete(X, .(F, T), .(F, R)) :- delete(X, T, R).
safe([]).
safe(.(X, Y)) :- ','(noattack(X, Y, succ(zero)), safe(Y)).
noattack(X, [], N).
noattack(X, .(F, T), N) :- ','(=(X1, X), ','(=(X2, F), ','(nounify(X1, X2), ','(=(X3, X), ','(isPlus(F, N, U), ','(=(X4, U), ','(nounify(X3, X4), ','(=(X5, F), ','(isPlus(X, N, U), ','(=(X6, U), ','(nounify(X5, X6), ','(isPlus(N, succ(zero), U), ','(=(N1, U), noattack(X, T, N1)))))))))))))).
nounify(X, Y) :- not(X, Y).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
not(X, Y) :- ','(call1(X, Y), fail).
not(X, Y).
call1(X, Y) :- =(X, Y).
fail :- failure(a).
failure(b).


Query: queens(g,a)
----------------------------------------

(11) UnifyTransformerProof (EQUIVALENT)
Added a fact for the built-in = predicate [PROLOG].
----------------------------------------

(12)
Obligation:
Clauses:

queens(X, Y) :- ','(perm(X, Y), safe(Y)).
perm([], []).
perm(.(X, Y), .(V, Res)) :- ','(delete(V, .(X, Y), Rest), perm(Rest, Res)).
delete(X, .(X, Y), Y).
delete(X, .(F, T), .(F, R)) :- delete(X, T, R).
safe([]).
safe(.(X, Y)) :- ','(noattack(X, Y, succ(zero)), safe(Y)).
noattack(X, [], N).
noattack(X, .(F, T), N) :- ','(=(X1, X), ','(=(X2, F), ','(nounify(X1, X2), ','(=(X3, X), ','(isPlus(F, N, U), ','(=(X4, U), ','(nounify(X3, X4), ','(=(X5, F), ','(isPlus(X, N, U), ','(=(X6, U), ','(nounify(X5, X6), ','(isPlus(N, succ(zero), U), ','(=(N1, U), noattack(X, T, N1)))))))))))))).
nounify(X, Y) :- not(X, Y).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
not(X, Y) :- ','(call1(X, Y), fail).
not(X, Y).
call1(X, Y) :- =(X, Y).
fail :- failure(a).
failure(b).
=(X, X).


Query: queens(g,a)
----------------------------------------

(13) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

queens_in_2: (b,f)

perm_in_2: (b,f)

delete_in_3: (f,b,f)

safe_in_1: (b)

noattack_in_3: (b,b,b)

nounify_in_2: (b,b)

not_in_2: (b,b)

call1_in_2: (b,b)

isPlus_in_3: (b,b,f) (b,b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   queens_in_ga(X, Y) -> U1_ga(X, Y, perm_in_ga(X, Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_ga(X, Y, perm_out_ga(X, Y)) -> U2_ga(X, Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, succ(zero)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U8_ggg(X, F, T, N, =_out_ag(X1, X)) -> U9_ggg(X, F, T, N, X1, =_in_ag(X2, F))
   U9_ggg(X, F, T, N, X1, =_out_ag(X2, F)) -> U10_ggg(X, F, T, N, nounify_in_gg(X1, X2))
   nounify_in_gg(X, Y) -> U22_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U56_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U58_gg(X, Y, =_in_gg(X, Y))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U58_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U56_gg(X, Y, call1_out_gg(X, Y)) -> U57_gg(X, Y, fail_in_)
   fail_in_ -> U59_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U59_(failure_out_g(a)) -> fail_out_
   U57_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U22_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U10_ggg(X, F, T, N, nounify_out_gg(X1, X2)) -> U11_ggg(X, F, T, N, =_in_ag(X3, X))
   U11_ggg(X, F, T, N, =_out_ag(X3, X)) -> U12_ggg(X, F, T, N, X3, isPlus_in_gga(F, N, U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U24_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U25_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U26_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U26_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U25_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U24_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U12_ggg(X, F, T, N, X3, isPlus_out_gga(F, N, U)) -> U13_ggg(X, F, T, N, X3, U, =_in_ag(X4, U))
   U13_ggg(X, F, T, N, X3, U, =_out_ag(X4, U)) -> U14_ggg(X, F, T, N, U, nounify_in_gg(X3, X4))
   U14_ggg(X, F, T, N, U, nounify_out_gg(X3, X4)) -> U15_ggg(X, F, T, N, U, =_in_ag(X5, F))
   U15_ggg(X, F, T, N, U, =_out_ag(X5, F)) -> U16_ggg(X, F, T, N, U, X5, isPlus_in_ggg(X, N, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U24_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U25_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U26_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U26_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U25_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U24_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U16_ggg(X, F, T, N, U, X5, isPlus_out_ggg(X, N, U)) -> U17_ggg(X, F, T, N, U, X5, =_in_ag(X6, U))
   U17_ggg(X, F, T, N, U, X5, =_out_ag(X6, U)) -> U18_ggg(X, F, T, N, U, nounify_in_gg(X5, X6))
   U18_ggg(X, F, T, N, U, nounify_out_gg(X5, X6)) -> U19_ggg(X, F, T, N, U, isPlus_in_ggg(N, succ(zero), U))
   U19_ggg(X, F, T, N, U, isPlus_out_ggg(N, succ(zero), U)) -> U20_ggg(X, F, T, N, =_in_ag(N1, U))
   U20_ggg(X, F, T, N, =_out_ag(N1, U)) -> U21_ggg(X, F, T, N, noattack_in_ggg(X, T, N1))
   U21_ggg(X, F, T, N, noattack_out_ggg(X, T, N1)) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, succ(zero))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_ga(X, Y, safe_out_g(Y)) -> queens_out_ga(X, Y)

The argument filtering Pi contains the following mapping:
queens_in_ga(x1, x2)  =  queens_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

U2_ga(x1, x2, x3)  =  U2_ga(x2, x3)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U9_ggg(x1, x2, x3, x4, x5, x6)  =  U9_ggg(x1, x2, x3, x4, x5, x6)

U10_ggg(x1, x2, x3, x4, x5)  =  U10_ggg(x1, x2, x3, x4, x5)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U58_gg(x1, x2, x3)  =  U58_gg(x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

call1_out_gg(x1, x2)  =  call1_out_gg

U57_gg(x1, x2, x3)  =  U57_gg(x3)

fail_in_  =  fail_in_

U59_(x1)  =  U59_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U11_ggg(x1, x2, x3, x4, x5)  =  U11_ggg(x1, x2, x3, x4, x5)

U12_ggg(x1, x2, x3, x4, x5, x6)  =  U12_ggg(x1, x2, x3, x4, x5, x6)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

zero  =  zero

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

succ(x1)  =  succ(x1)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

pred(x1)  =  pred(x1)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x4)

U25_gga(x1, x2, x3, x4)  =  U25_gga(x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U13_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U13_ggg(x1, x2, x3, x4, x5, x6, x7)

U14_ggg(x1, x2, x3, x4, x5, x6)  =  U14_ggg(x1, x2, x3, x4, x5, x6)

U15_ggg(x1, x2, x3, x4, x5, x6)  =  U15_ggg(x1, x3, x4, x5, x6)

U16_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U16_ggg(x1, x3, x4, x5, x6, x7)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U24_ggg(x1, x2, x3, x4)  =  U24_ggg(x4)

U25_ggg(x1, x2, x3, x4)  =  U25_ggg(x4)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U17_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U17_ggg(x1, x3, x4, x5, x6, x7)

U18_ggg(x1, x2, x3, x4, x5, x6)  =  U18_ggg(x1, x3, x4, x5, x6)

U19_ggg(x1, x2, x3, x4, x5, x6)  =  U19_ggg(x1, x3, x5, x6)

U20_ggg(x1, x2, x3, x4, x5)  =  U20_ggg(x1, x3, x5)

U21_ggg(x1, x2, x3, x4, x5)  =  U21_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_ga(x1, x2)  =  queens_out_ga(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(14)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   queens_in_ga(X, Y) -> U1_ga(X, Y, perm_in_ga(X, Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_ga(X, Y, perm_out_ga(X, Y)) -> U2_ga(X, Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, succ(zero)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U8_ggg(X, F, T, N, =_out_ag(X1, X)) -> U9_ggg(X, F, T, N, X1, =_in_ag(X2, F))
   U9_ggg(X, F, T, N, X1, =_out_ag(X2, F)) -> U10_ggg(X, F, T, N, nounify_in_gg(X1, X2))
   nounify_in_gg(X, Y) -> U22_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U56_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U58_gg(X, Y, =_in_gg(X, Y))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U58_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U56_gg(X, Y, call1_out_gg(X, Y)) -> U57_gg(X, Y, fail_in_)
   fail_in_ -> U59_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U59_(failure_out_g(a)) -> fail_out_
   U57_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U22_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U10_ggg(X, F, T, N, nounify_out_gg(X1, X2)) -> U11_ggg(X, F, T, N, =_in_ag(X3, X))
   U11_ggg(X, F, T, N, =_out_ag(X3, X)) -> U12_ggg(X, F, T, N, X3, isPlus_in_gga(F, N, U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U24_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U25_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U26_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U26_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U25_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U24_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U12_ggg(X, F, T, N, X3, isPlus_out_gga(F, N, U)) -> U13_ggg(X, F, T, N, X3, U, =_in_ag(X4, U))
   U13_ggg(X, F, T, N, X3, U, =_out_ag(X4, U)) -> U14_ggg(X, F, T, N, U, nounify_in_gg(X3, X4))
   U14_ggg(X, F, T, N, U, nounify_out_gg(X3, X4)) -> U15_ggg(X, F, T, N, U, =_in_ag(X5, F))
   U15_ggg(X, F, T, N, U, =_out_ag(X5, F)) -> U16_ggg(X, F, T, N, U, X5, isPlus_in_ggg(X, N, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U24_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U25_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U26_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U26_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U25_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U24_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U16_ggg(X, F, T, N, U, X5, isPlus_out_ggg(X, N, U)) -> U17_ggg(X, F, T, N, U, X5, =_in_ag(X6, U))
   U17_ggg(X, F, T, N, U, X5, =_out_ag(X6, U)) -> U18_ggg(X, F, T, N, U, nounify_in_gg(X5, X6))
   U18_ggg(X, F, T, N, U, nounify_out_gg(X5, X6)) -> U19_ggg(X, F, T, N, U, isPlus_in_ggg(N, succ(zero), U))
   U19_ggg(X, F, T, N, U, isPlus_out_ggg(N, succ(zero), U)) -> U20_ggg(X, F, T, N, =_in_ag(N1, U))
   U20_ggg(X, F, T, N, =_out_ag(N1, U)) -> U21_ggg(X, F, T, N, noattack_in_ggg(X, T, N1))
   U21_ggg(X, F, T, N, noattack_out_ggg(X, T, N1)) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, succ(zero))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_ga(X, Y, safe_out_g(Y)) -> queens_out_ga(X, Y)

The argument filtering Pi contains the following mapping:
queens_in_ga(x1, x2)  =  queens_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

U2_ga(x1, x2, x3)  =  U2_ga(x2, x3)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U9_ggg(x1, x2, x3, x4, x5, x6)  =  U9_ggg(x1, x2, x3, x4, x5, x6)

U10_ggg(x1, x2, x3, x4, x5)  =  U10_ggg(x1, x2, x3, x4, x5)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U58_gg(x1, x2, x3)  =  U58_gg(x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

call1_out_gg(x1, x2)  =  call1_out_gg

U57_gg(x1, x2, x3)  =  U57_gg(x3)

fail_in_  =  fail_in_

U59_(x1)  =  U59_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U11_ggg(x1, x2, x3, x4, x5)  =  U11_ggg(x1, x2, x3, x4, x5)

U12_ggg(x1, x2, x3, x4, x5, x6)  =  U12_ggg(x1, x2, x3, x4, x5, x6)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

zero  =  zero

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

succ(x1)  =  succ(x1)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

pred(x1)  =  pred(x1)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x4)

U25_gga(x1, x2, x3, x4)  =  U25_gga(x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U13_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U13_ggg(x1, x2, x3, x4, x5, x6, x7)

U14_ggg(x1, x2, x3, x4, x5, x6)  =  U14_ggg(x1, x2, x3, x4, x5, x6)

U15_ggg(x1, x2, x3, x4, x5, x6)  =  U15_ggg(x1, x3, x4, x5, x6)

U16_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U16_ggg(x1, x3, x4, x5, x6, x7)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U24_ggg(x1, x2, x3, x4)  =  U24_ggg(x4)

U25_ggg(x1, x2, x3, x4)  =  U25_ggg(x4)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U17_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U17_ggg(x1, x3, x4, x5, x6, x7)

U18_ggg(x1, x2, x3, x4, x5, x6)  =  U18_ggg(x1, x3, x4, x5, x6)

U19_ggg(x1, x2, x3, x4, x5, x6)  =  U19_ggg(x1, x3, x5, x6)

U20_ggg(x1, x2, x3, x4, x5)  =  U20_ggg(x1, x3, x5)

U21_ggg(x1, x2, x3, x4, x5)  =  U21_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_ga(x1, x2)  =  queens_out_ga(x2)



----------------------------------------

(15) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   QUEENS_IN_GA(X, Y) -> U1_GA(X, Y, perm_in_ga(X, Y))
   QUEENS_IN_GA(X, Y) -> PERM_IN_GA(X, Y)
   PERM_IN_GA(.(X, Y), .(V, Res)) -> U3_GA(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   PERM_IN_GA(.(X, Y), .(V, Res)) -> DELETE_IN_AGA(V, .(X, Y), Rest)
   DELETE_IN_AGA(X, .(F, T), .(F, R)) -> U5_AGA(X, F, T, R, delete_in_aga(X, T, R))
   DELETE_IN_AGA(X, .(F, T), .(F, R)) -> DELETE_IN_AGA(X, T, R)
   U3_GA(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_GA(X, Y, V, Res, perm_in_ga(Rest, Res))
   U3_GA(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> PERM_IN_GA(Rest, Res)
   U1_GA(X, Y, perm_out_ga(X, Y)) -> U2_GA(X, Y, safe_in_g(Y))
   U1_GA(X, Y, perm_out_ga(X, Y)) -> SAFE_IN_G(Y)
   SAFE_IN_G(.(X, Y)) -> U6_G(X, Y, noattack_in_ggg(X, Y, succ(zero)))
   SAFE_IN_G(.(X, Y)) -> NOATTACK_IN_GGG(X, Y, succ(zero))
   NOATTACK_IN_GGG(X, .(F, T), N) -> U8_GGG(X, F, T, N, =_in_ag(X1, X))
   NOATTACK_IN_GGG(X, .(F, T), N) -> =_IN_AG(X1, X)
   U8_GGG(X, F, T, N, =_out_ag(X1, X)) -> U9_GGG(X, F, T, N, X1, =_in_ag(X2, F))
   U8_GGG(X, F, T, N, =_out_ag(X1, X)) -> =_IN_AG(X2, F)
   U9_GGG(X, F, T, N, X1, =_out_ag(X2, F)) -> U10_GGG(X, F, T, N, nounify_in_gg(X1, X2))
   U9_GGG(X, F, T, N, X1, =_out_ag(X2, F)) -> NOUNIFY_IN_GG(X1, X2)
   NOUNIFY_IN_GG(X, Y) -> U22_GG(X, Y, not_in_gg(X, Y))
   NOUNIFY_IN_GG(X, Y) -> NOT_IN_GG(X, Y)
   NOT_IN_GG(X, Y) -> U56_GG(X, Y, call1_in_gg(X, Y))
   NOT_IN_GG(X, Y) -> CALL1_IN_GG(X, Y)
   CALL1_IN_GG(X, Y) -> U58_GG(X, Y, =_in_gg(X, Y))
   CALL1_IN_GG(X, Y) -> =_IN_GG(X, Y)
   U56_GG(X, Y, call1_out_gg(X, Y)) -> U57_GG(X, Y, fail_in_)
   U56_GG(X, Y, call1_out_gg(X, Y)) -> FAIL_IN_
   FAIL_IN_ -> U59_^1(failure_in_g(a))
   FAIL_IN_ -> FAILURE_IN_G(a)
   U10_GGG(X, F, T, N, nounify_out_gg(X1, X2)) -> U11_GGG(X, F, T, N, =_in_ag(X3, X))
   U10_GGG(X, F, T, N, nounify_out_gg(X1, X2)) -> =_IN_AG(X3, X)
   U11_GGG(X, F, T, N, =_out_ag(X3, X)) -> U12_GGG(X, F, T, N, X3, isPlus_in_gga(F, N, U))
   U11_GGG(X, F, T, N, =_out_ag(X3, X)) -> ISPLUS_IN_GGA(F, N, U)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> U23_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> U24_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> U25_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> U26_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   U12_GGG(X, F, T, N, X3, isPlus_out_gga(F, N, U)) -> U13_GGG(X, F, T, N, X3, U, =_in_ag(X4, U))
   U12_GGG(X, F, T, N, X3, isPlus_out_gga(F, N, U)) -> =_IN_AG(X4, U)
   U13_GGG(X, F, T, N, X3, U, =_out_ag(X4, U)) -> U14_GGG(X, F, T, N, U, nounify_in_gg(X3, X4))
   U13_GGG(X, F, T, N, X3, U, =_out_ag(X4, U)) -> NOUNIFY_IN_GG(X3, X4)
   U14_GGG(X, F, T, N, U, nounify_out_gg(X3, X4)) -> U15_GGG(X, F, T, N, U, =_in_ag(X5, F))
   U14_GGG(X, F, T, N, U, nounify_out_gg(X3, X4)) -> =_IN_AG(X5, F)
   U15_GGG(X, F, T, N, U, =_out_ag(X5, F)) -> U16_GGG(X, F, T, N, U, X5, isPlus_in_ggg(X, N, U))
   U15_GGG(X, F, T, N, U, =_out_ag(X5, F)) -> ISPLUS_IN_GGG(X, N, U)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> U23_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> U24_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> U25_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> U26_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   U16_GGG(X, F, T, N, U, X5, isPlus_out_ggg(X, N, U)) -> U17_GGG(X, F, T, N, U, X5, =_in_ag(X6, U))
   U16_GGG(X, F, T, N, U, X5, isPlus_out_ggg(X, N, U)) -> =_IN_AG(X6, U)
   U17_GGG(X, F, T, N, U, X5, =_out_ag(X6, U)) -> U18_GGG(X, F, T, N, U, nounify_in_gg(X5, X6))
   U17_GGG(X, F, T, N, U, X5, =_out_ag(X6, U)) -> NOUNIFY_IN_GG(X5, X6)
   U18_GGG(X, F, T, N, U, nounify_out_gg(X5, X6)) -> U19_GGG(X, F, T, N, U, isPlus_in_ggg(N, succ(zero), U))
   U18_GGG(X, F, T, N, U, nounify_out_gg(X5, X6)) -> ISPLUS_IN_GGG(N, succ(zero), U)
   U19_GGG(X, F, T, N, U, isPlus_out_ggg(N, succ(zero), U)) -> U20_GGG(X, F, T, N, =_in_ag(N1, U))
   U19_GGG(X, F, T, N, U, isPlus_out_ggg(N, succ(zero), U)) -> =_IN_AG(N1, U)
   U20_GGG(X, F, T, N, =_out_ag(N1, U)) -> U21_GGG(X, F, T, N, noattack_in_ggg(X, T, N1))
   U20_GGG(X, F, T, N, =_out_ag(N1, U)) -> NOATTACK_IN_GGG(X, T, N1)
   U6_G(X, Y, noattack_out_ggg(X, Y, succ(zero))) -> U7_G(X, Y, safe_in_g(Y))
   U6_G(X, Y, noattack_out_ggg(X, Y, succ(zero))) -> SAFE_IN_G(Y)

The TRS R consists of the following rules:

   queens_in_ga(X, Y) -> U1_ga(X, Y, perm_in_ga(X, Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_ga(X, Y, perm_out_ga(X, Y)) -> U2_ga(X, Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, succ(zero)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U8_ggg(X, F, T, N, =_out_ag(X1, X)) -> U9_ggg(X, F, T, N, X1, =_in_ag(X2, F))
   U9_ggg(X, F, T, N, X1, =_out_ag(X2, F)) -> U10_ggg(X, F, T, N, nounify_in_gg(X1, X2))
   nounify_in_gg(X, Y) -> U22_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U56_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U58_gg(X, Y, =_in_gg(X, Y))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U58_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U56_gg(X, Y, call1_out_gg(X, Y)) -> U57_gg(X, Y, fail_in_)
   fail_in_ -> U59_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U59_(failure_out_g(a)) -> fail_out_
   U57_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U22_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U10_ggg(X, F, T, N, nounify_out_gg(X1, X2)) -> U11_ggg(X, F, T, N, =_in_ag(X3, X))
   U11_ggg(X, F, T, N, =_out_ag(X3, X)) -> U12_ggg(X, F, T, N, X3, isPlus_in_gga(F, N, U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U24_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U25_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U26_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U26_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U25_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U24_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U12_ggg(X, F, T, N, X3, isPlus_out_gga(F, N, U)) -> U13_ggg(X, F, T, N, X3, U, =_in_ag(X4, U))
   U13_ggg(X, F, T, N, X3, U, =_out_ag(X4, U)) -> U14_ggg(X, F, T, N, U, nounify_in_gg(X3, X4))
   U14_ggg(X, F, T, N, U, nounify_out_gg(X3, X4)) -> U15_ggg(X, F, T, N, U, =_in_ag(X5, F))
   U15_ggg(X, F, T, N, U, =_out_ag(X5, F)) -> U16_ggg(X, F, T, N, U, X5, isPlus_in_ggg(X, N, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U24_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U25_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U26_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U26_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U25_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U24_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U16_ggg(X, F, T, N, U, X5, isPlus_out_ggg(X, N, U)) -> U17_ggg(X, F, T, N, U, X5, =_in_ag(X6, U))
   U17_ggg(X, F, T, N, U, X5, =_out_ag(X6, U)) -> U18_ggg(X, F, T, N, U, nounify_in_gg(X5, X6))
   U18_ggg(X, F, T, N, U, nounify_out_gg(X5, X6)) -> U19_ggg(X, F, T, N, U, isPlus_in_ggg(N, succ(zero), U))
   U19_ggg(X, F, T, N, U, isPlus_out_ggg(N, succ(zero), U)) -> U20_ggg(X, F, T, N, =_in_ag(N1, U))
   U20_ggg(X, F, T, N, =_out_ag(N1, U)) -> U21_ggg(X, F, T, N, noattack_in_ggg(X, T, N1))
   U21_ggg(X, F, T, N, noattack_out_ggg(X, T, N1)) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, succ(zero))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_ga(X, Y, safe_out_g(Y)) -> queens_out_ga(X, Y)

The argument filtering Pi contains the following mapping:
queens_in_ga(x1, x2)  =  queens_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

U2_ga(x1, x2, x3)  =  U2_ga(x2, x3)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U9_ggg(x1, x2, x3, x4, x5, x6)  =  U9_ggg(x1, x2, x3, x4, x5, x6)

U10_ggg(x1, x2, x3, x4, x5)  =  U10_ggg(x1, x2, x3, x4, x5)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U58_gg(x1, x2, x3)  =  U58_gg(x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

call1_out_gg(x1, x2)  =  call1_out_gg

U57_gg(x1, x2, x3)  =  U57_gg(x3)

fail_in_  =  fail_in_

U59_(x1)  =  U59_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U11_ggg(x1, x2, x3, x4, x5)  =  U11_ggg(x1, x2, x3, x4, x5)

U12_ggg(x1, x2, x3, x4, x5, x6)  =  U12_ggg(x1, x2, x3, x4, x5, x6)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

zero  =  zero

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

succ(x1)  =  succ(x1)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

pred(x1)  =  pred(x1)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x4)

U25_gga(x1, x2, x3, x4)  =  U25_gga(x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U13_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U13_ggg(x1, x2, x3, x4, x5, x6, x7)

U14_ggg(x1, x2, x3, x4, x5, x6)  =  U14_ggg(x1, x2, x3, x4, x5, x6)

U15_ggg(x1, x2, x3, x4, x5, x6)  =  U15_ggg(x1, x3, x4, x5, x6)

U16_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U16_ggg(x1, x3, x4, x5, x6, x7)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U24_ggg(x1, x2, x3, x4)  =  U24_ggg(x4)

U25_ggg(x1, x2, x3, x4)  =  U25_ggg(x4)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U17_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U17_ggg(x1, x3, x4, x5, x6, x7)

U18_ggg(x1, x2, x3, x4, x5, x6)  =  U18_ggg(x1, x3, x4, x5, x6)

U19_ggg(x1, x2, x3, x4, x5, x6)  =  U19_ggg(x1, x3, x5, x6)

U20_ggg(x1, x2, x3, x4, x5)  =  U20_ggg(x1, x3, x5)

U21_ggg(x1, x2, x3, x4, x5)  =  U21_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_ga(x1, x2)  =  queens_out_ga(x2)

QUEENS_IN_GA(x1, x2)  =  QUEENS_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x5)

DELETE_IN_AGA(x1, x2, x3)  =  DELETE_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x5)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x3, x5)

U2_GA(x1, x2, x3)  =  U2_GA(x2, x3)

SAFE_IN_G(x1)  =  SAFE_IN_G(x1)

U6_G(x1, x2, x3)  =  U6_G(x2, x3)

NOATTACK_IN_GGG(x1, x2, x3)  =  NOATTACK_IN_GGG(x1, x2, x3)

U8_GGG(x1, x2, x3, x4, x5)  =  U8_GGG(x1, x2, x3, x4, x5)

=_IN_AG(x1, x2)  =  =_IN_AG(x2)

U9_GGG(x1, x2, x3, x4, x5, x6)  =  U9_GGG(x1, x2, x3, x4, x5, x6)

U10_GGG(x1, x2, x3, x4, x5)  =  U10_GGG(x1, x2, x3, x4, x5)

NOUNIFY_IN_GG(x1, x2)  =  NOUNIFY_IN_GG(x1, x2)

U22_GG(x1, x2, x3)  =  U22_GG(x3)

NOT_IN_GG(x1, x2)  =  NOT_IN_GG(x1, x2)

U56_GG(x1, x2, x3)  =  U56_GG(x3)

CALL1_IN_GG(x1, x2)  =  CALL1_IN_GG(x1, x2)

U58_GG(x1, x2, x3)  =  U58_GG(x3)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U57_GG(x1, x2, x3)  =  U57_GG(x3)

FAIL_IN_  =  FAIL_IN_

U59_^1(x1)  =  U59_^1(x1)

FAILURE_IN_G(x1)  =  FAILURE_IN_G(x1)

U11_GGG(x1, x2, x3, x4, x5)  =  U11_GGG(x1, x2, x3, x4, x5)

U12_GGG(x1, x2, x3, x4, x5, x6)  =  U12_GGG(x1, x2, x3, x4, x5, x6)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)

U23_GGA(x1, x2, x3, x4)  =  U23_GGA(x4)

U24_GGA(x1, x2, x3, x4)  =  U24_GGA(x4)

U25_GGA(x1, x2, x3, x4)  =  U25_GGA(x4)

U26_GGA(x1, x2, x3, x4)  =  U26_GGA(x4)

U13_GGG(x1, x2, x3, x4, x5, x6, x7)  =  U13_GGG(x1, x2, x3, x4, x5, x6, x7)

U14_GGG(x1, x2, x3, x4, x5, x6)  =  U14_GGG(x1, x2, x3, x4, x5, x6)

U15_GGG(x1, x2, x3, x4, x5, x6)  =  U15_GGG(x1, x3, x4, x5, x6)

U16_GGG(x1, x2, x3, x4, x5, x6, x7)  =  U16_GGG(x1, x3, x4, x5, x6, x7)

ISPLUS_IN_GGG(x1, x2, x3)  =  ISPLUS_IN_GGG(x1, x2, x3)

U23_GGG(x1, x2, x3, x4)  =  U23_GGG(x4)

U24_GGG(x1, x2, x3, x4)  =  U24_GGG(x4)

U25_GGG(x1, x2, x3, x4)  =  U25_GGG(x4)

U26_GGG(x1, x2, x3, x4)  =  U26_GGG(x4)

U17_GGG(x1, x2, x3, x4, x5, x6, x7)  =  U17_GGG(x1, x3, x4, x5, x6, x7)

U18_GGG(x1, x2, x3, x4, x5, x6)  =  U18_GGG(x1, x3, x4, x5, x6)

U19_GGG(x1, x2, x3, x4, x5, x6)  =  U19_GGG(x1, x3, x5, x6)

U20_GGG(x1, x2, x3, x4, x5)  =  U20_GGG(x1, x3, x5)

U21_GGG(x1, x2, x3, x4, x5)  =  U21_GGG(x5)

U7_G(x1, x2, x3)  =  U7_G(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(16)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   QUEENS_IN_GA(X, Y) -> U1_GA(X, Y, perm_in_ga(X, Y))
   QUEENS_IN_GA(X, Y) -> PERM_IN_GA(X, Y)
   PERM_IN_GA(.(X, Y), .(V, Res)) -> U3_GA(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   PERM_IN_GA(.(X, Y), .(V, Res)) -> DELETE_IN_AGA(V, .(X, Y), Rest)
   DELETE_IN_AGA(X, .(F, T), .(F, R)) -> U5_AGA(X, F, T, R, delete_in_aga(X, T, R))
   DELETE_IN_AGA(X, .(F, T), .(F, R)) -> DELETE_IN_AGA(X, T, R)
   U3_GA(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_GA(X, Y, V, Res, perm_in_ga(Rest, Res))
   U3_GA(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> PERM_IN_GA(Rest, Res)
   U1_GA(X, Y, perm_out_ga(X, Y)) -> U2_GA(X, Y, safe_in_g(Y))
   U1_GA(X, Y, perm_out_ga(X, Y)) -> SAFE_IN_G(Y)
   SAFE_IN_G(.(X, Y)) -> U6_G(X, Y, noattack_in_ggg(X, Y, succ(zero)))
   SAFE_IN_G(.(X, Y)) -> NOATTACK_IN_GGG(X, Y, succ(zero))
   NOATTACK_IN_GGG(X, .(F, T), N) -> U8_GGG(X, F, T, N, =_in_ag(X1, X))
   NOATTACK_IN_GGG(X, .(F, T), N) -> =_IN_AG(X1, X)
   U8_GGG(X, F, T, N, =_out_ag(X1, X)) -> U9_GGG(X, F, T, N, X1, =_in_ag(X2, F))
   U8_GGG(X, F, T, N, =_out_ag(X1, X)) -> =_IN_AG(X2, F)
   U9_GGG(X, F, T, N, X1, =_out_ag(X2, F)) -> U10_GGG(X, F, T, N, nounify_in_gg(X1, X2))
   U9_GGG(X, F, T, N, X1, =_out_ag(X2, F)) -> NOUNIFY_IN_GG(X1, X2)
   NOUNIFY_IN_GG(X, Y) -> U22_GG(X, Y, not_in_gg(X, Y))
   NOUNIFY_IN_GG(X, Y) -> NOT_IN_GG(X, Y)
   NOT_IN_GG(X, Y) -> U56_GG(X, Y, call1_in_gg(X, Y))
   NOT_IN_GG(X, Y) -> CALL1_IN_GG(X, Y)
   CALL1_IN_GG(X, Y) -> U58_GG(X, Y, =_in_gg(X, Y))
   CALL1_IN_GG(X, Y) -> =_IN_GG(X, Y)
   U56_GG(X, Y, call1_out_gg(X, Y)) -> U57_GG(X, Y, fail_in_)
   U56_GG(X, Y, call1_out_gg(X, Y)) -> FAIL_IN_
   FAIL_IN_ -> U59_^1(failure_in_g(a))
   FAIL_IN_ -> FAILURE_IN_G(a)
   U10_GGG(X, F, T, N, nounify_out_gg(X1, X2)) -> U11_GGG(X, F, T, N, =_in_ag(X3, X))
   U10_GGG(X, F, T, N, nounify_out_gg(X1, X2)) -> =_IN_AG(X3, X)
   U11_GGG(X, F, T, N, =_out_ag(X3, X)) -> U12_GGG(X, F, T, N, X3, isPlus_in_gga(F, N, U))
   U11_GGG(X, F, T, N, =_out_ag(X3, X)) -> ISPLUS_IN_GGA(F, N, U)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> U23_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> U24_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> U25_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> U26_GGA(X, Y, Z, isPlus_in_gga(X, Y, Z))
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   U12_GGG(X, F, T, N, X3, isPlus_out_gga(F, N, U)) -> U13_GGG(X, F, T, N, X3, U, =_in_ag(X4, U))
   U12_GGG(X, F, T, N, X3, isPlus_out_gga(F, N, U)) -> =_IN_AG(X4, U)
   U13_GGG(X, F, T, N, X3, U, =_out_ag(X4, U)) -> U14_GGG(X, F, T, N, U, nounify_in_gg(X3, X4))
   U13_GGG(X, F, T, N, X3, U, =_out_ag(X4, U)) -> NOUNIFY_IN_GG(X3, X4)
   U14_GGG(X, F, T, N, U, nounify_out_gg(X3, X4)) -> U15_GGG(X, F, T, N, U, =_in_ag(X5, F))
   U14_GGG(X, F, T, N, U, nounify_out_gg(X3, X4)) -> =_IN_AG(X5, F)
   U15_GGG(X, F, T, N, U, =_out_ag(X5, F)) -> U16_GGG(X, F, T, N, U, X5, isPlus_in_ggg(X, N, U))
   U15_GGG(X, F, T, N, U, =_out_ag(X5, F)) -> ISPLUS_IN_GGG(X, N, U)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> U23_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> U24_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> U25_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> U26_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   U16_GGG(X, F, T, N, U, X5, isPlus_out_ggg(X, N, U)) -> U17_GGG(X, F, T, N, U, X5, =_in_ag(X6, U))
   U16_GGG(X, F, T, N, U, X5, isPlus_out_ggg(X, N, U)) -> =_IN_AG(X6, U)
   U17_GGG(X, F, T, N, U, X5, =_out_ag(X6, U)) -> U18_GGG(X, F, T, N, U, nounify_in_gg(X5, X6))
   U17_GGG(X, F, T, N, U, X5, =_out_ag(X6, U)) -> NOUNIFY_IN_GG(X5, X6)
   U18_GGG(X, F, T, N, U, nounify_out_gg(X5, X6)) -> U19_GGG(X, F, T, N, U, isPlus_in_ggg(N, succ(zero), U))
   U18_GGG(X, F, T, N, U, nounify_out_gg(X5, X6)) -> ISPLUS_IN_GGG(N, succ(zero), U)
   U19_GGG(X, F, T, N, U, isPlus_out_ggg(N, succ(zero), U)) -> U20_GGG(X, F, T, N, =_in_ag(N1, U))
   U19_GGG(X, F, T, N, U, isPlus_out_ggg(N, succ(zero), U)) -> =_IN_AG(N1, U)
   U20_GGG(X, F, T, N, =_out_ag(N1, U)) -> U21_GGG(X, F, T, N, noattack_in_ggg(X, T, N1))
   U20_GGG(X, F, T, N, =_out_ag(N1, U)) -> NOATTACK_IN_GGG(X, T, N1)
   U6_G(X, Y, noattack_out_ggg(X, Y, succ(zero))) -> U7_G(X, Y, safe_in_g(Y))
   U6_G(X, Y, noattack_out_ggg(X, Y, succ(zero))) -> SAFE_IN_G(Y)

The TRS R consists of the following rules:

   queens_in_ga(X, Y) -> U1_ga(X, Y, perm_in_ga(X, Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_ga(X, Y, perm_out_ga(X, Y)) -> U2_ga(X, Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, succ(zero)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U8_ggg(X, F, T, N, =_out_ag(X1, X)) -> U9_ggg(X, F, T, N, X1, =_in_ag(X2, F))
   U9_ggg(X, F, T, N, X1, =_out_ag(X2, F)) -> U10_ggg(X, F, T, N, nounify_in_gg(X1, X2))
   nounify_in_gg(X, Y) -> U22_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U56_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U58_gg(X, Y, =_in_gg(X, Y))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U58_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U56_gg(X, Y, call1_out_gg(X, Y)) -> U57_gg(X, Y, fail_in_)
   fail_in_ -> U59_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U59_(failure_out_g(a)) -> fail_out_
   U57_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U22_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U10_ggg(X, F, T, N, nounify_out_gg(X1, X2)) -> U11_ggg(X, F, T, N, =_in_ag(X3, X))
   U11_ggg(X, F, T, N, =_out_ag(X3, X)) -> U12_ggg(X, F, T, N, X3, isPlus_in_gga(F, N, U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U24_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U25_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U26_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U26_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U25_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U24_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U12_ggg(X, F, T, N, X3, isPlus_out_gga(F, N, U)) -> U13_ggg(X, F, T, N, X3, U, =_in_ag(X4, U))
   U13_ggg(X, F, T, N, X3, U, =_out_ag(X4, U)) -> U14_ggg(X, F, T, N, U, nounify_in_gg(X3, X4))
   U14_ggg(X, F, T, N, U, nounify_out_gg(X3, X4)) -> U15_ggg(X, F, T, N, U, =_in_ag(X5, F))
   U15_ggg(X, F, T, N, U, =_out_ag(X5, F)) -> U16_ggg(X, F, T, N, U, X5, isPlus_in_ggg(X, N, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U24_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U25_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U26_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U26_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U25_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U24_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U16_ggg(X, F, T, N, U, X5, isPlus_out_ggg(X, N, U)) -> U17_ggg(X, F, T, N, U, X5, =_in_ag(X6, U))
   U17_ggg(X, F, T, N, U, X5, =_out_ag(X6, U)) -> U18_ggg(X, F, T, N, U, nounify_in_gg(X5, X6))
   U18_ggg(X, F, T, N, U, nounify_out_gg(X5, X6)) -> U19_ggg(X, F, T, N, U, isPlus_in_ggg(N, succ(zero), U))
   U19_ggg(X, F, T, N, U, isPlus_out_ggg(N, succ(zero), U)) -> U20_ggg(X, F, T, N, =_in_ag(N1, U))
   U20_ggg(X, F, T, N, =_out_ag(N1, U)) -> U21_ggg(X, F, T, N, noattack_in_ggg(X, T, N1))
   U21_ggg(X, F, T, N, noattack_out_ggg(X, T, N1)) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, succ(zero))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_ga(X, Y, safe_out_g(Y)) -> queens_out_ga(X, Y)

The argument filtering Pi contains the following mapping:
queens_in_ga(x1, x2)  =  queens_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

U2_ga(x1, x2, x3)  =  U2_ga(x2, x3)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U9_ggg(x1, x2, x3, x4, x5, x6)  =  U9_ggg(x1, x2, x3, x4, x5, x6)

U10_ggg(x1, x2, x3, x4, x5)  =  U10_ggg(x1, x2, x3, x4, x5)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U58_gg(x1, x2, x3)  =  U58_gg(x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

call1_out_gg(x1, x2)  =  call1_out_gg

U57_gg(x1, x2, x3)  =  U57_gg(x3)

fail_in_  =  fail_in_

U59_(x1)  =  U59_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U11_ggg(x1, x2, x3, x4, x5)  =  U11_ggg(x1, x2, x3, x4, x5)

U12_ggg(x1, x2, x3, x4, x5, x6)  =  U12_ggg(x1, x2, x3, x4, x5, x6)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

zero  =  zero

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

succ(x1)  =  succ(x1)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

pred(x1)  =  pred(x1)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x4)

U25_gga(x1, x2, x3, x4)  =  U25_gga(x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U13_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U13_ggg(x1, x2, x3, x4, x5, x6, x7)

U14_ggg(x1, x2, x3, x4, x5, x6)  =  U14_ggg(x1, x2, x3, x4, x5, x6)

U15_ggg(x1, x2, x3, x4, x5, x6)  =  U15_ggg(x1, x3, x4, x5, x6)

U16_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U16_ggg(x1, x3, x4, x5, x6, x7)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U24_ggg(x1, x2, x3, x4)  =  U24_ggg(x4)

U25_ggg(x1, x2, x3, x4)  =  U25_ggg(x4)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U17_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U17_ggg(x1, x3, x4, x5, x6, x7)

U18_ggg(x1, x2, x3, x4, x5, x6)  =  U18_ggg(x1, x3, x4, x5, x6)

U19_ggg(x1, x2, x3, x4, x5, x6)  =  U19_ggg(x1, x3, x5, x6)

U20_ggg(x1, x2, x3, x4, x5)  =  U20_ggg(x1, x3, x5)

U21_ggg(x1, x2, x3, x4, x5)  =  U21_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_ga(x1, x2)  =  queens_out_ga(x2)

QUEENS_IN_GA(x1, x2)  =  QUEENS_IN_GA(x1)

U1_GA(x1, x2, x3)  =  U1_GA(x3)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x5)

DELETE_IN_AGA(x1, x2, x3)  =  DELETE_IN_AGA(x2)

U5_AGA(x1, x2, x3, x4, x5)  =  U5_AGA(x2, x5)

U4_GA(x1, x2, x3, x4, x5)  =  U4_GA(x3, x5)

U2_GA(x1, x2, x3)  =  U2_GA(x2, x3)

SAFE_IN_G(x1)  =  SAFE_IN_G(x1)

U6_G(x1, x2, x3)  =  U6_G(x2, x3)

NOATTACK_IN_GGG(x1, x2, x3)  =  NOATTACK_IN_GGG(x1, x2, x3)

U8_GGG(x1, x2, x3, x4, x5)  =  U8_GGG(x1, x2, x3, x4, x5)

=_IN_AG(x1, x2)  =  =_IN_AG(x2)

U9_GGG(x1, x2, x3, x4, x5, x6)  =  U9_GGG(x1, x2, x3, x4, x5, x6)

U10_GGG(x1, x2, x3, x4, x5)  =  U10_GGG(x1, x2, x3, x4, x5)

NOUNIFY_IN_GG(x1, x2)  =  NOUNIFY_IN_GG(x1, x2)

U22_GG(x1, x2, x3)  =  U22_GG(x3)

NOT_IN_GG(x1, x2)  =  NOT_IN_GG(x1, x2)

U56_GG(x1, x2, x3)  =  U56_GG(x3)

CALL1_IN_GG(x1, x2)  =  CALL1_IN_GG(x1, x2)

U58_GG(x1, x2, x3)  =  U58_GG(x3)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U57_GG(x1, x2, x3)  =  U57_GG(x3)

FAIL_IN_  =  FAIL_IN_

U59_^1(x1)  =  U59_^1(x1)

FAILURE_IN_G(x1)  =  FAILURE_IN_G(x1)

U11_GGG(x1, x2, x3, x4, x5)  =  U11_GGG(x1, x2, x3, x4, x5)

U12_GGG(x1, x2, x3, x4, x5, x6)  =  U12_GGG(x1, x2, x3, x4, x5, x6)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)

U23_GGA(x1, x2, x3, x4)  =  U23_GGA(x4)

U24_GGA(x1, x2, x3, x4)  =  U24_GGA(x4)

U25_GGA(x1, x2, x3, x4)  =  U25_GGA(x4)

U26_GGA(x1, x2, x3, x4)  =  U26_GGA(x4)

U13_GGG(x1, x2, x3, x4, x5, x6, x7)  =  U13_GGG(x1, x2, x3, x4, x5, x6, x7)

U14_GGG(x1, x2, x3, x4, x5, x6)  =  U14_GGG(x1, x2, x3, x4, x5, x6)

U15_GGG(x1, x2, x3, x4, x5, x6)  =  U15_GGG(x1, x3, x4, x5, x6)

U16_GGG(x1, x2, x3, x4, x5, x6, x7)  =  U16_GGG(x1, x3, x4, x5, x6, x7)

ISPLUS_IN_GGG(x1, x2, x3)  =  ISPLUS_IN_GGG(x1, x2, x3)

U23_GGG(x1, x2, x3, x4)  =  U23_GGG(x4)

U24_GGG(x1, x2, x3, x4)  =  U24_GGG(x4)

U25_GGG(x1, x2, x3, x4)  =  U25_GGG(x4)

U26_GGG(x1, x2, x3, x4)  =  U26_GGG(x4)

U17_GGG(x1, x2, x3, x4, x5, x6, x7)  =  U17_GGG(x1, x3, x4, x5, x6, x7)

U18_GGG(x1, x2, x3, x4, x5, x6)  =  U18_GGG(x1, x3, x4, x5, x6)

U19_GGG(x1, x2, x3, x4, x5, x6)  =  U19_GGG(x1, x3, x5, x6)

U20_GGG(x1, x2, x3, x4, x5)  =  U20_GGG(x1, x3, x5)

U21_GGG(x1, x2, x3, x4, x5)  =  U21_GGG(x5)

U7_G(x1, x2, x3)  =  U7_G(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(17) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 6 SCCs with 41 less nodes.
----------------------------------------

(18)
Complex Obligation (AND)

----------------------------------------

(19)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)

The TRS R consists of the following rules:

   queens_in_ga(X, Y) -> U1_ga(X, Y, perm_in_ga(X, Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_ga(X, Y, perm_out_ga(X, Y)) -> U2_ga(X, Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, succ(zero)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U8_ggg(X, F, T, N, =_out_ag(X1, X)) -> U9_ggg(X, F, T, N, X1, =_in_ag(X2, F))
   U9_ggg(X, F, T, N, X1, =_out_ag(X2, F)) -> U10_ggg(X, F, T, N, nounify_in_gg(X1, X2))
   nounify_in_gg(X, Y) -> U22_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U56_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U58_gg(X, Y, =_in_gg(X, Y))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U58_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U56_gg(X, Y, call1_out_gg(X, Y)) -> U57_gg(X, Y, fail_in_)
   fail_in_ -> U59_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U59_(failure_out_g(a)) -> fail_out_
   U57_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U22_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U10_ggg(X, F, T, N, nounify_out_gg(X1, X2)) -> U11_ggg(X, F, T, N, =_in_ag(X3, X))
   U11_ggg(X, F, T, N, =_out_ag(X3, X)) -> U12_ggg(X, F, T, N, X3, isPlus_in_gga(F, N, U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U24_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U25_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U26_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U26_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U25_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U24_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U12_ggg(X, F, T, N, X3, isPlus_out_gga(F, N, U)) -> U13_ggg(X, F, T, N, X3, U, =_in_ag(X4, U))
   U13_ggg(X, F, T, N, X3, U, =_out_ag(X4, U)) -> U14_ggg(X, F, T, N, U, nounify_in_gg(X3, X4))
   U14_ggg(X, F, T, N, U, nounify_out_gg(X3, X4)) -> U15_ggg(X, F, T, N, U, =_in_ag(X5, F))
   U15_ggg(X, F, T, N, U, =_out_ag(X5, F)) -> U16_ggg(X, F, T, N, U, X5, isPlus_in_ggg(X, N, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U24_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U25_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U26_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U26_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U25_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U24_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U16_ggg(X, F, T, N, U, X5, isPlus_out_ggg(X, N, U)) -> U17_ggg(X, F, T, N, U, X5, =_in_ag(X6, U))
   U17_ggg(X, F, T, N, U, X5, =_out_ag(X6, U)) -> U18_ggg(X, F, T, N, U, nounify_in_gg(X5, X6))
   U18_ggg(X, F, T, N, U, nounify_out_gg(X5, X6)) -> U19_ggg(X, F, T, N, U, isPlus_in_ggg(N, succ(zero), U))
   U19_ggg(X, F, T, N, U, isPlus_out_ggg(N, succ(zero), U)) -> U20_ggg(X, F, T, N, =_in_ag(N1, U))
   U20_ggg(X, F, T, N, =_out_ag(N1, U)) -> U21_ggg(X, F, T, N, noattack_in_ggg(X, T, N1))
   U21_ggg(X, F, T, N, noattack_out_ggg(X, T, N1)) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, succ(zero))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_ga(X, Y, safe_out_g(Y)) -> queens_out_ga(X, Y)

The argument filtering Pi contains the following mapping:
queens_in_ga(x1, x2)  =  queens_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

U2_ga(x1, x2, x3)  =  U2_ga(x2, x3)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U9_ggg(x1, x2, x3, x4, x5, x6)  =  U9_ggg(x1, x2, x3, x4, x5, x6)

U10_ggg(x1, x2, x3, x4, x5)  =  U10_ggg(x1, x2, x3, x4, x5)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U58_gg(x1, x2, x3)  =  U58_gg(x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

call1_out_gg(x1, x2)  =  call1_out_gg

U57_gg(x1, x2, x3)  =  U57_gg(x3)

fail_in_  =  fail_in_

U59_(x1)  =  U59_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U11_ggg(x1, x2, x3, x4, x5)  =  U11_ggg(x1, x2, x3, x4, x5)

U12_ggg(x1, x2, x3, x4, x5, x6)  =  U12_ggg(x1, x2, x3, x4, x5, x6)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

zero  =  zero

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

succ(x1)  =  succ(x1)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

pred(x1)  =  pred(x1)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x4)

U25_gga(x1, x2, x3, x4)  =  U25_gga(x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U13_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U13_ggg(x1, x2, x3, x4, x5, x6, x7)

U14_ggg(x1, x2, x3, x4, x5, x6)  =  U14_ggg(x1, x2, x3, x4, x5, x6)

U15_ggg(x1, x2, x3, x4, x5, x6)  =  U15_ggg(x1, x3, x4, x5, x6)

U16_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U16_ggg(x1, x3, x4, x5, x6, x7)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U24_ggg(x1, x2, x3, x4)  =  U24_ggg(x4)

U25_ggg(x1, x2, x3, x4)  =  U25_ggg(x4)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U17_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U17_ggg(x1, x3, x4, x5, x6, x7)

U18_ggg(x1, x2, x3, x4, x5, x6)  =  U18_ggg(x1, x3, x4, x5, x6)

U19_ggg(x1, x2, x3, x4, x5, x6)  =  U19_ggg(x1, x3, x5, x6)

U20_ggg(x1, x2, x3, x4, x5)  =  U20_ggg(x1, x3, x5)

U21_ggg(x1, x2, x3, x4, x5)  =  U21_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_ga(x1, x2)  =  queens_out_ga(x2)

ISPLUS_IN_GGG(x1, x2, x3)  =  ISPLUS_IN_GGG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(20) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(21)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(22) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(23)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(24) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


*ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 > 3


*ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


*ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 > 3


----------------------------------------

(25)
YES

----------------------------------------

(26)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   queens_in_ga(X, Y) -> U1_ga(X, Y, perm_in_ga(X, Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_ga(X, Y, perm_out_ga(X, Y)) -> U2_ga(X, Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, succ(zero)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U8_ggg(X, F, T, N, =_out_ag(X1, X)) -> U9_ggg(X, F, T, N, X1, =_in_ag(X2, F))
   U9_ggg(X, F, T, N, X1, =_out_ag(X2, F)) -> U10_ggg(X, F, T, N, nounify_in_gg(X1, X2))
   nounify_in_gg(X, Y) -> U22_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U56_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U58_gg(X, Y, =_in_gg(X, Y))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U58_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U56_gg(X, Y, call1_out_gg(X, Y)) -> U57_gg(X, Y, fail_in_)
   fail_in_ -> U59_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U59_(failure_out_g(a)) -> fail_out_
   U57_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U22_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U10_ggg(X, F, T, N, nounify_out_gg(X1, X2)) -> U11_ggg(X, F, T, N, =_in_ag(X3, X))
   U11_ggg(X, F, T, N, =_out_ag(X3, X)) -> U12_ggg(X, F, T, N, X3, isPlus_in_gga(F, N, U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U24_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U25_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U26_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U26_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U25_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U24_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U12_ggg(X, F, T, N, X3, isPlus_out_gga(F, N, U)) -> U13_ggg(X, F, T, N, X3, U, =_in_ag(X4, U))
   U13_ggg(X, F, T, N, X3, U, =_out_ag(X4, U)) -> U14_ggg(X, F, T, N, U, nounify_in_gg(X3, X4))
   U14_ggg(X, F, T, N, U, nounify_out_gg(X3, X4)) -> U15_ggg(X, F, T, N, U, =_in_ag(X5, F))
   U15_ggg(X, F, T, N, U, =_out_ag(X5, F)) -> U16_ggg(X, F, T, N, U, X5, isPlus_in_ggg(X, N, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U24_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U25_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U26_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U26_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U25_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U24_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U16_ggg(X, F, T, N, U, X5, isPlus_out_ggg(X, N, U)) -> U17_ggg(X, F, T, N, U, X5, =_in_ag(X6, U))
   U17_ggg(X, F, T, N, U, X5, =_out_ag(X6, U)) -> U18_ggg(X, F, T, N, U, nounify_in_gg(X5, X6))
   U18_ggg(X, F, T, N, U, nounify_out_gg(X5, X6)) -> U19_ggg(X, F, T, N, U, isPlus_in_ggg(N, succ(zero), U))
   U19_ggg(X, F, T, N, U, isPlus_out_ggg(N, succ(zero), U)) -> U20_ggg(X, F, T, N, =_in_ag(N1, U))
   U20_ggg(X, F, T, N, =_out_ag(N1, U)) -> U21_ggg(X, F, T, N, noattack_in_ggg(X, T, N1))
   U21_ggg(X, F, T, N, noattack_out_ggg(X, T, N1)) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, succ(zero))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_ga(X, Y, safe_out_g(Y)) -> queens_out_ga(X, Y)

The argument filtering Pi contains the following mapping:
queens_in_ga(x1, x2)  =  queens_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

U2_ga(x1, x2, x3)  =  U2_ga(x2, x3)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U9_ggg(x1, x2, x3, x4, x5, x6)  =  U9_ggg(x1, x2, x3, x4, x5, x6)

U10_ggg(x1, x2, x3, x4, x5)  =  U10_ggg(x1, x2, x3, x4, x5)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U58_gg(x1, x2, x3)  =  U58_gg(x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

call1_out_gg(x1, x2)  =  call1_out_gg

U57_gg(x1, x2, x3)  =  U57_gg(x3)

fail_in_  =  fail_in_

U59_(x1)  =  U59_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U11_ggg(x1, x2, x3, x4, x5)  =  U11_ggg(x1, x2, x3, x4, x5)

U12_ggg(x1, x2, x3, x4, x5, x6)  =  U12_ggg(x1, x2, x3, x4, x5, x6)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

zero  =  zero

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

succ(x1)  =  succ(x1)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

pred(x1)  =  pred(x1)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x4)

U25_gga(x1, x2, x3, x4)  =  U25_gga(x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U13_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U13_ggg(x1, x2, x3, x4, x5, x6, x7)

U14_ggg(x1, x2, x3, x4, x5, x6)  =  U14_ggg(x1, x2, x3, x4, x5, x6)

U15_ggg(x1, x2, x3, x4, x5, x6)  =  U15_ggg(x1, x3, x4, x5, x6)

U16_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U16_ggg(x1, x3, x4, x5, x6, x7)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U24_ggg(x1, x2, x3, x4)  =  U24_ggg(x4)

U25_ggg(x1, x2, x3, x4)  =  U25_ggg(x4)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U17_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U17_ggg(x1, x3, x4, x5, x6, x7)

U18_ggg(x1, x2, x3, x4, x5, x6)  =  U18_ggg(x1, x3, x4, x5, x6)

U19_ggg(x1, x2, x3, x4, x5, x6)  =  U19_ggg(x1, x3, x5, x6)

U20_ggg(x1, x2, x3, x4, x5)  =  U20_ggg(x1, x3, x5)

U21_ggg(x1, x2, x3, x4, x5)  =  U21_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_ga(x1, x2)  =  queens_out_ga(x2)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(27) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(28)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGA(succ(X), pred(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), succ(Y), Z) -> ISPLUS_IN_GGA(X, Y, Z)
   ISPLUS_IN_GGA(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

ISPLUS_IN_GGA(x1, x2, x3)  =  ISPLUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(29) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGA(succ(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)
   ISPLUS_IN_GGA(succ(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
   ISPLUS_IN_GGA(pred(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
   ISPLUS_IN_GGA(pred(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(31) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISPLUS_IN_GGA(succ(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISPLUS_IN_GGA(succ(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISPLUS_IN_GGA(pred(X), succ(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISPLUS_IN_GGA(pred(X), pred(Y)) -> ISPLUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(32)
YES

----------------------------------------

(33)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U8_GGG(X, F, T, N, =_out_ag(X1, X)) -> U9_GGG(X, F, T, N, X1, =_in_ag(X2, F))
   U9_GGG(X, F, T, N, X1, =_out_ag(X2, F)) -> U10_GGG(X, F, T, N, nounify_in_gg(X1, X2))
   U10_GGG(X, F, T, N, nounify_out_gg(X1, X2)) -> U11_GGG(X, F, T, N, =_in_ag(X3, X))
   U11_GGG(X, F, T, N, =_out_ag(X3, X)) -> U12_GGG(X, F, T, N, X3, isPlus_in_gga(F, N, U))
   U12_GGG(X, F, T, N, X3, isPlus_out_gga(F, N, U)) -> U13_GGG(X, F, T, N, X3, U, =_in_ag(X4, U))
   U13_GGG(X, F, T, N, X3, U, =_out_ag(X4, U)) -> U14_GGG(X, F, T, N, U, nounify_in_gg(X3, X4))
   U14_GGG(X, F, T, N, U, nounify_out_gg(X3, X4)) -> U15_GGG(X, F, T, N, U, =_in_ag(X5, F))
   U15_GGG(X, F, T, N, U, =_out_ag(X5, F)) -> U16_GGG(X, F, T, N, U, X5, isPlus_in_ggg(X, N, U))
   U16_GGG(X, F, T, N, U, X5, isPlus_out_ggg(X, N, U)) -> U17_GGG(X, F, T, N, U, X5, =_in_ag(X6, U))
   U17_GGG(X, F, T, N, U, X5, =_out_ag(X6, U)) -> U18_GGG(X, F, T, N, U, nounify_in_gg(X5, X6))
   U18_GGG(X, F, T, N, U, nounify_out_gg(X5, X6)) -> U19_GGG(X, F, T, N, U, isPlus_in_ggg(N, succ(zero), U))
   U19_GGG(X, F, T, N, U, isPlus_out_ggg(N, succ(zero), U)) -> U20_GGG(X, F, T, N, =_in_ag(N1, U))
   U20_GGG(X, F, T, N, =_out_ag(N1, U)) -> NOATTACK_IN_GGG(X, T, N1)
   NOATTACK_IN_GGG(X, .(F, T), N) -> U8_GGG(X, F, T, N, =_in_ag(X1, X))

The TRS R consists of the following rules:

   queens_in_ga(X, Y) -> U1_ga(X, Y, perm_in_ga(X, Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_ga(X, Y, perm_out_ga(X, Y)) -> U2_ga(X, Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, succ(zero)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U8_ggg(X, F, T, N, =_out_ag(X1, X)) -> U9_ggg(X, F, T, N, X1, =_in_ag(X2, F))
   U9_ggg(X, F, T, N, X1, =_out_ag(X2, F)) -> U10_ggg(X, F, T, N, nounify_in_gg(X1, X2))
   nounify_in_gg(X, Y) -> U22_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U56_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U58_gg(X, Y, =_in_gg(X, Y))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U58_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U56_gg(X, Y, call1_out_gg(X, Y)) -> U57_gg(X, Y, fail_in_)
   fail_in_ -> U59_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U59_(failure_out_g(a)) -> fail_out_
   U57_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U22_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U10_ggg(X, F, T, N, nounify_out_gg(X1, X2)) -> U11_ggg(X, F, T, N, =_in_ag(X3, X))
   U11_ggg(X, F, T, N, =_out_ag(X3, X)) -> U12_ggg(X, F, T, N, X3, isPlus_in_gga(F, N, U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U24_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U25_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U26_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U26_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U25_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U24_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U12_ggg(X, F, T, N, X3, isPlus_out_gga(F, N, U)) -> U13_ggg(X, F, T, N, X3, U, =_in_ag(X4, U))
   U13_ggg(X, F, T, N, X3, U, =_out_ag(X4, U)) -> U14_ggg(X, F, T, N, U, nounify_in_gg(X3, X4))
   U14_ggg(X, F, T, N, U, nounify_out_gg(X3, X4)) -> U15_ggg(X, F, T, N, U, =_in_ag(X5, F))
   U15_ggg(X, F, T, N, U, =_out_ag(X5, F)) -> U16_ggg(X, F, T, N, U, X5, isPlus_in_ggg(X, N, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U24_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U25_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U26_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U26_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U25_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U24_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U16_ggg(X, F, T, N, U, X5, isPlus_out_ggg(X, N, U)) -> U17_ggg(X, F, T, N, U, X5, =_in_ag(X6, U))
   U17_ggg(X, F, T, N, U, X5, =_out_ag(X6, U)) -> U18_ggg(X, F, T, N, U, nounify_in_gg(X5, X6))
   U18_ggg(X, F, T, N, U, nounify_out_gg(X5, X6)) -> U19_ggg(X, F, T, N, U, isPlus_in_ggg(N, succ(zero), U))
   U19_ggg(X, F, T, N, U, isPlus_out_ggg(N, succ(zero), U)) -> U20_ggg(X, F, T, N, =_in_ag(N1, U))
   U20_ggg(X, F, T, N, =_out_ag(N1, U)) -> U21_ggg(X, F, T, N, noattack_in_ggg(X, T, N1))
   U21_ggg(X, F, T, N, noattack_out_ggg(X, T, N1)) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, succ(zero))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_ga(X, Y, safe_out_g(Y)) -> queens_out_ga(X, Y)

The argument filtering Pi contains the following mapping:
queens_in_ga(x1, x2)  =  queens_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

U2_ga(x1, x2, x3)  =  U2_ga(x2, x3)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U9_ggg(x1, x2, x3, x4, x5, x6)  =  U9_ggg(x1, x2, x3, x4, x5, x6)

U10_ggg(x1, x2, x3, x4, x5)  =  U10_ggg(x1, x2, x3, x4, x5)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U58_gg(x1, x2, x3)  =  U58_gg(x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

call1_out_gg(x1, x2)  =  call1_out_gg

U57_gg(x1, x2, x3)  =  U57_gg(x3)

fail_in_  =  fail_in_

U59_(x1)  =  U59_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U11_ggg(x1, x2, x3, x4, x5)  =  U11_ggg(x1, x2, x3, x4, x5)

U12_ggg(x1, x2, x3, x4, x5, x6)  =  U12_ggg(x1, x2, x3, x4, x5, x6)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

zero  =  zero

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

succ(x1)  =  succ(x1)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

pred(x1)  =  pred(x1)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x4)

U25_gga(x1, x2, x3, x4)  =  U25_gga(x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U13_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U13_ggg(x1, x2, x3, x4, x5, x6, x7)

U14_ggg(x1, x2, x3, x4, x5, x6)  =  U14_ggg(x1, x2, x3, x4, x5, x6)

U15_ggg(x1, x2, x3, x4, x5, x6)  =  U15_ggg(x1, x3, x4, x5, x6)

U16_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U16_ggg(x1, x3, x4, x5, x6, x7)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U24_ggg(x1, x2, x3, x4)  =  U24_ggg(x4)

U25_ggg(x1, x2, x3, x4)  =  U25_ggg(x4)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U17_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U17_ggg(x1, x3, x4, x5, x6, x7)

U18_ggg(x1, x2, x3, x4, x5, x6)  =  U18_ggg(x1, x3, x4, x5, x6)

U19_ggg(x1, x2, x3, x4, x5, x6)  =  U19_ggg(x1, x3, x5, x6)

U20_ggg(x1, x2, x3, x4, x5)  =  U20_ggg(x1, x3, x5)

U21_ggg(x1, x2, x3, x4, x5)  =  U21_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_ga(x1, x2)  =  queens_out_ga(x2)

NOATTACK_IN_GGG(x1, x2, x3)  =  NOATTACK_IN_GGG(x1, x2, x3)

U8_GGG(x1, x2, x3, x4, x5)  =  U8_GGG(x1, x2, x3, x4, x5)

U9_GGG(x1, x2, x3, x4, x5, x6)  =  U9_GGG(x1, x2, x3, x4, x5, x6)

U10_GGG(x1, x2, x3, x4, x5)  =  U10_GGG(x1, x2, x3, x4, x5)

U11_GGG(x1, x2, x3, x4, x5)  =  U11_GGG(x1, x2, x3, x4, x5)

U12_GGG(x1, x2, x3, x4, x5, x6)  =  U12_GGG(x1, x2, x3, x4, x5, x6)

U13_GGG(x1, x2, x3, x4, x5, x6, x7)  =  U13_GGG(x1, x2, x3, x4, x5, x6, x7)

U14_GGG(x1, x2, x3, x4, x5, x6)  =  U14_GGG(x1, x2, x3, x4, x5, x6)

U15_GGG(x1, x2, x3, x4, x5, x6)  =  U15_GGG(x1, x3, x4, x5, x6)

U16_GGG(x1, x2, x3, x4, x5, x6, x7)  =  U16_GGG(x1, x3, x4, x5, x6, x7)

U17_GGG(x1, x2, x3, x4, x5, x6, x7)  =  U17_GGG(x1, x3, x4, x5, x6, x7)

U18_GGG(x1, x2, x3, x4, x5, x6)  =  U18_GGG(x1, x3, x4, x5, x6)

U19_GGG(x1, x2, x3, x4, x5, x6)  =  U19_GGG(x1, x3, x5, x6)

U20_GGG(x1, x2, x3, x4, x5)  =  U20_GGG(x1, x3, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(34) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(35)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U8_GGG(X, F, T, N, =_out_ag(X1, X)) -> U9_GGG(X, F, T, N, X1, =_in_ag(X2, F))
   U9_GGG(X, F, T, N, X1, =_out_ag(X2, F)) -> U10_GGG(X, F, T, N, nounify_in_gg(X1, X2))
   U10_GGG(X, F, T, N, nounify_out_gg(X1, X2)) -> U11_GGG(X, F, T, N, =_in_ag(X3, X))
   U11_GGG(X, F, T, N, =_out_ag(X3, X)) -> U12_GGG(X, F, T, N, X3, isPlus_in_gga(F, N, U))
   U12_GGG(X, F, T, N, X3, isPlus_out_gga(F, N, U)) -> U13_GGG(X, F, T, N, X3, U, =_in_ag(X4, U))
   U13_GGG(X, F, T, N, X3, U, =_out_ag(X4, U)) -> U14_GGG(X, F, T, N, U, nounify_in_gg(X3, X4))
   U14_GGG(X, F, T, N, U, nounify_out_gg(X3, X4)) -> U15_GGG(X, F, T, N, U, =_in_ag(X5, F))
   U15_GGG(X, F, T, N, U, =_out_ag(X5, F)) -> U16_GGG(X, F, T, N, U, X5, isPlus_in_ggg(X, N, U))
   U16_GGG(X, F, T, N, U, X5, isPlus_out_ggg(X, N, U)) -> U17_GGG(X, F, T, N, U, X5, =_in_ag(X6, U))
   U17_GGG(X, F, T, N, U, X5, =_out_ag(X6, U)) -> U18_GGG(X, F, T, N, U, nounify_in_gg(X5, X6))
   U18_GGG(X, F, T, N, U, nounify_out_gg(X5, X6)) -> U19_GGG(X, F, T, N, U, isPlus_in_ggg(N, succ(zero), U))
   U19_GGG(X, F, T, N, U, isPlus_out_ggg(N, succ(zero), U)) -> U20_GGG(X, F, T, N, =_in_ag(N1, U))
   U20_GGG(X, F, T, N, =_out_ag(N1, U)) -> NOATTACK_IN_GGG(X, T, N1)
   NOATTACK_IN_GGG(X, .(F, T), N) -> U8_GGG(X, F, T, N, =_in_ag(X1, X))

The TRS R consists of the following rules:

   =_in_ag(X, X) -> =_out_ag(X, X)
   nounify_in_gg(X, Y) -> U22_gg(X, Y, not_in_gg(X, Y))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U24_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U25_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U26_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U24_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U25_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U26_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U22_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U24_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U25_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U26_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U24_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U25_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U26_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   not_in_gg(X, Y) -> U56_gg(X, Y, call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U56_gg(X, Y, call1_out_gg(X, Y)) -> U57_gg(X, Y, fail_in_)
   call1_in_gg(X, Y) -> U58_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   U58_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   fail_in_ -> U59_(failure_in_g(a))
   =_in_gg(X, X) -> =_out_gg(X, X)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U58_gg(x1, x2, x3)  =  U58_gg(x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

call1_out_gg(x1, x2)  =  call1_out_gg

U57_gg(x1, x2, x3)  =  U57_gg(x3)

fail_in_  =  fail_in_

U59_(x1)  =  U59_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

zero  =  zero

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

succ(x1)  =  succ(x1)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

pred(x1)  =  pred(x1)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x4)

U25_gga(x1, x2, x3, x4)  =  U25_gga(x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U24_ggg(x1, x2, x3, x4)  =  U24_ggg(x4)

U25_ggg(x1, x2, x3, x4)  =  U25_ggg(x4)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

NOATTACK_IN_GGG(x1, x2, x3)  =  NOATTACK_IN_GGG(x1, x2, x3)

U8_GGG(x1, x2, x3, x4, x5)  =  U8_GGG(x1, x2, x3, x4, x5)

U9_GGG(x1, x2, x3, x4, x5, x6)  =  U9_GGG(x1, x2, x3, x4, x5, x6)

U10_GGG(x1, x2, x3, x4, x5)  =  U10_GGG(x1, x2, x3, x4, x5)

U11_GGG(x1, x2, x3, x4, x5)  =  U11_GGG(x1, x2, x3, x4, x5)

U12_GGG(x1, x2, x3, x4, x5, x6)  =  U12_GGG(x1, x2, x3, x4, x5, x6)

U13_GGG(x1, x2, x3, x4, x5, x6, x7)  =  U13_GGG(x1, x2, x3, x4, x5, x6, x7)

U14_GGG(x1, x2, x3, x4, x5, x6)  =  U14_GGG(x1, x2, x3, x4, x5, x6)

U15_GGG(x1, x2, x3, x4, x5, x6)  =  U15_GGG(x1, x3, x4, x5, x6)

U16_GGG(x1, x2, x3, x4, x5, x6, x7)  =  U16_GGG(x1, x3, x4, x5, x6, x7)

U17_GGG(x1, x2, x3, x4, x5, x6, x7)  =  U17_GGG(x1, x3, x4, x5, x6, x7)

U18_GGG(x1, x2, x3, x4, x5, x6)  =  U18_GGG(x1, x3, x4, x5, x6)

U19_GGG(x1, x2, x3, x4, x5, x6)  =  U19_GGG(x1, x3, x5, x6)

U20_GGG(x1, x2, x3, x4, x5)  =  U20_GGG(x1, x3, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(36) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(37)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U8_GGG(X, F, T, N, =_out_ag(X1)) -> U9_GGG(X, F, T, N, X1, =_in_ag(F))
   U9_GGG(X, F, T, N, X1, =_out_ag(X2)) -> U10_GGG(X, F, T, N, nounify_in_gg(X1, X2))
   U10_GGG(X, F, T, N, nounify_out_gg) -> U11_GGG(X, F, T, N, =_in_ag(X))
   U11_GGG(X, F, T, N, =_out_ag(X3)) -> U12_GGG(X, F, T, N, X3, isPlus_in_gga(F, N))
   U12_GGG(X, F, T, N, X3, isPlus_out_gga(U)) -> U13_GGG(X, F, T, N, X3, U, =_in_ag(U))
   U13_GGG(X, F, T, N, X3, U, =_out_ag(X4)) -> U14_GGG(X, F, T, N, U, nounify_in_gg(X3, X4))
   U14_GGG(X, F, T, N, U, nounify_out_gg) -> U15_GGG(X, T, N, U, =_in_ag(F))
   U15_GGG(X, T, N, U, =_out_ag(X5)) -> U16_GGG(X, T, N, U, X5, isPlus_in_ggg(X, N, U))
   U16_GGG(X, T, N, U, X5, isPlus_out_ggg) -> U17_GGG(X, T, N, U, X5, =_in_ag(U))
   U17_GGG(X, T, N, U, X5, =_out_ag(X6)) -> U18_GGG(X, T, N, U, nounify_in_gg(X5, X6))
   U18_GGG(X, T, N, U, nounify_out_gg) -> U19_GGG(X, T, U, isPlus_in_ggg(N, succ(zero), U))
   U19_GGG(X, T, U, isPlus_out_ggg) -> U20_GGG(X, T, =_in_ag(U))
   U20_GGG(X, T, =_out_ag(N1)) -> NOATTACK_IN_GGG(X, T, N1)
   NOATTACK_IN_GGG(X, .(F, T), N) -> U8_GGG(X, F, T, N, =_in_ag(X))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   nounify_in_gg(X, Y) -> U22_gg(not_in_gg(X, Y))
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), succ(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), pred(Y)) -> U24_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), succ(Y)) -> U25_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), pred(Y)) -> U26_gga(isPlus_in_gga(X, Y))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U23_ggg(isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U24_ggg(isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U25_ggg(isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U26_ggg(isPlus_in_ggg(X, Y, Z))
   U22_gg(not_out_gg) -> nounify_out_gg
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   U24_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U25_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U26_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U23_ggg(isPlus_out_ggg) -> isPlus_out_ggg
   U24_ggg(isPlus_out_ggg) -> isPlus_out_ggg
   U25_ggg(isPlus_out_ggg) -> isPlus_out_ggg
   U26_ggg(isPlus_out_ggg) -> isPlus_out_ggg
   not_in_gg(X, Y) -> U56_gg(call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg
   U56_gg(call1_out_gg) -> U57_gg(fail_in_)
   call1_in_gg(X, Y) -> U58_gg(=_in_gg(X, Y))
   U57_gg(fail_out_) -> not_out_gg
   U58_gg(=_out_gg) -> call1_out_gg
   fail_in_ -> U59_(failure_in_g(a))
   =_in_gg(X, X) -> =_out_gg

The set Q consists of the following terms:

   =_in_ag(x0)
   nounify_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   isPlus_in_ggg(x0, x1, x2)
   U22_gg(x0)
   U23_gga(x0)
   U24_gga(x0)
   U25_gga(x0)
   U26_gga(x0)
   U23_ggg(x0)
   U24_ggg(x0)
   U25_ggg(x0)
   U26_ggg(x0)
   not_in_gg(x0, x1)
   U56_gg(x0)
   call1_in_gg(x0, x1)
   U57_gg(x0)
   U58_gg(x0)
   fail_in_
   =_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(38) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*U9_GGG(X, F, T, N, X1, =_out_ag(X2)) -> U10_GGG(X, F, T, N, nounify_in_gg(X1, X2))
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 >= 4


*NOATTACK_IN_GGG(X, .(F, T), N) -> U8_GGG(X, F, T, N, =_in_ag(X))
The graph contains the following edges 1 >= 1, 2 > 2, 2 > 3, 3 >= 4


*U10_GGG(X, F, T, N, nounify_out_gg) -> U11_GGG(X, F, T, N, =_in_ag(X))
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 >= 4


*U8_GGG(X, F, T, N, =_out_ag(X1)) -> U9_GGG(X, F, T, N, X1, =_in_ag(F))
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 >= 4, 5 > 5


*U11_GGG(X, F, T, N, =_out_ag(X3)) -> U12_GGG(X, F, T, N, X3, isPlus_in_gga(F, N))
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 >= 4, 5 > 5


*U12_GGG(X, F, T, N, X3, isPlus_out_gga(U)) -> U13_GGG(X, F, T, N, X3, U, =_in_ag(U))
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 >= 4, 5 >= 5, 6 > 6


*U13_GGG(X, F, T, N, X3, U, =_out_ag(X4)) -> U14_GGG(X, F, T, N, U, nounify_in_gg(X3, X4))
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 >= 4, 6 >= 5


*U14_GGG(X, F, T, N, U, nounify_out_gg) -> U15_GGG(X, T, N, U, =_in_ag(F))
The graph contains the following edges 1 >= 1, 3 >= 2, 4 >= 3, 5 >= 4


*U15_GGG(X, T, N, U, =_out_ag(X5)) -> U16_GGG(X, T, N, U, X5, isPlus_in_ggg(X, N, U))
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 >= 4, 5 > 5


*U16_GGG(X, T, N, U, X5, isPlus_out_ggg) -> U17_GGG(X, T, N, U, X5, =_in_ag(U))
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 >= 4, 5 >= 5


*U17_GGG(X, T, N, U, X5, =_out_ag(X6)) -> U18_GGG(X, T, N, U, nounify_in_gg(X5, X6))
The graph contains the following edges 1 >= 1, 2 >= 2, 3 >= 3, 4 >= 4


*U18_GGG(X, T, N, U, nounify_out_gg) -> U19_GGG(X, T, U, isPlus_in_ggg(N, succ(zero), U))
The graph contains the following edges 1 >= 1, 2 >= 2, 4 >= 3


*U19_GGG(X, T, U, isPlus_out_ggg) -> U20_GGG(X, T, =_in_ag(U))
The graph contains the following edges 1 >= 1, 2 >= 2


*U20_GGG(X, T, =_out_ag(N1)) -> NOATTACK_IN_GGG(X, T, N1)
The graph contains the following edges 1 >= 1, 2 >= 2, 3 > 3


----------------------------------------

(39)
YES

----------------------------------------

(40)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_G(X, Y, noattack_out_ggg(X, Y, succ(zero))) -> SAFE_IN_G(Y)
   SAFE_IN_G(.(X, Y)) -> U6_G(X, Y, noattack_in_ggg(X, Y, succ(zero)))

The TRS R consists of the following rules:

   queens_in_ga(X, Y) -> U1_ga(X, Y, perm_in_ga(X, Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_ga(X, Y, perm_out_ga(X, Y)) -> U2_ga(X, Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, succ(zero)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U8_ggg(X, F, T, N, =_out_ag(X1, X)) -> U9_ggg(X, F, T, N, X1, =_in_ag(X2, F))
   U9_ggg(X, F, T, N, X1, =_out_ag(X2, F)) -> U10_ggg(X, F, T, N, nounify_in_gg(X1, X2))
   nounify_in_gg(X, Y) -> U22_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U56_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U58_gg(X, Y, =_in_gg(X, Y))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U58_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U56_gg(X, Y, call1_out_gg(X, Y)) -> U57_gg(X, Y, fail_in_)
   fail_in_ -> U59_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U59_(failure_out_g(a)) -> fail_out_
   U57_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U22_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U10_ggg(X, F, T, N, nounify_out_gg(X1, X2)) -> U11_ggg(X, F, T, N, =_in_ag(X3, X))
   U11_ggg(X, F, T, N, =_out_ag(X3, X)) -> U12_ggg(X, F, T, N, X3, isPlus_in_gga(F, N, U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U24_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U25_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U26_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U26_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U25_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U24_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U12_ggg(X, F, T, N, X3, isPlus_out_gga(F, N, U)) -> U13_ggg(X, F, T, N, X3, U, =_in_ag(X4, U))
   U13_ggg(X, F, T, N, X3, U, =_out_ag(X4, U)) -> U14_ggg(X, F, T, N, U, nounify_in_gg(X3, X4))
   U14_ggg(X, F, T, N, U, nounify_out_gg(X3, X4)) -> U15_ggg(X, F, T, N, U, =_in_ag(X5, F))
   U15_ggg(X, F, T, N, U, =_out_ag(X5, F)) -> U16_ggg(X, F, T, N, U, X5, isPlus_in_ggg(X, N, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U24_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U25_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U26_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U26_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U25_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U24_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U16_ggg(X, F, T, N, U, X5, isPlus_out_ggg(X, N, U)) -> U17_ggg(X, F, T, N, U, X5, =_in_ag(X6, U))
   U17_ggg(X, F, T, N, U, X5, =_out_ag(X6, U)) -> U18_ggg(X, F, T, N, U, nounify_in_gg(X5, X6))
   U18_ggg(X, F, T, N, U, nounify_out_gg(X5, X6)) -> U19_ggg(X, F, T, N, U, isPlus_in_ggg(N, succ(zero), U))
   U19_ggg(X, F, T, N, U, isPlus_out_ggg(N, succ(zero), U)) -> U20_ggg(X, F, T, N, =_in_ag(N1, U))
   U20_ggg(X, F, T, N, =_out_ag(N1, U)) -> U21_ggg(X, F, T, N, noattack_in_ggg(X, T, N1))
   U21_ggg(X, F, T, N, noattack_out_ggg(X, T, N1)) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, succ(zero))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_ga(X, Y, safe_out_g(Y)) -> queens_out_ga(X, Y)

The argument filtering Pi contains the following mapping:
queens_in_ga(x1, x2)  =  queens_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

U2_ga(x1, x2, x3)  =  U2_ga(x2, x3)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U9_ggg(x1, x2, x3, x4, x5, x6)  =  U9_ggg(x1, x2, x3, x4, x5, x6)

U10_ggg(x1, x2, x3, x4, x5)  =  U10_ggg(x1, x2, x3, x4, x5)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U58_gg(x1, x2, x3)  =  U58_gg(x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

call1_out_gg(x1, x2)  =  call1_out_gg

U57_gg(x1, x2, x3)  =  U57_gg(x3)

fail_in_  =  fail_in_

U59_(x1)  =  U59_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U11_ggg(x1, x2, x3, x4, x5)  =  U11_ggg(x1, x2, x3, x4, x5)

U12_ggg(x1, x2, x3, x4, x5, x6)  =  U12_ggg(x1, x2, x3, x4, x5, x6)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

zero  =  zero

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

succ(x1)  =  succ(x1)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

pred(x1)  =  pred(x1)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x4)

U25_gga(x1, x2, x3, x4)  =  U25_gga(x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U13_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U13_ggg(x1, x2, x3, x4, x5, x6, x7)

U14_ggg(x1, x2, x3, x4, x5, x6)  =  U14_ggg(x1, x2, x3, x4, x5, x6)

U15_ggg(x1, x2, x3, x4, x5, x6)  =  U15_ggg(x1, x3, x4, x5, x6)

U16_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U16_ggg(x1, x3, x4, x5, x6, x7)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U24_ggg(x1, x2, x3, x4)  =  U24_ggg(x4)

U25_ggg(x1, x2, x3, x4)  =  U25_ggg(x4)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U17_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U17_ggg(x1, x3, x4, x5, x6, x7)

U18_ggg(x1, x2, x3, x4, x5, x6)  =  U18_ggg(x1, x3, x4, x5, x6)

U19_ggg(x1, x2, x3, x4, x5, x6)  =  U19_ggg(x1, x3, x5, x6)

U20_ggg(x1, x2, x3, x4, x5)  =  U20_ggg(x1, x3, x5)

U21_ggg(x1, x2, x3, x4, x5)  =  U21_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_ga(x1, x2)  =  queens_out_ga(x2)

SAFE_IN_G(x1)  =  SAFE_IN_G(x1)

U6_G(x1, x2, x3)  =  U6_G(x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(41) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(42)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U6_G(X, Y, noattack_out_ggg(X, Y, succ(zero))) -> SAFE_IN_G(Y)
   SAFE_IN_G(.(X, Y)) -> U6_G(X, Y, noattack_in_ggg(X, Y, succ(zero)))

The TRS R consists of the following rules:

   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, =_in_ag(X1, X))
   U8_ggg(X, F, T, N, =_out_ag(X1, X)) -> U9_ggg(X, F, T, N, X1, =_in_ag(X2, F))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U9_ggg(X, F, T, N, X1, =_out_ag(X2, F)) -> U10_ggg(X, F, T, N, nounify_in_gg(X1, X2))
   U10_ggg(X, F, T, N, nounify_out_gg(X1, X2)) -> U11_ggg(X, F, T, N, =_in_ag(X3, X))
   nounify_in_gg(X, Y) -> U22_gg(X, Y, not_in_gg(X, Y))
   U11_ggg(X, F, T, N, =_out_ag(X3, X)) -> U12_ggg(X, F, T, N, X3, isPlus_in_gga(F, N, U))
   U22_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U12_ggg(X, F, T, N, X3, isPlus_out_gga(F, N, U)) -> U13_ggg(X, F, T, N, X3, U, =_in_ag(X4, U))
   not_in_gg(X, Y) -> U56_gg(X, Y, call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U24_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U25_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U26_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U13_ggg(X, F, T, N, X3, U, =_out_ag(X4, U)) -> U14_ggg(X, F, T, N, U, nounify_in_gg(X3, X4))
   U56_gg(X, Y, call1_out_gg(X, Y)) -> U57_gg(X, Y, fail_in_)
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U24_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U25_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U26_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U14_ggg(X, F, T, N, U, nounify_out_gg(X3, X4)) -> U15_ggg(X, F, T, N, U, =_in_ag(X5, F))
   call1_in_gg(X, Y) -> U58_gg(X, Y, =_in_gg(X, Y))
   U57_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   U15_ggg(X, F, T, N, U, =_out_ag(X5, F)) -> U16_ggg(X, F, T, N, U, X5, isPlus_in_ggg(X, N, U))
   U58_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   fail_in_ -> U59_(failure_in_g(a))
   U16_ggg(X, F, T, N, U, X5, isPlus_out_ggg(X, N, U)) -> U17_ggg(X, F, T, N, U, X5, =_in_ag(X6, U))
   =_in_gg(X, X) -> =_out_gg(X, X)
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U24_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U25_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U26_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U17_ggg(X, F, T, N, U, X5, =_out_ag(X6, U)) -> U18_ggg(X, F, T, N, U, nounify_in_gg(X5, X6))
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U24_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U25_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U26_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U18_ggg(X, F, T, N, U, nounify_out_gg(X5, X6)) -> U19_ggg(X, F, T, N, U, isPlus_in_ggg(N, succ(zero), U))
   U19_ggg(X, F, T, N, U, isPlus_out_ggg(N, succ(zero), U)) -> U20_ggg(X, F, T, N, =_in_ag(N1, U))
   U20_ggg(X, F, T, N, =_out_ag(N1, U)) -> U21_ggg(X, F, T, N, noattack_in_ggg(X, T, N1))
   U21_ggg(X, F, T, N, noattack_out_ggg(X, T, N1)) -> noattack_out_ggg(X, .(F, T), N)

The argument filtering Pi contains the following mapping:
[]  =  []

.(x1, x2)  =  .(x1, x2)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U9_ggg(x1, x2, x3, x4, x5, x6)  =  U9_ggg(x1, x2, x3, x4, x5, x6)

U10_ggg(x1, x2, x3, x4, x5)  =  U10_ggg(x1, x2, x3, x4, x5)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U58_gg(x1, x2, x3)  =  U58_gg(x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

call1_out_gg(x1, x2)  =  call1_out_gg

U57_gg(x1, x2, x3)  =  U57_gg(x3)

fail_in_  =  fail_in_

U59_(x1)  =  U59_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U11_ggg(x1, x2, x3, x4, x5)  =  U11_ggg(x1, x2, x3, x4, x5)

U12_ggg(x1, x2, x3, x4, x5, x6)  =  U12_ggg(x1, x2, x3, x4, x5, x6)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

zero  =  zero

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

succ(x1)  =  succ(x1)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

pred(x1)  =  pred(x1)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x4)

U25_gga(x1, x2, x3, x4)  =  U25_gga(x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U13_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U13_ggg(x1, x2, x3, x4, x5, x6, x7)

U14_ggg(x1, x2, x3, x4, x5, x6)  =  U14_ggg(x1, x2, x3, x4, x5, x6)

U15_ggg(x1, x2, x3, x4, x5, x6)  =  U15_ggg(x1, x3, x4, x5, x6)

U16_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U16_ggg(x1, x3, x4, x5, x6, x7)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U24_ggg(x1, x2, x3, x4)  =  U24_ggg(x4)

U25_ggg(x1, x2, x3, x4)  =  U25_ggg(x4)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U17_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U17_ggg(x1, x3, x4, x5, x6, x7)

U18_ggg(x1, x2, x3, x4, x5, x6)  =  U18_ggg(x1, x3, x4, x5, x6)

U19_ggg(x1, x2, x3, x4, x5, x6)  =  U19_ggg(x1, x3, x5, x6)

U20_ggg(x1, x2, x3, x4, x5)  =  U20_ggg(x1, x3, x5)

U21_ggg(x1, x2, x3, x4, x5)  =  U21_ggg(x5)

SAFE_IN_G(x1)  =  SAFE_IN_G(x1)

U6_G(x1, x2, x3)  =  U6_G(x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(43) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_G(Y, noattack_out_ggg) -> SAFE_IN_G(Y)
   SAFE_IN_G(.(X, Y)) -> U6_G(Y, noattack_in_ggg(X, Y, succ(zero)))

The TRS R consists of the following rules:

   noattack_in_ggg(X, [], N) -> noattack_out_ggg
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, =_in_ag(X))
   U8_ggg(X, F, T, N, =_out_ag(X1)) -> U9_ggg(X, F, T, N, X1, =_in_ag(F))
   =_in_ag(X) -> =_out_ag(X)
   U9_ggg(X, F, T, N, X1, =_out_ag(X2)) -> U10_ggg(X, F, T, N, nounify_in_gg(X1, X2))
   U10_ggg(X, F, T, N, nounify_out_gg) -> U11_ggg(X, F, T, N, =_in_ag(X))
   nounify_in_gg(X, Y) -> U22_gg(not_in_gg(X, Y))
   U11_ggg(X, F, T, N, =_out_ag(X3)) -> U12_ggg(X, F, T, N, X3, isPlus_in_gga(F, N))
   U22_gg(not_out_gg) -> nounify_out_gg
   U12_ggg(X, F, T, N, X3, isPlus_out_gga(U)) -> U13_ggg(X, F, T, N, X3, U, =_in_ag(U))
   not_in_gg(X, Y) -> U56_gg(call1_in_gg(X, Y))
   not_in_gg(X, Y) -> not_out_gg
   isPlus_in_gga(zero, X) -> isPlus_out_gga(X)
   isPlus_in_gga(succ(X), zero) -> isPlus_out_gga(succ(X))
   isPlus_in_gga(succ(X), succ(Y)) -> U23_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(succ(X), pred(Y)) -> U24_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), zero) -> isPlus_out_gga(pred(X))
   isPlus_in_gga(pred(X), succ(Y)) -> U25_gga(isPlus_in_gga(X, Y))
   isPlus_in_gga(pred(X), pred(Y)) -> U26_gga(isPlus_in_gga(X, Y))
   U13_ggg(X, F, T, N, X3, U, =_out_ag(X4)) -> U14_ggg(X, F, T, N, U, nounify_in_gg(X3, X4))
   U56_gg(call1_out_gg) -> U57_gg(fail_in_)
   U23_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(succ(succ(Z)))
   U24_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U25_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(Z)
   U26_gga(isPlus_out_gga(Z)) -> isPlus_out_gga(pred(pred(Z)))
   U14_ggg(X, F, T, N, U, nounify_out_gg) -> U15_ggg(X, T, N, U, =_in_ag(F))
   call1_in_gg(X, Y) -> U58_gg(=_in_gg(X, Y))
   U57_gg(fail_out_) -> not_out_gg
   U15_ggg(X, T, N, U, =_out_ag(X5)) -> U16_ggg(X, T, N, U, X5, isPlus_in_ggg(X, N, U))
   U58_gg(=_out_gg) -> call1_out_gg
   fail_in_ -> U59_(failure_in_g(a))
   U16_ggg(X, T, N, U, X5, isPlus_out_ggg) -> U17_ggg(X, T, N, U, X5, =_in_ag(U))
   =_in_gg(X, X) -> =_out_gg
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U23_ggg(isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U24_ggg(isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U25_ggg(isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U26_ggg(isPlus_in_ggg(X, Y, Z))
   U17_ggg(X, T, N, U, X5, =_out_ag(X6)) -> U18_ggg(X, T, N, U, nounify_in_gg(X5, X6))
   U23_ggg(isPlus_out_ggg) -> isPlus_out_ggg
   U24_ggg(isPlus_out_ggg) -> isPlus_out_ggg
   U25_ggg(isPlus_out_ggg) -> isPlus_out_ggg
   U26_ggg(isPlus_out_ggg) -> isPlus_out_ggg
   U18_ggg(X, T, N, U, nounify_out_gg) -> U19_ggg(X, T, U, isPlus_in_ggg(N, succ(zero), U))
   U19_ggg(X, T, U, isPlus_out_ggg) -> U20_ggg(X, T, =_in_ag(U))
   U20_ggg(X, T, =_out_ag(N1)) -> U21_ggg(noattack_in_ggg(X, T, N1))
   U21_ggg(noattack_out_ggg) -> noattack_out_ggg

The set Q consists of the following terms:

   noattack_in_ggg(x0, x1, x2)
   U8_ggg(x0, x1, x2, x3, x4)
   =_in_ag(x0)
   U9_ggg(x0, x1, x2, x3, x4, x5)
   U10_ggg(x0, x1, x2, x3, x4)
   nounify_in_gg(x0, x1)
   U11_ggg(x0, x1, x2, x3, x4)
   U22_gg(x0)
   U12_ggg(x0, x1, x2, x3, x4, x5)
   not_in_gg(x0, x1)
   isPlus_in_gga(x0, x1)
   U13_ggg(x0, x1, x2, x3, x4, x5, x6)
   U56_gg(x0)
   U23_gga(x0)
   U24_gga(x0)
   U25_gga(x0)
   U26_gga(x0)
   U14_ggg(x0, x1, x2, x3, x4, x5)
   call1_in_gg(x0, x1)
   U57_gg(x0)
   U15_ggg(x0, x1, x2, x3, x4)
   U58_gg(x0)
   fail_in_
   U16_ggg(x0, x1, x2, x3, x4, x5)
   =_in_gg(x0, x1)
   isPlus_in_ggg(x0, x1, x2)
   U17_ggg(x0, x1, x2, x3, x4, x5)
   U23_ggg(x0)
   U24_ggg(x0)
   U25_ggg(x0)
   U26_ggg(x0)
   U18_ggg(x0, x1, x2, x3, x4)
   U19_ggg(x0, x1, x2, x3)
   U20_ggg(x0, x1, x2)
   U21_ggg(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(45) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*SAFE_IN_G(.(X, Y)) -> U6_G(Y, noattack_in_ggg(X, Y, succ(zero)))
The graph contains the following edges 1 > 1


*U6_G(Y, noattack_out_ggg) -> SAFE_IN_G(Y)
The graph contains the following edges 1 >= 1


----------------------------------------

(46)
YES

----------------------------------------

(47)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DELETE_IN_AGA(X, .(F, T), .(F, R)) -> DELETE_IN_AGA(X, T, R)

The TRS R consists of the following rules:

   queens_in_ga(X, Y) -> U1_ga(X, Y, perm_in_ga(X, Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_ga(X, Y, perm_out_ga(X, Y)) -> U2_ga(X, Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, succ(zero)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U8_ggg(X, F, T, N, =_out_ag(X1, X)) -> U9_ggg(X, F, T, N, X1, =_in_ag(X2, F))
   U9_ggg(X, F, T, N, X1, =_out_ag(X2, F)) -> U10_ggg(X, F, T, N, nounify_in_gg(X1, X2))
   nounify_in_gg(X, Y) -> U22_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U56_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U58_gg(X, Y, =_in_gg(X, Y))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U58_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U56_gg(X, Y, call1_out_gg(X, Y)) -> U57_gg(X, Y, fail_in_)
   fail_in_ -> U59_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U59_(failure_out_g(a)) -> fail_out_
   U57_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U22_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U10_ggg(X, F, T, N, nounify_out_gg(X1, X2)) -> U11_ggg(X, F, T, N, =_in_ag(X3, X))
   U11_ggg(X, F, T, N, =_out_ag(X3, X)) -> U12_ggg(X, F, T, N, X3, isPlus_in_gga(F, N, U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U24_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U25_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U26_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U26_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U25_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U24_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U12_ggg(X, F, T, N, X3, isPlus_out_gga(F, N, U)) -> U13_ggg(X, F, T, N, X3, U, =_in_ag(X4, U))
   U13_ggg(X, F, T, N, X3, U, =_out_ag(X4, U)) -> U14_ggg(X, F, T, N, U, nounify_in_gg(X3, X4))
   U14_ggg(X, F, T, N, U, nounify_out_gg(X3, X4)) -> U15_ggg(X, F, T, N, U, =_in_ag(X5, F))
   U15_ggg(X, F, T, N, U, =_out_ag(X5, F)) -> U16_ggg(X, F, T, N, U, X5, isPlus_in_ggg(X, N, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U24_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U25_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U26_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U26_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U25_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U24_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U16_ggg(X, F, T, N, U, X5, isPlus_out_ggg(X, N, U)) -> U17_ggg(X, F, T, N, U, X5, =_in_ag(X6, U))
   U17_ggg(X, F, T, N, U, X5, =_out_ag(X6, U)) -> U18_ggg(X, F, T, N, U, nounify_in_gg(X5, X6))
   U18_ggg(X, F, T, N, U, nounify_out_gg(X5, X6)) -> U19_ggg(X, F, T, N, U, isPlus_in_ggg(N, succ(zero), U))
   U19_ggg(X, F, T, N, U, isPlus_out_ggg(N, succ(zero), U)) -> U20_ggg(X, F, T, N, =_in_ag(N1, U))
   U20_ggg(X, F, T, N, =_out_ag(N1, U)) -> U21_ggg(X, F, T, N, noattack_in_ggg(X, T, N1))
   U21_ggg(X, F, T, N, noattack_out_ggg(X, T, N1)) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, succ(zero))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_ga(X, Y, safe_out_g(Y)) -> queens_out_ga(X, Y)

The argument filtering Pi contains the following mapping:
queens_in_ga(x1, x2)  =  queens_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

U2_ga(x1, x2, x3)  =  U2_ga(x2, x3)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U9_ggg(x1, x2, x3, x4, x5, x6)  =  U9_ggg(x1, x2, x3, x4, x5, x6)

U10_ggg(x1, x2, x3, x4, x5)  =  U10_ggg(x1, x2, x3, x4, x5)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U58_gg(x1, x2, x3)  =  U58_gg(x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

call1_out_gg(x1, x2)  =  call1_out_gg

U57_gg(x1, x2, x3)  =  U57_gg(x3)

fail_in_  =  fail_in_

U59_(x1)  =  U59_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U11_ggg(x1, x2, x3, x4, x5)  =  U11_ggg(x1, x2, x3, x4, x5)

U12_ggg(x1, x2, x3, x4, x5, x6)  =  U12_ggg(x1, x2, x3, x4, x5, x6)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

zero  =  zero

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

succ(x1)  =  succ(x1)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

pred(x1)  =  pred(x1)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x4)

U25_gga(x1, x2, x3, x4)  =  U25_gga(x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U13_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U13_ggg(x1, x2, x3, x4, x5, x6, x7)

U14_ggg(x1, x2, x3, x4, x5, x6)  =  U14_ggg(x1, x2, x3, x4, x5, x6)

U15_ggg(x1, x2, x3, x4, x5, x6)  =  U15_ggg(x1, x3, x4, x5, x6)

U16_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U16_ggg(x1, x3, x4, x5, x6, x7)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U24_ggg(x1, x2, x3, x4)  =  U24_ggg(x4)

U25_ggg(x1, x2, x3, x4)  =  U25_ggg(x4)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U17_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U17_ggg(x1, x3, x4, x5, x6, x7)

U18_ggg(x1, x2, x3, x4, x5, x6)  =  U18_ggg(x1, x3, x4, x5, x6)

U19_ggg(x1, x2, x3, x4, x5, x6)  =  U19_ggg(x1, x3, x5, x6)

U20_ggg(x1, x2, x3, x4, x5)  =  U20_ggg(x1, x3, x5)

U21_ggg(x1, x2, x3, x4, x5)  =  U21_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_ga(x1, x2)  =  queens_out_ga(x2)

DELETE_IN_AGA(x1, x2, x3)  =  DELETE_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(48) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(49)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DELETE_IN_AGA(X, .(F, T), .(F, R)) -> DELETE_IN_AGA(X, T, R)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

DELETE_IN_AGA(x1, x2, x3)  =  DELETE_IN_AGA(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(50) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(51)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DELETE_IN_AGA(.(F, T)) -> DELETE_IN_AGA(T)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(52) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*DELETE_IN_AGA(.(F, T)) -> DELETE_IN_AGA(T)
The graph contains the following edges 1 > 1


----------------------------------------

(53)
YES

----------------------------------------

(54)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U3_GA(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> PERM_IN_GA(Rest, Res)
   PERM_IN_GA(.(X, Y), .(V, Res)) -> U3_GA(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))

The TRS R consists of the following rules:

   queens_in_ga(X, Y) -> U1_ga(X, Y, perm_in_ga(X, Y))
   perm_in_ga([], []) -> perm_out_ga([], [])
   perm_in_ga(.(X, Y), .(V, Res)) -> U3_ga(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))
   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))
   U3_ga(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> U4_ga(X, Y, V, Res, perm_in_ga(Rest, Res))
   U4_ga(X, Y, V, Res, perm_out_ga(Rest, Res)) -> perm_out_ga(.(X, Y), .(V, Res))
   U1_ga(X, Y, perm_out_ga(X, Y)) -> U2_ga(X, Y, safe_in_g(Y))
   safe_in_g([]) -> safe_out_g([])
   safe_in_g(.(X, Y)) -> U6_g(X, Y, noattack_in_ggg(X, Y, succ(zero)))
   noattack_in_ggg(X, [], N) -> noattack_out_ggg(X, [], N)
   noattack_in_ggg(X, .(F, T), N) -> U8_ggg(X, F, T, N, =_in_ag(X1, X))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U8_ggg(X, F, T, N, =_out_ag(X1, X)) -> U9_ggg(X, F, T, N, X1, =_in_ag(X2, F))
   U9_ggg(X, F, T, N, X1, =_out_ag(X2, F)) -> U10_ggg(X, F, T, N, nounify_in_gg(X1, X2))
   nounify_in_gg(X, Y) -> U22_gg(X, Y, not_in_gg(X, Y))
   not_in_gg(X, Y) -> U56_gg(X, Y, call1_in_gg(X, Y))
   call1_in_gg(X, Y) -> U58_gg(X, Y, =_in_gg(X, Y))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U58_gg(X, Y, =_out_gg(X, Y)) -> call1_out_gg(X, Y)
   U56_gg(X, Y, call1_out_gg(X, Y)) -> U57_gg(X, Y, fail_in_)
   fail_in_ -> U59_(failure_in_g(a))
   failure_in_g(b) -> failure_out_g(b)
   U59_(failure_out_g(a)) -> fail_out_
   U57_gg(X, Y, fail_out_) -> not_out_gg(X, Y)
   not_in_gg(X, Y) -> not_out_gg(X, Y)
   U22_gg(X, Y, not_out_gg(X, Y)) -> nounify_out_gg(X, Y)
   U10_ggg(X, F, T, N, nounify_out_gg(X1, X2)) -> U11_ggg(X, F, T, N, =_in_ag(X3, X))
   U11_ggg(X, F, T, N, =_out_ag(X3, X)) -> U12_ggg(X, F, T, N, X3, isPlus_in_gga(F, N, U))
   isPlus_in_gga(zero, X, X) -> isPlus_out_gga(zero, X, X)
   isPlus_in_gga(succ(X), zero, succ(X)) -> isPlus_out_gga(succ(X), zero, succ(X))
   isPlus_in_gga(succ(X), succ(Y), succ(succ(Z))) -> U23_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(succ(X), pred(Y), Z) -> U24_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), zero, pred(X)) -> isPlus_out_gga(pred(X), zero, pred(X))
   isPlus_in_gga(pred(X), succ(Y), Z) -> U25_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   isPlus_in_gga(pred(X), pred(Y), pred(pred(Z))) -> U26_gga(X, Y, Z, isPlus_in_gga(X, Y, Z))
   U26_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), pred(Y), pred(pred(Z)))
   U25_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(pred(X), succ(Y), Z)
   U24_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), pred(Y), Z)
   U23_gga(X, Y, Z, isPlus_out_gga(X, Y, Z)) -> isPlus_out_gga(succ(X), succ(Y), succ(succ(Z)))
   U12_ggg(X, F, T, N, X3, isPlus_out_gga(F, N, U)) -> U13_ggg(X, F, T, N, X3, U, =_in_ag(X4, U))
   U13_ggg(X, F, T, N, X3, U, =_out_ag(X4, U)) -> U14_ggg(X, F, T, N, U, nounify_in_gg(X3, X4))
   U14_ggg(X, F, T, N, U, nounify_out_gg(X3, X4)) -> U15_ggg(X, F, T, N, U, =_in_ag(X5, F))
   U15_ggg(X, F, T, N, U, =_out_ag(X5, F)) -> U16_ggg(X, F, T, N, U, X5, isPlus_in_ggg(X, N, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U23_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U24_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U25_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U26_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U26_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U25_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U24_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U23_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U16_ggg(X, F, T, N, U, X5, isPlus_out_ggg(X, N, U)) -> U17_ggg(X, F, T, N, U, X5, =_in_ag(X6, U))
   U17_ggg(X, F, T, N, U, X5, =_out_ag(X6, U)) -> U18_ggg(X, F, T, N, U, nounify_in_gg(X5, X6))
   U18_ggg(X, F, T, N, U, nounify_out_gg(X5, X6)) -> U19_ggg(X, F, T, N, U, isPlus_in_ggg(N, succ(zero), U))
   U19_ggg(X, F, T, N, U, isPlus_out_ggg(N, succ(zero), U)) -> U20_ggg(X, F, T, N, =_in_ag(N1, U))
   U20_ggg(X, F, T, N, =_out_ag(N1, U)) -> U21_ggg(X, F, T, N, noattack_in_ggg(X, T, N1))
   U21_ggg(X, F, T, N, noattack_out_ggg(X, T, N1)) -> noattack_out_ggg(X, .(F, T), N)
   U6_g(X, Y, noattack_out_ggg(X, Y, succ(zero))) -> U7_g(X, Y, safe_in_g(Y))
   U7_g(X, Y, safe_out_g(Y)) -> safe_out_g(.(X, Y))
   U2_ga(X, Y, safe_out_g(Y)) -> queens_out_ga(X, Y)

The argument filtering Pi contains the following mapping:
queens_in_ga(x1, x2)  =  queens_in_ga(x1)

U1_ga(x1, x2, x3)  =  U1_ga(x3)

perm_in_ga(x1, x2)  =  perm_in_ga(x1)

[]  =  []

perm_out_ga(x1, x2)  =  perm_out_ga(x2)

.(x1, x2)  =  .(x1, x2)

U3_ga(x1, x2, x3, x4, x5)  =  U3_ga(x5)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

U4_ga(x1, x2, x3, x4, x5)  =  U4_ga(x3, x5)

U2_ga(x1, x2, x3)  =  U2_ga(x2, x3)

safe_in_g(x1)  =  safe_in_g(x1)

safe_out_g(x1)  =  safe_out_g

U6_g(x1, x2, x3)  =  U6_g(x2, x3)

noattack_in_ggg(x1, x2, x3)  =  noattack_in_ggg(x1, x2, x3)

noattack_out_ggg(x1, x2, x3)  =  noattack_out_ggg

U8_ggg(x1, x2, x3, x4, x5)  =  U8_ggg(x1, x2, x3, x4, x5)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U9_ggg(x1, x2, x3, x4, x5, x6)  =  U9_ggg(x1, x2, x3, x4, x5, x6)

U10_ggg(x1, x2, x3, x4, x5)  =  U10_ggg(x1, x2, x3, x4, x5)

nounify_in_gg(x1, x2)  =  nounify_in_gg(x1, x2)

U22_gg(x1, x2, x3)  =  U22_gg(x3)

not_in_gg(x1, x2)  =  not_in_gg(x1, x2)

U56_gg(x1, x2, x3)  =  U56_gg(x3)

call1_in_gg(x1, x2)  =  call1_in_gg(x1, x2)

U58_gg(x1, x2, x3)  =  U58_gg(x3)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

call1_out_gg(x1, x2)  =  call1_out_gg

U57_gg(x1, x2, x3)  =  U57_gg(x3)

fail_in_  =  fail_in_

U59_(x1)  =  U59_(x1)

failure_in_g(x1)  =  failure_in_g(x1)

b  =  b

failure_out_g(x1)  =  failure_out_g

a  =  a

fail_out_  =  fail_out_

not_out_gg(x1, x2)  =  not_out_gg

nounify_out_gg(x1, x2)  =  nounify_out_gg

U11_ggg(x1, x2, x3, x4, x5)  =  U11_ggg(x1, x2, x3, x4, x5)

U12_ggg(x1, x2, x3, x4, x5, x6)  =  U12_ggg(x1, x2, x3, x4, x5, x6)

isPlus_in_gga(x1, x2, x3)  =  isPlus_in_gga(x1, x2)

zero  =  zero

isPlus_out_gga(x1, x2, x3)  =  isPlus_out_gga(x3)

succ(x1)  =  succ(x1)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x4)

pred(x1)  =  pred(x1)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x4)

U25_gga(x1, x2, x3, x4)  =  U25_gga(x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U13_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U13_ggg(x1, x2, x3, x4, x5, x6, x7)

U14_ggg(x1, x2, x3, x4, x5, x6)  =  U14_ggg(x1, x2, x3, x4, x5, x6)

U15_ggg(x1, x2, x3, x4, x5, x6)  =  U15_ggg(x1, x3, x4, x5, x6)

U16_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U16_ggg(x1, x3, x4, x5, x6, x7)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U23_ggg(x1, x2, x3, x4)  =  U23_ggg(x4)

U24_ggg(x1, x2, x3, x4)  =  U24_ggg(x4)

U25_ggg(x1, x2, x3, x4)  =  U25_ggg(x4)

U26_ggg(x1, x2, x3, x4)  =  U26_ggg(x4)

U17_ggg(x1, x2, x3, x4, x5, x6, x7)  =  U17_ggg(x1, x3, x4, x5, x6, x7)

U18_ggg(x1, x2, x3, x4, x5, x6)  =  U18_ggg(x1, x3, x4, x5, x6)

U19_ggg(x1, x2, x3, x4, x5, x6)  =  U19_ggg(x1, x3, x5, x6)

U20_ggg(x1, x2, x3, x4, x5)  =  U20_ggg(x1, x3, x5)

U21_ggg(x1, x2, x3, x4, x5)  =  U21_ggg(x5)

U7_g(x1, x2, x3)  =  U7_g(x3)

queens_out_ga(x1, x2)  =  queens_out_ga(x2)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(55) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(56)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U3_GA(X, Y, V, Res, delete_out_aga(V, .(X, Y), Rest)) -> PERM_IN_GA(Rest, Res)
   PERM_IN_GA(.(X, Y), .(V, Res)) -> U3_GA(X, Y, V, Res, delete_in_aga(V, .(X, Y), Rest))

The TRS R consists of the following rules:

   delete_in_aga(X, .(X, Y), Y) -> delete_out_aga(X, .(X, Y), Y)
   delete_in_aga(X, .(F, T), .(F, R)) -> U5_aga(X, F, T, R, delete_in_aga(X, T, R))
   U5_aga(X, F, T, R, delete_out_aga(X, T, R)) -> delete_out_aga(X, .(F, T), .(F, R))

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

delete_in_aga(x1, x2, x3)  =  delete_in_aga(x2)

delete_out_aga(x1, x2, x3)  =  delete_out_aga(x1, x3)

U5_aga(x1, x2, x3, x4, x5)  =  U5_aga(x2, x5)

PERM_IN_GA(x1, x2)  =  PERM_IN_GA(x1)

U3_GA(x1, x2, x3, x4, x5)  =  U3_GA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(57) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U3_GA(delete_out_aga(V, Rest)) -> PERM_IN_GA(Rest)
   PERM_IN_GA(.(X, Y)) -> U3_GA(delete_in_aga(.(X, Y)))

The TRS R consists of the following rules:

   delete_in_aga(.(X, Y)) -> delete_out_aga(X, Y)
   delete_in_aga(.(F, T)) -> U5_aga(F, delete_in_aga(T))
   U5_aga(F, delete_out_aga(X, R)) -> delete_out_aga(X, .(F, R))

The set Q consists of the following terms:

   delete_in_aga(x0)
   U5_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(59) MRRProof (EQUIVALENT)
By using the rule removal processor [LPAR04] with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented.

Strictly oriented dependency pairs:

   U3_GA(delete_out_aga(V, Rest)) -> PERM_IN_GA(Rest)
   PERM_IN_GA(.(X, Y)) -> U3_GA(delete_in_aga(.(X, Y)))

Strictly oriented rules of the TRS R:

   delete_in_aga(.(X, Y)) -> delete_out_aga(X, Y)
   delete_in_aga(.(F, T)) -> U5_aga(F, delete_in_aga(T))
   U5_aga(F, delete_out_aga(X, R)) -> delete_out_aga(X, .(F, R))

Used ordering: Knuth-Bendix order [KBO] with precedence:._2 > delete_in_aga_1 > U5_aga_2 > U3_GA_1 > PERM_IN_GA_1 > delete_out_aga_2

and weight map:

   delete_in_aga_1=1
   U3_GA_1=1
   PERM_IN_GA_1=3
   ._2=0
   delete_out_aga_2=1
   U5_aga_2=0

The variable weight is 1

----------------------------------------

(60)
Obligation:
Q DP problem:
P is empty.
R is empty.
The set Q consists of the following terms:

   delete_in_aga(x0)
   U5_aga(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(61) PisEmptyProof (EQUIVALENT)
The TRS P is empty. Hence, there is no (P,Q,R) chain.
----------------------------------------

(62)
YES
