MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/GWX1h.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

desc(g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) PrologToPiTRSProof [SOUND, 0 ms]
(2) PiTRS
    (3) DependencyPairsProof [EQUIVALENT, 0 ms]
    (4) PiDP
    (5) DependencyGraphProof [EQUIVALENT, 0 ms]
    (6) PiDP
    (7) UsableRulesProof [EQUIVALENT, 0 ms]
    (8) PiDP
    (9) PiDPToQDPProof [EQUIVALENT, 0 ms]
    (10) QDP
    (11) TransformationProof [EQUIVALENT, 0 ms]
    (12) QDP
    (13) TransformationProof [EQUIVALENT, 0 ms]
    (14) QDP
    (15) NonTerminationLoopProof [COMPLETE, 0 ms]
    (16) NO
(17) PrologToPiTRSProof [SOUND, 0 ms]
(18) PiTRS
    (19) DependencyPairsProof [EQUIVALENT, 0 ms]
    (20) PiDP
    (21) DependencyGraphProof [EQUIVALENT, 0 ms]
    (22) PiDP
    (23) UsableRulesProof [EQUIVALENT, 0 ms]
    (24) PiDP
    (25) PiDPToQDPProof [EQUIVALENT, 0 ms]
    (26) QDP
    (27) TransformationProof [EQUIVALENT, 0 ms]
    (28) QDP
    (29) TransformationProof [EQUIVALENT, 0 ms]
    (30) QDP
    (31) NonTerminationLoopProof [COMPLETE, 0 ms]
    (32) NO
(33) PrologToTRSTransformerProof [SOUND, 0 ms]
(34) QTRS
    (35) Overlay + Local Confluence [EQUIVALENT, 0 ms]
    (36) QTRS
    (37) DependencyPairsProof [EQUIVALENT, 0 ms]
    (38) QDP
    (39) DependencyGraphProof [EQUIVALENT, 0 ms]
    (40) QDP
    (41) UsableRulesProof [EQUIVALENT, 0 ms]
    (42) QDP
    (43) QReductionProof [EQUIVALENT, 0 ms]
    (44) QDP
    (45) TransformationProof [EQUIVALENT, 0 ms]
    (46) QDP
    (47) TransformationProof [EQUIVALENT, 0 ms]
    (48) QDP
    (49) NonTerminationLoopProof [COMPLETE, 0 ms]
    (50) NO
(51) PrologToDTProblemTransformerProof [SOUND, 0 ms]
(52) TRIPLES
    (53) TriplesToPiDPProof [SOUND, 0 ms]
    (54) PiDP
    (55) DependencyGraphProof [EQUIVALENT, 0 ms]
    (56) PiDP
    (57) PiDPToQDPProof [EQUIVALENT, 0 ms]
    (58) QDP
    (59) TransformationProof [EQUIVALENT, 0 ms]
    (60) QDP
    (61) TransformationProof [EQUIVALENT, 0 ms]
    (62) QDP
    (63) NonTerminationLoopProof [COMPLETE, 0 ms]
    (64) NO
(65) PrologToIRSwTTransformerProof [SOUND, 0 ms]
(66) IRSwT
    (67) IRSwTSimpleDependencyGraphProof [EQUIVALENT, 0 ms]
    (68) IRSwT
    (69) IntTRSCompressionProof [EQUIVALENT, 15 ms]
    (70) IRSwT
    (71) IRSFormatTransformerProof [EQUIVALENT, 0 ms]
    (72) IRSwT
    (73) IRSwTTerminationDigraphProof [EQUIVALENT, 0 ms]
    (74) IRSwT
    (75) IntTRSCompressionProof [EQUIVALENT, 0 ms]
    (76) IRSwT


----------------------------------------

(0)
Obligation:
Clauses:

desc(X) :- desc(-(X, 1)).


Query: desc(g)
----------------------------------------

(1) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

desc_in_1: (b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   desc_in_g(X) -> U1_g(X, desc_in_g(-(X, 1)))
   U1_g(X, desc_out_g(-(X, 1))) -> desc_out_g(X)

The argument filtering Pi contains the following mapping:
desc_in_g(x1)  =  desc_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

desc_out_g(x1)  =  desc_out_g

-(x1, x2)  =  -(x1, x2)

1  =  1





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(2)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   desc_in_g(X) -> U1_g(X, desc_in_g(-(X, 1)))
   U1_g(X, desc_out_g(-(X, 1))) -> desc_out_g(X)

The argument filtering Pi contains the following mapping:
desc_in_g(x1)  =  desc_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

desc_out_g(x1)  =  desc_out_g

-(x1, x2)  =  -(x1, x2)

1  =  1



----------------------------------------

(3) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   DESC_IN_G(X) -> U1_G(X, desc_in_g(-(X, 1)))
   DESC_IN_G(X) -> DESC_IN_G(-(X, 1))

The TRS R consists of the following rules:

   desc_in_g(X) -> U1_g(X, desc_in_g(-(X, 1)))
   U1_g(X, desc_out_g(-(X, 1))) -> desc_out_g(X)

The argument filtering Pi contains the following mapping:
desc_in_g(x1)  =  desc_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

desc_out_g(x1)  =  desc_out_g

-(x1, x2)  =  -(x1, x2)

1  =  1

DESC_IN_G(x1)  =  DESC_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(4)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DESC_IN_G(X) -> U1_G(X, desc_in_g(-(X, 1)))
   DESC_IN_G(X) -> DESC_IN_G(-(X, 1))

The TRS R consists of the following rules:

   desc_in_g(X) -> U1_g(X, desc_in_g(-(X, 1)))
   U1_g(X, desc_out_g(-(X, 1))) -> desc_out_g(X)

The argument filtering Pi contains the following mapping:
desc_in_g(x1)  =  desc_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

desc_out_g(x1)  =  desc_out_g

-(x1, x2)  =  -(x1, x2)

1  =  1

DESC_IN_G(x1)  =  DESC_IN_G(x1)

U1_G(x1, x2)  =  U1_G(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(5) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DESC_IN_G(X) -> DESC_IN_G(-(X, 1))

The TRS R consists of the following rules:

   desc_in_g(X) -> U1_g(X, desc_in_g(-(X, 1)))
   U1_g(X, desc_out_g(-(X, 1))) -> desc_out_g(X)

The argument filtering Pi contains the following mapping:
desc_in_g(x1)  =  desc_in_g(x1)

U1_g(x1, x2)  =  U1_g(x2)

desc_out_g(x1)  =  desc_out_g

-(x1, x2)  =  -(x1, x2)

1  =  1

DESC_IN_G(x1)  =  DESC_IN_G(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DESC_IN_G(X) -> DESC_IN_G(-(X, 1))

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(10)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DESC_IN_G(X) -> DESC_IN_G(-(X, 1))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(11) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule DESC_IN_G(X) -> DESC_IN_G(-(X, 1)) we obtained the following new rules [LPAR04]:

   (DESC_IN_G(-(z0, 1)) -> DESC_IN_G(-(-(z0, 1), 1)),DESC_IN_G(-(z0, 1)) -> DESC_IN_G(-(-(z0, 1), 1)))


----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DESC_IN_G(-(z0, 1)) -> DESC_IN_G(-(-(z0, 1), 1))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule DESC_IN_G(-(z0, 1)) -> DESC_IN_G(-(-(z0, 1), 1)) we obtained the following new rules [LPAR04]:

   (DESC_IN_G(-(-(z0, 1), 1)) -> DESC_IN_G(-(-(-(z0, 1), 1), 1)),DESC_IN_G(-(-(z0, 1), 1)) -> DESC_IN_G(-(-(-(z0, 1), 1), 1)))


----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DESC_IN_G(-(-(z0, 1), 1)) -> DESC_IN_G(-(-(-(z0, 1), 1), 1))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = DESC_IN_G(-(-(z0, 1), 1)) evaluates to  t =DESC_IN_G(-(-(-(z0, 1), 1), 1))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [z0 / -(z0, 1)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from DESC_IN_G(-(-(z0, 1), 1)) to DESC_IN_G(-(-(-(z0, 1), 1), 1)).




----------------------------------------

(16)
NO

----------------------------------------

(17) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

desc_in_1: (b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   desc_in_g(X) -> U1_g(X, desc_in_g(-(X, 1)))
   U1_g(X, desc_out_g(-(X, 1))) -> desc_out_g(X)

Pi is empty.



Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(18)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   desc_in_g(X) -> U1_g(X, desc_in_g(-(X, 1)))
   U1_g(X, desc_out_g(-(X, 1))) -> desc_out_g(X)

Pi is empty.

----------------------------------------

(19) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   DESC_IN_G(X) -> U1_G(X, desc_in_g(-(X, 1)))
   DESC_IN_G(X) -> DESC_IN_G(-(X, 1))

The TRS R consists of the following rules:

   desc_in_g(X) -> U1_g(X, desc_in_g(-(X, 1)))
   U1_g(X, desc_out_g(-(X, 1))) -> desc_out_g(X)

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(20)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DESC_IN_G(X) -> U1_G(X, desc_in_g(-(X, 1)))
   DESC_IN_G(X) -> DESC_IN_G(-(X, 1))

The TRS R consists of the following rules:

   desc_in_g(X) -> U1_g(X, desc_in_g(-(X, 1)))
   U1_g(X, desc_out_g(-(X, 1))) -> desc_out_g(X)

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(21) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(22)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DESC_IN_G(X) -> DESC_IN_G(-(X, 1))

The TRS R consists of the following rules:

   desc_in_g(X) -> U1_g(X, desc_in_g(-(X, 1)))
   U1_g(X, desc_out_g(-(X, 1))) -> desc_out_g(X)

Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(23) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(24)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DESC_IN_G(X) -> DESC_IN_G(-(X, 1))

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(25) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DESC_IN_G(X) -> DESC_IN_G(-(X, 1))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(27) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule DESC_IN_G(X) -> DESC_IN_G(-(X, 1)) we obtained the following new rules [LPAR04]:

   (DESC_IN_G(-(z0, 1)) -> DESC_IN_G(-(-(z0, 1), 1)),DESC_IN_G(-(z0, 1)) -> DESC_IN_G(-(-(z0, 1), 1)))


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DESC_IN_G(-(z0, 1)) -> DESC_IN_G(-(-(z0, 1), 1))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(29) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule DESC_IN_G(-(z0, 1)) -> DESC_IN_G(-(-(z0, 1), 1)) we obtained the following new rules [LPAR04]:

   (DESC_IN_G(-(-(z0, 1), 1)) -> DESC_IN_G(-(-(-(z0, 1), 1), 1)),DESC_IN_G(-(-(z0, 1), 1)) -> DESC_IN_G(-(-(-(z0, 1), 1), 1)))


----------------------------------------

(30)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DESC_IN_G(-(-(z0, 1), 1)) -> DESC_IN_G(-(-(-(z0, 1), 1), 1))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(31) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = DESC_IN_G(-(-(z0, 1), 1)) evaluates to  t =DESC_IN_G(-(-(-(z0, 1), 1), 1))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [z0 / -(z0, 1)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from DESC_IN_G(-(-(z0, 1), 1)) to DESC_IN_G(-(-(-(z0, 1), 1), 1)).




----------------------------------------

(32)
NO

----------------------------------------

(33) PrologToTRSTransformerProof (SOUND)
Transformed Prolog program to TRS.

{
    "root": 7,
    "program": {
        "directives": [],
        "clauses": [[
            "(desc X)",
            "(desc (- X (1)))"
        ]]
    },
    "graph": {
        "nodes": {
            "22": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(desc T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "7": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(desc T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "40": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(desc (- T5 (1)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 7,
                "to": 22,
                "label": "CASE"
            },
            {
                "from": 22,
                "to": 40,
                "label": "ONLY EVAL with clause\ndesc(X4) :- desc(-(X4, 1)).\nand substitutionT1 -> T5,\nX4 -> T5"
            },
            {
                "from": 40,
                "to": 7,
                "label": "INSTANCE with matching:\nT1 -> -(T5, 1)"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(34)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f7_in(T5) -> U1(f7_in(-(T5, 1)), T5)
   U1(f7_out1, T5) -> f7_out1

Q is empty.

----------------------------------------

(35) Overlay + Local Confluence (EQUIVALENT)
The TRS is overlay and locally confluent. By [NOC] we can switch to innermost.
----------------------------------------

(36)
Obligation:
Q restricted rewrite system:
The TRS R consists of the following rules:

   f7_in(T5) -> U1(f7_in(-(T5, 1)), T5)
   U1(f7_out1, T5) -> f7_out1

The set Q consists of the following terms:

   f7_in(x0)
   U1(f7_out1, x0)


----------------------------------------

(37) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LPAR04] we result in the following initial DP problem.
----------------------------------------

(38)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F7_IN(T5) -> U1^1(f7_in(-(T5, 1)), T5)
   F7_IN(T5) -> F7_IN(-(T5, 1))

The TRS R consists of the following rules:

   f7_in(T5) -> U1(f7_in(-(T5, 1)), T5)
   U1(f7_out1, T5) -> f7_out1

The set Q consists of the following terms:

   f7_in(x0)
   U1(f7_out1, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(39) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 1 less node.
----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F7_IN(T5) -> F7_IN(-(T5, 1))

The TRS R consists of the following rules:

   f7_in(T5) -> U1(f7_in(-(T5, 1)), T5)
   U1(f7_out1, T5) -> f7_out1

The set Q consists of the following terms:

   f7_in(x0)
   U1(f7_out1, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(41) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F7_IN(T5) -> F7_IN(-(T5, 1))

R is empty.
The set Q consists of the following terms:

   f7_in(x0)
   U1(f7_out1, x0)

We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(43) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   f7_in(x0)
   U1(f7_out1, x0)


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F7_IN(T5) -> F7_IN(-(T5, 1))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(45) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule F7_IN(T5) -> F7_IN(-(T5, 1)) we obtained the following new rules [LPAR04]:

   (F7_IN(-(z0, 1)) -> F7_IN(-(-(z0, 1), 1)),F7_IN(-(z0, 1)) -> F7_IN(-(-(z0, 1), 1)))


----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F7_IN(-(z0, 1)) -> F7_IN(-(-(z0, 1), 1))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(47) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule F7_IN(-(z0, 1)) -> F7_IN(-(-(z0, 1), 1)) we obtained the following new rules [LPAR04]:

   (F7_IN(-(-(z0, 1), 1)) -> F7_IN(-(-(-(z0, 1), 1), 1)),F7_IN(-(-(z0, 1), 1)) -> F7_IN(-(-(-(z0, 1), 1), 1)))


----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   F7_IN(-(-(z0, 1), 1)) -> F7_IN(-(-(-(z0, 1), 1), 1))

R is empty.
Q is empty.
We have to consider all minimal (P,Q,R)-chains.
----------------------------------------

(49) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = F7_IN(-(-(z0, 1), 1)) evaluates to  t =F7_IN(-(-(-(z0, 1), 1), 1))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [z0 / -(z0, 1)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from F7_IN(-(-(z0, 1), 1)) to F7_IN(-(-(-(z0, 1), 1), 1)).




----------------------------------------

(50)
NO

----------------------------------------

(51) PrologToDTProblemTransformerProof (SOUND)
Built DT problem from termination graph DT10.

{
    "root": 8,
    "program": {
        "directives": [],
        "clauses": [[
            "(desc X)",
            "(desc (- X (1)))"
        ]]
    },
    "graph": {
        "nodes": {
            "23": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(desc (- T3 (1)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T3"],
                    "free": [],
                    "exprvars": []
                }
            },
            "24": {
                "goal": [{
                    "clause": 0,
                    "scope": 2,
                    "term": "(desc (- T3 (1)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T3"],
                    "free": [],
                    "exprvars": []
                }
            },
            "8": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(desc T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "9": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(desc T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes",
            "51": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(desc (- (- T7 (1)) (1)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T7"],
                    "free": [],
                    "exprvars": []
                }
            }
        },
        "edges": [
            {
                "from": 8,
                "to": 9,
                "label": "CASE"
            },
            {
                "from": 9,
                "to": 23,
                "label": "ONLY EVAL with clause\ndesc(X2) :- desc(-(X2, 1)).\nand substitutionT1 -> T3,\nX2 -> T3"
            },
            {
                "from": 23,
                "to": 24,
                "label": "CASE"
            },
            {
                "from": 24,
                "to": 51,
                "label": "ONLY EVAL with clause\ndesc(X6) :- desc(-(X6, 1)).\nand substitutionT3 -> T7,\nX6 -> -(T7, 1)"
            },
            {
                "from": 51,
                "to": 8,
                "label": "INSTANCE with matching:\nT1 -> -(-(T7, 1), 1)"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(52)
Obligation:
Triples:

descA(X1) :- descA(-(-(X1, 1), 1)).

Clauses:

desccA(X1) :- desccA(-(-(X1, 1), 1)).

Afs:

descA(x1)  =  descA(x1)


----------------------------------------

(53) TriplesToPiDPProof (SOUND)
We use the technique of [DT09]. With regard to the inferred argument filtering the predicates were used in the following modes:

descA_in_1: (b)

Transforming TRIPLES into the following Term Rewriting System:

Pi DP problem:
The TRS P consists of the following rules:

   DESCA_IN_G(X1) -> U1_G(X1, descA_in_g(-(-(X1, 1), 1)))
   DESCA_IN_G(X1) -> DESCA_IN_G(-(-(X1, 1), 1))

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains


Infinitary Constructor Rewriting Termination of PiDP implies Termination of TRIPLES



----------------------------------------

(54)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DESCA_IN_G(X1) -> U1_G(X1, descA_in_g(-(-(X1, 1), 1)))
   DESCA_IN_G(X1) -> DESCA_IN_G(-(-(X1, 1), 1))

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(55) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 1 less node.
----------------------------------------

(56)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   DESCA_IN_G(X1) -> DESCA_IN_G(-(-(X1, 1), 1))

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(57) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(58)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DESCA_IN_G(X1) -> DESCA_IN_G(-(-(X1, 1), 1))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(59) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule DESCA_IN_G(X1) -> DESCA_IN_G(-(-(X1, 1), 1)) we obtained the following new rules [LPAR04]:

   (DESCA_IN_G(-(-(z0, 1), 1)) -> DESCA_IN_G(-(-(-(-(z0, 1), 1), 1), 1)),DESCA_IN_G(-(-(z0, 1), 1)) -> DESCA_IN_G(-(-(-(-(z0, 1), 1), 1), 1)))


----------------------------------------

(60)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DESCA_IN_G(-(-(z0, 1), 1)) -> DESCA_IN_G(-(-(-(-(z0, 1), 1), 1), 1))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(61) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule DESCA_IN_G(-(-(z0, 1), 1)) -> DESCA_IN_G(-(-(-(-(z0, 1), 1), 1), 1)) we obtained the following new rules [LPAR04]:

   (DESCA_IN_G(-(-(-(-(z0, 1), 1), 1), 1)) -> DESCA_IN_G(-(-(-(-(-(-(z0, 1), 1), 1), 1), 1), 1)),DESCA_IN_G(-(-(-(-(z0, 1), 1), 1), 1)) -> DESCA_IN_G(-(-(-(-(-(-(z0, 1), 1), 1), 1), 1), 1)))


----------------------------------------

(62)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   DESCA_IN_G(-(-(-(-(z0, 1), 1), 1), 1)) -> DESCA_IN_G(-(-(-(-(-(-(z0, 1), 1), 1), 1), 1), 1))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(63) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = DESCA_IN_G(-(-(-(-(z0, 1), 1), 1), 1)) evaluates to  t =DESCA_IN_G(-(-(-(-(-(-(z0, 1), 1), 1), 1), 1), 1))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [z0 / -(-(z0, 1), 1)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from DESCA_IN_G(-(-(-(-(z0, 1), 1), 1), 1)) to DESCA_IN_G(-(-(-(-(-(-(z0, 1), 1), 1), 1), 1), 1)).




----------------------------------------

(64)
NO

----------------------------------------

(65) PrologToIRSwTTransformerProof (SOUND)
Transformed Prolog program to IRSwT according to method in Master Thesis of A. Weinert

{
    "root": 25,
    "program": {
        "directives": [],
        "clauses": [[
            "(desc X)",
            "(desc (- X (1)))"
        ]]
    },
    "graph": {
        "nodes": {
            "25": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(desc T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "26": {
                "goal": [{
                    "clause": 0,
                    "scope": 1,
                    "term": "(desc T1)"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T1"],
                    "free": [],
                    "exprvars": []
                }
            },
            "27": {
                "goal": [{
                    "clause": -1,
                    "scope": -1,
                    "term": "(desc (- T5 (1)))"
                }],
                "kb": {
                    "nonunifying": [],
                    "intvars": {},
                    "arithmetic": {
                        "type": "PlainIntegerRelationState",
                        "relations": []
                    },
                    "ground": ["T5"],
                    "free": [],
                    "exprvars": []
                }
            },
            "type": "Nodes"
        },
        "edges": [
            {
                "from": 25,
                "to": 26,
                "label": "CASE"
            },
            {
                "from": 26,
                "to": 27,
                "label": "ONLY EVAL with clause\ndesc(X4) :- desc(-(X4, 1)).\nand substitutionT1 -> T5,\nX4 -> T5"
            },
            {
                "from": 27,
                "to": 25,
                "label": "INSTANCE with matching:\nT1 -> -(T5, 1)"
            }
        ],
        "type": "Graph"
    }
}

----------------------------------------

(66)
Obligation:
Rules:
f27_out(T5) -> f26_out(T5) :|: TRUE
f26_in(x) -> f27_in(x) :|: TRUE
f25_in(T1) -> f26_in(T1) :|: TRUE
f26_out(x1) -> f25_out(x1) :|: TRUE
f27_in(x2) -> f25_in(x2 - 1) :|: TRUE
f25_out(x3 - 1) -> f27_out(x3) :|: TRUE
Start term: f25_in(T1)

----------------------------------------

(67) IRSwTSimpleDependencyGraphProof (EQUIVALENT)
Constructed simple dependency graph.

Simplified to the following IRSwTs:

intTRSProblem:
f26_in(x) -> f27_in(x) :|: TRUE
f25_in(T1) -> f26_in(T1) :|: TRUE
f27_in(x2) -> f25_in(x2 - 1) :|: TRUE


----------------------------------------

(68)
Obligation:
Rules:
f26_in(x) -> f27_in(x) :|: TRUE
f25_in(T1) -> f26_in(T1) :|: TRUE
f27_in(x2) -> f25_in(x2 - 1) :|: TRUE

----------------------------------------

(69) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(70)
Obligation:
Rules:
f25_in(T1:0) -> f25_in(T1:0 - 1) :|: TRUE

----------------------------------------

(71) IRSFormatTransformerProof (EQUIVALENT)
Reformatted IRS to match normalized format (transformed away non-linear left-hand sides, !=, / and %).
----------------------------------------

(72)
Obligation:
Rules:
f25_in(T1:0) -> f25_in(arith) :|: TRUE && arith = T1:0 - 1

----------------------------------------

(73) IRSwTTerminationDigraphProof (EQUIVALENT)
Constructed termination digraph!
Nodes:
(1) f25_in(T1:0) -> f25_in(arith) :|: TRUE && arith = T1:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!
----------------------------------------

(74)
Obligation:

Termination digraph:
Nodes:
(1) f25_in(T1:0) -> f25_in(arith) :|: TRUE && arith = T1:0 - 1

Arcs:
(1) -> (1)

This digraph is fully evaluated!

----------------------------------------

(75) IntTRSCompressionProof (EQUIVALENT)
Compressed rules.
----------------------------------------

(76)
Obligation:
Rules:
f25_in(T1:0:0) -> f25_in(T1:0:0 - 1) :|: TRUE
