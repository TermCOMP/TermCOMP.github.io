YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/tLNEc.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

my_length(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) UndefinedPredicateHandlerProof [SOUND, 0 ms]
(2) Prolog
(3) PrologToPiTRSProof [SOUND, 0 ms]
(4) PiTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) PiDP
(11) PiDPToQDPProof [SOUND, 0 ms]
(12) QDP
(13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
Clauses:

my_length([], 0).
my_length(.(X1, L), N) :- ','(my_length(L, N1), is(N, +(N1, 1))).


Query: my_length(g,a)
----------------------------------------

(1) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

my_length([], 0).
my_length(.(X1, L), N) :- ','(my_length(L, N1), is(N, +(N1, 1))).
is(X0, X1).


Query: my_length(g,a)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

my_length_in_2: (b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   my_length_in_ga([], 0) -> my_length_out_ga([], 0)
   my_length_in_ga(.(X1, L), N) -> U1_ga(X1, L, N, my_length_in_ga(L, N1))
   U1_ga(X1, L, N, my_length_out_ga(L, N1)) -> U2_ga(X1, L, N, N1, is_in_ag(N, +(N1, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ga(X1, L, N, N1, is_out_ag(N, +(N1, 1))) -> my_length_out_ga(.(X1, L), N)

The argument filtering Pi contains the following mapping:
my_length_in_ga(x1, x2)  =  my_length_in_ga(x1)

[]  =  []

my_length_out_ga(x1, x2)  =  my_length_out_ga

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x2)

1  =  1





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   my_length_in_ga([], 0) -> my_length_out_ga([], 0)
   my_length_in_ga(.(X1, L), N) -> U1_ga(X1, L, N, my_length_in_ga(L, N1))
   U1_ga(X1, L, N, my_length_out_ga(L, N1)) -> U2_ga(X1, L, N, N1, is_in_ag(N, +(N1, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ga(X1, L, N, N1, is_out_ag(N, +(N1, 1))) -> my_length_out_ga(.(X1, L), N)

The argument filtering Pi contains the following mapping:
my_length_in_ga(x1, x2)  =  my_length_in_ga(x1)

[]  =  []

my_length_out_ga(x1, x2)  =  my_length_out_ga

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x2)

1  =  1



----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MY_LENGTH_IN_GA(.(X1, L), N) -> U1_GA(X1, L, N, my_length_in_ga(L, N1))
   MY_LENGTH_IN_GA(.(X1, L), N) -> MY_LENGTH_IN_GA(L, N1)
   U1_GA(X1, L, N, my_length_out_ga(L, N1)) -> U2_GA(X1, L, N, N1, is_in_ag(N, +(N1, 1)))
   U1_GA(X1, L, N, my_length_out_ga(L, N1)) -> IS_IN_AG(N, +(N1, 1))

The TRS R consists of the following rules:

   my_length_in_ga([], 0) -> my_length_out_ga([], 0)
   my_length_in_ga(.(X1, L), N) -> U1_ga(X1, L, N, my_length_in_ga(L, N1))
   U1_ga(X1, L, N, my_length_out_ga(L, N1)) -> U2_ga(X1, L, N, N1, is_in_ag(N, +(N1, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ga(X1, L, N, N1, is_out_ag(N, +(N1, 1))) -> my_length_out_ga(.(X1, L), N)

The argument filtering Pi contains the following mapping:
my_length_in_ga(x1, x2)  =  my_length_in_ga(x1)

[]  =  []

my_length_out_ga(x1, x2)  =  my_length_out_ga

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x2)

1  =  1

MY_LENGTH_IN_GA(x1, x2)  =  MY_LENGTH_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x4)

U2_GA(x1, x2, x3, x4, x5)  =  U2_GA(x5)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MY_LENGTH_IN_GA(.(X1, L), N) -> U1_GA(X1, L, N, my_length_in_ga(L, N1))
   MY_LENGTH_IN_GA(.(X1, L), N) -> MY_LENGTH_IN_GA(L, N1)
   U1_GA(X1, L, N, my_length_out_ga(L, N1)) -> U2_GA(X1, L, N, N1, is_in_ag(N, +(N1, 1)))
   U1_GA(X1, L, N, my_length_out_ga(L, N1)) -> IS_IN_AG(N, +(N1, 1))

The TRS R consists of the following rules:

   my_length_in_ga([], 0) -> my_length_out_ga([], 0)
   my_length_in_ga(.(X1, L), N) -> U1_ga(X1, L, N, my_length_in_ga(L, N1))
   U1_ga(X1, L, N, my_length_out_ga(L, N1)) -> U2_ga(X1, L, N, N1, is_in_ag(N, +(N1, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ga(X1, L, N, N1, is_out_ag(N, +(N1, 1))) -> my_length_out_ga(.(X1, L), N)

The argument filtering Pi contains the following mapping:
my_length_in_ga(x1, x2)  =  my_length_in_ga(x1)

[]  =  []

my_length_out_ga(x1, x2)  =  my_length_out_ga

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x2)

1  =  1

MY_LENGTH_IN_GA(x1, x2)  =  MY_LENGTH_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x4)

U2_GA(x1, x2, x3, x4, x5)  =  U2_GA(x5)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 3 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MY_LENGTH_IN_GA(.(X1, L), N) -> MY_LENGTH_IN_GA(L, N1)

The TRS R consists of the following rules:

   my_length_in_ga([], 0) -> my_length_out_ga([], 0)
   my_length_in_ga(.(X1, L), N) -> U1_ga(X1, L, N, my_length_in_ga(L, N1))
   U1_ga(X1, L, N, my_length_out_ga(L, N1)) -> U2_ga(X1, L, N, N1, is_in_ag(N, +(N1, 1)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U2_ga(X1, L, N, N1, is_out_ag(N, +(N1, 1))) -> my_length_out_ga(.(X1, L), N)

The argument filtering Pi contains the following mapping:
my_length_in_ga(x1, x2)  =  my_length_in_ga(x1)

[]  =  []

my_length_out_ga(x1, x2)  =  my_length_out_ga

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

U2_ga(x1, x2, x3, x4, x5)  =  U2_ga(x5)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

+(x1, x2)  =  +(x2)

1  =  1

MY_LENGTH_IN_GA(x1, x2)  =  MY_LENGTH_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MY_LENGTH_IN_GA(.(X1, L), N) -> MY_LENGTH_IN_GA(L, N1)

R is empty.
The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

MY_LENGTH_IN_GA(x1, x2)  =  MY_LENGTH_IN_GA(x1)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MY_LENGTH_IN_GA(.(X1, L)) -> MY_LENGTH_IN_GA(L)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MY_LENGTH_IN_GA(.(X1, L)) -> MY_LENGTH_IN_GA(L)
The graph contains the following edges 1 > 1


----------------------------------------

(14)
YES
