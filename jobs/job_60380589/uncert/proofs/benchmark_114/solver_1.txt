YES
proof of /hpcwork/ff862203/termcomp25/benchmarks/a9QUB.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

maximum(g,a)

w.r.t. the given Prolog program could successfully be proven:

(0) Prolog
(1) UndefinedPredicateHandlerProof [SOUND, 0 ms]
(2) Prolog
(3) PrologToPiTRSProof [SOUND, 0 ms]
(4) PiTRS
(5) DependencyPairsProof [EQUIVALENT, 0 ms]
(6) PiDP
(7) DependencyGraphProof [EQUIVALENT, 0 ms]
(8) PiDP
(9) UsableRulesProof [EQUIVALENT, 0 ms]
(10) PiDP
(11) PiDPToQDPProof [SOUND, 0 ms]
(12) QDP
(13) QDPSizeChangeProof [EQUIVALENT, 0 ms]
(14) YES


----------------------------------------

(0)
Obligation:
Clauses:

maximum(.(X, Xs), M) :- maximum(Xs, X, M).
maximum(.(X, Xs), Y, M) :- ','(=<(X, Y), maximum(Xs, Y, M)).
maximum(.(X, Xs), Y, M) :- ','(>(X, Y), maximum(Xs, X, M)).
maximum([], M, M).


Query: maximum(g,a)
----------------------------------------

(1) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

maximum(.(X, Xs), M) :- maximum(Xs, X, M).
maximum(.(X, Xs), Y, M) :- ','(=<(X, Y), maximum(Xs, Y, M)).
maximum(.(X, Xs), Y, M) :- ','(>(X, Y), maximum(Xs, X, M)).
maximum([], M, M).
=<(X0, X1).
>(X0, X1).


Query: maximum(g,a)
----------------------------------------

(3) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

maximum_in_2: (b,f)

maximum_in_3: (b,b,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   maximum_in_ga(.(X, Xs), M) -> U1_ga(X, Xs, M, maximum_in_gga(Xs, X, M))
   maximum_in_gga(.(X, Xs), Y, M) -> U2_gga(X, Xs, Y, M, =<_in_gg(X, Y))
   =<_in_gg(X0, X1) -> =<_out_gg(X0, X1)
   U2_gga(X, Xs, Y, M, =<_out_gg(X, Y)) -> U3_gga(X, Xs, Y, M, maximum_in_gga(Xs, Y, M))
   maximum_in_gga(.(X, Xs), Y, M) -> U4_gga(X, Xs, Y, M, >_in_gg(X, Y))
   >_in_gg(X0, X1) -> >_out_gg(X0, X1)
   U4_gga(X, Xs, Y, M, >_out_gg(X, Y)) -> U5_gga(X, Xs, Y, M, maximum_in_gga(Xs, X, M))
   maximum_in_gga([], M, M) -> maximum_out_gga([], M, M)
   U5_gga(X, Xs, Y, M, maximum_out_gga(Xs, X, M)) -> maximum_out_gga(.(X, Xs), Y, M)
   U3_gga(X, Xs, Y, M, maximum_out_gga(Xs, Y, M)) -> maximum_out_gga(.(X, Xs), Y, M)
   U1_ga(X, Xs, M, maximum_out_gga(Xs, X, M)) -> maximum_out_ga(.(X, Xs), M)

The argument filtering Pi contains the following mapping:
maximum_in_ga(x1, x2)  =  maximum_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

maximum_in_gga(x1, x2, x3)  =  maximum_in_gga(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x2, x3, x5)

=<_in_gg(x1, x2)  =  =<_in_gg(x1, x2)

=<_out_gg(x1, x2)  =  =<_out_gg

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x5)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x1, x2, x5)

>_in_gg(x1, x2)  =  >_in_gg(x1, x2)

>_out_gg(x1, x2)  =  >_out_gg

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x5)

[]  =  []

maximum_out_gga(x1, x2, x3)  =  maximum_out_gga(x3)

maximum_out_ga(x1, x2)  =  maximum_out_ga(x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(4)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   maximum_in_ga(.(X, Xs), M) -> U1_ga(X, Xs, M, maximum_in_gga(Xs, X, M))
   maximum_in_gga(.(X, Xs), Y, M) -> U2_gga(X, Xs, Y, M, =<_in_gg(X, Y))
   =<_in_gg(X0, X1) -> =<_out_gg(X0, X1)
   U2_gga(X, Xs, Y, M, =<_out_gg(X, Y)) -> U3_gga(X, Xs, Y, M, maximum_in_gga(Xs, Y, M))
   maximum_in_gga(.(X, Xs), Y, M) -> U4_gga(X, Xs, Y, M, >_in_gg(X, Y))
   >_in_gg(X0, X1) -> >_out_gg(X0, X1)
   U4_gga(X, Xs, Y, M, >_out_gg(X, Y)) -> U5_gga(X, Xs, Y, M, maximum_in_gga(Xs, X, M))
   maximum_in_gga([], M, M) -> maximum_out_gga([], M, M)
   U5_gga(X, Xs, Y, M, maximum_out_gga(Xs, X, M)) -> maximum_out_gga(.(X, Xs), Y, M)
   U3_gga(X, Xs, Y, M, maximum_out_gga(Xs, Y, M)) -> maximum_out_gga(.(X, Xs), Y, M)
   U1_ga(X, Xs, M, maximum_out_gga(Xs, X, M)) -> maximum_out_ga(.(X, Xs), M)

The argument filtering Pi contains the following mapping:
maximum_in_ga(x1, x2)  =  maximum_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

maximum_in_gga(x1, x2, x3)  =  maximum_in_gga(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x2, x3, x5)

=<_in_gg(x1, x2)  =  =<_in_gg(x1, x2)

=<_out_gg(x1, x2)  =  =<_out_gg

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x5)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x1, x2, x5)

>_in_gg(x1, x2)  =  >_in_gg(x1, x2)

>_out_gg(x1, x2)  =  >_out_gg

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x5)

[]  =  []

maximum_out_gga(x1, x2, x3)  =  maximum_out_gga(x3)

maximum_out_ga(x1, x2)  =  maximum_out_ga(x2)



----------------------------------------

(5) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MAXIMUM_IN_GA(.(X, Xs), M) -> U1_GA(X, Xs, M, maximum_in_gga(Xs, X, M))
   MAXIMUM_IN_GA(.(X, Xs), M) -> MAXIMUM_IN_GGA(Xs, X, M)
   MAXIMUM_IN_GGA(.(X, Xs), Y, M) -> U2_GGA(X, Xs, Y, M, =<_in_gg(X, Y))
   MAXIMUM_IN_GGA(.(X, Xs), Y, M) -> =<_IN_GG(X, Y)
   U2_GGA(X, Xs, Y, M, =<_out_gg(X, Y)) -> U3_GGA(X, Xs, Y, M, maximum_in_gga(Xs, Y, M))
   U2_GGA(X, Xs, Y, M, =<_out_gg(X, Y)) -> MAXIMUM_IN_GGA(Xs, Y, M)
   MAXIMUM_IN_GGA(.(X, Xs), Y, M) -> U4_GGA(X, Xs, Y, M, >_in_gg(X, Y))
   MAXIMUM_IN_GGA(.(X, Xs), Y, M) -> >_IN_GG(X, Y)
   U4_GGA(X, Xs, Y, M, >_out_gg(X, Y)) -> U5_GGA(X, Xs, Y, M, maximum_in_gga(Xs, X, M))
   U4_GGA(X, Xs, Y, M, >_out_gg(X, Y)) -> MAXIMUM_IN_GGA(Xs, X, M)

The TRS R consists of the following rules:

   maximum_in_ga(.(X, Xs), M) -> U1_ga(X, Xs, M, maximum_in_gga(Xs, X, M))
   maximum_in_gga(.(X, Xs), Y, M) -> U2_gga(X, Xs, Y, M, =<_in_gg(X, Y))
   =<_in_gg(X0, X1) -> =<_out_gg(X0, X1)
   U2_gga(X, Xs, Y, M, =<_out_gg(X, Y)) -> U3_gga(X, Xs, Y, M, maximum_in_gga(Xs, Y, M))
   maximum_in_gga(.(X, Xs), Y, M) -> U4_gga(X, Xs, Y, M, >_in_gg(X, Y))
   >_in_gg(X0, X1) -> >_out_gg(X0, X1)
   U4_gga(X, Xs, Y, M, >_out_gg(X, Y)) -> U5_gga(X, Xs, Y, M, maximum_in_gga(Xs, X, M))
   maximum_in_gga([], M, M) -> maximum_out_gga([], M, M)
   U5_gga(X, Xs, Y, M, maximum_out_gga(Xs, X, M)) -> maximum_out_gga(.(X, Xs), Y, M)
   U3_gga(X, Xs, Y, M, maximum_out_gga(Xs, Y, M)) -> maximum_out_gga(.(X, Xs), Y, M)
   U1_ga(X, Xs, M, maximum_out_gga(Xs, X, M)) -> maximum_out_ga(.(X, Xs), M)

The argument filtering Pi contains the following mapping:
maximum_in_ga(x1, x2)  =  maximum_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

maximum_in_gga(x1, x2, x3)  =  maximum_in_gga(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x2, x3, x5)

=<_in_gg(x1, x2)  =  =<_in_gg(x1, x2)

=<_out_gg(x1, x2)  =  =<_out_gg

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x5)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x1, x2, x5)

>_in_gg(x1, x2)  =  >_in_gg(x1, x2)

>_out_gg(x1, x2)  =  >_out_gg

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x5)

[]  =  []

maximum_out_gga(x1, x2, x3)  =  maximum_out_gga(x3)

maximum_out_ga(x1, x2)  =  maximum_out_ga(x2)

MAXIMUM_IN_GA(x1, x2)  =  MAXIMUM_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x4)

MAXIMUM_IN_GGA(x1, x2, x3)  =  MAXIMUM_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x2, x3, x5)

=<_IN_GG(x1, x2)  =  =<_IN_GG(x1, x2)

U3_GGA(x1, x2, x3, x4, x5)  =  U3_GGA(x5)

U4_GGA(x1, x2, x3, x4, x5)  =  U4_GGA(x1, x2, x5)

>_IN_GG(x1, x2)  =  >_IN_GG(x1, x2)

U5_GGA(x1, x2, x3, x4, x5)  =  U5_GGA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(6)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MAXIMUM_IN_GA(.(X, Xs), M) -> U1_GA(X, Xs, M, maximum_in_gga(Xs, X, M))
   MAXIMUM_IN_GA(.(X, Xs), M) -> MAXIMUM_IN_GGA(Xs, X, M)
   MAXIMUM_IN_GGA(.(X, Xs), Y, M) -> U2_GGA(X, Xs, Y, M, =<_in_gg(X, Y))
   MAXIMUM_IN_GGA(.(X, Xs), Y, M) -> =<_IN_GG(X, Y)
   U2_GGA(X, Xs, Y, M, =<_out_gg(X, Y)) -> U3_GGA(X, Xs, Y, M, maximum_in_gga(Xs, Y, M))
   U2_GGA(X, Xs, Y, M, =<_out_gg(X, Y)) -> MAXIMUM_IN_GGA(Xs, Y, M)
   MAXIMUM_IN_GGA(.(X, Xs), Y, M) -> U4_GGA(X, Xs, Y, M, >_in_gg(X, Y))
   MAXIMUM_IN_GGA(.(X, Xs), Y, M) -> >_IN_GG(X, Y)
   U4_GGA(X, Xs, Y, M, >_out_gg(X, Y)) -> U5_GGA(X, Xs, Y, M, maximum_in_gga(Xs, X, M))
   U4_GGA(X, Xs, Y, M, >_out_gg(X, Y)) -> MAXIMUM_IN_GGA(Xs, X, M)

The TRS R consists of the following rules:

   maximum_in_ga(.(X, Xs), M) -> U1_ga(X, Xs, M, maximum_in_gga(Xs, X, M))
   maximum_in_gga(.(X, Xs), Y, M) -> U2_gga(X, Xs, Y, M, =<_in_gg(X, Y))
   =<_in_gg(X0, X1) -> =<_out_gg(X0, X1)
   U2_gga(X, Xs, Y, M, =<_out_gg(X, Y)) -> U3_gga(X, Xs, Y, M, maximum_in_gga(Xs, Y, M))
   maximum_in_gga(.(X, Xs), Y, M) -> U4_gga(X, Xs, Y, M, >_in_gg(X, Y))
   >_in_gg(X0, X1) -> >_out_gg(X0, X1)
   U4_gga(X, Xs, Y, M, >_out_gg(X, Y)) -> U5_gga(X, Xs, Y, M, maximum_in_gga(Xs, X, M))
   maximum_in_gga([], M, M) -> maximum_out_gga([], M, M)
   U5_gga(X, Xs, Y, M, maximum_out_gga(Xs, X, M)) -> maximum_out_gga(.(X, Xs), Y, M)
   U3_gga(X, Xs, Y, M, maximum_out_gga(Xs, Y, M)) -> maximum_out_gga(.(X, Xs), Y, M)
   U1_ga(X, Xs, M, maximum_out_gga(Xs, X, M)) -> maximum_out_ga(.(X, Xs), M)

The argument filtering Pi contains the following mapping:
maximum_in_ga(x1, x2)  =  maximum_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

maximum_in_gga(x1, x2, x3)  =  maximum_in_gga(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x2, x3, x5)

=<_in_gg(x1, x2)  =  =<_in_gg(x1, x2)

=<_out_gg(x1, x2)  =  =<_out_gg

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x5)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x1, x2, x5)

>_in_gg(x1, x2)  =  >_in_gg(x1, x2)

>_out_gg(x1, x2)  =  >_out_gg

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x5)

[]  =  []

maximum_out_gga(x1, x2, x3)  =  maximum_out_gga(x3)

maximum_out_ga(x1, x2)  =  maximum_out_ga(x2)

MAXIMUM_IN_GA(x1, x2)  =  MAXIMUM_IN_GA(x1)

U1_GA(x1, x2, x3, x4)  =  U1_GA(x4)

MAXIMUM_IN_GGA(x1, x2, x3)  =  MAXIMUM_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x2, x3, x5)

=<_IN_GG(x1, x2)  =  =<_IN_GG(x1, x2)

U3_GGA(x1, x2, x3, x4, x5)  =  U3_GGA(x5)

U4_GGA(x1, x2, x3, x4, x5)  =  U4_GGA(x1, x2, x5)

>_IN_GG(x1, x2)  =  >_IN_GG(x1, x2)

U5_GGA(x1, x2, x3, x4, x5)  =  U5_GGA(x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(7) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 6 less nodes.
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GGA(X, Xs, Y, M, =<_out_gg(X, Y)) -> MAXIMUM_IN_GGA(Xs, Y, M)
   MAXIMUM_IN_GGA(.(X, Xs), Y, M) -> U2_GGA(X, Xs, Y, M, =<_in_gg(X, Y))
   MAXIMUM_IN_GGA(.(X, Xs), Y, M) -> U4_GGA(X, Xs, Y, M, >_in_gg(X, Y))
   U4_GGA(X, Xs, Y, M, >_out_gg(X, Y)) -> MAXIMUM_IN_GGA(Xs, X, M)

The TRS R consists of the following rules:

   maximum_in_ga(.(X, Xs), M) -> U1_ga(X, Xs, M, maximum_in_gga(Xs, X, M))
   maximum_in_gga(.(X, Xs), Y, M) -> U2_gga(X, Xs, Y, M, =<_in_gg(X, Y))
   =<_in_gg(X0, X1) -> =<_out_gg(X0, X1)
   U2_gga(X, Xs, Y, M, =<_out_gg(X, Y)) -> U3_gga(X, Xs, Y, M, maximum_in_gga(Xs, Y, M))
   maximum_in_gga(.(X, Xs), Y, M) -> U4_gga(X, Xs, Y, M, >_in_gg(X, Y))
   >_in_gg(X0, X1) -> >_out_gg(X0, X1)
   U4_gga(X, Xs, Y, M, >_out_gg(X, Y)) -> U5_gga(X, Xs, Y, M, maximum_in_gga(Xs, X, M))
   maximum_in_gga([], M, M) -> maximum_out_gga([], M, M)
   U5_gga(X, Xs, Y, M, maximum_out_gga(Xs, X, M)) -> maximum_out_gga(.(X, Xs), Y, M)
   U3_gga(X, Xs, Y, M, maximum_out_gga(Xs, Y, M)) -> maximum_out_gga(.(X, Xs), Y, M)
   U1_ga(X, Xs, M, maximum_out_gga(Xs, X, M)) -> maximum_out_ga(.(X, Xs), M)

The argument filtering Pi contains the following mapping:
maximum_in_ga(x1, x2)  =  maximum_in_ga(x1)

.(x1, x2)  =  .(x1, x2)

U1_ga(x1, x2, x3, x4)  =  U1_ga(x4)

maximum_in_gga(x1, x2, x3)  =  maximum_in_gga(x1, x2)

U2_gga(x1, x2, x3, x4, x5)  =  U2_gga(x2, x3, x5)

=<_in_gg(x1, x2)  =  =<_in_gg(x1, x2)

=<_out_gg(x1, x2)  =  =<_out_gg

U3_gga(x1, x2, x3, x4, x5)  =  U3_gga(x5)

U4_gga(x1, x2, x3, x4, x5)  =  U4_gga(x1, x2, x5)

>_in_gg(x1, x2)  =  >_in_gg(x1, x2)

>_out_gg(x1, x2)  =  >_out_gg

U5_gga(x1, x2, x3, x4, x5)  =  U5_gga(x5)

[]  =  []

maximum_out_gga(x1, x2, x3)  =  maximum_out_gga(x3)

maximum_out_ga(x1, x2)  =  maximum_out_ga(x2)

MAXIMUM_IN_GGA(x1, x2, x3)  =  MAXIMUM_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x2, x3, x5)

U4_GGA(x1, x2, x3, x4, x5)  =  U4_GGA(x1, x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U2_GGA(X, Xs, Y, M, =<_out_gg(X, Y)) -> MAXIMUM_IN_GGA(Xs, Y, M)
   MAXIMUM_IN_GGA(.(X, Xs), Y, M) -> U2_GGA(X, Xs, Y, M, =<_in_gg(X, Y))
   MAXIMUM_IN_GGA(.(X, Xs), Y, M) -> U4_GGA(X, Xs, Y, M, >_in_gg(X, Y))
   U4_GGA(X, Xs, Y, M, >_out_gg(X, Y)) -> MAXIMUM_IN_GGA(Xs, X, M)

The TRS R consists of the following rules:

   =<_in_gg(X0, X1) -> =<_out_gg(X0, X1)
   >_in_gg(X0, X1) -> >_out_gg(X0, X1)

The argument filtering Pi contains the following mapping:
.(x1, x2)  =  .(x1, x2)

=<_in_gg(x1, x2)  =  =<_in_gg(x1, x2)

=<_out_gg(x1, x2)  =  =<_out_gg

>_in_gg(x1, x2)  =  >_in_gg(x1, x2)

>_out_gg(x1, x2)  =  >_out_gg

MAXIMUM_IN_GGA(x1, x2, x3)  =  MAXIMUM_IN_GGA(x1, x2)

U2_GGA(x1, x2, x3, x4, x5)  =  U2_GGA(x2, x3, x5)

U4_GGA(x1, x2, x3, x4, x5)  =  U4_GGA(x1, x2, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(12)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U2_GGA(Xs, Y, =<_out_gg) -> MAXIMUM_IN_GGA(Xs, Y)
   MAXIMUM_IN_GGA(.(X, Xs), Y) -> U2_GGA(Xs, Y, =<_in_gg(X, Y))
   MAXIMUM_IN_GGA(.(X, Xs), Y) -> U4_GGA(X, Xs, >_in_gg(X, Y))
   U4_GGA(X, Xs, >_out_gg) -> MAXIMUM_IN_GGA(Xs, X)

The TRS R consists of the following rules:

   =<_in_gg(X0, X1) -> =<_out_gg
   >_in_gg(X0, X1) -> >_out_gg

The set Q consists of the following terms:

   =<_in_gg(x0, x1)
   >_in_gg(x0, x1)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(13) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*MAXIMUM_IN_GGA(.(X, Xs), Y) -> U2_GGA(Xs, Y, =<_in_gg(X, Y))
The graph contains the following edges 1 > 1, 2 >= 2


*MAXIMUM_IN_GGA(.(X, Xs), Y) -> U4_GGA(X, Xs, >_in_gg(X, Y))
The graph contains the following edges 1 > 1, 1 > 2


*U2_GGA(Xs, Y, =<_out_gg) -> MAXIMUM_IN_GGA(Xs, Y)
The graph contains the following edges 1 >= 1, 2 >= 2


*U4_GGA(X, Xs, >_out_gg) -> MAXIMUM_IN_GGA(Xs, X)
The graph contains the following edges 2 >= 1, 1 >= 2


----------------------------------------

(14)
YES
