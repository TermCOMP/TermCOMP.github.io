MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/pg1Bj.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

main(g,g)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) CutEliminatorProof [SOUND, 0 ms]
(2) Prolog
    (3) UndefinedPredicateHandlerProof [SOUND, 0 ms]
    (4) Prolog
    (5) PrologToPiTRSProof [SOUND, 0 ms]
    (6) PiTRS
        (7) DependencyPairsProof [EQUIVALENT, 31 ms]
        (8) PiDP
        (9) DependencyGraphProof [EQUIVALENT, 0 ms]
        (10) PiDP
        (11) UsableRulesProof [EQUIVALENT, 0 ms]
        (12) PiDP
        (13) PiDPToQDPProof [SOUND, 0 ms]
        (14) QDP
        (15) TransformationProof [EQUIVALENT, 0 ms]
        (16) QDP
        (17) TransformationProof [EQUIVALENT, 0 ms]
        (18) QDP
        (19) UsableRulesProof [EQUIVALENT, 0 ms]
        (20) QDP
        (21) QReductionProof [EQUIVALENT, 0 ms]
        (22) QDP
        (23) TransformationProof [EQUIVALENT, 0 ms]
        (24) QDP
        (25) UsableRulesProof [EQUIVALENT, 0 ms]
        (26) QDP
        (27) QReductionProof [EQUIVALENT, 0 ms]
        (28) QDP
        (29) NonTerminationLoopProof [COMPLETE, 0 ms]
        (30) NO
    (31) PrologToPiTRSProof [SOUND, 0 ms]
    (32) PiTRS
        (33) DependencyPairsProof [EQUIVALENT, 25 ms]
        (34) PiDP
        (35) DependencyGraphProof [EQUIVALENT, 0 ms]
        (36) PiDP
        (37) UsableRulesProof [EQUIVALENT, 0 ms]
        (38) PiDP
        (39) PiDPToQDPProof [SOUND, 0 ms]
        (40) QDP
        (41) TransformationProof [EQUIVALENT, 0 ms]
        (42) QDP
        (43) TransformationProof [EQUIVALENT, 0 ms]
        (44) QDP
        (45) UsableRulesProof [EQUIVALENT, 0 ms]
        (46) QDP
        (47) QReductionProof [EQUIVALENT, 0 ms]
        (48) QDP
        (49) TransformationProof [EQUIVALENT, 0 ms]
        (50) QDP
        (51) UsableRulesProof [EQUIVALENT, 0 ms]
        (52) QDP
        (53) QReductionProof [EQUIVALENT, 0 ms]
        (54) QDP
        (55) NonTerminationLoopProof [COMPLETE, 3 ms]
        (56) NO
(57) IntegerArithmeticTransformerProof [SOUND, 0 ms]
(58) Prolog
    (59) CutEliminatorProof [SOUND, 0 ms]
    (60) Prolog
    (61) UnifyTransformerProof [EQUIVALENT, 0 ms]
    (62) Prolog
    (63) OrTransformerProof [EQUIVALENT, 0 ms]
    (64) Prolog
    (65) PrologToPiTRSProof [SOUND, 0 ms]
    (66) PiTRS
        (67) DependencyPairsProof [EQUIVALENT, 85 ms]
        (68) PiDP
        (69) DependencyGraphProof [EQUIVALENT, 0 ms]
        (70) AND
            (71) PiDP
                (72) UsableRulesProof [EQUIVALENT, 0 ms]
                (73) PiDP
                (74) PiDPToQDPProof [EQUIVALENT, 2 ms]
                (75) QDP
                (76) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (77) YES
            (78) PiDP
                (79) UsableRulesProof [EQUIVALENT, 0 ms]
                (80) PiDP
                (81) PiDPToQDPProof [SOUND, 0 ms]
                (82) QDP
                (83) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (84) YES
            (85) PiDP
                (86) UsableRulesProof [EQUIVALENT, 0 ms]
                (87) PiDP
                (88) PiDPToQDPProof [SOUND, 0 ms]
                (89) QDP
                (90) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (91) YES
            (92) PiDP
                (93) UsableRulesProof [EQUIVALENT, 0 ms]
                (94) PiDP
                (95) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (96) QDP
                (97) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (98) YES
            (99) PiDP
                (100) UsableRulesProof [EQUIVALENT, 0 ms]
                (101) PiDP
                (102) PiDPToQDPProof [SOUND, 0 ms]
                (103) QDP
                (104) TransformationProof [EQUIVALENT, 3 ms]
                (105) QDP
                (106) TransformationProof [EQUIVALENT, 0 ms]
                (107) QDP
                (108) TransformationProof [EQUIVALENT, 0 ms]
                (109) QDP
                (110) TransformationProof [EQUIVALENT, 0 ms]
                (111) QDP
                (112) UsableRulesProof [EQUIVALENT, 0 ms]
                (113) QDP
                (114) QReductionProof [EQUIVALENT, 0 ms]
                (115) QDP
                (116) TransformationProof [EQUIVALENT, 0 ms]
                (117) QDP
                (118) UsableRulesProof [EQUIVALENT, 0 ms]
                (119) QDP
                (120) QReductionProof [EQUIVALENT, 0 ms]
                (121) QDP
                (122) TransformationProof [SOUND, 0 ms]
                (123) QDP
                (124) UsableRulesProof [EQUIVALENT, 0 ms]
                (125) QDP
                (126) QReductionProof [EQUIVALENT, 0 ms]
                (127) QDP
                (128) TransformationProof [EQUIVALENT, 0 ms]
                (129) QDP
                (130) TransformationProof [EQUIVALENT, 0 ms]
                (131) QDP
                (132) TransformationProof [EQUIVALENT, 0 ms]
                (133) QDP
                (134) TransformationProof [SOUND, 0 ms]
                (135) QDP
                (136) DependencyGraphProof [EQUIVALENT, 0 ms]
                (137) QDP
                (138) QDPQMonotonicMRRProof [EQUIVALENT, 16 ms]
                (139) QDP
                (140) QDPQMonotonicMRRProof [EQUIVALENT, 9 ms]
                (141) QDP
                (142) QDPQMonotonicMRRProof [EQUIVALENT, 6 ms]
                (143) QDP
                (144) QDPQMonotonicMRRProof [EQUIVALENT, 6 ms]
                (145) QDP
                (146) QReductionProof [EQUIVALENT, 0 ms]
                (147) QDP
                (148) QDPQMonotonicMRRProof [EQUIVALENT, 4 ms]
                (149) QDP
                (150) QReductionProof [EQUIVALENT, 0 ms]
                (151) QDP
                (152) TransformationProof [SOUND, 0 ms]
                (153) QDP
                (154) UsableRulesProof [EQUIVALENT, 0 ms]
                (155) QDP
                (156) TransformationProof [EQUIVALENT, 0 ms]
                (157) QDP
                (158) TransformationProof [EQUIVALENT, 0 ms]
                (159) QDP
                (160) UsableRulesProof [EQUIVALENT, 0 ms]
                (161) QDP
                (162) QReductionProof [EQUIVALENT, 0 ms]
                (163) QDP
                (164) TransformationProof [EQUIVALENT, 0 ms]
                (165) QDP
                (166) UsableRulesProof [EQUIVALENT, 0 ms]
                (167) QDP
                (168) QReductionProof [EQUIVALENT, 0 ms]
                (169) QDP
                (170) TransformationProof [EQUIVALENT, 0 ms]
                (171) QDP
                (172) UsableRulesProof [EQUIVALENT, 0 ms]
                (173) QDP
                (174) QReductionProof [EQUIVALENT, 0 ms]
                (175) QDP
                (176) TransformationProof [EQUIVALENT, 0 ms]
                (177) QDP
                (178) TransformationProof [EQUIVALENT, 0 ms]
                (179) QDP
                (180) DependencyGraphProof [EQUIVALENT, 0 ms]
                (181) QDP
                (182) TransformationProof [EQUIVALENT, 0 ms]
                (183) QDP
                (184) TransformationProof [EQUIVALENT, 0 ms]
                (185) QDP
                (186) NonTerminationLoopProof [COMPLETE, 0 ms]
                (187) NO
            (188) PiDP
                (189) UsableRulesProof [EQUIVALENT, 0 ms]
                (190) PiDP
                (191) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (192) QDP
                (193) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (194) YES
    (195) PrologToPiTRSProof [SOUND, 0 ms]
    (196) PiTRS
        (197) DependencyPairsProof [EQUIVALENT, 56 ms]
        (198) PiDP
        (199) DependencyGraphProof [EQUIVALENT, 0 ms]
        (200) AND
            (201) PiDP
                (202) UsableRulesProof [EQUIVALENT, 0 ms]
                (203) PiDP
                (204) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (205) QDP
                (206) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (207) YES
            (208) PiDP
                (209) UsableRulesProof [EQUIVALENT, 0 ms]
                (210) PiDP
                (211) PiDPToQDPProof [SOUND, 0 ms]
                (212) QDP
                (213) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (214) YES
            (215) PiDP
                (216) UsableRulesProof [EQUIVALENT, 0 ms]
                (217) PiDP
                (218) PiDPToQDPProof [SOUND, 0 ms]
                (219) QDP
                (220) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (221) YES
            (222) PiDP
                (223) UsableRulesProof [EQUIVALENT, 0 ms]
                (224) PiDP
                (225) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (226) QDP
                (227) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (228) YES
            (229) PiDP
                (230) UsableRulesProof [EQUIVALENT, 0 ms]
                (231) PiDP
                (232) PiDPToQDPProof [SOUND, 0 ms]
                (233) QDP
                (234) TransformationProof [EQUIVALENT, 0 ms]
                (235) QDP
                (236) TransformationProof [EQUIVALENT, 0 ms]
                (237) QDP
                (238) TransformationProof [EQUIVALENT, 0 ms]
                (239) QDP
                (240) TransformationProof [EQUIVALENT, 0 ms]
                (241) QDP
                (242) UsableRulesProof [EQUIVALENT, 0 ms]
                (243) QDP
                (244) QReductionProof [EQUIVALENT, 0 ms]
                (245) QDP
                (246) TransformationProof [EQUIVALENT, 0 ms]
                (247) QDP
                (248) UsableRulesProof [EQUIVALENT, 0 ms]
                (249) QDP
                (250) QReductionProof [EQUIVALENT, 0 ms]
                (251) QDP
                (252) TransformationProof [SOUND, 0 ms]
                (253) QDP
                (254) UsableRulesProof [EQUIVALENT, 0 ms]
                (255) QDP
                (256) QReductionProof [EQUIVALENT, 0 ms]
                (257) QDP
                (258) TransformationProof [EQUIVALENT, 0 ms]
                (259) QDP
                (260) TransformationProof [EQUIVALENT, 0 ms]
                (261) QDP
                (262) TransformationProof [EQUIVALENT, 0 ms]
                (263) QDP
                (264) TransformationProof [EQUIVALENT, 0 ms]
                (265) QDP
                (266) TransformationProof [EQUIVALENT, 0 ms]
                (267) QDP
                (268) TransformationProof [SOUND, 0 ms]
                (269) QDP
                (270) DependencyGraphProof [EQUIVALENT, 0 ms]
                (271) QDP
                (272) QDPQMonotonicMRRProof [EQUIVALENT, 14 ms]
                (273) QDP
                (274) QDPQMonotonicMRRProof [EQUIVALENT, 13 ms]
                (275) QDP
                (276) UsableRulesProof [EQUIVALENT, 0 ms]
                (277) QDP
                (278) QReductionProof [EQUIVALENT, 0 ms]
                (279) QDP
                (280) QDPQMonotonicMRRProof [EQUIVALENT, 21 ms]
                (281) QDP
                (282) QReductionProof [EQUIVALENT, 0 ms]
                (283) QDP
                (284) TransformationProof [SOUND, 0 ms]
                (285) QDP
                (286) UsableRulesProof [EQUIVALENT, 0 ms]
                (287) QDP
                (288) TransformationProof [EQUIVALENT, 0 ms]
                (289) QDP
                (290) TransformationProof [EQUIVALENT, 0 ms]
                (291) QDP
                (292) UsableRulesProof [EQUIVALENT, 0 ms]
                (293) QDP
                (294) QReductionProof [EQUIVALENT, 0 ms]
                (295) QDP
                (296) TransformationProof [EQUIVALENT, 0 ms]
                (297) QDP
                (298) UsableRulesProof [EQUIVALENT, 0 ms]
                (299) QDP
                (300) QReductionProof [EQUIVALENT, 0 ms]
                (301) QDP
                (302) TransformationProof [EQUIVALENT, 0 ms]
                (303) QDP
                (304) UsableRulesProof [EQUIVALENT, 0 ms]
                (305) QDP
                (306) QReductionProof [EQUIVALENT, 0 ms]
                (307) QDP
                (308) TransformationProof [EQUIVALENT, 0 ms]
                (309) QDP
                (310) TransformationProof [EQUIVALENT, 0 ms]
                (311) QDP
                (312) DependencyGraphProof [EQUIVALENT, 0 ms]
                (313) QDP
                (314) TransformationProof [EQUIVALENT, 0 ms]
                (315) QDP
                (316) TransformationProof [EQUIVALENT, 0 ms]
                (317) QDP
                (318) NonTerminationLoopProof [COMPLETE, 0 ms]
                (319) NO
            (320) PiDP
                (321) UsableRulesProof [EQUIVALENT, 0 ms]
                (322) PiDP
                (323) PiDPToQDPProof [EQUIVALENT, 0 ms]
                (324) QDP
                (325) QDPSizeChangeProof [EQUIVALENT, 0 ms]
                (326) YES


----------------------------------------

(0)
Obligation:
Clauses:

main(M, N) :- ','(>=(M, 0), ','(>=(N, 0), ','(mult(M, N, Ret1), mult(N, M, Ret2)))).
mult(N, M, Ret) :- ','(<(M, 0), ','(!, ','(is(M1, -(M)), mult(N, M1, Ret)))).
mult(X1, M, Ret) :- ','(=:=(M, 0), is(Ret, 0)).
mult(N, M, Ret) :- ','(!, ','(is(M1, -(M, 1)), ','(mult(N, M1, Ret1), is(Ret, +(N, Ret1))))).


Query: main(g,g)
----------------------------------------

(1) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

main(M, N) :- ','(>=(M, 0), ','(>=(N, 0), ','(mult(M, N, Ret1), mult(N, M, Ret2)))).
mult(N, M, Ret) :- ','(<(M, 0), ','(is(M1, -(M)), mult(N, M1, Ret))).
mult(X1, M, Ret) :- ','(=:=(M, 0), is(Ret, 0)).
mult(N, M, Ret) :- ','(is(M1, -(M, 1)), ','(mult(N, M1, Ret1), is(Ret, +(N, Ret1)))).


Query: main(g,g)
----------------------------------------

(3) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(4)
Obligation:
Clauses:

main(M, N) :- ','(>=(M, 0), ','(>=(N, 0), ','(mult(M, N, Ret1), mult(N, M, Ret2)))).
mult(N, M, Ret) :- ','(<(M, 0), ','(is(M1, -(M)), mult(N, M1, Ret))).
mult(X1, M, Ret) :- ','(=:=(M, 0), is(Ret, 0)).
mult(N, M, Ret) :- ','(is(M1, -(M, 1)), ','(mult(N, M1, Ret1), is(Ret, +(N, Ret1)))).
>=(X0, X1).
<(X0, X1).
is(X0, X1).
=:=(X0, X1).


Query: main(g,g)
----------------------------------------

(5) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

main_in_2: (b,b)

mult_in_3: (b,b,f) (b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, >=_in_gg(N, 0))
   U2_gg(M, N, >=_out_gg(N, 0)) -> U3_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U5_gga(N, M, Ret, <_in_gg(M, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U5_gga(N, M, Ret, <_out_gg(M, 0)) -> U6_gga(N, M, Ret, is_in_ag(M1, -(M)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U6_gga(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gga(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(N, M, Ret) -> U5_gaa(N, M, Ret, <_in_ag(M, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U5_gaa(N, M, Ret, <_out_ag(M, 0)) -> U6_gaa(N, M, Ret, is_in_ag(M1, -(M)))
   U6_gaa(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(X1, M, Ret) -> U8_gaa(X1, M, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U8_gaa(X1, M, Ret, =:=_out_ag(M, 0)) -> U9_gaa(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gaa(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gaa(X1, M, Ret)
   mult_in_gaa(N, M, Ret) -> U10_gaa(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gaa(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gaa(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gaa(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gaa(N, M, Ret)
   U7_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gaa(N, M, Ret)
   U7_gga(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   mult_in_gga(X1, M, Ret) -> U8_gga(X1, M, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U8_gga(X1, M, Ret, =:=_out_gg(M, 0)) -> U9_gga(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gga(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U10_gga(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gga(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gga(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gga(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gga(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gga(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gga(N, M, Ret)
   U3_gg(M, N, mult_out_gga(M, N, Ret1)) -> U4_gg(M, N, mult_in_gga(N, M, Ret2))
   U4_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg(x1, x2)

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg(x1, x2)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

-(x1)  =  -

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x2, x4)

mult_in_gaa(x1, x2, x3)  =  mult_in_gaa(x1)

U5_gaa(x1, x2, x3, x4)  =  U5_gaa(x1, x4)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag(x2)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag(x2)

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x1, x4)

mult_out_gaa(x1, x2, x3)  =  mult_out_gaa(x1)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

-(x1, x2)  =  -(x2)

1  =  1

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4)  =  U12_gaa(x1, x4)

+(x1, x2)  =  +(x1)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg(x1, x2)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x1, x2, x4)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x2, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(6)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, >=_in_gg(N, 0))
   U2_gg(M, N, >=_out_gg(N, 0)) -> U3_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U5_gga(N, M, Ret, <_in_gg(M, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U5_gga(N, M, Ret, <_out_gg(M, 0)) -> U6_gga(N, M, Ret, is_in_ag(M1, -(M)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U6_gga(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gga(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(N, M, Ret) -> U5_gaa(N, M, Ret, <_in_ag(M, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U5_gaa(N, M, Ret, <_out_ag(M, 0)) -> U6_gaa(N, M, Ret, is_in_ag(M1, -(M)))
   U6_gaa(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(X1, M, Ret) -> U8_gaa(X1, M, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U8_gaa(X1, M, Ret, =:=_out_ag(M, 0)) -> U9_gaa(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gaa(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gaa(X1, M, Ret)
   mult_in_gaa(N, M, Ret) -> U10_gaa(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gaa(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gaa(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gaa(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gaa(N, M, Ret)
   U7_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gaa(N, M, Ret)
   U7_gga(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   mult_in_gga(X1, M, Ret) -> U8_gga(X1, M, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U8_gga(X1, M, Ret, =:=_out_gg(M, 0)) -> U9_gga(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gga(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U10_gga(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gga(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gga(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gga(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gga(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gga(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gga(N, M, Ret)
   U3_gg(M, N, mult_out_gga(M, N, Ret1)) -> U4_gg(M, N, mult_in_gga(N, M, Ret2))
   U4_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg(x1, x2)

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg(x1, x2)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

-(x1)  =  -

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x2, x4)

mult_in_gaa(x1, x2, x3)  =  mult_in_gaa(x1)

U5_gaa(x1, x2, x3, x4)  =  U5_gaa(x1, x4)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag(x2)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag(x2)

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x1, x4)

mult_out_gaa(x1, x2, x3)  =  mult_out_gaa(x1)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

-(x1, x2)  =  -(x2)

1  =  1

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4)  =  U12_gaa(x1, x4)

+(x1, x2)  =  +(x1)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg(x1, x2)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x1, x2, x4)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x2, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)



----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GG(M, N) -> U1_GG(M, N, >=_in_gg(M, 0))
   MAIN_IN_GG(M, N) -> >=_IN_GG(M, 0)
   U1_GG(M, N, >=_out_gg(M, 0)) -> U2_GG(M, N, >=_in_gg(N, 0))
   U1_GG(M, N, >=_out_gg(M, 0)) -> >=_IN_GG(N, 0)
   U2_GG(M, N, >=_out_gg(N, 0)) -> U3_GG(M, N, mult_in_gga(M, N, Ret1))
   U2_GG(M, N, >=_out_gg(N, 0)) -> MULT_IN_GGA(M, N, Ret1)
   MULT_IN_GGA(N, M, Ret) -> U5_GGA(N, M, Ret, <_in_gg(M, 0))
   MULT_IN_GGA(N, M, Ret) -> <_IN_GG(M, 0)
   U5_GGA(N, M, Ret, <_out_gg(M, 0)) -> U6_GGA(N, M, Ret, is_in_ag(M1, -(M)))
   U5_GGA(N, M, Ret, <_out_gg(M, 0)) -> IS_IN_AG(M1, -(M))
   U6_GGA(N, M, Ret, is_out_ag(M1, -(M))) -> U7_GGA(N, M, Ret, mult_in_gaa(N, M1, Ret))
   U6_GGA(N, M, Ret, is_out_ag(M1, -(M))) -> MULT_IN_GAA(N, M1, Ret)
   MULT_IN_GAA(N, M, Ret) -> U5_GAA(N, M, Ret, <_in_ag(M, 0))
   MULT_IN_GAA(N, M, Ret) -> <_IN_AG(M, 0)
   U5_GAA(N, M, Ret, <_out_ag(M, 0)) -> U6_GAA(N, M, Ret, is_in_ag(M1, -(M)))
   U5_GAA(N, M, Ret, <_out_ag(M, 0)) -> IS_IN_AG(M1, -(M))
   U6_GAA(N, M, Ret, is_out_ag(M1, -(M))) -> U7_GAA(N, M, Ret, mult_in_gaa(N, M1, Ret))
   U6_GAA(N, M, Ret, is_out_ag(M1, -(M))) -> MULT_IN_GAA(N, M1, Ret)
   MULT_IN_GAA(X1, M, Ret) -> U8_GAA(X1, M, Ret, =:=_in_ag(M, 0))
   MULT_IN_GAA(X1, M, Ret) -> =:=_IN_AG(M, 0)
   U8_GAA(X1, M, Ret, =:=_out_ag(M, 0)) -> U9_GAA(X1, M, Ret, is_in_ag(Ret, 0))
   U8_GAA(X1, M, Ret, =:=_out_ag(M, 0)) -> IS_IN_AG(Ret, 0)
   MULT_IN_GAA(N, M, Ret) -> U10_GAA(N, M, Ret, is_in_ag(M1, -(M, 1)))
   MULT_IN_GAA(N, M, Ret) -> IS_IN_AG(M1, -(M, 1))
   U10_GAA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_GAA(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U10_GAA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> MULT_IN_GAA(N, M1, Ret1)
   U11_GAA(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_GAA(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U11_GAA(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> IS_IN_AG(Ret, +(N, Ret1))
   MULT_IN_GGA(X1, M, Ret) -> U8_GGA(X1, M, Ret, =:=_in_gg(M, 0))
   MULT_IN_GGA(X1, M, Ret) -> =:=_IN_GG(M, 0)
   U8_GGA(X1, M, Ret, =:=_out_gg(M, 0)) -> U9_GGA(X1, M, Ret, is_in_ag(Ret, 0))
   U8_GGA(X1, M, Ret, =:=_out_gg(M, 0)) -> IS_IN_AG(Ret, 0)
   MULT_IN_GGA(N, M, Ret) -> U10_GGA(N, M, Ret, is_in_ag(M1, -(M, 1)))
   MULT_IN_GGA(N, M, Ret) -> IS_IN_AG(M1, -(M, 1))
   U10_GGA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_GGA(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U10_GGA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> MULT_IN_GAA(N, M1, Ret1)
   U11_GGA(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_GGA(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U11_GGA(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> IS_IN_AG(Ret, +(N, Ret1))
   U3_GG(M, N, mult_out_gga(M, N, Ret1)) -> U4_GG(M, N, mult_in_gga(N, M, Ret2))
   U3_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, >=_in_gg(N, 0))
   U2_gg(M, N, >=_out_gg(N, 0)) -> U3_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U5_gga(N, M, Ret, <_in_gg(M, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U5_gga(N, M, Ret, <_out_gg(M, 0)) -> U6_gga(N, M, Ret, is_in_ag(M1, -(M)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U6_gga(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gga(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(N, M, Ret) -> U5_gaa(N, M, Ret, <_in_ag(M, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U5_gaa(N, M, Ret, <_out_ag(M, 0)) -> U6_gaa(N, M, Ret, is_in_ag(M1, -(M)))
   U6_gaa(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(X1, M, Ret) -> U8_gaa(X1, M, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U8_gaa(X1, M, Ret, =:=_out_ag(M, 0)) -> U9_gaa(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gaa(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gaa(X1, M, Ret)
   mult_in_gaa(N, M, Ret) -> U10_gaa(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gaa(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gaa(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gaa(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gaa(N, M, Ret)
   U7_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gaa(N, M, Ret)
   U7_gga(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   mult_in_gga(X1, M, Ret) -> U8_gga(X1, M, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U8_gga(X1, M, Ret, =:=_out_gg(M, 0)) -> U9_gga(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gga(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U10_gga(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gga(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gga(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gga(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gga(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gga(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gga(N, M, Ret)
   U3_gg(M, N, mult_out_gga(M, N, Ret1)) -> U4_gg(M, N, mult_in_gga(N, M, Ret2))
   U4_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg(x1, x2)

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg(x1, x2)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

-(x1)  =  -

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x2, x4)

mult_in_gaa(x1, x2, x3)  =  mult_in_gaa(x1)

U5_gaa(x1, x2, x3, x4)  =  U5_gaa(x1, x4)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag(x2)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag(x2)

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x1, x4)

mult_out_gaa(x1, x2, x3)  =  mult_out_gaa(x1)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

-(x1, x2)  =  -(x2)

1  =  1

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4)  =  U12_gaa(x1, x4)

+(x1, x2)  =  +(x1)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg(x1, x2)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x1, x2, x4)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x2, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

MAIN_IN_GG(x1, x2)  =  MAIN_IN_GG(x1, x2)

U1_GG(x1, x2, x3)  =  U1_GG(x1, x2, x3)

>=_IN_GG(x1, x2)  =  >=_IN_GG(x1, x2)

U2_GG(x1, x2, x3)  =  U2_GG(x1, x2, x3)

U3_GG(x1, x2, x3)  =  U3_GG(x1, x2, x3)

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)

U5_GGA(x1, x2, x3, x4)  =  U5_GGA(x1, x2, x4)

<_IN_GG(x1, x2)  =  <_IN_GG(x1, x2)

U6_GGA(x1, x2, x3, x4)  =  U6_GGA(x1, x2, x4)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U7_GGA(x1, x2, x3, x4)  =  U7_GGA(x1, x2, x4)

MULT_IN_GAA(x1, x2, x3)  =  MULT_IN_GAA(x1)

U5_GAA(x1, x2, x3, x4)  =  U5_GAA(x1, x4)

<_IN_AG(x1, x2)  =  <_IN_AG(x2)

U6_GAA(x1, x2, x3, x4)  =  U6_GAA(x1, x4)

U7_GAA(x1, x2, x3, x4)  =  U7_GAA(x1, x4)

U8_GAA(x1, x2, x3, x4)  =  U8_GAA(x1, x4)

=:=_IN_AG(x1, x2)  =  =:=_IN_AG(x2)

U9_GAA(x1, x2, x3, x4)  =  U9_GAA(x1, x4)

U10_GAA(x1, x2, x3, x4)  =  U10_GAA(x1, x4)

U11_GAA(x1, x2, x3, x4)  =  U11_GAA(x1, x4)

U12_GAA(x1, x2, x3, x4)  =  U12_GAA(x1, x4)

U8_GGA(x1, x2, x3, x4)  =  U8_GGA(x1, x2, x4)

=:=_IN_GG(x1, x2)  =  =:=_IN_GG(x1, x2)

U9_GGA(x1, x2, x3, x4)  =  U9_GGA(x1, x2, x4)

U10_GGA(x1, x2, x3, x4)  =  U10_GGA(x1, x2, x4)

U11_GGA(x1, x2, x3, x4)  =  U11_GGA(x1, x2, x4)

U12_GGA(x1, x2, x3, x4)  =  U12_GGA(x1, x2, x4)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GG(M, N) -> U1_GG(M, N, >=_in_gg(M, 0))
   MAIN_IN_GG(M, N) -> >=_IN_GG(M, 0)
   U1_GG(M, N, >=_out_gg(M, 0)) -> U2_GG(M, N, >=_in_gg(N, 0))
   U1_GG(M, N, >=_out_gg(M, 0)) -> >=_IN_GG(N, 0)
   U2_GG(M, N, >=_out_gg(N, 0)) -> U3_GG(M, N, mult_in_gga(M, N, Ret1))
   U2_GG(M, N, >=_out_gg(N, 0)) -> MULT_IN_GGA(M, N, Ret1)
   MULT_IN_GGA(N, M, Ret) -> U5_GGA(N, M, Ret, <_in_gg(M, 0))
   MULT_IN_GGA(N, M, Ret) -> <_IN_GG(M, 0)
   U5_GGA(N, M, Ret, <_out_gg(M, 0)) -> U6_GGA(N, M, Ret, is_in_ag(M1, -(M)))
   U5_GGA(N, M, Ret, <_out_gg(M, 0)) -> IS_IN_AG(M1, -(M))
   U6_GGA(N, M, Ret, is_out_ag(M1, -(M))) -> U7_GGA(N, M, Ret, mult_in_gaa(N, M1, Ret))
   U6_GGA(N, M, Ret, is_out_ag(M1, -(M))) -> MULT_IN_GAA(N, M1, Ret)
   MULT_IN_GAA(N, M, Ret) -> U5_GAA(N, M, Ret, <_in_ag(M, 0))
   MULT_IN_GAA(N, M, Ret) -> <_IN_AG(M, 0)
   U5_GAA(N, M, Ret, <_out_ag(M, 0)) -> U6_GAA(N, M, Ret, is_in_ag(M1, -(M)))
   U5_GAA(N, M, Ret, <_out_ag(M, 0)) -> IS_IN_AG(M1, -(M))
   U6_GAA(N, M, Ret, is_out_ag(M1, -(M))) -> U7_GAA(N, M, Ret, mult_in_gaa(N, M1, Ret))
   U6_GAA(N, M, Ret, is_out_ag(M1, -(M))) -> MULT_IN_GAA(N, M1, Ret)
   MULT_IN_GAA(X1, M, Ret) -> U8_GAA(X1, M, Ret, =:=_in_ag(M, 0))
   MULT_IN_GAA(X1, M, Ret) -> =:=_IN_AG(M, 0)
   U8_GAA(X1, M, Ret, =:=_out_ag(M, 0)) -> U9_GAA(X1, M, Ret, is_in_ag(Ret, 0))
   U8_GAA(X1, M, Ret, =:=_out_ag(M, 0)) -> IS_IN_AG(Ret, 0)
   MULT_IN_GAA(N, M, Ret) -> U10_GAA(N, M, Ret, is_in_ag(M1, -(M, 1)))
   MULT_IN_GAA(N, M, Ret) -> IS_IN_AG(M1, -(M, 1))
   U10_GAA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_GAA(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U10_GAA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> MULT_IN_GAA(N, M1, Ret1)
   U11_GAA(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_GAA(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U11_GAA(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> IS_IN_AG(Ret, +(N, Ret1))
   MULT_IN_GGA(X1, M, Ret) -> U8_GGA(X1, M, Ret, =:=_in_gg(M, 0))
   MULT_IN_GGA(X1, M, Ret) -> =:=_IN_GG(M, 0)
   U8_GGA(X1, M, Ret, =:=_out_gg(M, 0)) -> U9_GGA(X1, M, Ret, is_in_ag(Ret, 0))
   U8_GGA(X1, M, Ret, =:=_out_gg(M, 0)) -> IS_IN_AG(Ret, 0)
   MULT_IN_GGA(N, M, Ret) -> U10_GGA(N, M, Ret, is_in_ag(M1, -(M, 1)))
   MULT_IN_GGA(N, M, Ret) -> IS_IN_AG(M1, -(M, 1))
   U10_GGA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_GGA(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U10_GGA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> MULT_IN_GAA(N, M1, Ret1)
   U11_GGA(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_GGA(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U11_GGA(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> IS_IN_AG(Ret, +(N, Ret1))
   U3_GG(M, N, mult_out_gga(M, N, Ret1)) -> U4_GG(M, N, mult_in_gga(N, M, Ret2))
   U3_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, >=_in_gg(N, 0))
   U2_gg(M, N, >=_out_gg(N, 0)) -> U3_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U5_gga(N, M, Ret, <_in_gg(M, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U5_gga(N, M, Ret, <_out_gg(M, 0)) -> U6_gga(N, M, Ret, is_in_ag(M1, -(M)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U6_gga(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gga(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(N, M, Ret) -> U5_gaa(N, M, Ret, <_in_ag(M, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U5_gaa(N, M, Ret, <_out_ag(M, 0)) -> U6_gaa(N, M, Ret, is_in_ag(M1, -(M)))
   U6_gaa(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(X1, M, Ret) -> U8_gaa(X1, M, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U8_gaa(X1, M, Ret, =:=_out_ag(M, 0)) -> U9_gaa(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gaa(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gaa(X1, M, Ret)
   mult_in_gaa(N, M, Ret) -> U10_gaa(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gaa(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gaa(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gaa(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gaa(N, M, Ret)
   U7_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gaa(N, M, Ret)
   U7_gga(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   mult_in_gga(X1, M, Ret) -> U8_gga(X1, M, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U8_gga(X1, M, Ret, =:=_out_gg(M, 0)) -> U9_gga(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gga(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U10_gga(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gga(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gga(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gga(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gga(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gga(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gga(N, M, Ret)
   U3_gg(M, N, mult_out_gga(M, N, Ret1)) -> U4_gg(M, N, mult_in_gga(N, M, Ret2))
   U4_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg(x1, x2)

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg(x1, x2)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

-(x1)  =  -

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x2, x4)

mult_in_gaa(x1, x2, x3)  =  mult_in_gaa(x1)

U5_gaa(x1, x2, x3, x4)  =  U5_gaa(x1, x4)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag(x2)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag(x2)

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x1, x4)

mult_out_gaa(x1, x2, x3)  =  mult_out_gaa(x1)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

-(x1, x2)  =  -(x2)

1  =  1

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4)  =  U12_gaa(x1, x4)

+(x1, x2)  =  +(x1)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg(x1, x2)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x1, x2, x4)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x2, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

MAIN_IN_GG(x1, x2)  =  MAIN_IN_GG(x1, x2)

U1_GG(x1, x2, x3)  =  U1_GG(x1, x2, x3)

>=_IN_GG(x1, x2)  =  >=_IN_GG(x1, x2)

U2_GG(x1, x2, x3)  =  U2_GG(x1, x2, x3)

U3_GG(x1, x2, x3)  =  U3_GG(x1, x2, x3)

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)

U5_GGA(x1, x2, x3, x4)  =  U5_GGA(x1, x2, x4)

<_IN_GG(x1, x2)  =  <_IN_GG(x1, x2)

U6_GGA(x1, x2, x3, x4)  =  U6_GGA(x1, x2, x4)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U7_GGA(x1, x2, x3, x4)  =  U7_GGA(x1, x2, x4)

MULT_IN_GAA(x1, x2, x3)  =  MULT_IN_GAA(x1)

U5_GAA(x1, x2, x3, x4)  =  U5_GAA(x1, x4)

<_IN_AG(x1, x2)  =  <_IN_AG(x2)

U6_GAA(x1, x2, x3, x4)  =  U6_GAA(x1, x4)

U7_GAA(x1, x2, x3, x4)  =  U7_GAA(x1, x4)

U8_GAA(x1, x2, x3, x4)  =  U8_GAA(x1, x4)

=:=_IN_AG(x1, x2)  =  =:=_IN_AG(x2)

U9_GAA(x1, x2, x3, x4)  =  U9_GAA(x1, x4)

U10_GAA(x1, x2, x3, x4)  =  U10_GAA(x1, x4)

U11_GAA(x1, x2, x3, x4)  =  U11_GAA(x1, x4)

U12_GAA(x1, x2, x3, x4)  =  U12_GAA(x1, x4)

U8_GGA(x1, x2, x3, x4)  =  U8_GGA(x1, x2, x4)

=:=_IN_GG(x1, x2)  =  =:=_IN_GG(x1, x2)

U9_GGA(x1, x2, x3, x4)  =  U9_GGA(x1, x2, x4)

U10_GGA(x1, x2, x3, x4)  =  U10_GGA(x1, x2, x4)

U11_GGA(x1, x2, x3, x4)  =  U11_GGA(x1, x2, x4)

U12_GGA(x1, x2, x3, x4)  =  U12_GGA(x1, x2, x4)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 35 less nodes.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U5_GAA(N, M, Ret, <_out_ag(M, 0)) -> U6_GAA(N, M, Ret, is_in_ag(M1, -(M)))
   U6_GAA(N, M, Ret, is_out_ag(M1, -(M))) -> MULT_IN_GAA(N, M1, Ret)
   MULT_IN_GAA(N, M, Ret) -> U5_GAA(N, M, Ret, <_in_ag(M, 0))
   MULT_IN_GAA(N, M, Ret) -> U10_GAA(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_GAA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> MULT_IN_GAA(N, M1, Ret1)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, >=_in_gg(N, 0))
   U2_gg(M, N, >=_out_gg(N, 0)) -> U3_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U5_gga(N, M, Ret, <_in_gg(M, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U5_gga(N, M, Ret, <_out_gg(M, 0)) -> U6_gga(N, M, Ret, is_in_ag(M1, -(M)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U6_gga(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gga(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(N, M, Ret) -> U5_gaa(N, M, Ret, <_in_ag(M, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U5_gaa(N, M, Ret, <_out_ag(M, 0)) -> U6_gaa(N, M, Ret, is_in_ag(M1, -(M)))
   U6_gaa(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(X1, M, Ret) -> U8_gaa(X1, M, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U8_gaa(X1, M, Ret, =:=_out_ag(M, 0)) -> U9_gaa(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gaa(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gaa(X1, M, Ret)
   mult_in_gaa(N, M, Ret) -> U10_gaa(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gaa(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gaa(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gaa(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gaa(N, M, Ret)
   U7_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gaa(N, M, Ret)
   U7_gga(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   mult_in_gga(X1, M, Ret) -> U8_gga(X1, M, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U8_gga(X1, M, Ret, =:=_out_gg(M, 0)) -> U9_gga(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gga(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U10_gga(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gga(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gga(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gga(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gga(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gga(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gga(N, M, Ret)
   U3_gg(M, N, mult_out_gga(M, N, Ret1)) -> U4_gg(M, N, mult_in_gga(N, M, Ret2))
   U4_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg(x1, x2)

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x2, x4)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg(x1, x2)

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x2, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

-(x1)  =  -

U7_gga(x1, x2, x3, x4)  =  U7_gga(x1, x2, x4)

mult_in_gaa(x1, x2, x3)  =  mult_in_gaa(x1)

U5_gaa(x1, x2, x3, x4)  =  U5_gaa(x1, x4)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag(x2)

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x1, x4)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x1, x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag(x2)

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x1, x4)

mult_out_gaa(x1, x2, x3)  =  mult_out_gaa(x1)

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

-(x1, x2)  =  -(x2)

1  =  1

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4)  =  U12_gaa(x1, x4)

+(x1, x2)  =  +(x1)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2)

U8_gga(x1, x2, x3, x4)  =  U8_gga(x1, x2, x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg(x1, x2)

U9_gga(x1, x2, x3, x4)  =  U9_gga(x1, x2, x4)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x2, x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x2, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x1, x2, x4)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

MULT_IN_GAA(x1, x2, x3)  =  MULT_IN_GAA(x1)

U5_GAA(x1, x2, x3, x4)  =  U5_GAA(x1, x4)

U6_GAA(x1, x2, x3, x4)  =  U6_GAA(x1, x4)

U10_GAA(x1, x2, x3, x4)  =  U10_GAA(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(12)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U5_GAA(N, M, Ret, <_out_ag(M, 0)) -> U6_GAA(N, M, Ret, is_in_ag(M1, -(M)))
   U6_GAA(N, M, Ret, is_out_ag(M1, -(M))) -> MULT_IN_GAA(N, M1, Ret)
   MULT_IN_GAA(N, M, Ret) -> U5_GAA(N, M, Ret, <_in_ag(M, 0))
   MULT_IN_GAA(N, M, Ret) -> U10_GAA(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_GAA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> MULT_IN_GAA(N, M1, Ret1)

The TRS R consists of the following rules:

   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)

The argument filtering Pi contains the following mapping:
0  =  0

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag(x2)

-(x1)  =  -

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag(x2)

-(x1, x2)  =  -(x2)

1  =  1

MULT_IN_GAA(x1, x2, x3)  =  MULT_IN_GAA(x1)

U5_GAA(x1, x2, x3, x4)  =  U5_GAA(x1, x4)

U6_GAA(x1, x2, x3, x4)  =  U6_GAA(x1, x4)

U10_GAA(x1, x2, x3, x4)  =  U10_GAA(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(13) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U5_GAA(N, <_out_ag(0)) -> U6_GAA(N, is_in_ag(-))
   U6_GAA(N, is_out_ag(-)) -> MULT_IN_GAA(N)
   MULT_IN_GAA(N) -> U5_GAA(N, <_in_ag(0))
   MULT_IN_GAA(N) -> U10_GAA(N, is_in_ag(-(1)))
   U10_GAA(N, is_out_ag(-(1))) -> MULT_IN_GAA(N)

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag(X1)
   <_in_ag(X1) -> <_out_ag(X1)

The set Q consists of the following terms:

   is_in_ag(x0)
   <_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U5_GAA(N, <_out_ag(0)) -> U6_GAA(N, is_in_ag(-)) at position [1] we obtained the following new rules [LPAR04]:

   (U5_GAA(N, <_out_ag(0)) -> U6_GAA(N, is_out_ag(-)),U5_GAA(N, <_out_ag(0)) -> U6_GAA(N, is_out_ag(-)))


----------------------------------------

(16)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GAA(N, is_out_ag(-)) -> MULT_IN_GAA(N)
   MULT_IN_GAA(N) -> U5_GAA(N, <_in_ag(0))
   MULT_IN_GAA(N) -> U10_GAA(N, is_in_ag(-(1)))
   U10_GAA(N, is_out_ag(-(1))) -> MULT_IN_GAA(N)
   U5_GAA(N, <_out_ag(0)) -> U6_GAA(N, is_out_ag(-))

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag(X1)
   <_in_ag(X1) -> <_out_ag(X1)

The set Q consists of the following terms:

   is_in_ag(x0)
   <_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(17) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MULT_IN_GAA(N) -> U5_GAA(N, <_in_ag(0)) at position [1] we obtained the following new rules [LPAR04]:

   (MULT_IN_GAA(N) -> U5_GAA(N, <_out_ag(0)),MULT_IN_GAA(N) -> U5_GAA(N, <_out_ag(0)))


----------------------------------------

(18)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GAA(N, is_out_ag(-)) -> MULT_IN_GAA(N)
   MULT_IN_GAA(N) -> U10_GAA(N, is_in_ag(-(1)))
   U10_GAA(N, is_out_ag(-(1))) -> MULT_IN_GAA(N)
   U5_GAA(N, <_out_ag(0)) -> U6_GAA(N, is_out_ag(-))
   MULT_IN_GAA(N) -> U5_GAA(N, <_out_ag(0))

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag(X1)
   <_in_ag(X1) -> <_out_ag(X1)

The set Q consists of the following terms:

   is_in_ag(x0)
   <_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(19) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(20)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GAA(N, is_out_ag(-)) -> MULT_IN_GAA(N)
   MULT_IN_GAA(N) -> U10_GAA(N, is_in_ag(-(1)))
   U10_GAA(N, is_out_ag(-(1))) -> MULT_IN_GAA(N)
   U5_GAA(N, <_out_ag(0)) -> U6_GAA(N, is_out_ag(-))
   MULT_IN_GAA(N) -> U5_GAA(N, <_out_ag(0))

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag(X1)

The set Q consists of the following terms:

   is_in_ag(x0)
   <_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(21) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   <_in_ag(x0)


----------------------------------------

(22)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GAA(N, is_out_ag(-)) -> MULT_IN_GAA(N)
   MULT_IN_GAA(N) -> U10_GAA(N, is_in_ag(-(1)))
   U10_GAA(N, is_out_ag(-(1))) -> MULT_IN_GAA(N)
   U5_GAA(N, <_out_ag(0)) -> U6_GAA(N, is_out_ag(-))
   MULT_IN_GAA(N) -> U5_GAA(N, <_out_ag(0))

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag(X1)

The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(23) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MULT_IN_GAA(N) -> U10_GAA(N, is_in_ag(-(1))) at position [1] we obtained the following new rules [LPAR04]:

   (MULT_IN_GAA(N) -> U10_GAA(N, is_out_ag(-(1))),MULT_IN_GAA(N) -> U10_GAA(N, is_out_ag(-(1))))


----------------------------------------

(24)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GAA(N, is_out_ag(-)) -> MULT_IN_GAA(N)
   U10_GAA(N, is_out_ag(-(1))) -> MULT_IN_GAA(N)
   U5_GAA(N, <_out_ag(0)) -> U6_GAA(N, is_out_ag(-))
   MULT_IN_GAA(N) -> U5_GAA(N, <_out_ag(0))
   MULT_IN_GAA(N) -> U10_GAA(N, is_out_ag(-(1)))

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag(X1)

The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(25) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GAA(N, is_out_ag(-)) -> MULT_IN_GAA(N)
   U10_GAA(N, is_out_ag(-(1))) -> MULT_IN_GAA(N)
   U5_GAA(N, <_out_ag(0)) -> U6_GAA(N, is_out_ag(-))
   MULT_IN_GAA(N) -> U5_GAA(N, <_out_ag(0))
   MULT_IN_GAA(N) -> U10_GAA(N, is_out_ag(-(1)))

R is empty.
The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(27) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   is_in_ag(x0)


----------------------------------------

(28)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GAA(N, is_out_ag(-)) -> MULT_IN_GAA(N)
   U10_GAA(N, is_out_ag(-(1))) -> MULT_IN_GAA(N)
   U5_GAA(N, <_out_ag(0)) -> U6_GAA(N, is_out_ag(-))
   MULT_IN_GAA(N) -> U5_GAA(N, <_out_ag(0))
   MULT_IN_GAA(N) -> U10_GAA(N, is_out_ag(-(1)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(29) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = MULT_IN_GAA(N') evaluates to  t =MULT_IN_GAA(N')

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

MULT_IN_GAA(N') -> U10_GAA(N', is_out_ag(-(1)))
with rule MULT_IN_GAA(N'') -> U10_GAA(N'', is_out_ag(-(1))) at position [] and matcher [N'' / N']

U10_GAA(N', is_out_ag(-(1))) -> MULT_IN_GAA(N')
with rule U10_GAA(N, is_out_ag(-(1))) -> MULT_IN_GAA(N)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(30)
NO

----------------------------------------

(31) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

main_in_2: (b,b)

mult_in_3: (b,b,f) (b,f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, >=_in_gg(N, 0))
   U2_gg(M, N, >=_out_gg(N, 0)) -> U3_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U5_gga(N, M, Ret, <_in_gg(M, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U5_gga(N, M, Ret, <_out_gg(M, 0)) -> U6_gga(N, M, Ret, is_in_ag(M1, -(M)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U6_gga(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gga(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(N, M, Ret) -> U5_gaa(N, M, Ret, <_in_ag(M, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U5_gaa(N, M, Ret, <_out_ag(M, 0)) -> U6_gaa(N, M, Ret, is_in_ag(M1, -(M)))
   U6_gaa(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(X1, M, Ret) -> U8_gaa(X1, M, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U8_gaa(X1, M, Ret, =:=_out_ag(M, 0)) -> U9_gaa(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gaa(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gaa(X1, M, Ret)
   mult_in_gaa(N, M, Ret) -> U10_gaa(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gaa(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gaa(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gaa(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gaa(N, M, Ret)
   U7_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gaa(N, M, Ret)
   U7_gga(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   mult_in_gga(X1, M, Ret) -> U8_gga(X1, M, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U8_gga(X1, M, Ret, =:=_out_gg(M, 0)) -> U9_gga(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gga(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U10_gga(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gga(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gga(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gga(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gga(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gga(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gga(N, M, Ret)
   U3_gg(M, N, mult_out_gga(M, N, Ret1)) -> U4_gg(M, N, mult_in_gga(N, M, Ret2))
   U4_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x4)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1)  =  -

U7_gga(x1, x2, x3, x4)  =  U7_gga(x4)

mult_in_gaa(x1, x2, x3)  =  mult_in_gaa(x1)

U5_gaa(x1, x2, x3, x4)  =  U5_gaa(x1, x4)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x4)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x4)

mult_out_gaa(x1, x2, x3)  =  mult_out_gaa

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

-(x1, x2)  =  -(x2)

1  =  1

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4)  =  U12_gaa(x4)

+(x1, x2)  =  +(x1)

mult_out_gga(x1, x2, x3)  =  mult_out_gga

U8_gga(x1, x2, x3, x4)  =  U8_gga(x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg

U9_gga(x1, x2, x3, x4)  =  U9_gga(x4)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U4_gg(x1, x2, x3)  =  U4_gg(x3)

main_out_gg(x1, x2)  =  main_out_gg





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(32)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, >=_in_gg(N, 0))
   U2_gg(M, N, >=_out_gg(N, 0)) -> U3_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U5_gga(N, M, Ret, <_in_gg(M, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U5_gga(N, M, Ret, <_out_gg(M, 0)) -> U6_gga(N, M, Ret, is_in_ag(M1, -(M)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U6_gga(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gga(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(N, M, Ret) -> U5_gaa(N, M, Ret, <_in_ag(M, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U5_gaa(N, M, Ret, <_out_ag(M, 0)) -> U6_gaa(N, M, Ret, is_in_ag(M1, -(M)))
   U6_gaa(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(X1, M, Ret) -> U8_gaa(X1, M, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U8_gaa(X1, M, Ret, =:=_out_ag(M, 0)) -> U9_gaa(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gaa(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gaa(X1, M, Ret)
   mult_in_gaa(N, M, Ret) -> U10_gaa(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gaa(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gaa(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gaa(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gaa(N, M, Ret)
   U7_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gaa(N, M, Ret)
   U7_gga(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   mult_in_gga(X1, M, Ret) -> U8_gga(X1, M, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U8_gga(X1, M, Ret, =:=_out_gg(M, 0)) -> U9_gga(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gga(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U10_gga(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gga(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gga(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gga(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gga(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gga(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gga(N, M, Ret)
   U3_gg(M, N, mult_out_gga(M, N, Ret1)) -> U4_gg(M, N, mult_in_gga(N, M, Ret2))
   U4_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x4)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1)  =  -

U7_gga(x1, x2, x3, x4)  =  U7_gga(x4)

mult_in_gaa(x1, x2, x3)  =  mult_in_gaa(x1)

U5_gaa(x1, x2, x3, x4)  =  U5_gaa(x1, x4)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x4)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x4)

mult_out_gaa(x1, x2, x3)  =  mult_out_gaa

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

-(x1, x2)  =  -(x2)

1  =  1

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4)  =  U12_gaa(x4)

+(x1, x2)  =  +(x1)

mult_out_gga(x1, x2, x3)  =  mult_out_gga

U8_gga(x1, x2, x3, x4)  =  U8_gga(x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg

U9_gga(x1, x2, x3, x4)  =  U9_gga(x4)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U4_gg(x1, x2, x3)  =  U4_gg(x3)

main_out_gg(x1, x2)  =  main_out_gg



----------------------------------------

(33) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GG(M, N) -> U1_GG(M, N, >=_in_gg(M, 0))
   MAIN_IN_GG(M, N) -> >=_IN_GG(M, 0)
   U1_GG(M, N, >=_out_gg(M, 0)) -> U2_GG(M, N, >=_in_gg(N, 0))
   U1_GG(M, N, >=_out_gg(M, 0)) -> >=_IN_GG(N, 0)
   U2_GG(M, N, >=_out_gg(N, 0)) -> U3_GG(M, N, mult_in_gga(M, N, Ret1))
   U2_GG(M, N, >=_out_gg(N, 0)) -> MULT_IN_GGA(M, N, Ret1)
   MULT_IN_GGA(N, M, Ret) -> U5_GGA(N, M, Ret, <_in_gg(M, 0))
   MULT_IN_GGA(N, M, Ret) -> <_IN_GG(M, 0)
   U5_GGA(N, M, Ret, <_out_gg(M, 0)) -> U6_GGA(N, M, Ret, is_in_ag(M1, -(M)))
   U5_GGA(N, M, Ret, <_out_gg(M, 0)) -> IS_IN_AG(M1, -(M))
   U6_GGA(N, M, Ret, is_out_ag(M1, -(M))) -> U7_GGA(N, M, Ret, mult_in_gaa(N, M1, Ret))
   U6_GGA(N, M, Ret, is_out_ag(M1, -(M))) -> MULT_IN_GAA(N, M1, Ret)
   MULT_IN_GAA(N, M, Ret) -> U5_GAA(N, M, Ret, <_in_ag(M, 0))
   MULT_IN_GAA(N, M, Ret) -> <_IN_AG(M, 0)
   U5_GAA(N, M, Ret, <_out_ag(M, 0)) -> U6_GAA(N, M, Ret, is_in_ag(M1, -(M)))
   U5_GAA(N, M, Ret, <_out_ag(M, 0)) -> IS_IN_AG(M1, -(M))
   U6_GAA(N, M, Ret, is_out_ag(M1, -(M))) -> U7_GAA(N, M, Ret, mult_in_gaa(N, M1, Ret))
   U6_GAA(N, M, Ret, is_out_ag(M1, -(M))) -> MULT_IN_GAA(N, M1, Ret)
   MULT_IN_GAA(X1, M, Ret) -> U8_GAA(X1, M, Ret, =:=_in_ag(M, 0))
   MULT_IN_GAA(X1, M, Ret) -> =:=_IN_AG(M, 0)
   U8_GAA(X1, M, Ret, =:=_out_ag(M, 0)) -> U9_GAA(X1, M, Ret, is_in_ag(Ret, 0))
   U8_GAA(X1, M, Ret, =:=_out_ag(M, 0)) -> IS_IN_AG(Ret, 0)
   MULT_IN_GAA(N, M, Ret) -> U10_GAA(N, M, Ret, is_in_ag(M1, -(M, 1)))
   MULT_IN_GAA(N, M, Ret) -> IS_IN_AG(M1, -(M, 1))
   U10_GAA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_GAA(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U10_GAA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> MULT_IN_GAA(N, M1, Ret1)
   U11_GAA(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_GAA(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U11_GAA(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> IS_IN_AG(Ret, +(N, Ret1))
   MULT_IN_GGA(X1, M, Ret) -> U8_GGA(X1, M, Ret, =:=_in_gg(M, 0))
   MULT_IN_GGA(X1, M, Ret) -> =:=_IN_GG(M, 0)
   U8_GGA(X1, M, Ret, =:=_out_gg(M, 0)) -> U9_GGA(X1, M, Ret, is_in_ag(Ret, 0))
   U8_GGA(X1, M, Ret, =:=_out_gg(M, 0)) -> IS_IN_AG(Ret, 0)
   MULT_IN_GGA(N, M, Ret) -> U10_GGA(N, M, Ret, is_in_ag(M1, -(M, 1)))
   MULT_IN_GGA(N, M, Ret) -> IS_IN_AG(M1, -(M, 1))
   U10_GGA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_GGA(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U10_GGA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> MULT_IN_GAA(N, M1, Ret1)
   U11_GGA(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_GGA(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U11_GGA(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> IS_IN_AG(Ret, +(N, Ret1))
   U3_GG(M, N, mult_out_gga(M, N, Ret1)) -> U4_GG(M, N, mult_in_gga(N, M, Ret2))
   U3_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, >=_in_gg(N, 0))
   U2_gg(M, N, >=_out_gg(N, 0)) -> U3_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U5_gga(N, M, Ret, <_in_gg(M, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U5_gga(N, M, Ret, <_out_gg(M, 0)) -> U6_gga(N, M, Ret, is_in_ag(M1, -(M)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U6_gga(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gga(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(N, M, Ret) -> U5_gaa(N, M, Ret, <_in_ag(M, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U5_gaa(N, M, Ret, <_out_ag(M, 0)) -> U6_gaa(N, M, Ret, is_in_ag(M1, -(M)))
   U6_gaa(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(X1, M, Ret) -> U8_gaa(X1, M, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U8_gaa(X1, M, Ret, =:=_out_ag(M, 0)) -> U9_gaa(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gaa(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gaa(X1, M, Ret)
   mult_in_gaa(N, M, Ret) -> U10_gaa(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gaa(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gaa(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gaa(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gaa(N, M, Ret)
   U7_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gaa(N, M, Ret)
   U7_gga(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   mult_in_gga(X1, M, Ret) -> U8_gga(X1, M, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U8_gga(X1, M, Ret, =:=_out_gg(M, 0)) -> U9_gga(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gga(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U10_gga(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gga(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gga(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gga(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gga(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gga(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gga(N, M, Ret)
   U3_gg(M, N, mult_out_gga(M, N, Ret1)) -> U4_gg(M, N, mult_in_gga(N, M, Ret2))
   U4_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x4)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1)  =  -

U7_gga(x1, x2, x3, x4)  =  U7_gga(x4)

mult_in_gaa(x1, x2, x3)  =  mult_in_gaa(x1)

U5_gaa(x1, x2, x3, x4)  =  U5_gaa(x1, x4)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x4)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x4)

mult_out_gaa(x1, x2, x3)  =  mult_out_gaa

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

-(x1, x2)  =  -(x2)

1  =  1

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4)  =  U12_gaa(x4)

+(x1, x2)  =  +(x1)

mult_out_gga(x1, x2, x3)  =  mult_out_gga

U8_gga(x1, x2, x3, x4)  =  U8_gga(x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg

U9_gga(x1, x2, x3, x4)  =  U9_gga(x4)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U4_gg(x1, x2, x3)  =  U4_gg(x3)

main_out_gg(x1, x2)  =  main_out_gg

MAIN_IN_GG(x1, x2)  =  MAIN_IN_GG(x1, x2)

U1_GG(x1, x2, x3)  =  U1_GG(x1, x2, x3)

>=_IN_GG(x1, x2)  =  >=_IN_GG(x1, x2)

U2_GG(x1, x2, x3)  =  U2_GG(x1, x2, x3)

U3_GG(x1, x2, x3)  =  U3_GG(x1, x2, x3)

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)

U5_GGA(x1, x2, x3, x4)  =  U5_GGA(x1, x4)

<_IN_GG(x1, x2)  =  <_IN_GG(x1, x2)

U6_GGA(x1, x2, x3, x4)  =  U6_GGA(x1, x4)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U7_GGA(x1, x2, x3, x4)  =  U7_GGA(x4)

MULT_IN_GAA(x1, x2, x3)  =  MULT_IN_GAA(x1)

U5_GAA(x1, x2, x3, x4)  =  U5_GAA(x1, x4)

<_IN_AG(x1, x2)  =  <_IN_AG(x2)

U6_GAA(x1, x2, x3, x4)  =  U6_GAA(x1, x4)

U7_GAA(x1, x2, x3, x4)  =  U7_GAA(x4)

U8_GAA(x1, x2, x3, x4)  =  U8_GAA(x4)

=:=_IN_AG(x1, x2)  =  =:=_IN_AG(x2)

U9_GAA(x1, x2, x3, x4)  =  U9_GAA(x4)

U10_GAA(x1, x2, x3, x4)  =  U10_GAA(x1, x4)

U11_GAA(x1, x2, x3, x4)  =  U11_GAA(x1, x4)

U12_GAA(x1, x2, x3, x4)  =  U12_GAA(x4)

U8_GGA(x1, x2, x3, x4)  =  U8_GGA(x4)

=:=_IN_GG(x1, x2)  =  =:=_IN_GG(x1, x2)

U9_GGA(x1, x2, x3, x4)  =  U9_GGA(x4)

U10_GGA(x1, x2, x3, x4)  =  U10_GGA(x1, x4)

U11_GGA(x1, x2, x3, x4)  =  U11_GGA(x1, x4)

U12_GGA(x1, x2, x3, x4)  =  U12_GGA(x4)

U4_GG(x1, x2, x3)  =  U4_GG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(34)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GG(M, N) -> U1_GG(M, N, >=_in_gg(M, 0))
   MAIN_IN_GG(M, N) -> >=_IN_GG(M, 0)
   U1_GG(M, N, >=_out_gg(M, 0)) -> U2_GG(M, N, >=_in_gg(N, 0))
   U1_GG(M, N, >=_out_gg(M, 0)) -> >=_IN_GG(N, 0)
   U2_GG(M, N, >=_out_gg(N, 0)) -> U3_GG(M, N, mult_in_gga(M, N, Ret1))
   U2_GG(M, N, >=_out_gg(N, 0)) -> MULT_IN_GGA(M, N, Ret1)
   MULT_IN_GGA(N, M, Ret) -> U5_GGA(N, M, Ret, <_in_gg(M, 0))
   MULT_IN_GGA(N, M, Ret) -> <_IN_GG(M, 0)
   U5_GGA(N, M, Ret, <_out_gg(M, 0)) -> U6_GGA(N, M, Ret, is_in_ag(M1, -(M)))
   U5_GGA(N, M, Ret, <_out_gg(M, 0)) -> IS_IN_AG(M1, -(M))
   U6_GGA(N, M, Ret, is_out_ag(M1, -(M))) -> U7_GGA(N, M, Ret, mult_in_gaa(N, M1, Ret))
   U6_GGA(N, M, Ret, is_out_ag(M1, -(M))) -> MULT_IN_GAA(N, M1, Ret)
   MULT_IN_GAA(N, M, Ret) -> U5_GAA(N, M, Ret, <_in_ag(M, 0))
   MULT_IN_GAA(N, M, Ret) -> <_IN_AG(M, 0)
   U5_GAA(N, M, Ret, <_out_ag(M, 0)) -> U6_GAA(N, M, Ret, is_in_ag(M1, -(M)))
   U5_GAA(N, M, Ret, <_out_ag(M, 0)) -> IS_IN_AG(M1, -(M))
   U6_GAA(N, M, Ret, is_out_ag(M1, -(M))) -> U7_GAA(N, M, Ret, mult_in_gaa(N, M1, Ret))
   U6_GAA(N, M, Ret, is_out_ag(M1, -(M))) -> MULT_IN_GAA(N, M1, Ret)
   MULT_IN_GAA(X1, M, Ret) -> U8_GAA(X1, M, Ret, =:=_in_ag(M, 0))
   MULT_IN_GAA(X1, M, Ret) -> =:=_IN_AG(M, 0)
   U8_GAA(X1, M, Ret, =:=_out_ag(M, 0)) -> U9_GAA(X1, M, Ret, is_in_ag(Ret, 0))
   U8_GAA(X1, M, Ret, =:=_out_ag(M, 0)) -> IS_IN_AG(Ret, 0)
   MULT_IN_GAA(N, M, Ret) -> U10_GAA(N, M, Ret, is_in_ag(M1, -(M, 1)))
   MULT_IN_GAA(N, M, Ret) -> IS_IN_AG(M1, -(M, 1))
   U10_GAA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_GAA(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U10_GAA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> MULT_IN_GAA(N, M1, Ret1)
   U11_GAA(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_GAA(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U11_GAA(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> IS_IN_AG(Ret, +(N, Ret1))
   MULT_IN_GGA(X1, M, Ret) -> U8_GGA(X1, M, Ret, =:=_in_gg(M, 0))
   MULT_IN_GGA(X1, M, Ret) -> =:=_IN_GG(M, 0)
   U8_GGA(X1, M, Ret, =:=_out_gg(M, 0)) -> U9_GGA(X1, M, Ret, is_in_ag(Ret, 0))
   U8_GGA(X1, M, Ret, =:=_out_gg(M, 0)) -> IS_IN_AG(Ret, 0)
   MULT_IN_GGA(N, M, Ret) -> U10_GGA(N, M, Ret, is_in_ag(M1, -(M, 1)))
   MULT_IN_GGA(N, M, Ret) -> IS_IN_AG(M1, -(M, 1))
   U10_GGA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_GGA(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U10_GGA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> MULT_IN_GAA(N, M1, Ret1)
   U11_GGA(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_GGA(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U11_GGA(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> IS_IN_AG(Ret, +(N, Ret1))
   U3_GG(M, N, mult_out_gga(M, N, Ret1)) -> U4_GG(M, N, mult_in_gga(N, M, Ret2))
   U3_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, >=_in_gg(N, 0))
   U2_gg(M, N, >=_out_gg(N, 0)) -> U3_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U5_gga(N, M, Ret, <_in_gg(M, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U5_gga(N, M, Ret, <_out_gg(M, 0)) -> U6_gga(N, M, Ret, is_in_ag(M1, -(M)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U6_gga(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gga(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(N, M, Ret) -> U5_gaa(N, M, Ret, <_in_ag(M, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U5_gaa(N, M, Ret, <_out_ag(M, 0)) -> U6_gaa(N, M, Ret, is_in_ag(M1, -(M)))
   U6_gaa(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(X1, M, Ret) -> U8_gaa(X1, M, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U8_gaa(X1, M, Ret, =:=_out_ag(M, 0)) -> U9_gaa(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gaa(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gaa(X1, M, Ret)
   mult_in_gaa(N, M, Ret) -> U10_gaa(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gaa(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gaa(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gaa(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gaa(N, M, Ret)
   U7_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gaa(N, M, Ret)
   U7_gga(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   mult_in_gga(X1, M, Ret) -> U8_gga(X1, M, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U8_gga(X1, M, Ret, =:=_out_gg(M, 0)) -> U9_gga(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gga(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U10_gga(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gga(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gga(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gga(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gga(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gga(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gga(N, M, Ret)
   U3_gg(M, N, mult_out_gga(M, N, Ret1)) -> U4_gg(M, N, mult_in_gga(N, M, Ret2))
   U4_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x4)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1)  =  -

U7_gga(x1, x2, x3, x4)  =  U7_gga(x4)

mult_in_gaa(x1, x2, x3)  =  mult_in_gaa(x1)

U5_gaa(x1, x2, x3, x4)  =  U5_gaa(x1, x4)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x4)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x4)

mult_out_gaa(x1, x2, x3)  =  mult_out_gaa

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

-(x1, x2)  =  -(x2)

1  =  1

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4)  =  U12_gaa(x4)

+(x1, x2)  =  +(x1)

mult_out_gga(x1, x2, x3)  =  mult_out_gga

U8_gga(x1, x2, x3, x4)  =  U8_gga(x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg

U9_gga(x1, x2, x3, x4)  =  U9_gga(x4)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U4_gg(x1, x2, x3)  =  U4_gg(x3)

main_out_gg(x1, x2)  =  main_out_gg

MAIN_IN_GG(x1, x2)  =  MAIN_IN_GG(x1, x2)

U1_GG(x1, x2, x3)  =  U1_GG(x1, x2, x3)

>=_IN_GG(x1, x2)  =  >=_IN_GG(x1, x2)

U2_GG(x1, x2, x3)  =  U2_GG(x1, x2, x3)

U3_GG(x1, x2, x3)  =  U3_GG(x1, x2, x3)

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)

U5_GGA(x1, x2, x3, x4)  =  U5_GGA(x1, x4)

<_IN_GG(x1, x2)  =  <_IN_GG(x1, x2)

U6_GGA(x1, x2, x3, x4)  =  U6_GGA(x1, x4)

IS_IN_AG(x1, x2)  =  IS_IN_AG(x2)

U7_GGA(x1, x2, x3, x4)  =  U7_GGA(x4)

MULT_IN_GAA(x1, x2, x3)  =  MULT_IN_GAA(x1)

U5_GAA(x1, x2, x3, x4)  =  U5_GAA(x1, x4)

<_IN_AG(x1, x2)  =  <_IN_AG(x2)

U6_GAA(x1, x2, x3, x4)  =  U6_GAA(x1, x4)

U7_GAA(x1, x2, x3, x4)  =  U7_GAA(x4)

U8_GAA(x1, x2, x3, x4)  =  U8_GAA(x4)

=:=_IN_AG(x1, x2)  =  =:=_IN_AG(x2)

U9_GAA(x1, x2, x3, x4)  =  U9_GAA(x4)

U10_GAA(x1, x2, x3, x4)  =  U10_GAA(x1, x4)

U11_GAA(x1, x2, x3, x4)  =  U11_GAA(x1, x4)

U12_GAA(x1, x2, x3, x4)  =  U12_GAA(x4)

U8_GGA(x1, x2, x3, x4)  =  U8_GGA(x4)

=:=_IN_GG(x1, x2)  =  =:=_IN_GG(x1, x2)

U9_GGA(x1, x2, x3, x4)  =  U9_GGA(x4)

U10_GGA(x1, x2, x3, x4)  =  U10_GGA(x1, x4)

U11_GGA(x1, x2, x3, x4)  =  U11_GGA(x1, x4)

U12_GGA(x1, x2, x3, x4)  =  U12_GGA(x4)

U4_GG(x1, x2, x3)  =  U4_GG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(35) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 35 less nodes.
----------------------------------------

(36)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U5_GAA(N, M, Ret, <_out_ag(M, 0)) -> U6_GAA(N, M, Ret, is_in_ag(M1, -(M)))
   U6_GAA(N, M, Ret, is_out_ag(M1, -(M))) -> MULT_IN_GAA(N, M1, Ret)
   MULT_IN_GAA(N, M, Ret) -> U5_GAA(N, M, Ret, <_in_ag(M, 0))
   MULT_IN_GAA(N, M, Ret) -> U10_GAA(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_GAA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> MULT_IN_GAA(N, M1, Ret1)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, >=_in_gg(M, 0))
   >=_in_gg(X0, X1) -> >=_out_gg(X0, X1)
   U1_gg(M, N, >=_out_gg(M, 0)) -> U2_gg(M, N, >=_in_gg(N, 0))
   U2_gg(M, N, >=_out_gg(N, 0)) -> U3_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U5_gga(N, M, Ret, <_in_gg(M, 0))
   <_in_gg(X0, X1) -> <_out_gg(X0, X1)
   U5_gga(N, M, Ret, <_out_gg(M, 0)) -> U6_gga(N, M, Ret, is_in_ag(M1, -(M)))
   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   U6_gga(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gga(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(N, M, Ret) -> U5_gaa(N, M, Ret, <_in_ag(M, 0))
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)
   U5_gaa(N, M, Ret, <_out_ag(M, 0)) -> U6_gaa(N, M, Ret, is_in_ag(M1, -(M)))
   U6_gaa(N, M, Ret, is_out_ag(M1, -(M))) -> U7_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret))
   mult_in_gaa(X1, M, Ret) -> U8_gaa(X1, M, Ret, =:=_in_ag(M, 0))
   =:=_in_ag(X0, X1) -> =:=_out_ag(X0, X1)
   U8_gaa(X1, M, Ret, =:=_out_ag(M, 0)) -> U9_gaa(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gaa(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gaa(X1, M, Ret)
   mult_in_gaa(N, M, Ret) -> U10_gaa(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gaa(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gaa(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gaa(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gaa(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gaa(N, M, Ret)
   U7_gaa(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gaa(N, M, Ret)
   U7_gga(N, M, Ret, mult_out_gaa(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   mult_in_gga(X1, M, Ret) -> U8_gga(X1, M, Ret, =:=_in_gg(M, 0))
   =:=_in_gg(X0, X1) -> =:=_out_gg(X0, X1)
   U8_gga(X1, M, Ret, =:=_out_gg(M, 0)) -> U9_gga(X1, M, Ret, is_in_ag(Ret, 0))
   U9_gga(X1, M, Ret, is_out_ag(Ret, 0)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U10_gga(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_gga(N, M, Ret, is_out_ag(M1, -(M, 1))) -> U11_gga(N, M, Ret, mult_in_gaa(N, M1, Ret1))
   U11_gga(N, M, Ret, mult_out_gaa(N, M1, Ret1)) -> U12_gga(N, M, Ret, is_in_ag(Ret, +(N, Ret1)))
   U12_gga(N, M, Ret, is_out_ag(Ret, +(N, Ret1))) -> mult_out_gga(N, M, Ret)
   U3_gg(M, N, mult_out_gga(M, N, Ret1)) -> U4_gg(M, N, mult_in_gga(N, M, Ret2))
   U4_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

>=_in_gg(x1, x2)  =  >=_in_gg(x1, x2)

>=_out_gg(x1, x2)  =  >=_out_gg

0  =  0

U2_gg(x1, x2, x3)  =  U2_gg(x1, x2, x3)

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U5_gga(x1, x2, x3, x4)  =  U5_gga(x1, x4)

<_in_gg(x1, x2)  =  <_in_gg(x1, x2)

<_out_gg(x1, x2)  =  <_out_gg

U6_gga(x1, x2, x3, x4)  =  U6_gga(x1, x4)

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1)  =  -

U7_gga(x1, x2, x3, x4)  =  U7_gga(x4)

mult_in_gaa(x1, x2, x3)  =  mult_in_gaa(x1)

U5_gaa(x1, x2, x3, x4)  =  U5_gaa(x1, x4)

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag

U6_gaa(x1, x2, x3, x4)  =  U6_gaa(x1, x4)

U7_gaa(x1, x2, x3, x4)  =  U7_gaa(x4)

U8_gaa(x1, x2, x3, x4)  =  U8_gaa(x4)

=:=_in_ag(x1, x2)  =  =:=_in_ag(x2)

=:=_out_ag(x1, x2)  =  =:=_out_ag

U9_gaa(x1, x2, x3, x4)  =  U9_gaa(x4)

mult_out_gaa(x1, x2, x3)  =  mult_out_gaa

U10_gaa(x1, x2, x3, x4)  =  U10_gaa(x1, x4)

-(x1, x2)  =  -(x2)

1  =  1

U11_gaa(x1, x2, x3, x4)  =  U11_gaa(x1, x4)

U12_gaa(x1, x2, x3, x4)  =  U12_gaa(x4)

+(x1, x2)  =  +(x1)

mult_out_gga(x1, x2, x3)  =  mult_out_gga

U8_gga(x1, x2, x3, x4)  =  U8_gga(x4)

=:=_in_gg(x1, x2)  =  =:=_in_gg(x1, x2)

=:=_out_gg(x1, x2)  =  =:=_out_gg

U9_gga(x1, x2, x3, x4)  =  U9_gga(x4)

U10_gga(x1, x2, x3, x4)  =  U10_gga(x1, x4)

U11_gga(x1, x2, x3, x4)  =  U11_gga(x1, x4)

U12_gga(x1, x2, x3, x4)  =  U12_gga(x4)

U4_gg(x1, x2, x3)  =  U4_gg(x3)

main_out_gg(x1, x2)  =  main_out_gg

MULT_IN_GAA(x1, x2, x3)  =  MULT_IN_GAA(x1)

U5_GAA(x1, x2, x3, x4)  =  U5_GAA(x1, x4)

U6_GAA(x1, x2, x3, x4)  =  U6_GAA(x1, x4)

U10_GAA(x1, x2, x3, x4)  =  U10_GAA(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(37) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(38)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U5_GAA(N, M, Ret, <_out_ag(M, 0)) -> U6_GAA(N, M, Ret, is_in_ag(M1, -(M)))
   U6_GAA(N, M, Ret, is_out_ag(M1, -(M))) -> MULT_IN_GAA(N, M1, Ret)
   MULT_IN_GAA(N, M, Ret) -> U5_GAA(N, M, Ret, <_in_ag(M, 0))
   MULT_IN_GAA(N, M, Ret) -> U10_GAA(N, M, Ret, is_in_ag(M1, -(M, 1)))
   U10_GAA(N, M, Ret, is_out_ag(M1, -(M, 1))) -> MULT_IN_GAA(N, M1, Ret1)

The TRS R consists of the following rules:

   is_in_ag(X0, X1) -> is_out_ag(X0, X1)
   <_in_ag(X0, X1) -> <_out_ag(X0, X1)

The argument filtering Pi contains the following mapping:
0  =  0

is_in_ag(x1, x2)  =  is_in_ag(x2)

is_out_ag(x1, x2)  =  is_out_ag

-(x1)  =  -

<_in_ag(x1, x2)  =  <_in_ag(x2)

<_out_ag(x1, x2)  =  <_out_ag

-(x1, x2)  =  -(x2)

1  =  1

MULT_IN_GAA(x1, x2, x3)  =  MULT_IN_GAA(x1)

U5_GAA(x1, x2, x3, x4)  =  U5_GAA(x1, x4)

U6_GAA(x1, x2, x3, x4)  =  U6_GAA(x1, x4)

U10_GAA(x1, x2, x3, x4)  =  U10_GAA(x1, x4)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(39) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(40)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U5_GAA(N, <_out_ag) -> U6_GAA(N, is_in_ag(-))
   U6_GAA(N, is_out_ag) -> MULT_IN_GAA(N)
   MULT_IN_GAA(N) -> U5_GAA(N, <_in_ag(0))
   MULT_IN_GAA(N) -> U10_GAA(N, is_in_ag(-(1)))
   U10_GAA(N, is_out_ag) -> MULT_IN_GAA(N)

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag
   <_in_ag(X1) -> <_out_ag

The set Q consists of the following terms:

   is_in_ag(x0)
   <_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(41) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U5_GAA(N, <_out_ag) -> U6_GAA(N, is_in_ag(-)) at position [1] we obtained the following new rules [LPAR04]:

   (U5_GAA(N, <_out_ag) -> U6_GAA(N, is_out_ag),U5_GAA(N, <_out_ag) -> U6_GAA(N, is_out_ag))


----------------------------------------

(42)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GAA(N, is_out_ag) -> MULT_IN_GAA(N)
   MULT_IN_GAA(N) -> U5_GAA(N, <_in_ag(0))
   MULT_IN_GAA(N) -> U10_GAA(N, is_in_ag(-(1)))
   U10_GAA(N, is_out_ag) -> MULT_IN_GAA(N)
   U5_GAA(N, <_out_ag) -> U6_GAA(N, is_out_ag)

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag
   <_in_ag(X1) -> <_out_ag

The set Q consists of the following terms:

   is_in_ag(x0)
   <_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(43) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MULT_IN_GAA(N) -> U5_GAA(N, <_in_ag(0)) at position [1] we obtained the following new rules [LPAR04]:

   (MULT_IN_GAA(N) -> U5_GAA(N, <_out_ag),MULT_IN_GAA(N) -> U5_GAA(N, <_out_ag))


----------------------------------------

(44)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GAA(N, is_out_ag) -> MULT_IN_GAA(N)
   MULT_IN_GAA(N) -> U10_GAA(N, is_in_ag(-(1)))
   U10_GAA(N, is_out_ag) -> MULT_IN_GAA(N)
   U5_GAA(N, <_out_ag) -> U6_GAA(N, is_out_ag)
   MULT_IN_GAA(N) -> U5_GAA(N, <_out_ag)

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag
   <_in_ag(X1) -> <_out_ag

The set Q consists of the following terms:

   is_in_ag(x0)
   <_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(45) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(46)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GAA(N, is_out_ag) -> MULT_IN_GAA(N)
   MULT_IN_GAA(N) -> U10_GAA(N, is_in_ag(-(1)))
   U10_GAA(N, is_out_ag) -> MULT_IN_GAA(N)
   U5_GAA(N, <_out_ag) -> U6_GAA(N, is_out_ag)
   MULT_IN_GAA(N) -> U5_GAA(N, <_out_ag)

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag

The set Q consists of the following terms:

   is_in_ag(x0)
   <_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(47) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   <_in_ag(x0)


----------------------------------------

(48)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GAA(N, is_out_ag) -> MULT_IN_GAA(N)
   MULT_IN_GAA(N) -> U10_GAA(N, is_in_ag(-(1)))
   U10_GAA(N, is_out_ag) -> MULT_IN_GAA(N)
   U5_GAA(N, <_out_ag) -> U6_GAA(N, is_out_ag)
   MULT_IN_GAA(N) -> U5_GAA(N, <_out_ag)

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag

The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(49) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MULT_IN_GAA(N) -> U10_GAA(N, is_in_ag(-(1))) at position [1] we obtained the following new rules [LPAR04]:

   (MULT_IN_GAA(N) -> U10_GAA(N, is_out_ag),MULT_IN_GAA(N) -> U10_GAA(N, is_out_ag))


----------------------------------------

(50)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GAA(N, is_out_ag) -> MULT_IN_GAA(N)
   U10_GAA(N, is_out_ag) -> MULT_IN_GAA(N)
   U5_GAA(N, <_out_ag) -> U6_GAA(N, is_out_ag)
   MULT_IN_GAA(N) -> U5_GAA(N, <_out_ag)
   MULT_IN_GAA(N) -> U10_GAA(N, is_out_ag)

The TRS R consists of the following rules:

   is_in_ag(X1) -> is_out_ag

The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(51) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(52)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GAA(N, is_out_ag) -> MULT_IN_GAA(N)
   U10_GAA(N, is_out_ag) -> MULT_IN_GAA(N)
   U5_GAA(N, <_out_ag) -> U6_GAA(N, is_out_ag)
   MULT_IN_GAA(N) -> U5_GAA(N, <_out_ag)
   MULT_IN_GAA(N) -> U10_GAA(N, is_out_ag)

R is empty.
The set Q consists of the following terms:

   is_in_ag(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(53) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   is_in_ag(x0)


----------------------------------------

(54)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U6_GAA(N, is_out_ag) -> MULT_IN_GAA(N)
   U10_GAA(N, is_out_ag) -> MULT_IN_GAA(N)
   U5_GAA(N, <_out_ag) -> U6_GAA(N, is_out_ag)
   MULT_IN_GAA(N) -> U5_GAA(N, <_out_ag)
   MULT_IN_GAA(N) -> U10_GAA(N, is_out_ag)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(55) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = MULT_IN_GAA(N') evaluates to  t =MULT_IN_GAA(N')

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

MULT_IN_GAA(N') -> U10_GAA(N', is_out_ag)
with rule MULT_IN_GAA(N'') -> U10_GAA(N'', is_out_ag) at position [] and matcher [N'' / N']

U10_GAA(N', is_out_ag) -> MULT_IN_GAA(N')
with rule U10_GAA(N, is_out_ag) -> MULT_IN_GAA(N)

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(56)
NO

----------------------------------------

(57) IntegerArithmeticTransformerProof (SOUND)
Added definitions of predefined predicates [PROLOG].
----------------------------------------

(58)
Obligation:
Clauses:

main(M, N) :- ','(=(X, M), ','(=(X1, zero), ','(;(isGreater(X, X1), =(X, X1)), ','(=(X2, N), ','(=(X3, zero), ','(;(isGreater(X2, X3), =(X2, X3)), ','(mult(M, N, Ret1), mult(N, M, Ret2)))))))).
mult(N, M, Ret) :- ','(=(X, M), ','(=(X1, zero), ','(isLess(X, X1), ','(!, ','(isMinus(zero1, M, U), ','(=(M1, U), mult(N, M1, Ret))))))).
mult(X1, M, Ret) :- ','(=(X, M), ','(=(X2, zero), ','(=(X, X2), =(Ret, zero)))).
mult(N, M, Ret) :- ','(!, ','(isMinus(M, succ(zero), U), ','(=(M1, U), ','(mult(N, M1, Ret1), ','(isPlus(N, Ret1, U), =(Ret, U)))))).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isGreater(succ(X), zero).
isGreater(succ(X), pred(Y)).
isGreater(succ(X), succ(Y)) :- isGreater(X, Y).
isGreater(zero, pred(Y)).
isGreater(pred(X), pred(Y)) :- isGreater(X, Y).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).


Query: main(g,g)
----------------------------------------

(59) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(60)
Obligation:
Clauses:

main(M, N) :- ','(=(X, M), ','(=(X1, zero), ','(;(isGreater(X, X1), =(X, X1)), ','(=(X2, N), ','(=(X3, zero), ','(;(isGreater(X2, X3), =(X2, X3)), ','(mult(M, N, Ret1), mult(N, M, Ret2)))))))).
mult(N, M, Ret) :- ','(=(X, M), ','(=(X1, zero), ','(isLess(X, X1), ','(isMinus(zero1, M, U), ','(=(M1, U), mult(N, M1, Ret)))))).
mult(X1, M, Ret) :- ','(=(X, M), ','(=(X2, zero), ','(=(X, X2), =(Ret, zero)))).
mult(N, M, Ret) :- ','(isMinus(M, succ(zero), U), ','(=(M1, U), ','(mult(N, M1, Ret1), ','(isPlus(N, Ret1, U), =(Ret, U))))).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isGreater(succ(X), zero).
isGreater(succ(X), pred(Y)).
isGreater(succ(X), succ(Y)) :- isGreater(X, Y).
isGreater(zero, pred(Y)).
isGreater(pred(X), pred(Y)) :- isGreater(X, Y).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).


Query: main(g,g)
----------------------------------------

(61) UnifyTransformerProof (EQUIVALENT)
Added a fact for the built-in = predicate [PROLOG].
----------------------------------------

(62)
Obligation:
Clauses:

main(M, N) :- ','(=(X, M), ','(=(X1, zero), ','(;(isGreater(X, X1), =(X, X1)), ','(=(X2, N), ','(=(X3, zero), ','(;(isGreater(X2, X3), =(X2, X3)), ','(mult(M, N, Ret1), mult(N, M, Ret2)))))))).
mult(N, M, Ret) :- ','(=(X, M), ','(=(X1, zero), ','(isLess(X, X1), ','(isMinus(zero1, M, U), ','(=(M1, U), mult(N, M1, Ret)))))).
mult(X1, M, Ret) :- ','(=(X, M), ','(=(X2, zero), ','(=(X, X2), =(Ret, zero)))).
mult(N, M, Ret) :- ','(isMinus(M, succ(zero), U), ','(=(M1, U), ','(mult(N, M1, Ret1), ','(isPlus(N, Ret1, U), =(Ret, U))))).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isGreater(succ(X), zero).
isGreater(succ(X), pred(Y)).
isGreater(succ(X), succ(Y)) :- isGreater(X, Y).
isGreater(zero, pred(Y)).
isGreater(pred(X), pred(Y)) :- isGreater(X, Y).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).
=(X, X).


Query: main(g,g)
----------------------------------------

(63) OrTransformerProof (EQUIVALENT)
Transformed all or-constructs[PROLOG].
----------------------------------------

(64)
Obligation:
Clauses:

main(M, N) :- ','(=(X, M), ','(=(X1, zero), ','(isGreater(X, X1), ','(=(X2, N), ','(=(X3, zero), ','(isGreater(X2, X3), ','(mult(M, N, Ret1), mult(N, M, Ret2)))))))).
main(M, N) :- ','(=(X, M), ','(=(X1, zero), ','(isGreater(X, X1), ','(=(X2, N), ','(=(X3, zero), ','(=(X2, X3), ','(mult(M, N, Ret1), mult(N, M, Ret2)))))))).
main(M, N) :- ','(=(X, M), ','(=(X1, zero), ','(=(X, X1), ','(=(X2, N), ','(=(X3, zero), ','(isGreater(X2, X3), ','(mult(M, N, Ret1), mult(N, M, Ret2)))))))).
main(M, N) :- ','(=(X, M), ','(=(X1, zero), ','(=(X, X1), ','(=(X2, N), ','(=(X3, zero), ','(=(X2, X3), ','(mult(M, N, Ret1), mult(N, M, Ret2)))))))).
mult(N, M, Ret) :- ','(=(X, M), ','(=(X1, zero), ','(isLess(X, X1), ','(isMinus(zero1, M, U), ','(=(M1, U), mult(N, M1, Ret)))))).
mult(X1, M, Ret) :- ','(=(X, M), ','(=(X2, zero), ','(=(X, X2), =(Ret, zero)))).
mult(N, M, Ret) :- ','(isMinus(M, succ(zero), U), ','(=(M1, U), ','(mult(N, M1, Ret1), ','(isPlus(N, Ret1, U), =(Ret, U))))).
isPlus(zero, X, X).
isPlus(succ(X), zero, succ(X)).
isPlus(succ(X), succ(Y), succ(succ(Z))) :- isPlus(X, Y, Z).
isPlus(succ(X), pred(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), zero, pred(X)).
isPlus(pred(X), succ(Y), Z) :- isPlus(X, Y, Z).
isPlus(pred(X), pred(Y), pred(pred(Z))) :- isPlus(X, Y, Z).
isMinus(X, zero, X).
isMinus(zero, succ(Y), pred(Z)) :- isMinus(zero, Y, Z).
isMinus(zero, pred(Y), succ(Z)) :- isMinus(zero, Y, Z).
isMinus(succ(X), succ(Y), Z) :- isMinus(X, Y, Z).
isMinus(succ(X), pred(Y), succ(succ(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), succ(Y), pred(pred(Z))) :- isMinus(X, Y, Z).
isMinus(pred(X), pred(Y), Z) :- isMinus(X, Y, Z).
isTimes(X, zero, zero).
isTimes(zero, succ(Y), zero).
isTimes(zero, pred(Y), zero).
isTimes(succ(X), succ(Y), Z) :- ','(isTimes(succ(X), Y, A), isPlus(A, succ(X), Z)).
isTimes(succ(X), pred(Y), Z) :- ','(isTimes(succ(X), Y, A), isMinus(A, succ(X), Z)).
isTimes(pred(X), succ(Y), Z) :- ','(isTimes(pred(X), Y, A), isPlus(A, pred(X), Z)).
isTimes(pred(X), pred(Y), Z) :- ','(isTimes(pred(X), Y, A), isMinus(A, pred(X), Z)).
isDiv(zero, succ(Y), zero).
isDiv(zero, pred(Y), zero).
isDiv(succ(X), succ(Y), zero) :- isMinus(succ(X), succ(Y), pred(Z)).
isDiv(succ(X), succ(Y), succ(Z)) :- ','(isMinus(succ(X), succ(Y), A), isDiv(A, succ(Y), Z)).
isDiv(succ(X), pred(Y), Z) :- ','(isMinus(zero, pred(Y), A), ','(isDiv(succ(X), A, B), isMinus(zero, B, Z))).
isDiv(pred(X), pred(Y), zero) :- isMinus(pred(X), pred(Y), succ(Z)).
isDiv(pred(X), pred(Y), succ(Z)) :- ','(isMinus(pred(X), pred(Y), A), isDiv(A, pred(Y), Z)).
isDiv(pred(X), succ(Y), Z) :- ','(isMinus(zero, pred(X), A), ','(isDiv(A, succ(Y), B), isMinus(zero, B, Z))).
isModulo(X, Y, Z) :- ','(isDiv(X, Y, A), ','(isTimes(A, Y, B), isMinus(X, B, Z))).
isGreater(succ(X), zero).
isGreater(succ(X), pred(Y)).
isGreater(succ(X), succ(Y)) :- isGreater(X, Y).
isGreater(zero, pred(Y)).
isGreater(pred(X), pred(Y)) :- isGreater(X, Y).
isLess(pred(X), zero).
isLess(pred(X), succ(Y)).
isLess(pred(X), pred(Y)) :- isLess(X, Y).
isLess(zero, succ(Y)).
isLess(succ(X), succ(Y)) :- isLess(X, Y).
=(X, X).


Query: main(g,g)
----------------------------------------

(65) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

main_in_2: (b,b)

isGreater_in_2: (b,b)

mult_in_3: (b,b,f)

isLess_in_2: (b,b)

isMinus_in_3: (b,b,f)

isPlus_in_3: (b,b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U71_gg(x1, x2, x3)  =  U71_gg(x3)

U72_gg(x1, x2, x3)  =  U72_gg(x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U40_gga(x1, x2, x3)  =  U40_gga(x3)

U41_gga(x1, x2, x3)  =  U41_gga(x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U30_gga(x1, x2, x3, x4)  =  U30_gga(x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

U8_gg(x1, x2, x3)  =  U8_gg(x3)

main_out_gg(x1, x2)  =  main_out_gg

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(66)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U71_gg(x1, x2, x3)  =  U71_gg(x3)

U72_gg(x1, x2, x3)  =  U72_gg(x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U40_gga(x1, x2, x3)  =  U40_gga(x3)

U41_gga(x1, x2, x3)  =  U41_gga(x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U30_gga(x1, x2, x3, x4)  =  U30_gga(x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

U8_gg(x1, x2, x3)  =  U8_gg(x3)

main_out_gg(x1, x2)  =  main_out_gg

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)



----------------------------------------

(67) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GG(M, N) -> U1_GG(M, N, =_in_ag(X, M))
   MAIN_IN_GG(M, N) -> =_IN_AG(X, M)
   U1_GG(M, N, =_out_ag(X, M)) -> U2_GG(M, N, X, =_in_ag(X1, zero))
   U1_GG(M, N, =_out_ag(X, M)) -> =_IN_AG(X1, zero)
   U2_GG(M, N, X, =_out_ag(X1, zero)) -> U3_GG(M, N, isGreater_in_gg(X, X1))
   U2_GG(M, N, X, =_out_ag(X1, zero)) -> ISGREATER_IN_GG(X, X1)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> U69_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(pred(X), pred(Y)) -> U70_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   U3_GG(M, N, isGreater_out_gg(X, X1)) -> U4_GG(M, N, =_in_ag(X2, N))
   U3_GG(M, N, isGreater_out_gg(X, X1)) -> =_IN_AG(X2, N)
   U4_GG(M, N, =_out_ag(X2, N)) -> U5_GG(M, N, X2, =_in_ag(X3, zero))
   U4_GG(M, N, =_out_ag(X2, N)) -> =_IN_AG(X3, zero)
   U5_GG(M, N, X2, =_out_ag(X3, zero)) -> U6_GG(M, N, isGreater_in_gg(X2, X3))
   U5_GG(M, N, X2, =_out_ag(X3, zero)) -> ISGREATER_IN_GG(X2, X3)
   U6_GG(M, N, isGreater_out_gg(X2, X3)) -> U7_GG(M, N, mult_in_gga(M, N, Ret1))
   U6_GG(M, N, isGreater_out_gg(X2, X3)) -> MULT_IN_GGA(M, N, Ret1)
   MULT_IN_GGA(N, M, Ret) -> U21_GGA(N, M, Ret, =_in_ag(X, M))
   MULT_IN_GGA(N, M, Ret) -> =_IN_AG(X, M)
   U21_GGA(N, M, Ret, =_out_ag(X, M)) -> U22_GGA(N, M, Ret, X, =_in_ag(X1, zero))
   U21_GGA(N, M, Ret, =_out_ag(X, M)) -> =_IN_AG(X1, zero)
   U22_GGA(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_GGA(N, M, Ret, isLess_in_gg(X, X1))
   U22_GGA(N, M, Ret, X, =_out_ag(X1, zero)) -> ISLESS_IN_GG(X, X1)
   ISLESS_IN_GG(pred(X), pred(Y)) -> U71_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(succ(X), succ(Y)) -> U72_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   U23_GGA(N, M, Ret, isLess_out_gg(X, X1)) -> U24_GGA(N, M, Ret, isMinus_in_gga(zero1, M, U))
   U23_GGA(N, M, Ret, isLess_out_gg(X, X1)) -> ISMINUS_IN_GGA(zero1, M, U)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> U40_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> U41_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> U42_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> U43_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> U44_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> U45_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   U24_GGA(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, Ret, =_in_ag(M1, U))
   U24_GGA(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> =_IN_AG(M1, U)
   U25_GGA(N, M, Ret, =_out_ag(M1, U)) -> U26_GGA(N, M, Ret, mult_in_gga(N, M1, Ret))
   U25_GGA(N, M, Ret, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1, Ret)
   MULT_IN_GGA(X1, M, Ret) -> U27_GGA(X1, M, Ret, =_in_ag(X, M))
   U27_GGA(X1, M, Ret, =_out_ag(X, M)) -> U28_GGA(X1, M, Ret, X, =_in_ag(X2, zero))
   U27_GGA(X1, M, Ret, =_out_ag(X, M)) -> =_IN_AG(X2, zero)
   U28_GGA(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_GGA(X1, M, Ret, =_in_gg(X, X2))
   U28_GGA(X1, M, Ret, X, =_out_ag(X2, zero)) -> =_IN_GG(X, X2)
   U29_GGA(X1, M, Ret, =_out_gg(X, X2)) -> U30_GGA(X1, M, Ret, =_in_ag(Ret, zero))
   U29_GGA(X1, M, Ret, =_out_gg(X, X2)) -> =_IN_AG(Ret, zero)
   MULT_IN_GGA(N, M, Ret) -> U31_GGA(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   MULT_IN_GGA(N, M, Ret) -> ISMINUS_IN_GGA(M, succ(zero), U)
   U31_GGA(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, Ret, U, =_in_ag(M1, U))
   U31_GGA(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> =_IN_AG(M1, U)
   U32_GGA(N, M, Ret, U, =_out_ag(M1, U)) -> U33_GGA(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U32_GGA(N, M, Ret, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1, Ret1)
   U33_GGA(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_GGA(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   U33_GGA(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> ISPLUS_IN_GGG(N, Ret1, U)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> U36_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> U37_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> U38_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> U39_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   U34_GGA(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_GGA(N, M, Ret, =_in_ag(Ret, U))
   U34_GGA(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> =_IN_AG(Ret, U)
   U7_GG(M, N, mult_out_gga(M, N, Ret1)) -> U8_GG(M, N, mult_in_gga(N, M, Ret2))
   U7_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)
   U5_GG(M, N, X2, =_out_ag(X3, zero)) -> U9_GG(M, N, =_in_gg(X2, X3))
   U5_GG(M, N, X2, =_out_ag(X3, zero)) -> =_IN_GG(X2, X3)
   U9_GG(M, N, =_out_gg(X2, X3)) -> U10_GG(M, N, mult_in_gga(M, N, Ret1))
   U9_GG(M, N, =_out_gg(X2, X3)) -> MULT_IN_GGA(M, N, Ret1)
   U10_GG(M, N, mult_out_gga(M, N, Ret1)) -> U11_GG(M, N, mult_in_gga(N, M, Ret2))
   U10_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)
   U2_GG(M, N, X, =_out_ag(X1, zero)) -> U12_GG(M, N, =_in_gg(X, X1))
   U2_GG(M, N, X, =_out_ag(X1, zero)) -> =_IN_GG(X, X1)
   U12_GG(M, N, =_out_gg(X, X1)) -> U13_GG(M, N, =_in_ag(X2, N))
   U12_GG(M, N, =_out_gg(X, X1)) -> =_IN_AG(X2, N)
   U13_GG(M, N, =_out_ag(X2, N)) -> U14_GG(M, N, X2, =_in_ag(X3, zero))
   U13_GG(M, N, =_out_ag(X2, N)) -> =_IN_AG(X3, zero)
   U14_GG(M, N, X2, =_out_ag(X3, zero)) -> U15_GG(M, N, isGreater_in_gg(X2, X3))
   U14_GG(M, N, X2, =_out_ag(X3, zero)) -> ISGREATER_IN_GG(X2, X3)
   U15_GG(M, N, isGreater_out_gg(X2, X3)) -> U16_GG(M, N, mult_in_gga(M, N, Ret1))
   U15_GG(M, N, isGreater_out_gg(X2, X3)) -> MULT_IN_GGA(M, N, Ret1)
   U16_GG(M, N, mult_out_gga(M, N, Ret1)) -> U17_GG(M, N, mult_in_gga(N, M, Ret2))
   U16_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)
   U14_GG(M, N, X2, =_out_ag(X3, zero)) -> U18_GG(M, N, =_in_gg(X2, X3))
   U14_GG(M, N, X2, =_out_ag(X3, zero)) -> =_IN_GG(X2, X3)
   U18_GG(M, N, =_out_gg(X2, X3)) -> U19_GG(M, N, mult_in_gga(M, N, Ret1))
   U18_GG(M, N, =_out_gg(X2, X3)) -> MULT_IN_GGA(M, N, Ret1)
   U19_GG(M, N, mult_out_gga(M, N, Ret1)) -> U20_GG(M, N, mult_in_gga(N, M, Ret2))
   U19_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U71_gg(x1, x2, x3)  =  U71_gg(x3)

U72_gg(x1, x2, x3)  =  U72_gg(x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U40_gga(x1, x2, x3)  =  U40_gga(x3)

U41_gga(x1, x2, x3)  =  U41_gga(x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U30_gga(x1, x2, x3, x4)  =  U30_gga(x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

U8_gg(x1, x2, x3)  =  U8_gg(x3)

main_out_gg(x1, x2)  =  main_out_gg

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

MAIN_IN_GG(x1, x2)  =  MAIN_IN_GG(x1, x2)

U1_GG(x1, x2, x3)  =  U1_GG(x1, x2, x3)

=_IN_AG(x1, x2)  =  =_IN_AG(x2)

U2_GG(x1, x2, x3, x4)  =  U2_GG(x1, x2, x3, x4)

U3_GG(x1, x2, x3)  =  U3_GG(x1, x2, x3)

ISGREATER_IN_GG(x1, x2)  =  ISGREATER_IN_GG(x1, x2)

U69_GG(x1, x2, x3)  =  U69_GG(x3)

U70_GG(x1, x2, x3)  =  U70_GG(x3)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)

U5_GG(x1, x2, x3, x4)  =  U5_GG(x1, x2, x3, x4)

U6_GG(x1, x2, x3)  =  U6_GG(x1, x2, x3)

U7_GG(x1, x2, x3)  =  U7_GG(x1, x2, x3)

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)

U21_GGA(x1, x2, x3, x4)  =  U21_GGA(x1, x2, x4)

U22_GGA(x1, x2, x3, x4, x5)  =  U22_GGA(x1, x2, x4, x5)

U23_GGA(x1, x2, x3, x4)  =  U23_GGA(x1, x2, x4)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)

U71_GG(x1, x2, x3)  =  U71_GG(x3)

U72_GG(x1, x2, x3)  =  U72_GG(x3)

U24_GGA(x1, x2, x3, x4)  =  U24_GGA(x1, x4)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)

U40_GGA(x1, x2, x3)  =  U40_GGA(x3)

U41_GGA(x1, x2, x3)  =  U41_GGA(x3)

U42_GGA(x1, x2, x3, x4)  =  U42_GGA(x4)

U43_GGA(x1, x2, x3, x4)  =  U43_GGA(x4)

U44_GGA(x1, x2, x3, x4)  =  U44_GGA(x4)

U45_GGA(x1, x2, x3, x4)  =  U45_GGA(x4)

U25_GGA(x1, x2, x3, x4)  =  U25_GGA(x1, x4)

U26_GGA(x1, x2, x3, x4)  =  U26_GGA(x4)

U27_GGA(x1, x2, x3, x4)  =  U27_GGA(x4)

U28_GGA(x1, x2, x3, x4, x5)  =  U28_GGA(x4, x5)

U29_GGA(x1, x2, x3, x4)  =  U29_GGA(x4)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U30_GGA(x1, x2, x3, x4)  =  U30_GGA(x4)

U31_GGA(x1, x2, x3, x4)  =  U31_GGA(x1, x4)

U32_GGA(x1, x2, x3, x4, x5)  =  U32_GGA(x1, x4, x5)

U33_GGA(x1, x2, x3, x4, x5)  =  U33_GGA(x1, x4, x5)

U34_GGA(x1, x2, x3, x4, x5)  =  U34_GGA(x4, x5)

ISPLUS_IN_GGG(x1, x2, x3)  =  ISPLUS_IN_GGG(x1, x2, x3)

U36_GGG(x1, x2, x3, x4)  =  U36_GGG(x4)

U37_GGG(x1, x2, x3, x4)  =  U37_GGG(x4)

U38_GGG(x1, x2, x3, x4)  =  U38_GGG(x4)

U39_GGG(x1, x2, x3, x4)  =  U39_GGG(x4)

U35_GGA(x1, x2, x3, x4)  =  U35_GGA(x4)

U8_GG(x1, x2, x3)  =  U8_GG(x3)

U9_GG(x1, x2, x3)  =  U9_GG(x1, x2, x3)

U10_GG(x1, x2, x3)  =  U10_GG(x1, x2, x3)

U11_GG(x1, x2, x3)  =  U11_GG(x3)

U12_GG(x1, x2, x3)  =  U12_GG(x1, x2, x3)

U13_GG(x1, x2, x3)  =  U13_GG(x1, x2, x3)

U14_GG(x1, x2, x3, x4)  =  U14_GG(x1, x2, x3, x4)

U15_GG(x1, x2, x3)  =  U15_GG(x1, x2, x3)

U16_GG(x1, x2, x3)  =  U16_GG(x1, x2, x3)

U17_GG(x1, x2, x3)  =  U17_GG(x3)

U18_GG(x1, x2, x3)  =  U18_GG(x1, x2, x3)

U19_GG(x1, x2, x3)  =  U19_GG(x1, x2, x3)

U20_GG(x1, x2, x3)  =  U20_GG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(68)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GG(M, N) -> U1_GG(M, N, =_in_ag(X, M))
   MAIN_IN_GG(M, N) -> =_IN_AG(X, M)
   U1_GG(M, N, =_out_ag(X, M)) -> U2_GG(M, N, X, =_in_ag(X1, zero))
   U1_GG(M, N, =_out_ag(X, M)) -> =_IN_AG(X1, zero)
   U2_GG(M, N, X, =_out_ag(X1, zero)) -> U3_GG(M, N, isGreater_in_gg(X, X1))
   U2_GG(M, N, X, =_out_ag(X1, zero)) -> ISGREATER_IN_GG(X, X1)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> U69_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(pred(X), pred(Y)) -> U70_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   U3_GG(M, N, isGreater_out_gg(X, X1)) -> U4_GG(M, N, =_in_ag(X2, N))
   U3_GG(M, N, isGreater_out_gg(X, X1)) -> =_IN_AG(X2, N)
   U4_GG(M, N, =_out_ag(X2, N)) -> U5_GG(M, N, X2, =_in_ag(X3, zero))
   U4_GG(M, N, =_out_ag(X2, N)) -> =_IN_AG(X3, zero)
   U5_GG(M, N, X2, =_out_ag(X3, zero)) -> U6_GG(M, N, isGreater_in_gg(X2, X3))
   U5_GG(M, N, X2, =_out_ag(X3, zero)) -> ISGREATER_IN_GG(X2, X3)
   U6_GG(M, N, isGreater_out_gg(X2, X3)) -> U7_GG(M, N, mult_in_gga(M, N, Ret1))
   U6_GG(M, N, isGreater_out_gg(X2, X3)) -> MULT_IN_GGA(M, N, Ret1)
   MULT_IN_GGA(N, M, Ret) -> U21_GGA(N, M, Ret, =_in_ag(X, M))
   MULT_IN_GGA(N, M, Ret) -> =_IN_AG(X, M)
   U21_GGA(N, M, Ret, =_out_ag(X, M)) -> U22_GGA(N, M, Ret, X, =_in_ag(X1, zero))
   U21_GGA(N, M, Ret, =_out_ag(X, M)) -> =_IN_AG(X1, zero)
   U22_GGA(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_GGA(N, M, Ret, isLess_in_gg(X, X1))
   U22_GGA(N, M, Ret, X, =_out_ag(X1, zero)) -> ISLESS_IN_GG(X, X1)
   ISLESS_IN_GG(pred(X), pred(Y)) -> U71_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(succ(X), succ(Y)) -> U72_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   U23_GGA(N, M, Ret, isLess_out_gg(X, X1)) -> U24_GGA(N, M, Ret, isMinus_in_gga(zero1, M, U))
   U23_GGA(N, M, Ret, isLess_out_gg(X, X1)) -> ISMINUS_IN_GGA(zero1, M, U)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> U40_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> U41_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> U42_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> U43_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> U44_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> U45_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   U24_GGA(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, Ret, =_in_ag(M1, U))
   U24_GGA(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> =_IN_AG(M1, U)
   U25_GGA(N, M, Ret, =_out_ag(M1, U)) -> U26_GGA(N, M, Ret, mult_in_gga(N, M1, Ret))
   U25_GGA(N, M, Ret, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1, Ret)
   MULT_IN_GGA(X1, M, Ret) -> U27_GGA(X1, M, Ret, =_in_ag(X, M))
   U27_GGA(X1, M, Ret, =_out_ag(X, M)) -> U28_GGA(X1, M, Ret, X, =_in_ag(X2, zero))
   U27_GGA(X1, M, Ret, =_out_ag(X, M)) -> =_IN_AG(X2, zero)
   U28_GGA(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_GGA(X1, M, Ret, =_in_gg(X, X2))
   U28_GGA(X1, M, Ret, X, =_out_ag(X2, zero)) -> =_IN_GG(X, X2)
   U29_GGA(X1, M, Ret, =_out_gg(X, X2)) -> U30_GGA(X1, M, Ret, =_in_ag(Ret, zero))
   U29_GGA(X1, M, Ret, =_out_gg(X, X2)) -> =_IN_AG(Ret, zero)
   MULT_IN_GGA(N, M, Ret) -> U31_GGA(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   MULT_IN_GGA(N, M, Ret) -> ISMINUS_IN_GGA(M, succ(zero), U)
   U31_GGA(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, Ret, U, =_in_ag(M1, U))
   U31_GGA(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> =_IN_AG(M1, U)
   U32_GGA(N, M, Ret, U, =_out_ag(M1, U)) -> U33_GGA(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U32_GGA(N, M, Ret, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1, Ret1)
   U33_GGA(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_GGA(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   U33_GGA(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> ISPLUS_IN_GGG(N, Ret1, U)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> U36_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> U37_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> U38_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> U39_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   U34_GGA(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_GGA(N, M, Ret, =_in_ag(Ret, U))
   U34_GGA(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> =_IN_AG(Ret, U)
   U7_GG(M, N, mult_out_gga(M, N, Ret1)) -> U8_GG(M, N, mult_in_gga(N, M, Ret2))
   U7_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)
   U5_GG(M, N, X2, =_out_ag(X3, zero)) -> U9_GG(M, N, =_in_gg(X2, X3))
   U5_GG(M, N, X2, =_out_ag(X3, zero)) -> =_IN_GG(X2, X3)
   U9_GG(M, N, =_out_gg(X2, X3)) -> U10_GG(M, N, mult_in_gga(M, N, Ret1))
   U9_GG(M, N, =_out_gg(X2, X3)) -> MULT_IN_GGA(M, N, Ret1)
   U10_GG(M, N, mult_out_gga(M, N, Ret1)) -> U11_GG(M, N, mult_in_gga(N, M, Ret2))
   U10_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)
   U2_GG(M, N, X, =_out_ag(X1, zero)) -> U12_GG(M, N, =_in_gg(X, X1))
   U2_GG(M, N, X, =_out_ag(X1, zero)) -> =_IN_GG(X, X1)
   U12_GG(M, N, =_out_gg(X, X1)) -> U13_GG(M, N, =_in_ag(X2, N))
   U12_GG(M, N, =_out_gg(X, X1)) -> =_IN_AG(X2, N)
   U13_GG(M, N, =_out_ag(X2, N)) -> U14_GG(M, N, X2, =_in_ag(X3, zero))
   U13_GG(M, N, =_out_ag(X2, N)) -> =_IN_AG(X3, zero)
   U14_GG(M, N, X2, =_out_ag(X3, zero)) -> U15_GG(M, N, isGreater_in_gg(X2, X3))
   U14_GG(M, N, X2, =_out_ag(X3, zero)) -> ISGREATER_IN_GG(X2, X3)
   U15_GG(M, N, isGreater_out_gg(X2, X3)) -> U16_GG(M, N, mult_in_gga(M, N, Ret1))
   U15_GG(M, N, isGreater_out_gg(X2, X3)) -> MULT_IN_GGA(M, N, Ret1)
   U16_GG(M, N, mult_out_gga(M, N, Ret1)) -> U17_GG(M, N, mult_in_gga(N, M, Ret2))
   U16_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)
   U14_GG(M, N, X2, =_out_ag(X3, zero)) -> U18_GG(M, N, =_in_gg(X2, X3))
   U14_GG(M, N, X2, =_out_ag(X3, zero)) -> =_IN_GG(X2, X3)
   U18_GG(M, N, =_out_gg(X2, X3)) -> U19_GG(M, N, mult_in_gga(M, N, Ret1))
   U18_GG(M, N, =_out_gg(X2, X3)) -> MULT_IN_GGA(M, N, Ret1)
   U19_GG(M, N, mult_out_gga(M, N, Ret1)) -> U20_GG(M, N, mult_in_gga(N, M, Ret2))
   U19_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U71_gg(x1, x2, x3)  =  U71_gg(x3)

U72_gg(x1, x2, x3)  =  U72_gg(x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U40_gga(x1, x2, x3)  =  U40_gga(x3)

U41_gga(x1, x2, x3)  =  U41_gga(x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U30_gga(x1, x2, x3, x4)  =  U30_gga(x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

U8_gg(x1, x2, x3)  =  U8_gg(x3)

main_out_gg(x1, x2)  =  main_out_gg

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

MAIN_IN_GG(x1, x2)  =  MAIN_IN_GG(x1, x2)

U1_GG(x1, x2, x3)  =  U1_GG(x1, x2, x3)

=_IN_AG(x1, x2)  =  =_IN_AG(x2)

U2_GG(x1, x2, x3, x4)  =  U2_GG(x1, x2, x3, x4)

U3_GG(x1, x2, x3)  =  U3_GG(x1, x2, x3)

ISGREATER_IN_GG(x1, x2)  =  ISGREATER_IN_GG(x1, x2)

U69_GG(x1, x2, x3)  =  U69_GG(x3)

U70_GG(x1, x2, x3)  =  U70_GG(x3)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)

U5_GG(x1, x2, x3, x4)  =  U5_GG(x1, x2, x3, x4)

U6_GG(x1, x2, x3)  =  U6_GG(x1, x2, x3)

U7_GG(x1, x2, x3)  =  U7_GG(x1, x2, x3)

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)

U21_GGA(x1, x2, x3, x4)  =  U21_GGA(x1, x2, x4)

U22_GGA(x1, x2, x3, x4, x5)  =  U22_GGA(x1, x2, x4, x5)

U23_GGA(x1, x2, x3, x4)  =  U23_GGA(x1, x2, x4)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)

U71_GG(x1, x2, x3)  =  U71_GG(x3)

U72_GG(x1, x2, x3)  =  U72_GG(x3)

U24_GGA(x1, x2, x3, x4)  =  U24_GGA(x1, x4)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)

U40_GGA(x1, x2, x3)  =  U40_GGA(x3)

U41_GGA(x1, x2, x3)  =  U41_GGA(x3)

U42_GGA(x1, x2, x3, x4)  =  U42_GGA(x4)

U43_GGA(x1, x2, x3, x4)  =  U43_GGA(x4)

U44_GGA(x1, x2, x3, x4)  =  U44_GGA(x4)

U45_GGA(x1, x2, x3, x4)  =  U45_GGA(x4)

U25_GGA(x1, x2, x3, x4)  =  U25_GGA(x1, x4)

U26_GGA(x1, x2, x3, x4)  =  U26_GGA(x4)

U27_GGA(x1, x2, x3, x4)  =  U27_GGA(x4)

U28_GGA(x1, x2, x3, x4, x5)  =  U28_GGA(x4, x5)

U29_GGA(x1, x2, x3, x4)  =  U29_GGA(x4)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U30_GGA(x1, x2, x3, x4)  =  U30_GGA(x4)

U31_GGA(x1, x2, x3, x4)  =  U31_GGA(x1, x4)

U32_GGA(x1, x2, x3, x4, x5)  =  U32_GGA(x1, x4, x5)

U33_GGA(x1, x2, x3, x4, x5)  =  U33_GGA(x1, x4, x5)

U34_GGA(x1, x2, x3, x4, x5)  =  U34_GGA(x4, x5)

ISPLUS_IN_GGG(x1, x2, x3)  =  ISPLUS_IN_GGG(x1, x2, x3)

U36_GGG(x1, x2, x3, x4)  =  U36_GGG(x4)

U37_GGG(x1, x2, x3, x4)  =  U37_GGG(x4)

U38_GGG(x1, x2, x3, x4)  =  U38_GGG(x4)

U39_GGG(x1, x2, x3, x4)  =  U39_GGG(x4)

U35_GGA(x1, x2, x3, x4)  =  U35_GGA(x4)

U8_GG(x1, x2, x3)  =  U8_GG(x3)

U9_GG(x1, x2, x3)  =  U9_GG(x1, x2, x3)

U10_GG(x1, x2, x3)  =  U10_GG(x1, x2, x3)

U11_GG(x1, x2, x3)  =  U11_GG(x3)

U12_GG(x1, x2, x3)  =  U12_GG(x1, x2, x3)

U13_GG(x1, x2, x3)  =  U13_GG(x1, x2, x3)

U14_GG(x1, x2, x3, x4)  =  U14_GG(x1, x2, x3, x4)

U15_GG(x1, x2, x3)  =  U15_GG(x1, x2, x3)

U16_GG(x1, x2, x3)  =  U16_GG(x1, x2, x3)

U17_GG(x1, x2, x3)  =  U17_GG(x3)

U18_GG(x1, x2, x3)  =  U18_GG(x1, x2, x3)

U19_GG(x1, x2, x3)  =  U19_GG(x1, x2, x3)

U20_GG(x1, x2, x3)  =  U20_GG(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(69) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 6 SCCs with 74 less nodes.
----------------------------------------

(70)
Complex Obligation (AND)

----------------------------------------

(71)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U71_gg(x1, x2, x3)  =  U71_gg(x3)

U72_gg(x1, x2, x3)  =  U72_gg(x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U40_gga(x1, x2, x3)  =  U40_gga(x3)

U41_gga(x1, x2, x3)  =  U41_gga(x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U30_gga(x1, x2, x3, x4)  =  U30_gga(x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

U8_gg(x1, x2, x3)  =  U8_gg(x3)

main_out_gg(x1, x2)  =  main_out_gg

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

ISPLUS_IN_GGG(x1, x2, x3)  =  ISPLUS_IN_GGG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(72) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(73)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(74) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(75)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(76) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


*ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 > 3


*ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


*ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 > 3


----------------------------------------

(77)
YES

----------------------------------------

(78)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U71_gg(x1, x2, x3)  =  U71_gg(x3)

U72_gg(x1, x2, x3)  =  U72_gg(x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U40_gga(x1, x2, x3)  =  U40_gga(x3)

U41_gga(x1, x2, x3)  =  U41_gga(x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U30_gga(x1, x2, x3, x4)  =  U30_gga(x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

U8_gg(x1, x2, x3)  =  U8_gg(x3)

main_out_gg(x1, x2)  =  main_out_gg

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(79) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(80)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
zero  =  zero

succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(81) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(82)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y)) -> ISMINUS_IN_GGA(zero, Y)
   ISMINUS_IN_GGA(zero, succ(Y)) -> ISMINUS_IN_GGA(zero, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(83) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGA(zero, pred(Y)) -> ISMINUS_IN_GGA(zero, Y)
The graph contains the following edges 1 >= 1, 2 > 2


*ISMINUS_IN_GGA(zero, succ(Y)) -> ISMINUS_IN_GGA(zero, Y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(84)
YES

----------------------------------------

(85)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U71_gg(x1, x2, x3)  =  U71_gg(x3)

U72_gg(x1, x2, x3)  =  U72_gg(x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U40_gga(x1, x2, x3)  =  U40_gga(x3)

U41_gga(x1, x2, x3)  =  U41_gga(x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U30_gga(x1, x2, x3, x4)  =  U30_gga(x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

U8_gg(x1, x2, x3)  =  U8_gg(x3)

main_out_gg(x1, x2)  =  main_out_gg

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(86) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(87)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(88) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(89)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(succ(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(pred(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(pred(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(90) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGA(succ(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(succ(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(pred(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(pred(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(91)
YES

----------------------------------------

(92)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U71_gg(x1, x2, x3)  =  U71_gg(x3)

U72_gg(x1, x2, x3)  =  U72_gg(x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U40_gga(x1, x2, x3)  =  U40_gga(x3)

U41_gga(x1, x2, x3)  =  U41_gga(x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U30_gga(x1, x2, x3, x4)  =  U30_gga(x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

U8_gg(x1, x2, x3)  =  U8_gg(x3)

main_out_gg(x1, x2)  =  main_out_gg

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(93) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(94)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(95) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(96)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(97) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(98)
YES

----------------------------------------

(99)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U21_GGA(N, M, Ret, =_out_ag(X, M)) -> U22_GGA(N, M, Ret, X, =_in_ag(X1, zero))
   U22_GGA(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_GGA(N, M, Ret, isLess_in_gg(X, X1))
   U23_GGA(N, M, Ret, isLess_out_gg(X, X1)) -> U24_GGA(N, M, Ret, isMinus_in_gga(zero1, M, U))
   U24_GGA(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, Ret, =_in_ag(M1, U))
   U25_GGA(N, M, Ret, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1, Ret)
   MULT_IN_GGA(N, M, Ret) -> U21_GGA(N, M, Ret, =_in_ag(X, M))
   MULT_IN_GGA(N, M, Ret) -> U31_GGA(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_GGA(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, Ret, U, =_in_ag(M1, U))
   U32_GGA(N, M, Ret, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1, Ret1)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U71_gg(x1, x2, x3)  =  U71_gg(x3)

U72_gg(x1, x2, x3)  =  U72_gg(x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U40_gga(x1, x2, x3)  =  U40_gga(x3)

U41_gga(x1, x2, x3)  =  U41_gga(x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U30_gga(x1, x2, x3, x4)  =  U30_gga(x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

U8_gg(x1, x2, x3)  =  U8_gg(x3)

main_out_gg(x1, x2)  =  main_out_gg

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)

U21_GGA(x1, x2, x3, x4)  =  U21_GGA(x1, x2, x4)

U22_GGA(x1, x2, x3, x4, x5)  =  U22_GGA(x1, x2, x4, x5)

U23_GGA(x1, x2, x3, x4)  =  U23_GGA(x1, x2, x4)

U24_GGA(x1, x2, x3, x4)  =  U24_GGA(x1, x4)

U25_GGA(x1, x2, x3, x4)  =  U25_GGA(x1, x4)

U31_GGA(x1, x2, x3, x4)  =  U31_GGA(x1, x4)

U32_GGA(x1, x2, x3, x4, x5)  =  U32_GGA(x1, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(100) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(101)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U21_GGA(N, M, Ret, =_out_ag(X, M)) -> U22_GGA(N, M, Ret, X, =_in_ag(X1, zero))
   U22_GGA(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_GGA(N, M, Ret, isLess_in_gg(X, X1))
   U23_GGA(N, M, Ret, isLess_out_gg(X, X1)) -> U24_GGA(N, M, Ret, isMinus_in_gga(zero1, M, U))
   U24_GGA(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, Ret, =_in_ag(M1, U))
   U25_GGA(N, M, Ret, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1, Ret)
   MULT_IN_GGA(N, M, Ret) -> U21_GGA(N, M, Ret, =_in_ag(X, M))
   MULT_IN_GGA(N, M, Ret) -> U31_GGA(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_GGA(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, Ret, U, =_in_ag(M1, U))
   U32_GGA(N, M, Ret, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1, Ret1)

The TRS R consists of the following rules:

   =_in_ag(X, X) -> =_out_ag(X, X)
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)

The argument filtering Pi contains the following mapping:
=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

zero  =  zero

succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U71_gg(x1, x2, x3)  =  U71_gg(x3)

U72_gg(x1, x2, x3)  =  U72_gg(x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U40_gga(x1, x2, x3)  =  U40_gga(x3)

U41_gga(x1, x2, x3)  =  U41_gga(x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x4)

zero1  =  zero1

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)

U21_GGA(x1, x2, x3, x4)  =  U21_GGA(x1, x2, x4)

U22_GGA(x1, x2, x3, x4, x5)  =  U22_GGA(x1, x2, x4, x5)

U23_GGA(x1, x2, x3, x4)  =  U23_GGA(x1, x2, x4)

U24_GGA(x1, x2, x3, x4)  =  U24_GGA(x1, x4)

U25_GGA(x1, x2, x3, x4)  =  U25_GGA(x1, x4)

U31_GGA(x1, x2, x3, x4)  =  U31_GGA(x1, x4)

U32_GGA(x1, x2, x3, x4, x5)  =  U32_GGA(x1, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(102) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(103)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U21_GGA(N, M, =_out_ag(X)) -> U22_GGA(N, M, X, =_in_ag(zero))
   U22_GGA(N, M, X, =_out_ag(X1)) -> U23_GGA(N, M, isLess_in_gg(X, X1))
   U23_GGA(N, M, isLess_out_gg) -> U24_GGA(N, isMinus_in_gga(zero1, M))
   U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_in_ag(U))
   U25_GGA(N, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_in_ag(M))
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))
   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_in_ag(U))
   U32_GGA(N, U, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(isLess_in_gg(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   U71_gg(isLess_out_gg) -> isLess_out_gg
   U72_gg(isLess_out_gg) -> isLess_out_gg
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U45_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)

The set Q consists of the following terms:

   =_in_ag(x0)
   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U71_gg(x0)
   U72_gg(x0)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(104) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U21_GGA(N, M, =_out_ag(X)) -> U22_GGA(N, M, X, =_in_ag(zero)) at position [3] we obtained the following new rules [LPAR04]:

   (U21_GGA(N, M, =_out_ag(X)) -> U22_GGA(N, M, X, =_out_ag(zero)),U21_GGA(N, M, =_out_ag(X)) -> U22_GGA(N, M, X, =_out_ag(zero)))


----------------------------------------

(105)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U22_GGA(N, M, X, =_out_ag(X1)) -> U23_GGA(N, M, isLess_in_gg(X, X1))
   U23_GGA(N, M, isLess_out_gg) -> U24_GGA(N, isMinus_in_gga(zero1, M))
   U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_in_ag(U))
   U25_GGA(N, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_in_ag(M))
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))
   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_in_ag(U))
   U32_GGA(N, U, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X)) -> U22_GGA(N, M, X, =_out_ag(zero))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(isLess_in_gg(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   U71_gg(isLess_out_gg) -> isLess_out_gg
   U72_gg(isLess_out_gg) -> isLess_out_gg
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U45_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)

The set Q consists of the following terms:

   =_in_ag(x0)
   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U71_gg(x0)
   U72_gg(x0)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(106) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_in_ag(U)) at position [1] we obtained the following new rules [LPAR04]:

   (U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_out_ag(U)),U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_out_ag(U)))


----------------------------------------

(107)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U22_GGA(N, M, X, =_out_ag(X1)) -> U23_GGA(N, M, isLess_in_gg(X, X1))
   U23_GGA(N, M, isLess_out_gg) -> U24_GGA(N, isMinus_in_gga(zero1, M))
   U25_GGA(N, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_in_ag(M))
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))
   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_in_ag(U))
   U32_GGA(N, U, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X)) -> U22_GGA(N, M, X, =_out_ag(zero))
   U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_out_ag(U))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(isLess_in_gg(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   U71_gg(isLess_out_gg) -> isLess_out_gg
   U72_gg(isLess_out_gg) -> isLess_out_gg
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U45_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)

The set Q consists of the following terms:

   =_in_ag(x0)
   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U71_gg(x0)
   U72_gg(x0)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(108) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_in_ag(M)) at position [2] we obtained the following new rules [LPAR04]:

   (MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M)),MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M)))


----------------------------------------

(109)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U22_GGA(N, M, X, =_out_ag(X1)) -> U23_GGA(N, M, isLess_in_gg(X, X1))
   U23_GGA(N, M, isLess_out_gg) -> U24_GGA(N, isMinus_in_gga(zero1, M))
   U25_GGA(N, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))
   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_in_ag(U))
   U32_GGA(N, U, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X)) -> U22_GGA(N, M, X, =_out_ag(zero))
   U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_out_ag(U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(isLess_in_gg(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   U71_gg(isLess_out_gg) -> isLess_out_gg
   U72_gg(isLess_out_gg) -> isLess_out_gg
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U45_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)

The set Q consists of the following terms:

   =_in_ag(x0)
   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U71_gg(x0)
   U72_gg(x0)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(110) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_in_ag(U)) at position [2] we obtained the following new rules [LPAR04]:

   (U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U)),U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U)))


----------------------------------------

(111)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U22_GGA(N, M, X, =_out_ag(X1)) -> U23_GGA(N, M, isLess_in_gg(X, X1))
   U23_GGA(N, M, isLess_out_gg) -> U24_GGA(N, isMinus_in_gga(zero1, M))
   U25_GGA(N, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, U, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X)) -> U22_GGA(N, M, X, =_out_ag(zero))
   U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_out_ag(U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M))
   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X)
   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(isLess_in_gg(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   U71_gg(isLess_out_gg) -> isLess_out_gg
   U72_gg(isLess_out_gg) -> isLess_out_gg
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U45_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)

The set Q consists of the following terms:

   =_in_ag(x0)
   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U71_gg(x0)
   U72_gg(x0)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(112) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(113)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U22_GGA(N, M, X, =_out_ag(X1)) -> U23_GGA(N, M, isLess_in_gg(X, X1))
   U23_GGA(N, M, isLess_out_gg) -> U24_GGA(N, isMinus_in_gga(zero1, M))
   U25_GGA(N, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, U, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X)) -> U22_GGA(N, M, X, =_out_ag(zero))
   U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_out_ag(U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M))
   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U45_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(isLess_in_gg(X, Y))
   U72_gg(isLess_out_gg) -> isLess_out_gg
   U71_gg(isLess_out_gg) -> isLess_out_gg

The set Q consists of the following terms:

   =_in_ag(x0)
   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U71_gg(x0)
   U72_gg(x0)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(114) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =_in_ag(x0)


----------------------------------------

(115)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U22_GGA(N, M, X, =_out_ag(X1)) -> U23_GGA(N, M, isLess_in_gg(X, X1))
   U23_GGA(N, M, isLess_out_gg) -> U24_GGA(N, isMinus_in_gga(zero1, M))
   U25_GGA(N, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, U, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X)) -> U22_GGA(N, M, X, =_out_ag(zero))
   U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_out_ag(U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M))
   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U45_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(isLess_in_gg(X, Y))
   U72_gg(isLess_out_gg) -> isLess_out_gg
   U71_gg(isLess_out_gg) -> isLess_out_gg

The set Q consists of the following terms:

   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U71_gg(x0)
   U72_gg(x0)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(116) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U22_GGA(N, M, X, =_out_ag(X1)) -> U23_GGA(N, M, isLess_in_gg(X, X1)) we obtained the following new rules [LPAR04]:

   (U22_GGA(z0, z1, z2, =_out_ag(zero)) -> U23_GGA(z0, z1, isLess_in_gg(z2, zero)),U22_GGA(z0, z1, z2, =_out_ag(zero)) -> U23_GGA(z0, z1, isLess_in_gg(z2, zero)))


----------------------------------------

(117)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U23_GGA(N, M, isLess_out_gg) -> U24_GGA(N, isMinus_in_gga(zero1, M))
   U25_GGA(N, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, U, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X)) -> U22_GGA(N, M, X, =_out_ag(zero))
   U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_out_ag(U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M))
   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U22_GGA(z0, z1, z2, =_out_ag(zero)) -> U23_GGA(z0, z1, isLess_in_gg(z2, zero))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U45_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(isLess_in_gg(X, Y))
   U72_gg(isLess_out_gg) -> isLess_out_gg
   U71_gg(isLess_out_gg) -> isLess_out_gg

The set Q consists of the following terms:

   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U71_gg(x0)
   U72_gg(x0)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(118) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(119)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U23_GGA(N, M, isLess_out_gg) -> U24_GGA(N, isMinus_in_gga(zero1, M))
   U25_GGA(N, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, U, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X)) -> U22_GGA(N, M, X, =_out_ag(zero))
   U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_out_ag(U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M))
   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U22_GGA(z0, z1, z2, =_out_ag(zero)) -> U23_GGA(z0, z1, isLess_in_gg(z2, zero))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U45_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U71_gg(x0)
   U72_gg(x0)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(120) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U71_gg(x0)
   U72_gg(x0)


----------------------------------------

(121)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U23_GGA(N, M, isLess_out_gg) -> U24_GGA(N, isMinus_in_gga(zero1, M))
   U25_GGA(N, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, U, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X)) -> U22_GGA(N, M, X, =_out_ag(zero))
   U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_out_ag(U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M))
   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U22_GGA(z0, z1, z2, =_out_ag(zero)) -> U23_GGA(z0, z1, isLess_in_gg(z2, zero))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U45_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(122) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U22_GGA(z0, z1, z2, =_out_ag(zero)) -> U23_GGA(z0, z1, isLess_in_gg(z2, zero)) at position [2] we obtained the following new rules [LPAR04]:

   (U22_GGA(y0, y1, pred(x0), =_out_ag(zero)) -> U23_GGA(y0, y1, isLess_out_gg),U22_GGA(y0, y1, pred(x0), =_out_ag(zero)) -> U23_GGA(y0, y1, isLess_out_gg))


----------------------------------------

(123)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U23_GGA(N, M, isLess_out_gg) -> U24_GGA(N, isMinus_in_gga(zero1, M))
   U25_GGA(N, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, U, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X)) -> U22_GGA(N, M, X, =_out_ag(zero))
   U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_out_ag(U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M))
   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U22_GGA(y0, y1, pred(x0), =_out_ag(zero)) -> U23_GGA(y0, y1, isLess_out_gg)

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg
   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U45_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(124) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(125)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U23_GGA(N, M, isLess_out_gg) -> U24_GGA(N, isMinus_in_gga(zero1, M))
   U25_GGA(N, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, U, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X)) -> U22_GGA(N, M, X, =_out_ag(zero))
   U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_out_ag(U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M))
   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U22_GGA(y0, y1, pred(x0), =_out_ag(zero)) -> U23_GGA(y0, y1, isLess_out_gg)

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U45_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(126) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   isLess_in_gg(x0, x1)


----------------------------------------

(127)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U23_GGA(N, M, isLess_out_gg) -> U24_GGA(N, isMinus_in_gga(zero1, M))
   U25_GGA(N, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, U, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X)) -> U22_GGA(N, M, X, =_out_ag(zero))
   U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_out_ag(U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M))
   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U22_GGA(y0, y1, pred(x0), =_out_ag(zero)) -> U23_GGA(y0, y1, isLess_out_gg)

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U45_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(128) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U32_GGA(N, U, =_out_ag(M1)) -> MULT_IN_GGA(N, M1) we obtained the following new rules [LPAR04]:

   (U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1),U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1))


----------------------------------------

(129)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U23_GGA(N, M, isLess_out_gg) -> U24_GGA(N, isMinus_in_gga(zero1, M))
   U25_GGA(N, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))
   U21_GGA(N, M, =_out_ag(X)) -> U22_GGA(N, M, X, =_out_ag(zero))
   U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_out_ag(U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M))
   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U22_GGA(y0, y1, pred(x0), =_out_ag(zero)) -> U23_GGA(y0, y1, isLess_out_gg)
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U45_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(130) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U21_GGA(N, M, =_out_ag(X)) -> U22_GGA(N, M, X, =_out_ag(zero)) we obtained the following new rules [LPAR04]:

   (U21_GGA(z0, z1, =_out_ag(z1)) -> U22_GGA(z0, z1, z1, =_out_ag(zero)),U21_GGA(z0, z1, =_out_ag(z1)) -> U22_GGA(z0, z1, z1, =_out_ag(zero)))


----------------------------------------

(131)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U23_GGA(N, M, isLess_out_gg) -> U24_GGA(N, isMinus_in_gga(zero1, M))
   U25_GGA(N, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))
   U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_out_ag(U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M))
   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U22_GGA(y0, y1, pred(x0), =_out_ag(zero)) -> U23_GGA(y0, y1, isLess_out_gg)
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   U21_GGA(z0, z1, =_out_ag(z1)) -> U22_GGA(z0, z1, z1, =_out_ag(zero))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U45_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(132) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U22_GGA(y0, y1, pred(x0), =_out_ag(zero)) -> U23_GGA(y0, y1, isLess_out_gg) we obtained the following new rules [LPAR04]:

   (U22_GGA(z0, pred(x2), pred(x2), =_out_ag(zero)) -> U23_GGA(z0, pred(x2), isLess_out_gg),U22_GGA(z0, pred(x2), pred(x2), =_out_ag(zero)) -> U23_GGA(z0, pred(x2), isLess_out_gg))


----------------------------------------

(133)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U23_GGA(N, M, isLess_out_gg) -> U24_GGA(N, isMinus_in_gga(zero1, M))
   U25_GGA(N, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))
   U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_out_ag(U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M))
   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   U21_GGA(z0, z1, =_out_ag(z1)) -> U22_GGA(z0, z1, z1, =_out_ag(zero))
   U22_GGA(z0, pred(x2), pred(x2), =_out_ag(zero)) -> U23_GGA(z0, pred(x2), isLess_out_gg)

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U45_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(134) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U23_GGA(N, M, isLess_out_gg) -> U24_GGA(N, isMinus_in_gga(zero1, M)) at position [1] we obtained the following new rules [LPAR04]:

   (U23_GGA(y0, zero, isLess_out_gg) -> U24_GGA(y0, isMinus_out_gga(zero1)),U23_GGA(y0, zero, isLess_out_gg) -> U24_GGA(y0, isMinus_out_gga(zero1)))


----------------------------------------

(135)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U25_GGA(N, =_out_ag(M1)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))
   U24_GGA(N, isMinus_out_gga(U)) -> U25_GGA(N, =_out_ag(U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M))
   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   U21_GGA(z0, z1, =_out_ag(z1)) -> U22_GGA(z0, z1, z1, =_out_ag(zero))
   U22_GGA(z0, pred(x2), pred(x2), =_out_ag(zero)) -> U23_GGA(z0, pred(x2), isLess_out_gg)
   U23_GGA(y0, zero, isLess_out_gg) -> U24_GGA(y0, isMinus_out_gga(zero1))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U45_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(136) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 6 less nodes.
----------------------------------------

(137)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U45_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(138) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U45_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)

Used ordering: Polynomial interpretation [POLO]:

   POL(=_out_ag(x_1)) = 2
   POL(MULT_IN_GGA(x_1, x_2)) = 2 + x_1
   POL(U31_GGA(x_1, x_2)) = x_1 + 2*x_2
   POL(U32_GGA(x_1, x_2, x_3)) = x_1 + x_3
   POL(U40_gga(x_1)) = x_1
   POL(U41_gga(x_1)) = x_1
   POL(U42_gga(x_1)) = x_1
   POL(U43_gga(x_1)) = x_1
   POL(U44_gga(x_1)) = x_1
   POL(U45_gga(x_1)) = 2*x_1
   POL(isMinus_in_gga(x_1, x_2)) = x_2
   POL(isMinus_out_gga(x_1)) = 1
   POL(pred(x_1)) = 2*x_1
   POL(succ(x_1)) = x_1
   POL(zero) = 1


----------------------------------------

(139)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(140) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U43_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(succ(Z)))
   U41_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(succ(Z))

Used ordering: Polynomial interpretation [POLO]:

   POL(=_out_ag(x_1)) = 2 + x_1
   POL(MULT_IN_GGA(x_1, x_2)) = 2*x_1
   POL(U31_GGA(x_1, x_2)) = 2*x_1 + 2*x_2
   POL(U32_GGA(x_1, x_2, x_3)) = 2*x_1
   POL(U40_gga(x_1)) = x_1
   POL(U41_gga(x_1)) = 2 + x_1
   POL(U42_gga(x_1)) = 2*x_1
   POL(U43_gga(x_1)) = 2 + x_1
   POL(U44_gga(x_1)) = x_1
   POL(U45_gga(x_1)) = 2 + 2*x_1
   POL(isMinus_in_gga(x_1, x_2)) = 2*x_2
   POL(isMinus_out_gga(x_1)) = 0
   POL(pred(x_1)) = 1 + 2*x_1
   POL(succ(x_1)) = 2*x_1
   POL(zero) = 0


----------------------------------------

(141)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(142) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U42_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(Z)

Used ordering: Polynomial interpretation [POLO]:

   POL(=_out_ag(x_1)) = x_1
   POL(MULT_IN_GGA(x_1, x_2)) = x_1 + 2*x_2
   POL(U31_GGA(x_1, x_2)) = x_1 + 2*x_2
   POL(U32_GGA(x_1, x_2, x_3)) = x_1 + x_2 + x_3
   POL(U40_gga(x_1)) = x_1
   POL(U41_gga(x_1)) = x_1
   POL(U42_gga(x_1)) = 1 + x_1
   POL(U43_gga(x_1)) = 1 + x_1
   POL(U44_gga(x_1)) = x_1
   POL(U45_gga(x_1)) = x_1
   POL(isMinus_in_gga(x_1, x_2)) = x_1
   POL(isMinus_out_gga(x_1)) = x_1
   POL(pred(x_1)) = x_1
   POL(succ(x_1)) = 1 + 2*x_1
   POL(zero) = 0


----------------------------------------

(143)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(144) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(isMinus_in_gga(X, Y))

Used ordering: Polynomial interpretation [POLO]:

   POL(=_out_ag(x_1)) = 2 + x_1
   POL(MULT_IN_GGA(x_1, x_2)) = x_1 + x_2
   POL(U31_GGA(x_1, x_2)) = x_1 + x_2
   POL(U32_GGA(x_1, x_2, x_3)) = x_1 + x_2
   POL(U40_gga(x_1)) = 2*x_1
   POL(U41_gga(x_1)) = 2*x_1
   POL(U42_gga(x_1)) = x_1
   POL(U43_gga(x_1)) = x_1
   POL(U44_gga(x_1)) = x_1
   POL(U45_gga(x_1)) = x_1
   POL(isMinus_in_gga(x_1, x_2)) = x_1
   POL(isMinus_out_gga(x_1)) = x_1
   POL(pred(x_1)) = x_1
   POL(succ(x_1)) = 1 + x_1
   POL(zero) = 0


----------------------------------------

(145)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U42_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U43_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(146) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U42_gga(x0)
   U43_gga(x0)


----------------------------------------

(147)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(148) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   isMinus_in_gga(zero, pred(Y)) -> U41_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(isMinus_in_gga(X, Y))

Used ordering: Polynomial interpretation [POLO]:

   POL(=_out_ag(x_1)) = 2 + 2*x_1
   POL(MULT_IN_GGA(x_1, x_2)) = x_1
   POL(U31_GGA(x_1, x_2)) = x_1 + 2*x_2
   POL(U32_GGA(x_1, x_2, x_3)) = x_1
   POL(U40_gga(x_1)) = 2*x_1
   POL(U41_gga(x_1)) = 2*x_1
   POL(U44_gga(x_1)) = 2*x_1
   POL(U45_gga(x_1)) = 2*x_1
   POL(isMinus_in_gga(x_1, x_2)) = 2*x_2
   POL(isMinus_out_gga(x_1)) = 0
   POL(pred(x_1)) = 2 + 2*x_1
   POL(succ(x_1)) = 2*x_1
   POL(zero) = 0


----------------------------------------

(149)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U44_gga(x0)
   U41_gga(x0)
   U45_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(150) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U41_gga(x0)
   U45_gga(x0)


----------------------------------------

(151)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U44_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(152) TransformationProof (SOUND)
By narrowing [LPAR04] the rule MULT_IN_GGA(N, M) -> U31_GGA(N, isMinus_in_gga(M, succ(zero))) at position [1] we obtained the following new rules [LPAR04]:

   (MULT_IN_GGA(y0, zero) -> U31_GGA(y0, U40_gga(isMinus_in_gga(zero, zero))),MULT_IN_GGA(y0, zero) -> U31_GGA(y0, U40_gga(isMinus_in_gga(zero, zero))))
   (MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, U44_gga(isMinus_in_gga(x0, zero))),MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, U44_gga(isMinus_in_gga(x0, zero))))


----------------------------------------

(153)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, U40_gga(isMinus_in_gga(zero, zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, U44_gga(isMinus_in_gga(x0, zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(isMinus_in_gga(zero, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U44_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(154) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(155)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, U40_gga(isMinus_in_gga(zero, zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, U44_gga(isMinus_in_gga(x0, zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U44_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(156) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MULT_IN_GGA(y0, zero) -> U31_GGA(y0, U40_gga(isMinus_in_gga(zero, zero))) at position [1,0] we obtained the following new rules [LPAR04]:

   (MULT_IN_GGA(y0, zero) -> U31_GGA(y0, U40_gga(isMinus_out_gga(zero))),MULT_IN_GGA(y0, zero) -> U31_GGA(y0, U40_gga(isMinus_out_gga(zero))))


----------------------------------------

(157)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, U44_gga(isMinus_in_gga(x0, zero)))
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, U40_gga(isMinus_out_gga(zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U44_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(158) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, U44_gga(isMinus_in_gga(x0, zero))) at position [1,0] we obtained the following new rules [LPAR04]:

   (MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, U44_gga(isMinus_out_gga(x0))),MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, U44_gga(isMinus_out_gga(x0))))


----------------------------------------

(159)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, U40_gga(isMinus_out_gga(zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, U44_gga(isMinus_out_gga(x0)))

The TRS R consists of the following rules:

   isMinus_in_gga(X, zero) -> isMinus_out_gga(X)
   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U44_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(160) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(161)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, U40_gga(isMinus_out_gga(zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, U44_gga(isMinus_out_gga(x0)))

The TRS R consists of the following rules:

   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0)
   U44_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(162) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   isMinus_in_gga(x0, x1)


----------------------------------------

(163)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, U40_gga(isMinus_out_gga(zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, U44_gga(isMinus_out_gga(x0)))

The TRS R consists of the following rules:

   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   U40_gga(x0)
   U44_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(164) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MULT_IN_GGA(y0, zero) -> U31_GGA(y0, U40_gga(isMinus_out_gga(zero))) at position [1] we obtained the following new rules [LPAR04]:

   (MULT_IN_GGA(y0, zero) -> U31_GGA(y0, isMinus_out_gga(pred(zero))),MULT_IN_GGA(y0, zero) -> U31_GGA(y0, isMinus_out_gga(pred(zero))))


----------------------------------------

(165)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, U44_gga(isMinus_out_gga(x0)))
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, isMinus_out_gga(pred(zero)))

The TRS R consists of the following rules:

   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))
   U40_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(Z))

The set Q consists of the following terms:

   U40_gga(x0)
   U44_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(166) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(167)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, U44_gga(isMinus_out_gga(x0)))
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, isMinus_out_gga(pred(zero)))

The TRS R consists of the following rules:

   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))

The set Q consists of the following terms:

   U40_gga(x0)
   U44_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(168) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U40_gga(x0)


----------------------------------------

(169)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, U44_gga(isMinus_out_gga(x0)))
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, isMinus_out_gga(pred(zero)))

The TRS R consists of the following rules:

   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))

The set Q consists of the following terms:

   U44_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(170) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, U44_gga(isMinus_out_gga(x0))) at position [1] we obtained the following new rules [LPAR04]:

   (MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, isMinus_out_gga(pred(pred(x0)))),MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, isMinus_out_gga(pred(pred(x0)))))


----------------------------------------

(171)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, isMinus_out_gga(pred(zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, isMinus_out_gga(pred(pred(x0))))

The TRS R consists of the following rules:

   U44_gga(isMinus_out_gga(Z)) -> isMinus_out_gga(pred(pred(Z)))

The set Q consists of the following terms:

   U44_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(172) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(173)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, isMinus_out_gga(pred(zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, isMinus_out_gga(pred(pred(x0))))

R is empty.
The set Q consists of the following terms:

   U44_gga(x0)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(174) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U44_gga(x0)


----------------------------------------

(175)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U))
   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, isMinus_out_gga(pred(zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, isMinus_out_gga(pred(pred(x0))))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(176) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U31_GGA(N, isMinus_out_gga(U)) -> U32_GGA(N, U, =_out_ag(U)) we obtained the following new rules [LPAR04]:

   (U31_GGA(z0, isMinus_out_gga(pred(zero))) -> U32_GGA(z0, pred(zero), =_out_ag(pred(zero))),U31_GGA(z0, isMinus_out_gga(pred(zero))) -> U32_GGA(z0, pred(zero), =_out_ag(pred(zero))))
   (U31_GGA(z0, isMinus_out_gga(pred(pred(z1)))) -> U32_GGA(z0, pred(pred(z1)), =_out_ag(pred(pred(z1)))),U31_GGA(z0, isMinus_out_gga(pred(pred(z1)))) -> U32_GGA(z0, pred(pred(z1)), =_out_ag(pred(pred(z1)))))


----------------------------------------

(177)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1)
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, isMinus_out_gga(pred(zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, isMinus_out_gga(pred(pred(x0))))
   U31_GGA(z0, isMinus_out_gga(pred(zero))) -> U32_GGA(z0, pred(zero), =_out_ag(pred(zero)))
   U31_GGA(z0, isMinus_out_gga(pred(pred(z1)))) -> U32_GGA(z0, pred(pred(z1)), =_out_ag(pred(pred(z1))))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(178) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U32_GGA(z0, z1, =_out_ag(z1)) -> MULT_IN_GGA(z0, z1) we obtained the following new rules [LPAR04]:

   (U32_GGA(z0, pred(zero), =_out_ag(pred(zero))) -> MULT_IN_GGA(z0, pred(zero)),U32_GGA(z0, pred(zero), =_out_ag(pred(zero))) -> MULT_IN_GGA(z0, pred(zero)))
   (U32_GGA(z0, pred(pred(z1)), =_out_ag(pred(pred(z1)))) -> MULT_IN_GGA(z0, pred(pred(z1))),U32_GGA(z0, pred(pred(z1)), =_out_ag(pred(pred(z1)))) -> MULT_IN_GGA(z0, pred(pred(z1))))


----------------------------------------

(179)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, isMinus_out_gga(pred(zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, isMinus_out_gga(pred(pred(x0))))
   U31_GGA(z0, isMinus_out_gga(pred(zero))) -> U32_GGA(z0, pred(zero), =_out_ag(pred(zero)))
   U31_GGA(z0, isMinus_out_gga(pred(pred(z1)))) -> U32_GGA(z0, pred(pred(z1)), =_out_ag(pred(pred(z1))))
   U32_GGA(z0, pred(zero), =_out_ag(pred(zero))) -> MULT_IN_GGA(z0, pred(zero))
   U32_GGA(z0, pred(pred(z1)), =_out_ag(pred(pred(z1)))) -> MULT_IN_GGA(z0, pred(pred(z1)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(180) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 3 less nodes.
----------------------------------------

(181)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(z0, isMinus_out_gga(pred(pred(z1)))) -> U32_GGA(z0, pred(pred(z1)), =_out_ag(pred(pred(z1))))
   U32_GGA(z0, pred(pred(z1)), =_out_ag(pred(pred(z1)))) -> MULT_IN_GGA(z0, pred(pred(z1)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, isMinus_out_gga(pred(pred(x0))))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(182) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, isMinus_out_gga(pred(pred(x0)))) we obtained the following new rules [LPAR04]:

   (MULT_IN_GGA(z0, pred(pred(z1))) -> U31_GGA(z0, isMinus_out_gga(pred(pred(pred(z1))))),MULT_IN_GGA(z0, pred(pred(z1))) -> U31_GGA(z0, isMinus_out_gga(pred(pred(pred(z1))))))


----------------------------------------

(183)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(z0, isMinus_out_gga(pred(pred(z1)))) -> U32_GGA(z0, pred(pred(z1)), =_out_ag(pred(pred(z1))))
   U32_GGA(z0, pred(pred(z1)), =_out_ag(pred(pred(z1)))) -> MULT_IN_GGA(z0, pred(pred(z1)))
   MULT_IN_GGA(z0, pred(pred(z1))) -> U31_GGA(z0, isMinus_out_gga(pred(pred(pred(z1)))))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(184) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U31_GGA(z0, isMinus_out_gga(pred(pred(z1)))) -> U32_GGA(z0, pred(pred(z1)), =_out_ag(pred(pred(z1)))) we obtained the following new rules [LPAR04]:

   (U31_GGA(z0, isMinus_out_gga(pred(pred(pred(z1))))) -> U32_GGA(z0, pred(pred(pred(z1))), =_out_ag(pred(pred(pred(z1))))),U31_GGA(z0, isMinus_out_gga(pred(pred(pred(z1))))) -> U32_GGA(z0, pred(pred(pred(z1))), =_out_ag(pred(pred(pred(z1))))))


----------------------------------------

(185)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U32_GGA(z0, pred(pred(z1)), =_out_ag(pred(pred(z1)))) -> MULT_IN_GGA(z0, pred(pred(z1)))
   MULT_IN_GGA(z0, pred(pred(z1))) -> U31_GGA(z0, isMinus_out_gga(pred(pred(pred(z1)))))
   U31_GGA(z0, isMinus_out_gga(pred(pred(pred(z1))))) -> U32_GGA(z0, pred(pred(pred(z1))), =_out_ag(pred(pred(pred(z1)))))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(186) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = MULT_IN_GGA(z0, pred(pred(z1))) evaluates to  t =MULT_IN_GGA(z0, pred(pred(pred(z1))))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [z1 / pred(z1)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

MULT_IN_GGA(z0, pred(pred(z1))) -> U31_GGA(z0, isMinus_out_gga(pred(pred(pred(z1)))))
with rule MULT_IN_GGA(z0', pred(pred(z1'))) -> U31_GGA(z0', isMinus_out_gga(pred(pred(pred(z1'))))) at position [] and matcher [z0' / z0, z1' / z1]

U31_GGA(z0, isMinus_out_gga(pred(pred(pred(z1))))) -> U32_GGA(z0, pred(pred(pred(z1))), =_out_ag(pred(pred(pred(z1)))))
with rule U31_GGA(z0', isMinus_out_gga(pred(pred(pred(z1'))))) -> U32_GGA(z0', pred(pred(pred(z1'))), =_out_ag(pred(pred(pred(z1'))))) at position [] and matcher [z0' / z0, z1' / z1]

U32_GGA(z0, pred(pred(pred(z1))), =_out_ag(pred(pred(pred(z1))))) -> MULT_IN_GGA(z0, pred(pred(pred(z1))))
with rule U32_GGA(z0, pred(pred(z1)), =_out_ag(pred(pred(z1)))) -> MULT_IN_GGA(z0, pred(pred(z1)))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(187)
NO

----------------------------------------

(188)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x3)

U70_gg(x1, x2, x3)  =  U70_gg(x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg

U71_gg(x1, x2, x3)  =  U71_gg(x3)

U72_gg(x1, x2, x3)  =  U72_gg(x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x3)

U40_gga(x1, x2, x3)  =  U40_gga(x3)

U41_gga(x1, x2, x3)  =  U41_gga(x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg

U30_gga(x1, x2, x3, x4)  =  U30_gga(x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x4)

U8_gg(x1, x2, x3)  =  U8_gg(x3)

main_out_gg(x1, x2)  =  main_out_gg

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x3)

ISGREATER_IN_GG(x1, x2)  =  ISGREATER_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(189) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(190)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(191) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(192)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(193) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(194)
YES

----------------------------------------

(195) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

main_in_2: (b,b)

isGreater_in_2: (b,b)

mult_in_3: (b,b,f)

isLess_in_2: (b,b)

isMinus_in_3: (b,b,f)

isPlus_in_3: (b,b,b)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3)  =  U72_gg(x1, x2, x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U40_gga(x1, x2, x3)  =  U40_gga(x1, x3)

U41_gga(x1, x2, x3)  =  U41_gga(x1, x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x1, x2, x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x1, x2, x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x1, x2, x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x1, x2, x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x2, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x1, x2, x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x2, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x2, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x1, x2, x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x1, x2, x3, x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x1, x2, x3, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

U8_gg(x1, x2, x3)  =  U8_gg(x1, x2, x3)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x1, x2, x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(196)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3)  =  U72_gg(x1, x2, x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U40_gga(x1, x2, x3)  =  U40_gga(x1, x3)

U41_gga(x1, x2, x3)  =  U41_gga(x1, x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x1, x2, x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x1, x2, x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x1, x2, x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x1, x2, x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x2, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x1, x2, x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x2, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x2, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x1, x2, x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x1, x2, x3, x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x1, x2, x3, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

U8_gg(x1, x2, x3)  =  U8_gg(x1, x2, x3)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x1, x2, x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)



----------------------------------------

(197) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GG(M, N) -> U1_GG(M, N, =_in_ag(X, M))
   MAIN_IN_GG(M, N) -> =_IN_AG(X, M)
   U1_GG(M, N, =_out_ag(X, M)) -> U2_GG(M, N, X, =_in_ag(X1, zero))
   U1_GG(M, N, =_out_ag(X, M)) -> =_IN_AG(X1, zero)
   U2_GG(M, N, X, =_out_ag(X1, zero)) -> U3_GG(M, N, isGreater_in_gg(X, X1))
   U2_GG(M, N, X, =_out_ag(X1, zero)) -> ISGREATER_IN_GG(X, X1)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> U69_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(pred(X), pred(Y)) -> U70_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   U3_GG(M, N, isGreater_out_gg(X, X1)) -> U4_GG(M, N, =_in_ag(X2, N))
   U3_GG(M, N, isGreater_out_gg(X, X1)) -> =_IN_AG(X2, N)
   U4_GG(M, N, =_out_ag(X2, N)) -> U5_GG(M, N, X2, =_in_ag(X3, zero))
   U4_GG(M, N, =_out_ag(X2, N)) -> =_IN_AG(X3, zero)
   U5_GG(M, N, X2, =_out_ag(X3, zero)) -> U6_GG(M, N, isGreater_in_gg(X2, X3))
   U5_GG(M, N, X2, =_out_ag(X3, zero)) -> ISGREATER_IN_GG(X2, X3)
   U6_GG(M, N, isGreater_out_gg(X2, X3)) -> U7_GG(M, N, mult_in_gga(M, N, Ret1))
   U6_GG(M, N, isGreater_out_gg(X2, X3)) -> MULT_IN_GGA(M, N, Ret1)
   MULT_IN_GGA(N, M, Ret) -> U21_GGA(N, M, Ret, =_in_ag(X, M))
   MULT_IN_GGA(N, M, Ret) -> =_IN_AG(X, M)
   U21_GGA(N, M, Ret, =_out_ag(X, M)) -> U22_GGA(N, M, Ret, X, =_in_ag(X1, zero))
   U21_GGA(N, M, Ret, =_out_ag(X, M)) -> =_IN_AG(X1, zero)
   U22_GGA(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_GGA(N, M, Ret, isLess_in_gg(X, X1))
   U22_GGA(N, M, Ret, X, =_out_ag(X1, zero)) -> ISLESS_IN_GG(X, X1)
   ISLESS_IN_GG(pred(X), pred(Y)) -> U71_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(succ(X), succ(Y)) -> U72_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   U23_GGA(N, M, Ret, isLess_out_gg(X, X1)) -> U24_GGA(N, M, Ret, isMinus_in_gga(zero1, M, U))
   U23_GGA(N, M, Ret, isLess_out_gg(X, X1)) -> ISMINUS_IN_GGA(zero1, M, U)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> U40_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> U41_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> U42_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> U43_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> U44_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> U45_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   U24_GGA(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, Ret, =_in_ag(M1, U))
   U24_GGA(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> =_IN_AG(M1, U)
   U25_GGA(N, M, Ret, =_out_ag(M1, U)) -> U26_GGA(N, M, Ret, mult_in_gga(N, M1, Ret))
   U25_GGA(N, M, Ret, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1, Ret)
   MULT_IN_GGA(X1, M, Ret) -> U27_GGA(X1, M, Ret, =_in_ag(X, M))
   U27_GGA(X1, M, Ret, =_out_ag(X, M)) -> U28_GGA(X1, M, Ret, X, =_in_ag(X2, zero))
   U27_GGA(X1, M, Ret, =_out_ag(X, M)) -> =_IN_AG(X2, zero)
   U28_GGA(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_GGA(X1, M, Ret, =_in_gg(X, X2))
   U28_GGA(X1, M, Ret, X, =_out_ag(X2, zero)) -> =_IN_GG(X, X2)
   U29_GGA(X1, M, Ret, =_out_gg(X, X2)) -> U30_GGA(X1, M, Ret, =_in_ag(Ret, zero))
   U29_GGA(X1, M, Ret, =_out_gg(X, X2)) -> =_IN_AG(Ret, zero)
   MULT_IN_GGA(N, M, Ret) -> U31_GGA(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   MULT_IN_GGA(N, M, Ret) -> ISMINUS_IN_GGA(M, succ(zero), U)
   U31_GGA(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, Ret, U, =_in_ag(M1, U))
   U31_GGA(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> =_IN_AG(M1, U)
   U32_GGA(N, M, Ret, U, =_out_ag(M1, U)) -> U33_GGA(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U32_GGA(N, M, Ret, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1, Ret1)
   U33_GGA(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_GGA(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   U33_GGA(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> ISPLUS_IN_GGG(N, Ret1, U)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> U36_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> U37_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> U38_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> U39_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   U34_GGA(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_GGA(N, M, Ret, =_in_ag(Ret, U))
   U34_GGA(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> =_IN_AG(Ret, U)
   U7_GG(M, N, mult_out_gga(M, N, Ret1)) -> U8_GG(M, N, mult_in_gga(N, M, Ret2))
   U7_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)
   U5_GG(M, N, X2, =_out_ag(X3, zero)) -> U9_GG(M, N, =_in_gg(X2, X3))
   U5_GG(M, N, X2, =_out_ag(X3, zero)) -> =_IN_GG(X2, X3)
   U9_GG(M, N, =_out_gg(X2, X3)) -> U10_GG(M, N, mult_in_gga(M, N, Ret1))
   U9_GG(M, N, =_out_gg(X2, X3)) -> MULT_IN_GGA(M, N, Ret1)
   U10_GG(M, N, mult_out_gga(M, N, Ret1)) -> U11_GG(M, N, mult_in_gga(N, M, Ret2))
   U10_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)
   U2_GG(M, N, X, =_out_ag(X1, zero)) -> U12_GG(M, N, =_in_gg(X, X1))
   U2_GG(M, N, X, =_out_ag(X1, zero)) -> =_IN_GG(X, X1)
   U12_GG(M, N, =_out_gg(X, X1)) -> U13_GG(M, N, =_in_ag(X2, N))
   U12_GG(M, N, =_out_gg(X, X1)) -> =_IN_AG(X2, N)
   U13_GG(M, N, =_out_ag(X2, N)) -> U14_GG(M, N, X2, =_in_ag(X3, zero))
   U13_GG(M, N, =_out_ag(X2, N)) -> =_IN_AG(X3, zero)
   U14_GG(M, N, X2, =_out_ag(X3, zero)) -> U15_GG(M, N, isGreater_in_gg(X2, X3))
   U14_GG(M, N, X2, =_out_ag(X3, zero)) -> ISGREATER_IN_GG(X2, X3)
   U15_GG(M, N, isGreater_out_gg(X2, X3)) -> U16_GG(M, N, mult_in_gga(M, N, Ret1))
   U15_GG(M, N, isGreater_out_gg(X2, X3)) -> MULT_IN_GGA(M, N, Ret1)
   U16_GG(M, N, mult_out_gga(M, N, Ret1)) -> U17_GG(M, N, mult_in_gga(N, M, Ret2))
   U16_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)
   U14_GG(M, N, X2, =_out_ag(X3, zero)) -> U18_GG(M, N, =_in_gg(X2, X3))
   U14_GG(M, N, X2, =_out_ag(X3, zero)) -> =_IN_GG(X2, X3)
   U18_GG(M, N, =_out_gg(X2, X3)) -> U19_GG(M, N, mult_in_gga(M, N, Ret1))
   U18_GG(M, N, =_out_gg(X2, X3)) -> MULT_IN_GGA(M, N, Ret1)
   U19_GG(M, N, mult_out_gga(M, N, Ret1)) -> U20_GG(M, N, mult_in_gga(N, M, Ret2))
   U19_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3)  =  U72_gg(x1, x2, x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U40_gga(x1, x2, x3)  =  U40_gga(x1, x3)

U41_gga(x1, x2, x3)  =  U41_gga(x1, x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x1, x2, x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x1, x2, x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x1, x2, x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x1, x2, x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x2, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x1, x2, x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x2, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x2, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x1, x2, x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x1, x2, x3, x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x1, x2, x3, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

U8_gg(x1, x2, x3)  =  U8_gg(x1, x2, x3)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x1, x2, x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

MAIN_IN_GG(x1, x2)  =  MAIN_IN_GG(x1, x2)

U1_GG(x1, x2, x3)  =  U1_GG(x1, x2, x3)

=_IN_AG(x1, x2)  =  =_IN_AG(x2)

U2_GG(x1, x2, x3, x4)  =  U2_GG(x1, x2, x3, x4)

U3_GG(x1, x2, x3)  =  U3_GG(x1, x2, x3)

ISGREATER_IN_GG(x1, x2)  =  ISGREATER_IN_GG(x1, x2)

U69_GG(x1, x2, x3)  =  U69_GG(x1, x2, x3)

U70_GG(x1, x2, x3)  =  U70_GG(x1, x2, x3)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)

U5_GG(x1, x2, x3, x4)  =  U5_GG(x1, x2, x3, x4)

U6_GG(x1, x2, x3)  =  U6_GG(x1, x2, x3)

U7_GG(x1, x2, x3)  =  U7_GG(x1, x2, x3)

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)

U21_GGA(x1, x2, x3, x4)  =  U21_GGA(x1, x2, x4)

U22_GGA(x1, x2, x3, x4, x5)  =  U22_GGA(x1, x2, x4, x5)

U23_GGA(x1, x2, x3, x4)  =  U23_GGA(x1, x2, x4)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)

U71_GG(x1, x2, x3)  =  U71_GG(x1, x2, x3)

U72_GG(x1, x2, x3)  =  U72_GG(x1, x2, x3)

U24_GGA(x1, x2, x3, x4)  =  U24_GGA(x1, x2, x4)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)

U40_GGA(x1, x2, x3)  =  U40_GGA(x1, x3)

U41_GGA(x1, x2, x3)  =  U41_GGA(x1, x3)

U42_GGA(x1, x2, x3, x4)  =  U42_GGA(x1, x2, x4)

U43_GGA(x1, x2, x3, x4)  =  U43_GGA(x1, x2, x4)

U44_GGA(x1, x2, x3, x4)  =  U44_GGA(x1, x2, x4)

U45_GGA(x1, x2, x3, x4)  =  U45_GGA(x1, x2, x4)

U25_GGA(x1, x2, x3, x4)  =  U25_GGA(x1, x2, x4)

U26_GGA(x1, x2, x3, x4)  =  U26_GGA(x1, x2, x4)

U27_GGA(x1, x2, x3, x4)  =  U27_GGA(x1, x2, x4)

U28_GGA(x1, x2, x3, x4, x5)  =  U28_GGA(x1, x2, x4, x5)

U29_GGA(x1, x2, x3, x4)  =  U29_GGA(x1, x2, x4)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U30_GGA(x1, x2, x3, x4)  =  U30_GGA(x1, x2, x4)

U31_GGA(x1, x2, x3, x4)  =  U31_GGA(x1, x2, x4)

U32_GGA(x1, x2, x3, x4, x5)  =  U32_GGA(x1, x2, x4, x5)

U33_GGA(x1, x2, x3, x4, x5)  =  U33_GGA(x1, x2, x4, x5)

U34_GGA(x1, x2, x3, x4, x5)  =  U34_GGA(x1, x2, x4, x5)

ISPLUS_IN_GGG(x1, x2, x3)  =  ISPLUS_IN_GGG(x1, x2, x3)

U36_GGG(x1, x2, x3, x4)  =  U36_GGG(x1, x2, x3, x4)

U37_GGG(x1, x2, x3, x4)  =  U37_GGG(x1, x2, x3, x4)

U38_GGG(x1, x2, x3, x4)  =  U38_GGG(x1, x2, x3, x4)

U39_GGG(x1, x2, x3, x4)  =  U39_GGG(x1, x2, x3, x4)

U35_GGA(x1, x2, x3, x4)  =  U35_GGA(x1, x2, x4)

U8_GG(x1, x2, x3)  =  U8_GG(x1, x2, x3)

U9_GG(x1, x2, x3)  =  U9_GG(x1, x2, x3)

U10_GG(x1, x2, x3)  =  U10_GG(x1, x2, x3)

U11_GG(x1, x2, x3)  =  U11_GG(x1, x2, x3)

U12_GG(x1, x2, x3)  =  U12_GG(x1, x2, x3)

U13_GG(x1, x2, x3)  =  U13_GG(x1, x2, x3)

U14_GG(x1, x2, x3, x4)  =  U14_GG(x1, x2, x3, x4)

U15_GG(x1, x2, x3)  =  U15_GG(x1, x2, x3)

U16_GG(x1, x2, x3)  =  U16_GG(x1, x2, x3)

U17_GG(x1, x2, x3)  =  U17_GG(x1, x2, x3)

U18_GG(x1, x2, x3)  =  U18_GG(x1, x2, x3)

U19_GG(x1, x2, x3)  =  U19_GG(x1, x2, x3)

U20_GG(x1, x2, x3)  =  U20_GG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(198)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   MAIN_IN_GG(M, N) -> U1_GG(M, N, =_in_ag(X, M))
   MAIN_IN_GG(M, N) -> =_IN_AG(X, M)
   U1_GG(M, N, =_out_ag(X, M)) -> U2_GG(M, N, X, =_in_ag(X1, zero))
   U1_GG(M, N, =_out_ag(X, M)) -> =_IN_AG(X1, zero)
   U2_GG(M, N, X, =_out_ag(X1, zero)) -> U3_GG(M, N, isGreater_in_gg(X, X1))
   U2_GG(M, N, X, =_out_ag(X1, zero)) -> ISGREATER_IN_GG(X, X1)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> U69_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(pred(X), pred(Y)) -> U70_GG(X, Y, isGreater_in_gg(X, Y))
   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   U3_GG(M, N, isGreater_out_gg(X, X1)) -> U4_GG(M, N, =_in_ag(X2, N))
   U3_GG(M, N, isGreater_out_gg(X, X1)) -> =_IN_AG(X2, N)
   U4_GG(M, N, =_out_ag(X2, N)) -> U5_GG(M, N, X2, =_in_ag(X3, zero))
   U4_GG(M, N, =_out_ag(X2, N)) -> =_IN_AG(X3, zero)
   U5_GG(M, N, X2, =_out_ag(X3, zero)) -> U6_GG(M, N, isGreater_in_gg(X2, X3))
   U5_GG(M, N, X2, =_out_ag(X3, zero)) -> ISGREATER_IN_GG(X2, X3)
   U6_GG(M, N, isGreater_out_gg(X2, X3)) -> U7_GG(M, N, mult_in_gga(M, N, Ret1))
   U6_GG(M, N, isGreater_out_gg(X2, X3)) -> MULT_IN_GGA(M, N, Ret1)
   MULT_IN_GGA(N, M, Ret) -> U21_GGA(N, M, Ret, =_in_ag(X, M))
   MULT_IN_GGA(N, M, Ret) -> =_IN_AG(X, M)
   U21_GGA(N, M, Ret, =_out_ag(X, M)) -> U22_GGA(N, M, Ret, X, =_in_ag(X1, zero))
   U21_GGA(N, M, Ret, =_out_ag(X, M)) -> =_IN_AG(X1, zero)
   U22_GGA(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_GGA(N, M, Ret, isLess_in_gg(X, X1))
   U22_GGA(N, M, Ret, X, =_out_ag(X1, zero)) -> ISLESS_IN_GG(X, X1)
   ISLESS_IN_GG(pred(X), pred(Y)) -> U71_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(succ(X), succ(Y)) -> U72_GG(X, Y, isLess_in_gg(X, Y))
   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   U23_GGA(N, M, Ret, isLess_out_gg(X, X1)) -> U24_GGA(N, M, Ret, isMinus_in_gga(zero1, M, U))
   U23_GGA(N, M, Ret, isLess_out_gg(X, X1)) -> ISMINUS_IN_GGA(zero1, M, U)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> U40_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> U41_GGA(Y, Z, isMinus_in_gga(zero, Y, Z))
   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> U42_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> U43_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> U44_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> U45_GGA(X, Y, Z, isMinus_in_gga(X, Y, Z))
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   U24_GGA(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, Ret, =_in_ag(M1, U))
   U24_GGA(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> =_IN_AG(M1, U)
   U25_GGA(N, M, Ret, =_out_ag(M1, U)) -> U26_GGA(N, M, Ret, mult_in_gga(N, M1, Ret))
   U25_GGA(N, M, Ret, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1, Ret)
   MULT_IN_GGA(X1, M, Ret) -> U27_GGA(X1, M, Ret, =_in_ag(X, M))
   U27_GGA(X1, M, Ret, =_out_ag(X, M)) -> U28_GGA(X1, M, Ret, X, =_in_ag(X2, zero))
   U27_GGA(X1, M, Ret, =_out_ag(X, M)) -> =_IN_AG(X2, zero)
   U28_GGA(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_GGA(X1, M, Ret, =_in_gg(X, X2))
   U28_GGA(X1, M, Ret, X, =_out_ag(X2, zero)) -> =_IN_GG(X, X2)
   U29_GGA(X1, M, Ret, =_out_gg(X, X2)) -> U30_GGA(X1, M, Ret, =_in_ag(Ret, zero))
   U29_GGA(X1, M, Ret, =_out_gg(X, X2)) -> =_IN_AG(Ret, zero)
   MULT_IN_GGA(N, M, Ret) -> U31_GGA(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   MULT_IN_GGA(N, M, Ret) -> ISMINUS_IN_GGA(M, succ(zero), U)
   U31_GGA(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, Ret, U, =_in_ag(M1, U))
   U31_GGA(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> =_IN_AG(M1, U)
   U32_GGA(N, M, Ret, U, =_out_ag(M1, U)) -> U33_GGA(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U32_GGA(N, M, Ret, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1, Ret1)
   U33_GGA(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_GGA(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   U33_GGA(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> ISPLUS_IN_GGG(N, Ret1, U)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> U36_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> U37_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> U38_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> U39_GGG(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   U34_GGA(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_GGA(N, M, Ret, =_in_ag(Ret, U))
   U34_GGA(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> =_IN_AG(Ret, U)
   U7_GG(M, N, mult_out_gga(M, N, Ret1)) -> U8_GG(M, N, mult_in_gga(N, M, Ret2))
   U7_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)
   U5_GG(M, N, X2, =_out_ag(X3, zero)) -> U9_GG(M, N, =_in_gg(X2, X3))
   U5_GG(M, N, X2, =_out_ag(X3, zero)) -> =_IN_GG(X2, X3)
   U9_GG(M, N, =_out_gg(X2, X3)) -> U10_GG(M, N, mult_in_gga(M, N, Ret1))
   U9_GG(M, N, =_out_gg(X2, X3)) -> MULT_IN_GGA(M, N, Ret1)
   U10_GG(M, N, mult_out_gga(M, N, Ret1)) -> U11_GG(M, N, mult_in_gga(N, M, Ret2))
   U10_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)
   U2_GG(M, N, X, =_out_ag(X1, zero)) -> U12_GG(M, N, =_in_gg(X, X1))
   U2_GG(M, N, X, =_out_ag(X1, zero)) -> =_IN_GG(X, X1)
   U12_GG(M, N, =_out_gg(X, X1)) -> U13_GG(M, N, =_in_ag(X2, N))
   U12_GG(M, N, =_out_gg(X, X1)) -> =_IN_AG(X2, N)
   U13_GG(M, N, =_out_ag(X2, N)) -> U14_GG(M, N, X2, =_in_ag(X3, zero))
   U13_GG(M, N, =_out_ag(X2, N)) -> =_IN_AG(X3, zero)
   U14_GG(M, N, X2, =_out_ag(X3, zero)) -> U15_GG(M, N, isGreater_in_gg(X2, X3))
   U14_GG(M, N, X2, =_out_ag(X3, zero)) -> ISGREATER_IN_GG(X2, X3)
   U15_GG(M, N, isGreater_out_gg(X2, X3)) -> U16_GG(M, N, mult_in_gga(M, N, Ret1))
   U15_GG(M, N, isGreater_out_gg(X2, X3)) -> MULT_IN_GGA(M, N, Ret1)
   U16_GG(M, N, mult_out_gga(M, N, Ret1)) -> U17_GG(M, N, mult_in_gga(N, M, Ret2))
   U16_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)
   U14_GG(M, N, X2, =_out_ag(X3, zero)) -> U18_GG(M, N, =_in_gg(X2, X3))
   U14_GG(M, N, X2, =_out_ag(X3, zero)) -> =_IN_GG(X2, X3)
   U18_GG(M, N, =_out_gg(X2, X3)) -> U19_GG(M, N, mult_in_gga(M, N, Ret1))
   U18_GG(M, N, =_out_gg(X2, X3)) -> MULT_IN_GGA(M, N, Ret1)
   U19_GG(M, N, mult_out_gga(M, N, Ret1)) -> U20_GG(M, N, mult_in_gga(N, M, Ret2))
   U19_GG(M, N, mult_out_gga(M, N, Ret1)) -> MULT_IN_GGA(N, M, Ret2)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3)  =  U72_gg(x1, x2, x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U40_gga(x1, x2, x3)  =  U40_gga(x1, x3)

U41_gga(x1, x2, x3)  =  U41_gga(x1, x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x1, x2, x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x1, x2, x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x1, x2, x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x1, x2, x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x2, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x1, x2, x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x2, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x2, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x1, x2, x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x1, x2, x3, x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x1, x2, x3, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

U8_gg(x1, x2, x3)  =  U8_gg(x1, x2, x3)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x1, x2, x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

MAIN_IN_GG(x1, x2)  =  MAIN_IN_GG(x1, x2)

U1_GG(x1, x2, x3)  =  U1_GG(x1, x2, x3)

=_IN_AG(x1, x2)  =  =_IN_AG(x2)

U2_GG(x1, x2, x3, x4)  =  U2_GG(x1, x2, x3, x4)

U3_GG(x1, x2, x3)  =  U3_GG(x1, x2, x3)

ISGREATER_IN_GG(x1, x2)  =  ISGREATER_IN_GG(x1, x2)

U69_GG(x1, x2, x3)  =  U69_GG(x1, x2, x3)

U70_GG(x1, x2, x3)  =  U70_GG(x1, x2, x3)

U4_GG(x1, x2, x3)  =  U4_GG(x1, x2, x3)

U5_GG(x1, x2, x3, x4)  =  U5_GG(x1, x2, x3, x4)

U6_GG(x1, x2, x3)  =  U6_GG(x1, x2, x3)

U7_GG(x1, x2, x3)  =  U7_GG(x1, x2, x3)

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)

U21_GGA(x1, x2, x3, x4)  =  U21_GGA(x1, x2, x4)

U22_GGA(x1, x2, x3, x4, x5)  =  U22_GGA(x1, x2, x4, x5)

U23_GGA(x1, x2, x3, x4)  =  U23_GGA(x1, x2, x4)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)

U71_GG(x1, x2, x3)  =  U71_GG(x1, x2, x3)

U72_GG(x1, x2, x3)  =  U72_GG(x1, x2, x3)

U24_GGA(x1, x2, x3, x4)  =  U24_GGA(x1, x2, x4)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)

U40_GGA(x1, x2, x3)  =  U40_GGA(x1, x3)

U41_GGA(x1, x2, x3)  =  U41_GGA(x1, x3)

U42_GGA(x1, x2, x3, x4)  =  U42_GGA(x1, x2, x4)

U43_GGA(x1, x2, x3, x4)  =  U43_GGA(x1, x2, x4)

U44_GGA(x1, x2, x3, x4)  =  U44_GGA(x1, x2, x4)

U45_GGA(x1, x2, x3, x4)  =  U45_GGA(x1, x2, x4)

U25_GGA(x1, x2, x3, x4)  =  U25_GGA(x1, x2, x4)

U26_GGA(x1, x2, x3, x4)  =  U26_GGA(x1, x2, x4)

U27_GGA(x1, x2, x3, x4)  =  U27_GGA(x1, x2, x4)

U28_GGA(x1, x2, x3, x4, x5)  =  U28_GGA(x1, x2, x4, x5)

U29_GGA(x1, x2, x3, x4)  =  U29_GGA(x1, x2, x4)

=_IN_GG(x1, x2)  =  =_IN_GG(x1, x2)

U30_GGA(x1, x2, x3, x4)  =  U30_GGA(x1, x2, x4)

U31_GGA(x1, x2, x3, x4)  =  U31_GGA(x1, x2, x4)

U32_GGA(x1, x2, x3, x4, x5)  =  U32_GGA(x1, x2, x4, x5)

U33_GGA(x1, x2, x3, x4, x5)  =  U33_GGA(x1, x2, x4, x5)

U34_GGA(x1, x2, x3, x4, x5)  =  U34_GGA(x1, x2, x4, x5)

ISPLUS_IN_GGG(x1, x2, x3)  =  ISPLUS_IN_GGG(x1, x2, x3)

U36_GGG(x1, x2, x3, x4)  =  U36_GGG(x1, x2, x3, x4)

U37_GGG(x1, x2, x3, x4)  =  U37_GGG(x1, x2, x3, x4)

U38_GGG(x1, x2, x3, x4)  =  U38_GGG(x1, x2, x3, x4)

U39_GGG(x1, x2, x3, x4)  =  U39_GGG(x1, x2, x3, x4)

U35_GGA(x1, x2, x3, x4)  =  U35_GGA(x1, x2, x4)

U8_GG(x1, x2, x3)  =  U8_GG(x1, x2, x3)

U9_GG(x1, x2, x3)  =  U9_GG(x1, x2, x3)

U10_GG(x1, x2, x3)  =  U10_GG(x1, x2, x3)

U11_GG(x1, x2, x3)  =  U11_GG(x1, x2, x3)

U12_GG(x1, x2, x3)  =  U12_GG(x1, x2, x3)

U13_GG(x1, x2, x3)  =  U13_GG(x1, x2, x3)

U14_GG(x1, x2, x3, x4)  =  U14_GG(x1, x2, x3, x4)

U15_GG(x1, x2, x3)  =  U15_GG(x1, x2, x3)

U16_GG(x1, x2, x3)  =  U16_GG(x1, x2, x3)

U17_GG(x1, x2, x3)  =  U17_GG(x1, x2, x3)

U18_GG(x1, x2, x3)  =  U18_GG(x1, x2, x3)

U19_GG(x1, x2, x3)  =  U19_GG(x1, x2, x3)

U20_GG(x1, x2, x3)  =  U20_GG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(199) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 6 SCCs with 74 less nodes.
----------------------------------------

(200)
Complex Obligation (AND)

----------------------------------------

(201)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3)  =  U72_gg(x1, x2, x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U40_gga(x1, x2, x3)  =  U40_gga(x1, x3)

U41_gga(x1, x2, x3)  =  U41_gga(x1, x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x1, x2, x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x1, x2, x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x1, x2, x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x1, x2, x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x2, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x1, x2, x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x2, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x2, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x1, x2, x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x1, x2, x3, x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x1, x2, x3, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

U8_gg(x1, x2, x3)  =  U8_gg(x1, x2, x3)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x1, x2, x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

ISPLUS_IN_GGG(x1, x2, x3)  =  ISPLUS_IN_GGG(x1, x2, x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(202) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(203)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(204) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(205)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
   ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(206) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISPLUS_IN_GGG(succ(X), pred(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


*ISPLUS_IN_GGG(succ(X), succ(Y), succ(succ(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 > 3


*ISPLUS_IN_GGG(pred(X), succ(Y), Z) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 >= 3


*ISPLUS_IN_GGG(pred(X), pred(Y), pred(pred(Z))) -> ISPLUS_IN_GGG(X, Y, Z)
The graph contains the following edges 1 > 1, 2 > 2, 3 > 3


----------------------------------------

(207)
YES

----------------------------------------

(208)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3)  =  U72_gg(x1, x2, x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U40_gga(x1, x2, x3)  =  U40_gga(x1, x3)

U41_gga(x1, x2, x3)  =  U41_gga(x1, x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x1, x2, x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x1, x2, x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x1, x2, x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x1, x2, x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x2, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x1, x2, x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x2, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x2, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x1, x2, x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x1, x2, x3, x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x1, x2, x3, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

U8_gg(x1, x2, x3)  =  U8_gg(x1, x2, x3)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x1, x2, x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(209) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(210)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y), succ(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)
   ISMINUS_IN_GGA(zero, succ(Y), pred(Z)) -> ISMINUS_IN_GGA(zero, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
zero  =  zero

succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(211) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(212)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(zero, pred(Y)) -> ISMINUS_IN_GGA(zero, Y)
   ISMINUS_IN_GGA(zero, succ(Y)) -> ISMINUS_IN_GGA(zero, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(213) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGA(zero, pred(Y)) -> ISMINUS_IN_GGA(zero, Y)
The graph contains the following edges 1 >= 1, 2 > 2


*ISMINUS_IN_GGA(zero, succ(Y)) -> ISMINUS_IN_GGA(zero, Y)
The graph contains the following edges 1 >= 1, 2 > 2


----------------------------------------

(214)
YES

----------------------------------------

(215)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3)  =  U72_gg(x1, x2, x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U40_gga(x1, x2, x3)  =  U40_gga(x1, x3)

U41_gga(x1, x2, x3)  =  U41_gga(x1, x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x1, x2, x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x1, x2, x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x1, x2, x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x1, x2, x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x2, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x1, x2, x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x2, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x2, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x1, x2, x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x1, x2, x3, x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x1, x2, x3, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

U8_gg(x1, x2, x3)  =  U8_gg(x1, x2, x3)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x1, x2, x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(216) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(217)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y), succ(succ(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(succ(X), succ(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), succ(Y), pred(pred(Z))) -> ISMINUS_IN_GGA(X, Y, Z)
   ISMINUS_IN_GGA(pred(X), pred(Y), Z) -> ISMINUS_IN_GGA(X, Y, Z)

R is empty.
The argument filtering Pi contains the following mapping:
succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

ISMINUS_IN_GGA(x1, x2, x3)  =  ISMINUS_IN_GGA(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(218) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(219)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISMINUS_IN_GGA(succ(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(succ(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(pred(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
   ISMINUS_IN_GGA(pred(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(220) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISMINUS_IN_GGA(succ(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(succ(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(pred(X), succ(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISMINUS_IN_GGA(pred(X), pred(Y)) -> ISMINUS_IN_GGA(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(221)
YES

----------------------------------------

(222)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3)  =  U72_gg(x1, x2, x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U40_gga(x1, x2, x3)  =  U40_gga(x1, x3)

U41_gga(x1, x2, x3)  =  U41_gga(x1, x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x1, x2, x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x1, x2, x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x1, x2, x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x1, x2, x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x2, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x1, x2, x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x2, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x2, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x1, x2, x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x1, x2, x3, x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x1, x2, x3, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

U8_gg(x1, x2, x3)  =  U8_gg(x1, x2, x3)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x1, x2, x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

ISLESS_IN_GG(x1, x2)  =  ISLESS_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(223) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(224)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(225) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(226)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
   ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(227) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISLESS_IN_GG(succ(X), succ(Y)) -> ISLESS_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISLESS_IN_GG(pred(X), pred(Y)) -> ISLESS_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(228)
YES

----------------------------------------

(229)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U21_GGA(N, M, Ret, =_out_ag(X, M)) -> U22_GGA(N, M, Ret, X, =_in_ag(X1, zero))
   U22_GGA(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_GGA(N, M, Ret, isLess_in_gg(X, X1))
   U23_GGA(N, M, Ret, isLess_out_gg(X, X1)) -> U24_GGA(N, M, Ret, isMinus_in_gga(zero1, M, U))
   U24_GGA(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, Ret, =_in_ag(M1, U))
   U25_GGA(N, M, Ret, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1, Ret)
   MULT_IN_GGA(N, M, Ret) -> U21_GGA(N, M, Ret, =_in_ag(X, M))
   MULT_IN_GGA(N, M, Ret) -> U31_GGA(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_GGA(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, Ret, U, =_in_ag(M1, U))
   U32_GGA(N, M, Ret, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1, Ret1)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3)  =  U72_gg(x1, x2, x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U40_gga(x1, x2, x3)  =  U40_gga(x1, x3)

U41_gga(x1, x2, x3)  =  U41_gga(x1, x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x1, x2, x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x1, x2, x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x1, x2, x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x1, x2, x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x2, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x1, x2, x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x2, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x2, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x1, x2, x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x1, x2, x3, x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x1, x2, x3, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

U8_gg(x1, x2, x3)  =  U8_gg(x1, x2, x3)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x1, x2, x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)

U21_GGA(x1, x2, x3, x4)  =  U21_GGA(x1, x2, x4)

U22_GGA(x1, x2, x3, x4, x5)  =  U22_GGA(x1, x2, x4, x5)

U23_GGA(x1, x2, x3, x4)  =  U23_GGA(x1, x2, x4)

U24_GGA(x1, x2, x3, x4)  =  U24_GGA(x1, x2, x4)

U25_GGA(x1, x2, x3, x4)  =  U25_GGA(x1, x2, x4)

U31_GGA(x1, x2, x3, x4)  =  U31_GGA(x1, x2, x4)

U32_GGA(x1, x2, x3, x4, x5)  =  U32_GGA(x1, x2, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(230) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(231)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   U21_GGA(N, M, Ret, =_out_ag(X, M)) -> U22_GGA(N, M, Ret, X, =_in_ag(X1, zero))
   U22_GGA(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_GGA(N, M, Ret, isLess_in_gg(X, X1))
   U23_GGA(N, M, Ret, isLess_out_gg(X, X1)) -> U24_GGA(N, M, Ret, isMinus_in_gga(zero1, M, U))
   U24_GGA(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, Ret, =_in_ag(M1, U))
   U25_GGA(N, M, Ret, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1, Ret)
   MULT_IN_GGA(N, M, Ret) -> U21_GGA(N, M, Ret, =_in_ag(X, M))
   MULT_IN_GGA(N, M, Ret) -> U31_GGA(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_GGA(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, Ret, U, =_in_ag(M1, U))
   U32_GGA(N, M, Ret, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1, Ret1)

The TRS R consists of the following rules:

   =_in_ag(X, X) -> =_out_ag(X, X)
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)

The argument filtering Pi contains the following mapping:
=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

zero  =  zero

succ(x1)  =  succ(x1)

pred(x1)  =  pred(x1)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3)  =  U72_gg(x1, x2, x3)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U40_gga(x1, x2, x3)  =  U40_gga(x1, x3)

U41_gga(x1, x2, x3)  =  U41_gga(x1, x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x1, x2, x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x1, x2, x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x1, x2, x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x1, x2, x4)

zero1  =  zero1

MULT_IN_GGA(x1, x2, x3)  =  MULT_IN_GGA(x1, x2)

U21_GGA(x1, x2, x3, x4)  =  U21_GGA(x1, x2, x4)

U22_GGA(x1, x2, x3, x4, x5)  =  U22_GGA(x1, x2, x4, x5)

U23_GGA(x1, x2, x3, x4)  =  U23_GGA(x1, x2, x4)

U24_GGA(x1, x2, x3, x4)  =  U24_GGA(x1, x2, x4)

U25_GGA(x1, x2, x3, x4)  =  U25_GGA(x1, x2, x4)

U31_GGA(x1, x2, x3, x4)  =  U31_GGA(x1, x2, x4)

U32_GGA(x1, x2, x3, x4, x5)  =  U32_GGA(x1, x2, x4, x5)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(232) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(233)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_in_ag(zero))
   U22_GGA(N, M, X, =_out_ag(X1, zero)) -> U23_GGA(N, M, isLess_in_gg(X, X1))
   U23_GGA(N, M, isLess_out_gg(X, X1)) -> U24_GGA(N, M, isMinus_in_gga(zero1, M))
   U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_in_ag(U))
   U25_GGA(N, M, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_in_ag(M))
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))
   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_in_ag(U))
   U32_GGA(N, M, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)

The set Q consists of the following terms:

   =_in_ag(x0)
   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U71_gg(x0, x1, x2)
   U72_gg(x0, x1, x2)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(234) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_in_ag(zero)) at position [3] we obtained the following new rules [LPAR04]:

   (U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_out_ag(zero, zero)),U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_out_ag(zero, zero)))


----------------------------------------

(235)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U22_GGA(N, M, X, =_out_ag(X1, zero)) -> U23_GGA(N, M, isLess_in_gg(X, X1))
   U23_GGA(N, M, isLess_out_gg(X, X1)) -> U24_GGA(N, M, isMinus_in_gga(zero1, M))
   U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_in_ag(U))
   U25_GGA(N, M, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_in_ag(M))
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))
   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_in_ag(U))
   U32_GGA(N, M, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_out_ag(zero, zero))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)

The set Q consists of the following terms:

   =_in_ag(x0)
   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U71_gg(x0, x1, x2)
   U72_gg(x0, x1, x2)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(236) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_in_ag(U)) at position [2] we obtained the following new rules [LPAR04]:

   (U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_out_ag(U, U)),U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_out_ag(U, U)))


----------------------------------------

(237)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U22_GGA(N, M, X, =_out_ag(X1, zero)) -> U23_GGA(N, M, isLess_in_gg(X, X1))
   U23_GGA(N, M, isLess_out_gg(X, X1)) -> U24_GGA(N, M, isMinus_in_gga(zero1, M))
   U25_GGA(N, M, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_in_ag(M))
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))
   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_in_ag(U))
   U32_GGA(N, M, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_out_ag(zero, zero))
   U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_out_ag(U, U))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)

The set Q consists of the following terms:

   =_in_ag(x0)
   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U71_gg(x0, x1, x2)
   U72_gg(x0, x1, x2)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(238) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_in_ag(M)) at position [2] we obtained the following new rules [LPAR04]:

   (MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M, M)),MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M, M)))


----------------------------------------

(239)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U22_GGA(N, M, X, =_out_ag(X1, zero)) -> U23_GGA(N, M, isLess_in_gg(X, X1))
   U23_GGA(N, M, isLess_out_gg(X, X1)) -> U24_GGA(N, M, isMinus_in_gga(zero1, M))
   U25_GGA(N, M, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))
   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_in_ag(U))
   U32_GGA(N, M, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_out_ag(zero, zero))
   U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_out_ag(U, U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M, M))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)

The set Q consists of the following terms:

   =_in_ag(x0)
   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U71_gg(x0, x1, x2)
   U72_gg(x0, x1, x2)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(240) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_in_ag(U)) at position [3] we obtained the following new rules [LPAR04]:

   (U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U)),U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U)))


----------------------------------------

(241)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U22_GGA(N, M, X, =_out_ag(X1, zero)) -> U23_GGA(N, M, isLess_in_gg(X, X1))
   U23_GGA(N, M, isLess_out_gg(X, X1)) -> U24_GGA(N, M, isMinus_in_gga(zero1, M))
   U25_GGA(N, M, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, M, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_out_ag(zero, zero))
   U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_out_ag(U, U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M, M))
   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))

The TRS R consists of the following rules:

   =_in_ag(X) -> =_out_ag(X, X)
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)

The set Q consists of the following terms:

   =_in_ag(x0)
   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U71_gg(x0, x1, x2)
   U72_gg(x0, x1, x2)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(242) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(243)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U22_GGA(N, M, X, =_out_ag(X1, zero)) -> U23_GGA(N, M, isLess_in_gg(X, X1))
   U23_GGA(N, M, isLess_out_gg(X, X1)) -> U24_GGA(N, M, isMinus_in_gga(zero1, M))
   U25_GGA(N, M, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, M, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_out_ag(zero, zero))
   U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_out_ag(U, U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M, M))
   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))

The set Q consists of the following terms:

   =_in_ag(x0)
   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U71_gg(x0, x1, x2)
   U72_gg(x0, x1, x2)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(244) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   =_in_ag(x0)


----------------------------------------

(245)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U22_GGA(N, M, X, =_out_ag(X1, zero)) -> U23_GGA(N, M, isLess_in_gg(X, X1))
   U23_GGA(N, M, isLess_out_gg(X, X1)) -> U24_GGA(N, M, isMinus_in_gga(zero1, M))
   U25_GGA(N, M, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, M, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_out_ag(zero, zero))
   U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_out_ag(U, U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M, M))
   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))

The set Q consists of the following terms:

   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U71_gg(x0, x1, x2)
   U72_gg(x0, x1, x2)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(246) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U22_GGA(N, M, X, =_out_ag(X1, zero)) -> U23_GGA(N, M, isLess_in_gg(X, X1)) we obtained the following new rules [LPAR04]:

   (U22_GGA(z0, z1, z2, =_out_ag(zero, zero)) -> U23_GGA(z0, z1, isLess_in_gg(z2, zero)),U22_GGA(z0, z1, z2, =_out_ag(zero, zero)) -> U23_GGA(z0, z1, isLess_in_gg(z2, zero)))


----------------------------------------

(247)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U23_GGA(N, M, isLess_out_gg(X, X1)) -> U24_GGA(N, M, isMinus_in_gga(zero1, M))
   U25_GGA(N, M, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, M, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_out_ag(zero, zero))
   U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_out_ag(U, U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M, M))
   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U22_GGA(z0, z1, z2, =_out_ag(zero, zero)) -> U23_GGA(z0, z1, isLess_in_gg(z2, zero))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))

The set Q consists of the following terms:

   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U71_gg(x0, x1, x2)
   U72_gg(x0, x1, x2)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(248) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(249)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U23_GGA(N, M, isLess_out_gg(X, X1)) -> U24_GGA(N, M, isMinus_in_gga(zero1, M))
   U25_GGA(N, M, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, M, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_out_ag(zero, zero))
   U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_out_ag(U, U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M, M))
   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U22_GGA(z0, z1, z2, =_out_ag(zero, zero)) -> U23_GGA(z0, z1, isLess_in_gg(z2, zero))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U71_gg(x0, x1, x2)
   U72_gg(x0, x1, x2)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(250) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U71_gg(x0, x1, x2)
   U72_gg(x0, x1, x2)


----------------------------------------

(251)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U23_GGA(N, M, isLess_out_gg(X, X1)) -> U24_GGA(N, M, isMinus_in_gga(zero1, M))
   U25_GGA(N, M, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, M, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_out_ag(zero, zero))
   U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_out_ag(U, U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M, M))
   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U22_GGA(z0, z1, z2, =_out_ag(zero, zero)) -> U23_GGA(z0, z1, isLess_in_gg(z2, zero))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(252) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U22_GGA(z0, z1, z2, =_out_ag(zero, zero)) -> U23_GGA(z0, z1, isLess_in_gg(z2, zero)) at position [2] we obtained the following new rules [LPAR04]:

   (U22_GGA(y0, y1, pred(x0), =_out_ag(zero, zero)) -> U23_GGA(y0, y1, isLess_out_gg(pred(x0), zero)),U22_GGA(y0, y1, pred(x0), =_out_ag(zero, zero)) -> U23_GGA(y0, y1, isLess_out_gg(pred(x0), zero)))


----------------------------------------

(253)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U23_GGA(N, M, isLess_out_gg(X, X1)) -> U24_GGA(N, M, isMinus_in_gga(zero1, M))
   U25_GGA(N, M, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, M, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_out_ag(zero, zero))
   U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_out_ag(U, U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M, M))
   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U22_GGA(y0, y1, pred(x0), =_out_ag(zero, zero)) -> U23_GGA(y0, y1, isLess_out_gg(pred(x0), zero))

The TRS R consists of the following rules:

   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(254) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(255)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U23_GGA(N, M, isLess_out_gg(X, X1)) -> U24_GGA(N, M, isMinus_in_gga(zero1, M))
   U25_GGA(N, M, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, M, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_out_ag(zero, zero))
   U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_out_ag(U, U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M, M))
   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U22_GGA(y0, y1, pred(x0), =_out_ag(zero, zero)) -> U23_GGA(y0, y1, isLess_out_gg(pred(x0), zero))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isLess_in_gg(x0, x1)
   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(256) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   isLess_in_gg(x0, x1)


----------------------------------------

(257)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U23_GGA(N, M, isLess_out_gg(X, X1)) -> U24_GGA(N, M, isMinus_in_gga(zero1, M))
   U25_GGA(N, M, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, M, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_out_ag(zero, zero))
   U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_out_ag(U, U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M, M))
   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U22_GGA(y0, y1, pred(x0), =_out_ag(zero, zero)) -> U23_GGA(y0, y1, isLess_out_gg(pred(x0), zero))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(258) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U23_GGA(N, M, isLess_out_gg(X, X1)) -> U24_GGA(N, M, isMinus_in_gga(zero1, M)) we obtained the following new rules [LPAR04]:

   (U23_GGA(z0, z1, isLess_out_gg(pred(z2), zero)) -> U24_GGA(z0, z1, isMinus_in_gga(zero1, z1)),U23_GGA(z0, z1, isLess_out_gg(pred(z2), zero)) -> U24_GGA(z0, z1, isMinus_in_gga(zero1, z1)))


----------------------------------------

(259)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U25_GGA(N, M, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, M, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_out_ag(zero, zero))
   U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_out_ag(U, U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M, M))
   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U22_GGA(y0, y1, pred(x0), =_out_ag(zero, zero)) -> U23_GGA(y0, y1, isLess_out_gg(pred(x0), zero))
   U23_GGA(z0, z1, isLess_out_gg(pred(z2), zero)) -> U24_GGA(z0, z1, isMinus_in_gga(zero1, z1))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(260) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U25_GGA(N, M, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1) we obtained the following new rules [LPAR04]:

   (U25_GGA(z0, z1, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2),U25_GGA(z0, z1, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2))


----------------------------------------

(261)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))
   U32_GGA(N, M, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1)
   U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_out_ag(zero, zero))
   U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_out_ag(U, U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M, M))
   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U22_GGA(y0, y1, pred(x0), =_out_ag(zero, zero)) -> U23_GGA(y0, y1, isLess_out_gg(pred(x0), zero))
   U23_GGA(z0, z1, isLess_out_gg(pred(z2), zero)) -> U24_GGA(z0, z1, isMinus_in_gga(zero1, z1))
   U25_GGA(z0, z1, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(262) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U32_GGA(N, M, U, =_out_ag(M1, U)) -> MULT_IN_GGA(N, M1) we obtained the following new rules [LPAR04]:

   (U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2),U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2))


----------------------------------------

(263)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))
   U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_out_ag(zero, zero))
   U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_out_ag(U, U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M, M))
   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U22_GGA(y0, y1, pred(x0), =_out_ag(zero, zero)) -> U23_GGA(y0, y1, isLess_out_gg(pred(x0), zero))
   U23_GGA(z0, z1, isLess_out_gg(pred(z2), zero)) -> U24_GGA(z0, z1, isMinus_in_gga(zero1, z1))
   U25_GGA(z0, z1, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(264) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U21_GGA(N, M, =_out_ag(X, M)) -> U22_GGA(N, M, X, =_out_ag(zero, zero)) we obtained the following new rules [LPAR04]:

   (U21_GGA(z0, z1, =_out_ag(z1, z1)) -> U22_GGA(z0, z1, z1, =_out_ag(zero, zero)),U21_GGA(z0, z1, =_out_ag(z1, z1)) -> U22_GGA(z0, z1, z1, =_out_ag(zero, zero)))


----------------------------------------

(265)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))
   U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_out_ag(U, U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M, M))
   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U22_GGA(y0, y1, pred(x0), =_out_ag(zero, zero)) -> U23_GGA(y0, y1, isLess_out_gg(pred(x0), zero))
   U23_GGA(z0, z1, isLess_out_gg(pred(z2), zero)) -> U24_GGA(z0, z1, isMinus_in_gga(zero1, z1))
   U25_GGA(z0, z1, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   U21_GGA(z0, z1, =_out_ag(z1, z1)) -> U22_GGA(z0, z1, z1, =_out_ag(zero, zero))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(266) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U22_GGA(y0, y1, pred(x0), =_out_ag(zero, zero)) -> U23_GGA(y0, y1, isLess_out_gg(pred(x0), zero)) we obtained the following new rules [LPAR04]:

   (U22_GGA(z0, pred(x2), pred(x2), =_out_ag(zero, zero)) -> U23_GGA(z0, pred(x2), isLess_out_gg(pred(x2), zero)),U22_GGA(z0, pred(x2), pred(x2), =_out_ag(zero, zero)) -> U23_GGA(z0, pred(x2), isLess_out_gg(pred(x2), zero)))


----------------------------------------

(267)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))
   U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_out_ag(U, U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M, M))
   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U23_GGA(z0, z1, isLess_out_gg(pred(z2), zero)) -> U24_GGA(z0, z1, isMinus_in_gga(zero1, z1))
   U25_GGA(z0, z1, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   U21_GGA(z0, z1, =_out_ag(z1, z1)) -> U22_GGA(z0, z1, z1, =_out_ag(zero, zero))
   U22_GGA(z0, pred(x2), pred(x2), =_out_ag(zero, zero)) -> U23_GGA(z0, pred(x2), isLess_out_gg(pred(x2), zero))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(268) TransformationProof (SOUND)
By narrowing [LPAR04] the rule U23_GGA(z0, z1, isLess_out_gg(pred(z2), zero)) -> U24_GGA(z0, z1, isMinus_in_gga(zero1, z1)) at position [2] we obtained the following new rules [LPAR04]:

   (U23_GGA(y0, zero, isLess_out_gg(pred(y2), zero)) -> U24_GGA(y0, zero, isMinus_out_gga(zero1, zero, zero1)),U23_GGA(y0, zero, isLess_out_gg(pred(y2), zero)) -> U24_GGA(y0, zero, isMinus_out_gga(zero1, zero, zero1)))


----------------------------------------

(269)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))
   U24_GGA(N, M, isMinus_out_gga(zero1, M, U)) -> U25_GGA(N, M, =_out_ag(U, U))
   MULT_IN_GGA(N, M) -> U21_GGA(N, M, =_out_ag(M, M))
   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U25_GGA(z0, z1, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   U21_GGA(z0, z1, =_out_ag(z1, z1)) -> U22_GGA(z0, z1, z1, =_out_ag(zero, zero))
   U22_GGA(z0, pred(x2), pred(x2), =_out_ag(zero, zero)) -> U23_GGA(z0, pred(x2), isLess_out_gg(pred(x2), zero))
   U23_GGA(y0, zero, isLess_out_gg(pred(y2), zero)) -> U24_GGA(y0, zero, isMinus_out_gga(zero1, zero, zero1))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(270) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 6 less nodes.
----------------------------------------

(271)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(272) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   U45_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U43_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U41_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))

Used ordering: Polynomial interpretation [POLO]:

   POL(=_out_ag(x_1, x_2)) = 2 + 2*x_1 + 2*x_2
   POL(MULT_IN_GGA(x_1, x_2)) = 2*x_1
   POL(U31_GGA(x_1, x_2, x_3)) = 2*x_1 + 2*x_3
   POL(U32_GGA(x_1, x_2, x_3, x_4)) = 2*x_1
   POL(U40_gga(x_1, x_2)) = 2*x_2
   POL(U41_gga(x_1, x_2)) = 2 + 2*x_2
   POL(U42_gga(x_1, x_2, x_3)) = 2*x_2 + x_3
   POL(U43_gga(x_1, x_2, x_3)) = 2 + 2*x_3
   POL(U44_gga(x_1, x_2, x_3)) = x_3
   POL(U45_gga(x_1, x_2, x_3)) = 2 + 2*x_3
   POL(isMinus_in_gga(x_1, x_2)) = 2*x_2
   POL(isMinus_out_gga(x_1, x_2, x_3)) = 0
   POL(pred(x_1)) = 1 + 2*x_1
   POL(succ(x_1)) = 2*x_1
   POL(zero) = 0


----------------------------------------

(273)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(274) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   isMinus_in_gga(succ(X), succ(Y)) -> U42_gga(X, Y, isMinus_in_gga(X, Y))

Used ordering: Polynomial interpretation [POLO]:

   POL(=_out_ag(x_1, x_2)) = 2*x_2
   POL(MULT_IN_GGA(x_1, x_2)) = x_1 + 2*x_2
   POL(U31_GGA(x_1, x_2, x_3)) = x_1 + 2*x_3
   POL(U32_GGA(x_1, x_2, x_3, x_4)) = x_1 + x_4
   POL(U40_gga(x_1, x_2)) = 2*x_2
   POL(U41_gga(x_1, x_2)) = 2*x_2
   POL(U42_gga(x_1, x_2, x_3)) = x_3
   POL(U43_gga(x_1, x_2, x_3)) = 2 + x_3
   POL(U44_gga(x_1, x_2, x_3)) = x_3
   POL(U45_gga(x_1, x_2, x_3)) = x_3
   POL(isMinus_in_gga(x_1, x_2)) = x_1
   POL(isMinus_out_gga(x_1, x_2, x_3)) = x_3
   POL(pred(x_1)) = x_1
   POL(succ(x_1)) = 2 + x_1
   POL(zero) = 0


----------------------------------------

(275)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U42_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(276) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(277)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U42_gga(x0, x1, x2)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(278) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U42_gga(x0, x1, x2)


----------------------------------------

(279)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(280) QDPQMonotonicMRRProof (EQUIVALENT)
By using the Q-monotonic rule removal processor with the following ordering, at least one Dependency Pair or term rewrite system rule of this QDP problem can be strictly oriented such that it always occurs at a strongly monotonic position in a (P,Q,R)-chain.


Strictly oriented rules of the TRS R:

   isMinus_in_gga(zero, pred(Y)) -> U41_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(succ(X), pred(Y)) -> U43_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(pred(X), pred(Y)) -> U45_gga(X, Y, isMinus_in_gga(X, Y))

Used ordering: Polynomial interpretation [POLO]:

   POL(=_out_ag(x_1, x_2)) = 2 + x_1 + 2*x_2
   POL(MULT_IN_GGA(x_1, x_2)) = 2*x_1
   POL(U31_GGA(x_1, x_2, x_3)) = 2*x_1 + x_3
   POL(U32_GGA(x_1, x_2, x_3, x_4)) = 2*x_1
   POL(U40_gga(x_1, x_2)) = 2*x_2
   POL(U41_gga(x_1, x_2)) = x_2
   POL(U43_gga(x_1, x_2, x_3)) = x_3
   POL(U44_gga(x_1, x_2, x_3)) = 2*x_3
   POL(U45_gga(x_1, x_2, x_3)) = x_3
   POL(isMinus_in_gga(x_1, x_2)) = x_2
   POL(isMinus_out_gga(x_1, x_2, x_3)) = 0
   POL(pred(x_1)) = 1 + x_1
   POL(succ(x_1)) = 2*x_1
   POL(zero) = 0


----------------------------------------

(281)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U44_gga(x0, x1, x2)
   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(282) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U41_gga(x0, x1)
   U43_gga(x0, x1, x2)
   U45_gga(x0, x1, x2)


----------------------------------------

(283)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U44_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(284) TransformationProof (SOUND)
By narrowing [LPAR04] the rule MULT_IN_GGA(N, M) -> U31_GGA(N, M, isMinus_in_gga(M, succ(zero))) at position [2] we obtained the following new rules [LPAR04]:

   (MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, U40_gga(zero, isMinus_in_gga(zero, zero))),MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, U40_gga(zero, isMinus_in_gga(zero, zero))))
   (MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), U44_gga(x0, zero, isMinus_in_gga(x0, zero))),MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), U44_gga(x0, zero, isMinus_in_gga(x0, zero))))


----------------------------------------

(285)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, U40_gga(zero, isMinus_in_gga(zero, zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), U44_gga(x0, zero, isMinus_in_gga(x0, zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(zero, succ(Y)) -> U40_gga(Y, isMinus_in_gga(zero, Y))
   isMinus_in_gga(pred(X), succ(Y)) -> U44_gga(X, Y, isMinus_in_gga(X, Y))
   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U44_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(286) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(287)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, U40_gga(zero, isMinus_in_gga(zero, zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), U44_gga(x0, zero, isMinus_in_gga(x0, zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U44_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(288) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, U40_gga(zero, isMinus_in_gga(zero, zero))) at position [2,1] we obtained the following new rules [LPAR04]:

   (MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, U40_gga(zero, isMinus_out_gga(zero, zero, zero))),MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, U40_gga(zero, isMinus_out_gga(zero, zero, zero))))


----------------------------------------

(289)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), U44_gga(x0, zero, isMinus_in_gga(x0, zero)))
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, U40_gga(zero, isMinus_out_gga(zero, zero, zero)))

The TRS R consists of the following rules:

   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U44_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(290) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), U44_gga(x0, zero, isMinus_in_gga(x0, zero))) at position [2,2] we obtained the following new rules [LPAR04]:

   (MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), U44_gga(x0, zero, isMinus_out_gga(x0, zero, x0))),MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), U44_gga(x0, zero, isMinus_out_gga(x0, zero, x0))))


----------------------------------------

(291)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, U40_gga(zero, isMinus_out_gga(zero, zero, zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), U44_gga(x0, zero, isMinus_out_gga(x0, zero, x0)))

The TRS R consists of the following rules:

   isMinus_in_gga(X, zero) -> isMinus_out_gga(X, zero, X)
   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U44_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(292) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(293)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, U40_gga(zero, isMinus_out_gga(zero, zero, zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), U44_gga(x0, zero, isMinus_out_gga(x0, zero, x0)))

The TRS R consists of the following rules:

   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   isMinus_in_gga(x0, x1)
   U40_gga(x0, x1)
   U44_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(294) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   isMinus_in_gga(x0, x1)


----------------------------------------

(295)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, U40_gga(zero, isMinus_out_gga(zero, zero, zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), U44_gga(x0, zero, isMinus_out_gga(x0, zero, x0)))

The TRS R consists of the following rules:

   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   U40_gga(x0, x1)
   U44_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(296) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, U40_gga(zero, isMinus_out_gga(zero, zero, zero))) at position [2] we obtained the following new rules [LPAR04]:

   (MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, isMinus_out_gga(zero, succ(zero), pred(zero))),MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, isMinus_out_gga(zero, succ(zero), pred(zero))))


----------------------------------------

(297)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), U44_gga(x0, zero, isMinus_out_gga(x0, zero, x0)))
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, isMinus_out_gga(zero, succ(zero), pred(zero)))

The TRS R consists of the following rules:

   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U40_gga(Y, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))

The set Q consists of the following terms:

   U40_gga(x0, x1)
   U44_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(298) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(299)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), U44_gga(x0, zero, isMinus_out_gga(x0, zero, x0)))
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, isMinus_out_gga(zero, succ(zero), pred(zero)))

The TRS R consists of the following rules:

   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))

The set Q consists of the following terms:

   U40_gga(x0, x1)
   U44_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(300) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U40_gga(x0, x1)


----------------------------------------

(301)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), U44_gga(x0, zero, isMinus_out_gga(x0, zero, x0)))
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, isMinus_out_gga(zero, succ(zero), pred(zero)))

The TRS R consists of the following rules:

   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))

The set Q consists of the following terms:

   U44_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(302) TransformationProof (EQUIVALENT)
By rewriting [LPAR04] the rule MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), U44_gga(x0, zero, isMinus_out_gga(x0, zero, x0))) at position [2] we obtained the following new rules [LPAR04]:

   (MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), isMinus_out_gga(pred(x0), succ(zero), pred(pred(x0)))),MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), isMinus_out_gga(pred(x0), succ(zero), pred(pred(x0)))))


----------------------------------------

(303)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, isMinus_out_gga(zero, succ(zero), pred(zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), isMinus_out_gga(pred(x0), succ(zero), pred(pred(x0))))

The TRS R consists of the following rules:

   U44_gga(X, Y, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))

The set Q consists of the following terms:

   U44_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(304) UsableRulesProof (EQUIVALENT)
As all Q-normal forms are R-normal forms we are in the innermost case. Hence, by the usable rules processor [LPAR04] we can delete all non-usable rules [FROCOS05] from R.
----------------------------------------

(305)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, isMinus_out_gga(zero, succ(zero), pred(zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), isMinus_out_gga(pred(x0), succ(zero), pred(pred(x0))))

R is empty.
The set Q consists of the following terms:

   U44_gga(x0, x1, x2)

We have to consider all (P,Q,R)-chains.
----------------------------------------

(306) QReductionProof (EQUIVALENT)
We deleted the following terms from Q as each root-symbol of these terms does neither occur in P nor in R.[THIEMANN].

   U44_gga(x0, x1, x2)


----------------------------------------

(307)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U))
   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, isMinus_out_gga(zero, succ(zero), pred(zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), isMinus_out_gga(pred(x0), succ(zero), pred(pred(x0))))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(308) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U31_GGA(N, M, isMinus_out_gga(M, succ(zero), U)) -> U32_GGA(N, M, U, =_out_ag(U, U)) we obtained the following new rules [LPAR04]:

   (U31_GGA(z0, zero, isMinus_out_gga(zero, succ(zero), pred(zero))) -> U32_GGA(z0, zero, pred(zero), =_out_ag(pred(zero), pred(zero))),U31_GGA(z0, zero, isMinus_out_gga(zero, succ(zero), pred(zero))) -> U32_GGA(z0, zero, pred(zero), =_out_ag(pred(zero), pred(zero))))
   (U31_GGA(z0, pred(z1), isMinus_out_gga(pred(z1), succ(zero), pred(pred(z1)))) -> U32_GGA(z0, pred(z1), pred(pred(z1)), =_out_ag(pred(pred(z1)), pred(pred(z1)))),U31_GGA(z0, pred(z1), isMinus_out_gga(pred(z1), succ(zero), pred(pred(z1)))) -> U32_GGA(z0, pred(z1), pred(pred(z1)), =_out_ag(pred(pred(z1)), pred(pred(z1)))))


----------------------------------------

(309)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2)
   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, isMinus_out_gga(zero, succ(zero), pred(zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), isMinus_out_gga(pred(x0), succ(zero), pred(pred(x0))))
   U31_GGA(z0, zero, isMinus_out_gga(zero, succ(zero), pred(zero))) -> U32_GGA(z0, zero, pred(zero), =_out_ag(pred(zero), pred(zero)))
   U31_GGA(z0, pred(z1), isMinus_out_gga(pred(z1), succ(zero), pred(pred(z1)))) -> U32_GGA(z0, pred(z1), pred(pred(z1)), =_out_ag(pred(pred(z1)), pred(pred(z1))))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(310) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U32_GGA(z0, z1, z2, =_out_ag(z2, z2)) -> MULT_IN_GGA(z0, z2) we obtained the following new rules [LPAR04]:

   (U32_GGA(z0, zero, pred(zero), =_out_ag(pred(zero), pred(zero))) -> MULT_IN_GGA(z0, pred(zero)),U32_GGA(z0, zero, pred(zero), =_out_ag(pred(zero), pred(zero))) -> MULT_IN_GGA(z0, pred(zero)))
   (U32_GGA(z0, pred(z1), pred(pred(z1)), =_out_ag(pred(pred(z1)), pred(pred(z1)))) -> MULT_IN_GGA(z0, pred(pred(z1))),U32_GGA(z0, pred(z1), pred(pred(z1)), =_out_ag(pred(pred(z1)), pred(pred(z1)))) -> MULT_IN_GGA(z0, pred(pred(z1))))


----------------------------------------

(311)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   MULT_IN_GGA(y0, zero) -> U31_GGA(y0, zero, isMinus_out_gga(zero, succ(zero), pred(zero)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), isMinus_out_gga(pred(x0), succ(zero), pred(pred(x0))))
   U31_GGA(z0, zero, isMinus_out_gga(zero, succ(zero), pred(zero))) -> U32_GGA(z0, zero, pred(zero), =_out_ag(pred(zero), pred(zero)))
   U31_GGA(z0, pred(z1), isMinus_out_gga(pred(z1), succ(zero), pred(pred(z1)))) -> U32_GGA(z0, pred(z1), pred(pred(z1)), =_out_ag(pred(pred(z1)), pred(pred(z1))))
   U32_GGA(z0, zero, pred(zero), =_out_ag(pred(zero), pred(zero))) -> MULT_IN_GGA(z0, pred(zero))
   U32_GGA(z0, pred(z1), pred(pred(z1)), =_out_ag(pred(pred(z1)), pred(pred(z1)))) -> MULT_IN_GGA(z0, pred(pred(z1)))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(312) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LPAR04,FROCOS05,EDGSTAR] contains 1 SCC with 3 less nodes.
----------------------------------------

(313)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(z0, pred(z1), isMinus_out_gga(pred(z1), succ(zero), pred(pred(z1)))) -> U32_GGA(z0, pred(z1), pred(pred(z1)), =_out_ag(pred(pred(z1)), pred(pred(z1))))
   U32_GGA(z0, pred(z1), pred(pred(z1)), =_out_ag(pred(pred(z1)), pred(pred(z1)))) -> MULT_IN_GGA(z0, pred(pred(z1)))
   MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), isMinus_out_gga(pred(x0), succ(zero), pred(pred(x0))))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(314) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule MULT_IN_GGA(y0, pred(x0)) -> U31_GGA(y0, pred(x0), isMinus_out_gga(pred(x0), succ(zero), pred(pred(x0)))) we obtained the following new rules [LPAR04]:

   (MULT_IN_GGA(z0, pred(pred(z1))) -> U31_GGA(z0, pred(pred(z1)), isMinus_out_gga(pred(pred(z1)), succ(zero), pred(pred(pred(z1))))),MULT_IN_GGA(z0, pred(pred(z1))) -> U31_GGA(z0, pred(pred(z1)), isMinus_out_gga(pred(pred(z1)), succ(zero), pred(pred(pred(z1))))))


----------------------------------------

(315)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U31_GGA(z0, pred(z1), isMinus_out_gga(pred(z1), succ(zero), pred(pred(z1)))) -> U32_GGA(z0, pred(z1), pred(pred(z1)), =_out_ag(pred(pred(z1)), pred(pred(z1))))
   U32_GGA(z0, pred(z1), pred(pred(z1)), =_out_ag(pred(pred(z1)), pred(pred(z1)))) -> MULT_IN_GGA(z0, pred(pred(z1)))
   MULT_IN_GGA(z0, pred(pred(z1))) -> U31_GGA(z0, pred(pred(z1)), isMinus_out_gga(pred(pred(z1)), succ(zero), pred(pred(pred(z1)))))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(316) TransformationProof (EQUIVALENT)
By instantiating [LPAR04] the rule U31_GGA(z0, pred(z1), isMinus_out_gga(pred(z1), succ(zero), pred(pred(z1)))) -> U32_GGA(z0, pred(z1), pred(pred(z1)), =_out_ag(pred(pred(z1)), pred(pred(z1)))) we obtained the following new rules [LPAR04]:

   (U31_GGA(z0, pred(pred(z1)), isMinus_out_gga(pred(pred(z1)), succ(zero), pred(pred(pred(z1))))) -> U32_GGA(z0, pred(pred(z1)), pred(pred(pred(z1))), =_out_ag(pred(pred(pred(z1))), pred(pred(pred(z1))))),U31_GGA(z0, pred(pred(z1)), isMinus_out_gga(pred(pred(z1)), succ(zero), pred(pred(pred(z1))))) -> U32_GGA(z0, pred(pred(z1)), pred(pred(pred(z1))), =_out_ag(pred(pred(pred(z1))), pred(pred(pred(z1))))))


----------------------------------------

(317)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   U32_GGA(z0, pred(z1), pred(pred(z1)), =_out_ag(pred(pred(z1)), pred(pred(z1)))) -> MULT_IN_GGA(z0, pred(pred(z1)))
   MULT_IN_GGA(z0, pred(pred(z1))) -> U31_GGA(z0, pred(pred(z1)), isMinus_out_gga(pred(pred(z1)), succ(zero), pred(pred(pred(z1)))))
   U31_GGA(z0, pred(pred(z1)), isMinus_out_gga(pred(pred(z1)), succ(zero), pred(pred(pred(z1))))) -> U32_GGA(z0, pred(pred(z1)), pred(pred(pred(z1))), =_out_ag(pred(pred(pred(z1))), pred(pred(pred(z1)))))

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(318) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by narrowing to the left:

s = MULT_IN_GGA(z0, pred(pred(z1))) evaluates to  t =MULT_IN_GGA(z0, pred(pred(pred(z1))))

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [z1 / pred(z1)]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

MULT_IN_GGA(z0, pred(pred(z1))) -> U31_GGA(z0, pred(pred(z1)), isMinus_out_gga(pred(pred(z1)), succ(zero), pred(pred(pred(z1)))))
with rule MULT_IN_GGA(z0', pred(pred(z1'))) -> U31_GGA(z0', pred(pred(z1')), isMinus_out_gga(pred(pred(z1')), succ(zero), pred(pred(pred(z1'))))) at position [] and matcher [z0' / z0, z1' / z1]

U31_GGA(z0, pred(pred(z1)), isMinus_out_gga(pred(pred(z1)), succ(zero), pred(pred(pred(z1))))) -> U32_GGA(z0, pred(pred(z1)), pred(pred(pred(z1))), =_out_ag(pred(pred(pred(z1))), pred(pred(pred(z1)))))
with rule U31_GGA(z0', pred(pred(z1')), isMinus_out_gga(pred(pred(z1')), succ(zero), pred(pred(pred(z1'))))) -> U32_GGA(z0', pred(pred(z1')), pred(pred(pred(z1'))), =_out_ag(pred(pred(pred(z1'))), pred(pred(pred(z1'))))) at position [] and matcher [z0' / z0, z1' / z1]

U32_GGA(z0, pred(pred(z1)), pred(pred(pred(z1))), =_out_ag(pred(pred(pred(z1))), pred(pred(pred(z1))))) -> MULT_IN_GGA(z0, pred(pred(pred(z1))))
with rule U32_GGA(z0, pred(z1), pred(pred(z1)), =_out_ag(pred(pred(z1)), pred(pred(z1)))) -> MULT_IN_GGA(z0, pred(pred(z1)))

Now applying the matcher to the start term leads to a term which is equal to the last term in the rewriting sequence


All these steps are and every following step will be a correct step w.r.t to Q.




----------------------------------------

(319)
NO

----------------------------------------

(320)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)

The TRS R consists of the following rules:

   main_in_gg(M, N) -> U1_gg(M, N, =_in_ag(X, M))
   =_in_ag(X, X) -> =_out_ag(X, X)
   U1_gg(M, N, =_out_ag(X, M)) -> U2_gg(M, N, X, =_in_ag(X1, zero))
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U3_gg(M, N, isGreater_in_gg(X, X1))
   isGreater_in_gg(succ(X), zero) -> isGreater_out_gg(succ(X), zero)
   isGreater_in_gg(succ(X), pred(Y)) -> isGreater_out_gg(succ(X), pred(Y))
   isGreater_in_gg(succ(X), succ(Y)) -> U69_gg(X, Y, isGreater_in_gg(X, Y))
   isGreater_in_gg(zero, pred(Y)) -> isGreater_out_gg(zero, pred(Y))
   isGreater_in_gg(pred(X), pred(Y)) -> U70_gg(X, Y, isGreater_in_gg(X, Y))
   U70_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(pred(X), pred(Y))
   U69_gg(X, Y, isGreater_out_gg(X, Y)) -> isGreater_out_gg(succ(X), succ(Y))
   U3_gg(M, N, isGreater_out_gg(X, X1)) -> U4_gg(M, N, =_in_ag(X2, N))
   U4_gg(M, N, =_out_ag(X2, N)) -> U5_gg(M, N, X2, =_in_ag(X3, zero))
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U6_gg(M, N, isGreater_in_gg(X2, X3))
   U6_gg(M, N, isGreater_out_gg(X2, X3)) -> U7_gg(M, N, mult_in_gga(M, N, Ret1))
   mult_in_gga(N, M, Ret) -> U21_gga(N, M, Ret, =_in_ag(X, M))
   U21_gga(N, M, Ret, =_out_ag(X, M)) -> U22_gga(N, M, Ret, X, =_in_ag(X1, zero))
   U22_gga(N, M, Ret, X, =_out_ag(X1, zero)) -> U23_gga(N, M, Ret, isLess_in_gg(X, X1))
   isLess_in_gg(pred(X), zero) -> isLess_out_gg(pred(X), zero)
   isLess_in_gg(pred(X), succ(Y)) -> isLess_out_gg(pred(X), succ(Y))
   isLess_in_gg(pred(X), pred(Y)) -> U71_gg(X, Y, isLess_in_gg(X, Y))
   isLess_in_gg(zero, succ(Y)) -> isLess_out_gg(zero, succ(Y))
   isLess_in_gg(succ(X), succ(Y)) -> U72_gg(X, Y, isLess_in_gg(X, Y))
   U72_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(succ(X), succ(Y))
   U71_gg(X, Y, isLess_out_gg(X, Y)) -> isLess_out_gg(pred(X), pred(Y))
   U23_gga(N, M, Ret, isLess_out_gg(X, X1)) -> U24_gga(N, M, Ret, isMinus_in_gga(zero1, M, U))
   isMinus_in_gga(X, zero, X) -> isMinus_out_gga(X, zero, X)
   isMinus_in_gga(zero, succ(Y), pred(Z)) -> U40_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(zero, pred(Y), succ(Z)) -> U41_gga(Y, Z, isMinus_in_gga(zero, Y, Z))
   isMinus_in_gga(succ(X), succ(Y), Z) -> U42_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(succ(X), pred(Y), succ(succ(Z))) -> U43_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), succ(Y), pred(pred(Z))) -> U44_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   isMinus_in_gga(pred(X), pred(Y), Z) -> U45_gga(X, Y, Z, isMinus_in_gga(X, Y, Z))
   U45_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), pred(Y), Z)
   U44_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(pred(X), succ(Y), pred(pred(Z)))
   U43_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), pred(Y), succ(succ(Z)))
   U42_gga(X, Y, Z, isMinus_out_gga(X, Y, Z)) -> isMinus_out_gga(succ(X), succ(Y), Z)
   U41_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, pred(Y), succ(Z))
   U40_gga(Y, Z, isMinus_out_gga(zero, Y, Z)) -> isMinus_out_gga(zero, succ(Y), pred(Z))
   U24_gga(N, M, Ret, isMinus_out_gga(zero1, M, U)) -> U25_gga(N, M, Ret, =_in_ag(M1, U))
   U25_gga(N, M, Ret, =_out_ag(M1, U)) -> U26_gga(N, M, Ret, mult_in_gga(N, M1, Ret))
   mult_in_gga(X1, M, Ret) -> U27_gga(X1, M, Ret, =_in_ag(X, M))
   U27_gga(X1, M, Ret, =_out_ag(X, M)) -> U28_gga(X1, M, Ret, X, =_in_ag(X2, zero))
   U28_gga(X1, M, Ret, X, =_out_ag(X2, zero)) -> U29_gga(X1, M, Ret, =_in_gg(X, X2))
   =_in_gg(X, X) -> =_out_gg(X, X)
   U29_gga(X1, M, Ret, =_out_gg(X, X2)) -> U30_gga(X1, M, Ret, =_in_ag(Ret, zero))
   U30_gga(X1, M, Ret, =_out_ag(Ret, zero)) -> mult_out_gga(X1, M, Ret)
   mult_in_gga(N, M, Ret) -> U31_gga(N, M, Ret, isMinus_in_gga(M, succ(zero), U))
   U31_gga(N, M, Ret, isMinus_out_gga(M, succ(zero), U)) -> U32_gga(N, M, Ret, U, =_in_ag(M1, U))
   U32_gga(N, M, Ret, U, =_out_ag(M1, U)) -> U33_gga(N, M, Ret, U, mult_in_gga(N, M1, Ret1))
   U33_gga(N, M, Ret, U, mult_out_gga(N, M1, Ret1)) -> U34_gga(N, M, Ret, U, isPlus_in_ggg(N, Ret1, U))
   isPlus_in_ggg(zero, X, X) -> isPlus_out_ggg(zero, X, X)
   isPlus_in_ggg(succ(X), zero, succ(X)) -> isPlus_out_ggg(succ(X), zero, succ(X))
   isPlus_in_ggg(succ(X), succ(Y), succ(succ(Z))) -> U36_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(succ(X), pred(Y), Z) -> U37_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), zero, pred(X)) -> isPlus_out_ggg(pred(X), zero, pred(X))
   isPlus_in_ggg(pred(X), succ(Y), Z) -> U38_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   isPlus_in_ggg(pred(X), pred(Y), pred(pred(Z))) -> U39_ggg(X, Y, Z, isPlus_in_ggg(X, Y, Z))
   U39_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), pred(Y), pred(pred(Z)))
   U38_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(pred(X), succ(Y), Z)
   U37_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), pred(Y), Z)
   U36_ggg(X, Y, Z, isPlus_out_ggg(X, Y, Z)) -> isPlus_out_ggg(succ(X), succ(Y), succ(succ(Z)))
   U34_gga(N, M, Ret, U, isPlus_out_ggg(N, Ret1, U)) -> U35_gga(N, M, Ret, =_in_ag(Ret, U))
   U35_gga(N, M, Ret, =_out_ag(Ret, U)) -> mult_out_gga(N, M, Ret)
   U26_gga(N, M, Ret, mult_out_gga(N, M1, Ret)) -> mult_out_gga(N, M, Ret)
   U7_gg(M, N, mult_out_gga(M, N, Ret1)) -> U8_gg(M, N, mult_in_gga(N, M, Ret2))
   U8_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U5_gg(M, N, X2, =_out_ag(X3, zero)) -> U9_gg(M, N, =_in_gg(X2, X3))
   U9_gg(M, N, =_out_gg(X2, X3)) -> U10_gg(M, N, mult_in_gga(M, N, Ret1))
   U10_gg(M, N, mult_out_gga(M, N, Ret1)) -> U11_gg(M, N, mult_in_gga(N, M, Ret2))
   U11_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U2_gg(M, N, X, =_out_ag(X1, zero)) -> U12_gg(M, N, =_in_gg(X, X1))
   U12_gg(M, N, =_out_gg(X, X1)) -> U13_gg(M, N, =_in_ag(X2, N))
   U13_gg(M, N, =_out_ag(X2, N)) -> U14_gg(M, N, X2, =_in_ag(X3, zero))
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U15_gg(M, N, isGreater_in_gg(X2, X3))
   U15_gg(M, N, isGreater_out_gg(X2, X3)) -> U16_gg(M, N, mult_in_gga(M, N, Ret1))
   U16_gg(M, N, mult_out_gga(M, N, Ret1)) -> U17_gg(M, N, mult_in_gga(N, M, Ret2))
   U17_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)
   U14_gg(M, N, X2, =_out_ag(X3, zero)) -> U18_gg(M, N, =_in_gg(X2, X3))
   U18_gg(M, N, =_out_gg(X2, X3)) -> U19_gg(M, N, mult_in_gga(M, N, Ret1))
   U19_gg(M, N, mult_out_gga(M, N, Ret1)) -> U20_gg(M, N, mult_in_gga(N, M, Ret2))
   U20_gg(M, N, mult_out_gga(N, M, Ret2)) -> main_out_gg(M, N)

The argument filtering Pi contains the following mapping:
main_in_gg(x1, x2)  =  main_in_gg(x1, x2)

U1_gg(x1, x2, x3)  =  U1_gg(x1, x2, x3)

=_in_ag(x1, x2)  =  =_in_ag(x2)

=_out_ag(x1, x2)  =  =_out_ag(x1, x2)

U2_gg(x1, x2, x3, x4)  =  U2_gg(x1, x2, x3, x4)

zero  =  zero

U3_gg(x1, x2, x3)  =  U3_gg(x1, x2, x3)

isGreater_in_gg(x1, x2)  =  isGreater_in_gg(x1, x2)

succ(x1)  =  succ(x1)

isGreater_out_gg(x1, x2)  =  isGreater_out_gg(x1, x2)

pred(x1)  =  pred(x1)

U69_gg(x1, x2, x3)  =  U69_gg(x1, x2, x3)

U70_gg(x1, x2, x3)  =  U70_gg(x1, x2, x3)

U4_gg(x1, x2, x3)  =  U4_gg(x1, x2, x3)

U5_gg(x1, x2, x3, x4)  =  U5_gg(x1, x2, x3, x4)

U6_gg(x1, x2, x3)  =  U6_gg(x1, x2, x3)

U7_gg(x1, x2, x3)  =  U7_gg(x1, x2, x3)

mult_in_gga(x1, x2, x3)  =  mult_in_gga(x1, x2)

U21_gga(x1, x2, x3, x4)  =  U21_gga(x1, x2, x4)

U22_gga(x1, x2, x3, x4, x5)  =  U22_gga(x1, x2, x4, x5)

U23_gga(x1, x2, x3, x4)  =  U23_gga(x1, x2, x4)

isLess_in_gg(x1, x2)  =  isLess_in_gg(x1, x2)

isLess_out_gg(x1, x2)  =  isLess_out_gg(x1, x2)

U71_gg(x1, x2, x3)  =  U71_gg(x1, x2, x3)

U72_gg(x1, x2, x3)  =  U72_gg(x1, x2, x3)

U24_gga(x1, x2, x3, x4)  =  U24_gga(x1, x2, x4)

isMinus_in_gga(x1, x2, x3)  =  isMinus_in_gga(x1, x2)

isMinus_out_gga(x1, x2, x3)  =  isMinus_out_gga(x1, x2, x3)

U40_gga(x1, x2, x3)  =  U40_gga(x1, x3)

U41_gga(x1, x2, x3)  =  U41_gga(x1, x3)

U42_gga(x1, x2, x3, x4)  =  U42_gga(x1, x2, x4)

U43_gga(x1, x2, x3, x4)  =  U43_gga(x1, x2, x4)

U44_gga(x1, x2, x3, x4)  =  U44_gga(x1, x2, x4)

U45_gga(x1, x2, x3, x4)  =  U45_gga(x1, x2, x4)

zero1  =  zero1

U25_gga(x1, x2, x3, x4)  =  U25_gga(x1, x2, x4)

U26_gga(x1, x2, x3, x4)  =  U26_gga(x1, x2, x4)

U27_gga(x1, x2, x3, x4)  =  U27_gga(x1, x2, x4)

U28_gga(x1, x2, x3, x4, x5)  =  U28_gga(x1, x2, x4, x5)

U29_gga(x1, x2, x3, x4)  =  U29_gga(x1, x2, x4)

=_in_gg(x1, x2)  =  =_in_gg(x1, x2)

=_out_gg(x1, x2)  =  =_out_gg(x1, x2)

U30_gga(x1, x2, x3, x4)  =  U30_gga(x1, x2, x4)

mult_out_gga(x1, x2, x3)  =  mult_out_gga(x1, x2, x3)

U31_gga(x1, x2, x3, x4)  =  U31_gga(x1, x2, x4)

U32_gga(x1, x2, x3, x4, x5)  =  U32_gga(x1, x2, x4, x5)

U33_gga(x1, x2, x3, x4, x5)  =  U33_gga(x1, x2, x4, x5)

U34_gga(x1, x2, x3, x4, x5)  =  U34_gga(x1, x2, x4, x5)

isPlus_in_ggg(x1, x2, x3)  =  isPlus_in_ggg(x1, x2, x3)

isPlus_out_ggg(x1, x2, x3)  =  isPlus_out_ggg(x1, x2, x3)

U36_ggg(x1, x2, x3, x4)  =  U36_ggg(x1, x2, x3, x4)

U37_ggg(x1, x2, x3, x4)  =  U37_ggg(x1, x2, x3, x4)

U38_ggg(x1, x2, x3, x4)  =  U38_ggg(x1, x2, x3, x4)

U39_ggg(x1, x2, x3, x4)  =  U39_ggg(x1, x2, x3, x4)

U35_gga(x1, x2, x3, x4)  =  U35_gga(x1, x2, x4)

U8_gg(x1, x2, x3)  =  U8_gg(x1, x2, x3)

main_out_gg(x1, x2)  =  main_out_gg(x1, x2)

U9_gg(x1, x2, x3)  =  U9_gg(x1, x2, x3)

U10_gg(x1, x2, x3)  =  U10_gg(x1, x2, x3)

U11_gg(x1, x2, x3)  =  U11_gg(x1, x2, x3)

U12_gg(x1, x2, x3)  =  U12_gg(x1, x2, x3)

U13_gg(x1, x2, x3)  =  U13_gg(x1, x2, x3)

U14_gg(x1, x2, x3, x4)  =  U14_gg(x1, x2, x3, x4)

U15_gg(x1, x2, x3)  =  U15_gg(x1, x2, x3)

U16_gg(x1, x2, x3)  =  U16_gg(x1, x2, x3)

U17_gg(x1, x2, x3)  =  U17_gg(x1, x2, x3)

U18_gg(x1, x2, x3)  =  U18_gg(x1, x2, x3)

U19_gg(x1, x2, x3)  =  U19_gg(x1, x2, x3)

U20_gg(x1, x2, x3)  =  U20_gg(x1, x2, x3)

ISGREATER_IN_GG(x1, x2)  =  ISGREATER_IN_GG(x1, x2)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(321) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(322)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)

R is empty.
Pi is empty.
We have to consider all (P,R,Pi)-chains
----------------------------------------

(323) PiDPToQDPProof (EQUIVALENT)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(324)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
   ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(325) QDPSizeChangeProof (EQUIVALENT)
By using the subterm criterion [SUBTERM_CRITERION] together with the size-change analysis [AAECC05] we have proven that there are no infinite chains for this DP problem. 

From the DPs we obtained the following set of size-change graphs:
*ISGREATER_IN_GG(pred(X), pred(Y)) -> ISGREATER_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


*ISGREATER_IN_GG(succ(X), succ(Y)) -> ISGREATER_IN_GG(X, Y)
The graph contains the following edges 1 > 1, 2 > 2


----------------------------------------

(326)
YES
