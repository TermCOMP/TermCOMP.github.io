Graph construction failed
Graph construction failed
Graph construction failed
MAYBE
proof of /hpcwork/ff862203/termcomp25/benchmarks/E1M4a.pl
# AProVE Commit ID: 6a57d5d12fc64508e0a03bd649c96e4df8acddf2 jan-christoph 20250809 unpublished dirty


Left Termination of the query pattern

q(a,a)

w.r.t. the given Prolog program could not be shown:

(0) Prolog
(1) CutEliminatorProof [SOUND, 0 ms]
(2) Prolog
(3) UndefinedPredicateHandlerProof [SOUND, 0 ms]
(4) Prolog
(5) PrologToPiTRSProof [SOUND, 0 ms]
(6) PiTRS
    (7) DependencyPairsProof [EQUIVALENT, 0 ms]
    (8) PiDP
    (9) DependencyGraphProof [EQUIVALENT, 0 ms]
    (10) PiDP
    (11) UsableRulesProof [EQUIVALENT, 0 ms]
    (12) PiDP
    (13) PiDPToQDPProof [SOUND, 0 ms]
    (14) QDP
    (15) NonTerminationLoopProof [COMPLETE, 0 ms]
    (16) NO
(17) PrologToPiTRSProof [SOUND, 0 ms]
(18) PiTRS
    (19) DependencyPairsProof [EQUIVALENT, 0 ms]
    (20) PiDP
    (21) DependencyGraphProof [EQUIVALENT, 0 ms]
    (22) PiDP
    (23) UsableRulesProof [EQUIVALENT, 0 ms]
    (24) PiDP
    (25) PiDPToQDPProof [SOUND, 0 ms]
    (26) QDP
    (27) NonTerminationLoopProof [COMPLETE, 0 ms]
    (28) NO


----------------------------------------

(0)
Obligation:
Clauses:

q(X, Y) :- ','(==(X, Y), p(X, Y)).
p(X, X) :- !.
p(X, Y) :- p(X, Y).


Query: q(a,a)
----------------------------------------

(1) CutEliminatorProof (SOUND)
Eliminated all cuts by simply ignoring them[PROLOG].
----------------------------------------

(2)
Obligation:
Clauses:

q(X, Y) :- ','(==(X, Y), p(X, Y)).
p(X, X).
p(X, Y) :- p(X, Y).


Query: q(a,a)
----------------------------------------

(3) UndefinedPredicateHandlerProof (SOUND)
Added facts for all undefined predicates [PROLOG].
----------------------------------------

(4)
Obligation:
Clauses:

q(X, Y) :- ','(==(X, Y), p(X, Y)).
p(X, X).
p(X, Y) :- p(X, Y).
==(X0, X1).


Query: q(a,a)
----------------------------------------

(5) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

q_in_2: (f,f)

p_in_2: (f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U1_aa(X, Y, ==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, X) -> p_out_aa(X, X)
   p_in_aa(X, Y) -> U3_aa(X, Y, p_in_aa(X, Y))
   U3_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

q_out_aa(x1, x2)  =  q_out_aa





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(6)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U1_aa(X, Y, ==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, X) -> p_out_aa(X, X)
   p_in_aa(X, Y) -> U3_aa(X, Y, p_in_aa(X, Y))
   U3_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

q_out_aa(x1, x2)  =  q_out_aa



----------------------------------------

(7) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   Q_IN_AA(X, Y) -> U1_AA(X, Y, ==_in_aa(X, Y))
   Q_IN_AA(X, Y) -> ==_IN_AA(X, Y)
   U1_AA(X, Y, ==_out_aa(X, Y)) -> U2_AA(X, Y, p_in_aa(X, Y))
   U1_AA(X, Y, ==_out_aa(X, Y)) -> P_IN_AA(X, Y)
   P_IN_AA(X, Y) -> U3_AA(X, Y, p_in_aa(X, Y))
   P_IN_AA(X, Y) -> P_IN_AA(X, Y)

The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U1_aa(X, Y, ==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, X) -> p_out_aa(X, X)
   p_in_aa(X, Y) -> U3_aa(X, Y, p_in_aa(X, Y))
   U3_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

q_out_aa(x1, x2)  =  q_out_aa

Q_IN_AA(x1, x2)  =  Q_IN_AA

U1_AA(x1, x2, x3)  =  U1_AA(x3)

==_IN_AA(x1, x2)  =  ==_IN_AA

U2_AA(x1, x2, x3)  =  U2_AA(x3)

P_IN_AA(x1, x2)  =  P_IN_AA

U3_AA(x1, x2, x3)  =  U3_AA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(8)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   Q_IN_AA(X, Y) -> U1_AA(X, Y, ==_in_aa(X, Y))
   Q_IN_AA(X, Y) -> ==_IN_AA(X, Y)
   U1_AA(X, Y, ==_out_aa(X, Y)) -> U2_AA(X, Y, p_in_aa(X, Y))
   U1_AA(X, Y, ==_out_aa(X, Y)) -> P_IN_AA(X, Y)
   P_IN_AA(X, Y) -> U3_AA(X, Y, p_in_aa(X, Y))
   P_IN_AA(X, Y) -> P_IN_AA(X, Y)

The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U1_aa(X, Y, ==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, X) -> p_out_aa(X, X)
   p_in_aa(X, Y) -> U3_aa(X, Y, p_in_aa(X, Y))
   U3_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

q_out_aa(x1, x2)  =  q_out_aa

Q_IN_AA(x1, x2)  =  Q_IN_AA

U1_AA(x1, x2, x3)  =  U1_AA(x3)

==_IN_AA(x1, x2)  =  ==_IN_AA

U2_AA(x1, x2, x3)  =  U2_AA(x3)

P_IN_AA(x1, x2)  =  P_IN_AA

U3_AA(x1, x2, x3)  =  U3_AA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(9) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 5 less nodes.
----------------------------------------

(10)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_AA(X, Y) -> P_IN_AA(X, Y)

The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U1_aa(X, Y, ==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, X) -> p_out_aa(X, X)
   p_in_aa(X, Y) -> U3_aa(X, Y, p_in_aa(X, Y))
   U3_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

q_out_aa(x1, x2)  =  q_out_aa

P_IN_AA(x1, x2)  =  P_IN_AA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(11) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(12)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_AA(X, Y) -> P_IN_AA(X, Y)

R is empty.
The argument filtering Pi contains the following mapping:
P_IN_AA(x1, x2)  =  P_IN_AA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(13) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(14)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_AA -> P_IN_AA

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(15) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = P_IN_AA evaluates to  t =P_IN_AA

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from P_IN_AA to P_IN_AA.




----------------------------------------

(16)
NO

----------------------------------------

(17) PrologToPiTRSProof (SOUND)
We use the technique of [TOCL09]. With regard to the inferred argument filtering the predicates were used in the following modes:

q_in_2: (f,f)

p_in_2: (f,f)

Transforming Prolog into the following Term Rewriting System:

Pi-finite rewrite system:
The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U1_aa(X, Y, ==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, X) -> p_out_aa(X, X)
   p_in_aa(X, Y) -> U3_aa(X, Y, p_in_aa(X, Y))
   U3_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

q_out_aa(x1, x2)  =  q_out_aa





Infinitary Constructor Rewriting Termination of PiTRS implies Termination of Prolog



----------------------------------------

(18)
Obligation:
Pi-finite rewrite system:
The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U1_aa(X, Y, ==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, X) -> p_out_aa(X, X)
   p_in_aa(X, Y) -> U3_aa(X, Y, p_in_aa(X, Y))
   U3_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

q_out_aa(x1, x2)  =  q_out_aa



----------------------------------------

(19) DependencyPairsProof (EQUIVALENT)
Using Dependency Pairs [AG00,LOPSTR] we result in the following initial DP problem:
Pi DP problem:
The TRS P consists of the following rules:

   Q_IN_AA(X, Y) -> U1_AA(X, Y, ==_in_aa(X, Y))
   Q_IN_AA(X, Y) -> ==_IN_AA(X, Y)
   U1_AA(X, Y, ==_out_aa(X, Y)) -> U2_AA(X, Y, p_in_aa(X, Y))
   U1_AA(X, Y, ==_out_aa(X, Y)) -> P_IN_AA(X, Y)
   P_IN_AA(X, Y) -> U3_AA(X, Y, p_in_aa(X, Y))
   P_IN_AA(X, Y) -> P_IN_AA(X, Y)

The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U1_aa(X, Y, ==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, X) -> p_out_aa(X, X)
   p_in_aa(X, Y) -> U3_aa(X, Y, p_in_aa(X, Y))
   U3_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

q_out_aa(x1, x2)  =  q_out_aa

Q_IN_AA(x1, x2)  =  Q_IN_AA

U1_AA(x1, x2, x3)  =  U1_AA(x3)

==_IN_AA(x1, x2)  =  ==_IN_AA

U2_AA(x1, x2, x3)  =  U2_AA(x3)

P_IN_AA(x1, x2)  =  P_IN_AA

U3_AA(x1, x2, x3)  =  U3_AA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(20)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   Q_IN_AA(X, Y) -> U1_AA(X, Y, ==_in_aa(X, Y))
   Q_IN_AA(X, Y) -> ==_IN_AA(X, Y)
   U1_AA(X, Y, ==_out_aa(X, Y)) -> U2_AA(X, Y, p_in_aa(X, Y))
   U1_AA(X, Y, ==_out_aa(X, Y)) -> P_IN_AA(X, Y)
   P_IN_AA(X, Y) -> U3_AA(X, Y, p_in_aa(X, Y))
   P_IN_AA(X, Y) -> P_IN_AA(X, Y)

The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U1_aa(X, Y, ==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, X) -> p_out_aa(X, X)
   p_in_aa(X, Y) -> U3_aa(X, Y, p_in_aa(X, Y))
   U3_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

q_out_aa(x1, x2)  =  q_out_aa

Q_IN_AA(x1, x2)  =  Q_IN_AA

U1_AA(x1, x2, x3)  =  U1_AA(x3)

==_IN_AA(x1, x2)  =  ==_IN_AA

U2_AA(x1, x2, x3)  =  U2_AA(x3)

P_IN_AA(x1, x2)  =  P_IN_AA

U3_AA(x1, x2, x3)  =  U3_AA(x3)


We have to consider all (P,R,Pi)-chains
----------------------------------------

(21) DependencyGraphProof (EQUIVALENT)
The approximation of the Dependency Graph [LOPSTR] contains 1 SCC with 5 less nodes.
----------------------------------------

(22)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_AA(X, Y) -> P_IN_AA(X, Y)

The TRS R consists of the following rules:

   q_in_aa(X, Y) -> U1_aa(X, Y, ==_in_aa(X, Y))
   ==_in_aa(X0, X1) -> ==_out_aa(X0, X1)
   U1_aa(X, Y, ==_out_aa(X, Y)) -> U2_aa(X, Y, p_in_aa(X, Y))
   p_in_aa(X, X) -> p_out_aa(X, X)
   p_in_aa(X, Y) -> U3_aa(X, Y, p_in_aa(X, Y))
   U3_aa(X, Y, p_out_aa(X, Y)) -> p_out_aa(X, Y)
   U2_aa(X, Y, p_out_aa(X, Y)) -> q_out_aa(X, Y)

The argument filtering Pi contains the following mapping:
q_in_aa(x1, x2)  =  q_in_aa

U1_aa(x1, x2, x3)  =  U1_aa(x3)

==_in_aa(x1, x2)  =  ==_in_aa

==_out_aa(x1, x2)  =  ==_out_aa

U2_aa(x1, x2, x3)  =  U2_aa(x3)

p_in_aa(x1, x2)  =  p_in_aa

p_out_aa(x1, x2)  =  p_out_aa

U3_aa(x1, x2, x3)  =  U3_aa(x3)

q_out_aa(x1, x2)  =  q_out_aa

P_IN_AA(x1, x2)  =  P_IN_AA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(23) UsableRulesProof (EQUIVALENT)
For (infinitary) constructor rewriting [LOPSTR] we can delete all non-usable rules from R.
----------------------------------------

(24)
Obligation:
Pi DP problem:
The TRS P consists of the following rules:

   P_IN_AA(X, Y) -> P_IN_AA(X, Y)

R is empty.
The argument filtering Pi contains the following mapping:
P_IN_AA(x1, x2)  =  P_IN_AA


We have to consider all (P,R,Pi)-chains
----------------------------------------

(25) PiDPToQDPProof (SOUND)
Transforming (infinitary) constructor rewriting Pi-DP problem [LOPSTR] into ordinary QDP problem [LPAR04] by application of Pi.
----------------------------------------

(26)
Obligation:
Q DP problem:
The TRS P consists of the following rules:

   P_IN_AA -> P_IN_AA

R is empty.
Q is empty.
We have to consider all (P,Q,R)-chains.
----------------------------------------

(27) NonTerminationLoopProof (COMPLETE)
We used the non-termination processor [FROCOS05] to show that the DP problem is infinite.
Found a loop by semiunifying a rule from P directly.

s = P_IN_AA evaluates to  t =P_IN_AA

Thus s starts an infinite chain as s semiunifies with t with the following substitutions:
* Matcher: [ ]
* Semiunifier: [ ]

--------------------------------------------------------------------------------
Rewriting sequence

The DP semiunifies directly so there is only one rewrite step from P_IN_AA to P_IN_AA.




----------------------------------------

(28)
NO
